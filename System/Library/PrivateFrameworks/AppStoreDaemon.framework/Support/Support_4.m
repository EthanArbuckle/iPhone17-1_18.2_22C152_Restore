void sub_10030023C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100300254(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  v7 = sub_100009C60(v6, v5, v4, 0);

  return v7;
}

void sub_1003002CC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

void sub_100300558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100300578(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _calculatePurgeableSpace];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id sub_100300694(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_purgeForDesiredSpace:", objc_msgSend(*(id *)(a1 + 40), "longLongValue"));
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

id sub_10030078C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _calculatePurgeableSpace];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100300868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100300880(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054C678];
  id v5 = [v3 connection];
  uint64_t v6 = sub_1002FF548((uint64_t)AppInstallEntity, v5, v4);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10030098C;
  v9[3] = &unk_100522CD0;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v7;
  id v8 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v9];
}

void sub_10030098C(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  uint64_t v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  [(SQLiteEntity *)v6 valueForProperty:@"download_path"];
  memset(&v12, 0, sizeof(v12));
  id v7 = objc_claimAutoreleasedReturnValue();
  int v8 = stat((const char *)objc_msgSend(v7, "fileSystemRepresentation", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), &v12);
  blkcnt_t st_blocks = v12.st_blocks;
  if (v8) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v12.st_blocks < 1;
  }
  if (!v10)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v12.st_blocks << 9;
    uint64_t v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      id v14 = v7;
      __int16 v15 = 2048;
      blkcnt_t v16 = st_blocks << 9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Purgable asset: %{public}@ size: %{bytes}ld", buf, 0x16u);
    }
  }
}

void sub_100300D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100300D4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054C678];
  id v5 = [v3 connection];
  uint64_t v6 = sub_1002FF548((uint64_t)AppInstallEntity, v5, v4);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100300E58;
  v9[3] = &unk_100522CD0;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v7;
  id v8 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v9];
}

void sub_100300E58(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  uint64_t v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  uint64_t v7 = [(SQLiteEntity *)v6 valueForProperty:@"download_path"];
  id v8 = +[NSFileManager defaultManager];
  if ([v8 fileExistsAtPath:v7])
  {
    v9 = [v8 attributesOfItemAtPath:v7 error:0];
    id v10 = [v9 objectForKey:NSFileSize];
    if ([v10 unsignedLongLongValue])
    {
      __int16 v15 = [v9 fileModificationDate];
      uint64_t v11 = +[NSNumber numberWithLongLong:a2];
      stat v12 = sub_1002C1FCC(v6);
      v13 = sub_1002C1EE8(v6);
      v16[0] = @"date";
      v16[1] = @"installID";
      v17[0] = v15;
      v17[1] = v11;
      v16[2] = @"size";
      v16[3] = @"bundleID";
      v17[2] = v10;
      v17[3] = v12;
      v16[4] = @"logKey";
      v17[4] = v13;
      id v14 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:5];
      [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v14];
    }
  }
}

uint64_t sub_100301064(void *a1, void *a2)
{
  v20 = a2;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = *(id *)(*(void *)(a1[4] + 8) + 40);
  id v3 = [obj countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v22;
    *(void *)&long long v4 = 138412290;
    long long v18 = v4;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v22 != v6) {
        objc_enumerationMutation(obj);
      }
      id v8 = *(void **)(*((void *)&v21 + 1) + 8 * v7);
      v9 = objc_msgSend(v8, "objectForKeyedSubscript:", @"installID", v18);
      id v10 = [v8 objectForKeyedSubscript:@"size"];
      uint64_t v11 = [v8 objectForKeyedSubscript:@"bundleID"];
      stat v12 = [v8 objectForKeyedSubscript:@"logKey"];
      v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = v18;
        v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@] Canceling download due to CacheDelete policy", buf, 0xCu);
      }

      sub_100237218(v20, (uint64_t)[v9 longLongValue], -30);
      id v14 = sub_100388088();
      sub_1003886AC((uint64_t)v14, v11);

      *(void *)(*(void *)(a1[5] + 8) + 24) += [v10 unsignedLongLongValue];
      uint64_t v15 = a1[6];
      uint64_t v16 = *(void *)(*(void *)(a1[5] + 8) + 24);

      if (v16 > v15) {
        break;
      }
      if (v5 == (id)++v7)
      {
        id v5 = [obj countByEnumeratingWithState:&v21 objects:v27 count:16];
        if (v5) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  return 1;
}

SystemAppLookupTask *sub_1003012F8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [SystemAppLookupTask alloc];
  id v4 = v2;
  if (v3)
  {
    v8.receiver = v3;
    v8.super_class = (Class)SystemAppLookupTask;
    id v3 = (SystemAppLookupTask *)objc_msgSendSuper2(&v8, "init");
    if (v3)
    {
      id v5 = (NSArray *)[objc_alloc((Class)NSArray) initWithArray:v4 copyItems:1];
      bundleIDs = v3->_bundleIDs;
      v3->_bundleIDs = v5;
    }
  }

  return v3;
}

void sub_1003013C0(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = objc_alloc_init((Class)MADownloadOptions);
  [v3 setAllowsCellularAccess:1];
  [v3 setAllowsExpensiveAccess:1];
  [v3 setCanUseLocalCacheServer:1];
  [v3 setDiscretionary:0];
  [v3 setRequiresPowerPluggedIn:0];
  [v3 setTimeoutIntervalForResource:60];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003014E0;
  v6[3] = &unk_100527790;
  uint64_t v4 = *(void *)(a1 + 32);
  dispatch_semaphore_t v7 = v2;
  uint64_t v8 = v4;
  id v5 = v2;
  +[MAAsset startCatalogDownload:@"com.apple.MobileAsset.SystemApp" options:v3 completionWithError:v6];
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_1003014E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  if (a2)
  {
    dispatch_semaphore_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 134218242;
      uint64_t v9 = a2;
      __int16 v10 = 2114;
      id v11 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to update MobileAsset catalog with result %ld: %{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100301CEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v6 setDoNotBlockOnNetworkStatus:1];
  [v6 setDoNotBlockBeforeFirstUnlock:1];
  [v6 addKeyValuePair:@"AppBundleID" with:v5];

  [v6 addKeyValuePair:@"BuildID" with:*(void *)(a1 + 32)];
  [v6 addKeyValuePair:@"SystemImageID" with:*(void *)(a1 + 40)];
  [v6 returnTypes:5];
  id v7 = [v6 queryMetaDataSync];

  return v7;
}

id sub_100301DF0()
{
  self;
  v0 = +[AMSProcessInfo currentProcess];
  v1 = +[AMSUserAgent userAgentForProcessInfo:v0];

  return v1;
}

void sub_1003027FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_100302838(void *a1, void *a2)
{
  id v3 = a2;
  if (([v3 hasMIDBasedSINF] & 1) != 0
    || ![v3 missingRequiredSINF]
    || ![v3 isConfiguratorInstall])
  {
    if ([v3 isInstalled]
      && [v3 isStoreOriginated]
      && ([v3 isAppClip] & 1) == 0)
    {
      v38 = [v3 bundlePath];
      id v10 = +[ASFReceipt receiptFromBundleAtPath:v38];

      if (v10 && ([v10 isVPPLicensed] & 1) != 0)
      {
        uint64_t v12 = a1[4];
        id v39 = v3;
        id v10 = v10;
        if (!v12) {
          goto LABEL_99;
        }
LABEL_19:
        uint64_t v15 = sub_100224624((id *)[AppReceiptTask alloc], v3);
        v17 = v15;
        if (v15) {
          objc_setProperty_nonatomic_copy(v15, v16, *(id *)(v12 + 144), 64);
        }
        if (v10)
        {
          unsigned int v18 = [v10 isVPPLicensed];
          if (v17)
          {
            if (v18) {
              v17[9] = (id)8;
            }
          }
        }
        Property = sub_1003F013C((id *)v3);
        long long v21 = Property;
        if (Property) {
          Property = objc_getProperty(Property, v20, 16, 1);
        }
        id v22 = Property;

        if (v22)
        {
          if (v21)
          {
            id v24 = objc_getProperty(v21, v23, 16, 1);
            if (v24)
            {
              v25 = v24;
              v26 = +[ACAccountStore ams_sharedAccountStore];
              v27 = objc_msgSend(v26, "ams_iTunesAccountWithDSID:", v25);

              if (v17) {
                objc_setProperty_nonatomic_copy(v17, v28, v27, 56);
              }
            }
          }
        }
        id v111 = 0;
        unsigned __int8 v29 = [(id)v12 runSubTask:v17 returningError:&v111];
        id v30 = v111;
        if (v17)
        {
          id v31 = v17[10];
          v32 = v31;
          if (v29)
          {
            if (v31
              && (([v31 isRevoked] & 1) != 0 || *((unsigned char *)v17 + 49))
              && [v32 isVPPLicensed]
              && ([v3 hasMIDBasedSINF] & 1) == 0
              && (sub_10028CBCC((void *)v12, v3) & 1) == 0)
            {
              v33 = *(void **)(v12 + 112);
              [v3 bundleID];
              v34 = v107 = v32;
              [v33 setObject:v3 forKeyedSubscript:v34];

              v32 = v107;
            }
            goto LABEL_42;
          }
        }
        else
        {
          v32 = 0;
          if (v29)
          {
LABEL_42:
            if (os_variant_has_internal_content())
            {
              v108 = v32;
              v35 = *(void **)(v12 + 112);
              v36 = [v3 bundleID];
              v37 = [v35 objectForKeyedSubscript:v36];
              if (v37 || (v40 = *(void **)(v12 + 128)) == 0)
              {
              }
              else
              {
                id v101 = v30;
                v41 = [v3 bundleID];
                unsigned int v42 = [v40 containsObject:v41];

                if (v42)
                {
                  v43 = *(void **)(v12 + 112);
                  v44 = [v3 bundleID];
                  [v43 setObject:v3 forKeyedSubscript:v44];

                  v45 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                  {
                    v46 = *(void **)(v12 + 144);
                    id v47 = v46;
                    v48 = [v3 bundleID];
                    *(_DWORD *)buf = 138412546;
                    v114 = v46;
                    __int16 v115 = 2114;
                    uint64_t v116 = (uint64_t)v48;
                    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Marking as QA revoked", buf, 0x16u);
                  }
                }
                id v30 = v101;
              }
              v32 = v108;
            }
            goto LABEL_98;
          }
        }
        v105 = v21;
        v49 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          id v103 = v30;
          v85 = *(void **)(v12 + 144);
          id v86 = v85;
          [v3 bundleID];
          v87 = v110 = v32;
          *(_DWORD *)buf = 138412802;
          v114 = v85;
          id v30 = v103;
          __int16 v115 = 2114;
          uint64_t v116 = (uint64_t)v87;
          __int16 v117 = 2114;
          uint64_t v118 = (uint64_t)v103;
          _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] Failed to get receipt with error: %{public}@", buf, 0x20u);

          v32 = v110;
        }

        if (!v10)
        {
          long long v21 = v105;
LABEL_98:

LABEL_99:
          ++*(void *)(*(void *)(a1[6] + 8) + 24);
LABEL_100:

          goto LABEL_101;
        }
        id v102 = v30;
        id v50 = v3;
        v51 = [v10 expirationDate];
        v104 = v50;
        v109 = v32;
        if (os_variant_has_internal_content())
        {
          v52 = *(void **)(v12 + 120);
          v53 = [v50 bundleID];
          v54 = [v52 objectForKeyedSubscript:v53];

          if (v54)
          {
            v55 = *(void **)(v12 + 120);
            v56 = [v50 bundleID];
            v57 = [v55 objectForKeyedSubscript:v56];

            v58 = ASDLogHandleForCategory();
            long long v21 = v105;
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              v59 = *(void **)(v12 + 144);
              id v99 = v59;
              v97 = [v104 bundleID];
              if (v57)
              {
                [v57 timeIntervalSince1970];
                uint64_t v61 = (uint64_t)v60;
              }
              else
              {
                uint64_t v61 = 0;
              }
              *(_DWORD *)buf = 138412802;
              v114 = v59;
              __int16 v115 = 2114;
              uint64_t v116 = (uint64_t)v97;
              __int16 v117 = 2048;
              uint64_t v118 = v61;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Using QA receipt expiration date: %{time_t}ld ", buf, 0x20u);
            }
            v32 = v109;
            if (!v57) {
              goto LABEL_97;
            }
          }
          else
          {
            v57 = v51;
            long long v21 = v105;
            v32 = v109;
            if (!v51)
            {
LABEL_97:

              id v30 = v102;
              goto LABEL_98;
            }
          }
        }
        else
        {
          v57 = v51;
          long long v21 = v105;
          if (!v51) {
            goto LABEL_97;
          }
        }
        v62 = +[NSDate date];
        [v57 timeIntervalSinceDate:v62];
        int v64 = (int)v63;
        if ((int)v63 < 1)
        {
LABEL_96:

          v32 = v109;
          goto LABEL_97;
        }
        v95 = v57;
        v98 = v62;
        v65 = sub_10030B11C();
        id v112 = 0;
        v100 = sub_10030B8A4((uint64_t)v65, @"receipt-expiration-warning-threshold", &v112);
        id v66 = v112;

        v96 = v66;
        if (v66)
        {
          v67 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            v88 = *(void **)(v12 + 144);
            id v94 = v88;
            uint64_t v89 = [v104 bundleID];
            *(_DWORD *)buf = 138412802;
            v114 = v88;
            __int16 v115 = 2114;
            uint64_t v116 = v89;
            v90 = (void *)v89;
            __int16 v117 = 2114;
            uint64_t v118 = (uint64_t)v96;
            _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] Falling back to default threshold following error loading bag key: %{public}@", buf, 0x20u);
          }
        }
        double v68 = (double)v64;
        double v69 = 604800.0;
        if (v100)
        {
          v70 = v104;
          v57 = v95;
          if (objc_opt_respondsToSelector()) {
            double v69 = (double)(uint64_t)[v100 integerValue];
          }
        }
        else
        {
          v70 = v104;
          v57 = v95;
        }
        v71 = ASDLogHandleForCategory();
        BOOL v72 = os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
        if (v69 >= v68)
        {
          if (v72)
          {
            v77 = v70;
            v78 = *(void **)(v12 + 144);
            id v93 = v78;
            v79 = [v77 bundleID];
            if (v98)
            {
              [v98 timeIntervalSince1970];
              objc_msgSend(v57, "timeIntervalSince1970", (uint64_t)v80);
            }
            else
            {
              objc_msgSend(v57, "timeIntervalSince1970", 0);
            }
            *(_DWORD *)buf = 138413314;
            v114 = v78;
            __int16 v115 = 2114;
            uint64_t v116 = (uint64_t)v79;
            __int16 v117 = 2048;
            uint64_t v118 = (uint64_t)(v68 / 86400.0);
            __int16 v119 = 2048;
            uint64_t v120 = v91;
            __int16 v121 = 2048;
            uint64_t v122 = (uint64_t)v81;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Receipt expiration in %ld days today: %{time_t}ld expiration: %{time_t}ld", buf, 0x34u);

            v70 = v104;
            long long v21 = v105;
          }

          v82 = *(void **)(v12 + 88);
          v83 = [v70 bundleID];
          [v82 setObject:v57 forKeyedSubscript:v83];

          if (*(void *)(v12 + 104) && objc_msgSend(v57, "compare:") == (id)1) {
            goto LABEL_95;
          }
          objc_storeStrong((id *)(v12 + 104), v57);
          id v84 = v104;
          v71 = *(NSObject **)(v12 + 96);
          *(void *)(v12 + 96) = v84;
        }
        else if (v72)
        {
          v73 = *(void **)(v12 + 144);
          id v106 = v73;
          v92 = [v104 bundleID];
          if (v98)
          {
            [v98 timeIntervalSince1970];
            uint64_t v75 = (uint64_t)v74;
          }
          else
          {
            uint64_t v75 = 0;
          }
          [v57 timeIntervalSince1970];
          *(_DWORD *)buf = 138413314;
          v114 = v73;
          __int16 v115 = 2114;
          uint64_t v116 = (uint64_t)v92;
          __int16 v117 = 2048;
          uint64_t v118 = (uint64_t)(v68 / 86400.0);
          __int16 v119 = 2048;
          uint64_t v120 = v75;
          __int16 v121 = 2048;
          uint64_t v122 = (uint64_t)v76;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] [Silent] Receipt expiration in %ld days today: %{time_t}ld expiration: %{time_t}ld", buf, 0x34u);
        }
LABEL_95:

        v62 = v98;
        goto LABEL_96;
      }
      char v11 = 1;
    }
    else
    {
      id v10 = 0;
      char v11 = 0;
    }
    if (!os_variant_has_internal_content()) {
      goto LABEL_100;
    }
    uint64_t v12 = a1[4];
    if (!v12) {
      goto LABEL_100;
    }
    char v13 = v11 ^ 1;
    if (!*(unsigned char *)(v12 + 136)) {
      char v13 = 1;
    }
    if (v13) {
      goto LABEL_100;
    }
    id v14 = v3;
    id v10 = v10;
    goto LABEL_19;
  }
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    if (v6) {
      id v7 = *(void **)(v6 + 144);
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;
    uint64_t v9 = [v3 bundleID];
    *(_DWORD *)buf = 138412546;
    v114 = v7;
    __int16 v115 = 2114;
    uint64_t v116 = (uint64_t)v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Receipt refresh migrating VPP app", buf, 0x16u);
  }
  sub_10028CBCC((void *)a1[4], v3);
  ++*(void *)(*(void *)(a1[5] + 8) + 24);
LABEL_101:
}

id sub_1003036C8(id result)
{
  if (result)
  {
    v1 = result;
    dispatch_semaphore_t v2 = [result completionBlock];

    if (v2)
    {
      id v3 = [v1 completionBlock];
      id v4 = [v3 copy];

      id v5 = dispatch_get_global_queue(21, 0);
      id v7 = _NSConcreteStackBlock;
      uint64_t v8 = 3221225472;
      uint64_t v9 = sub_1003038CC;
      id v10 = &unk_100521AE0;
      char v11 = v1;
      id v12 = v4;
      id v6 = v4;
      dispatch_async(v5, &v7);
    }
    return objc_msgSend(v1, "setCompletionBlock:", 0, v7, v8, v9, v10, v11);
  }
  return result;
}

id sub_1003037BC(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 32, 1);
  }
  return result;
}

uint64_t sub_1003037D4(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 24) & 1;
  }
  return result;
}

uint64_t sub_1003038CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

NSObject *sub_1003038E4(NSObject *a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_13;
  }
  v9.receiver = a1;
  v9.super_class = (Class)XDCDevice;
  id v4 = [&v9 init];
  a1 = v4;
  if (!v4) {
    goto LABEL_13;
  }
  sub_100303A94((uint64_t)v4, v3);
  if (!a1[1].isa)
  {
    id v6 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_11:

      id v5 = a1;
      a1 = 0;
LABEL_12:

      goto LABEL_13;
    }
    *(_DWORD *)buf = 138543362;
    id v11 = v3;
    id v7 = "Failed find matching device for: %{public}@";
LABEL_15:
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v7, buf, 0xCu);
    goto LABEL_11;
  }
  if (!a1[3].isa)
  {
    id v6 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    *(_DWORD *)buf = 138543362;
    id v11 = v3;
    id v7 = "Failed to get destination identifier for: %{public}@";
    goto LABEL_15;
  }
  if (!BYTE2(a1[2].isa))
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unsupported device: %{public}@", buf, 0xCu);
    }
    goto LABEL_12;
  }
LABEL_13:

  return a1;
}

void sub_100303A94(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v12 = v3;
    unsigned int v4 = [v3 isActive];
    if (v4) {
      LOBYTE(v4) = [v12 isLocallyPaired];
    }
    *(unsigned char *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 17) = [v12 isConnected];
    id v5 = +[NRPairedDeviceRegistry sharedInstance];
    uint64_t v6 = [v5 deviceForIDSDevice:v12];
    id v7 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v6;

    uint64_t v8 = IDSCopyIDForDevice();
    objc_super v9 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v8;

    *(unsigned char *)(a1 + 18) = (unint64_t)[v12 serviceMinCompatibilityVersion] > 7;
    uint64_t v10 = [v12 modelIdentifier];
    id v11 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v10;

    *(unsigned char *)(a1 + 19) = 0;
    id v3 = v12;
  }
}

id *sub_100303B70(id *a1)
{
  if (a1)
  {
    a1 = [a1[1] pairingID];
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_100303BA4(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    id v3 = [v1[1] valueForProperty:NRDevicePropertyProductType];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = 0;
    }
    id v5 = v4;

    [v2 setObject:v5 forKeyedSubscript:@"X-Apple-TA-Device"];
    uint64_t v6 = [v1[1] valueForProperty:NRDevicePropertySystemVersion];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;

    [v2 setObject:v8 forKeyedSubscript:@"X-Apple-TA-OS-Version"];
    if ([v2 count]) {
      uint64_t v1 = (id *)[v2 copy];
    }
    else {
      uint64_t v1 = 0;
    }
  }
  return v1;
}

unsigned char *sub_100303DA8(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  unsigned int v4 = [InstallTestFlightAppsTask alloc];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100303E94;
  v8[3] = &unk_100527948;
  v8[4] = v3;
  id v5 = sub_1003923F8(v2, v8);

  uint64_t v6 = sub_1003048E8(v4, v5);
  v6[48] = 1;
  return v6;
}

AppInstall *sub_100303E94(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  if (v2) {
    id v4 = v2[9];
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  [v3 setObject:v5 forKeyedSubscript:@"bundle_id"];

  uint64_t v6 = +[NSUUID UUID];
  [v3 setObject:v6 forKeyedSubscript:@"external_id"];

  id v7 = sub_1003305E0();
  if (v2)
  {
    if (((_WORD)v2[26] & 8) != 0)
    {
      id v8 = +[NSNumber numberWithUnsignedLongLong:v2[4]];
      objc_msgSend(v7, "ams_setDSID:", v8);
    }
    id v9 = v2[6];
    if (v9)
    {
      id v10 = v9;
      [v7 setUsername:v10];
    }
    id v11 = v2[5];
    if (v11)
    {
      id v12 = v11;
      objc_msgSend(v7, "ams_setAltDSID:", v12);
    }
  }
  char v13 = sub_1003072FC((uint64_t)ACAccountStore, v7);

  if (v13)
  {
    id v14 = objc_msgSend(v13, "ams_DSID");
    [v3 setObject:v14 forKeyedSubscript:@"account_id"];

    uint64_t v15 = objc_msgSend(v13, "ams_altDSID");
    [v3 setObject:v15 forKeyedSubscript:@"alt_dsid"];

    uint64_t v16 = [v13 username];
    [v3 setObject:v16 forKeyedSubscript:@"apple_id"];
  }
  if (v2) {
    id v17 = v2[7];
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;
  if ([v18 length])
  {
    v19 = +[NSURL URLWithString:v18];
    [v3 setObject:v19 forKeyedSubscript:@"artwork_url"];
  }
  if (v2)
  {
    if (((_WORD)v2[26] & 4) != 0)
    {
      v20 = +[NSNumber numberWithUnsignedLongLong:v2[3]];
      [v3 setObject:v20 forKeyedSubscript:@"item_id"];
    }
    id v21 = v2[12];
    [v3 setObject:v21 forKeyedSubscript:@"bundle_name"];

    id v22 = v2[14];
  }
  else
  {
    [v3 setObject:0 forKeyedSubscript:@"bundle_name"];
    id v22 = 0;
  }
  uint64_t v75 = v13;
  id v23 = v22;
  if ([v23 length])
  {
    id v24 = +[NSURL URLWithString:v23];
    [v3 setObject:v24 forKeyedSubscript:@"messages_artwork_url"];
  }
  v73 = v18;
  if (v2) {
    BOOL v25 = *((unsigned char *)v2 + 200) != 0;
  }
  else {
    BOOL v25 = 0;
  }
  v26 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v25, v23);
  [v3 setObject:v26 forKeyedSubscript:@"has_messages_extension"];

  if (v2)
  {
    v27 = +[NSNumber numberWithBool:*((unsigned __int8 *)v2 + 204)];
    [v3 setObject:v27 forKeyedSubscript:@"launch_prohibited"];

    id v28 = v2[21];
  }
  else
  {
    v70 = +[NSNumber numberWithBool:0];
    [v3 setObject:v70 forKeyedSubscript:@"launch_prohibited"];

    id v28 = 0;
  }
  id v29 = v28;
  [v3 setObject:v29 forKeyedSubscript:@"storefront"];

  [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:@"approved"];
  [v3 setObject:&off_10054C6C0 forKeyedSubscript:@"metrics_install_type"];
  [v3 setObject:&off_10054C6D8 forKeyedSubscript:@"source_type"];
  [v3 setObject:&off_10054C6F0 forKeyedSubscript:@"priority"];
  [v3 setObject:&off_10054C6D8 forKeyedSubscript:@"bootstrapped"];
  [v3 setObject:@"TFB" forKeyedSubscript:@"log_code"];
  id v30 = v2;
  self;
  id v31 = objc_alloc_init((Class)MIStoreMetadata);
  v32 = v31;
  if (v2)
  {
    id v33 = v30[24];
    [v32 setArtistName:v33];

    [v32 setKind:@"software"];
    if (((_WORD)v30[26] & 4) != 0)
    {
      v34 = +[NSNumber numberWithUnsignedLongLong:v30[3]];
      [v32 setItemID:v34];
    }
    id v35 = v30[12];
  }
  else
  {
    [v31 setArtistName:0];
    [v32 setKind:@"software"];
    id v35 = 0;
  }
  id v36 = v35;
  [v32 setItemName:v36];

  if (v2)
  {
    if (((_WORD)v30[26] & 2) != 0)
    {
      v37 = +[NSNumber numberWithUnsignedLongLong:v30[2]];
      [v32 setBetaExternalVersionIdentifier:v37];
    }
    id v38 = v30[8];
    id v39 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
    if (v38)
    {
      id v40 = v38;
      [v32 setBetaBuildGroupID:v40];
    }
    id v41 = v30[9];
    [v32 setSoftwareVersionBundleID:v41];

    [v32 setHasMessagesExtension:*((unsigned __int8 *)v30 + 200)];
    [v32 setLaunchProhibited:*((unsigned __int8 *)v30 + 204)];
    id v42 = v30[20];
  }
  else
  {
    [v32 setSoftwareVersionBundleID:0];
    [v32 setHasMessagesExtension:0];
    [v32 setLaunchProhibited:0];
    id v42 = 0;
    id v39 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
  }
  id v43 = v42;
  [v32 setStoreCohort:v43];

  if (v2)
  {
    id v44 = v30[21];
    v45 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v44 integerValue]);
    [v32 setStorefront:v45];

    id v46 = v30[16];
    if (v46 && v32) {
      sub_1004019C4(v32, v46, 0);
    }
  }
  else
  {
    v71 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [0 integerValue]);
    [v32 setStorefront:v71];

    id v46 = 0;
  }
  sub_1004016D4(v32, 1);

  if (v13) {
    sub_100401854(v32, v13);
  }
  id v47 = sub_10040163C((uint64_t)v32, 0);
  [v3 setObject:v47 forKeyedSubscript:@"store_metadata"];

  v48 = [(SQLiteMemoryEntity *)[AppInstall alloc] initWithPropertyValues:v3];
  sub_1003D4A3C();
  v49 = (id *)objc_claimAutoreleasedReturnValue();
  sub_100424D18(v48, v49);

  id v50 = v30;
  uint64_t v74 = self;
  id v51 = objc_alloc_init((Class)v39[500]);
  v52 = v51;
  if (v2)
  {
    id v53 = v50[15];
    [v52 setObject:v53 forKeyedSubscript:@"dp_info"];

    id v54 = v50[16];
  }
  else
  {
    [v51 setObject:0 forKeyedSubscript:@"dp_info"];
    id v54 = 0;
  }
  id v55 = v54;
  [v52 setObject:v55 forKeyedSubscript:@"sinf"];

  if (v2) {
    id v56 = v50[17];
  }
  else {
    id v56 = 0;
  }
  id v57 = v56;
  if ([v57 length])
  {
    v58 = +[NSURL URLWithString:v57];
    [v52 setObject:v58 forKeyedSubscript:@"package_url"];
  }
  [v52 setObject:&off_10054C6F0 forKeyedSubscript:@"package_type"];
  if (v2)
  {
    id v59 = v50[23];
    [v52 setObject:v59 forKeyedSubscript:@"variant_id"];

    id v60 = v50[18];
  }
  else
  {
    [v52 setObject:0 forKeyedSubscript:@"variant_id"];
    id v60 = 0;
  }
  id v61 = v60;
  id v62 = [v61 count];

  if (v62)
  {
    if (v2) {
      id v63 = v50[18];
    }
    else {
      id v63 = 0;
    }
    id v64 = v63;
    v65 = sub_100306730(v74, v64);
    [v52 setObject:v65 forKeyedSubscript:@"provisioning_profiles"];
  }
  id v66 = [(SQLiteMemoryEntity *)[AppPackage alloc] initWithPropertyValues:v52];

  if (v66)
  {
    double v76 = v66;
    double v68 = +[NSArray arrayWithObjects:&v76 count:1];
    if (v48) {
      objc_setProperty_atomic_copy(v48, v67, v68, 40);
    }
  }
  return v48;
}

void *sub_1003048E8(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)InstallTestFlightAppsTask;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

void *sub_100304964(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a2;
  uint64_t v9 = self;
  BOOL v10 = v6 != 0;
  id v11 = [InstallTestFlightAppsTask alloc];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100304AC0;
  v19[3] = &unk_100527970;
  uint64_t v22 = v9;
  id v12 = v7;
  BOOL v23 = v6 != 0;
  id v20 = v12;
  id v21 = v6;
  id v13 = v6;
  id v14 = sub_1003923F8(v8, v19);

  uint64_t v15 = sub_1003048E8(v11, v14);
  *((unsigned char *)v15 + 48) = v10;
  uint64_t v16 = (void *)v15[7];
  v15[7] = v12;
  id v17 = v12;

  return v15;
}

AppInstall *sub_100304AC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v106 = a1;
  id v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  self;
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  id v8 = [v6 processInfo];

  uint64_t v9 = [v8 bundleIdentifier];
  [v7 setObject:v9 forKeyedSubscript:@"client_id"];

  BOOL v10 = [v5 bundleID];
  [v7 setObject:v10 forKeyedSubscript:@"bundle_id"];

  id v11 = +[NSUUID UUID];
  [v7 setObject:v11 forKeyedSubscript:@"external_id"];

  id v12 = [v5 bundleID];
  id v13 = +[ApplicationProxy proxyForBundleID:v12];

  if ([v13 isInstalled]) {
    id v14 = &off_10054C708;
  }
  else {
    id v14 = &off_10054C720;
  }
  [v7 setObject:v14 forKeyedSubscript:@"coordinator_intent"];
  uint64_t v15 = [v5 account];
  uint64_t v16 = sub_1003072FC((uint64_t)ACAccountStore, v15);

  if (v16)
  {
    id v17 = objc_msgSend(v16, "ams_DSID");
    [v7 setObject:v17 forKeyedSubscript:@"account_id"];

    id v18 = objc_msgSend(v16, "ams_altDSID");
    [v7 setObject:v18 forKeyedSubscript:@"alt_dsid"];

    v19 = [v16 username];
    [v7 setObject:v19 forKeyedSubscript:@"apple_id"];
  }
  id v20 = [v5 artworkURL];
  [v7 setObject:v20 forKeyedSubscript:@"artwork_url"];

  id v21 = [v5 itemID];
  [v7 setObject:v21 forKeyedSubscript:@"item_id"];

  uint64_t v22 = [v5 itemName];
  [v7 setObject:v22 forKeyedSubscript:@"bundle_name"];

  BOOL v23 = [v5 receipt];
  [v7 setObject:v23 forKeyedSubscript:@"receipt"];

  id v24 = [v5 bundleVersion];
  [v7 setObject:v24 forKeyedSubscript:@"bundle_version"];

  [v5 softwarePlatform];
  BOOL v25 = +[NSNumber numberWithInteger:1];
  [v7 setObject:v25 forKeyedSubscript:@"software_platform"];

  uint64_t v26 = [v5 placeholderEntitlements];
  if (v26)
  {
    id v107 = 0;
    v27 = +[NSKeyedArchiver archivedDataWithRootObject:v26 requiringSecureCoding:1 error:&v107];
    id v28 = v107;
    if (v27)
    {
      [v7 setObject:v27 forKeyedSubscript:@"placeholder_entitlements"];
    }
    else
    {
      id v29 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v26;
        __int16 v109 = 2114;
        id v110 = v28;
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Failed to encode placeholder entitlements: %{public}@ error: %{public}@", buf, 0x16u);
      }
    }
  }
  id v30 = [v5 messagesArtworkURL];
  [v7 setObject:v30 forKeyedSubscript:@"messages_artwork_url"];

  id v31 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v5 hasMessagesExtension]);
  [v7 setObject:v31 forKeyedSubscript:@"has_messages_extension"];

  v32 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v5 isLaunchProhibited]);
  [v7 setObject:v32 forKeyedSubscript:@"launch_prohibited"];

  id v33 = [v5 storeFront];
  [v7 setObject:v33 forKeyedSubscript:@"storefront"];

  [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"approved"];
  if (v13 && ([v13 isInstalled] & 1) != 0) {
    v34 = &off_10054C738;
  }
  else {
    v34 = &off_10054C750;
  }
  [v7 setObject:v34 forKeyedSubscript:@"metrics_install_type"];
  [v7 setObject:&off_10054C6D8 forKeyedSubscript:@"source_type"];
  [v7 setObject:&off_10054C6D8 forKeyedSubscript:@"bootstrapped"];
  v104 = (void *)v26;
  if ([v5 userInitiated])
  {
    id v35 = &off_1005231A8;
    id v36 = &off_10054C768;
    v37 = &off_100525EF8;
  }
  else
  {
    [v7 setObject:&off_10054C6D8 forKeyedSubscript:@"automatic_type"];
    [v7 setObject:&off_10054C780 forKeyedSubscript:@"priority"];
    id v35 = &off_1005231A0;
    id v36 = (_UNKNOWN **)&__kCFBooleanTrue;
    v37 = &off_100525F40;
  }
  [v7 setObject:v36 forKeyedSubscript:*v37];
  [v7 setObject:*v35 forKeyedSubscript:@"log_code"];
  id v38 = v5;
  self;
  id v39 = objc_alloc_init((Class)MIStoreMetadata);
  id v40 = [v38 vendorName];
  [v39 setArtistName:v40];

  [v39 setKind:@"software"];
  id v41 = [v38 itemID];
  [v39 setItemID:v41];

  id v42 = [v38 itemName];
  [v39 setItemName:v42];

  id v43 = [v38 externalVersionIdentifier];
  [v39 setBetaExternalVersionIdentifier:v43];

  id v44 = [v38 betaBuildGroupID];
  [v39 setBetaBuildGroupID:v44];

  v45 = [v38 bundleID];
  [v39 setSoftwareVersionBundleID:v45];

  objc_msgSend(v39, "setHasMessagesExtension:", objc_msgSend(v38, "hasMessagesExtension"));
  objc_msgSend(v39, "setLaunchProhibited:", objc_msgSend(v38, "isLaunchProhibited"));
  id v46 = [v38 initialODRSize];
  [v39 setInitialODRSize:v46];

  [v39 setSourceApp:@"com.apple.TestFlight"];
  id v47 = [v38 storeCohort];
  [v39 setStoreCohort:v47];

  v48 = [v38 storeFront];
  [v39 setStorefront:v48];

  v49 = [v38 packageSINF];
  if (v49 && v39) {
    sub_1004019C4(v39, v49, 0);
  }
  id v50 = [v38 genre];
  id v51 = [v50 genre];
  [v39 setGenre:v51];

  v52 = [v38 genre];
  id v53 = [v52 genreID];
  [v39 setGenreID:v53];

  id v54 = [v38 subGenres];
  id v55 = sub_1003923F8(v54, &stru_1005279F0);
  [v39 setSubGenres:v55];

  sub_1004016D4(v39, 1);
  if (v16) {
    sub_100401854(v39, v16);
  }
  v105 = v13;
  id v56 = sub_10040163C((uint64_t)v39, 0);
  [v7 setObject:v56 forKeyedSubscript:@"store_metadata"];

  id v57 = [(SQLiteMemoryEntity *)[AppInstall alloc] initWithPropertyValues:v7];
  v58 = [v38 account];
  [(SQLiteMemoryEntity *)v57 setValue:v58 forExternalProperty:@"account"];

  sub_1003D4A3C();
  id v59 = (id *)objc_claimAutoreleasedReturnValue();
  if (([v38 userInitiated] & 1) == 0) {
    sub_1003D5150((uint64_t)v59, (uint64_t)[v38 requiresPowerPluggedIn]);
  }
  sub_100424D18(v57, v59);
  id v60 = v38;
  uint64_t v61 = self;
  id v62 = objc_alloc_init((Class)NSMutableDictionary);
  id v63 = [v60 packageDPInfo];
  [v62 setObject:v63 forKeyedSubscript:@"dp_info"];

  id v64 = [v60 packageSINF];
  [v62 setObject:v64 forKeyedSubscript:@"sinf"];

  v65 = [v60 initialODRSize];
  [v62 setObject:v65 forKeyedSubscript:@"initial_odr_size"];

  id v66 = [v60 backgroundAssetMetadata];
  [v62 setObject:v66 forKeyedSubscript:@"background_asset_metadata"];

  v67 = [v60 packageURL];
  double v68 = +[NSNumber numberWithInteger:1];
  [v62 setObject:v68 forKeyedSubscript:@"archive_type"];

  double v69 = [v60 packageURL];
  [v62 setObject:v69 forKeyedSubscript:@"package_url"];

  [v62 setObject:&off_10054C6F0 forKeyedSubscript:@"package_type"];
  v70 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v60 packageCompression]);
  [v62 setObject:v70 forKeyedSubscript:@"compression"];

  v71 = [v60 packageSize];
  [v62 setObject:v71 forKeyedSubscript:@"bytes_total"];

  BOOL v72 = [v60 variantID];
  [v62 setObject:v72 forKeyedSubscript:@"variant_id"];

  v73 = [v60 provisioningProfiles];
  id v74 = [v73 count];

  if (v74)
  {
    uint64_t v75 = [v60 provisioningProfiles];
    double v76 = sub_100306730(v61, v75);
    [v62 setObject:v76 forKeyedSubscript:@"provisioning_profiles"];
  }
  v77 = [(SQLiteMemoryEntity *)[AppPackage alloc] initWithPropertyValues:v62];

  if (v77)
  {
    *(void *)buf = v77;
    v79 = +[NSArray arrayWithObjects:buf count:1];
    if (v57) {
      objc_setProperty_atomic_copy(v57, v78, v79, 40);
    }
  }
  double v80 = [v60 backgroundAssetMetadata];
  if (os_variant_has_internal_content())
  {
    v82 = [v60 bundleID];
    uint64_t v83 = +[BAApplicationConfigurationOverrides asd_overriddenDictionaryForBundleIdentifier:v82 startingDictionary:v80];

    double v80 = (void *)v83;
  }
  if (v57) {
    objc_setProperty_nonatomic_copy(v57, v81, v80, 48);
  }

  id v84 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v85 = *(void *)(v106 + 32);
    id v86 = [v60 bundleID];
    unsigned int v87 = [v60 userInitiated];
    *(_DWORD *)buf = 138543874;
    *(void *)&uint8_t buf[4] = v85;
    __int16 v109 = 2114;
    id v110 = v86;
    __int16 v111 = 1024;
    LODWORD(v112) = v87;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "[%{public}@] Starting TestFlight installation for %{public}@ userInitiated = %{BOOL}d", buf, 0x1Cu);
  }
  v88 = [v60 token];

  if (v88)
  {
    uint64_t v89 = [v60 token];
    [(SQLiteMemoryEntity *)v57 setValue:v89 forProperty:@"install_verification_token"];

    v90 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v91 = *(void *)(v106 + 32);
      v92 = [v60 bundleID];
      id v93 = [v60 token];
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v91;
      __int16 v109 = 2114;
      id v110 = v92;
      __int16 v111 = 2112;
      id v112 = v93;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "[%{public}@][%{public}@] Including token: %@", buf, 0x20u);
    }
  }
  if (*(unsigned char *)(v106 + 56))
  {
    [(SQLiteMemoryEntity *)v57 setValue:&__kCFBooleanTrue forProperty:@"remote_install"];
    id v94 = sub_100303B70(*(id **)(v106 + 40));
    [(SQLiteMemoryEntity *)v57 setValue:v94 forProperty:@"gizmo_pairing_id"];

    [(SQLiteMemoryEntity *)v57 setValue:&off_10054C690 forProperty:v103];
    v95 = [v60 companionBundleID];

    if (v95)
    {
      v96 = [v60 companionBundleID];
      [(SQLiteMemoryEntity *)v57 setValue:v96 forProperty:@"companion_bundle_id"];
    }
    else
    {
      v96 = [v60 itemID];
      if (v96)
      {
        id v107 = 0;
        id v97 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithStoreItemIdentifier:error:", objc_msgSend(v96, "unsignedLongLongValue"), &v107);
        v98 = [v97 bundleIdentifier];

        if (v98)
        {
          id v99 = [v97 bundleIdentifier];
          [(SQLiteMemoryEntity *)v57 setValue:v99 forProperty:@"companion_bundle_id"];
        }
        else
        {
          id v99 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
          {
            uint64_t v101 = *(void *)(v106 + 32);
            id v102 = [v60 bundleID];
            *(_DWORD *)buf = 138543874;
            *(void *)&uint8_t buf[4] = v101;
            __int16 v109 = 2114;
            id v110 = v102;
            __int16 v111 = 2114;
            id v112 = v107;
            _os_log_error_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_ERROR, "[%{public}@] Received request to install %{public}@ remotely but we don't have a companion bundle ID for it. Error: %{public}@", buf, 0x20u);
          }
        }
      }
    }
  }
  return v57;
}

id sub_100305A34(id *a1)
{
  if (a1)
  {
    [a1 lock];
    id v2 = [a1[8] copy];
    [a1 unlock];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

AppInstallPolicy *__cdecl sub_100306674(id a1, BOOL a2, AppInstallPolicy *a3)
{
  id v3 = a3;
  return v3;
}

id sub_10030669C(id a1, ASDTestFlightAppGenre *a2)
{
  id v2 = a2;
  id v3 = objc_alloc((Class)MIStoreMetadataSubGenre);
  id v4 = [(ASDTestFlightAppGenre *)v2 genre];
  id v5 = [(ASDTestFlightAppGenre *)v2 genreID];

  id v6 = [v3 initWithGenre:v4 genreID:v5];
  return v6;
}

id sub_100306730(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_1003923F8(v2, &stru_100527A30);

  return v3;
}

id sub_100306790(id a1, NSData *a2)
{
  return [(NSData *)a2 base64EncodedStringWithOptions:0];
}

id *sub_100306804(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)PushRegisterTask;
    id v14 = (id *)objc_msgSendSuper2(&v16, "init");
    a1 = v14;
    if (v14)
    {
      objc_storeStrong(v14 + 5, a2);
      objc_storeStrong(a1 + 6, a3);
      objc_storeStrong(a1 + 7, a4);
      objc_storeStrong(a1 + 8, a5);
    }
  }

  return a1;
}

id *sub_1003070C8(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = a1;
  if (a1)
  {
    id v10 = a2;
    id v11 = [objc_alloc((Class)NSString) initWithFormat:v10 arguments:&a9];

    id v12 = v11;
    id v13 = (const char *)[v12 UTF8String];
    id v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v15 = dispatch_queue_create(v13, v14);
    uint64_t v9 = sub_100307190(v9, v15);
  }
  return v9;
}

id *sub_100307190(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)DispatchQueue;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

id sub_100307208()
{
  self;
  if (qword_1005B0ED0 != -1) {
    dispatch_once(&qword_1005B0ED0, &stru_100527A50);
  }
  v0 = (void *)qword_1005B0ED8;
  return v0;
}

void sub_100307260(id a1)
{
  uint64_t v1 = [DispatchQueue alloc];
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.appstored.DispatchQueue.default", v2);
  id v4 = sub_100307190((id *)&v1->super.isa, v3);

  id v5 = (void *)qword_1005B0ED8;
  qword_1005B0ED8 = (uint64_t)v4;
}

id sub_1003072FC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  dispatch_queue_t v3 = objc_msgSend(v2, "ams_altDSID");
  id v4 = objc_msgSend(v2, "ams_DSID");
  id v5 = [v2 username];
  id v6 = +[ACAccountStore ams_sharedAccountStore];
  objc_super v7 = objc_msgSend(v6, "ams_iTunesAccounts");

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10030745C;
  v15[3] = &unk_100527A78;
  id v16 = v3;
  id v17 = v4;
  id v18 = v5;
  id v8 = v5;
  id v9 = v4;
  id v10 = v3;
  id v11 = sub_1003921D4(v7, v15);
  id v12 = v11;
  if (!v11) {
    id v11 = v2;
  }
  id v13 = v11;

  return v13;
}

uint64_t sub_10030745C(void *a1, void *a2)
{
  id v4 = a2;
  id v5 = objc_msgSend(v4, "ams_altDSID");
  if (([v5 isEqualToString:a1[4]] & 1) == 0)
  {
    uint64_t v7 = a1[5];
    if (v7
      && (objc_msgSend(v4, "ams_DSID"),
          id v2 = objc_claimAutoreleasedReturnValue(),
          ([v2 isEqualToNumber:a1[5]] & 1) != 0))
    {
      uint64_t v6 = 1;
    }
    else
    {
      id v8 = [v4 username];
      uint64_t v6 = (uint64_t)[v8 isEqualToString:a1[6]];

      if (!v7) {
        goto LABEL_8;
      }
    }

    goto LABEL_8;
  }
  uint64_t v6 = 1;
LABEL_8:

  return v6;
}

id sub_100307514(int a1)
{
  if (a1 - 100 < 2 || a1 == 0)
  {
    id v2 = 0;
  }
  else
  {
    id v4 = sqlite3_errstr(a1);
    if (v4 && *v4)
    {
      NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
      id v5 = +[NSString stringWithUTF8String:v4];
      id v9 = v5;
      uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    }
    else
    {
      uint64_t v6 = 0;
    }
    id v2 = [objc_alloc((Class)NSError) initWithDomain:@"SQLiteErrorDomain" code:a1 userInfo:v6];
  }
  return v2;
}

void sub_100307630(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = +[NSUUID UUID];
  id v5 = [v4 UUIDString];
  uint64_t v6 = [v5 substringToIndex:8];

  uint64_t v7 = sub_100307808(v3, 0);
  NSErrorUserInfoKey v8 = sub_100307808(v3, 1);
  id v9 = +[NSFileManager defaultManager];
  id v10 = [v7 stringByAppendingString:v6];
  id v20 = 0;
  [v9 moveItemAtPath:v7 toPath:v10 error:&v20];
  id v11 = v20;

  id v12 = +[NSFileManager defaultManager];
  id v13 = [v8 stringByAppendingString:v6];
  id v19 = v11;
  [v12 moveItemAtPath:v8 toPath:v13 error:&v19];
  id v14 = v19;

  dispatch_queue_t v15 = +[NSFileManager defaultManager];
  id v16 = [v3 stringByAppendingString:v6];
  id v18 = v14;
  [v15 moveItemAtPath:v3 toPath:v16 error:&v18];

  id v17 = v18;
  if (a2 && v17) {
    *a2 = v17;
  }
}

id sub_100307808(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v5 = v4;
  if (a2)
  {
    if (a2 != 1) {
      goto LABEL_6;
    }
    CFStringRef v6 = @"-wal";
  }
  else
  {
    CFStringRef v6 = @"-shm";
  }
  id v2 = [v4 stringByAppendingString:v6];
LABEL_6:

  return v2;
}

id sub_100307880(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = objc_alloc_init((Class)NSFileManager);
  id v5 = sub_100307808(v3, 0);
  id v14 = 0;
  [v4 removeItemAtPath:v5 error:&v14];
  id v6 = v14;

  uint64_t v7 = sub_100307808(v3, 1);
  id v13 = v6;
  [v4 removeItemAtPath:v7 error:&v13];
  id v8 = v13;

  id v12 = v8;
  id v9 = [v4 removeItemAtPath:v3 error:&v12];

  id v10 = v12;
  if (a2 && v10) {
    *a2 = v10;
  }

  return v9;
}

uint64_t sub_100307994(sqlite3 **a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  ppDb = 0;
  if (v3)
  {
    id v6 = objc_getProperty(v3, v4, 24, 1);
    if (*((unsigned char *)v5 + 8))
    {
      int v7 = 2;
      goto LABEL_7;
    }
  }
  else
  {
    id v6 = 0;
  }
  id v8 = objc_alloc_init((Class)NSFileManager);
  id v9 = [v6 stringByDeletingLastPathComponent];
  [v8 createDirectoryAtPath:v9 withIntermediateDirectories:1 attributes:0 error:0];

  if (!v5)
  {
    id v11 = 0;
    int v7 = 6;
    goto LABEL_19;
  }
  int v7 = 6;
LABEL_7:
  id v10 = *((id *)v5 + 5);
  if (v10)
  {
    id v11 = v10;
    if ([v11 isEqualToString:NSFileProtectionNone])
    {
      int v12 = 0x400000;
    }
    else if ([v11 isEqualToString:NSFileProtectionComplete])
    {
      int v12 = 0x100000;
    }
    else if ([v11 isEqualToString:NSFileProtectionCompleteUnlessOpen])
    {
      int v12 = 0x200000;
    }
    else if ([v11 isEqualToString:NSFileProtectionCompleteUntilFirstUserAuthentication])
    {
      int v12 = 3145728;
    }
    else
    {
      int v12 = 0;
    }

    v7 |= v12;
  }
  else
  {
    id v11 = 0;
  }
LABEL_19:
  id v13 = v6;
  uint64_t v14 = sqlite3_open_v2((const char *)[v13 fileSystemRepresentation], &ppDb, v7, 0);
  if (!v14)
  {
    dispatch_queue_t v15 = ppDb;
    id v16 = v5;
    sqlite3_extended_result_codes(v15, 1);
    if (v5) {
      id v17 = (void *)v16[4];
    }
    else {
      id v17 = 0;
    }
    id v18 = v17;

    if (v18)
    {
      id v19 = v5 ? (void *)v16[4] : 0;
      id v20 = v19;
      if (v20)
      {
        id v21 = v20;
        uint64_t v22 = sub_1003F2574((uint64_t)AppDefaultsManager, v20);
        BOOL v23 = v22;
        if (v22 && [v22 length] == (id)16)
        {
          id v24 = 0;
        }
        else
        {
          id v36 = 0;
          BOOL v25 = sub_100283508((uint64_t)SQLiteKeychainHelper, v21, &v36);
          id v24 = v36;

          if (v25 && [v25 length] == (id)16)
          {
            BOOL v23 = v25;
          }
          else
          {

            uint64_t v26 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              id v38 = v21;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Generating new encryption key for identifier: %{public}@", buf, 0xCu);
            }

            CCRandomGenerateBytes(buf, 0x10uLL);
            BOOL v23 = +[NSData dataWithBytes:buf length:16];

            id v35 = 0;
            BOOL v27 = sub_1002836F4((uint64_t)SQLiteKeychainHelper, v23, v21, &v35);
            id v24 = v35;
            if (!v27)
            {
              id v28 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 138543618;
                id v38 = v21;
                __int16 v39 = 2114;
                id v40 = v24;
                _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Unable to fetch/generate key with identifier: %{public}@ error: %{public}@", buf, 0x16u);
              }

              sub_1003F2730((uint64_t)AppDefaultsManager, v23, v21);
            }
          }
        }
        id v29 = v23;
        [v29 bytes];
        [v29 length];
        uint64_t v14 = sqlite3_key();

        if (v14) {
          goto LABEL_41;
        }
      }
    }
    uint64_t v14 = sqlite3_exec(v15, "PRAGMA journal_mode=WAL", 0, 0, 0);
    if (v14)
    {
LABEL_41:
    }
    else
    {
      id v31 = objc_alloc((Class)NSString);
      if (v5) {
        uint64_t v32 = v16[2];
      }
      else {
        uint64_t v32 = 0;
      }
      id v33 = objc_msgSend(v31, "initWithFormat:", @"PRAGMA cache_size=%ld", v32);
      uint64_t v14 = sqlite3_exec(v15, (const char *)[v33 UTF8String], 0, 0, 0);

      if (!v14)
      {
        *a1 = ppDb;
        goto LABEL_44;
      }
    }
  }
  if (ppDb) {
    sqlite3_close(ppDb);
  }
LABEL_44:

  return v14;
}

id *sub_100307E60(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)ClipURLSessionTask;
    id v11 = (id *)objc_msgSendSuper2(&v23, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 2, a2);
      objc_storeStrong(a1 + 7, a4);
      uint64_t v12 = [v9 dataTaskWithRequest:v8];
      id v13 = a1[1];
      a1[1] = (id)v12;

      uint64_t v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = a1[7];
        id v16 = a1[1];
        id v17 = [v8 URL];
        *(_DWORD *)buf = 138412802;
        id v25 = v15;
        __int16 v26 = 2114;
        id v27 = v16;
        __int16 v28 = 2114;
        id v29 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] Created task: %{public}@ for URL: %{public}@ ", buf, 0x20u);
      }
      uint64_t v18 = +[NSProgress progressWithTotalUnitCount:0];
      id v19 = a1[4];
      a1[4] = (id)v18;

      id v20 = objc_alloc_init(Promise);
      id v21 = a1[5];
      a1[5] = v20;
    }
  }

  return a1;
}

id *sub_100308018(id *a1)
{
  if (a1)
  {
    +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a1[1] taskIdentifier]);
    a1 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100308068(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    objc_setProperty_atomic((id)a1, v3, v4, 24);
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 8);
      int v8 = 138412802;
      uint64_t v9 = v6;
      __int16 v10 = 2114;
      uint64_t v11 = v7;
      __int16 v12 = 2114;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] Cancelled task: %{public}@ with reason: %{public}@", (uint8_t *)&v8, 0x20u);
    }

    [*(id *)(a1 + 8) cancel];
  }
}

id *sub_10030815C(id *result)
{
  if (result)
  {
    uint64_t v1 = result;
    [result[6] open];
    id v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = v1[7];
      id v4 = v1[1];
      int v5 = 138412546;
      id v6 = v3;
      __int16 v7 = 2114;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@] Started task: %{public}@", (uint8_t *)&v5, 0x16u);
    }

    return (id *)[v1[1] resume];
  }
  return result;
}

id *sub_1003082AC(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)StreamingZipStreamConsumer;
    a1 = (id *)objc_msgSendSuper2(&v14, "init");
    if (a1)
    {
      id v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v9 = dispatch_queue_create("com.apple.appstored.StreamingZipStreamConsumer", v8);
      id v10 = a1[1];
      a1[1] = v9;

      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a2);
      [a1[3] setDelegate:a1];
      [a1[3] open];
      uint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        id v13 = [a1[3] streamStatus];
        *(_DWORD *)buf = 134217984;
        id v16 = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "(SZStreamConsumer) Opened, upstream status %lu", buf, 0xCu);
      }
    }
  }

  return a1;
}

void sub_100308588(void *a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    Property = (void (**)(id, id))objc_getProperty(a1, v3, 32, 1);
    if (Property) {
      Property[2](Property, v5);
    }
  }
}

id sub_1003085F4(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "(SZStreamConsumer) Finishing extractor stream", buf, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003086C0;
  v6[3] = &unk_100521910;
  void v6[4] = v3;
  return [v4 finishStreamWithCompletionBlock:v6];
}

void sub_1003086C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "(SZStreamConsumer) Extractor stream finished, error = %@", (uint8_t *)&v7, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 24) close];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = 0;
}

void sub_10030879C(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int16 v28 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "(SZStreamConsumer) Reading available data", v28, 2u);
  }

  *(void *)__int16 v28 = 0;
  id v29 = v28;
  uint64_t v30 = 0x3032000000;
  id v31 = sub_100018198;
  uint64_t v32 = sub_100017C88;
  id v33 = 0;
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
  uint64_t v4 = 0;
  *(void *)&long long v5 = 138543362;
  long long v23 = v5;
  while (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "hasBytesAvailable", v23))
  {
    id v7 = [objc_alloc((Class)NSMutableData) initWithLength:0x100000];
    id v8 = *(void **)(*(void *)(a1 + 32) + 24);
    id v9 = v7;
    id v10 = [v9 mutableBytes];
    id v11 = [v9 length];
    __int16 v12 = (id *)(v29 + 40);
    id obj = (id)*((void *)v29 + 5);
    uint64_t v13 = (uint64_t)[v8 readBytes:v10 length:v11 error:&obj];
    objc_storeStrong(v12, obj);
    if (v13 < 1)
    {
      if (v13 < 0)
      {
        if (!*((void *)v29 + 5))
        {
          uint64_t v19 = ASDErrorWithDescription();
          id v20 = (void *)*((void *)v29 + 5);
          *((void *)v29 + 5) = v19;
        }
        id v21 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = *((void *)v29 + 5);
          *(_DWORD *)buf = v23;
          uint64_t v35 = v22;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "(SZStreamConsumer) Error occurred upstream: %{public}@", buf, 0xCu);
        }

        sub_100308588(*(void **)(a1 + 32), *((void **)v29 + 5));
        char v17 = 0;
        goto LABEL_16;
      }
      if (++v4 != 3)
      {
        char v17 = 1;
        goto LABEL_16;
      }
      uint64_t v18 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "(SZStreamConsumer) Looped 3 times but no more data was available", buf, 2u);
      }
      char v17 = 0;
      uint64_t v4 = 3;
    }
    else
    {
      [v9 setLength:v13];
      objc_super v14 = *(void **)(*(void *)(a1 + 32) + 16);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100308B74;
      v24[3] = &unk_100527AA0;
      __int16 v26 = v28;
      id v15 = v3;
      id v25 = v15;
      [v14 supplyBytes:v9 withCompletionBlock:v24];
      dispatch_semaphore_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
      id v16 = (void *)*((void *)v29 + 5);
      if (v16)
      {
        sub_100308588(*(void **)(a1 + 32), v16);
        char v17 = 0;
      }
      else
      {
        char v17 = 1;
      }
      uint64_t v18 = v25;
    }

LABEL_16:
    if ((v17 & 1) == 0) {
      break;
    }
  }

  _Block_object_dispose(v28, 8);
}

void sub_100308B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100308B74(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "(SZStreamConsumer) Bytes supplied, error = %@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
  id v7 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id *sub_100308CB4(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)IAPInfoDAAPRequestEncoder;
    int v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

id sub_1003091C0()
{
  self;
  if (qword_1005B0EE0 != -1) {
    dispatch_once(&qword_1005B0EE0, &stru_100527AC0);
  }
  v0 = (void *)qword_1005B0EE8;
  return v0;
}

void sub_100309218(id a1)
{
  uint64_t v1 = objc_alloc_init(Migrator);
  id v2 = (void *)qword_1005B0EE8;
  qword_1005B0EE8 = (uint64_t)v1;
}

void sub_100309350(uint64_t a1)
{
  int v2 = sub_10030964C();
  id v3 = ASDLogHandleForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v4)
    {
      int v8 = sub_100284824(*(id **)(*(void *)(a1 + 32) + 8));
      id v9 = [v8 componentsJoinedByString:@", "];
      *(_DWORD *)buf = 138543362;
      v20[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Queuing up previously unfinished migrations: [%{public}@]", buf, 0xCu);
    }
    objc_super v10 = *(void **)(a1 + 32);
    uint64_t v11 = v10[1];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1003096C4;
    v17[3] = &unk_100527AE8;
    uint64_t v18 = v10;
    sub_100284710(v11, v17);
    sub_100309894(*(void *)(a1 + 32));
    id v6 = v18;
    goto LABEL_16;
  }
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Performing initial migration", buf, 2u);
  }

  sub_100284544(*(void *)(*(void *)(a1 + 32) + 8));
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = sub_10026CA24();
    if (sub_10026D598((uint64_t)v6) && sub_10026D0B8((uint64_t)v6))
    {
      id v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Bootstrap - Proceeding to migration", buf, 2u);
      }

      sub_100309C3C(v5, 1uLL);
    }
    else
    {
      __int16 v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v13 = sub_10026D598((uint64_t)v6);
        BOOL v14 = sub_10026D0B8((uint64_t)v6);
        *(_DWORD *)buf = 67109376;
        LODWORD(v20[0]) = v13;
        WORD2(v20[0]) = 1024;
        *(_DWORD *)((char *)v20 + 6) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Bootstrap -  Creating observer to migrate when os setup is complete: %d migrator complete: %d", buf, 0xEu);
      }

      id v15 = +[NSNotificationCenter defaultCenter];
      id v16 = sub_10026CA24();
      [v15 addObserver:v5 selector:"_handleMonitorStateDidChangeNotification:" name:@"DeviceStateDidChangeNotification" object:v16];
    }
LABEL_16:
  }
}

uint64_t sub_10030964C()
{
  self;
  v0 = +[AMSDevice buildVersion];
  uint64_t v1 = sub_1003F4884();
  int v2 = v1;
  if (v1) {
    uint64_t v3 = [v1 isEqualToString:v0] ^ 1;
  }
  else {
    uint64_t v3 = 1;
  }

  return v3;
}

void sub_1003096C4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2;
  if (v2)
  {
    id v9 = v3;
    if (v3) {
      BOOL v4 = (void *)v3[1];
    }
    else {
      BOOL v4 = 0;
    }
    id v5 = v4;
    if ([v5 isEqualToString:@"AutomaticUpdates"])
    {
      id v6 = off_10050EE28;
    }
    else if ([v5 isEqualToString:@"Miscellaneous"])
    {
      id v6 = off_10050EE38;
    }
    else if ([v5 isEqualToString:@"Arcade"])
    {
      id v6 = off_10050EE20;
    }
    else if ([v5 isEqualToString:@"DemotedApplications"])
    {
      id v6 = off_10050EE48;
    }
    else if ([v5 isEqualToString:@"UpdateHistory"])
    {
      id v6 = off_10050EE58;
    }
    else if ([v5 isEqualToString:@"ODR"])
    {
      id v6 = off_10050EE40;
    }
    else if ([v5 isEqualToString:@"ValidateAppleIDs"])
    {
      id v6 = &off_10050EE60;
    }
    else if ([v5 isEqualToString:@"TestFlightFeedback"])
    {
      id v6 = off_10050EE50;
    }
    else if ([v5 isEqualToString:@"Galette"])
    {
      id v6 = off_10050EE30;
    }
    else
    {
      if (![v5 isEqualToString:@"DistributorID"])
      {
LABEL_26:

        uint64_t v3 = v9;
        goto LABEL_27;
      }
      id v6 = &off_10050F208;
    }
    id v7 = [objc_alloc(*v6) initWithConfiguration:v9];
    if (v7)
    {
      int v8 = v7;
      sub_10030AA20(v2, v7, 0);
    }
    goto LABEL_26;
  }
LABEL_27:
}

void sub_100309894(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100259614();
    unsigned __int8 v3 = [v2 isConnected];

    if (v3)
    {
      sub_10030A2B4(a1);
    }
    else
    {
      BOOL v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Waiting for network before running migrations", v7, 2u);
      }

      id v5 = +[NSNotificationCenter defaultCenter];
      id v6 = sub_100259614();
      [v5 addObserver:a1 selector:"_handleNetworkStateDidChangeNotification:" name:@"NetworkStateDidChangeNotification" object:v6];
    }
  }
}

BOOL sub_100309A54()
{
  self;
  v0 = objc_alloc_init(MigratorConfigurationStore);
  if (sub_10030964C())
  {
    BOOL v1 = 1;
  }
  else if (v0)
  {
    BOOL v1 = [(NSMutableDictionary *)v0->_configuration count] != 0;
  }
  else
  {
    BOOL v1 = 0;
  }

  return v1;
}

BOOL sub_100309AC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100309B78;
    block[3] = &unk_100525408;
    uint64_t v11 = a1;
    uint64_t v12 = a2;
    id v10 = v5;
    dispatch_async(v7, block);
  }
  return a1 != 0;
}

void sub_100309B78(void *a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[6];
    int v5 = 138543618;
    uint64_t v6 = v3;
    __int16 v7 = 2048;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Performing migration for clientID: %{public}@ migrationType: %ld", (uint8_t *)&v5, 0x16u);
  }

  sub_100309C3C(a1[5], a1[6]);
}

void sub_100309C3C(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return;
  }
  id v25 = sub_1003F4884();
  __int16 v26 = +[AMSDevice buildVersion];
  sub_1003F4A20((uint64_t)AppDefaultsManager, v26);
  sub_1003F48FC();
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v25;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v26;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Migrating from build: %{public}@ to build: %{public}@", buf, 0x16u);
  }

  ASDDebugLog();
  if (a2 != 1)
  {
    uint64_t v10 = (a2 >> 1) & 1;
    uint64_t v9 = (a2 >> 3) & 1;
    if ((a2 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    if (!v9) {
      goto LABEL_12;
    }
LABEL_18:
    BOOL v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Migrate from different device", buf, 2u);
    }

    if (v10) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
  uint64_t v27 = 0;
  __int16 v28 = &v27;
  uint64_t v29 = 0x2020000000;
  int v5 = (uint64_t (*)(uint64_t, uint64_t))off_1005B0EF0;
  uint64_t v30 = off_1005B0EF0;
  if (!off_1005B0EF0)
  {
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10030AB94;
    uint64_t v32 = &unk_1005243D0;
    id v33 = &v27;
    sub_10030AB94((uint64_t)buf);
    int v5 = (uint64_t (*)(uint64_t, uint64_t))v28[3];
  }
  _Block_object_dispose(&v27, 8);
  if (!v5)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  unsigned int v8 = v5(v6, v7);
  LODWORD(v9) = (v8 >> 3) & 1;
  LODWORD(v10) = (v8 >> 1) & 1;
  if ((v8 & 4) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Restore from backup migration", buf, 2u);
  }

  if (v9) {
    goto LABEL_18;
  }
LABEL_12:
  if (v10)
  {
LABEL_13:
    uint64_t v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Upgrade Migration", buf, 2u);
    }

    int v13 = 1;
    goto LABEL_22;
  }
LABEL_21:
  int v13 = 0;
LABEL_22:
  id v15 = objc_alloc_init(MigratorMiscellaneousTask);
  sub_10030AA20(a1, v15, 1);
  id v16 = sub_100313AB4([MigratorPromotionTask alloc], &__NSArray0__struct, &__NSDictionary0__struct);
  sub_10030AA20(a1, v16, 1);
  if (v13)
  {
    char v17 = objc_alloc_init(MigratorAutoUpdateTask);
    sub_10030AA20(a1, v17, 1);
    uint64_t v18 = objc_alloc_init(MigratorODRTask);
    sub_10030AA20(a1, v18, 1);
    uint64_t v19 = objc_alloc_init(MigratorUpdateHistoryTask);
    sub_10030AA20(a1, v19, 1);
    id v20 = objc_opt_new();
    sub_10030AA20(a1, v20, 1);
    id v21 = objc_opt_new();
    sub_10030AA20(a1, v21, 1);
    uint64_t v22 = objc_opt_new();
    sub_10030AA20(a1, v22, 1);
    long long v23 = objc_alloc_init(_TtC9appstored25MigratorDistributorIDTask);
    sub_10030AA20(a1, v23, 1);
  }
  id v24 = objc_alloc_init(MigratorArcadeTask);
  sub_10030AA20(a1, v24, 1);
  sub_100284558(*(id **)(a1 + 8), 1);
  sub_100309894(a1);
}

void sub_10030A0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10030A16C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = sub_100259614();
    v9[0] = 67109120;
    v9[1] = [v3 isConnected];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Network changed. Connected: %d", (uint8_t *)v9, 8u);
  }
  uint64_t v4 = sub_100259614();
  unsigned int v5 = [v4 isConnected];

  if (v5)
  {
    uint64_t v6 = +[NSNotificationCenter defaultCenter];
    uint64_t v7 = *(void *)(a1 + 32);
    unsigned int v8 = sub_100259614();
    [v6 removeObserver:v7 name:@"NetworkStateDidChangeNotification" object:v8];

    sub_10030A2B4(*(void *)(a1 + 32));
  }
}

void sub_10030A2B4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to load bag", buf, 2u);
    }

    uint64_t v3 = sub_10030B11C();
    id v32 = 0;
    id v4 = sub_10030B9EC((uint64_t)v3, @"available-software-updates", &v32);
    id v5 = v32;

    uint64_t v6 = ASDLogHandleForCategory();
    uint64_t v7 = v6;
    if (v5)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        id v49 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Attempting migration anyway following bag load error: %{public}@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempting migrations following bag load", buf, 2u);
    }

    unsigned int v8 = objc_alloc_init(TaskQueue);
    p_isa = (id *)&v8->super.isa;
    if (v8) {
      [(NSOperationQueue *)v8->_operationQueue setName:@"com.apple.appstored.MigrateQueue"];
    }
    id v31 = v5;
    id v10 = [*(id *)(a1 + 24) copy];
    [*(id *)(a1 + 24) removeAllObjects];
    id v11 = objc_alloc_init((Class)NSMutableArray);
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v12 = v10;
    id v13 = [v12 countByEnumeratingWithState:&v37 objects:buf count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v38;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v38 != v15) {
            objc_enumerationMutation(v12);
          }
          char v17 = [*(id *)(*((void *)&v37 + 1) + 8 * i) migratorType];
          [v11 addObject:v17];
        }
        id v14 = [v12 countByEnumeratingWithState:&v37 objects:buf count:16];
      }
      while (v14);
    }

    uint64_t v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = [v11 count];
      id v20 = [v11 componentsJoinedByString:@", "];
      *(_DWORD *)id v44 = 134218242;
      id v45 = v19;
      __int16 v46 = 2114;
      id v47 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Performing %ld migration(s): [%{public}@]", v44, 0x16u);
    }
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v21 = v12;
    id v22 = [v21 countByEnumeratingWithState:&v33 objects:v44 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v34;
      do
      {
        for (j = 0; j != v23; j = (char *)j + 1)
        {
          if (*(void *)v34 != v24) {
            objc_enumerationMutation(v21);
          }
          __int16 v26 = *(void **)(*((void *)&v33 + 1) + 8 * (void)j);
          uint64_t v27 = [v26 migratorType];
          sub_100284990(*(id **)(a1 + 8), (uint64_t)v27);
          id v43 = v26;
          __int16 v28 = +[NSArray arrayWithObjects:&v43 count:1];
          if (p_isa) {
            [p_isa[1] addOperations:v28 waitUntilFinished:1];
          }

          uint64_t v29 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id v41 = 138543362;
            id v42 = v27;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Migration complete for: %{public}@", v41, 0xCu);
          }

          uint64_t v30 = *(id **)(a1 + 8);
          if (v30)
          {
            [v30[1] removeObjectForKey:v27];
            sub_100284558(v30, 1);
          }
        }
        id v23 = [v21 countByEnumeratingWithState:&v33 objects:v44 count:16];
      }
      while (v23);
    }
  }
}

void sub_10030A7A4(uint64_t a1)
{
  uint64_t v2 = sub_10026CA24();
  if (sub_10026D598((uint64_t)v2) && sub_10026D0B8((uint64_t)v2) && sub_10030964C())
  {
    uint64_t v3 = +[NSNotificationCenter defaultCenter];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = sub_10026CA24();
    [v3 removeObserver:v4 name:@"DeviceStateDidChangeNotification" object:v5];

    uint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device state changed and ready to migrate.", (uint8_t *)&v12, 2u);
    }

    sub_100309C3C(*(void *)(a1 + 32), 1uLL);
  }
  else
  {
    if (sub_10030964C())
    {
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 67109376;
        LODWORD(v13[0]) = sub_10026D598((uint64_t)v2);
        WORD2(v13[0]) = 1024;
        *(_DWORD *)((char *)v13 + 6) = sub_10026D0B8((uint64_t)v2);
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device state changed setup not ready for migrate. Setup complete: %d migrator complete: %d", (uint8_t *)&v12, 0xEu);
      }
    }
    else
    {
      unsigned int v8 = +[NSNotificationCenter defaultCenter];
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = sub_10026CA24();
      [v8 removeObserver:v9 name:@"DeviceStateDidChangeNotification" object:v10];

      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = +[AMSDevice buildVersion];
        int v12 = 138543362;
        v13[0] = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device state changed setup fired after we have already performed a migration for build: %{public}@", (uint8_t *)&v12, 0xCu);
      }
    }
  }
}

void sub_10030AA20(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a3)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    id v8 = [v5 copyConfiguration];
    sub_100284A04(v7, v8);
  }
  uint64_t v9 = *(void **)(a1 + 24);
  if (!v9)
  {
    id v10 = objc_alloc_init((Class)NSMutableArray);
    id v11 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v10;

    uint64_t v9 = *(void **)(a1 + 24);
  }
  [v9 addObject:v6];
  int v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = [v6 migratorType];
    int v14 = 138543362;
    uint64_t v15 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Queuing migration task: %{public}@", (uint8_t *)&v14, 0xCu);
  }
}

void *sub_10030AB94(uint64_t a1)
{
  v5[0] = 0;
  if (!qword_1005B0EF8)
  {
    v5[1] = _NSConcreteStackBlock;
    v5[2] = 3221225472;
    v5[3] = sub_10030ACD4;
    v5[4] = &unk_100521BF0;
    v5[5] = v5;
    long long v6 = off_100527B08;
    uint64_t v7 = 0;
    qword_1005B0EF8 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1005B0EF8;
    if (qword_1005B0EF8)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1005B0EF8;
LABEL_5:
  uint64_t result = dlsym(v2, "DMGetUserDataDisposition");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1005B0EF0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10030ACD4()
{
  uint64_t result = _sl_dlopen();
  qword_1005B0EF8 = result;
  return result;
}

void sub_10030AD48(void *a1)
{
  if (a1)
  {
    if ([a1 isRemoteInstall])
    {
      uint64_t v2 = [a1 device];
      sub_100303BA4(v2);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      sub_1003DA6D4();
      uint64_t v2 = (id *)objc_claimAutoreleasedReturnValue();
      id v3 = objc_msgSend(v2, "copyThinningHeadersForPlatform:", objc_msgSend(a1, "expectedSoftwarePlatform"));
    }
    id v8 = v3;

    uint64_t v4 = v8;
    if (v8)
    {
      id v5 = [a1 additionalHeaders];
      id v6 = [v5 mutableCopy];

      if (v6)
      {
        [v6 addEntriesFromDictionary:v8];
        id v7 = [v6 copy];
        [a1 setAdditionalHeaders:v7];
      }
      else
      {
        [a1 setAdditionalHeaders:v8];
      }

      uint64_t v4 = v8;
    }
  }
}

void sub_10030AE4C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if ([v3 isInstalled])
    {
      id v5 = [v4 deviceIdentifierForVendor];
      if (!v5)
      {
LABEL_16:
        id v5 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          goto LABEL_17;
        }
        uint64_t v15 = [a1 logKey];
        *(_DWORD *)buf = 138412290;
        id v19 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%@] Cannot determine vendor ID for purchase", buf, 0xCu);
LABEL_15:

LABEL_17:
        goto LABEL_18;
      }
    }
    else
    {
      id v6 = [a1 vendorName];

      if (!v6) {
        goto LABEL_16;
      }
      id v7 = [a1 bundleID];
      if (!v7)
      {
        id v8 = [a1 vendorName];
        uint64_t v9 = +[NSUUID UUID];
        id v10 = [v9 UUIDString];
        id v7 = +[NSString stringWithFormat:@"xyz.%@.%@", v8, v10];

        id v11 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id v16 = [a1 logKey];
          char v17 = [a1 vendorName];
          *(_DWORD *)buf = 138412802;
          id v19 = v16;
          __int16 v20 = 2114;
          id v21 = v7;
          __int16 v22 = 2114;
          id v23 = v17;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[%@] Creating temporary bundle identifier %{public}@ for vendor %{public}@", buf, 0x20u);
        }
        [a1 setTemporaryBundleID:v7];
      }
      int v12 = +[LSApplicationWorkspace defaultWorkspace];
      id v13 = [a1 vendorName];
      int v14 = [v12 createDeviceIdentifierWithVendorName:v13 bundleIdentifier:v7];

      if (v14)
      {
        id v5 = [v14 UUIDString];
        [a1 setGeneratedVendorID:1];
      }
      else
      {
        id v5 = 0;
      }

      if (!v5) {
        goto LABEL_16;
      }
    }
    uint64_t v15 = [a1 buyParams];
    [v15 setParameter:v5 forKey:AMSBuyParamPropertyVendorID];
    goto LABEL_15;
  }
LABEL_18:
}

id sub_10030B11C()
{
  self;
  if (qword_1005B0F08 != -1) {
    dispatch_once(&qword_1005B0F08, &stru_100527B20);
  }
  v0 = (void *)qword_1005B0F00;
  return v0;
}

void sub_10030B174(id a1)
{
  BOOL v1 = objc_alloc_init(URLBag);
  uint64_t v2 = (void *)qword_1005B0F00;
  qword_1005B0F00 = (uint64_t)v1;
}

id sub_10030B1B0()
{
  self;
  if (qword_1005B0F18 != -1) {
    dispatch_once(&qword_1005B0F18, &stru_100527B40);
  }
  v0 = (void *)qword_1005B0F10;
  return v0;
}

void sub_10030B208(id a1)
{
  id v1 = sub_10030B24C([URLBag alloc], 1);
  uint64_t v2 = (void *)qword_1005B0F10;
  qword_1005B0F10 = (uint64_t)v1;
}

id sub_10030B24C(void *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  v12.receiver = a1;
  v12.super_class = (Class)URLBag;
  id v3 = objc_msgSendSuper2(&v12, "init");
  if (v3)
  {
    uint64_t v4 = +[AMSProcessInfo currentProcess];
    id v5 = v4;
    if (a2) {
      [v4 setAccountMediaType:AMSAccountMediaTypeAppStoreSandbox];
    }
    uint64_t v6 = +[AMSBag bagForProfile:@"appstored" profileVersion:@"1" processInfo:v5];
    id v7 = (void *)*((void *)v3 + 1);
    *((void *)v3 + 1) = v6;

    *((_DWORD *)v3 + 4) = 0;
    id v8 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v9 = (void *)*((void *)v3 + 3);
    *((void *)v3 + 3) = v8;

    id v10 = *((id *)v3 + 1);
    self;
    [v10 setDefaultValue:&__kCFBooleanFalse forKey:@"arcade-in-spotlight-enabled"];
    [v10 setDefaultValue:&off_10054C798 forKey:@"min-keybag-repair-interval-seconds"];
    [v10 setDefaultValue:&__kCFBooleanTrue forKey:@"enable-sip-check"];
  }
  return v3;
}

void sub_10030B39C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    id v5 = *(void **)(a1 + 32);
    if (v5 && ([v5 isExpired] & 1) == 0)
    {
      id v10 = *(id *)(a1 + 32);
      os_unfair_lock_unlock(v4);
      v3[2](v3, v10, 0);
    }
    else
    {
      id v6 = [*(id *)(a1 + 24) count];
      id v7 = *(void **)(a1 + 24);
      id v8 = [v3 copy];
      [v7 addObject:v8];

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      if (!v6)
      {
        uint64_t v9 = *(void **)(a1 + 8);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_10030B4C0;
        v11[3] = &unk_100527B68;
        v11[4] = a1;
        [v9 createSnapshotWithCompletion:v11];
      }
    }
  }
}

void sub_10030B4C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  uint64_t v7 = *(void *)(a1 + 32);
  if (v5)
  {
    id v8 = v5;
    uint64_t v9 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = v8;
    id v10 = v6;
  }
  else
  {
    id v10 = 0;
    id v11 = 0;
    uint64_t v9 = v6;
    if (!*(void *)(v7 + 32)) {
      goto LABEL_5;
    }
  }

  id v11 = *(void **)(*(void *)(a1 + 32) + 32);
  id v6 = v10;
LABEL_5:
  id v12 = v11;
  id v13 = *(id *)(*(void *)(a1 + 32) + 24);
  id v14 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = *(void **)(v15 + 24);
  *(void *)(v15 + 24) = v14;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v17 = v13;
  id v18 = [v17 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v23;
    do
    {
      id v21 = 0;
      do
      {
        if (*(void *)v23 != v20) {
          objc_enumerationMutation(v17);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v22 + 1) + 8 * (void)v21) + 16))(*(void *)(*((void *)&v22 + 1) + 8 * (void)v21));
        id v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      id v19 = [v17 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v19);
  }
}

void sub_10030B674(id a1, AMSSnapshotBag *a2, NSError *a3)
{
  id v3 = a3;
  uint64_t v4 = ASDLogHandleForCategory();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138543362;
      id v11 = v3;
      id v6 = "Failed to prefetch bag snapshot: %{public}@";
      uint64_t v7 = v5;
      os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
      uint32_t v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v10, v9);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    id v6 = "Prefetched bag snapshot";
    uint64_t v7 = v5;
    os_log_type_t v8 = OS_LOG_TYPE_INFO;
    uint32_t v9 = 2;
    goto LABEL_6;
  }
}

id sub_10030B75C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    uint64_t v4 = [*(id *)(a1 + 8) arrayForKey:a2];
    id v8 = 0;
    id v5 = [v4 valueWithError:&v8];
    id v6 = v8;

    if (a3)
    {
      ASDErrorWithSafeUserInfo();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_10030B800(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    uint64_t v4 = [*(id *)(a1 + 8) BOOLForKey:a2];
    id v8 = 0;
    id v5 = [v4 valueWithError:&v8];
    id v6 = v8;

    if (a3)
    {
      ASDErrorWithSafeUserInfo();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_10030B8A4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    uint64_t v4 = [*(id *)(a1 + 8) integerForKey:a2];
    id v8 = 0;
    id v5 = [v4 valueWithError:&v8];
    id v6 = v8;

    if (a3)
    {
      ASDErrorWithSafeUserInfo();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_10030B948(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    uint64_t v4 = [*(id *)(a1 + 8) stringForKey:a2];
    id v8 = 0;
    id v5 = [v4 valueWithError:&v8];
    id v6 = v8;

    if (a3)
    {
      ASDErrorWithSafeUserInfo();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_10030B9EC(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    uint64_t v4 = [*(id *)(a1 + 8) URLForKey:a2];
    id v8 = 0;
    id v5 = [v4 valueWithError:&v8];
    id v6 = v8;

    if (a3)
    {
      ASDErrorWithSafeUserInfo();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_10030BA90(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = [*(id *)(a1 + 8) arrayForKey:a2];
    id v7 = [v6 valueWithError:0];

    if (!v7) {
      id v7 = v5;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id sub_10030BB1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = [*(id *)(a1 + 8) stringForKey:a2];
    id v7 = [v6 valueWithError:0];

    if (!v7) {
      id v7 = v5;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id *sub_10030BBA8(id *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = [result[1] BOOLForKey:a2];
    id v5 = [v4 valueWithError:0];

    if (!v5)
    {
      id v5 = +[NSNumber numberWithBool:a3];
    }
    id v6 = [v5 BOOLValue];

    return (id *)v6;
  }
  return result;
}

double sub_10030BC30(uint64_t a1, uint64_t a2, double a3)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v4 = [*(id *)(a1 + 8) doubleForKey:a2];
  id v5 = [v4 valueWithError:0];

  if (!v5)
  {
    id v5 = +[NSNumber numberWithDouble:a3];
  }
  [v5 doubleValue];
  double v7 = v6;

  return v7;
}

id *sub_10030BCBC(id *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = [result[1] integerForKey:a2];
    id v5 = [v4 valueWithError:0];

    if (!v5)
    {
      id v5 = +[NSNumber numberWithInteger:a3];
    }
    id v6 = [v5 integerValue];

    return (id *)v6;
  }
  return result;
}

id sub_10030BD44(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = [*(id *)(a1 + 8) BOOLForKey:a2];
    id v12 = 0;
    uint64_t v9 = [v8 valueWithError:&v12];
    unint64_t v10 = (unint64_t)v12;

    if (!v9 && ASDErrorIsEqual())
    {

      unint64_t v10 = 0;
    }
    if (a4)
    {
      ASDErrorWithSafeUserInfo();
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (!(v9 | v10)) {
      uint64_t v9 = (uint64_t)v7;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return (id)v9;
}

id sub_10030BE3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = [*(id *)(a1 + 8) integerForKey:a2];
    id v12 = 0;
    uint64_t v9 = [v8 valueWithError:&v12];
    unint64_t v10 = (unint64_t)v12;

    if (!v9 && ASDErrorIsEqual())
    {

      unint64_t v10 = 0;
    }
    if (a4)
    {
      ASDErrorWithSafeUserInfo();
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (!(v9 | v10)) {
      uint64_t v9 = (uint64_t)v7;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return (id)v9;
}

id sub_10030BF34(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    id v7 = a4;
    id v8 = a2;
    id v9 = objc_alloc_init((Class)AMSPromise);
    unint64_t v10 = [v9 completionHandlerAdapter];
    sub_10030B39C(a1, v10);

    id v11 = [v9 thenWithBlock:v7];

    id v12 = +[AMSBagValue bagValueWithKey:v8 valueType:a3 valuePromise:v11];
  }
  else
  {
    id v12 = 0;
  }
  return v12;
}

id sub_10030C018(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10030C0D4;
    v6[3] = &unk_100527BD0;
    id v7 = v3;
    a1 = sub_10030BF34((uint64_t)a1, v7, 0, v6);
  }
  return a1;
}

id sub_10030C0D4(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 arrayForKey:*(void *)(a1 + 32)];
  id v3 = [v2 valuePromise];

  return v3;
}

id sub_10030C128(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10030C1E4;
    v6[3] = &unk_100527BD0;
    id v7 = v3;
    a1 = sub_10030BF34((uint64_t)a1, v7, 1, v6);
  }
  return a1;
}

id sub_10030C1E4(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 BOOLForKey:*(void *)(a1 + 32)];
  id v3 = [v2 valuePromise];

  return v3;
}

id sub_10030C238(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10030C2F4;
    v6[3] = &unk_100527BD0;
    id v7 = v3;
    a1 = sub_10030BF34((uint64_t)a1, v7, 2, v6);
  }
  return a1;
}

id sub_10030C2F4(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 doubleForKey:*(void *)(a1 + 32)];
  id v3 = [v2 valuePromise];

  return v3;
}

id sub_10030C348(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10030C400;
  v6[3] = &unk_100527BD0;
  id v3 = a2;
  id v7 = v3;
  uint64_t v4 = sub_10030BF34(a1, v3, 3, v6);

  return v4;
}

id sub_10030C400(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 integerForKey:*(void *)(a1 + 32)];
  id v3 = [v2 valuePromise];

  return v3;
}

id sub_10030C454(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10030C510;
    v6[3] = &unk_100527BD0;
    id v7 = v3;
    a1 = sub_10030BF34((uint64_t)a1, v7, 4, v6);
  }
  return a1;
}

id sub_10030C510(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 stringForKey:*(void *)(a1 + 32)];
  id v3 = [v2 valuePromise];

  return v3;
}

id sub_10030C564(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10030C620;
    v6[3] = &unk_100527BD0;
    id v7 = v3;
    a1 = sub_10030BF34((uint64_t)a1, v7, 5, v6);
  }
  return a1;
}

id sub_10030C620(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 URLForKey:*(void *)(a1 + 32)];
  id v3 = [v2 valuePromise];

  return v3;
}

id sub_10030C674(id a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    id v9 = sub_10030C018(a1, v7);
    id v15 = 0;
    unint64_t v10 = [v9 valueWithError:&v15];
    id v11 = v15;

    if (!v11 && v10)
    {
      a1 = v10;
LABEL_13:

      goto LABEL_14;
    }
    a1 = v8;

    id v12 = [v11 domain];
    if ([v12 isEqualToString:AMSErrorDomain] && objc_msgSend(v11, "code") == (id)204)
    {

      if ((a4 & 1) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
    }
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      id v17 = v7;
      __int16 v18 = 2114;
      id v19 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", buf, 0x16u);
    }

    goto LABEL_13;
  }
LABEL_14:

  return a1;
}

void sub_10030C810(void *a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = sub_10030C018(a1, v7);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10030C8F0;
    v10[3] = &unk_100527BF8;
    char v13 = a3;
    id v11 = v7;
    id v12 = v8;
    [v9 valueWithCompletion:v10];
  }
}

void sub_10030C8F0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (v7)
  {
    id v9 = [v7 domain];
    if ([v9 isEqualToString:AMSErrorDomain] && objc_msgSend(v8, "code") == (id)204)
    {
      int v10 = *(unsigned __int8 *)(a1 + 48);

      if (!v10) {
        goto LABEL_10;
      }
    }
    else
    {
    }
    id v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v12;
      __int16 v15 = 2114;
      id v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", (uint8_t *)&v13, 0x16u);
    }
  }
LABEL_10:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10030CA3C(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    a1 = sub_10030C674(a1, a2, a3, 1);
    uint64_t v3 = vars8;
  }
  return a1;
}

void sub_10030CA70(void *a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = sub_10030C454(a1, v7);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10030CB50;
    v10[3] = &unk_100527BF8;
    char v13 = a3;
    id v11 = v7;
    id v12 = v8;
    [v9 valueWithCompletion:v10];
  }
}

void sub_10030CB50(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (v7)
  {
    id v9 = [v7 domain];
    if ([v9 isEqualToString:AMSErrorDomain] && objc_msgSend(v8, "code") == (id)204)
    {
      int v10 = *(unsigned __int8 *)(a1 + 48);

      if (!v10) {
        goto LABEL_10;
      }
    }
    else
    {
    }
    id v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v12;
      __int16 v15 = 2114;
      id v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", (uint8_t *)&v13, 0x16u);
    }
  }
LABEL_10:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10030CC9C(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a2;
    id v6 = a3;
    id v7 = sub_10030C454(a1, v5);
    id v14 = 0;
    id v8 = [v7 valueWithError:&v14];
    id v9 = v14;

    if (v9 || !v8)
    {
      id v10 = v6;

      id v11 = [v9 domain];
      if ([v11 isEqualToString:AMSErrorDomain]) {
        [v9 code];
      }

      uint64_t v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543618;
        id v16 = v5;
        __int16 v17 = 2114;
        id v18 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", buf, 0x16u);
      }

      id v8 = v10;
    }
  }
  else
  {
    id v8 = 0;
  }
  return v8;
}

id sub_10030CE24(void *a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  if (!a1)
  {
    id v12 = 0;
    goto LABEL_14;
  }
  id v8 = sub_10030C128(a1, v7);
  id v16 = 0;
  id v9 = [v8 valueWithError:&v16];
  id v10 = v16;

  id v11 = [v9 BOOLValue];
  if (v10 || (id v12 = v11, !v9))
  {
    int v13 = [v10 domain];
    if ([v13 isEqualToString:AMSErrorDomain] && objc_msgSend(v10, "code") == (id)204)
    {

      if ((a4 & 1) == 0)
      {
LABEL_12:
        id v12 = a3;
        goto LABEL_13;
      }
    }
    else
    {
    }
    id v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      id v18 = v7;
      __int16 v19 = 2114;
      id v20 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", buf, 0x16u);
    }

    goto LABEL_12;
  }
LABEL_13:

LABEL_14:
  return v12;
}

void sub_10030CFAC(void *a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = sub_10030C128(a1, v7);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10030D08C;
    v10[3] = &unk_100527BF8;
    char v13 = a3;
    id v11 = v7;
    id v12 = v8;
    [v9 valueWithCompletion:v10];
  }
}

void sub_10030D08C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = v6;
  if (!a2 || v6)
  {
    id v8 = [v6 domain];
    if ([v8 isEqualToString:AMSErrorDomain] && objc_msgSend(v7, "code") == (id)204)
    {
      int v9 = *(unsigned __int8 *)(a1 + 48);

      if (!v9)
      {
LABEL_12:
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, v7);
        goto LABEL_13;
      }
    }
    else
    {
    }
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138543618;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      __int16 v15 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", (uint8_t *)&v12, 0x16u);
    }

    goto LABEL_12;
  }
  (*(void (**)(void, id, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), [a2 BOOLValue], 0);
LABEL_13:
}

id sub_10030D1EC(id result, void *a2, void *a3)
{
  if (result) {
    return sub_10030CE24(result, a2, a3, 1);
  }
  return result;
}

double sub_10030D1FC(void *a1, void *a2, char a3, double a4)
{
  id v7 = a2;
  if (!a1)
  {
    double v12 = 0.0;
    goto LABEL_14;
  }
  id v8 = sub_10030C238(a1, v7);
  id v16 = 0;
  int v9 = [v8 valueWithError:&v16];
  id v10 = v16;

  [v9 doubleValue];
  if (v10 || (double v12 = v11, !v9))
  {
    uint64_t v13 = [v10 domain];
    if ([v13 isEqualToString:AMSErrorDomain] && objc_msgSend(v10, "code") == (id)204)
    {

      if ((a3 & 1) == 0)
      {
LABEL_12:
        double v12 = a4;
        goto LABEL_13;
      }
    }
    else
    {
    }
    __int16 v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      id v18 = v7;
      __int16 v19 = 2114;
      id v20 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", buf, 0x16u);
    }

    goto LABEL_12;
  }
LABEL_13:

LABEL_14:
  return v12;
}

double sub_10030D38C(void *a1, void *a2, double a3)
{
  if (a1) {
    return sub_10030D1FC(a1, a2, 1, a3);
  }
  else {
    return 0.0;
  }
}

id sub_10030D3A0(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  if (!a1)
  {
    id v12 = 0;
    goto LABEL_14;
  }
  id v8 = sub_10030C348(a1, v7);
  id v16 = 0;
  int v9 = [v8 valueWithError:&v16];
  id v10 = v16;

  id v11 = [v9 integerValue];
  if (v10 || (id v12 = v11, !v9))
  {
    uint64_t v13 = [v10 domain];
    if ([v13 isEqualToString:AMSErrorDomain] && objc_msgSend(v10, "code") == (id)204)
    {

      if ((a4 & 1) == 0)
      {
LABEL_12:
        id v12 = a3;
        goto LABEL_13;
      }
    }
    else
    {
    }
    __int16 v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      id v18 = v7;
      __int16 v19 = 2114;
      id v20 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", buf, 0x16u);
    }

    goto LABEL_12;
  }
LABEL_13:

LABEL_14:
  return v12;
}

void sub_10030D528(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    int v9 = sub_10030C348(a1, v7);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10030D608;
    v10[3] = &unk_100527BF8;
    char v13 = a3;
    id v11 = v7;
    id v12 = v8;
    [v9 valueWithCompletion:v10];
  }
}

void sub_10030D608(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = v6;
  if (!a2 || v6)
  {
    id v8 = [v6 domain];
    if ([v8 isEqualToString:AMSErrorDomain] && objc_msgSend(v7, "code") == (id)204)
    {
      int v9 = *(unsigned __int8 *)(a1 + 48);

      if (!v9)
      {
LABEL_12:
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, v7);
        goto LABEL_13;
      }
    }
    else
    {
    }
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138543618;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      __int16 v15 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error reading key %{public}@: %{public}@", (uint8_t *)&v12, 0x16u);
    }

    goto LABEL_12;
  }
  (*(void (**)(void, id, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), [a2 integerValue], 0);
LABEL_13:
}

id sub_10030D834(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  self;
  int v12 = objc_opt_new();
  __int16 v14 = v12;
  if (v12)
  {
    objc_setProperty_atomic_copy(v12, v13, v10, 248);
    __int16 v15 = sub_1003B9E28((uint64_t)v10);
    objc_setProperty_atomic_copy(v14, v16, v15, 104);
  }
  else
  {
    __int16 v15 = sub_1003B9E28((uint64_t)v10);
  }

  id v18 = sub_100297AC0(v8);
  if (v14) {
    objc_setProperty_atomic_copy(v14, v17, v18, 112);
  }

  __int16 v19 = sub_10022F014(v8);
  id v21 = sub_1002704DC(v19);
  if (v14) {
    objc_setProperty_atomic_copy(v14, v20, v21, 120);
  }

  long long v22 = sub_1002AEBB0(v9);
  long long v24 = sub_10022FD2C(v8, v22);
  if (v14) {
    objc_setProperty_atomic_copy(v14, v23, v24, 136);
  }

  long long v25 = sub_100297C3C(v8);
  id v26 = [v25 longLongValue];
  if (v14) {
    *((void *)v14 + 18) = v26;
  }

  uint64_t v27 = sub_100297B68(v8);
  [v27 doubleValue];
  if (v14) {
    *((void *)v14 + 22) = v28;
  }

  uint64_t v29 = sub_100297EDC(v8);
  id v30 = [v29 longLongValue];
  if (v14) {
    *((void *)v14 + 19) = v30;
  }

  id v31 = sub_1002984A0(v8);
  long long v33 = v31;
  if (v14)
  {
    objc_setProperty_atomic_copy(v14, v32, v31, 160);

    if (v9) {
      unsigned __int8 v34 = sub_10026E7EC(v9, @"is_store_based");
    }
    else {
      unsigned __int8 v34 = 0;
    }
    *((unsigned char *)v14 + 83) = v34;
  }
  else
  {

    if (v9) {
      sub_10026E7EC(v9, @"is_store_based");
    }
  }
  long long v35 = sub_100297CE4(v8);
  unsigned __int8 v36 = [v35 BOOLValue];
  if (v14) {
    *((unsigned char *)v14 + 84) = v36;
  }

  long long v37 = sub_1003B9E28((uint64_t)v10);
  long long v38 = sub_100297AC0(v8);
  long long v40 = +[NSString stringWithFormat:@"%@-%@", v37, v38];
  if (v14) {
    objc_setProperty_atomic(v14, v39, v40, 240);
  }

  unsigned __int8 v41 = sub_1002AEB18(v9);
  if (v14)
  {
    *((unsigned char *)v14 + 85) = v41;
    *((_DWORD *)v14 + 22) = 9;
    id Property = objc_getProperty(v14, v42, 240, 1);
  }
  else
  {
    id Property = 0;
  }
  id v44 = +[NSString stringWithFormat:@"com.apple.appstored.odrAssetDownload.%@", Property];
  __int16 v46 = +[KeepAlive keepAliveWithName:v44];
  if (v14) {
    objc_setProperty_atomic(v14, v45, v46, 264);
  }

  id v47 = [_TtC9appstored6LogKey alloc];
  if (v14) {
    double v48 = *((double *)v14 + 22);
  }
  else {
    double v48 = 0.0;
  }
  self;
  id v49 = @"ODR";
  if (v48 > 0.0) {
    id v49 = @"ODP";
  }
  if (v48 == 1.0) {
    id v49 = @"ODI";
  }
  id v50 = v49;
  id v51 = [v11 description];

  if (v14)
  {
    id v53 = [(LogKey *)v47 initWithCode:v50 base:v51 ID:objc_getProperty(v14, v52, 112, 1)];
    objc_setProperty_atomic(v14, v54, v53, 184);

    if (*((unsigned char *)v14 + 84))
    {
      id v55 = sub_100297F14(v8);
      objc_setProperty_atomic_copy(v14, v58, v55, 216);
      goto LABEL_38;
    }
  }
  else
  {
  }
  id v55 = sub_10026E95C(v8, @"source_url");
  id v57 = +[NSURL fileURLWithPath:v55];
  if (!v14)
  {
LABEL_49:

    goto LABEL_50;
  }
  objc_setProperty_atomic_copy(v14, v56, v57, 216);

LABEL_38:
  if (![*((id *)v14 + 27) isFileURL]) {
    goto LABEL_51;
  }
  id v59 = (void *)*((void *)v14 + 27);
  id v80 = 0;
  unsigned __int8 v60 = [v59 checkResourceIsReachableAndReturnError:&v80];
  id v61 = v80;
  id v55 = v61;
  if ((v60 & 1) == 0)
  {
    id v78 = v61;
    id v79 = 0;
    id v62 = *((id *)v14 + 14);
    id v63 = sub_1003B9C5C(*((id *)v14 + 31), (uint64_t)&v79);
    id v64 = v63;
    if (v63)
    {
      v65 = sub_1002AEDEC((uint64_t)v63, v62);
      uint64_t v66 = *((void *)v14 + 31);
      v67 = sub_100297F14(v65);
      double v68 = [v67 absoluteString];
      uint64_t v69 = sub_1003B99F0(v66, v68, &v79);
    }
    else
    {
      uint64_t v69 = 0;
    }

    id v57 = v79;
    v70 = (void *)*((void *)v14 + 27);
    *((void *)v14 + 27) = v69;

    uint64_t v71 = *((void *)v14 + 27);
    BOOL v72 = ASDLogHandleForCategory();
    v73 = v72;
    if (v71)
    {
      id v55 = v78;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v74 = *((void *)v14 + 23);
        uint64_t v75 = (void *)*((void *)v14 + 27);
        *(_DWORD *)buf = 138412546;
        uint64_t v82 = v74;
        __int16 v83 = 2114;
        id v84 = v75;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "[%@] Resource was located at URL: %{public}@", buf, 0x16u);
      }
    }
    else
    {
      id v55 = v78;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        uint64_t v77 = *((void *)v14 + 23);
        *(_DWORD *)buf = 138412546;
        uint64_t v82 = v77;
        __int16 v83 = 2114;
        id v84 = v57;
        _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "[%@] Resource was not found with error: %{public}@", buf, 0x16u);
      }
    }

    goto LABEL_49;
  }
LABEL_50:

LABEL_51:
  return v14;
}

void sub_10030E024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10030E040(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (WeakRetained) {
      id Property = objc_getProperty(WeakRetained, v3, 184, 1);
    }
    else {
      id Property = 0;
    }
    int v7 = 138412290;
    id v8 = Property;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@] Received cancellation request.", (uint8_t *)&v7, 0xCu);
  }

  if (WeakRetained) {
    id v6 = objc_getProperty(WeakRetained, v5, 96, 1);
  }
  else {
    id v6 = 0;
  }
  [v6 cancel];
}

void sub_10030E130(uint64_t a1, void *a2)
{
  int v7 = a2;
  if (a1)
  {
    [*(id *)(a1 + 40) lock];
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v3 = *(void **)(a1 + 24);
      if (v3)
      {
        sub_10030E200((uint64_t)v7, v3);
      }
      else
      {
        if (v7) {
          v7[24] = *(void *)(a1 + 192);
        }
        sub_10030E34C((uint64_t)v7);
      }
    }
    uint64_t v4 = *(void **)(a1 + 16);
    if (!v4)
    {
      uint64_t v5 = objc_opt_new();
      id v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v5;

      uint64_t v4 = *(void **)(a1 + 16);
    }
    [v4 addObject:v7];
    if (v7 && (*((unsigned char *)v7 + 82) & 1) != 0) {
      ++*(void *)(a1 + 48);
    }
    [*(id *)(a1 + 40) unlock];
  }
}

void sub_10030E200(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    [*(id *)(a1 + 40) lock];
    *(unsigned char *)(a1 + 8) = 1;
    objc_storeStrong((id *)(a1 + 24), a2);
    sub_10030E764(a1, v4);
    [*(id *)(a1 + 256) finishWithError:v4];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v5 = *(id *)(a1 + 16);
    id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        id v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          sub_10030E200(*(void *)(*((void *)&v10 + 1) + 8 * (void)v9), v4);
          id v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }

    objc_msgSend(*(id *)(a1 + 40), "unlock", (void)v10);
  }
}

void sub_10030E34C(uint64_t a1)
{
  if (a1)
  {
    [*(id *)(a1 + 40) lock];
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t v2 = objc_opt_new();
    uint64_t v3 = +[NSURL fileURLWithPath:*(void *)(a1 + 136) isDirectory:1];
    id v5 = v3;
    if (v2)
    {
      objc_setProperty_atomic_copy(v2, v4, v3, 8);

      id v6 = (void *)(a1 + 192);
      v2[2] = *(void *)(a1 + 192);
    }
    else
    {

      id v6 = (void *)(a1 + 192);
    }
    sub_10030E764(a1, 0);
    [*(id *)(a1 + 256) finishWithResult:v2];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = *(id *)(a1 + 16);
    id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v14;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          if (v12) {
            *(void *)(v12 + 192) = *v6;
          }
          sub_10030E34C(v12);
        }
        id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v9);
    }

    objc_msgSend(*(id *)(a1 + 40), "unlock", (void)v13);
  }
}

id sub_10030E4E4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  [*(id *)(a1 + 40) lock];
  if (!*(void *)(a1 + 32))
  {
    if (*(void *)(a1 + 232) == 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = &v9;
      uint64_t v11 = 0x3032000000;
      uint64_t v12 = sub_1000181A8;
      long long v13 = sub_100017C90;
      id v14 = 0;
      id v4 = sub_1003E0BA4();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10030E688;
      v8[3] = &unk_100527C20;
      v8[4] = a1;
      void v8[5] = &v9;
      [v4 readUsingSession:v8];

      BOOL v5 = ((unint64_t)sub_1003D4CF0((id *)v10[5]) & 0xFFFFFFFFFFFFFFFDLL) == 1;
      _Block_object_dispose(&v9, 8);
    }
    else
    {
      BOOL v5 = 1;
    }
    uint64_t v6 = +[NSNumber numberWithBool:v5];
    id v7 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v6;

    [*(id *)(a1 + 40) unlock];
    return (id)v5;
  }
  [*(id *)(a1 + 40) unlock];
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 BOOLValue];
}

void sub_10030E670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10030E688(uint64_t a1, id a2)
{
  sub_100401CE4(a2, *(void **)(*(void *)(a1 + 32) + 104));
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = sub_1002C2130(v6);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  BOOL v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id *sub_10030E6FC(id *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    [result[5] lock];
    uint64_t v4 = +[NSNumber numberWithBool:a2];
    id v5 = v3[4];
    v3[4] = (id)v4;

    id v6 = v3[5];
    return (id *)[v6 unlock];
  }
  return result;
}

void sub_10030E764(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && *(void *)(a1 + 56))
  {
    uint64_t v4 = ASDLogHandleForCategory();
    id v5 = v4;
    if (v3)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1 + 184);
        int v8 = 138412546;
        uint64_t v9 = v6;
        __int16 v10 = 2114;
        id v11 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%@]: Completing coordinator promise: %{public}@", (uint8_t *)&v8, 0x16u);
      }
    }
    else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 184);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@]: Completing coordinator promise", (uint8_t *)&v8, 0xCu);
    }

    [*(id *)(a1 + 56) setComplete:1];
  }
}

void *sub_10030E894(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = sub_1002C9414();
    id v1 = [v2 stringByAppendingPathComponent:v1[14]];
  }
  return v1;
}

id sub_10030E8F4(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc((Class)SZExtractor);
    id v3 = sub_10030E894((void *)a1);
    uint64_t v4 = objc_opt_new();
    id v5 = *(void **)(a1 + 160);
    if (v5)
    {
      uint64_t v6 = [v5 objectForKeyedSubscript:@"hash_type"];
      if (v6)
      {
        uint64_t v7 = [*(id *)(a1 + 160) objectForKeyedSubscript:@"bytes_to_hash"];
        uint64_t v8 = (uint64_t)[v7 integerValue];

        if (v8 >= 1)
        {
          uint64_t v9 = [*(id *)(a1 + 160) objectForKeyedSubscript:@"hash_array"];
          if (v9)
          {
            __int16 v10 = +[NSPropertyListSerialization propertyListWithData:v9 options:0 format:0 error:0];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v10 count])
            {
              [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:SZExtractorOptionsDenyInvalidSymlinks];
              [v4 setObject:v10 forKeyedSubscript:SZExtractorOptionsHashesArray];
              id v11 = +[NSNumber numberWithInteger:v8];
              [v4 setObject:v11 forKeyedSubscript:SZExtractorOptionsHashedChunkSize];

              id v12 = [v6 integerValue];
              long long v13 = &SZExtractorHashTypeMD5;
              if (v12) {
                long long v13 = &SZExtractorHashTypeSHA1;
              }
              [v4 setObject:*v13 forKeyedSubscript:SZExtractorOptionsHashType];
            }
          }
        }
      }
    }
    id v14 = [v4 copy];

    id v15 = [v2 initWithPath:v3 options:v14];
  }
  else
  {
    id v15 = 0;
  }
  return v15;
}

void *sub_10030EB08(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = (void *)a1[7];
    if (!v3)
    {
      id v4 = [objc_alloc((Class)IXPromisedOutOfBandTransfer) initWithName:a1[14] client:1 diskSpaceNeeded:a1[19]];
      id v5 = (void *)v2[7];
      v2[7] = v4;

      id v3 = (void *)v2[7];
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10030EB74(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = objc_opt_new();
    uint64_t v3 = v2;
    if (v2)
    {
      *(_DWORD *)(v2 + 16) = *(_DWORD *)(a1 + 88);
      *(void *)(v2 + 96) = *(void *)(a1 + 152);
    }
    id v4 = +[NSUUID UUID];
    uint64_t v6 = v4;
    if (v3)
    {
      objc_setProperty_atomic((id)v3, v5, v4, 104);

      *(unsigned char *)(v3 + 14) = *(unsigned char *)(a1 + 85);
    }
    else
    {
    }
    uint64_t v7 = +[NSNumber numberWithDouble:*(double *)(a1 + 176)];
    uint64_t v9 = v7;
    if (v3)
    {
      objc_setProperty_atomic((id)v3, v8, v7, 112);

      objc_setProperty_atomic((id)v3, v10, *(id *)(a1 + 184), 128);
      id v12 = (unsigned char *)(a1 + 80);
      *(void *)(v3 + 72) = *(unsigned __int8 *)(a1 + 80);
      *(void *)(v3 + 56) = 2;
      uint64_t v13 = 104;
      if (*(void *)(a1 + 232) == 1) {
        uint64_t v13 = 168;
      }
      objc_setProperty_atomic((id)v3, v11, *(id *)(a1 + v13), 144);
      *(unsigned char *)(v3 + 9) = sub_10030E4E4(a1);
      if (*(unsigned char *)(a1 + 83)) {
        *(void *)(v3 + 168) = 7;
      }
    }
    else
    {

      id v12 = (unsigned char *)(a1 + 80);
      sub_10030E4E4(a1);
    }
    if (*v12) {
      uint64_t v14 = 400;
    }
    else {
      uint64_t v14 = 300;
    }
    long long v16 = +[NSNumber numberWithLongLong:v14];
    if (v3) {
      objc_setProperty_atomic((id)v3, v15, v16, 184);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  return (id)v3;
}

void sub_10030ED5C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    id v4 = +[NSFileManager defaultManager];
    id v5 = [v4 attributesOfItemAtPath:*(void *)(a1 + 136) error:0];
    uint64_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = [v5 objectForKeyedSubscript:NSFileType];
      unsigned int v8 = [v7 isEqualToString:NSFileTypeSymbolicLink];
      char v9 = v8;
      if (v8)
      {
        unsigned int v10 = [v4 removeItemAtPath:*(void *)(a1 + 136) error:0];
        id v11 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = *(void *)(a1 + 184);
          *(_DWORD *)buf = 138412546;
          uint64_t v33 = v26;
          __int16 v34 = 1024;
          LODWORD(v35) = v10;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] Cleaning up symlink (success %d)....", buf, 0x12u);
        }
      }
    }
    else
    {
      char v9 = 0;
    }
    if ([v4 fileExistsAtPath:*(void *)(a1 + 136)])
    {
      id v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *(void *)(a1 + 184);
        uint64_t v25 = *(void *)(a1 + 136);
        *(_DWORD *)buf = 138412546;
        uint64_t v33 = v24;
        __int16 v34 = 2114;
        uint64_t v35 = v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[%@] Simulated download path already existed. success(YES): %{public}@", buf, 0x16u);
      }

      v3[2](v3, 0);
    }
    else
    {
      uint64_t v13 = sub_10030F314(*(void **)(a1 + 216));
      uint64_t v14 = +[NSUserDefaults standardUserDefaults];
      uint64_t v15 = (uint64_t)[v14 integerForKey:@"ODRSimulatedDownloadsBandwidthKey"];

      *(void *)(a1 + 64) = 0;
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10030F0E8;
      v27[3] = &unk_100527C48;
      v27[4] = a1;
      id v28 = v4;
      char v30 = 0;
      char v31 = v9;
      uint64_t v29 = v3;
      long long v16 = v27;
      __int16 v17 = dispatch_get_global_queue(21, 0);
      id v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v17);
      if (v18)
      {
        unint64_t v19 = v15 << 20;
        if (v15 < 1) {
          unint64_t v19 = 20971520;
        }
        double v20 = fmax((double)((unint64_t)v13 / v19), 5.0);
        if (v20 >= 10.0) {
          double v21 = 100000000.0;
        }
        else {
          double v21 = v20 / 100.0 * 1000000000.0;
        }
        dispatch_time_t v22 = dispatch_time(0, (uint64_t)v21);
        dispatch_source_set_timer(v18, v22, (unint64_t)v21, 0x5F5E100uLL);
        dispatch_source_set_event_handler(v18, v16);
        dispatch_resume(v18);
      }

      long long v23 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v18;
    }
  }
}

void sub_10030F0E8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 200) setCompletedUnitCount:(uint64_t)((double)(unint64_t)++*(void *)(*(void *)(a1 + 32) + 64) / 100.0 * 1000.0)];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 64) >= 0x64uLL)
  {
    uint64_t v3 = *(NSObject **)(v2 + 72);
    if (v3)
    {
      dispatch_source_cancel(v3);
      id v4 = *(void **)(v2 + 72);
      *(void *)(v2 + 72) = 0;

      uint64_t v2 = *(void *)(a1 + 32);
    }
    id v5 = *(void **)(a1 + 40);
    uint64_t v6 = [*(id *)(v2 + 216) path];
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 136);
    id v17 = 0;
    unsigned int v8 = [v5 copyItemAtPath:v6 toPath:v7 error:&v17];
    id v9 = v17;

    unsigned int v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 184);
      int v14 = *(unsigned __int8 *)(a1 + 56);
      int v15 = *(unsigned __int8 *)(a1 + 57);
      *(_DWORD *)buf = 138413058;
      uint64_t v19 = v13;
      __int16 v20 = 1024;
      *(_DWORD *)double v21 = v8;
      *(_WORD *)&v21[4] = 1024;
      *(_DWORD *)&v21[6] = v14;
      __int16 v22 = 1024;
      int v23 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%@] Simulated download success(%{BOOL}d): existed(%{BOOL}d) was symlink(%{BOOL}d)", buf, 0x1Eu);
    }

    if (v8)
    {
      id v11 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    }
    else
    {
      id v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 184);
        *(_DWORD *)buf = 138412546;
        uint64_t v19 = v16;
        __int16 v20 = 2114;
        *(void *)double v21 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[%@] simulated download failed with error %{public}@", buf, 0x16u);
      }

      id v11 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    }
    v11();
  }
}

char *sub_10030F314(void *a1)
{
  id v1 = a1;
  char v22 = 0;
  uint64_t v2 = +[NSFileManager defaultManager];
  uint64_t v3 = [v1 path];
  unsigned int v4 = [v2 fileExistsAtPath:v3 isDirectory:&v22];

  if (v4)
  {
    if (v22)
    {
      id v5 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", NSURLLocalizedNameKey, NSURLLocalizedTypeDescriptionKey, 0);
      uint64_t v6 = +[NSFileManager defaultManager];
      id v21 = 0;
      uint64_t v7 = [v6 contentsOfDirectoryAtURL:v1 includingPropertiesForKeys:v5 options:4 error:&v21];
      id v8 = v21;

      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v9 = v7;
      id v10 = [v9 countByEnumeratingWithState:&v17 objects:v23 count:16];
      if (v10)
      {
        id v11 = v10;
        id v12 = 0;
        uint64_t v13 = *(void *)v18;
        do
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(void *)v18 != v13) {
              objc_enumerationMutation(v9);
            }
            v12 += sub_10030F314(*(void *)(*((void *)&v17 + 1) + 8 * i));
          }
          id v11 = [v9 countByEnumeratingWithState:&v17 objects:v23 count:16];
        }
        while (v11);
      }
      else
      {
        id v12 = 0;
      }
      int v15 = v9;
    }
    else
    {
      id v5 = +[NSFileManager defaultManager];
      id v8 = [v1 path];
      int v15 = [v5 attributesOfItemAtPath:v8 error:0];
      id v9 = [v15 objectForKey:NSFileSize];
      id v12 = (char *)[v9 unsignedIntegerValue];
    }
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

id sub_10030F6A0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_10030F704([StoreAsset alloc], v2, 1);

  return v3;
}

id sub_10030F704(id a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    v57.receiver = a1;
    v57.super_class = (Class)StoreAsset;
    uint64_t v6 = objc_msgSendSuper2(&v57, "init");
    a1 = v6;
    if (v6)
    {
      v6[3] = a3;
      uint64_t v7 = (void *)v6[12];
      v6[12] = &off_10054C7B0;

      id v8 = v5;
      uint64_t v9 = sub_1002689B4(v8, @"URL");
      id v10 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v9;

      *((void *)a1 + 2) = 1;
      id v11 = sub_100268568(v8, @"asset-info");
      uint64_t v12 = sub_10026811C(v11, @"file-size");
      uint64_t v13 = (void *)*((void *)a1 + 6);
      *((void *)a1 + 6) = v12;

      uint64_t v14 = sub_10026811C(v8, @"initialODRSize");
      int v15 = (void *)*((void *)a1 + 13);
      *((void *)a1 + 13) = v14;

      uint64_t v16 = sub_1002689B4(v8, @"algorithm");
      long long v17 = (void *)*((void *)a1 + 8);
      *((void *)a1 + 8) = v16;

      uint64_t v18 = sub_10026811C(v8, @"uncompressedSize");
      long long v19 = (void *)*((void *)a1 + 10);
      *((void *)a1 + 10) = v18;

      long long v20 = sub_100268568(v8, @"chunks");
      id v21 = v20;
      if (v20)
      {
        char v22 = sub_100267F88(v20, @"clearHashes");
        int v23 = sub_1003B6494(v22);
        uint64_t v24 = [v23 allObjects];
        uint64_t v25 = (void *)*((void *)a1 + 7);
        *((void *)a1 + 7) = v24;

        uint64_t v26 = sub_100267F88(v21, @"hashes");
        uint64_t v27 = sub_1003B6494(v26);
        uint64_t v28 = [v27 allObjects];
        uint64_t v29 = (void *)*((void *)a1 + 11);
        *((void *)a1 + 11) = v28;

        uint64_t v30 = sub_10026811C(v21, @"chunkSize");
        char v31 = (void *)*((void *)a1 + 15);
        *((void *)a1 + 15) = v30;
      }
      uint64_t v32 = sub_1002689B4(v8, @"md5");
      uint64_t v33 = (void *)*((void *)a1 + 14);
      *((void *)a1 + 14) = v32;

      __int16 v34 = sub_100268568(v8, @"local-server-info");
      *((unsigned char *)a1 + 8) = v34 != 0;

      if (v8) {
        unsigned __int8 v35 = sub_1002680CC(v8, @"isStreamable", 0);
      }
      else {
        unsigned __int8 v35 = 0;
      }
      *((unsigned char *)a1 + 9) = v35;
      unsigned __int8 v36 = sub_100267F88(v8, @"priorVariantIdentifiers");
      long long v37 = sub_1003B6494(v36);
      uint64_t v38 = [v37 allObjects];
      long long v39 = (void *)*((void *)a1 + 16);
      *((void *)a1 + 16) = v38;

      uint64_t v40 = sub_10026811C(v8, @"priorVersionExternalIdentifier");
      unsigned __int8 v41 = (void *)*((void *)a1 + 17);
      *((void *)a1 + 17) = v40;

      id v42 = sub_100267F88(v8, @"sinfs");
      if ([v42 count])
      {
        id v43 = (id *)sub_1001FA1A4([StoreDRM alloc], v42);
        id v44 = v43;
        if (v43)
        {
          uint64_t v45 = sub_1001FA294(v43, @"sinf");
          __int16 v46 = (void *)*((void *)a1 + 18);
          *((void *)a1 + 18) = v45;

          uint64_t v47 = sub_1001FA294(v44, @"dpInfo");
          double v48 = (void *)*((void *)a1 + 9);
          *((void *)a1 + 9) = v47;
        }
      }
      else
      {
        uint64_t v49 = sub_100268348(v8, @"sinf");
        id v44 = (id *)*((void *)a1 + 18);
        *((void *)a1 + 18) = v49;
      }

      uint64_t v50 = sub_1002689B4(v8, @"variantId");
      id v51 = (void *)*((void *)a1 + 19);
      *((void *)a1 + 19) = v50;

      if ([*((id *)a1 + 19) length]) {
        sub_10025B598((uint64_t)VariantDescriptor, *((void **)a1 + 19));
      }
      else {
      uint64_t v52 = sub_10025B5F8();
      }
      id v53 = (void *)*((void *)a1 + 20);
      *((void *)a1 + 20) = v52;

      uint64_t v54 = sub_100268568(v8, @"backgroundAssetInfo");
      id v55 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v54;
    }
  }

  return a1;
}

id sub_10030FB00(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_100267F88(v2, @"deltaPackages");

  unsigned int v4 = sub_1003B63BC(v3);
  id v5 = sub_10041E130(v4, &stru_100527C68);

  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = &__NSArray0__struct;
  }
  id v7 = v6;

  return v7;
}

id sub_10030FBA0(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = sub_10030F704([StoreAsset alloc], v2, 3);

  return v3;
}

id sub_10030FBFC(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  self;
  if (a3)
  {
    sub_10025B5F8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10030FD0C;
    v8[3] = &unk_100527C90;
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v5 = v9;
    uint64_t v6 = sub_1003921D4(v4, v8);
  }
  else
  {
    uint64_t v6 = sub_1003921D4(v4, &stru_100527CD0);
    if (!v6)
    {
      uint64_t v6 = [v4 firstObject];
    }
  }

  return v6;
}

uint64_t sub_10030FD0C(uint64_t a1, id self)
{
  if (self) {
    id Property = objc_getProperty(self, (SEL)self, 160, 1);
  }
  else {
    id Property = 0;
  }
  id v4 = *(void **)(a1 + 32);
  return sub_10025BF24((uint64_t)Property, v4);
}

BOOL sub_10030FD5C(id a1, StoreAsset *a2)
{
  BOOL v2 = 1;
  if (a2)
  {
    id Property = objc_getProperty(a2, (SEL)a2, 160, 1);
    if (Property) {
      return (Property[16] & 1) == 0;
    }
  }
  return v2;
}

id sub_10030FDA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a2;
  self;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10030FE98;
  v13[3] = &unk_100527CF8;
  id v14 = v6;
  id v15 = v7;
  id v9 = v7;
  id v10 = v6;
  id v11 = sub_1003921D4(v8, v13);

  return v11;
}

uint64_t sub_10030FE98(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 40);
  id v4 = (__CFString *)*(id *)(a1 + 32);
  id v5 = v3;
  if (a2)
  {
    if ([(__CFString *)v4 isEqualToNumber:*(void *)(a2 + 136)])
    {
      id v6 = [(__CFString *)v5 length];
      id v7 = *(void **)(a2 + 128);
      if (v6)
      {
        if (([v7 containsObject:v5] & 1) == 0)
        {
          id v8 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            id v9 = [*(id *)(a2 + 128) componentsJoinedByString:@", "];
            int v16 = 138543618;
            long long v17 = v9;
            __int16 v18 = 2114;
            CFStringRef v19 = v5;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[StoreAsset]: Rejecting delta - no applicable variants (%{public}@) for installed variant %{public}@", (uint8_t *)&v16, 0x16u);
          }
          goto LABEL_10;
        }
LABEL_14:
        id v8 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v14 = *(const __CFString **)(a2 + 152);
          if (!v14) {
            CFStringRef v14 = @"Universal";
          }
          int v16 = 138543618;
          long long v17 = v4;
          __int16 v18 = 2114;
          CFStringRef v19 = v14;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[StoreAsset]: Selected delta for version %{public}@ variant %{public}@", (uint8_t *)&v16, 0x16u);
        }
        a2 = 1;
        goto LABEL_19;
      }
      if (![v7 count]) {
        goto LABEL_14;
      }
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        id v11 = "[StoreAsset]: Rejecting delta - installed app is universal";
        uint64_t v12 = v8;
        uint32_t v13 = 2;
        goto LABEL_9;
      }
    }
    else
    {
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v10 = *(__CFString **)(a2 + 136);
        int v16 = 138543618;
        long long v17 = v10;
        __int16 v18 = 2114;
        CFStringRef v19 = v4;
        id v11 = "[StoreAsset]: Rejecting delta - version %{public}@ does not match installed version %{public}@";
        uint64_t v12 = v8;
        uint32_t v13 = 22;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v16, v13);
      }
    }
LABEL_10:
    a2 = 0;
LABEL_19:
  }
  return a2;
}

char *sub_100310440(char *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)PerformPurchaseTask;
    id v5 = (char *)objc_msgSendSuper2(&v9, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)(v5 + 42), a2);
      uint64_t v6 = +[NSMutableDictionary dictionary];
      id v7 = *(void **)(a1 + 66);
      *(void *)(a1 + 66) = v6;
    }
  }

  return a1;
}

id sub_1003104E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 58);
    if (!v4)
    {
      uint64_t v5 = +[NSMutableDictionary dictionary];
      uint64_t v6 = *(void **)(a1 + 58);
      *(void *)(a1 + 58) = v5;

      id v4 = *(void **)(a1 + 58);
    }
    id v7 = [v3 uniqueIdentifier];
    id v8 = [v4 objectForKeyedSubscript:v7];

    if (!v8)
    {
      id v8 = objc_opt_new();
      objc_super v9 = *(void **)(a1 + 58);
      id v10 = [v3 uniqueIdentifier];
      [v9 setObject:v8 forKeyedSubscript:v10];

      id v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = [v3 logUUID];
        int v14 = 138543362;
        id v15 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[%{public}@] Created interactive presenter", (uint8_t *)&v14, 0xCu);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_100310AC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = [*(id *)(a1 + 32) logKey];
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      CFStringRef v19 = v12;
      __int16 v20 = 2114;
      uint64_t v21 = v13;
      __int16 v22 = 2114;
      id v23 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Client %{public}@ failed authentication request with error %{public}@", buf, 0x20u);
    }
  }
  id v8 = dispatch_get_global_queue(21, 0);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100310C70;
  v14[3] = &unk_1005223D0;
  id v9 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = v9;
  id v15 = v5;
  id v10 = v6;
  id v11 = v5;
  sub_100010948(v8, v14);
}

uint64_t sub_100310C70(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10031121C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = [*(id *)(a1 + 32) logUUID];
      int v9 = 138543618;
      id v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Interactive dialog request failed: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100311330(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = [*(id *)(a1 + 32) logKey];
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138412802;
      __int16 v11 = v8;
      __int16 v12 = 2114;
      uint64_t v13 = v9;
      __int16 v14 = 2114;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Client %{public}@ failed dialog request with error %{public}@", (uint8_t *)&v10, 0x20u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100311800(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = [*(id *)(a1 + 32) logUUID];
      int v9 = 138543618;
      int v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Interactive engagement request failed: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100311914(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = [*(id *)(a1 + 32) logUUID];
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138543874;
      __int16 v11 = v8;
      __int16 v12 = 2114;
      uint64_t v13 = v9;
      __int16 v14 = 2114;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Client %{public}@ failed enagement request with error %{public}@", (uint8_t *)&v10, 0x20u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100312C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_100312C7C(uint64_t a1, void *a2)
{
  BOOL v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 setDelegate:0];
  id v4 = [v3 userInfo];

  id v5 = sub_100268568(v4, AMSErrorUserInfoKeyServerPayload);

  if (v5 && sub_1003DDE0C(v5))
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed purchase had a trigger queue check.", v8, 2u);
    }

    id v7 = sub_100213454();
    [v7 checkStoreQueue:1];
  }
}

void sub_100312D70(uint64_t a1, void *a2)
{
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v113 objects:v125 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v114;
    uint64_t v95 = a1;
    uint64_t v97 = *(void *)v114;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v114 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v113 + 1) + 8 * i);
        id v8 = [v7 purchase];
        uint64_t v9 = [v8 uniqueIdentifier];

        int v10 = (void *)v9;
        if (v9)
        {
          v104 = [*(id *)(*(void *)(a1 + 32) + 66) objectForKeyedSubscript:v9];
          if (v104)
          {
            uint64_t v103 = (void *)v9;
            __int16 v11 = +[MetricsBridge metricsFieldsFromResult:v7];
            id v12 = [v11 mutableCopy];

            if (!v12) {
              id v12 = (id)objc_opt_new();
            }
            uint64_t v13 = [v104 buyParams];
            uint64_t v14 = [v13 parameterForKey:@"mtPageContext"];

            if (v14) {
              [v12 setObject:v14 forKeyedSubscript:@"pageContext"];
            }
            uint64_t v101 = (void *)v14;
            id v15 = [v104 buyParams];
            uint64_t v16 = [v15 parameterForKey:@"extRefApp2"];

            if (v16) {
              [v12 setObject:v16 forKeyedSubscript:@"refApp"];
            }
            v100 = (void *)v16;
            id v102 = v12;
            [v104 setQosMetricsFields:v12];
            -[NSObject setDidShowPaymentSheet:](v104, "setDidShowPaymentSheet:", [v7 didShowPaymentSheet]);
            id v17 = [v7 error];

            if (v17)
            {
              __int16 v18 = [v7 error];
              CFStringRef v19 = ASDErrorWithSafeUserInfo();
              __int16 v20 = [v104 account];
              uint64_t v21 = objc_msgSend(v20, "ams_DSID");
              __int16 v22 = sub_1003DDB9C((uint64_t)StoreItemResponse, v19, v21);
              [v104 setItemResponse:v22];

              uint64_t v5 = v97;
              uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 42);
              uint64_t v24 = v101;
              if (v23 && *(unsigned char *)(v23 + 24) && !*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
              {
                uint64_t v25 = [v7 error];
                uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8);
                id v27 = *(id *)(v26 + 40);
                *(void *)(v26 + 40) = v25;
                goto LABEL_74;
              }
            }
            else
            {
              if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
              {
                ASDErrorWithSafeUserInfo();
                id v27 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v29 = [v104 account];
                uint64_t v30 = objc_msgSend(v29, "ams_DSID");
                char v31 = sub_1003DDB9C((uint64_t)StoreItemResponse, v27, v30);
                [v104 setItemResponse:v31];

                uint64_t v5 = v97;
                uint64_t v24 = v101;
              }
              else
              {
                uint64_t v32 = [v7 responseDictionary];
                uint64_t v33 = v104;
                __int16 v34 = sub_1003DD184((uint64_t)StoreItemResponse, v32, (int)[v104 requireUniversal]);
                [v104 setItemResponse:v34];

                if (![v104 purchaseType])
                {
                  unsigned __int8 v35 = [v7 URLResponse];
                  objc_opt_class();
                  char isKindOfClass = objc_opt_isKindOfClass();

                  if (isKindOfClass)
                  {
                    long long v37 = [v7 URLResponse];
                    uint64_t v38 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v37 statusCode]);
                  }
                  else
                  {
                    uint64_t v38 = 0;
                  }
                  id Property = [v104 itemResponse];
                  unsigned __int8 v41 = Property;
                  if (Property) {
                    id Property = objc_getProperty(Property, v40, 112, 1);
                  }
                  id v42 = Property;

                  sub_1003C44E0();
                  id v43 = (long long *)objc_claimAutoreleasedReturnValue();
                  uint64_t v33 = v104;
                  id v44 = [v104 itemID];
                  uint64_t v45 = [v104 bundleID];
                  sub_1003CA5AC(v43, v44, v45, v42, v38);
                }
                uint64_t v46 = [v33 temporaryBundleID];
                v98 = i;
                if (v46)
                {
                  uint64_t v47 = (void *)v46;
                  unsigned int v48 = [v33 generatedVendorID];

                  if (v48)
                  {
                    uint64_t v49 = +[LSApplicationWorkspace defaultWorkspace];
                    long long v109 = 0u;
                    long long v110 = 0u;
                    long long v111 = 0u;
                    long long v112 = 0u;
                    uint64_t v50 = [v33 itemResponse];
                    uint64_t v52 = v50;
                    id v96 = v4;
                    if (v50) {
                      uint64_t v50 = objc_getProperty(v50, v51, 56, 1);
                    }
                    id v53 = v50;

                    id v54 = [v53 countByEnumeratingWithState:&v109 objects:v124 count:16];
                    if (v54)
                    {
                      id v56 = v54;
                      uint64_t v57 = *(void *)v110;
                      do
                      {
                        SEL v58 = 0;
                        do
                        {
                          if (*(void *)v110 != v57) {
                            objc_enumerationMutation(v53);
                          }
                          id v59 = *(void **)(*((void *)&v109 + 1) + 8 * (void)v58);
                          if (v59) {
                            id v60 = objc_getProperty(*(id *)(*((void *)&v109 + 1) + 8 * (void)v58), v55, 96, 1);
                          }
                          else {
                            id v60 = 0;
                          }
                          id v61 = v60;

                          if (v61)
                          {
                            id v62 = ASDLogHandleForCategory();
                            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
                            {
                              double v68 = [v33 logKey];
                              v70 = [v33 vendorName];
                              if (v59) {
                                id v71 = objc_getProperty(v59, v69, 96, 1);
                              }
                              else {
                                id v71 = 0;
                              }
                              id v72 = v71;
                              *(_DWORD *)buf = 138412802;
                              __int16 v119 = v68;
                              __int16 v120 = 2114;
                              __int16 v121 = v70;
                              __int16 v122 = 2114;
                              id v123 = v72;
                              _os_log_debug_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "[%@] Creating device identifier for vendor %{public}@ and bundle %{public}@", buf, 0x20u);

                              i = v98;
                              uint64_t v33 = v104;
                            }

                            id v64 = [v33 vendorName];
                            if (v59) {
                              id v65 = objc_getProperty(v59, v63, 96, 1);
                            }
                            else {
                              id v65 = 0;
                            }
                            id v66 = v65;
                            id v67 = [v49 createDeviceIdentifierWithVendorName:v64 bundleIdentifier:v66];
                          }
                          SEL v58 = (char *)v58 + 1;
                        }
                        while (v56 != v58);
                        id v73 = [v53 countByEnumeratingWithState:&v109 objects:v124 count:16];
                        id v56 = v73;
                      }
                      while (v73);
                    }

                    uint64_t v74 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
                    {
                      v92 = [v33 logKey];
                      id v93 = [v33 vendorName];
                      id v94 = [v33 temporaryBundleID];
                      *(_DWORD *)buf = 138412802;
                      __int16 v119 = v92;
                      __int16 v120 = 2114;
                      __int16 v121 = v93;
                      __int16 v122 = 2114;
                      id v123 = v94;
                      _os_log_debug_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "[%@] Removing temporary device identifier for vendor %{public}@ and bundle %{public}@", buf, 0x20u);
                    }
                    uint64_t v75 = [v33 vendorName];
                    double v76 = [v33 temporaryBundleID];
                    [v49 removeDeviceIdentifierForVendorName:v75 bundleIdentifier:v76];

                    [v33 setTemporaryBundleID:0];
                    a1 = v95;
                    id v4 = v96;
                  }
                }
                long long v107 = 0u;
                long long v108 = 0u;
                long long v105 = 0u;
                long long v106 = 0u;
                uint64_t v77 = [v33 itemResponse];
                id v79 = v77;
                if (v77) {
                  uint64_t v77 = objc_getProperty(v77, v78, 56, 1);
                }
                uint64_t v24 = v101;
                id v27 = v77;

                id v80 = [v27 countByEnumeratingWithState:&v105 objects:v117 count:16];
                if (v80)
                {
                  id v82 = v80;
                  id v83 = v4;
                  uint64_t v84 = *(void *)v106;
                  do
                  {
                    uint64_t v85 = 0;
                    do
                    {
                      if (*(void *)v106 != v84) {
                        objc_enumerationMutation(v27);
                      }
                      id v86 = *(void **)(*((void *)&v105 + 1) + 8 * (void)v85);
                      if (v86)
                      {
                        id v87 = objc_retainAutoreleasedReturnValue(objc_getProperty(*(id *)(*((void *)&v105 + 1)
                                                                                        + 8 * (void)v85), v81, 344, 1));
                        if (v87)
                        {
                          v88 = +[StoreKitExternalGateway shared];
                          id v90 = objc_getProperty(v86, v89, 96, 1);
                          [v88 handleExternalPurchaseTokenInfoDictionary:v87 bundleID:v90];
                        }
                      }
                      else
                      {
                        id v87 = 0;
                      }

                      uint64_t v85 = (char *)v85 + 1;
                    }
                    while (v82 != v85);
                    id v91 = [v27 countByEnumeratingWithState:&v105 objects:v117 count:16];
                    id v82 = v91;
                  }
                  while (v91);
                  id v4 = v83;
                  uint64_t v5 = v97;
                  i = v98;
                }
                else
                {
                  uint64_t v5 = v97;
                }
              }
LABEL_74:
            }
            uint64_t v28 = v104;
            [v104 setPurchaseState:1];

            int v10 = v103;
            goto LABEL_76;
          }
        }
        uint64_t v28 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Purchase finished but it was not found in the batch so dropping the response on the floor", buf, 2u);
        }
LABEL_76:
      }
      id v4 = [obj countByEnumeratingWithState:&v113 objects:v125 count:16];
    }
    while (v4);
  }
  [*(id *)(a1 + 40) setDelegate:0];
}

void sub_100313774(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ASDErrorWithSafeUserInfo();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100313934(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Error in dialog task: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void *sub_100313AB4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)MigratorPromotionTask;
    a1 = objc_msgSendSuper2(&v12, "init");
    if (a1)
    {
      id v7 = [v5 copy];
      uint64_t v8 = (void *)a1[6];
      a1[6] = v7;

      id v9 = [v6 copy];
      uint64_t v10 = (void *)a1[7];
      a1[7] = v9;
    }
  }

  return a1;
}

id *sub_100313E64(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)DetermineSizeForURLTask;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 8, a2);
      objc_storeStrong(a1 + 5, a3);
    }
  }

  return a1;
}

void *sub_1003147E0(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = [a1 init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 7, a2);
      uint64_t v6 = sub_10026E9D4(v4, @"external_id");
      id v7 = (void *)a1[5];
      a1[5] = v6;

      uint64_t v8 = sub_100424C14(v4);
      id v9 = (void *)a1[9];
      a1[9] = v8;
    }
  }

  return a1;
}

void sub_100315EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

AppInstallImportResult *sub_100315F68(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  id v9 = objc_alloc_init(AppInstallImportResult);
  v9->_status = 2;
  coordinator = v9->_coordinator;
  v9->_coordinator = v6;
  __int16 v11 = v6;

  externalID = v9->_externalID;
  v9->_externalID = v7;
  uint64_t v13 = v7;

  uint64_t v14 = ASDErrorWithSafeUserInfo();

  error = v9->_error;
  v9->_error = (NSError *)v14;

  return v9;
}

BOOL sub_10031603C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = *(void **)(a1[4] + 56);
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v9 = *(void **)(v6 + 40);
  id v8 = (id *)(v6 + 40);
  id v7 = v9;
  id obj = v9;
  if (v3)
  {
    sub_100237D68(v3, v5, 0, &obj, (uint64_t)&v27);
    id v7 = obj;
  }
  else
  {
    long long v27 = 0u;
    long long v28 = 0u;
  }
  objc_storeStrong(v8, v7);
  uint64_t v10 = *(void *)(a1[5] + 8);
  long long v11 = v28;
  *(_OWORD *)(v10 + 32) = v27;
  *(_OWORD *)(v10 + 48) = v11;
  uint64_t v12 = *(void *)(a1[5] + 8);
  uint64_t v13 = *(void *)(v12 + 56);
  if (v13 == 2)
  {
    if (!*(unsigned char *)(a1[4] + 49)) {
      goto LABEL_7;
    }
    sub_1002390E8((uint64_t)v4, *(void *)(v12 + 32));
    uint64_t v13 = *(void *)(*(void *)(a1[5] + 8) + 56);
  }
  if (!v13)
  {
    BOOL v24 = 0;
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v14 = [AppInstallEntity alloc];
  uint64_t v15 = *(void *)(*(void *)(a1[5] + 8) + 32);
  uint64_t v16 = [v4 connection];
  id v17 = [(SQLiteEntity *)v14 initWithPersistentID:v15 onConnection:v16];

  __int16 v18 = sub_1003B6884(v17);
  uint64_t v19 = *(void *)(a1[7] + 8);
  __int16 v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;

  uint64_t v21 = sub_10026E9D4(v17, @"external_id");
  uint64_t v22 = a1[4];
  uint64_t v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v21;

  BOOL v24 = *(void *)(*(void *)(a1[5] + 8) + 56) != 0;
LABEL_9:

  return v24;
}

uint64_t sub_100316204(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [AppInstallEntity alloc];
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 32);
  uint64_t v6 = [v3 connection];
  id v7 = [(SQLiteEntity *)v4 initWithPersistentID:v5 onConnection:v6];

  sub_1002C21C0(v7, *(id **)(a1 + 32));
  if (sub_1003D4C34(*(id **)(a1 + 32)) == (id *)2)
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = sub_1002C1EE8(v7);
      int v15 = 138412290;
      uint64_t v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Explicitly denied for low data network - canceling installation", (uint8_t *)&v15, 0xCu);
    }
    if (v3) {
      id Property = objc_getProperty(v3, v10, 24, 1);
    }
    else {
      id Property = 0;
    }
    id v12 = Property;
    uint64_t v13 = sub_1002C2FA4(v7, -30);
    sub_100286124((uint64_t)v12, v13);
  }
  return 1;
}

void *sub_1003167F0(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  v10.receiver = a1;
  v10.super_class = (Class)ODRSpaceReduction;
  id v3 = objc_msgSendSuper2(&v10, "init");
  id v4 = v3;
  if (v3)
  {
    v3[1] = a2;
    id v5 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v6 = (void *)v4[2];
    v4[2] = v5;

    if (a2 >= 1)
    {
      do
      {
        if (a2 >= 52428800) {
          uint64_t v7 = 52428800;
        }
        else {
          uint64_t v7 = a2;
        }
        a2 -= v7;
        id v8 = sub_10026ED60((id *)[ODRPreallocatedFile alloc], (void *)v7);
        [(id)v4[2] addObject:v8];
      }
      while (a2 > 0);
    }
  }
  return v4;
}

void *sub_1003168CC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)PushMessage;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      uint64_t v4 = sub_1003694F4(v3);
      id v5 = (void *)a1[1];
      a1[1] = v4;

      uint64_t v6 = sub_100369524(v3);
      uint64_t v7 = (void *)a1[2];
      a1[2] = v6;
    }
  }

  return a1;
}

void **sub_10031695C(void **a1)
{
  if (a1)
  {
    sub_10026811C(a1[1], @"0");
    a1 = (void **)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

void **sub_100316998(void **result)
{
  if (result) {
    return (void **)sub_1002687B0(result[1], @"1", (id)0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

id *sub_1003169B4(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[1];
    uint64_t v1 = vars8;
  }
  return a1;
}

void **sub_1003169E4(void **a1, void *a2)
{
  if (a1)
  {
    sub_10026811C(a1[1], a2);
    a1 = (void **)objc_claimAutoreleasedReturnValue();
    uint64_t v2 = vars8;
  }
  return a1;
}

id *sub_100316A18(id *a1, uint64_t a2)
{
  if (a1)
  {
    a1 = [a1[1] objectForKeyedSubscript:a2];
    uint64_t v2 = vars8;
  }
  return a1;
}

unint64_t *sub_100316C44(unint64_t *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)AppNetworkMonitor;
    a1 = (unint64_t *)objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      if (os_variant_has_internal_content()
        && (sub_1002C4494(), (uint64_t v4 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        id v5 = (void *)v4;
        *((unsigned char *)a1 + 8) = 1;
        *((unsigned char *)a1 + 10) = *(unsigned char *)(v4 + 9) & 1;
        *((unsigned char *)a1 + 9) = *(unsigned char *)(v4 + 8) & 1;
        uint64_t v6 = *(void *)(v4 + 16);
      }
      else
      {
        id v5 = sub_1002DE9BC((uint64_t)NWPath, v3);
        if (((unint64_t)[v5 status] | 2) == 3)
        {
          *((unsigned char *)a1 + 8) = 1;
          *((unsigned char *)a1 + 10) = [v5 isExpensive];
          *((unsigned char *)a1 + 9) = [v5 isConstrained];
          uint64_t v6 = sub_1002DEA74(v5);
        }
        else
        {
          uint64_t v6 = 0;
          *((_WORD *)a1 + 4) = 0;
          *((unsigned char *)a1 + 10) = 0;
        }
      }
      a1[2] = v6;

      int v7 = *((unsigned __int8 *)a1 + 8);
      id v8 = ASDLogHandleForCategory();
      BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        if (v9)
        {
          int v10 = *((unsigned __int8 *)a1 + 10);
          int v11 = *((unsigned __int8 *)a1 + 9);
          unint64_t v12 = a1[2];
          if (v12 >= 5) {
            id v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"unknown (%ld)", v12);
          }
          else {
            id v13 = *(&off_100527E08 + v12);
          }
          *(_DWORD *)buf = 138544130;
          id v17 = v3;
          __int16 v18 = 1024;
          int v19 = v10;
          __int16 v20 = 1024;
          int v21 = v11;
          __int16 v22 = 2114;
          id v23 = v13;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Network] Network available for '%{public}@' (expensive = %d, constrained = %d, interface = %{public}@)", buf, 0x22u);
        }
      }
      else if (v9)
      {
        *(_DWORD *)buf = 138543362;
        id v17 = v3;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Network] Network unavailable for '%{public}@'", buf, 0xCu);
      }
    }
  }

  return a1;
}

id sub_100316F94(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_opt_new();
  sub_100316FEC((uint64_t)v3, v2);

  return v3;
}

void sub_100316FEC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

id sub_10031701C(_TtC9appstored6LogKey **a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v57 = v9;
  SEL v58 = v8;
  if (a1)
  {
    id v10 = v9;
    id v11 = objc_alloc((Class)AMSURLRequestEncoder);
    unint64_t v12 = sub_10030B11C();
    id v13 = [v11 initWithBag:v12];

    [v13 setRequestEncoding:1];
    [v13 setUrlKnownToBeTrusted:1];
    [v13 setMescalType:1];
    uint64_t v14 = sub_100233614(a1[5]);
    objc_super v15 = [v14 description];
    [v13 setLogUUID:v15];

    uint64_t v16 = sub_1002333F4(a1[5]);
    if (v16)
    {
      id v17 = +[ACAccountStore ams_sharedAccountStore];
      __int16 v18 = objc_msgSend(v17, "ams_iTunesAccountWithDSID:", v16);

      if (v18)
      {
        int v19 = objc_msgSend(v18, "ams_DSID");

        if (v19) {
          [v13 setAccount:v18];
        }
      }
    }
    id v55 = (void *)v16;
    __int16 v20 = [v13 requestWithMethod:a2 URL:v8 parameters:v10];
    id v60 = 0;
    int v21 = [v20 resultWithError:&v60];
    id v22 = v60;

    id v23 = [a1 contentTypeHeaderValue];
    if (v23) {
      [v21 setValue:v23 forHTTPHeaderField:@"Content-Type"];
    }
    BOOL v24 = [a1 acceptHeaderValue];
    if (v24) {
      [v21 setValue:v24 forHTTPHeaderField:@"Accept"];
    }
    if (v22)
    {
      uint64_t v25 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = a1[5];
        uint64_t v50 = sub_100233614(v49);
        *(_DWORD *)buf = 138412546;
        id v62 = v50;
        __int16 v63 = 2114;
        id v64 = v58;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "[%@]: Failed to create a request with %{public}@", buf, 0x16u);
      }
      ASDErrorWithSafeUserInfo();
      id v26 = (id)objc_claimAutoreleasedReturnValue();
      long long v27 = a5;
    }
    else
    {
      long long v28 = +[NSURLSessionConfiguration ephemeralSessionConfiguration];
      objc_msgSend(v28, "set_sourceApplicationBundleIdentifier:", @"com.apple.AppStore");
      uint64_t v29 = sub_100295100();
      uint64_t v30 = sub_10030B11C();
      objc_msgSend(v28, "ams_configureWithProcessInfo:bag:", v29, v30);

      id v31 = [objc_alloc((Class)AMSURLSession) initWithConfiguration:v28];
      uint64_t v32 = [v31 dataTaskPromiseWithRequest:v21];
      id v59 = 0;
      uint64_t v33 = [v32 resultWithError:&v59];
      id v34 = v59;
      id v22 = v34;
      id v54 = v32;
      if (v34)
      {
        id v51 = v21;
        [v34 code];
        unsigned __int8 v35 = [v22 userInfo];
        unsigned __int8 v36 = [v35 objectForKeyedSubscript:AMSErrorUserInfoKeyStatusCode];

        id v52 = v31;
        if (v36) {
          [v36 integerValue];
        }
        uint64_t v38 = [v22 userInfo];
        long long v39 = [v38 objectForKeyedSubscript:NSLocalizedDescriptionKey];
        uint64_t v40 = v39;
        id v53 = v28;
        if (v39)
        {
          id v41 = v39;
        }
        else
        {
          id v41 = [v22 localizedDescription];
        }
        id v42 = v41;

        id v43 = [v22 userInfo];
        id v44 = [v43 objectForKeyedSubscript:NSLocalizedFailureReasonErrorKey];
        uint64_t v45 = v44;
        if (v44)
        {
          id v46 = v44;
        }
        else
        {
          id v46 = [v22 localizedFailureReason];
        }
        uint64_t v47 = v46;

        ASDErrorWithTitleAndMessage();
        id v26 = (id)objc_claimAutoreleasedReturnValue();

        long long v27 = a5;
        id v31 = v52;
        long long v28 = v53;
        int v21 = v51;
      }
      else
      {
        id v37 = v33;
        id v26 = 0;
        long long v27 = a5;
      }

      if (!v22) {
        goto LABEL_30;
      }
    }
    uint64_t v33 = 0;
    if (v27 && v26)
    {
      id v26 = v26;
      uint64_t v33 = 0;
      void *v27 = v26;
    }
LABEL_30:

    goto LABEL_31;
  }
  uint64_t v33 = 0;
LABEL_31:

  return v33;
}

id *sub_10031756C(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [objc_alloc((Class)NSURLComponents) initWithURL:v3 resolvingAgainstBaseURL:0];
    id v5 = [v4 queryItems];
    id v6 = [v5 mutableCopy];

    if (!v6) {
      id v6 = (id)objc_opt_new();
    }
    int v7 = +[NSString stringWithFormat:@"%d", sub_10023342C(a1[5])];
    id v8 = +[NSURLQueryItem queryItemWithName:@"attempt" value:v7];
    [v6 addObject:v8];

    if (os_variant_has_internal_content())
    {
      if (sub_10031774C(@"disableAuth"))
      {
        id v9 = +[NSURLQueryItem queryItemWithName:@"no_weak_token_auth" value:@"true"];
        [v6 addObject:v9];
      }
      if (sub_10031774C(@"disableMescal"))
      {
        id v10 = +[NSURLQueryItem queryItemWithName:@"no_mescal_auth" value:@"true"];
        [v6 addObject:v10];
      }
    }
    [v4 setQueryItems:v6];
    uint64_t v11 = [v4 URL];
    unint64_t v12 = (void *)v11;
    if (v11) {
      id v13 = (void *)v11;
    }
    else {
      id v13 = v3;
    }
    a1 = v13;
  }
  return a1;
}

id sub_10031774C(void *a1)
{
  id v1 = a1;
  id v2 = sub_1003F4BD8();
  id v3 = [v2 objectForKeyedSubscript:v1];

  if (objc_opt_respondsToSelector()) {
    id v4 = [v3 BOOLValue];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

id sub_1003177EC()
{
  self;
  if (qword_1005B0F28 != -1) {
    dispatch_once(&qword_1005B0F28, &stru_100527E30);
  }
  v0 = (void *)qword_1005B0F20;
  return v0;
}

void sub_100317844(id a1)
{
  id v1 = objc_alloc_init(XDCService);
  id v2 = (void *)qword_1005B0F20;
  qword_1005B0F20 = (uint64_t)v1;
}

void sub_100317AE4(uint64_t a1)
{
  sub_1002DC980();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) devices];
  sub_1002DD41C((uint64_t)v3, v2);
}

void sub_100317B58(uint64_t a1, void *a2, uint64_t a3, __int16 a4)
{
  id v7 = a2;
  id v8 = v7;
  if (a1)
  {
    id v9 = *(NSObject **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100317C14;
    v10[3] = &unk_100527E58;
    uint64_t v12 = a1;
    uint64_t v13 = a3;
    id v11 = v7;
    __int16 v14 = a4;
    dispatch_async(v9, v10);
  }
}

void sub_100317C14(uint64_t a1)
{
  id v4 = objc_alloc_init(XDCMessageHandler);
  if (v4)
  {
    objc_storeWeak(&v4->_target, *(id *)(a1 + 32));
    v4->_selector = *(SEL *)(a1 + 48);
  }
  id v2 = *(void **)(*(void *)(a1 + 40) + 32);
  id v3 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 56)];
  [v2 setObject:v4 forKeyedSubscript:v3];
}

void sub_100317CB4(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    uint64_t v12 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100318878;
    block[3] = &unk_100527E88;
    id v14 = v10;
    id v17 = v11;
    char v18 = a4;
    id v15 = v9;
    uint64_t v16 = a1;
    dispatch_async(v12, block);
  }
}

void sub_100317DA8(uint64_t a1, void *a2, __int16 a3, void *a4)
{
  if (a1)
  {
    id v7 = a4;
    id v8 = a2;
    id v9 = sub_1003690D8([XDCMessage alloc], v8, a3);

    sub_100317CB4(a1, v9, v7, 0, 0);
  }
}

void sub_100317E54(uint64_t a1, void *a2, __int16 a3, void *a4, void *a5)
{
  if (a1)
  {
    id v9 = a5;
    id v10 = a4;
    id v11 = a2;
    id v12 = sub_1003690D8([XDCMessage alloc], v11, a3);

    sub_100317CB4(a1, v12, v10, 1, v9);
  }
}

void sub_100318818(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"XDCServiceDevicesDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_100318878(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = sub_10036922C(*(void **)(a1 + 40));
    if (v2)
    {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
      id v5 = *(unsigned char **)(a1 + 40);
      if (v5 && (v5[8] & 1) != 0)
      {
        id v10 = objc_getProperty(v5, v3, 32, 1);
        [v4 setObject:v10 forKeyedSubscript:IDSSendMessageOptionPeerResponseIdentifierKey];
      }
      else if (*(unsigned char *)(a1 + 64))
      {
        [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSSendMessageOptionExpectsPeerResponseKey];
      }
      if (os_variant_has_internal_content())
      {
        id v12 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          id Property = *(unsigned __int16 **)(a1 + 40);
          if (Property)
          {
            id v15 = (void *)Property[5];
            uint64_t v16 = *(void *)(a1 + 32);
            id Property = (unsigned __int16 *)objc_getProperty(Property, v13, 16, 1);
          }
          else
          {
            id v15 = 0;
            uint64_t v16 = *(void *)(a1 + 32);
          }
          id v17 = Property;
          *(_DWORD *)buf = 134218498;
          uint64_t v38 = v15;
          __int16 v39 = 2114;
          uint64_t v40 = v16;
          __int16 v41 = 2114;
          id v42 = v17;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sending message: %ld to: %{public}@ with payload: %{public}@", buf, 0x20u);
        }
      }
      char v18 = *(void **)(*(void *)(a1 + 48) + 16);
      id v19 = *(id *)(a1 + 32);
      if (v19) {
        id v19 = objc_getProperty(v19, v11, 24, 1);
      }
      id v20 = v19;
      int v21 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v20, 0);
      id v31 = 0;
      id v32 = 0;
      unsigned __int8 v22 = [v18 sendProtobuf:v2 toDestinations:v21 priority:200 options:v4 identifier:&v32 error:&v31];
      id v9 = v32;
      id v7 = (unsigned __int16 *)v31;

      if (v22)
      {
        id v23 = [*(id *)(a1 + 56) copy];
        id v24 = objc_retainBlock(v23);
        [*(id *)(*(void *)(a1 + 48) + 24) setObject:v24 forKeyedSubscript:v9];
      }
      else
      {
        uint64_t v25 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138543874;
          uint64_t v38 = v2;
          __int16 v39 = 2114;
          uint64_t v40 = v27;
          __int16 v41 = 2114;
          id v42 = v7;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Sending: %{public}@ to: %{public}@ failed with error: %{public}@", buf, 0x20u);
        }

        id v26 = dispatch_get_global_queue(21, 0);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_100318E14;
        v28[3] = &unk_100521AE0;
        id v30 = *(id *)(a1 + 56);
        uint64_t v29 = v7;
        dispatch_async(v26, v28);

        id v23 = v30;
      }
    }
    else
    {
      id v8 = dispatch_get_global_queue(21, 0);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_100318D88;
      v33[3] = &unk_100521F40;
      id v34 = *(id *)(a1 + 56);
      dispatch_async(v8, v33);

      id v9 = 0;
      id v7 = 0;
      id v4 = v34;
    }
  }
  else
  {
    id v6 = dispatch_get_global_queue(21, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100318CFC;
    block[3] = &unk_100521F40;
    unsigned __int8 v36 = (unsigned __int16 *)*(id *)(a1 + 56);
    dispatch_async(v6, block);

    id v7 = v36;
  }
}

void sub_100318CFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    ASDErrorWithDescription();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_100318D88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    ASDErrorWithDescription();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

uint64_t sub_100318E14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_100318E38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_100318E50(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100318E68(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [v2 invokeWithTarget:WeakRetained];
}

id sub_100318F3C(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)ODRDeveloperToolsClient;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      id v4 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ODRDeveloperToolsProtocol];
      [v3 setExportedInterface:v4];

      id v5 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ODRDeveloperToolsProtocol];
      [v3 setRemoteObjectInterface:v5];

      [v3 setExportedObject:a1];
      [v3 resume];
      id v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id v8 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Created the developer tools client.", v8, 2u);
      }
    }
  }

  return a1;
}

void sub_1003191E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100319204(uint64_t a1, void *a2)
{
  id v27 = a2;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  sub_1003E0AA0(*(id **)(a1 + 32));
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v28 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
  if (v28)
  {
    uint64_t v25 = *(void *)v34;
    uint64_t v26 = a1;
    do
    {
      for (i = 0; i != v28; i = (char *)i + 1)
      {
        if (*(void *)v34 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void *)(*((void *)&v33 + 1) + 8 * i);
        id v5 = +[NSSet setWithObject:v4];
        id v6 = sub_1001F8468(v27, v5, *(void *)(a1 + 40));

        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        id v7 = v6;
        id v8 = [v7 countByEnumeratingWithState:&v29 objects:v39 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = 0;
          uint64_t v11 = *(void *)v30;
          double v12 = 0.0;
          unint64_t v13 = -1;
          do
          {
            for (j = 0; j != v9; j = (char *)j + 1)
            {
              if (*(void *)v30 != v11) {
                objc_enumerationMutation(v7);
              }
              id v15 = *(void **)(*((void *)&v29 + 1) + 8 * (void)j);
              sub_10020DB78(v15);
              double v12 = v12 + v16;
              id v17 = sub_100297EDC(v15);
              v10 += (uint64_t)[v17 unsignedLongLongValue];

              unint64_t v18 = sub_10020DC84(v15);
              if (v18 < v13) {
                unint64_t v13 = v18;
              }
            }
            id v9 = [v7 countByEnumeratingWithState:&v29 objects:v39 count:16];
          }
          while (v9);
        }
        else
        {
          uint64_t v10 = 0;
          double v12 = 0.0;
          unint64_t v13 = -1;
        }

        if ([v7 count]) {
          double v12 = v12 / (double)(unint64_t)[v7 count];
        }
        a1 = v26;
        v37[0] = @"ODRTag_PercentageCompleteKey";
        id v19 = +[NSNumber numberWithDouble:v12];
        v38[0] = v19;
        v37[1] = @"ODRTag_TimestampKey";
        id v20 = +[NSDate date];
        v38[1] = v20;
        v37[2] = @"ODRTag_StatusKey";
        int v21 = +[NSNumber numberWithUnsignedInteger:v13];
        v38[2] = v21;
        v37[3] = @"ODRTag_SizeKey";
        unsigned __int8 v22 = +[NSNumber numberWithUnsignedLongLong:v10];
        v37[4] = @"ODRTag_TagNameKey";
        v38[3] = v22;
        v38[4] = v4;
        id v23 = +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:5];

        [*(id *)(*(void *)(*(void *)(v26 + 48) + 8) + 40) addObject:v23];
      }
      id v28 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
    }
    while (v28);
  }
}

void sub_100319800(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10031982C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  sub_1001F9084(v4, v3);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = sub_1003923F8(v10, &stru_100527EF0);
  id v6 = +[NSSet setWithArray:v5];
  uint64_t v7 = sub_1001F8468(v4, v6, *(void *)(a1 + 32));

  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

id sub_1003198F8(id a1, ODRTag *a2)
{
  return sub_1002EC448(a2);
}

void sub_100319CFC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100319D38(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v8 = +[NSSet setWithObject:v3];
  uint64_t v5 = sub_1001F8468(v4, v8, a1[5]);

  uint64_t v6 = *(void *)(a1[6] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10031A004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10031A02C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v3, 32, 1);
  }
  id v5 = WeakRetained;
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

id sub_10031A2D0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = sub_1003DA6D4();
  if ([v1 isHRNMode]) {
    id v2 = 0;
  }
  else {
    id v2 = sub_10033641C();
  }

  return v2;
}

id sub_10031A334()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10031A3D8;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0F38 != -1) {
    dispatch_once(&qword_1005B0F38, block);
  }
  v0 = (void *)qword_1005B0F30;
  return v0;
}

void sub_10031A3D8(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005B0F30;
  qword_1005B0F30 = (uint64_t)v1;
}

void sub_10031A410(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = [[_TtC9appstored10ASEMetrics alloc] initWithType:3];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10031C400;
    v8[3] = &unk_100527F40;
    void v8[4] = a1;
    id v10 = v6;
    id v9 = v5;
    [(ASEMetrics *)v7 flushWithCompletionHandler:v8];
  }
}

void sub_10031A4F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10031A5C0;
    block[3] = &unk_1005221F0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10031A5C0(uint64_t a1)
{
}

void sub_10031A5D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031A680;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10031A680(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = sub_1003A8520((uint64_t)MetricsContext, 2);
    uint64_t v4 = (unsigned char *)v3;
    if (v3)
    {
      *(unsigned char *)(v3 + 8) = 1;
      id v5 = objc_opt_new();
      id v6 = sub_1003F2888();

      if (!v6) {
        v4[11] = 1;
      }
      id v7 = sub_10031BDC4(v1, v4);
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      id v8 = [v7 countByEnumeratingWithState:&v23 objects:v27 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v24;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(void *)v24 != v10) {
              objc_enumerationMutation(v7);
            }
            double v12 = sub_1003F4D5C(*(void *)(*((void *)&v23 + 1) + 8 * i));
            [v5 addObject:v12];
          }
          id v9 = [v7 countByEnumeratingWithState:&v23 objects:v27 count:16];
        }
        while (v9);
      }
    }
    else
    {
      id v5 = 0;
    }
    if (sub_10031A2D0((uint64_t)v1))
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = ASDErrorWithTitleAndMessage();
    }
    id v14 = v1[2];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10031C59C;
    v18[3] = &unk_100522830;
    id v19 = v5;
    id v20 = v13;
    id v21 = v4;
    id v22 = v2;
    id v15 = v4;
    id v16 = v13;
    id v17 = v5;
    dispatch_async(v14, v18);
  }
}

void sub_10031A8F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031A9A4;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10031A9A4(uint64_t a1)
{
  if (sub_10031A2D0(*(void *)(a1 + 32)))
  {
    uint64_t v4 = objc_alloc_init(_TtC9appstored6LogKey);
    sub_10031AB04(*(void *)(a1 + 32));
    sub_10031AC84(*(void *)(a1 + 32));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v6 = (id)objc_opt_class();
      id v3 = v6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@] Not enabled to record personalization metrics", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10031AB04(uint64_t a1)
{
  if (a1)
  {
    dispatch_semaphore_t v1 = dispatch_semaphore_create(0);
    id v2 = sub_1002E1CF4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10031C94C;
    v8[3] = &unk_100521710;
    id v3 = v1;
    id v9 = v3;
    sub_1002E5514((uint64_t)v2, 11, v8);

    dispatch_time_t v4 = dispatch_time(0, 15000000000);
    if (dispatch_semaphore_wait(v3, v4))
    {
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v6 = objc_opt_class();
        *(_DWORD *)buf = 138543362;
        uint64_t v11 = v6;
        id v7 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@] Timed out waiting to sync launches", buf, 0xCu);
      }
    }
  }
}

void sub_10031AC84(uint64_t a1)
{
  if (a1)
  {
    dispatch_semaphore_t v1 = dispatch_semaphore_create(0);
    id v2 = sub_1002E1CF4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10031C954;
    v8[3] = &unk_100521710;
    id v3 = v1;
    id v9 = v3;
    sub_1002E565C((uint64_t)v2, 2, 11, v8);

    dispatch_time_t v4 = dispatch_time(0, 15000000000);
    if (dispatch_semaphore_wait(v3, v4))
    {
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v6 = objc_opt_class();
        *(_DWORD *)buf = 138543362;
        uint64_t v11 = v6;
        id v7 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@] Timed out waiting to sync launches", buf, 0xCu);
      }
    }
  }
}

void sub_10031AE08(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031AEB8;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_10031AEB8(uint64_t a1)
{
  if (sub_10031A2D0(*(void *)(a1 + 32)))
  {
    sub_10031B000(*(void **)(a1 + 32), @"Posting Metrics");
    id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v2();
  }
  else
  {
    dispatch_time_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = (id)objc_opt_class();
      id v5 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Not enabled to record personalization metrics", (uint8_t *)&v6, 0xCu);
    }
    return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0);
  }
}

void sub_10031B000(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = sub_1003F2888();
    if (v4)
    {
      LOBYTE(v5) = sub_1003F2938();
      int v6 = (void *)v4;
    }
    else
    {
      id v7 = +[NSUUID UUID];
      int v6 = [v7 UUIDString];

      id v8 = sub_10030B11C();
      uint64_t v9 = sub_10030C238(v8, @"metrics/sampling/custom/xp_amp_app_usage_dnu/percentage");
      id v57 = 0;
      uint64_t v10 = [(id)v9 valueWithError:&v57];
      id v11 = v57;

      objc_opt_class();
      LOBYTE(v9) = objc_opt_isKindOfClass();
      double v12 = ASDLogHandleForCategory();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      if (v9)
      {
        if (v13)
        {
          id v14 = objc_opt_class();
          *(_DWORD *)buf = 138543618;
          id v60 = v14;
          __int16 v61 = 2114;
          id v62 = v10;
          id v15 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%{public}@] App usage post sampling bag key: %{public}@", buf, 0x16u);
        }
        id v16 = v10;
      }
      else
      {
        if (v13)
        {
          id v17 = objc_opt_class();
          *(_DWORD *)buf = 138543618;
          id v60 = v17;
          __int16 v61 = 2114;
          id v62 = v11;
          id v18 = v17;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%{public}@] Failed to find bag value for app usage post sampling key. Error: %{public}@", buf, 0x16u);
        }
        id v16 = &off_10054C7E0;
      }
      if (os_variant_has_internal_content())
      {
        id v19 = sub_1003F29DC();
        BOOL v5 = sub_1002D7940((uint64_t)a1, v16, v19);
      }
      else
      {
        BOOL v5 = sub_1002D7940((uint64_t)a1, v16, 0);
      }

      sub_1003F2BF4((uint64_t)AppDefaultsManager, v5);
      sub_1003F2B90((uint64_t)AppDefaultsManager, v6);
      id v20 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        id v60 = v6;
        __int16 v61 = 1024;
        LODWORD(v62) = v5;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[DNU] Initiated session with actorID: %{public}@ with sampling enabled: %d", buf, 0x12u);
      }
    }
    sub_1003A8520((uint64_t)MetricsContext, 2);
    id v21 = (unsigned char *)objc_claimAutoreleasedReturnValue();
    long long v23 = v21;
    if (v21)
    {
      objc_setProperty_nonatomic_copy(v21, v22, v6, 16);
      if (v5)
      {
        v23[12] = v4 == 0;
        v23[11] = v4 == 0;
LABEL_20:
        long long v24 = sub_10031BDC4(a1, v23);
        if ([v24 count])
        {
          id v48 = v3;
          dispatch_semaphore_t v25 = dispatch_semaphore_create(0);
          long long v26 = [[_TtC9appstored10ASEMetrics alloc] initWithType:3];
          v55[0] = _NSConcreteStackBlock;
          v55[1] = 3221225472;
          v55[2] = sub_10031C95C;
          v55[3] = &unk_100521388;
          id v27 = v25;
          id v56 = v27;
          [(ASEMetrics *)v26 enqueueEvents:v24 flushEvents:0 completionHandler:v55];

          uint64_t v47 = v27;
          dispatch_semaphore_wait(v27, 0xFFFFFFFFFFFFFFFFLL);
          id v28 = objc_opt_new();
          long long v51 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          id v29 = v24;
          id v30 = [v29 countByEnumeratingWithState:&v51 objects:v58 count:16];
          if (v30)
          {
            id v31 = v30;
            uint64_t v32 = *(void *)v52;
            do
            {
              for (i = 0; i != v31; i = (char *)i + 1)
              {
                if (*(void *)v52 != v32) {
                  objc_enumerationMutation(v29);
                }
                long long v34 = objc_msgSend(*(id *)(*((void *)&v51 + 1) + 8 * i), "underlyingDictionary", v47);
                [v28 addObject:v34];
              }
              id v31 = [v29 countByEnumeratingWithState:&v51 objects:v58 count:16];
            }
            while (v31);
          }

          id v50 = 0;
          long long v35 = +[NSJSONSerialization dataWithJSONObject:v28 options:0 error:&v50];
          id v36 = v50;
          if (v36)
          {
            id v37 = ASDLogHandleForCategory();
            id v3 = v48;
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              id v44 = objc_opt_class();
              *(_DWORD *)buf = 138543618;
              id v60 = v44;
              __int16 v61 = 2114;
              id v62 = v36;
              id v45 = v44;
              _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "[%{public}@] Error generating transparency metrics: %{public}@", buf, 0x16u);
            }
            uint64_t v38 = v47;
          }
          else
          {
            id v3 = v48;
            if (v23) {
              id v42 = (void *)*((void *)v23 + 19);
            }
            else {
              id v42 = 0;
            }
            uint64_t v38 = v47;
            id v43 = v42;
            uint64_t v49 = v35;
            OSAWriteLogForSubmission();

            id v37 = v49;
          }

          sub_10031C21C(a1, v23, v3);
        }
        else
        {
          __int16 v39 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            if (v23) {
              uint64_t v40 = (void *)*((void *)v23 + 9);
            }
            else {
              uint64_t v40 = 0;
            }
            id v41 = v40;
            *(_DWORD *)buf = 138412290;
            id v60 = v41;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "[%@] No events to report", buf, 0xCu);
          }
          sub_10031C21C(a1, v23, @"Nothing to Post");
        }

LABEL_46:
        goto LABEL_47;
      }
    }
    else if (v5)
    {
      goto LABEL_20;
    }
    id v46 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[DNU] Skipping metrics for actorID session", buf, 2u);
    }

    sub_10031C21C(a1, v23, @"Post skipped for actorID session");
    goto LABEL_46;
  }
LABEL_47:
}

void sub_10031B71C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    BOOL v5 = *(NSObject **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031B7CC;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_10031B7CC(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    id v6 = (id)objc_opt_class();
    id v3 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%{public}@] Resetting actorID", (uint8_t *)&v5, 0xCu);
  }
  sub_1003F2B90((uint64_t)AppDefaultsManager, 0);
  sub_1003F2B40();
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 1);
}

void sub_10031B8C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    int v5 = *(NSObject **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031B970;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_10031B970(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[DNU] Resetting metrics", v5, 2u);
  }

  id v3 = sub_10031BA10(*(id *)(a1 + 32), @"External request");
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10031BA10(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = sub_1003A8520((uint64_t)MetricsContext, 2);
    sub_1003A85C0((uint64_t)v4);
    id v5 = sub_1002E1F40((uint64_t)MetricsCoordinator, 2);
    sub_1002E1E70((uint64_t)MetricsCoordinator, 2);
    sub_10031C8F4((uint64_t)v2);
    id v6 = sub_100210D24();
    sub_1002117F8(v6, v3);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

void sub_10031BAD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031BB84;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10031BB84(uint64_t a1)
{
  if (sub_10031A2D0(*(void *)(a1 + 32)))
  {
    sub_10031B000(*(void **)(a1 + 32), @"External Request");
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    sub_10031A410(v2, @"External Request", v3);
  }
  else
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[DNU] Not enabled to send personalization metrics", v5, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_10031BDC4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSMutableArray array];
  id v5 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v38 = sub_1002D73A8(a1, 1, v3);
  if (v3 && v3[11])
  {
    id v36 = v5;
    id v37 = v4;
    id v6 = v3;
    id v7 = objc_alloc_init(DNUMetricsHandler);
    id v9 = v6[9];
    if (v7) {
      objc_setProperty_nonatomic_copy(v7, v8, v9, 32);
    }

    uint64_t v10 = sub_1002E1CF4();
    id v11 = sub_1002E1F94((uint64_t)v10);

    double v12 = objc_opt_new();
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v35 = v11;
    BOOL v13 = [v11 allValues];
    id v14 = [v13 countByEnumeratingWithState:&v41 objects:buf count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v42;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v42 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = *(void **)(*((void *)&v41 + 1) + 8 * i);
          if ([(DNUMetricsHandler *)v7 isCandidateAppMetadata:v18])
          {
            sub_1002D6D6C(a1, v18, 1, v6);
            id v19 = (unsigned char *)objc_claimAutoreleasedReturnValue();
            id v20 = v19;
            if (v19)
            {
              sub_1003F6030(v19, 2);
              [v12 addObject:v20];
            }
          }
        }
        id v15 = [v13 countByEnumeratingWithState:&v41 objects:buf count:16];
      }
      while (v15);
    }

    id v21 = [v12 copy];
    uint64_t v4 = v37;
    [v37 addObjectsFromArray:v21];

    id v5 = v36;
  }
  id v22 = sub_1002D5A20(a1, 1u, v38, v3);
  [v4 addObjectsFromArray:v22];
  sub_10031AB04((uint64_t)a1);
  sub_10031AC84((uint64_t)a1);
  long long v23 = [a1 createMetricsEventsForEventType:0 context:v3];
  [v4 addObjectsFromArray:v23];
  long long v24 = [a1 createMetricsEventsForEventType:2 context:v3];
  [v4 addObjectsFromArray:v24];
  dispatch_semaphore_t v25 = dispatch_semaphore_create(0);
  long long v26 = sub_1002E1CF4();
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_10031C214;
  v39[3] = &unk_100521710;
  id v27 = v25;
  uint64_t v40 = v27;
  sub_1002E57B0((uint64_t)v26, 11, v39);

  dispatch_time_t v28 = dispatch_time(0, 15000000000);
  if (dispatch_semaphore_wait(v27, v28))
  {
    id v29 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      long long v33 = objc_opt_class();
      *(_DWORD *)buf = 138543362;
      id v46 = v33;
      id v34 = v33;
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "[%{public}@] Timed out waiting to sync installed apps with metadata", buf, 0xCu);
    }
  }
  id v30 = [a1 createMetricsEventsForEventType:3 context:v3];
  [v4 addObjectsFromArray:v30];
  id v31 = [v4 copy];

  return v31;
}

intptr_t sub_10031C214(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10031C21C(void *a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = sub_10031BA10(a1, a3);
  id v6 = sub_100210D24();
  if (v17) {
    id v7 = (void *)v17[12];
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;
  BOOL v9 = sub_1002128C4((uint64_t)v6, v8);

  if (v9)
  {
    if (v17) {
      uint64_t v10 = (void *)v17[12];
    }
    else {
      uint64_t v10 = 0;
    }
    id v11 = v10;
    double v12 = @"Past Reset Date";
    id v13 = v11;
    sub_1003F2B90((uint64_t)AppDefaultsManager, 0);
    sub_1003F2B40();
    id v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v19 = (id)objc_opt_class();
      __int16 v20 = 2114;
      CFStringRef v21 = @"Past Reset Date";
      id v15 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@]: Cleared actorID with reason: %{public}@", buf, 0x16u);
    }
    uint64_t v16 = sub_100210D24();
    sub_100211E18((uint64_t)v16, @"Past Reset Date", v13);
  }
  sub_100263C18((uint64_t)v17, 0);
}

void sub_10031C400(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory();
  id v5 = v4;
  if (v3)
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    int v10 = 138412546;
    id v11 = (id)objc_opt_class();
    __int16 v12 = 2114;
    id v13 = v3;
    id v6 = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%@]: Error sending metrics events. Error: %{public}@", (uint8_t *)&v10, 0x16u);
  }
  else
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
    int v10 = 138412290;
    id v11 = (id)objc_opt_class();
    id v6 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%@] Completed sending metrics events", (uint8_t *)&v10, 0xCu);
  }

LABEL_5:
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    id v8 = ASDErrorWithSafeUserInfo();
    (*(void (**)(uint64_t, BOOL, void *))(v7 + 16))(v7, v3 == 0, v8);
  }
  BOOL v9 = sub_100210D24();
  sub_10021231C((uint64_t)v9, *(void **)(a1 + 40));
}

void sub_10031C59C(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, a1[4], a1[5]);
  }
  uint64_t v3 = a1[6];
  sub_100263C18(v3, 0);
}

void sub_10031C668(uint64_t a1)
{
  uint64_t v2 = [[KeepAlive alloc] initWithName:@"com.apple.PersonalizationManager.setupFollowingMigration"];
  unsigned int v3 = sub_10031A2D0(*(void *)(a1 + 32));
  uint64_t v4 = *(unsigned __int8 **)(a1 + 32);
  if (v4[24] != v3)
  {
    unsigned int v5 = v3;
    id v6 = v4;
    objc_sync_enter(v6);
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = v5;
    objc_sync_exit(v6);

    uint64_t v7 = ASDLogHandleForCategory();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v8)
      {
        int v17 = 138412290;
        id v18 = (id)objc_opt_class();
        id v9 = v18;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Resetting dnu analytics gathering", (uint8_t *)&v17, 0xCu);
      }
      int v10 = *(void **)(a1 + 32);
      if (v10)
      {
        id v11 = @"Switch Status Changed";
        sub_1003F2B90((uint64_t)AppDefaultsManager, 0);
        sub_1003F2B40();
        __int16 v12 = sub_10031BA10(v10, @"Switch Status Changed");
        id v13 = sub_100210D24();
        sub_100211E18((uint64_t)v13, @"Switch Status Changed", v12);
      }
      id v14 = sub_100210D24();
      sub_10021231C((uint64_t)v14, @"Switch Status Change");
    }
    else
    {
      if (v8)
      {
        int v17 = 138412290;
        id v18 = (id)objc_opt_class();
        id v15 = v18;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Stopping analytics gathering", (uint8_t *)&v17, 0xCu);
      }
      sub_1003F2B90((uint64_t)AppDefaultsManager, 0);
      sub_1003F2B40();
      sub_1002E1DD0((uint64_t)MetricsCoordinator, 2);
      sub_10031C8F4(*(void *)(a1 + 32));
      uint64_t v16 = sub_100210D24();
      sub_100211218((uint64_t)v16, @"com.apple.appstored.RecordDnu");

      id v14 = sub_100210D24();
      sub_100211218((uint64_t)v14, @"com.apple.appstored.PostDnu");
    }
  }
}

void sub_10031C8F4(uint64_t a1)
{
  if (a1)
  {
    sub_10038F000();
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    [v1 modifyUsingTransaction:&stru_100527F88];
  }
}

intptr_t sub_10031C94C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_10031C954(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_10031C95C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_10031C964(uint64_t a1, void *a2)
{
  return _[a2 writeData:*(void *)(a1 + 32)];
}

BOOL sub_10031C970(id a1, AppUsageDatabaseTransaction *a2)
{
  uint64_t v2 = [(AppUsageDatabaseTransaction *)a2 connection];
  unsigned int v3 = (void *)v2;
  if (v2) {
    sub_100012004(v2, @"DELETE FROM app_events_personalization;", 0, 0);
  }

  return 1;
}

id sub_10031CA20()
{
  self;
  if (qword_1005B0F48 != -1) {
    dispatch_once(&qword_1005B0F48, &stru_100527FD0);
  }
  v0 = (void *)qword_1005B0F40;
  return v0;
}

void sub_10031CA78(id a1)
{
  id v1 = [LaunchServicesCatalog alloc];
  uint64_t v2 = sub_100388088();
  id v13 = v2;
  if (v1)
  {
    v14.receiver = v1;
    v14.super_class = (Class)LaunchServicesCatalog;
    id v1 = objc_msgSendSuper2(&v14, "init");
    if (v1)
    {
      unsigned int v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v4 = dispatch_queue_create("com.apple.AppStoreDaemon.LaunchServicesCatalog", v3);
      dispatchQueue = v1->_dispatchQueue;
      v1->_dispatchQueue = (OS_dispatch_queue *)v4;

      objc_storeStrong((id *)&v1->_progressCache, v2);
      id v6 = sub_100242940((id *)[LibraryExpressionClassifier alloc], v1);
      uint64_t v7 = sub_100368E68((id *)[LibraryQueryPlanner alloc], v6);
      planner = v1->_planner;
      v1->_planner = (LibraryQueryPlanner *)v7;

      id v9 = +[NSNotificationCenter defaultCenter];
      [v9 addObserver:v1 selector:"_handleAppRegisteredNotification:" name:@"com.apple.LaunchServices.applicationRegistered" object:0];
      [v9 addObserver:v1 selector:"_handleAppUnregisteredNotification:" name:@"com.apple.LaunchServices.applicationUnregistered" object:0];
      [v9 addObserver:v1 selector:"_handleBagChangedNotification:" name:AMSBagChangedNotification object:0];
      [v9 addObserver:v1 selector:"_handleBagInvalidatedNotification:" name:AMSBagInvalidatedNotification object:0];
      int v10 = +[LSApplicationWorkspace defaultWorkspace];
      [v10 addObserver:v1];

      id v11 = sub_1003177EC();
      sub_100317B58((uint64_t)v11, v1, (uint64_t)"_handleLaunchAppMessage:fromDevice:", 3);
    }
  }

  __int16 v12 = (void *)qword_1005B0F40;
  qword_1005B0F40 = (uint64_t)v1;
}

id sub_10031CD70(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v14 = 0;
    id v15 = &v14;
    uint64_t v16 = 0x3032000000;
    int v17 = sub_1000181E8;
    id v18 = sub_100017CB0;
    id v19 = 0;
    uint64_t v8 = 0;
    id v9 = &v8;
    uint64_t v10 = 0x3032000000;
    id v11 = sub_1000181E8;
    __int16 v12 = sub_100017CB0;
    id v13 = 0;
    unsigned int v3 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10031CEDC;
    block[3] = &unk_100527FF8;
    void block[4] = a1;
    void block[5] = &v8;
    block[6] = &v14;
    dispatch_async_and_wait(v3, block);
    dispatch_queue_t v4 = (void *)v15[5];
    if (a2 && !v4)
    {
      *a2 = (id) v9[5];
      dispatch_queue_t v4 = (void *)v15[5];
    }
    id v5 = v4;
    _Block_object_dispose(&v8, 8);

    _Block_object_dispose(&v14, 8);
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

void sub_10031CEDC(uint64_t *a1)
{
  sub_10031CF88(a1[4], @"bundle identifier list");
  uint64_t v2 = *(void **)(a1[4] + 48);
  if (v2)
  {
    id v9 = [v2 keyEnumerator];
    uint64_t v3 = [v9 allObjects];
    uint64_t v4 = *(void *)(a1[6] + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v6 = v9;
  }
  else
  {
    uint64_t v7 = ASDErrorWithUserInfoAndFormat();
    uint64_t v8 = *(void *)(a1[5] + 8);
    id v6 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

void sub_10031CF88(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    id v9 = sub_10032041C;
    uint64_t v10 = &unk_100521388;
    dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
    uint64_t v4 = v11;
    id v5 = v3;
    id v6 = v8;
    uint64_t v7 = v6;
    if (*(unsigned char *)(a1 + 40)) {
      v9((uint64_t)v6);
    }
    else {
      sub_10031F6F8(a1, v5, 1, v6);
    }

    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  }
}

id sub_10031D088(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v25 = 0;
    long long v26 = &v25;
    uint64_t v27 = 0x3032000000;
    dispatch_time_t v28 = sub_1000181E8;
    id v29 = sub_100017CB0;
    id v30 = 0;
    uint64_t v19 = 0;
    __int16 v20 = &v19;
    uint64_t v21 = 0x3032000000;
    id v22 = sub_1000181E8;
    long long v23 = sub_100017CB0;
    id v24 = 0;
    uint64_t v7 = *(NSObject **)(a1 + 8);
    dispatch_semaphore_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_10031D240;
    uint64_t v14 = &unk_100528020;
    uint64_t v15 = a1;
    int v17 = &v19;
    id v18 = &v25;
    id v16 = v5;
    dispatch_async_and_wait(v7, &v11);
    uint64_t v8 = (void *)v26[5];
    if (a3 && !v8)
    {
      *a3 = (id) v20[5];
      uint64_t v8 = (void *)v26[5];
    }
    id v9 = objc_msgSend(v8, "copy", v11, v12, v13, v14, v15);

    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v25, 8);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_10031D21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10031D240(uint64_t a1)
{
  sub_10031CF88(*(void *)(a1 + 32), @"item identifier lookup");
  if (*(void *)(*(void *)(a1 + 32) + 56))
  {
    id v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = *(id *)(a1 + 40);
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          dispatch_semaphore_t v11 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "objectForKeyedSubscript:", v10, (void)v15);
          [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:v11 forKeyedSubscript:v10];
        }
        id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);
    }
  }
  else
  {
    uint64_t v12 = ASDErrorWithUserInfoAndFormat();
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

id sub_10031D428(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v25 = 0;
    long long v26 = &v25;
    uint64_t v27 = 0x3032000000;
    dispatch_time_t v28 = sub_1000181E8;
    id v29 = sub_100017CB0;
    id v30 = 0;
    uint64_t v19 = 0;
    __int16 v20 = &v19;
    uint64_t v21 = 0x3032000000;
    id v22 = sub_1000181E8;
    long long v23 = sub_100017CB0;
    id v24 = 0;
    id v7 = *(NSObject **)(a1 + 8);
    dispatch_semaphore_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    uint64_t v13 = sub_10031D5E0;
    uint64_t v14 = &unk_100528020;
    uint64_t v15 = a1;
    long long v17 = &v19;
    long long v18 = &v25;
    id v16 = v5;
    dispatch_async_and_wait(v7, &v11);
    uint64_t v8 = (void *)v26[5];
    if (a3 && !v8)
    {
      *a3 = (id) v20[5];
      uint64_t v8 = (void *)v26[5];
    }
    id v9 = objc_msgSend(v8, "copy", v11, v12, v13, v14, v15);

    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v25, 8);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_10031D5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10031D5E0(uint64_t a1)
{
  sub_10031CF88(*(void *)(a1 + 32), @"bundle identifier lookup");
  if (*(void *)(*(void *)(a1 + 32) + 48))
  {
    id v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = *(id *)(a1 + 40);
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          dispatch_semaphore_t v11 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "objectForKeyedSubscript:", v10, (void)v15);
          [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:v11 forKeyedSubscript:v10];
        }
        id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);
    }
  }
  else
  {
    uint64_t v12 = ASDErrorWithUserInfoAndFormat();
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

id sub_10031D7C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v25 = 0;
    long long v26 = &v25;
    uint64_t v27 = 0x3032000000;
    dispatch_time_t v28 = sub_1000181E8;
    id v29 = sub_100017CB0;
    id v30 = 0;
    uint64_t v19 = 0;
    __int16 v20 = &v19;
    uint64_t v21 = 0x3032000000;
    id v22 = sub_1000181E8;
    long long v23 = sub_100017CB0;
    id v24 = 0;
    id v7 = *(NSObject **)(a1 + 8);
    dispatch_semaphore_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    uint64_t v13 = sub_10031D980;
    uint64_t v14 = &unk_100528020;
    uint64_t v15 = a1;
    long long v17 = &v19;
    long long v18 = &v25;
    id v16 = v5;
    dispatch_async_and_wait(v7, &v11);
    uint64_t v8 = (void *)v26[5];
    if (a3 && !v8)
    {
      *a3 = (id) v20[5];
      uint64_t v8 = (void *)v26[5];
    }
    id v9 = objc_msgSend(v8, "copy", v11, v12, v13, v14, v15);

    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v25, 8);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_10031D95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10031D980(uint64_t a1)
{
  sub_10031DB68(*(void *)(a1 + 32), @"watch bundle identifier lookup");
  if (*(void *)(*(void *)(a1 + 32) + 80))
  {
    id v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = *(id *)(a1 + 40);
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          dispatch_semaphore_t v11 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "objectForKeyedSubscript:", v10, (void)v15);
          [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:v11 forKeyedSubscript:v10];
        }
        id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);
    }
  }
  else
  {
    uint64_t v12 = ASDErrorWithUserInfoAndFormat();
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

void sub_10031DB68(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    uint64_t v9 = sub_100320424;
    uint64_t v10 = &unk_100521388;
    dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
    uint64_t v4 = v11;
    id v5 = v3;
    id v6 = v8;
    id v7 = v6;
    if (*(unsigned char *)(a1 + 64)) {
      v9((uint64_t)v6);
    }
    else {
      sub_10031F7F8(a1, v5, 1, v6);
    }

    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  }
}

id sub_10031DC68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v25 = 0;
    long long v26 = &v25;
    uint64_t v27 = 0x3032000000;
    dispatch_time_t v28 = sub_1000181E8;
    id v29 = sub_100017CB0;
    id v30 = 0;
    uint64_t v19 = 0;
    __int16 v20 = &v19;
    uint64_t v21 = 0x3032000000;
    id v22 = sub_1000181E8;
    long long v23 = sub_100017CB0;
    id v24 = 0;
    id v7 = *(NSObject **)(a1 + 8);
    dispatch_semaphore_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    uint64_t v13 = sub_10031DE20;
    uint64_t v14 = &unk_100528020;
    uint64_t v15 = a1;
    long long v17 = &v19;
    long long v18 = &v25;
    id v16 = v5;
    dispatch_async_and_wait(v7, &v11);
    uint64_t v8 = (void *)v26[5];
    if (a3 && !v8)
    {
      *a3 = (id) v20[5];
      uint64_t v8 = (void *)v26[5];
    }
    id v9 = objc_msgSend(v8, "copy", v11, v12, v13, v14, v15);

    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v25, 8);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_10031DDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10031DE20(uint64_t a1)
{
  sub_10031DB68(*(void *)(a1 + 32), @"watch item identifier lookup");
  if (*(void *)(*(void *)(a1 + 32) + 72))
  {
    id v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = *(id *)(a1 + 40);
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          dispatch_semaphore_t v11 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 72), "objectForKeyedSubscript:", v10, (void)v15);
          [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:v11 forKeyedSubscript:v10];
        }
        id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);
    }
  }
  else
  {
    uint64_t v12 = ASDErrorWithUserInfoAndFormat();
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

void sub_10031E0A0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10031E164;
  v6[3] = &unk_100528048;
  void v6[4] = *(void *)(a1 + 40);
  uint64_t v3 = sub_1003923F8(v2, v6);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16));
  id v5 = [v3 copy];
  [WeakRetained catalogRegisteredApps:v5];
}

id sub_10031E164(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)LSApplicationRecord);
  id v5 = [v3 bundleIdentifier];

  id v6 = [v4 initWithBundleIdentifier:v5 allowPlaceholder:0 error:0];
  if (v6)
  {
    id v7 = sub_100016E30(*(void *)(a1 + 32), v6);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_10031E2A8(uint64_t a1)
{
  sub_1003923F8(*(id *)(a1 + 32), &stru_100528088);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if ([v3 count])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16));
    [WeakRetained catalogUnregisteredBundleIDs:v3];
  }
}

id sub_10031E320(id a1, LSApplicationProxy *a2)
{
  id v2 = a2;
  id v3 = [(LSApplicationProxy *)v2 appState];
  unsigned int v4 = [v3 isPlaceholder];

  if (!v4
    || (id v5 = objc_alloc((Class)LSApplicationRecord),
        [(LSApplicationProxy *)v2 bundleIdentifier],
        id v6 = objc_claimAutoreleasedReturnValue(),
        id v7 = [v5 initWithBundleIdentifier:v6 allowPlaceholder:0 error:0],
        v6,
        v7,
        uint64_t v8 = 0,
        !v7))
  {
    uint64_t v8 = [(LSApplicationProxy *)v2 bundleIdentifier];
  }

  return v8;
}

id sub_10031E3D8(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v3 allowPlaceholder:1 error:0];

    if (v4)
    {
      sub_100016E30((uint64_t)v2, v4);
      id v2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v2 = 0;
    }
  }
  return v2;
}

void sub_10031E534(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) bundleID];
  id v4 = sub_10031E3D8(v2, v3);

  if (!v4)
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = objc_opt_class();
      __int16 v20 = *(void **)(a1 + 40);
      id v21 = v19;
      id v22 = [v20 bundleID];
      *(_DWORD *)buf = 138543618;
      id v24 = v19;
      __int16 v25 = 2114;
      long long v26 = v22;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Unable to launch. App not found", buf, 0x16u);
    }
    goto LABEL_7;
  }
  if ([v4 isPlaceholder])
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = objc_opt_class();
      id v7 = v6;
      uint64_t v8 = [v4 bundleID];
      *(_DWORD *)buf = 138543618;
      id v24 = v6;
      __int16 v25 = 2114;
      long long v26 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Unable to launch messsages extension for placeholder", buf, 0x16u);
    }
LABEL_7:

LABEL_8:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_9;
  }
  if (*(void *)(a1 + 56) != 1) {
    goto LABEL_8;
  }
  id v10 = objc_alloc((Class)LSApplicationRecord);
  dispatch_semaphore_t v11 = [v4 bundleID];
  id v12 = [v10 initWithBundleIdentifier:v11 allowPlaceholder:0 error:0];

  uint64_t v13 = sub_1004281E0(v12, 1);
  uint64_t v14 = v13;
  if (v13)
  {
    long long v15 = [v13 bundleIdentifier];
    long long v16 = +[NSString stringWithFormat:@"sms-private://app?appBundleID=%@", v15];
    long long v17 = +[NSURL URLWithString:v16];

    long long v18 = +[LSApplicationWorkspace defaultWorkspace];
    [v18 openSensitiveURL:v17 withOptions:0];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }

LABEL_9:
}

void sub_10031E9CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      long long v15 = sub_100016788();
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 138543874;
      long long v18 = v15;
      __int16 v19 = 2114;
      uint64_t v20 = v16;
      __int16 v21 = 2114;
      id v22 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Error attempting to launch app %{public}@: %{public}@", (uint8_t *)&v17, 0x20u);
    }
    uint64_t v8 = 2;
  }
  else
  {
    id v10 = [XDCLaunchAppResponse alloc];
    if (v5) {
      id Property = objc_getProperty(v5, v9, 16, 1);
    }
    else {
      id Property = 0;
    }
    id v12 = Property;
    uint64_t v13 = [(XDCLaunchAppResponse *)v10 initWithData:v12];

    if (v13) {
      uint64_t v8 = v13[2];
    }
    else {
      uint64_t v8 = 0;
    }
  }
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v14, v8);
  }
}

void sub_10031EC20(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) bundleID];
  id v4 = sub_10031E3D8(v2, v3);

  if (v4)
  {
    if (([v4 isPlaceholder] & 1) == 0
      && ![v4 isLaunchProhibited])
    {
      uint64_t v9 = +[FBSOpenApplicationService serviceWithDefaultShellEndpoint];
      id v10 = [v4 bundleID];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10031EEE0;
      v17[3] = &unk_100528128;
      id v20 = *(id *)(a1 + 48);
      id v11 = v4;
      uint64_t v12 = *(void *)(a1 + 32);
      id v18 = v11;
      uint64_t v19 = v12;
      [v9 openApplication:v10 withOptions:0 completion:v17];

      goto LABEL_9;
    }
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = objc_opt_class();
      id v7 = v6;
      uint64_t v8 = [v4 bundleID];
      *(_DWORD *)buf = 138544130;
      id v22 = v6;
      __int16 v23 = 2114;
      id v24 = v8;
      __int16 v25 = 1024;
      unsigned int v26 = [v4 isPlaceholder];
      __int16 v27 = 1024;
      unsigned int v28 = [v4 isLaunchProhibited];
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Unable to launch. isPlaceholder: %{BOOL}d launchProhibited: %{BOOL}d", buf, 0x22u);
    }
  }
  else
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = objc_opt_class();
      uint64_t v14 = *(void **)(a1 + 40);
      id v15 = v13;
      uint64_t v16 = [v14 bundleID];
      *(_DWORD *)buf = 138543618;
      id v22 = v13;
      __int16 v23 = 2114;
      id v24 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Unable to locate app to launch", buf, 0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_9:
}

void sub_10031EEE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (ASDErrorIsEqual())
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_13:
    v5();
    goto LABEL_14;
  }
  if (!ASDErrorIsEqual())
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_13;
  }
  id v6 = [*(id *)(a1 + 32) bundlePath];

  if (!v6)
  {
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = objc_opt_class();
      uint64_t v12 = *(void **)(a1 + 32);
      id v13 = v11;
      uint64_t v14 = [v12 bundleID];
      int v15 = 138543618;
      uint64_t v16 = v11;
      __int16 v17 = 2114;
      id v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Unable to launch because there is no bundle path", (uint8_t *)&v15, 0x16u);
    }
    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_13;
  }
  id v7 = [v4 userInfo];
  uint64_t v8 = [v7 objectForKeyedSubscript:NSUnderlyingErrorKey];

  if (ASDErrorIsEqual()) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 2;
  }
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v9);

LABEL_14:
}

id sub_10031F1A0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = +[LSDatabaseContext sharedDatabaseContext];
  unsigned int v4 = [v3 startAccessingReturningError:0];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = sub_10031E3D8(*(id *)(a1 + 40), *(void **)(*((void *)&v13 + 1) + 8 * i));
        if (v10) {
          objc_msgSend(v2, "addObject:", v10, (void)v13);
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }

  if (v4) {
    [v3 stopAccessing];
  }
  id v11 = objc_msgSend(v2, "objectEnumerator", (void)v13);

  return v11;
}

id sub_10031F404(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10031F598;
  v12[3] = &unk_100528178;
  v12[4] = *(void *)(a1 + 40);
  id v3 = sub_1003923F8(v2, v12);
  unsigned int v4 = +[LSApplicationRecord enumeratorWithOptions:0];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10031F5A8;
  v9[3] = &unk_1005281A0;
  id v10 = v3;
  id v11 = *(id *)(a1 + 32);
  id v5 = v3;
  [v4 setFilter:v9];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10031F68C;
  v8[3] = &unk_100528150;
  void v8[4] = *(void *)(a1 + 40);
  id v6 = sub_100017698(v4, v8);

  return v6;
}

id sub_10031F598(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:a2];
}

uint64_t sub_10031F5A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 bundleIdentifier];
  if (v4
    && (id v5 = (void *)v4,
        id v6 = *(void **)(a1 + 32),
        [v3 bundleIdentifier],
        id v7 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v6) = [v6 containsObject:v7],
        v7,
        v5,
        (v6 & 1) != 0))
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v9 = [v3 iTunesMetadata];
    id v10 = v9;
    if (v9)
    {
      id v11 = *(void **)(a1 + 40);
      uint64_t v12 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v9 storeItemIdentifier]);
      uint64_t v8 = (uint64_t)[v11 containsObject:v12];
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  return v8;
}

id sub_10031F68C(uint64_t a1, void *a2)
{
  id v2 = sub_100016E30(*(void *)(a1 + 32), a2);
  if (v2) {
    sub_100017560((uint64_t)Optional, v2);
  }
  else {
  id v3 = sub_10038E38C();
  }

  return v3;
}

void sub_10031F6F8(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    *(unsigned char *)(a1 + 40) = 0;
    uint64_t v9 = sub_10030B11C();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10031F8F8;
    v10[3] = &unk_1005281C8;
    void v10[4] = a1;
    id v11 = v7;
    id v12 = v8;
    char v13 = a3;
    sub_10030C810(v9, @"hideableSystemApps", 0, v10);
  }
}

void sub_10031F7F8(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    *(unsigned char *)(a1 + 64) = 0;
    uint64_t v9 = sub_10030B11C();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10031FE60;
    v10[3] = &unk_1005281C8;
    void v10[4] = a1;
    id v11 = v7;
    id v12 = v8;
    char v13 = a3;
    sub_10030C810(v9, @"hideableSystemAppsForWatch", 0, v10);
  }
}

void sub_10031F8F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10031FA18;
  v12[3] = &unk_100522A68;
  id v7 = *(void **)(a1 + 40);
  v12[4] = *(void *)(a1 + 32);
  id v13 = v7;
  id v8 = v5;
  id v14 = v8;
  id v9 = v6;
  id v15 = v9;
  id v16 = *(id *)(a1 + 48);
  id v10 = objc_retainBlock(v12);
  id v11 = v10;
  if (*(unsigned char *)(a1 + 56)) {
    ((void (*)(void *))v10[2])(v10);
  }
  else {
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8), v10);
  }
}

uint64_t sub_10031FA18(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 40))
  {
    id v3 = *(void **)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 56);
    id v5 = *(id *)(a1 + 40);
    id v6 = v3;
    id v7 = v4;
    id v8 = ASDLogHandleForCategory();
    id v9 = v8;
    if (v6)
    {
      id v36 = v7;
      uint64_t v38 = v1;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = objc_opt_class();
        id v11 = v10;
        *(_DWORD *)buf = 138543874;
        id v52 = v10;
        __int16 v53 = 2048;
        id v54 = [v6 count];
        __int16 v55 = 2114;
        id v56 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Loading %lu system app mappings: %{public}@", buf, 0x20u);
      }
      uint64_t v35 = v2;
      id v37 = v5;

      uint64_t v40 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v6 count]);
      __int16 v39 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v6 count]);
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      id v12 = sub_1003B63BC(v6);
      id v13 = [v12 countByEnumeratingWithState:&v41 objects:buf count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v42;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(void *)v42 != v15) {
              objc_enumerationMutation(v12);
            }
            __int16 v17 = *(void **)(*((void *)&v41 + 1) + 8 * i);
            id v18 = sub_1002689B4(v17, @"bundle-id");
            uint64_t v19 = sub_1002689B4(v17, @"id");
            id v20 = (void *)v19;
            if (v18) {
              BOOL v21 = v19 == 0;
            }
            else {
              BOOL v21 = 1;
            }
            if (!v21)
            {
              id v22 = +[NSNumber numberWithUnsignedLongLong:sub_100295930(v19)];
              [v40 setObject:v22 forKeyedSubscript:v18];

              __int16 v23 = +[NSNumber numberWithUnsignedLongLong:sub_100295930((uint64_t)v20)];
              [v39 setObject:v18 forKeyedSubscript:v23];
            }
          }
          id v14 = [v12 countByEnumeratingWithState:&v41 objects:buf count:16];
        }
        while (v14);
      }

      id v24 = ASDLogHandleForCategory();
      id v7 = v36;
      id v9 = v40;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        id v31 = objc_opt_class();
        id v32 = v31;
        id v33 = [v40 count];
        *(_DWORD *)id v45 = 138412802;
        id v46 = v31;
        __int16 v47 = 2048;
        id v48 = v33;
        __int16 v49 = 2112;
        id v50 = v40;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "[%@]: Found mappings for %lu system apps: %@", v45, 0x20u);
      }
      id v25 = [v40 copy];
      unsigned int v26 = *(void **)(v35 + 48);
      *(void *)(v35 + 48) = v25;

      id v27 = [v39 copy];
      unsigned int v28 = *(void **)(v35 + 56);
      *(void *)(v35 + 56) = v27;

      *(unsigned char *)(v35 + 40) = 1;
      id v5 = v37;
      uint64_t v1 = v38;
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      id v52 = (id)objc_opt_class();
      __int16 v53 = 2114;
      id v54 = v5;
      __int16 v55 = 2114;
      id v56 = v7;
      id v34 = v52;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@]: Failed to fetch system application map: %{public}@ error: %{public}@", buf, 0x20u);
    }
  }
  id v29 = *(uint64_t (**)(void))(*(void *)(v1 + 64) + 16);
  return v29();
}

void sub_10031FE60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10031FF80;
  v12[3] = &unk_100522A68;
  id v7 = *(void **)(a1 + 40);
  v12[4] = *(void *)(a1 + 32);
  id v13 = v7;
  id v8 = v5;
  id v14 = v8;
  id v9 = v6;
  id v15 = v9;
  id v16 = *(id *)(a1 + 48);
  id v10 = objc_retainBlock(v12);
  id v11 = v10;
  if (*(unsigned char *)(a1 + 56)) {
    ((void (*)(void *))v10[2])(v10);
  }
  else {
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8), v10);
  }
}

uint64_t sub_10031FF80(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 64))
  {
    id v3 = *(void **)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 56);
    id v5 = *(id *)(a1 + 40);
    id v6 = v3;
    id v7 = v4;
    id v8 = ASDLogHandleForCategory();
    id v9 = v8;
    if (v6)
    {
      id v36 = v7;
      uint64_t v38 = v1;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = objc_opt_class();
        id v11 = v10;
        *(_DWORD *)buf = 138543874;
        id v52 = v10;
        __int16 v53 = 2048;
        id v54 = [v6 count];
        __int16 v55 = 2114;
        id v56 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Loading %lu watch system app mappings: %{public}@", buf, 0x20u);
      }
      uint64_t v35 = v2;
      id v37 = v5;

      uint64_t v40 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v6 count]);
      __int16 v39 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v6 count]);
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      id v12 = sub_1003B63BC(v6);
      id v13 = [v12 countByEnumeratingWithState:&v41 objects:buf count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v42;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(void *)v42 != v15) {
              objc_enumerationMutation(v12);
            }
            __int16 v17 = *(void **)(*((void *)&v41 + 1) + 8 * i);
            id v18 = sub_1002689B4(v17, @"bundle-id");
            uint64_t v19 = sub_1002689B4(v17, @"id");
            id v20 = (void *)v19;
            if (v18) {
              BOOL v21 = v19 == 0;
            }
            else {
              BOOL v21 = 1;
            }
            if (!v21)
            {
              id v22 = +[NSNumber numberWithUnsignedLongLong:sub_100295930(v19)];
              [v40 setObject:v22 forKeyedSubscript:v18];

              __int16 v23 = +[NSNumber numberWithUnsignedLongLong:sub_100295930((uint64_t)v20)];
              [v39 setObject:v18 forKeyedSubscript:v23];
            }
          }
          id v14 = [v12 countByEnumeratingWithState:&v41 objects:buf count:16];
        }
        while (v14);
      }

      id v24 = ASDLogHandleForCategory();
      id v7 = v36;
      id v9 = v40;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        id v31 = objc_opt_class();
        id v32 = v31;
        id v33 = [v40 count];
        *(_DWORD *)id v45 = 138412802;
        id v46 = v31;
        __int16 v47 = 2048;
        id v48 = v33;
        __int16 v49 = 2112;
        id v50 = v40;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "[%@]: Found mappings for %lu system apps: %@", v45, 0x20u);
      }
      id v25 = [v40 copy];
      unsigned int v26 = *(void **)(v35 + 72);
      *(void *)(v35 + 72) = v25;

      id v27 = [v39 copy];
      unsigned int v28 = *(void **)(v35 + 80);
      *(void *)(v35 + 80) = v27;

      *(unsigned char *)(v35 + 64) = 1;
      id v5 = v37;
      uint64_t v1 = v38;
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      id v52 = (id)objc_opt_class();
      __int16 v53 = 2114;
      id v54 = v5;
      __int16 v55 = 2114;
      id v56 = v7;
      id v34 = v52;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@]: Failed to fetch system application map: %{public}@ error: %{public}@", buf, 0x20u);
    }
  }
  id v29 = *(uint64_t (**)(void))(*(void *)(v1 + 64) + 16);
  return v29();
}

void sub_1003203C8(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1004209A0(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

intptr_t sub_10032041C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_100320424(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10032042C(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1004206C4(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10032055C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = [v2 objectForKeyedSubscript:@"bundleIDs"];
  id v4 = [v3 copy];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1003206F4;
  v9[3] = &unk_1005281F0;
  void v9[4] = *(void *)(a1 + 40);
  id v5 = sub_1003923F8(v4, v9);
  if ([v5 count])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16));
    id v7 = [v5 copy];
    [WeakRetained catalogRegisteredApps:v7];
  }
  else
  {
    id WeakRetained = ASDLogHandleForCategory();
    if (!os_log_type_enabled(WeakRetained, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    id v8 = objc_opt_class();
    *(_DWORD *)buf = 138412290;
    id v11 = v8;
    id v7 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "[%@] Apps registered notification did not contain any apps", buf, 0xCu);
  }

LABEL_5:
}

id sub_1003206F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v3 allowPlaceholder:0 error:0];

  id v5 = sub_100016E30(*(void *)(a1 + 32), v4);

  return v5;
}

void sub_100320848(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = +[LSDatabaseContext sharedDatabaseContext];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100320948;
  v7[3] = &unk_100528218;
  id v8 = *(id *)(a1 + 32);
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 40);
  id v9 = v4;
  uint64_t v10 = v5;
  [v3 accessUsingBlock:v7];

  if ([v4 count])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16));
    [WeakRetained catalogUnregisteredBundleIDs:v4];
  }
}

void sub_100320948(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        id v8 = objc_alloc((Class)LSApplicationRecord);
        id v9 = objc_msgSend(v8, "initWithBundleIdentifier:allowPlaceholder:error:", v7, 0, 0, (void)v10);
        if (!v9) {
          [*(id *)(a1 + 40) addObject:v7];
        }
        sub_1003886AC(*(void *)(*(void *)(a1 + 48) + 32), v7);
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100320AFC(uint64_t a1)
{
  sub_10031F6F8(*(void *)(a1 + 32), @"bag changed", 0, &stru_100528238);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10031F7F8(v2, @"bag changed", 0, &stru_100528258);
}

void sub_100320BDC(uint64_t a1)
{
  sub_10031F6F8(*(void *)(a1 + 32), @"bag invalidated", 0, &stru_100528278);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10031F7F8(v2, @"bag invalidated", 0, &stru_100528298);
}

void sub_100320E4C(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init(XDCLaunchAppResponse);
  if (v4) {
    v4->_status = a2;
  }
  id v8 = v4;
  uint64_t v5 = sub_10036927C(*(void *)(a1 + 32), v4, 6);
  uint64_t v6 = sub_1003177EC();
  id v7 = (void *)v6;
  if (v6) {
    sub_100317CB4(v6, v5, *(void **)(a1 + 40), 0, 0);
  }
}

void sub_100320FC4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B0F50;
  qword_1005B0F50 = (uint64_t)v1;
}

void sub_100321190(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v29 = v2;
    __int16 v30 = 2114;
    CFStringRef v31 = @"com.apple.appstored";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Starting subscription coordinator for client: %{public}@", buf, 0x16u);
  }

  uint64_t v19 = sub_100013CBC(*(void **)(a1 + 32), 1uLL, v2);
  sub_1003216E0(*(void *)(a1 + 32), 1, v19);
  id v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  id v24 = sub_100013CBC(*(void **)(a1 + 32), 0, v2);
  sub_1003216E0(*(void *)(a1 + 32), 0, v24);
  id v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
  __int16 v23 = sub_100013CBC(*(void **)(a1 + 32), 2uLL, v2);
  sub_1003216E0(*(void *)(a1 + 32), 2, v23);
  BOOL v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = sub_100013CBC(*(void **)(a1 + 32), 3uLL, v2);
  sub_1003216E0(*(void *)(a1 + 32), 3, v5);
  id v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = sub_100013CBC(*(void **)(a1 + 32), 4uLL, v2);
  sub_1003216E0(*(void *)(a1 + 32), 4, v6);
  unsigned int v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
  id v7 = sub_100013CBC(*(void **)(a1 + 32), 5uLL, v2);
  sub_1003216E0(*(void *)(a1 + 32), 5, v7);
  id v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
  id v8 = sub_100013CBC(*(void **)(a1 + 32), 6uLL, v2);
  sub_1003216E0(*(void *)(a1 + 32), 6, v8);
  id v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
  long long v10 = sub_100013CBC(*(void **)(a1 + 32), 7uLL, v2);
  sub_1003216E0(*(void *)(a1 + 32), 7, v10);
  id v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
  long long v11 = v4;
  if (v4
    || (long long v11 = v22) != 0
    || (long long v11 = v21) != 0
    || (long long v11 = v27) != 0
    || (long long v11 = v26) != 0
    || (long long v11 = v25) != 0
    || (long long v11 = v9) != 0
    || (long long v11 = v20) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    long long v13 = v11;
    id v14 = *(void **)(v12 + 16);
    *(void *)(v12 + 16) = v13;
  }
  if (v27 || v26 || v25 || v9)
  {
    uint64_t v15 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138413314;
      id v29 = v2;
      __int16 v30 = 2114;
      CFStringRef v31 = v27;
      __int16 v32 = 2114;
      id v33 = v26;
      __int16 v34 = 2114;
      uint64_t v35 = v25;
      __int16 v36 = 2114;
      id v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[%@] Starting with musicAccountID: %{public}@ tvAccountID: %{public}@ iCloudAccountID: %{public}@ podcastAccountID: %{public}@", buf, 0x34u);
    }
  }
  id v16 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v17 = *(__CFString **)(*(void *)(a1 + 32) + 16);
    *(_DWORD *)buf = 138413058;
    id v29 = v2;
    __int16 v30 = 2114;
    CFStringRef v31 = v22;
    __int16 v32 = 2114;
    id v33 = v4;
    __int16 v34 = 2114;
    uint64_t v35 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] Starting with newsAccountID: %{public}@ appStoreAccountID: %{public}@ lastAccount: %{public}@", buf, 0x2Au);
  }

  sub_100321784(*(void **)(a1 + 32), 0, v24, 0);
  sub_100321784(*(void **)(a1 + 32), 1, v19, 0);
  sub_100321784(*(void **)(a1 + 32), 2, v23, 0);
  sub_100321784(*(void **)(a1 + 32), 3, v5, 0);
  sub_100321784(*(void **)(a1 + 32), 4, v6, 0);
  sub_100321784(*(void **)(a1 + 32), 5, v7, 0);
  sub_100321784(*(void **)(a1 + 32), 6, v8, 0);
  sub_100321784(*(void **)(a1 + 32), 7, v10, 0);
  id v18 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v29 = v2;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%@] Subscription coordinator startup complete", buf, 0xCu);
  }
}

id sub_1003216E0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v3 = sub_10000D760(a2, a3, 1);
    if (v3)
    {
      id v4 = (void **)sub_1003B8774([SubscriptionEntitlementsResponse alloc], v3);
      uint64_t v5 = v4;
      if (v4)
      {
        uint64_t v6 = sub_1003B880C(v4);
      }
      else
      {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6;
}

void sub_100321784(void *a1, uint64_t a2, void *a3, int a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = +[ActiveAccountObserver activeAccount];
    uint64_t v9 = objc_msgSend(v8, "ams_DSID");
    if (!v9
      || (long long v10 = (void *)v9,
          long long v11 = (void *)a1[2],
          objc_msgSend(v8, "ams_DSID"),
          uint64_t v12 = objc_claimAutoreleasedReturnValue(),
          LOBYTE(v11) = [v11 isEqualToNumber:v12],
          v12,
          v10,
          (v11 & 1) == 0))
    {
      if (v8)
      {
        long long v13 = objc_msgSend(v8, "ams_DSID");

        id v14 = ASDLogHandleForCategory();
        uint64_t v15 = v14;
        if (v13)
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            id v16 = objc_msgSend(v8, "ams_DSID");
            int v17 = 138412546;
            id v18 = v7;
            __int16 v19 = 2114;
            id v20 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@] Clearing cached subscription entitlements after account change to: %{public}@", (uint8_t *)&v17, 0x16u);
          }
        }
        else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          int v17 = 138412290;
          id v18 = v7;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%@] Active account has nil DSID. Clearing cached subscription entitlements", (uint8_t *)&v17, 0xCu);
        }
      }
      else
      {
        uint64_t v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = 138412290;
          id v18 = v7;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@] Clearing cached after account sign out", (uint8_t *)&v17, 0xCu);
        }
      }

      sub_100324964(a1, a2, v7);
      sub_1003242BC((uint64_t)a1, a2, v7, 0, a4, 1);
    }
  }
}

void sub_100321A50(void *a1, unint64_t a2, void *a3, BOOL a4, BOOL a5, uint64_t a6, void *a7)
{
  id v12 = a3;
  id v13 = a7;
  if (a1)
  {
    id v14 = objc_alloc_init(SubscriptionRequestInfo);
    uint64_t v15 = sub_100013680(a1, a2);
    int v17 = v15;
    if (v14)
    {
      objc_setProperty_atomic(v14, v16, v15, 16);

      v14->_segment = a2;
      objc_setProperty_atomic(v14, v18, v12, 32);
      v14->_ignoreCaches = a4;
      v14->_isBackground = a5;
      v14->_notifyExternal = 1;
    }
    else
    {
    }
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100321B8C;
    v19[3] = &unk_1005282E8;
    id v20 = v13;
    sub_100008278((uint64_t)a1, v14, v19);
  }
}

void sub_100321B8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v9 = v3;
    if (v3)
    {
      id v5 = v3[2];
      BOOL v6 = *((unsigned char *)v9 + 8) != 0;
      BOOL v7 = *((unsigned char *)v9 + 9) != 0;
      id v8 = v9[3];
    }
    else
    {
      BOOL v7 = 0;
      id v5 = 0;
      BOOL v6 = 0;
      id v8 = 0;
    }
    (*(void (**)(uint64_t, id, BOOL, BOOL, id))(v4 + 16))(v4, v5, v6, v7, v8);

    id v3 = v9;
  }
}

void sub_100321C3C(uint64_t a1)
{
  uint64_t v2 = sub_100013680(*(void **)(a1 + 32), *(void *)(a1 + 56));
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 48, 1);
    }
    id v6 = Property;
    *(_DWORD *)buf = 138412546;
    id v13 = v2;
    __int16 v14 = 2114;
    id v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Requesting cached subscription entitlements for clientID: %{public}@", buf, 0x16u);
  }
  char v11 = 0;
  BOOL v7 = sub_10000D568(*(void *)(a1 + 32), *(void *)(a1 + 56), v2, &v11);
  id v8 = sub_100019834((uint64_t)v7);
  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [v8 count];
    *(_DWORD *)buf = 138412546;
    id v13 = v2;
    __int16 v14 = 2048;
    id v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Returning %lu subscription entitlement(s)", buf, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100321DF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Marking the cached subscription entitlements as expired", (uint8_t *)&v7, 0xCu);
    }

    id v5 = sub_10000D760(v1, v3, 0);
    id v6 = [v5 mutableCopy];

    if (v6)
    {
      [v6 removeObjectForKey:@"cacheTimestamp"];
      sub_1003240D0(v2, v6, v1, v3, 1, 1);
    }
  }
}

void sub_100321FDC(uint64_t a1)
{
}

void sub_100321FF4(id *a1, void *a2, void *a3, unint64_t a4, int a5, int a6)
{
  id v11 = a2;
  id v12 = a3;
  if (a1)
  {
    id v13 = sub_100013680(a1, a4);
    if (v11)
    {
      int v24 = a5;
      int v25 = a6;
      __int16 v14 = +[ActiveAccountObserver activeAccount];
      uint64_t v15 = objc_msgSend(v14, "ams_DSID");
      if (v15
        && (id v16 = (void *)v15,
            objc_msgSend(v14, "ams_DSID"),
            int v17 = objc_claimAutoreleasedReturnValue(),
            unsigned int v18 = [v12 isEqualToNumber:v17],
            v17,
            v16,
            v18))
      {
        __int16 v19 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          id v20 = objc_msgSend(v14, "ams_DSID");
          *(_DWORD *)buf = 138412546;
          id v27 = v13;
          __int16 v28 = 2114;
          id v29 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%@] Setting cached subscriptions for account: %{public}@", buf, 0x16u);
        }
        BOOL v21 = [v11 mutableCopy];
        id v22 = +[NSDate date];
        [v21 setObject:v22 forKeyedSubscript:@"cacheTimestamp"];

        sub_1003240D0((uint64_t)a1, v21, a4, v13, v24, v25);
        objc_storeStrong(a1 + 2, a3);
      }
      else
      {
        BOOL v21 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v23 = objc_msgSend(v14, "ams_DSID");
          *(_DWORD *)buf = 138412802;
          id v27 = v13;
          __int16 v28 = 2114;
          id v29 = v12;
          __int16 v30 = 2114;
          CFStringRef v31 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@] Not setting cached subscriptions because accountID: %{public}@ does not match active accountID: %{public}@", buf, 0x20u);
        }
      }
    }
    else
    {
      sub_100324964(a1, a4, v13);
    }
  }
}

id sub_10032226C()
{
  self;
  id v0 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"876F12EE-055C-49EB-8909-3BE6753CA832"];
  return v0;
}

void sub_1003222AC(void *a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10032226C();
    id v3 = sub_100013680(a1, 1uLL);
    id v4 = sub_100322854();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100322AA0;
    v7[3] = &unk_100521620;
    id v8 = v3;
    id v9 = v2;
    id v5 = v2;
    id v6 = v3;
    [v4 clearStatusCondition:v5 completionHandler:v7];
  }
}

void sub_100322394(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (v6)
  {
    id v29 = v7;
    sub_100019834(*(void *)(a1 + 40));
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v10 = [v9 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v31;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v31 != v12) {
            objc_enumerationMutation(v9);
          }
          __int16 v14 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          uint64_t v15 = [v14 familyID];
          id v16 = [v15 integerValue];
          id v17 = [v6 integerValue];

          if (v16 == v17)
          {
            unsigned int v18 = [v14 expiryDate];
            __int16 v19 = +[NSDate date];
            id v20 = [v18 compare:v19];

            BOOL v21 = *(void **)(a1 + 48);
            if (v20 == (id)1)
            {
              id v8 = v29;
              if (v21)
              {
                id v22 = sub_10032226C();
                __int16 v23 = sub_100013680(v21, 1uLL);
                id v24 = sub_100322854();
                *(void *)buf = _NSConcreteStackBlock;
                *(void *)&buf[8] = 3221225472;
                *(void *)&uint8_t buf[16] = sub_100322938;
                __int16 v36 = &unk_100521620;
                id v37 = v23;
                id v38 = v22;
                id v25 = v22;
                id v26 = v23;
                [v24 setStatusCondition:v25 completionHandler:buf];
              }
            }
            else
            {
              sub_1003222AC(*(void **)(a1 + 48));
              id v8 = v29;
            }

            goto LABEL_19;
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v30 objects:v34 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    sub_1003222AC(*(void **)(a1 + 48));
    id v8 = v29;
LABEL_19:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v27 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[%@] Did not find arcade sub group id bag key, error: %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1003226A8(void *a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100013680(a1, 1uLL);
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Updating arcade ad status condition", buf, 0xCu);
    }

    id v4 = objc_alloc_init(SubscriptionRequestInfo);
    id v6 = v4;
    if (v4)
    {
      objc_setProperty_atomic(v4, v5, v2, 16);
      v6->_segment = 1;
    }
    id v7 = sub_100416894((uint64_t)XPCRequestToken, 1);
    id v9 = v7;
    if (v6)
    {
      objc_setProperty_atomic(v6, v8, v7, 32);

      v6->_ignoreCaches = 0;
      *(_WORD *)&v6->_notifyExternal = 1;
    }
    else
    {
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100322844;
    v10[3] = &unk_100528388;
    void v10[4] = a1;
    sub_100008278((uint64_t)a1, v6, v10);
  }
}

void sub_100322844(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_1003222AC(*(void **)(a1 + 32));
  }
}

id sub_100322854()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1005B0F60;
  uint64_t v7 = qword_1005B0F60;
  if (!qword_1005B0F60)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100324B34;
    v3[3] = &unk_1005243D0;
    v3[4] = &v4;
    sub_100324B34((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100322920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100322938(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v10 = 138412802;
      uint64_t v11 = v5;
      __int16 v12 = 2114;
      uint64_t v13 = v6;
      __int16 v14 = 2114;
      id v15 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@] Did set status condition: %{public}@ error: %{public}@", (uint8_t *)&v10, 0x20u);
    }
  }
  else
  {
    uint64_t v7 = +[NSDate date];
    sub_1003F2204((uint64_t)AppDefaultsManager, v7);

    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2114;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Did set status condition: %{public}@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_100322AA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v10 = 138412802;
      uint64_t v11 = v5;
      __int16 v12 = 2114;
      uint64_t v13 = v6;
      __int16 v14 = 2114;
      id v15 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@] Did clear status condition: %{public}@ error: %{public}@", (uint8_t *)&v10, 0x20u);
    }
  }
  else
  {
    uint64_t v7 = +[NSDate date];
    sub_1003F2204((uint64_t)AppDefaultsManager, v7);

    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2114;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Did clear status condition: %{public}@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_100322FC0(void *a1, uint64_t a2, char a3, char a4, void *a5)
{
  id v9 = a5;
  int v10 = sub_100019834(a2);
  uint64_t v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (void *)a1[4];
    if (v13) {
      id Property = objc_getProperty(v13, v12, 16, 1);
    }
    else {
      id Property = 0;
    }
    *(_DWORD *)buf = 138412546;
    id v28 = Property;
    __int16 v29 = 2048;
    id v30 = [v10 count];
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Returning %lu subscription entitlement(s)", buf, 0x16u);
  }

  uint64_t v15 = a1[5];
  id v16 = *(NSObject **)(v15 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100323180;
  block[3] = &unk_1005283F0;
  char v25 = a3;
  char v26 = a4;
  id v21 = v10;
  id v22 = v9;
  uint64_t v17 = a1[6];
  uint64_t v23 = v15;
  uint64_t v24 = v17;
  id v18 = v9;
  id v19 = v10;
  dispatch_async(v16, block);
}

void sub_100323180(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(SubscriptionEntitlementsResult);
  uint64_t v4 = v2;
  if (v2)
  {
    objc_setProperty_nonatomic_copy(v2, v3, *(id *)(a1 + 32), 16);
    v4->_resultFromCache = *(unsigned char *)(a1 + 64);
    v4->_cacheExpired = *(unsigned char *)(a1 + 65);
    objc_storeStrong((id *)&v4->_error, *(id *)(a1 + 40));
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v17 = v4;
  if (v6)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v6 + 8));
    uint64_t v7 = *(void **)(v6 + 96);
    uint64_t v8 = +[NSNumber numberWithUnsignedInteger:v5];
    id v9 = [v7 objectForKeyedSubscript:v8];

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v10);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v18 + 1) + 8 * i) + 16))();
        }
        id v12 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v12);
    }

    uint64_t v15 = *(void **)(v6 + 96);
    id v16 = +[NSNumber numberWithUnsignedInteger:v5];
    [v15 setObject:0 forKeyedSubscript:v16];
  }
}

void sub_100323358(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    uint64_t v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (v9) {
        id Property = objc_getProperty(v9, v14, 16, 1);
      }
      else {
        id Property = 0;
      }
      id v16 = objc_msgSend(v10, "ams_DSID");
      *(_DWORD *)buf = 138412546;
      id v37 = Property;
      __int16 v38 = 2114;
      __int16 v39 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@] Fetching subscriptions for accountID: %{public}@", buf, 0x16u);
    }
    long long v18 = [SubscriptionEntitlementsRequest alloc];
    if (v9)
    {
      id v19 = objc_getProperty(v9, v17, 32, 1);
      id v21 = objc_getProperty(v9, v20, 16, 1);
    }
    else
    {
      id v19 = 0;
      id v21 = 0;
    }
    id v22 = sub_1002CC830((id *)&v18->super.isa, v19, v21);

    if (v22) {
      objc_setProperty_atomic(v22, v23, v10, 8);
    }
    if (v9)
    {
      char v25 = objc_msgSend(objc_getProperty(v9, v23, 32, 1), "processInfo");
      if (v22) {
        objc_setProperty_atomic(v22, v24, v25, 16);
      }

      if (*((unsigned char *)v9 + 9))
      {
        BOOL v26 = 0;
        if (!v22) {
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v26 = *((unsigned char *)v9 + 8) != 0;
        if (!v22)
        {
LABEL_19:
          v31[0] = _NSConcreteStackBlock;
          v31[1] = 3221225472;
          v31[2] = sub_1003237C4;
          v31[3] = &unk_1005284B0;
          v31[4] = a1;
          id v32 = v10;
          id v33 = v9;
          id v35 = v12;
          id v34 = v11;
          sub_1002CC8B0((uint64_t)v22, v31);

          goto LABEL_20;
        }
      }
      *((unsigned char *)v22 + 40) = v26;
      id v27 = (void *)*((void *)v9 + 3);
    }
    else
    {
      id v28 = [0 processInfo];
      id v30 = v28;
      if (!v22)
      {

        goto LABEL_19;
      }
      objc_setProperty_atomic(v22, v29, v28, 16);

      id v27 = 0;
      *((unsigned char *)v22 + 40) = 0;
    }
    v22[6] = v27;
    goto LABEL_19;
  }
LABEL_20:
}

void sub_10032364C(uint64_t a1, char a2)
{
  uint64_t v4 = ASDLogHandleForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      uint64_t v7 = *(void **)(a1 + 32);
      if (v7) {
        id Property = objc_getProperty(v7, v6, 16, 1);
      }
      else {
        id Property = 0;
      }
      id v9 = objc_msgSend(*(id *)(a1 + 48), "ams_DSID");
      int v11 = 138412546;
      id v12 = Property;
      __int16 v13 = 2114;
      __int16 v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Returning cached subscriptions response for account: %{public}@", (uint8_t *)&v11, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    if (v5)
    {
      id v10 = *(id *)(a1 + 32);
      if (v10) {
        id v10 = objc_getProperty(v10, v6, 16, 1);
      }
      int v11 = 138412290;
      id v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Getting fresh entitlements refresh for this boot", (uint8_t *)&v11, 0xCu);
    }

    sub_100323358(*(void *)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64));
  }
}

void sub_1003237C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003238DC;
  block[3] = &unk_100528488;
  id v12 = v5;
  uint64_t v13 = v7;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 56);
  id v17 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_1003238DC(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(id **)(a1 + 40);
    id v5 = objc_getProperty(v3, a2, 8, 1);
    id v6 = objc_msgSend(*(id *)(a1 + 48), "ams_DSID");
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7)
    {
      unint64_t v8 = *(void *)(v7 + 24);
      BOOL v9 = *(unsigned char *)(v7 + 11) != 0;
      BOOL v10 = *(unsigned __int8 *)(v7 + 10) != 0;
    }
    else
    {
      BOOL v9 = 0;
      unint64_t v8 = 0;
      BOOL v10 = 0;
    }
    sub_100321FF4(v4, v5, v6, v8, v9, v10);

    int v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id Property = *(id *)(a1 + 56);
      if (Property) {
        id Property = objc_getProperty(Property, v12, 16, 1);
      }
      *(_DWORD *)id v33 = 138412290;
      *(void *)&void v33[4] = Property;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Returning updated subscriptions response", v33, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
    id v14 = sub_10026CA24();
    sub_10026D66C((uint64_t)v14);

    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 && *(void *)(v15 + 24) == 1)
    {
      id v16 = *(void **)(a1 + 40);
      id v17 = *(id *)(a1 + 32);
      id v18 = &stru_100528460;
      if (v16)
      {
        id v19 = sub_100013680(v16, 1uLL);
        SEL v20 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v33 = 138412290;
          *(void *)&void v33[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%@] Setting arcade ad status condition", v33, 0xCu);
        }

        if (v17)
        {
          id v21 = sub_10030B11C();
          id v22 = sub_10030C454(v21, @"arcade-iap-family-id");
          *(void *)id v33 = _NSConcreteStackBlock;
          *(void *)&v33[8] = 3221225472;
          *(void *)&v33[16] = sub_100322394;
          id v34 = &unk_100528360;
          id v35 = v19;
          uint64_t v23 = &stru_100528460;
          __int16 v38 = &stru_100528460;
          id v36 = v17;
          id v37 = v16;
          [v22 valueWithCompletion:v33];
        }
        else
        {
          id v32 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id v33 = 138412290;
            *(void *)&void v33[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%@] Entitlement nil", v33, 0xCu);
          }

          sub_1003222AC(v16);
        }
      }
    }
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 64);
    char v25 = ASDLogHandleForCategory();
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if (v24)
    {
      if (v26)
      {
        id v28 = *(id *)(a1 + 56);
        if (v28) {
          id v28 = objc_getProperty(v28, v27, 16, 1);
        }
        uint64_t v29 = *(void *)(a1 + 72);
        *(_DWORD *)id v33 = 138412546;
        *(void *)&void v33[4] = v28;
        *(_WORD *)&v33[12] = 2114;
        *(void *)&v33[14] = v29;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%@] Returning cached subscription response due to request error: %{public}@", v33, 0x16u);
      }
    }
    else if (v26)
    {
      id v30 = *(id *)(a1 + 56);
      if (v30) {
        id v30 = objc_getProperty(v30, v27, 16, 1);
      }
      uint64_t v31 = *(void *)(a1 + 72);
      *(_DWORD *)id v33 = 138412546;
      *(void *)&void v33[4] = v30;
      *(_WORD *)&v33[12] = 2114;
      *(void *)&v33[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%@] No cached subscriptions available, returning error: %{public}@", v33, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
}

void sub_100323E6C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v24 = 138412290;
    uint64_t v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@] Updating after account changed - inside dispatch queue", (uint8_t *)&v24, 0xCu);
  }

  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = sub_100013CBC(v4, 0, *(void **)(a1 + 32));
  sub_100321784(v4, 0, v5, 1);

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = sub_100013CBC(v6, 1uLL, *(void **)(a1 + 32));
  sub_100321784(v6, 1, v7, 1);

  unint64_t v8 = *(void **)(a1 + 40);
  BOOL v9 = sub_100013CBC(v8, 2uLL, *(void **)(a1 + 32));
  sub_100321784(v8, 2, v9, 1);

  BOOL v10 = *(void **)(a1 + 40);
  int v11 = sub_100013CBC(v10, 3uLL, *(void **)(a1 + 32));
  sub_100321784(v10, 3, v11, 1);

  id v12 = *(void **)(a1 + 40);
  uint64_t v13 = sub_100013CBC(v12, 4uLL, *(void **)(a1 + 32));
  sub_100321784(v12, 4, v13, 1);

  id v14 = *(void **)(a1 + 40);
  uint64_t v15 = sub_100013CBC(v14, 5uLL, *(void **)(a1 + 32));
  sub_100321784(v14, 5, v15, 1);

  id v16 = *(void **)(a1 + 40);
  id v17 = sub_100013CBC(v16, 6uLL, *(void **)(a1 + 32));
  sub_100321784(v16, 6, v17, 1);

  id v18 = *(void **)(a1 + 40);
  id v19 = sub_100013CBC(v18, 7uLL, *(void **)(a1 + 32));
  sub_100321784(v18, 7, v19, 1);

  SEL v20 = +[ActiveAccountObserver activeAccount];
  uint64_t v21 = objc_msgSend(v20, "ams_DSID");
  uint64_t v22 = *(void *)(a1 + 40);
  uint64_t v23 = *(void **)(v22 + 16);
  *(void *)(v22 + 16) = v21;
}

void sub_1003240D0(uint64_t a1, void *a2, uint64_t a3, void *a4, int a5, int a6)
{
  id v11 = a2;
  id v12 = a4;
  uint64_t v13 = sub_100013084(a3, v12);
  if ([v13 length])
  {
    id v18 = 0;
    id v14 = +[NSPropertyListSerialization dataWithPropertyList:v11 format:200 options:0 error:&v18];
    id v15 = v18;
    if (v15)
    {
      id v16 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        id v20 = v12;
        __int16 v21 = 2114;
        id v22 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[%@] Failed to write the subscription entitlements to disk error: %{public}@", buf, 0x16u);
      }
    }
    else
    {
      if (([v14 writeToFile:v13 atomically:1] & 1) == 0)
      {
        id v17 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v20 = v12;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[%@] Failed to write the subscription entitlements to disk with unknown error:", buf, 0xCu);
        }
      }
      sub_1003242BC(a1, a3, v12, v11, a5, a6);
    }
  }
}

void sub_1003242BC(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5, int a6)
{
  id v11 = a3;
  id v12 = a4;
  switch(a2)
  {
    case 0:
      uint64_t v13 = "com.apple.appstored.NewsSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 1:
      if (a6)
      {
        id v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v21) = 138412290;
          *(void *)((char *)&v21 + 4) = v11;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@] Notifying external subscription changed", (uint8_t *)&v21, 0xCu);
        }

        notify_post("com.apple.appstored.AppStoreSubEntitlementsCacheUpdated");
      }
      if (a5)
      {
        id v16 = v12;
        id v17 = v11;
        id v18 = *(NSObject **)(a1 + 88);
        *(void *)&long long v21 = _NSConcreteStackBlock;
        *((void *)&v21 + 1) = 3221225472;
        id v22 = sub_100324540;
        uint64_t v23 = &unk_1005212D8;
        id v19 = v16;
        id v24 = v19;
        id v20 = v17;
        id v25 = v20;
        uint64_t v26 = a1;
        dispatch_async(v18, &v21);
      }
      break;
    case 2:
      uint64_t v13 = "com.apple.appstored.ActivitySubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 3:
      uint64_t v13 = "com.apple.appstored.MusicSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 4:
      uint64_t v13 = "com.apple.appstored.TVSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 5:
      uint64_t v13 = "com.apple.appstored.iCloudSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 6:
      uint64_t v13 = "com.apple.appstored.PodcastSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 7:
      uint64_t v13 = "com.apple.appstored.HWBundleSubEntitlementsCacheUpdated";
LABEL_18:
      notify_post(v13);
      break;
    default:
      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v21) = 138412290;
        *(void *)((char *)&v21 + 4) = v11;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] Unable to cache invalid segment", (uint8_t *)&v21, 0xCu);
      }

      break;
  }
}

void sub_100324540(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (uint64_t)sub_1003B8774([SubscriptionEntitlementsResponse alloc], *(void **)(a1 + 32));
    uint64_t v3 = sub_100019834(v2);
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v19 = v5;
      __int16 v20 = 2048;
      id v21 = [v3 count];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Notifying internal cached subscription changed with %ld entitlements", buf, 0x16u);
    }

    id v6 = sub_10037B958();
    sub_10037C578((uint64_t)v6, v3, *(void **)(a1 + 40));
  }
  else
  {
    uint64_t v7 = +[ActiveAccountObserver activeAccount];

    if (v7)
    {
      unint64_t v8 = objc_alloc_init(SubscriptionRequestInfo);
      uint64_t v2 = (uint64_t)v8;
      if (v8)
      {
        objc_setProperty_atomic(v8, v9, *(id *)(a1 + 40), 16);
        *(void *)(v2 + 24) = 1;
      }
      BOOL v10 = sub_100416894((uint64_t)XPCRequestToken, 1);
      id v12 = v10;
      if (v2)
      {
        objc_setProperty_atomic((id)v2, v11, v10, 32);

        *(unsigned char *)(v2 + 8) = 0;
        *(_WORD *)(v2 + 10) = 0;
      }
      else
      {
      }
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1003247E0;
      v16[3] = &unk_1005284D8;
      uint64_t v13 = *(void *)(a1 + 48);
      id v17 = *(id *)(a1 + 40);
      sub_100008030(v13, v2, v16);
    }
    else
    {
      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] Notifying internal subscription changed following signout", buf, 0xCu);
      }

      uint64_t v2 = sub_10037B958();
      sub_10037C578(v2, &__NSArray0__struct, *(void **)(a1 + 40));
    }
  }
}

void sub_1003247E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  if (v7)
  {
    unint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v9;
      __int16 v15 = 2114;
      id v16 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Notifying internal subscription changed resulted in error: %{public}@", (uint8_t *)&v13, 0x16u);
    }
  }
  else
  {
    unint64_t v8 = sub_100019834(a2);
    BOOL v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v11;
      __int16 v15 = 2048;
      id v16 = [v8 count];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Notifying internal subscription changed to a new user with %ld entitlements", (uint8_t *)&v13, 0x16u);
    }

    id v12 = sub_10037B958();
    sub_10037C578((uint64_t)v12, v8, *(void **)(a1 + 32));
  }
}

void sub_100324964(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Clearing cached subscription entitlements", (uint8_t *)&v9, 0xCu);
  }

  id v7 = sub_100013084(a2, v5);
  unint64_t v8 = +[NSFileManager defaultManager];
  [v8 removeItemAtPath:v7 error:0];

  if (a2 == 1) {
    sub_1003222AC(a1);
  }
}

Class sub_100324B34(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1005B0F68)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_100324C88;
    v4[4] = &unk_100521BF0;
    v4[5] = v4;
    long long v5 = off_1005284F8;
    uint64_t v6 = 0;
    qword_1005B0F68 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1005B0F68)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("ADStatusConditions");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1005B0F60 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100324C88()
{
  uint64_t result = _sl_dlopen();
  qword_1005B0F68 = result;
  return result;
}

id sub_100324D08()
{
  self;
  v2[0] = @"bundle_id";
  v2[1] = @"session_reporter_key";
  v2[2] = @"last_refresh";
  id v0 = +[NSArray arrayWithObjects:v2 count:3];
  return v0;
}

id sub_100325104()
{
  self;
  if (qword_1005B0F78 != -1) {
    dispatch_once(&qword_1005B0F78, &stru_100528568);
  }
  id v0 = (void *)qword_1005B0F70;
  return v0;
}

void sub_10032515C(id a1)
{
  id v1 = objc_alloc_init(TestFlightFeedbackService);
  uint64_t v2 = (void *)qword_1005B0F70;
  qword_1005B0F70 = (uint64_t)v1;
}

uint64_t sub_100326B7C(uint64_t result)
{
  if (result)
  {
    if ((*(_WORD *)(result + 208) & 0x10) != 0) {
      return *(unsigned int *)(result + 176);
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_100326BA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 144);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v6 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = v5;

      uint64_t v4 = *(void **)(a1 + 144);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

uint64_t sub_100327284(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 208) |= 0x10u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_127;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_129;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_127:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_129:
        *(_DWORD *)(a1 + 176) = v14;
        continue;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 40;
        goto LABEL_125;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 48;
        goto LABEL_125;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 72;
        goto LABEL_125;
      case 5u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 208) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_133;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_133:
        uint64_t v74 = 8;
        goto LABEL_146;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 88;
        goto LABEL_125;
      case 7u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 208) |= 2u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v22 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              BOOL v9 = v26++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_137;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_137:
        uint64_t v74 = 16;
        goto LABEL_146;
      case 8u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 208) |= 4u;
        while (2)
        {
          unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 == -1 || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
            v22 |= (unint64_t)(v32 & 0x7F) << v29;
            if (v32 < 0)
            {
              v29 += 7;
              BOOL v9 = v30++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_141;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_141:
        uint64_t v74 = 24;
        goto LABEL_146;
      case 9u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 208) |= 8u;
        while (2)
        {
          unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 == -1 || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
            v22 |= (unint64_t)(v36 & 0x7F) << v33;
            if (v36 < 0)
            {
              v33 += 7;
              BOOL v9 = v34++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_145;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_145:
        uint64_t v74 = 32;
LABEL_146:
        *(void *)(a1 + v74) = v22;
        continue;
      case 0xAu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 152;
        goto LABEL_125;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_125;
      case 0xCu:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + 208) |= 0x20u;
        while (2)
        {
          unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 == -1 || v40 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 1;
            v39 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              BOOL v9 = v38++ >= 9;
              if (v9)
              {
                uint64_t v39 = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v39 = 0;
        }
LABEL_150:
        BOOL v75 = v39 != 0;
        uint64_t v76 = 200;
        goto LABEL_175;
      case 0xDu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 96;
        goto LABEL_125;
      case 0xEu:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 208) |= 0x200u;
        while (2)
        {
          unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 == -1 || v45 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
            v44 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              BOOL v9 = v43++ >= 9;
              if (v9)
              {
                uint64_t v44 = 0;
                goto LABEL_154;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v44 = 0;
        }
LABEL_154:
        BOOL v75 = v44 != 0;
        uint64_t v76 = 204;
        goto LABEL_175;
      case 0xFu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 112;
        goto LABEL_125;
      case 0x10u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 120;
        goto LABEL_125;
      case 0x11u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 128;
        goto LABEL_125;
      case 0x12u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 136;
        goto LABEL_125;
      case 0x13u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 160;
        goto LABEL_125;
      case 0x14u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 168;
        goto LABEL_125;
      case 0x15u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 192;
        goto LABEL_125;
      case 0x16u:
        __int16 v47 = PBReaderReadData();
        if (v47) {
          sub_100326BA8(a1, v47);
        }

        continue;
      case 0x17u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 184;
        goto LABEL_125;
      case 0x18u:
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        *(_WORD *)(a1 + 208) |= 0x400u;
        while (2)
        {
          unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 == -1 || v51 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 1;
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              BOOL v9 = v49++ >= 9;
              if (v9)
              {
                uint64_t v50 = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v50 = 0;
        }
LABEL_158:
        BOOL v75 = v50 != 0;
        uint64_t v76 = 205;
        goto LABEL_175;
      case 0x19u:
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v55 = 0;
        *(_WORD *)(a1 + 208) |= 0x40u;
        while (2)
        {
          unint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v56 == -1 || v56 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 1;
            v55 |= (unint64_t)(v57 & 0x7F) << v53;
            if (v57 < 0)
            {
              v53 += 7;
              BOOL v9 = v54++ >= 9;
              if (v9)
              {
                uint64_t v55 = 0;
                goto LABEL_162;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v55 = 0;
        }
LABEL_162:
        BOOL v75 = v55 != 0;
        uint64_t v76 = 201;
        goto LABEL_175;
      case 0x1Au:
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        *(_WORD *)(a1 + 208) |= 0x100u;
        while (2)
        {
          unint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v61 == -1 || v61 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61 + 1;
            v60 |= (unint64_t)(v62 & 0x7F) << v58;
            if (v62 < 0)
            {
              v58 += 7;
              BOOL v9 = v59++ >= 9;
              if (v9)
              {
                uint64_t v60 = 0;
                goto LABEL_166;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v60 = 0;
        }
LABEL_166:
        BOOL v75 = v60 != 0;
        uint64_t v76 = 203;
        goto LABEL_175;
      case 0x1Bu:
        char v63 = 0;
        unsigned int v64 = 0;
        uint64_t v65 = 0;
        *(_WORD *)(a1 + 208) |= 0x80u;
        while (2)
        {
          unint64_t v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v66 == -1 || v66 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66 + 1;
            v65 |= (unint64_t)(v67 & 0x7F) << v63;
            if (v67 < 0)
            {
              v63 += 7;
              BOOL v9 = v64++ >= 9;
              if (v9)
              {
                uint64_t v65 = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v65 = 0;
        }
LABEL_170:
        BOOL v75 = v65 != 0;
        uint64_t v76 = 202;
        goto LABEL_175;
      case 0x1Cu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 80;
        goto LABEL_125;
      case 0x1Du:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 104;
        goto LABEL_125;
      case 0x1Eu:
        char v68 = 0;
        unsigned int v69 = 0;
        uint64_t v70 = 0;
        *(_WORD *)(a1 + 208) |= 0x800u;
        break;
      case 0x1Fu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 64;
LABEL_125:
        id v73 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v71 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v71 == -1 || v71 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v72 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v71);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71 + 1;
      v70 |= (unint64_t)(v72 & 0x7F) << v68;
      if ((v72 & 0x80) == 0) {
        goto LABEL_172;
      }
      v68 += 7;
      BOOL v9 = v69++ >= 9;
      if (v9)
      {
        uint64_t v70 = 0;
        goto LABEL_174;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_172:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v70 = 0;
    }
LABEL_174:
    BOOL v75 = v70 != 0;
    uint64_t v76 = 206;
LABEL_175:
    *(unsigned char *)(a1 + v76) = v75;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1003291D4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void sub_1003291EC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

void sub_100329204(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_10032921C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 152), a2);
  }
}

void sub_100329234(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

void sub_10032924C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 96), a2);
  }
}

void sub_100329264(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 112), a2);
  }
}

void sub_10032927C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 120), a2);
  }
}

void sub_100329294(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 128), a2);
  }
}

void sub_1003292AC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 136), a2);
  }
}

void sub_1003292C4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 160), a2);
  }
}

void sub_1003292DC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 168), a2);
  }
}

void sub_1003292F4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 192), a2);
  }
}

void sub_10032930C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 184), a2);
  }
}

void sub_100329324(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

void sub_10032933C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 104), a2);
  }
}

void sub_100329354(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 64), a2);
  }
}

uint64_t sub_10032936C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

uint64_t sub_100329380(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

void sub_1003296AC(void *a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = a1[4];
    *(_DWORD *)buf = 138543362;
    uint64_t v8 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[%{public}@] itms-services requests are not valid on this hardware and will be ignored", buf, 0xCu);
  }

  uint64_t v3 = a1[6];
  char v4 = +[NSString stringWithFormat:@"itms-services requests are not valid on this hardware and will be ignored: %@", a1[5]];
  unsigned int v5 = ASDErrorWithDescription();
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);
}

void sub_100329894(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    char v4 = [v3 processInfo];
    unsigned int v5 = [v4 bundleIdentifier];
    *(_DWORD *)buf = 138543618;
    char v16 = v3;
    __int16 v17 = 2114;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Status requested by %{public}@", buf, 0x16u);
  }
  uint64_t v6 = objc_alloc_init(ManagedAppStatusTask);
  objc_initWeak((id *)buf, v6);
  BOOL v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  uint64_t v11 = sub_100329A74;
  char v12 = &unk_1005229D0;
  objc_copyWeak(&v14, (id *)buf);
  id v13 = *(id *)(a1 + 40);
  [(ManagedAppStatusTask *)v6 setCompletionBlock:&v9];
  uint64_t v7 = sub_1002B2A3C();
  uint64_t v8 = (void *)v7;
  if (v7) {
    objc_msgSend(*(id *)(v7 + 8), "addOperation:", v6, v9, v10, v11, v12);
  }

  objc_destroyWeak(&v14);
  objc_destroyWeak((id *)buf);
}

void sub_100329A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100329A74(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v3, 48, 1);
  }
  id v5 = WeakRetained;
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void sub_100329B8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:ASDErrorDomain code:911 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100329CF4(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = [v3 processInfo];
    id v6 = [v5 bundleIdentifier];
    int v10 = 138543874;
    uint64_t v11 = v3;
    __int16 v12 = 2114;
    uint64_t v13 = v4;
    __int16 v14 = 2114;
    unint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ New Manifest Request: %{public}@ by %{public}@", (uint8_t *)&v10, 0x20u);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = +[NSError errorWithDomain:ASDErrorDomain code:500 userInfo:0];
  BOOL v9 = [*(id *)(a1 + 40) requestIdentifier];
  (*(void (**)(uint64_t, void *, void *))(v7 + 16))(v7, v8, v9);
}

void sub_100329F34(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = [v3 processInfo];
    id v6 = [v5 bundleIdentifier];
    int v12 = 138543874;
    uint64_t v13 = v3;
    __int16 v14 = 2114;
    uint64_t v15 = v4;
    __int16 v16 = 2114;
    __int16 v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ New VPP Request: %{public}@ by %{public}@", (uint8_t *)&v12, 0x20u);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = +[NSError errorWithDomain:ASDErrorDomain code:911 userInfo:0];
  BOOL v9 = [*(id *)(a1 + 40) bundleIdentifier];
  int v10 = [*(id *)(a1 + 40) itemIdentifier];
  uint64_t v11 = [*(id *)(a1 + 40) requestIdentifier];
  (*(void (**)(uint64_t, void *, void *, void *, void *))(v7 + 16))(v7, v8, v9, v10, v11);
}

void *sub_10032A12C(void *a1, uint64_t a2)
{
  if (a1)
  {
    a1 = +[IXPlaceholder placeholderForRemovableSystemAppWithBundleID:a1[5] client:1 installType:1 error:a2];
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_10032A178(uint64_t a1, void *a2)
{
  if (!a1)
  {
    id v4 = 0;
    goto LABEL_60;
  }
  if (*(void *)(a1 + 112) != 1)
  {
    id v6 = ASDLogHandleForCategory();
    uint64_t v7 = v6;
    os_signpost_id_t v8 = *(void *)(a1 + 8);
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, v8, "App::Placeholder/Configure", "", buf, 2u);
    }

    if (![*(id *)(a1 + 48) length] || !objc_msgSend(*(id *)(a1 + 40), "length")) {
      char v52 = {;
    }
      ASDErrorWithDescription();
      id v53 = (id)objc_claimAutoreleasedReturnValue();
LABEL_42:

      uint64_t v15 = v53;
      goto LABEL_43;
    }
    id v9 = objc_alloc((Class)IXPlaceholder);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 80);
    id v131 = 0;
    id v13 = [v9 initAppPlaceholderWithBundleName:v10 bundleID:v11 installType:v12 client:1 error:&v131];
    id v14 = v131;
    uint64_t v15 = v14;
    if (!v13)
    {
LABEL_43:
      id v5 = v15;
      id v4 = 0;
      id v53 = v5;
      goto LABEL_44;
    }
    id v130 = v14;
    id v4 = v13;
    uint64_t v16 = *(void *)(a1 + 120);
    id v133 = 0;
    unsigned int v17 = [v4 setMetadata:v16 error:&v133];
    id v18 = v133;
    if (!v17)
    {
      LOBYTE(v22) = 0;
LABEL_118:

      id v53 = v130;
      if (v22)
      {
        id v5 = 0;
LABEL_44:
        unsigned int v54 = ASDLogHandleForCategory();
        uint64_t v55 = v54;
        os_signpost_id_t v56 = *(void *)(a1 + 8);
        if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v54))
        {
          *(_WORD *)v142 = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v55, OS_SIGNPOST_INTERVAL_END, v56, "App::Placeholder/Configure", "", v142, 2u);
        }

        goto LABEL_48;
      }
      uint64_t v112 = ASDErrorDomain;
      if (v53)
      {
        v144[0] = NSUnderlyingErrorKey;
        *(void *)buf = v53;
        long long v113 = +[NSDictionary dictionaryWithObjects:buf forKeys:v144 count:1];
        char v52 = +[NSError errorWithDomain:v112 code:802 userInfo:v113];
      }
      else
      {
        char v52 = +[NSError errorWithDomain:ASDErrorDomain code:802 userInfo:0];
      }
      [v4 cancelForReason:v52 client:1 error:0];

      goto LABEL_42;
    }
    uint64_t v19 = *(void **)(a1 + 72);
    if (v19 && [v19 count])
    {
      id v20 = [objc_alloc((Class)IXPromisedInMemoryDictionary) initWithName:@"Entitlements" client:1 dictionary:*(void *)(a1 + 72)];
      if (([v4 setEntitlementsPromise:v20 error:&v130] & 1) == 0)
      {
        uint64_t v22 = ASDLogHandleForCategory();
        if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
        {
          id Property = objc_getProperty((id)a1, v67, 88, 1);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = Property;
          __int16 v140 = 2114;
          id v141 = v18;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v22, OS_LOG_TYPE_ERROR, "[%@] Failed to set placeholder entitlements: %{public}@", buf, 0x16u);
        }

        LOBYTE(v22) = 0;
        id v23 = v18;
        goto LABEL_117;
      }
    }
    id v21 = objc_alloc_init((Class)IXPlaceholderAttributes);
    id v20 = v21;
    if (*(void *)(a1 + 64)) {
      objc_msgSend(v21, "setCompanionBundleIdentifierForWatchApp:");
    }
    if (*(unsigned char *)(a1 + 19)) {
      [v20 setLaunchProhibited:1];
    }
    if (*(unsigned char *)(a1 + 16)) {
      [v20 setArcadeApp:1];
    }
    if (*(unsigned char *)(a1 + 20)) {
      [v20 setLsRequiresPostProcessing:1];
    }
    [v20 setUiDeviceFamily:*(void *)(a1 + 104)];
    id v132 = v18;
    LODWORD(v22) = [v4 setPlaceholderAttributes:v20 error:&v132];
    id v23 = v132;

    if (!v22)
    {
LABEL_117:

      id v18 = v23;
      goto LABEL_118;
    }
    if (!*(unsigned char *)(a1 + 18))
    {
      id v68 = 0;
LABEL_92:
      id v86 = ASDLogHandleForCategory();
      id v87 = v86;
      os_signpost_id_t v88 = *(void *)(a1 + 8);
      if (v88 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v86))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_INTERVAL_BEGIN, v88, "App::Placeholder/Artwork", "", buf, 2u);
      }

      if (*(void *)(a1 + 24))
      {
        SEL v89 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
        {
          id v91 = objc_getProperty((id)a1, v90, 88, 1);
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v91;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_INFO, "[%@] Using supplied artwork data", buf, 0xCu);
        }

        id v92 = [objc_alloc((Class)IXPromisedInMemoryData) initWithName:@"Artwork" client:1 data:*(void *)(a1 + 24)];
      }
      else
      {
        uint64_t v93 = *(void *)(a1 + 32);
        id v94 = ASDLogHandleForCategory();
        uint64_t v95 = v94;
        if (!v93)
        {
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            id v119 = objc_getProperty((id)a1, v109, 88, 1);
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v119;
            _os_log_error_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "[%@] Artwork was neither provided, nor a location to load it from", buf, 0xCu);
          }
          uint64_t v101 = 0;
          goto LABEL_112;
        }
        if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
        {
          id v97 = objc_getProperty((id)a1, v96, 88, 1);
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v97;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "[%@] Requesting placeholder artwork", buf, 0xCu);
        }

        v98 = *(void **)(a1 + 32);
        id v100 = objc_getProperty((id)a1, v99, 88, 1);
        sub_10032B0FC((uint64_t)PlaceholderBuilder, v98, v100, *(unsigned __int8 *)(a1 + 17));
        id v92 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v101 = v92;
      if (!v92) {
        goto LABEL_113;
      }
      id v102 = v68;
      id v103 = v23;
      id v138 = v102;
      unsigned __int8 v104 = [v4 setIconPromise:v92 error:&v138];
      id v105 = v138;

      if (v104)
      {
        id v106 = v105;
        id v23 = v103;
        id v68 = v106;
        goto LABEL_113;
      }
      uint64_t v95 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
      {
        id v116 = objc_getProperty((id)a1, v107, 88, 1);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v116;
        __int16 v140 = 2114;
        id v141 = v105;
        _os_log_error_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "[%@] Non-fatal error occurred when setting placeholder artwork: %{public}@", buf, 0x16u);
      }
      id v108 = v105;
      id v23 = v103;
      id v68 = v108;
LABEL_112:

LABEL_113:
      long long v110 = ASDLogHandleForCategory();
      uint64_t v22 = (uint64_t)v110;
      os_signpost_id_t v111 = *(void *)(a1 + 8);
      if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v110))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, (os_log_t)v22, OS_SIGNPOST_INTERVAL_END, v111, "App::Placeholder/Artwork", "", buf, 2u);
      }

      buf[0] = 1;
      LOBYTE(v22) = buf[0];
      goto LABEL_117;
    }
    id v126 = v23;
    id v24 = v4;
    char v25 = sub_10032B3D0();

    if (v25)
    {
      id v122 = v20;
      id v26 = objc_alloc_init((Class)IXPlaceholderAttributes);
      [v26 setBundleVersion:*(void *)(a1 + 56)];
      *(void *)v142 = @"NSExtensionPointIdentifier";
      unint64_t v27 = sub_10032B3D0();
      CFStringRef v143 = @"NSExtensionPrincipalClass";
      v144[0] = v27;
      v144[1] = @"iMessageExtension";
      char v28 = +[NSDictionary dictionaryWithObjects:v144 forKeys:v142 count:2];
      [v26 setExtensionDictionary:v28];

      uint64_t v29 = [*(id *)(a1 + 40) stringByAppendingPathExtension:@"iMessageExtension"];
      id v30 = objc_alloc((Class)IXPlaceholder);
      id v138 = 0;
      v125 = (void *)v29;
      id v123 = v24;
      id v31 = [v30 initPlugInPlaceholderWithBundleName:@"iMessageExtension" bundleID:v29 parentPlaceholder:v24 client:1 error:&v138];
      id v32 = v138;
      char v33 = v32;
      if (!v31
        || (id v137 = v32,
            unsigned __int8 v34 = [v31 setPlaceholderAttributes:v26 error:&v137],
            id v35 = v137,
            v33,
            char v33 = v35,
            (v34 & 1) == 0))
      {
        char v36 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          id v115 = objc_getProperty((id)a1, v37, 88, 1);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v115;
          __int16 v140 = 2114;
          id v141 = v33;
          _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "[%@] Failed to set placeholder attributes: %{public}@", buf, 0x16u);
        }
      }
      unsigned int v38 = ASDLogHandleForCategory();
      uint64_t v39 = v38;
      os_signpost_id_t v40 = *(void *)(a1 + 8);
      if (v40 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_INTERVAL_BEGIN, v40, "App::Placeholder/Extension/Artwork", "", buf, 2u);
      }
      v124 = v26;

      char v41 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        id v43 = objc_getProperty((id)a1, v42, 88, 1);
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v43;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "[%@] Requesting extension artwork", buf, 0xCu);
      }

      uint64_t v44 = *(void **)(a1 + 96);
      id v46 = objc_getProperty((id)a1, v45, 88, 1);
      __int16 v47 = sub_10032B0FC((uint64_t)PlaceholderBuilder, v44, v46, *(unsigned __int8 *)(a1 + 17));
      if (v47)
      {
        id v136 = 0;
        unsigned __int8 v48 = [v31 setIconPromise:v47 error:&v136];
        id v49 = v136;
        if ((v48 & 1) == 0)
        {
          uint64_t v50 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            id v120 = objc_getProperty((id)a1, v51, 88, 1);
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v120;
            __int16 v140 = 2114;
            id v141 = v49;
            _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "[%@] Non-fatal error occurred when setting extension artwork: %{public}@", buf, 0x16u);
          }
        }
      }
      else
      {
        id v49 = 0;
      }
      unint64_t v71 = ASDLogHandleForCategory();
      char v72 = v71;
      os_signpost_id_t v73 = *(void *)(a1 + 8);
      if (v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v71))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v72, OS_SIGNPOST_INTERVAL_END, v73, "App::Placeholder/Extension/Artwork", "", buf, 2u);
      }

      id v135 = v33;
      unsigned __int8 v74 = [v31 setConfigurationCompleteWithError:&v135];
      id v69 = v135;

      if ((v74 & 1) == 0)
      {
        BOOL v75 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          id v117 = objc_getProperty((id)a1, v76, 88, 1);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v117;
          __int16 v140 = 2114;
          id v141 = v69;
          _os_log_error_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "[%@] Failed complete placeholder configuration: %{public}@", buf, 0x16u);
        }
      }
      if (v69)
      {
        uint64_t v77 = +[NSError errorWithDomain:ASDErrorDomain code:802 userInfo:0];
        id v134 = v49;
        unsigned __int8 v78 = [v31 cancelForReason:v77 client:1 error:&v134];
        id v70 = v134;

        id v20 = v122;
        if ((v78 & 1) == 0)
        {
          id v79 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
          {
            id v121 = objc_getProperty((id)a1, v80, 88, 1);
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v121;
            __int16 v140 = 2114;
            id v141 = v70;
            _os_log_error_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "[%@] Non-fatal error occurred when canceling failed placeholder: %{public}@", buf, 0x16u);
          }
        }
        id v31 = 0;
        id v24 = v123;
      }
      else
      {
        id v70 = v49;
        id v20 = v122;
        id v24 = v123;
      }
    }
    else
    {
      id v69 = 0;
      id v70 = 0;
      id v31 = 0;
    }
    id v81 = v31;

    if (v81)
    {
      v144[0] = v81;
      id v82 = +[NSArray arrayWithObjects:v144 count:1];
      *(void *)v142 = 0;
      unsigned __int8 v83 = [v24 setAppExtensionPlaceholderPromises:v82 error:v142];
      id v68 = *(id *)v142;

      if ((v83 & 1) == 0)
      {
        uint64_t v84 = ASDLogHandleForCategory();
        id v23 = v126;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          id v118 = objc_getProperty((id)a1, v85, 88, 1);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v118;
          __int16 v140 = 2114;
          id v141 = v68;
          _os_log_error_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "[%@] Non-fatal error occurred when setting extension placeholder: %{public}@", buf, 0x16u);
        }

        goto LABEL_91;
      }
    }
    else
    {
      id v68 = 0;
    }
    id v23 = v126;
LABEL_91:

    goto LABEL_92;
  }
  v129 = 0;
  sub_10032A12C((void *)a1, (uint64_t)&v129);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = v129;
LABEL_48:
  id v57 = v5;
  id v128 = v57;
  unsigned __int8 v58 = [v4 setConfigurationCompleteWithError:&v128];
  id v59 = v128;

  if ((v58 & 1) == 0)
  {
    uint64_t v60 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      uint64_t v65 = *(void *)(a1 + 88);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v65;
      __int16 v140 = 2114;
      id v141 = v59;
      _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "[%@] Placeholder configuration could not be completed: %{public}@", buf, 0x16u);
    }

    id v127 = 0;
    unsigned __int8 v61 = [v4 cancelForReason:v59 client:1 error:&v127];
    id v62 = v127;
    if ((v61 & 1) == 0)
    {
      char v63 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        uint64_t v66 = *(void *)(a1 + 88);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v66;
        __int16 v140 = 2114;
        id v141 = v62;
        _os_log_error_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "[%@] Error occurred when cancelling placeholder: %{public}@", buf, 0x16u);
      }
    }
    id v4 = 0;
  }
  if (a2 && !v4) {
    *a2 = v59;
  }

LABEL_60:
  return v4;
}

id sub_10032B0FC(uint64_t a1, void *a2, void *a3, int a4)
{
  id v6 = a2;
  id v7 = a3;
  self;
  if (v6)
  {
    id v8 = [objc_alloc((Class)IXPromisedTransferToPath) initWithName:@"artwork" client:1 diskSpaceNeeded:0];
    if ([v6 isFileURL])
    {
      [v8 setShouldCopy:1];
      [v8 setTransferPath:v6];
      [v8 setComplete:1];
    }
    else
    {
      id v9 = sub_1002A87E4();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10032B268;
      v11[3] = &unk_100528598;
      id v12 = v7;
      id v8 = v8;
      id v13 = v8;
      sub_1002A8878(v9, v6, a4, v11);
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_10032B268(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = ASDLogHandleForCategory();
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v12 = 138412290;
      uint64_t v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%@] Artwork request completed successfully", (uint8_t *)&v12, 0xCu);
    }

    [*(id *)(a1 + 40) setShouldCopy:0];
    [*(id *)(a1 + 40) setTransferPath:v6];
    [*(id *)(a1 + 40) setComplete:1];
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      id v15 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@] Artwork request failed with error: %{public}@", (uint8_t *)&v12, 0x16u);
    }

    [*(id *)(a1 + 40) cancelForReason:v7 client:1 error:0];
  }
}

id sub_10032B3D0()
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  id v0 = (void **)qword_1005B0F80;
  uint64_t v8 = qword_1005B0F80;
  if (!qword_1005B0F80)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10032BC74;
    v4[3] = &unk_1005243D0;
    v4[4] = &v5;
    sub_10032BC74((uint64_t)v4);
    id v0 = (void **)v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    dlerror();
    uint64_t v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v3);
  }
  uint64_t v1 = *v0;
  return v1;
}

void sub_10032B4C4(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 32);
  }
}

void sub_10032B4D8(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 40);
  }
}

void sub_10032B4EC(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 48);
  }
}

uint64_t sub_10032B500(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 80) = a2;
  }
  return result;
}

void sub_10032B50C(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 88);
  }
}

uint64_t sub_10032B520(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 112) = a2;
  }
  return result;
}

void sub_10032B52C(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 120);
  }
}

PlaceholderBuilder *sub_10032B5F0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = objc_alloc_init(PlaceholderBuilder);
    uint64_t v7 = sub_100424C14(a1);
    id v8 = sub_10026E91C(a1, @"source_type");
    id v9 = ASDLogHandleForCategory();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v55 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Skipping store metadata for non-store installation", buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v55 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Decoding persisted store metadata", buf, 0xCu);
      }

      uint64_t v11 = sub_1004253D0(a1, a3);
      if (!v11)
      {
        SEL v45 = 0;
LABEL_55:

        goto LABEL_56;
      }
      id v9 = v11;
      int v12 = sub_10026E95C(v5, @"variant_id");
      [v9 setVariantID:v12];

      if (v6) {
        objc_setProperty_atomic(v6, v13, v9, 120);
      }
    }

    unsigned __int8 v14 = sub_10026E7EC(a1, @"arcade");
    if (v6) {
      v6->_arcade = v14;
    }
    uint64_t v16 = [a1 valueForProperty:@"artwork_url"];
    if (v6) {
      objc_setProperty_atomic(v6, v15, v16, 32);
    }

    id v18 = [a1 valueForProperty:@"bundle_id"];
    if (v6) {
      objc_setProperty_atomic(v6, v17, v18, 40);
    }

    id v20 = [a1 valueForProperty:@"bundle_name"];
    if (v6) {
      objc_setProperty_atomic(v6, v19, v20, 48);
    }

    uint64_t v22 = [a1 valueForProperty:@"bundle_version"];
    if (v6) {
      objc_setProperty_atomic(v6, v21, v22, 56);
    }

    id v24 = [a1 valueForProperty:@"companion_bundle_id"];
    if (v6) {
      objc_setProperty_atomic(v6, v23, v24, 64);
    }

    char v25 = [a1 valueForProperty:@"has_messages_extension"];
    unsigned __int8 v26 = [v25 BOOLValue];
    if (v6) {
      v6->_hasMessagesExtension = v26;
    }

    unint64_t v27 = [a1 valueForProperty:@"launch_prohibited"];
    unsigned __int8 v28 = [v27 BOOLValue];
    if (v6) {
      v6->_launchProhibited = v28;
    }

    id v30 = [a1 valueForProperty:@"messages_artwork_url"];
    if (v6) {
      objc_setProperty_atomic(v6, v29, v30, 96);
    }

    id v31 = [a1 valueForProperty:@"source_type"];
    id v32 = [v31 integerValue];
    if (v6) {
      v6->_sourceType = (int64_t)v32;
    }

    if (sub_10026E91C(a1, @"post_processing_state"))
    {
      if (!v6)
      {
LABEL_61:
        if (sub_10026E91C(a1, @"restore_type")
          || sub_10026E91C(a1, @"update_type") == (id)1)
        {
          goto LABEL_42;
        }
        goto LABEL_63;
      }
      v6->_requiresPostProcessing = 1;
    }
    else if (!v6)
    {
      goto LABEL_61;
    }
    if (v6->_sourceType == 3) {
      v6->_enforceATS = 1;
    }
    v6->_installType = 1;
    if (sub_10026E91C(a1, @"restore_type"))
    {
      uint64_t v33 = 2;
      goto LABEL_41;
    }
    if (sub_10026E91C(a1, @"update_type") == (id)1)
    {
      uint64_t v33 = 5;
      goto LABEL_41;
    }
LABEL_63:
    if (sub_10026E91C(a1, @"automatic_type") == (id)2)
    {
      id v48 = objc_alloc((Class)LSApplicationRecord);
      if (v6)
      {
        id v50 = objc_msgSend(v48, "initWithBundleIdentifier:allowPlaceholder:error:", objc_getProperty(v6, v49, 40, 1), 0, 0);
        uint64_t v51 = 5;
        if (!v50) {
          uint64_t v51 = 3;
        }
        v6->_installType = v51;
      }
      else
      {
        id v50 = [v48 initWithBundleIdentifier:0 allowPlaceholder:0 error:0];
      }

      goto LABEL_42;
    }
    id v52 = sub_10026E91C(a1, @"automatic_type");
    if (!v6 || !v52)
    {
LABEL_42:
      id v35 = [a1 valueForProperty:@"placeholder_entitlements"];
      if (v35)
      {
        uint64_t v36 = objc_opt_class();
        uint64_t v37 = objc_opt_class();
        uint64_t v38 = objc_opt_class();
        uint64_t v39 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v36, v37, v38, objc_opt_class(), 0);
        id v53 = 0;
        os_signpost_id_t v40 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v39 fromData:v35 error:&v53];
        id v41 = v53;
        char v42 = ASDLogHandleForCategory();
        id v43 = v42;
        if (v40)
        {
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v55 = v7;
            __int16 v56 = 2114;
            id v57 = v40;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "[%@] Supplied placeholder entitlements: %{public}@", buf, 0x16u);
          }

          if (v6) {
            objc_setProperty_atomic(v6, v44, v40, 72);
          }
        }
        else
        {
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v55 = v7;
            __int16 v56 = 2114;
            id v57 = v41;
            _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "[%@] Failed to decode placeholder entitlements error: %{public}@", buf, 0x16u);
          }
        }
      }
      if (v6) {
        objc_setProperty_atomic(v6, v34, v7, 88);
      }
      SEL v45 = v6;

      goto LABEL_55;
    }
    uint64_t v33 = 3;
LABEL_41:
    v6->_installType = v33;
    goto LABEL_42;
  }
  SEL v45 = 0;
LABEL_56:

  return v45;
}

void *sub_10032BC74(uint64_t a1)
{
  v5[0] = 0;
  if (!qword_1005B0F88)
  {
    v5[1] = _NSConcreteStackBlock;
    v5[2] = 3221225472;
    v5[3] = sub_10032BDB4;
    v5[4] = &unk_100521BF0;
    v5[5] = v5;
    long long v6 = off_1005285B8;
    uint64_t v7 = 0;
    qword_1005B0F88 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1005B0F88;
    if (qword_1005B0F88)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1005B0F88;
LABEL_5:
  uint64_t result = dlsym(v2, "IMMessagePayloadProviderExtensionPointName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1005B0F80 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10032BDB4()
{
  uint64_t result = _sl_dlopen();
  qword_1005B0F88 = result;
  return result;
}

id sub_10032C1DC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  long long v6 = objc_opt_new();
  id v8 = v6;
  if (v6)
  {
    objc_setProperty_nonatomic_copy(v6, v7, v4, 8);
    id v9 = objc_alloc_init(_TtC9appstored6LogKey);
    objc_setProperty_nonatomic_copy(v8, v10, v9, 16);

    objc_setProperty_nonatomic_copy(v8, v11, v5, 24);
  }
  else
  {
  }
  return v8;
}

id sub_10032C5FC(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"dsid", [a2 longLongValue]);
    sub_10032C684(v2, v3);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_10032C684(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  v13[0] = @"adam_id";
  v13[1] = @"app_adam_id";
  void v13[2] = @"purchase_date";
  v13[3] = @"last_modified_date";
  void v13[4] = @"expiration_date";
  v13[5] = @"type";
  v13[6] = @"intro_offer_status";
  v13[7] = @"sub_family_id";
  v13[8] = @"auto_renew_status";
  id v5 = +[NSArray arrayWithObjects:v13 count:9];
  long long v6 = [a1 connection];
  uint64_t v7 = sub_1002FF548((uint64_t)IAPInfoIAPEntity, v6, v3);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10032CE90;
  v11[3] = &unk_100527420;
  id v12 = v4;
  id v8 = v4;
  [v7 enumeratePersistentIDsAndProperties:v5 usingBlock:v11];
  id v9 = [v8 copy];

  return v9;
}

id sub_10032C848(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if ([v5 count])
    {
      uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"dsid", [v6 longLongValue]);
      v12[0] = v7;
      id v8 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"adam_id" values:v5];
      v12[1] = v8;
      id v9 = +[NSArray arrayWithObjects:v12 count:2];
      SEL v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v9];

      a1 = sub_10032C684(a1, v10);
    }
    else
    {
      a1 = &__NSArray0__struct;
    }
  }

  return a1;
}

id sub_10032C9B4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if ([v5 count])
    {
      uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"dsid", [v6 longLongValue]);
      v12[0] = v7;
      id v8 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"app_adam_id" values:v5];
      v12[1] = v8;
      id v9 = +[NSArray arrayWithObjects:v12 count:2];
      SEL v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v9];

      a1 = sub_10032C684(a1, v10);
    }
    else
    {
      a1 = &__NSArray0__struct;
    }
  }

  return a1;
}

id sub_10032CB20(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_10032CBCC((uint64_t)IAPInfoDatabaseSession, a2);
    id v4 = sub_10032CC44(a1, v3);

    if (objc_opt_respondsToSelector())
    {
      [v4 doubleValue];
      id v5 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:");
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_10032CBCC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[NSString stringWithFormat:@"%@%@", @"LastUpdatedTimestampPropertyKey", v2];

  return v3;
}

id sub_10032CC44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  unsigned __int8 v14 = sub_1000181F8;
  id v15 = sub_100017CB8;
  id v16 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10032D09C;
  v8[3] = &unk_100523FE8;
  id v5 = v3;
  id v9 = v5;
  SEL v10 = &v11;
  sub_100009834(v4, @"SELECT value FROM iap_info_db_properties WHERE key = ?", v8);
  id v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_10032CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10032CD78(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_10032CE18((uint64_t)IAPInfoDatabaseSession, a2);
    uint64_t v4 = sub_10032CC44(a1, v3);

    if (v4)
    {
      id v5 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v4 intValue]);
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_10032CE18(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[NSString stringWithFormat:@"%@%@", @"ServerRevisionPropertyKey", v2];

  return v3;
}

void sub_10032CE90(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v17 = objc_alloc_init((Class)ASDMutableIAPInfo);
  id v5 = [v4 objectForKeyedSubscript:@"adam_id"];
  [v17 setAdamId:v5];

  id v6 = [v4 objectForKeyedSubscript:@"app_adam_id"];
  [v17 setAppAdamId:v6];

  uint64_t v7 = [v4 objectForKeyedSubscript:@"purchase_date"];
  [v17 setPurchaseDate:v7];

  id v8 = [v4 objectForKeyedSubscript:@"last_modified_date"];
  [v17 setLastModifiedDate:v8];

  id v9 = [v4 objectForKeyedSubscript:@"expiration_date"];
  [v17 setExpirationDate:v9];

  SEL v10 = [v4 objectForKeyedSubscript:@"type"];
  objc_msgSend(v17, "setType:", objc_msgSend(v10, "unsignedCharValue"));

  uint64_t v11 = [v4 objectForKeyedSubscript:@"intro_offer_status"];
  unsigned int v12 = [v11 intValue];

  [v17 setHasUsedFreeOffer:v12 & 1];
  [v17 setHasUsedIntroPricingOffer:(v12 >> 1) & 1];
  uint64_t v13 = [v4 objectForKeyedSubscript:@"sub_family_id"];
  [v17 setSubscriptionFamilyId:v13];

  unsigned __int8 v14 = [v4 objectForKeyedSubscript:@"auto_renew_status"];

  objc_msgSend(v17, "setAutoRenewStatus:", objc_msgSend(v14, "BOOLValue"));
  id v15 = *(void **)(a1 + 32);
  id v16 = [v17 copy];
  [v15 addObject:v16];
}

void sub_10032D09C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10032D140;
  v5[3] = &unk_100523438;
  v5[4] = *(void *)(a1 + 40);
  sub_1000096CC((uint64_t)v4, v5);
}

void sub_10032D140(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003D6084(a2, 0);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10032D234()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10032D2D8;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0F98 != -1) {
    dispatch_once(&qword_1005B0F98, block);
  }
  id v0 = (void *)qword_1005B0F90;
  return v0;
}

void sub_10032D2D8(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005B0F90;
  qword_1005B0F90 = (uint64_t)v1;
}

void sub_10032D310(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10032D38C;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10032D38C(uint64_t a1)
{
  id v2 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v3 = +[LaunchHistory shared];
  uint64_t v4 = [v3 syncLaunchesWithLogKey:v2];

  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v4 != 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%@] synced with result: %{BOOL}d", buf, 0x12u);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = v2;
  if (v6)
  {
    +[NSMutableSet set];
    uint64_t v39 = _NSConcreteStackBlock;
    uint64_t v40 = 3221225472;
    id v41 = sub_10032DC5C;
    char v42 = &unk_100528628;
    uint64_t v43 = v6;
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    id v44 = v8;
    +[ApplicationProxy enumerateApplicationsOfType:0 usingBlock:&v39];
    uint64_t v45 = 0;
    id v46 = &v45;
    uint64_t v47 = 0x3032000000;
    id v48 = sub_100018208;
    id v49 = sub_100017CC0;
    id v50 = 0;
    id v9 = +[NSMutableArray array];
    SEL v10 = [SQLiteQueryDescriptor alloc];
    uint64_t v11 = objc_opt_class();
    uint64_t v12 = objc_opt_class();
    uint64_t v13 = sub_1002FF380(v10, v11, v12);
    CFStringRef v56 = @"ASC";
    id v15 = +[NSArray arrayWithObjects:&v56 count:1];
    if (v13) {
      objc_setProperty_nonatomic_copy(v13, v14, v15, 40);
    }

    CFStringRef v55 = @"timestamp";
    id v17 = +[NSArray arrayWithObjects:&v55 count:1];
    if (v13) {
      objc_setProperty_nonatomic_copy(v13, v16, v17, 48);
    }

    id v18 = sub_10038F000();
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10032DABC;
    id v52 = &unk_100528600;
    uint64_t v19 = v13;
    *(void *)&long long v53 = v19;
    id v20 = v9;
    *((void *)&v53 + 1) = v20;
    unsigned int v54 = &v45;
    [v18 readUsingSession:buf];

    id v21 = objc_alloc_init(AppTelemetryLaunchDetails);
    id v23 = v21;
    if (v21)
    {
      objc_setProperty_atomic_copy(v21, v22, v20, 16);
      objc_setProperty_atomic_copy(v23, v24, (id)v46[5], 8);
    }

    _Block_object_dispose(&v45, 8);
    if (v23) {
      id Property = objc_getProperty(v23, v25, 8, 1);
    }
    else {
      id Property = 0;
    }
    unint64_t v27 = sub_10032D90C((uint64_t)AppTelemetry, Property);
    unsigned __int8 v28 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      if (v23) {
        id v30 = objc_getProperty(v23, v29, 8, 1);
      }
      else {
        id v30 = 0;
      }
      id v31 = sub_1002826D4(v30);
      id v32 = [v8 count];
      *(_DWORD *)buf = 138413058;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v31;
      *(_WORD *)&buf[22] = 2114;
      id v52 = v27;
      LOWORD(v53) = 2048;
      *(void *)((char *)&v53 + 2) = v32;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[%@] AppTelemetry report with oldest entry date: %{public}@ dbAge: %{public}@ qualified app count: %ld", buf, 0x2Au);
    }
    uint64_t v33 = sub_1002D7CE8();
    unsigned __int8 v34 = sub_1002D8B44((uint64_t)v33);

    if (v23)
    {
      id v36 = objc_getProperty(v23, v35, 16, 1);
      sub_10032DD3C(v36, v34, v8, v27, 1, @"com.apple.appBundleUtilization", v7);
      id v38 = objc_getProperty(v23, v37, 16, 1);
    }
    else
    {
      sub_10032DD3C(0, v34, v8, v27, 1, @"com.apple.appBundleUtilization", v7);
      id v38 = 0;
    }
    sub_10032DD3C(v38, v34, v8, v27, 0, @"com.apple.appBundleUtilizationAppOnly", v7);
  }
}

void sub_10032D8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_UNKNOWN **sub_10032D90C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[NSDate now];
  [v3 timeIntervalSinceReferenceDate];
  double v5 = v4;
  [v2 timeIntervalSinceReferenceDate];
  double v7 = v6;

  double v8 = v5 - v7;
  if (v8 <= 0.0)
  {
    uint64_t v11 = &off_10054C8B8;
  }
  else
  {
    double v9 = v8 / 86400.0;
    double v10 = ceil(v8 / 86400.0);
    if (v8 / 86400.0 < 1.0) {
      double v9 = v10;
    }
    uint64_t v11 = +[NSNumber numberWithInteger:(uint64_t)v9];
  }
  return v11;
}

id sub_10032D9CC(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 32);
  v7[0] = @"dbAge";
  v7[1] = @"updateType";
  uint64_t v9 = *(void *)(a1 + 48);
  long long v8 = v2;
  v7[2] = @"daysSinceUpdate";
  v7[3] = @"usedSinceUpdate";
  uint64_t v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
  void v7[4] = @"daysSinceUse";
  uint64_t v4 = *(void *)(a1 + 56);
  double v10 = v3;
  uint64_t v11 = v4;
  double v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:v7 count:5];

  return v5;
}

void sub_10032DABC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [SQLiteQuery alloc];
  double v5 = [v3 connection];

  id v6 = [(SQLiteQuery *)v4 initOnConnection:v5 descriptor:*(void *)(a1 + 32)];
  double v7 = +[LaunchEventEntity defaultProperties];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10032DBBC;
  v10[3] = &unk_1005273D0;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  id v11 = v8;
  uint64_t v12 = v9;
  [v6 enumerateMemoryEntitiesWithProperties:v7 usingBlock:v10];
}

void sub_10032DBBC(uint64_t a1, void *a2)
{
  id v8 = a2;
  [*(id *)(a1 + 32) addObject:v8];
  id v3 = sub_1003ACE80(v8);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

    if (!v4)
    {
      uint64_t v5 = sub_1003ACE80(v8);
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
      double v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
  }
}

void sub_10032DC5C(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = [v10 bundleID];
  uint64_t v4 = v10;
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = v10;
    double v7 = v6;
    if (v6
      && v5
      && [v6 isStoreOriginated]
      && (![v7 hasMIDBasedSINF] || (objc_msgSend(v7, "isAppClip") & 1) != 0))
    {
      unsigned int v8 = [v7 isInstalled];

      uint64_t v4 = v10;
      if (!v8) {
        goto LABEL_11;
      }
      uint64_t v9 = *(void **)(a1 + 40);
      id v3 = [v7 bundleID];
      [v9 addObject:v3];
    }
    else
    {
    }
    uint64_t v4 = v10;
  }
LABEL_11:
}

void sub_10032DD3C(void *a1, void *a2, void *a3, void *a4, char a5, void *a6, void *a7)
{
  id v13 = a1;
  id v58 = a2;
  id v14 = a3;
  id v60 = a4;
  id v59 = a6;
  id v62 = a7;
  unsigned int v64 = +[NSMutableDictionary dictionary];
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  id obj = v13;
  id v15 = [obj countByEnumeratingWithState:&v72 objects:v96 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v73;
    do
    {
      for (i = 0; i != v16; i = (char *)i + 1)
      {
        if (*(void *)v73 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = *(void **)(*((void *)&v72 + 1) + 8 * i);
        if ((a5 & 1) != 0
          || (sub_1003ACB08(*(void **)(*((void *)&v72 + 1) + 8 * i)) & 1) == 0)
        {
          if (sub_1003ACB08(v19)) {
            sub_1003ACB70(v19);
          }
          else {
          id v20 = sub_1003AC978(v19);
          }
          if (v20)
          {
            id v21 = sub_1003ACA24(v19);
            if (v21 && [v14 containsObject:v20])
            {
              uint64_t v22 = [v64 objectForKeyedSubscript:v20];

              if (!v22)
              {
                id v21 = sub_1003ACA24(v19);
                [v64 setObject:v21 forKeyedSubscript:v20];
                goto LABEL_16;
              }
            }
            else
            {
LABEL_16:
            }
          }

          continue;
        }
      }
      id v16 = [obj countByEnumeratingWithState:&v72 objects:v96 count:16];
    }
    while (v16);
  }

  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id v63 = v14;
  id v23 = [v63 countByEnumeratingWithState:&v68 objects:v95 count:16];
  char v25 = v58;
  if (v23)
  {
    id v26 = v23;
    uint64_t v27 = *(void *)v69;
    *(void *)&long long v24 = 138413826;
    long long v56 = v24;
    uint64_t v57 = *(void *)v69;
    do
    {
      unsigned __int8 v28 = 0;
      id v61 = v26;
      do
      {
        if (*(void *)v69 != v27) {
          objc_enumerationMutation(v63);
        }
        uint64_t v29 = *(void **)(*((void *)&v68 + 1) + 8 * (void)v28);
        id v30 = objc_msgSend(v25, "objectForKeyedSubscript:", v29, v56);

        if (v30)
        {
          id v31 = [v25 objectForKeyedSubscript:v29];
          id v32 = [v31 installs];
          uint64_t v33 = [v32 lastObject];

          if (!v33) {
            goto LABEL_36;
          }
          id v34 = *(id *)(v33 + 8);
          sub_1003BF960((const __CFString *)v33);
          id v35 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v36 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v29 allowPlaceholder:0 error:0];
          if (!v36)
          {
LABEL_36:
            id v41 = 0;
            id v35 = 0;
            id v34 = 0;
LABEL_43:

            goto LABEL_44;
          }
          uint64_t v33 = (uint64_t)v36;
          sub_100428354(v36);
          id v34 = (id)objc_claimAutoreleasedReturnValue();
          id v35 = @"unknown";
        }

        if (v34) {
          BOOL v37 = v35 == 0;
        }
        else {
          BOOL v37 = 1;
        }
        if (!v37)
        {
          id v38 = sub_10032D90C((uint64_t)AppTelemetry, v34);
          uint64_t v39 = [v64 objectForKeyedSubscript:v29];
          if (v39)
          {
            sub_10032D90C((uint64_t)AppTelemetry, v39);
            uint64_t v40 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            uint64_t v40 = &off_10054C8D0;
          }
          [v34 timeIntervalSinceDate:v39];
          double v43 = v42;
          BOOL v44 = v42 < 0.0;
          id v45 = v59;
          id v46 = v38;
          uint64_t v47 = v35;
          id v48 = v40;
          id v49 = v60;
          id v66 = v62;
          uint64_t v76 = _NSConcreteStackBlock;
          uint64_t v77 = 3221225472;
          unsigned __int8 v78 = sub_10032D9CC;
          id v79 = &unk_1005285D8;
          id v50 = v49;
          id v80 = v50;
          id v35 = v47;
          id v81 = v35;
          id v41 = (__CFString *)v46;
          id v82 = v41;
          BOOL v84 = v44;
          uint64_t v51 = v48;
          id v83 = v51;
          AnalyticsSendEventLazy();
          id v52 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v56;
            id v86 = v62;
            __int16 v87 = 2114;
            id v88 = v59;
            __int16 v89 = 2112;
            id v90 = v41;
            __int16 v91 = 2112;
            id v92 = v35;
            __int16 v93 = 1024;
            *(_DWORD *)id v94 = v43 < 0.0;
            *(_WORD *)&v94[4] = 2112;
            *(void *)&v94[6] = v51;
            *(_WORD *)&v94[14] = 2112;
            *(void *)&v94[16] = v60;
            _os_log_debug_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "[%@] [%{public}@] { daysSinceUpdate: %@, updateType: %@ usedSinceUpdate: %{BOOL}d, daysSinceUse: %@, dbAge: %@ }", buf, 0x44u);
          }

          long long v53 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
          {
            sub_1002826D4(v34);
            char v67 = (__CFString *)objc_claimAutoreleasedReturnValue();
            unsigned int v54 = [v64 objectForKeyedSubscript:v29];
            CFStringRef v55 = sub_1002826D4(v54);
            *(_DWORD *)buf = v56;
            id v86 = v62;
            __int16 v87 = 2112;
            id v88 = v29;
            __int16 v89 = 2112;
            id v90 = v67;
            __int16 v91 = 2112;
            id v92 = v41;
            __int16 v93 = 2112;
            *(void *)id v94 = v51;
            *(_WORD *)&v94[8] = 2112;
            *(void *)&v94[10] = v55;
            *(_WORD *)&v94[18] = 2112;
            *(void *)&v94[20] = v35;
            _os_log_debug_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "[%@] [%@] lastUpdateDate: %@ daysSinceUpdate: %@ daysSinceLaunch: %@ lastLaunch: %@ updateType: %@", buf, 0x48u);
          }
          uint64_t v27 = v57;
          char v25 = v58;
          id v26 = v61;
          goto LABEL_43;
        }
LABEL_44:

        unsigned __int8 v28 = (char *)v28 + 1;
      }
      while (v26 != v28);
      id v26 = [v63 countByEnumeratingWithState:&v68 objects:v95 count:16];
    }
    while (v26);
  }
}

BOOL sub_10032E444(void *a1)
{
  if (!a1) {
    return 0;
  }
  long long v2 = [a1 originalRequest];
  if (!v2)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v11 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "(AMSDialogResult) No original request available, assuming the request was canceled", v11, 2u);
    }
    BOOL v6 = 1;
    goto LABEL_16;
  }
  id v3 = [a1 selectedActionIdentifier];
  if (!v3)
  {
    uint64_t v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "(AMSDialogResult) No selected action identifier available, assuming the request was canceled", buf, 2u);
    }
    goto LABEL_14;
  }
  uint64_t v4 = [v2 locateActionWithIdentifier:v3];
  if (!v4)
  {
    double v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "(AMSDialogResult) No selected action not found, assuming the request was canceled", v9, 2u);
    }

    uint64_t v5 = 0;
LABEL_14:
    BOOL v6 = 1;
    goto LABEL_15;
  }
  uint64_t v5 = v4;
  BOOL v6 = [v4 style] == (id)2;
LABEL_15:

LABEL_16:
  return v6;
}

uint64_t sub_10032E5C8(uint64_t result)
{
  if (result)
  {
    id v1 = *(sqlite3_stmt **)(result + 16);
    if (v1)
    {
      return sqlite3_stmt_readonly(v1) != 0;
    }
    else
    {
      +[NSException raise:NSInternalInconsistencyException format:@"Statement already finalized"];
      return 1;
    }
  }
  return result;
}

Bulletin *sub_10032ECA0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [v2 content];

  uint64_t v4 = [v3 userInfo];

  uint64_t v5 = [Bulletin alloc];
  id v6 = v4;
  if (v5)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      double v7 = [(Bulletin *)v5 init];
      if (!v7) {
        goto LABEL_20;
      }
      unsigned int v8 = [v6 objectForKey:@"actiontitle"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v9 = (NSString *)[v8 copy];
        actionButtonTitle = v7->_actionButtonTitle;
        v7->_actionButtonTitle = v9;
      }
      id v11 = [v6 objectForKey:@"actionurl"];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v12 = (NSURL *)[objc_alloc((Class)NSURL) initWithString:v11];
        actionButtonURL = v7->_actionButtonURL;
        v7->_actionButtonURL = v12;
      }
      id v14 = [v6 objectForKey:@"date"];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v15 = (NSDate *)[v14 copy];
        creationDate = v7->_creationDate;
        v7->_creationDate = v15;
      }
      uint64_t v17 = [v6 objectForKey:@"msg"];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v18 = (NSString *)[v17 copy];
        message = v7->_message;
        v7->_message = v18;
      }
      id v20 = [v6 objectForKey:@"rid"];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v21 = (NSString *)[v20 copy];
        recordID = v7->_recordID;
        v7->_recordID = v21;
      }
      id v23 = [v6 objectForKey:@"title"];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v24 = (NSString *)[v23 copy];
        title = v7->_title;
        v7->_title = v24;
      }
      uint64_t v5 = [v6 objectForKey:@"url"];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v26 = (NSURL *)[objc_alloc((Class)NSURL) initWithString:v5];
        launchURL = v7->_launchURL;
        v7->_launchURL = v26;
      }
    }
    else
    {
      double v7 = 0;
    }
  }
  else
  {
    double v7 = 0;
  }
LABEL_20:

  return v7;
}

id sub_10032EF98(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = objc_alloc_init((Class)self);
  unsigned int v8 = v6;
  if (v6)
  {
    objc_setProperty_nonatomic_copy(v6, v7, v5, 48);
    objc_setProperty_nonatomic_copy(v8, v9, v4, 64);
  }

  return v8;
}

void sub_10032F024(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = [v3 actionIdentifier];
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      id v28 = (id)objc_opt_class();
      __int16 v29 = 2114;
      id v30 = v5;
      id v7 = v28;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Handling notification response with actionId: %{public}@", buf, 0x16u);
    }
    if ([v5 isEqualToString:UNNotificationDefaultActionIdentifier])
    {
      uint64_t v8 = 24;
    }
    else
    {
      if ([v5 isEqualToString:UNNotificationDismissActionIdentifier])
      {
LABEL_17:

        goto LABEL_18;
      }
      uint64_t v8 = 16;
    }
    id v9 = *(id *)(a1 + v8);
    if (v9)
    {
      id v10 = v9;
      v25[0] = FBSOpenApplicationOptionKeyPromptUnlockDevice;
      v25[1] = FBSOpenApplicationOptionKeyUnlockDevice;
      v26[0] = &__kCFBooleanTrue;
      v26[1] = &__kCFBooleanTrue;
      v25[2] = FBSOpenApplicationOptionKeyLaunchOrigin;
      v26[2] = @"appstored";
      id v11 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:3];
      uint64_t v12 = [v4 notification];
      id v13 = [v12 request];
      id v14 = [v13 identifier];
      unsigned int v15 = [v14 isEqualToString:@"com.apple.appstored.authenticate.watch"];

      id v16 = +[LSApplicationWorkspace defaultWorkspace];
      uint64_t v17 = v16;
      if (v15)
      {
        uint64_t v24 = 0;
        id v18 = (id *)&v24;
        [v16 openSensitiveURL:v10 withOptions:v11 error:&v24];
      }
      else
      {
        uint64_t v23 = 0;
        id v18 = (id *)&v23;
        [v16 openURL:v10 withOptions:v11 error:&v23];
      }
      id v19 = *v18;

      if (v19)
      {
        id v20 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          id v21 = objc_opt_class();
          *(_DWORD *)buf = 138543618;
          id v28 = v21;
          __int16 v29 = 2114;
          id v30 = v19;
          id v22 = v21;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[%{public}@]: Error opening URL. Error: %{public}@", buf, 0x16u);
        }
      }
    }
    goto LABEL_17;
  }
LABEL_18:
}

uint64_t sub_10032F310(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)UNMutableNotificationContent);
    [v2 setTitle:*(void *)(v1 + 64)];
    [v2 setBody:*(void *)(v1 + 48)];
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    id v4 = v3;
    uint64_t v5 = *(void *)(v1 + 8);
    if (v5) {
      [v3 setObject:v5 forKey:@"actiontitle"];
    }
    id v6 = *(void **)(v1 + 16);
    if (v6)
    {
      id v7 = [v6 absoluteString];
      [v4 setObject:v7 forKey:@"actionurl"];
    }
    uint64_t v8 = *(void *)(v1 + 32);
    if (v8) {
      [v4 setObject:v8 forKey:@"date"];
    }
    id v9 = *(void **)(v1 + 24);
    if (v9)
    {
      id v10 = [v9 absoluteString];
      [v4 setObject:v10 forKey:@"url"];
    }
    uint64_t v11 = *(void *)(v1 + 48);
    if (v11) {
      [v4 setObject:v11 forKey:@"msg"];
    }
    uint64_t v12 = *(void *)(v1 + 56);
    if (v12) {
      [v4 setObject:v12 forKey:@"rid"];
    }
    uint64_t v13 = *(void *)(v1 + 64);
    if (v13) {
      [v4 setObject:v13 forKey:@"title"];
    }
    [v2 setUserInfo:v4];

    [v2 setCategoryIdentifier:@"asd-notification-default"];
    [v2 setShouldBackgroundDefaultAction:1];
    id v14 = *(id *)(v1 + 40);
    unsigned int v15 = v14;
    if (v14) {
      objc_msgSend(v2, "setInterruptionLevel:", objc_msgSend(v14, "unsignedIntegerValue"));
    }
    if (*(void *)(v1 + 72))
    {
      id v16 = +[UNNotificationIcon iconForApplicationIdentifier:](UNNotificationIcon, "iconForApplicationIdentifier:");
      [v2 setIcon:v16];

      if ([*(id *)(v1 + 72) isEqualToString:@"com.apple.Bridge"])
      {
        uint64_t v17 = ASDLocalizedString();
        [v2 setHeader:v17];
      }
      else
      {
        id v18 = objc_alloc((Class)LSApplicationRecord);
        uint64_t v19 = *(void *)(v1 + 72);
        id v27 = 0;
        id v20 = [v18 initWithBundleIdentifier:v19 allowPlaceholder:0 error:&v27];
        id v21 = v27;
        if (v21)
        {
          id v22 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = objc_opt_class();
            uint64_t v24 = *(void *)(v1 + 72);
            *(_DWORD *)buf = 138543874;
            __int16 v29 = v23;
            __int16 v30 = 2114;
            uint64_t v31 = v24;
            __int16 v32 = 2114;
            id v33 = v21;
            id v25 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[%{public}@]: Error looking up record for %{public}@: %{public}@", buf, 0x20u);
          }
        }
        else
        {
          id v22 = [v20 localizedName];
          [v2 setHeader:v22];
        }
      }
    }
    uint64_t v1 = +[UNNotificationRequest requestWithIdentifier:*(void *)(v1 + 56) content:v2 trigger:0];
  }
  return v1;
}

__CFString *sub_10032F778(uint64_t a1)
{
  if ((int)a1 > 20)
  {
    switch(a1)
    {
      case 0x15:
        id v2 = @"QOS_CLASS_DEFAULT";
        break;
      case 0x21:
        id v2 = @"QOS_CLASS_USER_INTERACTIVE";
        break;
      case 0x19:
        id v2 = @"QOS_CLASS_USER_INITIATED";
        break;
      default:
LABEL_26:
        id v2 = +[NSString stringWithFormat:@"Unknown Class: %u", a1];
        return v2;
    }
  }
  else if (a1)
  {
    if (a1 != 9)
    {
      if (a1 == 17)
      {
        id v2 = @"QOS_CLASS_UTILITY";
        return v2;
      }
      goto LABEL_26;
    }
    id v2 = @"QOS_CLASS_BACKGROUND";
  }
  else
  {
    id v2 = @"QOS_CLASS_UNSPECIFIED";
  }
  return v2;
}

id sub_10032FBDC(void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  id v5 = a3;
  id v6 = +[RBSProcessPredicate predicateMatchingBundleIdentifier:a2];
  id v7 = v5;
  v16.receiver = a1;
  v16.super_class = (Class)ProcessTerminator;
  id v8 = objc_msgSendSuper2(&v16, "init");
  if (v8)
  {
    id v9 = [objc_alloc((Class)NSConditionLock) initWithCondition:0];
    id v10 = (void *)*((void *)v8 + 1);
    *((void *)v8 + 1) = v9;

    id v11 = [objc_alloc((Class)RBSTerminateContext) initWithExplanation:v7];
    [v11 setMaximumTerminationResistance:30];
    id v12 = [objc_alloc((Class)RBSTerminationAssertion) initWithPredicate:v6 context:v11];
    uint64_t v13 = (void *)*((void *)v8 + 2);
    *((void *)v8 + 2) = v12;

    [*((id *)v8 + 2) addObserver:v8];
  }

  id v14 = v8;
  return v14;
}

uint64_t sub_10032FD60(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = *(void **)(a1 + 16);
  id v12 = 0;
  uint64_t v6 = (uint64_t)[v5 acquireWithError:&v12];
  id v7 = v12;
  if (v6)
  {
    if ([*(id *)(a1 + 8) lockWhenCondition:1 beforeDate:v4])
    {
      [*(id *)(a1 + 8) unlock];
      uint64_t v6 = 1;
      goto LABEL_8;
    }
    id v11 = v4;
    uint64_t v8 = ASDErrorWithUserInfoAndFormat();

    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v8 = ASDErrorWithUnderlyingErrorAndDescription();
  }
  id v7 = (id)v8;
LABEL_8:
  objc_msgSend(*(id *)(a1 + 16), "removeObserver:", a1, v11);
  [*(id *)(a1 + 16) invalidate];
  id v9 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  if (a2 && (v6 & 1) == 0) {
    *a2 = v7;
  }

  return v6;
}

id *sub_10032FF40(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)IAPInfoUpdateRequest;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_10032FFDC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!a1) {
    goto LABEL_33;
  }
  id Property = *(id *)(a1 + 16);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 8, 1);
  }
  id v6 = Property;
  id v7 = objc_msgSend(v6, "ams_DSID");

  if (!v7)
  {
    id v18 = sub_1001F5FCC(4, 0);
    v4[2](v4, 0, v18);

    goto LABEL_33;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  id v44 = 0;
  id v9 = sub_10030B9EC(v8, @"iap-daap/base-url", &v44);
  id v10 = v44;
  id v11 = v10;
  if (!v9)
  {
    id v14 = v10;
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  id v43 = v11;
  uint64_t v13 = sub_10030BE3C(v12, @"iap-daap/database-id", &off_10054C8E8, &v43);
  id v14 = v43;

  if (!v13)
  {

    goto LABEL_12;
  }
  unsigned int v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"databases/%ld/update", [v13 integerValue]);
  objc_super v16 = [v9 URLByAppendingPathComponent:v15];

  if (!v16)
  {
LABEL_12:
    uint64_t v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = objc_opt_class();
      *(_DWORD *)buf = 138412546;
      id v46 = v39;
      __int16 v47 = 2114;
      id v48 = v14;
      id v40 = v39;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%@]: Failed to construct request URL error: %{public}@", buf, 0x16u);
    }
    sub_1001F5FCC(2, (uint64_t)v14);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    objc_super v16 = 0;
    goto LABEL_15;
  }
  id v17 = 0;
LABEL_15:

  id v20 = v17;
  if (v16)
  {
    id v22 = [PurchaseHistoryUpdateDAAPRequestEncoder alloc];
    id v23 = *(id *)(a1 + 16);
    if (v23) {
      id v23 = objc_getProperty(v23, v21, 32, 1);
    }
    id v24 = v23;
    id v25 = sub_10022D1AC((id *)&v22->super.isa, v24);

    id v27 = sub_1003869E4((id *)[DAAPURLRequest alloc], v25, v16);
    id v28 = *(id *)(a1 + 16);
    if (v28) {
      id v28 = objc_getProperty(v28, v26, 8, 1);
    }
    id v30 = v28;
    if (v27) {
      objc_setProperty_atomic(v27, v29, v30, 24);
    }

    id v32 = *(id *)(a1 + 16);
    if (v32) {
      id v32 = objc_getProperty(v32, v31, 16, 1);
    }
    id v34 = v32;
    if (v27) {
      objc_setProperty_atomic(v27, v33, v34, 40);
    }

    id v36 = *(id *)(a1 + 16);
    if (v36) {
      id v36 = objc_getProperty(v36, v35, 24, 1);
    }
    id v38 = v36;
    if (v27) {
      objc_setProperty_atomic(v27, v37, v38, 48);
    }

    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_1003303CC;
    v41[3] = &unk_100523BB0;
    uint8_t v41[4] = a1;
    double v42 = v4;
    sub_100386A80((uint64_t)v27, v41);
  }
  else
  {
    id v25 = sub_1001F5FCC(2, (uint64_t)v20);
    v4[2](v4, 0, v25);
  }

LABEL_33:
}

void sub_1003303CC(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v5 = a3;
  uint64_t v6 = (uint64_t)v19;
  if (!v19)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = (uint64_t)v5;
    goto LABEL_5;
  }
  if ((char *)[v19 responseStatusCode] - 300 <= (char *)0xFFFFFFFFFFFFFF9BLL)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = 1;
    uint64_t v8 = 0;
LABEL_5:
    id v9 = sub_1001F5FCC(v6, v8);
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v9);
    goto LABEL_16;
  }
  id v10 = [v19 data];
  id v9 = v10;
  if (!v10)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    sub_1001F5FCC(0, 0);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v17 + 16))(v17, 0, v15);
    goto LABEL_15;
  }
  if (!*(void *)(a1 + 32))
  {
    uint64_t v16 = *(void *)(a1 + 40);
LABEL_14:
    id v18 = sub_1001F5FCC(0, 0);
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v18);

    id v15 = 0;
    goto LABEL_15;
  }
  id v11 = v10;
  uint64_t v12 = sub_100296A94((id *)[PurchaseHistoryUpdateDAAPResponseDecoder alloc], v11);

  sub_100296B0C((uint64_t)v12);
  if (v12) {
    id Property = objc_getProperty(v12, v13, 24, 1);
  }
  else {
    id Property = 0;
  }
  id v15 = Property;

  uint64_t v16 = *(void *)(a1 + 40);
  if (!v15) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, id, void))(v16 + 16))(v16, v15, 0);
LABEL_15:

LABEL_16:
}

id sub_1003305E0()
{
  self;
  id v0 = +[ACAccountStore ams_sharedAccountStore];
  uint64_t v1 = [v0 accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifieriTunesStore];

  id v2 = [objc_alloc((Class)ACAccount) initWithAccountType:v1];
  return v2;
}

id sub_100330660(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [v2 appleID];

  if (v3)
  {
    id v4 = +[ACAccountStore ams_sharedAccountStore];
    id v5 = [v4 accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifieriTunesStore];

    id v3 = [objc_alloc((Class)ACAccount) initWithAccountType:v5];
    uint64_t v6 = [v2 appleID];
    [v3 setUsername:v6];

    uint64_t v7 = [v2 altDSID];
    objc_msgSend(v3, "ams_setAltDSID:", v7);
  }
  return v3;
}

id sub_100330828()
{
  self;
  if (qword_1005B0FA0 != -1) {
    dispatch_once(&qword_1005B0FA0, &stru_1005286A8);
  }
  id v0 = (void *)qword_1005B0FA8;
  return v0;
}

void sub_100330880(id a1)
{
  uint64_t v1 = objc_alloc_init(EventServiceHost);
  id v2 = (void *)qword_1005B0FA8;
  qword_1005B0FA8 = (uint64_t)v1;
}

void sub_100330DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id a52)
{
}

void sub_100330DF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = WeakRetained[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100330ED8;
    block[3] = &unk_1005221F0;
    id v11 = WeakRetained;
    id v12 = v5;
    id v13 = v6;
    dispatch_async(v9, block);
  }
}

uint64_t sub_100330ED8(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[5]];
  if (v2) {
    uint64_t v2 = (*(uint64_t (**)(void))(a1[6] + 16))();
  }
  return _objc_release_x2(v2);
}

uint64_t sub_100330F44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100330F5C(id a1, EventServiceHost *a2, ExtensionRequestMetadata *a3)
{
  if (a3) {
    request = a3->_request;
  }
  else {
    request = 0;
  }
  id v5 = a3;
  id v6 = a2;
  [(ASDExtensionRequest *)request requestEnded];
  sub_100330FD8((uint64_t)v6, v5);
}

void sub_100330FD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v14 = v3;
    if (v3) {
      uint64_t v4 = v3[4];
    }
    else {
      uint64_t v4 = 0;
    }
    id v5 = [*(id *)(a1 + 24) objectForKeyedSubscript:v4];
    [v5 removeObject:v14];
    if ([v5 count])
    {
      id v6 = *(void **)(a1 + 32);
      uint64_t v7 = v14;
      if (!v14)
      {
        uint64_t v8 = 0;
LABEL_13:
        [v6 setObject:0 forKeyedSubscript:v8];

        id v3 = v14;
        goto LABEL_14;
      }
    }
    else
    {
      if (!v14)
      {
        uint64_t v8 = 0;
        id v6 = *(void **)(a1 + 32);
        goto LABEL_13;
      }
      id v9 = (id)v14[6];
      if (v9)
      {
        id v10 = v9;
        id v11 = (id)v14[6];
        id v12 = [v11 phase];
        id v13 = [(id)v14[6] terminalPhase];

        if (v12 == v13) {
          [*(id *)(a1 + 24) setObject:0 forKeyedSubscript:v14[4]];
        }
      }
      id v6 = *(void **)(a1 + 32);
      uint64_t v7 = v14;
    }
    uint64_t v8 = v7[3];
    goto LABEL_13;
  }
LABEL_14:
}

void sub_100331104(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 138543618;
    id v9 = v5;
    __int16 v10 = 2114;
    id v11 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "requestCompletionBlock(%{public}@, %{public}@)", (uint8_t *)&v8, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003311F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 138543618;
    id v9 = v5;
    __int16 v10 = 2114;
    id v11 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "requestCancellationBlock(%{public}@, %{public}@)", (uint8_t *)&v8, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003312E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    id v11 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "requestInterruptionBlock(%{public}@)", buf, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100331428;
    v8[3] = &unk_1005287B0;
    id v9 = WeakRetained;
    (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v3, v8);
  }
}

void sub_100331428(uint64_t a1, id *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = v4;
  if (a2)
  {
    if (v5)
    {
      if ((uint64_t)v5[5] > 0)
      {
        uint64_t v7 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v16 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Reached max retry count; giving up.",
            v16,
            2u);
        }

        sub_100330FD8((uint64_t)a2, v5);
        int v8 = 0;
        goto LABEL_18;
      }
      id v9 = (void *)v5[4];
    }
    else
    {
      id v9 = 0;
    }
    uint64_t v10 = sub_1003322B4((uint64_t)a2, v6, v9, a2);
    int v8 = (void *)v10;
    if (v10)
    {
      if (v5)
      {
        *(void *)(v10 + 40) = v5[5] + 1;
        uint64_t v11 = v5[4];
      }
      else
      {
        uint64_t v11 = 0;
        *(void *)(v10 + 40) = 1;
      }
      id v12 = [a2[3] objectForKeyedSubscript:v11];
      id v13 = v12;
      if (v12)
      {
        [v12 addObject:v8];
        [a2[4] setObject:v8 forKeyedSubscript:v8[3]];
        if (v5) {
          id v14 = (void *)v5[6];
        }
        else {
          id v14 = 0;
        }
        sub_100331EB8(v14, v8);
      }
    }
    else
    {
      id v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unable to retry; giving up.", buf, 2u);
      }
    }

    sub_100330FD8((uint64_t)a2, v5);
    if (!v5)
    {
      id v15 = 0;
      goto LABEL_19;
    }
LABEL_18:
    id v15 = (void *)v5[1];
LABEL_19:
    [v15 requestEnded];
  }
}

void sub_1003315F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  id v3 = v2;
  if (v1)
  {
    if ([v2 phase] == (id)1)
    {
      uint64_t v4 = *(void **)(v1 + 24);
      id v5 = [v3 bundleID];
      id v6 = [v4 objectForKeyedSubscript:v5];

      if (v6)
      {
        uint64_t v7 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Dangling request(s)", buf, 2u);
        }
      }
      int v8 = [v3 bundleID];
      sub_100331D08(v1, v8);
    }
    id v9 = [v3 bundleID];
    uint64_t v10 = [*(id *)(v1 + 24) objectForKeyedSubscript:v9];
    if (v10)
    {
      id v11 = v10;
    }
    else
    {
      id v29 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(*(id *)(v1 + 8), "count"));
      [*(id *)(v1 + 24) setObject:v29 forKeyedSubscript:v9];
      objc_initWeak(&location, (id)v1);
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v12 = *(id *)(v1 + 8);
      id v13 = [v12 countByEnumeratingWithState:&v30 objects:buf count:16];
      if (v13)
      {
        uint64_t v14 = *(void *)v31;
        do
        {
          id v15 = 0;
          do
          {
            if (*(void *)v31 != v14) {
              objc_enumerationMutation(v12);
            }
            uint64_t v16 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v15);
            id v17 = objc_loadWeakRetained(&location);
            sub_1003322B4(v1, v16, v9, v17);
            id v18 = (id *)objc_claimAutoreleasedReturnValue();

            if (v18)
            {
              [v29 addObject:v18];
              id v19 = *(void **)(v1 + 32);
              id v20 = v18[3];
              [v19 setObject:v18 forKeyedSubscript:v20];
            }
            id v15 = (char *)v15 + 1;
          }
          while (v13 != v15);
          id v13 = [v12 countByEnumeratingWithState:&v30 objects:buf count:16];
        }
        while (v13);
      }

      id v11 = v29;
      objc_destroyWeak(&location);
    }

    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v21 = v11;
    id v22 = [v21 countByEnumeratingWithState:&v30 objects:buf count:16];
    if (v22)
    {
      uint64_t v23 = *(void *)v31;
      do
      {
        id v24 = 0;
        do
        {
          if (*(void *)v31 != v23) {
            objc_enumerationMutation(v21);
          }
          sub_100331EB8(v3, *(void **)(*((void *)&v30 + 1) + 8 * (void)v24));
          id v24 = (char *)v24 + 1;
        }
        while (v22 != v24);
        id v22 = [v21 countByEnumeratingWithState:&v30 objects:buf count:16];
      }
      while (v22);
    }

    id v25 = [v3 phase];
    id v26 = [v3 terminalPhase];
    if (v21 && v25 == v26 && ![v21 count])
    {
      id v27 = *(void **)(v1 + 24);
      id v28 = [v3 bundleID];
      [v27 setObject:0 forKeyedSubscript:v28];
    }
  }
}

void sub_100331998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1003319C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, unsigned int a7)
{
  id v13 = a4;
  uint64_t v14 = a5;
  id v15 = v14;
  if (a1)
  {
    if (v13)
    {
      if (!v14)
      {
        uint64_t v16 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)id v26 = 0;
          _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "itemID == nil", v26, 2u);
        }

        id v15 = &off_10054C900;
      }
      id v17 = sub_1002D982C(objc_alloc((Class)ASDInstallationEvent), a2, a3, v13, v15, a6, a7);
      if (v17)
      {
        id v18 = v17;
        id v19 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          id v24 = [v18 phase];
          id v25 = [v18 bundleID];
          *(_DWORD *)id v26 = 134218242;
          *(void *)&v26[4] = v24;
          *(_WORD *)&v26[12] = 2114;
          *(void *)&v26[14] = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "postInstallationEvent: %ld, %{public}@", v26, 0x16u);
        }
        id v20 = [v18 bundleID];

        if (v20)
        {
          id v21 = *(NSObject **)(a1 + 16);
          *(void *)id v26 = _NSConcreteStackBlock;
          *(void *)&v26[8] = 3221225472;
          *(void *)&v26[16] = sub_1003315F8;
          id v27 = &unk_1005218C0;
          uint64_t v28 = a1;
          id v29 = v18;
          dispatch_async_and_wait(v21, v26);
        }
        else
        {
          uint64_t v23 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)id v26 = 0;
            _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "bundleID == nil", v26, 2u);
          }
        }
      }
      else
      {
        id v22 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v26 = 138543874;
          *(void *)&v26[4] = v13;
          *(_WORD *)&v26[12] = 2114;
          *(void *)&v26[14] = v15;
          *(_WORD *)&v26[22] = 2048;
          id v27 = (void *)a7;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Not posting event for %{public}@ (%{public}@): metricsInstallType = %ld", v26, 0x20u);
        }

        id v18 = 0;
      }
    }
    else
    {
      id v18 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)id v26 = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "bundleID == nil", v26, 2u);
      }
    }
  }
}

void sub_100331D08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      id v21 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Ending installationEvent request(s) for %{public}@", buf, 0xCu);
    }

    id v5 = [*(id *)(a1 + 24) objectForKeyedSubscript:v3];
    [*(id *)(a1 + 24) setObject:0 forKeyedSubscript:v3];
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v16;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v15 + 1) + 8 * (void)v10);
          id v12 = *(void **)(a1 + 32);
          if (v11)
          {
            [v12 setObject:0 forKeyedSubscript:*(void *)(v11 + 24)];
            id v13 = *(void **)(v11 + 8);
          }
          else
          {
            objc_msgSend(v12, "setObject:forKeyedSubscript:", 0, 0, (void)v15);
            id v13 = 0;
          }
          objc_msgSend(v13, "endRequest", (void)v15);
          uint64_t v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v14 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        id v8 = v14;
      }
      while (v14);
    }
  }
}

void sub_100331EB8(void *a1, void *a2)
{
  id v4 = a1;
  id v5 = a2;
  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [v4 bundleID];
    int v30 = 138543874;
    long long v31 = v7;
    __int16 v32 = 2048;
    id v33 = [v4 phase];
    __int16 v34 = 2048;
    id v35 = [v4 terminalPhase];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending didReceiveInstallationEvent: %{public}@ %ld/%ld", (uint8_t *)&v30, 0x20u);
  }
  if (v5)
  {
    id v8 = v5[6];
    uint64_t v9 = v8;
    if (v8)
    {
      id v10 = [v8 phase];
      if (v10 == [v9 terminalPhase])
      {
        id v11 = [v4 phase];
        if (v11 != [v9 phase])
        {
          id v12 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            id v29 = v5[4];
            int v30 = 138543362;
            long long v31 = v29;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@: Last event was supposed to be the last!", (uint8_t *)&v30, 0xCu);
          }
        }
      }
      id v13 = [v4 appType];
      if (v13 != [v9 appType])
      {
        id v14 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          id v20 = [v4 bundleID];
          id v21 = [v9 appType];
          id v22 = [v4 appType];
          int v30 = 138543874;
          long long v31 = v20;
          __int16 v32 = 2048;
          id v33 = v21;
          __int16 v34 = 2048;
          id v35 = v22;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@: appType changed: %ld -> %ld", (uint8_t *)&v30, 0x20u);
        }
      }
      id v15 = [v4 installType];
      if (v15 != [v9 installType])
      {
        long long v16 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = [v4 bundleID];
          id v24 = [v9 installType];
          id v25 = [v4 installType];
          int v30 = 138543874;
          long long v31 = v23;
          __int16 v32 = 2048;
          id v33 = v24;
          __int16 v34 = 2048;
          id v35 = v25;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@: installType changed: %ld -> %ld", (uint8_t *)&v30, 0x20u);
        }
      }
      id v17 = [v4 source];
      if (v17 != [v9 source])
      {
        long long v18 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          id v26 = [v4 bundleID];
          id v27 = [v9 source];
          id v28 = [v4 source];
          int v30 = 138543874;
          long long v31 = v26;
          __int16 v32 = 2048;
          id v33 = v27;
          __int16 v34 = 2048;
          id v35 = v28;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@: source changed: %ld -> %ld", (uint8_t *)&v30, 0x20u);
        }
      }
    }
    objc_storeStrong(v5 + 6, a1);
    id v19 = v5[2];
  }
  else
  {
    uint64_t v9 = 0;
    id v19 = 0;
  }
  [v19 didReceiveInstallationEvent:v4];
}

ExtensionRequestMetadata *sub_1003322B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  objc_initWeak(&location, a4);
  id v9 = [objc_alloc((Class)ASDExtensionRequest) initWithExtension:v7 queue:*(void *)(a1 + 16)];
  id v24 = _NSConcreteStackBlock;
  uint64_t v25 = 3221225472;
  id v26 = sub_1003324F8;
  id v27 = &unk_100528800;
  objc_copyWeak(&v29, &location);
  id v10 = v8;
  id v28 = v10;
  [v9 setErrorBlock:&v24];
  id v11 = [v9 beginRequestForHostContext:objc_opt_class() XPCInterface:&OBJC_PROTOCOL___ASDEventServiceExtensionRemoteXPCInterface];
  id v12 = v11;
  id v14 = v13;
  id v15 = 0;
  if (v13 && v11)
  {
    id v15 = [ExtensionRequestMetadata alloc];
    id v23 = v9;
    id v16 = v12;
    id v17 = v14;
    id v18 = v10;
    if (v15)
    {
      v31.receiver = v15;
      v31.super_class = (Class)ExtensionRequestMetadata;
      id v19 = (ExtensionRequestMetadata *)objc_msgSendSuper2(&v31, "init", v23, v24, v25, v26, v27);
      id v15 = v19;
      if (v19)
      {
        objc_storeStrong((id *)&v19->_request, v9);
        objc_storeStrong((id *)&v15->_context, v12);
        objc_storeStrong((id *)&v15->_requestIdentifier, v14);
        id v20 = (NSString *)[v18 copy];
        bundleID = v15->_bundleID;
        v15->_bundleID = v20;
      }
    }
  }
  objc_destroyWeak(&v29);

  objc_destroyWeak(&location);
  return v15;
}

void sub_1003324C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003324F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = WeakRetained[2];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1003325F8;
    v10[3] = &unk_100521648;
    id v11 = WeakRetained;
    id v12 = *(id *)(a1 + 32);
    id v13 = v5;
    id v14 = v6;
    dispatch_async(v9, v10);
  }
}

void sub_1003325F8(uint64_t *a1)
{
  [*(id *)(a1[4] + 24) objectForKeyedSubscript:a1[5]];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v23 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    while (2)
    {
      id v6 = 0;
      do
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v6);
        if (v7) {
          uint64_t v8 = v7[1];
        }
        else {
          uint64_t v8 = 0;
        }
        if (v8 == a1[6])
        {
          id v10 = v7;

          if (!v7) {
            goto LABEL_16;
          }
          sub_100330FD8(a1[4], v10);
          goto LABEL_19;
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v9 = [v2 countByEnumeratingWithState:&v15 objects:v23 count:16];
      id v4 = v9;
      if (v9) {
        continue;
      }
      break;
    }
  }

LABEL_16:
  id v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Missing metadata for request; already cleaned up?",
      buf,
      2u);
  }

  id v10 = 0;
LABEL_19:
  id v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = a1[5];
    uint64_t v14 = a1[7];
    *(_DWORD *)buf = 138543618;
    uint64_t v20 = v13;
    __int16 v21 = 2114;
    uint64_t v22 = v14;
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Extension request for app %{public}@ failed with error: %{public}@", buf, 0x16u);
  }
}

void sub_1003327FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v5 = *(NSObject **)(a1 + 16);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1003328F8;
      v7[3] = &unk_1005218C0;
      void v7[4] = a1;
      id v8 = v3;
      dispatch_async_and_wait(v5, v7);
    }
    else
    {
      id v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "bundleID == nil", buf, 2u);
      }
    }
  }
}

void sub_1003328F8(uint64_t a1)
{
}

id sub_100332960(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)UpdatableApp;
    a1 = objc_msgSendSuper2(&v20, "init");
    if (a1)
    {
      uint64_t v7 = [v5 bundleID];
      id v8 = (void *)*((void *)a1 + 1);
      *((void *)a1 + 1) = v7;

      uint64_t v9 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 storeItemID]);
      id v10 = (void *)*((void *)a1 + 6);
      *((void *)a1 + 6) = v9;

      uint64_t v11 = [v5 storefront];
      id v12 = (void *)*((void *)a1 + 7);
      *((void *)a1 + 7) = v11;

      if (v6)
      {
        id v13 = v6;
      }
      else
      {
        +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 storeExternalVersionID]);
        id v13 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v14 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v13;

      *((unsigned char *)a1 + 16) = v6 != 0;
      *((unsigned char *)a1 + 17) = [v5 isB2BCustomApp];
      uint64_t v15 = [v5 downloaderDSID];
      long long v16 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v15;

      uint64_t v17 = [v5 purchaserDSID];
      long long v18 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v17;
    }
  }

  return a1;
}

id *sub_100332AB8(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)UpdatableApp;
    id v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 6, a2);
      objc_storeStrong(a1 + 5, a3);
    }
  }

  return a1;
}

id sub_100332C5C(id a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!a1) {
    goto LABEL_13;
  }
  v27.receiver = a1;
  v27.super_class = (Class)FairPlayStreamReader;
  a1 = objc_msgSendSuper2(&v27, "init");
  if (!a1) {
    goto LABEL_13;
  }
  uint64_t v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v10 = dispatch_queue_create("com.apple.appstored.FairPlayStreamReader", v9);
  uint64_t v11 = (void *)*((void *)a1 + 8);
  *((void *)a1 + 8) = v10;

  objc_storeStrong((id *)a1 + 10, a3);
  [*((id *)a1 + 10) setDelegate:a1];
  id v12 = v7;
  id v13 = +[AMSKeybag sharedInstance];
  id v28 = 0;
  unsigned int v14 = [v13 fairplayContextWithError:&v28];
  id v15 = v28;

  if (v14)
  {
    id v16 = v12;
    [v16 bytes];
    [v16 length];
    sub_10018E25C();
    if (!v17 || (uint64_t v18 = v17, (v19 = *((void *)a1 + 7)) == 0))
    {
      char v24 = 1;
      goto LABEL_11;
    }
    sub_1000FD3C0(v19);
    *((void *)a1 + 7) = 0;
    uint64_t v20 = ASDErrorDomain;
    NSErrorUserInfoKey v30 = NSDebugDescriptionErrorKey;
    __int16 v21 = +[NSString stringWithFormat:@"Session creation failed (error: %d)", v18];
    objc_super v31 = v21;
    uint64_t v22 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    uint64_t v23 = +[NSError errorWithDomain:v20 code:1133 userInfo:v22];

    id v15 = (id)v23;
  }
  if (a4)
  {
    id v15 = v15;
    char v24 = 0;
    *a4 = v15;
  }
  else
  {
    char v24 = 0;
  }
LABEL_11:
  char v29 = v24;

  char v25 = v29;
  if ((v25 & 1) == 0)
  {

    a1 = 0;
  }
LABEL_13:

  return a1;
}

id sub_100333068(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 80) hasBytesAvailable];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 80) streamStatus];
    BOOL v3 = result == (id)5 && *(void *)(*(void *)(a1 + 32) + 72) != 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  }
  return result;
}

void sub_1003332E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100333304(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    int v6 = 134217984;
    uint64_t v7 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "(FairPlayStreamReader) Upstream event code %lu", (uint8_t *)&v6, 0xCu);
  }

  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) & 0x10) != 0)
  {
    BOOL v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v6) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "(FairPlayStreamReader) Upstream end encountered, requesting one more read", (uint8_t *)&v6, 2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) &= ~0x10uLL;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) |= 2uLL;
  }
  if ((char *)[*(id *)(a1 + 32) streamStatus] - 2 >= (char *)4)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v6) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "(FairPlayStreamReader) Dropping events for closed stream", (uint8_t *)&v6, 2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_1003335D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) streamStatus];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == (id)7)
  {
    uint64_t v4 = [(id)v3 streamError];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    int v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    return;
  }
  if (*(void *)(v3 + 72))
  {
    uint64_t v7 = (char *)[*(id *)(v3 + 72) length];
    memcpy(*(void **)(a1 + 56), [*(id *)(*(void *)(a1 + 32) + 72) bytes], (size_t)v7);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 72);
    *(void *)(v8 + 72) = 0;

    uint64_t v3 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v7 = 0;
  }
  dispatch_queue_t v10 = *(void **)(v3 + 80);
  uint64_t v11 = &v7[*(void *)(a1 + 56)];
  uint64_t v12 = *(void *)(a1 + 64) - (void)v7;
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v13 + 40);
  unint64_t v14 = (unint64_t)[v10 readBytes:v11 length:v12 error:&obj];
  objc_storeStrong((id *)(v13 + 40), obj);
  if ((v14 & 0x8000000000000000) != 0) {
    goto LABEL_42;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 80) streamStatus] == (id)5) {
    unsigned int v15 = [*(id *)(*(void *)(a1 + 32) + 80) hasBytesAvailable] ^ 1;
  }
  else {
    unsigned int v15 = 0;
  }
  unint64_t v16 = (unint64_t)&v7[v14];
  uint64_t v17 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    id v36 = [*(id *)(*(void *)(a1 + 32) + 80) streamStatus];
    unsigned int v37 = [*(id *)(*(void *)(a1 + 32) + 80) hasBytesAvailable];
    int buf = 134218240;
    *(void *)buf_4 = v36;
    *(_WORD *)&buf_4[8] = 1024;
    *(_DWORD *)&buf_4[10] = v37;
    _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "(FairPlayStreamReader) Upstream status = %lu; bytes available = %{BOOL}d",
      (uint8_t *)&buf,
      0x12u);
  }

  if (v15)
  {
    sub_1002E7B3C(*(void *)(a1 + 32), 5);
    uint64_t v18 = *(void *)(a1 + 32);
    if (v18) {
      dispatch_source_merge_data(*(dispatch_source_t *)(v18 + 16), 0x10uLL);
    }
  }
  if (!v16)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    NSErrorUserInfoKey v30 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "(FairPlayStreamReader) Zero bytes available, zero bytes decrypted", (uint8_t *)&buf, 2u);
    }

    unint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    goto LABEL_38;
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v22 = *(void **)(v19 + 40);
  uint64_t v20 = (id *)(v19 + 40);
  id v21 = v22;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_32;
  }
  unint64_t v23 = v16 >> 15;
  char v24 = v15 ^ 1;
  if ((v16 >> 15)) {
    char v24 = 0;
  }
  if (v24)
  {
LABEL_32:
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 56);
    id v26 = malloc_type_malloc(4 * (v23 + 1), 0x100004052888210uLL);
    __b = v26;
    if (v23)
    {
      memset_pattern16(v26, &unk_1004A0C90, 4 * (v16 >> 15));
      id v26 = __b;
    }
    if (v15 && (v16 & 0x7FFF) != 0)
    {
      *((_DWORD *)v26 + v23) = v16 & 0x7FFF;
      LODWORD(v23) = v23 + 1;
    }
    *(_DWORD *)buf_4 = 0;
    *(void *)&buf_4[4] = v26;
    int buf = v23;
    *(void *)&buf_4[12] = v25;
    unint64_t v43 = v16;
    sub_1001F4980();
    if (v27)
    {
      id v28 = +[NSString stringWithFormat:@"Decryption failed (error: %d)", v27];
      ASDErrorWithDescription();
      id v21 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v29 = -1;
    }
    else
    {
      uint64_t v29 = v15 ? v16 : (v23 << 15);
    }
    free(__b);
  }
  objc_storeStrong(v20, v21);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v29;
  unint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if ((v31 & 0x8000000000000000) != 0)
  {
LABEL_42:
    sub_1002E79B0(*(void *)(a1 + 32), *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    sub_1002E7B3C(*(void *)(a1 + 32), 7);
    return;
  }
LABEL_38:
  if (v16 > v31)
  {
    uint64_t v32 = +[NSData dataWithBytes:*(void *)(a1 + 56) + v31 length:v16 - v31];
    uint64_t v33 = *(void *)(a1 + 32);
    __int16 v34 = *(void **)(v33 + 72);
    *(void *)(v33 + 72) = v32;

    id v35 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      id v38 = [*(id *)(*(void *)(a1 + 32) + 72) length];
      int buf = 134217984;
      *(void *)buf_4 = v38;
      _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "(FairPlayStreamReader) Scratch buffer size = %lu", (uint8_t *)&buf, 0xCu);
    }
  }
}

__CFString *sub_100333AF0(uint64_t a1, int a2)
{
  self;
  char v3 = a2 - 1;
  if (a2 - 1) <= 0x12 && ((0x78FBFu >> v3)) {
    uint64_t v4 = *off_100528898[v3];
  }
  else {
    uint64_t v4 = 0;
  }
  return v4;
}

NSNumber *sub_100333B60(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  [v2 timeIntervalSince1970];
  double v4 = v3;

  return +[NSNumber numberWithLongLong:(uint64_t)(v4 * 1000.0)];
}

void sub_100335058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100335094(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v3];
  int v6 = [v4 connection];

  uint64_t v7 = sub_1002FF548((uint64_t)AppUsageSessionEntity, v6, v5);

  uint64_t v8 = sub_100324D08();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1003351B0;
  v9[3] = &unk_100521428;
  void v9[4] = *(void *)(a1 + 40);
  [v7 enumerateMemoryEntitiesWithProperties:v8 usingBlock:v9];
}

void sub_1003351B0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

uint64_t sub_1003351E8(uint64_t a1, void *a2)
{
  uint64_t v19 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = +[NSArray arrayWithObjects:&v19 count:1];
  id v12 = 0;
  uint64_t v5 = sub_10040D6E4(v3, v4, &v12);

  id v6 = v12;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 count] != 0;

  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = [*(id *)(a1 + 40) logKey];
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)int buf = 138412802;
      unint64_t v14 = v8;
      __int16 v15 = 2114;
      uint64_t v16 = v9;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Error creating fresh app usage session entity. Error: %{public}@", buf, 0x20u);
    }
  }
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  return v10;
}

void sub_1003355B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003355DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4) {
    id v4 = (void *)v4[5];
  }
  uint64_t v5 = v4;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v6 = [v3 countByEnumeratingWithState:&v40 objects:v54 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v41;
    *(void *)&long long v7 = 138412802;
    long long v35 = v7;
    uint64_t v37 = *(void *)v41;
    id v38 = v3;
    id v36 = v5;
    do
    {
      uint64_t v10 = 0;
      id v39 = v8;
      do
      {
        if (*(void *)v41 != v9) {
          objc_enumerationMutation(v3);
        }
        uint64_t v11 = *(void **)(*((void *)&v40 + 1) + 8 * (void)v10);
        id v12 = objc_msgSend(v11, "bundleID", v35);
        uint64_t v13 = [v5 objectForKeyedSubscript:v12];

        if (!v13)
        {
          __int16 v15 = ASDLogHandleForCategory();
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_23;
          }
          uint64_t v29 = [*(id *)(a1 + 32) logKey];
          NSErrorUserInfoKey v30 = sub_10022DD24((uint64_t)AppEvent, 0);
          unint64_t v31 = [v11 bundleID];
          *(_DWORD *)int buf = v35;
          id v45 = v29;
          __int16 v46 = 2114;
          __int16 v47 = v30;
          __int16 v48 = 2114;
          id v49 = v31;
          uint64_t v32 = v15;
          uint64_t v33 = "[%@] [%{public}@] [%{public}@] Could not find app metadata";
LABEL_26:
          _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, v33, buf, 0x20u);

          id v8 = v39;
          goto LABEL_23;
        }
        if (([*(id *)(a1 + 32) isCandidateAppMetadata:v13] & 1) == 0)
        {
          __int16 v15 = ASDLogHandleForCategory();
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_23;
          }
          uint64_t v29 = [*(id *)(a1 + 32) logKey];
          NSErrorUserInfoKey v30 = sub_10022DD24((uint64_t)AppEvent, 0);
          unint64_t v31 = [v11 bundleID];
          *(_DWORD *)int buf = v35;
          id v45 = v29;
          __int16 v46 = 2114;
          __int16 v47 = v30;
          __int16 v48 = 2114;
          id v49 = v31;
          uint64_t v32 = v15;
          uint64_t v33 = "[%@] [%{public}@] [%{public}@] Non candidate app metadata";
          goto LABEL_26;
        }
        unint64_t v14 = sub_10022D3F8([AppEvent alloc], v13);
        __int16 v15 = v14;
        if (v14)
        {
          [v14 setValue:&off_10054C948 forProperty:@"event_type"];
          uint64_t v16 = [v11 bundleVersion];

          if (v16)
          {
            __int16 v17 = [v11 bundleVersion];
            [v15 setValue:v17 forProperty:@"bundle_version"];
          }
          id v18 = [v11 appVersion];

          if (v18)
          {
            uint64_t v19 = [v11 appVersion];
            [v15 setValue:v19 forProperty:@"short_version"];
          }
          uint64_t v20 = [v11 date];

          if (v20)
          {
            id v21 = [v11 date];
            [v15 setValue:v21 forProperty:@"launch_time"];
          }
          uint64_t v22 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v23 = [*(id *)(a1 + 32) logKey];
            char v24 = sub_10022DD24((uint64_t)AppEvent, 0);
            uint64_t v25 = [v15 valueForProperty:@"bundle_id"];
            id v26 = [v15 valueForProperty:@"short_version"];
            [v15 valueForProperty:@"bundle_version"];
            id v28 = v27 = a1;
            *(_DWORD *)int buf = 138413314;
            id v45 = v23;
            __int16 v46 = 2114;
            __int16 v47 = v24;
            __int16 v48 = 2114;
            id v49 = v25;
            __int16 v50 = 2114;
            uint64_t v51 = v26;
            __int16 v52 = 2114;
            long long v53 = v28;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] [%{public}@] Created app event with version: %{public}@ bundleVersion: %{public}@", buf, 0x34u);

            a1 = v27;
            uint64_t v5 = v36;

            id v3 = v38;
            uint64_t v9 = v37;

            id v8 = v39;
          }

          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v15];
        }
LABEL_23:

        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v34 = [v3 countByEnumeratingWithState:&v40 objects:v54 count:16];
      id v8 = v34;
    }
    while (v34);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

CFStringRef sub_100335ADC()
{
  self;
  unsigned int v0 = MGGetSInt32Answer() - 1;
  if (v0 > 5) {
    return @"Unknown";
  }
  else {
    return off_100528958[v0];
  }
}

void *sub_100335B28(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = (void *)a1[2];
    if (!v3)
    {
      uint64_t v4 = sub_100335ADC();
      uint64_t v5 = (void *)v2[2];
      v2[2] = v4;

      id v3 = (void *)v2[2];
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_100335BA8(id *a1)
{
  if (a1)
  {
    id v3 = a1 + 1;
    id v2 = a1[1];
    if (!v2)
    {
      self;
      unsigned int v4 = MGGetSInt32Answer() - 1;
      if (v4 > 5) {
        uint64_t v5 = @"Unknown";
      }
      else {
        uint64_t v5 = off_100528988[v4];
      }
      objc_storeStrong(v3, v5);
      id v2 = *v3;
    }
    a1 = (id *)v2;
    uint64_t v1 = vars8;
  }
  return a1;
}

BOOL sub_100335D18(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 57);
  id v7 = a2;
  id v8 = [v7 connection];
  uint64_t v9 = [v3 createAppEventsForBundleIDs:v4 eventType:v5 installType:v6 connection:v8];

  uint64_t v10 = *(objc_class **)(a1 + 48);
  id v18 = 0;
  uint64_t v11 = sub_10040CC40(v7, v9, v10, &v18);

  id v12 = v18;
  id v13 = [v11 count];

  if (v12)
  {
    unint64_t v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = [*(id *)(a1 + 32) logKey];
      __int16 v17 = [*(id *)(a1 + 40) componentsJoinedByString:@", "];
      *(_DWORD *)int buf = 138412802;
      uint64_t v20 = v16;
      __int16 v21 = 2114;
      uint64_t v22 = v17;
      __int16 v23 = 2114;
      id v24 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@] Error creating entity for bundleIDs: [%{public}@] error: %{public}@", buf, 0x20u);
    }
  }

  return v13 != 0;
}

uint64_t sub_100335F84(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v11 = 0;
  uint64_t v6 = sub_10040CC40(v5, v3, (objc_class *)[v4 appEventEntityClass], &v11);

  id v7 = v11;
  [v6 count];

  if (v7)
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = [*(id *)(a1 + 40) logKey];
      *(_DWORD *)int buf = 138412546;
      id v13 = v10;
      __int16 v14 = 2114;
      id v15 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Importing launch event(s) failed with error: %{public}@", buf, 0x16u);
    }
  }

  return 1;
}

id sub_1003363D8()
{
  self;
  unsigned int v0 = +[MCProfileConnection sharedConnection];
  id v1 = [v0 isAppAnalyticsAllowed];

  return v1;
}

id sub_10033641C()
{
  self;
  unsigned int v0 = +[MCProfileConnection sharedConnection];
  id v1 = [v0 isDiagnosticSubmissionAllowed];

  return v1;
}

id sub_100336460(uint64_t a1, unint64_t a2)
{
  self;
  self;
  if (a2 > 2)
  {
    id v3 = 0;
LABEL_6:
    id v5 = [objc_alloc((Class)NSNumber) initWithInteger:1000];
    goto LABEL_7;
  }
  id v3 = *(id *)*(&off_1005289B8 + a2);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = +[MCProfileConnection sharedConnection];
  id v5 = [v4 effectiveValueForSetting:v3];

  if (!v5) {
    goto LABEL_6;
  }
LABEL_7:

  return v5;
}

double sub_100336518(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v8.receiver = a1;
    v8.super_class = (Class)ProgressPortions;
    id v5 = (char *)objc_msgSendSuper2(&v8, "init");
    if (v5)
    {
      if (a3 < 1)
      {
        double result = 0.6;
        *(_OWORD *)(v5 + 8) = xmmword_1004A0EE0;
      }
      else
      {
        *((void *)v5 + 2) = 0x3FC3333333333333;
        double v7 = (double)a2 / (double)(a3 + a2) * 0.85;
        *((double *)v5 + 1) = v7;
        double result = 0.85 - v7;
        *((double *)v5 + 3) = result;
        *((void *)v5 + 4) = a3;
      }
    }
  }
  return result;
}

void *sub_100336634(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  if (a1)
  {
    id v7 = v5;
    v16.receiver = a1;
    v16.super_class = (Class)AssetRequest;
    a1 = objc_msgSendSuper2(&v16, "_initWithCFURLRequest:", [v7 _CFURLRequest]);
    if (a1)
    {
      id v8 = [v6 copy];
      uint64_t v9 = (void *)a1[2];
      a1[2] = v8;

      if (!a1[2])
      {
        uint64_t v10 = objc_alloc_init(AssetRequestProperties);
        id v11 = (void *)a1[2];
        a1[2] = v10;
      }
      unsigned int v12 = [v7 allowsCellularAccess];
      if (!v6 || !v12 || (v6[9] & 1) == 0) {
        [a1 setAllowsCellularAccess:0];
      }
      unsigned int v13 = [v7 allowsConstrainedNetworkAccess];
      if (!v6 || !v13 || (v6[10] & 1) == 0) {
        [a1 setAllowsConstrainedNetworkAccess:0];
      }
      unsigned int v14 = [v7 allowsExpensiveNetworkAccess];
      if (!v6 || !v14 || (v6[11] & 1) == 0) {
        [a1 setAllowsExpensiveNetworkAccess:0];
      }
    }
  }

  return a1;
}

void *sub_100336778(void *a1, uint64_t a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    uint64_t v6 = +[NSURLRequest requestWithURL:a2];
    id v7 = sub_100336634(v3, v6, v5);

    id v3 = v7;
  }
  return v3;
}

id sub_1003369E4(id result)
{
  if (result)
  {
    id v1 = +[NSURLProtocol propertyForKey:@"AssetRequetPropertyRangeOffset" inRequest:result];
    id v2 = [v1 unsignedLongLongValue];

    return v2;
  }
  return result;
}

void sub_100336A38(void *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = +[NSNumber numberWithUnsignedLongLong:a2];
      +[NSURLProtocol setProperty:v4 forKey:@"AssetRequetPropertyRangeOffset" inRequest:a1];

      +[NSString stringWithFormat:@"bytes=%llu-", a2];
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      [a1 setValue:v5 forHTTPHeaderField:@"Range"];
    }
    else
    {
      +[NSURLProtocol removePropertyForKey:@"AssetRequetPropertyRangeOffset" inRequest:a1];
      [a1 setValue:0 forHTTPHeaderField:@"Range"];
    }
  }
}

id sub_100336B54()
{
  self;
  if (qword_1005B0FB0 != -1) {
    dispatch_once(&qword_1005B0FB0, &stru_1005289D0);
  }
  unsigned int v0 = (void *)qword_1005B0FB8;
  return v0;
}

void sub_100336BAC(id a1)
{
  id v1 = [ClipService alloc];
  id v2 = sub_10030B11C();
  id v3 = sub_1003DA6D4();
  uint64_t v4 = sub_10035BE54();
  id v11 = v2;
  id v5 = v3;
  id v6 = v4;
  if (v1)
  {
    v12.receiver = v1;
    v12.super_class = (Class)ClipService;
    id v7 = objc_msgSendSuper2(&v12, "init");
    id v1 = v7;
    if (v7)
    {
      v7->_lock._os_unfair_lock_opaque = 0;
      id v8 = (NSMutableDictionary *)objc_alloc_init((Class)NSMutableDictionary);
      sessions = v1->_sessions;
      v1->_sessions = v8;

      objc_storeStrong((id *)&v1->_bag, v2);
      objc_storeStrong((id *)&v1->_device, v3);
      objc_storeStrong((id *)&v1->_urlSession, v4);
    }
  }

  uint64_t v10 = (void *)qword_1005B0FB8;
  qword_1005B0FB8 = (uint64_t)v1;
}

void sub_1003373B0(uint64_t a1)
{
  os_unfair_lock_lock_with_options();
  [*(id *)(*(void *)(a1 + 32) + 32) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  id v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 24);
  os_unfair_lock_unlock(v2);
}

uint64_t sub_100337554(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003378F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100337A50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100337BAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100337C18()
{
  self;
  if (qword_1005B0FC8 != -1) {
    dispatch_once(&qword_1005B0FC8, &stru_1005289F8);
  }
  unsigned int v0 = (void *)qword_1005B0FC0;
  return v0;
}

void sub_100337C70(id a1)
{
  id v1 = objc_alloc_init(DiagnosticService);
  id v2 = (void *)qword_1005B0FC0;
  qword_1005B0FC0 = (uint64_t)v1;
}

void sub_100337D54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100337DFC;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    sub_100010468(v5, v6);
  }
}

void sub_100337DFC(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v6), "_unboostingRemoteObjectProxy", (void)v8);
        [v7 receiveMessage:*(void *)(a1 + 40)];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100337FB8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSXPCConnection) initWithListenerEndpoint:*(void *)(a1 + 32)];
  id v3 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___DiagnosticListener];
  [v2 setRemoteObjectInterface:v3];

  [*(id *)(*(void *)(a1 + 40) + 8) addObject:v2];
  objc_initWeak(&location, v2);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100338164;
  v6[3] = &unk_100528A20;
  void v6[4] = *(void *)(a1 + 40);
  objc_copyWeak(&v7, &location);
  [v2 setInterruptionHandler:v6];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100338268;
  v4[3] = &unk_100528A20;
  v4[4] = *(void *)(a1 + 40);
  objc_copyWeak(&v5, &location);
  [v2 setInvalidationHandler:v4];
  [v2 resume];
  objc_destroyWeak(&v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void sub_100338134(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_100338164(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100338210;
  v3[3] = &unk_100528A20;
  v3[4] = v1;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  sub_100010468(v2, v3);
  objc_destroyWeak(&v4);
}

void sub_1003381FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100338210(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 removeObject:WeakRetained];
}

void sub_100338268(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100338314;
  v3[3] = &unk_100528A20;
  v3[4] = v1;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  sub_100010468(v2, v3);
  objc_destroyWeak(&v4);
}

void sub_100338300(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100338314(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 removeObject:WeakRetained];
}

uint64_t sub_100338598(uint64_t a1, uint64_t a2)
{
  return 1;
}

void sub_1003385CC(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 connection];
  id v4 = sub_1003F8A7C();
  id v5 = sub_1002FF548((uint64_t)AppInstallEntity, v3, v4);

  id v6 = +[AppInstall defaultProperties];
  id v7 = [v6 mutableCopy];

  CFStringRef v11 = @"IFNULL(app_install.phase, 10)";
  long long v8 = +[NSArray arrayWithObjects:&v11 count:1];
  [v7 addObjectsFromArray:v8];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10033873C;
  v9[3] = &unk_100526590;
  id v10 = *(id *)(a1 + 32);
  [v5 enumerateMemoryEntitiesWithProperties:v7 usingBlock:v9];
}

void sub_10033873C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = a2;
  id v4 = sub_10026E91C(v3, @"IFNULL(app_install.phase, 10)");
  sub_100424C14(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  [v2 appendFormat:@"\n  (%3ld) %@", v4, v5];
}

void sub_100339D78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    CFStringRef v11 = [XDCPingMessage alloc];
    if (v5) {
      id Property = objc_getProperty(v5, v10, 16, 1);
    }
    else {
      id Property = 0;
    }
    id v13 = Property;
    id v7 = [(XDCPingMessage *)v11 initWithData:v13];

    long long v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        Class isa = v7[1].isa;
      }
      else {
        Class isa = 0;
      }
      id v15 = isa;
      int v16 = 138543362;
      __int16 v17 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ >> RECEIVED PONG", (uint8_t *)&v16, 0xCu);
    }
    goto LABEL_12;
  }
  id v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    long long v8 = *(void **)(a1 + 32);
    if (v8) {
      long long v8 = (void *)v8[1];
    }
    long long v9 = v8;
    int v16 = 138543618;
    __int16 v17 = v9;
    __int16 v18 = 2114;
    id v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ >> SENDING FAILED: %{public}@", (uint8_t *)&v16, 0x16u);
LABEL_12:
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100339F4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Authorize complete with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = objc_msgSend(*(id *)(a1 + 32), "ams_DSID");
    int v7 = 138412290;
    id v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Authorize complete for account: %@", (uint8_t *)&v7, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10033A074(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v27 = 0;
    id v28 = &v27;
    uint64_t v29 = 0x3032000000;
    NSErrorUserInfoKey v30 = sub_100018238;
    unint64_t v31 = sub_100017CD8;
    id v32 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x3032000000;
    id v24 = sub_100018238;
    uint64_t v25 = sub_100017CD8;
    id v26 = 0;
    if (v5)
    {
      dispatch_semaphore_t v7 = dispatch_semaphore_create(0);
      id v8 = +[SubscriptionEntitlementsCoordinator sharedInstance];
      long long v9 = sub_100416894((uint64_t)XPCRequestToken, 1);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10033A3C8;
      v17[3] = &unk_100528A78;
      id v19 = &v21;
      uint64_t v20 = &v27;
      id v10 = v7;
      __int16 v18 = v10;
      sub_100321A50(v8, 1uLL, v9, 0, 0, 0, v17);

      dispatch_time_t v11 = dispatch_time(0, 20000000000);
      if (dispatch_semaphore_wait(v10, v11))
      {
        uint64_t v12 = ASDErrorWithTitleAndMessage();
        id v13 = (void *)v28[5];
        v28[5] = v12;
      }
      if (a3)
      {
        unsigned int v14 = (void *)v28[5];
        if (v14) {
          *a3 = v14;
        }
      }
      id v15 = (id)v22[5];
    }
    else
    {
      id v15 = 0;
    }
    _Block_object_dispose(&v21, 8);

    _Block_object_dispose(&v27, 8);
  }
  else
  {
    id v15 = 0;
  }

  return v15;
}

void sub_10033A2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10033A2EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] oneAccountDSID returned: %@", (uint8_t *)&v6, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10033A3C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a5;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v7);
        }
        id v13 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v13 segment] == (id)1) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v13);
        }
      }
      id v10 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v10);
  }
  if (v8) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a5);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10033B368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t sub_10033B3A0(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Testing sbsync if subscribed complete", v4, 2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10033B428(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054C990];
  uint64_t v5 = [v3 connection];
  int v6 = sub_1002FF548((uint64_t)AppInstallEntity, v5, v4);

  id v7 = [v6 countOfEntities];
  id v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  long long v15 = sub_10033B5E0;
  long long v16 = &unk_100522CD0;
  id v8 = v3;
  uint64_t v9 = *(void *)(a1 + 32);
  id v17 = v8;
  uint64_t v18 = v9;
  [v6 enumeratePersistentIDsUsingBlock:&v13];
  id v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "count", v13, v14, v15, v16);
    *(_DWORD *)int buf = 134218240;
    id v20 = v11;
    __int16 v21 = 2048;
    id v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Cleared optimal download window from %ld updates (%ld total updates)", buf, 0x16u);
  }

  return 1;
}

void sub_10033B5E0(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  id v10 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  sub_1002C2130(v10);
  int v6 = (id *)objc_claimAutoreleasedReturnValue();
  id v7 = sub_1003D4DF8((uint64_t)v6);

  if (v7)
  {
    id v8 = sub_10026E95C(v10, @"bundle_id");
    if (!v8)
    {
      uint64_t v9 = sub_1002C1EE8(v10);
      id v8 = [v9 description];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v8];
    sub_1003D4ECC((uint64_t)v6, 0);
    sub_1002C21C0(v10, v6);
  }
}

BOOL sub_10033B6F4(uint64_t a1, id a2)
{
  uint64_t v3 = sub_100402494(a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count] != 0;
}

void sub_10033B970(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      int v6 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v5;

      uint64_t v4 = *(void **)(a1 + 8);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

void sub_10033C0C8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

id *sub_10033C1D8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_10033C238((id *)[CallerRequestPresenter alloc], v2);

  return v3;
}

id *sub_10033C238(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)CallerRequestPresenter;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

void sub_10033C2B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  uint64_t v14 = 0;
  long long v15 = &v14;
  uint64_t v16 = 0x3032000000;
  id v17 = sub_100018248;
  uint64_t v18 = sub_100017CE0;
  id v19 = sub_10033C238((id *)[CallerRequestPresenter alloc], v7);
  uint64_t v9 = (void *)v15[5];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10033C40C;
  v11[3] = &unk_100528AA0;
  id v10 = v8;
  id v12 = v10;
  id v13 = &v14;
  [v9 presentAuthenticateRequest:v6 resultHandler:v11];

  _Block_object_dispose(&v14, 8);
}

void sub_10033C3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033C40C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_10033C5A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    uint64_t v9 = [*(id *)(a1 + 32) logKey];
    int v11 = 138543362;
    id v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Authentication request completed successfully", (uint8_t *)&v11, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = [*(id *)(a1 + 32) logKey];
    int v11 = 138543618;
    id v12 = v9;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Authentication request failed: %{public}@", (uint8_t *)&v11, 0x16u);
LABEL_4:
  }
LABEL_6:

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }
}

void sub_10033C7FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    uint64_t v9 = [*(id *)(a1 + 32) logKey];
    int v11 = 138543362;
    id v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Dialog request completed successfully", (uint8_t *)&v11, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = [*(id *)(a1 + 32) logKey];
    int v11 = 138543618;
    id v12 = v9;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Dialog request failed: %{public}@", (uint8_t *)&v11, 0x16u);
LABEL_4:
  }
LABEL_6:

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }
}

void sub_10033CA2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    uint64_t v9 = [*(id *)(a1 + 32) logKey];
    int v11 = 138543362;
    id v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Engagement request completed successfully", (uint8_t *)&v11, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = [*(id *)(a1 + 32) logKey];
    int v11 = 138543618;
    id v12 = v9;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Engagement request failed: %{public}@", (uint8_t *)&v11, 0x16u);
LABEL_4:
  }
LABEL_6:

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }
}

id sub_10033CBA4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  uint64_t v5 = self;
  uint64_t v20 = 0;
  __int16 v21 = &v20;
  uint64_t v22 = 0x3032000000;
  uint64_t v23 = sub_100018248;
  id v24 = sub_100017CE0;
  id v25 = 0;
  uint64_t v14 = 0;
  long long v15 = &v14;
  uint64_t v16 = 0x3032000000;
  id v17 = sub_100018248;
  uint64_t v18 = sub_100017CE0;
  id v19 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10033CD7C;
  v10[3] = &unk_100528AF0;
  id v12 = &v20;
  __int16 v13 = &v14;
  id v6 = dispatch_semaphore_create(0);
  int v11 = v6;
  sub_10033CE18(v5, v4, v10);
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  id v7 = (void *)v21[5];
  if (a3 && !v7)
  {
    *a3 = (id) v15[5];
    id v7 = (void *)v21[5];
  }
  id v8 = v7;

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v20, 8);

  return v8;
}

void sub_10033CD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10033CD7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10033CE18(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = sub_100018248;
  long long v15 = sub_100017CE0;
  uint64_t v16 = objc_alloc_init(InteractiveRequestPresenter);
  id v6 = (void *)v12[5];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10033D0E4;
  v8[3] = &unk_100528AC8;
  id v7 = v5;
  id v9 = v7;
  uint64_t v10 = &v11;
  [v6 presentDialogRequest:v4 resultHandler:v8];

  _Block_object_dispose(&v11, 8);
}

void sub_10033CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033CF54(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = sub_100018248;
  long long v15 = sub_100017CE0;
  uint64_t v16 = objc_alloc_init(InteractiveRequestPresenter);
  id v6 = (void *)v12[5];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10033D090;
  v8[3] = &unk_100528AA0;
  id v7 = v5;
  id v9 = v7;
  uint64_t v10 = &v11;
  [v6 presentAuthenticateRequest:v4 resultHandler:v8];

  _Block_object_dispose(&v11, 8);
}

void sub_10033D078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033D090(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_10033D0E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_10033D2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033D308(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v9 = [*(id *)(a1 + 32) logKey];
    int v13 = 138543362;
    uint64_t v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Authentication request completed successfully", (uint8_t *)&v13, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    id v9 = [*(id *)(a1 + 32) logKey];
    int v13 = 138543618;
    uint64_t v14 = v9;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Authentication request failed: %{public}@", (uint8_t *)&v13, 0x16u);
LABEL_4:
  }
LABEL_6:

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
}

void sub_10033D494(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = +[NSNotificationCenter defaultCenter];
    [v9 postNotificationName:@"RequestPresenterWillPresentUINotification" object:0];

    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x3032000000;
    uint64_t v18 = sub_100018248;
    id v19 = sub_100017CE0;
    id v20 = [objc_alloc((Class)AMSSystemAlertDialogTask) initWithRequest:v7];
    if (a3 && (objc_opt_respondsToSelector() & 1) != 0) {
      [(id)v16[5] setShouldPendInSetupIfNotAllowed:1];
    }
    uint64_t v10 = [(id)v16[5] present];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10033D648;
    v11[3] = &unk_100528B40;
    id v12 = v7;
    id v13 = v8;
    uint64_t v14 = &v15;
    [v10 addFinishBlock:v11];

    _Block_object_dispose(&v15, 8);
  }
}

void sub_10033D630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033D648(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v9 = [*(id *)(a1 + 32) logKey];
    int v14 = 138412290;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Dialog request completed successfully", (uint8_t *)&v14, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    id v9 = [*(id *)(a1 + 32) logKey];
    int v14 = 138412546;
    uint64_t v15 = v9;
    __int16 v16 = 2114;
    id v17 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Dialog request failed: %{public}@", (uint8_t *)&v14, 0x16u);
LABEL_4:
  }
LABEL_6:

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11) {
    sub_1004224B8(v11, v5, v6, &stru_10052D918);
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
}

void sub_10033D970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033D988(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v9 = [*(id *)(a1 + 32) logKey];
    int v13 = 138412290;
    int v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Engagement request completed successfully", (uint8_t *)&v13, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    id v9 = [*(id *)(a1 + 32) logKey];
    int v13 = 138412546;
    int v14 = v9;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Engagement request failed: %{public}@", (uint8_t *)&v13, 0x16u);
LABEL_4:
  }
LABEL_6:

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
}

void sub_10033DDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033DDD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v9 = [*(id *)(a1 + 32) logKey];
    int v13 = 138543362;
    int v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Authentication request completed successfully", (uint8_t *)&v13, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    id v9 = [*(id *)(a1 + 32) logKey];
    int v13 = 138543618;
    int v14 = v9;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Authentication request failed: %{public}@", (uint8_t *)&v13, 0x16u);
LABEL_4:
  }
LABEL_6:

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
}

void **sub_10033E210(void **a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    uint64_t v3 = [a2 currentRequest];
    id v4 = sub_100277E8C(v3);

    if (v4)
    {
      sub_1001F5344(v2[1], v4);
      uint64_t v2 = (void **)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  return v2;
}

void sub_10033E4C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138543362;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Authentication request completed successfully", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138543618;
    uint64_t v12 = v10;
    __int16 v13 = 2114;
    id v14 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Authentication request failed: %{public}@", (uint8_t *)&v11, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10033E838(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138543362;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Dialog request completed successfully", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138543618;
    uint64_t v12 = v10;
    __int16 v13 = 2114;
    id v14 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Dialog request failed: %{public}@", (uint8_t *)&v11, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10033EBE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138543362;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Engagement request completed successfully", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138543618;
    uint64_t v12 = v10;
    __int16 v13 = 2114;
    id v14 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Engagement request failed: %{public}@", (uint8_t *)&v11, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10033EF3C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = objc_opt_class();
    id v4 = *(void **)(a1 + 48);
    id v5 = v3;
    id v6 = [v4 count];
    id v7 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
    int v8 = 138413058;
    uint64_t v9 = v3;
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    __int16 v13 = v2;
    __int16 v14 = 2112;
    __int16 v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[%@]: Canceling %lu job(s) for client %@: %@", (uint8_t *)&v8, 0x2Au);
  }
  sub_10033F0AC(*(void *)(a1 + 32), *(void **)(a1 + 48), &stru_100528BB0);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10033F09C(id a1, AppInstallsDatabaseTransaction *a2, int64_t a3)
{
}

void sub_10033F0AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = sub_1003923F8(a2, &stru_100528C78);
    id v7 = sub_1003E0BA4();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10034134C;
    v9[3] = &unk_100528CF0;
    id v10 = v6;
    id v11 = v5;
    id v8 = v6;
    [v7 modifyUsingTransaction:v9];
  }
}

void sub_10033F298(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = objc_opt_class();
    id v4 = *(void **)(a1 + 48);
    id v5 = v3;
    id v6 = [v4 count];
    id v7 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
    int v8 = 138413058;
    uint64_t v9 = v3;
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    __int16 v13 = v2;
    __int16 v14 = 2112;
    __int16 v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[%@]: Finishing %lu job(s) for client %@: %@", (uint8_t *)&v8, 0x2Au);
  }
  sub_10033F0AC(*(void *)(a1 + 32), *(void **)(a1 + 48), &stru_100528BD0);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10033F3F0(id a1, AppInstallsDatabaseTransaction *a2, int64_t a3)
{
}

void sub_10033F4D8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412546;
    id v7 = (id)objc_opt_class();
    __int16 v8 = 2112;
    uint64_t v9 = v2;
    id v3 = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "[%@]: Fetching all jobs for client %@", (uint8_t *)&v6, 0x16u);
  }
  id v4 = sub_10033F5EC(*(void **)(a1 + 32), v2);
  (*(void (**)(void, void *, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v4, v5);
}

id sub_10033F5EC(void *a1, void *a2)
{
  if (a1)
  {
    a1 = sub_10033F8A8(a1, 0, a2);
    uint64_t v2 = vars8;
  }
  return a1;
}

void sub_10033F724(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    id v3 = objc_opt_class();
    id v4 = *(void **)(a1 + 48);
    id v5 = v3;
    id v6 = [v4 count];
    id v7 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
    int v11 = 138413058;
    __int16 v12 = v3;
    __int16 v13 = 2048;
    id v14 = v6;
    __int16 v15 = 2112;
    id v16 = v2;
    __int16 v17 = 2112;
    uint64_t v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "[%@]: Fetching %lu job(s) for client %@: %@", (uint8_t *)&v11, 0x2Au);
  }
  __int16 v8 = *(void **)(a1 + 32);
  uint64_t v9 = +[NSOrderedSet orderedSetWithArray:*(void *)(a1 + 48)];
  __int16 v10 = sub_10033F8A8(v8, v9, v2);

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id sub_10033F8A8(id a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = [a2 array];
    id v7 = sub_1003923F8(v6, &stru_100528D60);

    sub_100341650(v3, v7, v5);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

void sub_10033FA3C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = objc_opt_class();
    id v4 = *(void **)(a1 + 48);
    id v5 = v3;
    id v6 = [v4 count];
    id v7 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
    int v8 = 138413058;
    uint64_t v9 = v3;
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    __int16 v13 = v2;
    __int16 v14 = 2112;
    __int16 v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[%@]: Pausing %lu job(s) for client %@: %@", (uint8_t *)&v8, 0x2Au);
  }
  sub_10033F0AC(*(void *)(a1 + 32), *(void **)(a1 + 48), &stru_100528BF0);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10033FB9C(id a1, AppInstallsDatabaseTransaction *a2, int64_t a3)
{
  if (a2) {
    sub_1002386A4((id *)&a2->super.super.isa, (void *)a3, -10, 2uLL);
  }
}

void sub_10033FCB8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  sub_1002A9C8C((uint64_t)v2, *(void **)(a1 + 48));
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138412546;
    id v18 = (id)objc_opt_class();
    __int16 v19 = 2112;
    id v20 = v2;
    id v3 = v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[%@]: Registered legacy client: %@", buf, 0x16u);
  }
  id v4 = sub_10033F5EC(*(void **)(a1 + 32), v2);
  id v5 = objc_alloc_init((Class)NSMutableArray);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v13;
    do
    {
      __int16 v10 = 0;
      do
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v10), "persistentID", (void)v12));
        [v5 addObject:v11];

        __int16 v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v8);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  sub_1002A92E4((uint64_t)v2, v6);
}

void sub_10033FFCC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = objc_opt_class();
    id v4 = *(void **)(a1 + 48);
    id v5 = v3;
    id v6 = [v4 count];
    id v7 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
    int v8 = 138413058;
    uint64_t v9 = v3;
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    long long v13 = v2;
    __int16 v14 = 2112;
    long long v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[%@]: Resuming %lu job(s) for client %@: %@", (uint8_t *)&v8, 0x2Au);
  }
  sub_10033F0AC(*(void *)(a1 + 32), *(void **)(a1 + 48), &stru_100528C10);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10034012C(id a1, AppInstallsDatabaseTransaction *a2, int64_t a3)
{
}

void sub_10034056C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100340618;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_100340618(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100340738;
  v8[3] = &unk_100528C38;
  void v8[4] = *(void *)(a1 + 40);
  [v2 enumerateKeysAndObjectsUsingBlock:v8];
  uint64_t v3 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v3 + 32))
  {
    sub_100340750(v3, *(void **)(a1 + 32));
    *(unsigned char *)(*(void *)(a1 + 40) + 32) = 1;
    dispatch_time_t v4 = dispatch_time(0, 500000000);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(NSObject **)(v5 + 16);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100340800;
    v7[3] = &unk_100521388;
    void v7[4] = v5;
    dispatch_after(v4, v6, v7);
  }
}

id sub_100340738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) setObject:a3 forKeyedSubscript:a2];
}

void sub_100340750(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100342244;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_100340800(uint64_t a1)
{
}

void sub_100340808(uint64_t a1)
{
  if (a1)
  {
    if ([*(id *)(a1 + 24) count])
    {
      sub_100340750(a1, *(void **)(a1 + 24));
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t v2 = [*(id *)(a1 + 24) allKeys];
      id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v3)
      {
        id v4 = v3;
        uint64_t v5 = *(void *)v14;
        do
        {
          for (i = 0; i != v4; i = (char *)i + 1)
          {
            if (*(void *)v14 != v5) {
              objc_enumerationMutation(v2);
            }
            uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8 * i);
            uint64_t v8 = [*(id *)(a1 + 24) objectForKeyedSubscript:v7];
            unsigned int v9 = [v8 isEqualToNumber:&off_10054C9A8];

            if (v9) {
              [*(id *)(a1 + 24) setObject:0 forKeyedSubscript:v7];
            }
          }
          id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v4);
      }

      dispatch_time_t v10 = dispatch_time(0, 500000000);
      id v11 = *(NSObject **)(a1 + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1003409F8;
      block[3] = &unk_100521388;
      void block[4] = a1;
      dispatch_after(v10, v11, block);
    }
    else
    {
      *(unsigned char *)(a1 + 32) = 0;
    }
  }
}

uint64_t sub_1003409F8(uint64_t a1)
{
  return sub_100340808(*(void *)(a1 + 32));
}

void sub_100340E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void sub_100340E6C(uint64_t a1)
{
  uint64_t v2 = [[JobManagerClient alloc] initWithConnection:*(void *)(a1 + 32)];
  [*(id *)(*(void *)(a1 + 40) + 8) setObject:v2 forKey:*(void *)(a1 + 32)];
}

id sub_100340ED8(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init((Class)NSMutableOrderedSet);
    uint64_t v5 = sub_1003E0BA4();
    uint64_t v8 = _NSConcreteStackBlock;
    uint64_t v9 = 3221225472;
    dispatch_time_t v10 = sub_100340FC4;
    id v11 = &unk_100525BC8;
    id v12 = v3;
    id v13 = v4;
    id v6 = v4;
    [v5 readUsingSession:&v8];

    a1 = objc_msgSend(v6, "copy", v8, v9, v10, v11);
  }

  return a1;
}

void sub_100340FC4(uint64_t a1, void *a2)
{
  id v3 = [a2 connection];
  id v4 = sub_1002A91E4(*(id *)(a1 + 32));
  uint64_t v5 = sub_1002FF548((uint64_t)AppInstallEntity, v3, v4);

  CFStringRef v9 = @"external_id";
  id v6 = +[NSArray arrayWithObjects:&v9 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100341100;
  v7[3] = &unk_100527420;
  id v8 = *(id *)(a1 + 40);
  [v5 enumeratePersistentIDsAndProperties:v6 usingBlock:v7];
}

void sub_100341100(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 objectForKeyedSubscript:@"external_id"];
  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = v4;
  if (v4)
  {
    v10[0] = 0;
    v10[1] = 0;
    [v4 getUUIDBytes:v10];
    uint64_t v6 = v10[0];
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v6, v8);
  [v5 addObject:v7];
}

void sub_1003411CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v4 = objc_msgSend(*(id *)(a1 + 8), "objectEnumerator", 0);
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * (void)v8);
          v3[2](v3, v9);
          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }
  }
}

id sub_100341308(id a1, NSNumber *a2)
{
  uint64_t v2 = [(NSNumber *)a2 longLongValue];
  return sub_100263D1C((uint64_t)NSUUID, v2);
}

uint64_t sub_10034134C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1003414C8;
  v15[3] = &unk_100528CA0;
  id v16 = v4;
  id v5 = sub_1003923F8(v16, v15);
  id v6 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v5];
  uint64_t v7 = [v3 connection];
  id v8 = sub_1002FF548((uint64_t)AppInstallEntity, v7, v6);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100341590;
  v12[3] = &unk_100528CC8;
  id v9 = *(id *)(a1 + 40);
  id v13 = v3;
  id v14 = v9;
  id v10 = v3;
  [v8 enumeratePersistentIDsUsingBlock:v12];

  return 1;
}

id sub_1003414C8(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) firstObject];
  uint64_t v2 = [v1 UUIDString];
  id v3 = [v2 substringToIndex:18];

  id v4 = +[NSString stringWithFormat:@"%@%%", v3];
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"external_id" value:v4 comparisonType:7];

  return v5;
}

uint64_t sub_100341590(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

uint64_t sub_1003415A8(uint64_t result, uint64_t a2)
{
  if (result)
  {
    double result = 9;
    if (a2 <= -16)
    {
      uint64_t v3 = 3;
      if (a2 != -20) {
        uint64_t v3 = 9;
      }
      if (a2 == -30) {
        uint64_t v3 = 0;
      }
      if (a2 == -40) {
        return 4;
      }
      else {
        return v3;
      }
    }
    else
    {
      char v2 = a2 + 5;
      if ((unint64_t)(a2 + 5) <= 0x37)
      {
        if (((1 << v2) & 0x84200000000001) != 0) {
          return 5;
        }
        if (((1 << v2) & 0x2100000) != 0) {
          return 7;
        }
        if (a2 == 30) {
          return 2;
        }
      }
      if (a2 == -15 || a2 == -10) {
        return 6;
      }
    }
  }
  return result;
}

id sub_100341650(id a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = a3;
    uint64_t v7 = objc_opt_new();
    id v8 = sub_1002A91E4(v6);

    id v9 = +[NSMutableArray arrayWithObject:v8];

    if (v5)
    {
      id v10 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"external_id" values:v5];
      [v9 addObject:v10];
    }
    long long v11 = sub_1003E0BA4();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1003417D4;
    v15[3] = &unk_100528D40;
    id v16 = v9;
    id v17 = a1;
    id v18 = v7;
    id v12 = v7;
    id v13 = v9;
    [v11 readUsingSession:v15];

    a1 = [v12 copy];
  }

  return a1;
}

void sub_1003417D4(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v5 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v3];
  id v6 = [v4 connection];

  uint64_t v7 = sub_1002FF548((uint64_t)AppInstallEntity, v6, v5);

  v12[0] = @"bundle_id";
  v12[1] = @"external_id";
  void v12[2] = @"failure_error";
  v12[3] = @"item_id";
  void v12[4] = @"IFNULL(app_install.phase, 10)";
  id v8 = +[NSArray arrayWithObjects:v12 count:5];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100341960;
  v10[3] = &unk_100528D18;
  id v9 = (void *)a1[6];
  void v10[4] = a1[5];
  id v11 = v9;
  [v7 enumeratePersistentIDsAndProperties:v8 usingBlock:v10];
}

void sub_100341960(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v17 = [v4 objectForKeyedSubscript:@"external_id"];
  id v5 = objc_alloc((Class)ASDJob);
  if (v17)
  {
    v19[0] = 0;
    v19[1] = 0;
    [v17 getUUIDBytes:v19];
    uint64_t v6 = v19[0];
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(v5, "initWithPersistentID:", v6, v17);
  id v8 = [v4 objectForKeyedSubscript:@"bundle_id"];
  [v7 setBundleID:v8];

  id v9 = [v4 objectForKeyedSubscript:@"item_id"];
  objc_msgSend(v7, "setStoreItemID:", objc_msgSend(v9, "unsignedLongLongValue"));

  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = [v4 objectForKeyedSubscript:@"IFNULL(app_install.phase, 10)"];
  objc_msgSend(v7, "setPhase:", sub_1003415A8(v10, (uint64_t)objc_msgSend(v11, "integerValue")));

  [v7 setType:2];
  id v12 = [v4 objectForKeyedSubscript:@"failure_error"];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v13 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v12 error:0];
    [v7 setFailureError:v13];
  }
  id v14 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:v18];
  long long v15 = v14;
  if (v14) {
    [v14 doubleValue];
  }
  else {
    double v16 = -1.0;
  }
  [v7 setPercentComplete:v16];
  [*(id *)(a1 + 40) addObject:v7];
}

id sub_100341B9C(id a1, NSNumber *a2)
{
  uint64_t v2 = [(NSNumber *)a2 longLongValue];
  return sub_100263D1C((uint64_t)NSUUID, v2);
}

void sub_100341BE0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412546;
    id v5 = (id)objc_opt_class();
    __int16 v6 = 2112;
    id v7 = v2;
    id v3 = v5;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[%@]: Client %@ disconnected", (uint8_t *)&v4, 0x16u);
  }
}

void sub_100341CD8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = objc_opt_class();
    int v5 = *(_DWORD *)(a1 + 40);
    int v7 = 138543618;
    id v8 = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    id v6 = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[%{public}@]: Connection interrupted for pid: %i", (uint8_t *)&v7, 0x12u);
  }
}

void sub_100341DC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  int v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = objc_opt_class();
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)id v11 = 138543618;
    *(void *)&void v11[4] = v5;
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = v6;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}@]: Connection invalidated from pid: %i", v11, 0x12u);
  }
  id v8 = v3;
  __int16 v9 = v8;
  if (WeakRetained)
  {
    int v10 = WeakRetained[2];
    *(void *)id v11 = _NSConcreteStackBlock;
    *(void *)&v11[8] = 3221225472;
    *(void *)&uint8_t v11[16] = sub_100341BE0;
    id v12 = &unk_1005218C0;
    id v13 = WeakRetained;
    id v14 = v8;
    dispatch_sync(v10, v11);
  }
}

void sub_100341F34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100341FC4;
  void v2[3] = &unk_100528D88;
  v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  sub_1003411CC(v1, v2);
}

void sub_100341FC4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = sub_100341650(*(id *)(a1 + 32), *(void **)(a1 + 40), v4);
  if ([v3 count]) {
    sub_1002A92E4((uint64_t)v4, v3);
  }
}

void sub_100342034(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003420D8;
  v5[3] = &unk_100528DB0;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  sub_1003411CC(v2, v5);
}

void sub_1003420D8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  if (v3)
  {
    v16[0] = 0;
    v16[1] = 0;
    [v3 getUUIDBytes:v16];
    uint64_t v5 = v16[0];
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = +[NSNumber numberWithLongLong:v5];
  uint64_t v7 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", sub_1003415A8(*(void *)(a1 + 40), (uint64_t)[*(id *)(a1 + 48) integerValue]));
  id v14 = v6;
  long long v15 = v7;
  id v8 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
  sub_1002A987C((uint64_t)v4, v8);

  id v13 = v6;
  __int16 v9 = +[NSArray arrayWithObjects:&v13 count:1];
  id v11 = v6;
  id v12 = v7;
  int v10 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  sub_1002A94EC((uint64_t)v4, v9, v10);
}

void sub_100342244(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1003422D4;
  void v2[3] = &unk_100528D88;
  v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  sub_1003411CC(v1, v2);
}

void sub_1003422D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100340ED8(*(id *)(a1 + 32), v3);
  id v5 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  id v6 = *(void **)(a1 + 40);
  id v12 = _NSConcreteStackBlock;
  uint64_t v13 = 3221225472;
  id v14 = sub_100342498;
  long long v15 = &unk_100528DD8;
  id v7 = v4;
  id v16 = v7;
  id v8 = v5;
  id v17 = v8;
  [v6 enumerateKeysAndObjectsUsingBlock:&v12];
  if (objc_msgSend(v8, "count", v12, v13, v14, v15))
  {
    __int16 v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v10 = objc_opt_class();
      *(_DWORD *)int buf = 138412802;
      __int16 v19 = v10;
      __int16 v20 = 2112;
      id v21 = v3;
      __int16 v22 = 2112;
      id v23 = v8;
      id v11 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[%@]: Sending progress: %@ -> %@", buf, 0x20u);
    }
    sub_1002A9A84((uint64_t)v3, v8);
  }
}

void sub_100342498(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  if (a2)
  {
    v9[0] = 0;
    v9[1] = 0;
    [a2 getUUIDBytes:v9];
    uint64_t v5 = v9[0];
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v5, v7);
  if ([*(id *)(a1 + 32) containsObject:v6]) {
    [*(id *)(a1 + 40) setObject:v8 forKey:v6];
  }
}

void sub_100342570(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    id v4 = objc_opt_class();
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)int buf = 138412546;
    int v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    id v6 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[%@]: NOTIFY STATES: %@", buf, 0x16u);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003426B4;
  v7[3] = &unk_100528D88;
  void v7[4] = v3;
  id v8 = *(id *)(a1 + 40);
  sub_1003411CC(v3, v7);
}

void sub_1003426B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100340ED8(*(id *)(a1 + 32), v3);
  id v5 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  id v6 = *(void **)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10034287C;
  v13[3] = &unk_100528E00;
  id v7 = v4;
  id v14 = v7;
  id v8 = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v8;
  uint64_t v16 = v9;
  [v6 enumerateKeysAndObjectsUsingBlock:v13];
  if ([v8 count])
  {
    int v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      __int16 v11 = objc_opt_class();
      *(_DWORD *)int buf = 138412802;
      id v18 = v11;
      __int16 v19 = 2112;
      id v20 = v3;
      __int16 v21 = 2112;
      id v22 = v8;
      id v12 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%@]: NOTIFY CLIENT: %@ -> %@", buf, 0x20u);
    }
    sub_1002A987C((uint64_t)v3, v8);
  }
}

void sub_10034287C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  if (a2)
  {
    v10[0] = 0;
    v10[1] = 0;
    [a2 getUUIDBytes:v10];
    uint64_t v5 = v10[0];
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v5, v8);
  if ([*(id *)(a1 + 32) containsObject:v6])
  {
    id v7 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", sub_1003415A8(*(void *)(a1 + 48), (uint64_t)[v9 integerValue]));
    [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v6];
  }
}

BOOL sub_1003429EC(BOOL a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:12];
    uint64_t v5 = v4;
    if (v3)
    {
      id v6 = v3[1];
      [v5 setObject:v6 forKeyedSubscript:@"app_adam_id"];

      id v7 = v3[2];
    }
    else
    {
      [v4 setObject:0 forKeyedSubscript:@"app_adam_id"];
      id v7 = 0;
    }
    id v8 = v7;
    [v5 setObject:v8 forKeyedSubscript:@"ad_network_id"];

    if (v3)
    {
      id v9 = v3[5];
      [v5 setObject:v9 forKeyedSubscript:@"impression_id"];

      id v10 = v3[6];
    }
    else
    {
      [v5 setObject:0 forKeyedSubscript:@"impression_id"];
      id v10 = 0;
    }
    id v11 = v10;
    [v5 setObject:v11 forKeyedSubscript:@"source_app_adam_id"];

    if (v3)
    {
      id v12 = v3[7];
      [v5 setObject:v12 forKeyedSubscript:@"timestamp"];

      id v13 = v3[9];
    }
    else
    {
      [v5 setObject:0 forKeyedSubscript:@"timestamp"];
      id v13 = 0;
    }
    id v14 = v13;
    [v5 setObject:v14 forKeyedSubscript:@"attribution_signature"];

    if (v3)
    {
      id v15 = v3[10];
      [v5 setObject:v15 forKeyedSubscript:@"version"];

      id v16 = v3[11];
    }
    else
    {
      [v5 setObject:0 forKeyedSubscript:@"version"];
      id v16 = 0;
    }
    id v17 = v16;
    [v5 setObject:v17 forKeyedSubscript:@"source_app_bundle_id"];

    if (v3)
    {
      id v18 = +[NSNumber numberWithInteger:v3[12]];
      [v5 setObject:v18 forKeyedSubscript:@"fidelity_type"];

      id v19 = v3[13];
    }
    else
    {
      uint64_t v27 = +[NSNumber numberWithInteger:0];
      [v5 setObject:v27 forKeyedSubscript:@"fidelity_type"];

      id v19 = 0;
    }
    id v20 = v19;
    [v5 setObject:v20 forKeyedSubscript:@"process_name"];

    if (v3)
    {
      id v21 = v3[8];
      [v5 setObject:v21 forKeyedSubscript:@"local_timestamp"];

      id v22 = v3[10];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = ASDInstallAttributionVersionCreateFromString();

        if (v24 >= 400)
        {
          id v25 = v3[4];
          id v26 = &off_10052C408;
LABEL_24:
          id v28 = +[NSNumber numberWithInteger:v25];
          [v5 setObject:v28 forKeyedSubscript:*v26];

          uint64_t v29 = [InstallAttributionImpressionDatabaseEntity alloc];
          NSErrorUserInfoKey v30 = [(id)a1 connection];
          unint64_t v31 = [(SQLiteEntity *)v29 initWithPropertyValues:v5 onConnection:v30];

          a1 = [(SQLiteEntity *)v31 existsInDatabase];
          goto LABEL_25;
        }
      }
      id v25 = v3[3];
    }
    else
    {
      [v5 setObject:0 forKeyedSubscript:@"local_timestamp"];
      id v25 = 0;
    }
    id v26 = &off_10052C400;
    goto LABEL_24;
  }
LABEL_25:

  return a1;
}

BOOL sub_100342D6C(void *a1, void *a2, void *a3)
{
  id v4 = a2;
  v156 = a1;
  if (a1)
  {
    uint64_t v5 = objc_opt_new();
    id v6 = (void *)v5;
    if (v4)
    {
      id v7 = v4[1];
      sub_100263BD8((uint64_t)v6, v7);

      id v8 = v4[2];
    }
    else
    {
      sub_100263BD8(v5, 0);
      id v8 = 0;
    }
    id v9 = v8;
    sub_100263BE8((uint64_t)v6, v9);

    if (v4)
    {
      id v10 = v4[10];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = ASDInstallAttributionVersionCreateFromString();

        if (v12 >= 400)
        {
          if (v6) {
            void v6[4] = v4[4];
          }
          goto LABEL_15;
        }
      }
      id v13 = v4[3];
    }
    else
    {
      id v13 = 0;
    }
    if (v6) {
      v6[3] = v13;
    }
    if (!v4)
    {
      sub_100263BF8((uint64_t)v6, 0);
      id v15 = 0;
LABEL_16:
      id v16 = v15;
      sub_100263C38((uint64_t)v6, v16);

      if (v4)
      {
        id v17 = v4[9];
        sub_100263C48((uint64_t)v6, v17);

        id v18 = v4[6];
      }
      else
      {
        sub_100263C48((uint64_t)v6, 0);
        id v18 = 0;
      }
      id v19 = v18;
      sub_100263C18((uint64_t)v6, v19);

      if (v4)
      {
        id v20 = v4[10];
        sub_100263C58((uint64_t)v6, v20);

        id v21 = v4[12];
        if (!v6) {
          goto LABEL_21;
        }
      }
      else
      {
        sub_100263C58((uint64_t)v6, 0);
        id v21 = 0;
        if (!v6)
        {
LABEL_21:
          if (v4) {
            id v22 = v4[8];
          }
          else {
            id v22 = 0;
          }
          id v23 = v22;
          sub_10027030C((uint64_t)v6, v23);

          sub_100270214((uint64_t)v6, ASDInstallAttributionInteractionTypeView);
          uint64_t v24 = +[SKANEnvironmentHelper environmentForParams:v6];
          sub_100270224((uint64_t)v6, v24);

          id v25 = v4;
          id v26 = v25;
          if (v4) {
            id v27 = v25[6];
          }
          else {
            id v27 = 0;
          }
          id v28 = v27;
          +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"source_app_adam_id", [v28 unsignedLongLongValue]);
          id v154 = (id)objc_claimAutoreleasedReturnValue();

          if (v4) {
            id v29 = v26[1];
          }
          else {
            id v29 = 0;
          }
          id v30 = v29;
          unint64_t v31 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v30 unsignedLongLongValue]);

          id v178 = v154;
          v179 = v31;
          id v32 = +[NSArray arrayWithObjects:&v178 count:2];
          uint64_t v33 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v32];

          *(void *)v164 = @"app_adam_id";
          *(void *)&v164[8] = @"ad_network_id";
          *(void *)&v164[16] = @"campaign_id";
          v165 = (uint64_t (*)(uint64_t, uint64_t))@"source_identifier";
          v166 = (void (*)(uint64_t))@"impression_id";
          v167 = @"source_app_adam_id";
          CFStringRef v168 = @"local_timestamp";
          CFStringRef v169 = @"version";
          CFStringRef v170 = @"source_app_bundle_id";
          CFStringRef v171 = @"fidelity_type";
          CFStringRef v172 = @"process_name";
          id v34 = +[NSArray arrayWithObjects:v164 count:11];
          v157 = 0;
          uint64_t v158 = (uint64_t)&v157;
          uint64_t v159 = 0x3032000000;
          v160 = sub_100018258;
          v161 = sub_100017CE8;
          id v162 = 0;
          long long v35 = [v156 connection];
          id v36 = sub_1002FF548((uint64_t)InstallAttributionImpressionDatabaseEntity, v35, v33);

          CFStringRef v173 = (const __CFString *)_NSConcreteStackBlock;
          uint64_t v174 = 3221225472;
          CFStringRef v175 = (const __CFString *)sub_1003481F0;
          CFStringRef v176 = (const __CFString *)&unk_100526568;
          CFStringRef v177 = (const __CFString *)&v157;
          [v36 enumeratePersistentIDsAndProperties:v34 usingBlock:&v173];
          if (!*(void *)(v158 + 40))
          {
            long long v40 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              if (v4)
              {
                id v63 = v26[11];
                id v64 = v26[6];
              }
              else
              {
                id v63 = 0;
                id v64 = 0;
              }
              id v65 = v64;
              *(_DWORD *)int buf = 138543618;
              *(void *)&uint8_t buf[4] = v63;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v65;
              _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Cannot find started impression from source app bundle ID:%{public}@, adam ID:%{public}@", buf, 0x16u);
            }
            long long v41 = ASDErrorWithDescription();
            goto LABEL_88;
          }
          if (v4)
          {
            id v37 = v26[10];
            if (v37 && ASDInstallAttributionVersionCreateFromString() >= 400)
            {
              id v38 = *(void **)(v158 + 40);
              if (v38) {
                id v38 = (void *)v38[4];
              }
              BOOL v39 = v26[4] == v38;

              goto LABEL_40;
            }
            long long v42 = v26[3];
          }
          else
          {
            id v37 = 0;
            long long v42 = 0;
          }
          long long v43 = *(void **)(v158 + 40);
          if (v43) {
            long long v43 = (void *)v43[3];
          }
          BOOL v39 = v42 == v43;

          if (!v4)
          {
            id v44 = 0;
LABEL_41:
            id v45 = v44;
            __int16 v46 = *(void **)(v158 + 40);
            if (v46) {
              __int16 v46 = (void *)v46[1];
            }
            __int16 v47 = v46;
            if ([v45 isEqualToNumber:v47])
            {
              if (v4) {
                id v48 = v26[2];
              }
              else {
                id v48 = 0;
              }
              id v150 = v48;
              id v49 = *(void **)(v158 + 40);
              if (v49) {
                id v49 = (void *)v49[2];
              }
              v148 = v49;
              if ((objc_msgSend(v150, "isEqualToString:") & v39) == 1)
              {
                if (v4) {
                  id v50 = v26[5];
                }
                else {
                  id v50 = 0;
                }
                id v51 = v50;
                __int16 v52 = *(void **)(v158 + 40);
                if (v52) {
                  __int16 v52 = (void *)v52[5];
                }
                v146 = v52;
                if (objc_msgSend(v51, "isEqualToString:"))
                {
                  if (v4) {
                    id v53 = v26[6];
                  }
                  else {
                    id v53 = 0;
                  }
                  id v144 = v53;
                  unsigned int v54 = *(void **)(v158 + 40);
                  if (v54) {
                    unsigned int v54 = (void *)v54[6];
                  }
                  CFStringRef v143 = v54;
                  if (objc_msgSend(v144, "isEqualToNumber:"))
                  {
                    if (v4) {
                      id v55 = v26[10];
                    }
                    else {
                      id v55 = 0;
                    }
                    id v142 = v55;
                    long long v56 = *(void **)(v158 + 40);
                    if (v56) {
                      long long v56 = (void *)v56[10];
                    }
                    id v141 = v56;
                    if (objc_msgSend(v142, "isEqualToString:"))
                    {
                      if (v4) {
                        id v57 = v26[11];
                      }
                      else {
                        id v57 = 0;
                      }
                      id v140 = v57;
                      id v58 = *(void **)(v158 + 40);
                      if (v58) {
                        id v58 = (void *)v58[11];
                      }
                      v139 = v58;
                      if (!objc_msgSend(v140, "isEqualToString:")) {
                        goto LABEL_138;
                      }
                      if (v4) {
                        id v59 = v26[12];
                      }
                      else {
                        id v59 = 0;
                      }
                      id v60 = *(void **)(v158 + 40);
                      if (v60) {
                        id v60 = (void *)v60[12];
                      }
                      if (v59 == v60)
                      {
                        if (v4) {
                          id v61 = v26[13];
                        }
                        else {
                          id v61 = 0;
                        }
                        id v137 = v61;
                        id v62 = *(void **)(v158 + 40);
                        if (v62) {
                          id v62 = (void *)v62[13];
                        }
                        id v136 = v62;
                        unsigned __int8 v138 = objc_msgSend(v137, "isEqualToString:");
                      }
                      else
                      {
LABEL_138:
                        unsigned __int8 v138 = 0;
                      }

                      if (v138)
                      {
                        if (v4) {
                          id v127 = v26[8];
                        }
                        else {
                          id v127 = 0;
                        }
                        id v128 = v127;
                        [v128 doubleValue];
                        double v130 = v129;
                        id v131 = *(void **)(v158 + 40);
                        if (v131) {
                          id v131 = (void *)v131[8];
                        }
                        id v132 = v131;
                        [v132 doubleValue];
                        double v134 = v133;

                        id v135 = sub_100348470();
                        LODWORD(v132) = [v135 intValue];

                        if (vabdd_f64(v130, v134) >= (double)(1000 * (int)v132))
                        {
                          id v66 = 0;
                          char v67 = 1;
LABEL_89:

                          _Block_object_dispose(&v157, 8);
                          id v155 = v66;
                          if (v67)
                          {
                            if (!sub_100344100((BOOL)v156, v6, 0))
                            {
                              uint64_t v77 = ASDLogHandleForCategory();
                              if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
                              {
                                if (v4)
                                {
                                  id v78 = v26[11];
                                  id v79 = v26[6];
                                  id v80 = v78;
                                }
                                else
                                {
                                  id v78 = 0;
                                  id v80 = 0;
                                  id v79 = 0;
                                }
                                id v81 = v79;
                                *(_DWORD *)v164 = 138543618;
                                *(void *)&v164[4] = v78;
                                *(_WORD *)&v164[12] = 2114;
                                *(void *)&v164[14] = v81;
                                _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Failed to finalize impression for app bundle ID:%{public}@, adam ID:%{public}@", v164, 0x16u);
                              }
                              goto LABEL_130;
                            }
                            if (v4) {
                              id v68 = v26[6];
                            }
                            else {
                              id v68 = 0;
                            }
                            id v69 = v68;
                            v153 = sub_10034859C((uint64_t)v69);
                            long long v70 = [v156 connection];
                            v151 = sub_1002FF548((uint64_t)InstallAttributionParamsDatabaseEntity, v70, v153);

                            id v71 = [v151 countOfEntities];
                            long long v72 = sub_10030B11C();
                            v157 = 0;
                            long long v73 = sub_10030BE3C((uint64_t)v72, @"install-attribution-low-fidelity-cap", &off_10054C9F0, &v157);
                            long long v74 = v157;
                            if (v73)
                            {
                              long long v75 = v73;
                            }
                            else
                            {
                              id v82 = ASDLogHandleForCategory();
                              if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)v164 = 138543362;
                                *(void *)&v164[4] = v74;
                                _os_log_error_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "Could not fetch low fidelity impressions cap from bag, error:%{public}@", v164, 0xCu);
                              }

                              long long v75 = &off_10054C9F0;
                            }

                            unsigned int v83 = [v75 intValue];
                            if ((uint64_t)v71 <= (int)(v83 + 1))
                            {
                              if (v71 == (id)(int)(v83 + 1))
                              {
                                id v147 = v69;
                                *(void *)int buf = @"source_app_adam_id";
                                *(void *)&buf[8] = @"local_timestamp";
                                v145 = +[NSArray arrayWithObjects:buf count:2];
                                v149 = sub_10034859C((uint64_t)v147);
                                *(void *)v164 = 0;
                                *(void *)&v164[8] = v164;
                                *(void *)&v164[16] = 0x3032000000;
                                v165 = sub_100018258;
                                v166 = sub_100017CE8;
                                v167 = 0;
                                id v90 = [v156 connection];
                                CFStringRef v180 = @"local_timestamp";
                                __int16 v91 = +[NSArray arrayWithObjects:&v180 count:1];
                                id v92 = sub_1002FFC6C((uint64_t)InstallAttributionParamsDatabaseEntity, v90, v149, v91);

                                v157 = _NSConcreteStackBlock;
                                uint64_t v158 = 3221225472;
                                uint64_t v159 = (uint64_t)sub_1003486B0;
                                v160 = (uint64_t (*)(uint64_t, uint64_t))&unk_100526568;
                                v161 = (void (*)(uint64_t))v164;
                                [v92 enumeratePersistentIDsAndProperties:v145 usingBlock:&v157];
                                __int16 v93 = +[SQLiteComparisonPredicate predicateWithProperty:@"local_timestamp" equalToValue:*(void *)(*(void *)&v164[8] + 40)];
                                id v178 = v149;
                                v179 = v93;
                                id v94 = +[NSArray arrayWithObjects:&v178 count:2];
                                uint64_t v95 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v94];

                                id v96 = [v156 connection];
                                id v97 = sub_1002FF548((uint64_t)InstallAttributionParamsDatabaseEntity, v96, v95);

                                CFStringRef v173 = @"source_app_adam_id";
                                uint64_t v174 = @"app_adam_id";
                                CFStringRef v175 = @"ad_network_id";
                                CFStringRef v176 = @"version";
                                CFStringRef v177 = @"fidelity_type";
                                v98 = +[NSArray arrayWithObjects:&v173 count:5];
                                [v97 enumeratePersistentIDsAndProperties:v98 usingBlock:&stru_100528E60];
                                [v97 deleteAllEntities];

                                _Block_object_dispose(v164, 8);
                              }
                              else
                              {
                                SEL v99 = ASDLogHandleForCategory();
                                if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)v164 = 138543618;
                                  *(void *)&v164[4] = v69;
                                  *(_WORD *)&v164[12] = 2048;
                                  *(void *)&v164[14] = v71;
                                  _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "Not pruning impressions for source app:%{public}@, current count is:%ld", v164, 0x16u);
                                }
                              }
                            }
                            else
                            {
                              BOOL v84 = ASDLogHandleForCategory();
                              if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)v164 = 138543362;
                                *(void *)&v164[4] = v69;
                                _os_log_error_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "Impression count has violated cap for source app adam ID:%{public}@, purging.", v164, 0xCu);
                              }

                              id v85 = v69;
                              id v86 = sub_10034859C((uint64_t)v85);
                              __int16 v87 = [v156 connection];
                              id v88 = sub_1002FF548((uint64_t)InstallAttributionParamsDatabaseEntity, v87, v86);

                              [v88 deleteAllEntities];
                              __int16 v89 = ASDLogHandleForCategory();
                              if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)v164 = 138543362;
                                *(void *)&v164[4] = v85;
                                _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Purged all lo-fi params for source app:%{public}@", v164, 0xCu);
                              }
                            }
                            id v100 = ASDLogHandleForCategory();
                            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                            {
                              if (v4)
                              {
                                id v101 = v26[11];
                                id v102 = v26[6];
                                id v103 = v101;
                              }
                              else
                              {
                                id v101 = 0;
                                id v103 = 0;
                                id v102 = 0;
                              }
                              id v104 = v102;
                              *(_DWORD *)v164 = 138543618;
                              *(void *)&v164[4] = v101;
                              *(_WORD *)&v164[12] = 2114;
                              *(void *)&v164[14] = v104;
                              _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "Finalized impression for app bundle ID:%{public}@, adam ID:%{public}@", v164, 0x16u);
                            }
                          }
                          else
                          {
                            uint64_t v76 = ASDLogHandleForCategory();
                            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
                            {
                              if (v4)
                              {
                                id v121 = v26[11];
                                id v122 = v26[6];
                                id v123 = v121;
                              }
                              else
                              {
                                id v121 = 0;
                                id v123 = 0;
                                id v122 = 0;
                              }
                              id v124 = v122;
                              *(_DWORD *)v164 = 138543618;
                              *(void *)&v164[4] = v121;
                              *(_WORD *)&v164[12] = 2114;
                              *(void *)&v164[14] = v124;
                              _os_log_error_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "Cannot finalize impression from source app bundle ID:%{public}@, adam ID:%{public}@", v164, 0x16u);
                            }
                            if (a3 && v155) {
                              *a3 = v155;
                            }
                          }
                          if (v4)
                          {
                            id v105 = v26[6];
                            id v106 = v26[1];
                          }
                          else
                          {
                            id v105 = 0;
                            id v106 = 0;
                          }
                          id v107 = v106;
                          id v108 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"source_app_adam_id", [v105 unsignedLongLongValue]);
                          id v109 = [v107 unsignedLongLongValue];

                          long long v110 = +[SQLiteComparisonPredicate predicateWithProperty:@"app_adam_id" equalToLongLong:v109];
                          *(void *)v164 = v108;
                          *(void *)&v164[8] = v110;
                          os_signpost_id_t v111 = +[NSArray arrayWithObjects:v164 count:2];
                          uint64_t v112 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v111];

                          long long v113 = [v156 connection];
                          long long v114 = sub_1002FF548((uint64_t)InstallAttributionImpressionDatabaseEntity, v113, v112);

                          LODWORD(v113) = [v114 deleteAllEntities];
                          id v115 = ASDLogHandleForCategory();
                          uint64_t v77 = v115;
                          if (v113)
                          {
                            if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                            {
                              if (v4)
                              {
                                id v116 = v26[6];
                                id v117 = v26[1];
                                id v118 = v116;
                              }
                              else
                              {
                                id v116 = 0;
                                id v118 = 0;
                                id v117 = 0;
                              }
                              id v119 = v117;
                              *(_DWORD *)v164 = 138543618;
                              *(void *)&v164[4] = v116;
                              *(_WORD *)&v164[12] = 2114;
                              *(void *)&v164[14] = v119;
                              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Removed conversion for source app adam ID:%{public}@ and app adam ID:%{public}@", v164, 0x16u);
                            }
                          }
                          else if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
                          {
                            if (v4) {
                              id v125 = v26[6];
                            }
                            else {
                              id v125 = 0;
                            }
                            id v126 = v125;
                            *(_DWORD *)v164 = 138543362;
                            *(void *)&v164[4] = v126;
                            _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Failed to remove conversion for source app adam ID:%{public}@", v164, 0xCu);
                          }
LABEL_130:

                          goto LABEL_131;
                        }
                      }
                      goto LABEL_87;
                    }
                  }
                }
              }
            }

LABEL_87:
            long long v41 = ASDErrorWithDescription();
LABEL_88:
            id v66 = v41;
            char v67 = 0;
            goto LABEL_89;
          }
LABEL_40:
          id v44 = v26[1];
          goto LABEL_41;
        }
      }
      v6[13] = v21;
      goto LABEL_21;
    }
LABEL_15:
    id v14 = v4[5];
    sub_100263BF8((uint64_t)v6, v14);

    id v15 = v4[7];
    goto LABEL_16;
  }
LABEL_131:

  return v156 != 0;
}

void sub_1003440B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

BOOL sub_100344100(BOOL a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (v5)
    {
      id v7 = v5[1];
      id v8 = v6[2];
    }
    else
    {
      id v7 = 0;
      id v8 = 0;
    }
    id v9 = v8;
    uint64_t v10 = sub_1003E3B90((id)a1, v7, v9);

    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 104);
      if (v6) {
        id v12 = v6[13];
      }
      else {
        id v12 = 0;
      }
      if (v11 > (uint64_t)v12)
      {
        id v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Existing impression with higher fidelity found. Not adding params", buf, 2u);
        }

        if (a3)
        {
LABEL_11:
          ASDErrorWithDescription();
          a1 = 0;
          *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_62:

          goto LABEL_63;
        }
LABEL_45:
        a1 = 0;
        goto LABEL_62;
      }
      if (v6)
      {
        if (v11 == 1 && v6[13] == (id)1)
        {
          id v14 = *(id *)(v10 + 112);
          uint64_t v15 = ASDInstallAttributionInteractionTypeClick;
          unsigned int v16 = [v14 isEqualToString:ASDInstallAttributionInteractionTypeClick];

          id v17 = v6[14];
          unsigned int v18 = [v17 isEqualToString:v15];

          if (v16)
          {
            if (!v18)
            {
              id v19 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                v55[0] = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Existing impression with higher interaction type found. Not adding params", (uint8_t *)v55, 2u);
              }

              if (a3) {
                goto LABEL_11;
              }
              goto LABEL_45;
            }
          }
        }
      }
    }
    id v20 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:10];
    id v21 = v20;
    if (v6)
    {
      id v22 = v6[1];
      [v21 setObject:v22 forKeyedSubscript:@"app_adam_id"];

      id v23 = v6[2];
    }
    else
    {
      [v20 setObject:0 forKeyedSubscript:@"app_adam_id"];
      id v23 = 0;
    }
    id v24 = v23;
    [v21 setObject:v24 forKeyedSubscript:@"ad_network_id"];

    id v25 = sub_10026FBA0(v6);
    [v21 setObject:v25 forKeyedSubscript:@"impression_id"];

    if (v6)
    {
      id v26 = v6[9];
      [v21 setObject:v26 forKeyedSubscript:@"timestamp"];

      id v27 = v6[10];
    }
    else
    {
      [v21 setObject:0 forKeyedSubscript:@"timestamp"];
      id v27 = 0;
    }
    id v28 = v27;
    [v21 setObject:v28 forKeyedSubscript:@"attribution_signature"];

    if (v6)
    {
      id v29 = +[NSNumber numberWithInteger:v6[13]];
      [v21 setObject:v29 forKeyedSubscript:@"fidelity_type"];

      id v30 = v6[12];
    }
    else
    {
      id v49 = +[NSNumber numberWithInteger:0];
      [v21 setObject:v49 forKeyedSubscript:@"fidelity_type"];

      id v30 = 0;
    }
    id v31 = v30;
    [v21 setObject:v31 forKeyedSubscript:@"local_timestamp"];

    if ([v21 count] != (id)7)
    {
      if (a3)
      {
        ASDErrorWithDescription();
        a1 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        a1 = 0;
      }
      goto LABEL_61;
    }
    if (v6) {
      id v32 = v6[7];
    }
    else {
      id v32 = 0;
    }
    id v33 = v32;

    if (v33)
    {
      if (v6) {
        id v34 = v6[7];
      }
      else {
        id v34 = 0;
      }
      id v35 = v34;
      [v21 setObject:v35 forKeyedSubscript:@"source_app_adam_id"];
    }
    if (v6)
    {
      id v36 = v6[14];
      [v21 setObject:v36 forKeyedSubscript:@"interaction_type"];

      id v37 = v6[15];
    }
    else
    {
      [v21 setObject:0 forKeyedSubscript:@"interaction_type"];
      id v37 = 0;
    }
    id v38 = v37;
    [v21 setObject:v38 forKeyedSubscript:@"environment"];

    if (v6) {
      id v39 = v6[11];
    }
    else {
      id v39 = 0;
    }
    id v40 = v39;

    if (!v40)
    {
LABEL_60:
      id v51 = [InstallAttributionParamsDatabaseEntity alloc];
      __int16 v52 = [(id)a1 connection];
      id v53 = [(SQLiteEntity *)v51 initWithPropertyValues:v21 onConnection:v52];

      a1 = [(SQLiteEntity *)v53 existsInDatabase];
LABEL_61:

      goto LABEL_62;
    }
    if (v6)
    {
      id v41 = v6[11];
      [v21 setObject:v41 forKeyedSubscript:@"version"];

      id v42 = v6[11];
      if (v42)
      {
        long long v43 = v42;
        uint64_t v44 = ASDInstallAttributionVersionCreateFromString();

        if (v44 >= 400)
        {
          id v45 = +[NSNumber numberWithInteger:v6[4]];
          [v21 setObject:v45 forKeyedSubscript:@"source_identifier"];

          id v46 = v6[8];
          [v21 setObject:v46 forKeyedSubscript:@"source_domain"];

          id v47 = v6[6];
          id v48 = off_1005244D8;
LABEL_59:
          [v21 setObject:v47 forKeyedSubscript:*v48];

          goto LABEL_60;
        }
      }
      id v50 = v6[3];
    }
    else
    {
      [v21 setObject:0 forKeyedSubscript:@"version"];
      id v50 = 0;
    }
    id v47 = +[NSNumber numberWithInteger:v50];
    id v48 = off_1005244C0;
    goto LABEL_59;
  }
LABEL_63:

  return a1;
}

id sub_100344728(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    [a2 timeIntervalSince1970];
    id v4 = +[NSNumber numberWithLongLong:(uint64_t)(v3 * 1000.0)];
    uint64_t v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"local_timestamp" value:v4 comparisonType:3];

    v10[0] = @"ad_network_id";
    v10[1] = @"source_app_adam_id";
    void v10[2] = @"version";
    id v6 = +[NSArray arrayWithObjects:v10 count:3];
    id v7 = [v2 connection];
    id v8 = sub_1002FF548((uint64_t)InstallAttributionImpressionDatabaseEntity, v7, v5);

    [v8 enumeratePersistentIDsAndProperties:v6 usingBlock:&stru_100528E40];
    id v2 = [v8 deleteAllEntities];
  }
  return v2;
}

void sub_100344884(id a1, int64_t a2, NSDictionary *a3, unint64_t a4, BOOL *a5)
{
  uint64_t v5 = a3;
  id v7 = [(NSDictionary *)v5 objectForKeyedSubscript:@"ad_network_id"];
  id v6 = [(NSDictionary *)v5 objectForKeyedSubscript:@"version"];

  sub_100263ABC((uint64_t)InstallAttributionImpression, v7, 0, v6, 0);
}

id sub_100344918(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    v25[0] = @"app_adam_id";
    double v3 = a2;
    id v4 = v3;
    if (v3) {
      uint64_t v5 = (void *)v3[1];
    }
    else {
      uint64_t v5 = 0;
    }
    id v6 = v5;
    v26[0] = v6;
    v25[1] = @"ad_network_registrable_domain";
    if (v4) {
      id v7 = (void *)v4[2];
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;
    v26[1] = v8;
    v25[2] = @"impression_id";
    if (v4) {
      id v9 = (void *)v4[3];
    }
    else {
      id v9 = 0;
    }
    id v10 = v9;
    v26[2] = v10;
    void v25[3] = @"source_web_registrable_domain";
    if (v4) {
      uint64_t v11 = (void *)v4[4];
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = v11;
    void v26[3] = v12;
    v25[4] = @"version";
    if (v4) {
      id v13 = (void *)v4[5];
    }
    else {
      id v13 = 0;
    }
    id v14 = v13;
    v26[4] = v14;
    v25[5] = @"timestamp";
    if (v4) {
      uint64_t v15 = (void *)v4[6];
    }
    else {
      uint64_t v15 = 0;
    }
    id v16 = v15;
    v26[5] = v16;
    v25[6] = @"attribution_context";
    if (v4) {
      uint64_t v17 = v4[7];
    }
    else {
      uint64_t v17 = 0;
    }

    unsigned int v18 = +[NSNumber numberWithInteger:v17];
    v26[6] = v18;
    id v19 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:7];
    id v20 = [v19 mutableCopy];

    id v21 = [InstallAttributionWebParamsDatabaseEntity alloc];
    id v22 = [v2 connection];
    id v23 = [(SQLiteEntity *)v21 initWithPropertyValues:v20 onConnection:v22];

    id v2 = (id)[(SQLiteEntity *)v23 existsInDatabase];
  }
  return v2;
}

id sub_100344B60(void *a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 longLongValue]);
    id v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_web_registrable_domain" equalToValue:v5];

    v13[0] = v6;
    v13[1] = v7;
    id v8 = +[NSArray arrayWithObjects:v13 count:2];
    id v9 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v8];

    id v10 = [v3 connection];
    uint64_t v11 = sub_1002FF548((uint64_t)InstallAttributionWebParamsDatabaseEntity, v10, v9);

    id v3 = [v11 deleteAllEntities];
  }
  return v3;
}

id sub_100344CB8(id result, void *a2)
{
  if (result)
  {
    id v2 = result;
    [a2 timeIntervalSince1970];
    id v4 = +[NSNumber numberWithLongLong:(uint64_t)(v3 * 1000.0)];
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"timestamp" value:v4 comparisonType:3];

    id v6 = [v2 connection];
    id v7 = sub_1002FF548((uint64_t)InstallAttributionWebParamsDatabaseEntity, v6, v5);

    id v8 = [v7 deleteAllEntities];
    return v8;
  }
  return result;
}

id sub_100344D90(id result, void *a2)
{
  if (result)
  {
    id v2 = result;
    double v3 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 longLongValue]);
    id v4 = [v2 connection];
    id v5 = sub_1002FF548((uint64_t)InstallAttributionParamsDatabaseEntity, v4, v3);

    id v6 = [v5 deleteAllEntities];
    return v6;
  }
  return result;
}

unint64_t sub_100344E3C(void *a1, void *a2, int a3)
{
  id v5 = a2;
  if (!a1)
  {
    unint64_t v17 = 0;
    goto LABEL_36;
  }
  uint64_t v65 = a3 ^ 1u;
  id v6 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"fidelity_type" equalToValue:v6];

  [v5 timeIntervalSince1970];
  id v9 = +[NSNumber numberWithLongLong:(uint64_t)(v8 * 1000.0)];
  id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"local_timestamp" value:v9 comparisonType:3];

  id v59 = (void *)v7;
  v78[0] = v7;
  v78[1] = v10;
  uint64_t v11 = +[NSArray arrayWithObjects:v78 count:2];
  id v12 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v11];

  id v13 = sub_1003E3CDC(a1, v12, 0);
  id v14 = [a1 connection];
  id v58 = v12;
  uint64_t v15 = sub_1002FF548((uint64_t)InstallAttributionParamsDatabaseEntity, v14, v12);

  id v57 = v15;
  id v16 = [v15 deleteAllEntities];
  unint64_t v17 = (unint64_t)v16;
  if (!v16) {
    goto LABEL_35;
  }
  unsigned int v54 = v16;
  id v55 = v10;
  id v62 = a1;
  id v63 = (id)objc_opt_new();
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  id obj = v13;
  id v56 = v5;
  id v53 = v13;
  id v66 = [obj countByEnumeratingWithState:&v72 objects:v77 count:16];
  if (!v66) {
    goto LABEL_25;
  }
  uint64_t v61 = *(void *)v73;
  unsigned int v18 = &Intents;
  do
  {
    id v19 = 0;
    do
    {
      if (*(void *)v73 != v61) {
        objc_enumerationMutation(obj);
      }
      uint64_t v20 = *(void *)(*((void *)&v72 + 1) + 8 * (void)v19);
      if (v20)
      {
        id v21 = *(id *)(v20 + 8);
        [v63 addObject:v21];

        id v22 = *(id *)(v20 + 64);
        p_base_meths = &v18[20].base_meths;
        if (v22)
        {
          id v24 = [p_base_meths adTypeWeb];
          goto LABEL_13;
        }
      }
      else
      {
        [v63 addObject:0];
        p_base_meths = &v18[20].base_meths;
      }
      id v24 = objc_msgSend(p_base_meths, "adTypeApp", v53);
      id v22 = 0;
LABEL_13:

      id v25 = v18;
      id v26 = &v18[20].base_meths;
      id v27 = [v26 resultTypeFailure];
      if (v20)
      {
        id v28 = *(id *)(v20 + 16);
        id v29 = *(id *)(v20 + 112);
        id v30 = *(void **)(v20 + 88);
      }
      else
      {
        id v29 = 0;
        id v28 = 0;
        id v30 = 0;
      }
      id v31 = v30;
      id v32 = ASDErrorWithDescription();
      id v33 = [v26 impressionWithResult:v27 adNetworkID:v28 adType:v24 interactionType:v29 version:v31 error:v32];

      id v34 = +[SkannerCoordinator sharedInstance];
      if (v20) {
        id v35 = *(void **)(v20 + 8);
      }
      else {
        id v35 = 0;
      }
      id v36 = v35;
      objc_msgSend(v34, "logEvent:forAdvertisedAppAdamID:", v33, objc_msgSend(v36, "longLongValue"));

      if (v20)
      {
        id v37 = *(id *)(v20 + 16);
        id v38 = *(void **)(v20 + 88);
      }
      else
      {
        id v37 = 0;
        id v38 = 0;
      }
      id v39 = v38;
      sub_100263ABC((uint64_t)InstallAttributionImpression, v37, v65, v39, 0);

      id v19 = (char *)v19 + 1;
      unsigned int v18 = v25;
    }
    while (v66 != v19);
    id v40 = [obj countByEnumeratingWithState:&v72 objects:v77 count:16];
    id v66 = v40;
  }
  while (v40);
LABEL_25:

  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id v64 = v63;
  id v41 = [v64 countByEnumeratingWithState:&v68 objects:v76 count:16];
  if (v41)
  {
    id v42 = v41;
    uint64_t v67 = *(void *)v69;
    do
    {
      for (i = 0; i != v42; i = (char *)i + 1)
      {
        if (*(void *)v69 != v67) {
          objc_enumerationMutation(v64);
        }
        uint64_t v44 = *(void **)(*((void *)&v68 + 1) + 8 * i);
        id v45 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", objc_msgSend(v44, "longLongValue", v53));
        id v46 = [v62 connection];
        uint64_t v47 = sub_1002FF3DC((uint64_t)InstallAttributionParamsDatabaseEntity, v46, v45);

        id v48 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v44 longLongValue]);
        id v49 = [v62 connection];
        uint64_t v50 = sub_1002FF3DC((uint64_t)InstallAttributionPingbackDatabaseEntity, v49, v48);

        if (!(v47 | v50))
        {
          id v51 = +[SkannerCoordinator sharedInstance];
          objc_msgSend(v51, "completeStoryForAdvertisedAppAdamID:", objc_msgSend(v44, "longLongValue"));
        }
      }
      id v42 = [v64 countByEnumeratingWithState:&v68 objects:v76 count:16];
    }
    while (v42);
  }

  id v10 = v55;
  id v5 = v56;
  unint64_t v17 = v54;
  id v13 = v53;
LABEL_35:

LABEL_36:
  return v17;
}

id sub_100345464(id result, uint64_t a2)
{
  if (result)
  {
    id v2 = result;
    double v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"app_bundle_id" equalToValue:a2];
    id v4 = [v2 connection];
    id v5 = sub_1002FF548((uint64_t)InstallAttributionPingbackDatabaseEntity, v4, v3);

    id v6 = [v5 deleteAllEntities];
    return v6;
  }
  return result;
}

BOOL sub_100345500(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v7 = (unsigned __int8 *)v5;
    double v8 = v7;
    if (v7) {
      id v9 = (void *)*((void *)v7 + 2);
    }
    else {
      id v9 = 0;
    }
    id v10 = v9;

    if (v10)
    {
      if (v8) {
        uint64_t v11 = (void *)*((void *)v8 + 4);
      }
      else {
        uint64_t v11 = 0;
      }
      id v12 = v11;

      if (v12)
      {
        if (v8) {
          id v13 = (void *)*((void *)v8 + 6);
        }
        else {
          id v13 = 0;
        }
        id v14 = v13;

        if (v14)
        {
          if (v8) {
            uint64_t v15 = (void *)*((void *)v8 + 7);
          }
          else {
            uint64_t v15 = 0;
          }
          id v16 = v15;

          if (v16)
          {
            if (v8) {
              unint64_t v17 = (void *)*((void *)v8 + 14);
            }
            else {
              unint64_t v17 = 0;
            }
            id v18 = v17;

            if (v18)
            {
              if (v8) {
                id v19 = (void *)*((void *)v8 + 17);
              }
              else {
                id v19 = 0;
              }
              id v20 = v19;

              if (v20)
              {
                if (!v8
                  || (id v21 = *((id *)v8 + 17)) == 0
                  || (id v22 = v21, v23 = ASDInstallAttributionVersionCreateFromString(), v22, v23 < 400)
                  || (id v24 = *((id *)v8 + 9), v24, v24))
                {

                  goto LABEL_48;
                }
                id v25 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)int buf = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Cannot insert pingback without source identifier", buf, 2u);
                }
              }
              else
              {
                id v25 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)int buf = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Cannot insert pingback without version", buf, 2u);
                }
              }
            }
            else
            {
              id v25 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)int buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Cannot insert pingback without pingback URL", buf, 2u);
              }
            }
          }
          else
          {
            id v25 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Cannot insert pingback without attribution signature", buf, 2u);
            }
          }
        }
        else
        {
          id v25 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Cannot insert pingback without transaction id", buf, 2u);
          }
        }
      }
      else
      {
        id v25 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Cannot insert pingback without ad network ID", buf, 2u);
        }
      }
    }
    else
    {
      id v25 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Cannot insert pingback without app adam ID", buf, 2u);
      }
    }

    ASDErrorWithDescription();
    id v26 = (id)objc_claimAutoreleasedReturnValue();

    if (v26)
    {
      if (a3)
      {
        id v26 = v26;
        BOOL v27 = 0;
        *a3 = v26;
      }
      else
      {
        BOOL v27 = 0;
      }
LABEL_135:

      goto LABEL_136;
    }
LABEL_48:
    v100[0] = @"app_adam_id";
    if (v8) {
      id v28 = (void *)*((void *)v8 + 2);
    }
    else {
      id v28 = 0;
    }
    id v101 = v28;
    v100[1] = @"ad_network_id";
    id v96 = v101;
    if (v8) {
      id v29 = (void *)*((void *)v8 + 4);
    }
    else {
      id v29 = 0;
    }
    id v102 = v29;
    v100[2] = @"transaction_id";
    uint64_t v95 = v102;
    if (v8) {
      id v30 = (void *)*((void *)v8 + 6);
    }
    else {
      id v30 = 0;
    }
    id v103 = v30;
    v100[3] = @"attribution_signature";
    id v94 = v103;
    if (v8) {
      id v31 = (void *)*((void *)v8 + 7);
    }
    else {
      id v31 = 0;
    }
    id v104 = v31;
    v100[4] = @"conversion_value";
    __int16 v93 = v104;
    if (v8) {
      uint64_t v32 = *((void *)v8 + 11);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v105 = +[NSNumber numberWithInteger:v32];
    v100[5] = @"pingback_url";
    id v92 = (void *)v105;
    if (v8) {
      id v33 = (void *)*((void *)v8 + 14);
    }
    else {
      id v33 = 0;
    }
    id v106 = v33;
    v100[6] = @"redownload";
    __int16 v91 = v106;
    if (v8) {
      BOOL v34 = v8[11] != 0;
    }
    else {
      BOOL v34 = 0;
    }
    uint64_t v107 = +[NSNumber numberWithBool:v34];
    v100[7] = @"registered";
    id v90 = (void *)v107;
    if (v8) {
      BOOL v35 = v8[12] != 0;
    }
    else {
      BOOL v35 = 0;
    }
    id v36 = +[NSNumber numberWithBool:v35];
    id v108 = v36;
    v100[8] = @"retry_count";
    if (v8) {
      uint64_t v37 = *((void *)v8 + 15);
    }
    else {
      uint64_t v37 = 0;
    }
    id v38 = +[NSNumber numberWithInteger:v37];
    id v109 = v38;
    v100[9] = @"retry_timestamp";
    v98 = v6;
    if (v8) {
      id v39 = (void *)*((void *)v8 + 16);
    }
    else {
      id v39 = 0;
    }
    id v40 = v39;
    id v110 = v40;
    v100[10] = @"local_timestamp";
    id v97 = a1;
    if (v8) {
      id v41 = (void *)*((void *)v8 + 18);
    }
    else {
      id v41 = 0;
    }
    id v42 = v41;
    id v111 = v42;
    v100[11] = @"fidelity_type";
    if (v8) {
      uint64_t v43 = *((void *)v8 + 20);
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v44 = +[NSNumber numberWithInteger:v43];
    uint64_t v112 = v44;
    v100[12] = @"is_developer_pingback";
    if (v8) {
      BOOL v45 = v8[14] != 0;
    }
    else {
      BOOL v45 = 0;
    }
    id v46 = +[NSNumber numberWithBool:v45];
    long long v113 = v46;
    v100[13] = @"is_locked";
    if (v8) {
      BOOL v47 = v8[15] != 0;
    }
    else {
      BOOL v47 = 0;
    }
    id v48 = +[NSNumber numberWithBool:v47];
    long long v114 = v48;
    id v49 = +[NSDictionary dictionaryWithObjects:&v101 forKeys:v100 count:14];
    id v50 = [v49 mutableCopy];

    if (v8) {
      id v51 = (void *)*((void *)v8 + 17);
    }
    else {
      id v51 = 0;
    }
    id v6 = v98;
    id v52 = v51;

    if (!v52) {
      goto LABEL_113;
    }
    if (v8)
    {
      id v53 = *((id *)v8 + 17);
      [v50 setObject:v53 forKeyedSubscript:@"version"];

      id v54 = *((id *)v8 + 17);
      if (v54)
      {
        id v55 = v54;
        uint64_t v56 = ASDInstallAttributionVersionCreateFromString();

        if (v56 >= 400)
        {
          id v57 = *((id *)v8 + 9);
          [v50 setObject:v57 forKeyedSubscript:@"source_identifier"];

          id v58 = *((id *)v8 + 12);
          [v50 setObject:v58 forKeyedSubscript:@"coarse_conversion_value"];

          id v59 = +[NSNumber numberWithInteger:*((void *)v8 + 21)];
          [v50 setObject:v59 forKeyedSubscript:@"postback_sequence_index"];

          id v60 = +[NSNumber numberWithBool:v8[9]];
          [v50 setObject:v60 forKeyedSubscript:@"should_send_conversion_value"];

          uint64_t v61 = +[NSNumber numberWithBool:v8[10]];
          id v62 = &off_10052CDD0;
LABEL_112:
          [v50 setObject:v61 forKeyedSubscript:*v62];

LABEL_113:
          if (v8) {
            id v66 = (void *)*((void *)v8 + 8);
          }
          else {
            id v66 = 0;
          }
          id v67 = v66;

          if (v67)
          {
            if (v8) {
              long long v68 = (void *)*((void *)v8 + 8);
            }
            else {
              long long v68 = 0;
            }
            id v69 = v68;
            [v50 setObject:v69 forKeyedSubscript:@"source_app_adam_id"];
          }
          if (v8) {
            long long v70 = (void *)*((void *)v8 + 10);
          }
          else {
            long long v70 = 0;
          }
          id v71 = v70;

          if (v71)
          {
            if (v8) {
              long long v72 = (void *)*((void *)v8 + 10);
            }
            else {
              long long v72 = 0;
            }
            id v73 = v72;
            [v50 setObject:v73 forKeyedSubscript:@"source_domain"];
          }
          if (v8)
          {
            id v74 = *((id *)v8 + 3);
            if (v74)
            {
              long long v75 = v74;
              id v76 = *((id *)v8 + 2);
              unsigned int v77 = [v76 isEqualToNumber:&off_10054C9C0];

              if (v77)
              {
                id v78 = *((id *)v8 + 3);
                [v50 setObject:v78 forKeyedSubscript:@"app_bundle_id"];
              }
            }
            BOOL v79 = v8[13] != 0;
          }
          else
          {
            BOOL v79 = 0;
          }
          id v80 = +[NSNumber numberWithBool:v79];
          [v50 setObject:v80 forKeyedSubscript:@"is_winning_pingback"];

          if (v8)
          {
            id v81 = *((id *)v8 + 13);
            [v50 setObject:v81 forKeyedSubscript:@"conversion_value_timestamp"];

            id v82 = (void *)*((void *)v8 + 19);
          }
          else
          {
            [v50 setObject:0 forKeyedSubscript:@"conversion_value_timestamp"];
            id v82 = 0;
          }
          id v83 = v82;
          [v50 setObject:v83 forKeyedSubscript:@"maturity_timestamp"];

          if (v8) {
            BOOL v84 = (void *)*((void *)v8 + 22);
          }
          else {
            BOOL v84 = 0;
          }
          id v85 = v84;
          [v50 setObject:v85 forKeyedSubscript:@"environment"];

          id v86 = [InstallAttributionPingbackDatabaseEntity alloc];
          __int16 v87 = [v97 connection];
          id v88 = [(SQLiteEntity *)v86 initWithPropertyValues:v50 onConnection:v87];

          BOOL v27 = [(SQLiteEntity *)v88 existsInDatabase];
          id v26 = 0;
          goto LABEL_135;
        }
      }
      uint64_t v63 = *((void *)v8 + 5);
    }
    else
    {
      [v50 setObject:0 forKeyedSubscript:@"version"];
      uint64_t v63 = 0;
    }
    id v64 = +[NSNumber numberWithInteger:v63];
    [v50 setObject:v64 forKeyedSubscript:@"campaign_id"];

    if (v8) {
      BOOL v65 = v8[8] != 0;
    }
    else {
      BOOL v65 = 0;
    }
    uint64_t v61 = +[NSNumber numberWithBool:v65];
    id v62 = &off_10052CD70;
    goto LABEL_112;
  }
  BOOL v27 = 0;
LABEL_136:

  return v27;
}

BOOL sub_100346040(BOOL a1, void *a2)
{
  double v3 = a2;
  id v4 = (unsigned __int8 *)v3;
  if (!a1) {
    goto LABEL_64;
  }
  v62[0] = @"app_adam_id";
  if (v3) {
    id v5 = (void *)v3[2];
  }
  else {
    id v5 = 0;
  }
  id v60 = v5;
  v63[0] = v60;
  v62[1] = @"ad_network_id";
  if (v4) {
    id v6 = (void *)*((void *)v4 + 4);
  }
  else {
    id v6 = 0;
  }
  id v59 = v6;
  v63[1] = v59;
  v62[2] = @"transaction_id";
  if (v4) {
    uint64_t v7 = (void *)*((void *)v4 + 6);
  }
  else {
    uint64_t v7 = 0;
  }
  id v58 = v7;
  v63[2] = v58;
  v62[3] = @"attribution_signature";
  if (v4) {
    double v8 = (void *)*((void *)v4 + 7);
  }
  else {
    double v8 = 0;
  }
  id v57 = v8;
  v63[3] = v57;
  v62[4] = @"conversion_value";
  if (v4) {
    uint64_t v9 = *((void *)v4 + 11);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v55 = +[NSNumber numberWithInteger:v9];
  v63[4] = v55;
  v63[5] = &stru_10052E4D8;
  v62[5] = @"pingback_url";
  v62[6] = @"redownload";
  if (v4) {
    BOOL v10 = v4[11] != 0;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10, v55);
  v63[6] = v11;
  v62[7] = @"registered";
  if (v4) {
    BOOL v12 = v4[12] != 0;
  }
  else {
    BOOL v12 = 0;
  }
  id v13 = +[NSNumber numberWithBool:v12];
  v63[7] = v13;
  v62[8] = @"retry_count";
  uint64_t v61 = (void *)a1;
  if (v4) {
    uint64_t v14 = *((void *)v4 + 15);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = +[NSNumber numberWithInteger:v14];
  v63[8] = v15;
  v62[9] = @"retry_timestamp";
  if (v4) {
    id v16 = (void *)*((void *)v4 + 16);
  }
  else {
    id v16 = 0;
  }
  id v17 = v16;
  v63[9] = v17;
  v62[10] = @"local_timestamp";
  if (v4) {
    id v18 = (void *)*((void *)v4 + 18);
  }
  else {
    id v18 = 0;
  }
  id v19 = v18;
  v63[10] = v19;
  v62[11] = @"fidelity_type";
  if (v4) {
    uint64_t v20 = *((void *)v4 + 20);
  }
  else {
    uint64_t v20 = 0;
  }
  id v21 = +[NSNumber numberWithInteger:v20];
  v62[12] = @"is_developer_pingback";
  v63[11] = v21;
  v63[12] = &off_10054C9D8;
  id v22 = +[NSDictionary dictionaryWithObjects:v63 forKeys:v62 count:13];
  id v23 = [v22 mutableCopy];

  if (v4) {
    id v24 = (void *)*((void *)v4 + 17);
  }
  else {
    id v24 = 0;
  }
  id v25 = v24;

  if (v25)
  {
    if (v4)
    {
      id v26 = *((id *)v4 + 17);
      [v23 setObject:v26 forKeyedSubscript:@"version"];

      id v27 = *((id *)v4 + 17);
      if (v27)
      {
        id v28 = v27;
        uint64_t v29 = ASDInstallAttributionVersionCreateFromString();

        if (v29 >= 400)
        {
          id v30 = *((id *)v4 + 9);
          [v23 setObject:v30 forKeyedSubscript:@"source_identifier"];

          id v31 = *((id *)v4 + 12);
          [v23 setObject:v31 forKeyedSubscript:@"coarse_conversion_value"];

          uint64_t v32 = +[NSNumber numberWithInteger:*((void *)v4 + 21)];
          [v23 setObject:v32 forKeyedSubscript:@"postback_sequence_index"];

          id v33 = +[NSNumber numberWithBool:v4[9]];
          [v23 setObject:v33 forKeyedSubscript:@"should_send_conversion_value"];

          id v34 = +[NSNumber numberWithBool:v4[10]];
          BOOL v35 = &off_10052CDD0;
LABEL_48:
          [v23 setObject:v34 forKeyedSubscript:*v35];

          goto LABEL_49;
        }
      }
      uint64_t v36 = *((void *)v4 + 5);
    }
    else
    {
      [v23 setObject:0 forKeyedSubscript:@"version"];
      uint64_t v36 = 0;
    }
    uint64_t v37 = +[NSNumber numberWithInteger:v36];
    [v23 setObject:v37 forKeyedSubscript:@"campaign_id"];

    if (v4)
    {
      id v38 = +[NSNumber numberWithBool:v4[8]];
      [v23 setObject:v38 forKeyedSubscript:@"should_send_conversion_value"];

      id v39 = (void *)*((void *)v4 + 13);
    }
    else
    {
      id v54 = +[NSNumber numberWithBool:0];
      [v23 setObject:v54 forKeyedSubscript:@"should_send_conversion_value"];

      id v39 = 0;
    }
    id v34 = v39;
    BOOL v35 = &off_10052CD68;
    goto LABEL_48;
  }
LABEL_49:
  if (v4) {
    id v40 = (void *)*((void *)v4 + 8);
  }
  else {
    id v40 = 0;
  }
  id v41 = v40;

  if (v41)
  {
    if (v4) {
      id v42 = (void *)*((void *)v4 + 8);
    }
    else {
      id v42 = 0;
    }
    id v43 = v42;
    [v23 setObject:v43 forKeyedSubscript:@"source_app_adam_id"];
  }
  if (v4) {
    uint64_t v44 = (void *)*((void *)v4 + 10);
  }
  else {
    uint64_t v44 = 0;
  }
  id v45 = v44;

  if (v45)
  {
    if (v4) {
      id v46 = (void *)*((void *)v4 + 10);
    }
    else {
      id v46 = 0;
    }
    id v47 = v46;
    [v23 setObject:v47 forKeyedSubscript:@"source_domain"];
  }
  if (v4) {
    BOOL v48 = v4[13] != 0;
  }
  else {
    BOOL v48 = 0;
  }
  id v49 = +[NSNumber numberWithBool:v48];
  [v23 setObject:v49 forKeyedSubscript:@"is_winning_pingback"];

  id v50 = [InstallAttributionPingbackDatabaseEntity alloc];
  id v51 = [v61 connection];
  id v52 = [(SQLiteEntity *)v50 initWithPropertyValues:v23 onConnection:v51];

  a1 = [(SQLiteEntity *)v52 existsInDatabase];
LABEL_64:

  return a1;
}

id sub_100346678(void *a1, uint64_t a2, unsigned int a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_id" equalToValue:a2];
    id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_developer_pingback" equalToLongLong:a3];
    v12[0] = v5;
    v12[1] = v6;
    uint64_t v7 = +[NSArray arrayWithObjects:v12 count:2];
    double v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

    uint64_t v9 = [v3 connection];
    BOOL v10 = sub_1002FF548((uint64_t)InstallAttributionPingbackDatabaseEntity, v9, v8);

    id v3 = [v10 deleteAllEntities];
  }
  return v3;
}

uint64_t sub_1003467B4(void *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  id v9 = a3;
  id v10 = a4;
  if (!a1)
  {
    uint64_t v26 = 0;
    goto LABEL_17;
  }
  int v11 = sub_1003C4D74();
  BOOL v12 = +[NSDate date];
  id v13 = v12;
  if (v11)
  {
    unsigned int v31 = a5;
    id v33 = v12;
    id v14 = v10;
    id v32 = v9;
    uint64_t v15 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v14 longLongValue]);
    id v16 = [a1 connection];
    BOOL v35 = v15;
    id v17 = sub_1002FF3DC((uint64_t)SKANGhostbackEntity, v16, v15);

    id v18 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v14 longLongValue]);
    id v19 = [a1 connection];
    id v34 = v18;
    uint64_t v20 = sub_1002FF620((uint64_t)InstallAttributionPingbackDatabaseEntity, v19, v18);
    id v21 = [v20 count];

    if (!v17 || v21)
    {
      id v24 = +[NSDate date];
      id v25 = v32;
      uint64_t v26 = sub_100347250(a1, a2, v32, v14, v24, v31);
LABEL_15:
      id v13 = v33;

      goto LABEL_16;
    }
    id v22 = +[NSDate date];
    [v22 timeIntervalSince1970];
    id v24 = +[NSNumber numberWithDouble:v23 * 1000.0];

    if (sub_10026E7EC(v17, @"is_registered"))
    {
      id v25 = v32;
      if (![v17 canUpdateWithRestrictedConversionValue:a2]) {
        goto LABEL_12;
      }
    }
    else
    {
      [v17 setValue:v24 forProperty:@"origin_timestamp"];
      [v17 setValue:&off_10054C9D8 forProperty:@"is_registered"];
      id v25 = v32;
    }
    id v27 = +[NSNumber numberWithInteger:a2];
    [v17 setValue:v27 forProperty:@"restricted_conversion_value"];

    [v17 setValue:v24 forProperty:@"restricted_update_timestamp"];
LABEL_12:
    if ((sub_10026E7EC(v17, @"is_locked") & 1) == 0)
    {
      id v28 = +[NSNumber numberWithInteger:a2];
      [v17 setValue:v28 forProperty:@"free_conversion_value"];

      [v17 setValue:v25 forProperty:@"coarse_conversion_value"];
      uint64_t v29 = +[NSNumber numberWithBool:v31];
      [v17 setValue:v29 forProperty:@"is_locked"];

      [v17 setValue:v24 forProperty:@"update_timestamp"];
    }
    uint64_t v26 = 1;
    goto LABEL_15;
  }
  uint64_t v26 = sub_100347250(a1, a2, v9, v10, v12, a5);
LABEL_16:

LABEL_17:
  return v26;
}

unint64_t sub_100346B44(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"registered" equalToLongLong:0];
    [v3 timeIntervalSince1970];
    id v6 = +[NSNumber numberWithLongLong:(uint64_t)(v5 * 1000.0)];
    uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"local_timestamp" value:v6 comparisonType:3];

    v61[0] = v4;
    v61[1] = v7;
    double v8 = +[NSArray arrayWithObjects:v61 count:2];
    id v9 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v8];

    id v10 = sub_1003E5020(a1, v9, 0);
    int v11 = [a1 connection];
    BOOL v12 = sub_1002FF548((uint64_t)InstallAttributionPingbackDatabaseEntity, v11, v9);

    id v13 = [v12 deleteAllEntities];
    unint64_t v14 = (unint64_t)v13;
    if (v13)
    {
      unsigned int v42 = v13;
      id v43 = v9;
      uint64_t v44 = v7;
      id v45 = a1;
      id v46 = v4;
      id v47 = v3;
      id v50 = objc_opt_new();
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      id v41 = v10;
      id obj = v10;
      id v15 = [obj countByEnumeratingWithState:&v55 objects:v60 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v49 = *(void *)v56;
        do
        {
          id v17 = 0;
          do
          {
            if (*(void *)v56 != v49) {
              objc_enumerationMutation(obj);
            }
            uint64_t v18 = *(void *)(*((void *)&v55 + 1) + 8 * (void)v17);
            if (v18) {
              id v19 = *(void **)(v18 + 16);
            }
            else {
              id v19 = 0;
            }
            id v20 = v19;
            [v50 addObject:v20];

            id v21 = +[SkannerEvent resultTypeFailure];
            id v22 = +[SkannerEvent postbackTypeRealized];
            if (v18) {
              uint64_t v23 = *(void *)(v18 + 168);
            }
            else {
              uint64_t v23 = 0;
            }
            id v24 = +[NSNumber numberWithInteger:v23];
            id v25 = ASDErrorWithDescription();
            uint64_t v26 = +[SkannerEvent conversionWithResult:v21 postbackType:v22 postbackSequenceIndex:v24 error:v25];

            id v27 = +[SkannerCoordinator sharedInstance];
            if (v18) {
              id v28 = *(void **)(v18 + 16);
            }
            else {
              id v28 = 0;
            }
            id v29 = v28;
            objc_msgSend(v27, "logEvent:forAdvertisedAppAdamID:", v26, objc_msgSend(v29, "longLongValue"));

            id v17 = (char *)v17 + 1;
          }
          while (v16 != v17);
          id v30 = [obj countByEnumeratingWithState:&v55 objects:v60 count:16];
          id v16 = v30;
        }
        while (v30);
      }

      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      id v31 = v50;
      id v32 = [v31 countByEnumeratingWithState:&v51 objects:v59 count:16];
      id v9 = v43;
      if (v32)
      {
        id v33 = v32;
        uint64_t v34 = *(void *)v52;
        do
        {
          for (i = 0; i != v33; i = (char *)i + 1)
          {
            if (*(void *)v52 != v34) {
              objc_enumerationMutation(v31);
            }
            uint64_t v36 = *(void **)(*((void *)&v51 + 1) + 8 * i);
            uint64_t v37 = sub_1003E517C(v45, v36);
            id v38 = [v37 count];

            if (!v38)
            {
              id v39 = +[SkannerCoordinator sharedInstance];
              objc_msgSend(v39, "completeStoryForAdvertisedAppAdamID:", objc_msgSend(v36, "longLongValue"));
            }
          }
          id v33 = [v31 countByEnumeratingWithState:&v51 objects:v59 count:16];
        }
        while (v33);
      }

      id v4 = v46;
      id v3 = v47;
      uint64_t v7 = v44;
      unint64_t v14 = v42;
      id v10 = v41;
    }
  }
  else
  {
    unint64_t v14 = 0;
  }

  return v14;
}

id sub_100346FC4(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 longLongValue]);
  id v4 = [a1 connection];
  double v5 = sub_1002FF548((uint64_t)InstallAttributionPingbackDatabaseEntity, v4, v3);

  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134217984;
    id v10 = [v5 countOfEntities];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SKAdNetwork: Purging remnant postbacks:%ld", (uint8_t *)&v9, 0xCu);
  }

  id v7 = [v5 deleteAllEntities];
  return v7;
}

id sub_100347104(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_id" equalToValue:a2];
  id v4 = [a1 connection];
  double v5 = sub_1002FF3DC((uint64_t)InstallAttributionPingbackDatabaseEntity, v4, v3);

  id v6 = (char *)sub_10026E91C(v5, @"retry_count");
  id v7 = +[NSDate date];
  [v7 timeIntervalSince1970];
  int v9 = +[NSNumber numberWithDouble:v8 * 1000.0];

  id v10 = +[NSNumber numberWithInteger:v6 + 1];
  if ([v5 setValue:v10 forProperty:@"retry_count"]) {
    id v11 = [v5 setValue:v9 forProperty:@"retry_timestamp"];
  }
  else {
    id v11 = 0;
  }

  return v11;
}

uint64_t sub_100347250(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6)
{
  id v116 = a3;
  id v120 = a5;
  uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a4 longLongValue]);
  uint64_t v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_winning_pingback" equalToValue:&off_10054C9D8];
  uint64_t v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_winning_pingback" equalToValue:&off_10054C9C0];
  BOOL v12 = [a1 connection];
  v134[0] = v9;
  v134[1] = v10;
  __int16 v89 = (void *)v10;
  id v13 = +[NSArray arrayWithObjects:v134 count:2];
  unint64_t v14 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v13];
  id v15 = sub_1002FF620((uint64_t)InstallAttributionPingbackDatabaseEntity, v12, v14);

  uint64_t v106 = (uint64_t)a1;
  id v16 = [a1 connection];
  id v90 = (void *)v9;
  v133[0] = v9;
  v133[1] = v11;
  id v88 = (void *)v11;
  id v17 = +[NSArray arrayWithObjects:v133 count:2];
  uint64_t v18 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v17];
  id v92 = sub_1002FF620((uint64_t)InstallAttributionPingbackDatabaseEntity, v16, v18);

  if ([v15 count] || objc_msgSend(v92, "count"))
  {
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    __int16 v87 = v15;
    id obj = v15;
    id v19 = [obj countByEnumeratingWithState:&v126 objects:v132 count:16];
    id v20 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
    if (!v19)
    {
      int v23 = 1;
      goto LABEL_69;
    }
    id v21 = v19;
    uint64_t v22 = *(void *)v127;
    int v91 = a6 ^ 1;
    LOBYTE(v23) = 1;
    uint64_t v115 = *(void *)v127;
    while (1)
    {
      id v24 = 0;
      id v117 = v21;
      do
      {
        if (*(void *)v127 != v22) {
          objc_enumerationMutation(obj);
        }
        if ((v23 & 1) == 0)
        {
          int v23 = 0;
          goto LABEL_65;
        }
        id v25 = *(id *)(*((void *)&v126 + 1) + 8 * (void)v24);
        id v26 = v116;
        id v27 = v120;
        id v28 = (__CFString *)v26;
        id v29 = v28;
        if (!v116) {
          id v28 = @"none";
        }
        id v121 = v28;
        unsigned __int8 v30 = sub_10026E7EC(v25, @"registered");
        id v31 = v20[508];
        [v27 timeIntervalSince1970];
        id v33 = [v31 numberWithDouble:v32 * 1000.0];
        uint64_t v34 = sub_10026E95C(v25, @"version");
        BOOL v35 = sub_10026E95C(v25, @"environment");
        uint64_t v36 = +[SKANEnvironmentHelper pingbackDelayOverrideForEnvironment:v35];
        if (!v34)
        {
          if ((v30 & 1) == 0) {
            goto LABEL_57;
          }
LABEL_51:
          id v60 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", -86400.0, v87);
          [v60 timeIntervalSince1970];
          double v62 = v61;

          if (v36)
          {
            uint64_t v63 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)-(uint64_t)[v36 integerValue]);
            [v63 timeIntervalSince1970];
            double v62 = v64;
          }
          if ((uint64_t)sub_10026E91C(v25, @"conversion_value_timestamp") >= (uint64_t)(v62 * 1000.0)
            && (uint64_t)sub_10026E91C(v25, @"conversion_value") < a2)
          {
            id v38 = objc_msgSend(v20[508], "numberWithInteger:");
            if ([v25 setValue:v38 forProperty:@"conversion_value"]) {
              int v23 = [v25 setValue:v33 forProperty:@"conversion_value_timestamp"];
            }
            else {
              int v23 = 0;
            }
            goto LABEL_63;
          }
          int v23 = 1;
          goto LABEL_64;
        }
        uint64_t v37 = ASDInstallAttributionVersionCreateFromString();
        if ((v30 & 1) == 0)
        {
          if (v37 < 400)
          {
LABEL_57:
            id v38 = objc_msgSend(v20[508], "numberWithInteger:", a2, v87);
            if ([v25 setValue:v38 forProperty:@"conversion_value"]
              && [v25 setValue:v33 forProperty:@"conversion_value_timestamp"])
            {
              int v23 = [v25 setValue:&off_10054C9D8 forProperty:@"registered"];
            }
            else
            {
              int v23 = 0;
            }
            goto LABEL_63;
          }
          uint64_t v39 = sub_10026E82C(v25, @"conversion_value_timestamp");
          if (v39)
          {
            id v38 = v39;
            int v23 = 1;
          }
          else
          {
            int v23 = objc_msgSend(v25, "setValue:forProperty:");
            id v38 = v33;
          }
          if (!sub_1003E54B0(v106, v25, v27)) {
            goto LABEL_63;
          }
          id v100 = v27;
          id v109 = v36;
          id v111 = v29;
          unsigned int v93 = sub_10026E7EC(v25, @"is_locked");
          [v38 doubleValue];
          id v41 = +[NSDate dateWithTimeIntervalSince1970:v40 / 1000.0];
          [v33 doubleValue];
          id v43 = +[NSDate dateWithTimeIntervalSince1970:v42 / 1000.0];
          id v44 = sub_10026E91C(v25, @"postback_sequence_index");
          id v102 = v41;
          id v97 = v43;
          uint64_t v95 = sub_10027D434((uint64_t)InstallAttributionPingback, (uint64_t)v44, v41, v43, a6, v35);
          [v95 timeIntervalSince1970];
          id v46 = +[NSNumber numberWithDouble:v45 * 1000.0];
          if (v23)
          {
            id v94 = v46;
            id v47 = +[NSNumber numberWithInteger:a2];
            id v29 = v111;
            id v27 = v100;
            if ([v25 setValue:v47 forProperty:@"conversion_value"]
              && [v25 setValue:v121 forProperty:@"coarse_conversion_value"]
              && ([v25 setValue:&off_10054C9D8 forProperty:@"registered"] & 1) != 0)
            {
              unsigned int v48 = [v25 setValue:v94 forProperty:@"maturity_timestamp"];

              unsigned int v49 = v48;
              int v23 = (v93 | v91) & v48;
              uint64_t v36 = v109;
              if ((v93 | v91)) {
                goto LABEL_37;
              }
              id v46 = v94;
              if (v49)
              {
                int v23 = [v25 setValue:&off_10054C9D8 forProperty:@"is_locked"];
                goto LABEL_37;
              }
            }
            else
            {

              int v23 = 0;
LABEL_37:
              id v46 = v94;
            }
          }
          else
          {
            id v29 = v111;
            id v27 = v100;
          }

          long long v51 = v102;
          goto LABEL_49;
        }
        if (v37 < 400) {
          goto LABEL_51;
        }
        if (sub_1003E54B0(v106, v25, v27))
        {
          if (sub_10026E7EC(v25, @"is_locked"))
          {
            id v38 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Cannot update postback within locked window", buf, 2u);
            }
            int v23 = 1;
            goto LABEL_63;
          }
          id v110 = v36;
          uint64_t v112 = v29;
          id v50 = v33;
          if (a6) {
            unsigned int v98 = [v25 setValue:&off_10054C9D8 forProperty:@"is_locked"];
          }
          else {
            unsigned int v98 = 1;
          }
          id v38 = sub_10026E82C(v25, @"conversion_value_timestamp");
          [v38 doubleValue];
          long long v53 = +[NSDate dateWithTimeIntervalSince1970:v52 / 1000.0];
          [v33 doubleValue];
          long long v55 = +[NSDate dateWithTimeIntervalSince1970:v54 / 1000.0];
          id v56 = sub_10026E91C(v25, @"postback_sequence_index");
          uint64_t v107 = v53;
          id v103 = v55;
          long long v57 = sub_10027D434((uint64_t)InstallAttributionPingback, (uint64_t)v56, v53, v55, a6, v35);
          [v57 timeIntervalSince1970];
          id v59 = +[NSNumber numberWithDouble:v58 * 1000.0];
          id v101 = v57;
          if (v98)
          {
            id v99 = v59;
            id v96 = +[NSNumber numberWithInteger:a2];
            if (objc_msgSend(v25, "setValue:forProperty:"))
            {
              id v33 = v50;
              if ([v25 setValue:v121 forProperty:@"coarse_conversion_value"]) {
                int v23 = [v25 setValue:v99 forProperty:@"maturity_timestamp"];
              }
              else {
                int v23 = 0;
              }
            }
            else
            {
              int v23 = 0;
              id v33 = v50;
            }
            uint64_t v36 = v110;

            id v29 = v112;
            id v59 = v99;
          }
          else
          {
            int v23 = 0;
            id v33 = v50;
            uint64_t v36 = v110;
            id v29 = v112;
          }

          long long v51 = v107;
LABEL_49:

LABEL_63:
          id v20 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
          goto LABEL_64;
        }
        int v23 = 1;
LABEL_64:

        id v21 = v117;
        uint64_t v22 = v115;
LABEL_65:
        id v24 = (char *)v24 + 1;
      }
      while (v21 != v24);
      id v21 = [obj countByEnumeratingWithState:&v126 objects:v132 count:16];
      if (!v21)
      {
LABEL_69:
        int v108 = v23;

        long long v124 = 0u;
        long long v125 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
        id v119 = v92;
        id v65 = [v119 countByEnumeratingWithState:&v122 objects:v131 count:16];
        if (v65)
        {
          id v66 = v65;
          uint64_t v67 = *(void *)v123;
          LOBYTE(v68) = 1;
          do
          {
            for (i = 0; i != v66; i = (char *)i + 1)
            {
              if (*(void *)v123 != v67) {
                objc_enumerationMutation(v119);
              }
              if (v68)
              {
                id v70 = *(id *)(*((void *)&v122 + 1) + 8 * i);
                id v71 = v120;
                unsigned __int8 v72 = sub_10026E7EC(v70, @"registered");
                [v71 timeIntervalSince1970];
                double v74 = v73;

                long long v75 = +[NSNumber numberWithDouble:v74 * 1000.0];
                id v76 = sub_10026E95C(v70, @"version");
                unsigned int v77 = sub_10026E95C(v70, @"environment");
                if (v72)
                {
                  unsigned int v68 = 1;
                }
                else if (v76 && ASDInstallAttributionVersionCreateFromString() >= 400)
                {
                  id v78 = sub_10026E82C(v70, @"maturity_timestamp");
                  if (v78)
                  {
                    unsigned int v68 = 1;
                  }
                  else
                  {
                    [v75 doubleValue];
                    id v80 = +[NSDate dateWithTimeIntervalSince1970:v79 / 1000.0];
                    id v81 = sub_10026E91C(v70, @"postback_sequence_index");
                    long long v114 = sub_10027D434((uint64_t)InstallAttributionPingback, (uint64_t)v81, v80, v80, a6, v77);
                    [v114 timeIntervalSince1970];
                    uint64_t v83 = +[NSNumber numberWithDouble:v82 * 1000.0];
                    long long v113 = (void *)v83;
                    if ([v70 setValue:v75 forProperty:@"conversion_value_timestamp"]&& objc_msgSend(v70, "setValue:forProperty:", v83, @"maturity_timestamp"))
                    {
                      unsigned int v68 = [v70 setValue:&off_10054C9D8 forProperty:@"registered"];
                    }
                    else
                    {
                      unsigned int v68 = 0;
                    }
                  }
                }
                else if (objc_msgSend(v70, "setValue:forProperty:", v75, @"conversion_value_timestamp", v87))
                {
                  unsigned int v68 = [v70 setValue:&off_10054C9D8 forProperty:@"registered"];
                }
                else
                {
                  unsigned int v68 = 0;
                }
              }
              else
              {
                unsigned int v68 = 0;
              }
            }
            id v66 = [v119 countByEnumeratingWithState:&v122 objects:v131 count:16];
          }
          while (v66);
        }
        else
        {
          unsigned int v68 = 1;
        }

        uint64_t v84 = v108 & v68;
        id v15 = v87;
        goto LABEL_97;
      }
    }
  }
  id v86 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "SKAdNetwork: No pingbacks found while attempting to register/update.", buf, 2u);
  }

  uint64_t v84 = 1;
LABEL_97:

  return v84;
}

uint64_t sub_100347FA8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v6 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a3 longLongValue]);
    id v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_developer_pingback" equalToValue:&off_10054C9D8];
    double v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"pingback_url" equalToValue:&stru_10052E4D8];
    id v20 = (void *)v6;
    v26[0] = v6;
    v26[1] = v7;
    v26[2] = v8;
    uint64_t v9 = +[NSArray arrayWithObjects:v26 count:3];
    uint64_t v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v9];

    uint64_t v11 = [a1 connection];
    BOOL v12 = sub_1002FF620((uint64_t)InstallAttributionPingbackDatabaseEntity, v11, v10);

    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v13 = v12;
    id v14 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v22;
      LOBYTE(v17) = 1;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v22 != v16) {
            objc_enumerationMutation(v13);
          }
          if (v17) {
            uint64_t v17 = (uint64_t)[*(id *)(*((void *)&v21 + 1) + 8 * i) setValue:v5 forProperty:@"pingback_url"];
          }
          else {
            uint64_t v17 = 0;
          }
        }
        id v15 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }
      while (v15);
    }
    else
    {
      uint64_t v17 = 1;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }

  return v17;
}

void sub_1003481F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  id v7 = a3;
  double v8 = objc_alloc_init(InstallAttributionImpression);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = [v7 objectForKeyedSubscript:@"app_adam_id"];
  sub_100263BD8(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v11);

  BOOL v12 = [v7 objectForKeyedSubscript:@"ad_network_id"];
  sub_100263BE8(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v12);

  id v13 = [v7 objectForKeyedSubscript:@"campaign_id"];
  id v14 = [v13 integerValue];
  uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v15) {
    *(void *)(v15 + 24) = v14;
  }

  uint64_t v16 = [v7 objectForKeyedSubscript:@"source_identifier"];
  id v17 = [v16 integerValue];
  uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v18) {
    *(void *)(v18 + 32) = v17;
  }

  id v19 = [v7 objectForKeyedSubscript:@"impression_id"];
  sub_100263BF8(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v19);

  id v20 = [v7 objectForKeyedSubscript:@"source_app_adam_id"];
  sub_100263C08(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v20);

  long long v21 = [v7 objectForKeyedSubscript:@"local_timestamp"];
  sub_100263C28(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v21);

  long long v22 = [v7 objectForKeyedSubscript:@"version"];
  sub_100263C48(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v22);

  long long v23 = [v7 objectForKeyedSubscript:@"source_app_bundle_id"];
  sub_100263C58(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v23);

  long long v24 = [v7 objectForKeyedSubscript:@"fidelity_type"];
  id v25 = [v24 integerValue];
  uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v26) {
    *(void *)(v26 + 96) = v25;
  }

  id v27 = [v7 objectForKeyedSubscript:@"process_name"];

  sub_100263C68(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v27);
  *a5 = 1;
}

_UNKNOWN **sub_100348470()
{
  unsigned int v0 = sub_10030B11C();
  id v6 = 0;
  uint64_t v1 = sub_10030BE3C((uint64_t)v0, @"install-attribution-start-end-window", &off_10054CA08, &v6);
  id v2 = v6;
  if (v1)
  {
    id v3 = v1;
  }
  else
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138543362;
      id v8 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Could not fetch start end time window from bag, error:%{public}@", buf, 0xCu);
    }

    id v3 = &off_10054CA08;
  }

  return v3;
}

id sub_10034859C(uint64_t a1)
{
  id v2 = &off_10054C9C0;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_app_adam_id" equalToValue:a1];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"fidelity_type" equalToValue:&off_10054C9C0];

  v8[0] = v3;
  v8[1] = v4;
  id v5 = +[NSArray arrayWithObjects:v8 count:2];
  id v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];

  return v6;
}

void sub_1003486B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v7 = [a3 objectForKeyedSubscript:@"local_timestamp"];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  *a5 = 1;
}

void sub_100348708(id a1, int64_t a2, NSDictionary *a3, unint64_t a4, BOOL *a5)
{
  id v5 = a3;
  id v8 = [(NSDictionary *)v5 objectForKeyedSubscript:@"ad_network_id"];
  id v6 = [(NSDictionary *)v5 objectForKeyedSubscript:@"version"];
  uint64_t v7 = [(NSDictionary *)v5 objectForKeyedSubscript:@"fidelity_type"];

  sub_100263ABC((uint64_t)InstallAttributionImpression, v8, [v7 integerValue] != 0, v6, 1);
}

BOOL sub_1003487CC(void *a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = v4;
  if (a1)
  {
    long long v51 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v4 longLongValue]);
    id v6 = [a1 connection];
    uint64_t v7 = sub_1002FF3DC((uint64_t)SKANGhostbackEntity, v6, v51);

    id v50 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v5 longLongValue]);
    id v8 = [a1 connection];
    unsigned int v49 = sub_1002FF620((uint64_t)InstallAttributionPingbackDatabaseEntity, v8, v50);

    uint64_t v9 = sub_10026E95C(v7, @"environment");
    uint64_t v10 = objc_opt_new();
    uint64_t v11 = objc_opt_new();
    v78[0] = _NSConcreteStackBlock;
    v78[1] = 3221225472;
    void v78[2] = sub_100349278;
    v78[3] = &unk_100528E88;
    id v12 = v9;
    id v79 = v12;
    id v13 = v10;
    id v80 = v13;
    id v14 = v11;
    id v81 = v14;
    [v49 enumerateObjectsUsingBlock:v78];
    unsigned __int8 v15 = sub_10026E7EC(v7, @"is_registered");
    if ((v15 & 1) == 0)
    {
      long long v23 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v5;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Pending postback for app %@ not registered, skipping conversion value imprint", (uint8_t *)&buf, 0xCu);
      }

      BOOL v24 = 1;
      goto LABEL_33;
    }
    if (![v13 count]) {
      goto LABEL_25;
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v83 = 0x3032000000;
    uint64_t v84 = sub_100018258;
    id v85 = sub_100017CE8;
    id v86 = 0;
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472;
    v77[2] = sub_100349308;
    v77[3] = &unk_100528EB0;
    v77[4] = &buf;
    [v13 enumerateObjectsUsingBlock:v77];
    id v46 = sub_10026E95C(*(void **)(*((void *)&buf + 1) + 40), @"version");
    if (v46)
    {
      uint64_t v66 = 0;
      uint64_t v67 = &v66;
      uint64_t v68 = 0x2020000000;
      LOBYTE(v69) = 1;
      if (ASDInstallAttributionVersionCreateFromString() > 399)
      {
        id v16 = sub_10026E91C(v7, @"free_conversion_value");
        id v47 = sub_10026E95C(v7, @"coarse_conversion_value");
        id v17 = sub_10026E7EC(v7, @"is_locked");
        uint64_t v18 = *(void **)(*((void *)&buf + 1) + 40);
        id v19 = +[NSNumber numberWithInteger:v16];
        if ([v18 setValue:v19 forProperty:@"conversion_value"]
          && [*(id *)(*((void *)&buf + 1) + 40) setValue:v47 forProperty:@"coarse_conversion_value"])
        {
          id v20 = *(void **)(*((void *)&buf + 1) + 40);
          long long v21 = +[NSNumber numberWithBool:v17];
          unsigned __int8 v22 = [v20 setValue:v21 forProperty:@"is_locked"];
          *((unsigned char *)v67 + 24) = v22;
        }
        else
        {
          *((unsigned char *)v67 + 24) = 0;
        }

        id v25 = sub_10026E82C(v7, @"origin_timestamp");
        double v45 = sub_10026E82C(v7, @"update_timestamp");
        [v25 doubleValue];
        id v44 = +[NSDate dateWithTimeIntervalSince1970:v26 / 1000.0];
        [v45 doubleValue];
        id v28 = +[NSDate dateWithTimeIntervalSince1970:v27 / 1000.0];
        id v29 = sub_10027D434((uint64_t)InstallAttributionPingback, 0, v44, v28, (int)v17, v12);
        [v29 timeIntervalSince1970];
        id v31 = +[NSNumber numberWithDouble:v30 * 1000.0];
        double v32 = v67;
        if (*((unsigned char *)v67 + 24))
        {
          unsigned __int8 v33 = [*(id *)(*((void *)&buf + 1) + 40) setValue:v31 forProperty:@"maturity_timestamp"];
          double v32 = v67;
        }
        else
        {
          unsigned __int8 v33 = 0;
        }
        *((unsigned char *)v32 + 24) = v33;
        v74[0] = _NSConcreteStackBlock;
        v74[1] = 3221225472;
        v74[2] = sub_1003493A0;
        v74[3] = &unk_100528ED8;
        id v76 = &v66;
        id v34 = v25;
        id v75 = v34;
        [v13 enumerateObjectsUsingBlock:v74];

LABEL_22:
        if (*((unsigned char *)v67 + 24))
        {
          uint64_t v39 = *(void **)(*((void *)&buf + 1) + 40);
          double v40 = +[NSNumber numberWithBool:1];
          unsigned __int8 v41 = [v39 setValue:v40 forProperty:@"registered"];
          *((unsigned char *)v67 + 24) = v41;

          if (*((unsigned char *)v67 + 24))
          {
            _Block_object_dispose(&v66, 8);

            _Block_object_dispose(&buf, 8);
LABEL_25:
            v72[0] = 0;
            v72[1] = v72;
            v72[2] = 0x2020000000;
            unsigned __int8 v73 = 0;
            unsigned __int8 v73 = sub_10026E7EC(v7, @"is_locked");
            *(void *)&long long buf = 0;
            *((void *)&buf + 1) = &buf;
            uint64_t v83 = 0x3032000000;
            uint64_t v84 = sub_100018258;
            id v85 = sub_100017CE8;
            sub_10026E82C(v7, @"origin_timestamp");
            id v86 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v66 = 0;
            uint64_t v67 = &v66;
            uint64_t v68 = 0x3032000000;
            id v69 = sub_100018258;
            id v70 = sub_100017CE8;
            [*(id *)(*((void *)&buf + 1) + 40) doubleValue];
            id v71 = +[NSDate dateWithTimeIntervalSince1970:v42 / 1000.0];
            v64[0] = 0;
            v64[1] = v64;
            v64[2] = 0x3032000000;
            v64[3] = sub_100018258;
            v64[4] = sub_100017CE8;
            id v65 = (id)v67[5];
            uint64_t v60 = 0;
            double v61 = &v60;
            uint64_t v62 = 0x2020000000;
            char v63 = 1;
            v52[0] = _NSConcreteStackBlock;
            v52[1] = 3221225472;
            v52[2] = sub_10034944C;
            v52[3] = &unk_100528F00;
            double v54 = &v66;
            long long v55 = v64;
            id v56 = v72;
            id v53 = v12;
            long long v57 = &v60;
            p_long long buf = &buf;
            unsigned __int8 v59 = v15;
            [v14 enumerateObjectsUsingBlock:v52];
            BOOL v24 = *((unsigned char *)v61 + 24) != 0;
            if (a3 && !*((unsigned char *)v61 + 24))
            {
              ASDErrorWithDescription();
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }

            _Block_object_dispose(&v60, 8);
            _Block_object_dispose(v64, 8);

            _Block_object_dispose(&v66, 8);
            _Block_object_dispose(&buf, 8);

            _Block_object_dispose(v72, 8);
LABEL_33:

            goto LABEL_34;
          }
        }
        else
        {
          *((unsigned char *)v67 + 24) = 0;
        }
        if (a3)
        {
          ASDErrorWithDescription();
          *a3 = (id)objc_claimAutoreleasedReturnValue();
        }
        _Block_object_dispose(&v66, 8);

        _Block_object_dispose(&buf, 8);
        BOOL v24 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v66 = 0;
      uint64_t v67 = &v66;
      uint64_t v68 = 0x2020000000;
      LOBYTE(v69) = 1;
    }
    id v35 = sub_10026E91C(v7, @"restricted_conversion_value");
    id v47 = sub_10026E82C(v7, @"restricted_update_timestamp");
    if ([*(id *)(*((void *)&buf + 1) + 40) setValue:v47 forProperty:@"conversion_value_timestamp"])
    {
      uint64_t v36 = *(void **)(*((void *)&buf + 1) + 40);
      uint64_t v37 = +[NSNumber numberWithInteger:v35];
      unsigned __int8 v38 = [v36 setValue:v37 forProperty:@"conversion_value"];
      *((unsigned char *)v67 + 24) = v38;
    }
    else
    {
      *((unsigned char *)v67 + 24) = 0;
    }
    goto LABEL_22;
  }
  BOOL v24 = 0;
LABEL_34:

  return v24;
}

void sub_1003491C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100349278(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = a2;
  [v6 setValue:v3 forProperty:@"environment"];
  unsigned int v4 = sub_10026E7EC(v6, @"is_winning_pingback");
  uint64_t v5 = 48;
  if (v4) {
    uint64_t v5 = 40;
  }
  [*(id *)(a1 + v5) addObject:v6];
}

void sub_100349308(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  id v7 = sub_10026E91C(v9, @"postback_sequence_index");
  unsigned __int8 v8 = sub_10026E7EC(v9, @"is_developer_pingback");
  if (!v7 && (v8 & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_1003493A0(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = sub_10026E82C(v6, @"conversion_value_timestamp");
  if (!v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    if (*(unsigned char *)(v4 + 24))
    {
      unsigned __int8 v5 = [v6 setValue:*(void *)(a1 + 32) forProperty:@"conversion_value_timestamp"];
      uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    }
    else
    {
      unsigned __int8 v5 = 0;
    }
    *(unsigned char *)(v4 + 24) = v5;
  }
}

void sub_10034944C(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v3 = sub_10026E95C(v9, @"version");
  if (v3 && ASDInstallAttributionVersionCreateFromString() >= 400)
  {
    uint64_t v4 = sub_10026E82C(v9, @"maturity_timestamp");
    if (!v4)
    {
      unsigned __int8 v5 = sub_10027D434((uint64_t)InstallAttributionPingback, 0, *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), *(void **)(a1 + 32));
      [v5 timeIntervalSince1970];
      id v7 = +[NSNumber numberWithDouble:v6 * 1000.0];
      unsigned int v8 = [v9 setValue:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) forProperty:@"conversion_value_timestamp"];
      if (v8)
      {
        unsigned int v8 = [v9 setValue:v7 forProperty:@"maturity_timestamp"];
        if (v8) {
          LOBYTE(v8) = [v9 setValue:&off_10054C9D8 forProperty:@"registered"];
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v8;
    }
    goto LABEL_10;
  }
  if ([v9 setValue:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) forProperty:@"conversion_value_timestamp"])
  {
    uint64_t v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v9 setValue:v4 forProperty:@"registered"];
LABEL_10:

    goto LABEL_12;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
LABEL_12:
}

id sub_100349628(void *a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    unsigned __int8 v5 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 longLongValue]);
    double v6 = [v3 connection];
    id v7 = sub_1002FF548((uint64_t)SKANGhostbackEntity, v6, v5);

    id v3 = [v7 deleteAllEntities];
    if (v3)
    {
      unsigned int v8 = 0;
      if (!a3) {
        goto LABEL_7;
      }
    }
    else
    {
      unsigned int v8 = ASDErrorWithDescription();
      if (!a3)
      {
LABEL_7:

        return v3;
      }
    }
    *a3 = v8;
    goto LABEL_7;
  }
  return v3;
}

id sub_100349720(id result, void *a2, void *a3, void *a4)
{
  if (result)
  {
    double v6 = result;
    id v7 = a4;
    id v8 = a3;
    id v9 = a2;
    id v10 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:7];
    [v10 setObject:v9 forKeyedSubscript:@"app_adam_id"];

    [v10 setObject:v7 forKeyedSubscript:@"app_bundle_id"];
    [v10 setObject:@"none" forKeyedSubscript:@"coarse_conversion_value"];
    [v10 setObject:&off_10054C9C0 forKeyedSubscript:@"is_registered"];
    [v10 setObject:&off_10054C9C0 forKeyedSubscript:@"is_locked"];
    [v10 setObject:v8 forKeyedSubscript:@"environment"];

    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSince1970];
    id v13 = +[NSNumber numberWithDouble:v12 * 1000.0];
    [v10 setObject:v13 forKeyedSubscript:@"origin_timestamp"];
    id v14 = [SKANGhostbackEntity alloc];
    unsigned __int8 v15 = [v6 connection];
    id v16 = [(SQLiteEntity *)v14 initWithPropertyValues:v10 onConnection:v15];

    BOOL v17 = [(SQLiteEntity *)v16 existsInDatabase];
    return (id)v17;
  }
  return result;
}

unint64_t sub_1003498C8(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  [a2 timeIntervalSince1970];
  uint64_t v4 = +[NSNumber numberWithDouble:v3 * 1000.0];
  unsigned __int8 v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"origin_timestamp" value:v4 comparisonType:3];
  double v6 = sub_1003E7100(a1, v5, 0);
  id v7 = [a1 connection];
  id v8 = sub_1002FF548((uint64_t)SKANGhostbackEntity, v7, v5);

  id v9 = [v8 deleteAllEntities];
  unint64_t v10 = (unint64_t)v9;
  if (v9)
  {
    unsigned __int8 v33 = v8;
    unsigned int v34 = v9;
    uint64_t v36 = v5;
    id v37 = a1;
    unsigned __int8 v38 = v4;
    double v40 = objc_opt_new();
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v35 = v6;
    id obj = v6;
    id v11 = [obj countByEnumeratingWithState:&v45 objects:v50 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v46;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v46 != v13) {
            objc_enumerationMutation(obj);
          }
          unsigned __int8 v15 = *(void **)(*((void *)&v45 + 1) + 8 * i);
          id v16 = objc_msgSend(v15, "appAdamId", v33);
          [v40 addObject:v16];

          BOOL v17 = +[SkannerEvent resultTypeFailure];
          uint64_t v18 = +[SkannerEvent postbackTypePending];
          id v19 = ASDErrorWithDescription();
          id v20 = +[SkannerEvent conversionWithResult:v17 postbackType:v18 postbackSequenceIndex:0 error:v19];

          long long v21 = +[SkannerCoordinator sharedInstance];
          unsigned __int8 v22 = [v15 appAdamId];
          objc_msgSend(v21, "logEvent:forAdvertisedAppAdamID:", v20, objc_msgSend(v22, "longLongValue"));
        }
        id v12 = [obj countByEnumeratingWithState:&v45 objects:v50 count:16];
      }
      while (v12);
    }

    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v23 = v40;
    id v24 = [v23 countByEnumeratingWithState:&v41 objects:v49 count:16];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = *(void *)v42;
      do
      {
        for (j = 0; j != v25; j = (char *)j + 1)
        {
          if (*(void *)v42 != v26) {
            objc_enumerationMutation(v23);
          }
          id v28 = *(void **)(*((void *)&v41 + 1) + 8 * (void)j);
          id v29 = sub_1003E517C(v37, v28);
          id v30 = [v29 count];

          if (!v30)
          {
            id v31 = +[SkannerCoordinator sharedInstance];
            objc_msgSend(v31, "completeStoryForAdvertisedAppAdamID:", objc_msgSend(v28, "longLongValue"));
          }
        }
        id v25 = [v23 countByEnumeratingWithState:&v41 objects:v49 count:16];
      }
      while (v25);
    }

    uint64_t v4 = v38;
    double v6 = v35;
    unsigned __int8 v5 = v36;
    unint64_t v10 = v34;
    id v8 = v33;
  }

  return v10;
}

id sub_100349C80(id result, void *a2)
{
  if (result)
  {
    id v2 = result;
    [a2 timeIntervalSince1970];
    uint64_t v4 = +[NSNumber numberWithDouble:v3 * 1000.0];
    unsigned __int8 v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"timestamp" value:v4 comparisonType:3];
    double v6 = [v2 connection];
    id v7 = sub_1002FF548((uint64_t)SKANTokenEntity, v6, v5);

    id v8 = [v7 deleteAllEntities];
    return v8;
  }
  return result;
}

BOOL sub_100349D50(void *a1, uint64_t a2)
{
  if (a1)
  {
    double v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"app_bundle_id" equalToValue:a2];
    uint64_t v4 = [a1 connection];
    unsigned __int8 v5 = sub_1002FF3DC((uint64_t)SKANGhostbackEntity, v4, v3);

    id v30 = v5;
    double v6 = [v5 valueForProperty:@"app_adam_id"];
    id v7 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v6 longLongValue]);

    id v8 = [a1 connection];
    id v31 = v3;
    id v9 = sub_1002FF548((uint64_t)SKANGhostbackEntity, v8, v3);

    id v29 = v9;
    if (([v9 deleteAllEntities] & 1) == 0)
    {
      unint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned __int8 v33 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Could not clean up after app deletion %@", buf, 0xCu);
      }
    }
    id v11 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v7 longLongValue]);
    id v12 = [a1 connection];
    uint64_t v13 = sub_1002FF548((uint64_t)InstallAttributionPingbackDatabaseEntity, v12, v11);

    if (([v13 deleteAllEntities] & 1) == 0)
    {
      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned __int8 v33 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Could not clean postbacks after app deletion %@", buf, 0xCu);
      }
    }
    unsigned __int8 v15 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", objc_msgSend(v7, "longLongValue", v11));
    id v16 = [a1 connection];
    BOOL v17 = sub_1002FF548((uint64_t)InstallAttributionParamsDatabaseEntity, v16, v15);

    if (([v17 deleteAllEntities] & 1) == 0)
    {
      uint64_t v18 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned __int8 v33 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Could not clean params after app deletion %@", buf, 0xCu);
      }
    }
    id v19 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v7 longLongValue]);
    id v20 = [a1 connection];
    long long v21 = sub_1002FF548((uint64_t)InstallAttributionImpressionDatabaseEntity, v20, v19);

    if (([v21 deleteAllEntities] & 1) == 0)
    {
      unsigned __int8 v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned __int8 v33 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Could not clean impressions after app deletion %@", buf, 0xCu);
      }
    }
    id v23 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v7 longLongValue]);
    id v24 = [a1 connection];
    id v25 = sub_1002FF548((uint64_t)SKANTokenEntity, v24, v23);

    if (([v25 deleteAllEntities] & 1) == 0)
    {
      uint64_t v26 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned __int8 v33 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Could not clean after app deletion %@", buf, 0xCu);
      }
    }
  }
  return a1 != 0;
}

double *sub_10034A254(void *a1, double a2)
{
  if (!a1) {
    return 0;
  }
  v8.receiver = a1;
  v8.super_class = (Class)ODRDataSampler;
  double v3 = (double *)objc_msgSendSuper2(&v8, "init");
  uint64_t v4 = v3;
  if (v3)
  {
    v3[4] = a2;
    id v5 = objc_alloc_init((Class)NSMutableArray);
    double v6 = (void *)*((void *)v4 + 2);
    *((void *)v4 + 2) = v5;

    *((unsigned char *)v4 + 24) = 0;
  }
  return v4;
}

void sub_10034A2D8(void *a1)
{
  if (a1)
  {
    id obj = a1;
    objc_sync_enter(obj);
    if (!obj[24])
    {
      obj[24] = 1;
      sub_10034A368(obj);
    }
    objc_sync_exit(obj);
  }
}

void sub_10034A354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10034A368(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    if (*((unsigned char *)v1 + 24))
    {
      id v2 = [v1 takeSample];
      if (v2) {
        [v1[2] addObject:v2];
      }
      dispatch_time_t v3 = dispatch_time(0, 1000000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10034A4A8;
      block[3] = &unk_100521388;
      void block[4] = v1;
      dispatch_after(v3, (dispatch_queue_t)&_dispatch_main_q, block);
    }
    objc_sync_exit(v1);
  }
}

void sub_10034A43C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10034A450(void *a1)
{
  if (a1)
  {
    id obj = a1;
    objc_sync_enter(obj);
    if (obj[24]) {
      obj[24] = 0;
    }
    objc_sync_exit(obj);
  }
}

uint64_t sub_10034A4A8(uint64_t a1)
{
  return sub_10034A368(*(void *)(a1 + 32));
}

id sub_10034A4B8(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    id v2 = [v1[2] valueForKeyPath:@"@avg.self"];
    objc_sync_exit(v1);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_10034A524(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10034A538(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    id v2 = [v1[2] valueForKeyPath:@"@min.self"];
    objc_sync_exit(v1);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_10034A5A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10034A5B8(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    id v2 = [v1[2] valueForKeyPath:@"@max.self"];
    objc_sync_exit(v1);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_10034A624(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10034A720(id a1)
{
  uint64_t v1 = -[TransactionStore init]_0([TransactionStore alloc]);
  id v2 = (void *)qword_1005B0FD0;
  qword_1005B0FD0 = (uint64_t)v1;
}

_DWORD *sub_10034A89C(uint64_t a1)
{
  id v2 = objc_alloc_init(LogTransactions);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  dispatch_time_t v3 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "keyEnumerator", 0);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        sub_10041FDC4((uint64_t)v2, *(void **)(*((void *)&v10 + 1) + 8 * (void)v7));
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  objc_super v8 = sub_1003B5E44(v2);
  return v8;
}

void sub_10034AA10(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) countForObject:*(void *)(a1 + 40)];
  dispatch_time_t v3 = ASDLogHandleForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v7 = 138543362;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Transaction] Left transaction: %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Transaction] Ended transaction: %{public}@", (uint8_t *)&v7, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 40) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

void sub_10034AC84(id a1)
{
  uint64_t v1 = objc_alloc_init(UpdatesManager);
  id v2 = (void *)qword_1005B0FE8;
  qword_1005B0FE8 = (uint64_t)v1;
}

void sub_10034ADC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10034ADD8(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10034ADEC(uint64_t a1)
{
  uint64_t v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = v2;
}

id sub_10034AE3C(uint64_t a1, void *a2)
{
  return sub_1003741BC(a2, *(unsigned char *)(a1 + 32) == 0);
}

void sub_10034AEC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
}

void sub_10034B11C(id a1)
{
  uint64_t v1 = objc_alloc_init(UpdatesManager_ObjC);
  uint64_t v2 = (void *)qword_1005B0FF8;
  qword_1005B0FF8 = (uint64_t)v1;
}

void sub_10034B36C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = +[NSNotificationCenter defaultCenter];
    BOOL v4 = +[ActiveAccountObserver sharedInstance];
    [v3 addObserver:v2 selector:"_handleAccountChangedNotification" name:@"AccountStorePrimaryAccountDidChange" object:v4];
  }
  uint64_t v5 = +[ActiveAccountObserver activeAccount];
  uint64_t v6 = objc_msgSend(v5, "ams_DSID");
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = v6;

  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = objc_alloc_init(_TtC9appstored14UpdatesContext);
  sub_10034B474(v9, @"Initializing", v10);
}

uint64_t sub_10034B474(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = a1;
  id v5 = a3;
  id v6 = a2;
  id v51 = v5;
  BOOL v7 = sub_100005CF8();
  unsigned int v8 = +[ASDUpdatesService isAutomaticUpdateAuthorizationEnabled];
  id v50 = sub_1003F1F68((uint64_t)AppDefaultsManager, @"AutomaticUpdateAuthorizations");
  BOOL v52 = v7;
  if (v7 && v8 == 0)
  {
    uint64_t v34 = 0;
    goto LABEL_35;
  }
  id v47 = v6;
  long long v10 = +[NSMutableArray array];
  long long v11 = +[NSDate date];
  [v11 timeIntervalSinceReferenceDate];
  double v13 = v12;

  id v14 = sub_10001A308();
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_1003526A8;
  v57[3] = &unk_100523CA8;
  uint64_t v48 = v4;
  v57[4] = v4;
  id v15 = v10;
  id v58 = v15;
  [v14 readUsingSession:v57];

  long long v46 = +[LSDatabaseContext sharedDatabaseContext];
  LODWORD(v14) = [v46 startAccessingReturningError:0];
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v16 = v15;
  id v17 = [v16 countByEnumeratingWithState:&v53 objects:block count:16];
  unsigned int v49 = v16;
  int v45 = (int)v14;
  if (!v17)
  {
    uint64_t v19 = 0;
    goto LABEL_30;
  }
  id v18 = v17;
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)v54;
  p_superclass = SQLiteDatabaseSession.superclass;
  do
  {
    for (i = 0; i != v18; i = (char *)i + 1)
    {
      if (*(void *)v54 != v20) {
        objc_enumerationMutation(v16);
      }
      uint64_t v23 = *(void *)(*((void *)&v53 + 1) + 8 * i);
      id v25 = [p_superclass + 399 proxyForBundleID:v23];
      if ([v25 isInstalled])
      {
        if (!v52)
        {
          ++v19;
          goto LABEL_25;
        }
        uint64_t v26 = v19;
        double v27 = [v50 objectForKeyedSubscript:v23];
        if ([v27 BOOLValue])
        {

          goto LABEL_21;
        }
        id v30 = [v25 record];
        unsigned int v31 = sub_10042802C(v30);

        p_superclass = (__objc2_class **)(SQLiteDatabaseSession + 8);
        if (v31)
        {
          uint64_t v19 = v26 + 1;
        }
        else
        {
LABEL_21:
          double v32 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            unsigned __int8 v33 = [v51 logKey];
            *(_DWORD *)long long buf = 138412546;
            uint64_t v60 = v33;
            __int16 v61 = 2114;
            uint64_t v62 = v23;
            _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[%@] Found update but was authorized to install it automatically: %{public}@", buf, 0x16u);

            p_superclass = (__objc2_class **)(SQLiteDatabaseSession + 8);
          }

          uint64_t v19 = v26;
        }
        id v16 = v49;
        goto LABEL_25;
      }
      id v28 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        id v29 = [v51 logKey];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v60 = v29;
        __int16 v61 = 2114;
        uint64_t v62 = v23;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[%@] Found update that is not installed: %{public}@", buf, 0x16u);

        p_superclass = (__objc2_class **)(SQLiteDatabaseSession + 8);
      }

LABEL_25:
    }
    id v18 = [v16 countByEnumeratingWithState:&v53 objects:block count:16];
  }
  while (v18);
LABEL_30:
  uint64_t v34 = v19;

  if (v45) {
    [v46 stopAccessing];
  }
  id v35 = +[NSDate date];
  [v35 timeIntervalSinceReferenceDate];
  double v37 = v36;

  unsigned __int8 v38 = ASDLogHandleForCategory();
  id v6 = v47;
  uint64_t v4 = v48;
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v39 = [v51 logKey];
    *(_DWORD *)long long buf = 138412802;
    uint64_t v60 = v39;
    __int16 v61 = 2048;
    uint64_t v62 = v34;
    __int16 v63 = 2048;
    double v64 = v37 - v13;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "[%@] Current update count: %ld elapsedTime: %f", buf, 0x20u);
  }
LABEL_35:

  id v40 = v6;
  id v41 = v51;
  uint64_t v42 = v34;
  if ((+[AMSDevice deviceIsAppleTV] & 1) == 0)
  {
    long long v43 = *(NSObject **)(v4 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100352860;
    block[3] = &unk_100525408;
    uint64_t v68 = v34;
    id v66 = v41;
    id v67 = v40;
    dispatch_async(v43, block);
  }
  return v42;
}

void sub_10034BA0C(uint64_t a1)
{
  [*(id *)(a1 + 32) verifyAllPendingUpdates];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(NSObject **)(v2 + 32);
    dispatch_async(v3, &stru_1005292C8);
  }
}

void sub_10034BB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10034BD34(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    id v3 = a2;
    uint64_t v4 = [v3 connection];

    id v5 = sub_1002FF548((uint64_t)AppUpdateEntity, v4, 0);
  }
  else
  {
    id v6 = a2;
    BOOL v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_per_device" equalToValue:&__kCFBooleanFalse];
    v14[0] = v7;
    unsigned int v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_b2b_custom_app" equalToValue:&__kCFBooleanFalse];
    v14[1] = v8;
    uint64_t v9 = +[NSArray arrayWithObjects:v14 count:2];
    long long v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v9];

    long long v11 = [v6 connection];

    id v5 = sub_1002FF548((uint64_t)AppUpdateEntity, v11, v10);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10034BF2C;
  v12[3] = &unk_1005213B0;
  id v13 = *(id *)(a1 + 32);
  [v5 enumerateMemoryEntitiesUsingBlock:v12];
}

id sub_10034BF2C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

BOOL sub_10034BF38(uint64_t a1, void *a2)
{
  return sub_100374400(a2, *(void **)(a1 + 32));
}

void sub_10034C00C(void *a1)
{
  LOBYTE(v2) = 1;
  id v3 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:7 requestToken:a1[4] logKey:0 callbackHandler:a1[6] includeMetrics:0 isVPPLookup:1 userInitiated:v2 targetedItemID:0];
  sub_10034C08C(a1[5], v3);
}

void sub_10034C08C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = [v3 callbackHandler];

    if (v5)
    {
      uint64_t v41 = 0;
      uint64_t v42 = &v41;
      uint64_t v43 = 0x3032000000;
      long long v44 = sub_100018268;
      int v45 = sub_100017CF0;
      id v46 = (id)objc_opt_new();
      id v6 = sub_10001A308();
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_1003500F8;
      v37[3] = &unk_100529148;
      id v7 = v4;
      id v38 = v7;
      uint64_t v39 = a1;
      id v40 = &v41;
      [v6 readUsingSession:v37];

      v36[0] = 0;
      v36[1] = v36;
      v36[2] = 0x2020000000;
      v36[3] = 0;
      v35[0] = 0;
      v35[1] = v35;
      v35[2] = 0x2020000000;
      v35[3] = 0;
      if ([(id)v42[5] count])
      {
        unsigned int v8 = +[NSMutableSet set];
        uint64_t v9 = *(void **)(a1 + 64);
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472;
        v33[2] = sub_1003507F8;
        v33[3] = &unk_1005218C0;
        void v33[4] = a1;
        id v10 = v8;
        id v34 = v10;
        sub_100010468(v9, v33);
        BOOL v11 = sub_100005CF8();
        unsigned int v12 = +[ASDUpdatesService isAutomaticUpdateAuthorizationEnabled];
        char v13 = v12;
        if (v12)
        {
          id v14 = sub_1003F1F68((uint64_t)AppDefaultsManager, @"AutomaticUpdateAuthorizations");
        }
        else
        {
          id v14 = 0;
        }
        id v15 = (void *)v42[5];
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_100350914;
        v24[3] = &unk_100529170;
        id v16 = v10;
        id v25 = v16;
        id v28 = &v41;
        id v26 = v7;
        char v31 = v13;
        BOOL v32 = v11;
        id v17 = v14;
        id v27 = v17;
        id v29 = v36;
        id v30 = v35;
        [v15 enumerateObjectsWithOptions:2 usingBlock:v24];
      }
      id v18 = *(NSObject **)(a1 + 24);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_100350B60;
      v19[3] = &unk_100529198;
      id v20 = v7;
      long long v21 = v36;
      unsigned __int8 v22 = v35;
      uint64_t v23 = &v41;
      dispatch_async(v18, v19);

      _Block_object_dispose(v35, 8);
      _Block_object_dispose(v36, 8);

      _Block_object_dispose(&v41, 8);
    }
  }
}

void sub_10034C40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10034C4EC(uint64_t a1)
{
}

void sub_10034C5BC(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = v10;
  void v10[2] = 0x3032000000;
  void v10[3] = sub_100018268;
  void v10[4] = sub_100017CF0;
  id v11 = 0;
  uint64_t v2 = sub_10001A308();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10034C744;
  v7[3] = &unk_100524060;
  uint64_t v9 = v10;
  id v8 = *(id *)(a1 + 32);
  [v2 readUsingSession:v7];

  id v3 = *(NSObject **)(*(void *)(a1 + 40) + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10034C798;
  v4[3] = &unk_100524560;
  id v5 = *(id *)(a1 + 48);
  id v6 = v10;
  dispatch_async(v3, v4);

  _Block_object_dispose(v10, 8);
}

void sub_10034C72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10034C744(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1004209A0(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_10034C798(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_10034C878(uint64_t a1)
{
  uint64_t v2 = [_TtC9appstored14UpdatesContext alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10034C950;
  v6[3] = &unk_100527DE8;
  id v7 = *(id *)(a1 + 48);
  LOBYTE(v5) = 0;
  uint64_t v4 = [(UpdatesContext *)v2 initWithReason:0 requestToken:v3 logKey:0 callbackHandler:v6 includeMetrics:0 isVPPLookup:0 userInitiated:v5 targetedItemID:0];
  sub_10034C08C(*(void *)(a1 + 40), v4);
}

uint64_t sub_10034C950(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    a2 = &__NSArray0__struct;
  }
  return (*(uint64_t (**)(uint64_t, void *))(v2 + 16))(v2, a2);
}

void sub_10034C9E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = objc_alloc_init(_TtC9appstored14UpdatesContext);
  sub_10034B474(v1, @"Hide Pending Updates Badge", v2);
}

uint64_t sub_10034CB78(uint64_t a1)
{
  sub_10034CBD0(*(void *)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_10034CBD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [v6 logKey];
      int v9 = 138412546;
      id v10 = v8;
      __int16 v11 = 2114;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Sending updates changed notification with reason: %{public}@", (uint8_t *)&v9, 0x16u);
    }
    notify_post("com.apple.appstored.updatesstorechanged");
  }
}

void sub_10034CD40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Post processing update metrics", (uint8_t *)v8, 2u);
    }

    uint64_t v3 = objc_opt_new();
    uint64_t v4 = sub_10001A308();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100351428;
    v8[3] = &unk_100523CA8;
    id v5 = v3;
    id v9 = v5;
    uint64_t v10 = v1;
    [v4 readUsingSession:v8];

    if ([v5 count])
    {
      id v6 = sub_10039B090();
      sub_10039B1EC((uint64_t)v6, v5);
    }
    id v7 = +[NSDate date];
    sub_1003F436C((uint64_t)AppDefaultsManager, v7);
  }
}

void sub_10034CF18(uint64_t a1)
{
  uint64_t v2 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:1];
  sub_10034CF78(*(void *)(a1 + 32), v2);
}

void sub_10034CF78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v5 = v3;
    if (+[AMSDevice deviceIsAppleTV]
      && (![v5 userInitiated] || !*(unsigned char *)(a1 + 48)))
    {
      uint64_t v4 = [v5 logKey];
      sub_10034F8D0(a1, v4);
    }
    sub_10034DACC((void *)a1, v5);
    id v3 = v5;
  }
}

void sub_10034D084(uint64_t a1)
{
  if ((+[AMSDevice deviceIsAppleTV] & 1) == 0
    && !sub_1003F3678()
    && !sub_100005CF8())
  {
    sub_1003F37CC((uint64_t)AppDefaultsManager, 1);
    uint64_t v2 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:3];
    sub_10034CF78(*(void *)(a1 + 32), v2);
  }
}

void sub_10034D1C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = objc_alloc_init(_TtC9appstored14UpdatesContext);
  sub_10034B474(v1, v2, v3);
}

void sub_10034D2E4(void *a1)
{
  LOBYTE(v8) = 0;
  uint64_t v2 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:0 requestToken:a1[4] logKey:0 callbackHandler:0 includeMetrics:0 isVPPLookup:0 userInitiated:v8 targetedItemID:0];
  uint64_t v3 = sub_10034B474(a1[5], @"Client Refresh Count", v2);
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [(UpdatesContext *)v2 logKey];
    *(_DWORD *)long long buf = 138412546;
    char v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Refresh update count returning count: %ld", buf, 0x16u);
  }
  id v6 = (void *)a1[6];
  if (v6)
  {
    id v7 = *(NSObject **)(a1[5] + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10034D47C;
    block[3] = &unk_1005273A8;
    id v10 = v6;
    uint64_t v11 = v3;
    dispatch_async(v7, block);
  }
}

uint64_t sub_10034D47C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0);
}

void sub_10034D55C(void *a1)
{
  uint64_t v2 = [_TtC9appstored14UpdatesContext alloc];
  uint64_t v3 = a1[4];
  uint64_t v4 = +[NSNumber numberWithLongLong:a1[7]];
  LOBYTE(v8) = 0;
  id v5 = [(UpdatesContext *)v2 initWithReason:8 requestToken:v3 logKey:0 callbackHandler:0 includeMetrics:0 isVPPLookup:0 userInitiated:v8 targetedItemID:v4];

  sub_10034CF78(a1[5], v5);
  id v6 = (void *)a1[6];
  if (v6)
  {
    id v7 = *(NSObject **)(a1[5] + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10034D668;
    block[3] = &unk_100521F40;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

uint64_t sub_10034D668(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10034D740(void *a1)
{
  LOBYTE(v2) = 0;
  uint64_t v3 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:1 requestToken:a1[4] logKey:0 callbackHandler:a1[6] includeMetrics:0 isVPPLookup:0 userInitiated:v2 targetedItemID:0];
  sub_10034CF78(a1[5], v3);
}

void sub_10034D880(void *a1)
{
  LOBYTE(v2) = 1;
  uint64_t v3 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:0 requestToken:a1[4] logKey:0 callbackHandler:a1[6] includeMetrics:0 isVPPLookup:0 userInitiated:v2 targetedItemID:0];
  sub_10034CF78(a1[5], v3);
}

void sub_10034D9C4(uint64_t a1)
{
  LOBYTE(v5) = 0;
  uint64_t v2 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:2 requestToken:*(void *)(a1 + 32) logKey:0 callbackHandler:*(void *)(a1 + 48) includeMetrics:0 isVPPLookup:1 userInitiated:v5 targetedItemID:0];
  uint64_t v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [(UpdatesContext *)v2 logKey];
    *(_DWORD *)long long buf = 138412290;
    id v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Refreshing from server for reloadManagedUpdates", buf, 0xCu);
  }
  sub_10034DACC(*(void **)(a1 + 40), v2);
}

void sub_10034DACC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    id v37 = v3;
    id v5 = v3;
    id v39 = v4;
    uint64_t v38 = objc_opt_new();
    id v6 = objc_opt_new();
    id v7 = objc_alloc_init((Class)ASDCoastGuard);
    uint64_t v8 = objc_opt_new();
    id v9 = sub_10001A308();
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    id v51 = sub_100350C7C;
    BOOL v52 = &unk_1005291C0;
    id v53 = v8;
    id v10 = v8;
    [v9 readUsingSession:&buf];

    id v11 = [v10 copy];
    id v12 = +[LSApplicationWorkspace defaultWorkspace];
    unsigned __int8 v13 = [v12 applicationIsInstalled:@"com.apple.AppStore"];

    BOOL v14 = [v5 reason] == (id)2 || objc_msgSend(v5, "reason") == (id)4;
    uint64_t v15 = [v5 bridgedTargetedItemID];
    BOOL v16 = v15 == 0;

    if (v16)
    {
      uint64_t v18 = -1;
    }
    else
    {
      id v17 = [v5 bridgedTargetedItemID];
      uint64_t v18 = (uint64_t)[v17 integerValue];
    }
    uint64_t v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = [v5 logKey];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%@] ╒ Prepping update request", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    id v51 = sub_100352AA8;
    BOOL v52 = &unk_1005292A8;
    uint64_t v60 = v18;
    id v21 = v5;
    id v53 = v21;
    id v22 = v11;
    unsigned __int8 v61 = v13;
    BOOL v62 = v14;
    id v54 = v22;
    long long v55 = a1;
    id v23 = v6;
    id v56 = v23;
    id v24 = v7;
    id v57 = v24;
    id v25 = v39;
    id v58 = v25;
    id v26 = v38;
    id v59 = v26;
    +[ApplicationProxy enumerateApplicationsOfType:0 usingBlock:&buf];
    id v27 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = [v21 logKey];
      *(_DWORD *)id v47 = 138412546;
      *(void *)&v47[4] = v28;
      *(_WORD *)&v47[12] = 2048;
      *(void *)&v47[14] = [v26 count];
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[%@] ╘ Update request contains %ld candidate(s)", v47, 0x16u);
    }
    if ([v23 count])
    {
      id v29 = sub_10001A308();
      *(void *)id v47 = _NSConcreteStackBlock;
      *(void *)&v47[8] = 3221225472;
      *(void *)&v47[16] = sub_1003531C8;
      uint64_t v48 = &unk_100528FF8;
      id v49 = v23;
      [v29 modifyUsingTransaction:v47];

      char v30 = 1;
    }
    else
    {
      char v30 = 0;
    }
    char v31 = v59;
    id v32 = v26;

    unsigned __int8 v33 = sub_1003D6DB8((id *)[UpdatesBatchTask alloc], v32, v21);
    objc_initWeak((id *)&buf, a1);
    objc_initWeak((id *)v47, v33);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_1003517EC;
    v40[3] = &unk_100529258;
    objc_copyWeak(&v44, (id *)&buf);
    objc_copyWeak(&v45, (id *)v47);
    id v41 = v21;
    id v34 = v32;
    id v42 = v34;
    id v35 = v25;
    id v43 = v35;
    char v46 = v30;
    [v33 setCompletionBlock:v40];
    uint64_t v36 = a1[9];
    if (v36) {
      [*(id *)(v36 + 8) addOperation:v33];
    }

    objc_destroyWeak(&v45);
    objc_destroyWeak(&v44);
    objc_destroyWeak((id *)v47);
    objc_destroyWeak((id *)&buf);

    id v3 = v37;
  }
}

void sub_10034E060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a29);
  _Unwind_Resume(a1);
}

void sub_10034E130(uint64_t a1)
{
}

void sub_10034E2DC(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setup following migration", buf, 2u);
  }

  unsigned int v3 = sub_100005C38();
  id v4 = [_TtC9appstored14UpdatesContext alloc];
  id v5 = v4;
  if (v3)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10034E47C;
    void v10[3] = &unk_1005233E8;
    id v11 = (_TtC9appstored14UpdatesContext *)*(id *)(a1 + 32);
    LOBYTE(v9) = 0;
    id v6 = [(UpdatesContext *)v5 initWithReason:2 requestToken:0 logKey:0 callbackHandler:v10 includeMetrics:0 isVPPLookup:0 userInitiated:v9 targetedItemID:0];
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Checking for updates", buf, 2u);
    }

    sub_10034CF78(*(void *)(a1 + 40), v6);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = [(UpdatesContext *)v4 initWithReason:2];
    sub_10034B474(*(void *)(a1 + 40), @"Migration", v8);
  }
}

void sub_10034E47C(uint64_t a1, void *a2)
{
  id v2 = a2;
  unsigned int v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    id v5 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Force update sync complete with %lu updates", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10034E5A8(uint64_t a1)
{
  id v2 = objc_alloc_init(_TtC9appstored14UpdatesContext);
  unsigned int v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = [(UpdatesContext *)v2 logKey];
    int v5 = 138412290;
    id v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Show Pending Updates Badge", (uint8_t *)&v5, 0xCu);
  }
  sub_10034B474(*(void *)(a1 + 32), @"Show Pending Updates Badge", v2);
}

void sub_10034E778(uint64_t a1)
{
  LOBYTE(v9) = 1;
  id v2 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:5 requestToken:*(void *)(a1 + 32) logKey:0 callbackHandler:0 includeMetrics:0 isVPPLookup:0 userInitiated:v9 targetedItemID:0];
  unsigned int v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = [(UpdatesContext *)v2 logKey];
    int v5 = [*(id *)(a1 + 40) componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138412546;
    BOOL v16 = v4;
    __int16 v17 = 2112;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Starting update all with order: %@", buf, 0x16u);
  }
  id v6 = [[PerformUpdatesTask alloc] initWithContext:v2];
  [(PerformUpdatesTask *)v6 setOrderedBundleIDs:*(void *)(a1 + 40)];
  objc_initWeak((id *)buf, v6);
  objc_initWeak(&location, v2);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10034E9DC;
  void v10[3] = &unk_100529040;
  objc_copyWeak(&v12, (id *)buf);
  objc_copyWeak(&v13, &location);
  id v7 = *(id *)(a1 + 56);
  void v10[4] = *(void *)(a1 + 48);
  id v11 = v7;
  [(PerformUpdatesTask *)v6 setCompletionBlock:v10];
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 72);
  if (v8) {
    [*(id *)(v8 + 8) addOperation:v6];
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)buf);
}

void sub_10034E9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v22 - 80));
  _Unwind_Resume(a1);
}

void sub_10034E9DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = objc_loadWeakRetained((id *)(a1 + 56));
  int v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    BOOL v16 = _NSConcreteStackBlock;
    uint64_t v17 = 3221225472;
    uint64_t v18 = sub_10034EC2C;
    uint64_t v19 = &unk_100521AE0;
    id v21 = v5;
    id v20 = WeakRetained;
    dispatch_async(v6, &v16);
    id v7 = +[NSDate date];
    sub_1003F4434((uint64_t)AppDefaultsManager, v7);
  }
  if (WeakRetained) {
    id Property = objc_getProperty(WeakRetained, v3, 32, 1);
  }
  else {
    id Property = 0;
  }
  id v9 = Property;

  id v10 = ASDLogHandleForCategory();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v13 = [v4 logKey];
      if (WeakRetained) {
        id v14 = objc_getProperty(WeakRetained, v12, 32, 1);
      }
      else {
        id v14 = 0;
      }
      id v15 = v14;
      *(_DWORD *)long long buf = 138412546;
      id v23 = v13;
      __int16 v24 = 2114;
      id v25 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] Error performing update all task: %{public}@", buf, 0x16u);

      goto LABEL_12;
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = [v4 logKey];
    *(_DWORD *)long long buf = 138412290;
    id v23 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Successfully finished update all with order", buf, 0xCu);
LABEL_12:
  }
}

void sub_10034EC2C(uint64_t a1)
{
  uint64_t v4 = a1 + 32;
  id v2 = *(unsigned char **)(a1 + 32);
  uint64_t v3 = *(void *)(v4 + 8);
  if (v2) {
    uint64_t v5 = v2[24] & 1;
  }
  else {
    uint64_t v5 = 0;
  }
  id v9 = [v2 jobResults];
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 32, 1);
  }
  id v8 = Property;
  (*(void (**)(uint64_t, uint64_t, id, id))(v3 + 16))(v3, v5, v9, v8);
}

void sub_10034ED50(uint64_t a1)
{
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  id v2 = [[_TtC9appstored6LogKey alloc] initWithBase:@"Pending Update Verification"];
  uint64_t v3 = sub_10001A308();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10034EEC4;
  v9[3] = &unk_1005273F8;
  uint64_t v4 = v2;
  id v10 = v4;
  id v11 = &v12;
  [v3 modifyUsingTransaction:v9];

  if (*((unsigned char *)v13 + 24))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = objc_alloc_init(_TtC9appstored14UpdatesContext);
    sub_10034CBD0(v5, @"Updates modified", v6);

    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = objc_alloc_init(_TtC9appstored14UpdatesContext);
    sub_10034B474(v7, @"Updates Modified After Cleanup", v8);
  }
  _Block_object_dispose(&v12, 8);
}

void sub_10034EEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10034EEC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 connection];
  uint64_t v5 = sub_1002FF548((uint64_t)AppUpdateEntity, v4, 0);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10034EFC0;
  v11[3] = &unk_100529068;
  id v12 = v3;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v13 = v6;
  uint64_t v14 = v7;
  id v8 = v3;
  [v5 enumeratePersistentIDsUsingBlock:v11];
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return v9;
}

void sub_10034EFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [AppUpdateEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  if ([(SQLiteEntity *)v6 existsInDatabase]
    && sub_1003763C0(*(void *)(a1 + 32), v6, *(void **)(a1 + 40)))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_10034F104(uint64_t a1)
{
  id v2 = objc_alloc_init(_TtC9appstored14UpdatesContext);
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [(UpdatesContext *)v2 logKey];
    uint64_t v5 = [*(id *)(a1 + 32) componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138412546;
    id v12 = v4;
    __int16 v13 = 2114;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Cleaning up following removal of apps: [%{public}@]", buf, 0x16u);
  }
  id v6 = objc_alloc_init(CleanupManager);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10034F28C;
  v9[3] = &unk_1005282C0;
  uint64_t v7 = *(void **)(a1 + 32);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v2;
  id v8 = v2;
  sub_1002FB1A0((uint64_t)v6, v7, v9);
}

void sub_10034F28C(uint64_t a1, uint64_t a2)
{
  if (a2 >= 1)
  {
    uint64_t v13 = v2;
    uint64_t v14 = v3;
    id v6 = *(NSObject **)(*(void *)(a1 + 32) + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10034F340;
    block[3] = &unk_100525408;
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = a2;
    dispatch_async(v6, block);
  }
}

uint64_t sub_10034F340(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) logKey];
    uint64_t v4 = *(void *)(a1 + 48);
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@] Removed %ld uninstalled updates", (uint8_t *)&v6, 0x16u);
  }
  sub_10034CBD0(*(void *)(a1 + 40), @"App removed", *(void **)(a1 + 32));
  return sub_10034B474(*(void *)(a1 + 40), @"Apps removed", *(void **)(a1 + 32));
}

void sub_10034F4CC(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(CleanupManager);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10034F55C;
  v4[3] = &unk_100529090;
  uint64_t v3 = *(void **)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  sub_1002FB348((uint64_t)v2, v3, v4);
}

void sub_10034F55C(uint64_t a1, uint64_t a2)
{
  if (a2 >= 1)
  {
    v6[6] = v2;
    v6[7] = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(NSObject **)(v4 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10034F5DC;
    v6[3] = &unk_100521B80;
    void v6[4] = v4;
    void v6[5] = a2;
    dispatch_async(v5, v6);
  }
}

void sub_10034F5DC(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(_TtC9appstored14UpdatesContext);
  uint64_t v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [(UpdatesContext *)v2 logKey];
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412546;
    id v7 = v4;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@]: Corrected %ld installed updates", (uint8_t *)&v6, 0x16u);
  }
  sub_10034CBD0(*(void *)(a1 + 32), @"External App installed", v2);
  sub_10034B474(*(void *)(a1 + 32), @"External App installed", v2);
}

void sub_10034F784(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = sub_10001A308();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10034F834;
    v3[3] = &unk_100528FF8;
    id v4 = *(id *)(a1 + 32);
    [v2 modifyUsingTransaction:v3];
  }
}

uint64_t sub_10034F834(uint64_t a1, void *a2)
{
  return sub_1003746B4(a2, *(void *)(a1 + 32));
}

uint64_t sub_10034F844(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  unsigned __int8 v5 = sub_100374338(v3, Current - ASDSoftwareUpdateHistoryInterval);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t sub_10034F8B0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 0);
}

void sub_10034F8D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    unsigned __int8 v5 = *(void **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10034F978;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    sub_100010468(v5, v6);
  }
}

void sub_10034F978(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 48))
  {
    uint64_t v2 = objc_alloc_init(FetchTVProviderAppsTask);
    id v4 = v2;
    if (v2) {
      objc_setProperty_nonatomic_copy(v2, v3, *(id *)(a1 + 40), 56);
    }
    id v49 = 0;
    unsigned int v5 = [(Task *)v4 runTaskReturningError:&v49];
    id v6 = v49;
    id v7 = v6;
    if (v5)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 48) = 1;
      id v41 = v6;
      id v42 = v4;
      uint64_t v43 = a1;
      if (v4) {
        headboardApps = v4->_headboardApps;
      }
      else {
        headboardApps = 0;
      }
      uint64_t v9 = headboardApps;
      id v44 = objc_opt_new();
      id v10 = sub_100005660();
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      uint64_t v11 = v9;
      id v12 = [v11 countByEnumeratingWithState:&v45 objects:v54 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v46;
        do
        {
          char v15 = 0;
          do
          {
            if (*(void *)v46 != v14) {
              objc_enumerationMutation(v11);
            }
            uint64_t v16 = *(void *)(*((void *)&v45 + 1) + 8 * (void)v15);
            if (v16) {
              uint64_t v17 = *(void **)(v16 + 8);
            }
            else {
              uint64_t v17 = 0;
            }
            id v18 = v17;

            if (v18)
            {
              id v20 = objc_alloc((Class)LSApplicationRecord);
              if (v16) {
                id v21 = *(void **)(v16 + 8);
              }
              else {
                id v21 = 0;
              }
              id v22 = v21;
              id v23 = objc_msgSend(v20, "initWithStoreItemIdentifier:error:", objc_msgSend(v22, "unsignedLongLongValue"), 0);

              if (!v23
                && v10
                && (!v16 ? (__int16 v24 = 0) : (__int16 v24 = *(void **)(v16 + 8)),
                    id v25 = v24,
                    unsigned int v26 = [v10 containsObject:v25],
                    v25,
                    v26))
              {
                id v27 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  if (v16) {
                    id v28 = *(void **)(v16 + 8);
                  }
                  else {
                    id v28 = 0;
                  }
                  uint64_t v29 = *(void *)(v43 + 40);
                  id v30 = v28;
                  *(_DWORD *)long long buf = 138412546;
                  uint64_t v51 = v29;
                  __int16 v52 = 2114;
                  id v53 = v30;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[%@] Will not lookup previously installed provisioned app with itemID: %{public}@", buf, 0x16u);
                }
              }
              else
              {
                objc_msgSend(v44, "addObject:", v16, v41);
              }
            }
            char v15 = (char *)v15 + 1;
          }
          while (v13 != v15);
          id v31 = [v11 countByEnumeratingWithState:&v45 objects:v54 count:16];
          id v13 = v31;
        }
        while (v31);
      }

      id v32 = [v44 copy];
      uint64_t v33 = *(void *)(v43 + 32);
      id v34 = *(void **)(v33 + 80);
      *(void *)(v33 + 80) = v32;

      id v4 = v42;
      if (v42) {
        tvProviderApps = v42->_tvProviderApps;
      }
      else {
        tvProviderApps = 0;
      }
      id v7 = v41;
      uint64_t v36 = tvProviderApps;
      id v37 = [(NSSet *)v36 copy];
      uint64_t v38 = *(void *)(v43 + 32);
      id v39 = *(void **)(v38 + 56);
      *(void *)(v38 + 56) = v37;
    }
    else
    {
      uint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v51 = v40;
        __int16 v52 = 2114;
        id v53 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] Software update headboard completed with error: %{public}@", buf, 0x16u);
      }
    }
  }
}

void sub_10034FD4C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = ASDLogHandleForCategory();
  id v7 = v6;
  if (!a2)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    __int16 v8 = [*(id *)(a1 + 32) allKeys];
    int v9 = 138543618;
    id v10 = v5;
    __int16 v11 = 2114;
    id v12 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to set updateAvailability to Available (%{public}@) for apps: %{public}@", (uint8_t *)&v9, 0x16u);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = [*(id *)(a1 + 32) allKeys];
    int v9 = 138543362;
    id v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set updateAvailability to Available for apps: %{public}@", (uint8_t *)&v9, 0xCu);
LABEL_4:
  }
LABEL_6:
}

BOOL sub_10034FE88(id a1, AppUpdateMemoryEntity *a2)
{
  return ![(AppUpdateMemoryEntity *)a2 isAppClip];
}

uint64_t sub_10034FEA8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v6 = [v4 reason];
  id v7 = *(void **)(a1 + 48);
  __int16 v8 = *(void **)(a1 + 56);
  int v9 = (void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  id v10 = (char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  uint64_t v11 = *(void *)(*(void *)(a1 + 88) + 8);
  id obj = *(id *)(v11 + 40);
  LOBYTE(v3) = sub_100375428(v5, v3, (uint64_t)v6, v7, v8, v9, v10, &obj);

  objc_storeStrong((id *)(v11 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = (_BYTE)v3;
  id v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = [*(id *)(a1 + 40) logKey];
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    uint64_t v16 = [*(id *)(a1 + 40) humanReadableReason];
    *(_DWORD *)long long buf = 138413058;
    id v20 = v13;
    __int16 v21 = 2048;
    uint64_t v22 = v14;
    __int16 v23 = 1024;
    int v24 = v15;
    __int16 v25 = 2114;
    unsigned int v26 = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Merged %ld app updates into database with result: %d reason: %{public}@", buf, 0x26u);
  }
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
}

void sub_10035003C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) logKey];
    int v4 = 138412290;
    id v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@] Cleared expired history", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1003500F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [[SQLiteQueryDescriptor alloc] initWithEntityClass:objc_opt_class()];
  CFStringRef v30 = @"DESC";
  id v6 = +[NSArray arrayWithObjects:&v30 count:1];
  if (v4) {
    objc_setProperty_nonatomic_copy(v4, v5, v6, 40);
  }

  CFStringRef v29 = @"release_date";
  __int16 v8 = +[NSArray arrayWithObjects:&v29 count:1];
  if (v4) {
    objc_setProperty_nonatomic_copy(v4, v7, v8, 48);
  }

  if ([*(id *)(a1 + 32) isVPPLookup])
  {
    int v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_per_device" equalToValue:&__kCFBooleanTrue];
    v28[0] = v9;
    id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_b2b_custom_app" equalToValue:&__kCFBooleanTrue];
    v28[1] = v10;
    uint64_t v11 = +[NSArray arrayWithObjects:v28 count:2];
    id v12 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v11];

    if (v4) {
      objc_setProperty_nonatomic_copy(v4, v13, v12, 56);
    }
  }
  else
  {
    uint64_t v14 = sub_100350478(*(void *)(a1 + 40));
    int v15 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v14];

    if (v4) {
      objc_setProperty_nonatomic_copy(v4, v16, v15, 56);
    }
  }
  uint64_t v17 = [SQLiteQuery alloc];
  id v18 = [v3 connection];

  id v19 = [(SQLiteQuery *)v17 initOnConnection:v18 descriptor:v4];
  v27[0] = @"device_families";
  v27[1] = @"install_date";
  v27[2] = @"is_background";
  v27[3] = @"is_b2b_custom_app";
  v27[4] = @"is_per_device";
  void v27[5] = @"package_type";
  v27[6] = @"software_platform";
  v27[7] = @"store_item_data";
  v27[8] = @"timestamp";
  v27[9] = @"update_state";
  id v20 = +[NSArray arrayWithObjects:v27 count:10];
  if ([*(id *)(a1 + 32) includeMetrics])
  {
    uint64_t v21 = [v20 arrayByAddingObject:@"metrics_data"];

    id v20 = (void *)v21;
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1003505DC;
  v24[3] = &unk_1005273D0;
  id v22 = *(id *)(a1 + 32);
  uint64_t v23 = *(void *)(a1 + 48);
  id v25 = v22;
  uint64_t v26 = v23;
  [v19 enumerateMemoryEntitiesWithProperties:v20 usingBlock:v24];
}

id sub_100350478(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_per_device" equalToValue:&__kCFBooleanFalse];
    uint64_t v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_b2b_custom_app", &__kCFBooleanFalse, v1 equalToValue];
    v8[1] = v2;
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_offloaded" equalToValue:&__kCFBooleanFalse];
    void v8[2] = v3;
    int v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_code_signature_update" equalToValue:&__kCFBooleanFalse];
    v8[3] = v4;
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_state" value:&off_10054CAB0 comparisonType:2];
    void v8[4] = v5;
    id v6 = +[NSArray arrayWithObjects:v8 count:5];
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

void sub_1003505DC(uint64_t a1, void *a2)
{
  id v17 = a2;
  id v3 = [v17 valueForProperty:@"store_item_data"];
  id v4 = [objc_alloc((Class)ASDSoftwareUpdate) initWithUpdateDictionary:v3];
  if ([*(id *)(a1 + 32) includeMetrics])
  {
    id v5 = [v17 valueForProperty:@"metrics_data"];
    [v4 setMetrics:v5];
  }
  id v6 = [v17 valueForProperty:@"update_state"];
  if (objc_opt_respondsToSelector()) {
    id v7 = (char *)[v6 integerValue];
  }
  else {
    id v7 = 0;
  }
  __int16 v8 = [v17 valueForProperty:@"package_type"];

  if (objc_opt_respondsToSelector()) {
    uint64_t v9 = (uint64_t)[v8 integerValue];
  }
  else {
    uint64_t v9 = -1;
  }
  id v10 = [v17 valueForProperty:@"is_background"];

  char v11 = objc_opt_respondsToSelector();
  id v12 = v7;
  if (v11)
  {
    unsigned int v13 = objc_msgSend(v10, "BOOLValue", v7);
    if ((unint64_t)(v7 - 3) >= 2) {
      uint64_t v14 = v7;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13) {
      id v12 = v14;
    }
    else {
      id v12 = v7;
    }
  }
  [v4 setUpdateState:v12];
  [v4 setRawUpdateState:v7];
  [v4 setPackageType:v9];
  int v15 = [v17 valueForProperty:@"install_date"];
  [v4 setInstallDate:v15];

  uint64_t v16 = [v17 valueForProperty:@"timestamp"];
  [v4 setTimestamp:v16];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v4];
}

void sub_1003507F8(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "headboardProvisionedApps", 0);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v6);
        __int16 v8 = *(void **)(a1 + 40);
        if (v7) {
          id v7 = (void *)v7[1];
        }
        uint64_t v9 = v7;
        [v8 addObject:v9];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100350914(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [v5 bundleIdentifier];
  if (!v6)
  {
LABEL_16:
    unint64_t v16 = (unint64_t)[v5 updateState];
    if (v16 <= 4 && ((1 << v16) & 0x19) != 0) {
      uint64_t v17 = *(void *)(a1 + 64);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 72);
    }
    ++*(void *)(*(void *)(v17 + 8) + 24);
    goto LABEL_21;
  }
  id v7 = +[ApplicationProxy proxyForBundleID:v6];
  if (([v7 isInstalled] & 1) != 0
    || (__int16 v8 = *(void **)(a1 + 32),
        +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 storeItemIdentifier]), uint64_t v9 = objc_claimAutoreleasedReturnValue(), LOBYTE(v8) = objc_msgSend(v8, "containsObject:", v9), v9, (v8 & 1) != 0))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      if (*(unsigned char *)(a1 + 81))
      {
        long long v10 = [v7 record];
        if (sub_10042802C(v10))
        {
          long long v11 = [*(id *)(a1 + 48) objectForKeyedSubscript:v6];
          uint64_t v12 = (uint64_t)[v11 BOOLValue];
        }
        else
        {
          uint64_t v12 = 1;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 81) != 0;
    }
    [v5 setAutoUpdateEnabled:v12];

    goto LABEL_16;
  }
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) removeObjectAtIndex:a3];
  long long v13 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = [*(id *)(a1 + 40) logKey];
    int v15 = [v5 bundleIdentifier];
    int v18 = 138412546;
    id v19 = v14;
    __int16 v20 = 2114;
    uint64_t v21 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@] Removed non installed update with bundleID: %{public}@", (uint8_t *)&v18, 0x16u);
  }
LABEL_21:
}

void sub_100350B60(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) logKey];
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v7 = 138412802;
    __int16 v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@] Returning %lu available and %lu recent update(s)", (uint8_t *)&v7, 0x20u);
  }
  id v6 = [*(id *)(a1 + 32) callbackHandler];
  v6[2](v6, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), 0);
}

void sub_100350C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"update_state" values:&off_10054DFC8];
  uint64_t v5 = [v3 connection];

  id v6 = sub_1002FF548((uint64_t)AppUpdateEntity, v5, v4);

  int v7 = sub_100243654();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100350DA4;
  v8[3] = &unk_1005213B0;
  id v9 = *(id *)(a1 + 32);
  [v6 enumerateMemoryEntitiesWithProperties:v7 usingBlock:v8];
}

void sub_100350DA4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [v4 itemID];
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKey:v3];
  }
}

void sub_100350E80(uint64_t a1)
{
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  id v3 = objc_msgSend(v2, "ams_DSID");

  if (+[AMSDevice deviceIsAppleTV] && sub_100005CF8())
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (*(void *)(v4 + 16))
      {
        if (objc_msgSend(v3, "isEqualToNumber:")) {
          goto LABEL_6;
        }
        uint64_t v4 = *(void *)(a1 + 32);
      }
      objc_storeStrong((id *)(v4 + 16), v3);
      if (*(unsigned char *)(*(void *)(a1 + 32) + 48))
      {
        uint64_t v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Resetting hasLoadedTVProviderApps", buf, 2u);
        }

        *(unsigned char *)(*(void *)(a1 + 32) + 48) = 0;
      }
      __int16 v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v14 = v3;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Account changed to: %@", buf, 0xCu);
      }

      LOBYTE(v12) = 0;
      id v9 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:6 requestToken:0 logKey:0 callbackHandler:&stru_1005291E0 includeMetrics:0 isVPPLookup:0 userInitiated:v12 targetedItemID:0];
      sub_10034CF78(*(void *)(a1 + 32), v9);
      goto LABEL_17;
    }
LABEL_6:
    uint64_t v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 16);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v14 = v3;
      __int16 v15 = 2114;
      uint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not handling account change from %{public}@ to: %{public}@", buf, 0x16u);
    }

    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = v3;
    id v9 = *(_TtC9appstored14UpdatesContext **)(v7 + 16);
    *(void *)(v7 + 16) = v8;
LABEL_17:
  }
}

void sub_1003510C4(id a1, NSArray *a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138543362;
      uint64_t v6 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error performing update for account change: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10035117C(void *a1)
{
  uint64_t v2 = +[NSString stringWithFormat:@"%lld", a1[6]];
  uint64_t v3 = a1[4];
  uint64_t v4 = [_TtC9appstored6LogKey alloc];
  uint64_t v26 = v2;
  int v5 = +[NSArray arrayWithObjects:&v26 count:1];
  uint64_t v6 = [(LogKey *)v4 initWithBase:@"DSID-less apps check" IDs:v5];
  sub_10034F8D0(v3, v6);

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v7 = *(id *)(a1[4] + 80);
  id v8 = [v7 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v20;
    while (2)
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (v12) {
          uint64_t v12 = (void *)v12[1];
        }
        long long v13 = v12;
        id v14 = [v13 longLongValue];
        id v15 = (id)a1[6];

        if (v14 == v15)
        {
          uint64_t v16 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            int v18 = (void *)a1[6];
            *(_DWORD *)long long buf = 134217984;
            int v24 = v18;
            _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%lld is one of the headboard apps", buf, 0xCu);
          }

          *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
          goto LABEL_15;
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v19 objects:v25 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  if (!*(unsigned char *)(*(void *)(a1[5] + 8) + 24)
    && [*(id *)(a1[4] + 56) containsObject:v2])
  {
    uint64_t v17 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138543362;
      int v24 = v2;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%{public}@ is one of the TV provider apps", buf, 0xCu);
    }

    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  }
}

void sub_100351428(uint64_t a1, void *a2)
{
  id v3 = a2;
  v17[0] = @"is_background";
  v17[1] = @"install_date";
  v17[2] = @"store_item_data";
  v17[3] = @"update_state";
  uint64_t v4 = +[NSArray arrayWithObjects:v17 count:4];
  int v5 = sub_1003F41C8();
  if (!v5)
  {
    int v5 = +[NSDate dateWithTimeIntervalSinceNow:-75600.0];
  }
  uint64_t v6 = [v3 connection];
  id v7 = sub_100300254((uint64_t)AppUpdateMemoryEntity, v6, 0);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1003515E0;
  v12[3] = &unk_100529230;
  id v13 = v5;
  id v14 = v3;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v15 = v8;
  uint64_t v16 = v9;
  id v10 = v3;
  id v11 = v5;
  [v7 enumerateMemoryEntitiesWithProperties:v4 usingBlock:v12];
}

void sub_1003515E0(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 valueForProperty:@"update_state"];
  id v5 = [v4 integerValue];

  uint64_t v6 = [v3 valueForProperty:@"install_date"];
  id v7 = [v3 valueForProperty:@"is_background"];
  unsigned int v8 = [v7 BOOLValue];

  if (v6) {
    BOOL v9 = [a1[4] compare:v6] != (id)1;
  }
  else {
    BOOL v9 = 0;
  }
  if (v5 == (id)1) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v10 == 1)
  {
    id v11 = [AppUpdateEntity alloc];
    id v12 = [v3 databaseID];
    id v13 = [a1[5] connection];
    id v14 = [(SQLiteEntity *)v11 initWithPersistentID:v12 onConnection:v13];

    if (v9 && sub_10039B170())
    {
      sub_100243794(v14);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      if (v15) {
        [a1[6] addObject:v15];
      }
      goto LABEL_14;
    }
  }
  else
  {
    ASDLogHandleForCategory();
    id v14 = (UpdateItemMetrics *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v14->super, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = objc_opt_class();
      id v15 = v16;
      int v17 = 138543618;
      int v18 = v16;
      __int16 v19 = 2048;
      id v20 = [v3 databaseID];
      _os_log_impl((void *)&_mh_execute_header, &v14->super, OS_LOG_TYPE_DEFAULT, "[%{public}@] Skipping manual update notification for %lld", (uint8_t *)&v17, 0x16u);
LABEL_14:
    }
  }
}

void sub_1003517EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v4 = WeakRetained[4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003518E8;
  v6[3] = &unk_100526948;
  void v6[4] = WeakRetained;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  char v11 = *(unsigned char *)(a1 + 72);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1003518E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v60 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 48);
  id v3 = *(void **)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    id v6 = [*(id *)(v5 + 64) copy];
  }
  else {
    id v6 = 0;
  }
  int v55 = *(unsigned __int8 *)(a1 + 72);
  id v57 = v2;
  id v58 = v4;
  id v7 = v3;
  id v8 = v6;
  id v59 = v8;
  if (v60)
  {
    v83[0] = 0;
    v83[1] = v83;
    v83[2] = 0x2020000000;
    char v84 = 0;
    uint64_t v77 = 0;
    id v78 = &v77;
    uint64_t v79 = 0x3032000000;
    id v80 = sub_100018268;
    id v81 = sub_100017CF0;
    id v82 = 0;
    uint64_t v73 = 0;
    double v74 = &v73;
    uint64_t v75 = 0x2020000000;
    uint64_t v76 = 0;
    uint64_t v69 = 0;
    id v70 = &v69;
    uint64_t v71 = 0x2020000000;
    char v72 = 0;
    id v9 = objc_opt_new();
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v10 = v59;
    id v11 = [v10 countByEnumeratingWithState:&v65 objects:v103 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v66;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v66 != v12) {
            objc_enumerationMutation(v10);
          }
          id v14 = *(void **)(*((void *)&v65 + 1) + 8 * i);
          id v15 = [v14 itemID];
          uint64_t v16 = [v7 objectForKeyedSubscript:v15];

          if (v16 || [v14 isAppClip])
          {
            int v17 = [v14 bundleID];
            [v9 setObject:&off_10054CA50 forKeyedSubscript:v17];
          }
        }
        id v11 = [v10 countByEnumeratingWithState:&v65 objects:v103 count:16];
      }
      while (v11);
    }

    if ([v9 count])
    {
      int v18 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v19 = [v9 allKeys];
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Setting updateAvailability as available for apps: %{public}@", (uint8_t *)&buf, 0xCu);
      }
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472;
      v63[2] = sub_10034FD4C;
      v63[3] = &unk_100521710;
      id v64 = v9;
      +[LSApplicationRecord setUpdateAvailabilityForApplicationsWithBundleIdentifiers:v64 completionHandler:v63];
    }
    id v20 = sub_100392558(v10, &stru_1005290F8);

    long long v21 = sub_10001A308();
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    unsigned int v93 = sub_10034FEA8;
    id v94 = &unk_100529120;
    id v99 = v83;
    id v54 = v20;
    id v95 = v54;
    id v22 = v57;
    id v96 = v22;
    id v97 = v58;
    id v98 = v7;
    id v100 = &v73;
    id v101 = &v69;
    id v102 = &v77;
    [v21 modifyUsingTransaction:&buf];

    int v23 = *((unsigned __int8 *)v70 + 24);
    uint64_t v56 = v74[3];
    id v24 = v22;
    id v85 = 0;
    uint64_t v86 = (uint64_t)&v85;
    uint64_t v87 = 0x2020000000;
    id v88 = 0;
    id v25 = sub_10001A308();
    *(void *)block = _NSConcreteStackBlock;
    *(void *)&block[8] = 3221225472;
    *(void *)&block[16] = sub_100352450;
    *(void *)&block[24] = &unk_100529280;
    *(void *)&long long v105 = v60;
    *((void *)&v105 + 1) = &v85;
    [v25 readUsingSession:block];

    uint64_t v26 = *(void *)(v86 + 24);
    _Block_object_dispose(&v85, 8);
    if (v26 < 1)
    {
      id v35 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = [v24 logKey];
        id v37 = [v24 humanReadableReason];
        *(_DWORD *)block = 138412546;
        *(void *)&void block[4] = v36;
        *(_WORD *)&block[12] = 2114;
        *(void *)&block[14] = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "[%@] No updates to perform after merge updates for reason: %{public}@", block, 0x16u);
      }
    }
    else
    {
      BOOL v27 = sub_100005CF8();
      unsigned int v28 = [v24 shouldPerformUpdates];
      ASDLogHandleForCategory();
      CFStringRef v29 = (PerformUpdatesTask *)objc_claimAutoreleasedReturnValue();
      BOOL v30 = os_log_type_enabled(&v29->super.super.super, OS_LOG_TYPE_DEFAULT);
      if ((v28 & v27) == 1)
      {
        if (v30)
        {
          id v31 = [v24 logKey];
          id v32 = [v24 humanReadableReason];
          *(_DWORD *)block = 138412802;
          *(void *)&void block[4] = v31;
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 1;
          *(_WORD *)&block[18] = 2114;
          *(void *)&block[20] = v32;
          _os_log_impl((void *)&_mh_execute_header, &v29->super.super.super, OS_LOG_TYPE_DEFAULT, "[%@] Purchasing updates with auto updates enabled: %d reason: %{public}@", block, 0x1Cu);
        }
        uint64_t v33 = +[NSDate date];
        sub_1003F43D0((uint64_t)AppDefaultsManager, v33);

        CFStringRef v29 = [[PerformUpdatesTask alloc] initWithContext:v24];
        uint64_t v34 = *(void *)(v60 + 72);
        if (v34) {
          [*(id *)(v34 + 8) addOperation:v29];
        }
      }
      else if (v30)
      {
        uint64_t v38 = [v24 logKey];
        id v39 = [v24 humanReadableReason];
        *(_DWORD *)block = 138412802;
        *(void *)&void block[4] = v38;
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = v27;
        *(_WORD *)&block[18] = 2114;
        *(void *)&block[20] = v39;
        _os_log_impl((void *)&_mh_execute_header, &v29->super.super.super, OS_LOG_TYPE_DEFAULT, "[%@] Not purchasing updates with auto updates enabled: %d reason: %{public}@", block, 0x1Cu);
      }
      id v35 = [v24 humanReadableReason];
      uint64_t v40 = +[NSString stringWithFormat:@"Updates merged in with load reason %@", v35];
      sub_10034B474(v60, v40, v24);
    }
    if (((v26 == v56) & ~((v23 | v55) != 0)) == 0)
    {
      id v41 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        id v42 = [v24 logKey];
        uint64_t v43 = [v24 humanReadableReason];
        *(_DWORD *)block = 138413058;
        *(void *)&void block[4] = v42;
        *(_WORD *)&block[12] = 2048;
        *(void *)&block[14] = v26;
        *(_WORD *)&block[22] = 2048;
        *(void *)&block[24] = v56;
        LOWORD(v105) = 2114;
        *(void *)((char *)&v105 + 2) = v43;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "[%@] Notify updates changed with count: %ld mergeCount: %ld reason: %{public}@", block, 0x2Au);
      }
      id v44 = [v24 humanReadableReason];
      sub_10034CBD0(v60, v44, v24);
    }
    if ([v24 isBackgroundRequest])
    {
      long long v45 = +[NSDate date];
      sub_1003F4434((uint64_t)AppDefaultsManager, v45);

      v61[0] = _NSConcreteStackBlock;
      v61[1] = 3221225472;
      void v61[2] = sub_10035003C;
      v61[3] = &unk_100521710;
      id v62 = v24;
      long long v46 = v61;
      v90[0] = 0;
      v90[1] = v90;
      v90[2] = 0x2020000000;
      char v91 = 0;
      long long v47 = sub_10001A308();
      id v85 = _NSConcreteStackBlock;
      uint64_t v86 = 3221225472;
      uint64_t v87 = (uint64_t)sub_10034F844;
      id v88 = &unk_1005290B8;
      __int16 v89 = v90;
      [v47 modifyUsingTransaction:&v85];

      long long v48 = *(NSObject **)(v60 + 24);
      *(void *)block = _NSConcreteStackBlock;
      *(void *)&block[8] = 3221225472;
      *(void *)&block[16] = sub_10034F8B0;
      *(void *)&block[24] = &unk_100524560;
      id v49 = v46;
      *(void *)&long long v105 = v49;
      *((void *)&v105 + 1) = v90;
      dispatch_async(v48, block);

      _Block_object_dispose(v90, 8);
    }
    if (os_variant_has_internal_content())
    {
      id v50 = objc_opt_new();
      uint64_t v51 = +[NSDate date];
      [v50 setPollTime:v51];

      if ([v24 reason] == (id)1)
      {
        [v50 setReason:@"Auto"];
      }
      else
      {
        __int16 v52 = [v24 humanReadableReason];
        [v50 setReason:v52];
      }
      [v50 setBundleIDs:v78[5]];
      id v53 = objc_opt_new();
      [v53 addPoll:v50];
    }
    sub_10034C08C(v60, v24);

    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&v73, 8);
    _Block_object_dispose(&v77, 8);

    _Block_object_dispose(v83, 8);
    id v8 = v54;
  }
}

void sub_1003523C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_100352450(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = sub_1003525A4(v3);
  id v6 = [v4 connection];

  id v7 = sub_1002FF80C((uint64_t)AppUpdateEntity, @"ROWID", v5, v6);

  if (objc_opt_respondsToSelector()) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v7 integerValue];
  }
  id v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v10 = 134217984;
    uint64_t v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Current update count is: %ld", (uint8_t *)&v10, 0xCu);
  }
}

id sub_1003525A4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = sub_100350478(a1);
    uint64_t v2 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"update_state" values:&off_10054DFE0];
    id v7 = v2;
    uint64_t v3 = +[NSArray arrayWithObjects:&v7 count:1];
    id v4 = [v1 arrayByAddingObjectsFromArray:v3];

    uint64_t v5 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v4];
  }
  else
  {
    uint64_t v5 = 0;
  }
  return v5;
}

void sub_1003526A8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 connection];
  id v4 = sub_1003525A4(*(void *)(a1 + 32));
  uint64_t v5 = sub_1002FF548((uint64_t)AppUpdateEntity, v3, v4);

  CFStringRef v9 = @"bundle_id";
  id v6 = +[NSArray arrayWithObjects:&v9 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003527E4;
  v7[3] = &unk_1005213B0;
  id v8 = *(id *)(a1 + 40);
  [v5 enumerateMemoryEntitiesWithProperties:v6 usingBlock:v7];
}

void sub_1003527E4(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 bundleID];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = [v6 bundleID];
    [v4 addObject:v5];
  }
}

void sub_100352860(uint64_t a1)
{
  id v2 = [objc_alloc((Class)UISApplicationState) initWithBundleIdentifier:@"com.apple.AppStore"];
  id v3 = [v2 badgeValue];
  id v4 = v3;
  if (v3)
  {
    objc_opt_class();
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass())) {
      id v3 = [v4 integerValue];
    }
    else {
      id v3 = 0;
    }
  }
  if (v3 == *(id *)(a1 + 48))
  {
    uint64_t v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [*(id *)(a1 + 32) logKey];
      uint64_t v7 = *(void *)(a1 + 48);
      BOOL v8 = sub_100005CF8();
      uint64_t v9 = *(void *)(a1 + 40);
      int v15 = 138413314;
      uint64_t v16 = v6;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      __int16 v19 = 2114;
      id v20 = v4;
      __int16 v21 = 1024;
      BOOL v22 = v8;
      __int16 v23 = 2114;
      uint64_t v24 = v9;
      int v10 = "[%@] Leaving badge count at: %ld badgeValue: %{public}@ auto enabled: %d reason: %{public}@";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v15, 0x30u);
    }
  }
  else
  {
    uint64_t v11 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:");
    [v2 setBadgeValue:v11];

    uint64_t v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [*(id *)(a1 + 32) logKey];
      uint64_t v12 = *(void *)(a1 + 48);
      BOOL v13 = sub_100005CF8();
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138413314;
      uint64_t v16 = v6;
      __int16 v17 = 2048;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      id v20 = v4;
      __int16 v21 = 1024;
      BOOL v22 = v13;
      __int16 v23 = 2114;
      uint64_t v24 = v14;
      int v10 = "[%@] Updated badge count to: %ld previous badgeValue: %{public}@ auto enabled: %d reason: %{public}@";
      goto LABEL_11;
    }
  }
}

void sub_100352AA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 88);
  if (v5 < 1 || (id)v5 == [v3 storeItemID])
  {
    id v6 = [*(id *)(a1 + 32) logKey];
    unsigned __int8 v7 = [v4 validateEligibilityForUpdatesWithLogKey:v6];

    if ((v7 & 1) == 0)
    {
      int v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = [*(id *)(a1 + 32) logKey];
        int v15 = [v4 bundleID];
        *(_DWORD *)long long v47 = 138412546;
        *(void *)&v47[4] = v14;
        *(_WORD *)&v47[12] = 2114;
        *(void *)&v47[14] = v15;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Skipping ineligible app: %{public}@", v47, 0x16u);
      }
      goto LABEL_38;
    }
    BOOL v8 = *(void **)(a1 + 40);
    uint64_t v9 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v4 storeItemID]);
    int v10 = [v8 objectForKey:v9];

    uint64_t v11 = [v10 evid];
    uint64_t v12 = (uint64_t)[v11 longLongValue];

    if (!*(unsigned char *)(a1 + 96))
    {
      BOOL v13 = [v4 storeMetadata];
      if ([v13 deviceBasedVPP])
      {
      }
      else
      {
        uint64_t v16 = [v4 storeMetadata];
        unsigned __int8 v17 = [v16 isB2BCustomApp];

        if ((v17 & 1) == 0)
        {
          if (!v10) {
            goto LABEL_38;
          }
          id v42 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v43 = [*(id *)(a1 + 32) logKey];
            id v44 = [v4 bundleID];
            *(_DWORD *)long long v47 = 138412546;
            *(void *)&v47[4] = v43;
            *(_WORD *)&v47[12] = 2114;
            *(void *)&v47[14] = v44;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[%@] ├ DRP { %{public}@ }", v47, 0x16u);
          }
          id v41 = sub_10001A308();
          long long v45 = [v4 bundleID];
          long long v46 = [*(id *)(a1 + 32) logKey];
          sub_1002E8604(v41, v45, v46);

          goto LABEL_37;
        }
      }
    }
    if (v12)
    {
      if (!*(unsigned char *)(a1 + 97))
      {
        if (*(void *)(a1 + 48)
          && ([v10 valueForProperty:@"timestamp"],
              uint64_t v18 = objc_claimAutoreleasedReturnValue(),
              [v18 timeIntervalSinceNow],
              double v20 = v19,
              v18,
              v20 < -1209600.0))
        {
          [*(id *)(a1 + 56) addObject:v10];
          uint64_t v12 = (uint64_t)[v4 storeExternalVersionID];
          __int16 v21 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v22 = [*(id *)(a1 + 32) logKey];
            *(_DWORD *)long long v47 = 138412546;
            *(void *)&v47[4] = v22;
            *(_WORD *)&v47[12] = 2114;
            *(void *)&v47[14] = v10;
            __int16 v23 = "[%@] ├ REL %{public}@";
LABEL_24:
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v23, v47, 0x16u);
          }
        }
        else
        {
          __int16 v21 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v22 = [*(id *)(a1 + 32) logKey];
            *(_DWORD *)long long v47 = 138412546;
            *(void *)&v47[4] = v22;
            *(_WORD *)&v47[12] = 2114;
            *(void *)&v47[14] = v10;
            __int16 v23 = "[%@] ├ PRE %{public}@";
            goto LABEL_24;
          }
        }

        goto LABEL_26;
      }
    }
    else if (!*(unsigned char *)(a1 + 97))
    {
      uint64_t v24 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v27 = [*(id *)(a1 + 32) logKey];
        unsigned int v28 = [v4 bundleID];
        *(_DWORD *)long long v47 = 138412802;
        *(void *)&v47[4] = v27;
        *(_WORD *)&v47[12] = 2114;
        *(void *)&v47[14] = v28;
        *(_WORD *)&v47[22] = 2048;
        id v48 = [v4 storeExternalVersionID];
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] ├ NEW { %{public}@ evid: %lld }", v47, 0x20u);
      }
      goto LABEL_19;
    }
    uint64_t v24 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      id v25 = [*(id *)(a1 + 32) logKey];
      uint64_t v26 = [v4 bundleID];
      *(_DWORD *)long long v47 = 138413058;
      *(void *)&v47[4] = v25;
      *(_WORD *)&v47[12] = 2114;
      *(void *)&v47[14] = v26;
      *(_WORD *)&v47[22] = 2048;
      id v48 = [v4 storeExternalVersionID];
      __int16 v49 = 2048;
      uint64_t v50 = v12;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] ├ FRC { %{public}@ evid: %lld currentEvid: %lld }", v47, 0x2Au);
    }
LABEL_19:

    uint64_t v12 = (uint64_t)[v4 storeExternalVersionID];
LABEL_26:
    if (v12 < 1)
    {
LABEL_38:

      goto LABEL_39;
    }
    unsigned int v29 = [v4 codeSignatureVersion];
    if (v29 < kMISFutureMinSupportedSignatureVersion)
    {
      if (objc_msgSend(*(id *)(a1 + 64), "isUnrepairableAppWithItemID:externalVersionID:", objc_msgSend(v4, "storeItemID"), v12))
      {
        BOOL v30 = &off_10054CA38;
      }
      else
      {
        +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v4 storeExternalVersionID]);
        BOOL v30 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
        uint64_t v12 = 0;
      }
      id v31 = *(void **)(a1 + 72);
      id v32 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v4, "storeItemID", *(_OWORD *)v47, *(void *)&v47[16]));
      [v31 setObject:v30 forKeyedSubscript:v32];
    }
    uint64_t v33 = [v10 valueForProperty:@"update_state", *(void *)v47, *(_OWORD *)&v47[8]];
    id v34 = [v33 integerValue];

    if (v34 == (id)5)
    {
      id v35 = [v10 evid];
      uint64_t v12 = (uint64_t)[v35 longLongValue];

      uint64_t v36 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        id v37 = [*(id *)(a1 + 32) logKey];
        id v38 = [v4 storeItemID];
        *(_DWORD *)long long v47 = 138412802;
        *(void *)&v47[4] = v37;
        *(_WORD *)&v47[12] = 2048;
        *(void *)&v47[14] = v38;
        *(_WORD *)&v47[22] = 2048;
        id v48 = (id)v12;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[%@] Only checking for newer updates (%lld -> %lld) due to the current update being marked as blocked.", v47, 0x20u);
      }
    }
    id v39 = [UpdatableApp alloc];
    uint64_t v40 = +[NSNumber numberWithLongLong:v12];
    id v41 = sub_100332960(v39, v4, v40);

    [*(id *)(a1 + 80) addObject:v41];
LABEL_37:

    goto LABEL_38;
  }
LABEL_39:
}

BOOL sub_1003531C8(uint64_t a1, void *a2)
{
  return sub_100374400(a2, *(void **)(a1 + 32));
}

void sub_1003531D8(id a1)
{
  sub_10001A308();
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  [v1 modifyUsingTransaction:&stru_100529308];
}

BOOL sub_100353228(id a1, AppUpdatesDatabaseTransaction *a2)
{
  id v2 = a2;
  id v3 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"update_state" values:&off_10054DFF8];
  id v4 = [(AppUpdatesDatabaseSession *)v2 connection];
  uint64_t v5 = sub_1002FF548((uint64_t)AppUpdateEntity, v4, v3);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100353328;
  v8[3] = &unk_100523780;
  uint64_t v9 = v2;
  id v6 = v2;
  [v5 enumeratePersistentIDsUsingBlock:v8];

  return 1;
}

void sub_100353328(uint64_t a1, uint64_t a2)
{
  id v4 = [AppUpdateEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  [(SQLiteEntity *)v6 setValue:&off_10054CA68 forProperty:@"update_state"];
  unsigned __int8 v7 = sub_10026E95C(v6, @"bundle_id");
  BOOL v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    int v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Resetting update state to available on startup: %@", (uint8_t *)&v9, 0xCu);
  }
}

id *sub_1003534EC(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)PurchaseHistoryItemsRequest;
    uint64_t v11 = (id *)objc_msgSendSuper2(&v13, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      objc_storeStrong(a1 + 2, a4);
      objc_storeWeak(a1 + 5, v9);
    }
  }

  return a1;
}

void sub_1003535A4(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = a1[2];
    if (v4 && *(void *)(v4 + 8))
    {
      uint64_t v5 = a1[1];
      id v41 = 0;
      id v6 = sub_10030B9EC(v5, @"purchase-daap/base-url", &v41);
      id v7 = v41;
      id v8 = v7;
      if (v6)
      {
        uint64_t v9 = a1[1];
        id v40 = v8;
        id v10 = sub_10030BE3C(v9, @"purchase-daap/database-id", &off_10054CAC8, &v40);
        id v11 = v40;

        if (v10)
        {
          uint64_t v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"databases/%ld/items", [v10 integerValue]);
          objc_super v13 = [v6 URLByAppendingPathComponent:v12];

          if (v13)
          {
            id v14 = 0;
            goto LABEL_14;
          }
        }
        else
        {
        }
      }
      else
      {
        id v11 = v7;
      }
      uint64_t v16 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = objc_opt_class();
        *(_DWORD *)long long buf = 138412546;
        uint64_t v43 = v36;
        __int16 v44 = 2114;
        id v45 = v11;
        id v37 = v36;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[%@]: Failed to construct request URL error: %{public}@", buf, 0x16u);
      }
      sub_100005B4C(2, (uint64_t)v11);
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      objc_super v13 = 0;
LABEL_14:

      id v17 = v14;
      if (!v13)
      {
        id v25 = sub_100005B4C(2, (uint64_t)v17);
        v3[2](v3, 0, v25);
LABEL_32:

        goto LABEL_33;
      }
      double v19 = [PurchaseHistoryItemsDAAPRequestEncoder alloc];
      id Property = (id)a1[2];
      if (Property) {
        id Property = objc_getProperty(Property, v18, 32, 1);
      }
      id v22 = Property;
      id v23 = (id)a1[2];
      if (v23) {
        id v23 = objc_getProperty(v23, v21, 40, 1);
      }
      id v24 = v23;
      id v25 = sub_10024D88C((id *)&v19->super.isa, v22, v24);

      BOOL v27 = sub_1003869E4((id *)[DAAPURLRequest alloc], v25, v13);
      id v28 = (id)a1[2];
      if (v28) {
        id v28 = objc_getProperty(v28, v26, 16, 1);
      }
      id v30 = v28;
      if (v27) {
        objc_setProperty_atomic(v27, v29, v30, 24);
      }

      id v32 = (void *)a1[2];
      if (v32)
      {
        uint64_t v33 = (void *)v32[1];
        if (!v27)
        {
LABEL_26:
          if (v32) {
            id v32 = objc_getProperty(v32, v31, 24, 1);
          }
          id v35 = v32;
          if (v27) {
            objc_setProperty_atomic(v27, v34, v35, 40);
          }

          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3221225472;
          v38[2] = sub_100353984;
          v38[3] = &unk_100523BB0;
          v38[4] = a1;
          id v39 = v3;
          sub_100386D94((uint64_t)v27, a1, v38);

          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v33 = 0;
        if (!v27) {
          goto LABEL_26;
        }
      }
      v27[4] = v33;
      id v32 = (void *)a1[2];
      goto LABEL_26;
    }
    int v15 = sub_100005B4C(4, 0);
    v3[2](v3, 0, v15);
  }
LABEL_33:
}

void sub_100353984(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5)
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 36)
      || [v6 code] != (id)301
      || ([v7 userInfo],
          id v10 = objc_claimAutoreleasedReturnValue(),
          [v10 objectForKey:AMSErrorUserInfoKeyStatusCode],
          id v11 = objc_claimAutoreleasedReturnValue(),
          id v12 = [v11 integerValue],
          v11,
          v10,
          v12 != (id)401))
    {
      uint64_t v20 = *(void *)(a1 + 40);
      sub_100005B4C(0, (uint64_t)v7);
      id v8 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void, id))(v20 + 16))(v20, 0, v8);
      goto LABEL_16;
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 36) = 1;
    id v8 = objc_alloc_init((Class)AMSAuthenticateOptions);
    [v8 setAuthenticationType:0];
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16);
    if (!v13 || *(void *)(v13 + 48) != 1) {
      [v8 setAuthenticationType:1];
    }
    id v15 = objc_alloc((Class)AMSAuthenticateRequest);
    id Property = *(id *)(*(void *)(a1 + 32) + 16);
    if (Property) {
      id Property = objc_getProperty(Property, v14, 16, 1);
    }
    id v17 = Property;
    id v18 = [v15 initWithAccount:v17 options:v8];

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100353BD4;
    v21[3] = &unk_100524148;
    double v19 = *(void **)(a1 + 40);
    v21[4] = *(void *)(a1 + 32);
    id v22 = v19;
    sub_10033CF54((uint64_t)InteractiveRequestPresenter, v18, v21);

LABEL_15:
    goto LABEL_16;
  }
  id v8 = [v5 data];
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v8)
  {
    sub_100005B4C(0, 0);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0, v18);
    goto LABEL_15;
  }
  (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v8, 0);
LABEL_16:
}

void sub_100353BD4(uint64_t a1, void *a2, void *a3)
{
  id v25 = a3;
  id v5 = [a2 account];
  id v6 = v5;
  if (v5 && (objc_msgSend(v5, "ams_DSID"), id v7 = objc_claimAutoreleasedReturnValue(), v7, v7))
  {
    id Property = *(id *)(*(void *)(a1 + 32) + 16);
    if (Property) {
      id Property = objc_getProperty(Property, v8, 32, 1);
    }
    id v11 = Property;
    id v12 = *(id *)(*(void *)(a1 + 32) + 16);
    if (v12) {
      id v12 = objc_getProperty(v12, v10, 40, 1);
    }
    id v14 = v12;
    id v15 = *(void **)(*(void *)(a1 + 32) + 16);
    if (v15)
    {
      int64_t v16 = v15[1];
      id v15 = objc_getProperty(v15, v13, 24, 1);
    }
    else
    {
      int64_t v16 = 0;
    }
    id v17 = v15;
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v18) {
      unint64_t v19 = *(void *)(v18 + 48);
    }
    else {
      unint64_t v19 = 0;
    }
    uint64_t v20 = sub_10025AFF8((uint64_t)PurchaseHistoryItemsRequestContext, v11, v14, v16, v6, v17, v19);

    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = *(void **)(v21 + 16);
    *(void *)(v21 + 16) = v20;
    id v23 = v20;

    sub_1003535A4(*(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 40);
    sub_100005B4C(4, (uint64_t)v25);
    id v23 = (PurchaseHistoryItemsRequestContext *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, PurchaseHistoryItemsRequestContext *))(v24 + 16))(v24, 0, v23);
  }
}

void sub_1003540E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(*(void *)(a1 + 32) + 16);
      if (Property) {
        id Property = objc_getProperty(Property, v8, 16, 1);
      }
      id v15 = Property;
      int64_t v16 = [v15 hashedDescription];
      int v17 = 138543618;
      uint64_t v18 = v16;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Errored out for auth challenge to:%{public}@ with error:%@", (uint8_t *)&v17, 0x16u);
    }
  }
  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v11 = *(id *)(*(void *)(a1 + 32) + 16);
    if (v11) {
      id v11 = objc_getProperty(v11, v10, 16, 1);
    }
    id v12 = v11;
    uint64_t v13 = [v12 hashedDescription];
    int v17 = 138543362;
    uint64_t v18 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Received response to authentication challenge for %{public}@", (uint8_t *)&v17, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100354400(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Error in dialog task: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void *sub_10035455C(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  v8.receiver = a1;
  v8.super_class = (Class)DiagnosticMessage;
  id v3 = objc_msgSendSuper2(&v8, "init");
  uint64_t v4 = v3;
  if (v3)
  {
    v3[2] = a2;
    id v5 = objc_alloc_init((Class)NSMutableDictionary);
    id v6 = (void *)v4[1];
    v4[1] = v5;
  }
  return v4;
}

id *sub_1003545D4(id *result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return (id *)[result[1] setObject:a2 forKeyedSubscript:a3];
  }
  return result;
}

id *sub_1003547F0(id *a1, void *a2, char a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_49;
  }
  v54.receiver = a1;
  v54.super_class = (Class)FamilyInfoLookupResult;
  id v6 = (id *)objc_msgSendSuper2(&v54, "init");
  a1 = v6;
  if (!v6) {
    goto LABEL_49;
  }
  *((unsigned char *)v6 + 8) = a3;
  id v50 = v5;
  id v7 = v5;
  self;
  objc_super v8 = +[ACAccountStore ams_sharedAccountStore];
  int v9 = objc_msgSend(v8, "ams_activeiCloudAccount");
  uint64_t v10 = objc_msgSend(v9, "ams_DSID");

  __int16 v11 = +[ACAccountStore ams_sharedAccountStore];
  id v12 = objc_msgSend(v11, "ams_activeiTunesAccount");
  uint64_t v13 = objc_msgSend(v12, "ams_DSID");

  id v48 = v7;
  id v14 = [v7 valueForKeyPath:@"family.members"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v15 = v14;
  }
  else {
    id v15 = 0;
  }
  __int16 v49 = a1;

  id v53 = objc_opt_new();
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v16 = v15;
  id v17 = [v16 countByEnumeratingWithState:&v59 objects:v64 count:16];
  __int16 v52 = v16;
  if (!v17)
  {

    goto LABEL_28;
  }
  id v18 = v17;
  uint64_t v51 = 0;
  uint64_t v19 = *(void *)v60;
  p_cache = &OBJC_METACLASS___lib_IXAppInstallCoordinatorTag.cache;
  do
  {
    for (i = 0; i != v18; i = (char *)i + 1)
    {
      if (*(void *)v60 != v19) {
        objc_enumerationMutation(v16);
      }
      id v22 = *(void **)(*((void *)&v59 + 1) + 8 * i);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v23 = (id *)sub_1002951A0(objc_alloc((Class)(p_cache + 313)), v22);
        if (v23)
        {
          [v53 addObject:v23];
          if (v10)
          {
            uint64_t v24 = (id *)v23[3];
            id v25 = v10;
            uint64_t v26 = v24;
            BOOL v27 = v25;
            if (objc_msgSend(v24, "isEqualToNumber:")) {
              BOOL v28 = v13 == 0;
            }
            else {
              BOOL v28 = 1;
            }
            if (v28)
            {
LABEL_20:

              uint64_t v10 = v27;
              id v16 = v52;
            }
            else
            {
              unsigned int v29 = p_cache;
              id v30 = v23[5];
              unsigned int v31 = [v30 isEqualToNumber:v13];

              if (v31)
              {
                uint64_t v26 = v51;
                uint64_t v51 = v23;
                p_cache = v29;
                goto LABEL_20;
              }
              uint64_t v10 = v27;
              id v16 = v52;
              p_cache = v29;
            }
          }
        }

        continue;
      }
    }
    id v18 = [v16 countByEnumeratingWithState:&v59 objects:v64 count:16];
  }
  while (v18);

  id v32 = v51;
  if (v51) {
    goto LABEL_43;
  }
LABEL_28:
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v33 = v53;
  id v34 = [v33 countByEnumeratingWithState:&v55 objects:v63 count:16];
  if (v34)
  {
    id v35 = v34;
    uint64_t v36 = 0;
    uint64_t v37 = *(void *)v56;
    do
    {
      id v38 = 0;
      do
      {
        if (*(void *)v56 != v37) {
          objc_enumerationMutation(v33);
        }
        if (v13)
        {
          id v39 = *(void **)(*((void *)&v55 + 1) + 8 * (void)v38);
          id v40 = v39 ? (void *)v39[5] : 0;
          id v41 = v40;
          unsigned int v42 = [v41 isEqualToNumber:v13];

          if (v42)
          {
            uint64_t v43 = v39;

            uint64_t v36 = v43;
          }
        }
        id v38 = (char *)v38 + 1;
      }
      while (v35 != v38);
      id v44 = [v33 countByEnumeratingWithState:&v55 objects:v63 count:16];
      id v35 = v44;
    }
    while (v44);

    id v32 = (id *)v36;
    if (v36) {
LABEL_43:
    }
      *((unsigned char *)v32 + 8) = 1;
  }
  else
  {

    id v32 = 0;
  }
  id v45 = [v53 sortedArrayUsingComparator:&stru_100529380];

  if (v45) {
    long long v46 = v45;
  }
  else {
    long long v46 = &__NSArray0__struct;
  }
  a1 = v49;
  objc_storeStrong(v49 + 2, v46);

  id v5 = v50;
LABEL_49:

  return a1;
}

id *sub_100354C3C(id *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_opt_new();
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = v1[2];
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v19 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_super v8 = sub_100295554(*(void **)(*((void *)&v11 + 1) + 8 * i));
          if (v8) {
            objc_msgSend(v2, "addObject:", v8, (void)v11);
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v19 count:16];
      }
      while (v5);
    }

    id v16 = v2;
    CFStringRef v17 = @"family";
    CFStringRef v15 = @"members";
    int v9 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    id v18 = v9;
    id v1 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  }
  return v1;
}

int64_t sub_100354E24(id a1, FamilyMember *a2, FamilyMember *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v4)
  {
    uint64_t v6 = v4->_firstName;
    if (v6)
    {

LABEL_8:
      if (v4->_currentSignedInUser)
      {
LABEL_9:
        int64_t v8 = -1;
        goto LABEL_10;
      }
      goto LABEL_11;
    }
  }
  if (v5) {
    firstName = v5->_firstName;
  }
  else {
    firstName = 0;
  }
  int64_t v8 = firstName;

  if (!v8) {
    goto LABEL_10;
  }
  if (v4) {
    goto LABEL_8;
  }
LABEL_11:
  if (v5) {
    uint64_t v10 = v5->_firstName;
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = v10;

  if (!v11) {
    goto LABEL_9;
  }
  if (v5 && v5->_currentSignedInUser
    || (!v4 ? (long long v12 = 0) : (long long v12 = v4->_firstName), v13 = v12, v13, !v13))
  {
    int64_t v8 = 1;
  }
  else
  {
    if (v4) {
      long long v14 = v4->_firstName;
    }
    else {
      long long v14 = 0;
    }
    CFStringRef v15 = v14;
    if (v5) {
      id v16 = v5->_firstName;
    }
    else {
      id v16 = 0;
    }
    CFStringRef v17 = v16;
    int64_t v8 = [(NSString *)v15 localizedCaseInsensitiveCompare:v17];
  }
LABEL_10:

  return v8;
}

id sub_100354F64()
{
  self;
  if (qword_1005B1008 != -1) {
    dispatch_once(&qword_1005B1008, &stru_1005293A0);
  }
  unsigned int v0 = (void *)qword_1005B1000;
  return v0;
}

void sub_100354FBC(id a1)
{
  id v1 = objc_alloc_init(CellularMonitor);
  id v2 = (void *)qword_1005B1000;
  qword_1005B1000 = (uint64_t)v1;
}

void sub_1003551EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10035520C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = sub_1002C4494();
  sub_100355274((uint64_t)WeakRetained, v1);
}

void sub_100355274(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100355928;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

id sub_100355318(uint64_t a1)
{
  return [*(id *)(a1 + 32) activeSubscriptionsDidChange];
}

void *sub_100355370(void *result)
{
  if (result)
  {
    id v1 = sub_1003553B0(result);
    id v2 = [v1 isRoaming];

    return v2;
  }
  return result;
}

void *sub_1003553B0(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v11 = 0;
    long long v12 = &v11;
    uint64_t v13 = 0x3032000000;
    long long v14 = sub_100018278;
    CFStringRef v15 = sub_100017CF8;
    id v16 = 0;
    id v2 = a1[1];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100355514;
    void v10[3] = &unk_100524F38;
    void v10[4] = v1;
    void v10[5] = &v11;
    dispatch_sync(v2, v10);
    uint64_t v3 = v1[5];
    if (v3)
    {
      char v4 = *(unsigned char *)(v3 + 10);
      if ((v4 & 1) != [(id)v12[5] isRoaming])
      {
        uint64_t v5 = v1[5];
        if (v5) {
          uint64_t v6 = *(unsigned char *)(v5 + 10) & 1;
        }
        else {
          uint64_t v6 = 0;
        }
        id v7 = [(id)v12[5] copyWithRoaming:v6];
        uint64_t v8 = (void *)v12[5];
        void v12[5] = (uint64_t)v7;
      }
    }
    id v1 = (id)v12[5];
    _Block_object_dispose(&v11, 8);
  }
  return v1;
}

void sub_1003554FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100355514(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2[2])
  {
    [v2 activeSubscriptionsDidChange];
    id v2 = *(void **)(a1 + 32);
  }
  uint64_t v3 = (void *)v2[4];
  char v4 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  objc_storeStrong(v4, v3);
}

void sub_100355928(uint64_t a1)
{
  if (*(void *)(a1 + 32) || *(void *)(*(void *)(a1 + 40) + 40))
  {
    if (os_variant_has_internal_content())
    {
      uint64_t v2 = *(void *)(a1 + 40);
      id v3 = *(id *)(a1 + 32);
      char v4 = *(void **)(v2 + 40);
      *(void *)(v2 + 40) = v3;
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 40);
      char v4 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = 0;
    }

    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 40);
    id v7 = ASDLogHandleForCategory();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (!v8) {
        goto LABEL_12;
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 40);
      LODWORD(v15) = 138543362;
      *(void *)((char *)&v15 + 4) = v9;
      uint64_t v10 = "[Cellular] Applying emulated network configuration: %{public}@";
      uint64_t v11 = v7;
      uint32_t v12 = 12;
    }
    else
    {
      if (!v8) {
        goto LABEL_12;
      }
      LOWORD(v15) = 0;
      uint64_t v10 = "[Cellular] Clearing emulated network configuration";
      uint64_t v11 = v7;
      uint32_t v12 = 2;
    }
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v15, v12);
LABEL_12:

    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      long long v14 = dispatch_get_global_queue(17, 0);
      *(void *)&long long v15 = _NSConcreteStackBlock;
      *((void *)&v15 + 1) = 3221225472;
      id v16 = sub_100355AD0;
      CFStringRef v17 = &unk_100521388;
      uint64_t v18 = v13;
      dispatch_async(v14, &v15);
    }
  }
}

void sub_100355AD0(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"CellularStateDidChangeNotification" object:*(void *)(a1 + 32)];
}

id sub_100355B30(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) internetDataStatus:a2];
}

void sub_100356430(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

void sub_100356448(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void sub_100356460(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

void sub_100356478(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

char *sub_100357BD8(char *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    uint64_t v5 = (char *)[a1 init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)(v5 + 74), a2);
      unsigned int v6 = [*(id *)(a1 + 74) isAppleSigned];
      id v7 = (id *)&AMSAccountMediaTypeProduction;
      if (!v6) {
        id v7 = (id *)&AMSAccountMediaTypeAppStoreSandbox;
      }
      objc_storeStrong((id *)(a1 + 58), *v7);
    }
  }

  return a1;
}

id sub_100358040(uint64_t a1, void *a2, void *a3)
{
  if (!a1)
  {
    id v104 = 0;
    goto LABEL_129;
  }
  id v4 = a2;
  uint64_t v5 = +[AMSProcessInfo currentProcess];
  unsigned int v6 = &OBJC_IVAR___XDCAppMetadata__bundleID;
  id v7 = *(id *)(a1 + 58);
  BOOL v8 = [v4 bundleID];

  id v9 = v7;
  id v10 = v8;
  if ([v9 isEqualToString:AMSAccountMediaTypeAppStoreSandbox])
  {
    uint64_t v11 = sub_10030B1B0();
  }
  else
  {
    if ([v9 isEqualToString:AMSAccountMediaTypeAppStoreBeta]) {
      sub_10030B1B0();
    }
    else {
    uint64_t v11 = sub_10030B11C();
    }
  }
  uint32_t v12 = (void *)v11;

  [v5 setAccountMediaType:*(void *)(a1 + 58)];
  id v142 = v12;
  id v141 = v5;
  if ([*(id *)(a1 + 58) isEqualToString:AMSAccountMediaTypeAppStoreSandbox])
  {
    uint64_t v13 = +[ACAccountStore ams_sharedAccountStoreForMediaType:AMSAccountMediaTypeAppStoreSandbox];
    objc_msgSend(v13, "ams_activeiTunesAccount");
    id v143 = (id)objc_claimAutoreleasedReturnValue();

LABEL_16:
    id v20 = 0;
    uint64_t v21 = *(void *)(a1 + 138) & 0xBLL;
    if (!v143 && !v21)
    {
      id v139 = v141;
      uint64_t v151 = 0;
      v152 = &v151;
      uint64_t v153 = 0x3032000000;
      id v154 = sub_100018288;
      id v155 = sub_100017D00;
      id v156 = 0;
      uint64_t v145 = 0;
      v146 = &v145;
      uint64_t v147 = 0x3032000000;
      v148 = sub_100018288;
      v149 = sub_100017D00;
      id v150 = 0;
      id v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = *(id *)(a1 + 90);
        id v24 = *(id *)(a1 + 74);
        id v25 = [v24 bundleID];
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Sending authentication request for receipt renewal", buf, 0x16u);
      }
      id v26 = objc_alloc_init((Class)AMSAuthenticateOptions);
      [v26 setClientInfo:v139];
      [v26 setDebugReason:@"Receipt renewal"];
      id v27 = [objc_alloc((Class)AMSAuthenticateRequest) initWithDSID:0 altDSID:0 username:0 options:v26];
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 66));
      char v29 = objc_opt_respondsToSelector();

      if (v29)
      {
        id v30 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          id v31 = *(id *)(a1 + 90);
          id v32 = *(id *)(a1 + 74);
          id v33 = [v32 bundleID];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v31;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v33;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Handling authentication request", buf, 0x16u);

          unsigned int v6 = &OBJC_IVAR___XDCAppMetadata__bundleID;
        }

        dispatch_semaphore_t v34 = dispatch_semaphore_create(0);
        id v35 = objc_loadWeakRetained((id *)(a1 + 66));
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_100359874;
        v164 = &unk_100526FD0;
        *(void *)&v165[8] = &v145;
        *(void *)&v165[16] = &v151;
        uint64_t v36 = v34;
        *(void *)v165 = v36;
        [v35 handleAuthenticateRequest:v27 resultHandler:buf];

        int64_t v37 = dispatch_time(0, 300000000000);
        dispatch_time_t v38 = dispatch_time(0, v37);
        if (dispatch_semaphore_wait(v36, v38))
        {
          uint64_t v39 = ASDErrorWithDescription();
          id v40 = (void *)v152[5];
          v152[5] = v39;
        }
      }
      else
      {
        id v41 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          id v118 = *(id *)(a1 + 90);
          id v119 = *(id *)(a1 + 74);
          id v120 = [v119 bundleID];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v118;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v120;
          _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] No delegate to handle authentication request", buf, 0x16u);

          unsigned int v6 = &OBJC_IVAR___XDCAppMetadata__bundleID;
        }

        uint64_t v42 = ASDErrorWithDescription();
        uint64_t v36 = v152[5];
        v152[5] = v42;
      }

      uint64_t v43 = [(id)v146[5] account];

      if (v43)
      {
        id v143 = [(id)v146[5] account];
        id v44 = 0;
      }
      else
      {
        id v45 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          id v121 = v6;
          id v122 = *(id *)(a1 + 90);
          id v123 = *(id *)(a1 + 74);
          long long v124 = [v123 bundleID];
          uint64_t v125 = v152[5];
          *(_DWORD *)v157 = 138412802;
          id v158 = v122;
          __int16 v159 = 2114;
          v160 = v124;
          __int16 v161 = 2114;
          uint64_t v162 = v125;
          _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] No account for receipt renewal: %{public}@", v157, 0x20u);

          unsigned int v6 = v121;
        }

        id v44 = (id) v152[5];
        id v143 = 0;
      }

      _Block_object_dispose(&v145, 8);
      _Block_object_dispose(&v151, 8);

      id v20 = v44;
    }
    if (!v143 && !v21)
    {
      id v143 = 0;
      long long v46 = 0;
      unsigned __int8 v138 = 0;
      goto LABEL_104;
    }
    double v134 = v20;
    if (v21) {
      goto LABEL_39;
    }
    goto LABEL_12;
  }
  long long v14 = *(void **)(a1 + 50);
  if (!v14)
  {
    sub_100359578(a1, *(void **)(a1 + 58));
    id v143 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  id v143 = v14;
  double v134 = 0;
  if ((*(unsigned char *)(a1 + 138) & 0xB) != 0)
  {
LABEL_39:
    long long v47 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      id v48 = *(void **)(a1 + 90);
      id v49 = *(id *)(a1 + 74);
      id v50 = v48;
      uint64_t v51 = [v49 bundleID];
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v48;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v51;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Fetching vpp app receipt", buf, 0x16u);
    }
    unsigned __int8 v138 = [v142 URLForKey:@"renew-vpp-receipt"];
    goto LABEL_42;
  }
LABEL_12:
  long long v15 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = *(void **)(a1 + 90);
    id v17 = *(id *)(a1 + 74);
    id v18 = v16;
    uint64_t v19 = [v17 bundleID];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Fetching app receipt", buf, 0x16u);
  }
  unsigned __int8 v138 = [v142 URLForKey:@"app-receipt-create"];
LABEL_42:
  id v140 = [objc_alloc((Class)AMSURLRequestEncoder) initWithBag:v142];
  [v140 setAccount:v143];
  [v140 setClientInfo:v141];
  id v52 = *(id *)(a1 + 74);
  id v53 = *(id *)(a1 + v6[179]);
  if ([v53 isEqualToString:AMSAccountMediaTypeAppStoreSandbox]) {
    unsigned __int8 v54 = 1;
  }
  else {
    unsigned __int8 v54 = [*(id *)(a1 + v6[179]) isEqualToString:AMSAccountMediaTypeAppStoreBeta];
  }

  id v55 = objc_alloc_init((Class)NSMutableDictionary);
  long long v56 = *(void **)(a1 + 50);
  if (v56)
  {
    id v57 = v56;
  }
  else
  {
    sub_100359578(a1, *(void **)(a1 + v6[179]));
    id v57 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v135 = v57;
  id v136 = objc_msgSend(v57, "ams_DSID");
  uint64_t v58 = [v52 purchaserDSID];
  long long v59 = (void *)v58;
  if ((v54 & 1) != 0 || !v136 || !v58)
  {
    id v63 = (id)v58;
    goto LABEL_66;
  }
  if (([v136 isEqualToNumber:v58] & 1) == 0)
  {
    long long v60 = sub_100420D50();
    long long v61 = sub_1004212C8((uint64_t)v60, 1);

    if (v61 && [v61 containsObject:v59])
    {
      double v133 = [v52 storefront];
      long long v62 = objc_msgSend(v135, "ams_storefront");
      id v132 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v62 integerValue]);

      if (v133 && v132 && [v132 isEqualToNumber:v133])
      {
        id v63 = [v136 copy];

        id v64 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          long long v65 = *(void **)(a1 + 90);
          id v66 = *(id *)(a1 + 74);
          id v130 = v65;
          long long v67 = [v66 bundleID];
          *(_DWORD *)long long buf = 138413059;
          *(void *)&uint8_t buf[4] = v65;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v67;
          *(_WORD *)&unsigned char buf[22] = 2113;
          v164 = v63;
          *(_WORD *)v165 = 2114;
          *(void *)&v165[2] = v132;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Using family primary account: %{private}@ and storeFront: %{public}@", buf, 0x2Au);
        }
      }
      else
      {
        id v64 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          long long v68 = *(void **)(a1 + 90);
          id v69 = *(id *)(a1 + 74);
          id v131 = v68;
          id v70 = [v69 bundleID];
          *(_DWORD *)long long buf = 138413315;
          *(void *)&uint8_t buf[4] = v68;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v70;
          *(_WORD *)&unsigned char buf[22] = 2113;
          v164 = v59;
          *(_WORD *)v165 = 2114;
          *(void *)&v165[2] = v133;
          *(_WORD *)&v165[10] = 2114;
          *(void *)&v165[12] = v132;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Using app account: %{private}@ due to different item storeFront: %{public}@ primary account storeFront: %{public}@", buf, 0x34u);
        }
        id v63 = v59;
      }
    }
    else
    {
      id v63 = v59;
    }

LABEL_66:
    long long v59 = v63;
    if (!v63) {
      goto LABEL_68;
    }
  }
  uint64_t v71 = [v59 stringValue];
  [v55 setObject:v71 forKeyedSubscript:@"dsid"];

LABEL_68:
  char v72 = +[ACAccountStore ams_sharedAccountStore];
  uint64_t v73 = objc_msgSend(v72, "ams_secureTokenForAccount:", v135);

  if (v73) {
    [v55 setObject:v73 forKeyedSubscript:@"xToken"];
  }
  double v74 = +[AMSDevice deviceGUID];
  [v55 setObject:v74 forKeyedSubscript:@"guid"];

  uint64_t v75 = +[AMSDevice serialNumber];
  [v55 setObject:v75 forKeyedSubscript:@"serialNumber"];

  uint64_t v76 = *(void *)(a1 + 114);
  if (v76)
  {
    [v55 setObject:v76 forKeyedSubscript:@"vid"];
  }
  else
  {
    uint64_t v77 = [v52 deviceIdentifierForVendor];
    [v55 setObject:v77 forKeyedSubscript:@"vid"];
  }
  uint64_t v78 = *(void *)(a1 + 138);
  LOBYTE(v79) = v78;
  if (v78)
  {
    [v55 setObject:&__kCFBooleanTrue forKeyedSubscript:@"want-expired"];
    uint64_t v79 = *(void *)(a1 + 138);
  }
  if ((v79 & 2) != 0)
  {
    [v55 setObject:&__kCFBooleanTrue forKeyedSubscript:@"want-revoked"];
    goto LABEL_79;
  }
  if (v79 & 8 | v78 & 1)
  {
LABEL_79:
    [v55 setObject:&__kCFBooleanTrue forKeyedSubscript:@"want-vpp"];
    int v80 = 1;
    goto LABEL_80;
  }
  int v80 = 0;
LABEL_80:
  if ([v52 hasMIDBasedSINF])
  {
    id v81 = +[AMSDevice serialNumber];
    [v55 setObject:v81 forKeyedSubscript:@"serialNumber"];
  }
  id v82 = [*(id *)(a1 + 74) bundlePath];
  uint64_t v83 = +[ASFReceipt receiptFromBundleAtPath:v82];

  if ([v83 isVPPLicensed] && objc_msgSend(v83, "isRevoked")) {
    [v55 setObject:&__kCFBooleanTrue forKey:@"revoked"];
  }
  if (v54)
  {
    uint64_t v84 = *(void *)(a1 + 98);
    if (v84)
    {
      [v55 setObject:v84 forKeyedSubscript:@"bundle-id"];
    }
    else
    {
      unsigned int v93 = [v52 bundleID];
      [v55 setObject:v93 forKeyedSubscript:@"bundle-id"];
    }
    uint64_t v94 = *(void *)(a1 + 106);
    if (v94)
    {
      [v55 setObject:v94 forKeyedSubscript:@"version-id"];
    }
    else
    {
      id v95 = [v52 bundleVersion];
      [v55 setObject:v95 forKeyedSubscript:@"version-id"];
    }
  }
  else
  {
    id v85 = @"adam-id";
    if (v80) {
      id v85 = @"appAdamId";
    }
    uint64_t v86 = v85;
    id v87 = *(id *)(a1 + 130);
    if (!v87) {
      id v87 = [v52 storeItemID];
    }
    id v88 = +[NSNumber numberWithUnsignedLongLong:v87];
    [v55 setObject:v88 forKeyedSubscript:v86];

    __int16 v89 = @"software-version-external-identifier";
    if (v80) {
      __int16 v89 = @"appExtVrsId";
    }
    id v90 = v89;

    id v91 = *(id *)(a1 + 122);
    if (!v91) {
      id v91 = [v52 storeExternalVersionID];
    }
    id v92 = +[NSNumber numberWithUnsignedLongLong:v91];
    [v55 setObject:v92 forKeyedSubscript:v90];
  }
  id v96 = [v140 requestWithMethod:4 bagURL:v138 parameters:v55];

  *(void *)long long buf = v134;
  long long v46 = [v96 resultWithError:buf];
  id v97 = *(id *)buf;

  id v98 = [*(id *)(a1 + 74) bundleID];
  unsigned int v99 = [v98 isEqualToString:@"com.apple.news"];

  if (v99) {
    [v46 setValue:@"News" forHTTPHeaderField:AMSHTTPHeaderClientApplication];
  }

  id v20 = v97;
LABEL_104:
  id v100 = v20;

  id v101 = v100;
  if (!v101)
  {
    long long v105 = +[NSURLSessionConfiguration defaultSessionConfiguration];
    id v106 = [v105 copy];

    objc_msgSend(v106, "ams_configureWithProcessInfo:bag:", v141, v142);
    if (*(unsigned char *)(a1 + 42) || (*(void *)(a1 + 138) & 0xBLL) != 0)
    {
      objc_msgSend(v106, "set_sourceApplicationBundleIdentifier:", @"com.apple.AppStore");
    }
    else
    {
      uint64_t v107 = [*(id *)(a1 + 74) bundleID];
      objc_msgSend(v106, "set_sourceApplicationBundleIdentifier:", v107);
    }
    id v108 = [objc_alloc((Class)AMSURLSession) initWithConfiguration:v106];
    [v108 setDelegate:a1];
    id v109 = [v108 dataTaskPromiseWithRequest:v46];
    id v144 = 0;
    id v110 = [v109 resultWithError:&v144];
    id v102 = v144;
    id v103 = [v110 object];

    id v104 = 0;
    if (v102 || !v103) {
      goto LABEL_126;
    }
    id v111 = [v103 objectForKeyedSubscript:@"status"];
    uint64_t v112 = v111;
    if (v111 && [v111 integerValue])
    {
      [v112 integerValue];
      ASDErrorWithTitleAndMessage();
      id v102 = (id)objc_claimAutoreleasedReturnValue();
      id v104 = 0;
LABEL_125:

      goto LABEL_126;
    }
    long long v113 = [v103 objectForKeyedSubscript:@"receipt"];
    objc_opt_class();
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v114 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v113 options:0];
    }
    else
    {
      objc_opt_class();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (v113)
        {
          id v117 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
          {
            long long v126 = *(void **)(a1 + 90);
            id v127 = *(id *)(a1 + 74);
            id v128 = v126;
            long long v129 = [v127 bundleID];
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v126;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v129;
            _os_log_error_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] Receipt format invalid", buf, 0x16u);
          }
          ASDErrorWithTitleAndMessage();
          id v102 = (id)objc_claimAutoreleasedReturnValue();
          id v104 = 0;
          goto LABEL_121;
        }
        id v104 = 0;
LABEL_120:
        id v102 = 0;
LABEL_121:
        uint64_t v115 = [v103 objectForKeyedSubscript:@"revoked"];

        if (v115 && (objc_opt_respondsToSelector() & 1) != 0) {
          *(unsigned char *)(a1 + 43) = [v115 BOOLValue];
        }

        goto LABEL_125;
      }
      id v114 = v113;
    }
    id v104 = v114;
    goto LABEL_120;
  }
  id v102 = v101;
  id v103 = 0;
  id v104 = 0;
LABEL_126:
  if (a3) {
    *a3 = v102;
  }

LABEL_129:
  return v104;
}

void sub_1003594E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

char *sub_100359540(char *WeakRetained)
{
  if (WeakRetained)
  {
    id WeakRetained = (char *)objc_loadWeakRetained((id *)(WeakRetained + 66));
    uint64_t v1 = vars8;
  }
  return WeakRetained;
}

id sub_100359578(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_5;
  }
  id v4 = +[ACAccountStore ams_sharedAccountStoreForMediaType:v3];
  objc_msgSend(v4, "ams_activeiTunesAccount");
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5) {
    goto LABEL_6;
  }
  if ((id)AMSAccountMediaTypeAppStoreSandbox == v3) {
LABEL_5:
  }
    id v5 = 0;
  else {
    id v5 = *(id *)(a1 + 50);
  }
LABEL_6:

  return v5;
}

void sub_100359620(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    unsigned int v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      BOOL v8 = *(void **)(v7 + 74);
    }
    else {
      BOOL v8 = 0;
    }
    id v12 = 0;
    id v9 = v8;
    unsigned int v6 = sub_100358040(v7, v9, &v12);
    id v5 = v12;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = ASDErrorWithSafeUserInfo();
  sub_1003596F0(v10, v6, v11, *(void **)(a1 + 40));
}

void sub_1003596F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    if (v7)
    {
      uint64_t v10 = *(void **)(a1 + 82);
      if (v10)
      {
        uint64_t v11 = *(void **)(a1 + 90);
        id v21 = v8;
        id v12 = v11;
        id v13 = v10;
        long long v14 = &v21;
        sub_1003D58D4((uint64_t)WriteReceipt, v7, v13, v12, &v21);
      }
      else
      {
        long long v15 = *(void **)(a1 + 74);
        id v16 = *(void **)(a1 + 90);
        id v20 = v8;
        id v12 = v16;
        id v13 = v15;
        long long v14 = &v20;
        sub_1003D5530((uint64_t)WriteReceipt, v7, v13, v12, &v20);
      }
      id v17 = *v14;

      id v8 = v17;
    }
    if (v8)
    {
      v9[2](v9, v8);
    }
    else
    {
      uint64_t v18 = +[ASFReceipt receiptWithData:v7];
      uint64_t v19 = *(void **)(a1 + 146);
      *(void *)(a1 + 146) = v18;

      v9[2](v9, 0);
    }
  }
}

void sub_100359874(uint64_t a1, void *a2, void *a3)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v10 = a2;
  id v6 = a3;
  uint64_t v7 = ASDErrorWithSafeUserInfo();

  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id *sub_10035A120(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)PreparePurchaseTask;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 5, a2);
    }
  }

  return a1;
}

void sub_10035B5AC(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = (void *)a1[5];
    id v4 = a2;
    id v5 = [v3 requestPresenter];
    +[MarketplaceKitLocalizedStrings showDialogForAlreadyInstalledApp:v4 presenter:v5];

    ASDErrorWithDescription();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    [a1 completeWithError:v6];
  }
}

void sub_10035B668(uint64_t a1, void *a2)
{
  id v9 = a2;
  objc_opt_class();
  id v3 = sub_100012D7C(v9);
  id v4 = v3;
  if (v3)
  {
    id v5 = sub_10026FBEC(v3);
    [*(id *)(a1 + 32) addObject:v5];
  }
  if (*(unsigned char *)(a1 + 40))
  {
    objc_opt_class();
    id v6 = sub_100012D7C(v9);
    objc_super v7 = v6;
    if (v6)
    {
      uint64_t v8 = sub_1002DC2DC(v6);
      [*(id *)(a1 + 32) addObject:v8];
    }
  }
}

id *sub_10035B760(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)DemotedApplication;
    a1 = (id *)objc_msgSendSuper2(&v11, "init");
    if (a1)
    {
      a1[6] = [v3 applicationDSID];
      id v4 = [v3 bundleIdentifier];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v4 length]) {
        objc_storeStrong(a1 + 1, v4);
      }
      a1[7] = [v3 applicationDownloaderDSID];
      id v5 = [v3 iTunesMetadata];
      a1[2] = [v5 versionIdentifier];

      a1[10] = [v3 placeholderFailureReason];
      a1[8] = [v3 applicationFamilyID];
      id v6 = [v3 iTunesMetadata];
      a1[3] = [v6 storeItemIdentifier];

      a1[9] = [v3 applicationDSID];
      objc_super v7 = [v3 iTunesMetadata];
      a1[4] = [v7 storeFront];

      uint64_t v8 = [v3 deviceIdentifierForVendor];
      id v9 = [v8 UUIDString];

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v9 length]) {
        objc_storeStrong(a1 + 5, v9);
      }
    }
  }

  return a1;
}

id sub_10035B8FC(uint64_t a1)
{
  if (a1)
  {
    id v1 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:*(void *)(a1 + 8) allowPlaceholder:1 error:0];
    id v2 = sub_10042889C(v1);
    if (v2)
    {
      if ([v1 installType] == (id)9) {
        uint64_t v3 = 3;
      }
      else {
        uint64_t v3 = 2;
      }
      id v4 = sub_1003D4A3C();
      sub_1003D4C80((uint64_t)v4, 4);
      sub_1003D4D3C((uint64_t)v4, 4);
      sub_1003D4B04((uint64_t)v4, 60);
      id v5 = sub_1003B7A80([RestoreAppInstall alloc], v2, v3, -1, v4);
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id *sub_10035BB24(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)PromiseObserver;
    a1 = (id *)objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      id v10 = [v7 copy];
      id v11 = a1[1];
      a1[1] = v10;

      id v12 = [v8 copy];
      id v13 = a1[2];
      a1[2] = v12;

      objc_storeStrong(a1 + 3, a4);
    }
  }

  return a1;
}

void sub_10035BBE8(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id Property = objc_getProperty(a1, v3, 24, 1);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10035BCA0;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v4;
    [Property scheduleBlock:v6];
  }
}

uint64_t sub_10035BCA0(uint64_t a1, const char *a2)
{
  id Property = *(void **)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 8, 1);
  }
  uint64_t v3 = (uint64_t (*)(void))Property[2];
  return v3();
}

void sub_10035BCF0(void *a1)
{
  if (a1)
  {
    id v2 = ASDErrorWithSafeUserInfo();
    id Property = objc_getProperty(a1, v3, 24, 1);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10035BDB4;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v2;
    id v5 = v2;
    [Property scheduleBlock:v6];
  }
}

uint64_t sub_10035BDB4(uint64_t a1, const char *a2)
{
  id Property = *(void **)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 16, 1);
  }
  SEL v3 = (uint64_t (*)(void))Property[2];
  return v3();
}

id sub_10035BE54()
{
  self;
  if (qword_1005B1010 != -1) {
    dispatch_once(&qword_1005B1010, &stru_100529450);
  }
  unsigned int v0 = (void *)qword_1005B1018;
  return v0;
}

void sub_10035BEAC(id a1)
{
  id v1 = objc_alloc_init(ClipURLSession);
  id v2 = (void *)qword_1005B1018;
  qword_1005B1018 = (uint64_t)v1;
}

id *sub_10035BFD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (a1)
  {
    id v7 = a4;
    id v8 = a3;
    id v9 = [a2 assetURL];
    id v10 = +[NSMutableURLRequest requestWithURL:v9];

    [v10 setCachePolicy:1];
    id v11 = +[AMSUserAgent userAgentForProcessInfo:*(void *)(a1 + 8)];
    [v10 setHTTPUserAgent:v11];

    id v12 = sub_100209E04(1);
    [v10 setValue:v12 forHTTPHeaderField:@"Apple-Download-Type"];

    id v13 = sub_100307E60((id *)[ClipURLSessionTask alloc], v10, *(void **)(a1 + 24), v7);
    if (v13) {
      objc_setProperty_atomic(v13, v14, v8, 48);
    }

    objc_super v15 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock_with_options();
    id v16 = *(void **)(a1 + 32);
    id v17 = sub_100308018(v13);
    [v16 setObject:v13 forKeyedSubscript:v17];

    os_unfair_lock_unlock(v15);
  }
  else
  {
    id v13 = 0;
  }
  return v13;
}

void sub_10035C73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10035C75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v4 writeBytes:a2 length:a4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

id sub_10035DA1C(id a1, ASDApplicationMetadata *a2)
{
  id v2 = [(ASDApplicationMetadata *)a2 itemID];
  SEL v3 = [v2 stringValue];

  return v3;
}

void sub_10035DA6C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  if (a2)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id obj = [a2 responseDataItems];
    id v5 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
    if (v5)
    {
      id v6 = v5;
      id v28 = v4;
      CFStringRef v7 = @"id";
      uint64_t v8 = *(void *)v35;
      uint64_t v29 = AMSMediaArtworkFormatPNG;
      uint64_t v30 = AMSMediaArtworkCropStyleBoundedBox;
      uint64_t v31 = *(void *)v35;
      do
      {
        id v9 = 0;
        do
        {
          if (*(void *)v35 != v8) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(void **)(*((void *)&v34 + 1) + 8 * (void)v9);
          id v11 = [v10 objectForKeyedSubscript:v7];
          if (v11 && (objc_opt_respondsToSelector() & 1) != 0)
          {
            CFStringRef v12 = v7;
            id v13 = objc_alloc((Class)AMSMediaArtwork);
            long long v14 = [v10 objectForKeyedSubscript:@"attributes"];
            objc_super v15 = [v14 objectForKeyedSubscript:@"platformAttributes"];
            id v16 = [v15 objectForKeyedSubscript:@"ios"];
            [v16 objectForKeyedSubscript:@"artwork"];
            uint64_t v18 = v17 = v6;
            uint64_t v19 = [v13 initWithDictionary:v18];

            id v20 = -[NSObject URLWithSize:cropStyle:format:](v19, "URLWithSize:cropStyle:format:", v30, v29, 128.0, 128.0);
            id v21 = *(void **)(a1 + 32);
            id v22 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v11 longLongValue]);
            [v21 setObject:v20 forKeyedSubscript:v22];

            id v6 = v17;
            id v23 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v24 = *(void *)(a1 + 40);
              if (v24) {
                uint64_t v24 = *(void *)(v24 + 64);
              }
              *(_DWORD *)long long buf = 138412802;
              uint64_t v39 = v24;
              __int16 v40 = 2114;
              id v41 = v11;
              __int16 v42 = 2114;
              uint64_t v43 = v20;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[%@] Found artwork for itemID: %{public}@ artworkURL: %{public}@", buf, 0x20u);
            }

            CFStringRef v7 = v12;
            uint64_t v8 = v31;
          }
          else
          {
            uint64_t v19 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v25 = *(void *)(a1 + 40);
              if (v25) {
                uint64_t v25 = *(void *)(v25 + 64);
              }
              *(_DWORD *)long long buf = 138412546;
              uint64_t v39 = v25;
              __int16 v40 = 2114;
              id v41 = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%@] Failed to find artwork for itemID: %{public}@", buf, 0x16u);
            }
          }

          id v9 = (char *)v9 + 1;
        }
        while (v6 != v9);
        id v26 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
        id v6 = v26;
      }
      while (v26);
      id v4 = v28;
    }
  }
  else
  {
    id obj = ASDLogHandleForCategory();
    if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 40);
      if (v27) {
        uint64_t v27 = *(void *)(v27 + 64);
      }
      *(_DWORD *)long long buf = 138412546;
      uint64_t v39 = v27;
      __int16 v40 = 2114;
      id v41 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_ERROR, "[%@] Placeholder artwork will be missing, media task failed: %{public}@", buf, 0x16u);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_10035DE98()
{
  self;
  unsigned int v0 = +[NSMutableSet set];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = sub_10035E020();
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        CFStringRef v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(v7, "bundleIdentifier", (void)v12);

        if (v8)
        {
          id v9 = [v7 bundleIdentifier];
          [v0 addObject:v9];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  id v10 = [v0 allObjects];

  return v10;
}

id sub_10035E020()
{
  self;
  unsigned int v0 = +[LSApplicationRecord enumeratorWithOptions:0];
  [v0 setFilter:&stru_100529500];
  return v0;
}

BOOL sub_10035E078(id a1, LSApplicationRecord *a2)
{
  id v2 = a2;
  id v3 = [(LSApplicationRecord *)v2 appClipMetadata];

  if (v3)
  {
    id v4 = [(LSApplicationRecord *)v2 bundleIdentifier];
    if (v4)
    {
      uint64_t v5 = [(LSApplicationRecord *)v2 bundleIdentifier];
      BOOL v6 = [v5 length] != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

id sub_10035E108()
{
  self;
  unsigned int v0 = +[LSApplicationRecord enumeratorWithOptions:0];
  [v0 setFilter:&stru_100529520];
  return v0;
}

BOOL sub_10035E160(id a1, LSApplicationRecord *a2)
{
  id v2 = a2;
  if ([(LSApplicationRecord *)v2 isAppStoreVendable])
  {
    id v3 = [(LSApplicationRecord *)v2 bundleIdentifier];
    if (v3)
    {
      id v4 = [(LSApplicationRecord *)v2 bundleIdentifier];
      BOOL v5 = [v4 length] != 0;
    }
    else
    {
      BOOL v5 = 0;
    }
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

id sub_10035E1E4()
{
  self;
  unsigned int v0 = +[LSApplicationRecord enumeratorWithOptions:0];
  [v0 setFilter:&stru_100529540];
  return v0;
}

BOOL sub_10035E23C(id a1, LSApplicationRecord *a2)
{
  id v2 = a2;
  id v3 = [(LSApplicationRecord *)v2 iTunesMetadata];
  id v4 = [v3 storeItemIdentifier];

  if (v4)
  {
    BOOL v5 = [(LSApplicationRecord *)v2 bundleIdentifier];
    if (v5)
    {
      BOOL v6 = [(LSApplicationRecord *)v2 bundleIdentifier];
      LOBYTE(v4) = [v6 length] != 0;
    }
    else
    {
      LOBYTE(v4) = 0;
    }
  }
  return (char)v4;
}

id sub_10035E2CC()
{
  self;
  if (qword_1005B1028 != -1) {
    dispatch_once(&qword_1005B1028, &stru_100529560);
  }
  unsigned int v0 = (void *)qword_1005B1020;
  return v0;
}

void sub_10035E324(id a1)
{
  id v1 = objc_alloc_init(PushService);
  id v2 = (void *)qword_1005B1020;
  qword_1005B1020 = (uint64_t)v1;
}

id *sub_10035E520(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[9];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_10035E550(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  BOOL v6 = v5;
  if (a1)
  {
    CFStringRef v7 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10035E600;
    block[3] = &unk_100525408;
    uint64_t v10 = a3;
    void block[4] = a1;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_10035E600(void *a1)
{
  id v2 = +[NSNumber numberWithUnsignedInteger:a1[6]];
  value = 0;
  if (NSMapMember(*(NSMapTable **)(a1[4] + 16), v2, 0, &value))
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = a1[6];
      *(_DWORD *)long long buf = 138543618;
      long long v15 = v10;
      __int16 v16 = 2048;
      uint64_t v17 = v11;
      id v12 = v10;
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "A consumer of type: %{public}@ was already registered for action type: %ld", buf, 0x16u);
    }
  }
  [*(id *)(a1[4] + 16) setObject:a1[5] forKey:v2];
  id v4 = [*(id *)(a1[4] + 40) objectForKeyedSubscript:v2];
  id v5 = [v4 unsignedIntegerValue];

  if (v5)
  {
    CFStringRef v7 = (void *)a1[4];
    BOOL v6 = (void *)a1[5];
    uint64_t v8 = a1[6];
    id v9 = sub_10035E788(v7, v8);
    [v6 pushService:v7 recoverFromDroppedMessagesOfActionType:v8 completionHandler:v9];
  }
}

void *sub_10035E788(void *a1, uint64_t a2)
{
  if (a1)
  {
    var30[0] = _NSConcreteStackBlock;
    var30[1] = 3221225472;
    var30[2] = sub_10035F664;
    var30[3] = &unk_100529588;
    var30[4] = a1;
    var30[5] = a2;
    a1 = objc_retainBlock(var30);
    uint64_t v2 = var30[7];
  }
  return a1;
}

void sub_10035E808(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFStringRef v7 = v6;
  if (a1)
  {
    uint64_t v8 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10035E8D0;
    block[3] = &unk_1005212D8;
    void block[4] = a1;
    id v10 = v6;
    id v11 = v5;
    dispatch_async(v8, block);
  }
}

void sub_10035E8D0(uint64_t a1)
{
  sub_10030B11C();
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  self;
  id v2 = objc_alloc_init((Class)AMSPushConfiguration);
  [v2 setEngagementPushTopic:@"com.apple.AppStore"];
  id v3 = +[NSSet setWithObjects:@"4", @"22", @"35", 0];
  [v2 setEnabledActionTypes:v3];

  [v2 setUserNotificationExtensionId:@"asd-notification-default"];
  id v4 = [objc_alloc((Class)AMSPushHandler) initWithConfiguration:v2 bag:v8];

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 48);
  *(void *)(v5 + 48) = v4;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "setDelegate:");
  CFStringRef v7 = +[NSNotificationCenter defaultCenter];
  [v7 addObserver:*(void *)(a1 + 32) selector:"_handleBagChangedNotification:" name:AMSBagChangedNotification object:0];
  [v7 addObserver:*(void *)(a1 + 32) selector:"_handleAccountDidChangeNotification:" name:@"AccountStorePrimaryAccountDidChange" object:0];
  [v7 addObserver:*(void *)(a1 + 32) selector:"handleSandboxAccountDidChangeNotification:" name:@"AccountStoreSandboxAccountDidChange" object:0];
  sub_10035EA80(*(void *)(a1 + 32), *(void **)(a1 + 40));
  if (!*(void *)(a1 + 48)) {
    sub_10035EB1C(*(void *)(a1 + 32));
  }
}

void sub_10035EA80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && !*(void *)(a1 + 72))
  {
    id v7 = v3;
    if (v3)
    {
      id v4 = (PushServiceTestFlightConsumer *)v3;
    }
    else
    {
      id v4 = [PushServiceTestFlightConsumer alloc];
      if (v4) {
        id v4 = (PushServiceTestFlightConsumer *)sub_1003681DC((uint64_t)v4, *(void **)(a1 + 24), 0);
      }
    }
    uint64_t v5 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v4;

    uint64_t v6 = *(void *)(a1 + 72);
    id v3 = v7;
    if (v6)
    {
      objc_storeWeak((id *)(v6 + 64), (id)a1);
      id v3 = v7;
    }
  }
}

void sub_10035EB1C(uint64_t a1)
{
  if (a1)
  {
    id v2 = APSEnvironmentProduction;
    id v3 = sub_10030B11C();
    id v4 = sub_10030BB1C((uint64_t)v3, @"push-notifications/environment", @"production");

    if (v4)
    {
      if ([*(id *)(a1 + 32) isEqualToString:v4])
      {
LABEL_18:

        return;
      }
      if (+[APSConnection isValidEnvironment:v4])
      {
        objc_storeStrong((id *)(a1 + 32), v4);
        id v5 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:2];
        uint64_t v6 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v5;

        sub_1003F4AAC((uint64_t)AppDefaultsManager, 0);
        if (*(void *)(a1 + 8))
        {
          id v7 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = 138543362;
            __int16 v16 = v4;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Shutting down existing connection before starting up in new environment: %{public}@", (uint8_t *)&v15, 0xCu);
          }

          id v8 = *(void **)(a1 + 8);
          if (v8)
          {
            id v9 = (void *)v8[1];
            if (v9)
            {
              [v9 shutdown];
              id v8 = *(void **)(a1 + 8);
            }
          }
          *(void *)(a1 + 8) = 0;
        }
        id v10 = sub_1002073EC([PushConnection alloc], v4, (void *)a1, *(void **)(a1 + 24));
        id v11 = *(NSObject **)(a1 + 8);
        *(void *)(a1 + 8) = v10;
        goto LABEL_17;
      }
    }
    uint64_t v12 = *(void *)(a1 + 8);
    id v11 = ASDLogHandleForCategory();
    BOOL v13 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (v12)
    {
      if (v13)
      {
        int v15 = 138543362;
        __int16 v16 = 0;
        long long v14 = "Environment is invalid, using existing connection instead error: %{public}@";
LABEL_21:
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v15, 0xCu);
      }
    }
    else if (v13)
    {
      int v15 = 138543362;
      __int16 v16 = 0;
      long long v14 = "Environment is invalid, and no other connection is available error: %{public}@";
      goto LABEL_21;
    }
LABEL_17:

    goto LABEL_18;
  }
}

void sub_10035ED60(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10035EDDC;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10035EDDC(uint64_t a1)
{
  sub_10035EA80(*(void *)(a1 + 32), 0);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3) {
    BOOL v4 = *(unsigned __int8 *)(v3 + 56) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  sub_100207818(*(void *)(v2 + 8), v4);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 72);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    if (*(unsigned char *)(v6 + 56))
    {
      sub_100207E44(v7, 2);
      return;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v5 + 8);
  }
  sub_100208080(v7, 2);
}

void sub_10035EF54(uint64_t a1)
{
  sub_100013C18();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10023BD84((uint64_t)v2, *(void **)(a1 + 32));
}

void sub_10035F10C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    uint64_t v7 = (void **)sub_1003168CC([PushMessage alloc], v6);

    id v8 = sub_100316998(v7);
    id v9 = ASDLogHandleForCategory();
    id v10 = v9;
    if (v8 == (void **)-1)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v30 = 138543362;
        *(void *)&v30[4] = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Received invalid message: %{public}@", v30, 0xCu);
      }
      goto LABEL_24;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v30 = 138543618;
      *(void *)&v30[4] = v5;
      *(_WORD *)&v30[12] = 2114;
      *(void *)&v30[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Connection: %{public}@ received incoming message: %{public}@", v30, 0x16u);
    }

    id v11 = *(void **)(a1 + 48);
    uint64_t v12 = sub_1003169B4(v7);
    LODWORD(v11) = [v11 shouldHandleNotification:v12];

    if (v11)
    {
      BOOL v13 = *(void **)(a1 + 48);
      id v10 = sub_1003169B4(v7);
      [v13 handleNotification:v10];
LABEL_24:

      goto LABEL_25;
    }
    id v10 = sub_10031695C(v7);
    long long v14 = +[ACAccountStore ams_sharedAccountStore];
    int v15 = objc_msgSend(v14, "ams_activeiTunesAccount");
    __int16 v16 = objc_msgSend(v15, "ams_DSID");

    if (v10)
    {
      if ([v16 isEqualToNumber:v10])
      {
LABEL_15:
        id v21 = sub_100316998(v7);
        id v22 = +[NSNumber numberWithUnsignedInteger:v21];
        id v23 = [*(id *)(a1 + 40) objectForKeyedSubscript:v22];
        uint64_t v24 = (char *)[v23 unsignedIntegerValue];

        uint64_t v25 = +[NSNumber numberWithUnsignedInteger:v24 + 1];
        [*(id *)(a1 + 40) setObject:v25 forKeyedSubscript:v22];

        if (!v24)
        {
          id v26 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v30 = 134217984;
            *(void *)&v30[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Adding pending push action type %ld", v30, 0xCu);
          }

          sub_10035F874(a1);
        }
        uint64_t v27 = objc_msgSend(*(id *)(a1 + 16), "objectForKey:", v22, *(_OWORD *)v30, *(void *)&v30[16], v31);
        if (!v27)
        {
          id v28 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t v30 = 134217984;
            *(void *)&v30[4] = v21;
            _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Consumer missing for action type %ld", v30, 0xCu);
          }
        }
        uint64_t v29 = sub_10035E788((void *)a1, (uint64_t)v21);
        [v27 pushService:a1 didReceiveMessage:v7 completionHandler:v29];

        goto LABEL_24;
      }
      uint64_t v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v30 = 138543875;
        *(void *)&v30[4] = v5;
        *(_WORD *)&v30[12] = 2113;
        *(void *)&v30[14] = v10;
        *(_WORD *)&v30[22] = 2113;
        uint64_t v31 = v16;
        uint64_t v18 = "Connection: %{public}@ received push for %{private}@ but active is: %{private}@";
        uint64_t v19 = v17;
        uint32_t v20 = 32;
LABEL_27:
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, v18, v30, v20);
      }
    }
    else
    {
      uint64_t v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v30 = 138543619;
        *(void *)&v30[4] = v5;
        *(_WORD *)&v30[12] = 2113;
        *(void *)&v30[14] = v16;
        uint64_t v18 = "Connection: %{public}@ received push with no DSID, active is: %{private}@";
        uint64_t v19 = v17;
        uint32_t v20 = 22;
        goto LABEL_27;
      }
    }

    goto LABEL_15;
  }
LABEL_25:
}

void sub_10035F664(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10035F708;
  block[3] = &unk_100525408;
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v6;
  void block[4] = v4;
  id v7 = v3;
  dispatch_async(v5, block);
}

void sub_10035F708(uint64_t *a1)
{
  id v2 = *(void **)(a1[4] + 40);
  id v3 = +[NSNumber numberWithUnsignedInteger:a1[6]];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    if (a1[5])
    {
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = a1[5];
        int v11 = 138543362;
        uint64_t v12 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to process push message: %{public}@", (uint8_t *)&v11, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = (char *)[v4 unsignedIntegerValue] - 1;
      id v7 = +[NSNumber numberWithUnsignedInteger:v6];
      id v8 = *(void **)(a1[4] + 40);
      id v9 = +[NSNumber numberWithUnsignedInteger:a1[6]];
      [v8 setObject:v7 forKeyedSubscript:v9];

      if (!v6) {
        sub_10035F874(a1[4]);
      }
    }
  }
}

void sub_10035F874(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    id v3 = *(void **)(a1 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10035FD98;
    v5[3] = &unk_1005295B0;
    id v6 = v2;
    id v4 = v2;
    [v3 enumerateKeysAndObjectsUsingBlock:v5];
    sub_1003F4AAC((uint64_t)AppDefaultsManager, v4);
  }
}

void sub_10035F9B8(uint64_t a1)
{
}

void sub_10035FA58(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 8))
  {
    id v2 = objc_alloc_init(_TtC9appstored6LogKey);
    id v3 = [*(id *)(a1 + 40) userInfo];
    id v4 = [v3 objectForKey:@"AccountDidChangePreviousActiveDSID"];

    if (v4) {
      sub_1002078B8(*(void *)(*(void *)(a1 + 32) + 8), v4);
    }
    id v5 = +[ActiveAccountObserver activeAccount];
    if (v5)
    {
      sub_100207898(*(void *)(*(void *)(a1 + 32) + 8), v2, 0);
    }
    else
    {
      id v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Nothing to register due to no active account", buf, 2u);
      }
    }
  }
  else
  {
    ASDLogHandleForCategory();
    id v2 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v2->super, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v7 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, &v2->super, OS_LOG_TYPE_DEBUG, "PushConnection found to be nil when trying to add/remove push notification types", v7, 2u);
    }
  }
}

void sub_10035FC44(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 8))
  {
    id v2 = objc_alloc_init(_TtC9appstored6LogKey);
    id v3 = [*(id *)(a1 + 40) userInfo];
    id v4 = [v3 objectForKey:@"AccountDidChangePreviousActiveDSID"];

    if (v4) {
      sub_100207DBC(*(void *)(*(void *)(a1 + 32) + 8), v4);
    }
    id v5 = +[ActiveAccountObserver activeSandboxAccount];
    if (v5)
    {
      sub_100207898(*(void *)(*(void *)(a1 + 32) + 8), v2, 1);
    }
    else
    {
      id v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Nothing to register due to no active sandbox account", buf, 2u);
      }
    }
  }
  else
  {
    ASDLogHandleForCategory();
    id v2 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v2->super, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v7 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, &v2->super, OS_LOG_TYPE_DEBUG, "PushConnection found to be nil when trying to add/remove push notification types for sandbox account.", v7, 2u);
    }
  }
}

void sub_10035FD98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 unsignedIntegerValue]) {
    [*(id *)(a1 + 32) addObject:v5];
  }
}

void *sub_10035FE84(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)ODRApplicationImportTask;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

void sub_10035FF90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v74 = 0;
    uint64_t v75 = &v74;
    uint64_t v76 = 0x3032000000;
    uint64_t v77 = sub_1000182A8;
    uint64_t v78 = sub_100017D10;
    id v79 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = &v70;
    uint64_t v72 = 0x2020000000;
    char v73 = 0;
    uint64_t v66 = 0;
    long long v67 = &v66;
    uint64_t v68 = 0x2020000000;
    char v69 = 0;
    uint64_t v62 = 0;
    id v63 = &v62;
    uint64_t v64 = 0x2020000000;
    char v65 = 0;
    id v2 = sub_1002393C4();
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472;
    void v61[2] = sub_10036094C;
    v61[3] = &unk_1005295D8;
    void v61[4] = v1;
    v61[5] = &v62;
    v61[6] = &v74;
    [v2 readUsingSession:v61];

    if (*((unsigned char *)v63 + 24))
    {
      id v3 = sub_100283AA0([ODRApplicationRepairTask alloc], *(void **)(v1 + 40));
      id v4 = (id *)(v75 + 5);
      id obj = (id)v75[5];
      unsigned __int8 v5 = [(id)v1 runSubTask:v3 returningError:&obj];
      objc_storeStrong(v4, obj);
      if ((v5 & 1) == 0)
      {
        id v6 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          uint64_t v44 = *(void *)(v1 + 40);
          uint64_t v45 = v75[5];
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v44;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v45;
          _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to repair application %{public}@ error: %{public}@", buf, 0x16u);
        }

        objc_super v7 = (void *)v75[5];
        v75[5] = 0;
      }
    }
    id v8 = *(void **)(v1 + 40);
    id v9 = (id *)(v75 + 5);
    id v59 = (id)v75[5];
    id v10 = sub_1003B9F24(v8, (uint64_t)&v59);
    objc_storeStrong(v9, v59);
    if (!v10)
    {
      uint64_t v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(v1 + 40);
        uint64_t v25 = v75[5];
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to find tag manifest for %{public}@ error: %{public}@", buf, 0x16u);
      }

      uint32_t v20 = ASDErrorWithUnderlyingError();
      [(id)v1 completeWithError:v20];

      goto LABEL_43;
    }
    if (*(void *)(v1 + 48)) {
      goto LABEL_25;
    }
    int v11 = sub_1002393C4();
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_1003609C8;
    v58[3] = &unk_1005295D8;
    v58[4] = v1;
    v58[5] = &v66;
    v58[6] = &v74;
    [v11 readUsingSession:v58];

    if (*((unsigned char *)v67 + 24))
    {
LABEL_25:
      id v26 = sub_1002393C4();
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_100360A44;
      __int16 v89 = &unk_100529600;
      uint64_t v90 = v1;
      id v92 = &v70;
      id v91 = v10;
      unsigned int v93 = &v66;
      uint64_t v94 = &v74;
      [v26 modifyUsingTransaction:buf];

      uint64_t v51 = 0;
      id v52 = &v51;
      uint64_t v53 = 0x3032000000;
      unsigned __int8 v54 = sub_1000182A8;
      id v55 = sub_100017D10;
      id v56 = 0;
      uint64_t v27 = sub_1002393C4();
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472;
      v50[2] = sub_100360CB8;
      v50[3] = &unk_100523B10;
      v50[4] = v1;
      v50[5] = &v51;
      [v27 readUsingSession:v50];

      uint64_t v28 = sub_1003F9F04();
      uint64_t v29 = (void *)v28;
      if (v28) {
        uint64_t v30 = *(void **)(v28 + 32);
      }
      else {
        uint64_t v30 = 0;
      }
      id v31 = v30;
      id v32 = [v31 stringByAppendingPathComponent:v52[5]];

      if (v32 && v52[5])
      {
        id v33 = +[NSURL fileURLWithPath:v32];
        long long v34 = +[SAPathInfo pathInfoWithURL:v33];

        long long v35 = +[SAPathManager defaultManager];
        id v87 = v34;
        long long v36 = +[NSArray arrayWithObjects:&v87 count:1];
        long long v37 = sub_1003B9E28(*(void *)(v1 + 40));
        *(void *)uint64_t v84 = _NSConcreteStackBlock;
        *(void *)&v84[8] = 3221225472;
        *(void *)&v84[16] = sub_100360D50;
        id v85 = &unk_100521910;
        uint64_t v86 = v1;
        [v35 registerPaths:v36 forBundleID:v37 completionHandler:v84];
      }
      else
      {
        long long v34 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          uint64_t v42 = *(void *)(v1 + 40);
          uint64_t v43 = (void *)v52[5];
          *(_DWORD *)uint64_t v84 = 138543874;
          *(void *)&v84[4] = v42;
          *(_WORD *)&v84[12] = 2114;
          *(void *)&v84[14] = v32;
          *(_WORD *)&v84[22] = 2114;
          id v85 = v43;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Error attributing space to application %{public}@: No path available: %{public}@ %{public}@", v84, 0x20u);
        }
      }

      if (*((unsigned char *)v71 + 24))
      {
        dispatch_time_t v38 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = *(void *)(v1 + 40);
          *(_DWORD *)int v80 = 138543362;
          uint64_t v81 = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Successfully imported manifest for %{public}@", v80, 0xCu);
        }
      }
      else
      {
        __int16 v40 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          uint64_t v46 = *(void *)(v1 + 40);
          uint64_t v47 = v75[5];
          *(_DWORD *)int v80 = 138543618;
          uint64_t v81 = v46;
          __int16 v82 = 2114;
          uint64_t v83 = v47;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Failed to import manifests for %{public}@ error: %{public}@", v80, 0x16u);
        }

        objc_setProperty_atomic_copy((id)v1, v41, (id)v75[5], 32);
      }
      if (*((unsigned char *)v71 + 24)) {
        [(id)v1 completeWithSuccess];
      }
      else {
        [(id)v1 completeWithError:v75[5]];
      }

      _Block_object_dispose(&v51, 8);
LABEL_43:

      _Block_object_dispose(&v62, 8);
      _Block_object_dispose(&v66, 8);
      _Block_object_dispose(&v70, 8);
      _Block_object_dispose(&v74, 8);

      return;
    }
    if (sub_1003BAD08(*(void *)(v1 + 40)))
    {
      uint64_t v12 = sub_10027D7D8([ODRManifestRequestTask alloc], *(void **)(v1 + 40));
      BOOL v13 = (id *)(v75 + 5);
      id v57 = (id)v75[5];
      unsigned int v14 = [(id)v1 runSubTask:v12 returningError:&v57];
      objc_storeStrong(v13, v57);
      if (v14)
      {
        if (v12) {
          id Property = objc_getProperty(v12, v15, 48, 1);
        }
        else {
          id Property = 0;
        }
        id v17 = Property;
        uint64_t v18 = *(NSObject **)(v1 + 48);
        *(void *)(v1 + 48) = v17;
LABEL_23:

        goto LABEL_24;
      }
      if (v75[5])
      {
        uint64_t v18 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v48 = *(void *)(v1 + 40);
          uint64_t v49 = v75[5];
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v48;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v49;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error fetching manifest for %{public}@: %{public}@", buf, 0x16u);
        }
        goto LABEL_23;
      }
    }
    else
    {
      id v21 = *(void **)(v1 + 40);
      id v22 = (id *)(v75 + 5);
      id v57 = (id)v75[5];
      id v23 = sub_1003B9C5C(v21, (uint64_t)&v57);
      objc_storeStrong(v22, v57);
      uint64_t v12 = *(void **)(v1 + 48);
      *(void *)(v1 + 48) = v23;
    }
LABEL_24:

    goto LABEL_25;
  }
}

void sub_1003608C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_10036094C(void *a1, void *a2)
{
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  char v4 = sub_1001F7BB0(a2, *(void **)(a1[4] + 40));
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v4;
}

void sub_1003609C8(void *a1, void *a2)
{
  char v4 = *(void **)(a1[4] + 40);
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  char v6 = sub_1001F8F90(a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
}

uint64_t sub_100360A44(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 48))
  {
    char v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 40);
      int v18 = 138543362;
      uint64_t v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ingesting asset and tag manifest for %{public}@", (uint8_t *)&v18, 0xCu);
    }

    BOOL v6 = sub_10024A6D8(v3, *(void **)(*(void *)(a1 + 32) + 48), *(void **)(a1 + 40), *(void **)(*(void *)(a1 + 32) + 40), 1);
LABEL_9:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v6;
    goto LABEL_10;
  }
  int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  id v8 = ASDLogHandleForCategory();
  id v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 40);
      int v18 = 138543362;
      uint64_t v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updating tag manifest for %{public}@", (uint8_t *)&v18, 0xCu);
    }

    BOOL v6 = sub_10024A2BC(v3, *(void **)(a1 + 40), *(void **)(*(void *)(a1 + 32) + 40));
    goto LABEL_9;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 40);
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    int v18 = 138543618;
    uint64_t v19 = v16;
    __int16 v20 = 2114;
    uint64_t v21 = v17;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to find asset manifest for %{public}@ error: %{public}@", (uint8_t *)&v18, 0x16u);
  }

  BOOL v13 = *(void **)(a1 + 32);
  int v15 = ASDErrorWithUnderlyingError();
  if (v13) {
    objc_setProperty_atomic_copy(v13, v14, v15, 32);
  }

LABEL_10:
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);

  return v11;
}

void sub_100360CB8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 40);
  id v4 = a2;
  sub_1003B9E28(v3);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = sub_1001F92B4(v4, (uint64_t)v8);

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100360D50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 40);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error attributing space to application %{public}@: %{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100360E84(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      id v5 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithObjects:", v3, 0);
      int v6 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v5;
    }
    id v3 = v7;
  }
}

void sub_100360F08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 16);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      id v5 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithObjects:", v3, 0);
      int v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v5;
    }
    id v3 = v7;
  }
}

void sub_100360F8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 8);
    uint64_t v12 = v3;
    if (v4)
    {
      if (v3) {
        id v5 = [v3[1] copy];
      }
      else {
        id v5 = 0;
      }
      [v4 unionSet:v5];
    }
    else
    {
      if (v3) {
        id v5 = [v3[1] copy];
      }
      else {
        id v5 = 0;
      }
      id v6 = [v5 mutableCopy];
      id v7 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v6;
    }
    __int16 v8 = *(void **)(a1 + 16);
    if (v8)
    {
      if (v12) {
        id v9 = [v12[2] copy];
      }
      else {
        id v9 = 0;
      }
      [v8 unionSet:v9];
    }
    else
    {
      if (v12) {
        id v9 = [v12[2] copy];
      }
      else {
        id v9 = 0;
      }
      id v10 = [v9 mutableCopy];
      uint64_t v11 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v10;
    }
    id v3 = v12;
  }
}

void *sub_100361168(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)StoreSinf;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

id sub_1003611DC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 8) objectForKey:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = v2;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v4 = 0;
        goto LABEL_8;
      }
      id v3 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v2 options:1];
    }
    id v4 = v3;
LABEL_8:

    goto LABEL_9;
  }
  id v4 = 0;
LABEL_9:
  return v4;
}

void *sub_100361C74(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = [a1 init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      id v6 = [v4 protectionSpace];
      self;
      objc_super v7 = +[NSMutableString string];
      __int16 v8 = [v6 host];
      id v9 = [v6 port];
      if ((uint64_t)v9 <= 0)
      {
        id v10 = v8;
      }
      else
      {
        id v10 = +[NSString stringWithFormat:@"%@:%ld", v8, v9];
      }
      uint64_t v11 = v10;
      if ([v6 isProxy])
      {
        uint64_t v12 = ASDLocalizedString();
        BOOL v13 = [v6 protocol];
        objc_msgSend(v7, "appendFormat:", v12, v13, v11);
      }
      else
      {
        uint64_t v12 = ASDLocalizedString();
        objc_msgSend(v7, "appendFormat:", v12, v11);
      }

      [v6 receivesCredentialSecurely];
      unsigned int v14 = ASDLocalizedString();
      [v7 appendFormat:@" %@", v14];

      int v15 = (void *)a1[2];
      a1[2] = v7;

      id v16 = v6;
      self;
      [v16 isProxy];

      uint64_t v17 = ASDLocalizedString();
      int v18 = (void *)a1[3];
      a1[3] = v17;
    }
  }

  return a1;
}

id sub_100361E94(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = [*(id *)(a1 + 8) proposedCredential];
    id v2 = [v1 user];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003621C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100362600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100362620(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v42 = a1;
  uint64_t v4 = *(void *)(a1 + 32);
  id v41 = v3;
  if (v4)
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    id v87 = sub_1000182B8;
    id v88 = sub_100017D18;
    __int16 v89 = (__CFString *)objc_opt_new();
    CFStringRef v69 = (const __CFString *)_NSConcreteStackBlock;
    CFStringRef v70 = (const __CFString *)3221225472;
    CFStringRef v71 = (const __CFString *)sub_100363348;
    CFStringRef v72 = (const __CFString *)&unk_100523460;
    CFStringRef v73 = (const __CFString *)buf;
    sub_100009834((uint64_t)v41, @"SELECT ZMANIFEST.Z_PK, ZMANIFEST.ZAPPLICATIONBUNDLEID FROM ZMANIFEST LEFT JOIN ZASSETPACK ON ZASSETPACK.ZMANIFEST = ZMANIFEST.Z_PK WHERE ZASSETPACK.ZLOCALURLSTRING IS NOT NULL", &v69);
    id obj = [*(id *)(*(void *)&buf[8] + 40) copy];
    _Block_object_dispose(buf, 8);
  }
  else
  {
    id obj = 0;
  }

  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v46 = [obj countByEnumeratingWithState:&v49 objects:v57 count:16];
  if (v46)
  {
    uint64_t v45 = *(void *)v50;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v50 != v45) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v49 + 1) + 8 * (void)v5);
        objc_super v7 = sub_1003B9318((uint64_t)ODRApplication, v6);
        id v48 = 0;
        id v47 = sub_1003B9F24(v7, (uint64_t)&v48);
        id v8 = v48;
        if (v8)
        {
          id v9 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v6;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v8;
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to copy bundle tag manifest for %{public}@, error: %{public}@", buf, 0x16u);
          }
          goto LABEL_11;
        }
        id v10 = [obj objectForKeyedSubscript:v6];
        uint64_t v12 = *(void *)(v42 + 32);
        uint64_t v11 = *(void **)(v42 + 40);
        uint64_t v43 = v10;
        id v13 = v6;
        id v14 = v41;
        id v15 = v11;
        id v16 = v15;
        if (!v12)
        {

LABEL_21:
          dispatch_time_t v38 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_fault_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "Failed to import any asset packs even though some were reported to be local", buf, 2u);
          }

          id v9 = v43;
          goto LABEL_11;
        }
        uint64_t v53 = 0;
        unsigned __int8 v54 = &v53;
        uint64_t v55 = 0x2020000000;
        char v56 = 0;
        CFStringRef v69 = @"ZBUNDLEID";
        CFStringRef v70 = @"ZCHUNKSIZE";
        *(void *)long long buf = @"bundleKey";
        *(void *)&buf[8] = @"chunkSize";
        CFStringRef v71 = @"ZDOWNLOADPRIORITY";
        CFStringRef v72 = @"ZDOWNLOADSIZE";
        *(void *)&uint8_t buf[16] = @"downloadPriority";
        id v87 = (uint64_t (*)(uint64_t, uint64_t))@"fileSize";
        CFStringRef v73 = @"ZEFFECTIVEALWAYSPRESERVE";
        CFStringRef v74 = @"ZEFFECTIVEPRESERVATIONPRIORITY";
        id v88 = (void (*)(uint64_t))@"effective_always_preserve";
        __int16 v89 = @"effective_preservation_priority";
        CFStringRef v75 = @"ZHASHES";
        CFStringRef v76 = @"ZISSTREAMABLE";
        CFStringRef v90 = @"hashes";
        id v91 = @"isStreamable";
        CFStringRef v77 = @"ZLASTUSEDDATE";
        CFStringRef v78 = @"ZLOCALURLSTRING";
        CFStringRef v92 = @"last_used_date";
        CFStringRef v93 = @"local_url";
        CFStringRef v79 = @"ZMD5";
        CFStringRef v80 = @"ZPINCOUNT";
        CFStringRef v94 = @"md5";
        CFStringRef v95 = @"pin_count";
        CFStringRef v81 = @"ZPURGEABLE";
        CFStringRef v82 = @"ZPURGEREASON";
        CFStringRef v96 = @"purgeable";
        CFStringRef v97 = @"purge_reason";
        CFStringRef v83 = @"ZSHA";
        CFStringRef v84 = @"ZSIZE";
        CFStringRef v98 = @"sha";
        CFStringRef v99 = @"uncompressedSize";
        CFStringRef v85 = @"ZSOURCEURLSTRING";
        CFStringRef v100 = @"URL";
        uint64_t v17 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v69 count:17];
        CFStringRef v58 = (const __CFString *)_NSConcreteStackBlock;
        uint64_t v59 = 3221225472;
        long long v60 = sub_100363474;
        CFStringRef v61 = (const __CFString *)&unk_100529718;
        id v9 = v43;
        uint64_t v62 = (__CFString *)v9;
        id v18 = v17;
        id v63 = v18;
        uint64_t v64 = v12;
        id v19 = v14;
        id v65 = v19;
        id v20 = v13;
        id v66 = v20;
        id v21 = v16;
        id v67 = v21;
        uint64_t v68 = &v53;
        sub_100009834((uint64_t)v19, @"SELECT * FROM ZASSETPACK WHERE ZMANIFEST = ? AND ZLOCALURLSTRING IS NOT NULL", &v58);
        BOOL v22 = *((unsigned char *)v54 + 24) == 0;

        _Block_object_dispose(&v53, 8);
        if (v22) {
          goto LABEL_21;
        }
        CFStringRef v24 = *(const __CFString **)(v42 + 32);
        id v23 = *(void **)(v42 + 40);
        id v25 = v20;
        id v26 = v19;
        id v27 = v23;
        uint64_t v28 = v27;
        if (v24)
        {
          CFStringRef v58 = @"ZADAMID";
          uint64_t v59 = @"ZCACHINGALLOWED";
          CFStringRef v69 = @"itemId";
          CFStringRef v70 = @"local-cache-allowed";
          long long v60 = (void (*)(uint64_t, void *))@"ZLASTMODIFICATIONDATE";
          CFStringRef v61 = @"ZSTORAGEID";
          CFStringRef v71 = @"last_modification_date";
          CFStringRef v72 = @"storage_id";
          uint64_t v62 = @"ZTHINNINGVARIANT";
          CFStringRef v73 = @"thinningVariant";
          uint64_t v29 = +[NSDictionary dictionaryWithObjects:&v69 forKeys:&v58 count:5];
          uint64_t v53 = 0;
          unsigned __int8 v54 = &v53;
          uint64_t v55 = 0x2020000000;
          char v56 = 0;
          *(void *)long long buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_100363C88;
          id v87 = (uint64_t (*)(uint64_t, uint64_t))&unk_100529768;
          uint64_t v30 = (void (*)(uint64_t))v25;
          id v88 = v30;
          id v31 = v29;
          __int16 v89 = v31;
          CFStringRef v90 = v24;
          CFStringRef v92 = (const __CFString *)&v53;
          id v32 = v28;
          id v91 = v32;
          sub_100009834((uint64_t)v26, @"SELECT * FROM ZMANIFEST WHERE ZAPPLICATIONBUNDLEID = ?", buf);
          BOOL v33 = *((unsigned char *)v54 + 24) == 0;

          _Block_object_dispose(&v53, 8);
          if (!v33)
          {
            uint64_t v35 = *(void *)(v42 + 32);
            long long v34 = *(void **)(v42 + 40);
            id v36 = v47;
            id v37 = v7;
            if (v35)
            {
              *(void *)long long buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472;
              *(void *)&uint8_t buf[16] = sub_100363464;
              id v87 = (uint64_t (*)(uint64_t, uint64_t))&unk_100525200;
              id v88 = (void (*)(uint64_t))v36;
              __int16 v89 = (__CFString *)v37;
              [v34 modifyUsingTransaction:buf];
            }
            goto LABEL_11;
          }
        }
        else
        {
        }
        uint64_t v39 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_fault_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "Failed to import manifest", buf, 2u);
        }

LABEL_11:
        id v5 = (char *)v5 + 1;
      }
      while (v46 != v5);
      id v40 = [obj countByEnumeratingWithState:&v49 objects:v57 count:16];
      id v46 = v40;
    }
    while (v40);
  }
}

void sub_100362F04(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_100362F34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001F79D0(v3);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        id v10 = sub_1001F92B4(v3, v9);
        if (v10) {
          [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v10 forKeyedSubscript:v9];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_100363070(id a1, NSString *a2, NSString *a3, BOOL *a4)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_1003F9F04();
  id v8 = (void *)v7;
  if (v7) {
    uint64_t v9 = *(void **)(v7 + 32);
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = v9;
  long long v11 = [v10 stringByAppendingPathComponent:v6];

  if (v11)
  {
    long long v12 = +[NSURL fileURLWithPath:v11];
    long long v13 = +[SAPathInfo pathInfoWithURL:v12];

    long long v14 = +[SAPathManager defaultManager];
    id v20 = v13;
    id v15 = +[NSArray arrayWithObjects:&v20 count:1];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_100363274;
    v16[3] = &unk_100521910;
    uint64_t v17 = v5;
    [v14 registerPaths:v15 forBundleID:v17 completionHandler:v16];
  }
  else
  {
    long long v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Error attributing space to application %{public}@, no application base directory", buf, 0xCu);
    }
  }
}

void sub_100363274(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error attributing space to application %{public}@: %{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100363348(uint64_t a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1003633C0;
  void v2[3] = &unk_100523438;
  v2[4] = *(void *)(a1 + 32);
  sub_1000096CC(a2, v2);
}

void sub_1003633C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_1003D5E40((uint64_t)v3, @"ZAPPLICATIONBUNDLEID");
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = sub_1003D5D5C((uint64_t)v3, @"Z_PK");

  if (v5 && v4) {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v4 forKeyedSubscript:v5];
  }
}

BOOL sub_100363464(uint64_t a1, void *a2)
{
  return sub_10024A2BC(a2, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100363474(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "bindInt:atPosition:", objc_msgSend(v3, "intValue"), 1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100363570;
  void v10[3] = &unk_1005296F0;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void **)(a1 + 56);
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = v7;
  id v14 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  id v15 = v8;
  uint64_t v16 = v9;
  sub_1000096CC((uint64_t)v4, v10);
}

void sub_100363570(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) allKeys];
  id v5 = sub_1003D5EE4(v3, v4);
  id v6 = [v5 mutableCopy];

  sub_1003638DC(*(void *)(a1 + 40), v6, *(void **)(a1 + 32));
  uint64_t v7 = [v6 objectForKeyedSubscript:@"last_used_date"];
  id v8 = v7;
  if (v7)
  {
    [v7 doubleValue];
    uint64_t v9 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
    [v6 setObject:v9 forKeyedSubscript:@"last_used_date"];
  }
  id v10 = [v6 objectForKeyedSubscript:@"hashes"];
  if (v10)
  {
    uint64_t v34 = 0;
    id v11 = +[NSPropertyListSerialization propertyListWithData:v10 options:0 format:0 error:&v34];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v6 setObject:v11 forKeyedSubscript:@"hashes"];
    }
  }
  uint64_t v12 = sub_1003D5D5C((uint64_t)v3, @"Z_PK");
  id v13 = [v12 longLongValue];

  id v14 = objc_opt_new();
  uint64_t v15 = *(void *)(a1 + 48);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100363A38;
  v31[3] = &unk_1005296C8;
  id v33 = v13;
  id v16 = v14;
  id v32 = v16;
  sub_100009834(v15, @"SELECT * FROM ZCONTENTHASH WHERE ZASSETPACK = ?", v31);
  [v6 setObject:v16 forKeyedSubscript:@"primaryContentHash"];
  uint64_t v17 = [v6 objectForKeyedSubscript:@"local_url"];
  if (!v17) {
    goto LABEL_10;
  }
  id v18 = +[NSURL URLWithString:v17];
  sub_1002703D8((uint64_t)ODRContentHash, v16);
  uint64_t v29 = v6;
  uint64_t v19 = a1;
  id v20 = v10;
  v22 = id v21 = v8;
  sub_1002704DC(v22);
  id v23 = v17;
  v25 = CFStringRef v24 = v3;
  int v26 = sub_10022F824((uint64_t)ODRAssetPack, v18, v25);

  id v3 = v24;
  uint64_t v17 = v23;

  id v8 = v21;
  id v10 = v20;
  uint64_t v27 = v19;
  id v6 = v29;

  if (v26)
  {
    uint64_t v28 = sub_100297664([ODRAssetPack alloc], v29, *(void **)(v27 + 56));
    sub_100363B84(*(void *)(v27 + 40), v28, *(void **)(v27 + 64));
    *(unsigned char *)(*(void *)(*(void *)(v27 + 72) + 8) + 24) = 1;
  }
  else
  {
LABEL_10:
    uint64_t v28 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "The legacy database told us that an asset pack was on the device but it wasn't, skipping the import for it.", buf, 2u);
    }
  }
}

void sub_1003638DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (a1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v16;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          id v13 = [v7 objectForKeyedSubscript:v12];
          id v14 = [v5 objectForKeyedSubscript:v12];
          [v5 setObject:v14 forKeyedSubscript:v13];

          [v5 removeObjectForKey:v12];
        }
        id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v9);
    }
  }
}

void sub_100363A38(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100363AE8;
  v5[3] = &unk_1005296A0;
  id v6 = *(id *)(a1 + 32);
  sub_1000096CC((uint64_t)v4, v5);
}

void sub_100363AE8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  uint64_t v7 = sub_1003D5E40((uint64_t)v6, @"ZSTRATEGY");
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"label"];

  id v8 = sub_1003D5E40((uint64_t)v6, @"ZHASHVALUE");

  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"hash"];
  *a4 = 1;
}

BOOL sub_100363B84(BOOL a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = &v11;
    uint64_t v13 = 0x2020000000;
    char v14 = 1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100363ED4;
    v8[3] = &unk_100523970;
    id v9 = v5;
    uint64_t v10 = &v11;
    [v6 modifyUsingTransaction:v8];
    a1 = *((unsigned char *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
  }

  return a1;
}

void sub_100363C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100363C88(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100363D70;
  v9[3] = &unk_100529740;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 56);
  id v7 = (id)v8;
  long long v13 = v8;
  sub_1000096CC((uint64_t)v4, v9);
}

void sub_100363D70(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = a2;
  id v7 = sub_1003D5D5C((uint64_t)v6, @"ZISSTOREBASED");
  unsigned int v8 = [v7 BOOLValue];

  id v9 = [*(id *)(a1 + 32) allKeys];
  id v10 = sub_1003D5EE4(v6, v9);

  id v15 = [v10 mutableCopy];
  sub_1003638DC(*(void *)(a1 + 40), v15, *(void **)(a1 + 32));
  uint64_t v11 = [v15 objectForKeyedSubscript:@"last_modification_date"];
  id v12 = v11;
  if (v11)
  {
    [v11 doubleValue];
    long long v13 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
    [v15 setObject:v13 forKeyedSubscript:@"last_modification_date"];
  }
  char v14 = sub_1002AE640([ODRManifest alloc], v15, *(void **)(a1 + 48), v8);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = sub_100363B84(*(void *)(a1 + 40), v14, *(void **)(a1 + 56));
  *a4 = 1;
}

uint64_t sub_100363ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (objc_class *)[(id)objc_opt_class() databaseEntityClass];
  id v5 = [v4 alloc];
  uint64_t v6 = [*(id *)(a1 + 32) propertyValues];
  id v7 = [v3 connection];

  id v8 = [v5 initWithPropertyValues:v6 onConnection:v7];
  if (!v8)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v12 = [*(id *)(a1 + 32) propertyValues];
      int v13 = 138543618;
      char v14 = v4;
      __int16 v15 = 2114;
      long long v16 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create a %{public}@ entity with values: %{public}@ ", (uint8_t *)&v13, 0x16u);
    }
  }
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return v10;
}

id sub_1003640C4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000182C8;
    id v9 = sub_100017D20;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003641C0;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003641C0(uint64_t a1)
{
}

void sub_1003641D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10036427C;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_sync(v5, v6);
  }
}

void sub_10036427C(uint64_t a1)
{
}

id sub_100364288(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000182C8;
    id v9 = sub_100017D20;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100364384;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_100364384(uint64_t a1)
{
}

void sub_100364398(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100364440;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_sync(v5, v6);
  }
}

void sub_100364440(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 88);
  *(void *)(v2 + 88) = 0;
}

id sub_100364488(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000182C8;
    id v9 = sub_100017D20;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100364584;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_100364584(uint64_t a1)
{
}

void sub_100364598(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100364640;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_sync(v5, v6);
  }
}

void sub_100364640(uint64_t a1)
{
}

BOOL sub_10036464C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10036470C;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10036470C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 16);
  return result;
}

uint64_t sub_100364720(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003647D8;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1003647D8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 48);
  return result;
}

id sub_1003647EC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    uint64_t v8 = sub_1000182C8;
    id v9 = sub_100017D20;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003648E8;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003648E8(uint64_t a1)
{
}

void sub_1003648FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003649A4;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_sync(v5, v6);
  }
}

void sub_1003649A4(uint64_t a1)
{
}

uint64_t sub_1003649B0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100364A68;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100364A68(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 64);
  return result;
}

void sub_100364A7C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 8);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100364AF8;
    v3[3] = &unk_100521B80;
    void v3[4] = a1;
    void v3[5] = a2;
    dispatch_sync(v2, v3);
  }
}

uint64_t sub_100364AF8(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 64) = *(void *)(result + 40);
  return result;
}

id sub_100364B04(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    uint64_t v8 = sub_1000182C8;
    id v9 = sub_100017D20;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100364C00;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_100364C00(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100364C4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100364CF4;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_sync(v5, v6);
  }
}

void sub_100364CF4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;
}

uint64_t sub_100364D38(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 2;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100364DF4;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100364DF4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 80);
  return result;
}

void sub_100364E08(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 8);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100364E84;
    v3[3] = &unk_100521B80;
    void v3[4] = a1;
    void v3[5] = a2;
    dispatch_sync(v2, v3);
  }
}

uint64_t sub_100364E84(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 80) = *(void *)(result + 40);
  return result;
}

BOOL sub_100364E90(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100364F50;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100364F50(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 17);
  return result;
}

id sub_100364F64(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    char v8 = sub_1000182C8;
    id v9 = sub_100017D20;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100365060;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_100365060(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 88) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003650AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100365154;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_sync(v5, v6);
  }
}

void sub_100365154(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 88) = v2;
}

BOOL sub_100365198(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100365258;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100365258(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 18);
  return result;
}

void sub_10036526C(uint64_t a1, char a2)
{
  if (a1)
  {
    BOOL v2 = *(NSObject **)(a1 + 8);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003652EC;
    v3[3] = &unk_1005229A8;
    void v3[4] = a1;
    char v4 = a2;
    dispatch_sync(v2, v3);
  }
}

uint64_t sub_1003652EC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 18) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1003652FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003653C4;
    block[3] = &unk_1005212D8;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_sync(v7, block);
  }
}

void sub_1003653C4(void *a1)
{
  id v2 = [*(id *)(a1[4] + 104) mutableCopy];
  if (!v2) {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
  }
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  id v8 = v2;
  if (v3) {
    [v2 setObject:v3 forKey:v4];
  }
  else {
    [v2 removeObjectForKey:v4];
  }
  id v5 = [v8 copy];
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v5;
}

void sub_100365450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100365518;
    block[3] = &unk_1005212D8;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_sync(v7, block);
  }
}

void sub_100365518(void *a1)
{
  id v2 = [*(id *)(a1[4] + 112) mutableCopy];
  if (!v2) {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
  }
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  id v8 = v2;
  if (v3) {
    [v2 setObject:v3 forKey:v4];
  }
  else {
    [v2 removeObjectForKey:v4];
  }
  id v5 = [v8 copy];
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void **)(v6 + 112);
  *(void *)(v6 + 112) = v5;
}

void sub_1003656A8(void *a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 24), *(id *)(a1[4] + 24));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 40), *(id *)(a1[4] + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 16) = *(unsigned char *)(a1[4] + 16);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 32), *(id *)(a1[4] + 32));
  *(void *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 96) = *(void *)(a1[4] + 96);
  *(void *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 48) = *(void *)(a1[4] + 48);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 56), *(id *)(a1[4] + 56));
  id v2 = [*(id *)(a1[4] + 72) copyWithZone:a1[6]];
  uint64_t v3 = *(void *)(*(void *)(a1[5] + 8) + 40);
  uint64_t v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;

  id v5 = [*(id *)(a1[4] + 104) copyWithZone:a1[6]];
  uint64_t v6 = *(void *)(*(void *)(a1[5] + 8) + 40);
  uint64_t v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v5;

  *(void *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 80) = *(void *)(a1[4] + 80);
  id v8 = [*(id *)(a1[4] + 112) copyWithZone:a1[6]];
  uint64_t v9 = *(void *)(*(void *)(a1[5] + 8) + 40);
  id v10 = *(void **)(v9 + 112);
  *(void *)(v9 + 112) = v8;

  *(unsigned char *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 17) = *(unsigned char *)(a1[4] + 17);
  id v11 = [*(id *)(a1[4] + 88) copyWithZone:a1[6]];
  uint64_t v12 = *(void *)(*(void *)(a1[5] + 8) + 40);
  int v13 = *(void **)(v12 + 88);
  *(void *)(v12 + 88) = v11;

  *(unsigned char *)(*(void *)(*(void *)(a1[5] + 8) + 40) + 18) = *(unsigned char *)(a1[4] + 18);
}

id sub_1003658D8(void *a1)
{
  if (a1)
  {
    id v2 = [a1 responseStartDate];
    uint64_t v3 = [a1 responseEndDate];
    id v4 = v2;
    id v5 = v3;
    self;
    id v6 = 0;
    if (v4 && v5)
    {
      [v5 timeIntervalSinceDate:v4];
      if (v7 >= 2.22044605e-16) {
        id v6 = [objc_alloc((Class)NSDateInterval) initWithStartDate:v4 duration:v7];
      }
      else {
        id v6 = 0;
      }
    }
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

void sub_100365BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100365BD8(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    id v5 = objc_opt_class();
    [v5 databaseTable];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10036793C;
    void v10[3] = &unk_100529910;
    int v13 = v5;
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    id v6 = v4;
    id v12 = v6;
    id v7 = v11;
    [v3 enumerateKeysAndObjectsUsingBlock:v10];

    id v8 = v12;
    id v2 = v6;
  }
  return v2;
}

uint64_t sub_100365CD4(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100365D7C;
  v7[3] = &unk_1005297A8;
  uint64_t v10 = *(void *)(a1 + 56);
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);

  return v5;
}

uint64_t sub_100365D7C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t result = sub_100365DD8((uint64_t)SQLiteEntity, a3, a2, *(void *)(a1 + 48), *(void **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_100365DD8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = self;
  id v11 = [objc_alloc((Class)NSMutableString) initWithString:@"INSERT OR REPLACE INTO "];
  [v11 appendString:v8];
  objc_msgSend(v11, "appendString:", @" (");
  uint64_t v12 = [v10 foreignKeyColumnForTable:v8];
  int v13 = (void *)v12;
  if (v12) {
    CFStringRef v14 = (const __CFString *)v12;
  }
  else {
    CFStringRef v14 = @"ROWID";
  }
  [v11 appendString:v14];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  id v15 = v7;
  id v16 = [v15 countByEnumeratingWithState:&v41 objects:v50 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v42;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v42 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v41 + 1) + 8 * i);
        [v11 appendString:@", "];
        [v11 appendString:v20];
      }
      id v17 = [v15 countByEnumeratingWithState:&v41 objects:v50 count:16];
    }
    while (v17);
  }

  [v11 appendString:@") VALUES (?"];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v21 = v15;
  BOOL v22 = (char *)[v21 countByEnumeratingWithState:&v37 objects:v49 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v38;
    while (1)
    {
      if (*(void *)v38 != v24) {
        objc_enumerationMutation(v21);
      }
      [v11 appendString:@", ?"];
      if (!--v23)
      {
        id v23 = (char *)[v21 countByEnumeratingWithState:&v37 objects:v49 count:16];
        if (!v23) {
          break;
        }
      }
    }
  }

  [v11 appendString:@";"]);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1003677F8;
  v33[3] = &unk_100524BD8;
  uint64_t v35 = a4;
  id v36 = 0;
  id v25 = v21;
  id v34 = v25;
  uint64_t v26 = sub_100012004((uint64_t)v9, v11, &v36, v33);
  id v27 = v36;
  if (v27)
  {
    uint64_t v28 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v46 = v30;
      __int16 v47 = 2112;
      id v48 = v27;
      id v31 = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "[%{public}@] Error: %@", buf, 0x16u);
    }
  }

  return v26;
}

void sub_100366304(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL sub_100366320(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [(id)objc_opt_class() databaseTable];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1003664F4(v2, v3, @"ROWID");

  [(id)objc_opt_class() foreignDatabaseTablesToDelete];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v16;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend((id)objc_opt_class(), "foreignKeyColumnForTable:", v9, (void)v15);
        if (v10)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1003664F4(*(void *)(a1 + 32), v9, v10);
          if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
          {

            goto LABEL_12;
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 8);
    *(void *)(v11 + 8) = 0;

    BOOL v13 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 0;
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

uint64_t sub_1003664F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"DELETE FROM %@ WHERE %@ = ?;",
           v6,
           v5);

    uint64_t v8 = *(void *)(v3 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100367A50;
    void v10[3] = &unk_1005214E0;
    void v10[4] = v3;
    uint64_t v3 = sub_100012004(v8, v7, 0, v10);
  }
  return v3;
}

void sub_1003665D0(uint64_t a1)
{
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  CFStringRef v5 = @"SQLiteUserInfoKeyPersistentID";
  uint64_t v3 = +[NSNumber numberWithLongLong:*(void *)(a1 + 32)];
  id v6 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v2 postNotificationName:@"SQLiteDidDeleteEntityNotification" object:0 userInfo:v4];
}

void sub_1003667B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003667CC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = sub_100242EB8((uint64_t)v4);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

void sub_100366BA8(id *a1, void *a2, uint64_t a3)
{
  id v5 = a1[6];
  id v6 = a2;
  id v8 = [v5 disambiguatedSQLForProperty:v6];
  if (a3) {
    [a1[4] appendString:@", "];
  }
  [a1[4] appendString:v8];
  id v7 = [a1[6] joinClauseForProperty:v6];

  if (v7) {
    [a1[5] addObject:v7];
  }
}

void sub_100366C5C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100366D24;
  v5[3] = &unk_100529848;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  sub_1000096CC((uint64_t)v4, v5);
}

void sub_100366D24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100366E00;
    v9[3] = &unk_1005276A0;
    id v8 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v5;
    [v8 enumerateObjectsUsingBlock:v9];
  }
}

void sub_100366E00(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = *(void **)(a1 + 40);
  id v6 = a2;
  sub_1003D6084(v5, a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

void sub_100367060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10036707C(uint64_t a1)
{
  id v2 = sub_100365BD8(*(void **)(a1 + 32), *(void **)(a1 + 40));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100367140;
  v7[3] = &unk_1005298C0;
  uint64_t v11 = *(void *)(a1 + 64);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = *(void *)(a1 + 56);
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  return v5;
}

void sub_100367140(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [*(id *)(a1 + 56) foreignKeyColumnForTable:v7];
  if (v9) {
    uint64_t v10 = (__CFString *)v9;
  }
  else {
    uint64_t v10 = @"ROWID";
  }
  uint64_t v31 = 0;
  id v32 = &v31;
  uint64_t v33 = 0x2020000000;
  char v34 = 1;
  if (([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
  {
    id v11 = [objc_alloc((Class)NSMutableString) initWithString:@"SELECT 1 FROM "];
    [v11 appendString:v7];
    [v11 appendString:@" WHERE "];
    [v11 appendString:v10];
    [v11 appendString:@" =  ? LIMIT 1;"];
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(v12 + 8);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1003674E4;
    v30[3] = &unk_100523FE8;
    v30[4] = v12;
    v30[5] = &v31;
    sub_100009834(v13, v11, v30);
  }
  if (*((unsigned char *)v32 + 24))
  {
    id v14 = objc_alloc_init((Class)NSMutableArray);
    id v15 = [objc_alloc((Class)NSMutableString) initWithString:@"UPDATE "];
    [v15 appendString:v7];
    [v15 appendString:@" SET "];
    v28[0] = 0;
    v28[1] = v28;
    void v28[2] = 0x2020000000;
    char v29 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100367544;
    v24[3] = &unk_100529898;
    id v27 = v28;
    id v16 = v15;
    id v25 = v16;
    id v17 = v14;
    id v26 = v17;
    [v8 enumerateKeysAndObjectsUsingBlock:v24];
    [v16 appendString:@" WHERE "];
    [v16 appendString:v7];
    [v16 appendString:@"."];
    [v16 appendString:v10];
    [v16 appendString:@" = ?;"];
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1003675F0;
    v21[3] = &unk_1005214B8;
    id v19 = v17;
    uint64_t v20 = *(void *)(a1 + 40);
    id v22 = v19;
    uint64_t v23 = v20;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sub_100012004(v18, v16, 0, v21);

    _Block_object_dispose(v28, 8);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sub_100365DD8((uint64_t)SQLiteEntity, v8, v7, *(void *)(*(void *)(a1 + 40) + 16), *(void **)(*(void *)(a1 + 40) + 8));
  }
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) ^ 1;
  _Block_object_dispose(&v31, 8);
}

void sub_1003674AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1003674E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = sub_100242EB8((uint64_t)v4);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

void sub_100367544(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    [*(id *)(a1 + 32) appendString:@", "];
  }
  [*(id *)(a1 + 32) appendString:v6];
  [*(id *)(a1 + 32) appendString:@" = ?"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  [*(id *)(a1 + 40) addObject:v5];
}

void sub_1003675F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    uint64_t v8 = 1;
    do
    {
      uint64_t v9 = 0;
      uint64_t v10 = v8;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        sub_10041E7A8(v3, (uint64_t)v9 + v10, *(void **)(*((void *)&v12 + 1) + 8 * (void)v9));
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v8 = (v10 + v9);
    }
    while (v6);
    uint64_t v11 = (v10 + v9);
  }
  else
  {
    uint64_t v11 = 1;
  }

  objc_msgSend(v3, "bindInt64:atPosition:", *(void *)(*(void *)(a1 + 40) + 16), v11, (void)v12);
}

void sub_1003677F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindInt64:*(void *)(a1 + 40) atPosition:1];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    uint64_t v8 = 2;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *(void *)(*((void *)&v11 + 1) + 8 * (void)v9), (void)v11);
        sub_10041E7A8(v3, (uint64_t)v9 + v8, v10);

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      uint64_t v8 = (v8 + v9);
    }
    while (v6);
  }
}

void sub_10036793C(id *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (([v10 isEqualToString:@"ROWID"] & 1) == 0)
  {
    uint64_t v6 = [a1[6] foreignDatabaseTableForProperty:v10];
    if (v6)
    {
      id v7 = (id)v6;
      id v8 = [a1[6] foreignDatabaseColumnForProperty:v10];
    }
    else
    {
      id v8 = v10;
      id v7 = a1[4];
    }
    id v9 = [a1[5] objectForKey:v7];
    if (!v9)
    {
      id v9 = objc_alloc_init((Class)NSMutableDictionary);
      [a1[5] setObject:v9 forKey:v7];
    }
    [v9 setObject:v5 forKey:v8];
  }
}

id sub_100367A50(uint64_t a1, void *a2)
{
  return [a2 bindInt64:*(void *)(*(void *)(a1 + 32) + 16) atPosition:1];
}

id sub_100367A80(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v2 error:0];
    }
    else
    {
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id *sub_100367B88(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = [a1 init];
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 3, a2);
    }
  }

  return a1;
}

uint64_t sub_100367CD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v19 = (char *)[*(id *)(a1 + 8) length];
    id v6 = [v5 length];
    if ((unint64_t)(2 * (void)v6) <= 0x400) {
      unint64_t v7 = 1024;
    }
    else {
      unint64_t v7 = 2 * (void)v6;
    }
    if ((unint64_t)[*(id *)(a1 + 8) length] < v7)
    {
      [*(id *)(a1 + 8) setLength:v7];
      id v19 = (char *)v7;
    }
    if (!v5)
    {
      id v19 = 0;
      goto LABEL_11;
    }
    uint64_t v8 = *(void *)(a1 + 16);
    id v9 = v5;
    if (sub_100239B50(v8, (char *)[v9 bytes], (unint64_t)objc_msgSend(v9, "length"), (uint64_t)objc_msgSend(*(id *)(a1 + 8), "mutableBytes"), (id *)&v19, a3))
    {
      while (1)
      {
LABEL_11:
        uint64_t v11 = *(void *)(a1 + 16);
        if (v11 && ![*(id *)(v11 + 8) length])
        {
          uint64_t v10 = 1;
          goto LABEL_20;
        }
        uint64_t v18 = 0;
        long long v12 = objc_msgSend(*(id *)(a1 + 8), "length", 0);
        uint64_t v18 = (char *)(v12 - v19);
        uint64_t v13 = *(void *)(a1 + 16);
        id v14 = [*(id *)(a1 + 8) mutableBytes];
        uint64_t v15 = sub_100239B50(v13, 0, 0, (uint64_t)&v19[(void)v14], (id *)&v18, a3);
        if (!v15 || v18 == 0) {
          break;
        }
        id v19 = &v18[(void)v19];
        objc_msgSend(*(id *)(a1 + 8), "setLength:", (char *)objc_msgSend(*(id *)(a1 + 8), "length") + 1024);
      }
      uint64_t v10 = v15;
    }
    else
    {
      uint64_t v10 = 0;
    }
LABEL_20:
    [*(id *)(a1 + 8) setLength:v19];
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id sub_100367F98(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else {
    return [*(id *)(*(void *)(a1 + 32) + 40) finishWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1003681DC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v18.receiver = (id)a1;
    v18.super_class = (Class)PushServiceTestFlightConsumer;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v18, "init");
    a1 = (uint64_t)v8;
    if (v8)
    {
      objc_storeStrong(v8 + 3, a2);
      uint64_t v9 = sub_1002D97AC("com.apple.appstored.PushServiceTestFlightConsumer", QOS_CLASS_UTILITY);
      uint64_t v10 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v9;

      uint64_t v11 = +[NSMutableArray arrayWithCapacity:11];
      long long v12 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v11;

      if (v7) {
        uint64_t v13 = (id *)v7;
      }
      else {
        uint64_t v13 = sub_100402D0C((id *)[TestFlightServiceHost alloc], *(void **)(a1 + 16));
      }
      id v14 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v13;

      uint64_t v15 = *(void *)(a1 + 8);
      if (v15) {
        objc_storeWeak((id *)(v15 + 48), (id)a1);
      }
      *(unsigned char *)(a1 + 56) = sub_10036832C(a1);
      id v16 = +[NSNotificationCenter defaultCenter];
      [v16 addObserver:a1 selector:"_handleBagChangedNotification:" name:AMSBagChangedNotification object:0];
    }
  }

  return a1;
}

BOOL sub_10036832C(uint64_t a1)
{
  sub_10030B11C();
  id v2 = (id *)objc_claimAutoreleasedReturnValue();
  if (sub_10030BBA8(v2, @"testflight-extension/extension-enabled", 1))
  {
    sub_10030B11C();
    id v3 = (id *)objc_claimAutoreleasedReturnValue();
    if (sub_10030BBA8(v3, @"testflight-extension/extension-push-enabled", 1)) {
      BOOL v4 = sub_100403378(*(void *)(a1 + 8)) == 1;
    }
    else {
      BOOL v4 = 0;
    }
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_100368430(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003684D8;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1003684D8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 48) length])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(v2 + 8);
    BOOL v4 = *(void **)(v2 + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100368600;
    void v10[3] = &unk_100525860;
    void v10[4] = v2;
    id v11 = *(id *)(a1 + 40);
    sub_100403454(v3, v4, v10);
    id v5 = v11;
  }
  else
  {
    id v6 = *(void **)(a1 + 40);
    if (!v6) {
      return;
    }
    id v7 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003686F0;
    block[3] = &unk_100521F40;
    id v9 = v6;
    dispatch_async(v7, block);
    id v5 = v9;
  }
}

void sub_100368600(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 48);
    *(void *)(v6 + 48) = 0;
  }
  uint64_t v8 = *(void **)(a1 + 40);
  if (v8)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003686D8;
    block[3] = &unk_100529980;
    id v12 = v8;
    char v13 = a2;
    id v11 = v5;
    dispatch_async(v9, block);
  }
}

uint64_t sub_1003686D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

uint64_t sub_1003686F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003687A0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) insertObject:*(void *)(a1 + 40) atIndex:0];
  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 32) count] >= 0xB) {
    [*(id *)(*(void *)(a1 + 32) + 32) removeLastObject];
  }
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100368804(v2);
}

void sub_100368804(uint64_t a1)
{
  if (a1 && [*(id *)(a1 + 32) count] && !*(unsigned char *)(a1 + 40) && sub_100403378(*(void *)(a1 + 8)))
  {
    *(unsigned char *)(a1 + 40) = 1;
    objc_initWeak(&location, (id)a1);
    uint64_t v2 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [*(id *)(a1 + 32) count]);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v3 = [*(id *)(a1 + 32) objectEnumerator];
    id v4 = [v3 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v17;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v17 != v5) {
            objc_enumerationMutation(v3);
          }
          id v7 = *(id **)(*((void *)&v16 + 1) + 8 * (void)v6);
          id v8 = objc_alloc((Class)ASDTestFlightServiceExtensionPushMessage);
          id v9 = sub_100369524(v7);
          uint64_t v10 = sub_1003694F4(v7);
          id v11 = [v8 initWithTimestamp:v9 userInfo:v10];
          [v2 addObject:v11];

          uint64_t v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v3 countByEnumeratingWithState:&v16 objects:v21 count:16];
      }
      while (v4);
    }

    [*(id *)(a1 + 32) removeAllObjects];
    uint64_t v12 = *(void *)(a1 + 8);
    char v13 = +[NSArray arrayWithArray:v2];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100368C78;
    v14[3] = &unk_100529958;
    objc_copyWeak(&v15, &location);
    sub_100403A0C(v12, v13, v14);

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

void sub_100368A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100368B2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  if (!v2 || ([v2 isEqualToData:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v3 = [*(id *)(a1 + 40) copy];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = v3;

    uint64_t v6 = *(void *)(a1 + 32);
    sub_100368430(v6, &stru_100529930);
  }
}

void sub_100368BAC(uint64_t a1)
{
  if (a1)
  {
    int v2 = sub_10036832C(a1);
    if (*(unsigned __int8 *)(a1 + 56) != v2)
    {
      *(unsigned char *)(a1 + 56) = v2;
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));

      if (WeakRetained)
      {
        uint64_t v4 = *(NSObject **)(a1 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100368D90;
        block[3] = &unk_100521388;
        void block[4] = a1;
        dispatch_async(v4, block);
      }
      if (*(unsigned char *)(a1 + 56))
      {
        sub_100368804(a1);
      }
      else
      {
        uint64_t v5 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = 0;
      }
    }
  }
}

void sub_100368C78(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  int v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = WeakRetained[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100368D04;
    block[3] = &unk_100521388;
    void block[4] = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_100368D04(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
  return sub_100368804(*(void *)(a1 + 32));
}

void sub_100368D88(uint64_t a1)
{
}

void sub_100368D90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 64));
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
    id WeakRetained = 0;
  }
  id v5 = WeakRetained;
  [WeakRetained testFlightConsumer:v4 didChangeStatus:*(unsigned __int8 *)(v4 + 56)];
}

id *sub_100368E68(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)LibraryQueryPlanner;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

id sub_100368EE0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        id v9 = v8;
        id v10 = [v9 countByEnumeratingWithState:&v15 objects:v23 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v16;
          do
          {
            for (j = 0; j != v11; j = (char *)j + 1)
            {
              if (*(void *)v16 != v12) {
                objc_enumerationMutation(v9);
              }
              [v2 addObject:*(void *)(*((void *)&v15 + 1) + 8 * (void)j)];
            }
            id v11 = [v9 countByEnumeratingWithState:&v15 objects:v23 count:16];
          }
          while (v11);
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v5);
  }

  return v2;
}

id sub_1003690D8(id a1, void *a2, __int16 a3)
{
  id v5 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)XDCMessage;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      uint64_t v6 = [v5 data];
      objc_super v7 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v6;

      *((_WORD *)a1 + 5) = a3;
    }
  }

  return a1;
}

id *sub_100369160(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)XDCMessage;
    a1 = (id *)objc_msgSendSuper2(&v13, "init");
    if (a1)
    {
      uint64_t v10 = [v7 data];
      id v11 = a1[2];
      a1[2] = (id)v10;

      *((_WORD *)a1 + 5) = (unsigned __int16)[v7 type];
      objc_storeStrong(a1 + 4, a4);
      objc_storeStrong(a1 + 3, a3);
    }
  }

  return a1;
}

void *sub_10036922C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = objc_alloc((Class)IDSProtobuf);
    uint64_t v3 = v1[2];
    uint64_t v4 = *((unsigned __int16 *)v1 + 5);
    uint64_t v5 = *((unsigned __int8 *)v1 + 8);
    return _[v2 initWithProtobufData:v3 type:v4 isResponse:v5];
  }
  return result;
}

unsigned char *sub_10036927C(uint64_t a1, void *a2, __int16 a3)
{
  if (a1)
  {
    id v5 = a2;
    uint64_t v6 = sub_1003690D8([XDCMessage alloc], v5, a3);

    if (v6)
    {
      objc_setProperty_atomic(v6, v7, *(id *)(a1 + 24), 24);
      objc_setProperty_atomic(v6, v8, *(id *)(a1 + 32), 32);
      void v6[8] = 1;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6;
}

void *sub_100369370(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)PushRawMessage;
    a1 = objc_msgSendSuper2(&v12, "init");
    if (a1)
    {
      uint64_t v4 = [v3 userInfo];
      id v5 = [v4 copy];
      uint64_t v6 = (void *)a1[2];
      a1[2] = v5;

      id v7 = [v3 timestamp];
      id v8 = [v7 copy];
      id v9 = (void *)a1[3];
      a1[3] = v8;

      uint64_t v10 = [v3 topic];
      a1[1] = sub_10036944C((uint64_t)PushRawMessage, v10);
    }
  }

  return a1;
}

uint64_t sub_10036944C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  self;
  if ([v2 isEqualToString:@"com.apple.appstored"])
  {
    uint64_t v3 = 1;
  }
  else
  {
    self;
    if ([v2 isEqualToString:@"com.apple.appstored-testflight"])
    {
      uint64_t v3 = 2;
    }
    else
    {
      self;
      if ([v2 isEqualToString:@"com.apple.storekit"]) {
        uint64_t v3 = 3;
      }
      else {
        uint64_t v3 = 0;
      }
    }
  }

  return v3;
}

id *sub_1003694F4(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[2];
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_100369524(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[3];
    uint64_t v1 = vars8;
  }
  return a1;
}

__CFString *sub_100369554(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) < 3) {
    return off_100529DB0[a2 - 1];
  }
  +[NSException raise:NSInvalidArgumentException, @"No string representation for topic: %ld", a2 format];
  return 0;
}

id sub_1003697F0(id a1)
{
  id v1 = a1;
  if (a1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003698BC;
    v4[3] = &unk_100529DF0;
    id v5 = (id)objc_opt_new();
    id v2 = v5;
    sub_100369A00(v1, (uint64_t)v4);
    id v1 = [v2 componentsJoinedByString:@":"];
  }
  return v1;
}

uint64_t sub_1003698BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = [v3 domain];
  uint64_t v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%ld", v5, [v3 code]);
  [v4 addObject:v6];

  id v7 = [v3 domain];
  if (![v7 isEqualToString:AMSErrorDomain])
  {
LABEL_5:

    goto LABEL_6;
  }
  id v8 = [v3 code];

  if (v8 == (id)305)
  {
    id v9 = [v3 userInfo];
    id v7 = sub_1002686AC(v9, AMSErrorUserInfoKeyServerErrorCode);

    if (v7)
    {
      uint64_t v10 = *(void **)(a1 + 32);
      id v11 = +[NSString stringWithFormat:@"%@/%@", AMSServerErrorDomain, v7];
      [v10 addObject:v11];
    }
    goto LABEL_5;
  }
LABEL_6:

  return 1;
}

void sub_100369A00(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = a1;
    while (1)
    {
      id v7 = v3;
      if (!(*(unsigned int (**)(uint64_t))(a2 + 16))(a2)) {
        break;
      }
      uint64_t v4 = [v7 userInfo];
      uint64_t v5 = [v4 objectForKeyedSubscript:NSUnderlyingErrorKey];

      id v3 = (id)v5;
      if (!v5)
      {
        uint64_t v6 = 0;
        goto LABEL_7;
      }
    }
    uint64_t v6 = v7;
LABEL_7:
  }
}

id sub_100369AD0(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = [a1 domain];
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%ld", v2, [v1 code]);
    id v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

id sub_100369B58(void *a1)
{
  if (a1)
  {
    id v2 = [a1 userInfo];
    id v3 = [v2 objectForKeyedSubscript:@"dialogID"];

    if (!v3)
    {
      uint64_t v4 = [a1 userInfo];
      id v3 = sub_100268A28(v4, @"AMSServerPayload.metrics.dialogId");
    }
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void *sub_100369BF0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)IAPInfoDAAPResponseDecoder;
    a1 = objc_msgSendSuper2(&v14, "init");
    if (a1)
    {
      uint64_t v4 = objc_opt_new();
      uint64_t v5 = (void *)a1[8];
      a1[8] = v4;

      uint64_t v6 = objc_opt_new();
      id v7 = (void *)a1[9];
      a1[9] = v6;

      id v8 = (void *)a1[7];
      a1[7] = &off_10054CB10;

      id v9 = v3;
      if ([v9 length])
      {
        uint64_t v10 = [objc_alloc((Class)DKDAAPParser) initWithData:v9];
        [v10 setDelegate:a1];
        [v10 parse];
      }
      else
      {
        uint64_t v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          objc_super v12 = objc_opt_class();
          *(_DWORD *)long long buf = 138412290;
          long long v16 = v12;
          id v13 = v12;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@]: Response data 0 length", buf, 0xCu);
        }
      }
    }
  }

  return a1;
}

void sub_10036A800(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@] Cannot refresh purchase history, lookup may fail: %{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10036A8DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 count] != (id)1)
  {
    id v10 = [v5 count];
    id v11 = ASDLogHandleForCategory();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if ((unint64_t)v10 < 2)
    {
      if (v12)
      {
        uint64_t v15 = *(void *)(a1 + 32);
        int v16 = 138412546;
        uint64_t v17 = v15;
        __int16 v18 = 2114;
        id v19 = v6;
        objc_super v14 = "[%@] Lookup failed: %{public}@";
        goto LABEL_10;
      }
    }
    else if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v16 = 138412546;
      uint64_t v17 = v13;
      __int16 v18 = 2048;
      id v19 = [v5 count];
      objc_super v14 = "[%@] Found %lu results, but only one was expected";
LABEL_10:
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v16, 0x16u);
    }

    goto LABEL_8;
  }
  uint64_t v7 = [v5 firstObject];
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

LABEL_8:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

id *sub_10036AA54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v78 = a3;
  id v70 = a4;
  CFStringRef v77 = (objc_class *)self;
  CFStringRef v71 = +[NSMutableArray array];
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id obj = v6;
  id v76 = [obj countByEnumeratingWithState:&v82 objects:v95 count:16];
  if (v76)
  {
    uint64_t v75 = *(void *)v83;
    uint64_t v72 = AMSBuyParamPropertyPricingParameters;
    uint64_t v73 = AMSBuyParamPropertyAppExtVrsId;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v83 != v75) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v82 + 1) + 8 * (void)v7);
        CFStringRef v79 = [[_TtC9appstored6LogKey alloc] initWithAppMetadata:v8];
        id v9 = objc_alloc_init(PurchaseInfo);
        [(PurchaseInfo *)v9 setSuppressDialogs:1];
        [(PurchaseInfo *)v9 setPriority:-1];
        [(PurchaseInfo *)v9 setLogCode:@"WRD"];
        id v10 = sub_1002B17C4((id *)v8);
        [(PurchaseInfo *)v9 setExternalID:v10];

        id v11 = [v78 processInfo];
        [(PurchaseInfo *)v9 setClientInfo:v11];

        [(PurchaseInfo *)v9 setRequestToken:v78];
        [(PurchaseInfo *)v9 setCoordinatorImportance:2];
        [(PurchaseInfo *)v9 setCoordinatorIntent:1];
        if (v8)
        {
          if ((*(_WORD *)(v8 + 208) & 1) != 0 && *(void *)(v8 + 8))
          {
            BOOL v12 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v8 + 32)];
            [(PurchaseInfo *)v9 setOriginalPurchaserDSID:v12];

            CFStringRef v81 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v8 + 8)];
            goto LABEL_12;
          }
          uint64_t v13 = *(void *)(v8 + 32);
        }
        else
        {
          uint64_t v13 = 0;
        }
        CFStringRef v81 = +[NSNumber numberWithUnsignedLongLong:v13];
LABEL_12:
        objc_super v14 = sub_1003305E0();
        uint64_t v15 = v14;
        if (v81) {
          objc_msgSend(v14, "ams_setDSID:", v81);
        }
        if (v8)
        {
          int v16 = *(void **)(v8 + 48);
          if (v16)
          {
            id v17 = v16;
            [v15 setUsername:v17];
          }
          __int16 v18 = *(void **)(v8 + 40);
          if (v18)
          {
            id v19 = v18;
            objc_msgSend(v15, "ams_setAltDSID:", v19);
          }
        }
        CFStringRef v80 = sub_1003072FC((uint64_t)ACAccountStore, v15);

        [(PurchaseInfo *)v9 setAccount:v80];
        [(PurchaseInfo *)v9 setIgnoreRequirePasswordRestriction:1];
        [(PurchaseInfo *)v9 setAutoInstallOverride:1];
        if (v8)
        {
          long long v20 = *(void **)(v8 + 72);
          if (v20)
          {
            id v21 = v20;
            [(PurchaseInfo *)v9 setBundleID:v21];
          }
          if ((*(_WORD *)(v8 + 208) & 4) != 0)
          {
            long long v22 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v8 + 24)];
            [(PurchaseInfo *)v9 setItemID:v22];
          }
          [(PurchaseInfo *)v9 setPurchaseType:0];
          if ((*(_WORD *)(v8 + 208) & 8) != 0)
          {
            if (*(void *)(v8 + 32))
            {
              uint64_t v23 = [(PurchaseInfo *)v9 itemID];
              BOOL v24 = v23 == 0;

              if (!v24)
              {
                uint64_t v25 = *(void *)(v8 + 32);
                id v26 = [(PurchaseInfo *)v9 itemID];
                id v27 = v79;
                self;
                uint64_t v89 = 0;
                CFStringRef v90 = &v89;
                uint64_t v91 = 0x3032000000;
                CFStringRef v92 = sub_1000182D8;
                CFStringRef v93 = sub_100017D28;
                id v94 = 0;
                dispatch_semaphore_t v28 = dispatch_semaphore_create(0);
                char v29 = sub_10001A264();
                uint64_t v30 = +[NSNumber numberWithUnsignedLongLong:v25];
                v86[0] = _NSConcreteStackBlock;
                v86[1] = 3221225472;
                v86[2] = sub_10036A800;
                v86[3] = &unk_100521620;
                uint64_t v31 = v27;
                id v87 = v31;
                id v32 = v28;
                id v88 = v32;
                sub_10024C1A8((uint64_t)v29, v30, v26, 7, v86);

                dispatch_semaphore_wait(v32, 0xFFFFFFFFFFFFFFFFLL);
                id v33 = objc_alloc_init((Class)ASDPurchaseHistoryQuery);
                [v33 setAccountID:v25];
                id v101 = v26;
                char v34 = +[NSArray arrayWithObjects:&v101 count:1];
                [v33 setStoreIDs:v34];

                *(void *)long long buf = _NSConcreteStackBlock;
                *(void *)&uint8_t buf[8] = 3221225472;
                *(void *)&uint8_t buf[16] = sub_10036A8DC;
                CFStringRef v97 = &unk_100529E18;
                CFStringRef v100 = &v89;
                uint64_t v35 = v31;
                CFStringRef v98 = v35;
                id v36 = v32;
                CFStringRef v99 = v36;
                sub_10024B474((uint64_t)v29, v33, buf);
                dispatch_semaphore_wait(v36, 0xFFFFFFFFFFFFFFFFLL);
                long long v37 = (id)v90[5];

                _Block_object_dispose(&v89, 8);
                if (v37)
                {
                  long long v38 = [v37 bundleID];
                  [(PurchaseInfo *)v9 setBundleID:v38];

                  long long v39 = [v37 redownloadParams];
                  long long v40 = +[AMSBuyParams buyParamsWithString:v39];
                  [(PurchaseInfo *)v9 setBuyParams:v40];

                  long long v41 = [v37 developerName];
                  [(PurchaseInfo *)v9 setVendorName:v41];
                }
                goto LABEL_32;
              }
            }
          }
        }
        else
        {
          [(PurchaseInfo *)v9 setPurchaseType:0];
        }
        long long v37 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          if (v8) {
            int v65 = (*(unsigned __int16 *)(v8 + 208) >> 3) & 1;
          }
          else {
            int v65 = 0;
          }
          id v66 = [(PurchaseInfo *)v9 itemID];
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v79;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v65;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v66 != 0;
          _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "[%@] History lookup failed - required information missing (purchaser = %{BOOL}d, item = %{BOOL}d)", buf, 0x18u);
        }
LABEL_32:

        long long v42 = [(PurchaseInfo *)v9 buyParams];
        BOOL v43 = v42 == 0;

        if (v43)
        {
          if (v8) {
            long long v44 = *(void **)(v8 + 152);
          }
          else {
            long long v44 = 0;
          }
          id v45 = v44;
          BOOL v46 = v45 == 0;

          __int16 v47 = ASDLogHandleForCategory();
          BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
          if (v46)
          {
            if (v48)
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v79;
              _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "[%@] Using workaround for missing buy parameters", buf, 0xCu);
            }

            id v55 = objc_alloc_init((Class)AMSBuyParams);
            [v55 setParameter:@"C" forKey:@"productType"];
            [v55 setParameter:@"0" forKey:@"price"];
            [v55 setParameter:@"STDRDL" forKey:v72];
            if (v8) {
              uint64_t v56 = *(void *)(v8 + 24);
            }
            else {
              uint64_t v56 = 0;
            }
            id v57 = +[NSNumber numberWithUnsignedLongLong:v56];
            CFStringRef v58 = [v57 stringValue];
            [v55 setParameter:v58 forKey:@"salableAdamId"];

            [(PurchaseInfo *)v9 setBuyParams:v55];
            goto LABEL_49;
          }
          if (v48)
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v79;
            _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "[%@] Using workaround for missing purchase history", buf, 0xCu);
          }

          if (v8) {
            long long v49 = *(void **)(v8 + 152);
          }
          else {
            long long v49 = 0;
          }
          id v50 = v49;
          long long v51 = +[AMSBuyParams buyParamsWithString:v50];
          [(PurchaseInfo *)v9 setBuyParams:v51];

          long long v52 = [(PurchaseInfo *)v9 buyParams];
          uint64_t v53 = [v52 parameterForKey:v72];
          LODWORD(v51) = [v53 isEqualToString:@"SWUPD"];

          if (v51)
          {
            unsigned __int8 v54 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v79;
              _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "[%@] Using workaround for incorrect pricing parameters", buf, 0xCu);
            }

            id v55 = [(PurchaseInfo *)v9 buyParams];
            [v55 setParameter:@"STDRDL" forKey:v72];
LABEL_49:
          }
        }
        if (v8 && (*(_WORD *)(v8 + 208) & 2) != 0)
        {
          uint64_t v59 = +[NSString stringWithFormat:@"%llu", *(void *)(v8 + 16), v70];
          long long v60 = [(PurchaseInfo *)v9 buyParams];
          CFStringRef v61 = v60;
          if (v60) {
            [v60 setParameter:v59 forKey:v73];
          }
        }
        [(PurchaseInfo *)v9 updateGeneratedProperties];
        LOBYTE(v89) = 0;
        LOBYTE(v86[0]) = 0;
        BOOL v62 = sub_10036B6F8((uint64_t)v77, v9, &v89, v86);
        if (LOBYTE(v86[0]))
        {
          id v63 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v79;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "[%{public}@] Unable to install as installed companion app is not eligible to have a Watch app", buf, 0xCu);
          }
        }
        else if (!v8 || (*(_WORD *)(v8 + 208) & 0x400) == 0 || (*(unsigned char *)(v8 + 205) ? (BOOL v64 = v62) : (BOOL v64 = 0), !v64))
        {
          [v71 addObject:v9];
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v76 != v7);
      id v67 = [obj countByEnumeratingWithState:&v82 objects:v95 count:16];
      id v76 = v67;
    }
    while (v67);
  }

  uint64_t v68 = sub_10036BA8C((id *)[v77 alloc], v71, v70);
  return v68;
}

void sub_10036B6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

BOOL sub_10036B6F8(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4)
{
  id v6 = a2;
  self;
  uint64_t v36 = 0;
  long long v37 = &v36;
  uint64_t v38 = 0x2020000000;
  char v39 = 0;
  uint64_t v32 = 0;
  id v33 = &v32;
  uint64_t v34 = 0x2020000000;
  char v35 = 0;
  uint64_t v28 = 0;
  char v29 = &v28;
  uint64_t v30 = 0x2020000000;
  char v31 = 0;
  uint64_t v7 = [v6 itemID];
  BOOL v8 = v7 == 0;

  if (v8)
  {
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "No way to check for an existing app, continuing", buf, 2u);
    }
  }
  else
  {
    id v9 = [v6 itemID];
    id v10 = +[NSPredicate predicateWithFormat:@"storeItemID == %@", v9];

    dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
    BOOL v12 = sub_10031CA20();
    uint64_t v13 = +[NSSet set];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10036D3DC;
    v22[3] = &unk_100529E68;
    id v14 = v6;
    id v23 = v14;
    uint64_t v25 = &v32;
    id v26 = &v28;
    id v27 = &v36;
    uint64_t v15 = v11;
    BOOL v24 = v15;
    [v12 executeQuery:v10 excludingBundleIDs:v13 usingBlock:v22];

    dispatch_time_t v16 = dispatch_time(0, 10000000000);
    if (dispatch_semaphore_wait(v15, v16))
    {
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        long long v20 = [v14 itemID];
        id v21 = [v14 bundleID];
        *(_DWORD *)long long buf = 138543618;
        long long v41 = v20;
        __int16 v42 = 2114;
        BOOL v43 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Timed out checking for %{public}@ %{public}@ on an internal install", buf, 0x16u);
      }
    }
  }
  if (a3) {
    *a3 = *((unsigned char *)v33 + 24);
  }
  if (a4) {
    *a4 = *((unsigned char *)v29 + 24);
  }
  BOOL v18 = *((unsigned char *)v37 + 24) != 0;
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);

  return v18;
}

void sub_10036BA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

id *sub_10036BA8C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)InstallWatchAppsTask;
    a1 = (id *)objc_msgSendSuper2(&v10, "init");
    if (a1)
    {
      id v7 = [v5 copy];
      id v8 = a1[5];
      a1[5] = v7;

      objc_storeStrong(a1 + 6, a3);
    }
  }

  return a1;
}

id *sub_10036BB3C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v84 = a3;
  id v82 = a4;
  id v75 = a5;
  id v9 = (objc_class *)self;
  CFStringRef v77 = +[NSMutableArray array];
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  id obj = v8;
  id v83 = [obj countByEnumeratingWithState:&v87 objects:v92 count:16];
  if (v83)
  {
    uint64_t v80 = *(void *)v88;
    uint64_t v86 = AMSBuyParamPropertyPricingParameters;
    uint64_t v76 = AMSBuyParamPropertyItemId;
    uint64_t v79 = AMSBuyParamPropertyAppExtVrsId;
    uint64_t v81 = (uint64_t)v9;
    do
    {
      objc_super v10 = 0;
      do
      {
        if (*(void *)v88 != v80) {
          objc_enumerationMutation(obj);
        }
        dispatch_semaphore_t v11 = *(void **)(*((void *)&v87 + 1) + 8 * (void)v10);
        BOOL v12 = objc_alloc_init(PurchaseInfo);
        sub_10030B11C();
        uint64_t v13 = (id *)objc_claimAutoreleasedReturnValue();
        [(PurchaseInfo *)v12 setSuppressDialogs:sub_10030BBA8(v13, @"watchSuppressDialogs", 1)];

        [(PurchaseInfo *)v12 setPriority:-1];
        uint64_t v14 = [v11 downloaderID];
        if (v14
          && (uint64_t v15 = (void *)v14,
              [v11 downloaderID],
              dispatch_time_t v16 = objc_claimAutoreleasedReturnValue(),
              unsigned __int8 v17 = [v16 isEqualToNumber:&off_10054CB28],
              v16,
              v15,
              (v17 & 1) == 0))
        {
          id v19 = [v11 purchaserID];
          [(PurchaseInfo *)v12 setOriginalPurchaserDSID:v19];

          uint64_t v18 = [v11 downloaderID];
        }
        else
        {
          uint64_t v18 = [v11 purchaserID];
        }
        long long v20 = (void *)v18;
        id v21 = sub_1003305E0();
        long long v22 = v21;
        if (v20) {
          objc_msgSend(v21, "ams_setDSID:", v20);
        }
        id v23 = [v11 appleID];
        [v22 setUsername:v23];

        BOOL v24 = [v11 altDSID];
        objc_msgSend(v22, "ams_setAltDSID:", v24);

        uint64_t v25 = sub_1003072FC((uint64_t)ACAccountStore, v22);

        [(PurchaseInfo *)v12 setAccount:v25];
        [(PurchaseInfo *)v12 setIgnoreRequirePasswordRestriction:1];
        [(PurchaseInfo *)v12 setLogCode:@"WRD"];
        id v26 = +[NSUUID UUID];
        [(PurchaseInfo *)v12 setExternalID:v26];

        id v27 = [v82 processInfo];
        [(PurchaseInfo *)v12 setClientInfo:v27];

        [(PurchaseInfo *)v12 setRequestToken:v82];
        [(PurchaseInfo *)v12 setCoordinatorImportance:2];
        [(PurchaseInfo *)v12 setCoordinatorIntent:6];
        uint64_t v28 = [v11 bundleID];
        [(PurchaseInfo *)v12 setBundleID:v28];

        id v29 = [v11 itemID];
        id v30 = v82;
        self;
        if (v29)
        {
          uint64_t v91 = 0;
          id v31 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithStoreItemIdentifier:error:", objc_msgSend(v29, "unsignedLongLongValue"), &v91);
          uint64_t v32 = [v31 bundleIdentifier];

          uint64_t v33 = v86;
          if (v32)
          {
            uint64_t v34 = [v31 bundleIdentifier];
          }
          else
          {
            char v35 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543874;
              id v94 = v82;
              __int16 v95 = 2114;
              id v96 = v29;
              __int16 v97 = 2114;
              uint64_t v98 = v91;
              _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "[%{public}@] Received request to install %{public}@ remotely but we don't have a companion bundle ID for it. Error: %{public}@", buf, 0x20u);
            }

            uint64_t v34 = 0;
          }
        }
        else
        {
          uint64_t v34 = 0;
          uint64_t v33 = v86;
        }

        [(PurchaseInfo *)v12 setCompanionBundleID:v34];
        uint64_t v36 = [ProgressInfo alloc];
        long long v37 = [v11 bundleID];
        uint64_t v38 = [(PurchaseInfo *)v12 logKey];
        char v39 = sub_10041F328((id *)&v36->super.isa, v37, 0, v38);

        long long v40 = [v11 itemID];
        __int16 v42 = v40;
        if (v39)
        {
          objc_setProperty_atomic(v39, v41, v40, 152);

          *((unsigned char *)v39 + 64) = 1;
        }
        else
        {
        }
        BOOL v43 = sub_100388088();
        sub_100388208((uint64_t)v43, v39, @"Watch");

        long long v44 = [v11 itemID];
        [(PurchaseInfo *)v12 setItemID:v44];

        [(PurchaseInfo *)v12 updateLogKey];
        if (v84)
        {
          [(PurchaseInfo *)v12 setRemoteInstall:1];
          [(PurchaseInfo *)v12 setDevice:v84];
          id v45 = [v11 previousExternalVersionID];
          if (v45)
          {
            [(PurchaseInfo *)v12 setInstalledExternalVersionID:v45];
            BOOL v46 = [v11 previousVariantID];
            [(PurchaseInfo *)v12 setInstalledVariantID:v46];
          }
        }
        [(PurchaseInfo *)v12 setPurchaseType:0];
        __int16 v47 = [v11 redownloadParams];
        long long v85 = v20;
        if (v47)
        {
          BOOL v48 = (void *)v25;
          id v49 = +[AMSBuyParams buyParamsWithString:v47];
        }
        else
        {
          id v50 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v71 = [(PurchaseInfo *)v12 logKey];
            *(_DWORD *)long long buf = 138412290;
            id v94 = v71;
            _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "[%@] Using workaround for missing buy parameters", buf, 0xCu);
          }
          BOOL v48 = (void *)v25;

          id v49 = objc_alloc_init((Class)AMSBuyParams);
          [v49 setParameter:@"C" forKey:@"productType"];
          [v49 setParameter:@"0" forKey:@"price"];
          [v49 setParameter:@"STDRDL" forKey:v33];
          long long v51 = [v11 itemID];
          long long v52 = [v51 stringValue];
          [v49 setParameter:v52 forKey:v76];

          uint64_t v33 = v86;
        }
        [(PurchaseInfo *)v12 setBuyParams:v49];

        uint64_t v53 = [(PurchaseInfo *)v12 buyParams];
        unsigned __int8 v54 = [v53 parameterForKey:v33];
        uint64_t v55 = v33;
        unsigned int v56 = [v54 isEqualToString:@"SWUPD"];

        if (v56)
        {
          id v57 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v58 = [(PurchaseInfo *)v12 logKey];
            *(_DWORD *)long long buf = 138412290;
            id v94 = v58;
            uint64_t v59 = v57;
            long long v60 = "[%@] Using workaround for incorrect pricing parameters";
LABEL_46:
            _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, v60, buf, 0xCu);
          }
        }
        else
        {
          CFStringRef v61 = [(PurchaseInfo *)v12 buyParams];
          BOOL v62 = [v61 parameterForKey:v55];
          unsigned int v63 = [v62 isEqualToString:@"STDOTA"];

          if (!v63) {
            goto LABEL_36;
          }
          id v57 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v58 = [(PurchaseInfo *)v12 logKey];
            *(_DWORD *)long long buf = 138412290;
            id v94 = v58;
            uint64_t v59 = v57;
            long long v60 = "[%@] Using workaround for incorrect content restore pricing parameters";
            goto LABEL_46;
          }
        }

        BOOL v64 = [(PurchaseInfo *)v12 buyParams];
        [v64 setParameter:@"STDRDL" forKey:v86];

LABEL_36:
        int v65 = [v11 externalVersionID];

        if (v65)
        {
          id v66 = [v11 externalVersionID];
          id v67 = [v66 stringValue];
          uint64_t v68 = [(PurchaseInfo *)v12 buyParams];
          CFStringRef v69 = v68;
          if (v68) {
            [v68 setParameter:v67 forKey:v79];
          }
        }
        [(PurchaseInfo *)v12 updateGeneratedProperties];
        buf[0] = 0;
        id v9 = (objc_class *)v81;
        BOOL v70 = sub_10036B6F8(v81, v12, buf, 0);
        if (![v11 skipIfInstalled] || !v70) {
          [v77 addObject:v12];
        }

        objc_super v10 = (char *)v10 + 1;
      }
      while (v83 != v10);
      id v72 = [obj countByEnumeratingWithState:&v87 objects:v92 count:16];
      id v83 = v72;
    }
    while (v72);
  }

  uint64_t v73 = sub_10036BA8C((id *)[v9 alloc], v77, v75);
  return v73;
}

id sub_10036C548(id *a1)
{
  if (a1)
  {
    [a1 lock];
    id v2 = [a1[7] copy];
    [a1 unlock];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_10036CD64(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  uint64_t v15 = sub_1000182D8;
  dispatch_time_t v16 = sub_100017D28;
  id v17 = 0;
  id v3 = [v2 bundleID];
  uint64_t v4 = [v2 itemID];
  id v5 = sub_1003F9AF0((uint64_t)AppInstallPredicates, 0, v3, v4, 0);

  if (v5)
  {
    id v6 = sub_1003E0BA4();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10036D6A4;
    v9[3] = &unk_100527C20;
    id v10 = v5;
    dispatch_semaphore_t v11 = &v12;
    [v6 readUsingSession:v9];
  }
  id v7 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_10036CEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10036CF08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 items];
  id v7 = [v6 firstObject];

  if (!v5)
  {
    uint64_t v12 = [v7 error];
    if (v12)
    {
    }
    else if ([v7 success])
    {
      uint64_t v13 = [*(id *)(a1 + 32) externalID];
      if (v13) {
        [*(id *)(a1 + 56) addObject:v13];
      }
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 48);
      uint64_t v15 = [*(id *)(a1 + 32) itemID];
      dispatch_time_t v16 = [v15 stringValue];
      sub_1003C4044(v14, v16);

      [*(id *)(a1 + 40) completeWithSuccess];
      goto LABEL_16;
    }
    id v17 = [v7 error];
    uint64_t v13 = ASDErrorWithSafeUserInfo();

    if (!v13)
    {
      uint64_t v13 = +[NSError errorWithDomain:ASDErrorDomain code:924 userInfo:0];
    }
    uint64_t v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v23 = [*(id *)(a1 + 32) logKey];
      BOOL v24 = [v7 error];
      int v25 = 138412546;
      id v26 = v23;
      __int16 v27 = 2114;
      id v28 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%@] Redownload purchase failed with error: %{public}@", (uint8_t *)&v25, 0x16u);
    }
    uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 48);
    long long v20 = [*(id *)(a1 + 32) itemID];
    id v21 = [v20 stringValue];
    sub_1003C3DD4(v19, v13, v21, *(void **)(a1 + 48));

    [*(id *)(a1 + 40) completeWithError:v13];
LABEL_16:

    goto LABEL_17;
  }
  id v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    long long v22 = [*(id *)(a1 + 32) logKey];
    int v25 = 138412546;
    id v26 = v22;
    __int16 v27 = 2114;
    id v28 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Redownload request failed with error: %{public}@", (uint8_t *)&v25, 0x16u);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 48);
  id v10 = [*(id *)(a1 + 32) itemID];
  dispatch_semaphore_t v11 = [v10 stringValue];
  sub_1003C3DD4(v9, v5, v11, *(void **)(a1 + 48));

  [*(id *)(a1 + 40) completeWithError:v5];
LABEL_17:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_10036D238(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = [*(id *)(a1 + 32) logKey];
      int v14 = 138412546;
      uint64_t v15 = v13;
      __int16 v16 = 2114;
      id v17 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Redownload purchase failed with error: %{public}@", (uint8_t *)&v14, 0x16u);
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 48);
    uint64_t v9 = [*(id *)(a1 + 32) itemID];
    id v10 = [v9 stringValue];
    sub_1003C3DD4(v8, v6, v10, *(void **)(a1 + 48));
  }
  else
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 48);
    uint64_t v9 = [*(id *)(a1 + 32) itemID];
    id v10 = [v9 stringValue];
    sub_1003C4044(v11, v10);
  }

  uint64_t v12 = [*(id *)(a1 + 32) externalID];
  if (v12) {
    [*(id *)(a1 + 56) addObject:v12];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_10036D3DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = [*(id *)(a1 + 32) itemID];
      uint64_t v8 = [*(id *)(a1 + 32) bundleID];
      int v17 = 138543874;
      uint64_t v18 = v7;
      __int16 v19 = 2114;
      long long v20 = v8;
      __int16 v21 = 2114;
      id v22 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error checking for previously installed app for internal install %{public}@ %{public}@: %{public}@", (uint8_t *)&v17, 0x20u);
    }
    goto LABEL_17;
  }
  id v6 = [a2 firstObject];
  if (![v6 isInstalled]) {
    goto LABEL_17;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v6 hasUnknownDistributor];
  uint64_t v9 = [*(id *)(a1 + 32) buyParams];
  id v10 = [v9 parameterForKey:AMSBuyParamPropertyAppExtVrsId];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v10 longLongValue]);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_11:
      uint64_t v12 = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      goto LABEL_12;
    }
    id v11 = v10;
  }
  uint64_t v12 = v11;
  if (!v11) {
    goto LABEL_11;
  }
  id v13 = [v6 storeExternalVersionID];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v13 == [v12 unsignedLongLongValue];
LABEL_12:
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    int v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [*(id *)(a1 + 32) itemID];
      __int16 v16 = [*(id *)(a1 + 32) bundleID];
      int v17 = 138543618;
      uint64_t v18 = v15;
      __int16 v19 = 2114;
      long long v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Internal install requested for %{public}@ %{public}@ but it is already installed.", (uint8_t *)&v17, 0x16u);
    }
  }

LABEL_17:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10036D6A4(uint64_t a1, void *a2)
{
  id v3 = [a2 connection];
  sub_1002FF3DC((uint64_t)AppInstallEntity, v3, *(void **)(a1 + 32));
  id v7 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v4 = sub_10026E9D4(v7, @"external_id");
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

id sub_10036DD18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  uint64_t v7 = self;
  uint64_t v8 = objc_msgSend(v6, "ams_DSID");

  id v9 = sub_10036DDA0(v7, (uint64_t)[v8 unsignedLongLongValue], a3, a4);
  return v9;
}

id sub_10036DDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0;
  __int16 v21 = &v20;
  uint64_t v22 = 0x3032000000;
  id v23 = sub_1000182E8;
  BOOL v24 = sub_100017D30;
  id v25 = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  id v13 = sub_10036DEF4;
  int v14 = &unk_100529E90;
  uint64_t v17 = a4;
  uint64_t v18 = a2;
  uint64_t v15 = &v20;
  uint64_t v16 = self;
  uint64_t v19 = a3;
  id v6 = v12;
  uint64_t v7 = +[AMSKeybag sharedInstance];
  id v8 = [v7 fairplayContextWithError:a4];

  sub_10013B9C8();
  if (!v9) {
    v13(v6, (uint64_t)v8);
  }

  id v10 = (id)v21[5];
  _Block_object_dispose(&v20, 8);

  return v10;
}

void sub_10036DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10036DEF4(void *a1, uint64_t a2)
{
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  uint64_t v4 = (void *)a1[6];
  self;
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  sub_1001A9C5C(0, 0, (uint64_t)&v19);
  if ((v19 - 1) >= 0x14)
  {
    if (v4)
    {
      *uint64_t v4 = +[NSError errorWithDomain:@"FairPlayErrorDomain" code:v5 userInfo:0];
    }
    goto LABEL_12;
  }
  long long v17 = v19;
  uint64_t v18 = v20;
  *(void *)&long long v19 = 0;
  unsigned int v16 = 0;
  sub_1001F1914(a2, a1[7], (uint64_t)&v17, 52428801, 0, (uint64_t)&v19, (uint64_t)&v16);
  int v7 = v6;
  if (v6 == -42052)
  {
    if (v16)
    {
      id v11 = [objc_alloc((Class)NSData) initWithBytesNoCopy:(void)v19 length:v16 deallocator:&stru_100529EB0];
      uint64_t v12 = *(void *)(a1[4] + 8);
      id v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }
    int v14 = (unsigned char *)a1[8];
    if (v14) {
      *int v14 = 1;
    }
  }
  else if (!v6)
  {
    id v8 = [objc_alloc((Class)NSData) initWithBytesNoCopy:(void)v19 length:v16 deallocator:&stru_100529EB0];
    uint64_t v9 = *(void *)(a1[4] + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    goto LABEL_12;
  }
  if (!*(void *)(*(void *)(a1[4] + 8) + 40))
  {
    uint64_t v15 = +[NSError errorWithDomain:@"FairPlayErrorDomain" code:v7 userInfo:0];
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v15 = 0;
LABEL_13:
  if (!*(void *)(*(void *)(a1[4] + 8) + 40) && a1[6]) {
    *(void *)a1[6] = v15;
  }
}

uint64_t sub_10036E10C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2 && [v2 length])
  {
    id v3 = v2;
    self;
    id v4 = v3;
    [v4 fileSystemRepresentation];

    sub_10014C990();
    int v6 = v5;
    self;
    uint64_t v7 = 2 * ((v6 + 42595) < 0xFFFFFFFE);
    if ((v6 + 42587) > 3 || v6 == -42586) {
      uint64_t v7 = v7 | 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_10036E1D8(id a1, void *a2, unint64_t a3)
{
}

id *sub_10036E1E0(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v4 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v2 count]);
  +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v2 count]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10036E338;
  v9[3] = &unk_100529ED8;
  id v11 = v4;
  uint64_t v12 = v3;
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = v4;
  id v6 = v10;
  [v2 enumerateObjectsUsingBlock:v9];

  uint64_t v7 = sub_10036E610((id *)[InstallSystemAppsTask alloc], v5, v6);
  *((unsigned char *)v7 + 40) = 1;
  *((unsigned char *)v7 + 64) = 1;

  return v7;
}

void sub_10036E338(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = sub_1002B17C4(v3);
  if (v4) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  if (v3)
  {
    id v5 = v3[9];
    if (v5)
    {
      id v6 = v5;
      id v7 = v3[9];
      id v8 = [v7 length];

      if (v8)
      {
        uint64_t v9 = [ApplicationProxy alloc];
        id v10 = v3[9];
        id v11 = [(ApplicationProxy *)v9 initWithBundleID:v10];

        if (v11 && [v11 isInstalled])
        {
          uint64_t v12 = ASDLogHandleForCategory();
          if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
LABEL_17:

            goto LABEL_20;
          }
          id v13 = objc_opt_class();
          int v14 = v13;
          id v15 = v3[9];
          int v21 = 138543618;
          uint64_t v22 = v13;
          __int16 v23 = 2114;
          id v24 = v15;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Skipping remote installation request for app that is already installed", (uint8_t *)&v21, 0x16u);
        }
        else
        {
          id v16 = objc_alloc((Class)ASDSystemAppMetadata);
          id v17 = v3[9];
          uint64_t v12 = [v16 initWithBundleID:v17];

          uint64_t v18 = sub_1004248D8([AppInstall alloc], v12);
          int v14 = v18;
          if (v18)
          {
            if (v4) {
              [v18 setValue:v4 forProperty:@"external_id"];
            }
            long long v19 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v20 = sub_100424C14(v14);
              int v21 = 138412290;
              uint64_t v22 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%@] Received remote installation request", (uint8_t *)&v21, 0xCu);
            }
            [*(id *)(a1 + 40) addObject:v14];
          }
        }

        goto LABEL_17;
      }
    }
  }
  id v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v21) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Dropping request for system app with no bundleID", (uint8_t *)&v21, 2u);
  }
LABEL_20:
}

id *sub_10036E610(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)InstallSystemAppsTask;
    a1 = (id *)objc_msgSendSuper2(&v13, "init");
    if (a1)
    {
      id v7 = [v5 copy];
      id v8 = a1[6];
      a1[6] = v7;

      id v9 = [v6 copy];
      id v10 = v9;
      if (v9) {
        id v11 = v9;
      }
      else {
        id v11 = &__NSArray0__struct;
      }
      objc_storeStrong(a1 + 9, v11);
    }
  }

  return a1;
}

id *sub_10036E6D4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = sub_1003923F8(v2, &stru_100529F18);

  id v4 = sub_10036E610((id *)[InstallSystemAppsTask alloc], v3, 0);
  return v4;
}

id sub_10036E754(id a1, ASDSystemAppMetadata *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_1004248D8([AppInstall alloc], v2);

  if (v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = sub_100424C14(v3);
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Received local installation request", (uint8_t *)&v7, 0xCu);
    }
  }
  return v3;
}

id sub_10036E854(id *a1)
{
  if (a1)
  {
    [a1 lock];
    id v2 = [a1[9] copy];
    [a1 unlock];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_10036ED34(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v25[1] = 0;
  id v6 = sub_1003C0068(v5);
  id v7 = 0;
  v25[0] = v7;
  id v8 = sub_1003BFC54(v6, v25);
  id v9 = v25[0];

  if (v8)
  {
    id v10 = [v8 uniqueIdentifier];
    [v5 setValue:v10 forProperty:@"coordinator_id"];

    id v24 = v9;
    id v11 = sub_10032B5F0(v5, 0, &v24);
    id v12 = v24;

    id v23 = v12;
    objc_super v13 = sub_10032A12C(v11, (uint64_t)&v23);
    id v9 = v23;

    if (v13)
    {
      id v22 = v9;
      unsigned __int8 v14 = sub_10027A504(v8, v13, &v22);
      id v15 = v22;

      if (v14)
      {
        if (*(unsigned char *)(*(void *)(a1 + 40) + 40)) {
          [v5 setValue:&off_10054CB40 forProperty:@"auto_install_override"];
        }
      }
      else
      {
        uint64_t v18 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          int v21 = sub_100424C14(v5);
          *(_DWORD *)long long buf = 138412546;
          __int16 v27 = v21;
          __int16 v28 = 2114;
          id v29 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%@] Failed to set placeholder error: %{public}@", buf, 0x16u);
        }
        [v8 cancelForReason:v15 client:1 error:0];
        [*(id *)(a1 + 32) addIndex:a3];
      }
      id v9 = v15;
    }
    else
    {
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = sub_100424C14(v5);
        *(_DWORD *)long long buf = 138412546;
        __int16 v27 = v20;
        __int16 v28 = 2114;
        id v29 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[%@] Failed to create placeholder error: %{public}@", buf, 0x16u);
      }
      [v8 cancelForReason:v9 client:1 error:0];
      [*(id *)(a1 + 32) addIndex:a3];
    }
  }
  else
  {
    id v16 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v19 = sub_100424C14(v5);
      *(_DWORD *)long long buf = 138412546;
      __int16 v27 = v19;
      __int16 v28 = 2114;
      id v29 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[%@] Failed to create coordinator error: %{public}@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) addIndex:a3];
  }
}

id sub_10036F0B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = 0;
  if (a1 && v3)
  {
    id v6 = *(void **)(a1 + 56);
    if (!v6)
    {
      id v7 = sub_10030B11C();
      id v23 = 0;
      uint64_t v8 = sub_10030B75C((uint64_t)v7, @"hideableSystemApps", &v23);
      id v9 = v23;
      id v10 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v8;

      if (!*(void *)(a1 + 56))
      {
        id v16 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543362;
          id v26 = v9;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to find system app mapping: %{public}@", buf, 0xCu);
        }
        id v5 = 0;
LABEL_20:

LABEL_21:
        goto LABEL_22;
      }

      id v6 = *(void **)(a1 + 56);
    }
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    sub_1003B63BC(v6);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v11 = [v9 countByEnumeratingWithState:&v19 objects:v24 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v20;
      while (2)
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v20 != v13) {
            objc_enumerationMutation(v9);
          }
          id v15 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          id v16 = sub_1002689B4(v15, @"bundle-id");
          id v17 = sub_1002689B4(v15, @"id");
          if (v16 && (objc_msgSend(v4, "isEqualToString:", v16, (void)v19) & 1) != 0)
          {
            id v5 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v17 longLongValue]);

            goto LABEL_20;
          }
        }
        id v12 = [v9 countByEnumeratingWithState:&v19 objects:v24 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }
    id v5 = 0;
    goto LABEL_21;
  }
LABEL_22:

  return v5;
}

uint64_t sub_10036F338(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = +[NSOrderedSet orderedSetWithArray:v2];
  id v5 = sub_10023845C(v3, v4);
  if (v3) {
    id Property = objc_getProperty(v3, v6, 24, 1);
  }
  else {
    id Property = 0;
  }
  uint64_t v8 = Property;

  if (v8) {
    v8[16] |= 0x40uLL;
  }

  return 1;
}

id sub_10036F3E0(id a1, AppInstall *a2)
{
  uint64_t v2 = [(SQLiteMemoryEntity *)a2 valueForProperty:@"external_id"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:v2];
  }
  else {
    id v3 = v2;
  }
  id v4 = v3;

  return v4;
}

void sub_10036F468(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToLongLong:1];
  v14[0] = v4;
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" value:&off_10054CB58 comparisonType:6];
  v14[1] = v5;
  id v6 = +[NSArray arrayWithObjects:v14 count:2];
  id v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

  uint64_t v8 = [v3 connection];

  id v9 = sub_1002FF548((uint64_t)AppInstallEntity, v8, v7);

  CFStringRef v13 = @"bundle_id";
  id v10 = +[NSArray arrayWithObjects:&v13 count:1];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10036F644;
  v11[3] = &unk_100527420;
  id v12 = *(id *)(a1 + 32);
  [v9 enumeratePersistentIDsAndProperties:v10 usingBlock:v11];
}

void sub_10036F644(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 objectForKeyedSubscript:@"bundle_id"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [*(id *)(a1 + 32) addObject:v4];
  }
}

void *sub_10036F6C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10026E95C(v3, @"bundle_id");
  if (v4)
  {
    if ([*(id *)(a1 + 32) containsObject:v4])
    {
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v6 = sub_100424C14(v3);
        int v11 = 138412290;
        id v12 = v6;
        id v7 = "[%@] Active installation already in progress";
LABEL_11:
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v11, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = sub_10036F0B4(*(void *)(a1 + 40), v4);

      if (v8)
      {
        id v9 = v3;
        goto LABEL_13;
      }
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v6 = sub_100424C14(v3);
        int v11 = 138412290;
        id v12 = v6;
        id v7 = "[%@] Unable to install system app with no item ID mapping";
        goto LABEL_11;
      }
    }
  }
  else
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = sub_100424C14(v3);
      int v11 = 138412290;
      id v12 = v6;
      id v7 = "[%@] Unable to install system app with missing identifier";
      goto LABEL_11;
    }
  }

  id v9 = 0;
LABEL_13:

  return v9;
}

id *sub_10036FEA8(id *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    id v3 = +[NSURL fileURLWithPath:a2];
    id v4 = v3;
    v35.receiver = v2;
    v35.super_class = (Class)RequestThrottlePersistence;
    id v5 = (id *)objc_msgSendSuper2(&v35, "init");
    uint64_t v2 = v5;
    if (v5)
    {
      *((_DWORD *)v5 + 2) = 0;
      objc_storeStrong(v5 + 2, v3);
      id v6 = objc_alloc_init((Class)NSMutableDictionary);
      id v7 = v2[3];
      void v2[3] = v6;

      id v8 = v2[2];
      id v40 = 0;
      id v9 = v8;
      self;
      id v10 = +[NSData dataWithContentsOfURL:v9 options:0 error:&v40];

      if (v10)
      {
        uint64_t v11 = objc_opt_class();
        id v12 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v11, objc_opt_class(), 0);
        CFStringRef v13 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v12 fromData:v10 error:&v40];
      }
      else
      {
        CFStringRef v13 = 0;
      }

      id v14 = v40;
      id v15 = v14;
      if (v13)
      {
        id v34 = v14;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        id v16 = v13;
        id v17 = [v16 countByEnumeratingWithState:&v36 objects:v45 count:16];
        if (v17)
        {
          id v19 = v17;
          uint64_t v20 = *(void *)v37;
          do
          {
            long long v21 = 0;
            do
            {
              if (*(void *)v37 != v20) {
                objc_enumerationMutation(v16);
              }
              long long v22 = *(void **)(*((void *)&v36 + 1) + 8 * (void)v21);
              if (v22) {
                id Property = objc_getProperty(*(id *)(*((void *)&v36 + 1) + 8 * (void)v21), v18, 24, 1);
              }
              else {
                id Property = 0;
              }
              id v24 = Property;

              if (v24)
              {
                id v25 = v2[3];
                if (v22) {
                  id v26 = objc_getProperty(v22, v18, 24, 1);
                }
                else {
                  id v26 = 0;
                }
                id v27 = v26;
                [v25 setObject:v22 forKeyedSubscript:v27];
              }
              long long v21 = (char *)v21 + 1;
            }
            while (v19 != v21);
            id v28 = [v16 countByEnumeratingWithState:&v36 objects:v45 count:16];
            id v19 = v28;
          }
          while (v28);
        }

        id v29 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          id v30 = [v2[3] count];
          id v31 = v2[2];
          *(_DWORD *)long long buf = 134218242;
          id v42 = v30;
          __int16 v43 = 2114;
          id v44 = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Throttle: Read %lu records from: %{public}@", buf, 0x16u);
        }
        id v15 = v34;
      }
      else
      {
        id v29 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          id v33 = v2[2];
          *(_DWORD *)id v45 = 138543618;
          id v46 = v33;
          __int16 v47 = 2114;
          BOOL v48 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Throttle: Reading from: %{public}@ failed: %{public}@", v45, 0x16u);
        }
      }
    }
  }
  return v2;
}

void sub_100370238(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    self = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    id Property = self;
    if (self) {
      id Property = objc_getProperty(self, v4, 24, 1);
    }
    id v6 = Property;

    if (v6)
    {
      id v8 = *(void **)(a1 + 24);
      id v9 = self;
      if (self) {
        id v9 = objc_getProperty(self, v7, 24, 1);
      }
      id v10 = v9;
      [v8 setObject:self forKeyedSubscript:v10];

      sub_1003702FC(a1);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    id v3 = self;
  }
}

void sub_1003702FC(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if (!*(void *)(a1 + 32))
    {
      uint64_t v2 = dispatch_get_global_queue(21, 0);
      dispatch_source_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v2);
      id v4 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v3;

      id v5 = *(NSObject **)(a1 + 32);
      dispatch_time_t v6 = dispatch_time(0xFFFFFFFFFFFFFFFELL, 120000000000);
      dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0x37E11D600uLL);
      objc_initWeak(&location, (id)a1);
      id v7 = *(NSObject **)(a1 + 32);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      void v8[2] = sub_1003708EC;
      v8[3] = &unk_100525760;
      objc_copyWeak(&v9, &location);
      dispatch_source_set_event_handler(v7, v8);
      dispatch_resume(*(dispatch_object_t *)(a1 + 32));
      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);
    }
  }
}

uint64_t sub_10037043C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (v3
      && ([*(id *)(a1 + 24) objectForKeyedSubscript:v3],
          id v5 = objc_claimAutoreleasedReturnValue(),
          v5,
          v5))
    {
      [*(id *)(a1 + 24) setObject:0 forKeyedSubscript:v3];
      sub_1003702FC(a1);
      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
    os_unfair_lock_unlock(v4);
  }

  return a1;
}

void sub_1003704D0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    [*(id *)(a1 + 24) removeAllObjects];
    sub_100370528(a1);
    os_unfair_lock_unlock(v2);
  }
}

void sub_100370528(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    uint64_t v2 = *(void **)(a1 + 16);
    id v11 = 0;
    id v3 = v2;
    self;
    id v4 = +[NSFileManager defaultManager];
    unsigned int v5 = [v4 removeItemAtURL:v3 error:&v11];

    id v6 = v11;
    id v7 = ASDLogHandleForCategory();
    id v8 = v7;
    if (v5)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Throttle: Deleted all records at: %{public}@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 16);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v13 = v10;
      __int16 v14 = 2114;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Throtle: Deleting records at: %{public}@ failed: %{public}@", buf, 0x16u);
    }
  }
}

id *sub_1003706A0(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (os_unfair_lock_s *)(a1 + 1);
    os_unfair_lock_lock_with_options();
    if (v3)
    {
      a1 = [a1[3] objectForKeyedSubscript:v3];
    }
    else
    {
      a1 = 0;
    }
    os_unfair_lock_unlock(v4);
  }

  return a1;
}

void sub_100370724(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    id v4 = [*(id *)(a1 + 24) allValues];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100370864;
    v7[3] = &unk_100529FB0;
    id v8 = v3;
    unsigned int v5 = [v4 indexesOfObjectsPassingTest:v7];
    [*(id *)(a1 + 24) removeAllObjects];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100370874;
    v6[3] = &unk_100529FD8;
    void v6[4] = a1;
    [v4 enumerateObjectsAtIndexes:v5 options:0 usingBlock:v6];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

uint64_t sub_100370864(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100370874(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  id Property = a2;
  unsigned int v5 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v4, 24, 1);
  }
  id v6 = Property;
  [v2 setObject:v5 forKeyedSubscript:v6];
}

void sub_1003708EC(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained + 2;
    id v17 = (id *)WeakRetained;
    os_unfair_lock_lock(WeakRetained + 2);
    os_unfair_lock_assert_owner(v2);
    id v3 = [v17[3] allValues];
    id v4 = v17[2];
    id v18 = 0;
    id v5 = v4;
    id v6 = v3;
    self;
    id v7 = +[NSKeyedArchiver archivedDataWithRootObject:v6 requiringSecureCoding:1 error:&v18];

    if (v7) {
      unsigned int v8 = [v7 writeToURL:v5 options:1 error:&v18];
    }
    else {
      unsigned int v8 = 0;
    }

    id v9 = v18;
    uint64_t v10 = ASDLogHandleForCategory();
    id v11 = v10;
    if (v8)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = [v17[3] count];
        id v13 = v17[2];
        *(_DWORD *)long long buf = 134218242;
        id v20 = v12;
        __int16 v21 = 2114;
        id v22 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Throttle: Wrote %lu records to: %{public}@", buf, 0x16u);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v15 = [v17[3] count];
      id v16 = v17[2];
      *(_DWORD *)long long buf = 134218498;
      id v20 = v15;
      __int16 v21 = 2114;
      id v22 = v16;
      __int16 v23 = 2114;
      id v24 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Throttle: Writing %lu records to: %{public}@ failed: %{public}@", buf, 0x20u);
    }

    id v14 = v17[4];
    void v17[4] = 0;

    os_unfair_lock_unlock(v2);
    id WeakRetained = (os_unfair_lock_s *)v17;
  }
}

void sub_100370C58(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B1030;
  qword_1005B1030 = (uint64_t)v1;
}

void sub_100370F00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(void **)(a1 + 24);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100370FF0;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v8;
    id v13 = v7;
    id v14 = v9;
    sub_100010948(v10, v11);
  }
}

void sub_100370FF0(uint64_t a1)
{
  uint64_t v37 = 0;
  long long v38 = &v37;
  uint64_t v39 = 0x3032000000;
  id v40 = sub_1000182F8;
  long long v41 = sub_100017D38;
  id v42 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x3032000000;
  id v34 = sub_1000182F8;
  objc_super v35 = sub_100017D38;
  id v36 = 0;
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  if (v2)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (id)objc_opt_class();
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
      id v7 = [v2 hashedDescription];
      *(_DWORD *)long long buf = 138413058;
      id v44 = v4;
      __int16 v45 = 2114;
      uint64_t v46 = v5;
      __int16 v47 = 2112;
      id v48 = v6;
      __int16 v49 = 2114;
      id v50 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Get IAPs: %@ for account: %{public}@", buf, 0x2Au);
    }
    id v8 = *(void **)(*(void *)(a1 + 32) + 16);
    __int16 v23 = _NSConcreteStackBlock;
    uint64_t v24 = 3221225472;
    id v25 = sub_1003714F4;
    id v26 = &unk_10052A028;
    id v29 = &v31;
    id v27 = *(id *)(a1 + 48);
    id v9 = v2;
    id v28 = v9;
    id v30 = &v37;
    [v8 readUsingSession:&v23];
    if (v32[5])
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = (id)objc_opt_class();
        uint64_t v12 = *(void *)(a1 + 40);
        id v13 = objc_msgSend((id)v32[5], "count", v23, v24, v25, v26, v27);
        id v14 = [v9 hashedDescription];
        *(_DWORD *)long long buf = 138413058;
        id v44 = v11;
        __int16 v45 = 2114;
        uint64_t v46 = v12;
        __int16 v47 = 2048;
        id v48 = v13;
        __int16 v49 = 2112;
        id v50 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Got %li IAPs for account: %@", buf, 0x2Au);
      }
    }
    else
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v19 = objc_opt_class();
        uint64_t v20 = *(void *)(a1 + 40);
        __int16 v21 = (void *)v38[5];
        *(_DWORD *)long long buf = 138412802;
        id v44 = v19;
        __int16 v45 = 2114;
        uint64_t v46 = v20;
        __int16 v47 = 2114;
        id v48 = v21;
        id v22 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to get IAPs with error: %{public}@", buf, 0x20u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v15 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = (id)objc_opt_class();
      uint64_t v17 = *(void *)(a1 + 40);
      id v18 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
      *(_DWORD *)long long buf = 138413058;
      id v44 = v16;
      __int16 v45 = 2114;
      uint64_t v46 = v17;
      __int16 v47 = 2114;
      id v48 = v18;
      __int16 v49 = 2114;
      id v50 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to get IAPs: %{public}@ with no active account DSID error: %{public}@", buf, 0x2Au);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }

  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v37, 8);
}

void sub_1003714A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1003714F4(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v6 = objc_msgSend(v4, "ams_DSID");
  uint64_t v7 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v7 + 40);
  uint64_t v8 = sub_10032C848(v5, v3, v6);

  objc_storeStrong((id *)(v7 + 40), obj);
  uint64_t v9 = *(void *)(a1[6] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_10037159C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(void **)(a1 + 24);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10037168C;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v8;
    id v13 = v7;
    id v14 = v9;
    sub_100010948(v10, v11);
  }
}

void sub_10037168C(uint64_t a1)
{
  uint64_t v37 = 0;
  long long v38 = &v37;
  uint64_t v39 = 0x3032000000;
  id v40 = sub_1000182F8;
  long long v41 = sub_100017D38;
  id v42 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x3032000000;
  id v34 = sub_1000182F8;
  objc_super v35 = sub_100017D38;
  id v36 = 0;
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  if (v2)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (id)objc_opt_class();
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
      id v7 = [v2 hashedDescription];
      *(_DWORD *)long long buf = 138413058;
      id v44 = v4;
      __int16 v45 = 2114;
      uint64_t v46 = v5;
      __int16 v47 = 2112;
      id v48 = v6;
      __int16 v49 = 2114;
      id v50 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Get IAPs for app adam IDs: %@ for account: %{public}@", buf, 0x2Au);
    }
    id v8 = *(void **)(*(void *)(a1 + 32) + 16);
    __int16 v23 = _NSConcreteStackBlock;
    uint64_t v24 = 3221225472;
    id v25 = sub_100371B90;
    id v26 = &unk_10052A028;
    id v29 = &v31;
    id v27 = *(id *)(a1 + 48);
    id v9 = v2;
    id v28 = v9;
    id v30 = &v37;
    [v8 readUsingSession:&v23];
    if (v32[5])
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = (id)objc_opt_class();
        uint64_t v12 = *(void *)(a1 + 40);
        id v13 = objc_msgSend((id)v32[5], "count", v23, v24, v25, v26, v27);
        id v14 = [v9 hashedDescription];
        *(_DWORD *)long long buf = 138413058;
        id v44 = v11;
        __int16 v45 = 2114;
        uint64_t v46 = v12;
        __int16 v47 = 2048;
        id v48 = v13;
        __int16 v49 = 2112;
        id v50 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Got %li IAPs for account: %@", buf, 0x2Au);
      }
    }
    else
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v19 = objc_opt_class();
        uint64_t v20 = *(void *)(a1 + 40);
        __int16 v21 = (void *)v38[5];
        *(_DWORD *)long long buf = 138412802;
        id v44 = v19;
        __int16 v45 = 2114;
        uint64_t v46 = v20;
        __int16 v47 = 2114;
        id v48 = v21;
        id v22 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to get IAPs with error: %{public}@", buf, 0x20u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v15 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = (id)objc_opt_class();
      uint64_t v17 = *(void *)(a1 + 40);
      id v18 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
      *(_DWORD *)long long buf = 138413058;
      id v44 = v16;
      __int16 v45 = 2114;
      uint64_t v46 = v17;
      __int16 v47 = 2114;
      id v48 = v18;
      __int16 v49 = 2114;
      id v50 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to get IAPs for app adam IDs: %{public}@ with no active account DSID error: %{public}@", buf, 0x2Au);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }

  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v37, 8);
}

void sub_100371B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100371B90(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v6 = objc_msgSend(v4, "ams_DSID");
  uint64_t v7 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v7 + 40);
  uint64_t v8 = sub_10032C9B4(v5, v3, v6);

  objc_storeStrong((id *)(v7 + 40), obj);
  uint64_t v9 = *(void *)(a1[6] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_100371C38(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = a2;
  id v5 = objc_msgSend(v3, "ams_DSID");
  uint64_t v6 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = sub_10032C5FC(v4, v5);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(a1[5] + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_100371CDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100371DA4;
    v8[3] = &unk_1005221F0;
    void v8[4] = a1;
    id v9 = v5;
    id v10 = v6;
    sub_100010948(v7, v8);
  }
}

void sub_100371DA4(uint64_t a1)
{
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x3032000000;
  v27[3] = sub_1000182F8;
  v27[4] = sub_100017D38;
  id v28 = 0;
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  id v3 = v2;
  if (v2)
  {
    *(void *)objc_super v35 = 0;
    *(void *)&v35[8] = v35;
    *(void *)&v35[16] = 0x3032000000;
    id v36 = sub_1000182F8;
    uint64_t v37 = sub_100017D38;
    id v38 = 0;
    id v4 = *(void **)(*(void *)(a1 + 32) + 16);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1003721D8;
    v23[3] = &unk_10052A000;
    id v25 = v35;
    id v24 = v2;
    id v26 = v27;
    [v4 readUsingSession:v23];
    if (!*(void *)(*(void *)&v35[8] + 40)) {
      goto LABEL_6;
    }
    id v5 = +[NSDate date];
    [v5 timeIntervalSinceDate:*(void *)(*(void *)&v35[8] + 40)];
    double v7 = v6;
    self;
    uint64_t v8 = sub_10030B11C();
    double v9 = sub_10030BC30((uint64_t)v8, @"iap-daap/forced-refresh-frequency-minutes", 10080.0);

    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v30 = v11;
      __int16 v31 = 2048;
      double v32 = v9;
      id v12 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[%{public}@]: Force refresh interval: %.0f", buf, 0x16u);
    }
    if (v7 <= v9 * 60.0)
    {
      uint64_t v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = (id)objc_opt_class();
        double v16 = *(double *)(a1 + 40);
        uint64_t v17 = *(void **)(*(void *)&v35[8] + 40);
        if (v17)
        {
          [v17 timeIntervalSince1970];
          uint64_t v19 = (uint64_t)v18;
        }
        else
        {
          uint64_t v19 = 0;
        }
        *(_DWORD *)long long buf = 138412802;
        id v30 = v15;
        __int16 v31 = 2114;
        double v32 = v16;
        __int16 v33 = 2048;
        uint64_t v34 = v19;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[%@]: %{public}@ Update not needed. Last updated: %{time_t}ld", buf, 0x20u);
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
LABEL_6:
      sub_10037227C(*(void *)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
    }

    _Block_object_dispose(v35, 8);
  }
  else
  {
    uint64_t v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = objc_opt_class();
      uint64_t v21 = *(void *)(a1 + 40);
      *(_DWORD *)objc_super v35 = 138412546;
      *(void *)&void v35[4] = v20;
      *(_WORD *)&v35[12] = 2114;
      *(void *)&v35[14] = v21;
      id v22 = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to update IAPs - no active account DSID", v35, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }

  _Block_object_dispose(v27, 8);
}

void sub_100372194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose((const void *)(v9 - 128), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003721D8(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = a2;
  id v5 = objc_msgSend(v3, "ams_DSID");
  uint64_t v6 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = sub_10032CB20((uint64_t)v4, v5);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(a1[5] + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_10037227C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = +[ActiveAccountObserver activeAccount];
    uint64_t v8 = v7;
    if (v7 && (objc_msgSend(v7, "ams_DSID"), uint64_t v9 = objc_claimAutoreleasedReturnValue(), v9, v9))
    {
      id v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = objc_opt_class();
        id v12 = v11;
        uint64_t v13 = [v8 hashedDescription];
        int v16 = 138412802;
        id v17 = v11;
        __int16 v18 = 2114;
        id v19 = v5;
        __int16 v20 = 2114;
        uint64_t v21 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[%@]: %{public}@ Starting update for account: %{public}@", (uint8_t *)&v16, 0x20u);
      }
      sub_100372ABC(a1, v8, v5, v6);
    }
    else
    {
      uint64_t v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = 138412546;
        id v17 = (id)objc_opt_class();
        __int16 v18 = 2114;
        id v19 = v5;
        id v15 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Ignoring update request - there is no active account DSID", (uint8_t *)&v16, 0x16u);
      }
      (*((void (**)(id, void))v6 + 2))(v6, 0);
    }
  }
}

void sub_100372548(uint64_t a1)
{
}

void sub_1003725F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100416894((uint64_t)XPCRequestToken, 1);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  sub_10037227C(v2, v3, *(void **)(a1 + 40));
}

void sub_100372658(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = objc_msgSend(v3, "ams_DSID");
  uint64_t v6 = sub_10032C5FC(v4, v5);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  objc_msgSend(*(id *)(a1 + 32), "ams_DSID");
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = sub_10032CD78((uint64_t)v4, v12);

  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_100372724(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v3, "ams_DSID");
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = sub_10032CD78((uint64_t)v4, v8);

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100372828(uint64_t a1)
{
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  if (v2)
  {
    id v3 = sub_100416894((uint64_t)XPCRequestToken, 1);
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = objc_opt_class();
      id v6 = v5;
      uint64_t v7 = [v2 hashedDescription];
      *(_DWORD *)long long buf = 138412802;
      uint64_t v13 = v5;
      __int16 v14 = 2114;
      id v15 = v3;
      __int16 v16 = 2114;
      id v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Refreshing IAPs after account change for: %{public}@", buf, 0x20u);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1003729CC;
    void v10[3] = &unk_100521620;
    void v10[4] = v8;
    id v11 = v3;
    id v9 = v3;
    sub_1000106BC(v8, v9, v10);
  }
}

void sub_1003729CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = objc_opt_class();
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138412802;
      id v9 = v5;
      __int16 v10 = 2114;
      uint64_t v11 = v6;
      __int16 v12 = 2114;
      id v13 = v3;
      id v7 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to refresh after active account changed error: %{public}@", (uint8_t *)&v8, 0x20u);
    }
  }
}

void sub_100372ABC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v27 = 0;
  id v10 = v7;
  id v11 = v8;
  uint64_t v32 = 0;
  __int16 v33 = &v32;
  uint64_t v34 = 0x3032000000;
  objc_super v35 = sub_1000182F8;
  id v36 = sub_100017D38;
  id v37 = 0;
  __int16 v12 = *(void **)(a1 + 16);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  void v28[2] = sub_100372724;
  void v28[3] = &unk_10052A078;
  id v30 = &v32;
  id v13 = v10;
  id v29 = v13;
  __int16 v31 = &v27;
  [v12 readUsingSession:v28];
  __int16 v14 = sub_100423A14((uint64_t)IAPInfoUpdateRequestContext, (void *)v33[5], v13, v11);

  _Block_object_dispose(&v32, 8);
  id v15 = v27;
  if (v14)
  {
    *(unsigned char *)(a1 + 32) = 1;
    __int16 v16 = +[KeepAlive keepAliveWithName:@"com.apple.appstoredaemon.IAPInfoManager.update"];
    id v17 = sub_10032FF40((id *)[IAPInfoUpdateRequest alloc], *(void **)(a1 + 8), v14);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100373258;
    v19[3] = &unk_10052A0C8;
    id v20 = v15;
    uint64_t v21 = v14;
    uint64_t v22 = a1;
    id v23 = v13;
    id v24 = v11;
    id v25 = v16;
    id v26 = v9;
    id v18 = v16;
    sub_10032FFDC((uint64_t)v17, v19);
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    (*((void (**)(id, id))v9 + 2))(v9, v15);
  }
}

void sub_100372D5C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100372D74(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = a2;
  uint64_t v5 = objc_msgSend(v3, "ams_DSID");
  uint64_t v6 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = sub_10032CB20((uint64_t)v4, v5);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(a1[5] + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_100372E18(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = (void *)a1[4];
    id v7 = a2;
    uint64_t v8 = v7;
    if (v6)
    {
      uint64_t v38 = 0;
      uint64_t v39 = &v38;
      uint64_t v40 = 0x2020000000;
      char v41 = 1;
      uint64_t v32 = 0;
      __int16 v33 = &v32;
      uint64_t v34 = 0x3032000000;
      objc_super v35 = sub_1000182F8;
      id v36 = sub_100017D38;
      id v37 = 0;
      id v9 = (void *)v6[2];
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1003739A4;
      __int16 v43 = &unk_10052A0F0;
      *(void *)&long long v44 = v7;
      *((void *)&v44 + 1) = &v38;
      __int16 v45 = &v32;
      [v9 modifyUsingTransaction:buf];
      if (*((unsigned char *)v39 + 24) && (notify_post("com.apple.appstored.IAPInfoDatabaseUpdated"), *((unsigned char *)v39 + 24)))
      {
        uint64_t v6 = 0;
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v6 = (id) v33[5];
        BOOL v10 = *((unsigned char *)v39 + 24) != 0;
      }

      _Block_object_dispose(&v32, 8);
      _Block_object_dispose(&v38, 8);
    }
    else
    {
      BOOL v10 = 0;
    }

    id v11 = v6;
    __int16 v12 = ASDLogHandleForCategory();
    id v13 = v12;
    if (v10)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        __int16 v14 = objc_opt_class();
        uint64_t v16 = a1[5];
        id v15 = (void *)a1[6];
        id v17 = v14;
        id v18 = [v15 hashedDescription];
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v14;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v16;
        *(_WORD *)&unsigned char buf[22] = 2114;
        __int16 v43 = v18;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[%@]: %{public}@ Completed update for account: %{public}@", buf, 0x20u);
      }
      (*(void (**)(void))(a1[8] + 16))();
    }
    else
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v27 = objc_opt_class();
        uint64_t v29 = a1[5];
        id v28 = (void *)a1[6];
        id v30 = v27;
        __int16 v31 = [v28 hashedDescription];
        *(_DWORD *)long long buf = 138413058;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v29;
        *(_WORD *)&unsigned char buf[22] = 2114;
        __int16 v43 = v31;
        LOWORD(v44) = 2114;
        *(void *)((char *)&v44 + 2) = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to import for account %{public}@ error: %{public}@", buf, 0x2Au);
      }
      uint64_t v20 = a1[8];
      uint64_t v21 = sub_1001F5FCC(0, (uint64_t)v11);
      (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v21);
    }
  }
  else
  {
    id v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = objc_opt_class();
      uint64_t v24 = a1[5];
      id v23 = (void *)a1[6];
      id v25 = v22;
      id v26 = [v23 hashedDescription];
      *(_DWORD *)long long buf = 138413058;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v24;
      *(_WORD *)&unsigned char buf[22] = 2114;
      __int16 v43 = v26;
      LOWORD(v44) = 2114;
      *(void *)((char *)&v44 + 2) = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed update for acccount %{public}@ error: %{public}@", buf, 0x2Au);
    }
    (*(void (**)(void))(a1[8] + 16))();
  }
  *(unsigned char *)(a1[4] + 32) = 0;
}

void sub_10037322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_100373258(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (*(void *)(a1 + 32))
  {
    *(unsigned char *)(*(void *)(a1 + 48) + 32) = 0;
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = objc_opt_class();
      id v30 = *(void **)(a1 + 56);
      uint64_t v31 = *(void *)(a1 + 64);
      id v32 = v29;
      __int16 v33 = [v30 hashedDescription];
      *(_DWORD *)long long buf = 138413058;
      *(void *)&uint8_t buf[4] = v29;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v31;
      *(_WORD *)&unsigned char buf[22] = 2114;
      uint64_t v53 = v33;
      LOWORD(v54) = 2114;
      *(void *)((char *)&v54 + 2) = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed update for acccount %{public}@ error: %{public}@", buf, 0x2Au);
    }
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 32, 1);
    }
    id v10 = Property;
    signed int v11 = [v10 intValue];
    signed int v12 = [v5 intValue];

    if (v11 >= v12)
    {
      uint64_t v46 = 0;
      __int16 v47 = &v46;
      uint64_t v48 = 0x2020000000;
      LOBYTE(v49) = 1;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000;
      uint64_t v53 = sub_1000182F8;
      *(void *)&long long v54 = sub_100017D38;
      *((void *)&v54 + 1) = 0;
      id v27 = *(void **)(*(void *)(a1 + 48) + 16);
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_1003738D8;
      v41[3] = &unk_10052A0F0;
      __int16 v43 = &v46;
      id v42 = *(id *)(a1 + 56);
      long long v44 = buf;
      [v27 modifyUsingTransaction:v41];
      if (*(void *)(*(void *)&buf[8] + 40))
      {
        id v28 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          id v34 = (id)objc_opt_class();
          objc_msgSend(*(id *)(a1 + 56), "ams_DSID");
          id v35 = (id)objc_claimAutoreleasedReturnValue();
          id v36 = [*(id *)(a1 + 56) hashedDescription];
          uint64_t v37 = *(void *)(*(void *)&buf[8] + 40);
          *(_DWORD *)CFStringRef v58 = 138413058;
          *(void *)&v58[4] = v34;
          *(_WORD *)&v58[12] = 2114;
          *(void *)&v58[14] = v35;
          *(_WORD *)&v58[22] = 2114;
          uint64_t v59 = v36;
          LOWORD(v60) = 2114;
          *(void *)((char *)&v60 + 2) = v37;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "[%@]: Update call success, but failed updating DB for account: %{public}@ authenticated account: %{public}@ error: %{public}@", v58, 0x2Au);
        }
      }
      *(unsigned char *)(*(void *)(a1 + 48) + 32) = 0;
      (*(void (**)(void))(*(void *)(a1 + 80) + 16))();

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v46, 8);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 48);
      id v13 = *(void **)(a1 + 56);
      id v15 = *(void **)(a1 + 64);
      uint64_t v16 = *(void **)(a1 + 80);
      id v39 = v13;
      id v40 = v15;
      id v38 = v16;
      if (v14)
      {
        id v45 = 0;
        id v17 = v39;
        id v18 = v40;
        *(void *)CFStringRef v58 = 0;
        *(void *)&v58[8] = v58;
        *(void *)&v58[16] = 0x3032000000;
        uint64_t v59 = sub_1000182F8;
        *(void *)&long long v60 = sub_100017D38;
        *((void *)&v60 + 1) = 0;
        uint64_t v46 = 0;
        __int16 v47 = &v46;
        uint64_t v48 = 0x3032000000;
        __int16 v49 = sub_1000182F8;
        id v50 = sub_100017D38;
        id v51 = 0;
        id v19 = *(void **)(v14 + 16);
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_100372658;
        uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t))&unk_10052A050;
        *((void *)&v54 + 1) = v58;
        id v20 = v17;
        uint64_t v55 = &v46;
        unsigned int v56 = &v45;
        *(void *)&long long v54 = v20;
        [v19 readUsingSession:buf];
        uint64_t v21 = sub_1001FB964((uint64_t)IAPInfoItemsRequestContext, *(void **)(*(void *)&v58[8] + 40), (void *)v47[5], v20, v18);

        _Block_object_dispose(&v46, 8);
        _Block_object_dispose(v58, 8);

        id v22 = v45;
        if (v21)
        {
          *(unsigned char *)(v14 + 32) = 1;
          id v23 = +[KeepAlive keepAliveWithName:@"com.apple.appstoredaemon.IAPInfoManager.update"];
          uint64_t v24 = sub_10025433C((id *)[IAPInfoItemsRequest alloc], *(void **)(v14 + 8), v21);
          *(void *)long long buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_100372E18;
          uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t))&unk_10052A0A0;
          *(void *)&long long v54 = v14;
          *((void *)&v54 + 1) = v18;
          uint64_t v55 = (uint64_t *)v20;
          id v25 = v38;
          unsigned int v56 = v23;
          id v57 = v25;
          id v26 = v23;
          sub_1002543E8((uint64_t)v24, buf);
        }
        else
        {
          *(unsigned char *)(v14 + 32) = 0;
          (*((void (**)(id, id))v38 + 2))(v38, v22);
        }
      }
    }
  }
}

void sub_10037388C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1003738D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSDate date];
  id v5 = objc_msgSend(*(id *)(a1 + 32), "ams_DSID");
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v6 + 40);
  unsigned __int8 v7 = sub_1001FAE24(v3, v4, v5, &obj);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v8 + 24)) {
    unsigned __int8 v9 = v7;
  }
  else {
    unsigned __int8 v9 = 0;
  }
  *(unsigned char *)(v8 + 24) = v9;

  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

uint64_t sub_1003739A4(void *a1, void *a2)
{
  id v4 = a2;
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  id v6 = Property;
  unsigned __int8 v7 = objc_msgSend(v6, "ams_DSID");

  unsigned __int8 v9 = (unsigned char *)a1[4];
  if (v9 && (v9[8] & 1) != 0)
  {
    id v15 = objc_getProperty(v9, v8, 32, 1);
    uint64_t v16 = *(void *)(a1[6] + 8);
    id v44 = *(id *)(v16 + 40);
    char v17 = sub_1001FA408((uint64_t)v4, v15, v7, &v44);
    objc_storeStrong((id *)(v16 + 40), v44);
    uint64_t v18 = *(void *)(a1[5] + 8);
    if (*(unsigned char *)(v18 + 24)) {
      char v19 = v17;
    }
    else {
      char v19 = 0;
    }
    *(unsigned char *)(v18 + 24) = v19;
  }
  else
  {
    uint64_t v10 = *(void *)(a1[6] + 8);
    id obj = *(id *)(v10 + 40);
    char v11 = sub_1001FAB94(v4, v7, &obj);
    objc_storeStrong((id *)(v10 + 40), obj);
    uint64_t v13 = *(void *)(a1[5] + 8);
    if (*(unsigned char *)(v13 + 24)) {
      char v14 = v11;
    }
    else {
      char v14 = 0;
    }
    *(unsigned char *)(v13 + 24) = v14;
  }
  id v20 = (id)a1[4];
  if (v20) {
    id v20 = objc_getProperty(v20, v12, 24, 1);
  }
  id v21 = v20;
  uint64_t v22 = *(void *)(a1[6] + 8);
  id v42 = *(id *)(v22 + 40);
  char v23 = sub_1001FA718(v4, v21, v7);
  objc_storeStrong((id *)(v22 + 40), v42);
  uint64_t v24 = *(void *)(a1[5] + 8);
  if (*(unsigned char *)(v24 + 24)) {
    char v25 = v23;
  }
  else {
    char v25 = 0;
  }
  *(unsigned char *)(v24 + 24) = v25;

  id v27 = (id)a1[4];
  if (v27) {
    id v27 = objc_getProperty(v27, v26, 40, 1);
  }
  id v28 = v27;
  uint64_t v29 = *(void *)(a1[6] + 8);
  id v41 = *(id *)(v29 + 40);
  unsigned __int8 v30 = sub_1001FAC78(v4, v28, v7, &v41);
  objc_storeStrong((id *)(v29 + 40), v41);
  uint64_t v31 = *(void *)(a1[5] + 8);
  if (*(unsigned char *)(v31 + 24)) {
    unsigned __int8 v32 = v30;
  }
  else {
    unsigned __int8 v32 = 0;
  }
  *(unsigned char *)(v31 + 24) = v32;

  __int16 v33 = +[NSDate date];
  uint64_t v34 = *(void *)(a1[6] + 8);
  id v40 = *(id *)(v34 + 40);
  unsigned __int8 v35 = sub_1001FAE24(v4, v33, v7, &v40);
  objc_storeStrong((id *)(v34 + 40), v40);
  uint64_t v36 = *(void *)(a1[5] + 8);
  if (*(unsigned char *)(v36 + 24)) {
    unsigned __int8 v37 = v35;
  }
  else {
    unsigned __int8 v37 = 0;
  }
  *(unsigned char *)(v36 + 24) = v37;

  uint64_t v38 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  return v38;
}

void sub_100373DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100373DDC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = sub_100242EB8((uint64_t)v4);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

void sub_100373F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100373F50(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if ([v6 mode])
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 mode];
    *a4 = 1;
  }
}

void sub_100374100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100374118(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }
}

id sub_1003741BC(void *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  if (a2) {
    uint64_t v3 = _TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    uint64_t v3 = AppUpdateEntity;
  }
  id v4 = [a1 connection];
  id v5 = sub_1002FF548((uint64_t)v3, v4, 0);

  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = objc_opt_class();
    id v8 = v7;
    id v9 = [v5 countOfEntities];
    CFStringRef v10 = @"legacy";
    int v14 = 138544130;
    id v15 = v7;
    __int16 v16 = 2048;
    if (a2) {
      CFStringRef v11 = @"modern";
    }
    else {
      CFStringRef v11 = @"legacy";
    }
    id v17 = v9;
    if (!a2) {
      CFStringRef v10 = @"modern";
    }
    __int16 v18 = 2114;
    CFStringRef v19 = v11;
    __int16 v20 = 2114;
    CFStringRef v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%{public}@] Deleting data for %ld %{public}@ update(s) as we've switched to %{public}@ updates", (uint8_t *)&v14, 0x2Au);
  }
  id v12 = [v5 deleteAllEntities];

  return v12;
}

id sub_100374338(id result, double a2)
{
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [objc_alloc((Class)NSNumber) initWithDouble:a2];
    id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"install_date" value:v3 comparisonType:3];
    id v5 = [v2 connection];
    id v6 = sub_1002FF548((uint64_t)AppUpdateEntity, v5, v4);

    id v7 = [v6 deleteAllEntities];
    return v7;
  }
  return result;
}

BOOL sub_100374400(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = objc_opt_class();
      id v6 = v5;
      id v7 = [v3 count];
      id v8 = [v3 firstObject];
      *(_DWORD *)long long buf = 138543874;
      unsigned __int8 v30 = v5;
      __int16 v31 = 2048;
      id v32 = v7;
      __int16 v33 = 2114;
      uint64_t v34 = objc_opt_class();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Deleting %lu update(s) of type %{public}@", buf, 0x20u);
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v23 = v3;
    id v9 = v3;
    id v10 = [v9 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v25;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v25 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          if ([v14 databaseID])
          {
            id v15 = objc_alloc((Class)[(id)objc_opt_class() databaseEntityClass]);
            id v16 = [v14 databaseID];
            id v17 = [a1 connection];
            id v18 = [v15 initWithPersistentID:v16 onConnection:v17];

            if (([v18 deleteFromDatabase] & 1) == 0)
            {
              CFStringRef v19 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                __int16 v20 = objc_opt_class();
                *(_DWORD *)long long buf = 138543618;
                unsigned __int8 v30 = v20;
                __int16 v31 = 2114;
                id v32 = v18;
                id v21 = v20;
                _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%{public}@] Failed to delete update %{public}@", buf, 0x16u);
              }
            }
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v11);
    }

    id v3 = v23;
  }

  return a1 != 0;
}

uint64_t sub_1003746B4(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"bundle_id" values:a2];
  id v4 = [a1 connection];
  id v5 = sub_1002FF548((uint64_t)AppUpdateEntity, v4, v3);

  if ((uint64_t)[v5 countOfEntities] >= 1 && objc_msgSend(v5, "deleteAllEntities"))
  {
    id v6 = +[UpdatesManager sharedManager];
    [v6 noteUpdatesStateChanged:@"Apps uninstalled" logKey:0];

    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

_TtC9appstored26UpdatesDatabaseMergeResult *sub_100374798(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v40 = 0;
    id v41 = &v40;
    uint64_t v42 = 0x2020000000;
    char v43 = 1;
    uint64_t v36 = 0;
    unsigned __int8 v37 = &v36;
    uint64_t v38 = 0x2020000000;
    uint64_t v39 = 0;
    uint64_t v30 = 0;
    __int16 v31 = &v30;
    uint64_t v32 = 0x3032000000;
    __int16 v33 = sub_100018318;
    uint64_t v34 = sub_100017D48;
    id v35 = (id)objc_opt_new();
    id v9 = objc_opt_new();
    id v10 = +[MediaAPIUpdateEntity itemIDPropertyKey];
    v44[0] = v10;
    id v11 = +[MediaAPIUpdateEntity updateStatePropertyKey];
    v44[1] = v11;
    uint64_t v12 = +[NSArray arrayWithObjects:v44 count:2];

    uint64_t v13 = [a1 connection];
    int v14 = sub_100300254((uint64_t)_TtC9appstored14MediaAPIUpdate, v13, 0);

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    void v28[2] = sub_100374B1C;
    void v28[3] = &unk_1005213B0;
    id v15 = v9;
    id v29 = v15;
    [v14 enumerateMemoryEntitiesWithProperties:v12 usingBlock:v28];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_100374B98;
    v20[3] = &unk_10052A118;
    long long v24 = &v30;
    id v16 = v15;
    id v21 = v16;
    uint64_t v22 = a1;
    char v27 = a3;
    id v23 = v8;
    long long v25 = &v40;
    long long v26 = &v36;
    [v7 enumerateObjectsUsingBlock:v20];
    if (*((unsigned char *)v41 + 24))
    {
      if (v37[3] > 0) {
        a3 = 1;
      }
      else {
        a3 = a3;
      }
    }
    id v17 = [_TtC9appstored26UpdatesDatabaseMergeResult alloc];
    id v18 = [(UpdatesDatabaseMergeResult *)v17 initWithAvailableUpdateCount:v37[3] shouldNotifyOfChanges:a3 bundleIDs:v31[5] result:*((unsigned __int8 *)v41 + 24)];

    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v36, 8);
    _Block_object_dispose(&v40, 8);
  }
  else
  {
    id v18 = 0;
  }

  return v18;
}

void sub_100374AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100374B1C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 itemID];
  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = +[NSNumber numberWithLongLong:v3];
    [v4 setObject:v6 forKey:v5];
  }
}

void sub_100374B98(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  id v7 = [v6 itemID];
  id v8 = [v6 bundleID];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v8];
  id v9 = *(void **)(a1 + 32);
  id v10 = +[NSNumber numberWithLongLong:v7];
  id v11 = [v9 objectForKeyedSubscript:v10];

  uint64_t v12 = sub_100374E18(*(void *)(a1 + 40), v6, v11, *(void **)(a1 + 48), *(unsigned __int8 *)(a1 + 80), 1);

  uint64_t v13 = [_TtC9appstored20MediaAPIUpdateEntity alloc];
  if (v11)
  {
    id v14 = [v11 databaseID];
    id v15 = [*(id *)(a1 + 40) connection];
    id v16 = [(MediaAPIUpdateEntity *)v13 initWithPersistentID:v14 onConnection:v15];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [(SQLiteEntity *)v16 setValuesWithDictionary:v12];
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      *a4 = 1;
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v22 = 138543618;
        id v23 = v12;
        __int16 v24 = 2114;
        long long v25 = v16;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to set values %{public}@ on entity: %{public}@", (uint8_t *)&v22, 0x16u);
      }
    }
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    id v18 = *(void **)(a1 + 32);
    CFStringRef v19 = +[NSNumber numberWithLongLong:v7];
    [v18 removeObjectForKey:v19];
  }
  else
  {
    __int16 v20 = [*(id *)(a1 + 40) connection];
    id v21 = [(MediaAPIUpdateEntity *)v13 initWithPropertyValues:v12 onConnection:v20];

    if (!v21) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    }
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  }
}

id sub_100374E18(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  id v10 = a2;
  id v11 = a3;
  id v54 = a4;
  if (a1)
  {
    uint64_t v12 = [v10 propertyValues];
    id v13 = [v12 mutableCopy];

    id v14 = +[NSNull null];
    [v13 setObject:v14 forKey:@"install_date"];

    id v15 = sub_10026E82C(v10, @"store_software_version_id");
    if (!v15)
    {
      id v16 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v51 = sub_10026E95C(v10, @"bundle_id");
        *(_DWORD *)long long buf = 138543362;
        unsigned int v56 = v51;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Expected evid missing for %{public}@", buf, 0xCu);
      }
    }
    uint64_t v53 = sub_10026E82C(v10, @"store_item_id");
    if (!v53)
    {
LABEL_15:
      char v27 = (id *)objc_opt_new();
      id v28 = [v10 valueForProperty:@"current_version_release_date"];
      id v29 = v28;
      if (v28)
      {
        [v28 timeIntervalSinceReferenceDate];
        uint64_t v30 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
        sub_10020B7CC((uint64_t)v27, v30, ASDUpdateItemMetricsAvailableDate);
      }
      __int16 v31 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
      sub_10020B7CC((uint64_t)v27, v31, ASDUpdateItemMetricsDiscoveryDate);

      if (v27) {
        id v32 = [v27[1] copy];
      }
      else {
        id v32 = 0;
      }
      [v13 setObject:v32 forKeyedSubscript:@"metrics_data"];

      if (!v11) {
        goto LABEL_32;
      }
      int v33 = a6;
      +[NSDate timeIntervalSinceReferenceDate];
      id v35 = +[NSDate dateWithTimeIntervalSinceReferenceDate:round(v34)];
      [v13 setObject:v35 forKeyedSubscript:@"timestamp"];

      uint64_t v36 = v11;
      unsigned __int8 v37 = [v11 valueForProperty:@"update_state"];
      uint64_t v38 = (char *)[v37 integerValue];

      if ((unint64_t)(v38 - 1) >= 2)
      {
        if ((unint64_t)(v38 - 3) >= 2)
        {
          id v11 = v36;
          if (v38 == (char *)5)
          {
            id v44 = sub_10026E82C(v36, @"store_software_version_id");
            id v45 = sub_10026E82C(v10, @"store_software_version_id");
            if (([v44 isEqualToNumber:v45] & 1) == 0) {
              [v13 setObject:&off_10054CBB8 forKeyedSubscript:@"update_state"];
            }

            goto LABEL_31;
          }
        }
        else
        {
          id v11 = v36;
          if (a5)
          {
            if (v33)
            {
              uint64_t v39 = +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey];
              uint64_t v40 = [v13 objectForKeyedSubscript:v39];
              unint64_t v41 = (unint64_t)[v40 integerValue];

              uint64_t v42 = +[NSNumber numberWithInteger:v41 | 1];
              char v43 = +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey];
              [v13 setObject:v42 forKeyedSubscript:v43];
            }
            else
            {
              [v13 setObject:&__kCFBooleanTrue forKey:@"is_background"];
            }
            id v44 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v48 = objc_opt_class();
              id v49 = v48;
              id v50 = sub_10026E95C(v10, @"bundle_id");
              *(_DWORD *)long long buf = 138543618;
              unsigned int v56 = v48;
              __int16 v57 = 2114;
              CFStringRef v58 = v50;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[%{public}@] Hiding update for %{public}@ following server sync", buf, 0x16u);
            }
            goto LABEL_26;
          }
        }
LABEL_32:
        id v46 = [v13 copy];

        goto LABEL_33;
      }
      id v44 = +[NSNumber numberWithInteger:0];
      [v13 setObject:v44 forKey:@"update_state"];
LABEL_26:
      id v11 = v36;
LABEL_31:

      goto LABEL_32;
    }
    if (v15)
    {
      id v17 = [v54 objectForKeyedSubscript:v53];
      id v18 = [v17 longLongValue];
      BOOL v19 = v18 == [v15 longLongValue];

      if (a6)
      {
LABEL_9:
        __int16 v20 = +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey];
        [v13 objectForKeyedSubscript:v20];
        v22 = int v21 = a6;
        unint64_t v23 = (unint64_t)[v22 integerValue];

        a6 = v21;
        uint64_t v24 = 2;
        if (!v19) {
          uint64_t v24 = 0;
        }
        long long v25 = +[NSNumber numberWithInteger:v23 & 0xFFFFFFFFFFFFFFFDLL | v24];
        long long v26 = +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey];
        [v13 setObject:v25 forKeyedSubscript:v26];

        goto LABEL_14;
      }
    }
    else
    {
      BOOL v19 = 0;
      if (a6) {
        goto LABEL_9;
      }
    }
    long long v25 = +[NSNumber numberWithBool:v19];
    [v13 setObject:v25 forKeyedSubscript:@"is_code_signature_update"];
LABEL_14:

    goto LABEL_15;
  }
  id v46 = 0;
LABEL_33:

  return v46;
}

BOOL sub_100375428(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, char *a7, void *a8)
{
  id v33 = a2;
  id v31 = a4;
  id v14 = a5;
  if (a1)
  {
    uint64_t v55 = 0;
    unsigned int v56 = &v55;
    uint64_t v57 = 0x2020000000;
    char v58 = 1;
    uint64_t v51 = 0;
    long long v52 = &v51;
    uint64_t v53 = 0x2020000000;
    uint64_t v54 = 0;
    uint64_t v45 = 0;
    id v46 = &v45;
    uint64_t v47 = 0x3032000000;
    uint64_t v48 = sub_100018318;
    id v49 = sub_100017D48;
    id v50 = (id)objc_opt_new();
    id v15 = objc_opt_new();
    v61[0] = @"store_item_id";
    v61[1] = @"update_state";
    id v16 = +[NSArray arrayWithObjects:v61 count:2];
    id v17 = [a1 connection];
    id v18 = sub_100300254((uint64_t)AppUpdateMemoryEntity, v17, 0);

    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_100375898;
    v43[3] = &unk_1005213B0;
    id v19 = v15;
    id v44 = v19;
    [v18 enumerateMemoryEntitiesWithProperties:v16 usingBlock:v43];
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100375900;
    v35[3] = &unk_10052A140;
    uint64_t v39 = &v45;
    id v20 = v19;
    id v36 = v20;
    unsigned __int8 v37 = a1;
    id v38 = v14;
    uint64_t v40 = &v55;
    unint64_t v41 = &v51;
    uint64_t v42 = a3;
    [v33 enumerateObjectsUsingBlock:v35];
    int v21 = v56;
    int v22 = *((unsigned __int8 *)v56 + 24);
    BOOL v23 = a3 != 2 || v22 == 0;
    char v24 = !v23;
    if (!v23)
    {
      long long v25 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        long long v26 = objc_opt_class();
        *(_DWORD *)long long buf = 138543362;
        long long v60 = v26;
        id v27 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%{public}@] Syncing updates with server ", buf, 0xCu);
      }
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_100375AC4;
      v34[3] = &unk_10052A168;
      v34[4] = a1;
      v34[5] = &v55;
      [v20 enumerateKeysAndObjectsUsingBlock:v34];
      int v21 = v56;
      int v22 = *((unsigned __int8 *)v56 + 24);
    }
    if (a7 && v22)
    {
      if (v52[3] > 0) {
        char v28 = 1;
      }
      else {
        char v28 = v24;
      }
      *a7 = v28;
      int v22 = *((unsigned __int8 *)v21 + 24);
    }
    if (a6 && v22) {
      *a6 = v52[3];
    }
    if (a8 && v22)
    {
      *a8 = [(id)v46[5] copy];
      int v22 = *((unsigned __int8 *)v56 + 24);
    }
    BOOL v29 = v22 != 0;

    _Block_object_dispose(&v45, 8);
    _Block_object_dispose(&v51, 8);
    _Block_object_dispose(&v55, 8);
  }
  else
  {
    BOOL v29 = 0;
  }

  return v29;
}

void sub_100375848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 208), 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100375898(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [v4 itemID];
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKey:v3];
  }
}

void sub_100375900(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  id v15 = [v6 itemID];
  id v7 = [v6 bundleID];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v7];
  id v8 = [*(id *)(a1 + 32) objectForKey:v15];
  id v9 = sub_100374E18(*(void *)(a1 + 40), v6, v8, *(void **)(a1 + 48), *(void *)(a1 + 80) == 2, 0);

  id v10 = [AppUpdateEntity alloc];
  if (v8)
  {
    id v11 = [v8 databaseID];
    uint64_t v12 = [*(id *)(a1 + 40) connection];
    id v13 = [(SQLiteEntity *)v10 initWithPersistentID:v11 onConnection:v12];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [(SQLiteEntity *)v13 setValuesWithDictionary:v9];
    *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) ^ 1;
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    [*(id *)(a1 + 32) removeObjectForKey:v15];
  }
  else
  {
    id v14 = [*(id *)(a1 + 40) connection];
    id v13 = [(SQLiteEntity *)v10 initWithPropertyValues:v9 onConnection:v14];

    if (!v13) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    }
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  }
}

void sub_100375AC4(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v12 = a3;
  id v6 = [v12 valueForProperty:@"update_state"];
  unint64_t v7 = (unint64_t)[v6 integerValue];

  if ((v7 & 0xFFFFFFFFFFFFFFFBLL) == 0)
  {
    id v8 = [AppUpdateEntity alloc];
    id v9 = [v12 databaseID];
    id v10 = [*(id *)(a1 + 32) connection];
    id v11 = [(SQLiteEntity *)v8 initWithPersistentID:v9 onConnection:v10];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [(SQLiteEntity *)v11 deleteFromDatabase];
    *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) ^ 1;
  }
}

uint64_t sub_100375BB4(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!a1) {
    goto LABEL_13;
  }
  if (!v9)
  {
    id v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v20 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unable to record update download time without a bundle ID", v20, 2u);
    }
    goto LABEL_12;
  }
  id v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v9];
  id v12 = [a1 connection];
  sub_1002FF3DC((uint64_t)AppUpdateEntity, v12, v11);
  id v13 = (UpdateItemMetrics *)objc_claimAutoreleasedReturnValue();

  if (![(UpdateItemMetrics *)v13 existsInDatabase])
  {

LABEL_12:
LABEL_13:
    uint64_t v18 = 0;
    goto LABEL_14;
  }
  sub_100243794(v13);
  id v14 = (id *)objc_claimAutoreleasedReturnValue();
  if (!v14) {
    id v14 = (id *)objc_opt_new();
  }
  [v7 timeIntervalSinceReferenceDate];
  id v15 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  sub_10020B7CC((uint64_t)v14, v15, ASDUpdateItemMetricsDownloadStartDate);

  [v8 timeIntervalSinceReferenceDate];
  id v16 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  sub_10020B7CC((uint64_t)v14, v16, ASDUpdateItemMetricsDownloadCompleteDate);

  if (v14) {
    id v17 = [v14[1] copy];
  }
  else {
    id v17 = 0;
  }
  [(UpdateItemMetrics *)v13 setValue:v17 forProperty:@"metrics_data"];

  uint64_t v18 = 1;
LABEL_14:

  return v18;
}

id sub_100375DBC(id result, uint64_t a2, void *a3)
{
  if (result)
  {
    id v4 = result;
    id v5 = a3;
    id v6 = [v5 bundleID];
    id v7 = [v5 itemID];
    id v8 = [v5 purchaseID];
    unsigned int v9 = [v5 isDiscretionary] ^ 1;
    id v10 = [v5 logKey];

    id v11 = sub_100375E8C(v4, a2, v6, v7, v8, v9, v10);
    return v11;
  }
  return result;
}

id sub_100375E8C(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a7;
  if (!a1)
  {
    id v33 = 0;
    goto LABEL_32;
  }
  if (!v14)
  {
    id v17 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      id v48 = (id)objc_opt_class();
      __int16 v49 = 2114;
      id v50 = v13;
      id v42 = v16;
      id v43 = v48;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[%{public}@] Could not find update for purchase: %{public}@ due to missing storeID", buf, 0x16u);

      id v16 = v42;
    }
    id v33 = 0;
    goto LABEL_31;
  }
  int v46 = a6;
  id v17 = +[SQLiteComparisonPredicate predicateWithProperty:@"store_item_id" equalToValue:v14];
  uint64_t v18 = [a1 connection];
  sub_1002FF3DC((uint64_t)AppUpdateEntity, v18, v17);
  id v19 = (UpdateItemMetrics *)objc_claimAutoreleasedReturnValue();

  if (!v19
    || ([(UpdateItemMetrics *)v19 valueForProperty:@"bundle_id"],
        id v20 = objc_claimAutoreleasedReturnValue(),
        unsigned int v21 = [v13 isEqualToString:v20],
        v20,
        !v21))
  {
    uint64_t v30 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543874;
      id v48 = (id)objc_opt_class();
      __int16 v49 = 2114;
      id v50 = v13;
      __int16 v51 = 2114;
      long long v52 = v14;
      id v31 = v16;
      id v32 = v48;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[%{public}@] Update does not exist for purchase: %{public}@ with storeID: %{public}@", buf, 0x20u);

      id v16 = v31;
    }

    id v33 = 0;
    goto LABEL_30;
  }
  id v22 = v13;
  id v23 = v16;
  self;
  char v24 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    id v48 = v23;
    __int16 v49 = 2114;
    id v50 = v22;
    __int16 v51 = 2080;
    long long v52 = &aAvailable[16 * a2 - a2];
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Transitioning to state \"%s\"", buf, 0x20u);
  }

  id v25 = objc_alloc_init((Class)NSMutableDictionary);
  long long v26 = v25;
  if (v15) {
    [v25 setObject:v15 forKeyedSubscript:@"purchase_id"];
  }
  if ((unint64_t)(a2 - 3) <= 1)
  {
    id v27 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
    sub_100243794(v19);
    char v28 = (id *)objc_claimAutoreleasedReturnValue();
    if (!v28) {
      char v28 = (id *)objc_opt_new();
    }
    if (a2 == 3)
    {
      BOOL v29 = (void **)&ASDUpdateItemMetricsPurchaseStartDate;
    }
    else
    {
      if (a2 != 4)
      {
LABEL_23:
        id v44 = v27;
        if (v28) {
          id v34 = [v28[1] copy];
        }
        else {
          id v34 = 0;
        }
        [v26 setObject:v34 forKeyedSubscript:@"metrics_data"];

        goto LABEL_26;
      }
      BOOL v29 = (void **)&ASDUpdateItemMetricsPurchaseCompleteDate;
    }
    sub_10020B7CC((uint64_t)v28, v27, *v29);
    goto LABEL_23;
  }
LABEL_26:
  id v45 = v16;
  if (+[UpdatesManager shouldUseModernUpdates])
  {
    uint64_t v35 = +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey];
    id v36 = [v26 objectForKeyedSubscript:v35];
    unint64_t v37 = (unint64_t)[v36 integerValue];

    id v38 = +[NSNumber numberWithInteger:v37 & 0xFFFFFFFFFFFFFFFELL | v46 ^ 1u];
    uint64_t v39 = +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey];
    [v26 setObject:v38 forKeyedSubscript:v39];
  }
  else
  {
    id v38 = +[NSNumber numberWithInt:v46 ^ 1u];
    [v26 setObject:v38 forKeyedSubscript:@"is_background"];
  }

  uint64_t v40 = +[NSNumber numberWithInteger:a2];
  [v26 setObject:v40 forKeyedSubscript:@"update_state"];

  id v33 = [(UpdateItemMetrics *)v19 setValuesWithDictionary:v26];
  id v16 = v45;
LABEL_30:

LABEL_31:
LABEL_32:

  return v33;
}

uint64_t sub_1003763C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1)
  {
    uint64_t v16 = 0;
    goto LABEL_23;
  }
  sub_10026E95C(v5, @"bundle_id");
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  id v8 = +[ApplicationProxy proxyForBundleID:v7];
  unsigned int v9 = v8;
  if (!v8)
  {
    CFStringRef v13 = @"no longer installed";
LABEL_9:
    id v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138543618;
      CFStringRef v21 = v13;
      __int16 v22 = 2114;
      id v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Removing update because the app is %{public}@: %{public}@", (uint8_t *)&v20, 0x16u);
    }

    [v5 deleteFromDatabase];
    goto LABEL_21;
  }
  if (([v8 validateEligibilityForUpdatesWithLogKey:v6] & 1) == 0)
  {
    CFStringRef v13 = @"not eligible for updates";
    goto LABEL_9;
  }
  id v10 = sub_10026E82C(v5, @"store_software_version_id");
  id v11 = [v10 unsignedLongLongValue];

  if (v11 <= [v9 storeExternalVersionID])
  {
    id v15 = [v5 valueForProperty:@"install_date"];

    if (v15)
    {
      if (sub_10026E91C(v5, @"update_state") == (id)1) {
        goto LABEL_14;
      }
    }
    else
    {
      id v17 = +[NSDate date];
      [v5 setValue:v17 forProperty:@"install_date"];

      if (sub_10026E91C(v5, @"update_state") == (id)1)
      {
LABEL_18:
        uint64_t v18 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = 138543362;
          CFStringRef v21 = v7;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Fixing update state for installed update %{public}@", (uint8_t *)&v20, 0xCu);
        }

LABEL_21:
        uint64_t v16 = 1;
        goto LABEL_22;
      }
    }
    id v12 = &off_10054CBD0;
    goto LABEL_17;
  }
  if (sub_10026E91C(v5, @"update_state"))
  {
    id v12 = &off_10054CBB8;
LABEL_17:
    [v5 setValue:v12 forProperty:@"update_state"];
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v16 = 0;
LABEL_22:

LABEL_23:
  return v16;
}

void sub_10037670C(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (!a2)
  {
    *a3 = 17000;
    id v4 = *a4;
    *a4 = &stru_10052A1A8;
  }
}

void sub_100376730(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS purchase_history_apps (pid INTEGER PRIMARY KEY, bundle_id TEXT, content_rating_flags INTEGER, date_purchased DATETIME, developer_name TEXT, family_shared INTEGER, first_party INTEGER, is_ios_binary_macos_available INTEGER, is_ios_binary_macos_compatible INTEGER, has_messages_extension INTEGER, hidden INTEGER, hidden_from_springboard INTEGER, icon_url_template TEXT, is_32_bit_only INTEGER, is_preorder INTEGER, is_verified_for_macos INTEGER, long_title TEXT, mac_app_required_capabilities JSON, media_kind INTEGER, oval_icon_url_template TEXT, preflight_package_url URL, product_url URL, purchaser_dsid INTEGER, redownload_params TEXT, required_capabilities JSON, requires_rosetta INTEGER, runs_on_apple_silicon INTEGER, runs_on_intel INTEGER, store_item_id INTEGER, supports_ipad INTEGER, supports_iphone INTEGER, supports_mac INTEGER, supports_reality_device INTEGER, purchase_token INTEGER, locker_item_id INTEGER, genre_id INTEGER, genre_name TEXT, watch_app_delivered_in_ios_app INTEGER, watch_app_runs_independently INTEGER, watch_app_watch_only INTEGER, supports_layered_image INTEGER, has_p3 INTEGER, title TEXT, circular_icon_url TEXT, ros_app_required_capabilities JSON, ios_to_ros_release_date DATETIME, opted_in_for_ros_eligibility INTEGER, currently_opted_in_for_ros_eligibility INTEGER, min_os_for_ros_eligibility INTEGER, UNIQUE(purchaser_dsid, store_item_id) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS purchase_history_db_properties (key TEXT PRIMARY KEY, value TEXT)", 1, 0);
  }
}

BOOL sub_1003768C8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
LABEL_21:
        id v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadString();
    uint64_t v13 = 16;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100376AFC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_100376B14(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

InstallAppReviewAppsTask *sub_100378644(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  char v4 = [InstallAppReviewAppsTask alloc];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100378760;
  void v10[3] = &unk_10052A1C8;
  void v10[4] = v3;
  unsigned int v5 = sub_1003923F8(v2, v10);

  id v6 = v5;
  if (v4)
  {
    v11.receiver = v4;
    v11.super_class = (Class)InstallAppReviewAppsTask;
    char v4 = (InstallAppReviewAppsTask *)objc_msgSendSuper2(&v11, "init");
    if (v4)
    {
      unint64_t v7 = (NSArray *)[v6 copy];
      installs = v4->_installs;
      v4->_installs = v7;
    }
  }

  return v4;
}

AppInstall *sub_100378760(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  char v4 = [v2 bundleID];
  [v3 setObject:v4 forKeyedSubscript:@"bundle_id"];

  unsigned int v5 = +[NSUUID UUID];
  [v3 setObject:v5 forKeyedSubscript:@"external_id"];

  id v6 = [v2 artworkURL];
  [v3 setObject:v6 forKeyedSubscript:@"artwork_url"];

  unint64_t v7 = [v2 itemID];
  [v3 setObject:v7 forKeyedSubscript:@"item_id"];

  char v8 = [v2 itemName];
  [v3 setObject:v8 forKeyedSubscript:@"bundle_name"];

  unsigned int v9 = [v2 messagesArtworkURL];
  [v3 setObject:v9 forKeyedSubscript:@"messages_artwork_url"];

  int v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v2 hasMessagesExtension]);
  [v3 setObject:v10 forKeyedSubscript:@"has_messages_extension"];

  objc_super v11 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v2 isLaunchProhibited]);
  [v3 setObject:v11 forKeyedSubscript:@"launch_prohibited"];

  [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:@"approved"];
  [v3 setObject:&off_10054CC18 forKeyedSubscript:@"bootstrapped"];
  if ([v2 isBeta]) {
    uint64_t v12 = &off_10054CC18;
  }
  else {
    uint64_t v12 = &off_10054CC30;
  }
  [v3 setObject:v12 forKeyedSubscript:@"source_type"];
  [v3 setObject:&off_10054CC48 forKeyedSubscript:@"priority"];
  [v3 setObject:@"APR" forKeyedSubscript:@"log_code"];
  uint64_t v13 = [v2 storeMetadata];
  id v14 = (void *)v13;
  if (v13)
  {
    id v15 = sub_10040163C(v13, 0);
    [v3 setObject:v15 forKeyedSubscript:@"store_metadata"];
  }
  uint64_t v16 = [(SQLiteMemoryEntity *)[AppInstall alloc] initWithPropertyValues:v3];
  id v17 = [v2 backgroundAssetMetadata];
  if (os_variant_has_internal_content())
  {
    id v19 = [v2 bundleID];
    uint64_t v20 = +[BAApplicationConfigurationOverrides asd_overriddenDictionaryForBundleIdentifier:v19 startingDictionary:v17];

    id v17 = (void *)v20;
  }
  if (v16) {
    objc_setProperty_nonatomic_copy(v16, v18, v17, 48);
  }
  id v21 = v2;
  self;
  id v22 = objc_alloc_init((Class)NSMutableDictionary);
  id v23 = [v21 packageDPInfo];
  [v22 setObject:v23 forKeyedSubscript:@"dp_info"];

  char v24 = [v21 packageSINF];
  [v22 setObject:v24 forKeyedSubscript:@"sinf"];

  id v25 = [v21 initialODRSize];
  [v22 setObject:v25 forKeyedSubscript:@"initial_odr_size"];

  long long v26 = [v21 backgroundAssetMetadata];
  [v22 setObject:v26 forKeyedSubscript:@"background_asset_metadata"];

  [v22 setObject:&off_10054CC48 forKeyedSubscript:@"archive_type"];
  id v27 = [v21 packageURL];

  [v22 setObject:v27 forKeyedSubscript:@"package_url"];
  [v22 setObject:&off_10054CC30 forKeyedSubscript:@"package_type"];
  char v28 = [(SQLiteMemoryEntity *)[AppPackage alloc] initWithPropertyValues:v22];

  if (v28)
  {
    unint64_t v37 = v28;
    uint64_t v30 = +[NSArray arrayWithObjects:&v37 count:1];
    if (v16) {
      objc_setProperty_atomic_copy(v16, v29, v30, 40);
    }
  }
  id v31 = [v21 onDemandResourceManifest];

  if (v31)
  {
    id v32 = sub_1002393C4();
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_1003790C4;
    v34[3] = &unk_100525200;
    id v35 = v21;
    id v36 = v16;
    [v32 modifyUsingTransaction:v34];
  }
  return v16;
}

id sub_100378CF4(id *a1)
{
  if (a1)
  {
    [a1 lock];
    id v2 = [a1[6] copy];
    [a1 unlock];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_100378FD0(id a1, AppInstall *a2)
{
  id v2 = [(SQLiteMemoryEntity *)a2 valueForProperty:@"external_id"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:v2];
  }
  else {
    id v3 = v2;
  }
  char v4 = v3;

  return v4;
}

uint64_t sub_100379058(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = +[NSOrderedSet orderedSetWithArray:*(void *)(*(void *)(a1 + 32) + 40)];
  id v5 = sub_10023845C(v3, v4);

  return 1;
}

BOOL sub_1003790C4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 onDemandResourceManifest];
  id v6 = [*(id *)(a1 + 32) bundleID];
  unint64_t v7 = sub_100424C14(*(void **)(a1 + 40));
  BOOL v8 = sub_100248A18((BOOL)v4, v5, v6, v7);

  return v8;
}

id sub_1003791B0()
{
  self;
  if (qword_1005B1048 != -1) {
    dispatch_once(&qword_1005B1048, &stru_10052A208);
  }
  unsigned int v0 = (void *)qword_1005B1040;
  return v0;
}

void sub_100379208(id a1)
{
  uint64_t v1 = objc_alloc_init(StoreKitExternalNotificationService);
  id v2 = (void *)qword_1005B1040;
  qword_1005B1040 = (uint64_t)v1;
}

void sub_1003792F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      unint64_t v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v11 + 1) + 8 * (void)v7);
        unsigned int v9 = +[GaletteStore shared];
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        void v10[2] = sub_100379470;
        void v10[3] = &unk_10052A230;
        void v10[4] = v8;
        [v9 modifyUsingTransaction:v10];

        unint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
}

id sub_100379470(uint64_t a1, void *a2)
{
  return _[a2 handleAppUninstalled:*(void *)(a1 + 32)];
}

void sub_10037947C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003794F8;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1003794F8(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 addObserver:*(void *)(a1 + 32) selector:"_handleBagChangedNotification:" name:AMSBagChangedNotification object:0];

  uint64_t v3 = *(void *)(a1 + 32);
  sub_100379564(v3);
}

void sub_100379564(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    uint64_t v1 = sub_10030B11C();
    id v2 = [v1 BOOLForKey:@"storekit-external-purchases-app-launch-sheet"];

    uint64_t v3 = sub_10030B11C();
    id v4 = [v3 stringForKey:@"countryCode"];

    id v5 = sub_10030B11C();
    uint64_t v6 = [v5 stringForKey:@"currentStorefrontCountryCodeISO3A"];

    unint64_t v7 = [v2 valuePromise];
    v23[0] = v7;
    uint64_t v8 = [v4 valuePromise];
    v23[1] = v8;
    unsigned int v9 = [v6 valuePromise];
    v23[2] = v9;
    int v10 = +[NSArray arrayWithObjects:v23 count:3];
    long long v11 = +[AMSPromise promiseWithFlattenedPromises:v10];

    id v18 = 0;
    long long v12 = [v11 resultWithTimeout:&v18 error:15.0];
    id v13 = v18;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v12 count] == (id)3)
    {
      v21[0] = @"fe";
      long long v14 = [v12 objectAtIndexedSubscript:0];
      v22[0] = v14;
      v21[1] = @"c2";
      id v15 = [v12 objectAtIndexedSubscript:1];
      v22[1] = v15;
      v21[2] = @"c3";
      uint64_t v16 = [v12 objectAtIndexedSubscript:2];
      v22[2] = v16;
      id v17 = +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:3];

      sub_1003F2074((uint64_t)AppDefaultsManager, v17, @"LastKnownGaletteValues");
    }
    else
    {
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v20 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to cache current feature value from the bag: %{public}@", buf, 0xCu);
      }
    }
  }
}

void sub_10037994C(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = [v3 processInfo];
    uint64_t v6 = [v5 bundleIdentifier];
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v4;
    *(_WORD *)&unsigned char buf[22] = 2114;
    id v93 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ presentSheetIfNeededForProcessHandle: %{public}@ for client: %{public}@", buf, 0x20u);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 32);
  unsigned int v9 = v8;
  if (v7)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v7 + 8));
    int v10 = sub_10030B11C();
    long long v11 = [v10 BOOLForKey:@"storekit-external-purchases-app-launch-sheet"];

    long long v12 = [v11 valuePromise];
    location[0] = 0;
    id v13 = [v12 resultWithTimeout:location error:15.0];
    id v14 = location[0];

    if (v14)
    {
      id v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v14;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@ Failed to fetch value from the bag: %{public}@", buf, 0x16u);
      }

      uint64_t v16 = sub_1003F1F68((uint64_t)AppDefaultsManager, @"LastKnownGaletteValues");
      id v17 = [v16 objectForKeyedSubscript:@"fe"];
      if (objc_opt_respondsToSelector()) {
        unsigned int v18 = [v17 BOOLValue];
      }
      else {
        unsigned int v18 = 0;
      }
      id v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}@ Falling back to cached value: %d", buf, 0x12u);
      }
    }
    else
    {
      LOBYTE(v1_Block_object_dispose(&a9, 8) = [v13 BOOLValue];
    }

    if (v18)
    {
      uint64_t v81 = [*(id *)(a1 + 40) bundleIdentifier];
      if (!v81)
      {
        id v45 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
        {
          uint64_t v72 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v72;
          _os_log_fault_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "%{public}@ Process handle has no bundle identifier", buf, 0xCu);
        }

        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        goto LABEL_53;
      }
      id v90 = 0;
      id v20 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v81 allowPlaceholder:0 error:&v90];
      id v79 = v90;
      uint64_t v21 = *(void *)(a1 + 48);
      id v22 = *(void **)(a1 + 32);
      id v23 = v20;
      id v24 = v22;
      id v25 = v24;
      uint64_t v80 = v23;
      if (!v21) {
        goto LABEL_48;
      }
      if (!v23)
      {
        int v46 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v25;
          _os_log_fault_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_FAULT, "%{public}@ No application found", buf, 0xCu);
        }
        id v23 = 0;
        goto LABEL_47;
      }
      id v25 = v24;
      long long v26 = sub_10030B11C();
      id v78 = [v26 stringForKey:@"countryCode"];

      id v27 = sub_10030B11C();
      char v28 = [v27 stringForKey:@"currentStorefrontCountryCodeISO3A"];

      BOOL v29 = [v78 valuePromise];
      location[0] = v29;
      uint64_t v30 = [v28 valuePromise];
      location[1] = v30;
      id v31 = +[NSArray arrayWithObjects:location count:2];
      id v32 = +[AMSPromise promiseWithFlattenedPromises:v31];

      id v91 = 0;
      id v33 = [v32 resultWithTimeout:&v91 error:15.0];
      id v77 = v91;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || ![v33 count])
      {
        id v34 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v25;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v77;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%{public}@ Failed to get any country or region code: %{public}@", buf, 0x16u);
        }

        BOOL v29 = sub_1003F1F68((uint64_t)AppDefaultsManager, @"LastKnownGaletteValues");
        id v35 = [v29 objectForKeyedSubscript:@"c2"];
        if (v35)
        {
          id v36 = [v29 objectForKeyedSubscript:@"c3"];
          BOOL v37 = v36 == 0;

          if (!v37)
          {
            id v38 = [v29 objectForKeyedSubscript:@"c2"];
            from[0] = v38;
            uint64_t v39 = [v29 objectForKeyedSubscript:@"c3"];
            from[1] = v39;
            uint64_t v40 = +[NSArray arrayWithObjects:from count:2];

            id v33 = (void *)v40;
          }
        }
        unint64_t v41 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          id v42 = [v33 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v25;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v42;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%{public}@ Falling back to cached values: %{public}@", buf, 0x16u);
        }
      }
      if ([v33 count] != (id)2)
      {
        BOOL v29 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          id v73 = [v33 count];
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v25;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&buf[14] = v73;
          *(_WORD *)&unsigned char buf[22] = 2114;
          id v93 = v77;
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}@ Expected 2 but received %{public}lu country or region code(s): %{public}@", buf, 0x20u);
        }
      }
      if (!v33)
      {
        id v44 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v25;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "[%{public}@] Could not get current storefront: %{public}@", buf, 0x16u);
        }
        goto LABEL_46;
      }
      id v43 = objc_msgSend(v80, "asd_galetteMode");
      if (v43 == (id)2)
      {
        LOBYTE(v29) = objc_msgSend(v80, "asd_canMakeExternalPurchasesForAnyCountryCodeInCountryCodes:", v33);
      }
      else if (v43 == (id)1)
      {
        __int16 v49 = objc_msgSend(v80, "asd_firstExternalLinkURLForCountryCodes:", v33);
        LOBYTE(v29) = v49 != 0;
      }
      else if (!v43)
      {
        id v44 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v25;
          _os_log_fault_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_FAULT, "%{public}@ Application doesn't have the required entitlements", buf, 0xCu);
        }
LABEL_46:

        int v46 = 0;
        id v23 = v80;
LABEL_47:

LABEL_48:
LABEL_49:
        uint64_t v47 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%{public}@ Application not eligible to show sheet", buf, 0xCu);
        }

        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        goto LABEL_52;
      }

      if ((v29 & 1) == 0) {
        goto LABEL_49;
      }
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2020000000;
      LOBYTE(v93) = 0;
      id v50 = +[GaletteStore shared];
      v87[0] = _NSConcreteStackBlock;
      v87[1] = 3221225472;
      v87[2] = sub_10037A79C;
      v87[3] = &unk_10052A258;
      long long v89 = buf;
      id v51 = v81;
      id v88 = v51;
      [v50 readUsingSession:v87];

      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        if (![*(id *)(*(void *)(a1 + 48) + 16) containsObject:v51])
        {
          [*(id *)(*(void *)(a1 + 48) + 16) addObject:v51];
          (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
          uint64_t v53 = objc_opt_new();
          uint64_t v54 = [v80 iTunesMetadata];
          uint64_t v55 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%llu", [v54 storeItemIdentifier]);
          [v53 setObject:v55 forKeyedSubscript:@"adamId"];

          unsigned int v56 = [v80 iTunesMetadata];
          uint64_t v57 = [v56 artistName];
          char v58 = v57;
          if (!v57)
          {
            char v58 = [v80 signerOrganization];
          }
          [v53 setObject:v58 forKeyedSubscript:@"developerName"];
          if (!v57) {

          }
          uint64_t v59 = +[ACAccountStore ams_sharedAccountStore];
          long long v60 = objc_msgSend(v59, "ams_activeiTunesAccount");
          CFStringRef v61 = objc_msgSend(v60, "ams_DSID");
          BOOL v62 = [v61 stringValue];
          [v53 setObject:v62 forKeyedSubscript:@"dsId"];

          unsigned int v63 = [v53 objectForKeyedSubscript:@"dsId"];
          BOOL v64 = +[NSNumber numberWithInt:v63 != 0];
          [v53 setObject:v64 forKeyedSubscript:@"isSignedIn"];

          id v66 = [ExternalNotificationConfiguration alloc];
          id Property = *(id *)(a1 + 32);
          if (Property) {
            id Property = objc_getProperty(Property, v65, 32, 1);
          }
          id v68 = Property;
          CFStringRef v69 = sub_100206094((id *)&v66->super.isa, v53, v68, *(void **)(a1 + 40));

          BOOL v70 = sub_1002061A4([StoreKitExternalNotificationPresentationTask alloc], v69);
          objc_initWeak(location, v70);
          objc_initWeak(from, *(id *)(a1 + 48));
          v82[0] = _NSConcreteStackBlock;
          v82[1] = 3221225472;
          v82[2] = sub_10037A7D4;
          v82[3] = &unk_10052A280;
          objc_copyWeak(&v85, location);
          objc_copyWeak(&v86, from);
          id v83 = v51;
          id v84 = *(id *)(a1 + 32);
          [v70 setCompletionBlock:v82];
          uint64_t v71 = *(void *)(*(void *)(a1 + 48) + 24);
          if (v71) {
            [*(id *)(v71 + 8) addOperation:v70];
          }

          objc_destroyWeak(&v86);
          objc_destroyWeak(&v85);
          objc_destroyWeak(from);
          objc_destroyWeak(location);

          goto LABEL_72;
        }
        long long v52 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v74 = *(void **)(a1 + 32);
          LODWORD(location[0]) = 138543362;
          *(id *)((char *)location + 4) = v74;
          _os_log_debug_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "%{public}@ Not presenting sheet due to existing sheet presentation", (uint8_t *)location, 0xCu);
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_72:

      _Block_object_dispose(buf, 8);
LABEL_52:

LABEL_53:
      return;
    }
  }
  else
  {
  }
  id v75 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v76 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v76;
    _os_log_debug_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "%{public}@ Not presenting sheet due to bag value", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10037A740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  objc_destroyWeak(v32);
  objc_destroyWeak(v31);
  objc_destroyWeak((id *)(v33 - 160));
  objc_destroyWeak((id *)(v33 - 144));
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id sub_10037A79C(uint64_t a1, void *a2)
{
  id result = [a2 needsThirdPartyPurchaseConfirmationWithBundleID:*(void *)(a1 + 32)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10037A7D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  [v3[2] removeObject:*(void *)(a1 + 32)];
  if (WeakRetained && (WeakRetained[24] & 1) != 0)
  {
    unsigned int v9 = +[GaletteStore shared];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10037A9DC;
    v12[3] = &unk_10052A230;
    id v13 = *(id *)(a1 + 32);
    [v9 modifyUsingTransaction:v12];

    int v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ task presentation finished successfully", buf, 0xCu);
    }

    uint64_t v4 = v13;
  }
  else
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      if (WeakRetained) {
        id Property = objc_getProperty(WeakRetained, v5, 32, 1);
      }
      else {
        id Property = 0;
      }
      id v8 = Property;
      *(_DWORD *)long long buf = 138543618;
      uint64_t v15 = v6;
      __int16 v16 = 2114;
      id v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ task presentation failed with error: %{public}@", buf, 0x16u);
    }
  }
}

id sub_10037A9DC(uint64_t a1, void *a2)
{
  return _[a2 confirmThirdPartyPurchasesForBundleID:*(void *)(a1 + 32)];
}

void sub_10037AA5C(uint64_t a1)
{
}

void sub_10037AE34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = +[ACAccountStore ams_sharedAccountStore];
    uint64_t v4 = objc_msgSend(v3, "ams_activeiTunesAccount");

    if (v4)
    {
      *(unsigned char *)(v2 + 96) = objc_msgSend(v4, "ams_isDemoAccount");
      if (*(unsigned char *)(v2 + 96))
      {
        id v5 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = objc_msgSend(v4, "ams_DSID");
          int v13 = 138543362;
          id v14 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Using retail demo account: %{public}@", (uint8_t *)&v13, 0xCu);
        }
      }
    }
  }
  uint64_t v7 = sub_100259614();
  unsigned __int8 v8 = [v7 isConnected];

  if (v8)
  {
    sub_10037B03C(*(void *)(a1 + 32), @"Startup with network");
  }
  else
  {
    unsigned int v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Creating listener to initialize network dependent items", (uint8_t *)&v13, 2u);
    }

    int v10 = +[NSNotificationCenter defaultCenter];
    uint64_t v11 = *(void *)(a1 + 32);
    long long v12 = sub_100259614();
    [v10 addObserver:v11 selector:"_handleNetworkStateDidChangeNotification:" name:@"NetworkStateDidChangeNotification" object:v12];
  }
  sub_10037B0F0(*(void *)(a1 + 32));
  sub_10037B5B8(*(void *)(a1 + 32));
}

void sub_10037B03C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v3 = objc_alloc_init(_TtC9appstored6LogKey);
    sub_10037D1E4((void *)a1, 1, v3, 0, 0.0);
    if ([*(id *)(a1 + 40) BOOLValue])
    {
      uint64_t v4 = sub_10020E0BC();
      sub_10020F654((uint64_t)v4, 7, v5, 0, 0);
    }
  }
}

void sub_10037B0F0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = +[AMSDevice deviceGUID];
    uint64_t v2 = sub_1003F2EB8();

    if (v2)
    {
      uint64_t v3 = sub_1003F2E7C();
      if ([v3 isEqualToString:v1])
      {
        uint64_t v4 = sub_1003F2EF4();
        id v5 = v4;
        if (v4 && ([v4 timeIntervalSinceNow], v6 > 129600.0))
        {
          uint64_t v7 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Arcade] Resetting device ID because its creation date is invalid", buf, 2u);
          }

          CFStringRef v8 = @"DateMismatch";
        }
        else
        {
          unsigned int v9 = sub_10030B11C();
          uint64_t v10 = (uint64_t)sub_10030D3A0((uint64_t)v9, @"ocelot-device-id-days-valid", (void *)0x16E, 0);

          if (!v10)
          {
            uint64_t v11 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[Arcade] Got invalid value for days valid, using default value", buf, 2u);
            }

            uint64_t v10 = 366;
          }
          long long v12 = 0;
          if (v5 && (v10 & 0x8000000000000000) == 0)
          {
            uint64_t v13 = 730;
            if (v10 < 730) {
              uint64_t v13 = v10;
            }
            id v14 = [v5 dateByAddingTimeInterval:(double)(86400 * v13)];
            long long v12 = v14;
            if (v14)
            {
              [v14 timeIntervalSinceNow];
              if (v15 >= 0.0) {
                goto LABEL_34;
              }
            }
          }
          __int16 v16 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[Arcade] Resetting device ID because it has expired", buf, 2u);
          }

          CFStringRef v8 = @"Expired";
        }
      }
      else
      {
        id v5 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Arcade] Resetting device ID because of device mismatch", buf, 2u);
        }
        CFStringRef v8 = @"DeviceMismatch";
      }
    }
    else
    {
      CFStringRef v8 = @"None";
    }
    uint64_t v3 = +[NSDate date];
    id v5 = sub_1003F2EF4();
    long long v12 = sub_1003F2E7C();
    id v17 = +[NSUUID UUID];
    unsigned int v18 = [v17 UUIDString];
    sub_1003F309C((uint64_t)AppDefaultsManager, v18);

    sub_1003F3034((uint64_t)AppDefaultsManager, v1);
    sub_1003F3104((uint64_t)AppDefaultsManager, v3);
    if (v12)
    {
      if (v5)
      {
        id v19 = +[NSCalendar currentCalendar];
        id v20 = [v19 components:16 fromDate:v5 toDate:v3 options:0];
        id v21 = [v20 day];
      }
      else
      {
        id v21 = 0;
      }
      v29[0] = @"deviceIdentifierRefreshed";
      id v22 = +[NSNumber numberWithInteger:v21];
      v29[1] = @"refreshReason";
      v30[0] = v22;
      v30[1] = v8;
      id v23 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:2];
      sub_10040E9A0((uint64_t)Analytics, v23, 30);

      if (os_variant_has_internal_content())
      {
        if (sub_1003F331C())
        {
          id v24 = objc_alloc((Class)AMSDialogRequest);
          id v25 = +[NSString stringWithFormat:@"The Arcade device identifier rolled over after %ld days.", v21];
          id v26 = [v24 initWithTitle:@"Arcade Device ID Rollover" message:v25];

          id v27 = +[AMSDialogAction actionWithTitle:@"OK"];
          [v26 setDefaultAction:v27];

          sub_10033CE18((uint64_t)InteractiveRequestPresenter, v26, 0);
        }
      }
    }
LABEL_34:
  }
}

void sub_10037B5B8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = sub_1002188DC();
    uint64_t v2 = sub_10021911C((uint64_t)v1);

    uint64_t v3 = +[ACAccountStore ams_sharedAccountStore];
    uint64_t v4 = objc_msgSend(v3, "ams_activeiTunesAccount");

    id v5 = [v2 lastObject];
    uint64_t v7 = v5;
    if (v5) {
      BOOL v8 = v4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      if (!v4)
      {
        int v15 = 0;
        goto LABEL_18;
      }
      [v2 count];
      BOOL v9 = 0;
    }
    else
    {
      id v10 = objc_getProperty(v5, v6, 8, 1);
      uint64_t v11 = sub_100222B6C(v10);
      uint64_t v12 = objc_msgSend(v4, "ams_DSID");
      id v14 = (void *)v12;
      if (v11 == (void *)v12)
      {
        BOOL v9 = 1;
        id v16 = objc_getProperty(v7, v13, 8, 1);
        if (sub_100222C14(v16) != 2)
        {
          id v18 = objc_getProperty(v7, v17, 8, 1);
          BOOL v9 = sub_100222C14(v18) == 1;
        }
      }
      else
      {
        BOOL v9 = 0;
      }

      if ([v2 count] && v9)
      {
        int v15 = 1;
LABEL_18:
        id v19 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)BOOL v29 = v15;
          *(_WORD *)&v29[4] = 2048;
          *(void *)&v29[6] = [v2 count];
          _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[AccountEvent] Not adding an initial account event hasInitialEventForCurrentAccount: %d eventCount: %ld", buf, 0x12u);
        }
LABEL_23:

        return;
      }
    }
    id v20 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = objc_msgSend(v4, "ams_DSID");
      *(_DWORD *)long long buf = 138543874;
      *(void *)BOOL v29 = v21;
      *(_WORD *)&v29[8] = 1024;
      *(_DWORD *)&v29[10] = v9;
      __int16 v30 = 2048;
      id v31 = [v2 count];
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[AccountEvent] There is not an initial account event for account: %{public}@. Attempting to add one. hasInitialEventForCurrentAccount: %{BOOL}d eventCount: %ld", buf, 0x1Cu);
    }
    id v22 = sub_100222A0C([AccountEvent alloc], v4);
    id v19 = +[NSDate date];
    [v22 setValue:v19 forProperty:@"active_start_time"];
    [v22 setValue:&off_10054CC78 forProperty:@"event_type"];
    id v23 = sub_10038F000();
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    id v25[2] = sub_100385478;
    void v25[3] = &unk_1005228E8;
    id v26 = v22;
    id v27 = v4;
    id v24 = v22;
    [v23 modifyUsingTransaction:v25];

    goto LABEL_23;
  }
}

id sub_10037B958()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10037B9FC;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B1058 != -1) {
    dispatch_once(&qword_1005B1058, block);
  }
  unsigned int v0 = (void *)qword_1005B1050;
  return v0;
}

void sub_10037B9FC(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B1050;
  qword_1005B1050 = (uint64_t)v1;
}

uint64_t sub_10037BA34(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10037BB0C;
  v3[3] = &unk_1005240F8;
  void v3[4] = a1;
  void v3[5] = &v4;
  +[ApplicationProxy enumerateApplicationsOfType:0 usingBlock:v3];
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10037BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10037BB0C(uint64_t a1, void *a2)
{
  BOOL result = sub_10037BB4C(*(void *)(a1 + 32), a2);
  if (result) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return result;
}

BOOL sub_10037BB4C(BOOL a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1) {
    a1 = [v3 isInstalled] && (objc_msgSend(v4, "isArcade") & 1) != 0;
  }

  return a1;
}

void sub_10037BBA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10037BC74;
    block[3] = &unk_1005221F0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10037BC74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  sub_1003A8520((uint64_t)MetricsContext, 0);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  sub_10037BCE8(v2, v3, v4, *(void **)(a1 + 48));
}

void sub_10037BCE8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  BOOL v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if (v8) {
        uint64_t v11 = (void *)v8[9];
      }
      else {
        uint64_t v11 = 0;
      }
      id v12 = v11;
      *(_DWORD *)long long buf = 138412546;
      id v18 = v12;
      __int16 v19 = 2114;
      id v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[%@] Flushing metrics with reason: %{public}@", buf, 0x16u);
    }
    uint64_t v13 = [[_TtC9appstored10ASEMetrics alloc] initWithType:1];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100383D04;
    v14[3] = &unk_100521C18;
    int v15 = v8;
    id v16 = v9;
    [(ASEMetrics *)v13 flushWithCompletionHandler:v14];
  }
}

void sub_10037BE84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037BF34;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037BF34(uint64_t a1)
{
  if (sub_10037C0A4(*(void *)(a1 + 32)))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    sub_10037C140(v2, 4, v3);
  }
  else
  {
    id v4 = sub_1003A84D8((uint64_t)MetricsContext, 4);
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138543362;
      BOOL v8 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@] User not opted-in to list app events", (uint8_t *)&v7, 0xCu);
    }

    if (*(void *)(a1 + 40))
    {
      id v6 = ASDErrorWithTitleAndMessage();
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

id sub_10037C0A4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = sub_1003DA6D4();
  if ([v1 isHRNMode])
  {
    id v2 = 0;
  }
  else
  {
    id v3 = sub_10030B11C();
    id v4 = v3;
    if (v3) {
      id v2 = sub_10030CE24(v3, @"arcade-payout-enabled", (void *)1, 1);
    }
    else {
      id v2 = 0;
    }
  }
  return v2;
}

void sub_10037C140(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t v6 = sub_1003A8520((uint64_t)MetricsContext, a2);
  uint64_t v7 = v6;
  if (a2 == 4)
  {
    BOOL v8 = sub_10030B11C();
    id v9 = sub_10030D3A0((uint64_t)v8, @"ocelot-payout-qualifying-duration-seconds", (void *)0x3C, 0);

    if (v7)
    {
      *(void *)(v7 + 80) = v9;
LABEL_6:
      *(unsigned char *)(v7 + _Block_object_dispose(&a9, 8) = 1;
    }
  }
  else if (v6)
  {
    goto LABEL_6;
  }
  id v10 = objc_opt_new();
  uint64_t v11 = sub_10038351C(a1, (void *)v7);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v12 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v26;
    do
    {
      int v15 = 0;
      do
      {
        if (*(void *)v26 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = sub_1003F4D5C(*(void *)(*((void *)&v25 + 1) + 8 * (void)v15));
        [v10 addObject:v16];

        int v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v13);
  }
  id v17 = *(NSObject **)(a1 + 56);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  void v20[2] = sub_100383E28;
  v20[3] = &unk_100522830;
  id v21 = v10;
  id v22 = 0;
  id v23 = (id)v7;
  id v24 = v5;
  id v18 = (id)v7;
  id v19 = v10;
  dispatch_async(v17, v20);

LABEL_15:
}

void sub_10037C38C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037C43C;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037C43C(uint64_t a1)
{
  id v2 = sub_1003A84D8((uint64_t)MetricsContext, 3);
  if (sub_10022623C(*(void *)(a1 + 32)))
  {
    sub_10037C140(*(void *)(a1 + 32), 3, *(void **)(a1 + 40));
  }
  else
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138543362;
      uint64_t v6 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[%{public}@] User not opted-in to list app events", (uint8_t *)&v5, 0xCu);
    }

    if (*(void *)(a1 + 40))
    {
      id v4 = ASDErrorWithTitleAndMessage();
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

void sub_10037C578(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = sub_1003DA6D4();
    unsigned __int8 v8 = [v7 isHRNMode];

    if ((v8 & 1) == 0)
    {
      id v9 = *(NSObject **)(a1 + 64);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10037C674;
      block[3] = &unk_1005212D8;
      void block[4] = a1;
      id v11 = v5;
      id v12 = v6;
      dispatch_async(v9, block);
    }
  }
}

void sub_10037C674(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  id v4 = v2;
  if (v1)
  {
    id v5 = ASDLogHandleForCategory();
    id v6 = &unk_100488000;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] handleAppSubscriptionChange", buf, 0xCu);
    }

    id v7 = +[ACAccountStore ams_sharedAccountStore];
    unsigned __int8 v8 = objc_msgSend(v7, "ams_activeiTunesAccount");

    if (v8)
    {
      *(unsigned char *)(v1 + 96) = objc_msgSend(v8, "ams_isDemoAccount");
      if (*(unsigned char *)(v1 + 96))
      {
        id v9 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = objc_msgSend(v8, "ams_DSID");
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v4;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Using retail demo account: %{public}@", buf, 0x16u);
        }
      }
    }
    id v11 = [*(id *)(v1 + 32) copy];
    id v12 = *(void **)(v1 + 40);
    if (v12) {
      unsigned int v13 = [v12 BOOLValue] ^ 1;
    }
    else {
      unsigned int v13 = 1;
    }
    unsigned int v60 = v13;
    id v14 = *(id *)(v1 + 48);
    int v15 = [v3 firstObject];
    sub_100384144(v1, v15, v8, v4);

    unsigned int v16 = [*(id *)(v1 + 40) BOOLValue];
    if (!v11) {
      goto LABEL_19;
    }
    uint64_t v17 = objc_msgSend(v8, "ams_DSID");
    if (!v17) {
      goto LABEL_19;
    }
    id v18 = (void *)v17;
    id v19 = objc_msgSend(v8, "ams_DSID");
    unsigned int v20 = [v11 isEqualToNumber:v19];

    id v6 = (void *)&unk_100488000;
    if (((v16 ^ 1 | v60) & 1) == 0 && v20)
    {
      id v21 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = objc_msgSend(v8, "ams_DSID");
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@] Skipping as subscription state has not changed for account: %{public}@", buf, 0x16u);
      }
    }
    else
    {
LABEL_19:
      if (v16)
      {
        id v23 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          id v24 = objc_msgSend(v8, "ams_DSID");
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v4;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v24;
          *(_WORD *)&unsigned char buf[22] = 2114;
          unsigned int v63 = v11;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[%@] Handling subscription change due to fsEntitlement change with account: %{public}@ original: %{public}@", buf, 0x20u);
        }
        if (v60)
        {
          long long v25 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            long long v26 = objc_msgSend(v8, "ams_DSID");
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v4;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%@] Resetting arcade activities due to fsEntitlement change with account: %{public}@", buf, 0x16u);
          }
          sub_1003A8520((uint64_t)MetricsContext, 4);
          long long v27 = (unsigned char *)objc_claimAutoreleasedReturnValue();
          long long v28 = sub_1003A8520((uint64_t)MetricsContext, 3);
          if (v27) {
            v27[9] = 1;
          }
          sub_10037E4D4(v1, @"Subscription change", 1, v27);
          sub_10037E4D4(v1, @"Subscription change", 1, v28);
        }
        BOOL v29 = *(NSObject **)(v1 + 128);
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_100384A80;
        unsigned int v63 = &unk_100521388;
        v64[0] = v1;
        dispatch_async(v29, buf);
        sub_100384A98(v1);
      }
      else
      {
        uint64_t v30 = +[NSNumber numberWithBool:0];
        id v31 = *(void **)(v1 + 40);
        *(void *)(v1 + 40) = v30;

        id v32 = ASDLogHandleForCategory();
        BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        if (v60)
        {
          if (v33)
          {
            *(_DWORD *)long long buf = v6[43];
            *(void *)&uint8_t buf[4] = v4;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%@] Not subscribed prior to fsEntitlement change", buf, 0xCu);
          }
        }
        else
        {
          if (v33)
          {
            id v34 = objc_msgSend(v8, "ams_DSID");
            *(_DWORD *)long long buf = 138413058;
            *(void *)&uint8_t buf[4] = v4;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v14;
            *(_WORD *)&unsigned char buf[22] = 2114;
            unsigned int v63 = v11;
            LOWORD(v64[0]) = 2114;
            *(void *)((char *)v64 + 2) = v34;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%@] fsEntitlement changed to Unsubscribed from: %{public}@ originalAccountID: %{public}@ currentAccount: %{public}@", buf, 0x2Au);
          }
          id v35 = sub_10020E0BC();
          sub_10020FFE0((uint64_t)v35, 1);

          id v36 = sub_10020E0BC();
          sub_10020FFE0((uint64_t)v36, 2);

          if (v8)
          {
            BOOL v37 = objc_msgSend(v8, "ams_DSID");
            id v38 = v37;
            if (v11 && v37)
            {
              uint64_t v39 = objc_msgSend(v8, "ams_DSID");
              unsigned int v40 = [v39 isEqualToNumber:v11];

              if (v40)
              {
                unint64_t v41 = *(NSObject **)(v1 + 128);
                *(void *)long long buf = _NSConcreteStackBlock;
                *(void *)&uint8_t buf[8] = 3221225472;
                *(void *)&uint8_t buf[16] = sub_100384B14;
                unsigned int v63 = &unk_100521388;
                v64[0] = v1;
                dispatch_async(v41, buf);
              }
            }
            else
            {
            }
          }
          id v42 = v11;
          id v58 = v14;
          id v43 = v14;
          id v61 = v4;
          id v44 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int v65 = 138412802;
            id v66 = v61;
            __int16 v67 = 2114;
            id v68 = v42;
            __int16 v69 = 2114;
            id v70 = v43;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[%@] Sign out start for subscribed accountID: %{public}@ with subscriptionState: %{public}@", v65, 0x20u);
          }

          id v59 = v43;
          id v45 = sub_1003A8520((uint64_t)MetricsContext, 4);
          int v46 = sub_1003A8520((uint64_t)MetricsContext, 3);
          sub_10027BF54((uint64_t)v46, v43);
          if (v42)
          {
            uint64_t v47 = +[ACAccountStore ams_sharedAccountStore];
            __int16 v49 = objc_msgSend(v47, "ams_iTunesAccountWithDSID:", v42);
            if (v45) {
              objc_setProperty_nonatomic_copy(v45, v48, v49, 128);
            }

            id v50 = +[ACAccountStore ams_sharedAccountStore];
            long long v52 = objc_msgSend(v50, "ams_iTunesAccountWithDSID:", v42);
            if (v46) {
              objc_setProperty_nonatomic_copy(v46, v51, v52, 128);
            }

            uint64_t v53 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              if (v46) {
                uint64_t v54 = (void *)v46[16];
              }
              else {
                uint64_t v54 = 0;
              }
              id v55 = v54;
              *(_DWORD *)int v65 = 138412802;
              id v66 = v61;
              __int16 v67 = 2114;
              id v68 = v42;
              __int16 v69 = 2114;
              id v70 = v55;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "[%@] Using subscribed accountID: %{public}@ account: %{public}@ for metrics summary / payout posting", v65, 0x20u);
            }
            id v43 = v59;
          }
          if (sub_10037C0A4(v1)) {
            sub_10037DD68(v1, v45);
          }
          if (sub_10022623C(v1)) {
            sub_10037DD68(v1, v46);
          }
          sub_100384F48(v45);
          sub_100384F48(v46);
          sub_1003822C4(v1);
          sub_100384A98(v1);
          unsigned int v56 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int v65 = 138412802;
            id v66 = v61;
            __int16 v67 = 2114;
            id v68 = v42;
            __int16 v69 = 2114;
            id v70 = v43;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "[%@] Sign out complete for accountID: %{public}@ subscribe with subscriptionState: %{public}@", v65, 0x20u);
          }

          id v6 = &unk_100488000;
          id v14 = v58;
        }
      }
    }
    uint64_t v57 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v65 = v6[43];
      id v66 = v4;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "[%@] handleAppSubscriptionChange complete", v65, 0xCu);
    }
  }
}

BOOL sub_10037D01C(uint64_t a1, char a2, void *a3, double a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v17 = 0;
  id v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  id v14 = sub_100018328;
  int v15 = sub_100017D50;
  id v16 = 0;
  id v5 = *(NSObject **)(a1 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10037D15C;
  block[3] = &unk_10052A2B0;
  void block[4] = a1;
  void block[5] = &v17;
  char v10 = a2;
  *(double *)&void block[7] = a4;
  block[6] = &v11;
  dispatch_sync(v5, block);
  if (a3)
  {
    id v6 = (void *)v12[5];
    if (v6) {
      *a3 = v6;
    }
  }
  BOOL v7 = *((unsigned char *)v18 + 24) != 0;
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
  return v7;
}

void sub_10037D15C(uint64_t a1)
{
  id v2 = objc_alloc_init(_TtC9appstored6LogKey);
  id v3 = *(void **)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 64);
  double v5 = *(double *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v6 + 40);
  unsigned __int8 v7 = sub_10037D1E4(v3, v4, v2, &obj, v5);
  objc_storeStrong((id *)(v6 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7;
}

void *sub_10037D1E4(void *a1, int a2, void *a3, void *a4, double a5)
{
  id v9 = a3;
  if (a1)
  {
    char v10 = (void *)a1[5];
    if (v10) {
      BOOL v11 = a2 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      uint64_t v36 = 0;
      BOOL v37 = &v36;
      uint64_t v38 = 0x3032000000;
      uint64_t v39 = sub_100018328;
      unsigned int v40 = sub_100017D50;
      id v41 = 0;
      uint64_t v30 = 0;
      id v31 = &v30;
      uint64_t v32 = 0x3032000000;
      BOOL v33 = sub_100018328;
      id v34 = sub_100017D50;
      id v35 = 0;
      id v12 = +[ACAccountStore ams_sharedAccountStore];
      uint64_t v13 = objc_msgSend(v12, "ams_activeiTunesAccount");

      if (v13)
      {
        dispatch_semaphore_t v14 = dispatch_semaphore_create(0);
        int v15 = +[SubscriptionEntitlementsCoordinator sharedInstance];
        id v16 = sub_100416894((uint64_t)XPCRequestToken, 1);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100383E78;
        void v26[3] = &unk_100528A78;
        long long v28 = &v30;
        BOOL v29 = &v36;
        uint64_t v17 = v14;
        long long v27 = v17;
        sub_100321A50(v15, 1, v16, 0, 0, 0, v26);

        if (a5 <= 0.0)
        {
          dispatch_semaphore_wait(v17, 0xFFFFFFFFFFFFFFFFLL);
        }
        else
        {
          dispatch_time_t v18 = dispatch_time(0, (uint64_t)(a5 * 1000000000.0));
          if (dispatch_semaphore_wait(v17, v18))
          {
            uint64_t v19 = ASDErrorWithTitleAndMessage();
            char v20 = (void *)v37[5];
            void v37[5] = v19;
          }
        }
        if (a4)
        {
          id v22 = (void *)v37[5];
          if (v22) {
            *a4 = v22;
          }
        }
        id v21 = (id)v31[5];
      }
      else
      {
        id v21 = 0;
      }

      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&v36, 8);

      id v23 = +[ACAccountStore ams_sharedAccountStore];
      id v24 = objc_msgSend(v23, "ams_activeiTunesAccount");

      sub_100384144((uint64_t)a1, v21, v24, v9);
      char v10 = (void *)a1[5];
    }
    a1 = [v10 BOOLValue];
  }

  return a1;
}

void sub_10037D4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10037D510(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    unsigned __int8 v7 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10037D5DC;
    block[3] = &unk_1005221F0;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10037D5DC(void *a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Arcade] Record app event: [%{public}@]", (uint8_t *)&buf, 0xCu);
  }

  uint64_t v4 = a1[5];
  uint64_t v15 = a1[4];
  id v5 = +[NSArray arrayWithObjects:&v15 count:1];
  id v6 = (void *)a1[6];
  id v7 = v5;
  id v8 = v6;
  if (v4)
  {
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    id v11 = sub_10038F000();
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    uint64_t v17 = sub_100385120;
    dispatch_time_t v18 = &unk_10052A3D8;
    id v19 = v7;
    uint64_t v20 = v9;
    uint64_t v21 = v10;
    [v11 modifyUsingTransaction:&buf];

    if (v8)
    {
      uint64_t v12 = *(NSObject **)(v4 + 56);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      void v13[2] = sub_100385458;
      v13[3] = &unk_100521F40;
      id v14 = v8;
      dispatch_async(v12, v13);
    }
  }
}

void sub_10037D7E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037D898;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037D898(uint64_t a1)
{
  id v2 = sub_1003A8520((uint64_t)MetricsContext, 3);
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      uint64_t v4 = (void *)v2[9];
    }
    else {
      uint64_t v4 = 0;
    }
    id v5 = v4;
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Recording launch events", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = sub_1003A8520((uint64_t)MetricsContext, 4);
  sub_10037D9C4(v6);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10037D9C4(uint64_t a1)
{
  if (a1)
  {
    dispatch_semaphore_t v1 = dispatch_semaphore_create(0);
    id v2 = sub_1002E1CF4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100385470;
    v8[3] = &unk_100521710;
    id v3 = v1;
    id v9 = v3;
    sub_1002E5514((uint64_t)v2, 9, v8);

    dispatch_time_t v4 = dispatch_time(0, 15000000000);
    if (dispatch_semaphore_wait(v3, v4))
    {
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = objc_opt_class();
        *(_DWORD *)long long buf = 138543362;
        id v11 = v6;
        id v7 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@]: Timed out waiting to sync launches", buf, 0xCu);
      }
    }
  }
}

void sub_10037DB44(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037DBF4;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037DBF4(uint64_t a1)
{
  id v2 = sub_1003A84D8((uint64_t)MetricsContext, 4);
  unsigned int v3 = sub_10037C0A4(*(void *)(a1 + 32));
  dispatch_time_t v4 = ASDLogHandleForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v9 = 138543362;
      uint64_t v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Posting Metrics", (uint8_t *)&v9, 0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = sub_1003A8520((uint64_t)MetricsContext, 4);
    sub_10037DD68(v6, v7);

    int v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (v5)
    {
      int v9 = 138543362;
      uint64_t v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Not enabled", (uint8_t *)&v9, 0xCu);
    }

    int v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v8();
}

void sub_10037DD68(uint64_t a1, void *a2)
{
  unsigned int v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
      if (v3[4] == 4)
      {
        BOOL v5 = sub_10030B11C();
        id v6 = sub_10030D3A0((uint64_t)v5, @"ocelot-payout-qualifying-duration-seconds", (void *)0x3C, 0);

        v4[10] = v6;
      }
      id v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = (id)v4[9];
        *(_DWORD *)long long buf = 138412290;
        id v25 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Posting arcade metrics", buf, 0xCu);
      }
      *((unsigned char *)v4 + 9) = 1;
      if (v4[4] == 3) {
        sub_10037B0F0(a1);
      }
      int v9 = sub_10038351C(a1, v4);
      if ([v9 count])
      {
        dispatch_semaphore_t v10 = dispatch_semaphore_create(0);
        id v11 = [[_TtC9appstored10ASEMetrics alloc] initWithType:1];
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_100384D18;
        void v22[3] = &unk_100521388;
        dispatch_semaphore_t v23 = v10;
        uint64_t v12 = v10;
        [(ASEMetrics *)v11 enqueueEvents:v9 flushEvents:0 completionHandler:v22];

        dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v13 = sub_1003A8568(v4);
        id v14 = sub_10038F000();
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_100384D20;
        v18[3] = &unk_10052A3B0;
        int v9 = v9;
        id v19 = v9;
        uint64_t v21 = v13;
        uint64_t v15 = v4;
        id v20 = v15;
        [v14 modifyUsingTransaction:v18];

        sub_100383BA0(a1, v15, @"Post Completed");
      }
      else
      {
        uint64_t v16 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          id v17 = (id)v4[9];
          *(_DWORD *)long long buf = 138412290;
          id v25 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] No events to report", buf, 0xCu);
        }
        sub_100383BA0(a1, v4, @"Nothing to Post");
      }
    }
    else
    {
      int v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error creating context to post", buf, 2u);
      }
    }
  }
}

void sub_10037E0DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    BOOL v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037E18C;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037E18C(uint64_t a1)
{
  id v2 = sub_1003A84D8((uint64_t)MetricsContext, 3);
  int v3 = sub_10022623C(*(void *)(a1 + 32));
  dispatch_time_t v4 = ASDLogHandleForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v9 = 138543362;
      dispatch_semaphore_t v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Posting Metrics", (uint8_t *)&v9, 0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = sub_1003A8520((uint64_t)MetricsContext, 3);
    sub_10037DD68(v6, v7);

    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (v5)
    {
      int v9 = 138543362;
      dispatch_semaphore_t v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Not enabled", (uint8_t *)&v9, 0xCu);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v8();
}

void sub_10037E300(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    BOOL v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037E3B0;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037E3B0(uint64_t a1)
{
  uint64_t v2 = sub_1003A8520((uint64_t)MetricsContext, 3);
  id v3 = (void *)v2;
  if (v2) {
    *(unsigned char *)(v2 + 10) = 1;
  }
  dispatch_time_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (v3) {
      BOOL v5 = (void *)v3[9];
    }
    else {
      BOOL v5 = 0;
    }
    id v6 = v5;
    int v7 = 138412290;
    id v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Resetting metrics", (uint8_t *)&v7, 0xCu);
  }
  sub_10037E4D4(*(void *)(a1 + 32), @"External request", 1, v3);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10037E4D4(uint64_t a1, void *a2, int a3, void *a4)
{
  id v17 = a2;
  int v7 = a4;
  id v8 = v7;
  if (a1)
  {
    if (!v7)
    {
LABEL_20:
      sub_10037B5B8(a1);
      goto LABEL_21;
    }
    uint64_t v9 = *((void *)v7 + 4);
    if (v9 == 3)
    {
      sub_1003A85C0((uint64_t)v7);
      sub_100384F48(v8);
      if (!a3 || !sub_10022623C(a1)) {
        goto LABEL_20;
      }
      uint64_t v13 = sub_10020E0BC();
      id v14 = (void *)v13;
      if (!v13) {
        goto LABEL_19;
      }
      uint64_t v15 = 1;
    }
    else
    {
      if (v9 != 4) {
        goto LABEL_20;
      }
      dispatch_semaphore_t v10 = sub_1003F2F30();

      if (!v10)
      {
        id v11 = +[NSUUID UUID];
        uint64_t v12 = [v11 UUIDString];

        sub_1003F31D0((uint64_t)AppDefaultsManager, v12);
      }
      if (v8[9]
        || (sub_1002E1F40((uint64_t)MetricsCoordinator, 4),
            uint64_t v16 = objc_claimAutoreleasedReturnValue(),
            v16,
            !v16))
      {
        sub_1003A85C0((uint64_t)v8);
      }
      sub_100384F48(v8);
      if (!a3 || !sub_10037C0A4(a1)) {
        goto LABEL_20;
      }
      uint64_t v13 = sub_10020E0BC();
      id v14 = (void *)v13;
      if (!v13) {
        goto LABEL_19;
      }
      uint64_t v15 = 2;
    }
    sub_10020F654(v13, v15, v17, 1, 0);
LABEL_19:

    goto LABEL_20;
  }
LABEL_21:
}

void sub_10037E674(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    BOOL v5 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10037E718;
    block[3] = &unk_100521F40;
    id v7 = v3;
    dispatch_async(v5, block);
  }
}

void sub_10037E718(uint64_t a1)
{
  uint64_t v2 = sub_1003A84D8((uint64_t)MetricsContext, 4);
  id v3 = sub_1003F2F6C();
  dispatch_time_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (v3)
    {
      [v3 timeIntervalSince1970];
      uint64_t v6 = (uint64_t)v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
    int v9 = 138543618;
    dispatch_semaphore_t v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Payout metrics reset with current payout reset time: %{time_t}ld", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v7 = sub_10020E0BC();
  id v8 = (void *)v7;
  if (v7) {
    sub_10020F654(v7, 5, @"Rescheduling", 1, 0);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10037E870(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    double v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037E920;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037E920(uint64_t a1)
{
  uint64_t v2 = sub_1003A8520((uint64_t)MetricsContext, 4);
  id v3 = (void *)v2;
  if (v2) {
    *(_WORD *)(v2 + 9) = 257;
  }
  uint64_t v4 = sub_10020E0BC();
  double v5 = (void *)v4;
  if (v4) {
    sub_10020F654(v4, 5, @"Rescheduling", 1, 0);
  }

  sub_10037E4D4(*(void *)(a1 + 32), @"External request", 1, v3);
  uint64_t v6 = sub_1002E1F40((uint64_t)MetricsCoordinator, 4);
  id v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (v3) {
      id v8 = (void *)v3[9];
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;
    if (v6)
    {
      [v6 timeIntervalSince1970];
      uint64_t v11 = (uint64_t)v10;
    }
    else
    {
      uint64_t v11 = 0;
    }
    int v12 = 138412546;
    id v13 = v9;
    __int16 v14 = 2048;
    uint64_t v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] External payout metrics reset with current interval start time: %{time_t}ld", (uint8_t *)&v12, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10037EAC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v6) {
      (*((void (**)(id, uint64_t, void))v6 + 2))(v6, 1, 0);
    }
    id v8 = *(NSObject **)(a1 + 64);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10037EBA0;
    v9[3] = &unk_1005218C0;
    void v9[4] = a1;
    id v10 = v5;
    dispatch_async(v8, v9);
  }
}

void sub_10037EBA0(uint64_t a1)
{
  uint64_t v2 = [[_TtC9appstored6LogKey alloc] initWithCategory:@"Arcade/Sbsync"];
  id v3 = sub_10037EDD8(*(void **)(a1 + 32), v2);
  uint64_t v4 = ASDLogHandleForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      id v6 = objc_msgSend(*(id *)(a1 + 40), "ams_DSID");
      int v13 = 138412802;
      __int16 v14 = v2;
      __int16 v15 = 2114;
      uint64_t v16 = v6;
      __int16 v17 = 2114;
      dispatch_time_t v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Signout sbsync started for active accountID: %{public}@ subscribed accountID: %{public}@", (uint8_t *)&v13, 0x20u);
    }
    uint64_t v4 = sub_1002CD794([SbsyncTask alloc], 1);
    sub_1002CEF80((uint64_t)v4, v2);
    if (v4) {
      objc_setProperty_nonatomic_copy(v4, v7, *(id *)(a1 + 40), 64);
    }
    [v4 setCompletionBlock:&stru_10052A2D0];
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 136);
    if (v8) {
      [*(id *)(v8 + 8) addOperation:v4];
    }
    id v9 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    int v13 = 138412290;
    __int16 v14 = v2;
    id v10 = "[%@] Signout sbsync complete";
    uint64_t v11 = v9;
    uint32_t v12 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v13, v12);
LABEL_13:

    goto LABEL_14;
  }
  if (v5)
  {
    id v9 = objc_msgSend(*(id *)(a1 + 40), "ams_DSID");
    int v13 = 138412802;
    __int16 v14 = v2;
    __int16 v15 = 2114;
    uint64_t v16 = v9;
    __int16 v17 = 2114;
    dispatch_time_t v18 = 0;
    id v10 = "[%@] Skipping signout sbsync for active accountID: %{public}@ subscribed accountID: %{public}@";
    uint64_t v11 = v4;
    uint32_t v12 = 32;
    goto LABEL_12;
  }
LABEL_14:
}

id sub_10037EDD8(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = +[ACAccountStore ams_sharedAccountStore];
    BOOL v5 = objc_msgSend(v4, "ams_activeiTunesAccount");

    id v6 = objc_msgSend(v5, "ams_DSID");
    id v22 = 0;
    BOOL v7 = sub_1002CEAE8((uint64_t)SbsyncTask, v6, &v22);
    id v8 = v22;

    if (v8)
    {
      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v19 = objc_msgSend(v5, "ams_DSID");
        *(_DWORD *)long long buf = 138412546;
        id v24 = v3;
        __int16 v25 = 2114;
        long long v26 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@] Error looking up subscription bag status for account: %{public}@", buf, 0x16u);
      }
    }
    if (v7)
    {
      unsigned int v10 = 0;
      unsigned int v11 = 1;
    }
    else
    {
      id v21 = 0;
      unsigned int v11 = sub_10037D1E4(a1, 1, v3, &v21, 0.0);
      id v12 = v21;
      if (v12)
      {
        int v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          id v20 = objc_msgSend(v5, "ams_DSID");
          *(_DWORD *)long long buf = 138412802;
          id v24 = v3;
          __int16 v25 = 2114;
          long long v26 = v20;
          __int16 v27 = 2114;
          v28[0] = v12;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@] Error looking up fsEntitlement status for account: %{public}@ error: %{public}@", buf, 0x20u);
        }
      }

      unsigned int v10 = v11;
    }
    __int16 v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v15 = v7;
      uint64_t v16 = objc_msgSend(v5, "ams_DSID");
      *(_DWORD *)long long buf = 138413058;
      id v24 = v3;
      __int16 v25 = 2114;
      long long v26 = v16;
      __int16 v27 = 1024;
      LODWORD(v28[0]) = v15;
      WORD2(v28[0]) = 1024;
      *(_DWORD *)((char *)v28 + 6) = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] Subscribed accountID: %{public}@ bag subscribed: %d fsEntitlement subscribed: %{BOOL}d", buf, 0x22u);
    }
    if (v11)
    {
      __int16 v17 = objc_msgSend(v5, "ams_DSID");

      if (v17)
      {
        __int16 v17 = objc_msgSend(v5, "ams_DSID");
      }
    }
    else
    {
      __int16 v17 = 0;
    }
  }
  else
  {
    __int16 v17 = 0;
  }

  return v17;
}

void sub_10037F0E8(id a1)
{
  dispatch_semaphore_t v1 = sub_10020E0BC();
  if (v1)
  {
    id v2 = v1;
    sub_10020F654((uint64_t)v1, 7, @"Activity Complete", 1, 0);
    dispatch_semaphore_t v1 = v2;
  }
}

void sub_10037F148(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    unsigned int v10 = *(NSObject **)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10037F23C;
    v11[3] = &unk_100522448;
    id v12 = v7;
    id v13 = v8;
    uint64_t v14 = a1;
    id v15 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_10037F23C(uint64_t a1)
{
  id v2 = sub_1002CD794([SbsyncTask alloc], 0);
  id v3 = [[_TtC9appstored6LogKey alloc] initWithCategory:@"Sbsync" base:*(void *)(a1 + 32)];
  sub_1002CEF80((uint64_t)v2, v3);

  BOOL v5 = *(void **)(a1 + 40);
  if (v5 && v2) {
    objc_setProperty_nonatomic_copy(v2, v4, v5, 96);
  }
  objc_initWeak(&location, v2);
  id v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  id v9 = sub_10037F3B8;
  unsigned int v10 = &unk_10052A2F8;
  objc_copyWeak(&v13, &location);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  [v2 setCompletionBlock:&v7];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 136);
  if (v6) {
    objc_msgSend(*(id *)(v6 + 8), "addOperation:", v2, v7, v8, v9, v10, v11);
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void sub_10037F398(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10037F3B8(uint64_t a1)
{
  self = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v2 = sub_10020E0BC();
  id v3 = (void *)v2;
  if (v2) {
    sub_10020F654(v2, 7, *(void **)(a1 + 32), 1, 0);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  id Property = self;
  if (self)
  {
    uint64_t v7 = self[24] & 1;
    id Property = objc_getProperty(self, v4, 32, 1);
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = Property;
  (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, v7, v8);
}

void sub_10037F494(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = *(NSObject **)(a1 + 128);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10037F574;
    void v10[3] = &unk_10052A320;
    void v10[4] = a1;
    id v11 = v7;
    char v13 = a3;
    id v12 = v8;
    dispatch_async(v9, v10);
  }
}

void sub_10037F574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 56);
  id v10 = 0;
  uint64_t v5 = sub_10037F620(v2, v3, v4, &v10);
  id v6 = v10;
  uint64_t v7 = sub_10020E0BC();
  id v8 = (void *)v7;
  if (v7) {
    sub_10020F654(v7, 7, *(void *)(a1 + 40), 1, 0);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, v5, v6);
  }
}

uint64_t sub_10037F620(uint64_t result, void *a2, char a3, void *a4)
{
  if (result)
  {
    uint64_t v6 = result;
    id v7 = a2;
    id v8 = +[ACAccountStore ams_sharedAccountStore];
    uint64_t v9 = objc_msgSend(v8, "ams_activeiTunesAccount");

    id v10 = [[_TtC9appstored6LogKey alloc] initWithCategory:@"Sbsync" base:v7];
    id v11 = sub_10030B11C();
    id v41 = 0;
    id v12 = sub_10030B800((uint64_t)v11, @"arcade-refresh-keybag-on-demand", &v41);
    char v13 = (_TtC9appstored6LogKey *)v41;

    if (v13)
    {
      uint64_t v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138543362;
        id v44 = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Error fetching refresh on demand value: %{public}@", buf, 0xCu);
      }
    }
    if (v12)
    {
      unsigned int v15 = [v12 BOOLValue];

      if (v15)
      {
        uint64_t v16 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v44 = v10;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%@ Skipping sbsync because sbsync on demand enabled", buf, 0xCu);
        }

        goto LABEL_18;
      }
    }
    else
    {
    }
    if (!v9)
    {
LABEL_18:
      unsigned __int8 v21 = 0;
      id v18 = 0;
LABEL_58:
      unsigned __int8 v40 = v21;

      return v40;
    }
    if (sub_10037BA34(v6) > 0) {
      char v17 = 1;
    }
    else {
      char v17 = a3;
    }
    if (v17)
    {
      id v18 = 0;
      BOOL v19 = 0;
      uint64_t v20 = 0;
      goto LABEL_29;
    }
    id v22 = objc_msgSend(v9, "ams_DSID");
    id v39 = 0;
    BOOL v23 = sub_1002CEAE8((uint64_t)SbsyncTask, v22, &v39);
    id v18 = v39;
    BOOL v19 = !v23;

    if (v18)
    {
      id v24 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        id v44 = v10;
        __int16 v45 = 2114;
        id v46 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%@ Error looking up subscription status. Error: %{public}@", buf, 0x16u);
      }
    }
    if (v23)
    {
      uint64_t v27 = ASDLogHandleForCategory();
      if (!os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR))
      {
LABEL_28:

        uint64_t v20 = 1;
LABEL_29:
        uint64_t v27 = (uint64_t)sub_1002CD794([SbsyncTask alloc], v20);
        sub_1002CEF80(v27, v10);
        uint64_t v29 = *(void *)(v6 + 136);
        uint64_t v42 = v27;
        uint64_t v30 = +[NSArray arrayWithObjects:&v42 count:1];
        if (v29) {
          [*(id *)(v29 + 8) addOperations:v30 waitUntilFinished:1];
        }

        if (v27)
        {
          id v32 = objc_getProperty((id)v27, v31, 32, 1);

          unsigned __int8 v21 = *(unsigned char *)(v27 + 24) & 1;
          id v18 = v32;
          if (v19)
          {
LABEL_33:
            if (!v18
              || ([v18 userInfo],
                  BOOL v33 = objc_claimAutoreleasedReturnValue(),
                  [v33 objectForKeyedSubscript:@"AMSServerErrorCode"],
                  id v34 = objc_claimAutoreleasedReturnValue(),
                  id v35 = [v34 integerValue],
                  v34,
                  v33,
                  v35 == (id)5002))
            {
              uint64_t v36 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                id v44 = v10;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%@ Clearing previous failed attempt to opt-out.", buf, 0xCu);
              }
LABEL_49:

              sub_1003F3240((uint64_t)AppDefaultsManager, !v19);
              goto LABEL_50;
            }
            goto LABEL_50;
          }
        }
        else
        {

          id v18 = 0;
          unsigned __int8 v21 = 0;
          if (v19) {
            goto LABEL_33;
          }
        }
        if (v18) {
          char v37 = v17;
        }
        else {
          char v37 = 1;
        }
        if ((v37 & 1) == 0)
        {
          uint64_t v36 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            id v44 = v10;
            _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%@ Failed to opt-out, will attempt again next time.", buf, 0xCu);
          }
          goto LABEL_49;
        }
LABEL_50:

        if (a4 && v18)
        {
          id v18 = v18;
          *a4 = v18;
        }
        else if (!a4 && v18)
        {
          uint64_t v38 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            id v44 = v10;
            __int16 v45 = 2114;
            id v46 = v18;
            _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%@ Complete with error: %{public}@", buf, 0x16u);
          }
        }
        goto LABEL_58;
      }
      *(_DWORD *)long long buf = 138412290;
      id v44 = v10;
      long long v28 = "%@ Opting out of slot since no apps are installed.";
    }
    else
    {
      BOOL v25 = sub_1003F2FA8();
      long long v26 = ASDLogHandleForCategory();
      uint64_t v27 = (uint64_t)v26;
      if (!v25)
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v44 = v10;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v27, OS_LOG_TYPE_DEFAULT, "%@ Skipping sbsync because there are no arcade apps", buf, 0xCu);
        }
        unsigned __int8 v21 = 0;
        goto LABEL_50;
      }
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      *(_DWORD *)long long buf = 138412290;
      id v44 = v10;
      long long v28 = "%@ Retrying opt-out of slot because a previous attempt failed";
    }
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v27, OS_LOG_TYPE_ERROR, v28, buf, 0xCu);
    goto LABEL_28;
  }
  return result;
}

void sub_10037FC4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037FCFC;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037FCFC(uint64_t a1)
{
  uint64_t v2 = sub_1003A84D8((uint64_t)MetricsContext, 4);
  unsigned int v3 = sub_10037C0A4(*(void *)(a1 + 32));
  char v4 = ASDLogHandleForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v5)
    {
      int v10 = 138543362;
      id v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Not enabled to send metrics", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_9;
  }
  if (v5)
  {
    int v10 = 138543362;
    id v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] External Request", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = sub_1003A8520((uint64_t)MetricsContext, 4);
  sub_10037DD68(v6, v7);

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = *(void (**)(void))(v8 + 16);
LABEL_9:
    v9();
  }
}

void sub_10037FE74(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (a1)
  {
    BOOL v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10037FF24;
    v6[3] = &unk_100521698;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10037FF24(uint64_t a1)
{
  uint64_t v2 = sub_1003A84D8((uint64_t)MetricsContext, 3);
  int v3 = sub_10022623C(*(void *)(a1 + 32));
  char v4 = ASDLogHandleForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v5)
    {
      int v10 = 138543362;
      id v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Not enabled", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_9;
  }
  if (v5)
  {
    int v10 = 138543362;
    id v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] External Request", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = sub_1003A8520((uint64_t)MetricsContext, 3);
  sub_10037DD68(v6, v7);

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = *(void (**)(void))(v8 + 16);
LABEL_9:
    v9();
  }
}

void sub_10038009C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    char v4 = sub_1003DA6D4();
    unsigned __int8 v5 = [v4 isHRNMode];

    if ((v5 & 1) == 0)
    {
      uint64_t v6 = *(NSObject **)(a1 + 64);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10038016C;
      v7[3] = &unk_1005218C0;
      id v8 = v3;
      uint64_t v9 = a1;
      dispatch_sync(v6, v7);
    }
  }
}

void sub_10038016C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setup with reason: %{public}@", buf, 0xCu);
  }

  char v4 = +[KeepAlive keepAliveWithName:@"com.apple.PersonalizationManager.setupFollowingMigration"];
  unsigned __int8 v5 = sub_10038F000();
  [v5 modifyUsingTransaction:&stru_10052A340];

  if (sub_10037C0A4(*(void *)(a1 + 40)))
  {
    uint64_t v6 = sub_1003A8520((uint64_t)MetricsContext, 4);
    id v7 = (void *)v6;
    if (v6) {
      *(unsigned char *)(v6 + 9) = 0;
    }
    id v8 = sub_1002E1F40((uint64_t)MetricsCoordinator, 4);

    if (v8) {
      sub_10037D9C4(*(void *)(a1 + 40));
    }
    sub_10037E4D4(*(void *)(a1 + 40), *(void **)(a1 + 32), 0, v7);
  }
  if (sub_10022623C(*(void *)(a1 + 40)))
  {
    uint64_t v9 = sub_1003A8520((uint64_t)MetricsContext, 3);
    int v10 = sub_1002E1F40((uint64_t)MetricsCoordinator, 4);

    if (v10) {
      sub_10037D9C4(*(void *)(a1 + 40));
    }
    sub_10037E4D4(*(void *)(a1 + 40), *(void **)(a1 + 32), 0, v9);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  id v12 = *(NSObject **)(v11 + 144);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100380428;
  v14[3] = &unk_1005218C0;
  void v14[4] = v11;
  id v15 = v4;
  id v13 = v4;
  dispatch_async(v12, v14);
}

BOOL sub_1003803A0(id a1, AppUsageDatabaseTransaction *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = [(AppUsageDatabaseTransaction *)v2 connection];
  char v4 = (void *)v3;
  if (v3) {
    sub_100012004(v3, @"DELETE FROM app_events_ocelot where event_type != 2;", 0, 0);
  }

  unsigned __int8 v5 = [(AppUsageDatabaseTransaction *)v2 connection];

  if (v5) {
    sub_100012004((uint64_t)v5, @"DELETE FROM app_events_ocelot_payout where event_type != 4;", 0, 0);
  }

  return 1;
}

void sub_100380428(uint64_t a1)
{
  uint64_t v2 = +[ACAccountStore ams_sharedAccountStore];
  objc_msgSend(v2, "ams_activeiTunesAccount");
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v3 = v4;
  if (v4)
  {
    sub_1003804A0(*(void *)(a1 + 32), v4, 0);
    uint64_t v3 = v4;
  }
}

void sub_1003804A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v146 = a3;
  if (!a1) {
    goto LABEL_147;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  id v7 = sub_1003A81DC([MetricsContext alloc], 0);
  id v8 = [[_TtC9appstored6LogKey alloc] initWithBase:@"TopApps"];
  sub_1003A86C4((uint64_t)v7, v8);

  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (v7) {
      int v10 = (void *)v7[9];
    }
    else {
      int v10 = 0;
    }
    id v11 = v10;
    id v12 = objc_msgSend(v5, "ams_DSID");
    *(_DWORD *)long long buf = 138412546;
    id v177 = v11;
    __int16 v178 = 2114;
    id v179 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] Start for account: %{public}@", buf, 0x16u);
  }
  id v13 = sub_100385AB0();
  if (!v13)
  {
    uint64_t v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[TopApps] Unable to generate the path in order to load cached", buf, 2u);
    }
    goto LABEL_15;
  }
  uint64_t v14 = [objc_alloc((Class)NSData) initWithContentsOfFile:v13];
  if (!v14)
  {
LABEL_15:
    id v145 = &__NSDictionary0__struct;
    goto LABEL_20;
  }
  id v15 = v5;
  uint64_t v16 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[TopApps] Load cached top apps data", buf, 2u);
  }

  *(void *)&long long v163 = 0;
  uint64_t v17 = +[NSPropertyListSerialization propertyListWithData:v14 options:0 format:0 error:&v163];
  id v18 = (id)v163;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && v17)
  {
    id v145 = v17;
  }
  else
  {
    BOOL v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v177 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[TopApps] Failed to deserialize the top apps. Error: %{public}@", buf, 0xCu);
    }

    id v145 = &__NSDictionary0__struct;
  }

  id v5 = v15;
LABEL_20:

  uint64_t v20 = objc_msgSend(v5, "ams_DSID");
  if (!v20)
  {
    CFStringRef v100 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        id v101 = (void *)v7[9];
      }
      else {
        id v101 = 0;
      }
      id v102 = v101;
      *(_DWORD *)long long buf = 138412290;
      id v177 = v102;
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] No account to lookup top apps", buf, 0xCu);
    }
    id v103 = 0;
    if (v146) {
      v146[2](v146, &__NSArray0__struct, 0);
    }
    goto LABEL_146;
  }
  unsigned __int8 v21 = +[NSDate date];
  [v21 timeIntervalSinceReferenceDate];
  double v23 = v22;

  v148 = v20;
  id v24 = [v20 stringValue];
  BOOL v25 = [v145 objectForKeyedSubscript:v24];

  id v144 = v25;
  if (v25)
  {
    long long v26 = [v25 objectForKeyedSubscript:@"lastCache"];
    uint64_t v27 = (uint64_t)[v26 longLongValue];
    double v28 = (double)v27;

    if (v27 < 1 || (uint64_t)(v23 - (double)v27) < 901)
    {
      if (v146)
      {
        id v104 = [v144 objectForKeyedSubscript:@"apps"];
        long long v105 = ASDLogHandleForCategory();
        id v103 = v148;
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
        {
          if (v7) {
            id v106 = (void *)v7[9];
          }
          else {
            id v106 = 0;
          }
          id v107 = v106;
          id v108 = [v104 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138413058;
          id v177 = v107;
          __int16 v178 = 2114;
          id v179 = v148;
          __int16 v180 = 2048;
          *(void *)&double v181 = (uint64_t)(v23 - v28);
          __int16 v182 = 2114;
          v183 = v108;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] Returning cached top apps data for account: %{public}@ cache age: %llu seconds apps: [%{public}@]", buf, 0x2Au);
        }
        v146[2](v146, v104, 0);
      }
      else
      {
        id v104 = ASDLogHandleForCategory();
        id v103 = v148;
        if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
        {
          if (v7) {
            id v109 = (void *)v7[9];
          }
          else {
            id v109 = 0;
          }
          id v110 = v109;
          *(_DWORD *)long long buf = 138412802;
          id v177 = v110;
          __int16 v178 = 2114;
          id v179 = v148;
          __int16 v180 = 2048;
          *(void *)&double v181 = (uint64_t)(v23 - v28);
          _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] No handler to return cached top apps for account: %{public}@ cache age: %llu seconds", buf, 0x20u);
        }
      }

      double v111 = CFAbsoluteTimeGetCurrent();
      uint64_t v112 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
      {
        if (v7) {
          long long v113 = (void *)v7[9];
        }
        else {
          long long v113 = 0;
        }
        id v114 = v113;
        uint64_t v115 = objc_msgSend(v5, "ams_DSID");
        *(_DWORD *)long long buf = 138412802;
        id v177 = v114;
        __int16 v178 = 2114;
        id v179 = v115;
        __int16 v180 = 2048;
        double v181 = v111 - Current;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] topAppsForAccount: %{public}@ completed in %f seconds", buf, 0x20u);
      }
      goto LABEL_145;
    }
    uint64_t v29 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        uint64_t v30 = (void *)v7[9];
      }
      else {
        uint64_t v30 = 0;
      }
      id v31 = v30;
      *(_DWORD *)long long buf = 138412802;
      id v177 = v31;
      __int16 v178 = 2114;
      id v179 = v148;
      __int16 v180 = 2048;
      *(void *)&double v181 = (uint64_t)(v23 - v28);
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] Clearing cached top apps data for account: %{public}@ cache age: %llu seconds", buf, 0x20u);
    }
  }
  +[NSMutableDictionary dictionary];
  v161[0] = _NSConcreteStackBlock;
  v161[1] = 3221225472;
  v161[2] = sub_100385F0C;
  v161[3] = &unk_100528628;
  v161[4] = a1;
  id v32 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v162 = v32;
  +[ApplicationProxy enumerateApplicationsOfType:0 usingBlock:v161];
  uint64_t v147 = +[NSMutableArray array];
  v149 = v7;
  id v150 = v32;
  if (![v32 count]) {
    goto LABEL_126;
  }
  BOOL v33 = +[LaunchHistory shared];
  if (v7) {
    id v34 = (void *)v7[9];
  }
  else {
    id v34 = 0;
  }
  id v35 = v34;
  uint64_t v36 = [v33 syncIfNeededWithLogKey:v35];

  id v141 = v36;
  char v37 = [v36 error];

  if (v37)
  {
    uint64_t v38 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      if (v7) {
        id v39 = (void *)v7[9];
      }
      else {
        id v39 = 0;
      }
      id v40 = v39;
      *(_DWORD *)long long buf = 138412290;
      id v177 = v40;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "[TopApps] [%@] History sync complete", buf, 0xCu);
    }
  }
  id v41 = +[NSDate now];
  uint64_t v42 = [v41 dateByAddingTimeInterval:-604800.0];

  id v143 = [objc_alloc((Class)NSDateInterval) initWithStartDate:v42 duration:604800.0];
  id v43 = +[LaunchHistory shared];
  id v142 = v5;
  id v140 = (void *)v42;
  if (v7) {
    id v44 = (void *)v7[9];
  }
  else {
    id v44 = 0;
  }
  id v45 = v44;
  id v46 = [v43 getLaunchesWithLogKey:v45 dateInterval:v143];

  v152 = sub_1002188DC();
  long long v157 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  id obj = v46;
  id v47 = [obj countByEnumeratingWithState:&v157 objects:v169 count:16];
  if (!v47) {
    goto LABEL_125;
  }
  id v48 = v47;
  uint64_t v49 = *(void *)v158;
  uint64_t v151 = *(void *)v158;
LABEL_42:
  uint64_t v50 = 0;
  id v153 = v48;
  while (1)
  {
    if (*(void *)v158 != v49) {
      objc_enumerationMutation(obj);
    }
    id v51 = *(void **)(*((void *)&v157 + 1) + 8 * v50);
    long long v52 = sub_1003AC978(v51);
    uint64_t v53 = [v32 objectForKeyedSubscript:v52];

    if (v53) {
      break;
    }
LABEL_93:
    if ((id)++v50 == v48)
    {
      id v99 = [obj countByEnumeratingWithState:&v157 objects:v169 count:16];
      id v48 = v99;
      if (!v99) {
        goto LABEL_125;
      }
      goto LABEL_42;
    }
  }
  uint64_t v54 = sub_1003AC9B0(v51);
  id v55 = sub_100218B5C((uint64_t)AccountEventCoordinator, v54);

  if (!v55)
  {
    id v55 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        CFStringRef v74 = (void *)v7[9];
      }
      else {
        CFStringRef v74 = 0;
      }
      id v75 = v74;
      uint64_t v76 = sub_1003AC978(v51);
      *(_DWORD *)long long buf = 138412546;
      id v177 = v75;
      __int16 v178 = 2114;
      id v179 = v76;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] [%{public}@] Skipping app launch event without an end time", buf, 0x16u);
    }
LABEL_92:

    goto LABEL_93;
  }
  unsigned int v56 = sub_100218C48(v152, v55);
  id v57 = v51;
  id v58 = v7;
  id v59 = v56;
  if (!v59)
  {
    id v66 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      if (v7) {
        __int16 v95 = (void *)v7[9];
      }
      else {
        __int16 v95 = 0;
      }
      id v96 = v95;
      __int16 v97 = sub_1003AC978(v57);
      *(_DWORD *)long long buf = 138412546;
      id v177 = v96;
      __int16 v178 = 2114;
      id v179 = v97;
      _os_log_error_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "[%@] Unable to find launch account for event with bundleID: %{public}@ due to no active accounts", buf, 0x16u);
    }
    id v68 = 0;
    goto LABEL_76;
  }
  unsigned int v60 = sub_1003AC9B0(v57);
  [v60 timeIntervalSinceReferenceDate];
  double v62 = v61;

  unsigned int v63 = sub_1003ACA24(v57);
  [v63 timeIntervalSinceReferenceDate];
  double v65 = v64;

  long long v165 = 0u;
  long long v166 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  id v66 = v59;
  id v68 = [v66 countByEnumeratingWithState:&v163 objects:buf count:16];
  if (!v68) {
    goto LABEL_76;
  }
  uint64_t v69 = *(void *)v164;
  BOOL v70 = v65 < 0.0 && v62 > 0.0;
  while (2)
  {
    uint64_t v71 = 0;
LABEL_53:
    if (*(void *)v164 != v69) {
      objc_enumerationMutation(v66);
    }
    uint64_t v72 = *(double **)(*((void *)&v163 + 1) + 8 * v71);
    if (!v72)
    {
      if (v70)
      {
        id Property = 0;
        goto LABEL_71;
      }
LABEL_58:
      if (v68 == (id)++v71)
      {
        id v73 = [v66 countByEnumeratingWithState:&v163 objects:buf count:16];
        id v68 = v73;
        if (!v73)
        {
          id v7 = v149;
          id v32 = v150;
          goto LABEL_76;
        }
        continue;
      }
      goto LABEL_53;
    }
    break;
  }
  if (v62 <= v72[2] || v65 >= v72[3]) {
    goto LABEL_58;
  }
  id Property = objc_getProperty(v72, v67, 8, 1);
LABEL_71:
  id v77 = Property;
  sub_100222B6C(v77);
  id v68 = (id)objc_claimAutoreleasedReturnValue();

  id v7 = v149;
  id v32 = v150;
  if (v149 && v149[4])
  {
    id v78 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      id v79 = (id)v149[9];
      uint64_t v80 = sub_1003AC978(v57);
      *(_DWORD *)CFStringRef v170 = 138412802;
      id v171 = v79;
      __int16 v172 = 2114;
      id v173 = v68;
      __int16 v174 = 2114;
      CFStringRef v175 = v80;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "[%@] Found app launch accountID: %{public}@ for event with bundleID: %{public}@", v170, 0x20u);

      id v32 = v150;
      id v7 = v149;
    }
  }
LABEL_76:

  if (!v68)
  {
    long long v87 = ASDLogHandleForCategory();
    uint64_t v49 = v151;
    id v48 = v153;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        id v88 = (void *)v7[9];
      }
      else {
        id v88 = 0;
      }
      id v89 = v88;
      id v90 = sub_1003AC978(v57);
      id v91 = sub_1003AC9B0(v57);
      CFStringRef v92 = v91;
      if (v91)
      {
        [v91 timeIntervalSince1970];
        uint64_t v94 = (uint64_t)v93;
      }
      else
      {
        *(double *)&uint64_t v94 = 0.0;
      }
      *(_DWORD *)long long buf = 138412802;
      id v177 = v89;
      __int16 v178 = 2114;
      id v179 = v90;
      __int16 v180 = 2048;
      double v181 = *(double *)&v94;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] [%{public}@] Skipping top app launch event due to no active account at launch time ending: %{time_t}ld", buf, 0x20u);
    }
    goto LABEL_92;
  }
  uint64_t v81 = sub_1003AC978(v57);
  id v82 = [v32 objectForKeyedSubscript:v81];
  id v83 = sub_1003A3970(v82);

  objc_opt_class();
  id v84 = v83;
  id v85 = v84;
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_83;
  }
  if (!v84 || (unsigned int v86 = [v68 isEqualToNumber:v148], v84, !v86))
  {
LABEL_84:

    uint64_t v49 = v151;
    id v48 = v153;
    goto LABEL_92;
  }
  id v85 = [v84 stringValue];
  if (!v85
    || ([v147 containsObject:v85] & 1) != 0
    || ([v147 addObject:v85], (unint64_t)objc_msgSend(v147, "count") <= 0xB))
  {
LABEL_83:

    goto LABEL_84;
  }

LABEL_125:
  id v5 = v142;
LABEL_126:
  id v116 = ASDLogHandleForCategory();
  id v103 = v148;
  if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
  {
    if (v7) {
      id v117 = (void *)v7[9];
    }
    else {
      id v117 = 0;
    }
    id v118 = v117;
    id v119 = [v147 componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138412546;
    id v177 = v118;
    __int16 v178 = 2114;
    id v179 = v119;
    _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] Found apps: [%{public}@]", buf, 0x16u);
  }
  if (v146)
  {
    v146[2](v146, v147, 0);
    double v120 = CFAbsoluteTimeGetCurrent();
    id v121 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        id v122 = (void *)v7[9];
      }
      else {
        id v122 = 0;
      }
      id v123 = v122;
      long long v124 = objc_msgSend(v5, "ams_DSID");
      *(_DWORD *)long long buf = 138412802;
      id v177 = v123;
      __int16 v178 = 2114;
      id v179 = v124;
      __int16 v180 = 2048;
      double v181 = v120 - Current;
      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] topAppsForAccount: %{public}@ completed in %f seconds", buf, 0x20u);
    }
  }
  id v125 = v5;
  v167[0] = @"lastCache";
  long long v126 = +[NSNumber numberWithDouble:v23];
  v167[1] = @"apps";
  v168[0] = v126;
  v168[1] = v147;
  id v127 = +[NSDictionary dictionaryWithObjects:v168 forKeys:v167 count:2];

  id v128 = [v145 mutableCopy];
  long long v129 = [v148 stringValue];
  [v128 setObject:v127 forKeyedSubscript:v129];

  id v156 = 0;
  id v130 = +[NSPropertyListSerialization dataWithPropertyList:v128 format:200 options:0 error:&v156];
  id v131 = v156;
  if (v130)
  {
    id v132 = sub_100385AB0();
    if (v132)
    {
      id v155 = v131;
      unsigned int v133 = [v130 writeToFile:v132 options:1 error:&v155];
      id v134 = v155;

      id v135 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
      {
        id v136 = v149;
        if (v149) {
          id v136 = (void *)v149[9];
        }
        id v137 = v136;
        *(_DWORD *)long long buf = 138412546;
        id v177 = v137;
        __int16 v178 = 1024;
        LODWORD(v179) = v133;
        _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "[TopApps] [%@] Serialized top apps with result: %d", buf, 0x12u);
      }
      id v131 = v134;
      id v7 = v149;
      id v103 = v148;
    }
  }
  else
  {
    id v132 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
    {
      if (v7) {
        unsigned __int8 v138 = (void *)v7[9];
      }
      else {
        unsigned __int8 v138 = 0;
      }
      id v139 = v138;
      *(_DWORD *)long long buf = 138412546;
      id v177 = v139;
      __int16 v178 = 2114;
      id v179 = v131;
      _os_log_error_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "[TopApps] [%@] Failed to serialize. Error: %{public}@", buf, 0x16u);
    }
  }

  id v5 = v125;
  uint64_t v112 = v150;
LABEL_145:

LABEL_146:
LABEL_147:
}

void sub_1003817EC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (a1)
  {
    uint64_t v9 = *(NSObject **)(a1 + 152);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003818BC;
    block[3] = &unk_1005212D8;
    void block[4] = a1;
    id v11 = v7;
    id v12 = v6;
    dispatch_sync(v9, block);
  }
}

void sub_1003818BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && *(void *)(v2 + 168))
  {
    uint64_t v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v42 = v38;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[%@] Invalidating existing remote view handle was invalid", buf, 0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      id v5 = *(void **)(v4 + 168);
    }
    else {
      id v5 = 0;
    }
    objc_msgSend(v5, "unregisterObserver:");
    id v6 = *(id *)(a1 + 32);
    objc_sync_enter(v6);
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 168);
    *(void *)(v7 + 16_Block_object_dispose(&a9, 8) = 0;

    objc_sync_exit(v6);
  }
  dispatch_semaphore_t v9 = dispatch_semaphore_create(0);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(v10 + 160);
  *(void *)(v10 + 160) = v9;

  id v12 = [objc_alloc((Class)SBSRemoteAlertDefinition) initWithServiceName:@"com.apple.ios.StoreKitUIService" viewControllerClassName:@"ServiceOcelotUpsellViewController"];
  id v13 = objc_opt_new();
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14)
  {
    CFStringRef v39 = @"itemID";
    uint64_t v40 = v14;
    id v15 = +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
    [v13 setUserInfo:v15];
  }
  id v16 = *(id *)(a1 + 32);
  objc_sync_enter(v16);
  id v17 = +[SBSRemoteAlertHandle newHandleWithDefinition:v12 configurationContext:v13];
  uint64_t v18 = *(void *)(a1 + 32);
  BOOL v19 = *(void **)(v18 + 168);
  *(void *)(v18 + 16_Block_object_dispose(&a9, 8) = v17;

  objc_sync_exit(v16);
  uint64_t v20 = *(void *)(a1 + 32);
  if (!v20) {
    goto LABEL_36;
  }
  unsigned __int8 v21 = *(void **)(v20 + 168);
  if (!v21) {
    goto LABEL_15;
  }
  objc_msgSend(v21, "registerObserver:");
  id v22 = objc_alloc_init((Class)SBSRemoteAlertActivationContext);
  uint64_t v23 = *(void *)(a1 + 32);
  id v24 = v23 ? *(void **)(v23 + 168) : 0;
  [v24 activateWithContext:v22];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 160), 0xFFFFFFFFFFFFFFFFLL);

  uint64_t v20 = *(void *)(a1 + 32);
  if (v20) {
LABEL_15:
  }
    BOOL v25 = *(void **)(v20 + 168);
  else {
LABEL_36:
  }
    BOOL v25 = 0;
  id v26 = v25;
  if ([v26 isValid])
  {
    uint64_t v27 = *(void *)(a1 + 32);
    if (v27) {
      double v28 = *(void **)(v27 + 168);
    }
    else {
      double v28 = 0;
    }
    unsigned __int8 v29 = [v28 isActive];

    if (v29) {
      goto LABEL_35;
    }
  }
  else
  {
  }
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30) {
    id v31 = *(void **)(v30 + 168);
  }
  else {
    id v31 = 0;
  }
  if (([v31 isValid] & 1) == 0)
  {
    id v32 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v42 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%@] Remote view handle was invalid", buf, 0xCu);
    }
  }
  uint64_t v34 = *(void *)(a1 + 32);
  if (v34) {
    id v35 = *(void **)(v34 + 168);
  }
  else {
    id v35 = 0;
  }
  if (([v35 isActive] & 1) == 0)
  {
    uint64_t v36 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v42 = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[%@] Remote view handle was not active", buf, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 160));
LABEL_35:
}

void sub_100381C8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100381CA8(uint64_t a1)
{
  if (a1)
  {
    dispatch_semaphore_t v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100381D2C;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100381D2C(uint64_t a1)
{
  uint64_t v2 = sub_1003A8520((uint64_t)MetricsContext, 7);
  sub_1003A84D8((uint64_t)MetricsContext, 7);
  uint64_t v3 = (_TtC9appstored10ASEMetrics *)objc_claimAutoreleasedReturnValue();
  if (sub_10022623C(*(void *)(a1 + 32)))
  {
    if (*(void *)(a1 + 32))
    {
      uint64_t v4 = sub_10030B11C();
      unsigned int v5 = sub_10030CE24(v4, @"arcade-account-event-daily-enabled", 0, 0);

      if (v5)
      {
        id v6 = +[ACAccountStore ams_sharedAccountStore];
        uint64_t v7 = objc_msgSend(v6, "ams_activeiTunesAccount");

        if (!v7)
        {
          uint64_t v18 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (v2) {
              uint64_t v37 = *(void **)(v2 + 72);
            }
            else {
              uint64_t v37 = 0;
            }
            uint64_t v38 = v37;
            *(_DWORD *)long long buf = 138412290;
            uint64_t v42 = v38;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%@] Unable to determine active account", buf, 0xCu);
          }
          goto LABEL_41;
        }
        id v8 = +[KatanaSubscriptionCoordinator shared];
        if (v2) {
          dispatch_semaphore_t v9 = *(void **)(v2 + 72);
        }
        else {
          dispatch_semaphore_t v9 = 0;
        }
        id v10 = v9;
        unsigned int v11 = [v8 removeStaleSubscriptionInfoWithLogKey:v10];

        id v12 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          if (v2) {
            id v13 = *(void **)(v2 + 72);
          }
          else {
            id v13 = 0;
          }
          uint64_t v14 = v13;
          *(_DWORD *)long long buf = 138412546;
          uint64_t v42 = v14;
          __int16 v43 = 1024;
          LODWORD(v44) = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%@] Cleaned up subscription state with result: %{BOOL}d", buf, 0x12u);
        }
        id v15 = +[KatanaSubscriptionCoordinator shared];
        if (v2) {
          id v16 = *(void **)(v2 + 72);
        }
        else {
          id v16 = 0;
        }
        id v17 = v16;
        uint64_t v18 = [v15 subscriptionInfoDictionaryWithAccount:v7 onlyReturnForPreviouslySubscribedAccount:1 logKey:v17];

        if (v18)
        {
          if (v2)
          {
            objc_setProperty_nonatomic_copy((id)v2, v19, v18, 136);
            objc_setProperty_nonatomic_copy((id)v2, v20, v7, 128);
          }
          unsigned __int8 v21 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            if (v2)
            {
              id v22 = (_TtC9appstored10ASEMetrics *)*(id *)(v2 + 72);
              uint64_t v23 = *(void **)(v2 + 128);
              id v24 = v22;
            }
            else
            {
              id v22 = 0;
              id v24 = 0;
              uint64_t v23 = 0;
            }
            id v25 = v23;
            id v26 = objc_msgSend(v25, "ams_DSID");
            *(_DWORD *)long long buf = 138543874;
            uint64_t v42 = v22;
            __int16 v43 = 2114;
            id v44 = v3;
            __int16 v45 = 2114;
            id v46 = v26;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%{public}@] Enqueuing %{public}@ event for account: %{public}@", buf, 0x20u);
          }
          uint64_t v27 = [AppUsageMetricsEvent alloc];
          if (v2) {
            double v28 = *(void **)(v2 + 152);
          }
          else {
            double v28 = 0;
          }
          id v29 = v28;
          uint64_t v30 = [(AppUsageMetricsEvent *)v27 initWithTopic:v29];

          [v30 setEventType:@"account"];
          [*(id *)(a1 + 32) decorateMetricsEvent:v30 context:v2];
          if (os_variant_has_internal_content())
          {
            id v31 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              if (v2) {
                id v32 = *(void **)(v2 + 72);
              }
              else {
                id v32 = 0;
              }
              uint64_t v33 = v32;
              uint64_t v34 = [v30 underlyingDictionary];
              *(_DWORD *)long long buf = 138543874;
              uint64_t v42 = v33;
              __int16 v43 = 2114;
              id v44 = v3;
              __int16 v45 = 2114;
              id v46 = v34;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "[%{public}@] %{public}@ event: %{public}@", buf, 0x20u);
            }
          }
          id v35 = [[_TtC9appstored10ASEMetrics alloc] initWithType:1];
          uint64_t v40 = v30;
          uint64_t v36 = +[NSArray arrayWithObjects:&v40 count:1];
          [(ASEMetrics *)v35 enqueueEvents:v36 flushEvents:1 completionHandler:&stru_10052A360];
        }
        else
        {
          uint64_t v30 = ASDLogHandleForCategory();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
LABEL_40:

LABEL_41:
            goto LABEL_42;
          }
          if (v2) {
            CFStringRef v39 = *(void **)(v2 + 72);
          }
          else {
            CFStringRef v39 = 0;
          }
          id v35 = v39;
          *(_DWORD *)long long buf = 138412290;
          uint64_t v42 = v35;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "[%@] There are no subscription details for the active account", buf, 0xCu);
        }

        goto LABEL_40;
      }
    }
  }
  uint64_t v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v42 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@] Not enabled", buf, 0xCu);
  }
LABEL_42:
}

void sub_1003822C4(uint64_t a1)
{
  if (a1)
  {
    dispatch_semaphore_t v1 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100385B0C;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100382348(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100382418;
    block[3] = &unk_1005221F0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_sync(v7, block);
  }
}

void sub_100382418(uint64_t a1)
{
}

id sub_100383030(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3) {
      id v5 = (void *)v3[16];
    }
    else {
      id v5 = 0;
    }
    id v6 = v5;

    if (!v6)
    {
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        if (v4) {
          id v16 = (void *)*((void *)v4 + 9);
        }
        else {
          id v16 = 0;
        }
        id v17 = v16;
        *(_DWORD *)long long buf = 138412290;
        id v22 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Unable to find find subscribed accountID to associate katanaID", buf, 0xCu);
      }
      id v12 = 0;
      goto LABEL_16;
    }
    uint64_t v7 = objc_opt_new();
    [v7 setIncludeAccountMatchStatus:1];
    if (v4)
    {
      id v8 = *((id *)v4 + 16);
      [v7 setAccount:v8];

      uint64_t v9 = *((void *)v4 + 4);
      CFStringRef v10 = @"com.apple.appstored.AracadeAnonymous";
      if (v9 != 3)
      {
        if (v9 == 4)
        {
          CFStringRef v10 = @"com.apple.appstored.AracadePayout";
        }
        else if (v9 != 7)
        {
LABEL_9:
          unsigned int v11 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            if (v4) {
              uint64_t v18 = (void *)*((void *)v4 + 9);
            }
            else {
              uint64_t v18 = 0;
            }
            id v19 = v18;
            *(_DWORD *)long long buf = 138412290;
            id v22 = v19;
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] KatanaIDs not supported for this context type", buf, 0xCu);
          }
          id v12 = 0;
          goto LABEL_15;
        }
      }
      [v7 setDomain:v10];
      id v13 = [objc_alloc((Class)AMSProcessInfo) initWithBundleIdentifier:@"com.apple.appstored"];
      [v7 setClientInfo:v13];

      unsigned int v11 = +[AMSMetricsIdentifierKey keyWithName:@"userId" crossDeviceSync:1];
      SEL v20 = v11;
      uint64_t v14 = +[NSArray arrayWithObjects:&v20 count:1];
      id v12 = [v7 generateEventFieldsForKeys:v14];

LABEL_15:
LABEL_16:

      goto LABEL_17;
    }
    [v7 setAccount:0];
    goto LABEL_9;
  }
  id v12 = 0;
LABEL_17:

  return v12;
}

id sub_10038351C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new();
  id v57 = (void *)a1;
  sub_10037D9C4(a1);
  if (v3 && *((void *)v3 + 4) == 4)
  {
    CFStringRef v66 = @"launch_end_time";
    id v5 = +[NSArray arrayWithObjects:&v66 count:1];
    uint64_t v6 = (uint64_t)v57;
    char v7 = 4;
  }
  else
  {
    CFStringRef v65 = @"launch_end_time";
    id v5 = +[NSArray arrayWithObjects:&v65 count:1];
    uint64_t v6 = (uint64_t)v57;
    char v7 = 2;
  }
  id v8 = sub_1002D73DC(v6, v7, v3, v5);

  id v55 = objc_opt_new();
  if ([v8 count])
  {
    long long v52 = v8;
    uint64_t v53 = v4;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    id obj = v8;
    id v58 = [obj countByEnumeratingWithState:&v60 objects:v64 count:16];
    if (!v58) {
      goto LABEL_65;
    }
    uint64_t v56 = *(void *)v61;
    uint64_t v9 = &OBJC_IVAR___XDCAppMetadata__bundleID;
    while (1)
    {
      CFStringRef v10 = 0;
      do
      {
        if (*(void *)v61 != v56) {
          objc_enumerationMutation(obj);
        }
        unsigned int v11 = *(id *)(*((void *)&v60 + 1) + 8 * (void)v10);
        id v12 = v3;
        id v13 = sub_10022DF98(v11);
        int v14 = sub_10022E8EC(v11);
        uint64_t v15 = sub_1002D6D6C(v57, v13, v14, v12);

        id v16 = sub_10022DD6C(v11);
        if (v16) {
          sub_1003F6308((id *)v15, v16);
        }
        id v17 = objc_msgSend(v11, "databaseID", v52, v53);
        if (v15)
        {
          *(void *)(v15 + 224) = v17;
          *(unsigned char *)(v15 + 26) = sub_10026E7EC(v11, @"has_been_posted");
        }
        else
        {
          sub_10026E7EC(v11, @"has_been_posted");
        }
        id v59 = v12;
        if (!v3)
        {
LABEL_33:
          id v24 = 0;
          goto LABEL_35;
        }
        uint64_t v18 = *((void *)v3 + 4);
        if (v18 == 4)
        {
          if (v15)
          {
            id v19 = *(id *)(v15 + v9[830]);
            if (v19)
            {
              SEL v20 = v19;
              id v21 = *(id *)(v15 + v9[830]);
              uint64_t v22 = (uint64_t)[v21 longLongValue];

              if (v22 >= 1)
              {
                id v23 = *(id *)(v15 + v9[830]);
                +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v23 longLongValue]);
                id v24 = (id)objc_claimAutoreleasedReturnValue();

                if (!v24) {
                  goto LABEL_35;
                }
                goto LABEL_28;
              }
            }
          }
          uint64_t v18 = *((void *)v3 + 4);
        }
        if (v18 != 3) {
          goto LABEL_33;
        }
        if (v11) {
          id v25 = (void *)v11[5];
        }
        else {
          id v25 = 0;
        }
        id v24 = v25;
        if (!v24) {
          goto LABEL_35;
        }
LABEL_28:
        id v26 = +[ACAccountStore ams_sharedAccountStore];
        uint64_t v27 = objc_msgSend(v26, "ams_iTunesAccountWithDSID:", v24);

        if (!v27 || !objc_msgSend(v27, "ams_isDemoAccount"))
        {

LABEL_35:
          id v31 = sub_10022DF98(v11);
          unsigned int v32 = sub_1003A4054(v31);

          if (v32) {
            int v33 = 2;
          }
          else {
            int v33 = 0;
          }
          sub_1003F5FC0((unsigned char *)v15, v33);
          if (!v3) {
            goto LABEL_48;
          }
          goto LABEL_39;
        }
        double v28 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          id v29 = *((id *)v3 + 9);
          uint64_t v30 = objc_msgSend(v27, "ams_DSID");
          *(_DWORD *)long long buf = 138412546;
          id v68 = v29;
          __int16 v69 = 2114;
          BOOL v70 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[%@] Using retail demo account: %{public}@ for event", buf, 0x16u);

          uint64_t v9 = &OBJC_IVAR___XDCAppMetadata__bundleID;
        }

        sub_1003F5FC0((unsigned char *)v15, 1);
LABEL_39:
        if (*((void *)v3 + 4) == 3)
        {
          uint64_t v34 = [v11 valueForProperty:@"launch_time"];
          if (v34)
          {
            id v35 = v34;
            uint64_t v36 = sub_100383C78(v34);

            if (v36)
            {
              uint64_t v37 = +[AMSMetrics serverTimeFromDate:v36];
              sub_1003F6218((id *)v15, v37);
            }
          }
          uint64_t v38 = [v11 valueForProperty:@"launch_end_time"];
          CFStringRef v39 = v38;
          if (v38)
          {
            uint64_t v40 = sub_100383C78(v38);
            if (v40)
            {
              id v41 = +[AMSMetrics serverTimeFromDate:v40];
              sub_1003F5C44((id *)v15, v41);
            }
          }
        }
LABEL_48:
        uint64_t v42 = [v11 valueForProperty:@"cumulative_user_count"];
        __int16 v43 = v42;
        if (v42) {
          sub_1003F5BD4((void *)v15, (uint64_t)[v42 integerValue]);
        }
        id v44 = [v11 valueForProperty:@"usage_time"];
        __int16 v45 = v44;
        if ((!v3 || *((void *)v3 + 4) != 4) && v44) {
          sub_1003F5DE8((void *)v15, (uint64_t)[v44 longLongValue]);
        }
        id v46 = [v11 valueForProperty:@"week_start_time"];
        id v47 = v46;
        if (v46)
        {
          id v48 = sub_1002827D0(v46);
          if (v48) {
            sub_1003F6790((id *)v15, v48);
          }

          uint64_t v9 = &OBJC_IVAR___XDCAppMetadata__bundleID;
        }

        if (v15) {
          [v55 addObject:v15];
        }

        CFStringRef v10 = (char *)v10 + 1;
      }
      while (v58 != v10);
      id v49 = [obj countByEnumeratingWithState:&v60 objects:v64 count:16];
      id v58 = v49;
      if (!v49)
      {
LABEL_65:

        id v8 = v52;
        id v4 = v53;
        break;
      }
    }
  }
  objc_msgSend(v4, "addObjectsFromArray:", v55, v52, v53);
  id v50 = [v4 copy];

  return v50;
}

void sub_100383BA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  sub_10037E4D4(a1, v6, 1, v5);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100383C6C;
  v8[3] = &unk_100521710;
  id v7 = v5;
  id v9 = v7;
  sub_10037BCE8(a1, v6, v7, v8);
}

void sub_100383C6C(uint64_t a1)
{
}

id sub_100383C78(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSCalendar currentCalendar];
  id v3 = [v2 components:62 fromDate:v1];

  id v4 = [v2 dateFromComponents:v3];

  return v4;
}

void sub_100383D04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v7 = *(void **)(a1 + 32);
      if (v7) {
        id v7 = (void *)v7[9];
      }
      id v8 = v7;
      int v9 = 138412546;
      CFStringRef v10 = v8;
      __int16 v11 = 2114;
      id v12 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@] Error sending metrics events. Error: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v6 = ASDErrorWithSafeUserInfo();
    (*(void (**)(uint64_t, BOOL, void *))(v5 + 16))(v5, v3 == 0, v6);
  }
}

void sub_100383E28(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, a1[4], a1[5]);
  }
  uint64_t v3 = a1[6];
  sub_100263C18(v3, 0);
}

void sub_100383E78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a5;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v7);
        }
        id v13 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v13 segment] == (id)1) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v13);
        }
      }
      id v10 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v10);
  }
  if (v8) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a5);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1003840C0(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Initializing now that there is network", v3, 2u);
  }

  sub_10037B03C(*(void *)(a1 + 32), @"Network came up");
}

void sub_100384144(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 104);
  if (v7)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    id v25[2] = sub_100385FAC;
    void v25[3] = &unk_1005212D8;
    void v25[4] = a1;
    id v26 = v8;
    id v27 = v7;
    sub_100010468(v10, v25);
  }
  else
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10038608C;
    v24[3] = &unk_100521388;
    void v24[4] = a1;
    sub_100010468(v10, v24);
  }
  uint64_t v11 = +[KatanaSubscriptionCoordinator shared];
  unsigned int v12 = [v11 removeStaleSubscriptionInfoWithLogKey:v9];

  id v13 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412546;
    id v29 = v9;
    __int16 v30 = 1024;
    LODWORD(v31) = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[%@] Cleaned up subscription state with result: %{BOOL}d", buf, 0x12u);
  }

  if (v8)
  {
    long long v14 = +[KatanaSubscriptionCoordinator shared];
    unsigned int v15 = [v14 updateSubscriptionInfoWithEntitlement:v7 account:v8 logKey:v9];

    long long v16 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      long long v17 = objc_msgSend(v8, "ams_DSID");
      *(_DWORD *)long long buf = 138412802;
      id v29 = v9;
      __int16 v30 = 2114;
      id v31 = v17;
      __int16 v32 = 1024;
      unsigned int v33 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] Updated subscription info cache for account: %{public}@ with result: %{BOOL}d", buf, 0x1Cu);
    }
  }
  uint64_t v18 = sub_1003F2FF8();
  id v19 = v18;
  if (!v18 || ([v18 isEqualToString:*(void *)(a1 + 48)] & 1) == 0)
  {
    sub_1003F32AC((uint64_t)AppDefaultsManager, *(void **)(a1 + 48));
    SEL v20 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = *(void **)(a1 + 48);
      *(_DWORD *)long long buf = 138412546;
      id v29 = v9;
      __int16 v30 = 2114;
      id v31 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%@] Updated cached subscription state as: %{public}@", buf, 0x16u);
    }
  }
  uint64_t v22 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v23 = *(void **)(a1 + 48);
    *(_DWORD *)long long buf = 138412546;
    id v29 = v9;
    __int16 v30 = 2114;
    id v31 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%@] fsEntitlement subscription state: %{public}@", buf, 0x16u);
  }
}

void sub_100384594(uint64_t a1)
{
  uint64_t v2 = [[KeepAlive alloc] initWithName:@"Ocelot Repair"];
  uint64_t v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) userInfo];
    int v34 = 138543362;
    id v35 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Arcade] Repair change notification with userInfo: %{public}@", (uint8_t *)&v34, 0xCu);
  }
  uint64_t v5 = [*(id *)(a1 + 32) userInfo];
  id v6 = [v5 objectForKeyedSubscript:@"bundleID"];

  if (os_variant_has_internal_content() && (!v6 || ![v6 length]))
  {
    uint64_t v7 = sub_1003F2E40();

    if (v7)
    {
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = sub_1003F2E40();
        int v34 = 138543362;
        id v35 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Arcade] Using default bundleID: %{public}@", (uint8_t *)&v34, 0xCu);
      }
      id v6 = (void *)v7;
    }
    else
    {
      id v6 = 0;
    }
  }
  id v10 = [*(id *)(a1 + 32) userInfo];
  uint64_t v11 = [v10 objectForKeyedSubscript:@"bundlePath"];

  id v12 = objc_alloc((Class)ASDRepairOptions);
  if (v11) {
    id v13 = [v12 initWithBundlePath:v11];
  }
  else {
    id v13 = [v12 initWithBundleID:v6];
  }
  long long v14 = v13;
  unsigned int v15 = [*(id *)(a1 + 32) userInfo];
  long long v16 = [v15 objectForKeyedSubscript:@"status"];

  if (v16) {
    objc_msgSend(v14, "setFairplayStatus:", objc_msgSend(v16, "unsignedIntValue"));
  }
  long long v17 = [*(id *)(a1 + 32) userInfo];
  uint64_t v18 = [v17 objectForKeyedSubscript:@"exitReason"];
  objc_msgSend(v14, "setExitReason:", objc_msgSend(v18, "unsignedIntegerValue"));

  if (os_variant_has_internal_content())
  {
    id v19 = [*(id *)(a1 + 32) userInfo];
    SEL v20 = [v19 objectForKeyedSubscript:@"forceUpsell"];
    objc_msgSend(v14, "setForceUpsell:", objc_msgSend(v20, "BOOLValue"));

    id v21 = [*(id *)(a1 + 32) userInfo];
    uint64_t v22 = [v21 objectForKeyedSubscript:@"forceRevoke"];
    objc_msgSend(v14, "setForceRevoke:", objc_msgSend(v22, "BOOLValue"));
  }
  id v23 = objc_alloc_init(TaskQueue);
  id v24 = sub_1002A7628((id *)[RepairApplicationTask alloc], v14, 0);
  id v25 = ASDLogHandleForCategory();
  BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (!v26) {
      goto LABEL_24;
    }
    int v34 = 138543362;
    id v35 = v11;
    id v27 = "[Arcade] Starting repair for bundlePath: %{public}@";
  }
  else
  {
    if (!v26) {
      goto LABEL_24;
    }
    int v34 = 138543362;
    id v35 = v6;
    id v27 = "[Arcade] Starting repair forbundleID: %{public}@";
  }
  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v34, 0xCu);
LABEL_24:

  uint64_t v38 = v24;
  double v28 = +[NSArray arrayWithObjects:&v38 count:1];
  if (v23) {
    [(NSOperationQueue *)v23->_operationQueue addOperations:v28 waitUntilFinished:1];
  }

  id v29 = ASDLogHandleForCategory();
  BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (v30)
    {
      if (v24) {
        int v31 = (_BYTE)v24[3] & 1;
      }
      else {
        int v31 = 0;
      }
      int v34 = 138543618;
      id v35 = v11;
      __int16 v36 = 1024;
      int v37 = v31;
      __int16 v32 = "[Arcade] Repair for bundlePath: %{public}@ complete with result: %d";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v32, (uint8_t *)&v34, 0x12u);
    }
  }
  else if (v30)
  {
    if (v24) {
      int v33 = (_BYTE)v24[3] & 1;
    }
    else {
      int v33 = 0;
    }
    int v34 = 138543618;
    id v35 = v6;
    __int16 v36 = 1024;
    int v37 = v33;
    __int16 v32 = "[Arcade] Repair for bundleID: %{public}@ complete with result: %d";
    goto LABEL_35;
  }
}

uint64_t sub_100384A80(uint64_t a1)
{
  return sub_10037F620(*(void *)(a1 + 32), @"Subscribed", 0, 0);
}

void sub_100384A98(uint64_t a1)
{
  id v1 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100384B2C;
  block[3] = &unk_100521388;
  void block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t sub_100384B14(uint64_t a1)
{
  return sub_10037F620(*(void *)(a1 + 32), @"Unsubscribed", 0, 0);
}

id sub_100384B2C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100384BAC;
  void v2[3] = &unk_10052A388;
  v2[4] = *(void *)(a1 + 32);
  return +[ApplicationProxy enumerateApplicationsOfType:0 usingBlock:v2];
}

void sub_100384BAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (sub_10037BB4C(*(void *)(a1 + 32), v3))
  {
    id v4 = [v3 canonicalExecutablePath];
    id v5 = [v4 fileSystemRepresentation];

    if (v5)
    {
      id v6 = [v3 canonicalExecutablePath];
      [v6 fileSystemRepresentation];
      sub_10014C990();
      int v8 = v7;

      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [v3 bundleID];
        id v11 = [v3 storeItemID];
        CFStringRef v12 = @"N";
        int v13 = 138544130;
        __int16 v15 = 2048;
        long long v14 = v10;
        if (!v8) {
          CFStringRef v12 = @"Y";
        }
        id v16 = v11;
        __int16 v17 = 2114;
        CFStringRef v18 = v12;
        __int16 v19 = 1024;
        int v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%{public}@/%lld] launchable: %{public}@ status: %d", (uint8_t *)&v13, 0x26u);
      }
    }
  }
}

intptr_t sub_100384D18(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100384D20(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        if (v8 && *(void *)(v8 + 224))
        {
          id v9 = objc_alloc(*(Class *)(a1 + 48));
          uint64_t v10 = *(void *)(v8 + 224);
          id v11 = [v3 connection];
          id v12 = [v9 initWithPersistentID:v10 onConnection:v11];

          if ([v12 existsInDatabase])
          {
            [v12 setValue:&off_10054CC60 forProperty:@"has_been_posted"];
            int v13 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              long long v14 = *(void **)(a1 + 40);
              if (v14) {
                long long v14 = (void *)v14[9];
              }
              __int16 v15 = v14;
              id v16 = *(id *)(v8 + 72);
              *(_DWORD *)long long buf = 138412546;
              id v24 = v15;
              __int16 v25 = 2114;
              id v26 = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@] Marked event with bundleID: %{public}@ as posted", buf, 0x16u);
            }
          }
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v19 objects:v27 count:16];
    }
    while (v5);
  }

  return 1;
}

void sub_100384F48(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    if (v3 == (id)4)
    {
      if (*((unsigned char *)v1 + 10))
      {
        sub_10038F000();
        id v5 = (id)objc_claimAutoreleasedReturnValue();
        [v5 modifyUsingTransaction:&stru_10052A420];
      }
      else
      {
        id v6 = v1[12];
        int v7 = sub_100218B5C((uint64_t)AccountEventCoordinator, v6);

        uint64_t v8 = sub_1002827D0(v7);
        id v9 = sub_10038F000();
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_100385740;
        v11[3] = &unk_100526A38;
        id v12 = v7;
        int v13 = v2;
        id v14 = v8;
        id v10 = v8;
        id v5 = v7;
        [v9 modifyUsingTransaction:v11];
      }
    }
    else if (v3 == (id)3)
    {
      id v4 = sub_10038F000();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1003855B8;
      v15[3] = &unk_10052A400;
      id v16 = v2;
      [v4 modifyUsingTransaction:v15];
    }
  }
}

uint64_t sub_100385120(uint64_t a1, void *a2)
{
  id v25 = a2;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v30 objects:v40 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v31;
    *(void *)&long long v3 = 138543618;
    long long v23 = v3;
    do
    {
      id v6 = 0;
      id v26 = v4;
      do
      {
        if (*(void *)v31 != v5) {
          objc_enumerationMutation(obj);
        }
        int v7 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v6);
        uint64_t v8 = objc_msgSend(v7, "bundleID", v23);
        if (v8)
        {
          id v9 = sub_10022D6D8([AppEvent alloc], v7);
          id v10 = v9;
          if (v7)
          {
            CFStringRef v39 = v9;
            id v11 = +[NSArray arrayWithObjects:&v39 count:1];
            id v12 = *(objc_class **)(a1 + 40);
            id v29 = 0;
            int v13 = sub_10040CC40(v25, v11, v12, &v29);
            id v14 = v29;
            [v13 count];

            uint64_t v38 = v10;
            __int16 v15 = +[NSArray arrayWithObjects:&v38 count:1];
            id v16 = *(objc_class **)(a1 + 48);
            id v28 = v14;
            __int16 v17 = sub_10040CC40(v25, v15, v16, &v28);
            id v18 = v28;

            id v19 = [v17 count];
            long long v20 = ASDLogHandleForCategory();
            long long v21 = v20;
            if (v18 || !v19)
            {
              id v4 = v26;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = v23;
                id v35 = v8;
                __int16 v36 = 2114;
                id v37 = v18;
                _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[Arcade] Error creating entity for bundleID: %{public}@ result: %{public}@", buf, 0x16u);
              }
            }
            else
            {
              id v4 = v26;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 138543362;
                id v35 = v8;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[Arcade] Created app event entity with bundleID: %{public}@", buf, 0xCu);
              }
            }
          }
        }
        else
        {
          id v10 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543362;
            id v35 = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[Arcade] BundleID required for event: %{public}@", buf, 0xCu);
          }
        }

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v30 objects:v40 count:16];
    }
    while (v4);
  }

  return 1;
}

uint64_t sub_100385458(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

intptr_t sub_100385470(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100385478(uint64_t a1, void *a2)
{
  long long v3 = sub_10040CAD8(a2, *(void **)(a1 + 32));
  id v4 = ASDLogHandleForCategory();
  uint64_t v5 = v4;
  if (!v3)
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    id v6 = objc_msgSend(*(id *)(a1 + 40), "ams_DSID");
    int v8 = 138543362;
    id v9 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[AccountEvent] Unable to recorded initial account event for account: %{public}@", (uint8_t *)&v8, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = objc_msgSend(*(id *)(a1 + 40), "ams_DSID");
    int v8 = 138543362;
    id v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[AccountEvent] Recorded initial account event for account: %{public}@", (uint8_t *)&v8, 0xCu);
LABEL_4:
  }
LABEL_6:

  return 1;
}

uint64_t sub_1003855B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && *(unsigned char *)(v5 + 10))
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(void **)(a1 + 32);
      if (v7) {
        int v7 = (void *)v7[9];
      }
      int v8 = v7;
      int v12 = 138412290;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] User initiated clearing out app events", (uint8_t *)&v12, 0xCu);
    }
    id v9 = [v4 connection];
    if (v9)
    {
      id v10 = @"DELETE FROM app_events_ocelot";
LABEL_11:
      sub_100012004((uint64_t)v9, v10, 0, 0);
    }
  }
  else
  {
    id v9 = [v3 connection];
    if (v9)
    {
      id v10 = @"DELETE FROM app_events_ocelot where has_been_posted = 1;";
      goto LABEL_11;
    }
  }

  return 1;
}

BOOL sub_1003856F0(id a1, AppUsageDatabaseTransaction *a2)
{
  uint64_t v2 = [(AppUsageDatabaseTransaction *)a2 connection];
  id v3 = (void *)v2;
  if (v2) {
    sub_100012004(v2, @"DELETE FROM app_events_ocelot_payout;", 0, 0);
  }

  return 1;
}

uint64_t sub_100385740(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 connection];
  uint64_t v5 = sub_1002FF548((uint64_t)AppEventEntityOcelotPayout, v4, 0);

  v14[0] = @"bundle_id";
  v14[1] = @"week_start_time";
  void v14[2] = @"has_been_posted";
  v14[3] = @"ROWID";
  id v6 = +[NSArray arrayWithObjects:v14 count:4];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003858C8;
  v9[3] = &unk_100529230;
  id v10 = a1[4];
  id v11 = v3;
  id v12 = a1[5];
  id v13 = a1[6];
  id v7 = v3;
  [v5 enumerateMemoryEntitiesWithProperties:v6 usingBlock:v9];

  return 1;
}

void sub_1003858C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 valueForProperty:@"week_start_time"];
  unsigned int v5 = sub_10026E7EC(v3, @"has_been_posted");
  id v6 = [v3 databaseID];
  if ([v4 compare:*(void *)(a1 + 32)] == (id)-1 && v5 != 0)
  {
    int v8 = [v3 valueForProperty:@"bundle_id"];
    id v9 = [AppEventEntityOcelotPayout alloc];
    id v10 = [*(id *)(a1 + 40) connection];
    id v11 = [(SQLiteEntity *)v9 initWithPersistentID:v6 onConnection:v10];

    if ([(SQLiteEntity *)v11 existsInDatabase]) {
      [(SQLiteEntity *)v11 deleteFromDatabase];
    }
    id v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(void **)(a1 + 48);
      if (v13) {
        id v13 = (void *)v13[9];
      }
      id v14 = v13;
      __int16 v15 = sub_1002827D0(v4);
      uint64_t v16 = *(void *)(a1 + 56);
      int v17 = 138413314;
      id v18 = v14;
      __int16 v19 = 2114;
      long long v20 = v8;
      __int16 v21 = 2114;
      long long v22 = v15;
      __int16 v23 = 2114;
      uint64_t v24 = v16;
      __int16 v25 = 2048;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Clearing qualified event bundleID: %{public}@ weekDate: %{public}@ currentWeek: %{public}@ pid: %lld", (uint8_t *)&v17, 0x34u);
    }
  }
}

id sub_100385AB0()
{
  unsigned int v0 = sub_100013350();
  id v1 = [v0 stringByAppendingPathComponent:@"top_arcade_apps.plist"];

  return v1;
}

void sub_100385B0C(uint64_t a1)
{
  uint64_t v2 = [[KeepAlive alloc] initWithName:@"Terminate Arcade Apps"];
  id v3 = objc_alloc_init((Class)NSMutableArray);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100385E7C;
  v31[3] = &unk_100528628;
  void v31[4] = *(void *)(a1 + 32);
  id v4 = v3;
  id v32 = v4;
  +[ApplicationProxy enumerateApplicationsOfType:0 usingBlock:v31];
  if ([v4 count])
  {
    __int16 v23 = v2;
    id v5 = [objc_alloc((Class)RBSTerminateContext) initWithExplanation:@"Terminate Arcade Apps"];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v22 = v4;
    id obj = v4;
    id v6 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v28;
      id v9 = NSOutputStream_ptr;
      id v10 = NSOutputStream_ptr;
      do
      {
        id v11 = 0;
        id v24 = v7;
        do
        {
          if (*(void *)v28 != v8) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v27 + 1) + 8 * (void)v11);
          id v13 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            uint64_t v34 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to terminate app with bundleID: %{public}@", buf, 0xCu);
          }

          [v5 setMaximumTerminationResistance:40];
          if (v5)
          {
            id v14 = [v9[35] predicateMatchingBundleIdentifier:v12];
            id v15 = [objc_alloc((Class)v10[37]) initWithPredicate:v14 context:v5];
            if ([v15 processExists])
            {
              uint64_t v16 = v8;
              int v17 = v9;
              id v26 = 0;
              unsigned __int8 v18 = [v15 acquireWithError:&v26];
              id v19 = v26;
              long long v20 = ASDLogHandleForCategory();
              __int16 v21 = v20;
              if (v18)
              {
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  uint64_t v34 = v12;
                  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "App with bundleID: %{public}@ is terminated", buf, 0xCu);
                }
              }
              else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138543362;
                uint64_t v34 = v12;
                _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to terminate app with bundleID: %{public}@", buf, 0xCu);
              }

              [v15 invalidate];
              id v9 = v17;
              uint64_t v8 = v16;
              id v7 = v24;
              id v10 = NSOutputStream_ptr;
            }
          }
          id v11 = (char *)v11 + 1;
        }
        while (v7 != v11);
        id v7 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
      }
      while (v7);
    }

    id v4 = v22;
    uint64_t v2 = v23;
  }
}

void sub_100385E7C(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (sub_10037BB4C(*(void *)(a1 + 32), v6))
  {
    id v3 = [v6 bundleID];

    if (v3)
    {
      id v4 = *(void **)(a1 + 40);
      id v5 = [v6 bundleID];
      [v4 addObject:v5];
    }
  }
}

void sub_100385F0C(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (sub_10037BB4C(*(void *)(a1 + 32), v6))
  {
    id v3 = sub_1003A3448([AppMetadata alloc], v6);
    id v4 = *(void **)(a1 + 40);
    id v5 = [v6 bundleID];
    [v4 setObject:v3 forKeyedSubscript:v5];
  }
}

void sub_100385FAC(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 40), "ams_DSID");
  id v3 = [v2 copy];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = v3;

  id v6 = *(__CFString **)(a1 + 32);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = v7;
  if (v6)
  {
    if ([v7 isTrialPeriod]) {
      id v6 = @"freeTrial";
    }
    else {
      id v6 = @"Paid";
    }
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), v6);
  uint64_t v9 = +[NSNumber numberWithBool:1];
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_10038608C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;

  uint64_t v4 = +[NSNumber numberWithBool:0];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 48);
  *(void *)(v7 + 4_Block_object_dispose(&a9, 8) = @"Unsubscribed";
}

uint64_t sub_10038642C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001F79D0(v3);
  __int16 v21 = +[LSDatabaseContext sharedDatabaseContext];
  unsigned int v20 = [v21 startAccessingReturningError:0];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v24;
    *(void *)&long long v7 = 138543618;
    long long v19 = v7;
    while (2)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v24 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        unsigned int v12 = objc_msgSend(*(id *)(a1 + 32), "isCancelled", v19);
        id v13 = ASDLogHandleForCategory();
        id v14 = v13;
        if (v12)
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Validate manifests operation has been cancelled.", buf, 2u);
          }

          goto LABEL_19;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138543362;
          long long v28 = v11;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Validating application with id [%{public}@]", buf, 0xCu);
        }

        uint64_t v22 = 0;
        id v15 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v11 allowPlaceholder:1 error:&v22];
        if (!v15)
        {
          uint64_t v16 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v19;
            long long v28 = v11;
            __int16 v29 = 2114;
            uint64_t v30 = v22;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Launch services does not know about [%{public}@].  Deleting. Error: %{public}@", buf, 0x16u);
          }

          int v17 = sub_1003B9318((uint64_t)ODRApplication, v11);
          sub_100248610((uint64_t *)v3, v17);
        }
      }
      id v8 = [v5 countByEnumeratingWithState:&v23 objects:v31 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_19:

  if (v20) {
    [v21 stopAccessing];
  }

  return 1;
}

id *sub_1003869E4(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)DAAPURLRequest;
    id v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_100386A80(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = [URLRequest alloc];
    id v5 = sub_100386B20(a1, v3);
    id v6 = sub_100266924(v4, v5);

    sub_1002669B4((uint64_t)v6, v3);
  }
}

URLRequestProperties *sub_100386B20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(URLRequestProperties);
  id v5 = *(void **)(a1 + 8);
  id v16 = 0;
  id v6 = [v5 dataForRequestWithError:&v16];
  id v7 = v16;
  if (v6)
  {
    sub_100364C4C((uint64_t)v4, v6);
    sub_1003641D4((uint64_t)v4, *(void **)(a1 + 24));
    sub_100364598((uint64_t)v4, *(void **)(a1 + 40));
    if (v4) {
      v4->_dataEncoding = 1;
    }
    sub_1003650AC((uint64_t)v4, *(void **)(a1 + 16));
    sub_10036526C((uint64_t)v4, 1);
    id v8 = *(void **)(a1 + 48);
    if (v8) {
      sub_1003648FC((uint64_t)v4, v8);
    }
    sub_100364E08((uint64_t)v4, 4);
    sub_100364A7C((uint64_t)v4, 1);
    uint64_t v9 = +[AMSDevice buildVersion];
    if (![(__CFString *)v9 length])
    {

      uint64_t v9 = @"UNKNOWN";
    }
    objc_super v10 = +[NSString stringWithFormat:@"%@/%@", @"1.3", v9];
    sub_1003652FC((uint64_t)v4, v10, @"Client-Cloud-Daap-Version");

    id v11 = +[NSString stringWithFormat:@"%@/%@", @"1.1", v9];
    sub_1003652FC((uint64_t)v4, v11, @"Client-Cloud-Purchase-DAAP-Version");

    if (*(void *)(a1 + 32))
    {
      unsigned int v12 = +[NSString stringWithFormat:@"%lli", *(void *)(a1 + 32)];
      sub_1003652FC((uint64_t)v4, v12, @"X-FM-Dsid");
    }
    id v13 = @"application/x-dmap-tagged";
    if ((objc_opt_respondsToSelector() & 1) != 0 && [*(id *)(a1 + 8) contentType] == (id)1) {
      id v13 = @"application/x-www-form-urlencoded";
    }
    sub_1003652FC((uint64_t)v4, v13, AMSHTTPHeaderContentType);
    id v14 = v4;
  }
  else
  {
    v3[2](v3, 0, v7);
    id v14 = 0;
  }

  return v14;
}

void sub_100386D94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = sub_100386B20(a1, v6);
    uint64_t v9 = sub_100266CD0((uint64_t *)[URLRequestEncoder alloc], v7);
    if (!v7 || (id v10 = objc_getProperty(v7, v8, 112, 1)) == 0)
    {
      sub_100364B04((uint64_t)v7);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v11 = sub_100364D38((uint64_t)v7);
    unsigned int v12 = sub_100364F64((uint64_t)v7);
    id v13 = [v9 requestWithMethod:v11 URL:v12 parameters:v10];
    id v33 = 0;
    id v14 = [v13 resultWithError:&v33];
    id v15 = v33;

    if (v15)
    {
      id v16 = ASDLogHandleForCategory();
      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (!v14)
      {
        if (v17)
        {
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Encountered error in DAAP URL request creation: %{public}@. Aborting since request is nil", (uint8_t *)&buf, 0xCu);
        }

        goto LABEL_16;
      }
      if (v17)
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Encountered error in DAAP URL request creation: %{public}@", (uint8_t *)&buf, 0xCu);
      }
    }
    id v28 = v15;
    uint64_t v30 = v9;
    id v32 = v5;
    id v18 = v5;
    id v31 = v6;
    id v19 = v6;
    __int16 v29 = v14;
    id v20 = v14;
    id v21 = v7;
    uint64_t v22 = sub_100364488((uint64_t)v21);
    if (!v22)
    {
      uint64_t v22 = sub_1000169A4();
    }
    long long v23 = sub_10027AD48((uint64_t)AMSURLSession, v22, v18);
    long long v24 = objc_alloc_init(URLResponseDecoder);
    [v23 setResponseDecoder:v24];
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    id v35 = sub_1003870F8;
    __int16 v36 = &unk_1005241C0;
    id v25 = v19;
    id v37 = v25;
    long long v26 = [v23 dataTaskWithRequest:v20 completionHandler:&buf];

    long long v27 = [v23 responseDecoder];
    sub_10023DB9C((uint64_t)v27, v21, v26);

    [v26 resume];
    id v6 = v31;
    id v5 = v32;
    id v14 = v29;
    uint64_t v9 = v30;
    id v15 = v28;
LABEL_16:
  }
}

void sub_1003870F8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  ASDErrorWithSafeUserInfo();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, v4);
}

id *sub_100387860(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)FailPurchaseTask;
    id v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 5, a3);
      objc_storeStrong(a1 + 6, a2);
    }
  }

  return a1;
}

void sub_100387EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100387F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 48) bundleID];
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v4];

  id v6 = [v3 connection];
  id v7 = sub_1002FF3DC((uint64_t)AppUpdateEntity, v6, v5);

  if ([v7 existsInDatabase])
  {
    id v8 = [*(id *)(*(void *)(a1 + 32) + 48) logKey];
    uint64_t v9 = sub_1003763C0((uint64_t)v3, v7, v8);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v9 ^ 1;
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id sub_100388088()
{
  self;
  if (qword_1005B1068 != -1) {
    dispatch_once(&qword_1005B1068, &stru_10052A440);
  }
  unsigned int v0 = (void *)qword_1005B1060;
  return v0;
}

void sub_1003880E0(id a1)
{
  id v1 = objc_alloc_init(ProgressCache);
  uint64_t v2 = (void *)qword_1005B1060;
  qword_1005B1060 = (uint64_t)v1;
}

void sub_100388208(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003882D0;
    block[3] = &unk_1005212D8;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_sync(v7, block);
  }
}

void sub_1003882D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 48);
  id v3 = (__CFString **)*(id *)(a1 + 40);
  id v4 = v2;
  if (v1)
  {
    if (v3 && (id v5 = v3[12], v6 = v5, v5))
    {
      id v7 = v6;
      id v8 = [*(id *)(v1 + 40) objectForKeyedSubscript:v6];
      id v9 = ASDLogHandleForCategory();
      id v10 = v9;
      if (v8)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          id v12 = objc_getProperty(v8, v11, 104, 1);
          id v14 = objc_getProperty(v3, v13, 152, 1);
          *(_DWORD *)id v32 = 138412802;
          *(void *)&v32[4] = v12;
          __int16 v33 = 2114;
          CFStringRef v34 = v5;
          __int16 v35 = 2114;
          id v36 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@]: Received duplicate BeginProgress with bundleID: %{public}@ storeItemID: %{public}@", v32, 0x20u);
        }
      }
      else
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          id v16 = objc_getProperty(v3, v15, 104, 1);
          char v17 = *((unsigned char *)v3 + 64);
          *(_DWORD *)id v32 = 138412802;
          *(void *)&v32[4] = v16;
          if (v17) {
            CFStringRef v18 = @"remote progress";
          }
          else {
            CFStringRef v18 = @"progress";
          }
          __int16 v33 = 2114;
          CFStringRef v34 = v18;
          __int16 v35 = 2114;
          id v36 = v4;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@]: Beginning %{public}@ with reason: %{public}@", v32, 0x20u);
        }
        uint64_t v19 = (_BYTE)v3[8] & 1;
        id v21 = objc_getProperty(v3, v20, 72, 1);
        [v21 setReportRemotely:v19];

        [*(id *)(v1 + 40) setObject:v3 forKeyedSubscript:v7];
        id v10 = [*(id *)(v1 + 32) objectForKeyedSubscript:v7];
        if (!v10)
        {
          id v10 = [objc_alloc((Class)ASDApp) initWithBundleID:v7];
          id v24 = objc_getProperty(v3, v23, 152, 1);
          -[NSObject setStoreItemID:](v10, "setStoreItemID:", [v24 longLongValue]);

          [v10 setStatus:v3[18]];
          [v10 setWatchApplicationMode:v3[20]];
        }
        id v25 = objc_getProperty(v3, v22, 72, 1);
        [v10 setRemoteProgress:v25];

        [*(id *)(v1 + 32) setObject:v10 forKeyedSubscript:v7];
        id WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
        id v27 = [v10 copy];
        *(void *)id v32 = v27;
        id v28 = +[NSArray arrayWithObjects:v32 count:1];
        [WeakRetained catalogRegisteredApps:v28];

        sub_100389010((void *)v1, v3);
      }
    }
    else
    {
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if (v3) {
          id Property = objc_getProperty(v3, v29, 152, 1);
        }
        else {
          id Property = 0;
        }
        id v31 = Property;
        *(_DWORD *)id v32 = 138543362;
        *(void *)&v32[4] = v31;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to begin progress with no bundleID (storeItemID: %{public}@)", v32, 0xCu);
      }
      id v7 = 0;
    }
  }
}

void sub_1003886AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100388750;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_100388750(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:");
    id v3 = ASDLogHandleForCategory();
    id v4 = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = objc_getProperty(v2, v5, 104, 1);
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412546;
        id v16 = v6;
        __int16 v17 = 2114;
        uint64_t v18 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@]: Canceling progress for bundleID: %{public}@", buf, 0x16u);
      }
      [*(id *)(*(void *)(a1 + 40) + 40) setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(a1 + 40) + 48) removeObject:v2];
    }
    else
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        SEL v13 = *(void **)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        id v16 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Canceling untracked progress for bundleID: %{public}@", buf, 0xCu);
      }
    }
    uint64_t v8 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 32)];

    if (v8)
    {
      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = *(void **)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Removing placeholder from library for bundleID: %{public}@", buf, 0xCu);
      }

      [*(id *)(*(void *)(a1 + 40) + 32) removeObjectForKey:*(void *)(a1 + 32)];
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 24));
      uint64_t v14 = *(void *)(a1 + 32);
      id v12 = +[NSArray arrayWithObjects:&v14 count:1];
      [WeakRetained catalogRefreshedBundleIDs:v12];
    }
  }
  else
  {
    uint64_t v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to cancel progress with no bundleID", buf, 2u);
    }
  }
}

void sub_1003889D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100388A78;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_100388A78(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:");
    id v3 = ASDLogHandleForCategory();
    id v4 = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = objc_getProperty(v2, v5, 104, 1);
        uint64_t v7 = *(void *)(a1 + 32);
        int v11 = 138412546;
        id v12 = v6;
        __int16 v13 = 2114;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@]: Pausing progress for bundleID: %{public}@", (uint8_t *)&v11, 0x16u);
      }
      id v9 = objc_getProperty(v2, v8, 72, 1);
      [v9 setPhase:7];

      [*(id *)(*(void *)(a1 + 40) + 48) removeObject:v2];
      sub_100388C5C(*(void *)(a1 + 40), v2);
    }
    else
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        id v10 = *(void **)(a1 + 32);
        int v11 = 138543362;
        id v12 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Could not find progress to pause for bundleID: %{public}@", (uint8_t *)&v11, 0xCu);
      }

      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v11) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to pause progress with no bundleID", (uint8_t *)&v11, 2u);
    }
  }
}

void sub_100388C5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    sub_10041F54C(v3);
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (v4) {
        id Property = objc_getProperty(v4, v6, 104, 1);
      }
      else {
        id Property = 0;
      }
      id v8 = Property;
      int v13 = 138412546;
      id v14 = v8;
      __int16 v15 = 2114;
      id v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@]: Posting progress: %{public}@", (uint8_t *)&v13, 0x16u);
    }
    uint64_t v10 = *(void *)(a1 + 16);
    if (v4) {
      id v11 = objc_getProperty(v4, v9, 72, 1);
    }
    else {
      id v11 = 0;
    }
    id v12 = v11;
    sub_1003D66C0(v10, v12);
  }
}

void sub_100388D90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100388E34;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_100388E34(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:");
    id v3 = ASDLogHandleForCategory();
    id v4 = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = objc_getProperty(v2, v5, 104, 1);
        uint64_t v7 = *(void *)(a1 + 32);
        int v11 = 138412546;
        id v12 = v6;
        __int16 v13 = 2114;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@]: Resuming progress for bundleID: %{public}@", (uint8_t *)&v11, 0x16u);
      }
      id v9 = objc_getProperty(v2, v8, 72, 1);
      [v9 setPhase:2];

      sub_10041F4EC((id *)&v2->isa);
      sub_100389010(*(void **)(a1 + 40), v2);
    }
    else
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void **)(a1 + 32);
        int v11 = 138543362;
        id v12 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Could not find progress to pause for bundleID: %{public}@", (uint8_t *)&v11, 0xCu);
      }

      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v11) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to resume progress with no bundleID", (uint8_t *)&v11, 2u);
    }
  }
}

void sub_100389010(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      if (*((double *)v3 + 16) == 1.0)
      {
        id v5 = v3[12];
        id v6 = v5;
        if (v5)
        {
          uint64_t v7 = v6;
          SEL v8 = (void *)a1[5];
          id v9 = v4[12];
          uint64_t v10 = [v8 objectForKeyedSubscript:v9];

          if (v10)
          {
            int v11 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              SEL v20 = v4;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Processing last progress: %{public}@", buf, 0xCu);
            }

            goto LABEL_11;
          }
        }
      }
    }
    id v12 = (void *)a1[6];
    if (!v12)
    {
LABEL_11:
      __int16 v13 = +[NSSet setWithObject:v4];
      sub_10038AE00((uint64_t)a1, v13);

      uint64_t v14 = +[NSMutableSet set];
      __int16 v15 = (void *)a1[6];
      a1[6] = v14;

      dispatch_time_t v16 = dispatch_time(0, 200000000);
      __int16 v17 = a1[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10038B088;
      block[3] = &unk_100521388;
      void block[4] = a1;
      dispatch_after(v16, v17, block);
      goto LABEL_12;
    }
    [v12 addObject:v4];
  }
LABEL_12:
}

void *sub_1003891F0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x3032000000;
    uint64_t v14 = sub_100018338;
    __int16 v15 = sub_100017D58;
    id v16 = 0;
    id v5 = a1[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10038930C;
    block[3] = &unk_10052A468;
    id v9 = a1;
    uint64_t v10 = &v11;
    id v8 = v3;
    dispatch_sync(v5, block);
    a1 = (id)v12[5];

    _Block_object_dispose(&v11, 8);
  }

  return a1;
}

void sub_10038930C(void *a1)
{
  if (a1[4])
  {
    objc_msgSend(*(id *)(a1[5] + 32), "objectForKeyedSubscript:");
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v2 = [v6 copy];
    uint64_t v3 = *(void *)(a1[6] + 8);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }
  else
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed find existing app with no bundleID", buf, 2u);
    }
  }
}

void *sub_1003893D8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x3032000000;
    uint64_t v14 = sub_100018338;
    __int16 v15 = sub_100017D58;
    id v16 = 0;
    id v5 = a1[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003894F4;
    block[3] = &unk_10052A468;
    id v9 = a1;
    uint64_t v10 = &v11;
    id v8 = v3;
    dispatch_sync(v5, block);
    a1 = (id)v12[5];

    _Block_object_dispose(&v11, 8);
  }

  return a1;
}

void sub_1003894F4(void *a1)
{
  if (a1[4])
  {
    id Property = objc_msgSend(*(id *)(a1[5] + 40), "objectForKeyedSubscript:");
    id v9 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v3, 72, 1);
    }
    id v4 = Property;
    id v5 = [v4 copy];
    uint64_t v6 = *(void *)(a1[6] + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  else
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed find existing progress with no bundleID", buf, 2u);
    }
  }
}

void sub_1003895DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003896A0;
    block[3] = &unk_1005212D8;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1003896A0(void *a1)
{
  if (a1[4])
  {
    id v2 = objc_msgSend(*(id *)(a1[5] + 32), "objectForKeyedSubscript:");

    id v3 = ASDLogHandleForCategory();
    id WeakRetained = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        id v5 = (void *)a1[4];
        int v20 = 138543362;
        id v21 = v5;
        _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_INFO, "Finished library placeholder for bundleID: %{public}@", (uint8_t *)&v20, 0xCu);
      }

      [*(id *)(a1[5] + 32) removeObjectForKey:a1[4]];
      id WeakRetained = objc_loadWeakRetained((id *)(a1[5] + 24));
      uint64_t v24 = a1[4];
      id v6 = +[NSArray arrayWithObjects:&v24 count:1];
      [WeakRetained catalogRefreshedBundleIDs:v6];
    }
    else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = (void *)a1[4];
      int v20 = 138543362;
      id v21 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "Failed to find placeholder to finish for bundleID: %{public}@", (uint8_t *)&v20, 0xCu);
    }

    uint64_t v7 = [*(id *)(a1[5] + 40) objectForKeyedSubscript:a1[4]];
    if (v7)
    {
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = objc_getProperty(v7, v9, 104, 1);
        uint64_t v11 = a1[6];
        int v20 = 138412546;
        id v21 = v10;
        __int16 v22 = 2114;
        uint64_t v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@]: Finished progress with reason: %{public}@", (uint8_t *)&v20, 0x16u);
      }
      v7[16].Class isa = (Class)0x3FF0000000000000;
      id v13 = objc_getProperty(v7, v12, 72, 1);
      id v14 = [v13 installTotalUnitCount];
      id v16 = objc_getProperty(v7, v15, 72, 1);
      [v16 setInstallCompletedUnitCount:v14];

      id v18 = objc_getProperty(v7, v17, 72, 1);
      [v18 setPhase:6];

      [*(id *)(a1[5] + 48) removeObject:v7];
      [*(id *)(a1[5] + 40) setObject:0 forKeyedSubscript:a1[4]];
    }
  }
  else
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to finish progress with no bundleID", (uint8_t *)&v20, 2u);
    }
  }
}

void *sub_1003899A8(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_100018338;
    id v9 = sub_100017D58;
    id v10 = (id)objc_opt_new();
    id v2 = v1[1];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100389AC4;
    v4[3] = &unk_100524F38;
    void v4[4] = v1;
    void v4[5] = &v5;
    dispatch_sync(v2, v4);
    uint64_t v1 = [(id)v6[5] copy];
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_100389AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100389AC4(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(void *)(*((void *)&v10 + 1) + 8 * (void)v6), (void)v10);
        if ([v7 isSystemApp] && objc_msgSend(v7, "watchApplicationMode"))
        {
          id v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          id v9 = [v7 copy];
          [v8 addObject:v9];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100389C18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100389CBC;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_sync(v5, v6);
  }
}

void *sub_100389CBC(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 32), "setObject:forKeyedSubscript:", 0);
  }
  return result;
}

void sub_100389CD8(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100389D8C;
    block[3] = &unk_100525408;
    double v11 = a3;
    id v9 = v5;
    uint64_t v10 = a1;
    dispatch_async(v7, block);
  }
}

void sub_100389D8C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:");
    if (v2)
    {
      id v4 = v2;
      uint64_t v5 = (uint64_t)(*(double *)(a1 + 48) * 1000.0);
      id v6 = objc_getProperty(v2, v3, 72, 1);
      [v6 setCompletedUnitCount:v5];

      id v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v9 = objc_getProperty(v4, v8, 104, 1);
        uint64_t v10 = *(void *)(a1 + 48);
        int v17 = 138412546;
        id v18 = v9;
        __int16 v19 = 2048;
        uint64_t v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%@]: Setting fraction completed: %.2f", (uint8_t *)&v17, 0x16u);
      }
      sub_100389010(*(void **)(a1 + 40), v4);
    }
    else
    {
      long long v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        long long v13 = *(void **)(a1 + 32);
        int v17 = 138543362;
        id v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No progress exists for: %{public}@ - Ignoring this request", (uint8_t *)&v17, 0xCu);
      }

      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        SEL v15 = *(void **)(a1 + 48);
        uint64_t v16 = *(void *)(a1 + 32);
        int v17 = 134218242;
        id v18 = v15;
        __int16 v19 = 2114;
        uint64_t v20 = v16;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to set fraction completed: %.2f for: %{public}@", (uint8_t *)&v17, 0x16u);
      }

      id v4 = 0;
    }
  }
  else
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      double v11 = *(void **)(a1 + 48);
      int v17 = 134217984;
      id v18 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to set fraction completed: %.2f with no bundleID", (uint8_t *)&v17, 0xCu);
    }
  }
}

void sub_100389FF8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (a1)
  {
    if (v7)
    {
      id v9 = *(NSObject **)(a1 + 8);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10038A140;
      v11[3] = &unk_10052A490;
      void v11[4] = a1;
      id v12 = v7;
      uint64_t v13 = a4;
      uint64_t v14 = a3;
      dispatch_async(v9, v11);
    }
    else
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v16 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to begin download progress: %lld with no bundleID", buf, 0xCu);
      }
    }
  }
}

void sub_10038A140(void *a1)
{
  id v2 = [*(id *)(a1[4] + 40) objectForKeyedSubscript:a1[5]];
  id v3 = ASDLogHandleForCategory();
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = objc_getProperty(v2, v5, 104, 1);
      uint64_t v7 = a1[6];
      int v9 = 138412546;
      id v10 = v6;
      __int16 v11 = 2048;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@]: Starting download progress for size: %lld", (uint8_t *)&v9, 0x16u);
    }
    v2[15] = a1[6];
    sub_10041FA88(v2, a1[7]);
    sub_10041F4EC((id *)v2);
    sub_100389010((void *)a1[4], v2);
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (void *)a1[5];
      int v9 = 138543362;
      id v10 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "No progress exists for: %{public}@ - Ignoring this request (update download progress)", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_10038A2B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (v5)
    {
      uint64_t v7 = *(NSObject **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10038A3EC;
      block[3] = &unk_100525408;
      void block[4] = a1;
      id v10 = v5;
      uint64_t v11 = a3;
      dispatch_async(v7, block);
    }
    else
    {
      uint64_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v13 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to update download progress: %lld with no bundleID", buf, 0xCu);
      }
    }
  }
}

void sub_10038A3EC(void *a1)
{
  id v2 = [*(id *)(a1[4] + 40) objectForKeyedSubscript:a1[5]];
  id v3 = v2;
  if (v2)
  {
    sub_10041FA88(v2, a1[6]);
    sub_100389010((void *)a1[4], v3);
  }
  else
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = a1[5];
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "No progress exists for: %{public}@ - Ignoring this request (update download progress)", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10038A4DC(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  int v6 = v5;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10038A590;
    block[3] = &unk_100525408;
    double v11 = a3;
    id v9 = v5;
    uint64_t v10 = a1;
    dispatch_async(v7, block);
  }
}

void sub_10038A590(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:");
    if (v2)
    {
      uint64_t v4 = (uint64_t)v2;
      id v5 = (double *)objc_getProperty(v2, v3, 136, 1);
      uint64_t v7 = v5;
      double v8 = 0.0;
      double v9 = 0.0;
      if (v5) {
        double v9 = v5[1];
      }
      uint64_t v10 = (double *)objc_getProperty((id)v4, v6, 136, 1);
      if (v10) {
        double v8 = v10[2];
      }
      double v11 = v9 + v8 * *(double *)(a1 + 48);

      *(double *)(v4 + 12_Block_object_dispose(&a9, 8) = v11;
      id v13 = objc_getProperty((id)v4, v12, 72, 1);
      [v13 setCompletedUnitCount:(uint64_t)(v11 * 1000.0)];

      uint64_t v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v16 = objc_getProperty((id)v4, v15, 104, 1);
        uint64_t v17 = *(void *)(a1 + 48);
        int v26 = 138412802;
        id v27 = v16;
        __int16 v28 = 2048;
        uint64_t v29 = v17;
        __int16 v30 = 2048;
        double v31 = v11;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[%@]: Received install progress: %.2f (%.2f)", (uint8_t *)&v26, 0x20u);
      }
      uint64_t v18 = (uint64_t)(*(double *)(a1 + 48) * 1000.0);
      id v20 = objc_getProperty((id)v4, v19, 72, 1);
      [v20 setInstallCompletedUnitCount:v18];

      id v22 = objc_getProperty((id)v4, v21, 72, 1);
      [v22 setPhase:4];

      sub_100389010(*(void **)(a1 + 40), (void *)v4);
    }
    else
    {
      uint64_t v24 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        id v25 = *(void **)(a1 + 32);
        int v26 = 138543362;
        id v27 = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "No progress exists for: %{public}@ - Ignoring this request (update install progress)", (uint8_t *)&v26, 0xCu);
      }

      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void **)(a1 + 48);
      int v26 = 134217984;
      id v27 = v23;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v4, OS_LOG_TYPE_ERROR, "Failed to set install progress: %.2f with no bundleID", (uint8_t *)&v26, 0xCu);
    }
  }
}

void sub_10038A85C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  double v8 = v7;
  if (a1)
  {
    double v9 = *(NSObject **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10038A914;
    void v10[3] = &unk_10052A490;
    uint64_t v13 = a3;
    uint64_t v14 = a4;
    id v11 = v7;
    uint64_t v12 = a1;
    dispatch_async(v9, v10);
  }
}

void sub_10038A914(void *a1)
{
  if (a1[4])
  {
    if ((a1[6] & 0x8000000000000000) != 0)
    {
      uint64_t v4 = ASDLogHandleForCategory();
      if (!os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      id v27 = (void *)a1[4];
      int v52 = 138543362;
      id v53 = v27;
      __int16 v28 = "[%{public}@]: Received background asset progress update but bytes downloaded are not available";
    }
    else
    {
      if ((a1[7] & 0x8000000000000000) == 0)
      {
        id v2 = objc_msgSend(*(id *)(a1[5] + 40), "objectForKeyedSubscript:");
        if (v2)
        {
          uint64_t v4 = (uint64_t)v2;
          id v5 = objc_getProperty(v2, v3, 136, 1);
          if (v5 && (uint64_t v6 = v5[4], v5, v6 >= 1))
          {
            uint64_t v8 = a1[6];
            uint64_t v9 = a1[7];
            uint64_t v10 = (double *)objc_getProperty((id)v4, v7, 136, 1);
            uint64_t v12 = v10;
            double v13 = 0.0;
            double v14 = 0.0;
            if (v10) {
              double v14 = v10[1];
            }
            double v15 = (double)v8;
            double v16 = (double)v9;
            uint64_t v17 = (double *)objc_getProperty((id)v4, v11, 136, 1);
            SEL v19 = v17;
            if (v17) {
              double v13 = v17[2];
            }
            double v20 = v14 + v13;
            SEL v21 = (double *)objc_getProperty((id)v4, v18, 136, 1);
            if (v21) {
              double v22 = v21[3];
            }
            else {
              double v22 = 0.0;
            }
            double v23 = v20 + v22 * (v15 / v16);
          }
          else
          {
            id v32 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              id v51 = objc_getProperty((id)v4, v33, 104, 1);
              int v52 = 138412290;
              id v53 = v51;
              _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "[%@]: Received background asset progress update but not configured to report this progress", (uint8_t *)&v52, 0xCu);
            }
            double v23 = 0.0;
          }
          *(double *)(v4 + 12_Block_object_dispose(&a9, 8) = v23;
          id v34 = objc_getProperty((id)v4, v24, 72, 1);
          [v34 setCompletedUnitCount:(uint64_t)(v23 * 1000.0)];

          *(void *)(v4 + 8_Block_object_dispose(&a9, 8) = a1[7];
          *(void *)(v4 + 80) = a1[6];
          __int16 v35 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            id v37 = objc_getProperty((id)v4, v36, 104, 1);
            uint64_t v38 = a1[6];
            uint64_t v39 = a1[7];
            int v52 = 138413058;
            id v53 = v37;
            __int16 v54 = 2048;
            uint64_t v55 = v38;
            __int16 v56 = 2048;
            uint64_t v57 = v39;
            __int16 v58 = 2048;
            double v59 = v23;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "[%@]: Received background asset download progress: %lld/%lld (%.2f)", (uint8_t *)&v52, 0x2Au);
          }
          uint64_t v40 = a1[6];
          id v42 = objc_getProperty((id)v4, v41, 72, 1);
          [v42 setPostProcessCompletedUnitCount:v40];

          uint64_t v43 = a1[7];
          id v45 = objc_getProperty((id)v4, v44, 72, 1);
          [v45 setPostProcessTotalUnitCount:v43];

          id v47 = objc_getProperty((id)v4, v46, 72, 1);
          id v48 = [v47 phase];

          if (v48 != (id)5)
          {
            sub_10041F4EC((id *)v4);
            id v50 = objc_getProperty((id)v4, v49, 72, 1);
            [v50 setPhase:5];
          }
          sub_100389010((void *)a1[5], (void *)v4);
        }
        else
        {
          __int16 v30 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            double v31 = (void *)a1[4];
            int v52 = 138543362;
            id v53 = v31;
            _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "No progress exists for: %{public}@ - Ignoring this request (update background asset progress)", (uint8_t *)&v52, 0xCu);
          }

          uint64_t v4 = 0;
        }
        goto LABEL_32;
      }
      uint64_t v4 = ASDLogHandleForCategory();
      if (!os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      uint64_t v29 = (void *)a1[4];
      int v52 = 138543362;
      id v53 = v29;
      __int16 v28 = "[%{public}@]: Received background asset progress update but total bytes are not available";
    }
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v4, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v52, 0xCu);
    goto LABEL_32;
  }
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
  {
    id v25 = (void *)a1[6];
    uint64_t v26 = a1[7];
    int v52 = 134218240;
    id v53 = v25;
    __int16 v54 = 2048;
    uint64_t v55 = v26;
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v4, OS_LOG_TYPE_ERROR, "Failed to update background asset progress: %lld/%lld with no bundleID", (uint8_t *)&v52, 0x16u);
  }
LABEL_32:
}

void sub_10038AE00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1002DC980();
  sub_1002DCAAC((uint64_t)v4);
  id v5 = (unsigned char *)objc_claimAutoreleasedReturnValue();

  uint64_t v6 = objc_opt_new();
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v7 = v3;
  id v8 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v26;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v26 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v25 + 1) + 8 * (void)v11);
        if (v12 && (*(unsigned char *)(v12 + 64) & 1) != 0)
        {
          if (v5 && (v5[18] & 1) != 0)
          {
            double v13 = objc_alloc_init(XDCProgress);
            id v14 = *(id *)(v12 + 96);
            sub_1002C4468((uint64_t)v13, v14);

            id v16 = objc_getProperty((id)v12, v15, 72, 1);
            id v17 = objc_msgSend(v16, "completedUnitCount", (void)v25);
            if (v13) {
              v13->_completedUnitCount = (int64_t)v17;
            }

            id v19 = objc_getProperty((id)v12, v18, 72, 1);
            id v20 = [v19 totalUnitCount];
            if (v13) {
              v13->_totalUnitCount = (int64_t)v20;
            }

            [v6 addObject:v13];
          }
        }
        else
        {
          sub_100388C5C(a1, *(void **)(*((void *)&v25 + 1) + 8 * (void)v11));
        }
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v9);
  }

  if ([v6 count])
  {
    SEL v21 = objc_alloc_init(XDCProgressMessage);
    sub_10033C0C8((uint64_t)v21, v6);
    id v22 = sub_1003690D8([XDCMessage alloc], v21, 4);
    uint64_t v23 = sub_1003177EC();
    uint64_t v24 = (void *)v23;
    if (v23) {
      sub_100317CB4(v23, v22, v5, 0, 0);
    }
  }
}

void sub_10038B088(uint64_t a1)
{
}

void sub_10038B090(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 48) count];
    id v3 = *(void **)(a1 + 48);
    if (v2)
    {
      sub_10038AE00(a1, v3);
      [*(id *)(a1 + 48) removeAllObjects];
      dispatch_time_t v4 = dispatch_time(0, 200000000);
      id v5 = *(NSObject **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10038B164;
      block[3] = &unk_100521388;
      void block[4] = a1;
      dispatch_after(v4, v5, block);
    }
    else
    {
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    }
  }
}

uint64_t sub_10038B164(uint64_t a1)
{
  return sub_10038B090(*(void *)(a1 + 32));
}

id sub_10038B214()
{
  self;
  if (qword_1005B1078 != -1) {
    dispatch_once(&qword_1005B1078, &stru_10052A4B0);
  }
  unsigned int v0 = (void *)qword_1005B1070;
  return v0;
}

void sub_10038B26C(id a1)
{
  uint64_t v1 = objc_alloc_init(CrossfireService);
  id v2 = (void *)qword_1005B1070;
  qword_1005B1070 = (uint64_t)v1;
}

id *sub_10038BADC(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)PurchaseHistoryItemsDAAPResponseDecoder;
    id v5 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong(v5 + 3, a2);
      a1[8] = (id)100;
      id v6 = [objc_alloc((Class)NSConditionLock) initWithCondition:0];
      id v7 = a1[10];
      a1[10] = v6;

      id v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v9 = dispatch_queue_create("com.apple.AppStoreDaemon.PurchaseHistoryDAAPResponseDecoder.pasrsingQueue", v8);
      id v10 = a1[11];
      a1[11] = v9;

      *((unsigned char *)a1 + 96) = 0;
    }
  }

  return a1;
}

void sub_10038BBB4(void **a1)
{
  if (a1)
  {
    self = sub_1002C3978((id *)[PurchaseHistoryItemsDAAPResponseMetadataParser alloc], a1[3]);
    sub_100296B0C((uint64_t)self);
    if (self)
    {
      id v3 = objc_getProperty(self, v2, 24, 1);
      id v4 = a1[13];
      a1[13] = v3;

      id Property = objc_getProperty(self, v5, 32, 1);
    }
    else
    {
      objc_storeStrong(a1 + 13, 0);
      id Property = 0;
    }
    objc_storeStrong(a1 + 14, Property);
    if (self) {
      id v8 = objc_getProperty(self, v7, 40, 1);
    }
    else {
      id v8 = 0;
    }
    objc_storeStrong(a1 + 15, v8);
  }
}

id sub_10038BC94(uint64_t a1)
{
  if (!a1)
  {
LABEL_21:
    id v6 = 0;
    goto LABEL_22;
  }
  if (![*(id *)(a1 + 24) length])
  {
    id v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v17) = 138412290;
      *(void *)((char *)&v17 + 4) = objc_opt_class();
      id v16 = *(id *)((char *)&v17 + 4);
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@]: Response data 0 length", (uint8_t *)&v17, 0xCu);
    }
    goto LABEL_21;
  }
  [*(id *)(a1 + 80) lock];
  if (![*(id *)(a1 + 80) condition])
  {
    id v2 = *(id *)(a1 + 24);
    id v3 = *(NSObject **)(a1 + 88);
    *(void *)&long long v17 = _NSConcreteStackBlock;
    *((void *)&v17 + 1) = 3221225472;
    SEL v18 = sub_10038BED4;
    id v19 = &unk_1005218C0;
    uint64_t v20 = a1;
    id v21 = v2;
    id v4 = v2;
    dispatch_async(v3, &v17);
  }
  objc_msgSend(*(id *)(a1 + 80), "unlockWithCondition:", 1, v17, v18, v19, v20);
  [*(id *)(a1 + 80) lockWhenCondition:2];
  uint64_t v5 = objc_opt_new();
  id v6 = (void *)v5;
  if (*(unsigned char *)(a1 + 96) && v5) {
    *(unsigned char *)(v5 + _Block_object_dispose(&a9, 8) = 1;
  }
  if ([*(id *)(a1 + 32) count] && v6) {
    objc_setProperty_atomic(v6, v7, *(id *)(a1 + 32), 16);
  }
  if ([*(id *)(a1 + 40) count] && v6) {
    objc_setProperty_atomic(v6, v8, *(id *)(a1 + 40), 24);
  }
  *(void *)(a1 + 72) = 0;
  uint64_t v9 = objc_opt_new();
  id v10 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v9;

  uint64_t v11 = objc_opt_new();
  objc_super v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v11;

  if (*(unsigned char *)(a1 + 96)) {
    uint64_t v13 = 3;
  }
  else {
    uint64_t v13 = 2;
  }
  [*(id *)(a1 + 80) unlockWithCondition:v13];
LABEL_22:
  return v6;
}

void sub_10038BED4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 80) lock];
  id v2 = [objc_alloc((Class)DKDAAPParser) initWithData:*(void *)(a1 + 40)];
  [v2 setDelegate:*(void *)(a1 + 32)];
  [v2 parse];
}

id sub_10038BF44(id result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = *((void *)result + 8);
    unint64_t v3 = *((void *)result + 9) + 1;
    *((void *)result + 9) = v3;
    if (v3 >= v2)
    {
      [*((id *)result + 10) unlockWithCondition:2];
      id v4 = (void *)v1[10];
      return [v4 lockWhenCondition:1];
    }
  }
  return result;
}

void *sub_10038D208(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  uint64_t v6 = objc_opt_new();
  id v7 = (void *)v6;
  if (v6)
  {
    objc_storeStrong((id *)(v6 + 16), a2);

    id v8 = v4;
    id v5 = (id)v7[3];
    v7[3] = v8;
  }

  return v7;
}

uint64_t sub_10038D298(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  objc_sync_enter(v1);
  uint64_t v2 = v1[1] - 1;
  v1[1] = v2;
  objc_sync_exit(v1);

  return v2;
}

uint64_t sub_10038D2E8(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  objc_sync_enter(v1);
  uint64_t v2 = v1[1] + 1;
  v1[1] = v2;
  objc_sync_exit(v1);

  return v2;
}

void *sub_10038D37C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)ODRApplicationCleanTask;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

void sub_10038D488(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = sub_1003B9E28(v1[5]);
    id v3 = sub_10040EBA8();
    sub_10040FB04((uint64_t)v3, v2, 0);

    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cancelled download requests for: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v27 = 0x3032000000;
    long long v28 = sub_100018348;
    uint64_t v29 = sub_100017D60;
    id v30 = 0;
    id v5 = sub_1002393C4();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10038D85C;
    v18[3] = &unk_100523B10;
    p_long long buf = &buf;
    id v6 = v2;
    id v19 = v6;
    [v5 readUsingSession:v18];

    if (*(void *)(*((void *)&buf + 1) + 40))
    {
      uint64_t v7 = sub_1003F9F04();
      id v8 = (void *)v7;
      if (v7) {
        uint64_t v9 = *(void **)(v7 + 32);
      }
      else {
        uint64_t v9 = 0;
      }
      id v10 = v9;
      uint64_t v11 = [v10 stringByAppendingPathComponent:*(void *)(*((void *)&buf + 1) + 40)];

      if (v11)
      {
        objc_super v12 = +[SAPathManager defaultManager];
        uint64_t v13 = +[NSURL fileURLWithPath:v11];
        long long v25 = v13;
        id v14 = +[NSArray arrayWithObjects:&v25 count:1];
        *(void *)&long long v21 = _NSConcreteStackBlock;
        *((void *)&v21 + 1) = 3221225472;
        id v22 = sub_10038D8B0;
        uint64_t v23 = &unk_100521910;
        uint64_t v24 = v6;
        [v12 unregisterURLs:v14 forBundleID:v24 completionHandler:&v21];

        SEL v15 = v24;
      }
      else
      {
        SEL v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v21) = 138543362;
          *(void *)((char *)&v21 + 4) = v6;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to clear space attribution for %{public}@, application base directory is nil", (uint8_t *)&v21, 0xCu);
        }
      }
    }
    id v16 = sub_1002393C4();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10038D984;
    v17[3] = &unk_100521360;
    void v17[4] = v1;
    [v16 modifyUsingTransaction:v17];

    [v1 completeWithSuccess];
    _Block_object_dispose(&buf, 8);
  }
}

void sub_10038D834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10038D85C(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1001F92B4(a2, *(void *)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10038D8B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to clear space attribution for %{public}@: %{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

uint64_t sub_10038D984(uint64_t a1, uint64_t *a2)
{
  int v3 = sub_100248610(a2, *(void **)(*(void *)(a1 + 32) + 40));
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = sub_1003B9E28(*(void *)(*(void *)(a1 + 32) + 40));
    int v7 = 138543618;
    __int16 v8 = v5;
    __int16 v9 = 1024;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed manifest for %{public}@: %{BOOL}d", (uint8_t *)&v7, 0x12u);
  }
  return 1;
}

uint64_t sub_10038DD20(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t sub_10038DD2C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_10038DD38(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t sub_10038DFDC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 128);
  }
  return result;
}

id sub_10038E254(void *a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10026E95C(a1, @"bundle_id");
    int v3 = sub_10026E95C(a1, @"bundle_version");
    id v4 = sub_10026E91C(a1, @"platform");
    uint64_t v5 = sub_10026E95C(a1, @"bundle_short_version");
    int v6 = (void *)v5;
    if (v2) {
      BOOL v7 = v3 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7 || v5 == 0)
    {
      __int16 v9 = 0;
    }
    else
    {
      __int16 v9 = objc_opt_new();
      int v10 = +[ASDBetaAppVersion versionWithBundleID:v2 bundleVersion:v3 platform:v4 andShortVersion:v6];
      [v9 setVersion:v10];
      uint64_t v11 = [a1 valueForProperty:@"email"];
      [v9 setEmail:v11];
    }
  }
  else
  {
    __int16 v9 = 0;
  }
  return v9;
}

id sub_10038E38C()
{
  self;
  if (qword_1005B1080 != -1) {
    dispatch_once(&qword_1005B1080, &stru_10052A510);
  }
  unsigned int v0 = (void *)qword_1005B1088;
  return v0;
}

void sub_10038E3E4(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_1005B1088;
  qword_1005B1088 = v1;
}

id sub_10038E420()
{
  self;
  unsigned int v0 = +[NSMutableArray array];
  unsigned int outCount = 0;
  uint64_t v1 = (objc_class *)objc_opt_class();
  uint64_t v2 = class_copyPropertyList(v1, &outCount);
  if (v2 && outCount)
  {
    for (unint64_t i = 0; i < outCount; ++i)
    {
      id v4 = property_copyAttributeValue(v2[i], "G");
      if (v4)
      {
        uint64_t v5 = v4;
        int v6 = +[NSString stringWithUTF8String:v4];
        [v0 addObject:v6];

        free(v5);
      }
      BOOL v7 = +[NSString stringWithUTF8String:property_getName(v2[i])];
      [v0 addObject:v7];
    }
  }
  free(v2);
  id v8 = [v0 copy];

  return v8;
}

AppInstallPostProcessTask *sub_10038E558(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  self;
  v13[0] = @"bundle_id";
  v13[1] = @"bundle_url";
  void v13[2] = @"external_id";
  v13[3] = @"item_id";
  void v13[4] = @"log_code";
  v13[5] = @"post_processing_state";
  v13[6] = @"restore_type";
  v13[7] = @"update_type";
  uint64_t v5 = +[NSArray arrayWithObjects:v13 count:8];
  int v6 = [v4 connection];

  BOOL v7 = +[SQLiteEntity memoryEntityForPersistentID:a2 withProperties:v5 usingConnection:v6];

  id v8 = [AppInstallPostProcessTask alloc];
  id v9 = v7;
  if (v8)
  {
    v12.receiver = v8;
    v12.super_class = (Class)AppInstallPostProcessTask;
    int v10 = (AppInstallPostProcessTask *)objc_msgSendSuper2(&v12, "init");
    id v8 = v10;
    if (v10) {
      objc_storeStrong((id *)&v10->_install, v7);
    }
  }

  return v8;
}

uint64_t sub_10038ED40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(*(void *)(a1 + 32) + 40) databaseID];
  int v6 = [v3 connection];

  BOOL v7 = [(SQLiteEntity *)v4 initWithPersistentID:v5 onConnection:v6];
  if ([(SQLiteEntity *)v7 existsInDatabase])
  {
    id v8 = +[NSNumber numberWithInteger:(unint64_t)sub_10026E91C(v7, @"post_processing_state") | 2];
    [(SQLiteEntity *)v7 setValue:v8 forProperty:@"post_processing_state"];
  }
  return 1;
}

id *sub_10038EE74(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a4;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)AppInstallPostProcessResponse;
    id v9 = (id *)objc_msgSendSuper2(&v11, "init");
    a1 = v9;
    if (v9)
    {
      v9[1] = a2;
      v9[3] = a3;
      objc_storeStrong(v9 + 2, a4);
    }
  }

  return a1;
}

id sub_10038F000()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10038F0A4;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B1098 != -1) {
    dispatch_once(&qword_1005B1098, block);
  }
  unsigned int v0 = (void *)qword_1005B1090;
  return v0;
}

void sub_10038F0A4(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  sub_1001F5660();
  id v5 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = sub_1001F5824(v5);
  id v3 = [v1 initWithDatabase:v2];
  id v4 = (void *)qword_1005B1090;
  qword_1005B1090 = (uint64_t)v3;
}

id sub_10038F128(void *a1)
{
  if (a1)
  {
    uint64_t v4 = 0;
    id v5 = &v4;
    uint64_t v6 = 0x3032000000;
    BOOL v7 = sub_100018358;
    id v8 = sub_100017D68;
    id v9 = 0;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10038F234;
    v3[3] = &unk_1005269E8;
    void v3[4] = &v4;
    [a1 readUsingSession:v3];
    id v1 = (id)v5[5];
    _Block_object_dispose(&v4, 8);
  }
  else
  {
    id v1 = 0;
  }
  return v1;
}

void sub_10038F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10038F234(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [SQLiteQueryDescriptor alloc];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  BOOL v7 = sub_1002FF380(v4, v5, v6);
  id v8 = [SQLiteQuery alloc];
  id v9 = [v3 connection];

  id v10 = [(SQLiteQuery *)v8 initOnConnection:v9 descriptor:v7];
  objc_super v11 = sub_1002238D4();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10038F36C;
  v12[3] = &unk_100521428;
  void v12[4] = *(void *)(a1 + 32);
  [v10 enumerateMemoryEntitiesWithProperties:v11 usingBlock:v12];
}

void sub_10038F36C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

void sub_10038F444(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (a2 > 14999)
  {
    switch(a2)
    {
      case 16000:
        uint64_t v4 = &stru_10052A940;
        int64_t v5 = 16001;
        goto LABEL_20;
      case 16001:
        uint64_t v4 = &stru_10052A960;
        int64_t v5 = 16002;
        goto LABEL_20;
      case 16002:
        uint64_t v4 = &stru_10052A980;
        int64_t v5 = 16003;
        goto LABEL_20;
      case 16003:
        uint64_t v4 = &stru_10052A9A0;
LABEL_19:
        int64_t v5 = 17001;
        goto LABEL_20;
      default:
        return;
    }
  }
  else
  {
    switch(a2)
    {
      case 14000:
        uint64_t v4 = &stru_10052A7E0;
        int64_t v5 = 14001;
        break;
      case 14001:
        uint64_t v4 = &stru_10052A800;
        int64_t v5 = 14002;
        break;
      case 14002:
        uint64_t v4 = &stru_10052A820;
        int64_t v5 = 14003;
        break;
      case 14003:
        uint64_t v4 = &stru_10052A840;
        int64_t v5 = 14004;
        break;
      case 14004:
        uint64_t v4 = &stru_10052A860;
        int64_t v5 = 14005;
        break;
      case 14005:
        uint64_t v4 = &stru_10052A880;
        int64_t v5 = 14006;
        break;
      case 14006:
        uint64_t v4 = &stru_10052A8A0;
        int64_t v5 = 15000;
        break;
      default:
        if (!a2)
        {
          uint64_t v4 = &stru_10052A9C0;
          goto LABEL_19;
        }
        if (a2 != 13002) {
          return;
        }
        uint64_t v4 = &stru_10052A7C0;
        int64_t v5 = 14000;
        break;
    }
LABEL_20:
    *a3 = v5;
    id v6 = *a4;
    *a4 = v4;
  }
}

void sub_10038F648(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS launch_event_sync_metadata (pid INTEGER, last_duet_sync DATETIME, spotlight_migrated_date DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS launch_events (pid INTEGER, bundle_id TEXT, containing_bundle_id, event_source INTEGER, is_extension INTEGER, launch_end_time DATETIME, launch_start_time DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
  }
}

void sub_10038F6B4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_affiliate_token TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_app_type TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_campaign TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_campaign_token TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_provider_token TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_ref_source TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_ref_type TEXT;", 1, 0);
  }
}

void sub_10038F798(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN is_clip INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_ocelot ADD COLUMN is_clip INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_ocelot_payout ADD COLUMN is_clip INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_personalization ADD COLUMN is_clip INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN is_clip INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN is_clip INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN is_clip INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_personalization ADD COLUMN is_clip INTEGER;", 1, 0);
  }
}

void sub_10038F894(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS current_app_installs (pid INTEGER, bundle_id TEXT, clip_affiliate_token TEXT, clip_campaign TEXT, clip_campaign_token TEXT, clip_provider_token TEXT, clip_ref_source TEXT, clip_ref_type TEXT, clip_third_party_with_no_app_referrer INTEGER, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_third_party_with_no_app_referrer INTEGER;",
      1,
      0);
  }
}

void sub_10038F900(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"CREATE TABLE IF NOT EXISTS app_usage_session_reporter_keys (pid INTEGER, bundle_id TEXT, session_reporter_key TEXT, last_refresh DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
  }
      1,
      0);
}

void sub_10038F924(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN device_vendor_id_repaired INTEGER;",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_ocelot ADD COLUMN device_vendor_id_repaired INTEGER;",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_ocelot_payout ADD COLUMN device_vendor_id_repaired INTEGER;",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_personalization ADD COLUMN device_vendor_id_repaired INTEGER;",
      1,
      0);
  }
}

void sub_10038F9C0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN vendor_name TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN vendor_name TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN vendor_name TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_personalization ADD COLUMN vendor_name TEXT;", 1, 0);
  }
}

void sub_10038FA5C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_metrics_events (pid INTEGER, bundle_id TEXT, event_type INTEGER, event_subtype INTEGER, metrics_type INTEGER, has_been_posted INTEGER DEFAULT 0, payload JSON, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS current_apps (pid INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, device_vendor_id TEXT, deletion_date DATETIME, event_type INTEGER, evid INTEGER, is_arcade INTEGER, is_beta INTEGER, is_clip INTEGER, is_prior INTEGER, is_system_app INTEGER, item_id INTEGER, item_name TEXT, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), vendor_name TEXT, PRIMARY KEY (pid));",
      1,
      0);
  }
}

void sub_10038FAC8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN app_platform INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_ocelot ADD COLUMN app_platform INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_ocelot_payout ADD COLUMN app_platform INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_personalization ADD COLUMN app_platform INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN app_platform INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN app_platform INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN app_platform INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_personalization ADD COLUMN app_platform INTEGER;",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps ADD COLUMN app_platform INTEGER;", 0, 0);
  }
}

void sub_10038FBDC(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE current_apps ADD COLUMN is_arcade INTEGER;", 0, 0);
  }
}

void sub_10038FC00(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN is_arcade INTEGER;", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN is_arcade INTEGER;", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN is_arcade INTEGER;", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_personalization ADD COLUMN is_arcade INTEGER;", 0, 0);
  }
}

void sub_10038FC9C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"CREATE TABLE IF NOT EXISTS active_launch_events (pid INTEGER, bundle_id TEXT, containing_bundle_id, event_source INTEGER, is_extension INTEGER, launch_end_time DATETIME, launch_start_time DATETIME, payload JSON, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
  }
      1,
      0);
}

void sub_10038FCC0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE current_apps ADD COLUMN is_system_app INTEGER;", 0, 0);
  }
}

void sub_10038FCE4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN is_system_app INTEGER;", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN is_system_app INTEGER;", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN is_system_app INTEGER;",
      0,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE current_apps_personalization ADD COLUMN is_system_app INTEGER;",
      0,
      0);
  }
}

void sub_10038FD80(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN is_system_app INTEGER NOT NULL DEFAULT 0;",
      0,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_ocelot ADD COLUMN is_system_app INTEGER NOT NULL DEFAULT 0;",
      0,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_ocelot_payout ADD COLUMN is_system_app INTEGER NOT NULL DEFAULT 0;",
      0,
      0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_events_personalization ADD COLUMN is_system_app INTEGER NOT NULL DEFAULT 0;",
      0,
      0);
  }
}

void sub_10038FE1C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps_crossfire", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps_ocelot", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps_ocelot_payout", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps_personalization", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_cluster_mappings", 0, 0);
  }
}

void sub_10038FED0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE active_launch_events", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE account_events", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_events_crossfire", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_events_ocelot", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_events_ocelot_payout", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_events_personalization", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_cluster_mappings", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_metrics_events", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps_crossfire", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps_ocelot", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps_ocelot_payout", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE current_apps_personalization", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE launch_events", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE launch_event_sync_metadata", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS active_launch_events (pid INTEGER, bundle_id TEXT, containing_bundle_id, event_source INTEGER, is_extension INTEGER, launch_end_time DATETIME, launch_start_time DATETIME, payload JSON, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS account_events (pid INTEGER, active_start_time DATETIME, active_end_time DATETIME, account_id INTEGER, apple_id TEXT, alt_dsid TEXT, event_type INTEGER, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_events_crossfire (pid INTEGER, account_id INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, clip_affiliate_token TEXT, clip_app_type TEXT, clip_campaign TEXT, clip_campaign_token TEXT, clip_provider_token TEXT, clip_ref_source TEXT, clip_ref_type TEXT, clip_third_party_with_no_app_referrer INTEGER, cohort TEXT, count INTEGER, cumulative_user_count INTEGER, device_vendor_id TEXT, device_vendor_id_repaired INTEGER, event_type INTEGER, event_subtype INTEGER, evid INTEGER, has_been_posted INTEGER DEFAULT 0, is_beta INTEGER, is_clip INTEGER, is_system_app INTEGER DEFAULT 0, is_temporary INTEGER DEFAULT 0, item_id INTEGER, item_name TEXT, launch_time DATETIME, launch_end_time DATETIME, week_start_time DATETIME, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), usage_time INTEGER, PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS current_app_installs (pid INTEGER, bundle_id TEXT, clip_affiliate_token TEXT, clip_campaign TEXT, clip_campaign_token TEXT, clip_provider_token TEXT, clip_ref_source TEXT, clip_ref_type TEXT, clip_third_party_with_no_app_referrer INTEGER, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_events_ocelot (pid INTEGER, account_id INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, count INTEGER, cumulative_user_count INTEGER, device_vendor_id TEXT, device_vendor_id_repaired INTEGER, event_type INTEGER, event_subtype INTEGER, evid INTEGER, has_been_posted INTEGER DEFAULT 0, is_beta INTEGER, is_clip INTEGER, is_system_app INTEGER DEFAULT 0, is_temporary INTEGER DEFAULT 0, item_id INTEGER, item_name TEXT, launch_time DATETIME, launch_end_time DATETIME, week_start_time DATETIME, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), usage_time INTEGER, PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_events_ocelot_payout (pid INTEGER, account_id INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, count INTEGER, cumulative_user_count INTEGER, device_vendor_id TEXT, device_vendor_id_repaired INTEGER, event_type INTEGER, event_subtype INTEGER, evid INTEGER, has_been_posted INTEGER DEFAULT 0, is_beta INTEGER, is_clip INTEGER, is_system_app INTEGER DEFAULT 0, is_temporary INTEGER DEFAULT 0, item_id INTEGER, item_name TEXT, launch_time DATETIME, launch_end_time DATETIME, week_start_time DATETIME, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), usage_time INTEGER, PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_events_personalization (pid INTEGER, account_id INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, count INTEGER, cumulative_user_count INTEGER, device_vendor_id TEXT, device_vendor_id_repaired INTEGER, event_type INTEGER, event_subtype INTEGER, evid INTEGER, has_been_posted INTEGER DEFAULT 0, is_beta INTEGER, is_clip INTEGER, is_system_app INTEGER DEFAULT 0, is_temporary INTEGER DEFAULT 0, item_id INTEGER, item_name TEXT, launch_time DATETIME, launch_end_time DATETIME, week_start_time DATETIME, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), usage_time INTEGER, PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS launch_event_sync_metadata (pid INTEGER, last_duet_sync DATETIME, spotlight_migrated_date DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS launch_events (pid INTEGER, bundle_id TEXT, containing_bundle_id, event_source INTEGER, is_extension INTEGER, launch_end_time DATETIME, launch_start_time DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_metrics_events (pid INTEGER, bundle_id TEXT, event_type INTEGER, event_subtype INTEGER, metrics_type INTEGER, has_been_posted INTEGER DEFAULT 0, payload JSON, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS current_apps (pid INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, device_vendor_id TEXT, deletion_date DATETIME, event_type INTEGER, evid INTEGER, is_arcade INTEGER, is_beta INTEGER, is_clip INTEGER, is_prior INTEGER, is_system_app INTEGER, item_id INTEGER, item_name TEXT, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), vendor_name TEXT, PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_usage_session_reporter_keys (pid INTEGER, bundle_id TEXT, session_reporter_key TEXT, last_refresh DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0);
  }
}

id sub_10039058C(uint64_t a1, char a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  self;
  uint64_t v13 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    __int16 v54 = a6;
    id v42 = objc_opt_class();
    id v43 = v42;
    self;
    SEL v44 = +[NSMutableArray array];
    id v45 = v44;
    if ((a2 & 0x20) != 0) {
      [v44 addObject:@"BiomeTx"];
    }
    if ((a2 & 8) != 0) {
      [v45 addObject:@"Biome"];
    }
    uint64_t v14 = a2 & 0x20;
    if ((a2 & 0x10) != 0) {
      [v45 addObject:@"BiomeClip"];
    }
    id v46 = [v45 copy];

    id v47 = [v46 componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138543618;
    __int16 v67 = v42;
    __int16 v68 = 2114;
    __int16 v69 = v47;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[%{public}@] Looking for launch events for streams: [%{public}@]", buf, 0x16u);

    a6 = v54;
  }
  else
  {
    uint64_t v14 = a2 & 0x20;
  }

  if (v14)
  {
    self;
    id v15 = +[NSMutableArray array];
  }
  else if ((a2 & 0x18) != 0)
  {
    id v57 = v10;
    id v16 = v10;
    id v17 = v11;
    id v59 = v12;
    uint64_t v56 = self;
    long long v60 = v17;
    id v58 = [objc_alloc((Class)BMPublisherOptions) initWithStartDate:v16 endDate:v17 maxEvents:9999 lastN:0 reversed:0];
    SEL v18 = +[NSMutableDictionary dictionary];
    if ((a2 & 0x10) != 0)
    {
      id v19 = BiomeLibrary();
      uint64_t v20 = [v19 App];
      long long v21 = [v20 Clip];
      id v22 = [v21 InFocus];

      int v52 = v22;
      uint64_t v23 = [v22 publisherWithOptions:v58];
      uint64_t v24 = sub_100391018(v56, v23, v60, v59, 0, a6);
      if ([v18 count])
      {
        id v50 = v23;
        id v51 = v12;
        id v53 = a6;
        id v55 = v16;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        SEL v49 = v24;
        id v25 = v24;
        id v26 = [v25 countByEnumeratingWithState:&v62 objects:buf count:16];
        if (v26)
        {
          id v27 = v26;
          uint64_t v28 = *(void *)v63;
          do
          {
            uint64_t v29 = 0;
            do
            {
              if (*(void *)v63 != v28) {
                objc_enumerationMutation(v25);
              }
              uint64_t v30 = *(void *)(*((void *)&v62 + 1) + 8 * (void)v29);
              if (v30)
              {
                id v31 = *(id *)(v30 + 40);
                if (v31)
                {
                  id v32 = [v18 objectForKeyedSubscript:v31];
                  if (!v32)
                  {
                    id v32 = +[NSMutableArray array];
                    [v18 setObject:v32 forKeyedSubscript:v31];
                  }
                  [v32 addObject:v30];
                }
              }
              else
              {
                id v31 = 0;
              }

              uint64_t v29 = (char *)v29 + 1;
            }
            while (v27 != v29);
            id v33 = [v25 countByEnumeratingWithState:&v62 objects:buf count:16];
            id v27 = v33;
          }
          while (v33);
        }

        id v12 = v51;
        a6 = v53;
        id v16 = v55;
        uint64_t v24 = v49;
        uint64_t v23 = v50;
      }
    }
    if ((a2 & 8) != 0)
    {
      id v34 = BiomeLibrary();
      __int16 v35 = [v34 App];
      id v36 = [v35 InFocus];

      [v36 publisherWithOptions:v58];
      uint64_t v38 = v37 = a6;
      id v61 = 0;
      uint64_t v39 = sub_100391018(v56, v38, v60, v59, v18, &v61);
      id v40 = v61;
      SEL v41 = v40;
      if (v37 && v40)
      {
        id v15 = 0;
        void *v37 = v40;
      }
      else
      {
        id v15 = v39;
      }
    }
    else
    {
      id v15 = 0;
    }

    id v10 = v57;
  }
  else if (a6)
  {
    ASDErrorWithTitleAndMessage();
    id v15 = 0;
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v15 = 0;
  }

  return v15;
}

uint64_t sub_100390AD0()
{
  self;
  if (!os_variant_has_internal_content()) {
    return 24;
  }
  unsigned int v0 = sub_1003F1FD8((uint64_t)AppDefaultsManager, @"DefaultLaunchStreams");

  if (!v0) {
    return 24;
  }
  id v1 = sub_1003F1FD8((uint64_t)AppDefaultsManager, @"DefaultLaunchStreams");
  id v2 = [v1 integerValue];

  return (uint64_t)v2;
}

id sub_100390B54(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v48 = +[NSMutableArray array];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id obj = v2;
  id v3 = [obj countByEnumeratingWithState:&v50 objects:v60 count:16];
  if (!v3)
  {
    id v6 = 0;
    goto LABEL_44;
  }
  id v5 = v3;
  id v6 = 0;
  uint64_t v7 = *(void *)v51;
  *(void *)&long long v4 = 138543874;
  long long v44 = v4;
  do
  {
    id v8 = 0;
    do
    {
      if (*(void *)v51 != v7) {
        objc_enumerationMutation(obj);
      }
      id v9 = *(void **)(*((void *)&v50 + 1) + 8 * (void)v8);
      if (v9) {
        id v10 = (void *)v9[5];
      }
      else {
        id v10 = 0;
      }
      id v11 = v10;
      unsigned __int8 v12 = [v11 isEqualToString:@"com.apple.control-center"];

      if ((v12 & 1) == 0)
      {
        uint64_t v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v33 = objc_opt_class();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v55 = v33;
          __int16 v56 = 2114;
          id v57 = v9;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[%{public}@] Processing launch: %{public}@ ", buf, 0x16u);
        }

        uint64_t v14 = v6;
        id v15 = v9;
        self;
        if (v14 && v9 && *((unsigned char *)v14 + 9) && *((unsigned char *)v15 + 9))
        {
          id v16 = (id)v14[4];
          if (v16)
          {
            id v17 = (id)v15[4];
            if (!v17)
            {
              id v18 = (id)v14[5];
              if (v18)
              {
                id v19 = (id)v15[5];
                if (v19)
                {
                  id v45 = v18;
                  id v47 = v19;
                  id v20 = (id)v14[5];
                  id v21 = (id)v15[5];
                  id v46 = v20;
                  id v22 = v20;
                  uint64_t v23 = v21;
                  if ([v22 isEqualToString:v21] && *((_DWORD *)v15 + 3) == 4)
                  {
                    uint64_t v24 = v23;
                    int v25 = *((_DWORD *)v14 + 3);

                    if (v25 == 4)
                    {
                      id v26 = (id)v15[2];
                      objc_setProperty_nonatomic_copy(v14, v27, v26, 16);

                      id v28 = (id)v14[2];
                      id v29 = (id)v14[3];
                      [v28 timeIntervalSinceDate:v29];
                      double v31 = v30;

                      v14[18] = (uint64_t)v31;
                      id v32 = ASDLogHandleForCategory();
                      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v38 = objc_opt_class();
                        uint64_t v39 = (id)v15[5];
                        uint64_t v40 = v14[18];
                        *(_DWORD *)long long buf = v44;
                        uint64_t v55 = v38;
                        __int16 v56 = 2114;
                        id v57 = v39;
                        __int16 v58 = 2048;
                        uint64_t v59 = v40;
                        _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[%{public}@] Combined last event with bundle ID: %{public}@ duration: %lld", buf, 0x20u);
                      }
                      id v6 = v14;
LABEL_33:

                      goto LABEL_34;
                    }
LABEL_32:
                    objc_msgSend(v48, "addObject:", v15, v44);
                    id v6 = v15;

                    id v32 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v35 = objc_opt_class();
                      if (v9) {
                        id v36 = (void *)v6[5];
                      }
                      else {
                        id v36 = 0;
                      }
                      id v37 = v36;
                      *(_DWORD *)long long buf = 138543618;
                      uint64_t v55 = v35;
                      __int16 v56 = 2114;
                      id v57 = v37;
                      _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[%{public}@] Last event with bundle ID: %{public}@", buf, 0x16u);
                    }
                    goto LABEL_33;
                  }

                  id v34 = v47;
                  id v18 = v45;
                }
                else
                {
                  id v34 = 0;
                }
              }
              id v17 = 0;
            }
          }
        }

        goto LABEL_32;
      }
LABEL_34:
      id v8 = (char *)v8 + 1;
    }
    while (v5 != v8);
    id v41 = [obj countByEnumeratingWithState:&v50 objects:v60 count:16];
    id v5 = v41;
  }
  while (v41);
LABEL_44:

  id v42 = [v48 copy];
  return v42;
}

id sub_100391018(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v150 = a4;
  id v153 = a5;
  self;
  id v12 = objc_alloc_init((Class)NSMutableArray);
  v176[0] = _NSConcreteStackBlock;
  v176[1] = 3221225472;
  v176[2] = sub_100391F90;
  v176[3] = &unk_10052A9E8;
  id v177 = dispatch_semaphore_create(0);
  v173[0] = _NSConcreteStackBlock;
  v173[1] = 3221225472;
  v173[2] = sub_100391F98;
  v173[3] = &unk_10052AA10;
  id v148 = v11;
  id v174 = v148;
  id v13 = v12;
  uint64_t v14 = v177;
  id v15 = v13;
  id v175 = v13;
  id v16 = [v10 sinkWithCompletion:v176 receiveInput:v173];
  dispatch_time_t v17 = dispatch_time(0, 60000000000);
  id v151 = v15;
  if (dispatch_semaphore_wait(v14, v17))
  {
    if (a6)
    {
      ASDErrorWithTitleAndMessage();
      id v18 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v18 = 0;
    }
    long long v126 = v15;
    goto LABEL_126;
  }
  v146 = v14;
  id v147 = v10;
  id v19 = +[NSMutableArray array];
  long long v159 = +[NSMutableDictionary dictionary];
  long long v169 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  id v20 = v15;
  id v21 = [v20 countByEnumeratingWithState:&v169 objects:v183 count:16];
  if (!v21) {
    goto LABEL_108;
  }
  id v22 = v21;
  uint64_t v162 = *(void *)v170;
  id v152 = v20;
  v149 = v19;
  do
  {
    uint64_t v23 = 0;
    context = v22;
    do
    {
      if (*(void *)v170 != v162) {
        objc_enumerationMutation(v20);
      }
      uint64_t v24 = *(void **)(*((void *)&v169 + 1) + 8 * (void)v23);
      int v25 = [v24 eventBody];
      objc_opt_class();
      id v26 = sub_100012D7C(v25);

      SEL v27 = [v24 eventBody];
      id v28 = v27;
      if (v26)
      {
        uint64_t v29 = [v27 bundleID];
        if (v29)
        {
          double v30 = (void *)v29;
          if ([v28 starting])
          {
            double v31 = objc_alloc_init(AppLaunchEvent);
            uint64_t v33 = (uint64_t)v31;
            id v34 = v30;
            if (v31)
            {
              objc_setProperty_nonatomic_copy(v31, v32, v30, 40);
              *(unsigned char *)(v33 + _Block_object_dispose(&a9, 8) = [v28 type] == 2;
              uint64_t v35 = [v28 absoluteTimestamp];
              objc_setProperty_nonatomic_copy((id)v33, v36, v35, 24);
            }
            else
            {
              [v28 type];
              uint64_t v35 = [v28 absoluteTimestamp];
            }

            id v37 = [v28 absoluteTimestamp];
            uint64_t v39 = v37;
            if (v33)
            {
              objc_setProperty_nonatomic_copy((id)v33, v38, v37, 16);

              *(void *)(v33 + 152) = 1;
              *(_DWORD *)(v33 + 12) = 4;
            }
            else
            {
            }
            uint64_t v40 = [v28 bundleID];
            [v159 setObject:v33 forKeyedSubscript:v40];

            id v42 = [v28 launchReason];
            if (v33) {
              objc_setProperty_nonatomic_copy((id)v33, v41, v42, 32);
            }

            id v43 = [v153 objectForKeyedSubscript:v34];
            if (v43)
            {
              long long v44 = (id)v33;
              id v45 = v43;
              self;
              self = v44;
              if (v33) {
                id v46 = (void *)*((void *)v44 + 3);
              }
              else {
                id v46 = 0;
              }
              id v154 = v43;
              id v155 = v34;
              id v47 = v46;
              [v47 timeIntervalSinceReferenceDate];
              double v49 = v48;

              long long v180 = 0u;
              long long v181 = 0u;
              long long v178 = 0u;
              long long v179 = 0u;
              id v50 = v45;
              id v51 = [v50 countByEnumeratingWithState:&v178 objects:buf count:16];
              if (v51)
              {
                id v52 = v51;
                long long v53 = 0;
                uint64_t v54 = *(void *)v179;
                double v55 = 3.40282347e38;
LABEL_23:
                uint64_t v56 = 0;
                while (1)
                {
                  if (*(void *)v179 != v54) {
                    objc_enumerationMutation(v50);
                  }
                  id v57 = *(void **)(*((void *)&v178 + 1) + 8 * v56);
                  if (v57) {
                    __int16 v58 = (void *)v57[3];
                  }
                  else {
                    __int16 v58 = 0;
                  }
                  id v59 = v58;
                  [v59 timeIntervalSinceReferenceDate];
                  double v61 = v60;

                  if (v49 - v61 >= 0.0) {
                    double v62 = v49 - v61;
                  }
                  else {
                    double v62 = -(v49 - v61);
                  }
                  if (v62 <= 60.0 && v62 < v55)
                  {
                    long long v64 = v57;

                    double v55 = v62;
                    long long v53 = v64;
                  }
                  if (v61 > v49 && v61 - v49 > 60.0) {
                    break;
                  }
                  if (v52 == (id)++v56)
                  {
                    id v65 = [v50 countByEnumeratingWithState:&v178 objects:buf count:16];
                    id v52 = v65;
                    if (v65) {
                      goto LABEL_23;
                    }
                    break;
                  }
                }
              }
              else
              {
                long long v53 = 0;
              }

              id v20 = v152;
              id v43 = v154;
              id v34 = v155;
              if (v53)
              {
                if (v33)
                {
                  self[10] = 1;
                  id v104 = v53[10];
                  objc_setProperty_nonatomic_copy(self, v105, v104, 80);
                }
                else
                {
                  id v104 = v53[10];
                }

                id v107 = v53[13];
                if (v33) {
                  objc_setProperty_nonatomic_copy(self, v106, v107, 104);
                }

                id v109 = v53[14];
                if (v33) {
                  objc_setProperty_nonatomic_copy(self, v108, v109, 112);
                }

                id v111 = v53[15];
                if (v33) {
                  objc_setProperty_nonatomic_copy(self, v110, v111, 120);
                }

                id v113 = v53[11];
                if (v33) {
                  objc_setProperty_nonatomic_copy(self, v112, v113, 88);
                }

                id v115 = v53[12];
                if (v33) {
                  objc_setProperty_nonatomic_copy(self, v114, v115, 96);
                }
              }
              id v19 = v149;
              id v22 = context;
            }
            [v19 addObject:v33];
          }
          else
          {
            id v34 = v30;
            uint64_t v33 = [v159 objectForKeyedSubscript:v30];
            if (v33) {
              goto LABEL_66;
            }
            id v99 = [v150 objectForKeyedSubscript:v30];

            if (!v99) {
              goto LABEL_78;
            }
            uint64_t v100 = [v150 objectForKeyedSubscript:v34];
            uint64_t v33 = v100;
            if (v100) {
              *(void *)(v100 + 152) = 1;
            }
            id v101 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
            {
              id v102 = objc_opt_class();
              *(_DWORD *)long long buf = 138543618;
              uint64_t v185 = (uint64_t)v102;
              __int16 v186 = 2114;
              uint64_t v187 = v33;
              id v103 = v102;
              _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "[%{public}@] Ending active event: %{public}@", buf, 0x16u);
            }
            [v19 addObject:v33];
            if (v33)
            {
LABEL_66:
              id v90 = *(id *)(v33 + 24);
              *(unsigned char *)(v33 + 9) = 1;
              id v91 = [v28 absoluteTimestamp];
              objc_setProperty_nonatomic_copy((id)v33, v92, v91, 16);

              id v93 = *(id *)(v33 + 16);
              [v93 timeIntervalSinceReferenceDate];
              double v95 = v94;
              [v90 timeIntervalSinceReferenceDate];
              *(void *)(v33 + 144) = (int)(v95 - v96);

              __int16 v97 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
              {
                id v116 = objc_opt_class();
                id v117 = v116;
                uint64_t v118 = *(void *)(v33 + 144);
                *(_DWORD *)long long buf = 138543874;
                uint64_t v185 = (uint64_t)v116;
                id v22 = context;
                __int16 v186 = 2114;
                uint64_t v187 = v33;
                __int16 v188 = 2048;
                v189[0] = v118;
                _os_log_debug_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "[%{public}@] Ending event: %{public}@ with duration: %ld", buf, 0x20u);

                id v20 = v152;
              }
            }
            else
            {
LABEL_78:
              uint64_t v33 = ASDLogHandleForCategory();
              if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
              {
                id v119 = objc_opt_class();
                selfa = v119;
                uint64_t v120 = [v28 bundleID];
                unsigned int v156 = [v28 starting];
                id v121 = [v28 absoluteTimestamp];
                id v122 = sub_1002826D4(v121);
                *(_DWORD *)long long buf = 138544130;
                uint64_t v185 = (uint64_t)v119;
                __int16 v186 = 2114;
                uint64_t v187 = v120;
                id v123 = (void *)v120;
                __int16 v188 = 1024;
                LODWORD(v189[0]) = v156;
                id v20 = v152;
                WORD2(v189[0]) = 2114;
                *(void *)((char *)v189 + 6) = v122;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v33, OS_LOG_TYPE_ERROR, "[%{public}@] Unable to find starting event for bundleID: %{public}@ starting: %d startDate: %{public}@", buf, 0x26u);

                id v22 = context;
              }
            }
          }
          goto LABEL_97;
        }
        uint64_t v33 = ASDLogHandleForCategory();
        if (!os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_INFO)) {
          goto LABEL_71;
        }
LABEL_70:
        uint64_t v98 = objc_opt_class();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v185 = v98;
        __int16 v186 = 2114;
        uint64_t v187 = (uint64_t)v28;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v33, OS_LOG_TYPE_INFO, "[%{public}@] Ignoring event with no bundle ID: %{public}@", buf, 0x16u);
        goto LABEL_71;
      }
      objc_opt_class();
      CFStringRef v66 = sub_100012D7C(v28);

      if (!v66) {
        goto LABEL_98;
      }
      id v28 = [v24 eventBody];
      uint64_t v67 = [v28 clipBundleID];
      if (v67)
      {
        __int16 v68 = (void *)v67;
        __int16 v69 = objc_alloc_init(AppLaunchEvent);
        uint64_t v33 = (uint64_t)v69;
        if (v69)
        {
          objc_setProperty_nonatomic_copy(v69, v70, v68, 40);
          objc_setProperty_nonatomic_copy((id)v33, v71, v68, 80);
        }
        [v24 timestamp];
        id v73 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
        if (v33)
        {
          objc_setProperty_nonatomic_copy((id)v33, v72, v73, 24);
          *(unsigned char *)(v33 + 10) = 1;
          CFStringRef v74 = [v28 launchReason];
          objc_setProperty_nonatomic_copy((id)v33, v75, v74, 96);
        }
        else
        {
          CFStringRef v74 = [v28 launchReason];
        }

        uint64_t v76 = [v28 fullURL];

        if (v76)
        {
          id v77 = [v28 fullURL];
          id v79 = +[NSURL URLWithString:v77];
          if (v33) {
            objc_setProperty_nonatomic_copy((id)v33, v78, v79, 88);
          }

          id v22 = context;
        }
        uint64_t v80 = [v28 referrerURL];

        if (v80)
        {
          uint64_t v81 = [v28 referrerURL];
          id v83 = +[NSURL URLWithString:v81];
          if (v33) {
            objc_setProperty_nonatomic_copy((id)v33, v82, v83, 104);
          }

          id v22 = context;
        }
        id v85 = [v28 referrerBundleID];
        if (v33) {
          objc_setProperty_nonatomic_copy((id)v33, v84, v85, 112);
        }

        unsigned int v86 = [v28 webAppBundleID];
        id v88 = v86;
        if (v33)
        {
          objc_setProperty_nonatomic_copy((id)v33, v87, v86, 120);

          *(_DWORD *)(v33 + 12) = 5;
        }
        else
        {
        }
        id v89 = [(id)v33 copy];
        [v19 addObject:v89];

        id v34 = v68;
        goto LABEL_97;
      }
      uint64_t v33 = ASDLogHandleForCategory();
      if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_INFO)) {
        goto LABEL_70;
      }
LABEL_71:
      id v34 = 0;
LABEL_97:

LABEL_98:
      uint64_t v23 = (char *)v23 + 1;
    }
    while (v23 != v22);
    id v124 = [v20 countByEnumeratingWithState:&v169 objects:v183 count:16];
    id v22 = v124;
  }
  while (v124);
LABEL_108:

  long long v165 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  id v18 = v19;
  id v125 = [v18 countByEnumeratingWithState:&v165 objects:v182 count:16];
  long long v126 = v151;
  if (v125)
  {
    id v127 = v125;
    uint64_t v128 = *(void *)v166;
    do
    {
      for (unint64_t i = 0; i != v127; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v166 != v128) {
          objc_enumerationMutation(v18);
        }
        uint64_t v130 = *(void *)(*((void *)&v165 + 1) + 8 * i);
        if (v130 && *(unsigned char *)(v130 + 8))
        {
          id v131 = objc_alloc((Class)LSApplicationExtensionRecord);
          id v132 = *(id *)(v130 + 40);
          id v164 = 0;
          id v133 = [v131 initWithBundleIdentifier:v132 error:&v164];
          id v134 = v164;

          if (v133)
          {
            id v135 = [v133 containingBundleRecord];
            id v136 = [v135 bundleIdentifier];

            if (v136)
            {
              id v137 = [v133 containingBundleRecord];
              unsigned __int8 v138 = [v137 bundleIdentifier];
              objc_setProperty_nonatomic_copy((id)v130, v139, v138, 128);

              id v140 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v140, OS_LOG_TYPE_INFO))
              {
                id v141 = objc_opt_class();
                id v163 = v141;
                id v142 = v18;
                id v143 = *(id *)(v130 + 40);
                id v144 = *(id *)(v130 + 128);
                *(_DWORD *)long long buf = 138543874;
                uint64_t v185 = (uint64_t)v141;
                __int16 v186 = 2114;
                uint64_t v187 = (uint64_t)v143;
                __int16 v188 = 2114;
                v189[0] = v144;
                _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_INFO, "[%{public}@] [%{public}@] Updated launch extension containingBundleID to: %{public}@", buf, 0x20u);

                id v18 = v142;
                long long v126 = v151;
              }
            }
          }
        }
      }
      id v127 = [v18 countByEnumeratingWithState:&v165 objects:v182 count:16];
    }
    while (v127);
  }

  uint64_t v14 = v146;
  id v10 = v147;
LABEL_126:

  return v18;
}

intptr_t sub_100391F90(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100391F98(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 timestamp];
  double v4 = v3;
  [*(id *)(a1 + 32) timeIntervalSinceReferenceDate];
  if (v4 < v5) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

id sub_100392008(id a1, void *a2)
{
  double v3 = a2;
  if (a1)
  {
    double v4 = +[NSMutableDictionary dictionary];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v5 = a1;
    id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v17;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v16 + 1) + 8 * i);
          id v11 = v3[2](v3, v10);
          if (v11)
          {
            id v12 = objc_msgSend(v4, "objectForKeyedSubscript:", v11, (void)v16);
            id v13 = v12;
            if (v12)
            {
              [v12 addObject:v10];
            }
            else
            {
              uint64_t v14 = +[NSMutableArray arrayWithObject:v10];
              [v4 setObject:v14 forKeyedSubscript:v11];
            }
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v7);
    }

    a1 = [objc_alloc((Class)NSDictionary) initWithDictionary:v4 copyItems:1];
  }

  return a1;
}

id sub_1003921D4(void *a1, void *a2)
{
  id v3 = a2;
  double v4 = v3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003922A8;
    v7[3] = &unk_10052AA38;
    id v8 = v3;
    id v5 = [a1 indexOfObjectPassingTest:v7];
    if (v5 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      a1 = 0;
    }
    else
    {
      a1 = [a1 objectAtIndexedSubscript:v5];
    }
  }
  return a1;
}

uint64_t sub_1003922A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1003922B8(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v4 = a1;
    id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v13;
      while (2)
      {
        for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = v3[2](v3, *(void *)(*((void *)&v12 + 1) + 8 * i));
          if (v9)
          {
            uint64_t v10 = (void *)v9;
            goto LABEL_12;
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
    uint64_t v10 = 0;
LABEL_12:
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id sub_1003923F8(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [a1 count]);
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    id v8 = sub_1003924F0;
    uint64_t v9 = &unk_10052AA60;
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    id v11 = v3;
    id v4 = v10;
    [a1 enumerateObjectsUsingBlock:&v6];
    a1 = objc_msgSend(v4, "copy", v6, v7, v8, v9);
  }
  return a1;
}

void sub_1003924F0(uint64_t a1)
{
  id v2 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (v2)
  {
    id v3 = v2;
    [*(id *)(a1 + 32) addObject:v2];
    id v2 = v3;
  }
}

id sub_100392558(id a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x3032000000;
    long long v13 = sub_100018368;
    long long v14 = sub_100017D70;
    id v15 = 0;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100392690;
    v7[3] = &unk_10052AA88;
    id v8 = v3;
    uint64_t v9 = &v10;
    void v7[4] = a1;
    [a1 enumerateObjectsUsingBlock:v7];
    if (v11[5]) {
      id v5 = (void *)v11[5];
    }
    else {
      id v5 = a1;
    }
    a1 = [v5 copy];

    _Block_object_dispose(&v10, 8);
  }

  return a1;
}

void sub_100392678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100392690(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  int v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v5)
  {
    if (v6) {
      [v6 addObject:v11];
    }
  }
  else if (!v6)
  {
    uint64_t v7 = objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:", 0, a3);
    id v8 = [v7 mutableCopy];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
}

id sub_100392748(void *a1, unint64_t a2)
{
  if (a1)
  {
    id v4 = (char *)[a1 count];
    int v5 = objc_opt_new();
    if (v4)
    {
      uint64_t v6 = 0;
      do
      {
        if ((unint64_t)v4 >= a2) {
          int64_t v7 = a2;
        }
        else {
          int64_t v7 = (int64_t)v4;
        }
        id v8 = objc_msgSend(a1, "subarrayWithRange:", v6, v7);
        v4 -= v7;
        v6 += v7;
        [v5 addObject:v8];
      }
      while (v4);
    }
  }
  else
  {
    int v5 = 0;
  }
  return v5;
}

void sub_100392800(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_opt_new();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v21;
    *(void *)&long long v6 = 138412546;
    long long v18 = v6;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v11 = objc_msgSend(v10, "adamId", v18);
        if (v11)
        {
          [v3 setObject:v10 forKey:v11];
        }
        else
        {
          uint64_t v12 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            long long v13 = objc_opt_class();
            id v14 = v13;
            id v15 = [v10 appAdamId];
            *(_DWORD *)long long buf = v18;
            int v25 = v13;
            __int16 v26 = 2114;
            SEL v27 = v15;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[%@]: Nil IAP adamId, app adamId: %{public}@", buf, 0x16u);
          }
        }
      }
      id v7 = [v4 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v7);
  }

  id v16 = [objc_alloc((Class)ASDIAPInfoResponse) initWithIAPs:v3];
  sub_1000079C8(*(void **)(a1 + 32), v16);
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17) {
    *(unsigned char *)(v17 + 24) = 1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

BOOL sub_100392BB4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___TFDisplay__widthPixels;
            goto LABEL_37;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            long long v18 = &OBJC_IVAR___TFDisplay__widthPixels;
            goto LABEL_40;
          }
        }
        long long v18 = &OBJC_IVAR___TFDisplay__widthPixels;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + *v1_Block_object_dispose(&a9, 8) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0;
    *(unsigned char *)(a1 + 16) |= 1u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        long long v18 = &OBJC_IVAR___TFDisplay__heightPixels;
        goto LABEL_38;
      }
      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        long long v18 = &OBJC_IVAR___TFDisplay__heightPixels;
        goto LABEL_40;
      }
    }
    long long v18 = &OBJC_IVAR___TFDisplay__heightPixels;
LABEL_37:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1003930B8()
{
  self;
  if (qword_1005B10A0 != -1) {
    dispatch_once(&qword_1005B10A0, &stru_10052AAA8);
  }
  unsigned int v0 = (void *)qword_1005B10A8;
  return v0;
}

void sub_100393110(id a1)
{
  id v1 = objc_alloc_init(AssetSession);
  id v2 = (void *)qword_1005B10A8;
  qword_1005B10A8 = (uint64_t)v1;
}

id sub_100393204(id result)
{
  if (result)
  {
    id v1 = result;
    id v2 = (const char *)kNSURLSessionLaunchOnDemandNotificationName;
    id v3 = dispatch_get_global_queue(17, 0);
    xpc_set_event_stream_handler(v2, v3, &stru_10052AAC8);

    char v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Obliterating stale background sessions", buf, 2u);
    }

    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003933EC;
    v5[3] = &unk_10052AB18;
    void v5[4] = v1;
    return +[NSURLSession _getActiveSessionIdentifiersWithCompletionHandler:v5];
  }
  return result;
}

void sub_100393314(id a1, OS_xpc_object *a2)
{
  id v2 = a2;
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    uint64_t v5 = kNSURLSessionLaunchOnDemandNotificationName;
    __int16 v6 = 2080;
    unint64_t v7 = xpc_copy_description(v2);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Handling %s wake: %s", (uint8_t *)&v4, 0x16u);
  }
}

void sub_1003933EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100393488;
  v7[3] = &unk_1005218C0;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100393488(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2 && [v2 count])
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 32) count];
      *(_DWORD *)long long buf = 134217984;
      id v27 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Checking %llu background session identifier(s)", buf, 0xCu);
    }

    uint64_t v5 = objc_opt_new();
    id v6 = *(void **)(*(void *)(a1 + 40) + 32);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100393774;
    void v23[3] = &unk_10052AAF0;
    id v7 = v5;
    id v24 = v7;
    [v6 enumerateKeysAndObjectsUsingBlock:v23];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v8 = *(id *)(a1 + 32);
    id v9 = [v8 countByEnumeratingWithState:&v19 objects:v25 count:16];
    if (v9)
    {
      id v11 = v9;
      uint64_t v12 = *(void *)v20;
      *(void *)&long long v10 = 138543362;
      long long v18 = v10;
      do
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v20 != v12) {
            objc_enumerationMutation(v8);
          }
          uint64_t v14 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          if (objc_msgSend(v7, "containsObject:", v14, v18, (void)v19))
          {
            unint64_t v15 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = v18;
              id v27 = v14;
              _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Skipping invalidation for active session: %{public}@", buf, 0xCu);
            }
          }
          else
          {
            unint64_t v15 = +[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:v14];
            char v16 = +[NSURLSession sessionWithConfiguration:v15];
            BOOL v17 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = v18;
              id v27 = v14;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Invaidating stale session: %{public}@", buf, 0xCu);
            }

            [v16 invalidateAndCancel];
          }
        }
        id v11 = [v8 countByEnumeratingWithState:&v19 objects:v25 count:16];
      }
      while (v11);
    }
  }
}

void sub_100393774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    id v4 = *(void **)(a3 + 16);
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  id v6 = [v5 configuration];
  id v8 = [v6 identifier];

  id v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 32) addObject:v8];
    id v7 = v8;
  }
}

_TtC9appstored12AssetPromise *sub_100393804(_TtC9appstored12AssetPromise *a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_24;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v4 = objc_alloc_init(AssetRequestProperties);
    goto LABEL_6;
  }
  if (v3)
  {
    id v4 = (AssetRequestProperties *)[v3[2] copy];
LABEL_6:
    id v5 = v4;
    goto LABEL_7;
  }
  id v5 = 0;
LABEL_7:
  id v6 = objc_alloc_init(AssetTaskInfo);
  id v8 = v6;
  if (v6)
  {
    objc_setProperty_atomic(v6, v7, v3, 104);
    objc_setProperty_atomic(v8, v9, v5, 96);
  }
  if (!v5)
  {
    id v11 = 0;
LABEL_28:
    unint64_t v12 = 0;
    if (!v8) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  id v10 = objc_getProperty(v5, v7, 176, 1);
  id v11 = v10;
  if (!v10) {
    goto LABEL_28;
  }
  v30[0] = 0;
  v30[1] = 0;
  [v10 getUUIDBytes:v30];
  unint64_t v12 = v30[0];
  if (v8) {
LABEL_12:
  }
    v8->_signpostId = v12;
LABEL_13:
  uint64_t v14 = [_TtC9appstored6LogKey alloc];
  if (v5) {
    id Property = objc_getProperty(v5, v13, 128, 1);
  }
  else {
    id Property = 0;
  }
  id v16 = Property;
  BOOL v17 = [v16 description];
  long long v19 = [(LogKey *)v14 initWithCategory:v17 baseUUID:v11];
  if (v8) {
    objc_setProperty_atomic(v8, v18, v19, 56);
  }

  if (v5) {
    unint64_t expectedContentLength = v5->_expectedContentLength;
  }
  else {
    unint64_t expectedContentLength = 0;
  }
  long long v22 = +[NSProgress progressWithTotalUnitCount:expectedContentLength];
  if (v8) {
    objc_setProperty_atomic(v8, v21, v22, 80);
  }

  long long v23 = [_TtC9appstored12AssetPromise alloc];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100393ABC;
  void v26[3] = &unk_10052AB68;
  id v27 = v8;
  id v28 = v3;
  uint64_t v29 = a1;
  id v24 = v8;
  a1 = [(AssetPromise *)v23 initWithRequestID:v11 promiseBlock:v26];
  if (v8) {
    objc_storeWeak(v24 + 11, a1);
  }

LABEL_24:
  return a1;
}

void sub_100393ABC(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  id v5 = v4;
  id v6 = a1[4];
  if (v6)
  {
    os_signpost_id_t v7 = v6[16];
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
    {
      id v9 = objc_getProperty(v6, v8, 56, 1);
      id v10 = [a1[5] URL];
      *(_DWORD *)long long buf = 138543618;
      id v19 = v9;
      __int16 v20 = 2114;
      long long v21 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Download", " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ", buf, 0x16u);
    }
  }

  objc_initWeak((id *)buf, a1[6]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100393D08;
  v15[3] = &unk_10052AB40;
  id v16 = a1[4];
  objc_copyWeak(&v17, (id *)buf);
  [v3 addErrorBlock:v15];
  id v11 = a1[6];
  unint64_t v12 = *((void *)v11 + 2);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100393EEC;
  v13[3] = &unk_1005218C0;
  void v13[4] = v11;
  id v14 = a1[4];
  dispatch_async(v12, v13);

  objc_destroyWeak(&v17);
  objc_destroyWeak((id *)buf);
}

void sub_100393CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100393D08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 domain];
  if (![v4 isEqualToString:NSCocoaErrorDomain])
  {
LABEL_9:

    goto LABEL_10;
  }
  id v5 = [v3 code];

  if (v5 == (id)3072)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v7, 56, 1);
      }
      id v9 = Property;
      *(_DWORD *)long long buf = 138412290;
      id v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Request cancelled", buf, 0xCu);
    }
    id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
    id v4 = WeakRetained;
    if (WeakRetained)
    {
      id v11 = WeakRetained[2];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100393E98;
      block[3] = &unk_100521388;
      id v13 = *(id *)(a1 + 32);
      dispatch_async(v11, block);
    }
    goto LABEL_9;
  }
LABEL_10:
}

void sub_100393E98(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 136, 1);
  }
  id v4 = Property;
  [v4 cancel];

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v5 + 16) = 3;
  }
}

void sub_100393EEC(uint64_t a1)
{
}

void sub_100393EF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_20;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (v3)
  {
    if (v3[2] == 3)
    {
      uint64_t v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v23 = objc_getProperty(v3, v6, 56, 1);
        *(_DWORD *)long long buf = 138412290;
        id v29 = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%@] Stopping early because request has been canceled", buf, 0xCu);
      }
      sub_100397208(a1, v3);
      goto LABEL_20;
    }
    id Property = objc_getProperty(v3, v4, 96, 1);
    id v9 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v8, 64, 1);
    }
  }
  else
  {
    id v9 = 0;
    id Property = 0;
  }
  id v10 = Property;

  if (v10)
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_10039910C;
    void v26[3] = &unk_100522720;
    void v26[4] = a1;
    id v27 = v3;
    [v10 prepareWithCompletionHandler:v26];
  }
  else
  {
    unint64_t v12 = ASDErrorWithDescription();
    if (v3) {
      objc_setProperty_atomic(v3, v11, v12, 40);
    }

    id v13 = ASDLogHandleForCategory();
    id v14 = v13;
    if (v3)
    {
      os_signpost_id_t v15 = v3[16];
      if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
      {
        id v17 = objc_getProperty(v3, v16, 56, 1);
        id v19 = objc_getProperty(v3, v18, 40, 1);
        __int16 v20 = sub_100369AD0(v19);
        *(_DWORD *)long long buf = 138543618;
        id v29 = v17;
        __int16 v30 = 2114;
        double v31 = v20;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, v15, "ConsumerError", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", buf, 0x16u);
      }
    }

    long long v21 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      if (v3) {
        id v24 = objc_getProperty(v3, v22, 56, 1);
      }
      else {
        id v24 = 0;
      }
      id v25 = v24;
      *(_DWORD *)long long buf = 138412290;
      id v29 = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[%@] Data consumer is missing", buf, 0xCu);
    }
    sub_100397208(a1, v3);
  }

LABEL_20:
}

void sub_100394650(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) state])
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v7, 56, 1);
      }
      id v9 = Property;
      id v10 = *(void **)(a1 + 32);
      int v35 = 138412546;
      id v36 = v9;
      __int16 v37 = 2114;
      uint64_t v38 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Data consumer for task: %{public}@ was stopped at consumer callback", (uint8_t *)&v35, 0x16u);
    }
    goto LABEL_24;
  }
  if (v5)
  {
    id v11 = ASDLogHandleForCategory();
    unint64_t v12 = v11;
    id v13 = *(void **)(a1 + 40);
    if (v13)
    {
      os_signpost_id_t v14 = v13[16];
      if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
      {
        id v16 = objc_getProperty(v13, v15, 56, 1);
        id v17 = sub_100369AD0(v5);
        int v35 = 138543618;
        id v36 = v16;
        __int16 v37 = 2114;
        uint64_t v38 = v17;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, v14, "ConsumerError", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", (uint8_t *)&v35, 0x16u);
      }
    }

    SEL v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v32 = *(id *)(a1 + 40);
      if (v32) {
        id v32 = objc_getProperty(v32, v19, 56, 1);
      }
      id v33 = v32;
      id v34 = *(void **)(a1 + 32);
      int v35 = 138412802;
      id v36 = v33;
      __int16 v37 = 2114;
      uint64_t v38 = v34;
      __int16 v39 = 2114;
      id v40 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%@] Data consumer for task: %{public}@ failed with error: %{public}@", (uint8_t *)&v35, 0x20u);
    }
    long long v21 = *(void **)(a1 + 40);
    if (v21)
    {
      objc_setProperty_atomic(v21, v20, v5, 40);
      uint64_t v22 = *(void *)(a1 + 40);
    }
    else
    {
      uint64_t v22 = 0;
    }
    +[Analytics postHashMismatchWithTaskInfo:v22];
LABEL_23:
    [*(id *)(a1 + 32) cancel];
    goto LABEL_24;
  }
  if (a3)
  {
    id v23 = ASDLogHandleForCategory();
    id v24 = v23;
    id v25 = *(void **)(a1 + 40);
    if (v25)
    {
      os_signpost_id_t v26 = v25[16];
      if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
      {
        id v28 = objc_getProperty(v25, v27, 56, 1);
        int v35 = 138543362;
        id v36 = v28;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, v26, "ConsumerComplete", " uuid=%{public, signpost.description:attribute}@ ", (uint8_t *)&v35, 0xCu);
      }
    }

    uint64_t v29 = *(void *)(a1 + 40);
    if (v29) {
      *(void *)(v29 + 16) = 2;
    }
    goto LABEL_23;
  }
  __int16 v30 = (char *)[*(id *)(a1 + 32) countOfBytesReceived];
  uint64_t v31 = *(void *)(a1 + 40);
  if (v31) {
    *(void *)(v31 + 24) = &v30[*(void *)(v31 + 112)];
  }
LABEL_24:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1003956B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003957B0;
  v8[3] = &unk_10052ABE0;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_1003957B0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = ASDLogHandleForCategory();
    id v3 = v2;
    id v4 = *(void **)(a1 + 56);
    if (v4)
    {
      os_signpost_id_t v5 = v4[16];
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
      {
        id v7 = objc_getProperty(v4, v6, 56, 1);
        id v8 = sub_100369AD0(*(id *)(a1 + 32));
        *(_DWORD *)long long buf = 138543618;
        id v24 = v7;
        __int16 v25 = 2114;
        os_signpost_id_t v26 = v8;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "ConsumerError", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", buf, 0x16u);
      }
    }

    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 56);
      if (Property) {
        id Property = objc_getProperty(Property, v10, 56, 1);
      }
      id v16 = Property;
      id v17 = *(void **)(a1 + 64);
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412802;
      id v24 = v16;
      __int16 v25 = 2114;
      os_signpost_id_t v26 = v17;
      __int16 v27 = 2114;
      uint64_t v28 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@] Data consumer for task: %{public}@ failed to reset with error: %{public}@", buf, 0x20u);
    }
    id v12 = *(void **)(a1 + 56);
    if (v12) {
      objc_setProperty_atomic(v12, v11, *(id *)(a1 + 32), 40);
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100395A28;
    v19[3] = &unk_10052ABB8;
    id v13 = *(void **)(a1 + 40);
    id v14 = *(void **)(a1 + 56);
    void v19[4] = *(void *)(a1 + 48);
    id v20 = v14;
    id v21 = *(id *)(a1 + 64);
    id v22 = *(id *)(a1 + 72);
    [v13 prepareWithCompletionHandler:v19];
  }
}

void sub_100395A28(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100395B10;
  block[3] = &unk_100525278;
  uint64_t v13 = a2;
  id v9 = *(id *)(a1 + 40);
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v7 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_100395B10(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    id v2 = ASDLogHandleForCategory();
    id v3 = v2;
    id v4 = *(void **)(a1 + 32);
    if (v4)
    {
      os_signpost_id_t v5 = v4[16];
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
      {
        id v7 = objc_getProperty(v4, v6, 56, 1);
        id v8 = sub_100369AD0(*(id *)(a1 + 40));
        int v35 = 138543618;
        id v36 = v7;
        __int16 v37 = 2114;
        uint64_t v38 = v8;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "ConsumerError", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", (uint8_t *)&v35, 0x16u);
      }
    }

    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v10, 56, 1);
      }
      id v28 = Property;
      uint64_t v29 = *(void **)(a1 + 48);
      uint64_t v30 = *(void *)(a1 + 64);
      int v35 = 138412802;
      id v36 = v28;
      __int16 v37 = 2114;
      uint64_t v38 = v29;
      __int16 v39 = 2048;
      uint64_t v40 = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@] Data consumer for task: %{public}@ failed to prepare with unexpected resumption offset: %llu", (uint8_t *)&v35, 0x20u);
    }
    id v12 = ASDErrorWithDescription();
    uint64_t v13 = *(void **)(a1 + 32);
    if (v13) {
      objc_setProperty_atomic(v13, v11, v12, 40);
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  if (*(void *)(a1 + 40))
  {
    id v14 = ASDLogHandleForCategory();
    os_signpost_id_t v15 = v14;
    id v16 = *(void **)(a1 + 32);
    if (v16)
    {
      os_signpost_id_t v17 = v16[16];
      if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
      {
        id v19 = objc_getProperty(v16, v18, 56, 1);
        id v20 = sub_100369AD0(*(id *)(a1 + 40));
        int v35 = 138543618;
        id v36 = v19;
        __int16 v37 = 2114;
        uint64_t v38 = v20;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, v17, "ConsumerError", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", (uint8_t *)&v35, 0x16u);
      }
    }

    id v21 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      id v31 = *(id *)(a1 + 32);
      if (v31) {
        id v31 = objc_getProperty(v31, v22, 56, 1);
      }
      id v32 = v31;
      uint64_t v34 = *(void *)(a1 + 40);
      id v33 = *(void **)(a1 + 48);
      int v35 = 138412802;
      id v36 = v32;
      __int16 v37 = 2114;
      uint64_t v38 = v33;
      __int16 v39 = 2114;
      uint64_t v40 = v34;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[%@] Data consumer for task: %{public}@ failed to prepare with error: %{public}@", (uint8_t *)&v35, 0x20u);
    }
    id v24 = *(void **)(a1 + 32);
    if (v24) {
      objc_setProperty_atomic(v24, v23, *(id *)(a1 + 40), 40);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  os_signpost_id_t v26 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v26();
}

void sub_100395ED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100395FB4;
  v6[3] = &unk_100522420;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_100395FB4(uint64_t a1, const char *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = ASDLogHandleForCategory();
    id v4 = v3;
    id v5 = *(void **)(a1 + 40);
    if (v5)
    {
      os_signpost_id_t v6 = v5[16];
      if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
      {
        id v8 = objc_getProperty(v5, v7, 56, 1);
        id v9 = sub_100369AD0(*(id *)(a1 + 32));
        int v19 = 138543618;
        id v20 = v8;
        __int16 v21 = 2114;
        id v22 = v9;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, v6, "ConsumerError", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", (uint8_t *)&v19, 0x16u);
      }
    }

    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v11, 56, 1);
      }
      id v16 = Property;
      os_signpost_id_t v17 = *(void **)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138412802;
      id v20 = v16;
      __int16 v21 = 2114;
      id v22 = v17;
      __int16 v23 = 2114;
      uint64_t v24 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@] Data consumer for task: %{public}@ failed to reset with error: %{public}@", (uint8_t *)&v19, 0x20u);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      *(void *)(v12 + 16) = 1;
    }
  }
  uint64_t v13 = *(void **)(a1 + 40);
  if (v13) {
    objc_setProperty_atomic(v13, a2, *(id *)(a1 + 32), 40);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100396F88(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a1)
  {
    self = v4;
    if (v4)
    {
      id v6 = objc_getProperty(v4, v5, 72, 1);
      if (v6)
      {
        nw_activity_complete_with_reason();
        objc_setProperty_atomic(self, v7, 0, 72);
      }
    }
    else
    {
      id v6 = 0;
    }

    id v4 = self;
  }
}

void sub_10039701C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003970DC;
  block[3] = &unk_1005212D8;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_1003970DC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v3, 56, 1);
      }
      id v10 = Property;
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      id v13 = v10;
      __int16 v14 = 2114;
      uint64_t v15 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[%@] Failed to finish data consumer with error: %{public}@", (uint8_t *)&v12, 0x16u);
    }
    id v5 = *(id *)(a1 + 40);
    if (v5) {
      id v5 = objc_getProperty(v5, v4, 40, 1);
    }
    id v6 = v5;

    if (!v6)
    {
      id v8 = *(void **)(a1 + 40);
      if (v8) {
        objc_setProperty_atomic(v8, v7, *(id *)(a1 + 32), 40);
      }
    }
  }
  sub_100397208(*(void *)(a1 + 48), *(void **)(a1 + 40));
}

void sub_100397208(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = ASDLogHandleForCategory();
    id v5 = v4;
    if (v3)
    {
      os_signpost_id_t v6 = *((void *)v3 + 16);
      if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
      {
        LOWORD(v37) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "Download", "", (uint8_t *)&v37, 2u);
      }

      objc_setProperty_atomic(v3, v7, 0, 48);
    }
    else
    {
    }
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (v3) {
        id Property = objc_getProperty(v3, v9, 56, 1);
      }
      else {
        id Property = 0;
      }
      uint64_t v11 = Property;
      int v37 = 138412290;
      uint64_t v38 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Finishing asset promise", (uint8_t *)&v37, 0xCu);
    }
    if (v3) {
      id WeakRetained = objc_loadWeakRetained((id *)v3 + 11);
    }
    else {
      id WeakRetained = 0;
    }
    if ([WeakRetained isFinished])
    {
      if ([WeakRetained isCancelled])
      {
LABEL_44:
        sub_10023E134((uint64_t)AssetTaskInfo, v3);

        goto LABEL_45;
      }
      uint64_t v13 = ASDLogHandleForCategory();
      if (!os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_FAULT))
      {
LABEL_43:

        goto LABEL_44;
      }
      if (v3) {
        id v15 = objc_getProperty(v3, v14, 56, 1);
      }
      else {
        id v15 = 0;
      }
      id v16 = v15;
      int v37 = 138412290;
      uint64_t v38 = v16;
      _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)v13, OS_LOG_TYPE_FAULT, "[%@] Request completed but promise had already finished", (uint8_t *)&v37, 0xCu);
LABEL_42:

      goto LABEL_43;
    }
    os_signpost_id_t v17 = objc_alloc_init(AssetResult);
    uint64_t v13 = (uint64_t)v17;
    if (v3)
    {
      unint64_t v19 = *((void *)v3 + 3);
      if (!v17) {
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v19 = 0;
      if (!v17)
      {
LABEL_22:
        if (v3)
        {
          id v20 = objc_getProperty(v3, v18, 96, 1);
          id v22 = v20;
          if (v20) {
            id v20 = objc_getProperty(v20, v21, 64, 1);
          }
        }
        else
        {
          id v22 = 0;
          id v20 = 0;
        }
        id v24 = v20;
        if (v13) {
          objc_setProperty_atomic((id)v13, v23, v24, 24);
        }

        if (v3) {
          id v26 = objc_getProperty(v3, v25, 40, 1);
        }
        else {
          id v26 = 0;
        }
        id v28 = v26;
        if (v13) {
          objc_setProperty_atomic((id)v13, v27, v28, 32);
        }

        if (v3)
        {
          char v30 = *((unsigned char *)v3 + 9) & 1;
          if (!v13)
          {
LABEL_34:
            if (v3) {
              id v31 = objc_getProperty(v3, v29, 64, 1);
            }
            else {
              id v31 = 0;
            }
            id v33 = v31;
            if (v13) {
              objc_setProperty_atomic((id)v13, v32, v33, 40);
            }

            [WeakRetained finishWithResult:v13];
            id v16 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              if (v3) {
                id v35 = objc_getProperty(v3, v34, 56, 1);
              }
              else {
                id v35 = 0;
              }
              id v36 = v35;
              int v37 = 138412290;
              uint64_t v38 = v36;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] Finished asset promise", (uint8_t *)&v37, 0xCu);
            }
            goto LABEL_42;
          }
        }
        else
        {
          char v30 = 0;
          if (!v13) {
            goto LABEL_34;
          }
        }
        *(unsigned char *)(v13 + _Block_object_dispose(&a9, 8) = v30;
        goto LABEL_34;
      }
    }
    v17->_bytesReceived = v19;
    goto LABEL_22;
  }
LABEL_45:
}

void sub_1003975E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003976A8;
  block[3] = &unk_1005212D8;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_1003976A8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v3, 56, 1);
      }
      id v26 = Property;
      uint64_t v27 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t v29 = 138412546;
      *(void *)&v29[4] = v26;
      *(_WORD *)&v29[12] = 2114;
      *(void *)&unsigned char v29[14] = v27;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[%@] Failed to suspend data consumer with error: %{public}@", v29, 0x16u);
    }
    id v5 = *(void **)(a1 + 40);
    if (v5)
    {
      objc_setProperty_atomic(v5, v4, *(id *)(a1 + 32), 40);
      uint64_t v6 = *(void **)(a1 + 40);
    }
    else
    {
      uint64_t v6 = 0;
    }
    sub_100397208(*(void *)(a1 + 48), v6);
    return;
  }
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v7[2] == 1)
    {
      id v9 = v7;
      if (v8)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 16));
        id v10 = ASDLogHandleForCategory();
        uint64_t v11 = v10;
        os_signpost_id_t v12 = v9[16];
        if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
        {
          id v14 = objc_getProperty(v9, v13, 56, 1);
          *(_DWORD *)uint64_t v29 = 138543362;
          *(void *)&v29[4] = v14;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, v12, "Retry", " uuid=%{public, signpost.description:attribute}@ ", v29, 0xCu);
        }
        id v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          id v17 = objc_getProperty(v9, v16, 56, 1);
          *(_DWORD *)uint64_t v29 = 138412290;
          *(void *)&v29[4] = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@] Retrying request", v29, 0xCu);
        }
        v7[2] = 0;
        objc_setProperty_atomic(v9, v18, 0, 40);
        objc_setProperty_atomic(v9, v19, 0, 48);
        id v21 = objc_getProperty(v9, v20, 96, 1);
        __int16 v23 = v21;
        if (v21) {
          id v21 = objc_getProperty(v21, v22, 64, 1);
        }
        id v24 = v21;

        *(void *)uint64_t v29 = _NSConcreteStackBlock;
        *(void *)&v29[8] = 3221225472;
        *(void *)&v29[16] = sub_100398EF8;
        char v30 = &unk_100521620;
        uint64_t v31 = v8;
        id v32 = v9;
        [v24 resetWithCompletionHandler:v29];
      }
      return;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
  }
  id v28 = *(void **)(a1 + 40);
  sub_100397208(v8, v28);
}

void sub_100398288(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [v5 selectedActionIdentifier];
    unsigned __int8 v8 = [v7 isEqualToString:@"AuthenticationChallengeDialogActionOkay"];

    if (v8)
    {
      id v9 = [v5 textfieldValues];
      if ([v9 count] == (id)1)
      {
        id v10 = [v9 objectAtIndexedSubscript:0];
        uint64_t v11 = sub_100361E94(a1[5]);
      }
      else
      {
        if ([v9 count] != (id)2)
        {
          id v10 = 0;
          id v16 = 0;
          goto LABEL_14;
        }
        id v10 = [v9 objectAtIndexedSubscript:1];
        uint64_t v11 = [v9 objectAtIndexedSubscript:0];
      }
      id v16 = (void *)v11;
LABEL_14:
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id Property = (id)a1[4];
        if (Property) {
          id Property = objc_getProperty(Property, v18, 56, 1);
        }
        id v20 = Property;
        int v22 = 138412290;
        id v23 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Completed user authentication challenge", (uint8_t *)&v22, 0xCu);
      }
      id v21 = +[NSURLCredential credentialWithUser:v16 password:v10 persistence:1];
      (*(void (**)(void))(a1[6] + 16))();

      goto LABEL_19;
    }
  }
  os_signpost_id_t v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = (id)a1[4];
    if (v14) {
      id v14 = objc_getProperty(v14, v13, 56, 1);
    }
    id v15 = v14;
    int v22 = 138412290;
    id v23 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Canceling user authentication challenge", (uint8_t *)&v22, 0xCu);
  }
  (*(void (**)(void))(a1[6] + 16))();
LABEL_19:
}

void sub_100398A10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v11 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v12, 56, 1);
    }
    id v14 = Property;
    *(_DWORD *)long long buf = 138412546;
    id v20 = v14;
    __int16 v21 = 2114;
    id v22 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] Failed to determine if metrics should be collected: %{public}@", buf, 0x16u);
LABEL_16:

    goto LABEL_17;
  }
  if (([v5 BOOLValue] & 1) == 0)
  {
    uint64_t v11 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_17;
    }
    id v16 = *(id *)(a1 + 32);
    if (v16) {
      id v16 = objc_getProperty(v16, v15, 56, 1);
    }
    id v14 = v16;
    *(_DWORD *)long long buf = 138412290;
    id v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[%@] Metrics should not be collected", buf, 0xCu);
    goto LABEL_16;
  }
  id v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v8, 56, 1);
    }
    id v10 = v9;
    *(_DWORD *)long long buf = 138412290;
    id v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Recording LoadURL Metrics", buf, 0xCu);
  }
  uint64_t v11 = +[AMSMetricsLoadURLEvent loadURLEventPromiseWithContext:*(void *)(a1 + 40)];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100398C84;
  v17[3] = &unk_10052AC58;
  id v18 = *(id *)(a1 + 32);
  [v11 resultWithCompletion:v17];

LABEL_17:
}

void sub_100398C84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    id v23 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v24, 56, 1);
      }
      id v26 = Property;
      *(_DWORD *)long long buf = 138412546;
      id v30 = v26;
      __int16 v31 = 2114;
      id v32 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[%@] Failed to create event: %{public}@", buf, 0x16u);
    }
  }
  else
  {
    [v5 setCheckDiagnosticsAndUsageSetting:1];
    id v9 = *(void **)(a1 + 32);
    if (v9)
    {
      id v10 = objc_getProperty(v9, v8, 96, 1);
      os_signpost_id_t v12 = v10;
      if (v10) {
        id v10 = objc_getProperty(v10, v11, 120, 1);
      }
    }
    else
    {
      os_signpost_id_t v12 = 0;
      id v10 = 0;
    }
    id v13 = v10;

    if (v13)
    {
      id v15 = *(void **)(a1 + 32);
      if (v15)
      {
        id v16 = objc_getProperty(v15, v14, 96, 1);
        id v18 = v16;
        if (v16) {
          id v16 = objc_getProperty(v16, v17, 120, 1);
        }
      }
      else
      {
        id v18 = 0;
        id v16 = 0;
      }
      id v19 = v16;
      [v5 addPropertiesWithDictionary:v19];
    }
    id v20 = *(id *)(a1 + 32);
    if (v20) {
      id v20 = objc_getProperty(v20, v14, 48, 1);
    }
    id v21 = v20;
    id v22 = [[_TtC9appstored10ASEMetrics alloc] initWithType:0];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = nullsub_30;
    v27[3] = &unk_100521388;
    id v28 = v21;
    id v23 = v21;
    [(ASEMetrics *)v22 enqueueEvent:v5 flushEvents:1 completionHandler:v27];
  }
}

void sub_100398EF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100398FB8;
  block[3] = &unk_1005212D8;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_100398FB8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v3, 56, 1);
      }
      id v10 = Property;
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      id v13 = v10;
      __int16 v14 = 2114;
      uint64_t v15 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[%@] Failed to reset data consumer with error: %{public}@", (uint8_t *)&v12, 0x16u);
    }
    id v5 = *(void **)(a1 + 40);
    if (v5)
    {
      objc_setProperty_atomic(v5, v4, *(id *)(a1 + 32), 40);
      uint64_t v6 = *(void **)(a1 + 40);
    }
    else
    {
      uint64_t v6 = 0;
    }
    sub_100397208(*(void *)(a1 + 48), v6);
  }
  else
  {
    unsigned __int8 v8 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    sub_100393EF8(v7, v8);
  }
}

void sub_10039910C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1003991D4;
  void v10[3] = &unk_100528338;
  id v11 = v5;
  uint64_t v14 = a2;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v7;
  uint64_t v13 = v8;
  id v9 = v5;
  dispatch_async(v6, v10);
}

void sub_1003991D4(uint64_t a1, const char *a2)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15) {
      goto LABEL_15;
    }
    id v16 = *(void **)(a1 + 40);
    if (v16)
    {
      id v17 = objc_getProperty(v16, a2, 96, 1);
      if (v17)
      {
        uint64_t v18 = v17[20];

        if (!v18) {
          goto LABEL_21;
        }
        uint64_t v15 = *(void *)(a1 + 56);
LABEL_15:
        id v19 = *(void **)(a1 + 40);
        if (v19)
        {
          id v17 = objc_getProperty(v19, a2, 96, 1);
          if (v17)
          {
            uint64_t v20 = v17[20];
            goto LABEL_18;
          }
        }
        else
        {
          id v17 = 0;
        }
        uint64_t v20 = 0;
LABEL_18:
        uint64_t v21 = *(void *)(a1 + 40);
        if (v21) {
          *(void *)(v21 + 112) = v20 + v15;
        }
      }
    }
    else
    {
      id v17 = 0;
    }

LABEL_21:
    uint64_t v22 = *(void *)(a1 + 48);
    id v23 = *(id *)(a1 + 40);
    if (!v22)
    {
LABEL_34:

      return;
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v22 + 16));
    if (v23)
    {
      *((unsigned char *)v23 + _Block_object_dispose(&a9, 8) = 0;
      if (*((void *)v23 + 2) == 3)
      {
        __int16 v25 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          id v37 = objc_getProperty(v23, v26, 56, 1);
          *(_DWORD *)uint64_t v38 = 138412290;
          *(void *)&v38[4] = v37;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "[%@] Stopping early because request has been canceled", v38, 0xCu);
        }
        sub_100397208(v22, v23);
        goto LABEL_34;
      }
      id v27 = objc_getProperty(v23, v24, 96, 1);
      uint64_t v29 = v27;
      if (*((unsigned char *)v23 + 9) & 1) == 0 && v27 && (*((unsigned char *)v27 + 14))
      {
        id v32 = objc_getProperty(v23, v28, 104, 1);
        id v33 = [v32 URL];
        *(void *)uint64_t v38 = _NSConcreteStackBlock;
        *(void *)&v38[8] = 3221225472;
        *(void *)&v38[16] = sub_100399604;
        __int16 v39 = &unk_10052ACA8;
        uint64_t v40 = v22;
        id v41 = v23;
        ACSLocateCachingServer();

        goto LABEL_33;
      }
      *((unsigned char *)v23 + 9) = 1;
      id Property = objc_getProperty(v23, v28, 104, 1);
    }
    else
    {
      uint64_t v29 = 0;
      id Property = 0;
    }
    id v31 = Property;
    sub_10039989C(v22, v23, v31);

LABEL_33:
    goto LABEL_34;
  }
  id v3 = ASDLogHandleForCategory();
  id v4 = v3;
  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    os_signpost_id_t v6 = v5[16];
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      id v8 = objc_getProperty(v5, v7, 56, 1);
      id v9 = sub_100369AD0(*(id *)(a1 + 32));
      *(_DWORD *)uint64_t v38 = 138543618;
      *(void *)&v38[4] = v8;
      *(_WORD *)&v38[12] = 2114;
      *(void *)&v38[14] = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, v6, "ConsumerError", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", v38, 0x16u);
    }
  }

  id v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    id v34 = *(id *)(a1 + 40);
    if (v34) {
      id v34 = objc_getProperty(v34, v11, 56, 1);
    }
    id v35 = v34;
    uint64_t v36 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t v38 = 138412546;
    *(void *)&v38[4] = v35;
    *(_WORD *)&v38[12] = 2114;
    *(void *)&v38[14] = v36;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@] Preparing data consumer failed with error: %{public}@", v38, 0x16u);
  }
  uint64_t v13 = *(void **)(a1 + 40);
  if (v13)
  {
    objc_setProperty_atomic(v13, v12, *(id *)(a1 + 32), 40);
    uint64_t v14 = *(void **)(a1 + 40);
  }
  else
  {
    uint64_t v14 = 0;
  }
  sub_100397208(*(void *)(a1 + 48), v14);
}

void sub_100399604(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 16));
  id v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v9, 56, 1);
    }
    id v24 = Property;
    id v25 = *(id *)(a1 + 40);
    if (v25) {
      id v25 = objc_getProperty(v25, v23, 104, 1);
    }
    id v26 = v25;
    id v27 = [v26 URL];
    int v30 = 138544386;
    id v31 = v24;
    __int16 v32 = 2114;
    id v33 = v27;
    __int16 v34 = 2114;
    uint64_t v35 = a2;
    __int16 v36 = 2114;
    uint64_t v37 = a3;
    __int16 v38 = 2114;
    __int16 v39 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[%{public}@] Lookup complete for: %{public}@ found replacement: %{public}@ with advice: %{public}@ error: %{public}@", (uint8_t *)&v30, 0x34u);
  }
  if (a2)
  {
    id v11 = *(id *)(a1 + 40);
    if (v11) {
      id v11 = objc_getProperty(v11, v10, 104, 1);
    }
    id v12 = v11;
    id v13 = [v12 mutableCopy];

    [v13 setURL:a2];
    [v13 _setRequiresShortConnectionTimeout:1];
    sub_10039989C(*(void *)(a1 + 32), *(void **)(a1 + 40), v13);
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14) {
      *(unsigned char *)(v14 + _Block_object_dispose(&a9, 8) = 1;
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v28 = *(id *)(a1 + 40);
        if (v28) {
          id v28 = objc_getProperty(v28, v16, 56, 1);
        }
        id v29 = v28;
        int v30 = 138412546;
        id v31 = v29;
        __int16 v32 = 2114;
        id v33 = a4;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%@] Error occuring while locating caching server: %{public}@", (uint8_t *)&v30, 0x16u);
      }
    }
    uint64_t v17 = *(void *)(a1 + 40);
    if (v17)
    {
      *(unsigned char *)(v17 + 9) = 1;
      uint64_t v20 = a1 + 32;
      uint64_t v18 = *(void *)(a1 + 32);
      id v19 = *(void **)(v20 + 8);
      if (v19) {
        id v21 = objc_getProperty(v19, v10, 104, 1);
      }
      else {
        id v21 = 0;
      }
    }
    else
    {
      id v19 = 0;
      id v21 = 0;
      uint64_t v18 = *(void *)(a1 + 32);
    }
    id v13 = v21;
    sub_10039989C(v18, v19, v13);
  }
}

void sub_10039989C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_135;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!v5)
  {
    id v10 = 0;
LABEL_8:
    id v11 = v10;
    id v12 = objc_alloc((Class)NSMutableURLRequest);
    id v13 = v6;
    id v14 = objc_msgSend(v12, "_initWithCFURLRequest:", objc_msgSend(v13, "_CFURLRequest"));
    uint64_t v15 = [v14 HTTPUserAgent];

    if (!v15)
    {
      id v16 = sub_100301DF0();
      [v14 setHTTPUserAgent:v16];
    }
    if (v5)
    {
      uint64_t v17 = *((void *)v5 + 14);
      if (v17) {
        sub_100336A38(v14, v17);
      }
    }
    if (v11) {
      uint64_t v18 = *((void *)v11 + 21);
    }
    else {
      uint64_t v18 = 0;
    }
    id v19 = sub_100209E04(v18);
    if (v19) {
      [v14 setValue:v19 forHTTPHeaderField:@"Apple-Download-Type"];
    }
    uint64_t v20 = *(void **)(a1 + 24);
    if (v20)
    {
      if (!v5) {
        goto LABEL_22;
      }
      objc_storeWeak((id *)v5 + 15, v20);
    }
    else if (!v5)
    {
      goto LABEL_22;
    }
    id WeakRetained = objc_loadWeakRetained((id *)v5 + 15);

    if (WeakRetained) {
      goto LABEL_69;
    }
LABEL_22:
    v204 = v19;
    id v198 = v6;
    uint64_t v22 = (id *)v5;
    id v23 = v11;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    self = v23;
    id v25 = sub_10041D634((uint64_t)NSURLSessionConfiguration, v23);
    if (v5) {
      objc_setProperty_atomic(v22, v24, v25, 32);
    }
    v201 = v25;
    uint64_t v26 = [*(id *)(a1 + 32) objectForKeyedSubscript:v25];
    if (v26)
    {
      id v27 = (id *)v26;
      id v28 = *(id *)(v26 + 24);
      v202 = v27;
      if (v28)
      {
        id v29 = v28;
        id v194 = v5;
        int v30 = v22;
        id v31 = v13;
        id v32 = v14;
        id v33 = v27[3];
        id v34 = [v33 unsignedLongLongValue];
        if (v11)
        {
          unint64_t v35 = (unint64_t)v34;
          unint64_t v36 = self[11];

          BOOL v37 = v35 >= v36;
          id v14 = v32;
          id v13 = v31;
          uint64_t v22 = v30;
          id v5 = v194;
          id v27 = v202;
          if (!v37)
          {
            __int16 v38 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              if (v194) {
                id Property = objc_getProperty(v22, v39, 56, 1);
              }
              else {
                id Property = 0;
              }
              id v41 = Property;
              id v42 = v202[3];
              id v43 = [v42 unsignedLongLongValue];
              uint64_t v44 = self[11];
              *(_DWORD *)long long buf = 138412802;
              id v217 = v41;
              __int16 v218 = 2048;
              id v219 = v43;
              __int16 v220 = 2048;
              uint64_t v221 = v44;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "[%@] Creating new session because download exceeds maximum watch cellular transfer size for existing session (Max: %{iec-bytes}lld, Download: %{iec-bytes}lld)", buf, 0x20u);

              id v27 = v202;
            }

            int v45 = _os_feature_enabled_impl();
            goto LABEL_33;
          }
        }
        else
        {

          id v13 = v31;
          uint64_t v22 = v30;
          id v5 = v194;
          id v27 = v202;
        }
      }
      id v51 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        id v196 = v14;
        id v192 = v13;
        if (v5) {
          id v53 = objc_getProperty(v22, v52, 56, 1);
        }
        else {
          id v53 = 0;
        }
        id v54 = v53;
        id v55 = v202[2];
        uint64_t v56 = [v55 configuration];
        id v57 = [v56 identifier];
        *(_DWORD *)long long buf = 138412802;
        id v217 = v54;
        __int16 v218 = 2114;
        id v219 = v57;
        __int16 v220 = 2114;
        uint64_t v221 = (uint64_t)v201;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "[%@] Reusing existing session with identifier: %{public}@ (%{public}@)", buf, 0x20u);

        id v27 = v202;
        id v14 = v196;
        id v13 = v192;
      }

      id v58 = v27[2];
      id v59 = [v58 configuration];
      double v60 = [v59 identifier];

      if (v60)
      {
        double v61 = v201;
        long long v63 = [v60 stringByAppendingFormat:@" (%@)", v201];
        if (v5) {
          objc_setProperty_atomic(v22, v62, v63, 32);
        }
      }
      else
      {
        double v61 = v201;
      }

      long long v64 = v202;
      goto LABEL_66;
    }
    int v50 = _os_feature_enabled_impl();
    if (!v11)
    {
      char v46 = 1;
      id v11 = 0;
      goto LABEL_55;
    }
    int v45 = v50;
LABEL_33:
    char v46 = 0;
    if (*((_DWORD *)self + 4) >= 0x12u && !self[9] && v45)
    {
      id v47 = sub_10041D5A4((uint64_t)NSURLSessionConfiguration, self);
      char v46 = 0;
      int v48 = 1;
      goto LABEL_56;
    }
LABEL_55:
    id v47 = sub_10041D0E4((uint64_t)NSURLSessionConfiguration, self);
    int v48 = 0;
LABEL_56:
    v195 = +[NSURLSession sessionWithConfiguration:v47 delegate:a1 delegateQueue:*(void *)(a1 + 8)];
    if (v46) {
      id v66 = 0;
    }
    else {
      id v66 = objc_getProperty(self, v65, 136, 1);
    }
    id v67 = v66;
    uint64_t v203 = sub_10038D208((uint64_t)CachedURLSession, v195, v67);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:");

    __int16 v68 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      id v193 = v13;
      if (v5) {
        id v70 = objc_getProperty(v22, v69, 56, 1);
      }
      else {
        id v70 = 0;
      }
      id v71 = v70;
      if (v48) {
        uint64_t v72 = "ephemeral";
      }
      else {
        uint64_t v72 = "background";
      }
      id v73 = [v47 identifier];
      *(_DWORD *)long long buf = 138413058;
      id v217 = v71;
      __int16 v218 = 2080;
      id v219 = (id)v72;
      __int16 v220 = 2114;
      uint64_t v221 = (uint64_t)v73;
      __int16 v222 = 2114;
      v223 = v201;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "[%@] Created new %s session with identifier: %{public}@ (%{public}@)", buf, 0x2Au);

      id v13 = v193;
    }

    double v61 = v201;
    long long v64 = (void *)v203;
    if (!v203)
    {
      CFStringRef v74 = 0;
      goto LABEL_67;
    }
LABEL_66:
    CFStringRef v74 = (void *)v64[2];
LABEL_67:
    id v75 = v74;

    if (!v5)
    {

      id v150 = ASDLogHandleForCategory();
      id v6 = v198;
      id v19 = v204;
      goto LABEL_121;
    }
    objc_storeWeak(v22 + 15, v75);

    id v6 = v198;
    id v19 = v204;
LABEL_69:
    id v76 = objc_loadWeakRetained((id *)v5 + 15);

    if (v76)
    {
      id v77 = objc_loadWeakRetained((id *)v5 + 15);
      uint64_t v78 = [v77 dataTaskWithRequest:v14];

      selfa = (id)v78;
      if (!v78)
      {
        __int16 v161 = ASDLogHandleForCategory();
        uint64_t v162 = v161;
        os_signpost_id_t v163 = *((void *)v5 + 16);
        if (v163 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v161))
        {
          id v165 = objc_getProperty(v5, v164, 56, 1);
          [v13 URL];
          id v200 = v6;
          id v166 = v13;
          long long v168 = v167 = v19;
          *(_DWORD *)long long buf = 138543618;
          id v217 = v165;
          __int16 v218 = 2114;
          id v219 = v168;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v162, OS_SIGNPOST_EVENT, v163, "TaskError", " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ", buf, 0x16u);

          id v19 = v167;
          id v13 = v166;
          id v6 = v200;
        }
        long long v169 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
        {
          id v186 = objc_getProperty(v5, v170, 56, 1);
          uint64_t v187 = [v13 URL];
          *(_DWORD *)long long buf = 138412546;
          id v217 = v186;
          __int16 v218 = 2114;
          id v219 = v187;
          _os_log_error_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_ERROR, "[%@] Error creating task for URL: %{public}@", buf, 0x16u);
        }
        long long v171 = +[NSError errorWithDomain:@"AssetErrorDomain" code:5 userInfo:0];
        objc_setProperty_atomic(v5, v172, v171, 40);

        sub_100397208(a1, v5);
        goto LABEL_133;
      }
      id v197 = v14;
      uint64_t v80 = *(void **)(a1 + 32);
      id v81 = objc_getProperty(v5, v79, 32, 1);
      id v82 = [v80 objectForKeyedSubscript:v81];
      uint64_t v83 = sub_10038D2E8(v82);

      id v84 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        id v178 = objc_getProperty(v5, v85, 56, 1);
        id v180 = v13;
        long long v181 = v19;
        id v182 = objc_getProperty(v5, v179, 32, 1);
        *(_DWORD *)long long buf = 138412802;
        id v217 = v178;
        __int16 v218 = 2114;
        id v219 = v182;
        __int16 v220 = 2048;
        uint64_t v221 = v83;
        _os_log_debug_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "[%@] Started active task in session: %{public}@, now %llu active tasks.", buf, 0x20u);

        id v19 = v181;
        id v13 = v180;
      }
      unsigned int v86 = v5;
      id v87 = selfa;
      id v89 = objc_getProperty(v86, v88, 96, 1);
      v205 = v19;
      if (v89)
      {
        id v90 = (void *)v89[21];

        switch((unint64_t)v90)
        {
          case 0uLL:
            goto LABEL_157;
          case 1uLL:
          case 2uLL:
          case 3uLL:
          case 4uLL:
          case 5uLL:
          case 6uLL:
          case 7uLL:
          case 8uLL:
          case 9uLL:
            id v91 = nw_activity_create();
            if (v91)
            {
              SEL v92 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
              {
                id v94 = objc_getProperty(v86, v93, 56, 1);
                *(_DWORD *)long long buf = 138412546;
                id v217 = v94;
                __int16 v218 = 2114;
                id v219 = v91;
                _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "[%@] Activating network activity: %{public}@", buf, 0x16u);
              }
              nw_activity_activate();
              objc_msgSend(v87, "set_nw_activity:", v91);
              objc_setProperty_atomic(v86, v95, v91, 72);
            }
            break;
          default:
            id v91 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
            {
              id v177 = objc_getProperty(v86, v176, 56, 1);
              *(_DWORD *)long long buf = 138412546;
              id v217 = v177;
              __int16 v218 = 2048;
              id v219 = v90;
              _os_log_error_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "[%@] No reporting as request reason '%ld' is unknown", buf, 0x16u);
            }
            break;
        }
      }
      else
      {
LABEL_157:
        id v91 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          id v191 = objc_getProperty(v86, v190, 56, 1);
          *(_DWORD *)long long buf = 138412290;
          id v217 = v191;
          _os_log_error_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "[%@] No reporting as request reason is unspecified", buf, 0xCu);
        }
      }

      double v96 = ASDLogHandleForCategory();
      __int16 v97 = v96;
      os_signpost_id_t v98 = v86[16];
      if (v98 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v96))
      {
        id v100 = objc_getProperty(v86, v99, 56, 1);
        id v101 = [v13 URL];
        *(_DWORD *)long long buf = 138543618;
        id v217 = v100;
        __int16 v218 = 2114;
        id v219 = v101;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v97, OS_SIGNPOST_EVENT, v98, "TaskCreated", " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ", buf, 0x16u);
      }
      id v102 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        id v104 = objc_getProperty(v86, v103, 56, 1);
        id v106 = objc_getProperty(v86, v105, 32, 1);
        id v107 = [v13 URL];
        *(_DWORD *)long long buf = 138413058;
        id v217 = v104;
        __int16 v218 = 2114;
        id v219 = v87;
        __int16 v220 = 2114;
        uint64_t v221 = (uint64_t)v106;
        __int16 v222 = 2114;
        v223 = v107;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "[%@] Created task: %{public}@ in session: %{public}@ for URL: %{public}@ ", buf, 0x2Au);
      }
      if (os_variant_has_internal_content())
      {
        id v108 = sub_100232114();

        if (v108)
        {
          id v110 = [VariantDescriptor alloc];
          if (v11) {
            id v111 = objc_getProperty(v11, v109, 192, 1);
          }
          else {
            id v111 = 0;
          }
          id v112 = v111;
          id v113 = sub_10025B634((id *)&v110->super.isa, v112);

          id v114 = sub_100232114();
          v212[0] = _NSConcreteStackBlock;
          v212[1] = 3221225472;
          v212[2] = sub_10039ADAC;
          v212[3] = &unk_10052ACD0;
          id v213 = v13;
          id v214 = v11;
          v215 = v113;
          id v115 = v113;
          sub_10023220C((uint64_t)v114, 1001, v212);
        }
      }
      sub_10023E000((uint64_t)AssetTaskInfo, v86, v87);
      if (v11) {
        id v117 = objc_getProperty(v11, v116, 184, 1);
      }
      else {
        id v117 = 0;
      }
      id v118 = v117;

      if (v118)
      {
        if (v11) {
          id v120 = objc_getProperty(v11, v119, 184, 1);
        }
        else {
          id v120 = 0;
        }
        id v121 = v120;
        objc_msgSend(v87, "set_priority:", objc_msgSend(v121, "longLongValue"));

        if (v11)
        {
LABEL_95:
          id v123 = objc_getProperty(v11, v122, 40, 1);
LABEL_96:
          id v124 = v123;

          if (v124)
          {
            if (v11) {
              id v126 = objc_getProperty(v11, v125, 40, 1);
            }
            else {
              id v126 = 0;
            }
            id v127 = v126;
            objc_msgSend(v87, "set_bytesPerSecondLimit:", objc_msgSend(v127, "longLongValue"));
          }
          if (v11) {
            id v128 = objc_getProperty(v11, v125, 112, 1);
          }
          else {
            id v128 = 0;
          }
          id v129 = v128;

          if (v129)
          {
            if (v11) {
              id v131 = objc_getProperty(v11, v130, 112, 1);
            }
            else {
              id v131 = 0;
            }
            id v132 = v131;
            [v132 doubleValue];
            objc_msgSend(v87, "set_loadingPriority:");
          }
          if (!v11 || (unsigned int v133 = *((_DWORD *)v11 + 4)) == 0)
          {
            id v134 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
            {
              id v188 = objc_getProperty(v86, v135, 56, 1);
              *(_DWORD *)long long buf = 138412290;
              id v217 = v188;
              _os_log_error_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_ERROR, "[%@] QOS class was unspecified, defaulting to utility!", buf, 0xCu);
            }
            unsigned int v133 = 17;
          }
          v208[0] = _NSConcreteStackBlock;
          v208[1] = 3221225472;
          v208[2] = sub_10039AE8C;
          v208[3] = &unk_1005212D8;
          id v136 = v86;
          id v209 = v136;
          id v210 = v13;
          id v211 = v87;
          id v137 = objc_retainBlock(v208);
          id v139 = objc_getProperty(v136, v138, 96, 1);
          id v141 = v139;
          if (v139) {
            id v139 = objc_getProperty(v139, v140, 104, 1);
          }
          id v142 = v139;

          if (v142 && _os_feature_enabled_impl())
          {
            id v143 = sub_10025910C();
            id v145 = objc_getProperty(v136, v144, 96, 1);
            id v147 = v145;
            if (v145) {
              id v145 = objc_getProperty(v145, v146, 104, 1);
            }
            id v148 = v145;
            sub_100259430(v143, v148, v133, v137);
          }
          else
          {
            id v143 = dispatch_get_global_queue(v133, 0);
            dispatch_async(v143, v137);
          }

          id v14 = v197;
          id v19 = v205;
LABEL_133:

LABEL_134:
          goto LABEL_135;
        }
      }
      else
      {
        id v173 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
        {
          id v189 = objc_getProperty(v86, v174, 56, 1);
          *(_DWORD *)long long buf = 138412290;
          id v217 = v189;
          _os_log_error_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_ERROR, "[%@] Task priority was unspecified, defaulting to non-user initiated!", buf, 0xCu);
        }
        LODWORD(v175) = 1137180672;
        [v87 setPriority:v175];
        if (v11) {
          goto LABEL_95;
        }
      }
      id v123 = 0;
      goto LABEL_96;
    }
    v149 = ASDLogHandleForCategory();
    id v150 = v149;
    os_signpost_id_t v151 = *((void *)v5 + 16);
    if (v151 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v149))
    {
      id v153 = objc_getProperty(v5, v152, 56, 1);
      [v13 URL];
      id v199 = v6;
      id v154 = v13;
      v156 = id v155 = v19;
      *(_DWORD *)long long buf = 138543618;
      id v217 = v153;
      __int16 v218 = 2114;
      id v219 = v156;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v150, OS_SIGNPOST_EVENT, v151, "SessionError", " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ", buf, 0x16u);

      id v19 = v155;
      id v13 = v154;
      id v6 = v199;
    }
LABEL_121:

    long long v157 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
    {
      if (v5) {
        id v183 = objc_getProperty(v5, v158, 56, 1);
      }
      else {
        id v183 = 0;
      }
      id v184 = v183;
      uint64_t v185 = [v13 URL];
      *(_DWORD *)long long buf = 138412546;
      id v217 = v184;
      __int16 v218 = 2114;
      id v219 = v185;
      _os_log_error_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_ERROR, "[%@] Error creating session for URL: %{public}@", buf, 0x16u);
    }
    long long v160 = +[NSError errorWithDomain:@"AssetErrorDomain" code:4 userInfo:0];
    if (v5) {
      objc_setProperty_atomic(v5, v159, v160, 40);
    }

    sub_100397208(a1, v5);
    goto LABEL_134;
  }
  if (*((void *)v5 + 2) != 3)
  {
    id v10 = objc_getProperty(v5, v7, 96, 1);
    goto LABEL_8;
  }
  id v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v49 = objc_getProperty(v5, v9, 56, 1);
    *(_DWORD *)long long buf = 138412290;
    id v217 = v49;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Stopping early because request has been canceled", buf, 0xCu);
  }
  sub_100397208(a1, v5);
LABEL_135:
}

void sub_10039ADAC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 URL];
  if (v4) {
    [v4[1] setObject:v5 forKeyedSubscript:@"assetURL"];
  }

  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 32, 1);
  }
  id v8 = Property;
  if (v4) {
    [v4[1] setObject:v8 forKeyedSubscript:@"bundleIdentifier"];
  }

  sub_10025B7C4(*(id **)(a1 + 48));
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v4) {
    [v4[1] setObject:v9 forKeyedSubscript:@"variantProduct"];
  }
}

id sub_10039AE8C(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  id v3 = v2;
  id v4 = *(void **)(a1 + 32);
  if (v4)
  {
    os_signpost_id_t v5 = v4[16];
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
    {
      id v7 = objc_getProperty(v4, v6, 56, 1);
      id v8 = [*(id *)(a1 + 40) URL];
      int v15 = 138543618;
      id v16 = v7;
      __int16 v17 = 2114;
      uint64_t v18 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "TaskStarted", " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ", (uint8_t *)&v15, 0x16u);
    }
  }

  id v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v10, 56, 1);
    }
    id v12 = Property;
    id v13 = *(void **)(a1 + 48);
    int v15 = 138412546;
    id v16 = v12;
    __int16 v17 = 2114;
    uint64_t v18 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Started task: %{public}@", (uint8_t *)&v15, 0x16u);
  }
  return [*(id *)(a1 + 48) resume];
}

id sub_10039B090()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10039B134;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B10B0 != -1) {
    dispatch_once(&qword_1005B10B0, block);
  }
  unsigned int v0 = (void *)qword_1005B10B8;
  return v0;
}

void sub_10039B134()
{
  objc_opt_class();
  uint64_t v0 = objc_opt_new();
  id v1 = (void *)qword_1005B10B8;
  qword_1005B10B8 = v0;
}

uint64_t sub_10039B170()
{
  self;
  if (!+[AMSRestrictions onDeviceDiagnosticsAllowed])return 0; {
  uint64_t v0 = sub_1003DA6D4();
  }
  unsigned __int8 v1 = [v0 isHRNMode];

  if (v1) {
    return 0;
  }
  return os_variant_has_internal_content();
}

void sub_10039B1EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [[UpdateMetricsEvent alloc] initWithTopic:@"xp_amp_app_install"];
    if ([v3 count])
    {
      id v34 = (double *)v4;
      id v35 = v3;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id obj = v3;
      id v5 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v37 = *(void *)v39;
        id v7 = (void *)ASDUpdateItemMetricsDiscoveryDate;
        uint64_t v8 = ASDUpdateItemMetricsAvailableDate;
        id v9 = (void *)ASDUpdateItemMetricsPurchaseStartDate;
        id v10 = (void *)ASDUpdateItemMetricsDownloadStartDate;
        uint64_t v11 = ASDUpdateItemMetricsPurchaseCompleteDate;
        id v12 = (void *)ASDUpdateItemMetricsInstallStart;
        double v13 = 0.0;
        double v14 = 0.0;
        double v15 = 0.0;
        double v16 = 0.0;
        uint64_t v17 = ASDUpdateItemMetricsDownloadCompleteDate;
        do
        {
          for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v39 != v37) {
              objc_enumerationMutation(obj);
            }
            id v19 = *(void **)(*((void *)&v38 + 1) + 8 * i);
            double v16 = v16 + sub_10039B5D0(v7, v8, v19);
            double v15 = v15 + sub_10039B5D0(v9, (uint64_t)v7, v19);
            double v14 = v14 + sub_10039B5D0(v10, v11, v19);
            double v13 = v13 + sub_10039B5D0(v12, v17, v19);
          }
          id v6 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
        }
        while (v6);
      }
      else
      {
        double v13 = 0.0;
        double v14 = 0.0;
        double v15 = 0.0;
        double v16 = 0.0;
      }

      double v20 = v16 / (double)(unint64_t)[obj count];
      double v21 = v15 / (double)(unint64_t)[obj count];
      double v22 = v14 / (double)(unint64_t)[obj count];
      double v23 = v13 / (double)(unint64_t)[obj count];
      id v4 = (UpdateMetricsEvent *)v34;
      sub_1002A8448(v34, v20);
      sub_1002A858C(v34, v21);
      sub_1002A84B4(v34, v22);
      sub_1002A8520(v34, v23);
      id v3 = v35;
    }
    id v24 = objc_opt_new();
    id v25 = [v24 metrics];
    if ([v25 count])
    {
      [v24 averagePollTime];
      if (v26 > 0.0) {
        sub_1002A8330((double *)v4->AMSMetricsEvent_opaque, v26);
      }
    }
    id v27 = [v24 lastAutoPollDate];
    if (v27) {
      sub_1002A839C((id *)v4, v27);
    }
    id v28 = v4;
    if (v28)
    {
      id v29 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        id v32 = objc_opt_class();
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v32;
        __int16 v44 = 2112;
        int v45 = v28;
        id v33 = v32;
        _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[%{public}@] Inserting metric event: %@", buf, 0x16u);
      }
      int v30 = [[_TtC9appstored10ASEMetrics alloc] initWithType:0];
      *(void *)long long buf = v28;
      id v31 = +[NSArray arrayWithObjects:buf count:1];
      [(ASEMetrics *)v30 enqueueEvents:v31 flushEvents:1 completionHandler:&stru_10052AE90];
    }
  }
}

double sub_10039B5D0(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  id v7 = sub_10020B8E4(v5, a2);
  uint64_t v8 = sub_10020B8E4(v5, (uint64_t)v6);

  double v9 = 0.0;
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector())
  {
    [v8 doubleValue];
    double v11 = v10;
    [v7 doubleValue];
    double v9 = v11 - v12;
  }

  return v9;
}

id *sub_10039B6E4(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)FamilyInfoLookupTask;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 3, a2);
    }
  }

  return a1;
}

id sub_10039B764(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v4 = +[ACAccountStore ams_sharedAccountStore];
  id v5 = objc_msgSend(v4, "ams_activeiTunesAccount");

  if (v5)
  {
    id v6 = sub_10039B808(v3, v5, 1, v2);
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id *sub_10039B808(uint64_t a1, void *a2, char a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  self;
  uint64_t v8 = objc_msgSend(v6, "ams_DSID");

  if (!v8)
  {
    double v15 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543618;
      id v39 = (id)objc_opt_class();
      __int16 v40 = 2114;
      id v41 = v7;
      id v16 = v39;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Unable to load cached family info because the account has no DSID. ", buf, 0x16u);
    }
    goto LABEL_22;
  }
  id v9 = v7;
  self;
  double v10 = sub_10039CAE0();
  if (!v10)
  {
    double v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      id v39 = (id)objc_opt_class();
      __int16 v40 = 2114;
      id v41 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Unable to generate the path in order to load cached FamilyInfo", buf, 0x16u);
    }
    goto LABEL_13;
  }
  double v11 = [objc_alloc((Class)NSData) initWithContentsOfFile:v10];
  if (!v11)
  {
LABEL_13:
    double v15 = 0;
    goto LABEL_19;
  }
  double v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    id v39 = (id)objc_opt_class();
    __int16 v40 = 2114;
    id v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Load cached FamilyInfo", buf, 0x16u);
  }

  id v37 = 0;
  double v13 = +[NSPropertyListSerialization propertyListWithData:v11 options:0 format:0 error:&v37];
  id v14 = v37;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

LABEL_15:
    uint64_t v17 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      unint64_t v36 = objc_opt_class();
      *(_DWORD *)long long buf = 138543874;
      id v39 = v36;
      __int16 v40 = 2114;
      id v41 = v9;
      __int16 v42 = 2114;
      id v43 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Failed to deserialize the cached FamilyInfo. Error: %{public}@", buf, 0x20u);
    }

    double v15 = 0;
    goto LABEL_18;
  }
  double v15 = v13;

  if (!v15) {
    goto LABEL_15;
  }
LABEL_18:

LABEL_19:
  if (!v15)
  {
LABEL_22:
    double v20 = 0;
    goto LABEL_40;
  }
  uint64_t v18 = [v15 objectForKeyedSubscript:@"account"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v19 = v18;
  }
  else {
    id v19 = 0;
  }

  double v21 = objc_msgSend(v6, "ams_DSID");
  unsigned __int8 v22 = [v19 isEqualToNumber:v21];

  if ((v22 & 1) == 0)
  {
    id v25 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      double v26 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v39 = v26;
      __int16 v40 = 2114;
      id v41 = v9;
      id v27 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Our cached family info isn't for the given account.", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if ((a3 & 1) == 0)
  {
    id v28 = [v15 objectForKeyedSubscript:@"timestamp"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v25 = v28;

      if (v25)
      {
        id v29 = +[NSDate date];
        [v29 timeIntervalSinceDate:v25];
        double v31 = v30;

        if (v31 > 2.22044605e-16 && v31 < 604800.0)
        {

          goto LABEL_26;
        }
      }
    }
    else
    {

      id v25 = 0;
    }
    id v32 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v39 = v33;
      __int16 v40 = 2114;
      id v41 = v9;
      id v34 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] We have cached family info for the account, but it's too old to return.", buf, 0x16u);
    }
LABEL_38:

    double v20 = 0;
    goto LABEL_39;
  }
LABEL_26:
  double v23 = [FamilyInfoLookupResult alloc];
  id v24 = [v15 objectForKeyedSubscript:@"circle"];
  double v20 = sub_1003547F0((id *)&v23->super.isa, v24, 1);

LABEL_39:
LABEL_40:

  return v20;
}

void *sub_10039BDA8(void *val)
{
  unsigned __int8 v1 = val;
  if (val)
  {
    if (!val[2])
    {
      id v2 = objc_alloc_init(_TtC9appstored6LogKey);
      uint64_t v3 = (void *)v1[2];
      v1[2] = v2;
    }
    objc_initWeak(&location, v1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10039BEB4;
    v5[3] = &unk_10052AEB8;
    objc_copyWeak(&v6, &location);
    unsigned __int8 v1 = [v1 performTaskWithBlock:v5];
    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }
  return v1;
}

void sub_10039BE98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id *sub_10039BEB4(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = objc_opt_class();
    if (WeakRetained) {
      id v6 = (void *)*((void *)WeakRetained + 2);
    }
    else {
      id v6 = 0;
    }
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v104 = 2112;
    SEL v105 = v6;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Performing LoadFamilyCircleTask", buf, 0x16u);
  }
  uint64_t v8 = +[ACAccountStore ams_sharedAccountStore];
  id v9 = objc_msgSend(v8, "ams_activeiTunesAccount");

  if (v9)
  {
    id v93 = a2;
    id v98 = 0;
    id v10 = v9;
    __int16 v97 = v9;
    if (WeakRetained)
    {
      id v11 = *((id *)WeakRetained + 3);
      double v12 = [v11 URLForKey:@"family-info"];
      v102[0] = 0;
      double v13 = [v12 valueWithError:v102];
      id v14 = v102[0];

      if (v13)
      {
        id v15 = objc_alloc_init((Class)AMSURLRequestEncoder);
        [v15 setAccount:v10];
        [v15 setBag:*((void *)WeakRetained + 3)];
        if (*((unsigned char *)WeakRetained + 8)) {
          [v15 setDialogOptions:1];
        }
        id v16 = [*((id *)WeakRetained + 2) description];
        [v15 setLogUUID:v16];

        uint64_t v17 = [v15 requestWithMethod:2 URL:v13 parameters:0];
        *(void *)long long buf = 0;
        uint64_t v18 = [v17 resultWithError:buf];
        id v19 = *(id *)buf;

        if (v19)
        {
          double v20 = 0;
          id v98 = v19;
        }
        else
        {
          id v95 = v10;
          id v24 = objc_alloc_init((Class)AMSPromise);
          id v25 = +[AMSURLSession defaultSession];
          double v26 = [v24 completionHandlerAdapter];
          id v27 = [v25 dataTaskWithRequest:v18 completionHandler:v26];

          [v27 resume];
          double v20 = [v24 resultWithError:&v98];

          id v10 = v95;
        }

        id v9 = v97;
      }
      else
      {
        double v23 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v83 = objc_opt_class();
          id v84 = (void *)*((void *)WeakRetained + 2);
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v83;
          __int16 v104 = 2114;
          SEL v105 = v84;
          __int16 v106 = 2114;
          id v107 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] AMSLoadFamilyCircleTask failed because the bag didn't give us the URL. error = %{public}@", buf, 0x20u);
        }

        ASDErrorWithUnderlyingError();
        double v20 = 0;
        id v98 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      double v20 = 0;
    }
    id v28 = v10;

    id v96 = v98;
    id v29 = v20;
    self;
    if (!v29) {
      goto LABEL_36;
    }
    double v30 = [v29 object];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v31 = v30;

      if (v31)
      {
        id v32 = sub_1003547F0((id *)[FamilyInfoLookupResult alloc], v31, 0);
        goto LABEL_28;
      }
    }
    else
    {

      id v31 = 0;
    }
    id v32 = 0;
LABEL_28:

    if (v32)
    {
      unsigned __int8 v22 = v32;
      id v33 = v10;
      if (!WeakRetained)
      {
LABEL_68:

        id v51 = v96;
LABEL_69:

        goto LABEL_70;
      }
      id v34 = sub_10039CAE0();
      if (!v34)
      {
        id v41 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v68 = objc_opt_class();
          __int16 v69 = (void *)*((void *)WeakRetained + 2);
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v68;
          __int16 v104 = 2114;
          SEL v105 = v69;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Unable to generate the path in order to cache a family info lookup.", buf, 0x16u);
        }
        goto LABEL_67;
      }
      id v35 = objc_msgSend(v33, "ams_DSID");

      if (!v35)
      {
        id v41 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v70 = objc_opt_class();
          id v71 = (void *)*((void *)WeakRetained + 2);
          id v72 = v71;
          [v33 hashedDescription];
          CFStringRef v74 = v73 = v33;
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v70;
          __int16 v104 = 2114;
          SEL v105 = v71;
          __int16 v106 = 2114;
          id v107 = v74;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Unable to cache a family info lookup because the given account has no DSID. account = %{public}@", buf, 0x20u);

          id v33 = v73;
        }
        goto LABEL_67;
      }
      v101[0] = @"account";
      id v94 = v33;
      unint64_t v36 = objc_msgSend(v33, "ams_DSID");
      v102[0] = v36;
      v101[1] = @"circle";
      id v37 = sub_100354C3C(v22);
      v102[1] = v37;
      v101[2] = @"timestamp";
      long long v38 = +[NSDate date];
      v102[2] = v38;
      id v39 = +[NSDictionary dictionaryWithObjects:v102 forKeys:v101 count:3];
      id v100 = 0;
      __int16 v40 = +[NSPropertyListSerialization dataWithPropertyList:v39 format:200 options:0 error:&v100];
      id v41 = v100;

      __int16 v42 = v40;
      if (!v40)
      {
        char v46 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          uint64_t v75 = objc_opt_class();
          id v76 = (void *)*((void *)WeakRetained + 2);
          id v77 = v76;
          uint64_t v78 = AMSLogableError();
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v75;
          __int16 v104 = 2114;
          SEL v105 = v76;
          __int16 v106 = 2114;
          id v107 = v78;
          _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Failed to serialize the family info. error = %{public}@", buf, 0x20u);

          __int16 v42 = 0;
        }
        goto LABEL_66;
      }
      id v99 = v41;
      unsigned __int8 v43 = [v40 writeToFile:v34 options:1 error:&v99];
      __int16 v44 = v99;

      int v45 = ASDLogHandleForCategory();
      char v46 = v45;
      if (v43)
      {
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v47 = objc_opt_class();
          int v48 = (void *)*((void *)WeakRetained + 2);
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v47;
          __int16 v104 = 2114;
          SEL v105 = v48;
          __int16 v106 = 2114;
          id v107 = v34;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Wrote the serialized family info to: %{public}@", buf, 0x20u);
        }
      }
      else if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        uint64_t v87 = objc_opt_class();
        SEL v88 = (void *)*((void *)WeakRetained + 2);
        id v89 = v42;
        id v90 = v88;
        AMSLogableError();
        id v91 = v92 = v44;
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v87;
        __int16 v104 = 2114;
        SEL v105 = v88;
        __int16 v106 = 2114;
        id v107 = v91;
        _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Failed to write the serialized family info to disk. error = %{public}@", buf, 0x20u);

        __int16 v42 = v89;
        id v41 = v92;
        goto LABEL_66;
      }
      id v41 = v44;
LABEL_66:

      id v33 = v94;
LABEL_67:

      id v9 = v97;
      goto LABEL_68;
    }
LABEL_36:
    id v49 = ASDLogHandleForCategory();
    BOOL v50 = os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
    if (v29)
    {
      id v52 = v93;
      id v51 = v96;
      if (!v50) {
        goto LABEL_42;
      }
      id v53 = objc_opt_class();
      if (WeakRetained) {
        id v54 = (void *)*((void *)WeakRetained + 2);
      }
      else {
        id v54 = 0;
      }
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v53;
      __int16 v104 = 2112;
      SEL v105 = v54;
      id v55 = v53;
      uint64_t v56 = "[%{public}@] [%@] Failed to load the family info because we were unable to process the server response.";
      id v57 = v49;
      uint32_t v58 = 22;
    }
    else
    {
      id v52 = v93;
      id v51 = v96;
      if (!v50) {
        goto LABEL_42;
      }
      id v85 = objc_opt_class();
      if (WeakRetained) {
        unsigned int v86 = (void *)*((void *)WeakRetained + 2);
      }
      else {
        unsigned int v86 = 0;
      }
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v85;
      __int16 v104 = 2112;
      SEL v105 = v86;
      __int16 v106 = 2114;
      id v107 = v96;
      id v55 = v85;
      uint64_t v56 = "[%{public}@] [%@] Failed to load the family info because the network call failed. error = %{public}@";
      id v57 = v49;
      uint32_t v58 = 32;
    }
    _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, v56, buf, v58);

LABEL_42:
    if (WeakRetained) {
      id v59 = (void *)*((void *)WeakRetained + 2);
    }
    else {
      id v59 = 0;
    }
    sub_10039B808((uint64_t)FamilyInfoLookupTask, v28, 0, v59);
    unsigned __int8 v22 = (id *)objc_claimAutoreleasedReturnValue();
    double v60 = ASDLogHandleForCategory();
    BOOL v61 = os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      if (v61)
      {
        double v62 = objc_opt_class();
        if (WeakRetained) {
          long long v63 = (void *)*((void *)WeakRetained + 2);
        }
        else {
          long long v63 = 0;
        }
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v62;
        __int16 v104 = 2112;
        SEL v105 = v63;
        id v64 = v62;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Returning cached family info.", buf, 0x16u);
      }
    }
    else
    {
      if (v61)
      {
        id v65 = objc_opt_class();
        if (WeakRetained) {
          id v66 = (void *)*((void *)WeakRetained + 2);
        }
        else {
          id v66 = 0;
        }
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v65;
        __int16 v104 = 2112;
        SEL v105 = v66;
        id v67 = v65;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] We failed to load the family info, and we have no cached family info to return.", buf, 0x16u);
      }
      if (v52)
      {
        ASDErrorWithUnderlyingError();
        unsigned __int8 v22 = 0;
        void *v52 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        unsigned __int8 v22 = 0;
      }
    }
    goto LABEL_69;
  }
  double v21 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    uint64_t v80 = objc_opt_class();
    if (WeakRetained) {
      id v81 = (void *)*((void *)WeakRetained + 2);
    }
    else {
      id v81 = 0;
    }
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v80;
    __int16 v104 = 2114;
    SEL v105 = v81;
    id v82 = v80;
    _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] AMSLoadFamilyCircleTask failed because there's no active account.", buf, 0x16u);
  }
  if (a2)
  {
    ASDErrorWithTitleAndMessage();
    unsigned __int8 v22 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    unsigned __int8 v22 = 0;
  }
LABEL_70:

  return v22;
}

id sub_10039CAE0()
{
  self;
  uint64_t v0 = sub_100013350();
  unsigned __int8 v1 = [v0 stringByAppendingPathComponent:@"JFamilyCircle.plist"];

  return v1;
}

id sub_10039CB94(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)ODRDiagnosticsClient;
    a1 = objc_msgSendSuper2(&v11, "init");
    if (a1)
    {
      id v4 = objc_alloc_init((Class)NSLock);
      id v5 = (void *)qword_1005B10D0;
      qword_1005B10D0 = (uint64_t)v4;

      id v6 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ODRDiagnosticsProtocol];
      [v3 setExportedInterface:v6];

      id v7 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ODRDiagnosticsProtocol];
      [v3 setRemoteObjectInterface:v7];

      [v3 setExportedObject:a1];
      [v3 resume];
      uint64_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id v10 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Created the diagnostics client.", v10, 2u);
      }
    }
  }

  return a1;
}

void sub_10039CE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10039CE38(uint64_t a1, void *a2)
{
  id v3 = sub_1001F8948(a2, *(void **)(a1 + 32));
  id v4 = v3;
  if (v3)
  {
    v14[0] = @"applicationBundleID";
    id v5 = sub_1002AEAA8(v3);
    v15[0] = v5;
    v14[1] = @"isBeta";
    id v6 = +[NSNumber numberWithBool:sub_1003BAA8C(*(void *)(a1 + 32))];
    v15[1] = v6;
    void v14[2] = @"isStoreBased";
    id v7 = +[NSNumber numberWithBool:sub_10026E7EC(v4, @"is_store_based")];
    v15[2] = v7;
    v14[3] = @"version";
    uint64_t v8 = sub_1002AEC20(v4);
    v15[3] = v8;
    void v14[4] = @"thinningVariant";
    id v9 = sub_1002AEBE8(v4);
    void v15[4] = v9;
    void v14[5] = @"lastModificationDate";
    id v10 = [v4 valueForProperty:@"last_modification_date"];
    v15[5] = v10;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:6];
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    double v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
}

void sub_10039D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10039D124(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1001F79D0(a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10039DAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_10039DB34(uint64_t *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  uint64_t v5 = sub_1001F7D38(v4, v3);
  uint64_t v6 = *(void *)(a1[5] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = sub_1001F9084(v4, a1[4]);

  uint64_t v9 = *(void *)(a1[6] + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

id sub_10039DBC0(id a1, ODRTag *a2)
{
  return sub_1002EC448(a2);
}

void sub_10039DF7C(_Unwind_Exception *a1)
{
}

void sub_10039E408(void *a1)
{
}

void sub_10039E7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10039E80C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (!WeakRetained)
  {
    id Property = 0;
    uint64_t v7 = *(void *)(a1 + 32);
    goto LABEL_5;
  }
  id v5 = objc_getProperty(WeakRetained, v3, 48, 1);
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v5)
  {
    id Property = objc_getProperty(v4, v6, 32, 1);
LABEL_5:
    id v12 = Property;
    (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0, v12);

    uint64_t v8 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = v5;
  id v13 = 0;
  uint64_t v9 = (void *)sub_1002AEF4C(v5, (uint64_t)&v13);
  id v10 = v13;
  (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v9, v10);

LABEL_6:
}

void sub_10039EB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10039EB60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v3, 32, 1);
  }
  id v5 = WeakRetained;
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void sub_10039ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10039ED7C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1001F9118(a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10039EF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10039EF64(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1001F8DA0(a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id *sub_10039F748(id *a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_9;
  }
  v20.receiver = a1;
  v20.super_class = (Class)MediaAppAttributes;
  a1 = (id *)objc_msgSendSuper2(&v20, "init");
  if (a1)
  {
    uint64_t v4 = [v3 objectForKeyedSubscript:@"name"];
    id v5 = [v4 copy];
    id v6 = a1[3];
    a1[3] = v5;

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v7 = [v3 objectForKeyedSubscript:@"artistName"];
      id v8 = [v7 copy];
      id v9 = a1[4];
      a1[4] = v8;

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v10 = [v3 objectForKeyedSubscript:@"watchBundleId"];
        id v11 = [v10 copy];
        id v12 = a1[5];
        a1[5] = v11;

        id v13 = [v3 objectForKeyedSubscript:@"platformAttributes"];
        id v14 = [v13 copy];
        id v15 = a1[2];
        a1[2] = v14;

        if (!a1[2] || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          id v16 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(a1[2], "count"));
          id v17 = a1[1];
          a1[1] = v16;

          goto LABEL_8;
        }
      }
    }
LABEL_9:
    uint64_t v18 = 0;
    goto LABEL_10;
  }
LABEL_8:
  a1 = a1;
  uint64_t v18 = a1;
LABEL_10:

  return v18;
}

id *sub_10039F908(id *a1)
{
  unsigned __int8 v1 = a1;
  if (a1)
  {
    uint64_t v2 = @"ios";
    id v3 = [v1[1] objectForKeyedSubscript:@"ios"];
    if (v3)
    {
      unsigned __int8 v1 = v3;
    }
    else
    {
      uint64_t v4 = [v1[2] objectForKeyedSubscript:@"ios"];
      if (v4)
      {
        id v5 = sub_100230150([MediaAppPlatformAttributes alloc], v4);
        if (v5) {
          [v1[1] setObject:v5 forKeyedSubscript:@"ios"];
        }
        unsigned __int8 v1 = v5;
      }
      else
      {
        unsigned __int8 v1 = 0;
      }
    }
  }
  return v1;
}

void sub_1003A0048(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 hasMIDBasedSINF]) {
    [*(id *)(a1 + 32) addObject:v3];
  }
}

id sub_1003A0168()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003A020C;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B10E0 != -1) {
    dispatch_once(&qword_1005B10E0, block);
  }
  uint64_t v0 = (void *)qword_1005B10D8;
  return v0;
}

void sub_1003A020C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B10D8;
  qword_1005B10D8 = (uint64_t)v1;
}

void sub_1003A0244(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    id v6 = a4;
    id v5 = sub_100213454();
    [v5 checkStoreQueue:a2 != 1];

    v6[2](v6, 1, 0);
  }
}

void sub_1003A02D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a1)
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138543362;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Skipping non supported claim user apps complete for clientID: %{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1003A0388(uint64_t a1, void *a2, void *a3, unsigned int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    id v12 = dispatch_get_global_queue(a4, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A0490;
    block[3] = &unk_10052AF38;
    id v14 = v9;
    id v15 = v10;
    unsigned int v18 = a4;
    uint64_t v16 = a1;
    id v17 = v11;
    dispatch_async(v12, block);
  }
}

void sub_1003A0490(uint64_t a1)
{
  unsigned __int8 v22 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.ManagedApplicationTask"];
  uint64_t v2 = sub_1002F3C98((id *)[ManagedApplicationTask alloc], *(void **)(a1 + 32), *(void **)(a1 + 40));
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = objc_opt_class();
    id v19 = v4;
    if (v2) {
      id Property = objc_getProperty(v2, v5, 120, 1);
    }
    else {
      id Property = 0;
    }
    id v7 = Property;
    uint64_t v20 = *(void *)(a1 + 40);
    double v21 = sub_1002F3678((unint64_t)[*(id *)(a1 + 32) requestType]);
    id v8 = [*(id *)(a1 + 32) itemIdentifier];
    id v9 = [*(id *)(a1 + 32) bundleIdentifier];
    unsigned int v10 = [*(id *)(a1 + 32) skipDownloads];
    id v11 = sub_10032F778(*(unsigned int *)(a1 + 64));
    int v12 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 138545410;
    id v29 = v4;
    __int16 v30 = 2112;
    id v31 = v7;
    __int16 v32 = 2114;
    uint64_t v33 = v20;
    __int16 v34 = 2114;
    id v35 = v21;
    __int16 v36 = 2114;
    id v37 = v8;
    __int16 v38 = 2114;
    id v39 = v9;
    __int16 v40 = 1024;
    unsigned int v41 = v10;
    __int16 v42 = 2114;
    unsigned __int8 v43 = v11;
    __int16 v44 = 1024;
    int v45 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Start for clientID: %{public}@ with requestType: %{public}@ itemID: %{public}@ bundleID: %{public}@ skipDownloads: %{BOOL}d qoS: %{public}@ (0x%x)", buf, 0x54u);
  }
  objc_initWeak((id *)buf, v2);
  newValue[0] = _NSConcreteStackBlock;
  newValue[1] = 3221225472;
  newValue[2] = sub_1003A080C;
  newValue[3] = &unk_10052AF10;
  objc_copyWeak(&v26, (id *)buf);
  id v25 = *(id *)(a1 + 56);
  id v24 = *(id *)(a1 + 40);
  if (v2) {
    objc_setProperty_atomic_copy(v2, v13, newValue, 152);
  }
  id v14 = *(id **)(a1 + 48);
  if (v14)
  {
    id v15 = (id *)v14[3];
    if (!v15)
    {
      uint64_t v16 = objc_alloc_init(TaskQueue);
      id v17 = v14[3];
      v14[3] = v16;

      id v15 = (id *)v14[3];
      if (v15)
      {
        [v15[1] setName:@"com.apple.appstored.StoreQueueManager.tasks"];
        id v15 = (id *)v14[3];
      }
    }
    id v14 = v15;
  }
  id v27 = v2;
  unsigned int v18 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1, v19);
  if (v14) {
    [v14[1] addOperations:v18 waitUntilFinished:1];
  }

  objc_destroyWeak(&v26);
  objc_destroyWeak((id *)buf);
}

void sub_1003A07E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003A080C(uint64_t a1, int a2, void *a3, unint64_t a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (*(void *)(a1 + 40))
  {
    int v12 = ASDLogHandleForCategory();
    id v13 = v12;
    if (v10)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = objc_opt_class();
        id v22 = v20;
        if (WeakRetained) {
          id Property = objc_getProperty(WeakRetained, v21, 120, 1);
        }
        else {
          id Property = 0;
        }
        id v24 = Property;
        uint64_t v25 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138544130;
        id v29 = v20;
        __int16 v30 = 2114;
        id v31 = v24;
        __int16 v32 = 2114;
        uint64_t v33 = v25;
        __int16 v34 = 2114;
        id v35 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Complete for clientID: %{public}@ with error: %{public}@", buf, 0x2Au);
      }
      id v14 = ASDErrorWithSafeUserInfo();
    }
    else
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = objc_opt_class();
        id v27 = v26;
        if (WeakRetained) {
          id v16 = objc_getProperty(WeakRetained, v15, 120, 1);
        }
        else {
          id v16 = 0;
        }
        id v17 = v16;
        uint64_t v18 = *(void *)(a1 + 32);
        id v19 = sub_1002F36DC(a4);
        *(_DWORD *)long long buf = 138544386;
        id v29 = v26;
        __int16 v30 = 2114;
        id v31 = v17;
        __int16 v32 = 2114;
        uint64_t v33 = v18;
        __int16 v34 = 2114;
        id v35 = v19;
        __int16 v36 = 1024;
        int v37 = a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Complete for clientID: %{public}@ with changeType: %{public}@  success: %{BOOL}d", buf, 0x30u);
      }
      id v14 = 0;
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void *sub_1003A0AEC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)StoreSinfArray;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

id sub_1003A0B6C()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003A0C10;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B10F8 != -1) {
    dispatch_once(&qword_1005B10F8, block);
  }
  uint64_t v0 = (void *)qword_1005B10F0;
  return v0;
}

void sub_1003A0C10()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1005B10F0;
  qword_1005B10F0 = (uint64_t)v0;
}

id sub_1003A0D4C(id result)
{
  if (result)
  {
    id v1 = +[UMUserManager sharedManager];
    id v2 = [v1 isMultiUser];

    return v2;
  }
  return result;
}

void sub_1003A0D94(uint64_t a1)
{
  if (!a1) {
    return;
  }
  ASDSetIsDaemon();
  sub_1002C946C((uint64_t)Storage, @"com.apple.appstored");
  id v2 = objc_alloc_init((Class)ASDLogFileOptions);
  [v2 setLogFileBaseName:@"appstored"];
  int v3 = MGGetBoolAnswer();
  id v4 = [(id)CPSharedResourcesDirectory() stringByAppendingPathComponent:@"Library"];
  id v5 = [v4 stringByAppendingPathComponent:@"Logs"];

  if (v3)
  {
    int v6 = [v5 stringByAppendingPathComponent:@"com.apple.appstored"];
    [v2 setLogDirectoryPath:v6];
  }
  else
  {
    int v6 = [v5 stringByAppendingPathComponent:@"CrashReporter"];
    objc_super v7 = [v6 stringByAppendingPathComponent:@"com.apple.appstored"];
    [v2 setLogDirectoryPath:v7];
  }
  ASDDebugSetFileLoggingOptions();

  id v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v170 = 136315394;
    long long v171 = "Nov 15 2024";
    __int16 v172 = 2080;
    id v173 = "18:25:31";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting appstored (Built: %s %s)", (uint8_t *)&v170, 0x16u);
  }

  id v9 = sub_1003DA6D4();
  unsigned __int8 v10 = [v9 isHRNMode];

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = sub_10030B11C();
    int v12 = (void *)v11;
    if (v11) {
      sub_10030B39C(v11, &stru_100527BA8);
    }
  }
  BOOL v13 = sub_100309A54();
  id v14 = ASDLogHandleForCategory();
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v15)
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[Daemon] Migrations needed", (uint8_t *)&v170, 2u);
    }

    id v16 = sub_1003091C0();
  }
  else
  {
    if (v15)
    {
      sub_1003F4884();
      id v17 = (char *)objc_claimAutoreleasedReturnValue();
      int v170 = 138543362;
      long long v171 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[Daemon] No migration required for build: %{public}@", (uint8_t *)&v170, 0xCu);
    }
  }
  +[AMSEphemeralDefaults setHARLoggingItemLimit:200];
  +[AMSMetrics setFlushDelayEnabled:1];
  if (sub_1003F1E7C((uint64_t)AppDefaultsManager, @"EnablePurchaseAccountFallback", 0))+[AMSEphemeralDefaults setPurchaseAccountFallback:1]; {
  uint64_t v18 = sub_1003930B8();
  }
  sub_100393204(v18);

  id v19 = sub_1003DA6D4();
  unsigned __int8 v20 = [v19 isHRNMode];

  if (v20)
  {
    sub_1003A24CC(a1);
  }
  else
  {
    notify_register_dispatch("com.apple.adid.midchangedV1.5", (int *)(a1 + 8), *(dispatch_queue_t *)(a1 + 16), &stru_10052AF98);
    notify_register_dispatch("com.apple.fairplayd.resync-fpkeybag", (int *)(a1 + 48), *(dispatch_queue_t *)(a1 + 16), &stru_10052AFB8);
    id v21 = sub_10020E0BC();
    id v22 = sub_100205A28();
    double v23 = sub_1003F9F04();
    unsigned __int8 v24 = sub_1003FA57C(v23, &byte_1005B10E8);
    uint64_t v25 = ASDLogHandleForCategory();
    id v26 = v25;
    if (v24)
    {
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v170) = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[Daemon] Registering for XPC Maintenance Task", (uint8_t *)&v170, 2u);
      }

      xpc_activity_register("com.apple.ondemandd.PeriodicLaunchServicesSyncActivity", XPC_ACTIVITY_CHECK_IN, &stru_10052B5F8);
      id v27 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v170) = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[Daemon] Registering for XPC Data Migration Event", (uint8_t *)&v170, 2u);
      }

      id v28 = +[NSNotificationCenter defaultCenter];
      [v28 addObserver:a1 selector:"_handleMigrationDidFinishNotification:" name:@"com.apple.datamigrator.migrationDidFinish" object:0];

      id v29 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v170) = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[Daemon] Initializing ODRManager", (uint8_t *)&v170, 2u);
      }

      id v30 = sub_10024E080();
      id v31 = sub_10040EBA8();
      sub_1004113C8((uint64_t)v31);

      uint64_t v32 = objc_opt_new();
      uint64_t v33 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v32;

      uint64_t v34 = sub_1003A25DC(@"com.apple.ondemandd.appreview", *(void **)(a1 + 64));
      id v35 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v34;

      uint64_t v36 = objc_opt_new();
      int v37 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v36;

      uint64_t v38 = sub_1003A25DC(@"com.apple.ondemandd.odrctl", *(void **)(a1 + 80));
      id v39 = *(void **)(a1 + 88);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v38;

      uint64_t v40 = objc_opt_new();
      unsigned int v41 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v40;

      uint64_t v42 = sub_1003A25DC(@"com.apple.ondemandd.devtools", *(void **)(a1 + 96));
      unsigned __int8 v43 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v42;

      sub_1003A24CC(a1);
    }
    else
    {
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v170) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[Daemon] Failed to initialize ODR library paths", (uint8_t *)&v170, 2u);
      }
    }
    sub_1003E75E8();
    id v44 = sub_100210D24();
    id v45 = sub_10031A334();
    id v46 = sub_100213454();
    uint64_t v47 = dispatch_get_global_queue(21, 0);
    dispatch_async(v47, &stru_10052B5D8);
  }
  notify_post("com.apple.appstored.daemon.launched");
  int v48 = objc_alloc_init(LaunchServicesObserver);
  id v49 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v48;

  BOOL v50 = objc_alloc_init(CleanupManager);
  sub_1002FA1B8((uint64_t)v50);
  id v51 = sub_1004065A4();
  id v52 = sub_100416F64();
  sub_100417100((uint64_t)v52);

  id v53 = sub_1002ED270();
  sub_1002EDDA0((uint64_t)v53, 8);

  id v54 = sub_1003177EC();
  id v55 = objc_alloc_init(JobManagerListener);
  uint64_t v56 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v55;

  uint64_t v57 = sub_1003A25DC(@"com.apple.appstored.xpc.jobmanager", *(void **)(a1 + 32));
  uint32_t v58 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v57;

  uint64_t v59 = objc_opt_new();
  double v60 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v59;

  uint64_t v61 = objc_opt_new();
  double v62 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v61;

  uint64_t v63 = sub_1003A25DC(@"com.apple.appstored.xpc.updates", *(void **)(a1 + 184));
  id v64 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v63;

  uint64_t v65 = objc_opt_new();
  id v66 = *(void **)(a1 + 200);
  *(void *)(a1 + 200) = v65;

  uint64_t v67 = sub_1003A25DC(@"com.apple.appstored.xpc.storequeue", *(void **)(a1 + 200));
  uint64_t v68 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v67;

  __int16 v69 = objc_opt_new();
  uint64_t v70 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v170) = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Diagnostic service", (uint8_t *)&v170, 2u);
  }

  id v71 = @"Diagnostic";
  if (v69)
  {
    sub_10026B5A0((uint64_t)v69, v71, 0);
    objc_setProperty_atomic_copy(v69, v72, &stru_10052AFF8, 16);
  }
  else
  {
  }
  id v73 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v170) = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Installation service", (uint8_t *)&v170, 2u);
  }

  id v74 = sub_10022889C();
  uint64_t v75 = @"Install";
  if (v69)
  {
    sub_10026BA7C((uint64_t)v69, v75, 0);
    objc_setProperty_atomic_copy(v69, v76, &stru_10052B038, 64);
  }
  else
  {
  }
  id v77 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v170) = 0;
    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Library service", (uint8_t *)&v170, 2u);
  }

  uint64_t v78 = @"Library";
  if (v69)
  {
    sub_10026BDA0((uint64_t)v69, v78, 0);
    objc_setProperty_atomic_copy(v69, v79, &stru_10052B078, 96);
  }
  else
  {
  }
  id v80 = sub_1000158D0();
  id v81 = sub_1003DA6D4();
  if (([v81 isHRNMode] & 1) == 0)
  {

    goto LABEL_54;
  }
  id v82 = sub_1003DA6D4();
  if ([v82 isHRNMode])
  {
    int has_internal_content = os_variant_has_internal_content();

    if (!has_internal_content) {
      goto LABEL_65;
    }
LABEL_54:
    id v84 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Purchase service", (uint8_t *)&v170, 2u);
    }

    id v85 = @"Purchase";
    if (v69)
    {
      sub_10026C1EC((uint64_t)v69, v85, 0);
      objc_setProperty_atomic_copy(v69, v86, &stru_10052B0B8, 144);
    }
    else
    {
    }
    uint64_t v87 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Purchase History service", (uint8_t *)&v170, 2u);
    }

    SEL v88 = @"PurchaseHistory";
    if (v69)
    {
      sub_10026C110((uint64_t)v69, v88, 0);
      objc_setProperty_atomic_copy(v69, v89, &stru_10052B0F8, 136);
    }
    else
    {
    }
    goto LABEL_65;
  }

LABEL_65:
  id v90 = sub_1003DA6D4();
  unsigned __int8 v91 = [v90 isHRNMode];

  if ((v91 & 1) == 0)
  {
    SEL v92 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Clip service", (uint8_t *)&v170, 2u);
    }

    id v93 = @"Clip";
    if (v69)
    {
      sub_10026B758((uint64_t)v69, v93, 0);
      objc_setProperty_atomic_copy(v69, v94, &stru_10052B138, 32);
    }
    else
    {
    }
    id v95 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting AppStore service", (uint8_t *)&v170, 2u);
    }

    id v96 = @"AppStore";
    if (v69)
    {
      sub_10026B4C4((uint64_t)v69, v96, 0);
      objc_setProperty_atomic_copy(v69, v97, &stru_10052B178, 8);
    }
    else
    {
    }
    id v98 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting FairPlay service", (uint8_t *)&v170, 2u);
    }

    id v99 = +[FairPlayService entitlement];
    if (v69)
    {
      sub_10026B910((uint64_t)v69, v99, 0);
      objc_setProperty_atomic_copy(v69, v100, &stru_10052B1B8, 48);
    }
    else
    {
    }
    id v101 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting IAP Info service", (uint8_t *)&v170, 2u);
    }

    id v102 = @"IAPHistory";
    id v103 = @"com.apple.appstored.iap-info";
    if (v69)
    {
      sub_10026B9A0((uint64_t)v69, v102, v103);
      objc_setProperty_atomic_copy(v69, v104, &stru_10052B1F8, 56);
    }
    else
    {
    }
    SEL v105 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Install Attribution service", (uint8_t *)&v170, 2u);
    }

    __int16 v106 = @"InstallAttribution";
    if (v69)
    {
      sub_10026BB58((uint64_t)v69, v106, 0);
      objc_setProperty_atomic_copy(v69, v107, &stru_10052B238, 72);
    }
    else
    {
    }
    id v108 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Install Web Attribution service", (uint8_t *)&v170, 2u);
    }

    id v109 = +[InstallWebAttributionService entitlement];
    if (v69)
    {
      sub_10026BC34((uint64_t)v69, v109, 0);
      objc_setProperty_atomic_copy(v69, v110, &stru_10052B278, 80);
    }
    else
    {
    }
    id v111 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting SKAN Interop service", (uint8_t *)&v170, 2u);
    }

    id v112 = +[SKANInteropProviderService entitlement];
    if (v69)
    {
      sub_10026BD10((uint64_t)v69, v112, 0);
      objc_setProperty_atomic_copy(v69, v113, &stru_10052B2B8, 88);
    }
    else
    {
    }
    id v114 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Metrics service", (uint8_t *)&v170, 2u);
    }

    id v115 = @"AppMetrics";
    if (v69)
    {
      sub_10026BE7C((uint64_t)v69, v115, 0);
      objc_setProperty_atomic_copy(v69, v116, &stru_10052B2F8, 104);
    }
    else
    {
    }
    id v117 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Repair service", (uint8_t *)&v170, 2u);
    }

    id v118 = @"Repair";
    if (v69)
    {
      sub_10026C2C8((uint64_t)v69, v118, 0);
      objc_setProperty_atomic_copy(v69, v119, &stru_10052B338, 152);
    }
    else
    {
    }
    id v120 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Restore service", (uint8_t *)&v170, 2u);
    }

    id v121 = @"Restore";
    if (v69)
    {
      sub_10026C3A4((uint64_t)v69, v121, 0);
      objc_setProperty_atomic_copy(v69, v122, &stru_10052B378, 160);
    }
    else
    {
    }
    id v123 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Skanner service", (uint8_t *)&v170, 2u);
    }

    id v124 = +[SkannerService entitlement];
    if (v69)
    {
      sub_10026C480((uint64_t)v69, v124, 0);
      objc_setProperty_atomic_copy(v69, v125, &stru_10052B3B8, 168);
    }
    else
    {
    }
    id v126 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting StoreKit External Notification service", (uint8_t *)&v170, 2u);
    }

    id v127 = @"StoreKitExternalNotification";
    if (v69)
    {
      sub_10026C55C((uint64_t)v69, v127, 0);
      objc_setProperty_atomic_copy(v69, v128, &stru_10052B3F8, 176);
    }
    else
    {
    }
    id v129 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Update service", (uint8_t *)&v170, 2u);
    }

    uint64_t v130 = @"Update";
    if (v69)
    {
      sub_10026C6C8((uint64_t)v69, v130, 0);
      objc_setProperty_atomic_copy(v69, v131, &stru_10052B438, 192);
    }
    else
    {
    }
    id v132 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Personalization service", (uint8_t *)&v170, 2u);
    }

    unsigned int v133 = @"Personalization";
    if (v69)
    {
      sub_10026C080((uint64_t)v69, v133, 0);
      objc_setProperty_atomic_copy(v69, v134, &stru_10052B478, 128);
    }
    else
    {
    }
    id v135 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Crossfire service", (uint8_t *)&v170, 2u);
    }

    id v136 = @"Crossfire";
    if (v69)
    {
      sub_10026B834((uint64_t)v69, v136, 0);
      objc_setProperty_atomic_copy(v69, v137, &stru_10052B4B8, 40);
    }
    else
    {
    }
    SEL v138 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Ocelot service", (uint8_t *)&v170, 2u);
    }

    id v139 = @"Ocelot";
    if (v69)
    {
      sub_10026BFA4((uint64_t)v69, v139, 0);
      objc_setProperty_atomic_copy(v69, v140, &stru_10052B4F8, 120);
    }
    else
    {
    }
    id v141 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting TestFlightFeedback service", (uint8_t *)&v170, 2u);
    }

    id v142 = @"TestFlightFeedback";
    if (v69)
    {
      sub_10026C638((uint64_t)v69, v142, 0);
      objc_setProperty_atomic_copy(v69, v143, &stru_10052B538, 184);
    }
    else
    {
    }
    SEL v144 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v170) = 0;
      _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "[Daemon] Starting Capabilities service", (uint8_t *)&v170, 2u);
    }

    id v145 = +[AppCapabilitiesService entitlement];
    if (v69)
    {
      sub_10026B67C((uint64_t)v69, v145, 0);
      objc_setProperty_atomic_copy(v69, v146, &stru_10052B578, 24);
    }
    else
    {
    }
  }
  id v147 = sub_10026F618((uint64_t)XPCServiceBroker, v69, ASDServiceDaemonMachPort);
  id v148 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = v147;

  dispatch_source_t v149 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_memorypressure, 0, 0x10uLL, 0);
  id v150 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v149;

  dispatch_source_set_event_handler(*(dispatch_source_t *)(a1 + 24), &stru_10052AF58);
  dispatch_resume(*(dispatch_object_t *)(a1 + 24));
  sub_1002318A4();
  os_signpost_id_t v151 = sub_1003DA6D4();
  unsigned __int8 v152 = [v151 isHRNMode];

  if ((v152 & 1) == 0)
  {
    id v153 = sub_1002705B4();
    sub_100275904((uint64_t)v153);

    id v154 = sub_1002B3410();
    id v155 = sub_10026AAF8();
    sub_10026AED8((uint64_t)v155);

    unsigned int v156 = sub_10001A264();
    sub_10000833C((uint64_t)v156, 5, 0, &stru_10052B598);

    long long v157 = sub_1000109AC();
    long long v158 = sub_100416894((uint64_t)XPCRequestToken, 1);
    sub_100371CDC((uint64_t)v157, v158, &stru_10052B5B8);

    id v159 = +[SubscriptionEntitlementsCoordinator sharedInstance];
    id v160 = sub_1003C44E0();
    id v161 = sub_100420D50();
    id v162 = sub_100013C18();
    id v163 = sub_1002E1CF4();
    uint64_t v164 = sub_10035E2CC();
    id v165 = (void *)v164;
    if (v164) {
      sub_10035E808(v164, 0, 0);
    }
  }
  id v166 = objc_alloc_init(SpotlightIndexMonitor);
  long long v167 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = v166;

  long long v168 = sub_1003791B0();
  sub_10037947C((uint64_t)v168);

  long long v169 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v170) = 0;
    _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEFAULT, "[Daemon] Startup complete", (uint8_t *)&v170, 2u);
  }
}

void sub_1003A24CC(uint64_t a1)
{
  uint64_t v2 = sub_1003F9F04();
  int v3 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v2;

  uint64_t v4 = sub_1003A25DC(@"com.apple.ondemandd.client", *(void **)(a1 + 112));
  id v5 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v4;

  uint64_t v6 = objc_opt_new();
  objc_super v7 = *(void **)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v6;

  uint64_t v8 = sub_1003A25DC(@"com.apple.ondemandd.launchservices", *(void **)(a1 + 128));
  id v9 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v8;
}

void sub_1003A256C(id a1)
{
  id v1 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "[Daemon] Received memory process limit warning", v2, 2u);
  }
}

id sub_1003A25DC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[Daemon] Creating listener for service name: %@", (uint8_t *)&v7, 0xCu);
  }
  id v5 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:v3];
  [v5 setDelegate:v4];
  [v5 resume];

  return v5;
}

void sub_1003A26D8(id a1, int a2)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Daemon] Update MID changed notification", v7, 2u);
  }

  id v3 = objc_alloc_init(RefreshMIDBasedAppSINFsTask);
  sub_1002B2A3C();
  id v4 = (id *)objc_claimAutoreleasedReturnValue();
  id v8 = v3;
  id v5 = +[NSArray arrayWithObjects:&v8 count:1];
  if (v4) {
    [v4[1] addOperations:v5 waitUntilFinished:1];
  }

  uint64_t v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Daemon] Update MID changed notification complete", v7, 2u);
  }
}

void sub_1003A2824(id a1, int a2)
{
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    BOOL v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Daemon][%@] FairPlay sync keybag notification", buf, 0xCu);
  }

  id v4 = objc_alloc_init(RefetchKeybag);
  uint64_t v6 = v4;
  if (v4)
  {
    objc_setProperty_atomic_copy(v4, v5, v2, 32);
    v6->_userInitiated = 0;
  }
  int v7 = sub_10023A6C4((id *)&v6->super.isa);
  id v11 = 0;
  unsigned int v8 = [v7 resultWithError:&v11];
  id v9 = v11;

  unsigned __int8 v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    BOOL v13 = v2;
    __int16 v14 = 1024;
    unsigned int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[Daemon][%@] Keybag refresh complete with result: %d", buf, 0x12u);
  }
}

ASDDiagnosticServiceProtocol *__cdecl sub_1003A29AC(id a1)
{
  return (ASDDiagnosticServiceProtocol *)sub_100337C18();
}

ASDInstallationServiceProtocol *__cdecl sub_1003A29B8(id a1)
{
  return (ASDInstallationServiceProtocol *)sub_10022889C();
}

ASDPurchaseServiceProtocol *__cdecl sub_1003A29C4(id a1)
{
  return (ASDPurchaseServiceProtocol *)sub_10040A9EC();
}

ASDClipServiceProtocol *__cdecl sub_1003A29D0(id a1)
{
  return (ASDClipServiceProtocol *)sub_100336B54();
}

ASDFairPlayServiceProtocol *__cdecl sub_1003A29DC(id a1)
{
  return (ASDFairPlayServiceProtocol *)+[FairPlayService defaultService];
}

ASDInstallAttributionServiceProtocol *__cdecl sub_1003A29E8(id a1)
{
  return (ASDInstallAttributionServiceProtocol *)sub_1003DB11C();
}

ASDInstallWebAttributionServiceProtocol *__cdecl sub_1003A29F4(id a1)
{
  return (ASDInstallWebAttributionServiceProtocol *)+[InstallWebAttributionService defaultService];
}

SKANInteropServiceProtocol *__cdecl sub_1003A2A00(id a1)
{
  return (SKANInteropServiceProtocol *)+[SKANInteropProviderService defaultService];
}

ASDAppMetricsServiceProtocol *__cdecl sub_1003A2A0C(id a1)
{
  return (ASDAppMetricsServiceProtocol *)sub_1002A3068();
}

ASDRepairServiceProtocol *__cdecl sub_1003A2A18(id a1)
{
  return (ASDRepairServiceProtocol *)sub_1003F173C();
}

ASDRestoreServiceProtocol *__cdecl sub_1003A2A24(id a1)
{
  return (ASDRestoreServiceProtocol *)sub_1002B1AD4();
}

ASDSkannerServiceProtocol *__cdecl sub_1003A2A30(id a1)
{
  return (ASDSkannerServiceProtocol *)+[SkannerService defaultService];
}

ASDStoreKitExternalNotificationServiceProtocol *__cdecl sub_1003A2A3C(id a1)
{
  return (ASDStoreKitExternalNotificationServiceProtocol *)sub_1003791B0();
}

ASDPersonalizationServiceProtocol *__cdecl sub_1003A2A48(id a1)
{
  return (ASDPersonalizationServiceProtocol *)sub_1002DD7BC();
}

ASDCrossfireServiceProtocol *__cdecl sub_1003A2A54(id a1)
{
  return (ASDCrossfireServiceProtocol *)sub_10038B214();
}

ASDOcelotServiceProtocol *__cdecl sub_1003A2A60(id a1)
{
  return (ASDOcelotServiceProtocol *)sub_1002D98D8();
}

ASDTestFlightFeedbackServiceProtocol *__cdecl sub_1003A2A6C(id a1)
{
  return (ASDTestFlightFeedbackServiceProtocol *)sub_100325104();
}

ASDAppCapabilitiesServiceProtocol *__cdecl sub_1003A2A78(id a1)
{
  return (ASDAppCapabilitiesServiceProtocol *)+[AppCapabilitiesService defaultService];
}

void sub_1003A2CB8(id a1)
{
  sub_1002C5D90();
  uint64_t v2 = (id *)objc_claimAutoreleasedReturnValue();
  id v1 = sub_10024E080();
  if (v2) {
    objc_storeWeak(v2 + 7, v1);
  }
}

void sub_1003A2D34(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v_Block_object_dispose(&a9, 8) = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[Daemon] Running the registered maintenance block", (uint8_t *)&v8, 2u);
  }
  id v3 = [[KeepAlive alloc] initWithName:@"ODR Maintenance"];
  xpc_activity_state_t state = xpc_activity_get_state(v2);
  if (!state)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v_Block_object_dispose(&a9, 8) = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[Daemon] XPC Maintenance activity checking in", (uint8_t *)&v8, 2u);
    }
    uint64_t v6 = xpc_activity_copy_criteria(v2);
    if (!v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v_Block_object_dispose(&a9, 8) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "[Daemon] No criteria set, correcting that", (uint8_t *)&v8, 2u);
      }
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
      xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REPEATING, 1);
      xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        int v8 = 138412290;
        xpc_object_t v9 = v7;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "[Daemon] Setting the criteria to: %@", (uint8_t *)&v8, 0xCu);
      }
      xpc_activity_set_criteria(v2, v7);

      uint64_t v6 = 0;
    }
    goto LABEL_14;
  }
  if (state == 2)
  {
    id v5 = sub_1001F5C30();
    sub_1001F5D40(v5);

    uint64_t v6 = sub_1001F5C30();
    sub_1001F5E50((uint64_t)v6);
LABEL_14:
  }
}

void *sub_1003A3128(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v25.receiver = a1;
    v25.super_class = (Class)CampaignTokens;
    a1 = objc_msgSendSuper2(&v25, "init");
    if (a1)
    {
      if (v3)
      {
        id v4 = v3;
        id v5 = +[NSMutableArray array];
        uint64_t v6 = sub_100288C18((uint64_t)v4);

        xpc_object_t v7 = [v6 objectForKeyedSubscript:@"ct"];

        if (v7)
        {
          uint64_t v8 = [v6 objectForKeyedSubscript:@"ct"];
          xpc_object_t v9 = (void *)a1[3];
          a1[3] = v8;

          unsigned __int8 v10 = [v6 objectForKeyedSubscript:@"ct"];
          id v11 = +[NSString stringWithFormat:@"ct=%@", v10];
          [v5 addObject:v11];
        }
        int v12 = [v6 objectForKeyedSubscript:@"pt"];

        if (v12)
        {
          uint64_t v13 = [v6 objectForKeyedSubscript:@"pt"];
          __int16 v14 = (void *)a1[4];
          a1[4] = v13;

          unsigned int v15 = [v6 objectForKeyedSubscript:@"pt"];
          id v16 = +[NSString stringWithFormat:@"pt=%@", v15];
          [v5 addObject:v16];
        }
        id v17 = [v6 objectForKeyedSubscript:@"at"];

        if (v17)
        {
          uint64_t v18 = [v6 objectForKeyedSubscript:@"at"];
          id v19 = (void *)a1[1];
          a1[1] = v18;

          unsigned __int8 v20 = [v6 objectForKeyedSubscript:@"at"];
          id v21 = +[NSString stringWithFormat:@"at=%@", v20];
          [v5 addObject:v21];
        }
        if ([v5 count])
        {
          uint64_t v22 = [v5 componentsJoinedByString:@"&"];
          double v23 = (void *)a1[2];
          a1[2] = v22;
        }
      }
    }
  }

  return a1;
}

id sub_1003A3448(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v28.receiver = a1;
    v28.super_class = (Class)AppMetadata;
    a1 = objc_msgSendSuper2(&v28, "init");
    if (a1)
    {
      id v4 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 appPlatform]);
      [a1 setValue:v4 forProperty:@"app_platform"];

      id v5 = [v3 bundleID];
      [a1 setValue:v5 forProperty:@"bundle_id"];

      uint64_t v6 = [v3 bundleVersion];

      if (v6)
      {
        xpc_object_t v7 = [v3 bundleVersion];
        [a1 setValue:v7 forProperty:@"bundle_version"];
      }
      uint64_t v8 = [v3 localizedName];

      if (v8)
      {
        xpc_object_t v9 = [v3 localizedName];
        [a1 setValue:v9 forProperty:@"item_name"];
      }
      unsigned __int8 v10 = [v3 storeCohort];

      if (v10)
      {
        id v11 = [v3 storeCohort];
        [a1 setValue:v11 forProperty:@"cohort"];
      }
      if ((uint64_t)[v3 storeExternalVersionID] >= 1)
      {
        int v12 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 storeExternalVersionID]);
        [a1 setValue:v12 forProperty:@"evid"];
      }
      uint64_t v13 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 isArcade]);
      [a1 setValue:v13 forProperty:@"is_arcade"];

      __int16 v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 isBeta]);
      [a1 setValue:v14 forProperty:@"is_beta"];

      unsigned int v15 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 isAppClip]);
      [a1 setValue:v15 forProperty:@"is_clip"];

      if ([v3 applicationType] == (id)1) {
        [a1 setValue:&__kCFBooleanTrue forProperty:@"is_system_app"];
      }
      uint64_t v16 = [v3 deviceIdentifierForVendor];
      if (v16)
      {
        id v17 = (void *)v16;
        unsigned __int8 v18 = [v3 isAppClip];

        if ((v18 & 1) == 0)
        {
          id v19 = [v3 deviceIdentifierForVendor];
          [a1 setValue:v19 forProperty:@"device_vendor_id"];
        }
      }
      if ((uint64_t)[v3 storeItemID] >= 1)
      {
        unsigned __int8 v20 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 storeItemID]);
        [a1 setValue:v20 forProperty:@"item_id"];
      }
      id v21 = [v3 shortVersionString];

      if (v21)
      {
        uint64_t v22 = [v3 shortVersionString];
        [a1 setValue:v22 forProperty:@"short_version"];
      }
      double v23 = [v3 storefront];

      if (v23)
      {
        unsigned __int8 v24 = [v3 storefront];
        [a1 setValue:v24 forProperty:@"storefront"];
      }
      objc_super v25 = [v3 vendorName];

      if (v25)
      {
        id v26 = [v3 vendorName];
        [a1 setValue:v26 forProperty:@"vendor_name"];
      }
    }
  }

  return a1;
}

id sub_1003A3938(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"bundle_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A3970(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"item_id"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A39A8(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"evid"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A39E0(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"timestamp"];
    if (objc_opt_respondsToSelector())
    {
      [v1 doubleValue];
      +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:");
      id v2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v3 = 0;
        goto LABEL_8;
      }
      id v2 = v1;
    }
    id v3 = v2;
LABEL_8:

    goto LABEL_9;
  }
  id v3 = 0;
LABEL_9:
  return v3;
}

id sub_1003A3A8C(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"cohort");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A3F1C(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"device_vendor_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A3F54(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"bundle_version");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A3F8C(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"item_name"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A3FC4(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"is_clip"];
    id v2 = [v1 BOOLValue];

    return v2;
  }
  return result;
}

id sub_1003A400C(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"is_arcade"];
    id v2 = [v1 BOOLValue];

    return v2;
  }
  return result;
}

id sub_1003A4054(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"is_beta"];
    id v2 = [v1 BOOLValue];

    return v2;
  }
  return result;
}

id sub_1003A409C(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"is_system_app"];
    id v2 = [v1 BOOLValue];

    return v2;
  }
  return result;
}

id sub_1003A40E4(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"short_version"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A411C(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"storefront"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003A4198(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 objectForKeyedSubscript:@"primary_content_hash"];
    id v2 = sub_1002703D8((uint64_t)ODRContentHash, v1);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void *sub_1003A4204(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = [a1 objectForKeyedSubscript:@"local_url"];
    if (v2)
    {
      id v3 = +[NSURL URLWithString:v2];
      id v4 = sub_1003A4198(v1);
      id v5 = sub_1002704DC(v4);
      uint64_t v1 = (void *)sub_10022F824((uint64_t)ODRAssetPack, v3, v5);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  return v1;
}

char *sub_1003A42C0(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  v6.receiver = a1;
  v6.super_class = (Class)HashDigest;
  id v3 = (char *)objc_msgSendSuper2(&v6, "init");
  id v4 = v3;
  if (v3)
  {
    *((void *)v3 + 1) = a2;
    switch(a2)
    {
      case 2:
        CC_SHA256_Init((CC_SHA256_CTX *)(v3 + 16));
        break;
      case 1:
        CC_SHA1_Init((CC_SHA1_CTX *)(v3 + 16));
        break;
      case 0:
        CC_MD5_Init((CC_MD5_CTX *)(v3 + 16));
        break;
    }
  }
  return v4;
}

id sub_1003A4354(uint64_t a1, id a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2 == 2)
    {
      long long v5 = 0u;
      long long v6 = 0u;
      CC_SHA256_Final((unsigned __int8 *)&v5, (CC_SHA256_CTX *)(a1 + 16));
      uint64_t v3 = 32;
    }
    else if (v2 == 1)
    {
      long long v5 = 0uLL;
      LODWORD(v6) = 0;
      CC_SHA1_Final((unsigned __int8 *)&v5, (CC_SHA1_CTX *)(a1 + 16));
      uint64_t v3 = 20;
    }
    else
    {
      if (v2) {
        goto LABEL_9;
      }
      long long v5 = 0uLL;
      CC_MD5_Final((unsigned __int8 *)&v5, (CC_MD5_CTX *)(a1 + 16));
      uint64_t v3 = 16;
    }
    sub_1003A4450((uint64_t)HashDigest, (unsigned __int8 *)&v5, v3);
    a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    a2 = 0;
  }
LABEL_9:
  return a2;
}

id sub_1003A4450(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  self;
  for (id i = [objc_alloc((Class)NSMutableString) initWithCapacity:2 * a3]; a3; --a3)
  {
    unsigned int v6 = *a2++;
    objc_msgSend(i, "appendFormat:", @"%02x", v6);
  }
  id v7 = [i copy];

  return v7;
}

uint64_t sub_1003A44EC(uint64_t result, const void *a2, CC_LONG a3)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 8);
    switch(v3)
    {
      case 2:
        return CC_SHA256_Update((CC_SHA256_CTX *)(result + 16), a2, a3);
      case 1:
        return CC_SHA1_Update((CC_SHA1_CTX *)(result + 16), a2, a3);
      case 0:
        return CC_MD5_Update((CC_MD5_CTX *)(result + 16), a2, a3);
    }
  }
  return result;
}

id sub_1003A4524(id result, void *a2)
{
  if (result)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1003A459C;
    void v2[3] = &unk_100523948;
    v2[4] = result;
    return [a2 enumerateByteRangesUsingBlock:v2];
  }
  return result;
}

uint64_t sub_1003A459C(uint64_t a1, char *a2, uint64_t a3, unint64_t a4)
{
  if (HIDWORD(a4))
  {
    unint64_t v9 = 0;
    CC_LONG v10 = a4;
    do
    {
      uint64_t result = sub_1003A44EC(*(void *)(a1 + 32), &a2[v9], v10);
      v9 += 0xFFFFFFFFLL;
      ++v10;
    }
    while (v9 < a4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return sub_1003A44EC(v7, a2, a4);
  }
  return result;
}

PurchaseHistoryUpdateRequestContext *sub_1003A4648(uint64_t a1, void *a2, int64_t a3, void *a4, void *a5, unint64_t a6)
{
  id v11 = a5;
  id v12 = a4;
  id v13 = a2;
  self;
  __int16 v14 = [PurchaseHistoryUpdateRequestContext alloc];
  id v15 = v13;
  id v16 = v12;
  id v17 = v11;
  if (v14)
  {
    v20.receiver = v14;
    v20.super_class = (Class)PurchaseHistoryUpdateRequestContext;
    unsigned __int8 v18 = (PurchaseHistoryUpdateRequestContext *)objc_msgSendSuper2(&v20, "init");
    __int16 v14 = v18;
    if (v18)
    {
      objc_storeStrong((id *)&v18->_revision, a2);
      v14->_accountID = a3;
      objc_storeStrong((id *)&v14->_requestingAccount, a4);
      objc_storeStrong((id *)&v14->_clientInfo, a5);
      v14->_purchaseHistoryContext = a6;
    }
  }

  return v14;
}

__CFString *sub_1003A47AC(uint64_t a1)
{
  if (a1 > 14)
  {
    if (a1 > 39)
    {
      switch(a1)
      {
        case '(':
          uint64_t v2 = @"Install";
          return v2;
        case '-':
          uint64_t v2 = @"PostProcess";
          return v2;
        case '2':
          uint64_t v2 = @"Postamble";
          return v2;
      }
    }
    else
    {
      switch(a1)
      {
        case 15:
          uint64_t v2 = @"Started";
          return v2;
        case 20:
          uint64_t v2 = @"Preamble";
          return v2;
        case 30:
          uint64_t v2 = @"Download";
          return v2;
      }
    }
LABEL_52:
    uint64_t v2 = +[NSString stringWithFormat:@"Unknown (%ld)", a1];
    return v2;
  }
  if (a1 > -16)
  {
    switch(a1)
    {
      case -15:
        uint64_t v2 = @"Policy";
        return v2;
      case -10:
        uint64_t v2 = @"Paused";
        return v2;
      case 10:
        uint64_t v2 = @"Waiting";
        return v2;
    }
    goto LABEL_52;
  }
  switch(a1)
  {
    case -40:
      uint64_t v2 = @"Finished";
      break;
    case -30:
      uint64_t v2 = @"Canceled";
      break;
    case -20:
      uint64_t v2 = @"Failed";
      return v2;
    default:
      goto LABEL_52;
  }
  return v2;
}

id sub_1003A4990(unint64_t a1)
{
  if (a1 >= 5)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"Unknown (%ld)", a1];
  }
  else
  {
    uint64_t v1 = *(&off_10052B618 + a1);
  }
  return v1;
}

CFStringRef sub_1003A49F4(uint64_t a1)
{
  CFStringRef v1 = @"Unknown compression method.";
  if (!a1) {
    CFStringRef v1 = @"Passthrough";
  }
  if (a1 == 1) {
    return @"LZMA";
  }
  else {
    return v1;
  }
}

__CFString *sub_1003A4A20(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v3 = -21;
    while (1)
    {
      uint64_t v4 = (1 << (v3 + 22));
      if ((v4 & a1) != 0) {
        break;
      }
LABEL_52:
      if (__CFADD__(v3++, 1))
      {
        uint64_t v7 = [v2 componentsJoinedByString:@","];

        goto LABEL_56;
      }
    }
    if ((1 << (v3 + 22)) > 0x7FFuLL)
    {
      if ((1 << (v3 + 22)) < 0x10000uLL)
      {
        if ((1 << (v3 + 22)) < 0x2000uLL)
        {
          if (v4 == 2048)
          {
            long long v5 = @"diagnostics ping";
            goto LABEL_51;
          }
          if (v4 == 4096)
          {
            long long v5 = @"policy";
            goto LABEL_51;
          }
        }
        else
        {
          switch(v4)
          {
            case 0x2000:
              long long v5 = @"prioritized";
              goto LABEL_51;
            case 0x4000:
              long long v5 = @"purchased";
              goto LABEL_51;
            case 0x8000:
              long long v5 = @"phase reset";
              goto LABEL_51;
          }
        }
      }
      else if ((1 << (v3 + 22)) >= 0x80000uLL)
      {
        switch(v4)
        {
          case 0x80000:
            long long v5 = @"upgrade to interactive";
            goto LABEL_51;
          case 0x100000:
            long long v5 = @"vpp";
            goto LABEL_51;
          case 0x200000:
            long long v5 = @"cleanup";
            goto LABEL_51;
        }
      }
      else
      {
        switch(v4)
        {
          case 0x10000:
            long long v5 = @"resumed installations";
            goto LABEL_51;
          case 0x20000:
            long long v5 = @"scheduled";
            goto LABEL_51;
          case 0x40000:
            long long v5 = @"timer";
LABEL_51:
            [v2 addObject:v5];

            goto LABEL_52;
        }
      }
    }
    else
    {
      if ((1 << (v3 + 22)) <= 0x3FuLL)
      {
        long long v5 = @"none (0)";
        switch(1 << (v3 + 22))
        {
          case 0:
            goto LABEL_51;
          case 1:
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_49;
          case 2:
            long long v5 = @"device security";
            goto LABEL_51;
          case 4:
            long long v5 = @"bootstrapped installations";
            goto LABEL_51;
          case 8:
            long long v5 = @"daemon start";
            goto LABEL_51;
          default:
            if (v4 == 16)
            {
              long long v5 = @"finished installations";
            }
            else
            {
              if (v4 != 32) {
                goto LABEL_49;
              }
              long long v5 = @"hydrate job";
            }
            break;
        }
        goto LABEL_51;
      }
      if ((1 << (v3 + 22)) <= 0xFFuLL)
      {
        if (v4 == 64)
        {
          long long v5 = @"imported installations";
          goto LABEL_51;
        }
        if (v4 == 128)
        {
          long long v5 = @"optimal download window reached";
          goto LABEL_51;
        }
      }
      else
      {
        switch(v4)
        {
          case 256:
            long long v5 = @"non ordered restores completed";
            goto LABEL_51;
          case 512:
            long long v5 = @"ordered restores completed";
            goto LABEL_51;
          case 1024:
            long long v5 = @"paused installations";
            goto LABEL_51;
        }
      }
    }
LABEL_49:
    long long v5 = +[NSString stringWithFormat:@"unknown (%lu)", (1 << (v3 + 22))];
    goto LABEL_51;
  }
  uint64_t v7 = @"none (0)";
LABEL_56:
  return v7;
}

uint64_t sub_1003A4D28()
{
  self;
  uint64_t result = sub_1003A5168();
  if (result)
  {
    if (qword_1005B1118 != -1) {
      dispatch_once(&qword_1005B1118, &stru_10052B658);
    }
    os_unfair_lock_lock(&stru_1005B1F90);
    if (byte_1005B1F94 == 1)
    {
      char v1 = byte_1005B1110 != 0;
    }
    else
    {
      char v1 = _os_feature_enabled_impl();
      byte_1005B1110 = v1;
      byte_1005B1F94 = 1;
    }
    if (byte_1005B1F95 & 1) != 0 || (v1) {
      goto LABEL_32;
    }
    switch(qword_1005B1F98)
    {
      case -1:
        CFStringRef v22 = @"DeviceConfigurationFlags";
        double v23 = &off_10054CC90;
        uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        if (v3) {
          goto LABEL_24;
        }
        break;
      case 0:
        id v17 = 0;
        uint64_t v18 = 0;
        id v19 = &v18;
        uint64_t v20 = 0x2020000000;
        uint64_t v4 = (void (*)(id *))off_1005B1120;
        id v21 = off_1005B1120;
        if (!off_1005B1120)
        {
          *(void *)&long long buf = _NSConcreteStackBlock;
          *((void *)&buf + 1) = 3221225472;
          id v27 = sub_1003A5604;
          objc_super v28 = &unk_1005243D0;
          id v29 = &v18;
          long long v5 = (void *)sub_1003A5168();
          unsigned int v6 = dlsym(v5, "MAECopyActivationRecordWithError");
          *(void *)(v29[1] + 24) = v6;
          off_1005B1120 = *(_UNKNOWN **)(v29[1] + 24);
          uint64_t v4 = (void (*)(id *))v19[3];
        }
        _Block_object_dispose(&v18, 8);
        if (!v4)
        {
          dlerror();
          abort_report_np();
          __break(1u);
        }
        uint64_t v3 = v4(&v17);
        id v7 = v17;
        if (!v3)
        {
          uint64_t v8 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 138543362;
            *(void *)((char *)&buf + 4) = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[HRNSupport] Failed to copy activation record. Error: %{public}@", (uint8_t *)&buf, 0xCu);
          }
        }
LABEL_13:
        if (!v3) {
          break;
        }
LABEL_24:
        byte_1005B1F95 = 1;
        unint64_t v9 = [v3 objectForKeyedSubscript:@"DeviceConfigurationFlags"];
        CC_LONG v10 = v9;
        if (v9)
        {
          unsigned __int8 v11 = [v9 integerValue];
          byte_1005B1110 = (v11 & 0x21) == 33;
          if ((v11 & 0x21) != 0x21)
          {
LABEL_31:

            break;
          }
          id v12 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            id v13 = objc_opt_class();
            LODWORD(buf) = 138543362;
            *(void *)((char *)&buf + 4) = v13;
            id v14 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%{public}@] Device supports HRN", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          id v12 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            id v15 = objc_opt_class();
            LODWORD(buf) = 138543362;
            *(void *)((char *)&buf + 4) = v15;
            id v16 = v15;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%{public}@] No cloud configuration flags found in activation record", (uint8_t *)&buf, 0xCu);
          }
        }

        goto LABEL_31;
      case 1:
        CFStringRef v24 = @"DeviceConfigurationFlags";
        id v2 = +[NSNumber numberWithUnsignedInteger:33];
        objc_super v25 = v2;
        uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];

        goto LABEL_13;
    }
LABEL_32:
    os_unfair_lock_unlock(&stru_1005B1F90);
    return byte_1005B1110 != 0;
  }
  return result;
}

void sub_1003A5148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A5168()
{
  v3[0] = 0;
  if (!qword_1005B1100)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = 3221225472;
    v3[3] = sub_1003A52CC;
    void v3[4] = &unk_100521BF0;
    void v3[5] = v3;
    long long v4 = off_10052B640;
    uint64_t v5 = 0;
    qword_1005B1100 = _sl_dlopen();
    char v1 = (void *)v3[0];
    uint64_t v0 = qword_1005B1100;
    if (qword_1005B1100)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      char v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return qword_1005B1100;
}

void sub_1003A5278()
{
  self;
  os_unfair_lock_lock(&stru_1005B1F90);
  byte_1005B1F94 = 0;
  byte_1005B1F95 = 0;
  os_unfair_lock_unlock(&stru_1005B1F90);
}

uint64_t sub_1003A52CC()
{
  uint64_t result = _sl_dlopen();
  qword_1005B1100 = result;
  return result;
}

void sub_1003A5340(id a1)
{
  char v1 = sub_1003A5424();

  if (v1)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    sub_1003A5424();
    long long v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_1003A553C, v4, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  else
  {
    uint64_t v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[HRNSupport] Unable to register for activation state changed notification", buf, 2u);
    }
  }
}

id sub_1003A5424()
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v0 = (void **)qword_1005B1108;
  uint64_t v8 = qword_1005B1108;
  if (!qword_1005B1108)
  {
    char v1 = (void *)sub_1003A5168();
    v6[3] = (uint64_t)dlsym(v1, "kNotificationActivationStateChanged");
    qword_1005B1108 = v6[3];
    uint64_t v0 = (void **)v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    dlerror();
    long long v4 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }
  id v2 = *v0;
  return v2;
}

void sub_1003A553C()
{
  uint64_t v0 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "[HRNSupport] Activation state changed", v1, 2u);
  }

  sub_1003A5278();
}

void *sub_1003A55B4(uint64_t a1)
{
  id v2 = (void *)sub_1003A5168();
  uint64_t result = dlsym(v2, "kNotificationActivationStateChanged");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1005B1108 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1003A5604(uint64_t a1)
{
  id v2 = (void *)sub_1003A5168();
  uint64_t result = dlsym(v2, "MAECopyActivationRecordWithError");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1005B1120 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1003A5654(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  self;
  uint64_t v8 = objc_opt_new();
  unint64_t v9 = (void *)v8[5];
  void v8[5] = v6;
  id v10 = v6;

  void v8[6] = a2;
  id v11 = [v7 copy];

  id v12 = (void *)v8[7];
  v8[7] = v11;

  return v8;
}

void sub_1003A5A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1003A5A28(uint64_t a1, char a2, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v5 = obj;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void *sub_1003A5AEC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  id v6 = objc_opt_new();
  id v7 = (void *)v6[5];
  void v6[5] = v5;
  id v8 = v5;

  uint64_t v9 = (void *)v6[6];
  v6[6] = v4;

  return v6;
}

void sub_1003A60A4(uint64_t a1, void *a2)
{
  id v15 = a2;
  if ([v15 storeItemID])
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 48);
    id v4 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v15 storeItemID]);
    LOBYTE(v3) = [v3 containsObject:v4];

    if ((v3 & 1) == 0
      && ([v15 hasMIDBasedSINF] & 1) == 0
      && ([v15 isBeta] & 1) == 0
      && ([v15 isProfileValidated] & 1) == 0
      && ([v15 isAppClip] & 1) == 0
      && ([v15 isPlaceholder] & 1) == 0
      && (![v15 isInstalled]
       || ([v15 missingRequiredSINF] & 1) == 0))
    {
      id v5 = [v15 appStoreToolsBuildVersion];
      if (v5)
      {
        unsigned int v6 = [*(id *)(a1 + 40) containsObject:v5];
        char v7 = v6;
        id v8 = (void *)(a1 + 48);
        if (!*(void *)(a1 + 48))
        {
          if (!v6) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
      }
      else
      {
        id v8 = (void *)(a1 + 48);
        if (!*(void *)(a1 + 48))
        {
LABEL_20:

          goto LABEL_21;
        }
        char v7 = 0;
      }
      uint64_t v9 = [v15 bundlePath];
      id v10 = +[NSString stringWithFormat:@"%@/Info.plist", v9];
      id v11 = +[NSDictionary dictionaryWithContentsOfFile:v10];

      id v12 = [v11 objectForKeyedSubscript:@"ITSDRMScheme"];
      if (v12)
      {
        id v13 = v12;
        v7 |= [v12 isEqualToString:*v8] ^ 1;
      }
      if ((v7 & 1) == 0) {
        goto LABEL_20;
      }
LABEL_19:
      id v14 = sub_100332960([UpdatableApp alloc], v15, &off_10054CCA8);
      [*(id *)(a1 + 56) addObject:v14];

      goto LABEL_20;
    }
  }
LABEL_21:
}

void sub_1003A62B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[ACAccountStore ams_sharedAccountStore];
  id v5 = objc_msgSend(v4, "ams_iTunesAccountWithDSID:", v3);

  if (v5)
  {
    unsigned int v6 = sub_1002DB844((id *)[UpdatesTask alloc], v5, *(void **)(a1 + 32), 1);
    id v8 = v6;
    if (v6) {
      objc_setProperty_nonatomic_copy(v6, v7, *(id *)(*(void *)(a1 + 40) + 40), 64);
    }
    uint64_t v9 = *(void **)(a1 + 40);
    id v21 = 0;
    unsigned int v10 = [v9 runSubTask:v8 returningError:&v21];
    id v11 = v21;
    if (v10)
    {
      if (v8) {
        id v12 = v8[9];
      }
      else {
        id v12 = 0;
      }
      id v13 = (id *)v12;
      id v14 = sub_1003D2FFC(v13);

      if ([v14 count])
      {
        id v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 40);
          id v17 = [v14 count];
          uint64_t v18 = objc_msgSend(v5, "ams_DSID");
          *(_DWORD *)long long buf = 138412802;
          uint64_t v23 = v16;
          __int16 v24 = 2048;
          id v25 = v17;
          __int16 v26 = 2114;
          id v27 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@]: Found %lu forced updates for account: %{public}@", buf, 0x20u);
        }
        [*(id *)(a1 + 48) addObjectsFromArray:v14];
      }
    }
    else
    {
      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 40);
        uint64_t v20 = objc_msgSend(v5, "ams_DSID");
        *(_DWORD *)long long buf = 138412802;
        uint64_t v23 = v19;
        __int16 v24 = 2114;
        id v25 = v20;
        __int16 v26 = 2114;
        id v27 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@]: Failed to fetch forced updates for account: %{public}@ error: %{public}@", buf, 0x20u);
      }
    }
  }
}

id sub_1003A65B4(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v4 = self;
  if (!v2)
  {
    unint64_t v7 = 0;
    id v6 = 0;
    goto LABEL_3;
  }
  char v5 = *((unsigned char *)v2 + 10);
  id v6 = objc_getProperty(v2, v3, 40, 1);
  unint64_t v7 = *((void *)v2 + 2);
  if ((v5 & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = sub_1003A6834(v4, v6, v7);
    goto LABEL_5;
  }
  uint64_t v8 = sub_1003A6674(v4, v6, v7);
LABEL_5:
  uint64_t v9 = (void *)v8;

  return v9;
}

id sub_1003A6674(uint64_t a1, void *a2, unint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = self;
  id v6 = objc_alloc_init((Class)AMSDialogRequest);
  unint64_t v7 = ASDLocalizedString();
  [v6 setTitle:v7];

  uint64_t v8 = ASDLocalizedString();
  if (a3)
  {
    uint64_t v9 = sub_1003B65EC((uint64_t)EvaluatorDownload, a3);
    unsigned int v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, v4, v9);

    [v6 setMessage:v10];
  }
  else
  {
    uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, v4);

    [v6 setMessage:v9];
  }

  id v11 = ASDLocalizedString();
  id v12 = sub_1003A6B5C(v5, v11);
  [v6 setButtonActions:v12];

  id v13 = [v6 buttonActions];
  id v14 = [v13 lastObject];
  [v6 setDefaultAction:v14];

  sub_100422394(v6, @"constrainedNetworkUpdate");
  return v6;
}

id sub_1003A6834(uint64_t a1, void *a2, unint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = self;
  id v6 = objc_alloc_init((Class)AMSDialogRequest);
  unint64_t v7 = ASDLocalizedString();
  [v6 setTitle:v7];

  uint64_t v8 = ASDLocalizedString();
  if (a3)
  {
    uint64_t v9 = sub_1003B65EC((uint64_t)EvaluatorDownload, a3);
    unsigned int v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, v4, v9);

    [v6 setMessage:v10];
  }
  else
  {
    uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, v4);

    [v6 setMessage:v9];
  }

  id v11 = ASDLocalizedString();
  id v12 = sub_1003A6B5C(v5, v11);
  [v6 setButtonActions:v12];

  id v13 = [v6 buttonActions];
  id v14 = [v13 lastObject];
  [v6 setDefaultAction:v14];

  sub_100422394(v6, @"constrainedNetworkDownload");
  return v6;
}

id sub_1003A69F4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = self;
  id v4 = objc_alloc_init((Class)AMSDialogRequest);
  uint64_t v5 = ASDLocalizedString();
  [v4 setTitle:v5];

  id v6 = ASDLocalizedString();
  unint64_t v7 = sub_1003B65EC((uint64_t)EvaluatorDownload, a2);
  uint64_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v6, v7);
  [v4 setMessage:v8];

  uint64_t v9 = ASDLocalizedString();
  unsigned int v10 = sub_1003A6B5C(v3, v9);
  [v4 setButtonActions:v10];

  id v11 = [v4 buttonActions];
  id v12 = [v11 lastObject];
  [v4 setDefaultAction:v12];

  sub_100422394(v4, @"constrainedNetworkUpdates");
  return v4;
}

id sub_1003A6B5C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init((Class)AMSDialogAction);
  [v3 setTitle:v2];

  [v3 setIdentifier:@"LowDataModePromptActionDownload"];
  sub_10025F158(v3, @"download");
  id v4 = objc_alloc_init((Class)AMSDialogAction);
  uint64_t v5 = ASDLocalizedString();
  [v4 setTitle:v5];

  [v4 setIdentifier:@"LowDataModePromptActionCancel"];
  [v4 setStyle:2];
  sub_10025F158(v4, @"cancel");
  v8[0] = v4;
  v8[1] = v3;
  id v6 = +[NSArray arrayWithObjects:v8 count:2];

  return v6;
}

id *sub_1003A6C9C(id *a1, void *a2, int a3)
{
  id v5 = a2;
  if (a1)
  {
    v130.receiver = a1;
    v130.super_class = (Class)StoreItem;
    a1 = (id *)objc_msgSendSuper2(&v130, "init");
    if (a1)
    {
      id v6 = v5;
      id v7 = objc_alloc_init((Class)NSMutableArray);
      id v8 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v9 = sub_100268568(v6, @"thinned-app");
      *((unsigned char *)a1 + 20) = a3;
      *((unsigned char *)a1 + 22) = v9 == 0;
      *((unsigned char *)a1 + 21) = [v9 count] != 0;
      if (v9 && (a3 & 1) == 0)
      {
        unsigned int v10 = sub_10030F6A0((uint64_t)StoreAsset, v9);
        [v7 addObject:v10];

        id v11 = sub_10030FB00((uint64_t)StoreAsset, v9);
        [v8 addObjectsFromArray:v11];
      }
      id v12 = sub_10030F6A0((uint64_t)StoreAsset, v6);
      [v7 addObject:v12];
      id v13 = sub_10030FB00((uint64_t)StoreAsset, v6);
      [v8 addObjectsFromArray:v13];

      uint64_t v14 = sub_10030FBFC((uint64_t)StoreAsset, v7, a3);
      id v15 = a1[9];
      a1[9] = (id)v14;

      id v16 = [v8 copy];
      id v17 = a1[8];
      a1[8] = v16;

      if (os_variant_has_internal_content())
      {
        uint64_t v20 = sub_100268A28(v6, @"metadata.softwareVersionBundleId");
        if (v12) {
          id Property = objc_getProperty(v12, v19, 40, 1);
        }
        else {
          id Property = 0;
        }
        id v22 = Property;
        __int16 v24 = +[BAApplicationConfigurationOverrides asd_overriddenDictionaryForBundleIdentifier:v20 startingDictionary:v22];
        if (v12) {
          objc_setProperty_atomic_copy(v12, v23, v24, 40);
        }
      }
      id v129 = v5;
      if (v12)
      {
        id v26 = objc_getProperty(v12, v18, 40, 1);
        if (v26)
        {
          id v128 = v7;
          id v27 = a1[9];
          if (v27) {
            objc_setProperty_atomic_copy(v27, v25, v26, 40);
          }
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          id v28 = a1[8];
          id v29 = [v28 countByEnumeratingWithState:&v131 objects:buf count:16];
          if (v29)
          {
            id v31 = v29;
            uint64_t v32 = *(void *)v132;
            do
            {
              uint64_t v33 = 0;
              do
              {
                if (*(void *)v132 != v32) {
                  objc_enumerationMutation(v28);
                }
                uint64_t v34 = *(void **)(*((void *)&v131 + 1) + 8 * (void)v33);
                if (v34) {
                  objc_setProperty_atomic_copy(v34, v30, v26, 40);
                }
                uint64_t v33 = (char *)v33 + 1;
              }
              while (v31 != v33);
              id v31 = [v28 countByEnumeratingWithState:&v131 objects:buf count:16];
            }
            while (v31);
          }

          id v7 = v128;
        }
      }
      else
      {
        id v26 = 0;
      }

      id v35 = v6;
      uint64_t v36 = sub_100268568(v35, @"metadata");
      uint64_t v37 = sub_1002689B4(v36, @"alternateIconName");
      id v38 = a1[3];
      a1[3] = (id)v37;

      if (a1[3])
      {
        id v39 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          id v127 = a1[3];
          *(_DWORD *)long long buf = 138412290;
          id v136 = v127;
          _os_log_debug_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "(StoreItem) Received value for 'alternateIconName': \"%@\"", buf, 0xCu);
        }
      }
      if (v36 && sub_1002680CC(v36, @"isCustomBrowserEngineApp", 0))
      {
        id v40 = a1[4];
        a1[4] = &off_10054E088;
      }
      uint64_t v41 = sub_1002689B4(v36, @"artistName");
      id v42 = a1[6];
      a1[6] = (id)v41;

      uint64_t v43 = sub_1002689B4(v36, @"kind");
      id v44 = a1[28];
      a1[28] = (id)v43;

      uint64_t v45 = sub_10026811C(v36, @"itemId");
      id v46 = a1[26];
      a1[26] = (id)v45;

      uint64_t v47 = sub_1002689B4(v36, @"itemName");
      id v48 = a1[27];
      a1[27] = (id)v47;

      uint64_t v49 = sub_10026811C(v36, @"softwareVersionExternalIdentifier");
      id v50 = a1[18];
      a1[18] = (id)v49;

      id v51 = +[NSString stringWithFormat:@"%@.%@.%@", @"artwork-urls", @"default", @"url"];
      uint64_t v52 = sub_100268A28(v35, v51);
      id v53 = a1[7];
      a1[7] = (id)v52;

      if (!a1[7])
      {
        uint64_t v54 = sub_1002689B4(v35, @"artworkURL");
        id v55 = a1[7];
        a1[7] = (id)v54;
      }
      uint64_t v56 = sub_1002689B4(v36, @"softwareVersionBundleId");
      id v57 = a1[12];
      a1[12] = (id)v56;

      uint64_t v58 = sub_1002689B4(v36, @"bundleDisplayName");
      id v59 = a1[11];
      a1[11] = (id)v58;

      uint64_t v60 = sub_1002689B4(v36, @"bundleShortVersionString");
      id v61 = a1[13];
      a1[13] = (id)v60;

      uint64_t v62 = sub_1002689B4(v36, @"bundleVersion");
      id v63 = a1[14];
      a1[14] = (id)v62;

      if (v36)
      {
        *((unsigned char *)a1 + 11) = sub_1002680CC(v36, @"hasMessagesExtension", 0);
        unsigned __int8 v64 = sub_1002680CC(v36, @"launchProhibited", 0);
      }
      else
      {
        unsigned __int8 v64 = 0;
        *((unsigned char *)a1 + 11) = 0;
      }
      *((unsigned char *)a1 + 17) = v64;
      uint64_t v65 = sub_1002689B4(v36, @"messagesIconUrl");
      id v66 = a1[29];
      a1[29] = (id)v65;

      uint64_t v67 = sub_10026811C(v36, @"hasOrEverHasHadIAP");
      id v68 = a1[21];
      a1[21] = (id)v67;

      if (v36)
      {
        *((unsigned char *)a1 + 12) = sub_1002680CC(v36, @"appleWatchEnabled", 0);
        *((unsigned char *)a1 + 13) = sub_1002680CC(v36, @"WKRunsIndependentlyOfCompanionApp", 0);
        unsigned __int8 v69 = sub_1002680CC(v36, @"WKWatchOnly", 0);
      }
      else
      {
        unsigned __int8 v69 = 0;
        *((_WORD *)a1 + 6) = 0;
      }
      *((unsigned char *)a1 + 14) = v69;
      uint64_t v70 = sub_1002689B4(v36, @"genre");
      id v71 = a1[19];
      a1[19] = (id)v70;

      uint64_t v72 = sub_10026811C(v36, @"genreId");
      id v73 = a1[20];
      a1[20] = (id)v72;

      id v74 = sub_100267F88(v36, @"subgenres");
      uint64_t v75 = sub_1003B63BC(v74);
      uint64_t v76 = sub_10041E130(v75, &stru_10052B6D0);
      id v77 = a1[40];
      a1[40] = (id)v76;

      uint64_t v78 = sub_100268568(v36, @"rating");
      SEL v79 = v78;
      if (v78)
      {
        uint64_t v80 = sub_1002689B4(v78, @"label");
        id v81 = a1[34];
        a1[34] = (id)v80;

        uint64_t v82 = sub_10026811C(v79, @"rank");
        id v83 = a1[35];
        a1[35] = (id)v82;
      }
      if (v36)
      {
        *((unsigned char *)a1 + 9) = sub_1002680CC(v36, @"gameCenterEnabled", 0);
        unsigned __int8 v84 = sub_1002680CC(v36, @"gameCenterEverEnabled", 0);
      }
      else
      {
        unsigned __int8 v84 = 0;
        *((unsigned char *)a1 + 9) = 0;
      }
      *((unsigned char *)a1 + 10) = v84;
      if (v35)
      {
        *((unsigned char *)a1 + _Block_object_dispose(&a9, 8) = sub_1002680CC(v35, @"is-auto-download", 0);
        *((unsigned char *)a1 + 16) = sub_1002680CC(v35, @"isRedownload", 0);
        unsigned __int8 v85 = sub_1002680CC(v35, @"is-purchased-redownload", 0);
      }
      else
      {
        unsigned __int8 v85 = 0;
        *((unsigned char *)a1 + _Block_object_dispose(&a9, 8) = 0;
        *((unsigned char *)a1 + 16) = 0;
      }
      *((unsigned char *)a1 + 1_Block_object_dispose(&a9, 8) = v85;
      uint64_t v86 = sub_1002689B4(v35, @"redownload-params");
      id v87 = a1[32];
      a1[32] = (id)v86;

      uint64_t v88 = sub_1002689B4(v35, @"purchaseDate");
      id v89 = a1[31];
      a1[31] = (id)v88;

      uint64_t v90 = sub_1002689B4(v36, @"releaseDate");
      id v91 = a1[33];
      a1[33] = (id)v90;

      uint64_t v92 = sub_1002689B4(v36, @"s");
      id v93 = a1[37];
      a1[37] = (id)v92;

      if (!a1[37])
      {
        SEL v94 = sub_10026811C(v36, @"s");
        uint64_t v95 = [v94 stringValue];
        id v96 = a1[37];
        a1[37] = (id)v95;
      }
      if (v36) {
        id v97 = sub_1002680CC(v36, @"iad-attribution", 0);
      }
      else {
        id v97 = 0;
      }
      uint64_t v98 = +[NSNumber numberWithBool:v97];
      id v99 = a1[22];
      a1[22] = (id)v98;

      uint64_t v100 = sub_1002689B4(v36, @"iad-conversion-date");
      id v101 = a1[23];
      a1[23] = (id)v100;

      uint64_t v102 = sub_1002689B4(v36, @"iad-impression-date");
      id v103 = a1[24];
      a1[24] = (id)v102;

      uint64_t v104 = sub_1002689B4(v35, @"install-verification-token");
      id v105 = a1[25];
      a1[25] = (id)v104;

      if (v35) {
        unsigned __int8 v106 = sub_1002680CC(v35, @"b2bCustomApp", 0);
      }
      else {
        unsigned __int8 v106 = 0;
      }
      *((unsigned char *)a1 + 15) = v106;
      uint64_t v107 = sub_1002689B4(v36, @"storeCohort");
      id v108 = a1[39];
      a1[39] = (id)v107;

      uint64_t v109 = sub_100268568(v36, @"UIRequiredDeviceCapabilities");
      id v110 = a1[16];
      a1[16] = (id)v109;

      if (v36) {
        unsigned __int8 v111 = sub_1002680CC(v36, @"is32BitOnly", 0);
      }
      else {
        unsigned __int8 v111 = 0;
      }
      *((unsigned char *)a1 + 19) = v111;
      uint64_t v112 = sub_100268568(v36, @"nameTranscriptions");
      id v113 = a1[42];
      a1[42] = (id)v112;

      uint64_t v114 = sub_1002689B4(v35, @"cancel-download-url");
      id v115 = a1[15];
      a1[15] = (id)v114;

      uint64_t v116 = sub_1002689B4(v35, @"download-id");
      id v117 = a1[38];
      a1[38] = (id)v116;

      uint64_t v118 = sub_100268348(v35, @"app-receipt");
      id v119 = a1[5];
      a1[5] = (id)v118;

      uint64_t v120 = sub_100268AEC(v35, @"preflightPackageURL");
      id v121 = a1[30];
      a1[30] = (id)v120;

      uint64_t v122 = sub_100268568(v35, @"externalPurchaseLinkOutTokenInfo");
      id v123 = a1[43];
      a1[43] = (id)v122;

      id v124 = sub_1002689B4(v36, @"software-platform");
      if ([v124 isEqualToString:@"ios"]
        || ![v124 isEqualToString:@"macos"])
      {
        uint64_t v125 = 1;
      }
      else
      {
        uint64_t v125 = 2;
      }
      a1[36] = (id)v125;

      id v5 = v129;
    }
  }

  return a1;
}

void *sub_1003A77CC(void *a1, void *a2, char a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = sub_100400EF8((uint64_t)MIStoreMetadata, a1);
    a1 = v6;
    if ((a3 & 1) == 0) {
      [v6 setVariantID:0];
    }
    if (v5)
    {
      sub_100401854(a1, v5);
      id v7 = objc_msgSend(v5, "ams_DSID");
      [a1 setPurchaserID:v7];
    }
  }

  return a1;
}

id sub_1003A7D00(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = sub_1002AA51C([StoreItemSubGenre alloc], v2);

  return v3;
}

id sub_1003A7D58(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 48, 1);
  }
  return result;
}

id sub_1003A7D6C(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 96, 1);
  }
  return result;
}

id sub_1003A7D80(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 208, 1);
  }
  return result;
}

id sub_1003A7D94(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 216, 1);
  }
  return result;
}

XDCInstallResponse *sub_1003A7FB4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init(XDCInstallResponse);
  if (v3)
  {
    id v4 = sub_1003923F8(v2, &stru_10052B730);
    id v5 = [v4 mutableCopy];
    objc_storeStrong((id *)&v3->_externalIDStrings, v5);
  }
  return v3;
}

id sub_1003A8054(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(id *)(a1 + 16);
    id v2 = sub_1003923F8(v1, &stru_10052B6F0);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_1003A80BC(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:v2];

  return v3;
}

id sub_1003A8114(id a1, NSUUID *a2)
{
  return [(NSUUID *)a2 UUIDString];
}

id sub_1003A811C(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(id *)(a1 + 16);
    id v2 = sub_1003923F8(v1, &stru_10052B750);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_1003A8184(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = [[_TtC9appstored6LogKey alloc] initWithBaseUUIDString:v2];

  return v3;
}

void *sub_1003A81DC(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  v26.receiver = a1;
  v26.super_class = (Class)MetricsContext;
  id v3 = objc_msgSendSuper2(&v26, "init");
  id v4 = v3;
  if (v3)
  {
    void v3[4] = a2;
    id v5 = [_TtC9appstored6LogKey alloc];
    id v6 = sub_1003A84D8((uint64_t)MetricsContext, v4[4]);
    id v7 = [(LogKey *)v5 initWithBase:v6];
    id v8 = (void *)v4[9];
    v4[9] = v7;

    uint64_t v9 = +[NSString stringWithFormat:@"com.apple.appstored.%@.events", v4[9]];
    uint64_t v10 = sub_1002E1F40((uint64_t)MetricsCoordinator, v4[4]);
    id v11 = (void *)v4[8];
    v4[8] = v10;

    id v12 = [[KeepAlive alloc] initWithName:v9];
    id v13 = (void *)v4[7];
    v4[7] = v12;

    uint64_t v14 = +[NSDate date];
    id v15 = (void *)v4[12];
    v4[12] = v14;

    [(id)v4[12] timeIntervalSince1970];
    v4[11] = (uint64_t)v16;
    id v17 = (void *)v4[8];
    if (v17 || (uint64_t v23 = v4[4]) == 0 || v23 == 7)
    {
      [v17 timeIntervalSince1970];
      v4[15] = (uint64_t)v18;
    }
    else
    {
      __int16 v24 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = v4[9];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v28 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] Interval start date not set", buf, 0xCu);
      }
    }
    CFStringRef v19 = 0;
    switch(v4[4])
    {
      case 1:
        uint64_t v20 = @"xp_amp_app_usage_analytics";
        if (!os_variant_has_internal_content()) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 2:
        uint64_t v20 = @"xp_amp_app_usage_dnu";
        if (!os_variant_has_internal_content()) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 3:
        uint64_t v20 = @"xp_amp_app_usage_arcade";
        if (!os_variant_has_internal_content()) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 4:
        uint64_t v20 = @"xp_amp_usage_detailed";
        if (!os_variant_has_internal_content()) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 5:
        CFStringRef v19 = @"on_device_personalization";
        break;
      case 7:
        uint64_t v20 = @"xp_ase_arcade_subs";
        if (!os_variant_has_internal_content()) {
          goto LABEL_9;
        }
LABEL_7:
        if (sub_1003F2B08()) {
          uint64_t v20 = @"itsmetrics_test";
        }
LABEL_9:
        CFStringRef v19 = v20;
        break;
      default:
        break;
    }
    id v21 = (void *)v4[19];
    v4[19] = v19;
  }
  return v4;
}

CFStringRef sub_1003A84D8(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) > 6) {
    return @"None";
  }
  else {
    return off_10052B770[a2 - 1];
  }
}

void *sub_1003A8520(uint64_t a1, uint64_t a2)
{
  self;
  id v3 = sub_1003A81DC([MetricsContext alloc], a2);
  return v3;
}

void *sub_1003A8568(void *a1)
{
  if (a1)
  {
    if ((unint64_t)(a1[4] - 1) > 4) {
      id v2 = 0;
    }
    else {
      id v2 = objc_opt_class();
    }
    a1 = v2;
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1003A85C0(uint64_t a1)
{
  if (a1)
  {
    sub_1002E1C68((uint64_t)MetricsCoordinator, *(void *)(a1 + 32));
    id v2 = sub_1002E1F40((uint64_t)MetricsCoordinator, *(void *)(a1 + 32));
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 72);
      if (v2)
      {
        [v2 timeIntervalSince1970];
        uint64_t v6 = (uint64_t)v5;
      }
      else
      {
        uint64_t v6 = 0;
      }
      int v7 = 138412546;
      uint64_t v8 = v4;
      __int16 v9 = 2048;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Recorded start interval as: %{time_t}ld", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1003A86C4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_1003A8964(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  sub_1003ABAA4((uint64_t)ODRLaunchServicesObserver, v5, a2);
  if (a2)
  {
    uint64_t v35 = a1;
    uint64_t v6 = objc_opt_new();
    uint64_t v37 = +[LSDatabaseContext sharedDatabaseContext];
    unsigned int v36 = [v37 startAccessingReturningError:0];
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v38 = v5;
    id obj = v5;
    id v7 = [obj countByEnumeratingWithState:&v41 objects:v49 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v42;
      do
      {
        for (id i = 0; i != v8; id i = (char *)i + 1)
        {
          if (*(void *)v42 != v9) {
            objc_enumerationMutation(obj);
          }
          id v11 = *(void **)(*((void *)&v41 + 1) + 8 * i);
          id v13 = objc_alloc((Class)LSApplicationRecord);
          id v40 = 0;
          id v14 = [v13 initForInstallMachineryWithBundleIdentifier:v11 placeholder:1 error:&v40];
          id v15 = v40;
          if (v15)
          {
            double v16 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543618;
              id v46 = v11;
              __int16 v47 = 2114;
              id v48 = v15;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failed to fetch record for placeholder app %{public}@: %{public}@", buf, 0x16u);
            }
          }
          if (objc_msgSend(v14, "installType", v35) == (id)7
            || [v14 installType] == (id)8
            || [v14 installType] == (id)9)
          {
            [v6 addObject:v11];
          }
        }
        id v8 = [obj countByEnumeratingWithState:&v41 objects:v49 count:16];
      }
      while (v8);
    }

    if (v36) {
      [v37 stopAccessing];
    }
    if (objc_msgSend(v6, "count", v35))
    {
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        double v18 = objc_opt_class();
        id v19 = v18;
        uint64_t v20 = [v6 componentsJoinedByString:@", "];
        *(_DWORD *)long long buf = 138543618;
        id v46 = v18;
        __int16 v47 = 2114;
        id v48 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Apps offloaded: [%{public}@]", buf, 0x16u);
      }
      id v21 = +[UpdatesManager sharedManager];
      [v21 verifyPendingUpdates:v6];

      id v22 = +[LaunchHistory shared];
      [v22 clearLaunchHistoryWithBundleIDs:obj];

      uint64_t v23 = sub_1002CF238((uint64_t)ASDNotification, v6);
      __int16 v24 = sub_10001A0C8();
      sub_1003D64D4((uint64_t)v24, v23);
    }
    id v5 = v38;
  }
  else
  {
    uint64_t v25 = +[UpdatesManager sharedManager];
    [v25 verifyUpdatesFollowingExternalAppInstall:v5];

    objc_super v26 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      id v27 = [v5 componentsJoinedByString:@", "];
      *(_DWORD *)long long buf = 138543362;
      id v46 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Checking to see if apps need to be migrated to managed: [%{public}@]", buf, 0xCu);
    }
    uint64_t v28 = objc_alloc_init(MigrateToManagedTask);
    uint64_t v6 = v28;
    if (v28) {
      objc_setProperty_nonatomic_copy(v28, v29, v5, 80);
    }
    uint64_t v30 = sub_1002B2A3C();
    id v31 = (void *)v30;
    if (v30) {
      [*(id *)(v30 + 8) addOperation:v6];
    }

    sub_1002C5D90();
    uint64_t v32 = (id *)objc_claimAutoreleasedReturnValue();
    sub_1002C7108(v32);

    uint64_t v33 = sub_1002D7CE8();
    sub_1002D7DC4((uint64_t)v33, v5);

    uint64_t v34 = sub_1002705B4();
    sub_100275C4C(v34, v5);

    +[GaletteAppDeleteAlertManager handleInstalledAppsWithBundleIDs:v5];
  }
}

void sub_1003A8E40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = [a2 userInfo];
    if (v6)
    {
      id v7 = objc_alloc_init((Class)NSArray);
      id v8 = [v6 objectForKeyedSubscript:@"isPlaceholder"];

      if (v8) {
        id v8 = sub_1002680CC(v6, @"isPlaceholder", 0);
      }
      uint64_t v9 = [v6 objectForKeyedSubscript:@"bundleIDs"];

      if (v9)
      {
        uint64_t v10 = sub_100267F88(v6, @"bundleIDs");

        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        id v7 = v10;
        id v11 = (char *)[v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v16;
          while (2)
          {
            id v14 = 0;
            do
            {
              if (*(void *)v16 != v13) {
                objc_enumerationMutation(v7);
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {

                goto LABEL_18;
              }
              ++v14;
            }
            while (v12 != v14);
            id v12 = (char *)[v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }
      }
      if (objc_msgSend(v7, "count", v15)) {
        v5[2](v5, v8, v7);
      }
LABEL_18:
    }
  }
}

void sub_1003A92F0(id a1, BOOL a2, NSArray *a3)
{
  id v4 = a3;
  sub_1003AC2DC((uint64_t)ODRLaunchServicesObserver, v4);
  if (!a2)
  {
    id v5 = sub_1002C5D90();
    sub_1002C735C(v5, v4);

    uint64_t v6 = +[LaunchHistory shared];
    [v6 clearLaunchHistoryWithBundleIDs:v4];

    id v7 = +[UpdatesManager sharedManager];
    [v7 verifyPendingUpdates:v4];

    id v8 = sub_1002705B4();
    sub_100275C4C(v8, v4);

    uint64_t v9 = sub_1002E1CF4();
    sub_1002E3CD0((uint64_t)v9, v4, 3);

    sub_1003EC004((uint64_t)ManageSubscriptionsPrompter, v4);
    +[GaletteAppDeleteAlertManager handleUninstalledAppsWithBundleIDs:v4];
    sub_1003792F4((uint64_t)StoreKitExternalNotificationService, v4);
    sub_1003CD348((uint64_t)InstallAttributionManager, v4);
    uint64_t v10 = sub_1002D7CE8();
    sub_1002D90A8((uint64_t)v10, v4);
  }
  if ([(NSArray *)v4 containsObject:@"com.apple.AppStore"])
  {
    id v11 = +[UpdatesManager sharedManager];
    [v11 dropAllUpdatesIncludingVPP:0];

    id v12 = +[NSUserDefaults standardUserDefaults];
    [v12 removePersistentDomainForName:@"com.apple.AppStore"];

    uint64_t v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Reset App Store defaults on uninstall", v14, 2u);
    }
  }
}

id *sub_1003A94EC(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)RequestThrottleRecord;
    id v14 = (id *)objc_msgSendSuper2(&v16, "init");
    a1 = v14;
    if (v14)
    {
      objc_storeStrong(v14 + 1, a3);
      objc_storeStrong(a1 + 3, a4);
      objc_storeStrong(a1 + 2, a5);
      objc_storeStrong(a1 + 4, a2);
    }
  }

  return a1;
}

double sub_1003A95D0(void *a1, void *a2)
{
  if (!a1) {
    return 0.0;
  }
  id v3 = a2;
  objc_msgSend(v3, "timeIntervalSinceDate:", objc_getProperty(a1, v4, 32, 1));
  double v6 = v5;

  return v6;
}

id sub_1003A9634(id result, void *a2)
{
  if (result)
  {
    id v2 = result;
    id v3 = a2;
    id v5 = objc_msgSend(objc_getProperty(v2, v4, 16, 1), "isEqualToString:", v3);

    return v5;
  }
  return result;
}

id *sub_1003A9994(void *a1, void *a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  v20[0] = @"artwork_url";
  v20[1] = @"automatic_type";
  void v20[2] = @"approved";
  v20[3] = @"arcade";
  void v20[4] = @"bundle_id";
  v20[5] = @"bundle_name";
  v20[6] = @"bundle_url";
  v20[7] = @"bundle_version";
  v20[8] = @"cancel_if_duplicate";
  v20[9] = @"client_id";
  v20[10] = @"client_type";
  v20[11] = @"companion_bundle_id";
  v20[12] = @"coordinator_id";
  v20[13] = @"coordinator_intent";
  v20[14] = @"external_id";
  v20[15] = @"gizmo_pairing_id";
  uint8_t v20[16] = @"has_messages_extension";
  v20[17] = @"item_id";
  v20[18] = @"launch_prohibited";
  v20[19] = @"log_code";
  v20[20] = @"messages_artwork_url";
  v20[21] = @"metrics_install_type";
  v20[22] = @"placeholder_entitlements";
  v20[23] = @"post_processing_state";
  v20[24] = @"priority";
  v20[25] = @"remote_install";
  v20[26] = @"requires_rosetta";
  v20[27] = @"restore_type";
  v20[28] = @"runs_on_apple_silicon";
  v20[29] = @"runs_on_intel";
  v20[30] = @"software_platform";
  v20[31] = @"source_type";
  v20[32] = @"store_metadata";
  v20[33] = @"supports_32bit_only";
  v20[34] = @"update_type";
  v20[35] = @"IFNULL(app_install.priority, 0)";
  id v5 = a3;
  id v6 = a2;
  id v7 = +[NSArray arrayWithObjects:v20 count:36];
  id v8 = [(SQLiteMemoryEntity *)[AppInstall alloc] initWithDatabaseEntity:v6 properties:v7];

  v19[0] = @"archive_type";
  v19[1] = @"bytes_offset";
  void v19[2] = @"data_promise_id";
  v19[3] = @"initial_odr_size";
  void v19[4] = @"package_url";
  void v19[5] = @"variant_id";
  uint64_t v9 = +[NSArray arrayWithObjects:v19 count:6];
  id v10 = [v5 connection];

  id v11 = sub_1004250B4(v8, v10, v9);

  id v12 = v8;
  id v13 = v11;
  v18.receiver = a1;
  v18.super_class = (Class)AppInstallPreambleTask;
  id v14 = (id *)objc_msgSendSuper2(&v18, "init");
  long long v15 = v14;
  if (v14)
  {
    objc_storeStrong(v14 + 6, v8);
    objc_storeStrong(v15 + 8, v11);
    v15[5] = sub_10026E91C(v15[6], @"automatic_type");
    v15[10] = sub_10026E91C(v15[6], @"restore_type");
    v15[11] = sub_10026E91C(v15[6], @"source_type");
    v15[12] = sub_10026E91C(v15[6], @"update_type");
  }

  objc_super v16 = v15;
  return v16;
}

id sub_1003A9D50(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    id v2 = v1[9];
    objc_sync_exit(v1);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id *sub_1003A9DB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  self;
  id v8 = sub_1003AB218((id *)[AppInstallPreambleResponse alloc], a2, 0, v7, v6);

  return v8;
}

id *sub_1003A9E40(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  self;
  id v5 = sub_1003AB218((id *)[AppInstallPreambleResponse alloc], a2, (void *)2, 0, v4);

  return v5;
}

id *sub_1003A9EB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  self;
  id v8 = sub_1003AB218((id *)[AppInstallPreambleResponse alloc], a2, (void *)2, v7, v6);

  return v8;
}

id *sub_1003AB218(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)AppInstallPreambleResponse;
    id v12 = (id *)objc_msgSendSuper2(&v14, "init");
    a1 = v12;
    if (v12)
    {
      v12[1] = a2;
      void v12[4] = a3;
      objc_storeStrong(v12 + 2, a4);
      objc_storeStrong(a1 + 3, a5);
    }
  }

  return a1;
}

void sub_1003AB8C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v9;
      __int16 v13 = 2114;
      id v14 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@]: Purchase completed with error: %{public}@", (uint8_t *)&v11, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@]: Purchase completed successfully", (uint8_t *)&v11, 0xCu);
  }

  sub_1003AB9FC(*(unsigned char **)(a1 + 40), v6);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1003AB9FC(unsigned char *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    sub_1000079C8(a1, v3);
    a1[24] = [v3 success];
    id v6 = [v3 error];

    id v4 = ASDErrorWithSafeUserInfo();
    objc_setProperty_atomic_copy(a1, v5, v4, 32);
  }
}

void sub_1003ABAA4(uint64_t a1, void *a2, char a3)
{
  id v4 = a2;
  uint64_t v5 = self;
  id v6 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.ODRLaunchServicesObserver"];
  id v7 = sub_1001F5C30();
  sub_1001F5D40(v7);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003ABB8C;
  v8[3] = &unk_10052B860;
  char v9 = a3;
  void v8[4] = v5;
  [v4 enumerateObjectsUsingBlock:v8];
}

void sub_1003ABB8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v16 = 0;
  id v4 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v3 allowPlaceholder:1 error:&v16];
  id v5 = v16;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      objc_super v18 = v3;
      __int16 v19 = 2114;
      id v20 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error looking up app with id %{public}@: %{public}@", buf, 0x16u);
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    id v7 = (char *)[v4 installType];
    self;
    if ((unint64_t)(v7 - 7) < 3)
    {
      id v8 = [ODRApplication alloc];
      char v9 = [v4 bundleIdentifier];
      uint64_t v10 = sub_1003B9478(v8, v9);

      int v11 = v10;
      self;
      uint64_t v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        objc_super v18 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Handling application demotion: %{public}@", buf, 0xCu);
      }

      __int16 v13 = sub_1001F6CE4([ODRApplicationPurgeTask alloc], v11, 4);
      sub_10026F10C((uint64_t)ODRTaskQueue, v13, 17);

      goto LABEL_20;
    }
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_15;
    }
  }
  if (!v4)
  {
LABEL_15:
    int v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138543362;
      objc_super v18 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Application %{public}@ is invalid, ignoring the install notification from LaunchServices", buf, 0xCu);
    }
  }
  else
  {
    id v14 = sub_1003B9994((uint64_t)ODRApplication, v4);
    if (v14)
    {
      int v11 = v14;
      sub_1003ABEA0(*(void *)(a1 + 32), v14);
    }
    else
    {
      long long v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        objc_super v18 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Application %{public}@ wasn't installed, ignoring the install notification from LaunchServices", buf, 0xCu);
      }

      int v11 = 0;
    }
  }
LABEL_20:
}

void sub_1003ABEA0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Handling application installation: %{public}@", (uint8_t *)&buf, 0xCu);
  }

  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 1;
  id v4 = sub_1002393C4();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1003AC530;
  void v10[3] = &unk_100523B10;
  p_long long buf = &buf;
  id v5 = v2;
  id v11 = v5;
  [v4 readUsingSession:v10];

  uint64_t v6 = *(void *)(*((void *)&buf + 1) + 24);
  switch(v6)
  {
    case 0:
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int16 v13 = 138543362;
      id v14 = v5;
      id v8 = "Cleaning up after installation for %{public}@ as ODR is no longer supported";
      break;
    case 1:
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int16 v13 = 138543362;
      id v14 = v5;
      id v8 = "Ignoring installation for %{public}@ as it does not appear to support ODR";
      break;
    case 2:
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int16 v13 = 138543362;
      id v14 = v5;
      id v8 = "Handling installation for %{public}@ as a new ODR application";
      break;
    case 3:
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int16 v13 = 138543362;
      id v14 = v5;
      id v8 = "Handling installation for %{public}@ as an updated ODR application";
      break;
    case 4:
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int16 v13 = 138543362;
      id v14 = v5;
      id v8 = "Handling installation for %{public}@ as an ODR application needing repair";
      break;
    case 5:
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int16 v13 = 138543362;
      id v14 = v5;
      id v8 = "Ignoring installation for %{public}@ as it already up to date";
      break;
    default:
      goto LABEL_18;
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v13, 0xCu);
LABEL_17:

  uint64_t v6 = *(void *)(*((void *)&buf + 1) + 24);
LABEL_18:
  if ((unint64_t)(v6 - 2) < 2)
  {
    char v9 = sub_10035FE84([ODRApplicationImportTask alloc], v5);
    sub_10026F10C((uint64_t)ODRTaskQueue, v9, 17);
    goto LABEL_24;
  }
  if (v6 == 4)
  {
    char v9 = sub_100283AA0([ODRApplicationRepairTask alloc], v5);
    sub_10026F10C((uint64_t)ODRTaskQueue, v9, 17);
    goto LABEL_24;
  }
  if (!v6)
  {
    char v9 = sub_10038D37C([ODRApplicationCleanTask alloc], v5);
    sub_10026F10C((uint64_t)ODRTaskQueue, v9, 17);
LABEL_24:
  }
  _Block_object_dispose(&buf, 8);
}

void sub_1003AC280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003AC2DC(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v4 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.ODRLaunchServicesObserver"];
  id v5 = sub_1001F5C30();
  sub_1001F5D40(v5);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003AC3B4;
  v6[3] = &unk_10052B880;
  void v6[4] = v3;
  [v2 enumerateObjectsUsingBlock:v6];
}

void sub_1003AC3B4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003B9318((uint64_t)ODRApplication, a2);
  if (sub_1003BAB60((uint64_t)v3))
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138543362;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Placeholder for application %{public}@ removed, re-verifying installed application", (uint8_t *)&v8, 0xCu);
    }

    sub_1003ABEA0(*(void *)(a1 + 32), v3);
  }
  else
  {
    id v5 = v3;
    self;
    uint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Handling application un-installation: %{public}@", (uint8_t *)&v8, 0xCu);
    }

    id v7 = sub_10038D37C([ODRApplicationCleanTask alloc], v5);
    sub_10026F10C((uint64_t)ODRTaskQueue, v7, 17);
  }
}

uint64_t sub_1003AC530(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1001F8DDC(a2, *(void **)(a1 + 32));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id sub_1003AC668(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  v6.receiver = a1;
  v6.super_class = (Class)LaunchEvent;
  id v3 = objc_msgSendSuper2(&v6, "init");
  if (v3)
  {
    id v4 = +[NSNumber numberWithUnsignedChar:a2];
    [v3 setValue:v4 forProperty:@"event_source"];
  }
  return v3;
}

id sub_1003AC978(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"bundle_id"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003AC9B0(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"launch_start_time"];
    id v2 = v1;
    if (v1)
    {
      id v3 = v1;
    }
    else
    {
      id v3 = +[NSDate distantPast];
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_1003ACA24(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"launch_end_time"];
    id v2 = v1;
    if (v1)
    {
      id v3 = v1;
    }
    else
    {
      id v3 = +[NSDate distantFuture];
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_1003ACA98(void *a1)
{
  if (a1)
  {
    uint64_t v1 = sub_1003ACE48(a1);
    id v2 = v1;
    if (v1)
    {
      id v3 = [v1 objectForKeyedSubscript:@"lr"];
    }
    else
    {
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id sub_1003ACB08(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = [a1 valueForProperty:@"is_extension"];
  if (objc_opt_respondsToSelector()) {
    id v2 = [v1 BOOLValue];
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id sub_1003ACB70(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"containing_bundle_id"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003ACBA8(void *a1)
{
  if (a1)
  {
    id v2 = +[NSMutableDictionary dictionary];
    id v3 = sub_1003ACA24(a1);
    id v4 = sub_1002826D4(v3);
    [v2 setObject:v4 forKeyedSubscript:@"Last Launch"];

    id v5 = [a1 valueForProperty:@"bundle_id"];
    [v2 setObject:v5 forKeyedSubscript:@"bundleID"];

    unsigned int v6 = sub_1003ACE00(a1);
    if (v6 > 8) {
      id v7 = @"App Launch";
    }
    else {
      id v7 = *(&off_10052B8A0 + (char)v6);
    }
    int v8 = v7;
    [v2 setObject:v8 forKeyedSubscript:@"Type"];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

AppLaunchEvent *sub_1003ACCB8(AppLaunchEvent *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = objc_alloc_init(AppLaunchEvent);
    id v5 = sub_1003AC9B0(v2);
    if (v3) {
      objc_setProperty_nonatomic_copy(v3, v4, v5, 24);
    }

    unsigned int v6 = [(AppLaunchEvent *)v2 valueForProperty:@"bundle_id"];
    int v8 = v6;
    if (v3)
    {
      objc_setProperty_nonatomic_copy(v3, v7, v6, 40);

      v3->_isExtensionUsage = sub_1003ACB08(v2);
    }
    else
    {

      sub_1003ACB08(v2);
    }
    uint64_t v10 = [(AppLaunchEvent *)v2 valueForProperty:@"containing_bundle_id"];
    if (v3) {
      objc_setProperty_nonatomic_copy(v3, v9, v10, 128);
    }

    uint64_t v12 = sub_1003ACA98(v2);
    if (v3) {
      objc_setProperty_nonatomic_copy(v3, v11, v12, 32);
    }

    unsigned int v13 = sub_1003ACE00(v2) - 5;
    if (v13 >= 3) {
      a1 = v3;
    }
    else {
      a1 = 0;
    }
    if (v13 <= 2 && v3)
    {
      v3->_sourceStream = v13 + 4;
      a1 = v3;
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003ACE00(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"event_source"];
    id v2 = [v1 unsignedCharValue];

    return v2;
  }
  return result;
}

id sub_1003ACE48(void *a1)
{
  if (a1)
  {
    a1 = sub_10026EAC4(a1, @"payload");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003ACE80(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E8A4(a1, @"timestamp");
    uint64_t v1 = vars8;
  }
  return a1;
}

void *sub_1003ACEB8(void *a1, const char *a2)
{
  if (a1) {
    return [a1 setValue:a2 forProperty:@"bundle_id"];
  }
  return a1;
}

void *sub_1003ACED0(void *a1, const char *a2)
{
  if (a1) {
    return [a1 setValue:a2 forProperty:@"containing_bundle_id"];
  }
  return a1;
}

void *sub_1003ACEE8(void *a1, const char *a2)
{
  if (a1) {
    return [a1 setValue:a2 forProperty:@"launch_end_time"];
  }
  return a1;
}

void *sub_1003ACF00(void *a1, const char *a2)
{
  if (a1) {
    return [a1 setValue:a2 forProperty:@"launch_start_time"];
  }
  return a1;
}

void sub_1003ACF18(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithBool:a2];
    [a1 setValue:v3 forProperty:@"is_extension"];
  }
}

void sub_1003ACF88(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v6 = v3;
    id v4 = sub_1003ACE48(a1);
    id v5 = [v4 mutableCopy];

    if (!v5)
    {
      id v5 = +[NSMutableDictionary dictionary];
    }
    [v5 setObject:v6 forKeyedSubscript:@"lr"];
    [a1 setValue:v5 forProperty:@"payload"];

    id v3 = v6;
  }
}

uint64_t sub_1003AD568(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 80;
        goto LABEL_30;
      case 2u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 88;
        goto LABEL_30;
      case 3u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
        goto LABEL_30;
      case 4u:
        long long v15 = objc_alloc_init(TFDisplay);
        objc_storeStrong((id *)(a1 + 64), v15);
        if (!PBReaderPlaceMark() || !sub_100392BB4((uint64_t)v15, a2)) {
          goto LABEL_81;
        }
        goto LABEL_40;
      case 5u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 72;
        goto LABEL_30;
      case 6u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 96;
        goto LABEL_30;
      case 7u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 24;
        goto LABEL_30;
      case 8u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 32;
LABEL_30:
        uint64_t v16 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_79;
      case 9u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 104) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v19 |= (unint64_t)(v21 & 0x7F) << v17;
            if (v21 < 0)
            {
              v17 += 7;
              BOOL v9 = v18++ >= 9;
              if (v9)
              {
                LODWORD(v19) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_65:
        uint64_t v34 = 40;
        goto LABEL_78;
      case 0xAu:
        long long v15 = objc_alloc_init(TFMemoryUsage);
        objc_storeStrong((id *)(a1 + 56), v15);
        if (PBReaderPlaceMark() && sub_1002EB368((uint64_t)v15, a2))
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_79:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
LABEL_81:

        return 0;
      case 0xBu:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 104) |= 1u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v19 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v19) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_69:
        uint64_t v34 = 16;
        goto LABEL_78;
      case 0xCu:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 104) |= 4u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v19) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_73:
        uint64_t v34 = 44;
        goto LABEL_78;
      case 0xDu:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 104) |= 8u;
        while (2)
        {
          unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v19 |= (unint64_t)(v33 & 0x7F) << v30;
            if (v33 < 0)
            {
              v30 += 7;
              BOOL v9 = v31++ >= 9;
              if (v9)
              {
                LODWORD(v19) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_77:
        uint64_t v34 = 48;
LABEL_78:
        *(_DWORD *)(a1 + v34) = v19;
        goto LABEL_79;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_79;
    }
  }
}

void sub_1003ADD2C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

void sub_1003ADD44(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 88), a2);
  }
}

void sub_1003ADD5C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_1003ADD74(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 64), a2);
  }
}

void sub_1003ADD8C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_1003ADDA4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 96), a2);
  }
}

void sub_1003ADDBC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_1003ADDD4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void sub_1003ADDEC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

void sub_1003AE4F4(id a1)
{
  uint64_t v1 = objc_alloc_init(LibraryService);
  id v2 = (void *)qword_1005B1128;
  qword_1005B1128 = (uint64_t)v1;
}

void sub_1003AE858(uint64_t a1)
{
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x3032000000;
  unsigned int v36 = sub_100018398;
  uint64_t v37 = sub_100017D88;
  id v38 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id obj = 0;
  BOOL v4 = sub_10000FCE4(v2, v3, &obj);
  objc_storeStrong(&v38, obj);
  if (v4)
  {
    [*(id *)(a1 + 40) allowEvaluation];
    unsigned int v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v6 = *(void **)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 56);
      char v8 = [v6 processInfo];
      id v9 = [v8 bundleIdentifier];
      int v10 = [*(id *)(a1 + 40) predicateFormat];
      *(_DWORD *)long long buf = 138544130;
      id v40 = v6;
      __int16 v41 = 2114;
      uint64_t v42 = v7;
      __int16 v43 = 2114;
      id v44 = v9;
      __int16 v45 = 2114;
      id v46 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ Starting query on device %{public}@ for %{public}@: %{public}@", buf, 0x2Au);
    }
    id v11 = +[NSMutableArray array];
    uint64_t v12 = +[NRPairedDeviceRegistry sharedInstance];
    uint64_t v13 = [v12 deviceForPairingID:*(void *)(a1 + 56)];

    if (v13)
    {
      id v14 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:*(void *)(a1 + 56)];
      if (!v14)
      {
        long long v15 = *(void **)(*(void *)(a1 + 32) + 48);
        uint64_t v16 = *(void *)(a1 + 56);
        id v14 = sub_1002CA0A8([RemoteApplicationCatalog alloc], v13);
        [v15 setObject:v14 forKeyedSubscript:v16];
      }
      uint64_t v17 = *(void *)(a1 + 40);
      unsigned int v18 = +[NSSet set];
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_1003AECBC;
      v27[3] = &unk_10052BA38;
      id v28 = v11;
      unsigned int v31 = &v33;
      id v29 = *(id *)(a1 + 48);
      id v30 = *(id *)(a1 + 64);
      [v14 executeQuery:v17 excludingBundleIDs:v18 usingBlock:v27];
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 64);
      id v14 = ASDErrorWithDescription();
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v14);
    }
  }
  else
  {
    uint64_t v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      char v21 = *(void **)(a1 + 48);
      uint64_t v22 = *(void *)(a1 + 56);
      unsigned int v23 = [v21 processInfo];
      id v24 = [v23 bundleIdentifier];
      char v25 = [*(id *)(a1 + 40) predicateFormat];
      uint64_t v26 = v34[5];
      *(_DWORD *)long long buf = 138544386;
      id v40 = v21;
      __int16 v41 = 2114;
      uint64_t v42 = v22;
      __int16 v43 = 2114;
      id v44 = v24;
      __int16 v45 = 2114;
      id v46 = v25;
      __int16 v47 = 2114;
      uint64_t v48 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@ Query on device %{public}@ failed for %{public}@: %{public}@ error: %{public}@", buf, 0x34u);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  _Block_object_dispose(&v33, 8);
}

void sub_1003AEC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003AECBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5) {
    [*(id *)(a1 + 32) addObjectsFromArray:v5];
  }
  else {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  }
  if (![*(id *)(a1 + 32) count])
  {
    char v8 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    uint64_t v12 = *(void *)(a1 + 40);
    int v20 = 138543362;
    uint64_t v21 = v12;
    uint64_t v13 = "%{public}@ Completed with no results";
    id v14 = v8;
    uint32_t v15 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v20, v15);
    goto LABEL_13;
  }
  id v7 = [*(id *)(a1 + 32) count];
  char v8 = ASDLogHandleForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v7 != (id)1)
  {
    if (!v9) {
      goto LABEL_13;
    }
    uint64_t v16 = *(void *)(a1 + 40);
    id v17 = [*(id *)(a1 + 32) count];
    int v20 = 138543618;
    uint64_t v21 = v16;
    __int16 v22 = 2048;
    id v23 = v17;
    uint64_t v13 = "%{public}@ Completed with %lu result(s)";
    id v14 = v8;
    uint32_t v15 = 22;
    goto LABEL_12;
  }
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = [*(id *)(a1 + 32) firstObject];
    int v20 = 138543618;
    uint64_t v21 = v10;
    __int16 v22 = 2114;
    id v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Completed with 1 result: %{public}@", (uint8_t *)&v20, 0x16u);
  }
LABEL_13:

  uint64_t v18 = *(void *)(a1 + 48);
  id v19 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id, void))(v18 + 16))(v18, v19, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
}

void sub_1003AFCFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [*(id *)(a1 + 32) bundleID];

  if (!v3 && v4)
  {
    id v5 = +[UpdatesManager sharedManager];
    id v6 = [*(id *)(a1 + 32) bundleID];
    char v8 = v6;
    id v7 = +[NSArray arrayWithObjects:&v8 count:1];
    [v5 verifyPendingUpdates:v7];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

NSArray *__cdecl sub_1003AFF48(id a1, NSArray *a2)
{
  uint64_t v7 = ASDAppLibraryServiceNotificationKeyAction;
  uint64_t v8 = ASDAppLibraryServiceNotificationActionRefresh;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  id v3 = +[ASDNotification notificationWithName:ASDAppLibraryServiceNotificationName userInfo:v2];
  id v6 = v3;
  BOOL v4 = +[NSArray arrayWithObjects:&v6 count:1];

  return (NSArray *)v4;
}

void sub_1003B0040(id a1)
{
  uint64_t v1 = objc_alloc_init(PredicateValidator);
  uint64_t v2 = (void *)qword_1005B1138;
  qword_1005B1138 = (uint64_t)v1;

  uint64_t v3 = qword_1005B1138;
  if (qword_1005B1138) {
    *(_WORD *)(qword_1005B1138 + _Block_object_dispose(&a9, 8) = 257;
  }
  BOOL v4 = sub_10038E420();
  if (v3)
  {
    id v7 = v4;
    id v5 = [v4 copy];
    id v6 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v5;

    BOOL v4 = v7;
    *(unsigned char *)(v3 + 11) = 1;
    *(unsigned char *)(v3 + 1_Block_object_dispose(&a9, 8) = 1;
  }
}

void sub_1003B0170(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 48), "objectForKeyedSubscript:");
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      BOOL v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v6 = 138543362;
        uint64_t v7 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing remote catalog after unpairing finished for: %{public}@", (uint8_t *)&v6, 0xCu);
      }

      [*(id *)(*(void *)(a1 + 40) + 48) removeObjectForKey:*(void *)(a1 + 32)];
    }
  }
}

id sub_1003B0C40(id *a1, int a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = sub_1002E1C14((uint64_t)MetricsCoordinator, 5);
    if (v5)
    {
      int v6 = +[NSMutableArray array];
      id v40 = v5;
      uint64_t v7 = sub_1003B2E28(a1, v5);
      if ([v7 count]) {
        [v6 addObjectsFromArray:v7];
      }
      id v39 = v7;
      uint64_t v8 = +[NSMutableArray array];
      BOOL v9 = sub_10038F000();
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1003B3814;
      uint64_t v52 = &unk_10052BAF0;
      char v54 = a2;
      id v10 = v8;
      id v53 = v10;
      [v9 readUsingSession:buf];

      if ([v10 count])
      {
        id v11 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = [a1 logKey];
          id v13 = [v10 count];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Found %ld unposted events", buf, 0x16u);
        }
        [v6 addObjectsFromArray:v10];
      }
      id v37 = v10;
      id v14 = v6;
      uint64_t v42 = +[NSMutableArray array];
      __int16 v41 = +[NSMutableArray array];
      id v44 = +[NSMutableArray array];
      id v43 = +[NSMutableArray array];
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      id obj = v14;
      id v15 = [obj countByEnumeratingWithState:&v47 objects:buf count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v48;
        do
        {
          uint64_t v18 = 0;
          do
          {
            if (*(void *)v48 != v17) {
              objc_enumerationMutation(obj);
            }
            id v19 = *(void **)(*((void *)&v47 + 1) + 8 * (void)v18);
            if (!v19)
            {
LABEL_26:
              unsigned int v27 = -[AppMetricsEvent engagementData]_0(v19);
              id v21 = [v27 mutableCopy];

              if (a2)
              {
                if (v19) {
                  id v28 = sub_10026E7EC(v19, @"has_been_posted");
                }
                else {
                  id v28 = 0;
                }
                id v29 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v28, v37);
                [v21 setObject:v29 forKeyedSubscript:@"posted"];
              }
              uint64_t v26 = v42;
              goto LABEL_31;
            }
            if (sub_10026E91C(*(id *)(*((void *)&v47 + 1) + 8 * (void)v18), @"event_type") == 2)
            {
              int v20 = [v19 valueForProperty:@"payload"];
              id v21 = [v20 mutableCopy];

              __int16 v22 = [v19 valueForProperty:@"timestamp"];

              if (v22)
              {
                id v23 = [v19 valueForProperty:@"timestamp"];
                id v24 = sub_100333B60((uint64_t)MetricsHandler, v23);
                [v21 setObject:v24 forKeyedSubscript:@"eventTime"];
              }
              if (a2)
              {
                char v25 = +[NSNumber numberWithBool:sub_10026E7EC(v19, @"has_been_posted")];
                [v21 setObject:v25 forKeyedSubscript:@"posted"];
              }
              uint64_t v26 = v44;
            }
            else
            {
              if (!sub_10026E91C(v19, @"event_type")) {
                goto LABEL_26;
              }
              if (sub_10026E91C(v19, @"event_type") != 1
                || sub_10026E91C(v19, @"event_subtype") != 4
                || (sub_10026E7EC(v19, @"has_been_posted") & 1) != 0)
              {
                objc_msgSend(v43, "addObject:", v19, v37);
                goto LABEL_32;
              }
              id v30 = [v19 valueForProperty:@"payload"];
              id v21 = [v30 mutableCopy];

              if (a2)
              {
                unsigned int v31 = +[NSNumber numberWithBool:sub_10026E7EC(v19, @"has_been_posted")];
                [v21 setObject:v31 forKeyedSubscript:@"posted"];
              }
              uint64_t v26 = v41;
            }
LABEL_31:
            objc_msgSend(v26, "addObject:", v21, v37);

LABEL_32:
            uint64_t v18 = (char *)v18 + 1;
          }
          while (v16 != v18);
          id v32 = [obj countByEnumeratingWithState:&v47 objects:buf count:16];
          id v16 = v32;
        }
        while (v32);
      }

      uint64_t v5 = v40;
      if ([v42 count])
      {
        uint64_t v33 = sub_1003B36D4(v42, 6);
        if (v33) {
          [v43 addObject:v33];
        }
      }
      if (objc_msgSend(v44, "count", v37))
      {
        uint64_t v34 = sub_1003B36D4(v44, 8);
        if (v34) {
          [v43 addObject:v34];
        }
      }
      if ([v41 count])
      {
        uint64_t v35 = sub_1003B36D4(v41, 7);
        if (v35) {
          [v43 addObject:v35];
        }
      }
    }
    else if (a3)
    {
      ASDErrorWithTitleAndMessage();
      id v43 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v43 = 0;
    }
  }
  else
  {
    id v43 = 0;
  }
  return v43;
}

void sub_1003B12C8(void *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v5 = [v3 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v25;
      uint64_t v8 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
      do
      {
        BOOL v9 = 0;
        do
        {
          if (*(void *)v25 != v7) {
            objc_enumerationMutation(v4);
          }
          id v10 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v9);
          id v11 = (void *)a1[8];
          if (!v11)
          {
            id v12 = objc_alloc((Class)v8[266]);
            id v13 = sub_10030B11C();
            id v14 = [v12 initWithBag:v13];
            id v15 = (void *)a1[8];
            a1[8] = v14;

            id v11 = (void *)a1[8];
          }
          id v16 = v11;
          uint64_t v17 = [v10 engagementData];
          uint64_t v18 = [v16 enqueueData:v17];

          id v23 = 0;
          id v19 = [v18 resultWithTimeout:&v23 error:30.0];
          id v20 = v23;

          if (v20 || !v19)
          {
            id v21 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              __int16 v22 = [a1 logKey];
              *(_DWORD *)long long buf = 138412546;
              id v29 = v22;
              __int16 v30 = 2114;
              id v31 = v20;
              _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[%@] AMSEngagement enqueue resulted in error: %{public}@", buf, 0x16u);

              uint64_t v8 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
            }
          }
          BOOL v9 = (char *)v9 + 1;
        }
        while (v6 != v9);
        id v6 = [v4 countByEnumeratingWithState:&v24 objects:v32 count:16];
      }
      while (v6);
    }
  }
}

void sub_1003B1B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

id sub_1003B1B7C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = +[NSMutableDictionary dictionary];
    [v7 setObject:v5 forKeyedSubscript:@"bundleId"];
    id v8 = a1[3];

    if (v8)
    {
      id v9 = a1[3];
      [v7 setObject:v9 forKeyedSubscript:@"dsid"];
    }
    id v10 = [a1 deviceID];
    [v7 setObject:v10 forKeyedSubscript:@"usageClientId"];

    id v11 = sub_100335BA8(a1);
    [v7 setObject:v11 forKeyedSubscript:@"os"];

    id v12 = +[AMSDevice productVersion];
    [v7 setObject:v12 forKeyedSubscript:@"osBuildNumber"];

    id v13 = sub_100335B28(a1);
    [v7 setObject:v13 forKeyedSubscript:@"platform"];

    id v14 = [a1 topic];
    [v7 setObject:v14 forKeyedSubscript:@"topic"];

    if (v6)
    {
      id v15 = sub_1003A3F54(v6);
      [v7 setObject:v15 forKeyedSubscript:@"bundleVersion"];

      id v16 = [v6 valueForProperty:@"evid"];
      [v7 setObject:v16 forKeyedSubscript:@"externalVersionId"];

      if (sub_1003A400C(v6)) {
        [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"isArcade"];
      }
      uint64_t v17 = [v6 valueForProperty:@"item_id"];
      [v7 setObject:v17 forKeyedSubscript:@"itemId"];

      uint64_t v18 = [v6 valueForProperty:@"short_version"];
      [v7 setObject:v18 forKeyedSubscript:@"shortAppVersion"];

      id v19 = [v6 valueForProperty:@"storefront"];
      [v7 setObject:v19 forKeyedSubscript:@"storefront"];
    }
    uint64_t v20 = sub_1003B3624((uint64_t)a1);
    if (v20)
    {
      id v21 = (void *)v20;
      __int16 v22 = sub_1003B3624((uint64_t)a1);
      id v23 = [v22 objectForKeyedSubscript:v5];

      if (v23)
      {
        long long v24 = sub_1003B3624((uint64_t)a1);
        long long v25 = [v24 objectForKeyedSubscript:v5];
        long long v26 = [v25 objectForKeyedSubscript:@"powerUsage"];
        [v7 setObject:v26 forKeyedSubscript:@"batteryUsage"];

        long long v27 = sub_1003B3624((uint64_t)a1);
        id v28 = [v27 objectForKeyedSubscript:v5];
        id v29 = [v28 objectForKeyedSubscript:@"DRAMUsage"];
        [v7 setObject:v29 forKeyedSubscript:@"batteryDRAMUsage"];
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t sub_1003B1F14(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = sub_10040D20C(a2, v3, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  return 1;
}

void sub_1003B24C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t sub_1003B24EC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = sub_10040D20C(a2, v3, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  return 1;
}

BOOL sub_1003B2B48(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v10 = 0;
  id v5 = sub_10040D20C(a2, v4, &v10);
  id v6 = v10;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = [*(id *)(a1 + 40) logKey];
      *(_DWORD *)long long buf = 138412546;
      id v12 = v9;
      __int16 v13 = 2114;
      id v14 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Error persisting launch events: %{public}@", buf, 0x16u);
    }
  }

  return v6 == 0;
}

id sub_1003B2E28(id *a1, void *a2)
{
  id v3 = a2;
  id v21 = v3;
  if (a1)
  {
    id v4 = v3;
    id v23 = +[NSMutableArray array];
    [a1 getCrashEventsSinceDate:v4];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v5 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v25;
      do
      {
        for (id i = 0; i != v6; id i = (char *)i + 1)
        {
          if (*(void *)v25 != v7) {
            objc_enumerationMutation(obj);
          }
          id v9 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          id v10 = sub_10022E5E8(v9);
          id v11 = a1[5];
          id v12 = [v11 objectForKeyedSubscript:v10];

          if (v12)
          {
            id v13 = a1[5];
            id v14 = [v13 objectForKeyedSubscript:v10];
            id v15 = sub_1003B1B7C(a1, v10, v14);

            [v15 setObject:@"crashes" forKeyedSubscript:@"eventType"];
            id v16 = sub_10022EB34(v9);
            uint64_t v17 = sub_100333B60((uint64_t)MetricsHandler, v16);
            [v15 setObject:v17 forKeyedSubscript:@"eventTime"];

            uint64_t v18 = objc_alloc_init(AppMetricsEvent);
            sub_10023A24C(v18, v10);
            sub_10023A320(v18, 0);
            sub_10023A390(v18, 5);
            sub_10023A400(v18, v15);
            [v23 addObject:v18];
          }
        }
        id v6 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v6);
    }
    id v19 = [v23 copy];
  }
  else
  {
    id v19 = 0;
  }

  return v19;
}

uint64_t sub_1003B30C0(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v10 = 0;
  id v5 = sub_10040D20C(a2, v4, &v10);
  id v6 = v10;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = [*(id *)(a1 + 40) logKey];
      *(_DWORD *)long long buf = 138412546;
      id v12 = v9;
      __int16 v13 = 2114;
      id v14 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Supplemental crash metrics event import resulted in error: %{public}@", buf, 0x16u);
    }
  }

  return 1;
}

uint64_t sub_1003B33F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"metrics_type" equalToValue:&off_10054CCC0];
  id v5 = [v3 connection];
  id v6 = sub_1002FF548((uint64_t)AppMetricsEventEntity, v5, v4);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1003B3508;
  void v10[3] = &unk_100522A90;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v3;
  uint64_t v12 = v7;
  id v8 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v10];

  return 1;
}

void sub_1003B3508(uint64_t a1, uint64_t a2)
{
  id v4 = [AppMetricsEventEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  uint64_t v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = [*(id *)(a1 + 40) logKey];
    int v9 = 138412546;
    id v10 = v8;
    __int16 v11 = 2048;
    uint64_t v12 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%@] Removed posted event with pid: %lld", (uint8_t *)&v9, 0x16u);
  }
  [(SQLiteEntity *)v6 deleteFromDatabase];
}

id sub_1003B3624(uint64_t a1)
{
  if (_os_feature_enabled_impl() && !*(void *)(a1 + 72))
  {
    uint64_t v2 = sub_1003B6E30();
    uint64_t v3 = sub_1003B6F0C((uint64_t)v2);
    id v4 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v3;
  }
  id v5 = *(void **)(a1 + 72);
  return v5;
}

AppMetricsEvent *sub_1003B36D4(void *a1, uint64_t a2)
{
  if ((a2 - 6) > 2) {
    id v4 = 0;
  }
  else {
    id v4 = *(&off_10052BB10)[(char)(a2 - 6)];
  }
  v10[0] = @"topic";
  v10[1] = @"eventType";
  v11[0] = @"on_device_personalization";
  v11[1] = v4;
  void v10[2] = @"events";
  v11[2] = a1;
  id v5 = @"on_device_personalization";
  id v6 = a1;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:3];
  id v8 = objc_alloc_init(AppMetricsEvent);
  sub_10023A320(v8, a2);
  sub_10023A400(v8, v7);

  return v8;
}

void sub_1003B3814(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"metrics_type" equalToValue:&off_10054CCC0];
  id v5 = v4;
  if (*(unsigned char *)(a1 + 40))
  {
    id v6 = v4;
  }
  else
  {
    uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"has_been_posted" equalToValue:&__kCFBooleanFalse];
    v14[0] = v5;
    v14[1] = v7;
    id v8 = +[NSArray arrayWithObjects:v14 count:2];
    id v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v8];
  }
  int v9 = [v3 connection];
  id v10 = sub_1002FF548((uint64_t)AppMetricsEventEntity, v9, v6);

  __int16 v11 = sub_1003D6CF0();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1003B39E4;
  v12[3] = &unk_1005213B0;
  id v13 = *(id *)(a1 + 32);
  [v10 enumerateMemoryEntitiesWithProperties:v11 usingBlock:v12];
}

id sub_1003B39E4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_1003B3A54()
{
  self;
  if (qword_1005B1148 != -1) {
    dispatch_once(&qword_1005B1148, &stru_10052BB28);
  }
  uint64_t v0 = (void *)qword_1005B1150;
  return v0;
}

void sub_1003B3AAC(id a1)
{
  uint64_t v1 = objc_alloc_init(DevicePairingMonitor);
  uint64_t v2 = (void *)qword_1005B1150;
  qword_1005B1150 = (uint64_t)v1;
}

void sub_1003B3CA4(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 addObserver:*(void *)(a1 + 32) selector:"_deviceDidBecomeActiveNotification:" name:NRPairedDeviceRegistryDeviceDidBecomeActive object:0];
  [v2 addObserver:*(void *)(a1 + 32) selector:"_deviceDidBecomeInactiveNotification:" name:NRPairedDeviceRegistryDeviceDidBecomeInactive object:0];
  [v2 addObserver:*(void *)(a1 + 32) selector:"_deviceDidPairNotification:" name:NRPairedDeviceRegistryDeviceDidPairNotification object:0];
  [v2 addObserver:*(void *)(a1 + 32) selector:"_deviceDidUnpairNotification:" name:NRPairedDeviceRegistryDeviceDidUnpairNotification object:0];
  sub_1003B3D88(*(void *)(a1 + 32));
}

void sub_1003B3D88(uint64_t a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 8));
  }
  id v3 = +[NRPairedDeviceRegistry sharedInstance];
  id v16 = [v3 getActivePairedDevice];

  if (!v16)
  {
LABEL_7:
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v7 + 8));
    }
    int v8 = *(unsigned __int8 *)(a1 + 40);
    int v9 = ASDLogHandleForCategory();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "(DevicePairingMonitor) Stopped observing paired devices", buf, 2u);
      }

      *(unsigned char *)(a1 + 40) = 0;
      int v9 = +[ACXDeviceConnection sharedDeviceConnection];
      [v9 removeObserver:a1];
      goto LABEL_25;
    }
    if (v10)
    {
      *(_WORD *)uint64_t v20 = 0;
      id v14 = "(DevicePairingMonitor) Paired devices are not currently being observed";
      id v15 = v20;
      goto LABEL_21;
    }
    goto LABEL_25;
  }
  id v4 = v16;
  self;
  id v5 = [v4 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];

  if (objc_opt_respondsToSelector())
  {
    unsigned __int8 v6 = [v5 BOOLValue];

    if (v6) {
      goto LABEL_7;
    }
  }
  else
  {
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v11 + 8));
  }
  int v12 = *(unsigned __int8 *)(a1 + 40);
  int v9 = ASDLogHandleForCategory();
  BOOL v13 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (!v12)
  {
    if (v13)
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "(DevicePairingMonitor) Started observing paired devices", v17, 2u);
    }

    *(unsigned char *)(a1 + 40) = 1;
    int v9 = +[ACXDeviceConnection sharedDeviceConnection];
    [v9 addObserver:a1];
    goto LABEL_25;
  }
  if (v13)
  {
    __int16 v18 = 0;
    id v14 = "(DevicePairingMonitor) Paired devices are already being observed";
    id v15 = (uint8_t *)&v18;
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v14, v15, 2u);
  }
LABEL_25:
}

void sub_1003B409C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003B4144;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    sub_100010468(v5, v6);
  }
}

id sub_1003B4144(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
}

void sub_1003B4150(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003B421C;
    v7[3] = &unk_10052BB50;
    id v8 = v5;
    id v9 = v6;
    sub_1003B4228(a1, (uint64_t)"applicationsUninstalled:onDeviceWithPairingID:", v7);
  }
}

id sub_1003B421C(uint64_t a1, void *a2)
{
  return _[a2 applicationsUninstalled:*(void *)(a1 + 32) onDeviceWithPairingID:*(void *)(a1 + 40)];
}

void sub_1003B4228(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1003B4AC4;
    v8[3] = &unk_100526970;
    void v8[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    sub_100010468(v7, v8);
  }
}

void sub_1003B42D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003B4380;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    sub_100010468(v5, v6);
  }
}

id sub_1003B4380(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

void sub_1003B4428(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:NRPairedDeviceRegistryDevice];

  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 pairingID];
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(DevicePairingMonitor) Polling after device became active: %{public}@", (uint8_t *)&v6, 0xCu);
  }
  sub_1003B3D88(*(void *)(a1 + 40));
}

void sub_1003B45C0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:NRPairedDeviceRegistryDevice];

  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 pairingID];
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(DevicePairingMonitor) Polling after device became inactive: %{public}@", (uint8_t *)&v6, 0xCu);
  }
  sub_1003B3D88(*(void *)(a1 + 40));
}

void sub_1003B4758(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:NRPairedDeviceRegistryDevice];

  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 pairingID];
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(DevicePairingMonitor) Polling after device finished pairing: %{public}@", (uint8_t *)&v6, 0xCu);
  }
  sub_1003B3D88(*(void *)(a1 + 40));
}

void sub_1003B48F0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:NRPairedDeviceRegistryDevice];

  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 pairingID];
    *(_DWORD *)long long buf = 138543362;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(DevicePairingMonitor) Polling after device finished unpairing: %{public}@", buf, 0xCu);
  }
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003B4A60;
    v7[3] = &unk_10052BB78;
    id v8 = v3;
    sub_1003B4228(v6, (uint64_t)"deviceUnpairedWithPairingID:", v7);
  }
  sub_1003B3D88(*(void *)(a1 + 40));
}

void sub_1003B4A60(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 pairingID];
  [v3 deviceUnpairedWithPairingID:v4];
}

void sub_1003B4AC4(uint64_t a1)
{
  sub_100307208();
  uint64_t v2 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue();
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 24);
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * (void)v7);
        if (objc_opt_respondsToSelector())
        {
          v10[0] = _NSConcreteStackBlock;
          v10[1] = 3221225472;
          void v10[2] = sub_1003B4C5C;
          void v10[3] = &unk_100521AE0;
          id v9 = *(id *)(a1 + 40);
          void v10[4] = v8;
          id v11 = v9;
          if (v2) {
            dispatch_async(v2[1], v10);
          }
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }
}

uint64_t sub_1003B4C5C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_1003B4D18(uint64_t a1, void *a2)
{
  return _[a2 applicationDatabaseResyncedForDeviceWithPairingID:*(void *)(a1 + 32)];
}

id sub_1003B4DEC(uint64_t a1, void *a2)
{
  return _[a2 applicationsInstalled:*(void *)(a1 + 32) onDeviceWithPairingID:*(void *)(a1 + 40)];
}

id sub_1003B4ECC(uint64_t a1, void *a2)
{
  return _[a2 applicationsUpdated:*(void *)(a1 + 32) onDeviceWithPairingID:*(void *)(a1 + 40)];
}

id sub_1003B4F98(uint64_t a1, void *a2)
{
  return _[a2 updateInstallProgressForApplication:*(void *)(a1 + 32) progress:*(void *)(a1 + 48) installPhase:*(double *)(a1 + 40)];
}

id sub_1003B5058(uint64_t a1, void *a2)
{
  return _[a2 updateInstallStateForApplication:*(void *)(a1 + 32) installState:*(void *)(a1 + 40)];
}

id sub_1003B5134(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_opt_new();
    if (v3)
    {
      id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v3];
    }
    else
    {
      id v5 = 0;
    }
    uint64_t v6 = [a1 connection];
    id v7 = sub_1002FF548((uint64_t)BetaAppInfoEntity, v6, v5);

    v17[0] = @"bundle_id";
    v17[1] = @"bundle_version";
    v17[2] = @"platform";
    v17[3] = @"bundle_short_version";
    uint64_t v8 = +[NSArray arrayWithObjects:v17 count:4];
    long long v12 = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472;
    long long v14 = sub_1003B5308;
    long long v15 = &unk_1005213B0;
    id v16 = v4;
    id v9 = v4;
    [v7 enumerateMemoryEntitiesWithProperties:v8 usingBlock:&v12];

    uint64_t v10 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v9, v12, v13, v14, v15);
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1003B5308(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_10026E95C(v3, @"bundle_id");
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = sub_10026E95C(v3, @"bundle_version");
  id v5 = sub_10026E91C(v3, @"platform");
  uint64_t v6 = sub_10026E95C(v3, @"bundle_short_version");

  if (v10) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && v6 != 0)
  {
    id v9 = +[ASDBetaAppVersion versionWithBundleID:v10 bundleVersion:v4 platform:v5 andShortVersion:v6];
    [*(id *)(a1 + 32) addObject:v9];
  }
}

id sub_1003B540C(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = [v2 connection];
    id v5 = sub_1003B54B4(v3);

    uint64_t v6 = sub_10030010C((uint64_t)BetaAppFeedbackMetadataMemoryEntity, v4, v5);

    sub_10038E254(v6);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_1003B54B4(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bundleIdentifier];
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v2];

  id v4 = [v1 exactBundleVersion];
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_version" equalToValue:v4];

  uint64_t v6 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"platform", +[ASDBetaAppVersion platformForRecord:v1]);
  BOOL v7 = [v1 shortVersionString];

  uint64_t v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_short_version" equalToValue:v7];

  v12[0] = v3;
  v12[1] = v5;
  void v12[2] = v6;
  v12[3] = v8;
  id v9 = +[NSArray arrayWithObjects:v12 count:4];
  id v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v9];

  return v10;
}

id sub_1003B566C(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = [v2 connection];
    id v5 = sub_1003B54B4(v3);
    uint64_t v6 = sub_10030010C((uint64_t)BetaAppLaunchInfoMemoryEntity, v4, v5);

    sub_100266678(v6);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    BOOL v7 = [v3 iTunesMetadata];

    uint64_t v8 = [v7 artistName];
    [v2 setArtistName:v8];
  }
  return v2;
}

id sub_1003B5748(uint64_t a1, void *a2)
{
  id v2 = (id)a1;
  if (a1)
  {
    id v3 = sub_1003B57E4(a1, a2);
    id v4 = [v2 connection];
    id v5 = sub_10030010C((uint64_t)BetaAppLaunchInfoMemoryEntity, v4, v3);

    sub_100266678(v5);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_1003B57E4(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = a2;
    id v3 = [v2 bundleID];
    id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v3];

    id v5 = [v2 bundleVersion];
    uint64_t v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_version" equalToValue:v5];

    BOOL v7 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"platform", [v2 platform]);
    uint64_t v8 = [v2 shortVersion];

    id v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_short_version" equalToValue:v8];

    v13[0] = v4;
    v13[1] = v6;
    void v13[2] = v7;
    v13[3] = v9;
    id v10 = +[NSArray arrayWithObjects:v13 count:4];
    id v11 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v10];
  }
  else
  {
    id v11 = 0;
  }
  return v11;
}

id sub_1003B59A0(void *a1)
{
  if (a1)
  {
    id v1 = [a1 connection];
    id v2 = sub_100300254((uint64_t)BetaAppFeedbackMemoryEntity, v1, 0);

    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003B5AAC;
    v6[3] = &unk_1005213B0;
    id v7 = (id)objc_opt_new();
    id v3 = v7;
    [v2 enumerateMemoryEntitiesUsingBlock:v6];
    id v4 = +[NSArray arrayWithArray:v3];
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_1003B5AAC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_1003B5AB8(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = [v2 connection];
    id v5 = sub_1003B54B4(v3);

    uint64_t v6 = sub_10030010C((uint64_t)BetaAppLaunchInfoMemoryEntity, v4, v5);

    sub_1002665E4(v6);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_1003B5B60(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = [v2 connection];
    id v5 = sub_1003B54B4(v3);

    uint64_t v6 = sub_10030010C((uint64_t)BetaAppFeedbackMetadataMemoryEntity, v4, v5);

    id v2 = [v6 valueForProperty:@"email"];
  }
  return v2;
}

id sub_1003B5C10(id a1, uint64_t a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = +[NSNumber numberWithLongLong:a2];
    id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"ROWID" equalToValue:v3];

    id v5 = [v2 connection];
    sub_10030010C((uint64_t)BetaAppFeedbackMemoryEntity, v5, v4);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_1003B5CCC(id result, void *a2)
{
  if (result)
  {
    id v2 = result;
    id v3 = a2;
    id v4 = [v2 connection];
    id v5 = sub_1003B54B4(v3);

    uint64_t v6 = sub_10030010C((uint64_t)BetaAppLaunchInfoMemoryEntity, v4, v5);

    id v7 = [v6 valueForProperty:@"feedback_enabled"];
    id v8 = [v7 BOOLValue];

    return v8;
  }
  return result;
}

id sub_1003B5D7C(id result, void *a2)
{
  if (result)
  {
    id v2 = result;
    id v3 = a2;
    id v4 = [v2 connection];
    id v5 = sub_1003B54B4(v3);

    uint64_t v6 = sub_10030010C((uint64_t)BetaAppLaunchInfoMemoryEntity, v4, v5);

    id v7 = [v6 valueForProperty:@"launch_screen_enabled"];
    id v8 = [v7 BOOLValue];

    return v8;
  }
  return result;
}

_DWORD *sub_1003B5E44(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = [a1 data];
  id v2 = malloc_type_malloc((size_t)[v1 length] + 200, 0xF70ECB70uLL);
  *id v2 = 2;
  __strlcpy_chk();
  id v3 = (objc_class *)objc_opt_class();
  class_getName(v3);
  __strlcpy_chk();
  __strlcpy_chk();
  v2[1] = [v1 length];
  id v4 = v1;
  memcpy(v2 + 50, [v4 bytes], (size_t)objc_msgSend(v4, "length"));

  return v2;
}

id sub_1003B62D4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    id v4 = sub_1002CF110((uint64_t)TypeCheckedArrayReader, a2);
    id v5 = [WeakRetained filteredArrayUsingPredicate:v4];
    uint64_t v6 = [v5 objectEnumerator];
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6;
}

id sub_1003B6384(void *a1)
{
  if (a1)
  {
    a1 = [a1 componentsJoinedByString:@"."];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003B63BC(void *a1)
{
  if (a1)
  {
    uint64_t v1 = objc_msgSend(a1, "_tcr_associatedReader");
    uint64_t v2 = objc_opt_class();
    id v3 = sub_1003B62D4((uint64_t)v1, v2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id sub_1003B6428(void *a1)
{
  if (a1)
  {
    uint64_t v1 = objc_msgSend(a1, "_tcr_associatedReader");
    uint64_t v2 = objc_opt_class();
    id v3 = sub_1003B62D4((uint64_t)v1, v2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id sub_1003B6494(void *a1)
{
  if (a1)
  {
    uint64_t v1 = objc_msgSend(a1, "_tcr_associatedReader");
    uint64_t v2 = objc_opt_class();
    id v3 = sub_1003B62D4((uint64_t)v1, v2);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

NSString *sub_1003B65EC(uint64_t a1, unint64_t a2)
{
  self;
  if (a2 - 1000001 <= 0x3B8B87BE) {
    a2 = (unint64_t)(round((double)a2 / 1000000.0) * 1000000.0);
  }
  if (a2 >= 0x3B9ACA01) {
    a2 = (unint64_t)(round((double)a2 / 100000000.0) * 100000000.0);
  }
  return +[NSByteCountFormatter stringFromByteCount:a2 countStyle:2];
}

EvaluatorDownload *sub_1003B66E0(void *a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    id v4 = 0;
    goto LABEL_24;
  }
  id v4 = objc_alloc_init(EvaluatorDownload);
  uint64_t v6 = sub_100424C14(a1);
  if (v4) {
    objc_setProperty_atomic(v4, v5, v6, 32);
  }

  id v8 = [a1 valueForProperty:@"bundle_name"];
  if (v4) {
    objc_setProperty_atomic(v4, v7, v8, 40);
  }

  id v9 = sub_10026E91C(a1, @"automatic_type");
  if (v4 && v9) {
    v4->_automatic = 1;
  }
  id v10 = sub_10026E91C(a1, @"update_type");
  if (v10)
  {
    if (v10 == (id)1)
    {
      if (v4)
      {
        v4->_automatic = 1;
LABEL_14:
        v4->_update = 1;
      }
    }
    else if (v4)
    {
      goto LABEL_14;
    }
  }
  id v11 = sub_10026E82C(v3, @"bytes_total");
  id v12 = [v11 unsignedLongLongValue];
  if (v4) {
    v4->_bytes = (unint64_t)v12;
  }
  uint64_t v13 = sub_10026E82C(v3, @"initial_odr_size");
  long long v14 = v13;
  if (v13)
  {
    id v15 = [v13 unsignedLongLongValue];
    if (v4) {
      v4->_bytes += (unint64_t)v15;
    }
  }
  id v16 = sub_10026EAC4(v3, @"background_asset_metadata");
  uint64_t v17 = v16;
  if (v16)
  {
    __int16 v18 = sub_1001F51E0(v16);
    if (v4) {
      v4->_bytes += (unint64_t)v18;
    }
  }

LABEL_24:
  return v4;
}

EvaluatorDownload *sub_1003B6884(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = objc_alloc_init(EvaluatorDownload);
  id v4 = sub_1002C1EE8(a1);
  if (v2) {
    objc_setProperty_atomic(v2, v3, v4, 32);
  }

  uint64_t v6 = sub_10026E95C(a1, @"client_id");
  if (v2) {
    objc_setProperty_atomic(v2, v5, v6, 24);
  }

  id v8 = [a1 valueForProperty:@"bundle_name"];
  if (v2) {
    objc_setProperty_atomic(v2, v7, v8, 40);
  }

  id v9 = sub_10026E91C(a1, @"automatic_type");
  if (v2 && v9) {
    v2->_automatic = 1;
  }
  id v10 = sub_10026E91C(a1, @"update_type");
  if (v10)
  {
    if (v10 == (id)1)
    {
      if (v2)
      {
        v2->_automatic = 1;
LABEL_16:
        v2->_update = 1;
      }
    }
    else if (v2)
    {
      goto LABEL_16;
    }
  }
  id v11 = sub_1002C23B8(a1);
  id v12 = sub_10026E82C(v11, @"bytes_total");
  id v13 = [v12 unsignedLongLongValue];
  if (v2) {
    v2->_bytes = (unint64_t)v13;
  }
  long long v14 = sub_10026E82C(v11, @"initial_odr_size");
  id v15 = v14;
  if (v14)
  {
    id v16 = [v14 unsignedLongLongValue];
    if (v2) {
      v2->_bytes += (unint64_t)v16;
    }
  }
  uint64_t v17 = sub_10026EAC4(v11, @"background_asset_metadata");
  __int16 v18 = v17;
  if (v17)
  {
    id v19 = sub_1001F51E0(v17);
    if (v2) {
      v2->_bytes += (unint64_t)v19;
    }
  }

  return v2;
}

id sub_1003B6A5C(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)ODRLaunchServicesClient;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      id v4 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ODRLaunchServicesProtocol];
      [v3 setExportedInterface:v4];

      id v5 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ODRLaunchServicesProtocol];
      [v3 setRemoteObjectInterface:v5];

      [v3 setExportedObject:a1];
      [v3 resume];
      uint64_t v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id v8 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Created the launch services client.", v8, 2u);
      }
    }
  }

  return a1;
}

void sub_1003B6D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003B6DA4(uint64_t a1, void **a2)
{
  uint64_t v3 = sub_1001F9694(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_1003B6E30()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B6ED4;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B1160 != -1) {
    dispatch_once(&qword_1005B1160, block);
  }
  uint64_t v0 = (void *)qword_1005B1158;
  return v0;
}

void sub_1003B6ED4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B1158;
  qword_1005B1158 = (uint64_t)v1;
}

id sub_1003B6F0C(uint64_t a1)
{
  if (!a1)
  {
    id v32 = 0;
    goto LABEL_30;
  }
  id v32 = +[NSMutableDictionary dictionary];
  id v1 = +[NSMutableDictionary dictionary];
  uint64_t v42 = 0;
  id v43 = &v42;
  uint64_t v44 = 0x3032000000;
  __int16 v45 = sub_1000183C8;
  id v46 = sub_100017DA0;
  id v47 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = dispatch_get_global_queue(2, 0);
  int v4 = 3;
  while (1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003B7424;
    block[3] = &unk_100523248;
    __int16 v41 = &v42;
    id v38 = @"PLBatteryUIQueryFunctionKey";
    id v30 = v1;
    id v39 = v30;
    dispatch_semaphore_t dsema = v2;
    dispatch_semaphore_t v40 = dsema;
    dispatch_async(v3, block);

    dispatch_time_t v5 = dispatch_time(0, 60000000000);
    if (!dispatch_semaphore_wait(dsema, v5)) {
      break;
    }
LABEL_9:

    if (!--v4) {
      goto LABEL_12;
    }
  }
  if ([@"PLBatteryUIQueryFunctionKey" isEqualToString:@"PLBatteryUIQueryFunctionKey"])
  {
    uint64_t v6 = (void *)v43[5];
    if (!v6) {
      goto LABEL_8;
    }
    id v7 = [v6 objectForKeyedSubscript:@"PLBatteryUIXPCVersionKey"];
    if (!v7
      || ([(id)v43[5] objectForKeyedSubscript:@"PLBatteryUIXPCVersionKey"],
          id v8 = objc_claimAutoreleasedReturnValue(),
          [v8 doubleValue],
          BOOL v10 = v9 == 1.0,
          v8,
          v7,
          !v10))
    {
LABEL_8:
      +[NSThread sleepForTimeInterval:5.0];
      goto LABEL_9;
    }
  }

LABEL_12:
  id v11 = (void *)v43[5];
  if (v11)
  {
    id v12 = [v11 objectForKeyedSubscript:@"Breakdown"];
    id v13 = [v12 objectForKeyedSubscript:@"PLBatteryUIQueryRangeDayKey"];
    long long v14 = [v13 objectForKeyedSubscript:@"PLBatteryUIAppArrayKey"];

    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v15 = v14;
    id v16 = [v15 countByEnumeratingWithState:&v33 objects:v48 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v34;
      do
      {
        for (id i = 0; i != v16; id i = (char *)i + 1)
        {
          if (*(void *)v34 != v17) {
            objc_enumerationMutation(v15);
          }
          id v19 = *(void **)(*((void *)&v33 + 1) + 8 * i);
          uint64_t v20 = [v19 objectForKeyedSubscript:@"PLBatteryUIAppBundleIDKey"];

          if (v20)
          {
            id v21 = +[NSMutableDictionary dictionary];
            double v22 = sub_100268660(v19, @"PLBatteryUIAppEnergyValueKey");
            if ((int)(*(float *)&v22 + 0.5) >= 1)
            {
              id v23 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
              [v21 setObject:v23 forKeyedSubscript:@"powerUsage"];
            }
            double v24 = sub_100268660(v19, @"PLBatteryUIAppForegroundRuntimeKey");
            if ((int)(*(float *)&v24 + 0.5) >= 1)
            {
              long long v25 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
              [v21 setObject:v25 forKeyedSubscript:@"foregroundDuration"];
            }
            double v26 = sub_100268660(v19, @"DRAM");
            if ((float)(roundf(*(float *)&v26 * 100.0) / 100.0) > 0.0)
            {
              long long v27 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
              [v21 setObject:v27 forKeyedSubscript:@"DRAMUsage"];
            }
            id v28 = [v19 objectForKeyedSubscript:@"PLBatteryUIAppBundleIDKey"];
            [v32 setObject:v21 forKeyedSubscript:v28];
          }
        }
        id v16 = [v15 countByEnumeratingWithState:&v33 objects:v48 count:16];
      }
      while (v16);
    }
  }
  _Block_object_dispose(&v42, 8);

LABEL_30:
  return v32;
}

void sub_1003B73E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

intptr_t sub_1003B7424(uint64_t a1)
{
  dispatch_semaphore_t v2 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v2;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  dispatch_time_t v5 = (void (*)(id, id))off_1005B1168;
  id v15 = off_1005B1168;
  if (!off_1005B1168)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003B755C;
    void v11[3] = &unk_1005243D0;
    void v11[4] = &v12;
    sub_1003B755C((uint64_t)v11);
    dispatch_time_t v5 = (void (*)(id, id))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v5)
  {
    dlerror();
    BOOL v10 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v12, 8);
    _Unwind_Resume(v10);
  }
  uint64_t v6 = v5(v3, v4);

  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void *sub_1003B755C(uint64_t a1)
{
  v5[0] = 0;
  if (!qword_1005B1170)
  {
    v5[1] = _NSConcreteStackBlock;
    v5[2] = 3221225472;
    v5[3] = sub_1003B769C;
    void v5[4] = &unk_100521BF0;
    void v5[5] = v5;
    long long v6 = off_10052BBF8;
    uint64_t v7 = 0;
    qword_1005B1170 = _sl_dlopen();
    id v3 = (void *)v5[0];
    dispatch_semaphore_t v2 = (void *)qword_1005B1170;
    if (qword_1005B1170)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      id v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  dispatch_semaphore_t v2 = (void *)qword_1005B1170;
LABEL_5:
  uint64_t result = dlsym(v2, "PLBatteryUsageUIQuery");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1005B1168 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1003B769C()
{
  uint64_t result = _sl_dlopen();
  qword_1005B1170 = result;
  return result;
}

void sub_1003B7710(id a1)
{
  id v1 = objc_alloc_init(PurchaseHistoryService);
  dispatch_semaphore_t v2 = (void *)qword_1005B1178;
  qword_1005B1178 = (uint64_t)v1;
}

id sub_1003B7A68(id result, void *a2, void *a3)
{
  if (result) {
    return sub_1003B7A80(result, a2, 1, -1, a3);
  }
  return result;
}

id sub_1003B7A80(id a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  BOOL v10 = a5;
  if (!a1) {
    goto LABEL_28;
  }
  v40.receiver = a1;
  v40.super_class = (Class)RestoreAppInstall;
  a1 = objc_msgSendSuper2(&v40, "init");
  if (!a1) {
    goto LABEL_28;
  }
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v12 = +[NSUUID UUID];
  [v11 setObject:v12 forKeyedSubscript:@"external_id"];

  id v13 = &off_100523178;
  uint64_t v14 = &off_100523180;
  if (a3 != 3) {
    uint64_t v14 = &off_100523170;
  }
  if (a3 != 2) {
    id v13 = v14;
  }
  [v11 setObject:*v13 forKeyedSubscript:@"log_code"];
  id v15 = [v9 softwareVersionBundleID];
  [v11 setObject:v15 forKeyedSubscript:@"bundle_id"];

  id v16 = [v9 itemID];
  [v11 setObject:v16 forKeyedSubscript:@"item_id"];

  uint64_t v17 = [v9 storefront];
  [v11 setObject:v17 forKeyedSubscript:@"storefront"];

  __int16 v18 = [v9 softwareVersionExternalIdentifier];
  [v11 setObject:v18 forKeyedSubscript:@"evid"];

  id v19 = [v9 downloaderID];

  if (v19)
  {
    uint64_t v20 = [v9 downloaderID];
    [v11 setObject:v20 forKeyedSubscript:@"downloader_id"];
  }
  id v21 = [v9 altDSID];

  if (v21)
  {
    double v22 = [v9 altDSID];
    [v11 setObject:v22 forKeyedSubscript:@"alt_dsid"];
  }
  id v23 = [v9 purchaserID];
  [v11 setObject:v23 forKeyedSubscript:@"account_id"];

  double v24 = [v9 appleID];
  [v11 setObject:v24 forKeyedSubscript:@"apple_id"];

  [v11 setObject:&__kCFBooleanTrue forKeyedSubscript:@"approved"];
  long long v25 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 deviceBasedVPP]);
  [v11 setObject:v25 forKeyedSubscript:@"device_based_vpp"];

  [v11 setObject:&off_10054CCF0 forKeyedSubscript:@"bootstrapped"];
  [v11 setObject:&off_10054CCF0 forKeyedSubscript:@"source_type"];
  double v26 = +[NSNumber numberWithInteger:a4];
  [v11 setObject:v26 forKeyedSubscript:@"priority"];

  long long v27 = +[NSNumber numberWithInteger:a3];
  [v11 setObject:v27 forKeyedSubscript:@"restore_type"];

  id v28 = [v9 artistName];
  uint64_t v29 = [v9 softwareVersionBundleID];
  id v30 = (void *)v29;
  if (v28 && v29)
  {
    id v31 = +[LSApplicationWorkspace defaultWorkspace];
    id v32 = [v31 createDeviceIdentifierWithVendorName:v28 bundleIdentifier:v30];
    [v11 setObject:v32 forKeyedSubscript:@"vid"];
  }
  if (a3 == 3)
  {
    long long v34 = (_UNKNOWN **)&__kCFBooleanTrue;
    long long v35 = &off_100525F40;
    long long v36 = &off_10054CD68;
LABEL_24:
    id v37 = &off_100525EB0;
    goto LABEL_25;
  }
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if (+[AMSDevice deviceIsAppleTV]) {
        long long v33 = &off_10054CD08;
      }
      else {
        long long v33 = &off_10054CD20;
      }
      [v11 setObject:v33 forKeyedSubscript:@"metrics_install_type"];
    }
    long long v34 = (_UNKNOWN **)&__kCFBooleanTrue;
    long long v35 = &off_100525F40;
    long long v36 = &off_10054CD50;
    goto LABEL_24;
  }
  long long v34 = &off_10054CD68;
  long long v35 = &off_100525EB0;
  long long v36 = &off_10054CD38;
  id v37 = off_100526068;
LABEL_25:
  [v11 setObject:v36 forKeyedSubscript:*v37];
  [v11 setObject:v34 forKeyedSubscript:*v35];
  if (v10) {
    id v38 = [v10[1] copy];
  }
  else {
    id v38 = 0;
  }
  [v11 setObject:v38 forKeyedSubscript:@"policy"];

  [a1 setValuesWithDictionary:v11];
LABEL_28:

  return a1;
}

id sub_1003B7F58(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"account_id"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003B7F90(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"downloader_id"];
    if ([v1 longLongValue]) {
      id v2 = v1;
    }
    else {
      id v2 = 0;
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

unsigned char *sub_1003B7FFC(unsigned char *a1)
{
  if (a1)
  {
    if (a1[56])
    {
      a1 = 0;
    }
    else
    {
      a1 = [a1 valueForProperty:@"evid"];
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003B804C(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"storefront"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003B8084(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"vid"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003B80BC(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"failure_error"];
    if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      id v2 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v1 error:0];
    }
    else
    {
      id v2 = 0;
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003B8168(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = sub_1003B80BC(a1);
    if (v4
      && ([v3 domain],
          dispatch_time_t v5 = objc_claimAutoreleasedReturnValue(),
          [v3 code],
          char IsEqual = ASDErrorIsEqual(),
          v5,
          (IsEqual & 1) != 0))
    {
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        id v8 = sub_100424C14(a1);
        int v11 = 138412546;
        uint64_t v12 = v8;
        __int16 v13 = 2114;
        id v14 = v3;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%@] Nothing change about hard fail error: %{public}@", (uint8_t *)&v11, 0x16u);
      }
    }
    else
    {
      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        BOOL v10 = sub_100424C14(a1);
        int v11 = 138412546;
        uint64_t v12 = v10;
        __int16 v13 = 2114;
        id v14 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@] Marking restore as hard failed with error: %{public}@", (uint8_t *)&v11, 0x16u);
      }
      uint64_t v7 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:0];
      [a1 setValue:v7 forProperty:@"failure_error"];
    }

    [a1 setValue:&off_10054CD80 forProperty:@"phase"];
    [a1 setValue:&off_10054CD98 forProperty:@"restore_state"];
  }
}

void sub_1003B837C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100424C14(a1);
      int v10 = 138412546;
      int v11 = v9;
      __int16 v12 = 2114;
      id v13 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@] Restore failed temporarily with error: %{public}@", (uint8_t *)&v10, 0x16u);
    }
    dispatch_time_t v5 = [a1 valueForProperty:@"restore_retry_count"];
    long long v6 = (char *)[v5 integerValue];

    uint64_t v7 = +[NSNumber numberWithInteger:v6 + 1];
    [a1 setValue:v7 forProperty:@"restore_retry_count"];

    id v8 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:0];
    [a1 setValue:v8 forProperty:@"failure_error"];

    [a1 setValue:&off_10054CDB0 forProperty:@"restore_state"];
  }
}

void *sub_1003B8774(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    v10.receiver = a1;
    v10.super_class = (Class)SubscriptionEntitlementsResponse;
    dispatch_time_t v5 = objc_msgSendSuper2(&v10, "init");
    if (v5)
    {
      id v6 = [v4 copy];
      uint64_t v7 = (void *)v5[1];
      v5[1] = v6;
    }
    a1 = v5;
    id v8 = a1;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void **sub_1003B880C(void **a1)
{
  if (a1)
  {
    sub_10026824C(a1[1], @"user.dsId");
    a1 = (void **)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_1003B8854(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)ReviewNetworkPolicyTask;
    dispatch_time_t v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 5, a2);
    }
  }

  return a1;
}

void sub_1003B8E7C(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1[7];
    id v4 = a2;
    sub_1003D4C80((uint64_t)v4, v3);
    sub_1003D4D3C((uint64_t)v4, a1[8]);
    sub_1003D4B04((uint64_t)v4, a1[9]);
  }
}

id sub_1003B8F18(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init((Class)MIStoreMetadata);
  if (v3)
  {
    id v4 = v2;
    dispatch_time_t v5 = [v4 artistName];
    [v3 setArtistName:v5];

    id v6 = [v4 kind];
    [v3 setKind:v6];

    objc_super v7 = [v4 itemID];
    [v3 setItemID:v7];

    id v8 = [v4 title];
    [v3 setItemName:v8];

    id v9 = [v4 softwareVersionExternalIdentifier];
    [v3 setSoftwareVersionExternalIdentifier:v9];

    objc_super v10 = [v4 betaExternalVersionIdentifier];
    [v3 setBetaExternalVersionIdentifier:v10];

    int v11 = [v4 bundleID];
    [v3 setSoftwareVersionBundleID:v11];

    __int16 v12 = [v4 bundleVersion];
    [v3 setBundleVersion:v12];

    objc_msgSend(v3, "setHasMessagesExtension:", objc_msgSend(v4, "hasMessagesExtension"));
    objc_msgSend(v3, "setLaunchProhibited:", objc_msgSend(v4, "launchProhibited"));
    id v13 = [v4 genre];
    [v3 setGenre:v13];

    id v14 = [v4 genreID];
    [v3 setGenreID:v14];

    id v15 = [v4 ratingLabel];
    [v3 setRatingLabel:v15];

    id v16 = [v4 ratingRank];
    [v3 setRatingRank:v16];

    objc_msgSend(v3, "setGameCenterEnabled:", objc_msgSend(v4, "isGameCenterEnabled"));
    objc_msgSend(v3, "setIsAutoDownload:", objc_msgSend(v4, "isAutomatic"));
    uint64_t v17 = [v4 purchaseDate];
    __int16 v18 = sub_1002825F0(v17);
    [v3 setPurchaseDate:v18];

    objc_msgSend(v3, "setPurchasedRedownload:", objc_msgSend(v4, "isPurchasedRedownload"));
    id v19 = [v4 buyParams];
    [v3 setRedownloadParams:v19];

    uint64_t v20 = [v4 releaseDate];
    id v21 = sub_1002825F0(v20);
    [v3 setReleaseDate:v21];

    double v22 = [v4 storefront];
    id v23 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v22 longLongValue]);
    [v3 setStorefront:v23];

    double v24 = [v4 iAdConversionDate];
    long long v25 = sub_1002825F0(v24);
    [v3 setIAdConversionDate:v25];

    double v26 = [v4 iAdImpressionDate];
    long long v27 = sub_1002825F0(v26);
    [v3 setIAdImpressionDate:v27];

    id v28 = [v4 iAdAttribution];
    uint64_t v29 = [v28 stringValue];
    [v3 setIAdAttribution:v29];

    id v30 = [v4 storeCohort];
    [v3 setStoreCohort:v30];

    objc_msgSend(v3, "setDeviceBasedVPP:", objc_msgSend(v4, "isDeviceBasedVPP"));
    id v31 = [v4 variantID];

    [v3 setVariantID:v31];
  }

  return v3;
}

id sub_1003B9318(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v10 = 0;
  id v4 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v2 allowPlaceholder:0 error:&v10];
  id v5 = v10;
  if (v5)
  {
    id v6 = v5;
    objc_super v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138543618;
      id v12 = v2;
      __int16 v13 = 2114;
      id v14 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Error finding app for bundle ID %{public}@: %{public}@", buf, 0x16u);
    }

    id v8 = sub_1003B9478([ODRApplication alloc], v2);
  }
  else
  {
    id v8 = sub_1003B950C(v3, v4, 1);
    id v6 = v4;
  }

  return v8;
}

void *sub_1003B9478(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)ODRApplication;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      dispatch_queue_t v4 = dispatch_queue_create("com.apple.appstored.ODRApplication", (dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent);
      id v5 = (void *)a1[7];
      a1[7] = v4;

      id v6 = [v3 copy];
      objc_super v7 = (void *)a1[3];
      a1[3] = v6;
    }
  }

  return a1;
}

id sub_1003B950C(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  self;
  if (a3 && (!v4 || ([v4 isPlaceholder] & 1) != 0))
  {
    id v5 = 0;
  }
  else
  {
    id v6 = [ODRMutableApplication alloc];
    objc_super v7 = [v4 bundleIdentifier];
    id v5 = sub_1003B9478(v6, v7);

    if (v5)
    {
      id v8 = v5[7];
      block = _NSConcreteStackBlock;
      uint64_t v29 = 3221225472;
      id v30 = sub_1003BC1AC;
      id v31 = &unk_1005229A8;
      id v32 = v5;
      LOBYTE(v33) = 1;
      dispatch_barrier_sync(v8, &block);
    }
    objc_super v9 = [v4 URL];
    id v10 = [v9 URLByResolvingSymlinksInPath];
    int v11 = v10;
    if (v5)
    {
      id v12 = [v10 copy];
      __int16 v13 = v5[7];
      block = _NSConcreteStackBlock;
      uint64_t v29 = 3221225472;
      id v30 = sub_1003BA690;
      id v31 = &unk_1005218C0;
      id v32 = v5;
      id v33 = v12;
      id v14 = v12;
      dispatch_barrier_async(v13, &block);
    }
    id v15 = [v4 shortVersionString];
    sub_1003BBA5C((uint64_t)v5, v15);

    id v16 = [v4 exactBundleVersion];
    sub_1003BBB00((uint64_t)v5, v16);

    uint64_t v17 = [v4 iTunesMetadata];
    __int16 v18 = [v17 variantID];
    sub_1003BBBA4((uint64_t)v5, v18);

    id v19 = [v4 iTunesMetadata];
    id v20 = [v19 storeItemIdentifier];

    if (v20)
    {
      id v21 = [v4 iTunesMetadata];
      double v22 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%lld", [v21 storeItemIdentifier]);
      sub_1003BBC48((uint64_t)v5, v22);

      sub_1003BBCEC((uint64_t)v5, (char)[v4 applicationHasMIDBasedSINF]);
      if ([v4 isBeta])
      {
        sub_1003BBD6C((uint64_t)v5, 1);
        id v23 = [v4 iTunesMetadata];
        id v24 = [v23 betaVersionIdentifier];
      }
      else
      {
        id v23 = [v4 iTunesMetadata];
        id v24 = [v23 versionIdentifier];
      }
      long long v25 = +[NSString stringWithFormat:@"%lld", v24];
      sub_1003BBDEC((uint64_t)v5, v25);
    }
  }
  id v26 = [v5 copy];

  return v26;
}

id sub_1003B9834(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v10 = 0;
  id v4 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v2 allowPlaceholder:1 error:&v10];
  id v5 = v10;
  if (v5)
  {
    id v6 = v5;
    objc_super v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138543618;
      id v12 = v2;
      __int16 v13 = 2114;
      id v14 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Error finding app for bundle ID %{public}@: %{public}@", buf, 0x16u);
    }

    id v8 = sub_1003B9478([ODRApplication alloc], v2);
  }
  else
  {
    id v8 = sub_1003B950C(v3, v4, 0);
    id v6 = v4;
  }

  return v8;
}

id sub_1003B9994(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v4 = sub_1003B950C(v3, v2, 1);

  return v4;
}

id sub_1003B99F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    self;
    if (qword_1005B1190 != -1) {
      dispatch_once(&qword_1005B1190, &stru_10052BC38);
    }
    id v6 = (id)qword_1005B1188;
    id v7 = objc_msgSend(v6, "numberOfMatchesInString:options:range:", v5, 0, 0, objc_msgSend(v5, "length"));

    if (v7)
    {
      id v8 = +[NSURL URLWithString:v5];
      objc_super v9 = 0;
      if (!a3)
      {
LABEL_16:

        goto LABEL_17;
      }
    }
    else
    {
      id v10 = sub_1003B9C14(a1);
      if (v10)
      {
        int v11 = [v5 stringByRemovingPercentEncoding];
        id v12 = [v10 URLByAppendingPathComponent:v11];

        __int16 v13 = +[NSFileManager defaultManager];
        id v14 = [v12 path];
        unsigned int v15 = [v13 fileExistsAtPath:v14];

        if (v15)
        {
          id v16 = [v12 path];
          id v8 = +[NSURL fileURLWithPath:v16];

          objc_super v9 = 0;
        }
        else
        {
          objc_super v9 = +[NSError errorWithDomain:@"_OnDemandResourcesErrorDomain" code:120 userInfo:0];
          id v8 = 0;
        }
      }
      else
      {
        objc_super v9 = +[NSError errorWithDomain:@"_OnDemandResourcesErrorDomain" code:102 userInfo:0];
        id v8 = 0;
      }

      if (!a3) {
        goto LABEL_16;
      }
    }
    if (!v8) {
      *a3 = v9;
    }
    goto LABEL_16;
  }
  id v8 = 0;
LABEL_17:

  return v8;
}

id sub_1003B9C14(uint64_t a1)
{
  id v4 = *(void **)(a1 + 112);
  id v2 = (id *)(a1 + 112);
  uint64_t v3 = v4;
  if (!v4)
  {
    objc_storeStrong(v2, *(id *)(a1 + 40));
    uint64_t v3 = *(void **)(a1 + 112);
  }
  return v3;
}

id sub_1003B9C5C(id result, uint64_t a2)
{
  if (result)
  {
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    id v2 = *((void *)result + 7);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003B9D48;
    block[3] = &unk_100529208;
    void block[4] = result;
    void block[5] = &v5;
    block[6] = a2;
    dispatch_sync(v2, block);
    id v3 = (id)v6[5];
    _Block_object_dispose(&v5, 8);

    return v3;
  }
  return result;
}

void sub_1003B9D48(uint64_t *a1)
{
  id v2 = sub_1003BBF88((void *)a1[4]);
  if (v2)
  {
    id v8 = v2;
    id v3 = [ODRManifest alloc];
    id v4 = sub_1003B9E28(a1[4]);
    uint64_t v5 = sub_1002AE594(v3, v8, v4, a1[6]);
    uint64_t v6 = *(void *)(a1[5] + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  else
  {
    if (!a1[6]) {
      goto LABEL_6;
    }
    id v8 = 0;
    *(void *)a1[6] = +[NSError errorWithDomain:@"_OnDemandResourcesErrorDomain" code:100 userInfo:0];
  }
  id v2 = v8;
LABEL_6:
}

id sub_1003B9E28(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 56);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003BA3B4;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_1003B9F24(id result, uint64_t a2)
{
  if (result)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    id v2 = *((void *)result + 7);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003BA010;
    block[3] = &unk_100529208;
    void block[4] = result;
    void block[5] = &v5;
    block[6] = a2;
    dispatch_sync(v2, block);
    id v3 = (id)v6[5];
    _Block_object_dispose(&v5, 8);

    return v3;
  }
  return result;
}

void sub_1003BA010(uint64_t a1)
{
  id v2 = sub_1003BC01C(*(void **)(a1 + 32));
  if (v2)
  {
    id v6 = v2;
    id v3 = sub_1003E05B8([ODRBundleTagManifest alloc], v2, *(void **)(a1 + 48));
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  else
  {
    if (!*(void *)(a1 + 48)) {
      goto LABEL_6;
    }
    id v6 = 0;
    **(void **)(a1 + 4_Block_object_dispose(&a9, 8) = +[NSError errorWithDomain:@"_OnDemandResourcesErrorDomain" code:115 userInfo:0];
  }
  id v2 = v6;
LABEL_6:
}

void sub_1003BA0C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = v3;
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void **)(v2 + 24);
  uint64_t v6 = sub_1003B9E28((uint64_t)v3);
  if (v5 == (void *)v6)
  {
  }
  else
  {
    uint64_t v7 = (void *)v6;
    if (!*(void *)(v2 + 24))
    {
LABEL_13:
      LOBYTE(v_Block_object_dispose(&a9, 8) = 0;
      goto LABEL_22;
    }
    id v8 = sub_1003B9E28((uint64_t)v4);
    if (!v8)
    {
LABEL_22:

      goto LABEL_23;
    }
    objc_super v9 = *(void **)(v2 + 24);
    id v10 = sub_1003B9E28((uint64_t)v4);
    LOBYTE(v9) = [v9 isEqual:v10];

    if ((v9 & 1) == 0) {
      goto LABEL_12;
    }
  }
  int v11 = *(void **)(v2 + 40);
  uint64_t v12 = sub_1003BA548((uint64_t)v4);
  if (v11 == (void *)v12)
  {

    goto LABEL_15;
  }
  uint64_t v7 = (void *)v12;
  if (!*(void *)(v2 + 40)) {
    goto LABEL_13;
  }
  id v8 = sub_1003BA548((uint64_t)v4);
  if (!v8) {
    goto LABEL_22;
  }
  __int16 v13 = *(void **)(v2 + 40);
  id v14 = sub_1003BA548((uint64_t)v4);
  LOBYTE(v13) = [v13 isEqual:v14];

  if (v13)
  {
LABEL_15:
    uint64_t v7 = sub_1003BAF4C(v2);
    uint64_t v15 = sub_1003BAF4C((uint64_t)v4);
    id v16 = (void *)v15;
    if (v7 == (void *)v15) {
      goto LABEL_19;
    }
    LOBYTE(v_Block_object_dispose(&a9, 8) = 0;
    if (!v7 || !v15) {
      goto LABEL_21;
    }
    if ([v7 isEqual:v15]) {
LABEL_19:
    }
      LOBYTE(v_Block_object_dispose(&a9, 8) = 1;
    else {
      LOBYTE(v_Block_object_dispose(&a9, 8) = 0;
    }
LABEL_21:

    goto LABEL_22;
  }
LABEL_12:
  LOBYTE(v_Block_object_dispose(&a9, 8) = 0;
LABEL_23:

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)v8;
}

id sub_1003BA26C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 56);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003BA368;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003BA368(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003BA3B4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1003BA400(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 56);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003BA4FC;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003BA4FC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1003BA548(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 56);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003BA644;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003BA644(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003BA690(uint64_t a1)
{
}

id sub_1003BA69C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 56);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003BA798;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003BA798(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1003BA7E4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 56);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003BA8E0;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003BA8E0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

BOOL sub_1003BA92C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 1;
  uint64_t v1 = *(NSObject **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003BA9F0;
  v4[3] = &unk_100524F38;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1003BA9F0(uint64_t a1)
{
  sub_1003BC01C(*(void **)(a1 + 32));
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    BOOL v2 = +[NSFileManager defaultManager];
    uint64_t v3 = [v4 path];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 fileExistsAtPath:v3];
  }
}

BOOL sub_1003BAA8C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003BAB4C;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1003BAB4C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 16);
  return result;
}

BOOL sub_1003BAB60(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003BAC20;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1003BAC20(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 72);
  return result;
}

BOOL sub_1003BAC34(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003BACF4;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1003BACF4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 73);
  return result;
}

BOOL sub_1003BAD08(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003BADC8;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1003BADC8(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  if (v1) {
    LOBYTE(v1) = v1[3] && v1[1] && v1[8] != 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = (_BYTE)v1;
  return result;
}

id sub_1003BAE04(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    char v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 56);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003BAF00;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003BAF00(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 80) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1003BAF4C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    char v8 = sub_1000183D8;
    objc_super v9 = sub_100017DA8;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 56);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003BB048;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003BB048(uint64_t a1)
{
  sub_1003BB0AC(*(void **)(a1 + 32));
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void *sub_1003BB0AC(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if (a1[11])
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
LABEL_30:
        a1 = (id)v2[11];
        uint64_t v1 = vars8;
        goto LABEL_31;
      }
    }
    id v3 = objc_alloc_init((Class)NSMutableArray);
    if (v2[3] && v2[1] && v2[8])
    {
      if (*((unsigned char *)v2 + 73)) {
        id v4 = "V";
      }
      else {
        id v4 = "";
      }
      id v5 = +[NSString stringWithFormat:@"adamID = %@%s", v2[1], v4];
      [v3 addObject:v5];

      if (!v2[8]) {
        goto LABEL_24;
      }
      if (*((unsigned char *)v2 + 16)) {
        uint64_t v6 = "B";
      }
      else {
        uint64_t v6 = "";
      }
      +[NSString stringWithFormat:@"versionID = %@%s", v2[8], v6];
    }
    else
    {
      if (v2[6])
      {
        uint64_t v7 = +[NSString stringWithFormat:@"version = %@", v2[6]];
        [v3 addObject:v7];
      }
      if (v2[4])
      {
        char v8 = +[NSString stringWithFormat:@"shortVersion = %@", v2[4]];
        [v3 addObject:v8];
      }
      objc_super v9 = sub_1003BBF88(v2);
      if (v9)
      {
        id v10 = +[NSFileManager defaultManager];
        int v11 = [v9 path];
        uint64_t v12 = [v10 attributesOfItemAtPath:v11 error:0];

        __int16 v13 = [v12 fileModificationDate];
      }
      else
      {
        __int16 v13 = +[NSDate date];
      }

      [v13 timeIntervalSinceReferenceDate];
      uint64_t v15 = v14;

      +[NSString stringWithFormat:@"modified = %.0f", v15, v22];
    id v16 = };
    [v3 addObject:v16];

LABEL_24:
    if (v2[10])
    {
      uint64_t v17 = +[NSString stringWithFormat:@"variantID = %@", v2[10]];
      [v3 addObject:v17];
    }
    if ([v3 count])
    {
      __int16 v18 = [v3 componentsJoinedByString:@"; "];
      uint64_t v19 = +[NSString stringWithFormat:@"{%@}", v18];
      id v20 = (void *)v2[11];
      v2[11] = v19;
    }
    else
    {
      __int16 v18 = (void *)v2[11];
      v2[11] = 0;
    }

    goto LABEL_30;
  }
LABEL_31:
  return a1;
}

void sub_1003BB468(uint64_t a1)
{
}

void sub_1003BB478(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    id v5 = *(void **)(a1 + 8);
    uint64_t v6 = a2;
    id v7 = [v5 copyWithZone:a3];
    char v8 = (void *)v6[1];
    v6[1] = v7;

    *((unsigned char *)v6 + 16) = *(unsigned char *)(a1 + 16);
    id v9 = [*(id *)(a1 + 24) copyWithZone:a3];
    id v10 = (void *)v6[3];
    v6[3] = v9;

    id v11 = [*(id *)(a1 + 32) copyWithZone:a3];
    uint64_t v12 = (void *)v6[4];
    void v6[4] = v11;

    id v13 = [*(id *)(a1 + 40) copyWithZone:a3];
    uint64_t v14 = (void *)v6[5];
    void v6[5] = v13;

    id v15 = [*(id *)(a1 + 48) copyWithZone:a3];
    id v16 = (void *)v6[6];
    v6[6] = v15;

    id v17 = [*(id *)(a1 + 64) copyWithZone:a3];
    __int16 v18 = (void *)v6[8];
    void v6[8] = v17;

    *((unsigned char *)v6 + 72) = *(unsigned char *)(a1 + 72);
    *((unsigned char *)v6 + 73) = *(unsigned char *)(a1 + 73);
    id v19 = [*(id *)(a1 + 80) copyWithZone:a3];
    id v20 = (id)v6[10];
    v6[10] = v19;
  }
}

void sub_1003BB65C(uint64_t a1)
{
}

void sub_1003BB75C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = v2[3];
    if (v3)
    {
      uint64_t v4 = v2[1];
      if (v4)
      {
        uint64_t v5 = v2[8];
        if (v5)
        {
          +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{bundleID = %@; adamID = %@; versionID = %@; variantID = %@}",
            v3,
            v4,
            v5,
            v2[10]);
          goto LABEL_8;
        }
      }
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x18];
  }
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"{bundleID = %@; version = %@; shortVersion = %@; variantID = %@}",
    v3,
    v2[6],
    v2[4],
    v2[10]);
  uint64_t v6 = LABEL_8:;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  char v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1003BB8C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (unint64_t)[*(id *)(v2 + 24) hash];
    unint64_t v4 = (unint64_t)[*(id *)(v2 + 40) hash] ^ v3;
    uint64_t v5 = sub_1003BB0AC((void *)v2);
    unint64_t v6 = v4 ^ (unint64_t)[v5 hash];
  }
  else
  {
    unint64_t v6 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
}

void sub_1003BBA5C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    unint64_t v4 = *(NSObject **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003BC188;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }
}

void sub_1003BBB00(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    unint64_t v4 = *(NSObject **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003BC194;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }
}

void sub_1003BBBA4(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    unint64_t v4 = *(NSObject **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003BC1CC;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }
}

void sub_1003BBC48(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    unint64_t v4 = *(NSObject **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003BC16C;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }
}

void sub_1003BBCEC(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 56);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003BC1BC;
    v3[3] = &unk_1005229A8;
    void v3[4] = a1;
    char v4 = a2;
    dispatch_barrier_async(v2, v3);
  }
}

void sub_1003BBD6C(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 56);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003BC178;
    v3[3] = &unk_1005229A8;
    void v3[4] = a1;
    char v4 = a2;
    dispatch_barrier_async(v2, v3);
  }
}

void sub_1003BBDEC(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    char v4 = *(NSObject **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003BC1A0;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }
}

void sub_1003BBE90(id a1)
{
  id v5 = 0;
  uint64_t v1 = +[NSDataDetector dataDetectorWithTypes:32 error:&v5];
  id v2 = v5;
  id v3 = (void *)qword_1005B1188;
  qword_1005B1188 = v1;

  if (!qword_1005B1188)
  {
    char v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v7 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to create URL data detector.  Error: %{public}@", buf, 0xCu);
    }
  }
}

void *sub_1003BBF88(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = (void *)a1[12];
    if (!v3)
    {
      char v4 = sub_1003B9C14((uint64_t)a1);
      id v5 = [v4 URLByAppendingPathComponent:@"AssetPackManifest"];
      uint64_t v6 = [v5 URLByAppendingPathExtension:@"plist"];
      id v7 = (void *)v2[12];
      v2[12] = v6;

      id v3 = (void *)v2[12];
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

void *sub_1003BC01C(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = (void *)a1[13];
    if (!v3)
    {
      char v4 = sub_1003B9C14((uint64_t)a1);
      id v5 = [v4 URLByAppendingPathComponent:@"OnDemandResources"];
      uint64_t v6 = [v5 URLByAppendingPathExtension:@"plist"];
      id v7 = (void *)v2[13];
      v2[13] = v6;

      id v3 = (void *)v2[13];
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1003BC16C(uint64_t a1)
{
}

uint64_t sub_1003BC178(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 16) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1003BC188(uint64_t a1)
{
}

void sub_1003BC194(uint64_t a1)
{
}

void sub_1003BC1A0(uint64_t a1)
{
}

uint64_t sub_1003BC1AC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 72) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1003BC1BC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 73) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1003BC1CC(uint64_t a1)
{
}

void sub_1003BC2A0(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = [a2 style];
  if (v5 == (id)2)
  {
    uint64_t v6 = 2;
  }
  else
  {
    if (v5 != (id)1) {
      return;
    }
    uint64_t v6 = 1;
  }
  if (a3 <= 2)
  {
    id v7 = *(const void **)*(&off_10052BC78 + a3);
    char v8 = *(__CFDictionary **)(a1 + 32);
    id v9 = +[NSNumber numberWithUnsignedInt:v6];
    CFDictionarySetValue(v8, v7, v9);
  }
}

void sub_1003BC8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003BCEF4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138543362;
    uint64_t v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshUpdateCountWithCompletionBlock completed", (uint8_t *)&v7, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003BD57C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v8, 32, 1);
    }
    id v10 = Property;
    int v11 = 138412290;
    id v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] reloadFromServerInBackgroundWithCompletionBlock completed", (uint8_t *)&v11, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003BDB24(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] updateAllWithJobResults completed", (uint8_t *)&v10, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003BDDE4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138543362;
    uint64_t v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ updateAllWithOrder completed", (uint8_t *)&v10, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003BE37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1003BE3D0(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Connection interrupted for pid: %i", (uint8_t *)v4, 8u);
  }
}

void sub_1003BE480(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(a1 + 48);
    int v8 = 67109120;
    LODWORD(v9) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Connection invalidated from pid: %i", (uint8_t *)&v8, 8u);
  }

  id v6 = v3;
  if (WeakRetained)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = 138543362;
      id v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Client %{public}@ disconnected", (uint8_t *)&v8, 0xCu);
    }
  }
}

Class sub_1003BE5B8(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1005B11A0)
  {
    v4[1] = _NSConcreteStackBlock;
    _DWORD v4[2] = 3221225472;
    v4[3] = sub_1003BE70C;
    void v4[4] = &unk_100521BF0;
    void v4[5] = v4;
    long long v5 = off_10052BD28;
    uint64_t v6 = 0;
    qword_1005B11A0 = _sl_dlopen();
    id v2 = (void *)v4[0];
    if (!qword_1005B11A0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("_DASScheduler");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    id v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1005B1198 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1003BE70C()
{
  uint64_t result = _sl_dlopen();
  qword_1005B11A0 = result;
  return result;
}

void *sub_1003BE780(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)HandleInvalidReceiptTask;
    long long v5 = (char *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong((id *)(v5 + 42), a2);
    }
  }

  return a1;
}

void sub_1003BED3C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v4();
    return;
  }
  long long v5 = [a2 selectedActionIdentifier];
  unsigned int v6 = [v5 isEqualToString:@"InvalidReceiptPromptOKAction"];

  if (v6)
  {
    if (*(void *)(a1 + 32))
    {
      objc_super v7 = +[LSApplicationWorkspace defaultWorkspace];
      uint64_t v8 = *(void *)(a1 + 32);
      id v14 = 0;
      [v7 openURL:v8 withOptions:0 error:&v14];
      id v9 = v14;

      if (v9)
      {
LABEL_8:
        int v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543362;
          id v16 = v9;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Encountered error opening store. Error: %{public}@", buf, 0xCu);
        }

        uint64_t v11 = *(void *)(a1 + 40);
        id v12 = ASDErrorWithSafeUserInfo();
        (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

        goto LABEL_16;
      }
    }
    else
    {
      ASDErrorWithDescription();
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      if (v9) {
        goto LABEL_8;
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_16:

    return;
  }
  id v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  v13();
}

id *sub_1003BF880(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)AppLedgerInstallItem;
    id v4 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v4;
    if (v4)
    {
      if (v3)
      {
        objc_storeStrong(v4 + 1, v3[4]);
        a1[2] = v3[5];
        id v5 = v3[3];
      }
      else
      {
        objc_storeStrong(v4 + 1, 0);
        id v5 = 0;
        a1[2] = 0;
      }
      objc_storeStrong(a1 + 3, v5);
      if (v3)
      {
        objc_storeStrong(a1 + 4, v3[2]);
        id v6 = v3[8];
      }
      else
      {
        objc_storeStrong(a1 + 4, 0);
        id v6 = 0;
      }
      objc_storeStrong(a1 + 5, v6);
      if (v3) {
        id v7 = v3[9];
      }
      else {
        id v7 = 0;
      }
      a1[6] = v7;
    }
  }

  return a1;
}

CFStringRef sub_1003BF960(const __CFString *result)
{
  if (result)
  {
    uint64_t data = (uint64_t)result->data;
    uint64_t result = @"unknown";
    if (data > 69)
    {
      CFStringRef v2 = @"factoryClaim";
      CFStringRef v3 = @"marketplace";
      if (data != 90) {
        CFStringRef v3 = @"unknown";
      }
      if (data != 80) {
        CFStringRef v2 = v3;
      }
      if (data == 70) {
        return @"systemInstall";
      }
      else {
        return v2;
      }
    }
    else
    {
      switch(data)
      {
        case 10:
          uint64_t result = @"clipBuy";
          break;
        case 11:
          uint64_t result = @"storeBuy";
          break;
        case 12:
          uint64_t result = @"storeCodeRedemption";
          break;
        case 13:
          uint64_t result = @"storePreorder";
          break;
        case 14:
          uint64_t result = @"storePromotion";
          break;
        case 15:
          uint64_t result = @"storeQueue";
          break;
        case 16:
          uint64_t result = @"storeRedownload";
          break;
        case 17:
          uint64_t result = @"storeRestore";
          break;
        case 18:
          uint64_t result = @"storeUpdate";
          break;
        case 19:
          uint64_t result = @"storeUpdateAutomatic";
          break;
        case 20:
          uint64_t result = @"betaInstall";
          break;
        case 21:
          uint64_t result = @"betaUpdate";
          break;
        case 22:
          uint64_t result = @"betaWatchSync";
          break;
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
          return result;
        case 30:
          uint64_t result = @"deviceManagedInstall";
          break;
        case 31:
          uint64_t result = @"deviceManagedUpdate";
          break;
        case 32:
          uint64_t result = @"UserManagedInstall";
          break;
        case 33:
          uint64_t result = @"userManagedUpdate";
          break;
        case 40:
          uint64_t result = @"tvProviderBuy";
          break;
        case 41:
          uint64_t result = @"tvProviderUpdate";
          break;
        case 50:
          uint64_t result = @"tvHomeScreenSync";
          break;
        case 60:
          uint64_t result = @"watchRedownload";
          break;
        default:
          if (data == 1) {
            uint64_t result = @"appReview";
          }
          break;
      }
    }
  }
  return result;
}

id sub_1003BFC54(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if ((unint64_t)(v4 + 1) >= 2)
    {
      if (v4 == -2)
      {
        if (_os_feature_enabled_impl()) {
          uint64_t v5 = 4;
        }
        else {
          uint64_t v5 = 1;
        }
      }
      else
      {
        uint64_t v5 = 3;
      }
    }
    else
    {
      uint64_t v5 = 2;
    }
    unint64_t v6 = a1[4];
    if (v6 == 3)
    {
      if (+[AMSDevice deviceIsAppleTV]) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = os_variant_has_internal_content()
      }
          && os_variant_has_internal_content()
          && a1[2] == 2;
      unint64_t v6 = 3;
    }
    else
    {
      if (!v6)
      {
        id v7 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id Property = objc_getProperty(a1, v8, 40, 1);
          _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "[%@] Invalid coordinator intent, treating as initiating instead", buf, 0xCu);
        }

        unint64_t v6 = 1;
      }
      uint64_t v9 = 1;
    }
    int v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = objc_getProperty(a1, v11, 40, 1);
      id v13 = sub_10027AA2C(v6);
      id v14 = IXStringForCoordinatorImportance();
      *(_DWORD *)long long buf = 138412802;
      id Property = v12;
      __int16 v31 = 2114;
      id v32 = v13;
      __int16 v33 = 2114;
      long long v34 = v14;
    }
    uint64_t v15 = 1;
    id v17 = objc_getProperty(a1, v16, 8, 1);
    if (os_variant_has_internal_content()) {
      uint64_t v15 = a1[2];
    }
    __int16 v18 = sub_100278188((uint64_t)IXAppInstallCoordinator, v17, v6, (void *)v5, (id)v15, v9, a2);

    if (objc_getProperty(a1, v19, 24, 1))
    {
      id v21 = objc_getProperty(a1, v20, 24, 1);
      id v28 = 0;
      unsigned __int8 v22 = sub_10027A080(v18, v21, &v28);
      id v23 = v28;
      if ((v22 & 1) == 0)
      {
        id v24 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          id v27 = objc_getProperty(a1, v25, 40, 1);
          *(_DWORD *)long long buf = 138412546;
          id Property = v27;
          __int16 v31 = 2114;
          id v32 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[%@] Error setting the gizmo pairing ID: %{public}@", buf, 0x16u);
        }
      }
    }
  }
  else
  {
    __int16 v18 = 0;
  }
  return v18;
}

void sub_1003BFFD4(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 8);
  }
}

uint64_t sub_1003BFFE8(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_1003BFFF4(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_1003C0000(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 4_Block_object_dispose(&a9, 8) = a2;
  }
  return result;
}

CoordinatorBuilder *sub_1003C0068(void *a1)
{
  if (a1)
  {
    CFStringRef v2 = objc_alloc_init(CoordinatorBuilder);
    uint64_t v4 = sub_100424C14(a1);
    if (v2) {
      objc_setProperty_atomic(v2, v3, v4, 40);
    }

    unint64_t v6 = [a1 valueForProperty:@"bundle_id"];
    if (v2) {
      objc_setProperty_atomic(v2, v5, v6, 8);
    }

    uint64_t v8 = sub_10026E9D4(a1, @"gizmo_pairing_id");
    if (v2) {
      objc_setProperty_atomic(v2, v7, v8, 24);
    }

    id v9 = sub_10026E91C(a1, @"coordinator_intent");
    if (v2) {
      v2->_intent = (unint64_t)v9;
    }
    sub_10026E82C(a1, @"IFNULL(app_install.priority, 0)");
    int v10 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      uint64_t v11 = sub_10026E82C(a1, @"priority");
      if (v11) {
        int v10 = (_UNKNOWN **)v11;
      }
      else {
        int v10 = &off_10054CDC8;
      }
    }
    id v12 = [v10 integerValue];
    if (v2) {
      v2->_priority = (int64_t)v12;
    }
  }
  else
  {
    CFStringRef v2 = 0;
  }
  return v2;
}

void sub_1003C01B4(id a1)
{
  uint64_t v1 = objc_alloc_init(UpdatesService);
  CFStringRef v2 = (void *)qword_1005B11A8;
  qword_1005B11A8 = (uint64_t)v1;
}

void sub_1003C0324(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1003C03B4;
  void v2[3] = &unk_10052BD90;
  id v3 = *(id *)(a1 + 40);
  [v1 autoUpdateEnabled:v2];
}

uint64_t sub_1003C03B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003C04B4(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = [*(id *)(a1 + 32) componentsJoinedByString:@", "];
    uint64_t v5 = [*(id *)(a1 + 40) processInfo];
    unint64_t v6 = [v5 bundleIdentifier];
    int v7 = 138543618;
    uint64_t v8 = v4;
    __int16 v9 = 2114;
    int v10 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Compatibility updates for apps: [%{public}@] requested by client: %{public}@", (uint8_t *)&v7, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1003C06A0(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    uint64_t v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    id v12 = v3;
    __int16 v13 = 2114;
    id v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ getManagedUpdates requested for client: %{public}@", buf, 0x16u);
  }
  unint64_t v6 = *(void **)(a1 + 32);
  int v7 = *(void **)(*(void *)(a1 + 40) + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003C0810;
  v8[3] = &unk_10052BCC0;
  id v9 = v6;
  id v10 = *(id *)(a1 + 48);
  [v7 getManagedUpdatesWithRequestToken:v9 replyHandler:v8];
}

void sub_1003C0810(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v11 = 138543362;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ getManagedUpdates completed successfully", (uint8_t *)&v11, 0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = ASDErrorWithSafeUserInfo();

  (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v6, v10);
}

void sub_1003C0A08(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = [v3 processInfo];
    id v6 = [v5 bundleIdentifier];
    *(_DWORD *)long long buf = 138543874;
    __int16 v13 = v3;
    __int16 v14 = 2114;
    uint64_t v15 = v4;
    __int16 v16 = 2114;
    id v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ getUpdateMetadataForBundleID %{public}@ requested for client: %{public}@", buf, 0x20u);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void **)(*(void *)(a1 + 48) + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003C0B80;
  v9[3] = &unk_10052BDB8;
  id v10 = *(id *)(a1 + 32);
  id v11 = *(id *)(a1 + 56);
  [v8 getUpdateMetadataForBundleID:v7 replyHandler:v9];
}

void sub_1003C0B80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ getUpdateMetadataForBundleID completed successfully", (uint8_t *)&v6, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003C0D24(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    uint64_t v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v12 = v3;
    __int16 v13 = 2114;
    __int16 v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ getUpdates requested for client: %{public}@", buf, 0x16u);
  }
  int v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003C0E94;
  v8[3] = &unk_10052BDE0;
  id v9 = v6;
  id v10 = *(id *)(a1 + 48);
  [v7 getUpdatesWithRequestToken:v9 replyHandler:v8];
}

void sub_1003C0E94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ getUpdates completed successfully", (uint8_t *)&v6, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003C1038(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    uint64_t v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v12 = v3;
    __int16 v13 = 2114;
    __int16 v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshUpdateCount requested for client: %{public}@", buf, 0x16u);
  }
  int v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003C11A8;
  v8[3] = &unk_10052BC98;
  id v9 = v6;
  id v10 = *(id *)(a1 + 48);
  [v7 refreshUpdateCountWithRequestToken:v9 replyHandler:v8];
}

void sub_1003C11A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = ASDLogHandleForCategory();
  uint64_t v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v12 = 138543618;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      id v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ refreshUpdateCount completed with error: %{public}@", (uint8_t *)&v12, 0x16u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v12 = 138543362;
    uint64_t v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshUpdateCount completed successfully", (uint8_t *)&v12, 0xCu);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, uint64_t, void *))(v10 + 16))(v10, a2, v11);
}

void sub_1003C13D0(void *a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)a1[4];
    uint64_t v4 = a1[7];
    id v5 = [v3 processInfo];
    int v6 = [v5 bundleIdentifier];
    *(_DWORD *)long long buf = 138543874;
    __int16 v18 = v3;
    __int16 v19 = 2050;
    uint64_t v20 = v4;
    __int16 v21 = 2114;
    unsigned __int8 v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshUpdateForApp %{public}lld requested by client: %{public}@", buf, 0x20u);
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = *(void **)(a1[5] + 16);
  uint64_t v9 = a1[7];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1003C155C;
  v13[3] = &unk_10052BE08;
  id v10 = v7;
  int v12 = (void *)a1[6];
  uint64_t v11 = a1[7];
  id v14 = v10;
  uint64_t v16 = v11;
  id v15 = v12;
  [v8 refreshUpdateForApp:v9 token:v10 replyHandler:v13];
}

void sub_1003C155C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = a1[4];
      uint64_t v7 = a1[6];
      int v12 = 138543874;
      uint64_t v13 = v6;
      __int16 v14 = 2050;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ refreshUpdateForApp %{public}lld completed with error: %{public}@", (uint8_t *)&v12, 0x20u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[6];
    int v12 = 138543618;
    uint64_t v13 = v8;
    __int16 v14 = 2050;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshUpdateForApp %{public}lld completed successfully", (uint8_t *)&v12, 0x16u);
  }

  uint64_t v10 = a1[5];
  uint64_t v11 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);
}

void sub_1003C1790(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    id v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    int v12 = v3;
    __int16 v13 = 2114;
    __int16 v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ reloadFromServer requested for client: %{public}@", buf, 0x16u);
  }
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003C1900;
  v8[3] = &unk_10052BCC0;
  id v9 = v6;
  id v10 = *(id *)(a1 + 48);
  [v7 reloadFromServerWithRequestToken:v9 replyHandler:v8];
}

void sub_1003C1900(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory();
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v9;
      __int16 v15 = 2114;
      id v16 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ reloadFromServer completed with error: %{public}@", (uint8_t *)&v13, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v13 = 138543362;
    uint64_t v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ reloadFromServer completed successfully", (uint8_t *)&v13, 0xCu);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  int v12 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, id, void *))(v11 + 16))(v11, v6, v12);
}

void sub_1003C1B28(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    id v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    int v12 = v3;
    __int16 v13 = 2114;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ reloadManagedUpdates requested for client: %{public}@", buf, 0x16u);
  }
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003C1C98;
  v8[3] = &unk_10052BCC0;
  id v9 = v6;
  id v10 = *(id *)(a1 + 48);
  [v7 reloadManagedUpdatesWithRequestToken:v9 replyHandler:v8];
}

void sub_1003C1C98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v11 = 138543362;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@ reloadManagedUpdates completed successfully", (uint8_t *)&v11, 0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = ASDErrorWithSafeUserInfo();

  (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v6, v10);
}

void sub_1003C1F70(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) bundleIdentifier];
  if (v6)
  {
    CFStringRef v2 = [[_TtC9appstored38PreinstalledAppUpdateAuthorizationTask alloc] initWithBundleID:v6 logKey:*(void *)(a1 + 40) processHandle:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
    uint64_t v3 = +[PreinstalledAppUpdateAuthorizationTask taskQueue];
    uint64_t v4 = (void *)v3;
    if (v3) {
      [*(id *)(v3 + 8) addOperation:v2];
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    ASDErrorWithDescription();
    CFStringRef v2 = (_TtC9appstored38PreinstalledAppUpdateAuthorizationTask *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _TtC9appstored38PreinstalledAppUpdateAuthorizationTask *))(v5 + 16))(v5, v2);
  }
}

void sub_1003C2128(uint64_t a1)
{
  CFStringRef v2 = *(void **)(*(void *)(a1 + 32) + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1003C21E8;
  v4[3] = &unk_100525938;
  id v5 = *(id *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  [v2 setAutoUpdateEnabled:v3 withReplyHandler:v4];
}

uint64_t sub_1003C21E8(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = [*(id *)(a1 + 32) processInfo];
    uint64_t v4 = [v3 bundleIdentifier];
    id v5 = (void *)v4;
    CFStringRef v6 = @"Enabled";
    if (!*(unsigned char *)(a1 + 48)) {
      CFStringRef v6 = @"Disabled";
    }
    int v8 = 138412546;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    CFStringRef v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%@ Updated should perform automatic updates: %@", (uint8_t *)&v8, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003C23EC(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    id v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    __int16 v13 = v3;
    __int16 v14 = 2114;
    __int16 v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Update all requested with client: %{public}@", buf, 0x16u);
  }
  CFStringRef v6 = *(void **)(a1 + 32);
  char v7 = *(void **)(*(void *)(a1 + 40) + 16);
  uint64_t v8 = *(void *)(a1 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003C2564;
  v9[3] = &unk_10052BCE8;
  id v10 = v6;
  id v11 = *(id *)(a1 + 56);
  [v7 updateAllWithOrder:v8 requestToken:v10 replyHandler:v9];
}

void sub_1003C2564(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  uint64_t v9 = ASDLogHandleForCategory();
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v15 = 138543618;
      uint64_t v16 = v11;
      __int16 v17 = 2114;
      id v18 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@ updateAllWithOrder completed with error: %{public}@", (uint8_t *)&v15, 0x16u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    int v15 = 138543362;
    uint64_t v16 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ updateAllWithOrder completed successfully", (uint8_t *)&v15, 0xCu);
  }

  uint64_t v13 = *(void *)(a1 + 40);
  __int16 v14 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, uint64_t, id, void *))(v13 + 16))(v13, a2, v8, v14);
}

void sub_1003C2798(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    id v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v12 = v3;
    __int16 v13 = 2114;
    __int16 v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ reloadFromServerInBackgroundWithCompletionBlock requested for client: %{public}@", buf, 0x16u);
  }
  CFStringRef v6 = +[UpdatesManager sharedManager];
  id v7 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003C291C;
  v8[3] = &unk_10052BCC0;
  id v9 = v7;
  id v10 = *(id *)(a1 + 40);
  [v6 reloadFromServerInBackgroundWithToken:v9 completionBlock:v8];
}

void sub_1003C291C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v9;
      __int16 v15 = 2114;
      id v16 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ reloadFromServerInBackgroundWithCompletionBlock completed with error: %{public}@", (uint8_t *)&v13, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v13 = 138543362;
    uint64_t v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ reloadFromServerInBackgroundWithCompletionBlock completed successfully", (uint8_t *)&v13, 0xCu);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, id, void *))(v11 + 16))(v11, v6, v12);
}

void sub_1003C2B44(uint64_t a1)
{
  CFStringRef v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    id v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v12 = v3;
    __int16 v13 = 2114;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ getUpdateMetricsEventsWithReplyHandler requested for client: %{public}@", buf, 0x16u);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003C2CE0;
  v9[3] = &unk_100527DE8;
  id v10 = *(id *)(a1 + 48);
  id v6 = objc_retainBlock(v9);
  LOBYTE(v_Block_object_dispose(&a9, 8) = 0;
  id v7 = [[_TtC9appstored14UpdatesContext alloc] initWithReason:0 requestToken:*(void *)(a1 + 32) logKey:0 callbackHandler:v6 includeMetrics:1 isVPPLookup:0 userInitiated:v8 targetedItemID:0];
  [*(id *)(*(void *)(a1 + 40) + 16) getUpdatesWithContext:v7];
}

void sub_1003C2CE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)NSMutableArray);
  if (v5)
  {
    uint64_t v17 = a1;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          __int16 v13 = *(void **)(*((void *)&v18 + 1) + 8 * (void)v12);
          id v14 = objc_alloc((Class)ASDUpdateMetricsEvent);
          __int16 v15 = [v13 metrics];
          id v16 = [v14 initWithDictionary:v15];

          [v7 addObject:v16];
          uint64_t v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v10);
    }

    a1 = v17;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C3144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003C3164(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = +[NSXPCConnection currentConnection];
    CFStringRef v2 = +[XPCClient clientIDForConnection:v1];
  }
  else
  {
    CFStringRef v2 = 0;
  }
  return v2;
}

uint64_t sub_1003C3808(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class sub_1003C3960(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1005B11C0)
  {
    v4[1] = _NSConcreteStackBlock;
    _DWORD v4[2] = 3221225472;
    v4[3] = sub_1003C3AB4;
    void v4[4] = &unk_100521BF0;
    void v4[5] = v4;
    long long v5 = off_10052BE58;
    uint64_t v6 = 0;
    qword_1005B11C0 = _sl_dlopen();
    CFStringRef v2 = (void *)v4[0];
    if (!qword_1005B11C0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("_DASScheduler");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    CFStringRef v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1005B11B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1003C3AB4()
{
  uint64_t result = _sl_dlopen();
  qword_1005B11C0 = result;
  return result;
}

id *sub_1003C3B28(id *a1, void *a2, void *a3, double a4)
{
  id v8 = a2;
  id v9 = a3;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)RequestThrottle;
    id v10 = (id *)objc_msgSendSuper2(&v15, "init");
    a1 = v10;
    if (v10)
    {
      objc_storeStrong(v10 + 1, a2);
      *((double *)a1 + 2) = a4;
      if (a4 <= 2.22044605e-16)
      {
        sub_1003704D0((uint64_t)v9);
      }
      else
      {
        objc_storeStrong(a1 + 3, a3);
        uint64_t v11 = [a1[1] now];
        uint64_t v12 = (uint64_t)a1[3];
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_1003C3C68;
        v16[3] = &unk_10052BE78;
        id v17 = v11;
        long long v18 = a1;
        id v13 = v11;
        sub_100370724(v12, v16);
      }
    }
  }

  return a1;
}

uint64_t sub_1003C3C68(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_1003A95D0(v3, *(void **)(a1 + 32));
  if (v4 < 0.0 || v4 >= *(double *)(*(void *)(a1 + 40) + 16))
  {
    uint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (v3)
      {
        id v8 = objc_getProperty(v3, v7, 24, 1);
        id Property = objc_getProperty(v3, v9, 16, 1);
        uint64_t v11 = v8;
      }
      else
      {
        id v8 = 0;
        uint64_t v11 = 0;
        id Property = 0;
      }
      id v12 = Property;
      int v14 = 138543874;
      id v15 = v8;
      __int16 v16 = 2114;
      id v17 = v12;
      __int16 v18 = 2048;
      double v19 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Throttle: Discarding expired record for %{public}@ / %{public}@ (%.0f seconds)", (uint8_t *)&v14, 0x20u);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_1003C3DD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = v7;
    self;
    uint64_t v16 = 0;
    id v17 = &v16;
    uint64_t v18 = 0x2020000000;
    char v19 = 0;
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1003C43C8;
    long long v21 = &unk_10052BEA0;
    unsigned __int8 v22 = &v16;
    sub_100369A00(v10, (uint64_t)buf);
    BOOL v11 = *((unsigned char *)v17 + 24) == 0;
    _Block_object_dispose(&v16, 8);

    id v12 = ASDLogHandleForCategory();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v13)
      {
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 2114;
        long long v21 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Throttle: Blocking further requests for %{public}@ / %{public}@: %{public}@", buf, 0x20u);
      }

      int v14 = [RequestThrottleRecord alloc];
      id v15 = [*(id *)(a1 + 8) now];
      id v12 = sub_1003A94EC((id *)&v14->super.isa, v15, v10, v8, v9);

      sub_100370238(*(void *)(a1 + 24), v12);
    }
    else if (v13)
    {
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2114;
      long long v21 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Throttle: Permitting further requests for %{public}@ / %{public}@: %{public}@", buf, 0x20u);
    }
  }
}

void sub_1003C4024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003C4044(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && sub_10037043C(*(void *)(a1 + 24), v3))
  {
    double v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138543362;
      id v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Throttle: Unblocking further requests for %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t sub_1003C410C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!a1)
  {
    a4 = 0;
    goto LABEL_23;
  }
  if (*(double *)(a1 + 16) >= 2.22044605e-16)
  {
    id v9 = sub_1003706A0(*(id **)(a1 + 24), v7);
    id v10 = v9;
    if (v9 && sub_1003A9634(v9, v8))
    {
      BOOL v11 = [*(id *)(a1 + 8) now];
      double v12 = sub_1003A95D0(v10, v11);

      if (v12 >= 0.0 && v12 < *(double *)(a1 + 16))
      {
        BOOL v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          double v14 = *(double *)(a1 + 16) - v12;
          *(_DWORD *)long long buf = 138543618;
          id v21 = v7;
          __int16 v22 = 2048;
          double v23 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Throttle: Blocking request for %{public}@ will unblock after %.0f seconds", buf, 0x16u);
        }

        if (!a4) {
          goto LABEL_22;
        }
        id v15 = +[NSString stringWithFormat:@"Throttling request for %.0f seconds", *(double *)(a1 + 16) - v12];
        id v17 = objc_getProperty(v10, v16, 8, 1);
        ASDErrorWithUnderlyingErrorAndDescription();
        *(void *)a4 = (id)objc_claimAutoreleasedReturnValue();

        a4 = 0;
        goto LABEL_20;
      }
      if (sub_10037043C(*(void *)(a1 + 24), v7))
      {
        id v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          id v21 = v7;
          uint64_t v18 = "Throttle: Unblocking requests after expiry for %{public}@";
          goto LABEL_18;
        }
        goto LABEL_19;
      }
    }
    else if (sub_10037043C(*(void *)(a1 + 24), v7))
    {
      id v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v21 = v7;
        uint64_t v18 = "Throttle: Unblocking requests for new version of %{public}@";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
      }
LABEL_19:
      a4 = 1;
LABEL_20:

LABEL_22:
      goto LABEL_23;
    }
    a4 = 1;
    goto LABEL_22;
  }
  a4 = 1;
LABEL_23:

  return a4;
}

BOOL sub_1003C43C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = [v3 domain];
  unsigned int v5 = [v4 isEqualToString:AMSErrorDomain];

  if (!v5)
  {
    id v8 = [v3 domain];

    unsigned int v9 = [v8 isEqualToString:NSURLErrorDomain];
    if (!v9) {
      return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
    }
    goto LABEL_4;
  }
  id v6 = (char *)[v3 code];

  if ((unint64_t)(v6 - 203) <= 3 && v6 != (char *)204) {
LABEL_4:
  }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

id sub_1003C44E0()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003C4584;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B11D0 != -1) {
    dispatch_once(&qword_1005B11D0, block);
  }
  uint64_t v0 = (void *)qword_1005B11C8;
  return v0;
}

void sub_1003C4584(uint64_t a1)
{
  uint64_t v1 = (id *)objc_alloc(*(Class *)(a1 + 32));
  CFStringRef v2 = [InstallAttributionDatabaseStore alloc];
  sub_1001F5660();
  id v24 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  id v3 = sub_1001F5824(v24);
  double v4 = [(SQLiteDatabaseStore *)v2 initWithDatabase:v3];
  unsigned int v5 = sub_10020E0BC();
  id v6 = v4;
  id v7 = v5;
  if (v1)
  {
    v25.receiver = v1;
    v25.super_class = (Class)InstallAttributionManager;
    id v8 = (id *)objc_msgSendSuper2(&v25, "init");
    uint64_t v1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, v5);
      uint64_t v9 = sub_10030B11C();
      id v10 = v1[2];
      v1[2] = (id)v9;

      objc_storeStrong(v1 + 3, v4);
      BOOL v11 = objc_alloc_init(TaskQueue);
      id v12 = v1[4];
      v1[4] = v11;

      BOOL v13 = (id *)v1[4];
      if (v13) {
        [v13[1] setName:@"com.apple.appstored.InstallAttributionManagerTaskQueue"];
      }
      uint64_t v14 = objc_opt_new();
      id v15 = v1[5];
      v1[5] = (id)v14;

      uint64_t v16 = objc_opt_new();
      id v17 = v1[6];
      v1[6] = (id)v16;

      uint64_t v18 = objc_opt_new();
      id v19 = v1[8];
      v1[8] = (id)v18;

      long long v20 = objc_alloc_init(UnfairLock);
      id v21 = v1[7];
      v1[7] = v20;

      sub_1003C47F4((uint64_t)v1);
      id v22 = v1[3];
      uint64_t v27 = 0;
      id v28 = &v27;
      uint64_t v29 = 0x2020000000;
      char v30 = 0;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1003D110C;
      void v26[3] = &unk_10052C040;
      void v26[4] = &v27;
      [v22 readUsingSession:v26];
      if (*((unsigned char *)v28 + 24)) {
        sub_1003C792C();
      }
      _Block_object_dispose(&v27, 8);
    }
  }

  double v23 = (void *)qword_1005B11C8;
  qword_1005B11C8 = (uint64_t)v1;
}

void sub_1003C47DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003C47F4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v39 = 0;
    objc_super v40 = &v39;
    uint64_t v41 = 0x3032000000;
    uint64_t v42 = sub_1000183E8;
    id v43 = sub_100017DB0;
    id v44 = 0;
    uint64_t v1 = *(void **)(a1 + 24);
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_1003CDC80;
    v38[3] = &unk_10052C040;
    v38[4] = &v39;
    [v1 readUsingSession:v38];
    CFStringRef v2 = objc_opt_new();
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v3 = (id)v40[5];
    id v4 = [v3 countByEnumeratingWithState:&v34 objects:v47 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v35;
      do
      {
        for (id i = 0; i != v4; id i = (char *)i + 1)
        {
          if (*(void *)v35 != v5) {
            objc_enumerationMutation(v3);
          }
          id v7 = *(void **)(*((void *)&v34 + 1) + 8 * i);
          if (v7) {
            id v7 = (void *)v7[22];
          }
          id v8 = v7;
          unsigned int v9 = +[SKANEnvironmentHelper shouldUseDevelopmentSettingsForEnvironment:v8];

          if (v9) {
            id v10 = @"development";
          }
          else {
            id v10 = @"production";
          }
          BOOL v11 = v10;
          [v2 addObject:v11];
        }
        id v4 = [v3 countByEnumeratingWithState:&v34 objects:v47 count:16];
      }
      while (v4);
    }

    id v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Registering pingback transmission tasks for environments: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id obj = v2;
    id v13 = [obj countByEnumeratingWithState:&v30 objects:v46 count:16];
    if (v13)
    {
      uint64_t v29 = *(void *)v31;
      id v28 = (char *)XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
      uint64_t v27 = (char *)XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
      do
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v31 != v29) {
            objc_enumerationMutation(obj);
          }
          id v15 = *(id *)(*((void *)&v30 + 1) + 8 * (void)v14);
          self;
          uint64_t v16 = +[SKANEnvironmentHelper pingbackDelayOverrideForEnvironment:v15];
          if ([v15 isEqualToString:@"production"])
          {
            id v17 = &XPC_ACTIVITY_INTERVAL_1_HOUR;
            uint64_t v18 = @"com.apple.appstored.InstallAttributionManager.PingbackRetry";
            int64_t v19 = 1200;
            int64_t v20 = 86400;
LABEL_25:
            int64_t v21 = *v17;
            xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
            xpc_dictionary_set_int64(v22, XPC_ACTIVITY_INTERVAL, v20);
            xpc_dictionary_set_int64(v22, XPC_ACTIVITY_GRACE_PERIOD, v21);
            xpc_dictionary_set_string(v22, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
            xpc_dictionary_set_BOOL(v22, v28, 1);
            xpc_dictionary_set_int64(v22, v27, v19);
            double v23 = (const char *)[(__CFString *)v18 UTF8String];
            *(void *)&long long buf = _NSConcreteStackBlock;
            *((void *)&buf + 1) = 3221225472;
            long long v49 = sub_1003CDCCC;
            long long v50 = &unk_100521EF8;
            id v51 = v22;
            id v52 = v15;
            id v24 = v22;
            xpc_activity_register(v23, XPC_ACTIVITY_CHECK_IN, &buf);

            goto LABEL_26;
          }
          if (v16)
          {
            int64_t v20 = (int64_t)[v16 integerValue];
            id v17 = &XPC_ACTIVITY_INTERVAL_1_MIN;
            uint64_t v18 = @"com.apple.appstored.InstallAttributionManager.PingbackRetry.Development";
            int64_t v19 = 20;
            goto LABEL_25;
          }
          id v24 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int16 v45 = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Invalid configuration for registering postback retry task", v45, 2u);
          }
LABEL_26:

          uint64_t v14 = (char *)v14 + 1;
        }
        while (v13 != v14);
        id v25 = [obj countByEnumeratingWithState:&v30 objects:v46 count:16];
        id v13 = v25;
      }
      while (v25);
    }

    _Block_object_dispose(&v39, 8);
  }
}

void sub_1003C4D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t sub_1003C4D74()
{
  self;
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    sub_10030B11C();
    uint64_t v1 = (id *)objc_claimAutoreleasedReturnValue();
    CFStringRef v2 = sub_10030BBA8(v1, @"skadnetwork-use-ut", 1);

    return (uint64_t)v2;
  }
  return result;
}

void sub_1003C4DDC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if (v5) {
      id v7 = (void *)v5[1];
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;
    id v9 = [v8 longLongValue];

    id v10 = +[SkannerEvent resultTypeFinalized];
    if (v5) {
      BOOL v11 = (void *)v5[2];
    }
    else {
      BOOL v11 = 0;
    }
    id v12 = v11;
    id v13 = +[SkannerEvent adTypeApp];
    uint64_t v14 = +[SkannerEvent interactionTypeView];
    if (v5) {
      id v15 = (void *)v5[10];
    }
    else {
      id v15 = 0;
    }
    id v16 = v15;
    id v17 = +[SkannerEvent impressionWithResult:v10 adNetworkID:v12 adType:v13 interactionType:v14 version:v16 error:0];

    if (sub_1003C4D74()
      && (!v5 ? (uint64_t v18 = 0) : (uint64_t v18 = (void *)v5[1]),
          id v19 = v18,
          int v20 = sub_1003C585C(a1, v19),
          v19,
          v20))
    {
      int64_t v21 = ASDErrorWithDescription();
      xpc_object_t v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Rejecting impression after buy", buf, 2u);
      }

      if (v6) {
        v6[2](v6, v21);
      }
      [v17 setError:v21];
      double v23 = +[SkannerCoordinator sharedInstance];
      [v23 logEvent:v17 forAdvertisedAppAdamID:v9];
    }
    else if (sub_100262CF0(v5))
    {
      if (v5
        && (id v24 = (id)v5[10]) != 0
        && (id v25 = v24, v26 = ASDInstallAttributionVersionCreateFromString(), v25, v26 > 201))
      {
        uint64_t v27 = sub_100262FEC(v5);
        if (v27)
        {
          if (v6) {
            v6[2](v6, v27);
          }
          [v17 setError:v27];
          id v28 = +[SkannerCoordinator sharedInstance];
          [v28 logEvent:v17 forAdvertisedAppAdamID:v9];
        }
        else
        {
          id v34 = (id)v5[11];
          id v35 = (id)v5[6];
          id v36 = (id)v5[10];
          id v37 = (id)v5[2];
          uint64_t v27 = 0;
          id v68 = sub_1002631A8((uint64_t)InstallAttributionImpression, v34, v35, (uint64_t)v36, v37);

          if (v68)
          {
            id v38 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v68;
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Impression is misconfigured. Not adding. Error: %{public}@", buf, 0xCu);
            }

            if (v6) {
              v6[2](v6, 0);
            }
            [v17 setError:v68];
            uint64_t v39 = +[SkannerCoordinator sharedInstance];
            [v39 logEvent:v17 forAdvertisedAppAdamID:v9];
          }
          else
          {
            id v40 = (id)v5[10];
            if (v40 && ASDInstallAttributionVersionCreateFromString() > 399)
            {
              uint64_t v41 = sub_1003C5940(a1, v5[4]);
            }
            else
            {
              uint64_t v41 = sub_1003C5B58(a1, v5[3]);
            }
            uint64_t v39 = (void *)v41;

            if (v39)
            {
              uint64_t v42 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138543362;
                *(void *)&uint8_t buf[4] = v39;
                _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Error adding impression to DB: %{public}@", buf, 0xCu);
              }

              if (v6)
              {
                id v43 = sub_1003C5D54(v39);
                v6[2](v6, v43);
              }
              id v44 = (id)v5[2];
              id v45 = (id)v5[10];
              uint64_t v27 = 0;
              sub_100263888((uint64_t)InstallAttributionImpression, v44, 0, v45, v39);

              [v17 setError:v39];
              id v46 = +[SkannerCoordinator sharedInstance];
              [v46 logEvent:v17 forAdvertisedAppAdamID:v9];
            }
            else
            {
              uint64_t v80 = 0;
              id v81 = &v80;
              uint64_t v82 = 0x2020000000;
              char v83 = 0;
              id v47 = *(void **)(a1 + 24);
              v77[0] = _NSConcreteStackBlock;
              v77[1] = 3221225472;
              v77[2] = sub_1003C5E00;
              v77[3] = &unk_100524E00;
              SEL v79 = &v80;
              long long v48 = v5;
              id v78 = v48;
              [v47 readUsingSession:v77];
              if (*((unsigned char *)v81 + 24))
              {
                long long v49 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
                {
                  id v50 = (id)v5[6];
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)&uint8_t buf[4] = v50;
                  _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Found prior impression. Overwriting with new impression for source app:%{public}@", buf, 0xCu);
                }
              }
              *(void *)long long buf = 0;
              *(void *)&uint8_t buf[8] = buf;
              *(void *)&uint8_t buf[16] = 0x3032000000;
              unsigned __int8 v85 = sub_1000183E8;
              uint64_t v86 = sub_100017DB0;
              id v87 = 0;
              uint64_t v73 = 0;
              id v74 = &v73;
              uint64_t v75 = 0x2020000000;
              char v76 = 0;
              id v51 = *(void **)(a1 + 24);
              v69[0] = _NSConcreteStackBlock;
              v69[1] = 3221225472;
              v69[2] = sub_1003C5E88;
              v69[3] = &unk_100524E50;
              id v71 = &v73;
              uint64_t v70 = v48;
              uint64_t v72 = buf;
              id v52 = v51;
              uint64_t v27 = 0;
              [v52 modifyUsingTransaction:v69];
              if (!*((unsigned char *)v74 + 24))
              {
                uint64_t v53 = *(void *)(*(void *)&buf[8] + 40);
                if (!v53)
                {
                  uint64_t v54 = ASDErrorWithDescription();
                  id v55 = *(void **)(*(void *)&buf[8] + 40);
                  *(void *)(*(void *)&buf[8] + 40) = v54;

                  uint64_t v53 = *(void *)(*(void *)&buf[8] + 40);
                }
                [v17 setError:v53];
                uint64_t v56 = +[SkannerCoordinator sharedInstance];
                [v56 logEvent:v17 forAdvertisedAppAdamID:v9];
              }
              if (v6)
              {
                id v57 = sub_1003C5D54(*(void **)(*(void *)&buf[8] + 40));
                v6[2](v6, v57);
              }
              _Block_object_dispose(&v73, 8);
              _Block_object_dispose(buf, 8);

              _Block_object_dispose(&v80, 8);
              uint64_t v39 = 0;
            }
          }
        }
      }
      else
      {
        uint64_t v58 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          if (v5)
          {
            id v64 = (id)v5[11];
            uint64_t v65 = (void *)v5[6];
            id v66 = v64;
          }
          else
          {
            id v64 = 0;
            id v66 = 0;
            uint64_t v65 = 0;
          }
          id v67 = v65;
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v64;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v67;
          _os_log_error_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Start impression called by source app bundle ID:%{public}@, adam ID:%{public}@ with incorrect version number", buf, 0x16u);
        }
        id v59 = ASDErrorWithDescription();
        if (v6) {
          v6[2](v6, v59);
        }
        if (v5)
        {
          id v60 = (id)v5[2];
          id v61 = (void *)v5[10];
        }
        else
        {
          id v60 = 0;
          id v61 = 0;
        }
        id v62 = v61;
        sub_100263888((uint64_t)InstallAttributionImpression, v60, 0, v62, v59);

        [v17 setError:v59];
        id v63 = +[SkannerCoordinator sharedInstance];
        [v63 logEvent:v17 forAdvertisedAppAdamID:v9];
      }
    }
    else
    {
      uint64_t v29 = ASDErrorWithDescription();
      if (v6) {
        v6[2](v6, v29);
      }
      if (v5)
      {
        id v30 = (id)v5[2];
        long long v31 = (void *)v5[10];
      }
      else
      {
        id v30 = 0;
        long long v31 = 0;
      }
      id v32 = v31;
      sub_100263888((uint64_t)InstallAttributionImpression, v30, 0, v32, v29);

      [v17 setError:v29];
      long long v33 = +[SkannerCoordinator sharedInstance];
      [v33 logEvent:v17 forAdvertisedAppAdamID:v9];
    }
  }
}

void sub_1003C5818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_1003C585C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  id v4 = *(void **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1003D16C8;
  v8[3] = &unk_100524E00;
  id v10 = &v11;
  id v5 = v3;
  id v9 = v5;
  [v4 readUsingSession:v8];
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1003C5928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003C5940(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    id v11 = 0;
    sub_10030B8A4(v3, @"install-attribution-max-source-identifier", &v11);
    id v4 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
    id v5 = v11;
    if (!v4)
    {
      uint64_t v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v13 = (uint64_t)v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to get install attribution source identifier limit from bag with error: %{public}@", buf, 0xCu);
      }

      id v4 = &off_10054CE58;
    }
    if ((uint64_t)[v4 integerValue] <= a2)
    {
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v10 = [v4 integerValue];
        *(_DWORD *)long long buf = 134349312;
        uint64_t v13 = a2;
        __int16 v14 = 2050;
        id v15 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Source identifier %{public}ld larger than maximum %{public}ld", buf, 0x16u);
      }
    }
    else
    {
      if ((a2 & 0x8000000000000000) == 0)
      {
        id v7 = 0;
LABEL_15:

        goto LABEL_16;
      }
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Source identifier smaller than 0", buf, 2u);
      }
    }

    id v7 = ASDErrorWithDescription();
    goto LABEL_15;
  }
  id v7 = 0;
LABEL_16:
  return v7;
}

id sub_1003C5B58(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    id v10 = 0;
    sub_10030B8A4(v3, @"install-attribution-max-campaign-id", &v10);
    id v4 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
    id v5 = v10;
    if (!v4)
    {
      uint64_t v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v12 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to get install attribution campaign limit from bag with error: %{public}@", buf, 0xCu);
      }

      id v4 = &off_10054CE40;
    }
    if ((uint64_t)[v4 integerValue] >= a2)
    {
      if (a2 > 0)
      {
        id v8 = 0;
LABEL_15:

        goto LABEL_16;
      }
      id v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Campaign id smaller than 1", buf, 2u);
      }
    }
    else
    {
      id v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Campaign id larger than maximum", buf, 2u);
      }
    }

    id v8 = ASDErrorWithDescription();
    goto LABEL_15;
  }
  id v8 = 0;
LABEL_16:
  return v8;
}

id sub_1003C5D54(void *a1)
{
  id v1 = a1;
  CFStringRef v2 = v1;
  if (v1)
  {
    id v4 = [v1 domain];
    unsigned int v5 = [v4 isEqualToString:ASDErrorDomain];

    if (v5) {
      ASDErrorWithSafeUserInfo();
    }
    else {
    uint64_t v3 = ASDErrorWithDescription();
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1003C5E00(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  if (v3) {
    unsigned int v5 = *(void **)(v3 + 48);
  }
  else {
    unsigned int v5 = 0;
  }
  id v7 = v5;
  BOOL v6 = sub_1003E36EC((BOOL)v4, v7);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
}

uint64_t sub_1003C5E88(uint64_t a1, BOOL a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  BOOL v4 = sub_1003429EC(a2, *(void **)(a1 + 32));
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1003C5F04(uint64_t a1, void *a2, void *a3)
{
  unsigned int v5 = a2;
  BOOL v6 = a3;
  if (a1)
  {
    if (v5) {
      id v7 = (void *)v5[1];
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;
    id v9 = [v8 longLongValue];

    id v10 = +[SkannerEvent resultTypeFinalized];
    if (v5) {
      id v11 = (void *)v5[2];
    }
    else {
      id v11 = 0;
    }
    id v12 = v11;
    uint64_t v13 = +[SkannerEvent adTypeApp];
    __int16 v14 = +[SkannerEvent interactionTypeView];
    if (v5) {
      id v15 = (void *)v5[10];
    }
    else {
      id v15 = 0;
    }
    id v16 = v15;
    id v17 = +[SkannerEvent impressionWithResult:v10 adNetworkID:v12 adType:v13 interactionType:v14 version:v16 error:0];

    if (sub_1003C4D74()
      && (!v5 ? (uint64_t v18 = 0) : (uint64_t v18 = (void *)v5[1]),
          id v19 = v18,
          int v20 = sub_1003C585C(a1, v19),
          v19,
          v20))
    {
      int64_t v21 = ASDErrorWithDescription();
      xpc_object_t v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Rejecting impression after buy", buf, 2u);
      }

      if (v6) {
        v6[2](v6, v21);
      }
      [v17 setError:v21];
      double v23 = +[SkannerCoordinator sharedInstance];
      [v23 logEvent:v17 forAdvertisedAppAdamID:v9];
    }
    else if (sub_100262CF0(v5))
    {
      if (v5
        && (id v24 = (id)v5[10]) != 0
        && (id v25 = v24, v26 = ASDInstallAttributionVersionCreateFromString(), v25, v26 > 201))
      {
        uint64_t v27 = sub_100262FEC(v5);
        if (v27)
        {
          if (v6) {
            v6[2](v6, v27);
          }
          [v17 setError:v27];
          id v28 = +[SkannerCoordinator sharedInstance];
          [v28 logEvent:v17 forAdvertisedAppAdamID:v9];
        }
        else
        {
          id v34 = (id)v5[11];
          id v35 = (id)v5[6];
          id v36 = (id)v5[10];
          id v37 = (id)v5[2];
          uint64_t v27 = 0;
          id v66 = sub_1002631A8((uint64_t)InstallAttributionImpression, v34, v35, (uint64_t)v36, v37);

          if (v66)
          {
            id v38 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v66;
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Impression is misconfigured. Not adding. Error: %{public}@", buf, 0xCu);
            }

            if (v6) {
              v6[2](v6, 0);
            }
            [v17 setError:v66];
            uint64_t v39 = +[SkannerCoordinator sharedInstance];
            [v39 logEvent:v17 forAdvertisedAppAdamID:v9];
          }
          else
          {
            id v40 = (id)v5[10];
            if (v40 && ASDInstallAttributionVersionCreateFromString() > 399)
            {
              uint64_t v41 = sub_1003C5940(a1, v5[4]);
            }
            else
            {
              uint64_t v41 = sub_1003C5B58(a1, v5[3]);
            }
            uint64_t v39 = (void *)v41;

            if (v39)
            {
              uint64_t v42 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138543362;
                *(void *)&uint8_t buf[4] = v39;
                _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Error finalizing impression: %{public}@", buf, 0xCu);
              }

              if (v6)
              {
                id v43 = sub_1003C5D54(v39);
                v6[2](v6, v43);
              }
              id v44 = (id)v5[2];
              id v45 = (id)v5[10];
              uint64_t v27 = 0;
              sub_100263888((uint64_t)InstallAttributionImpression, v44, 0, v45, v39);

              [v17 setError:v39];
              id v46 = +[SkannerCoordinator sharedInstance];
              [v46 logEvent:v17 forAdvertisedAppAdamID:v9];
            }
            else
            {
              *(void *)long long buf = 0;
              *(void *)&uint8_t buf[8] = buf;
              *(void *)&uint8_t buf[16] = 0x3032000000;
              id v74 = sub_1000183E8;
              uint64_t v75 = sub_100017DB0;
              id v76 = 0;
              v71[0] = 0;
              v71[1] = v71;
              v71[2] = 0x2020000000;
              char v72 = 0;
              id v47 = *(void **)(a1 + 24);
              v67[0] = _NSConcreteStackBlock;
              v67[1] = 3221225472;
              v67[2] = sub_1003C68D8;
              v67[3] = &unk_100524E50;
              unsigned __int8 v69 = v71;
              long long v48 = v5;
              id v68 = v48;
              uint64_t v70 = buf;
              [v47 modifyUsingTransaction:v67];
              uint64_t v49 = *(void *)(*(void *)&buf[8] + 40);
              id v50 = (id)v5[2];
              if (v49)
              {
                id v51 = (id)v5[10];
                sub_100263888((uint64_t)InstallAttributionImpression, v50, 0, v51, *(void **)(*(void *)&buf[8] + 40));
                uint64_t v27 = 0;

                [v17 setError:*(void *)(*(void *)&buf[8] + 40)];
                id v52 = +[SkannerCoordinator sharedInstance];
                [v52 logEvent:v17 forAdvertisedAppAdamID:v9];
              }
              else
              {
                BOOL v53 = v48[12] != 0;
                id v54 = (id)v5[10];
                sub_1002639D8((uint64_t)InstallAttributionImpression, v50, v53, v54);
                uint64_t v27 = 0;

                [v17 setError:0];
                id v52 = +[SkannerCoordinator sharedInstance];
                [v52 startStoryIfNeededWith:v17 forAdvertisedAppAdamID:v9];
              }

              if (v6)
              {
                id v55 = sub_1003C5D54(*(void **)(*(void *)&buf[8] + 40));
                v6[2](v6, v55);
              }
              _Block_object_dispose(v71, 8);
              _Block_object_dispose(buf, 8);

              uint64_t v39 = 0;
            }
          }
        }
      }
      else
      {
        uint64_t v56 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          if (v5)
          {
            id v62 = (id)v5[11];
            id v63 = (void *)v5[6];
            id v64 = v62;
          }
          else
          {
            id v62 = 0;
            id v64 = 0;
            id v63 = 0;
          }
          id v65 = v63;
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v62;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v65;
          _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "End impression called by source app bundle ID:%{public}@, adam ID:%{public}@ with incorrect version number", buf, 0x16u);
        }
        id v57 = ASDErrorWithDescription();
        if (v6) {
          v6[2](v6, v57);
        }
        if (v5)
        {
          id v58 = (id)v5[2];
          id v59 = (void *)v5[10];
        }
        else
        {
          id v58 = 0;
          id v59 = 0;
        }
        id v60 = v59;
        sub_100263888((uint64_t)InstallAttributionImpression, v58, 0, v60, v57);

        [v17 setError:v57];
        id v61 = +[SkannerCoordinator sharedInstance];
        [v61 logEvent:v17 forAdvertisedAppAdamID:v9];
      }
    }
    else
    {
      uint64_t v29 = ASDErrorWithDescription();
      if (v6) {
        v6[2](v6, v29);
      }
      if (v5)
      {
        id v30 = (id)v5[2];
        long long v31 = (void *)v5[10];
      }
      else
      {
        id v30 = 0;
        long long v31 = 0;
      }
      id v32 = v31;
      sub_100263888((uint64_t)InstallAttributionImpression, v30, 0, v32, v29);

      [v17 setError:v29];
      long long v33 = +[SkannerCoordinator sharedInstance];
      [v33 logEvent:v17 forAdvertisedAppAdamID:v9];
    }
  }
}

void sub_1003C68AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C68D8(void *a1, void *a2)
{
  BOOL v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  BOOL v6 = sub_100342D6C(a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

id sub_1003C6954(id a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = &v26;
    uint64_t v28 = 0x3032000000;
    uint64_t v29 = sub_1000183E8;
    id v30 = sub_100017DB0;
    id v31 = 0;
    uint64_t v5 = (void *)*((void *)a1 + 3);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1003C6BE0;
    void v23[3] = &unk_100524E00;
    id v25 = &v26;
    id v6 = v3;
    id v24 = v6;
    [v5 readUsingSession:v23];
    if (sub_10030BBA8(*((id **)a1 + 2), @"skadnetwork-allow-stub-impressions", 0))
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v17;
      uint64_t v19 = 0x3032000000;
      int v20 = sub_1000183E8;
      int64_t v21 = sub_100017DB0;
      id v22 = 0;
      id v7 = (void *)*((void *)a1 + 3);
      id v11 = _NSConcreteStackBlock;
      uint64_t v12 = 3221225472;
      uint64_t v13 = sub_1003C6C60;
      uint64_t v14 = &unk_100524E00;
      uint64_t v16 = &v17;
      id v15 = v6;
      [v7 readUsingSession:&v11];
      id v8 = (void *)v18[5];
      if (v8)
      {
        if (objc_msgSend(v8, "count", v11, v12, v13, v14))
        {
          [(id)v27[5] addObjectsFromArray:v18[5]];
          [(id)v27[5] sortUsingComparator:&stru_10052BEE8];
          if ((unint64_t)[(id)v27[5] count] >= 7)
          {
            id v9 = (char *)[(id)v27[5] count];
            objc_msgSend((id)v27[5], "removeObjectsInRange:", 6, v9 - 6);
          }
        }
      }

      _Block_object_dispose(&v17, 8);
    }
    a1 = (id)v27[5];

    _Block_object_dispose(&v26, 8);
  }

  return a1;
}

void sub_1003C6BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1003C6BE0(uint64_t a1, void *a2)
{
  sub_1003E43AC(a2, *(void **)(a1 + 32));
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = +[NSMutableArray arrayWithArray:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1003C6C60(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003E3798(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

int64_t sub_1003C6CB4(id a1, id a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  objc_opt_class();
  sub_100012D7C(v5);
  id v6 = (id *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  sub_100012D7C(v5);
  uint64_t v7 = (id *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    id v8 = v6 + 12;
LABEL_5:
    id v9 = *v8;
    goto LABEL_6;
  }
  if (v7)
  {
    id v8 = v7 + 6;
    goto LABEL_5;
  }
  id v9 = 0;
LABEL_6:
  objc_opt_class();
  sub_100012D7C(v4);
  id v10 = (id *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  sub_100012D7C(v4);
  id v11 = (id *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    uint64_t v12 = v10 + 12;
  }
  else
  {
    if (!v11)
    {
      id v13 = 0;
      goto LABEL_11;
    }
    uint64_t v12 = v11 + 6;
  }
  id v13 = *v12;
LABEL_11:
  id v14 = [v13 compare:v9];

  return (int64_t)v14;
}

void *sub_1003C6DFC(void *a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if (v7) {
      id v9 = (void *)*((void *)v7 + 1);
    }
    else {
      id v9 = 0;
    }
    id v10 = v9;
    id v74 = [v10 longLongValue];

    id v11 = +[SkannerEvent resultTypeFinalized];
    if (v7) {
      uint64_t v12 = (void *)*((void *)v7 + 2);
    }
    else {
      uint64_t v12 = 0;
    }
    id v13 = v12;
    id v14 = +[SkannerEvent adTypeApp];
    if (v7)
    {
      id v15 = *((id *)v7 + 14);
      uint64_t v16 = (void *)*((void *)v7 + 11);
    }
    else
    {
      id v15 = 0;
      uint64_t v16 = 0;
    }
    id v17 = v16;
    uint64_t v18 = +[SkannerEvent impressionWithResult:v11 adNetworkID:v13 adType:v14 interactionType:v15 version:v17 error:0];

    if (sub_1003C4D74())
    {
      uint64_t v19 = v7 ? (void *)*((void *)v7 + 1) : 0;
      id v20 = v19;
      int v21 = sub_1003C585C((uint64_t)a1, v20);

      if (v21)
      {
        a1 = ASDErrorWithDescription();
        id v22 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)SEL v79 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Rejecting impression after buy", v79, 2u);
        }

        [v18 setError:a1];
        double v23 = +[SkannerCoordinator sharedInstance];
        [v23 logEvent:v18 forAdvertisedAppAdamID:v74];

        goto LABEL_70;
      }
    }
    *(void *)SEL v79 = 0;
    uint64_t v80 = v79;
    uint64_t v81 = 0x3032000000;
    uint64_t v82 = sub_1000183E8;
    char v83 = sub_100017DB0;
    id v84 = 0;
    if (v7)
    {
      id v24 = *((id *)v7 + 7);
      id v25 = *((id *)v7 + 11);
      uint64_t v26 = (void *)*((void *)v7 + 2);
    }
    else
    {
      id v25 = 0;
      id v24 = 0;
      uint64_t v26 = 0;
    }
    id v27 = v26;
    uint64_t v28 = sub_1002631A8((uint64_t)InstallAttributionImpression, v8, v24, (uint64_t)v25, v27);

    if (v28)
    {
      uint64_t v29 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v28;
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Error adding params to DB: %{public}@", (uint8_t *)&buf, 0xCu);
      }

      [v18 setError:v28];
      id v30 = +[SkannerCoordinator sharedInstance];
      [v30 logEvent:v18 forAdvertisedAppAdamID:v74];

      a1 = v28;
      goto LABEL_69;
    }
    if (v7) {
      id v31 = (void *)*((void *)v7 + 14);
    }
    else {
      id v31 = 0;
    }
    id v32 = v31;
    long long v33 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v32;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Received params with interaction type: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    if (([v32 isEqualToString:ASDInstallAttributionInteractionTypeView] & 1) == 0
      && ([v32 isEqualToString:ASDInstallAttributionInteractionTypeClick] & 1) == 0)
    {
      uint64_t v43 = ASDErrorWithDescription();
      id v44 = (void *)*((void *)v80 + 5);
      *((void *)v80 + 5) = v43;

      id v45 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        uint64_t v47 = *((void *)v80 + 5);
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v47;
        _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Error adding params to DB: %{public}@", (uint8_t *)&buf, 0xCu);
      }

      [v18 setError:*((void *)v80 + 5)];
      id v46 = +[SkannerCoordinator sharedInstance];
      [v46 logEvent:v18 forAdvertisedAppAdamID:v74];

      goto LABEL_53;
    }
    if (v7)
    {
      id v34 = *((id *)v7 + 11);
      if (v34)
      {
        id v35 = v34;
        BOOL v36 = ASDInstallAttributionVersionCreateFromString() > 399;

        if (v36)
        {
          uint64_t v37 = sub_1003C5940((uint64_t)a1, *((void *)v7 + 4));
          id v38 = (void *)*((void *)v80 + 5);
          *((void *)v80 + 5) = v37;

          if (*((void *)v80 + 5))
          {
            uint64_t v39 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              uint64_t v48 = *((void *)v80 + 5);
              LODWORD(buf) = 138543362;
              *(void *)((char *)&buf + 4) = v48;
              _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Error adding params to DB: %{public}@", (uint8_t *)&buf, 0xCu);
            }

            id v40 = *((id *)v7 + 2);
            id v41 = *((id *)v7 + 11);
            sub_100263888((uint64_t)InstallAttributionImpression, v40, 1, v41, *((void **)v80 + 5));

            [v18 setError:*((void *)v80 + 5)];
            uint64_t v42 = +[SkannerCoordinator sharedInstance];
            [v42 logEvent:v18 forAdvertisedAppAdamID:v74];

LABEL_53:
            a1 = *((id *)v80 + 5);
LABEL_68:

LABEL_69:
            _Block_object_dispose(v79, 8);

LABEL_70:
            goto LABEL_71;
          }
          goto LABEL_54;
        }
      }
      if (a4) {
        goto LABEL_54;
      }
      uint64_t v49 = *((void *)v7 + 3);
    }
    else
    {
      if (a4) {
        goto LABEL_54;
      }
      uint64_t v49 = 0;
    }
    uint64_t v50 = sub_1003C5B58((uint64_t)a1, v49);
    id v51 = (void *)*((void *)v80 + 5);
    *((void *)v80 + 5) = v50;

    if (*((void *)v80 + 5))
    {
      id v52 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v73 = *((void *)v80 + 5);
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v73;
        _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Error adding params to DB: %{public}@", (uint8_t *)&buf, 0xCu);
      }

      if (v7)
      {
        id v53 = *((id *)v7 + 2);
        id v54 = (void *)*((void *)v7 + 11);
      }
      else
      {
        id v53 = 0;
        id v54 = 0;
      }
      id v55 = v54;
      sub_100263888((uint64_t)InstallAttributionImpression, v53, 1, v55, *((void **)v80 + 5));

      [v18 setError:*((void *)v80 + 5)];
      uint64_t v56 = +[SkannerCoordinator sharedInstance];
      [v56 logEvent:v18 forAdvertisedAppAdamID:v74];

      goto LABEL_53;
    }
LABEL_54:
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v90 = 0x2020000000;
    char v91 = 0;
    id v57 = (void *)a1[3];
    v75[0] = _NSConcreteStackBlock;
    v75[1] = 3221225472;
    v75[2] = sub_1003C78B0;
    v75[3] = &unk_100524E50;
    p_long long buf = &buf;
    id v58 = (id *)v7;
    id v76 = v58;
    id v78 = v79;
    [v57 modifyUsingTransaction:v75];
    if (*(unsigned char *)(*((void *)&buf + 1) + 24))
    {
      id v59 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
        {
          id v60 = v58[1];
          id v61 = v58[7];
        }
        else
        {
          id v60 = 0;
          id v61 = 0;
        }
        id v62 = v61;
        *(_DWORD *)unsigned __int8 v85 = 138543618;
        id v86 = v60;
        __int16 v87 = 2114;
        id v88 = v62;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Successfully added install attribution params to the database for app adamID: %{public}@ from source app adamID: %{public}@", v85, 0x16u);
      }
      if (v7)
      {
        id v63 = v58[2];
        id v64 = v58[11];
      }
      else
      {
        id v63 = 0;
        id v64 = 0;
      }
      id v65 = v64;
      sub_1002639D8((uint64_t)InstallAttributionImpression, v63, 1, v65);

      [v18 setError:0];
      id v66 = +[SkannerCoordinator sharedInstance];
      [v66 startStoryIfNeededWith:v18 forAdvertisedAppAdamID:v74];

      sub_1003C792C();
    }
    else
    {
      if (!*((void *)v80 + 5))
      {
        uint64_t v67 = ASDErrorWithDescription();
        id v68 = (void *)*((void *)v80 + 5);
        *((void *)v80 + 5) = v67;
      }
      unsigned __int8 v69 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        char v72 = (void *)*((void *)v80 + 5);
        *(_DWORD *)unsigned __int8 v85 = 138543362;
        id v86 = v72;
        _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "Error adding params to DB: %{public}@", v85, 0xCu);
      }

      [v18 setError:*((void *)v80 + 5)];
      uint64_t v70 = +[SkannerCoordinator sharedInstance];
      [v70 logEvent:v18 forAdvertisedAppAdamID:v74];
    }
    a1 = *((id *)v80 + 5);

    _Block_object_dispose(&buf, 8);
    goto LABEL_68;
  }
LABEL_71:

  return a1;
}

void sub_1003C785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C78B0(void *a1, BOOL a2)
{
  id v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  BOOL v6 = sub_100344100(a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

void sub_1003C792C()
{
  self;
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v0, XPC_ACTIVITY_INTERVAL, 604800);
  xpc_dictionary_set_int64(v0, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_DAY);
  xpc_dictionary_set_string(v0, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  id v1 = (const char *)[@"com.apple.appstored.InstallAttributionManager.CleanDatabase" UTF8String];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003D08CC;
  handler[3] = &unk_100522030;
  id v4 = v0;
  id v2 = v0;
  xpc_activity_register(v1, XPC_ACTIVITY_CHECK_IN, handler);
}

uint64_t sub_1003C7A50(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = sub_100344D90(a2, *(void **)(a1 + 32));
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void *sub_1003C7ACC(void *a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    if (sub_1003C4D74()
      && (!v3 ? (unsigned __int8 v4 = 0) : (unsigned __int8 v4 = (void *)v3[1]),
          id v5 = v4,
          int v6 = sub_1003C585C((uint64_t)a1, v5),
          v5,
          v6))
    {
      a1 = ASDErrorWithDescription();
      id v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Rejecting impression after buy", buf, 2u);
      }
    }
    else
    {
      id v8 = v3;
      id v9 = [[FetchWebImpressionTask alloc] initWithWebParams:v8];
      objc_initWeak(location, v9);
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v33 = 3221225472;
      uint64_t v34 = (uint64_t)sub_1003C8144;
      id v35 = &unk_100527140;
      objc_copyWeak(&v37, location);
      id v10 = v8;
      id v36 = v10;
      [(FetchWebImpressionTask *)v9 setCompletionBlock:buf];
      uint64_t v11 = a1[4];
      if (v11) {
        [*(id *)(v11 + 8) addOperation:v9];
      }

      objc_destroyWeak(&v37);
      objc_destroyWeak(location);

      *(void *)long long buf = 0;
      uint64_t v33 = (uint64_t)buf;
      uint64_t v34 = 0x2020000000;
      LOBYTE(v35) = 0;
      uint64_t v12 = (void *)a1[3];
      uint64_t v26 = _NSConcreteStackBlock;
      uint64_t v27 = 3221225472;
      uint64_t v28 = sub_1003C7F18;
      uint64_t v29 = &unk_1005268D0;
      id v31 = buf;
      id v13 = v10;
      id v30 = v13;
      [v12 modifyUsingTransaction:&v26];
      if (*(unsigned char *)(v33 + 24))
      {
        a1 = 0;
      }
      else
      {
        id v14 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          if (v13) {
            id v24 = v13[3];
          }
          else {
            id v24 = 0;
          }
          id v25 = v24;
          LODWORD(location[0]) = 138543362;
          *(id *)((char *)location + 4) = v25;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "SKAdNetwork: Could not add web params:%{public}@", (uint8_t *)location, 0xCu);
        }
        a1 = ASDErrorWithDescription();
        id v15 = +[SkannerEvent resultTypeFinalized];
        if (v13)
        {
          id v16 = v13[2];
          id v17 = v13[5];
        }
        else
        {
          id v16 = 0;
          id v17 = 0;
        }
        id v18 = v17;
        uint64_t v19 = +[SkannerEvent webImpressionWithResult:v15 adNetworkRegistrableDomain:v16 version:v18 error:a1];

        id v20 = +[SkannerCoordinator sharedInstance];
        if (v13) {
          id v21 = v13[1];
        }
        else {
          id v21 = 0;
        }
        id v22 = v21;
        objc_msgSend(v20, "logEvent:forAdvertisedAppAdamID:", v19, objc_msgSend(v22, "longLongValue"));
      }
      _Block_object_dispose(buf, 8);
    }
  }

  return a1;
}

void sub_1003C7ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
}

uint64_t sub_1003C7F18(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_100344918(a2, *(void **)(a1 + 32));
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

id sub_1003C7F60(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  unsigned __int8 v4 = v3;
  if (a1)
  {
    if (!v3 || (id v5 = v3[1], v6 = [v5 longLongValue], v5, (uint64_t)v6 <= 0))
    {
      id v15 = ASDErrorWithDescription();
      goto LABEL_16;
    }
    id v7 = objc_alloc((Class)NSUUID);
    id v8 = [v4[5] lowercaseString];
    id v9 = [v7 initWithUUIDString:v8];

    if (!v9 || (id v10 = v4[8], v11 = sub_1002F1FD4(v10), v10, (v11 & 1) == 0))
    {
      id v15 = ASDErrorWithDescription();
LABEL_15:

      goto LABEL_16;
    }
    uint64_t v12 = sub_1003C5940(a1, (uint64_t)v4[4]);
    id v13 = v12;
    if (v12)
    {
      id v14 = v12;
    }
    else
    {
      id v16 = v4[11];
      if (v16)
      {
        id v17 = v16;
        id v18 = v4[11];
        uint64_t v19 = ASDInstallAttributionVersionCreateFromString();

        if (v19 > 399)
        {
          id v15 = 0;
          goto LABEL_14;
        }
      }
      ASDErrorWithDescription();
      id v14 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v15 = v14;
LABEL_14:

    goto LABEL_15;
  }
  id v15 = 0;
LABEL_16:

  return v15;
}

void sub_1003C8144(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = [WeakRetained webImpression];
  if (WeakRetained) {
    id Property = objc_getProperty(WeakRetained, v3, 32, 1);
  }
  else {
    id Property = 0;
  }
  id v6 = Property;

  if (v6)
  {
    if (WeakRetained) {
      id v8 = objc_getProperty(WeakRetained, v7, 32, 1);
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;
    goto LABEL_7;
  }
  if (!v4)
  {
    ASDErrorWithDescription();
    id v9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_7:
    id v10 = v9;
    goto LABEL_10;
  }
  id v10 = 0;
LABEL_10:
  unsigned __int8 v11 = +[SkannerEvent resultTypeFinalized];
  uint64_t v12 = ASDLogHandleForCategory();
  id v13 = v12;
  if (v10)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (WeakRetained) {
        id v30 = objc_getProperty(WeakRetained, v14, 32, 1);
      }
      else {
        id v30 = 0;
      }
      id v31 = v30;
      int v32 = 138543362;
      id v33 = v31;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "SKAdNetwork: Could not fetch web impression:%{public}@", (uint8_t *)&v32, 0xCu);
    }
    id v15 = *(void **)(a1 + 32);
    if (v15) {
      id v15 = (void *)v15[2];
    }
    id v16 = v15;
    id v17 = *(void **)(a1 + 32);
    if (v17) {
      id v17 = (void *)v17[5];
    }
    id v18 = v17;
    uint64_t v19 = +[SkannerEvent webImpressionWithResult:v11 adNetworkRegistrableDomain:v16 version:v18 error:v10];

    id v20 = +[SkannerCoordinator sharedInstance];
    id v21 = *(void **)(a1 + 32);
    if (v21) {
      id v21 = (void *)v21[1];
    }
    id v22 = v21;
    objc_msgSend(v20, "logEvent:forAdvertisedAppAdamID:", v19, objc_msgSend(v22, "longLongValue"));
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(v32) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "SKAdNetwork: Web impression fetched successfully", (uint8_t *)&v32, 2u);
    }

    if (v4) {
      double v23 = *(void **)(v4 + 16);
    }
    else {
      double v23 = 0;
    }
    id v24 = v23;
    id v25 = +[SkannerEvent adTypeWeb];
    if (v4)
    {
      id v26 = *(id *)(v4 + 112);
      uint64_t v27 = *(void **)(v4 + 88);
    }
    else
    {
      id v26 = 0;
      uint64_t v27 = 0;
    }
    id v28 = v27;
    uint64_t v19 = +[SkannerEvent impressionWithResult:v11 adNetworkID:v24 adType:v25 interactionType:v26 version:v28 error:0];

    id v20 = +[SkannerCoordinator sharedInstance];
    if (v4) {
      uint64_t v29 = *(void **)(v4 + 8);
    }
    else {
      uint64_t v29 = 0;
    }
    id v22 = v29;
    objc_msgSend(v20, "startStoryIfNeededWith:forAdvertisedAppAdamID:", v19, objc_msgSend(v22, "longLongValue"));
  }
}

id sub_1003C84A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v25 = 0;
    id v26 = &v25;
    uint64_t v27 = 0x3032000000;
    id v28 = sub_1000183E8;
    uint64_t v29 = sub_100017DB0;
    id v30 = 0;
    id v5 = *(void **)(a1 + 24);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1003C87F0;
    void v22[3] = &unk_100524E00;
    id v24 = &v25;
    id v23 = v3;
    [v5 readUsingSession:v22];
    id v6 = objc_opt_new();
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v7 = (id)v26[5];
    id v8 = [v7 countByEnumeratingWithState:&v18 objects:v33 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v19;
      do
      {
        for (id i = 0; i != v8; id i = (char *)i + 1)
        {
          if (*(void *)v19 != v9) {
            objc_enumerationMutation(v7);
          }
          unsigned __int8 v11 = sub_10026FE40(*(void *)(*((void *)&v18 + 1) + 8 * i));
          [v6 addObject:v11];
        }
        id v8 = [v7 countByEnumeratingWithState:&v18 objects:v33 count:16];
      }
      while (v8);
    }

    if (+[NSJSONSerialization isValidJSONObject:v6])
    {
      id v17 = 0;
      uint64_t v12 = +[NSJSONSerialization dataWithJSONObject:v6 options:0 error:&v17];
      id v13 = v17;
      if (v13)
      {
        id v14 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          id v16 = [v13 localizedDescription];
          *(_DWORD *)long long buf = 138412290;
          int v32 = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Error while fetching impressions %@", buf, 0xCu);
        }
      }
    }
    else
    {
      id v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Could not fetch impressions", buf, 2u);
      }
      uint64_t v12 = 0;
    }

    _Block_object_dispose(&v25, 8);
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1003C87B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003C87F0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003E43AC(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_1003C8844(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v138 = a1;
  id v129 = v3;
  if (a1)
  {
    id v4 = v3;
    id v139 = objc_opt_new();
    id v155 = 0;
    objc_super v130 = +[NSJSONSerialization JSONObjectWithData:v4 options:4 error:&v155];
    id v5 = v155;
    if (v5)
    {
      id v6 = v5;
      id v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        SEL v79 = [v6 localizedDescription];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v79;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Encountered error when storing postbacks %@", (uint8_t *)&buf, 0xCu);
      }
      id v8 = v6;
LABEL_172:

      goto LABEL_173;
    }
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    id v9 = v130;
    id v10 = [v9 countByEnumeratingWithState:&v151 objects:v179 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v152;
      do
      {
        for (id i = 0; i != v10; id i = (char *)i + 1)
        {
          if (*(void *)v152 != v11) {
            objc_enumerationMutation(v9);
          }
          id v13 = sub_10027B634((uint64_t)InstallAttributionPingback, *(void **)(*((void *)&v151 + 1) + 8 * i));
          if (v13)
          {
            [v139 addObject:v13];
          }
          else
          {
            id v14 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf) = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Encountered error when storing postbacks", (uint8_t *)&buf, 2u);
            }
          }
        }
        id v10 = [v9 countByEnumeratingWithState:&v151 objects:v179 count:16];
      }
      while (v10);
    }

    uint64_t v15 = [v139 firstObject];
    id v16 = (void *)v15;
    if (v15) {
      id v17 = *(void **)(v15 + 16);
    }
    else {
      id v17 = 0;
    }
    id v131 = v17;

    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    id v18 = v139;
    id v19 = [v18 countByEnumeratingWithState:&v147 objects:v178 count:16];
    if (v19)
    {
      uint64_t v20 = *(void *)v148;
      while (2)
      {
        for (j = 0; j != v19; j = (char *)j + 1)
        {
          if (*(void *)v148 != v20) {
            objc_enumerationMutation(v18);
          }
          id v22 = *(void **)(*((void *)&v147 + 1) + 8 * (void)j);
          if (v22) {
            id v22 = (void *)v22[2];
          }
          id v23 = v22;
          unsigned int v24 = [v23 isEqualToNumber:v131];

          if (!v24)
          {

            uint64_t v75 = ASDErrorWithDescription();
            id v76 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf) = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "Mismatched postbacks. Will not store.", (uint8_t *)&buf, 2u);
            }

            id v8 = v75;
            goto LABEL_171;
          }
        }
        id v19 = [v18 countByEnumeratingWithState:&v147 objects:v178 count:16];
        if (v19) {
          continue;
        }
        break;
      }
    }

    uint64_t v143 = 0;
    SEL v144 = &v143;
    uint64_t v145 = 0x2020000000;
    char v146 = 0;
    uint64_t v25 = *(void **)(v138 + 24);
    v140[0] = _NSConcreteStackBlock;
    v140[1] = 3221225472;
    v140[2] = sub_1003CA210;
    v140[3] = &unk_10052BF10;
    id v126 = v131;
    id v141 = v126;
    id v142 = &v143;
    [v25 readUsingSession:v140];
    if (!*((unsigned char *)v144 + 24))
    {
      id v77 = ASDErrorWithDescription();
      id v78 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "No history found for conversion. Will not store.", (uint8_t *)&buf, 2u);
      }

      id v8 = v77;
LABEL_170:

      _Block_object_dispose(&v143, 8);
LABEL_171:

      goto LABEL_172;
    }
    id v128 = v18;
    if (![v128 count])
    {
      oslog = ASDLogHandleForCategory();
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "SKAdNetwork Multi: Attempting to add zero pingbacks to DB", (uint8_t *)&buf, 2u);
      }
      goto LABEL_165;
    }
    uint64_t v26 = [v128 firstObject];
    oslog = v26;
    uint64_t v27 = (void *)v26;
    if (v26) {
      uint64_t v27 = *(void **)(v26 + 16);
    }
    id v28 = v27;
    uint64_t v29 = *(void **)(v138 + 24);
    v171[0] = _NSConcreteStackBlock;
    v171[1] = 3221225472;
    v171[2] = sub_1003CB7B8;
    v171[3] = &unk_10052BEC8;
    id v125 = v28;
    id v172 = v125;
    [v29 modifyUsingTransaction:v171];
    id v30 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      id v31 = [v128 count];
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "SKAdNetwork Multi: Adding %lu pingbacks to the DB", (uint8_t *)&buf, 0xCu);
    }

    long long v133 = objc_opt_new();
    id v135 = +[SkannerEvent resultTypeFinalized];
    long long v134 = +[SkannerEvent postbackTypeRealized];
    id v136 = objc_opt_new();
    long long v169 = 0u;
    long long v170 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    id obj = v128;
    id v32 = [obj countByEnumeratingWithState:&v167 objects:&buf count:16];
    if (v32)
    {
      char v33 = 0;
      uint64_t v137 = *(void *)v168;
      do
      {
        uint64_t v34 = 0;
        do
        {
          if (*(void *)v168 != v137) {
            objc_enumerationMutation(obj);
          }
          uint64_t v35 = *(void *)(*((void *)&v167 + 1) + 8 * (void)v34);
          if (v35) {
            id v36 = *(void **)(v35 + 16);
          }
          else {
            id v36 = 0;
          }
          id v37 = *(void **)(v138 + 40);
          id v38 = v36;
          uint64_t v39 = [v37 objectForKey:v38];

          if (v39)
          {
            id v40 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id v180 = 138412290;
              *(void *)&v180[4] = v39;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "[%@] Multi: Adding pingback.", v180, 0xCu);
            }
          }
          if (v35)
          {
            if (*(unsigned char *)(v35 + 13))
            {
              if (v33)
              {
                char v33 = 1;
              }
              else
              {
                id v41 = *(id *)(v35 + 136);
                if (v41) {
                  BOOL v42 = ASDInstallAttributionVersionCreateFromString() > 399;
                }
                else {
                  BOOL v42 = 0;
                }

                char v33 = !v42;
              }
              [v133 addObject:v35];
            }
            uint64_t v43 = (void *)*((void *)(id)v35 + 2);
          }
          else
          {
            uint64_t v43 = 0;
          }
          id v44 = *(void **)(v138 + 40);
          id v45 = v43;
          uint64_t v46 = [v44 objectForKey:v45];

          *(void *)id v186 = 0;
          *(void *)&v186[8] = v186;
          if (v46) {
            uint64_t v47 = (__CFString *)v46;
          }
          else {
            uint64_t v47 = &stru_10052E4D8;
          }
          *(void *)&long long v187 = 0x3032000000;
          *((void *)&v187 + 1) = sub_1000183E8;
          *(void *)&long long v188 = sub_100017DB0;
          *((void *)&v188 + 1) = 0;
          unsigned int v156 = 0;
          uint64_t v157 = (uint64_t)&v156;
          uint64_t v158 = 0x2020000000;
          LOBYTE(v159) = 0;
          uint64_t v48 = *(void **)(v138 + 24);
          *(void *)id v180 = _NSConcreteStackBlock;
          *(void *)&v180[8] = 3221225472;
          *(void *)&v180[16] = sub_1003CB73C;
          long long v181 = (uint64_t (*)(uint64_t, uint64_t))&unk_100524E50;
          p_long long buf = &v156;
          id v49 = (id)v35;
          id v182 = (void (*)(uint64_t))v49;
          id v184 = v186;
          [v48 modifyUsingTransaction:v180];
          if (*(unsigned char *)(v157 + 24))
          {
            uint64_t v50 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              if (v35) {
                id v51 = (void *)*((void *)v49 + 2);
              }
              else {
                id v51 = 0;
              }
              id v52 = v51;
              *(_DWORD *)v190 = 138412546;
              *(void *)&v190[4] = v47;
              *(_WORD *)&v190[12] = 2114;
              *(void *)&v190[14] = v52;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "[%@] Successfully inserted pingback into database for app adamID: %{public}@", v190, 0x16u);
            }
            sub_1003C792C();
          }
          else if (!*(void *)(*(void *)&v186[8] + 40))
          {
            uint64_t v53 = ASDErrorWithDescription();
            id v54 = *(void **)(*(void *)&v186[8] + 40);
            *(void *)(*(void *)&v186[8] + 40) = v53;
          }
          if (v35
            && (id v55 = *((id *)v49 + 4)) != 0
            && (uint64_t v56 = v55,
                id v57 = *((id *)v49 + 17),
                BOOL v58 = v57 == 0,
                v57,
                v56,
                !v58))
          {
            sub_10027D2EC((uint64_t)v49, *(unsigned __int8 *)(v157 + 24));
          }
          else
          {
            id v59 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
            {
              if (v35) {
                uint64_t v67 = (void *)*((void *)v49 + 14);
              }
              else {
                uint64_t v67 = 0;
              }
              id v68 = v67;
              *(_DWORD *)v190 = 138412546;
              *(void *)&v190[4] = v47;
              *(_WORD *)&v190[12] = 2114;
              *(void *)&v190[14] = v68;
              _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "[%@] Could not send analytics event for pingback creation since adNetworkId is missing. URL is %{public}@", v190, 0x16u);
            }
          }
          id v60 = *(void **)(*(void *)&v186[8] + 40);
          if (v60)
          {
            id v61 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            {
              uint64_t v66 = *(void *)(*(void *)&v186[8] + 40);
              *(_DWORD *)v190 = 138412546;
              *(void *)&v190[4] = v47;
              *(_WORD *)&v190[12] = 2114;
              *(void *)&v190[14] = v66;
              _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "[%@] Error adding pingback to DB: %{public}@", v190, 0x16u);
            }

            id v60 = *(void **)(*(void *)&v186[8] + 40);
          }
          id v62 = v60;

          _Block_object_dispose(&v156, 8);
          _Block_object_dispose(v186, 8);

          if (v62)
          {
            if (v35) {
              uint64_t v63 = *((void *)v49 + 21);
            }
            else {
              uint64_t v63 = 0;
            }
            id v64 = +[NSNumber numberWithInteger:v63];
            id v65 = +[SkannerEvent conversionWithResult:v135 postbackType:v134 postbackSequenceIndex:v64 error:v62];
            [v136 addObject:v65];
          }
          uint64_t v34 = (char *)v34 + 1;
        }
        while (v32 != v34);
        id v69 = [obj countByEnumeratingWithState:&v167 objects:&buf count:16];
        id v32 = v69;
      }
      while (v69);

      if ((v33 & 1) == 0 || (unint64_t)[v133 count] < 2)
      {
LABEL_99:
        if (!sub_1003C4D74())
        {
          uint64_t v80 = sub_100392558(v133, &stru_10052BFA0);
          uint64_t v81 = +[NSMutableArray arrayWithArray:v80];

          if ([v81 count] && sub_1003CB84C(v138))
          {
            uint64_t v173 = 0;
            id v174 = &v173;
            uint64_t v175 = 0x2020000000;
            char v176 = 0;
            *(void *)v190 = 0;
            *(void *)&v190[8] = v190;
            *(void *)&v190[16] = 0x3032000000;
            id v191 = sub_1000183E8;
            id v192 = sub_100017DB0;
            id v193 = 0;
            *(_OWORD *)id v186 = 0u;
            long long v187 = 0u;
            long long v188 = 0u;
            long long v189 = 0u;
            id v82 = v81;
            id v83 = [v82 countByEnumeratingWithState:v186 objects:v180 count:16];
            if (v83)
            {
              uint64_t v84 = *(void *)v187;
              do
              {
                for (k = 0; k != v83; k = (char *)k + 1)
                {
                  if (*(void *)v187 != v84) {
                    objc_enumerationMutation(v82);
                  }
                  id v86 = *(void (**)(uint64_t))(*(void *)&v186[8] + 8 * (void)k);
                  __int16 v87 = *(void **)(v138 + 24);
                  unsigned int v156 = _NSConcreteStackBlock;
                  uint64_t v157 = 3221225472;
                  uint64_t v158 = (uint64_t)sub_1003CB8B0;
                  id v159 = (uint64_t (*)(uint64_t, uint64_t))&unk_100524E50;
                  id v160 = v86;
                  id v161 = &v173;
                  id v162 = v190;
                  [v87 modifyUsingTransaction:&v156];
                }
                id v83 = [v82 countByEnumeratingWithState:v186 objects:v180 count:16];
              }
              while (v83);
            }

            _Block_object_dispose(v190, 8);
            _Block_object_dispose(&v173, 8);
          }

          goto LABEL_161;
        }
        uint64_t v163 = 0;
        uint64_t v164 = &v163;
        uint64_t v165 = 0x2020000000;
        char v166 = 0;
        *(void *)v190 = 0;
        *(void *)&v190[8] = v190;
        *(void *)&v190[16] = 0x3032000000;
        id v191 = sub_1000183E8;
        id v192 = sub_100017DB0;
        id v193 = 0;
        char v72 = *(void **)(v138 + 24);
        *(void *)id v186 = _NSConcreteStackBlock;
        *(void *)&v186[8] = 3221225472;
        *(void *)&long long v187 = sub_1003CB7C8;
        *((void *)&v187 + 1) = &unk_100524E50;
        *((void *)&v188 + 1) = &v163;
        id v73 = v125;
        *(void *)&long long v188 = v73;
        *(void *)&long long v189 = v190;
        [v72 modifyUsingTransaction:v186];
        if (*((unsigned char *)v164 + 24))
        {
          id v74 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id v180 = 138543362;
            *(void *)&v180[4] = v73;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Imprinting complete for app: %{public}@", v180, 0xCu);
          }
        }
        else
        {
          id v88 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id v180 = 138543362;
            *(void *)&v180[4] = v73;
            _os_log_error_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "Could not imprint ghost for app: %{public}@", v180, 0xCu);
          }

          if (*(void *)(*(void *)&v190[8] + 40))
          {
LABEL_127:
            uint64_t v90 = +[SkannerEvent conversionWithResult:postbackType:postbackSequenceIndex:error:](_TtC9appstored12SkannerEvent, "conversionWithResult:postbackType:postbackSequenceIndex:error:", v135, v134, 0);
            [v136 addObject:v90];

LABEL_128:
            id v91 = v73;
            if (sub_1003CB84C(v138))
            {
              uint64_t v92 = sub_1003F3F54();
              BOOL v93 = v92 == 0;

              if (v93)
              {
                id v97 = objc_alloc((Class)LSApplicationRecord);
                id v98 = [v91 longLongValue];
                id v177 = 0;
                id v99 = [v97 initWithStoreItemIdentifier:v98 error:&v177];
                id v100 = v177;
                if (!v99)
                {
                  uint64_t v95 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)id v180 = 138543362;
                    *(void *)&v180[4] = v100;
                    _os_log_error_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "Failed to get app record with error: %{public}@", v180, 0xCu);
                  }
                  goto LABEL_154;
                }
                uint64_t v95 = sub_100296F10(v99);
              }
              else
              {
                SEL v94 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)id v180 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Overriding developer postback URL", v180, 2u);
                }

                uint64_t v95 = sub_1003F3F54();
              }
              if (v95)
              {
                id v101 = sub_1002F205C((uint64_t)v95);
                if (v101)
                {
                  uint64_t v102 = sub_10027C7E8((uint64_t)InstallAttributionPingback, v101);
                  unsigned int v156 = 0;
                  uint64_t v157 = (uint64_t)&v156;
                  uint64_t v158 = 0x3032000000;
                  id v159 = sub_1000183E8;
                  id v160 = sub_100017DB0;
                  id v161 = 0;
                  uint64_t v173 = 0;
                  id v174 = &v173;
                  uint64_t v175 = 0x2020000000;
                  char v176 = 1;
                  id v103 = *(void **)(v138 + 24);
                  *(void *)id v180 = _NSConcreteStackBlock;
                  *(void *)&v180[8] = 3221225472;
                  *(void *)&v180[16] = sub_1003CBA18;
                  long long v181 = (uint64_t (*)(uint64_t, uint64_t))&unk_10052BFC8;
                  uint64_t v104 = (void (*)(uint64_t))v91;
                  id v182 = v104;
                  id v105 = v102;
                  p_long long buf = v105;
                  id v184 = (uint8_t *)&v173;
                  uint64_t v185 = &v156;
                  [v103 modifyUsingTransaction:v180];
                  if (!*((unsigned char *)v174 + 24))
                  {
                    if (!*(void *)(v157 + 40))
                    {
                      uint64_t v106 = ASDErrorWithDescription();
                      uint64_t v107 = *(void **)(v157 + 40);
                      *(void *)(v157 + 40) = v106;
                    }
                    id v108 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v124 = *(void *)(v157 + 40);
                      *(_DWORD *)id v200 = 138543618;
                      v201 = v104;
                      __int16 v202 = 2114;
                      uint64_t v203 = v124;
                      _os_log_error_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_ERROR, "Failed to add developer postbacks to database for app: %{public}@ with error: %{public}@", v200, 0x16u);
                    }
                  }
                  id v100 = *(id *)(v157 + 40);

                  _Block_object_dispose(&v173, 8);
                  _Block_object_dispose(&v156, 8);
                }
                else
                {
                  uint64_t v109 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)id v180 = 0;
                    _os_log_error_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "Failed to get ETLD from developer URL", v180, 2u);
                  }

                  ASDErrorWithDescription();
                  id v100 = (id)objc_claimAutoreleasedReturnValue();
                }

                goto LABEL_154;
              }
              uint64_t v95 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)id v180 = 0;
                id v96 = "No URL found for developer postbacks. Not cloning postbacks";
                goto LABEL_148;
              }
            }
            else
            {
              uint64_t v95 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)id v180 = 0;
                id v96 = "Sending developer postbacks is disabled, not cloning";
LABEL_148:
                _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, v96, v180, 2u);
              }
            }
            id v100 = 0;
LABEL_154:

            if (v100)
            {
              id v110 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)id v180 = 138543618;
                *(void *)&v180[4] = v91;
                *(_WORD *)&v180[12] = 2114;
                *(void *)&v180[14] = v100;
                _os_log_error_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "Failed to clone developer postbacks for app: %{public}@ with error: %{public}@", v180, 0x16u);
              }

              unsigned __int8 v111 = +[SkannerEvent conversionWithResult:v135 postbackType:v134 postbackSequenceIndex:0 error:v100];
              [v136 addObject:v111];
            }
            else
            {
              unsigned __int8 v111 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id v180 = 138543362;
                *(void *)&v180[4] = v91;
                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "Cloning developer postbacks complete for app: %{public}@", v180, 0xCu);
              }
            }

            _Block_object_dispose(v190, 8);
            _Block_object_dispose(&v163, 8);
LABEL_161:
            if ([v136 count])
            {
              uint64_t v112 = +[SkannerCoordinator sharedInstance];
              objc_msgSend(v112, "logEvents:forAdvertisedAppAdamID:", v136, objc_msgSend(v125, "longLongValue"));

              sub_1003CB92C(v138, v125);
            }
            else
            {
              id v113 = +[SkannerEvent conversionWithResult:v135 postbackType:v134 postbackSequenceIndex:0 error:0];
              uint64_t v114 = +[SkannerCoordinator sharedInstance];
              objc_msgSend(v114, "logEvent:forAdvertisedAppAdamID:", v113, objc_msgSend(v125, "longLongValue"));
            }
LABEL_165:

            id v115 = v126;
            *(void *)&long long buf = 0;
            *((void *)&buf + 1) = &buf;
            uint64_t v195 = 0x3032000000;
            id v196 = sub_1000183E8;
            id v197 = sub_100017DB0;
            id v198 = 0;
            uint64_t v116 = *(void **)(v138 + 24);
            *(void *)id v180 = _NSConcreteStackBlock;
            *(void *)&v180[8] = 3221225472;
            *(void *)&v180[16] = sub_1003CB6E4;
            long long v181 = (uint64_t (*)(uint64_t, uint64_t))&unk_10052BF60;
            id v117 = (void (*)(uint64_t))v115;
            id v182 = v117;
            p_long long buf = (void ***)&buf;
            [v116 modifyUsingTransaction:v180];
            id v118 = *(id *)(*((void *)&buf + 1) + 40);

            _Block_object_dispose(&buf, 8);
            id v119 = v117;
            *(void *)&long long v167 = 0;
            *((void *)&v167 + 1) = &v167;
            *(void *)&long long v168 = 0x2020000000;
            BYTE8(v16_Block_object_dispose(&a9, 8) = 0;
            *(void *)id v180 = 0;
            *(void *)&v180[8] = v180;
            *(void *)&v180[16] = 0x3032000000;
            long long v181 = sub_1000183E8;
            id v182 = sub_100017DB0;
            p_long long buf = 0;
            uint64_t v120 = *(void **)(v138 + 24);
            *(void *)&long long buf = _NSConcreteStackBlock;
            *((void *)&buf + 1) = 3221225472;
            uint64_t v195 = (uint64_t)sub_1003C7A50;
            id v196 = (uint64_t (*)(uint64_t, uint64_t))&unk_100524E50;
            id v198 = &v167;
            id v121 = v119;
            id v197 = v121;
            id v199 = v180;
            [v120 modifyUsingTransaction:&buf];
            if (*(void *)(*(void *)&v180[8] + 40))
            {
              uint64_t v122 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)id v186 = 138543362;
                *(void *)&v186[4] = v121;
                _os_log_error_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "SKAdNetwork: Could not remove params for app:%{public}@", v186, 0xCu);
              }
            }
            _Block_object_dispose(v180, 8);

            _Block_object_dispose(&v167, 8);
            sub_1003C47F4(v138);
            id v8 = 0;
            goto LABEL_170;
          }
          uint64_t v89 = ASDErrorWithDescription();
          id v74 = *(NSObject **)(*(void *)&v190[8] + 40);
          *(void *)(*(void *)&v190[8] + 40) = v89;
        }

        if (!*(void *)(*(void *)&v190[8] + 40)) {
          goto LABEL_128;
        }
        goto LABEL_127;
      }
      uint64_t v70 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v180 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "Internal inconsistency: Invalid number of winning pingbacks", v180, 2u);
      }

      ASDErrorWithDescription();
      id obj = (id)objc_claimAutoreleasedReturnValue();
      id v71 = +[SkannerEvent conversionWithResult:v135 postbackType:v134 postbackSequenceIndex:0 error:obj];
      [v136 addObject:v71];
    }
    goto LABEL_99;
  }
  id v8 = 0;
LABEL_173:

  return v8;
}