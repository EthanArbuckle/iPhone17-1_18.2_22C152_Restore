void sub_100004FA4(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;
  uint64_t vars8;

  isa = a1;
  if (a1)
  {
    sub_100018E30();
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    v6 = _convertErrorToNSError(_:)();
  }
  else {
    v6 = 0;
  }
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_100005040()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

BOOL sub_10000518C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  if (a1)
  {
    BOOL v6 = 1;
    if (!NSHashGet(*(NSHashTable **)(a1 + 24), v5))
    {
      uint64_t v27 = 0;
      v28 = &v27;
      uint64_t v29 = 0x2020000000;
      char v30 = 1;
      v7 = [(id)objc_opt_class() storeDescriptor];
      v9 = [SQLiteDatabaseStoreSchema alloc];
      v10 = *(void **)(a1 + 8);
      if (v7)
      {
        id v11 = objc_getProperty(v7, v8, 8, 1);
        id Property = objc_getProperty(v7, v12, 16, 1);
      }
      else
      {
        id v11 = 0;
        id Property = 0;
      }
      id v14 = Property;
      v15 = sub_1002828CC(v9, v10, v11, v14);

      uint64_t v16 = *(void *)(a1 + 8);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10023302C;
      v20[3] = &unk_100522E20;
      v25 = &v27;
      id v21 = v5;
      v17 = v15;
      char v26 = a3;
      v22 = v17;
      uint64_t v23 = a1;
      id v18 = v7;
      id v24 = v18;
      sub_100011D9C(v16, v20);
      BOOL v6 = *((unsigned char *)v28 + 24) != 0;

      _Block_object_dispose(&v27, 8);
    }
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

void sub_10000535C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100005378(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10001644C(&qword_1005A4EA8);
    v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_10001644C(&qword_1005A4EB0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100005504()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000184D8;
  v3[2] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000194A0;
  return sub_100006D28(v2);
}

id sub_100005660()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"PreviouslyInstalledProvisionedApps", @"com.apple.appstored");
  return v0;
}

uint64_t sub_1000056F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100016714(a1, &qword_1005A4640);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000058F0(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_10001916C, v1, 0);
}

uint64_t sub_1000059C0(uint64_t a1)
{
  uint64_t v2 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return 1;
}

uint64_t sub_100005A10()
{
  self;
  if (!sub_100005CF8()) {
    return 0;
  }
  if (![self isAutomaticUpdateAuthorizationEnabled]) {
    return 1;
  }
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  CFPropertyListRef v1 = CFPreferencesCopyAppValue(@"AutomaticUpdateAuthorizations", v0);

  if (v1
    && (v6[0] = (uint64_t)v1,
        swift_unknownObjectRetain(),
        sub_10001644C(&qword_1005A4EC8),
        swift_dynamicCast()))
  {
    unint64_t v2 = v5;
  }
  else
  {
    unint64_t v2 = sub_100042ED8((uint64_t)&_swiftEmptyArrayStorage);
  }
  v6[0] = v2;
  v6[1] = (uint64_t)sub_10003AC88;
  v6[2] = 0;
  v6[3] = (uint64_t)sub_100088FA8;
  v6[4] = 0;
  uint64_t v3 = sub_100088FB4(v6);
  swift_unknownObjectRelease();
  return v3;
}

id sub_100005B4C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSErrorUserInfoKey v7 = NSUnderlyingErrorKey;
    uint64_t v3 = ASDErrorWithSafeUserInfo();
    uint64_t v8 = v3;
    uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  }
  else
  {
    uint64_t v4 = 0;
  }
  unint64_t v5 = +[NSError errorWithDomain:@"PurchaseHistoryRequestOperationErrorDomain" code:a1 userInfo:v4];

  return v5;
}

id sub_100005C38()
{
  self;
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  id v1 = [v0 isAutomaticAppDownloadsAllowed];

  return v1;
}

void sub_100005C7C(dispatch_queue_t *a1, void *a2)
{
  block = a2;
  if (a1)
  {
    if (dispatch_get_specific("_SQLiteDispatchQueueTag") == a1) {
      block[2]();
    }
    else {
      dispatch_sync(a1[2], block);
    }
  }
}

BOOL sub_100005CF8()
{
  self;
  BOOL v0 = sub_100009458();
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  BOOL v1 = CFPreferencesGetAppBooleanValue(@"AutoUpdatesEnabled", @"com.apple.itunesstored", &keyExistsAndHasValidFormat) == 1;
  if (keyExistsAndHasValidFormat == 1) {
    return v1;
  }
  else {
    return v0;
  }
}

void sub_100005DE0(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_67;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = v6 >= v5 ? v5 : *(void *)(a2 + 16);
    if (v7 > 0) {
      break;
    }
    if (v7 < 0)
    {
      __break(1u);
      goto LABEL_69;
    }
    uint64_t v14 = _swiftEmptyArrayStorage[3] >> 1;
    uint64_t v15 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = _swiftEmptyArrayStorage;
    uint64_t v16 = &_swiftEmptyArrayStorage[4];
    if (!v4) {
      goto LABEL_26;
    }
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 == v17) {
      goto LABEL_53;
    }
LABEL_27:
    unint64_t v4 = v3 & 0xC000000000000001;
    if (v7 <= (unint64_t)v6) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v7;
    }
    uint64_t v39 = v17;
    uint64_t v37 = v20;
    while (1)
    {
      if (v4)
      {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v7 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_65;
        }
        id v21 = *(id *)(v3 + 8 * v7 + 32);
      }
      v22 = v21;
      a2 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        break;
      }
      if (v6 == v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_55;
      }
      if (v20 == v7) {
        goto LABEL_62;
      }
      if (!v14)
      {
        unint64_t v23 = v40[3];
        if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_66;
        }
        int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
        if (v24 <= 1) {
          uint64_t v25 = 1;
        }
        else {
          uint64_t v25 = v24;
        }
        sub_10001644C(&qword_1005A4EA8);
        char v26 = (void *)swift_allocObject();
        int64_t v27 = j__malloc_size(v26);
        uint64_t v28 = v27 - 32;
        if (v27 < 32) {
          uint64_t v28 = v27 - 25;
        }
        uint64_t v29 = v28 >> 3;
        v26[2] = v25;
        v26[3] = 2 * (v28 >> 3);
        unint64_t v30 = (unint64_t)(v26 + 4);
        uint64_t v31 = v40[3] >> 1;
        if (v40[2])
        {
          v32 = v40 + 4;
          if (v26 != v40 || v30 >= (unint64_t)v32 + 8 * v31) {
            memmove(v26 + 4, v32, 8 * v31);
          }
          v40[2] = 0;
        }
        uint64_t v16 = (void *)(v30 + 8 * v31);
        uint64_t v14 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v31;
        swift_release();
        v40 = v26;
        unint64_t v4 = v3 & 0xC000000000000001;
        uint64_t v17 = v39;
        uint64_t v20 = v37;
      }
      BOOL v33 = __OFSUB__(v14--, 1);
      if (v33) {
        goto LABEL_63;
      }
      *v16++ = v22;
      ++v7;
      if (a2 == v17) {
        goto LABEL_53;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    a1 = swift_bridgeObjectRelease();
  }
  sub_10001644C(&qword_1005A4EA8);
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = v8 + 4;
  int64_t v10 = j__malloc_size(v8);
  uint64_t v11 = v10 - 32;
  if (v10 < 32) {
    uint64_t v11 = v10 - 25;
  }
  uint64_t v12 = v11 >> 3;
  v8[2] = v7;
  v8[3] = 2 * v12;
  uint64_t v13 = v12 & 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v38 = v4;
  v40 = v8;
  if (v4)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  a2 = v3 & 0xC000000000000001;
  uint64_t v14 = v13 - v7;
  do
  {
    if (v7 == v19)
    {
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v4 == v19) {
      goto LABEL_60;
    }
    if (a2)
    {
      a1 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      if (v6 == v19) {
        goto LABEL_70;
      }
    }
    else
    {
      if (v19 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_64;
      }
      a1 = (unint64_t)*(id *)(v3 + 32 + 8 * v19);
      if (v6 == v19) {
        goto LABEL_70;
      }
    }
    v9[v19] = a1;
    v18 -= 8;
    ++v19;
  }
  while (v7 != v19);
  uint64_t v16 = &v9[v18 / 0xFFFFFFFFFFFFFFF8];
  uint64_t v15 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v38) {
    goto LABEL_13;
  }
LABEL_26:
  uint64_t v17 = *(void *)(v15 + 16);
  if (v7 != v17) {
    goto LABEL_27;
  }
LABEL_53:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_55:
  a1 = (unint64_t)v40;
  unint64_t v34 = v40[3];
  if (v34 < 2) {
    return;
  }
  unint64_t v35 = v34 >> 1;
  BOOL v33 = __OFSUB__(v35, v14);
  unint64_t v36 = v35 - v14;
  if (!v33)
  {
    v40[2] = v36;
    return;
  }
LABEL_69:
  __break(1u);
LABEL_70:

  __break(1u);
}

void sub_100006298(uint64_t a1)
{
  id v5 = [objc_alloc((Class)AMSProcessInfo) initWithBundleIdentifier:*(void *)(a1 + 8)];
  id v2 = [*(id *)(a1 + 32) copy];
  [v5 setClientVersion:v2];

  uint64_t v3 = +[AMSUserAgent userAgentForProcessInfo:v5];
  unint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v3;
}

uint64_t sub_100006328(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_100018D68(0, (unint64_t *)&qword_1005A4EC0);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  return specialized Array._endMutation()();
}

id *sub_100006618(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)SQLiteQueryResults;
    uint64_t v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

void sub_100006690(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100018EB0(v9, a2, a3, a4);
  if (v4)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  char v12 = v11;
  uint64_t v13 = v10;
  swift_bridgeObjectRelease();
  if (v12)
  {
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v14 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_58;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_59:
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v13;
      if (v14 != v36) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = v13;
      if (v14 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_7:
        uint64_t v14 = v15 + 5;
        uint64_t v39 = a1;
        do
        {
          unint64_t v16 = v14 - 4;
          uint64_t v17 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = v15;
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v16 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
            if (v16 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_49;
            }
            uint64_t v18 = v15;
            id v19 = *(id *)(v17 + 8 * v14);
          }
          uint64_t v20 = v19;
          id v40 = v19;
          uint64_t v13 = a2;
          uint64_t v21 = a2;
          a2 = (uint64_t)a3;
          v22 = a3;
          a3 = (void *)a4;
          a4 = sub_100080AA4(&v40, v21, v22, a4);

          if (a4)
          {
            uint64_t v15 = v18;
            a1 = v39;
          }
          else
          {
            unint64_t v23 = v18;
            if (v16 != v18)
            {
              a1 = v39;
              a4 = *v39;
              unint64_t v38 = v23;
              if ((*v39 & 0xC000000000000001) != 0)
              {
                id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                a4 = *v39;
              }
              else
              {
                if ((v23 & 0x8000000000000000) != 0) {
                  goto LABEL_52;
                }
                if (v23 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_53;
                }
                id v35 = *(id *)(a4 + 8 * v23 + 32);
              }
              id v37 = v35;
              if ((a4 & 0xC000000000000001) != 0)
              {
                id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                a4 = *v39;
              }
              else
              {
                if ((v16 & 0x8000000000000000) != 0) {
                  goto LABEL_54;
                }
                if (v16 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_55;
                }
                id v24 = *(id *)(a4 + 8 * v14);
              }
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *uint64_t v39 = a4;
              if (!isUniquelyReferenced_nonNull_bridgeObject || a4 < 0 || (a4 & 0x4000000000000000) != 0)
              {
                a4 = sub_100089C20(a4);
                *uint64_t v39 = a4;
              }
              char v26 = *(void **)((a4 & 0xFFFFFFFFFFFFFF8) + 8 * v38 + 0x20);
              *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 8 * v38 + 0x20) = v24;

              specialized Array._endMutation()();
              a1 = v39;
              unint64_t v27 = *v39;
              int v28 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *uint64_t v39 = v27;
              if (!v28 || (v27 & 0x8000000000000000) != 0 || (v27 & 0x4000000000000000) != 0)
              {
                unint64_t v27 = sub_100089C20(v27);
                *uint64_t v39 = v27;
              }
              if ((v16 & 0x8000000000000000) != 0) {
                goto LABEL_56;
              }
              uint64_t v29 = v27 & 0xFFFFFFFFFFFFFF8;
              if (v16 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_57;
              }
              unint64_t v30 = *(void **)(v29 + 8 * v14);
              *(void *)(v29 + 8 * v14) = v37;

              specialized Array._endMutation()();
              unint64_t v23 = v38;
            }
            BOOL v31 = __OFADD__(v23, 1);
            uint64_t v15 = v23 + 1;
            a1 = v39;
            if (v31) {
              goto LABEL_51;
            }
          }
          a4 = v14 - 3;
          if (__OFADD__(v16, 1)) {
            goto LABEL_50;
          }
          if ((unint64_t)*a1 >> 62)
          {
            uint64_t v34 = v15;
            swift_bridgeObjectRetain();
            uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            uint64_t v15 = v34;
            a1 = v39;
          }
          else
          {
            uint64_t v32 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v14;
          BOOL v33 = a4 == v32;
          a4 = (uint64_t)a3;
          a3 = (void *)a2;
          a2 = v13;
        }
        while (!v33);
      }
    }
  }
  swift_bridgeObjectRelease();
}

id sub_100006A80(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (objc_class *)self;
  if (os_variant_has_internal_content() && sub_10000B08C(v2)) {
    id v4 = objc_alloc_init(v3);
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_100006B94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000086A8;
    v6[3] = &unk_1005218C0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_100006C3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000080F4;
    v6[3] = &unk_100521698;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_100006D28(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  v2[14] = swift_getObjectType();
  sub_10001644C((uint64_t *)&unk_1005A4E20);
  v2[15] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_10000A150, 0, 0);
}

uint64_t sub_100006E88()
{
  self;
  id v1 = sub_100005660();
  unint64_t v2 = v0[10];
  if (v1)
  {
    uint64_t v3 = v1;
    sub_100018D68(0, (unint64_t *)&qword_1005A3230);
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v50 = *(void *)(v2 + 16);
    if (v50)
    {
      if (v4 >> 62)
      {
LABEL_59:
        swift_bridgeObjectRetain();
        uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v52 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v5 = 0;
      uint64_t v46 = v0[3];
      uint64_t v45 = OBJC_IVAR____TtC9appstored14UpdatesContext_logKey;
      unint64_t v48 = v4 & 0xC000000000000001;
      uint64_t v49 = v0[10] + 32;
      v47 = (void (**)(uint64_t, uint64_t))(v0[6] + 8);
      uint64_t v6 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v51 = v4;
      unint64_t v44 = v2;
      while (1)
      {
        if (v5 >= *(void *)(v2 + 16))
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        uint64_t v10 = (void *)(v49 + 16 * v5);
        uint64_t v12 = *v10;
        uint64_t v11 = v10[1];
        id v13 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:*v10];
        if (v52)
        {
          if (v48)
          {
            swift_bridgeObjectRetain();
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v14 = *(void **)(v4 + 32);
            swift_bridgeObjectRetain();
            id v15 = v14;
          }
          unint64_t v16 = v15;
          char v17 = static NSObject.== infix(_:_:)();

          if (v17)
          {
            unint64_t v4 = v51;
LABEL_15:
            swift_bridgeObjectRelease();
LABEL_16:

            uint64_t v18 = (void *)v0[3];
            static Logger.updates.getter();
            id v19 = v18;
            id v7 = Logger.logObject.getter();
            os_log_type_t v20 = static os_log_type_t.debug.getter();
            BOOL v21 = os_log_type_enabled(v7, v20);
            v22 = (void *)v0[3];
            if (v21)
            {
              uint64_t v23 = swift_slowAlloc();
              id v24 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v23 = 138412546;
              uint64_t v25 = *(void **)(v46 + v45);
              *(void *)(v23 + 4) = v25;
              *id v24 = v25;
              id v26 = v25;

              *(_WORD *)(v23 + 12) = 2050;
              *(void *)(v23 + 14) = v12;
              _os_log_impl((void *)&_mh_execute_header, v7, v20, "[%@] app with item ID %{public}llu is not eligible as it has been previously installed", (uint8_t *)v23, 0x16u);
              sub_10001644C((uint64_t *)&unk_1005A3AA0);
              swift_arrayDestroy();
              unint64_t v4 = v51;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              id v7 = v0[3];
            }
            uint64_t v8 = v0[8];
            uint64_t v9 = v0[5];

            (*v47)(v8, v9);
            goto LABEL_8;
          }
          unint64_t v4 = v51;
          if (v52 != 1)
          {
            if (v48)
            {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
              char v30 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if (v30) {
                goto LABEL_15;
              }
              if (v52 != 2)
              {
                unint64_t v4 = 2;
                while (1)
                {
                  specialized _ArrayBuffer._getElementSlowPath(_:)();
                  unint64_t v2 = v4 + 1;
                  if (__OFADD__(v4, 1)) {
                    goto LABEL_57;
                  }
                  char v31 = static NSObject.== infix(_:_:)();
                  swift_unknownObjectRelease();
                  if (v31) {
                    goto LABEL_40;
                  }
                  ++v4;
                  if (v2 == v52) {
                    goto LABEL_39;
                  }
                }
              }
            }
            else
            {
              id v32 = *(id *)(v51 + 40);
              char v33 = static NSObject.== infix(_:_:)();

              if (v33) {
                goto LABEL_15;
              }
              if (v52 != 2)
              {
                unint64_t v4 = 6;
                while (1)
                {
                  unint64_t v2 = v4 - 3;
                  if (__OFADD__(v4 - 4, 1)) {
                    goto LABEL_58;
                  }
                  id v34 = *(id *)(v51 + 8 * v4);
                  char v35 = static NSObject.== infix(_:_:)();

                  if (v35)
                  {
LABEL_40:
                    unint64_t v4 = v51;
                    swift_bridgeObjectRelease();
                    unint64_t v2 = v44;
                    goto LABEL_16;
                  }
                  ++v4;
                  if (v2 == v52)
                  {
LABEL_39:
                    unint64_t v4 = v51;
                    swift_bridgeObjectRelease();
                    unint64_t v2 = v44;
                    goto LABEL_20;
                  }
                }
              }
            }
          }
          swift_bridgeObjectRelease();
        }
LABEL_20:

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_1000E7A0C(0, *((void *)v6 + 2) + 1, 1, v6);
        }
        unint64_t v28 = *((void *)v6 + 2);
        unint64_t v27 = *((void *)v6 + 3);
        if (v28 >= v27 >> 1) {
          uint64_t v6 = sub_1000E7A0C((char *)(v27 > 1), v28 + 1, 1, v6);
        }
        *((void *)v6 + 2) = v28 + 1;
        uint64_t v29 = &v6[96 * v28];
        *((void *)v29 + 5) = 0;
        *((void *)v29 + 6) = 0;
        *((void *)v29 + 4) = 0;
        *((_WORD *)v29 + 28) = 0;
        *((void *)v29 + 8) = 0;
        *((void *)v29 + 9) = v11;
        *((void *)v29 + 10) = v12;
        *((void *)v29 + 11) = 0;
        *((void *)v29 + 12) = 0;
        *((void *)v29 + 13) = 0;
        *((void *)v29 + 14) = 1936748641;
        *((void *)v29 + 15) = 0xE400000000000000;
LABEL_8:
        if (++v5 == v50)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  uint64_t v36 = *(void *)(v2 + 16);
  if (!v36)
  {
LABEL_52:
    swift_bridgeObjectRelease();
    uint64_t v6 = (char *)&_swiftEmptyArrayStorage;
    goto LABEL_53;
  }
  id v37 = v0;
  unint64_t v38 = (int8x16_t *)(v0[10] + 32);
  swift_bridgeObjectRetain();
  uint64_t v6 = (char *)&_swiftEmptyArrayStorage;
  do
  {
    int8x16_t v53 = *v38;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = sub_1000E7A0C(0, *((void *)v6 + 2) + 1, 1, v6);
    }
    unint64_t v40 = *((void *)v6 + 2);
    unint64_t v39 = *((void *)v6 + 3);
    if (v40 >= v39 >> 1) {
      uint64_t v6 = sub_1000E7A0C((char *)(v39 > 1), v40 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v40 + 1;
    v41 = &v6[96 * v40];
    *((void *)v41 + 8) = 0;
    *((void *)v41 + 5) = 0;
    *((void *)v41 + 6) = 0;
    *((void *)v41 + 4) = 0;
    *((_WORD *)v41 + 28) = 0;
    *(int8x16_t *)(v41 + 72) = vextq_s8(v53, v53, 8uLL);
    *((void *)v41 + 11) = 0;
    *((void *)v41 + 12) = 0;
    *((void *)v41 + 13) = 0;
    *((void *)v41 + 14) = 1936748641;
    *((void *)v41 + 15) = 0xE400000000000000;
    ++v38;
    --v36;
  }
  while (v36);
  BOOL v0 = v37;
  swift_bridgeObjectRelease_n();
LABEL_53:
  swift_task_dealloc();
  swift_task_dealloc();
  v42 = (uint64_t (*)(char *))v0[1];
  return v42(v6);
}

void sub_100007694(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 8);
    id v8 = a4;
    id v9 = a3;
    dispatch_assert_queue_V2(v7);
    uint64_t v10 = v11;
    if (!v11) {
      uint64_t v10 = &__NSDictionary0__struct;
    }
    id v11 = v10;
    objc_msgSend(v8, "setObject:forKeyedSubscript:");
  }
}

void sub_100007734(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100007AC0;
    block[3] = &unk_1005221F0;
    id v8 = v5;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(a1 + 40);
    id v12 = v8;
    uint64_t v13 = v9;
    id v14 = v10;
    dispatch_async(v7, block);
  }
}

void sub_1000079C8(void *a1, void *a2)
{
  id v6 = a2;
  if (a1)
  {
    uint64_t v3 = a1;
    objc_sync_enter(v3);
    id v4 = [v6 copy];
    id v5 = (void *)v3[5];
    v3[5] = v4;

    objc_sync_exit(v3);
  }
}

void sub_100007A44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100007AC0(uint64_t a1)
{
  os_log_type_t v20 = objc_opt_new();
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v35 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v22;
    uint64_t v18 = &v33;
    id v19 = &v32;
    char v17 = v26;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v22 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        id v7 = objc_msgSend(v6, "bundleIdentifier", v17, v18, v19);
        if (v7)
        {
          id v8 = sub_10031E3D8(*(id *)(a1 + 40), v7);
          if (v8)
          {
            objc_msgSend(v8, "setAutoUpdateEnabled:", objc_msgSend(v6, "autoUpdateEnabled"));
            id v9 = *(id *)(a1 + 40);
            id v10 = v7;
            if (v9)
            {
              uint64_t v29 = 0;
              char v30 = &v29;
              uint64_t v31 = 0x3032000000;
              id v32 = sub_1000181E8;
              char v33 = sub_100017CB0;
              id v34 = 0;
              id v11 = sub_10001A308();
              v25[0] = _NSConcreteStackBlock;
              v25[1] = 3221225472;
              v26[0] = sub_1003203C8;
              v26[1] = &unk_100524060;
              unint64_t v28 = &v29;
              id v27 = v10;
              [v11 readUsingSession:v25];

              id v9 = (id)v30[5];
              _Block_object_dispose(&v29, 8);
            }
            [v8 setRawUpdateData:v9];

            id v12 = [v6 installDate];
            [v8 setUpdateInstallDate:v12];

            uint64_t v13 = sub_100388088();
            id v14 = sub_1003893D8(v13, v10);
            [v8 setRemoteProgress:v14];

            [v20 addObject:v8];
          }
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v21 objects:v35 count:16];
    }
    while (v3);
  }

  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = [v20 copy];
  (*(void (**)(uint64_t, id, void))(v15 + 16))(v15, v16, 0);
}

void sub_100007DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100007F68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10000A350;
    v8[3] = &unk_1005221F0;
    v8[4] = a1;
    id v9 = v5;
    id v10 = v6;
    sub_100010948(v7, v8);
  }
}

void sub_100008030(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100009EB8;
    block[3] = &unk_100521DE0;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1000080F4(uint64_t a1)
{
  unsigned __int8 v6 = 0;
  id v2 = sub_100013680(*(void **)(a1 + 32), 1uLL);
  id v3 = sub_10000D568(*(void *)(a1 + 32), 1, v2, (char *)&v6);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = sub_100019C68((uint64_t)v3);
  (*(void (**)(uint64_t, void *, void, void))(v4 + 16))(v4, v5, v6, 0);
}

void sub_100008278(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000CF54;
    block[3] = &unk_1005221F0;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10000833C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = v8;
  if (a1)
  {
    uint64_t v10 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100009D74;
    v11[3] = &unk_1005238A8;
    v11[4] = a1;
    id v13 = v8;
    uint64_t v14 = a2;
    id v12 = v7;
    sub_100010948(v10, v11);
  }
}

void sub_100008410(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  id v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a1;
  v12[5] = a3;
  id v13 = a3;
  swift_retain_n();
  id v14 = v13;
  sub_100018FDC((uint64_t)v10, a5, (uint64_t)v12);
  swift_release();
  swift_release();
}

void sub_100008530(dispatch_queue_t *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000094E8;
    v7[3] = &unk_1005221F0;
    v7[4] = a1;
    id v8 = v5;
    id v9 = v6;
    sub_100005C7C(a1, v7);
  }
}

void sub_1000085F4(void *a1, CFBundleRef bundle)
{
  CFURLRef v4 = CFBundleCopyBundleURL(bundle);
  uint64_t v5 = [(__CFURL *)v4 path];
  id v6 = (void *)a1[3];
  a1[3] = v5;

  uint64_t v7 = CFBundleGetIdentifier(bundle);
  id v8 = (void *)a1[1];
  a1[1] = v7;

  uint64_t v9 = CFBundleGetValueForInfoDictionaryKey(bundle, _kCFBundleShortVersionStringKey);
  if (!v9)
  {
    uint64_t v9 = CFBundleGetValueForInfoDictionaryKey(bundle, kCFBundleVersionKey);
  }
  uint64_t v10 = (void *)a1[4];
  a1[4] = v9;
}

id sub_1000086A8(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    id v3 = objc_opt_class();
    uint64_t v4 = *(void *)(a1 + 40);
    int v7 = 138412546;
    id v8 = v3;
    __int16 v9 = 2114;
    uint64_t v10 = v4;
    id v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[%@]: Registered notification client: %{public}@", (uint8_t *)&v7, 0x16u);
  }
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_100008788(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    __int16 v9 = sub_10030B11C();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10000BA34;
    v10[3] = &unk_100528310;
    v10[4] = a1;
    uint64_t v13 = a2;
    id v11 = v7;
    id v12 = v8;
    sub_10030B39C((uint64_t)v9, v10);
  }
}

void *sub_1000088C8(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)SQLiteDatabaseStoreDescriptor;
    a1 = objc_msgSendSuper2(&v16, "init");
    if (a1)
    {
      id v11 = [v9 copy];
      id v12 = (void *)a1[1];
      a1[1] = v11;

      id v13 = [v10 copy];
      id v14 = (void *)a1[2];
      a1[2] = v13;

      a1[3] = a4;
      a1[4] = a5;
    }
  }

  return a1;
}

uint64_t sub_10000897C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000899C(a1, a2, a3, *v3);
  *id v3 = (char *)result;
  return result;
}

uint64_t sub_10000899C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10001644C(&qword_1005A4ED0);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    id v10 = (char *)&_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100008B10(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_opt_new();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v21;
    *(void *)&long long v6 = 138412546;
    long long v18 = v6;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(v4);
        }
        id v10 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        int64_t v11 = objc_msgSend(v10, "adamId", v18);
        if (v11)
        {
          [v3 setObject:v10 forKey:v11];
        }
        else
        {
          uint64_t v12 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            id v13 = objc_opt_class();
            id v14 = v13;
            uint64_t v15 = [v10 appAdamId];
            *(_DWORD *)buf = v18;
            uint64_t v25 = v13;
            __int16 v26 = 2114;
            id v27 = v15;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[%@]: Nil IAP adamId, app adamId: %{public}@", buf, 0x16u);
          }
        }
      }
      id v7 = [v4 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v7);
  }

  id v16 = [objc_alloc((Class)ASDIAPInfoResponse) initWithIAPs:v3];
  sub_1000079C8(*(void **)(a1 + 32), v16);
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17) {
    *(unsigned char *)(v17 + 24) = 1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_100008E24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2020000000;
    char v17 = 1;
    uint64_t v8 = *(NSObject **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10000BAE8;
    v10[3] = &unk_100523220;
    v10[4] = a1;
    id v11 = v6;
    id v12 = v5;
    id v13 = &v14;
    dispatch_sync(v8, v10);
    a1 = *((unsigned char *)v15 + 24) != 0;

    _Block_object_dispose(&v14, 8);
  }

  return a1;
}

void *sub_100008F30(void *a1, _OWORD *a2, unsigned int a3)
{
  if (!a1) {
    return 0;
  }
  v17.receiver = a1;
  v17.super_class = (Class)XPCServiceEntitlements;
  id v5 = objc_msgSendSuper2(&v17, "init");
  if (v5)
  {
    long long v6 = a2[1];
    *(_OWORD *)token.val = *a2;
    *(_OWORD *)&token.val[4] = v6;
    id v7 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
    v5[2] = v7;
    *((_DWORD *)v5 + 6) = a3;
    self;
    if (v7)
    {
      CFErrorRef error = 0;
      id v7 = (__SecTask *)SecTaskCopyValueForEntitlement(v7, @"com.apple.private.appstored", &error);
      if (error)
      {
        uint64_t v8 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          id v13 = objc_opt_class();
          token.val[0] = 138412802;
          *(void *)&token.val[1] = v13;
          LOWORD(token.val[3]) = 1024;
          *(unsigned int *)((char *)&token.val[3] + 2) = a3;
          HIWORD(token.val[4]) = 2112;
          *(void *)&token.val[5] = error;
          id v14 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@]: Unable to get entitlements for pid: %i error: %@", (uint8_t *)&token, 0x1Cu);
        }
      }
      if (v7)
      {
        CFTypeID TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v7))
        {
          id v10 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v15 = objc_opt_class();
            token.val[0] = 138412802;
            *(void *)&token.val[1] = v15;
            LOWORD(token.val[3]) = 1024;
            *(unsigned int *)((char *)&token.val[3] + 2) = a3;
            HIWORD(token.val[4]) = 2112;
            *(void *)&token.val[5] = v7;
            id v16 = v15;
            _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%@]: Entitlements for pid: %i %@", (uint8_t *)&token, 0x1Cu);
          }
        }
        else
        {
          CFRelease(v7);
          id v7 = 0;
        }
      }
    }
    id v11 = (void *)v5[1];
    v5[1] = v7;
  }
  return v5;
}

void sub_100009290(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v14 = 1;
  [a1[4] applyBinding:v5 atIndex:&v14];
  id v7 = [a1[5] count];
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2020000000;
  v13[3] = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002FF12C;
  v8[3] = &unk_1005276C8;
  id v12 = v7;
  id v9 = a1[5];
  id v10 = a1[6];
  id v11 = v13;
  sub_1000096CC((uint64_t)v5, v8);

  _Block_object_dispose(v13, 8);
}

void sub_10000939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000093B4(uint64_t a1, void *a2)
{
  id v5 = a2;
  self;
  id v2 = objc_opt_class();
  objc_sync_enter(v2);
  uint64_t v3 = sub_100006A80((uint64_t)DiagnosticPublisher, v5);
  id v4 = (void *)qword_1005B0B60;
  qword_1005B0B60 = v3;

  objc_sync_exit(v2);
}

void sub_100009444(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100009458()
{
  self;
  BOOL v0 = +[MCProfileConnection sharedConnection];
  if ([v0 effectiveBoolValueForSetting:MCFeatureAppInstallationAllowed] == 2)
  {
    BOOL v1 = 0;
  }
  else
  {
    id v2 = +[MCProfileConnection sharedConnection];
    BOOL v1 = [v2 effectiveBoolValueForSetting:MCFeatureUIAppInstallationAllowed] != 2;
  }
  return v1;
}

void sub_1000094E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    sub_10000518C(v2, *(void **)(a1 + 40), 0);
  }
  uint64_t v3 = [(id)objc_opt_class() storeDescriptor];
  id v4 = v3;
  if (v3) {
    uint64_t v3 = (void *)v3[3];
  }
  id v5 = [objc_alloc((Class)v3) initWithConnection:*(void *)(*(void *)(a1 + 32) + 8)];
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10001856C;
  v8[3] = &unk_100522DD0;
  id v9 = *(id *)(a1 + 48);
  id v7 = sub_100009A64(v6, v5, v8);
}

void sub_1000095D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    notify_post("com.apple.appstored.ASDAppStoreServiceBadgesChanged");
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138543618;
      id v7 = (id)objc_opt_class();
      __int16 v8 = 2112;
      id v9 = v3;
      id v5 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Notifying badge changed", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1000096CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = sub_10000FECC((sqlite3_stmt **)[SQLiteCursor alloc], *(void **)(a1 + 8));
    id v5 = *(void **)(a1 + 8);
    if (v5)
    {
      id v7 = v5 + 1;
      id v5 = (void *)v5[1];
      uint64_t v6 = v7[1];
    }
    else
    {
      uint64_t v6 = 0;
    }
    __int16 v8 = v5;
    uint64_t v19 = v6;
    id v20 = 0;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10001850C;
    v16[3] = &unk_100523410;
    id v9 = v3;
    id v18 = v9;
    id v10 = v4;
    objc_super v17 = v10;
    if (v8)
    {
      int v11 = sub_1000125F8((uint64_t)v8, &v20, v16);
      id v12 = v20;

      if (v11)
      {
        uint64_t v13 = *(void *)(a1 + 8);
        if (v13)
        {
          int v14 = *(sqlite3_stmt **)(v13 + 16);
          if (v14) {
            sqlite3_reset(v14);
          }
        }
        goto LABEL_12;
      }
    }
    else
    {

      id v12 = 0;
    }
    char v15 = 0;
    (*((void (**)(id, void, id, char *))v9 + 2))(v9, 0, v12, &v15);
LABEL_12:
  }
}

void sub_100009834(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  if (a1)
  {
    v11[0] = 0;
    id v7 = sub_1000122A0(a1, v5, v11);
    id v8 = v11[0];
    id v9 = sub_10001221C([SQLitePreparedStatement alloc], *(void *)(a1 + 16), v5);
    if (v9) {
      [*(id *)(a1 + 32) setObject:v7 forKey:v9];
    }
    if (v7) {
      id v10 = sub_100006618((id *)[SQLiteQueryResults alloc], v7);
    }
    else {
      id v10 = 0;
    }
    v6[2](v6, v10, v8);
    sub_1000121D0((uint64_t)v7);
    if (v9) {
      [*(id *)(a1 + 32) removeObjectForKey:v9];
    }
  }
}

void sub_100009994(_Unwind_Exception *a1)
{
}

id sub_100009A64(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)a1 + 2));
    uint64_t v13 = 0;
    int v14 = &v13;
    uint64_t v15 = 0x3032000000;
    id v16 = sub_100017EE8;
    objc_super v17 = sub_100017B30;
    id v18 = 0;
    uint64_t v7 = *((void *)a1 + 1);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000059C0;
    v9[3] = &unk_100522E48;
    id v12 = &v13;
    id v11 = v6;
    id v10 = v5;
    sub_100011D9C(v7, v9);
    a1 = (id)v14[5];

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_100009BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100009BC0(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v10)
  {
    id v6 = (void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v7 = v10;
  }
  else
  {
    id v6 = (void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v7 = v5;
  }
  id v8 = v7;
  id v9 = *v6;
  *id v6 = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100009C60(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a2;
  id v9 = self;
  id v10 = [SQLiteQueryDescriptor alloc];
  id v11 = [v9 databaseEntityClass];
  if (v10
    && (id v12 = v11,
        v19.receiver = v10,
        v19.super_class = (Class)SQLiteQueryDescriptor,
        (uint64_t v13 = objc_msgSendSuper2(&v19, "init")) != 0))
  {
    uint64_t v15 = v13;
    v13[1] = v12;
    v13[3] = v9;
    objc_setProperty_nonatomic_copy(v13, v14, v7, 48);
    objc_setProperty_nonatomic_copy(v15, v16, v6, 56);
  }
  else
  {
    uint64_t v15 = 0;
  }
  id v17 = [[SQLiteQuery alloc] initOnConnection:v8 descriptor:v15];

  return v17;
}

void sub_100009D74(uint64_t a1)
{
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = objc_msgSend(v2, "ams_DSID");
    sub_10024C5BC(v4, v5, *(void **)(a1 + 56), *(void **)(a1 + 40), *(void **)(a1 + 48));
  }
  else
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v10 = 138412290;
      id v11 = (id)objc_opt_class();
      id v9 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%@]: Ignoring update request - there is no active account", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v7 = *(void *)(a1 + 48);
    id v8 = sub_100005B4C(4, 0);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
}

void sub_100009EB8(uint64_t a1)
{
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  if (v2)
  {
    buf[0] = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 8))
      {
        id v4 = 0;
        goto LABEL_16;
      }
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(v3 + 24);
      id Property = objc_getProperty(*(id *)(a1 + 32), (SEL)v3, 16, 1);
    }
    else
    {
      uint64_t v13 = 0;
      id Property = 0;
      uint64_t v12 = *(void *)(a1 + 40);
    }
    sub_10000D568(v12, v13, Property, (char *)buf);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    if (v4 && !buf[0])
    {
      uint64_t v15 = sub_10026CA24();
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10032364C;
      v18[3] = &unk_100528440;
      id v16 = *(id *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      id v19 = v16;
      uint64_t v20 = v17;
      id v21 = v2;
      id v4 = v4;
      id v22 = v4;
      id v23 = *(id *)(a1 + 48);
      sub_10026D4A8((uint64_t)v15, v18);

LABEL_17:
      goto LABEL_18;
    }
    uint64_t v3 = *(void *)(a1 + 32);
LABEL_16:
    sub_100323358(*(void *)(a1 + 40), (void *)v3, v2, v4, *(void **)(a1 + 48));
    goto LABEL_17;
  }
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = *(id *)(a1 + 32);
    if (v7)
    {
      id v9 = objc_getProperty(v7, v6, 16, 1);
      id v7 = *(id *)(a1 + 32);
      if (v7) {
        id v7 = objc_getProperty(v7, v8, 32, 1);
      }
    }
    else
    {
      id v9 = 0;
    }
    int v10 = [v7 processInfo];
    id v11 = [v10 bundleIdentifier];
    *(_DWORD *)buf = 138412546;
    id v25 = v9;
    __int16 v26 = 2114;
    id v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] No active account when fetching subscriptions for clientID: %{public}@", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_18:
}

uint64_t sub_10000A150()
{
  v0[8] = _swiftEmptyArrayStorage;
  uint64_t v1 = v0[14];
  uint64_t v2 = (void *)v0[12];
  self;
  id v3 = sub_10001A308();
  id v4 = (void *)swift_allocObject();
  v0[19] = v4;
  v4[2] = v2;
  v4[3] = v0 + 8;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000195C0;
  *(void *)(v5 + 24) = v4;
  v0[6] = sub_10008E188;
  v0[7] = v5;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100018DE4;
  v0[5] = &unk_100513C70;
  id v6 = _Block_copy(v0 + 2);
  id v7 = v2;
  swift_retain();
  swift_release();
  [v3 readUsingSession:v6];

  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v0[20] = sub_100005A10();
    id v9 = (void *)swift_task_alloc();
    v0[21] = v9;
    void *v9 = v0;
    v9[1] = sub_1000195CC;
    uint64_t v10 = v0[12];
    return sub_1000058F0(v10);
  }
  return result;
}

void sub_10000A350(void *a1)
{
  uint64_t v32 = 0;
  char v33 = &v32;
  uint64_t v34 = 0x3032000000;
  char v35 = sub_1000182F8;
  uint64_t v36 = sub_100017D38;
  id v37 = 0;
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x3032000000;
  uint64_t v29 = sub_1000182F8;
  char v30 = sub_100017D38;
  id v31 = 0;
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  if (v2)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (id)objc_opt_class();
      uint64_t v5 = a1[5];
      id v6 = [v2 hashedDescription];
      *(_DWORD *)buf = 138412802;
      id v39 = v4;
      __int16 v40 = 2114;
      uint64_t v41 = v5;
      __int16 v42 = 2114;
      id v43 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Get IAPs for account: %{public}@", buf, 0x20u);
    }
    id v7 = *(void **)(a1[4] + 16);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100371C38;
    v22[3] = &unk_10052A000;
    long long v24 = &v26;
    id v8 = v2;
    id v23 = v8;
    id v25 = &v32;
    [v7 readUsingSession:v22];
    if (v27[5])
    {
      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (id)objc_opt_class();
        uint64_t v11 = a1[5];
        id v12 = [(id)v27[5] count];
        uint64_t v13 = [v8 hashedDescription];
        *(_DWORD *)buf = 138413058;
        id v39 = v10;
        __int16 v40 = 2114;
        uint64_t v41 = v11;
        __int16 v42 = 2048;
        id v43 = v12;
        __int16 v44 = 2112;
        uint64_t v45 = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Got %li IAPs for account: %@", buf, 0x2Au);
      }
    }
    else
    {
      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v18 = objc_opt_class();
        uint64_t v19 = a1[5];
        uint64_t v20 = (void *)v33[5];
        *(_DWORD *)buf = 138412802;
        id v39 = v18;
        __int16 v40 = 2114;
        uint64_t v41 = v19;
        __int16 v42 = 2114;
        id v43 = v20;
        id v21 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to get IAPs with error: %{public}@", buf, 0x20u);
      }
    }

    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    int v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = objc_opt_class();
      uint64_t v16 = a1[5];
      *(_DWORD *)buf = 138412546;
      id v39 = v15;
      __int16 v40 = 2114;
      uint64_t v41 = v16;
      id v17 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Failed to get IAPs - no active account DSID", buf, 0x16u);
    }
    (*(void (**)(void))(a1[6] + 16))();
  }

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v32, 8);
}

void sub_10000A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10000A7EC(void *a1, const char *a2)
{
  id Property = (id)a1[4];
  if (Property)
  {
    id Property = objc_getProperty(Property, a2, 32, 1);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 48, 1);
    }
  }
  id v6 = Property;
  id v7 = (id)a1[4];
  if (v7) {
    id v7 = objc_getProperty(v7, v5, 32, 1);
  }
  id v8 = [v7 processInfo];
  id v9 = [v8 bundleIdentifier];
  unsigned __int8 v10 = [v6 isEqualToString:v9];

  uint64_t v11 = ASDLogHandleForCategory();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      id v14 = (id)a1[4];
      if (v14) {
        id v14 = objc_getProperty(v14, v13, 16, 1);
      }
      id v16 = v14;
      id v17 = (id)a1[4];
      if (v17)
      {
        id v17 = objc_getProperty(v17, v15, 32, 1);
        if (v17) {
          id v17 = objc_getProperty(v17, v18, 48, 1);
        }
      }
      id v19 = v17;
      id v20 = v19;
      uint64_t v21 = a1[4];
      if (v21) {
        LODWORD(v21) = *(unsigned __int8 *)(v21 + 8);
      }
      *(_DWORD *)buf = 138412802;
      id v46 = v16;
      __int16 v47 = 2114;
      id v48 = v19;
      __int16 v49 = 1024;
      LODWORD(v50) = v21;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Requesting subscription entitlements for clientID: %{public}@ ignoresCaches: %{BOOL}d", buf, 0x1Cu);
LABEL_30:
    }
  }
  else if (v12)
  {
    id v22 = (id)a1[4];
    if (v22) {
      id v22 = objc_getProperty(v22, v13, 16, 1);
    }
    id v16 = v22;
    id v24 = (id)a1[4];
    if (v24)
    {
      id v24 = objc_getProperty(v24, v23, 32, 1);
      if (v24) {
        id v24 = objc_getProperty(v24, v25, 48, 1);
      }
    }
    id v20 = v24;
    id v27 = (id)a1[4];
    if (v27)
    {
      id v27 = objc_getProperty(v27, v26, 32, 1);
      if (v27) {
        id v27 = objc_getProperty(v27, v28, 56, 1);
      }
    }
    id v30 = v27;
    id v31 = (id)a1[4];
    if (v31) {
      id v31 = objc_getProperty(v31, v29, 32, 1);
    }
    uint64_t v32 = [v31 processInfo];
    uint64_t v33 = [v32 bundleIdentifier];
    uint64_t v34 = (void *)v33;
    uint64_t v35 = a1[4];
    if (v35) {
      LODWORD(v35) = *(unsigned __int8 *)(v35 + 8);
    }
    *(_DWORD *)buf = 138413314;
    id v46 = v16;
    __int16 v47 = 2114;
    id v48 = v20;
    __int16 v49 = 2114;
    id v50 = v30;
    __int16 v51 = 2114;
    uint64_t v52 = v33;
    __int16 v53 = 1024;
    int v54 = v35;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Requesting subscription entitlements for clientID: %{public}@ requestingBundleID: %{public}@ processInfoID: %{public}@ ignoresCaches: %{BOOL}d", buf, 0x30u);

    goto LABEL_30;
  }

  uint64_t v36 = (void *)a1[4];
  uint64_t v37 = a1[5];
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_100322FC0;
  v41[3] = &unk_100528418;
  id v38 = v36;
  uint64_t v39 = a1[5];
  uint64_t v40 = a1[6];
  id v42 = v38;
  uint64_t v43 = v39;
  uint64_t v44 = v40;
  sub_100008030(v37, v38, v41);
}

uint64_t sub_10000AF5C(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 376), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

uint64_t sub_10000B040(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 296), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void *sub_10000B08C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)result[4];
    if (!v2)
    {
      if (os_variant_has_internal_content())
      {
        uint64_t v3 = v1[5];
        id v4 = @"Diagnostic";
        if (v3)
        {
          uint64_t v5 = sub_100015188(v3, v4, 0);
        }
        else
        {

          uint64_t v5 = 0;
        }
        id v7 = +[NSNumber numberWithBool:v5];
        uint64_t v8 = sub_100017560((uint64_t)Optional, v7);
        id v9 = (void *)v1[4];
        v1[4] = v8;
      }
      else
      {
        uint64_t v6 = sub_10038E38C();
        id v7 = (void *)v1[4];
        v1[4] = v6;
      }

      uint64_t v2 = (void *)v1[4];
    }
    unsigned __int8 v10 = sub_10000B188(v2, &__kCFBooleanFalse);
    id v11 = [v10 BOOLValue];

    return v11;
  }
  return result;
}

void *sub_10000B188(void *a1, void *a2)
{
  if (a1)
  {
    if (*((unsigned char *)a1 + 8)) {
      a2 = (void *)a1[2];
    }
    a1 = a2;
    uint64_t v2 = vars8;
  }
  return a1;
}

id *sub_10000B1C0(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v19.receiver = a1;
    v19.super_class = (Class)RequestBrokerClient;
    id v4 = (id *)objc_msgSendSuper2(&v19, "init");
    a1 = v4;
    if (v4)
    {
      objc_storeWeak(v4 + 2, v3);
      uint64_t v5 = [[XPCClient alloc] initWithConnection:v3];
      id v6 = a1[1];
      a1[1] = v5;

      id v7 = objc_alloc_init(TaskQueue);
      id v8 = a1[4];
      a1[4] = v7;

      id v9 = [a1[1] clientID];
      id v10 = +[NSString stringWithFormat:@"com.apple.appstored.RequestBrokerClient.%@", v9];
      id v11 = (const char *)[v10 UTF8String];
      BOOL v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      uint64_t v13 = dispatch_get_global_queue(21, 0);
      dispatch_queue_t v14 = dispatch_queue_create_with_target_V2(v11, v12, v13);

      uint64_t v15 = (id *)a1[4];
      if (v15) {
        [v15[1] setUnderlyingQueue:v14];
      }
      uint64_t v16 = objc_opt_new();
      id v17 = a1[3];
      a1[3] = (id)v16;
    }
  }

  return a1;
}

uint64_t sub_10000B6A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = sub_1000132F4();
    if (v7)
    {
      v35[0] = @"badging-version";
      v35[1] = @"badges";
      v36[0] = &off_10054BAD8;
      v36[1] = v5;
      id v8 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:2];
      id v28 = 0;
      id v9 = +[NSPropertyListSerialization dataWithPropertyList:v8 format:200 options:0 error:&v28];
      id v10 = v28;
      id v11 = v10;
      if (v9)
      {
        id v27 = v10;
        unsigned __int8 v12 = [v9 writeToFile:v7 options:1 error:&v27];
        id v13 = v27;

        dispatch_queue_t v14 = ASDLogHandleForCategory();
        uint64_t v15 = v14;
        if (v12)
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = objc_opt_class();
            *(_DWORD *)buf = 138543874;
            id v30 = v16;
            __int16 v31 = 2114;
            id v32 = v6;
            __int16 v33 = 2114;
            uint64_t v34 = v7;
            id v17 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Wrote the serialized badging metadata to: %{public}@", buf, 0x20u);
          }
          uint64_t v18 = 1;
        }
        else
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            id v24 = objc_opt_class();
            id v25 = v24;
            uint64_t v26 = AMSLogableError();
            *(_DWORD *)buf = 138543874;
            id v30 = v24;
            __int16 v31 = 2114;
            id v32 = v6;
            __int16 v33 = 2114;
            uint64_t v34 = v26;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Failed to write the serialized badging metadata. Error: %{public}@", buf, 0x20u);
          }
          uint64_t v18 = 0;
        }
        id v11 = v13;
      }
      else
      {
        uint64_t v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = objc_opt_class();
          id v22 = v21;
          id v23 = AMSLogableError();
          *(_DWORD *)buf = 138543874;
          id v30 = v21;
          __int16 v31 = 2114;
          id v32 = v6;
          __int16 v33 = 2114;
          uint64_t v34 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Failed to serialize badging metadata. Error: %{public}@", buf, 0x20u);
        }
        uint64_t v18 = 0;
      }
    }
    else
    {
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        id v30 = (id)objc_opt_class();
        __int16 v31 = 2114;
        id v32 = v6;
        id v19 = v30;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Unable to generate the path in order to cache badging metadata", buf, 0x16u);
      }
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

void sub_10000BA34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100321C3C;
  v5[3] = &unk_1005280D8;
  uint64_t v4 = *(void *)(a1 + 56);
  v5[4] = v2;
  uint64_t v8 = v4;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v3, v5);
}

void sub_10000BAE8(uint64_t a1)
{
  uint64_t v2 = sub_100012CAC(*(void *)(a1 + 32), *(void **)(a1 + 40));
  id v3 = [v2 mutableCopy];

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = *(id *)(a1 + 48);
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v28 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v19;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        id v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          id v11 = objc_opt_class();
          uint64_t v12 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138543874;
          id v23 = v11;
          __int16 v24 = 2112;
          uint64_t v25 = v12;
          __int16 v26 = 2114;
          id v27 = v9;
          id v13 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Added badgeID: %{public}@", buf, 0x20u);
        }
        sub_100007694(*(void *)(a1 + 32), 0, v9, v3);
      }
      id v6 = [v4 countByEnumeratingWithState:&v18 objects:v28 count:16];
    }
    while (v6);
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = sub_10000B6A8(*(void *)(a1 + 32), v3, *(void **)(a1 + 40));
  dispatch_queue_t v14 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = objc_opt_class();
    uint64_t v16 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    id v23 = v15;
    __int16 v24 = 2112;
    uint64_t v25 = v16;
    __int16 v26 = 2114;
    id v27 = v3;
    id v17 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[%{public}@] [%@] Badges dictionary updated to: %{public}@", buf, 0x20u);
  }
  sub_1000095D8(*(void *)(a1 + 32), *(void **)(a1 + 40));
}

uint64_t sub_10000C5EC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v3 = &_swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  id v13 = &_swiftEmptyArrayStorage;
  uint64_t result = sub_10000897C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100018E70();
        swift_dynamicCast();
        id v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10000897C(0, v3[2] + 1, 1);
          id v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_10000897C(v6 > 1, v7 + 1, 1);
          id v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_10000C948(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      sub_100018E70();
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        id v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10000897C(0, v3[2] + 1, 1);
          id v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_10000897C(v10 > 1, v11 + 1, 1);
          id v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_10000C948(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_10000C820(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    id v9 = &_swiftEmptyArrayStorage;
    sub_10000897C(0, v1, 0);
    uint64_t v2 = &_swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000897C(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_10000897C(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_10000C948(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

_OWORD *sub_10000C948(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

XPCServiceClient *sub_10000C958(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  self;
  unint64_t v7 = [XPCServiceClient alloc];
  id v8 = v6;
  id v9 = v5;
  if (v7)
  {
    v24.receiver = v7;
    v24.super_class = (Class)XPCServiceClient;
    unint64_t v10 = (XPCServiceClient *)objc_msgSendSuper2(&v24, "init");
    unint64_t v7 = v10;
    if (v10)
    {
      objc_storeWeak((id *)&v10->_connection, v8);
      objc_storeStrong((id *)&v7->_catalog, a3);
      id WeakRetained = objc_loadWeakRetained((id *)&v7->_connection);
      uint64_t v12 = sub_10000CB98((uint64_t)AMSProcessInfo);
      processInfo = v7->_processInfo;
      v7->_processInfo = (AMSProcessInfo *)v12;

      dispatch_queue_t v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = [(AMSProcessInfo *)v7->_processInfo bundleIdentifier];
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "(XPCServiceClient) Received connection from client: %{public}@", buf, 0xCu);
      }
      uint64_t v16 = [XPCServiceEntitlements alloc];
      id v17 = objc_loadWeakRetained((id *)&v7->_connection);
      long long v18 = v17;
      if (v17)
      {
        [v17 auditToken];
      }
      else
      {
        *(_OWORD *)buf = 0u;
        long long v28 = 0u;
      }
      id v19 = objc_loadWeakRetained((id *)&v7->_connection);
      long long v20 = (XPCServiceEntitlements *)sub_100008F30(v16, buf, [v19 processIdentifier]);
      entitlements = v7->_entitlements;
      v7->_entitlements = v20;

      CFStringRef v25 = @"XPCServiceClientUserInfoKey";
      __int16 v26 = v7;
      id v22 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
      [v8 setUserInfo:v22];
    }
  }

  return v7;
}

id sub_10000CB98(uint64_t a1)
{
  __chkstk_darwin(a1);
  id v2 = v1;
  self;
  id v3 = objc_alloc_init((Class)AMSProcessInfo);
  int v4 = [v2 processIdentifier];
  self;
  int v5 = proc_pidpath(v4, &v23, 0x1000u);
  if (v5 <= 0
    || (id v6 = [objc_alloc((Class)NSString) initWithBytes:&v23 length:v5 encoding:4]) == 0)
  {
    unint64_t v7 = 0;
    goto LABEL_29;
  }
  unint64_t v7 = (__CFString *)v6;
  self;
  CFURLRef v8 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v7, kCFURLPOSIXPathStyle, 0);

  if (!v8) {
    goto LABEL_14;
  }
  CFURLRef v9 = (const __CFURL *)_CFBundleCopyBundleURLForExecutableURL();
  if (!v9)
  {
    CFRelease(v8);
    goto LABEL_13;
  }
  CFURLRef v10 = v9;
  unint64_t v11 = CFBundleCreate(kCFAllocatorDefault, v9);
  CFRelease(v10);
  CFRelease(v8);
  if (!v11)
  {
LABEL_13:
    CFURLRef v8 = 0;
    goto LABEL_14;
  }
  CFURLRef v12 = CFBundleCopyBundleURL(v11);
  if (v12)
  {
    CFURLRef v13 = v12;
    [v3 setBundleURL:v12];
  }
  CFURLRef v8 = (CFURLRef)[(__CFDictionary *)CFBundleGetInfoDictionary(v11) copy];
  CFRelease(v11);
  if (v8 && [(__CFURL *)v8 count]) {
    goto LABEL_16;
  }
LABEL_14:
  dispatch_queue_t v14 = v7;
  self;
  CFURLRef v15 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v14, kCFURLPOSIXPathStyle, 0);

  if (!v15)
  {
LABEL_23:

    goto LABEL_24;
  }
  CFDictionaryRef v16 = CFBundleCopyInfoDictionaryForURL(v15);
  CFRelease(v15);

  CFURLRef v8 = v16;
  if (v16)
  {
LABEL_16:
    id v17 = [(__CFURL *)v8 objectForKeyedSubscript:kCFBundleIdentifierKey];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v3 setBundleIdentifier:v17];
    }
    long long v18 = [(__CFURL *)v8 objectForKeyedSubscript:_kCFBundleShortVersionStringKey];
    if (!v18)
    {
      long long v18 = [(__CFURL *)v8 objectForKeyedSubscript:kCFBundleVersionKey];
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v3 setClientVersion:v18];
    }

    goto LABEL_23;
  }
LABEL_24:
  id v19 = [v3 bundleIdentifier];

  if (!v19)
  {
    long long v20 = [(__CFString *)v7 lastPathComponent];
    [v3 setBundleIdentifier:v20];

    [v3 setClientVersion:@"1.0"];
  }
  long long v23 = 0u;
  long long v24 = 0u;
  if (v2) {
    objc_msgSend(v2, "auditToken", v23, v24);
  }
  id v21 = [objc_alloc((Class)NSData) initWithBytes:&v23 length:32];
  [v3 setAuditTokenData:v21];

LABEL_29:
  return v3;
}

id sub_10000CF18(void *a1, id *a2)
{
  *a1 = *a2;
  id result = a2[1];
  a1[1] = result;
  return result;
}

void sub_10000CF54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {

LABEL_9:
    CFDictionaryRef v16 = *(NSObject **)(*(void *)(a1 + 40) + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000A7EC;
    block[3] = &unk_100525408;
    id v17 = *(id *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    id v20 = v17;
    uint64_t v21 = v18;
    uint64_t v22 = v3;
    dispatch_async(v16, block);

    return;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 8));
  int v5 = *(void **)(v4 + 96);
  id v6 = +[NSNumber numberWithUnsignedInteger:v3];
  unint64_t v7 = [v5 objectForKey:v6];

  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  if (v8)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 8));
    CFURLRef v10 = *(void **)(v8 + 96);
    unint64_t v11 = +[NSNumber numberWithUnsignedInteger:v3];
    id v12 = [v10 objectForKeyedSubscript:v11];

    if (!v12) {
      id v12 = objc_alloc_init((Class)NSMutableArray);
    }
    id v13 = [v9 copy];
    [v12 addObject:v13];

    dispatch_queue_t v14 = *(void **)(v8 + 96);
    CFURLRef v15 = +[NSNumber numberWithUnsignedInteger:v3];
    [v14 setObject:v12 forKeyedSubscript:v15];
  }
  if (!v7) {
    goto LABEL_9;
  }
}

uint64_t sub_10000D124(id a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t isEscapingClosureAtFileLocation = a2;
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC9appstored14UpdatesContext_isVPPLookup) != 1)
  {
    if (qword_1005A3038 != -1) {
      goto LABEL_13;
    }
    goto LABEL_4;
  }
  NSString v7 = String._bridgeToObjectiveC()();
  aBlock[0] = 8;
  uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v9 = [self predicateWithProperty:v7 value:v8 comparisonType:6];

  swift_unknownObjectRelease();
  while (1)
  {
    unint64_t v11 = (char *)&off_100510560;
    if (*(unsigned char *)(isEscapingClosureAtFileLocation + OBJC_IVAR____TtC9appstored14UpdatesContext_includeMetrics) == 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = sub_1000E7C44(0, 10, 1, (char *)&off_100510560);
      }
      unint64_t v13 = *((void *)v11 + 2);
      unint64_t v12 = *((void *)v11 + 3);
      if (v13 >= v12 >> 1) {
        unint64_t v11 = sub_1000E7C44((char *)(v12 > 1), v13 + 1, 1, v11);
      }
      *((void *)v11 + 2) = v13 + 1;
      dispatch_queue_t v14 = &v11[16 * v13];
      strcpy(v14 + 32, "metrics_data");
      v14[45] = 0;
      *((_WORD *)v14 + 23) = -5120;
    }
    type metadata accessor for MediaAPIUpdate();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v16 = [a1 connection];
    sub_10001644C(&qword_1005A4ED0);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100488070;
    *(void *)(v17 + 56) = &type metadata for String;
    strcpy((char *)(v17 + 32), "install_date");
    *(unsigned char *)(v17 + 45) = 0;
    *(_WORD *)(v17 + 46) = -5120;
    a1 = v9;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v19 = sub_100009C60(ObjCClassFromMetadata, v16, a1, isa);

    sub_10000C820((uint64_t)v11);
    swift_bridgeObjectRelease();
    Class v20 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = isEscapingClosureAtFileLocation;
    v21[3] = a3;
    v21[4] = a4;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = sub_10008C498;
    *(void *)(v22 + 24) = v21;
    aBlock[4] = sub_10008E130;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003F95C;
    aBlock[3] = &unk_100513CE8;
    a3 = _Block_copy(aBlock);
    id v23 = (id)isEscapingClosureAtFileLocation;
    swift_retain();
    swift_release();
    [v19 enumerateMemoryEntitiesWithProperties:v20 usingBlock:a3];

    _Block_release(a3);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_13:
    swift_once();
LABEL_4:
    sub_10000C5EC(qword_1005A4D20);
    Class v10 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v9 = [self predicateMatchingAllPredicates:v10];
  }
  return result;
}

void *sub_10000D568(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  id v7 = a3;
  if (a1)
  {
    uint64_t v8 = sub_10000D760(a2, v7, 0);
    if (v8)
    {
      id v9 = sub_10030B11C();
      Class v10 = v9;
      if (v9) {
        double v11 = sub_10030D1FC(v9, @"fsEntitlementsRefreshIntervalInSeconds", 1, 14400.0);
      }
      else {
        double v11 = 0.0;
      }

      unint64_t v12 = [v8 objectForKeyedSubscript:@"cacheTimestamp"];
      unint64_t v13 = [v12 dateByAddingTimeInterval:v11];

      if (v13
        && (+[NSDate date],
            dispatch_queue_t v14 = objc_claimAutoreleasedReturnValue(),
            id v15 = [v13 compare:v14],
            v14,
            v15 == (id)1))
      {
        char v16 = 0;
      }
      else
      {
        uint64_t v17 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = 138412290;
          id v21 = v7;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Cached subscription entitlements have expired", (uint8_t *)&v20, 0xCu);
        }

        char v16 = 1;
      }
      uint64_t v18 = sub_1003B8774([SubscriptionEntitlementsResponse alloc], v8);

      if (!a4) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v18 = 0;
      char v16 = 1;
      if (!a4) {
        goto LABEL_13;
      }
    }
    *a4 = v16;
LABEL_13:

    goto LABEL_14;
  }
  uint64_t v18 = 0;
LABEL_14:

  return v18;
}

id sub_10000D760(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = sub_100013084(a1, v5);
  id v7 = +[NSData dataWithContentsOfFile:v6];
  if (v7)
  {
    if (a3)
    {
      uint64_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Subscription entitlement cached on device", buf, 0xCu);
      }
    }
    id v14 = 0;
    id v9 = +[NSPropertyListSerialization propertyListWithData:v7 options:0 format:0 error:&v14];
    Class v10 = v14;
    if (v10)
    {
      double v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        id v16 = v5;
        __int16 v17 = 2114;
        uint64_t v18 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] Failed to read the subscription entitlements from disk error: %{public}@", buf, 0x16u);
      }
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v9 count]) {
      id v12 = v9;
    }
    else {
      id v12 = 0;
    }
  }
  else
  {
    Class v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Subscription entitlement not cached on device", buf, 0xCu);
    }
    id v12 = 0;
  }

  return v12;
}

uint64_t sub_10000D9AC()
{
  uint64_t v63 = v0;
  uint64_t v1 = v0 + 96;
  unint64_t v2 = v0 + 64;
  uint64_t v3 = *(void *)(v0 + 176);
  unint64_t v4 = *(void *)(v0 + 160);
  id v5 = *(id *)(v0 + 96);
  swift_bridgeObjectRetain();
  sub_100019700(v4);
  uint64_t v6 = v3;
  unint64_t v7 = 0;
  sub_100006690((uint64_t *)(v0 + 64), v6, v5, v4);
  uint64_t v9 = v8;
  sub_10000E0D4(v4);
  unint64_t v10 = *(void *)(v0 + 64);
  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11 >= v9) {
      goto LABEL_3;
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v11 < v9) {
    goto LABEL_42;
  }
LABEL_3:
  unint64_t v12 = *(void *)(v0 + 160);
  sub_100006328(v9, v11);
  swift_bridgeObjectRelease();
  sub_10000E0D4(v12);
  unint64_t v2 = *(void *)(v0 + 64);
  if (!(v2 >> 62))
  {
    uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    goto LABEL_5;
  }
LABEL_43:
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
LABEL_5:
  v60 = (NSObject **)v1;
  v61 = (void *)v0;
  unint64_t v59 = v7;
  if (v9)
  {
    if (v9 >= 1)
    {
      uint64_t v14 = 0;
      id v15 = 0;
      id v16 = 0;
      unint64_t v7 = v2 & 0xC000000000000001;
      uint64_t v1 = 1;
      uint64_t v0 = 25;
      while (1)
      {
        if (v7) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v2 + 8 * v14 + 32);
        }
        id v19 = v18;
        unint64_t v20 = (unint64_t)[v18 updateState];

        if (v20 > 4 || ((1 << v20) & 0x19) == 0)
        {
          BOOL v17 = __OFADD__(v15, 1);
          id v15 = ((char *)v15 + 1);
          if (v17)
          {
            __break(1u);
            goto LABEL_41;
          }
        }
        else
        {
          BOOL v17 = __OFADD__(v16, 1);
          id v16 = ((char *)v16 + 1);
          if (v17)
          {
            __break(1u);
            goto LABEL_20;
          }
        }
        if (v9 == ++v14) {
          goto LABEL_21;
        }
      }
    }
    __break(1u);
    goto LABEL_59;
  }
LABEL_20:
  id v16 = 0;
  id v15 = 0;
LABEL_21:
  uint64_t v22 = (void *)v61[12];
  swift_bridgeObjectRelease_n();
  static Logger.updates.getter();
  id v23 = v22;
  long long v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  id v27 = (char *)v61[12];
  if (v26)
  {
    uint64_t v28 = swift_slowAlloc();
    v58 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 138412802;
    uint64_t v29 = *(NSObject **)&v27[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    *(v60 - 3) = v29;
    id v30 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v58 = v29;

    *(_WORD *)(v28 + 12) = 2048;
    *(v60 - 2) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 22) = 2048;
    *(v60 - 1) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%@] Returning %ld available and %ld recent update(s)", (uint8_t *)v28, 0x20u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    long long v24 = *v60;
  }
  uint64_t v32 = v61[17];
  uint64_t v31 = v61[18];
  uint64_t v33 = v61[16];

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  uint64_t v34 = v61;
  unint64_t v35 = v61[8];
  if (v35 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    if (v36) {
      goto LABEL_26;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    uint64_t v45 = _swiftEmptyArrayStorage;
    goto LABEL_46;
  }
  uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v36) {
    goto LABEL_45;
  }
LABEL_26:
  v62 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000BAFDC(0, v36 & ~(v36 >> 63), 0);
  if (v36 < 0)
  {
LABEL_59:
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v36; ++i)
  {
    if ((v35 & 0xC000000000000001) != 0) {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v38 = *(id *)(v35 + 8 * i + 32);
    }
    uint64_t v39 = v38;
    id v40 = objc_msgSend(v38, "releaseDate", v58);
    uint64_t v41 = v61[15];
    if (v40)
    {
      id v42 = v40;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v43 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v41, 0, 1, v43);
    }
    else
    {
      uint64_t v44 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v41, 1, 1, v44);
    }
    sub_100016714(v61[15], (uint64_t *)&unk_1005A4E20);

    uint64_t v45 = v62;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000BAFDC(0, v62[2] + 1, 1);
      uint64_t v45 = v62;
    }
    unint64_t v47 = v45[2];
    unint64_t v46 = v45[3];
    unint64_t v48 = v47 + 1;
    if (v47 >= v46 >> 1)
    {
      sub_1000BAFDC(v46 > 1, v47 + 1, 1);
      uint64_t v45 = v62;
    }
    v45[2] = v48;
  }
  swift_bridgeObjectRelease();
LABEL_46:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100005DE0(v35, (unint64_t)v45);
  id v50 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v62 = v50;
  sub_100019008(&v62);
  if (v59)
  {
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __int16 v51 = v62;
    uint64_t v52 = v62[2];
    if (v52)
    {
      v62 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v53 = 0;
      do
      {
        uint64_t v54 = v53 + 1;
        id v55 = (id)v51[v53 + 4];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v53 = v54;
      }
      while (v52 != v54);
      v56 = v62;
      swift_release();
      uint64_t v34 = v61;
    }
    else
    {
      swift_release();
      v56 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    v57 = (uint64_t (*)(void *))v34[1];
    return v57(v56);
  }
}

unint64_t sub_10000E0D4(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10000E0E4(uint64_t a1)
{
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x3032000000;
  uint64_t v39 = sub_100018398;
  id v40 = sub_100017D88;
  id v41 = 0;
  unint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    unint64_t v4 = [v3 processInfo];
    id v5 = [v4 bundleIdentifier];
    int v6 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v48) = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ Starting query for updates for: %{public}@ Reloading from server: %{BOOL}d", buf, 0x1Cu);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  unint64_t v48 = sub_100018398;
  __int16 v49 = sub_100017D88;
  id v50 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = *(id *)(*(void *)(a1 + 40) + 16);
  id v7 = [obj countByEnumeratingWithState:&v32 objects:v46 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v33;
LABEL_5:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v33 != v8) {
        objc_enumerationMutation(obj);
      }
      unint64_t v10 = *(void **)(*((void *)&v32 + 1) + 8 * v9);
      dispatch_semaphore_t v13 = dispatch_semaphore_create(0);
      int v14 = *(unsigned __int8 *)(a1 + 56);
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v12, 32, 1);
      }
      id v16 = Property;
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100009BC0;
      v28[3] = &unk_10052BA60;
      id v30 = buf;
      uint64_t v31 = &v36;
      BOOL v17 = v13;
      uint64_t v29 = v17;
      [v10 executeQueryForUpdatesReloadingFromServer:v14 != 0 logKey:v16 usingBlock:v28];

      dispatch_semaphore_wait(v17, 0xFFFFFFFFFFFFFFFFLL);
      if (*(void *)(*(void *)&buf[8] + 40)) {
        break;
      }
      if (v37[5])
      {
        *(void *)(*(void *)&buf[8] + 40) = 0;
        break;
      }
      if (v7 == (id)++v9)
      {
        id v7 = [obj countByEnumeratingWithState:&v32 objects:v46 count:16];
        if (v7) {
          goto LABEL_5;
        }
        break;
      }
    }
  }

  if ([*(id *)(*(void *)&buf[8] + 40) count])
  {
    id v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = [*(id *)(*(void *)&buf[8] + 40) count];
      *(_DWORD *)id v42 = 138543618;
      uint64_t v43 = v19;
      __int16 v44 = 2048;
      id v45 = v20;
      id v21 = "%{public}@ Completed with %lu result(s)";
      uint64_t v22 = v18;
      uint32_t v23 = 22;
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, v42, v23);
    }
  }
  else
  {
    id v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      *(_DWORD *)id v42 = 138543362;
      uint64_t v43 = v24;
      id v21 = "%{public}@ Completed with no results";
      uint64_t v22 = v18;
      uint32_t v23 = 12;
      goto LABEL_21;
    }
  }

  uint64_t v25 = *(void *)(a1 + 48);
  id v26 = [*(id *)(*(void *)&buf[8] + 40) copy];
  (*(void (**)(uint64_t, id, uint64_t))(v25 + 16))(v25, v26, v37[5]);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v36, 8);
}

void sub_10000E52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose((const void *)(v17 - 176), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000EE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location,id a41)
{
  objc_destroyWeak(v44);
  objc_destroyWeak(v41);
  objc_destroyWeak(v43);
  objc_destroyWeak(v42);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a41);
  _Unwind_Resume(a1);
}

void sub_10000EF9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v9 = 138543362;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Completed request %{public}@", (uint8_t *)&v9, 0xCu);
    }

    id v5 = sub_10000F0C8(WeakRetained);
    int v6 = *(void **)(a1 + 40);
    if (v6) {
      int v6 = (void *)v6[2];
    }
    id v7 = v6;
    [v7 receiveResponse:v5];
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
}

uint64_t sub_10000F0B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10000F0C8(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    uint64_t v3 = (void *)v1[5];
    if (!v3)
    {
      id v4 = objc_getProperty(v1, v2, 32, 1);
      if (v4) {
        id v5 = [objc_alloc((Class)ASDRequestResponse) initWithError:v4];
      }
      else {
        id v5 = objc_alloc_init((Class)ASDRequestResponse);
      }
      int v6 = (void *)v1[5];
      v1[5] = v5;

      uint64_t v3 = (void *)v1[5];
    }
    id v7 = [v3 copy];
    objc_sync_exit(v1);
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

void sub_10000F194(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000F1AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void **)(a1 + 48);
  double v3 = COERCE_DOUBLE(*(id *)(a1 + 40));
  id v4 = v2;
  if (v1)
  {
    id v5 = +[ActiveAccountObserver activeAccount];
    int v6 = v5;
    if (v5 && (objc_msgSend(v5, "ams_DSID"), id v7 = objc_claimAutoreleasedReturnValue(), v7, v7))
    {
      if (*(unsigned char *)(v1 + 32))
      {
        uint64_t v8 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = objc_opt_class();
          *(_WORD *)&buf[12] = 2114;
          *(double *)&buf[14] = v3;
          id v9 = *(id *)&buf[4];
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Ignoring update request - currently updating", buf, 0x16u);
        }
        uint64_t v10 = sub_1001F5FCC(5, 0);
        v4[2](v4, v10);
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = &v38;
        uint64_t v40 = 0x3032000000;
        id v41 = sub_1000182F8;
        id v42 = sub_100017D38;
        id v43 = 0;
        uint64_t v32 = 0;
        long long v33 = (double *)&v32;
        uint64_t v34 = 0x3032000000;
        long long v35 = sub_1000182F8;
        uint64_t v36 = sub_100017D38;
        id v37 = 0;
        unint64_t v12 = *(void **)(v1 + 16);
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_100372D74;
        __int16 v51 = &unk_10052A000;
        uint64_t v53 = &v38;
        id v13 = v6;
        id v52 = v13;
        uint64_t v54 = &v32;
        [v12 readUsingSession:buf];
        if (*((void *)v33 + 5))
        {
          int v14 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            uint64_t v29 = objc_opt_class();
            double v30 = v33[5];
            *(_DWORD *)__int16 v44 = 138412546;
            id v45 = v29;
            __int16 v46 = 2112;
            double v47 = v30;
            id v31 = v29;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@]: Error getting last updated date: %@", v44, 0x16u);
          }
        }
        if (!v39[5]) {
          goto LABEL_21;
        }
        id v15 = +[NSDate date];
        [v15 timeIntervalSinceDate:v39[5]];
        double v17 = v16;
        self;
        id v18 = sub_10030B11C();
        double v19 = sub_10030BC30((uint64_t)v18, @"iap-daap/update-polling-frequency-secs", 3600.0);

        id v20 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          id v21 = objc_opt_class();
          *(_DWORD *)__int16 v44 = 138543618;
          id v45 = v21;
          __int16 v46 = 2048;
          double v47 = v19;
          id v22 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[%{public}@]: Update polling frequency interval: %.0f", v44, 0x16u);
        }
        if (v17 <= v19)
        {
          uint32_t v23 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            id v24 = (id)objc_opt_class();
            uint64_t v25 = (void *)v39[5];
            if (v25)
            {
              [v25 timeIntervalSince1970];
              uint64_t v27 = (uint64_t)v26;
            }
            else
            {
              uint64_t v27 = 0;
            }
            *(_DWORD *)__int16 v44 = 138412802;
            id v45 = v24;
            __int16 v46 = 2114;
            double v47 = v3;
            __int16 v48 = 2048;
            uint64_t v49 = v27;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "[%@]: %{public}@ Polling update not needed. Last updated: %{time_t}ld", v44, 0x20u);
          }
          v4[2](v4, 0);
        }
        else
        {
LABEL_21:
          sub_100372ABC(v1, v13, *(void **)&v3, v4);
        }

        _Block_object_dispose(&v32, 8);
        _Block_object_dispose(&v38, 8);
      }
    }
    else
    {
      uint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = objc_opt_class();
        *(_WORD *)&buf[12] = 2114;
        *(double *)&buf[14] = v3;
        id v28 = *(id *)&buf[4];
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Ignoring update request - there is no active account DSID", buf, 0x16u);
      }
      v4[2](v4, 0);
    }
  }
}

void sub_10000F70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_10000F748(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    id v5 = objc_opt_class();
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 138412802;
    id v9 = v5;
    __int16 v10 = 2114;
    uint64_t v11 = v6;
    __int16 v12 = 2114;
    id v13 = v3;
    id v7 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Legacy request completed with error: %{public}@", (uint8_t *)&v8, 0x20u);
  }
}

id *sub_10000F9B8(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)RequestProxy;
    __int16 v10 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v10;
    if (v10)
    {
      objc_storeWeak(v10 + 1, v7);
      objc_storeStrong(a1 + 2, a4);
      objc_storeStrong(a1 + 3, a3);
    }
  }

  return a1;
}

void sub_10000FACC(uint64_t a1)
{
  uint64_t v2 = sub_10000FB20(*(void *)(*(void *)(a1 + 32) + 24), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10000FB20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init((Class)NSMutableArray);
    id v5 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v6 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v5;

    [v3 acceptVisitor:a1 flags:0];
    id v7 = sub_10000FC90(*(void **)(a1 + 16));
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          [v4 addObject:*(void *)(*((void *)&v14 + 1) + 8 * i)];
        }
        id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }
    id v12 = [v4 copy];
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

id sub_10000FC90(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [a1 lastObject];
    [a1 removeLastObject];
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

BOOL sub_10000FCE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    if (qword_1005B1140 != -1) {
      dispatch_once(&qword_1005B1140, &stru_10052BAC8);
    }
    BOOL v6 = sub_10000FD6C(qword_1005B1138, v5, a3);
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

BOOL sub_10000FD6C(BOOL result, void *a2, void *a3)
{
  if (result)
  {
    uint64_t v4 = result;
    *(unsigned char *)(result + 56) = 1;
    id v5 = a2;
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v7 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(&a9, 8) = v6;

    [v5 acceptVisitor:v4 flags:1];
    int v8 = *(unsigned __int8 *)(v4 + 56);
    if (a3 && !*(unsigned char *)(v4 + 56))
    {
      if ([*(id *)(v4 + 48) count])
      {
        id v9 = [*(id *)(v4 + 48) componentsJoinedByString:@", "];
      }
      else
      {
        id v9 = @"Unknown validation error";
      }
      uint64_t v10 = ASDErrorDomain;
      NSErrorUserInfoKey v12 = NSDebugDescriptionErrorKey;
      id v13 = v9;
      uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
      *a3 = +[NSError errorWithDomain:v10 code:507 userInfo:v11];

      int v8 = *(unsigned __int8 *)(v4 + 56);
    }
    return v8 != 0;
  }
  return result;
}

sqlite3_stmt **sub_10000FECC(sqlite3_stmt **a1, void *a2)
{
  uint64_t v4 = a2;
  if (a1)
  {
    v19.receiver = a1;
    v19.super_class = (Class)SQLiteCursor;
    id v5 = (id *)objc_msgSendSuper2(&v19, "init");
    a1 = (sqlite3_stmt **)v5;
    if (v5)
    {
      id v6 = v4 ? (void *)v4[2] : 0;
      v5[6] = v6;
      objc_storeStrong(v5 + 7, a2);
      int v7 = sqlite3_column_count(a1[6]);
      *((_DWORD *)a1 + 2) = v7;
      uint64_t v8 = +[NSMutableArray arrayWithCapacity:v7];
      id v9 = a1[5];
      a1[5] = (sqlite3_stmt *)v8;

      a1[2] = (sqlite3_stmt *)malloc_type_calloc(*((int *)a1 + 2), 1uLL, 0x100004077774924uLL);
      if (*((int *)a1 + 2) >= 1)
      {
        for (uint64_t i = 0; i < *((int *)a1 + 2); ++i)
        {
          uint64_t v11 = a1[5];
          NSErrorUserInfoKey v12 = +[NSString stringWithUTF8String:sqlite3_column_name(a1[6], i)];
          [(sqlite3_stmt *)v11 addObject:v12];

          id v13 = sqlite3_column_decltype(a1[6], i);
          if (v13)
          {
            long long v14 = v13;
            if (!strcmp(v13, "DATETIME"))
            {
              *((unsigned char *)a1[2] + i) = 1;
              continue;
            }
            if (!strcmp(v14, "JSON"))
            {
              long long v16 = a1[2];
              char v17 = 2;
              goto LABEL_20;
            }
            if (!strcmp(v14, "UUID"))
            {
              long long v16 = a1[2];
              char v17 = 3;
              goto LABEL_20;
            }
            if (!strcmp(v14, "URL"))
            {
              long long v16 = a1[2];
              char v17 = 4;
              goto LABEL_20;
            }
            int v15 = strcmp(v14, "STRING");
            long long v16 = a1[2];
            if (!v15)
            {
              char v17 = 5;
LABEL_20:
              *((unsigned char *)v16 + i) = v17;
              continue;
            }
          }
          else
          {
            long long v16 = a1[2];
          }
          *((unsigned char *)v16 + i) = 0;
        }
      }
    }
  }

  return a1;
}

uint64_t sub_1000100E4(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 processInfo];
    id v5 = [v4 bundleIdentifier];
    int v7 = 138543618;
    uint64_t v8 = v3;
    __int16 v9 = 2114;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ shouldUseModernUpdatesWithReplyHandler requested for client: %{public}@", (uint8_t *)&v7, 0x16u);
  }
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), +[UpdatesManager shouldUseModernUpdates]);
}

void sub_100010444(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100010468(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v4 lock];
  v3[2](v3);

  [v4 unlock];
}

void sub_1000104D4(uint64_t a1)
{
}

void sub_1000106BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    int v7 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10000F1AC;
    v8[3] = &unk_1005221F0;
    void v8[4] = a1;
    id v9 = v5;
    id v10 = v6;
    sub_100010948(v7, v8);
  }
}

void sub_100010948(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, a2);
  dispatch_async(v3, v4);
}

id sub_1000109AC()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100370C58;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B1038 != -1) {
    dispatch_once(&qword_1005B1038, block);
  }
  uint64_t v0 = (void *)qword_1005B1030;
  return v0;
}

void sub_100010E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010FF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = 138543618;
      id v7 = v3;
      __int16 v8 = 2114;
      uint64_t v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Queued task: %{public}@ for: %{public}@", (uint8_t *)&v6, 0x16u);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      [*(id *)(v5 + 8) addOperation:v3];
    }
  }
}

__CFString *sub_100011688(__CFString *result)
{
  if (result)
  {
    uint64_t v1 = (char *)[(__CFString *)result comparisonType];
    if ((unint64_t)(v1 - 1) > 6) {
      return 0;
    }
    else {
      return off_1005293F0[(void)(v1 - 1)];
    }
  }
  return result;
}

void sub_100011D9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4 < 1)
    {
      if (!sub_100012004(a1, @"BEGIN DEFERRED TRANSACTION", 0, 0)) {
        goto LABEL_14;
      }
      *(void *)(a1 + 40) = 1;
      *(unsigned char *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    }
    else
    {
      *(void *)(a1 + 40) = v4 + 1;
    }
    os_variant_has_internal_content();
    int v5 = v3[2](v3);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = v5 ^ 1;
    if (*(unsigned char *)(a1 + 48)) {
      int v7 = 1;
    }
    *(unsigned char *)(a1 + 4_Block_object_dispose(&a9, 8) = v7;
    uint64_t v8 = v6 - 1;
    *(void *)(a1 + 40) = v8;
    if (!v8)
    {
      if (v7) {
        uint64_t v9 = @"ROLLBACK TRANSACTION";
      }
      else {
        uint64_t v9 = @"COMMIT TRANSACTION";
      }
      sub_100012004(a1, v9, 0, 0);
      id v10 = *(void **)(a1 + 8);
      if (v10)
      {
        id v11 = [v10 copy];
        NSErrorUserInfoKey v12 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;

        id v13 = dispatch_get_global_queue(0, 0);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_10025EF14;
        v15[3] = &unk_100521388;
        id v16 = v11;
        id v14 = v11;
        dispatch_async(v13, v15);
      }
    }
  }
LABEL_14:
}

uint64_t sub_100012004(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v7 = a4;
  if (!a1)
  {
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  id v19 = 0;
  id v8 = a2;
  uint64_t v9 = sub_1000122A0(a1, v8, &v19);
  id v10 = v19;
  id v11 = sub_10001221C([SQLitePreparedStatement alloc], *(void *)(a1 + 16), v8);

  if (v11) {
    [*(id *)(a1 + 32) setObject:v9 forKey:v11];
  }
  if (v9)
  {
    if (v7) {
      v7[2](v7, v9);
    }
    id v18 = v10;
    id v12 = v9;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100012A84;
    v20[3] = &unk_100524010;
    id v13 = v12;
    id v21 = v13;
    uint64_t v14 = sub_1000125F8(a1, &v18, v20);
    if (v14)
    {
      int v15 = (sqlite3_stmt *)v13[2];
      if (v15) {
        sqlite3_reset(v15);
      }
    }

    id v16 = v18;
    sub_1000121D0((uint64_t)v13);
    if (v11) {
      [*(id *)(a1 + 32) removeObjectForKey:v11];
    }
    id v10 = v16;
    if (!a3) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v14 = 0;
  if (a3)
  {
LABEL_15:
    if ((v14 & 1) == 0) {
      *a3 = v10;
    }
  }
LABEL_17:

LABEL_18:
  return v14;
}

uint64_t sub_1000121D0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(sqlite3_stmt **)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = sqlite3_finalize(v2);
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;

  return v3;
}

void *sub_10001221C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)SQLitePreparedStatement;
    uint64_t v6 = objc_msgSendSuper2(&v10, "init");
    a1 = v6;
    if (v6)
    {
      v6[1] = a2;
      id v7 = [v5 copy];
      id v8 = (void *)a1[2];
      a1[2] = v7;
    }
  }

  return a1;
}

id sub_1000122A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (sub_100012B74(a1))
  {
    id v13 = 0;
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x3032000000;
    id v18 = sub_100017F68;
    id v19 = sub_100017B70;
    id v20 = 0;
    id v6 = v5;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000129E8;
    v14[3] = &unk_100524038;
    v14[5] = &v15;
    v14[6] = [v6 UTF8String];
    v14[4] = a1;
    sub_1000125F8(a1, &v13, v14);
    id v7 = (id)v16[5];
    _Block_object_dispose(&v15, 8);

    id v8 = v13;
    if (v7)
    {
      uint64_t v9 = *(void *)(a1 + 56);
      if (v9 && *(unsigned char *)(v9 + 8) && (sub_10032E5C8((uint64_t)v7) & 1) == 0)
      {
        uint64_t v11 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7701 userInfo:0];

        sub_1000121D0((uint64_t)v7);
        id v10 = 0;
        id v8 = (id)v11;
      }
      else
      {
        id v10 = v7;
      }
    }
    else
    {
      id v10 = 0;
    }

    if (!a3) {
      goto LABEL_14;
    }
  }
  else
  {
    id v8 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7700 userInfo:0];
    id v10 = 0;
    if (!a3) {
      goto LABEL_14;
    }
  }
  if (!v10) {
    *a3 = v8;
  }
LABEL_14:

  return v10;
}

void sub_1000124A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000124B8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) addObject:*(void *)(a1 + 40)];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) countForObject:*(void *)(a1 + 40)];
  uint64_t v3 = ASDLogHandleForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v2 == (id)1)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v7 = 138543362;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Transaction] Started transaction: %{public}@", (uint8_t *)&v7, 0xCu);
    }

    [*(id *)(a1 + 40) UTF8String];
    uint64_t v3 = os_transaction_create();
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:v3 forKeyedSubscript:*(void *)(a1 + 40)];
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138543362;
    uint64_t v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Transaction] Joined transaction: %{public}@", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t sub_1000125F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a3;
  if (!a1)
  {
    uint64_t v17 = 0;
    goto LABEL_30;
  }
  uint64_t v6 = 0;
  unsigned __int8 v7 = 0;
  do
  {
    buf[0] = 0;
    int v9 = v5[2](v5, buf);
    if (v9 <= 0x19u)
    {
      switch((char)v9)
      {
        case 0:
          goto LABEL_13;
        case 5:
        case 6:
          if (v6 < 10)
          {
            usleep(0xF4240u);
            ++v6;
            goto LABEL_9;
          }
          uint64_t v12 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7702 userInfo:0];
          break;
        case 10:
          uint64_t v11 = sub_100307514(v9);
          id v13 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            id v19 = objc_opt_class();
            id v20 = *(void **)(a1 + 56);
            id v22 = v19;
            if (v20) {
              id Property = objc_getProperty(v20, v21, 24, 1);
            }
            else {
              id Property = 0;
            }
            id v24 = Property;
            *(_DWORD *)buf = 138412546;
            uint64_t v36 = v19;
            __int16 v37 = 2114;
            id v38 = v24;
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@]: Reopening database after IO error: %{public}@", buf, 0x16u);
          }
          uint64_t v14 = *(void **)(a1 + 8);
          id v15 = v14;
          uint64_t v16 = *(void *)(a1 + 40);
          if (!sub_10025E72C(a1) || !sub_100012B74(a1)) {
            goto LABEL_21;
          }
          if (!v16) {
            goto LABEL_35;
          }
          if (sqlite3_exec(*(sqlite3 **)(a1 + 16), "BEGIN DEFERRED TRANSACTION", 0, 0, 0))
          {
LABEL_21:
            sub_10025ECCC(a1);
          }
          else
          {
            objc_storeStrong((id *)(a1 + 8), v14);
            *(void *)(a1 + 40) = v16;
            *(unsigned char *)(a1 + 4_Block_object_dispose(&a9, 8) = 1;
LABEL_35:
            id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
            char v26 = objc_opt_respondsToSelector();

            if (v26)
            {
              uint64_t v27 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                uint64_t v29 = objc_opt_class();
                double v30 = *(void **)(a1 + 56);
                id v34 = v29;
                if (v30) {
                  id v32 = objc_getProperty(v30, v31, 24, 1);
                }
                else {
                  id v32 = 0;
                }
                id v33 = v32;
                *(_DWORD *)buf = 138412546;
                uint64_t v36 = v29;
                __int16 v37 = 2114;
                id v38 = v33;
                _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[%@]: Asking delegate to reset database after reopen: %{public}@", buf, 0x16u);
              }
              id v28 = objc_loadWeakRetained((id *)(a1 + 24));
              [v28 connectionNeedsResetForReopen:a1];
            }
          }

          goto LABEL_26;
        case 11:
          goto LABEL_14;
        default:
          goto LABEL_23;
      }
      goto LABEL_24;
    }
    if (v9 != 100)
    {
      if (v9 == 26)
      {
LABEL_14:
        uint64_t v11 = sub_100307514(v9);
        sub_10025ECCC(a1);
        goto LABEL_26;
      }
      if (v9 == 101)
      {
LABEL_13:
        uint64_t v11 = 0;
        unsigned __int8 v7 = 1;
LABEL_25:
        goto LABEL_26;
      }
LABEL_23:
      uint64_t v12 = sub_100307514(v9);
LABEL_24:
      uint64_t v11 = (void *)v12;
      goto LABEL_25;
    }
    unsigned __int8 v7 = 1;
LABEL_9:
    int v10 = buf[0];
  }
  while (!v10);
  uint64_t v11 = 0;
LABEL_26:
  if (a2 && (v7 & 1) == 0) {
    *a2 = v11;
  }

  uint64_t v17 = v7;
LABEL_30:

  return v17;
}

uint64_t sub_1000129E8(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 16), *(const char **)(a1 + 48), -1, &ppStmt, 0);
  if (v2 - 100 < 2 || v2 == 0)
  {
    BOOL v4 = [SQLiteStatement alloc];
    uint64_t v5 = sub_100012AE8((id *)&v4->super.isa, ppStmt, *(void **)(a1 + 32));
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned __int8 v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  else
  {
    sqlite3_finalize(ppStmt);
  }
  return v2;
}

uint64_t sub_100012A84(uint64_t a1)
{
  return sub_100012A8C(*(void *)(a1 + 32));
}

uint64_t sub_100012A8C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(sqlite3_stmt **)(result + 16);
    if (v1)
    {
      return sqlite3_step(v1);
    }
    else
    {
      +[NSException raise:NSInternalInconsistencyException format:@"Statement already finalized"];
      return 21;
    }
  }
  return result;
}

id *sub_100012AE8(id *a1, void *a2, void *a3)
{
  id v6 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)SQLiteStatement;
    unsigned __int8 v7 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v7;
    if (v7)
    {
      objc_storeStrong(v7 + 1, a3);
      a1[2] = a2;
      objc_storeStrong(a1 + 3, a1);
    }
  }

  return a1;
}

BOOL sub_100012B74(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  BOOL v2 = 1;
  if (!*(void *)(a1 + 16))
  {
    db = 0;
    char v3 = 1;
    while (1)
    {
      int v4 = sub_100307994(&db, *(void **)(a1 + 56));
      BOOL v2 = v4 == 0;
      if (!v4) {
        break;
      }
      if (v4 <= 0x1Au && ((1 << v4) & 0x4000C02) != 0)
      {
        char v6 = v3 & sub_10025ECCC(a1);
        char v3 = 0;
        if (v6) {
          continue;
        }
      }
      return v2;
    }
    unsigned __int8 v7 = db;
    *(void *)(a1 + 16) = db;
    sqlite3_create_function(v7, "timestamp", 0, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_10025F008, 0, 0);
  }
  return v2;
}

void sub_100012C5C(uint64_t a1)
{
  uint64_t v2 = sub_100012CAC(*(void *)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100012CAC(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v2 = sub_100012DD8(a1, a2);
    objc_opt_class();
    uint64_t v3 = sub_100012D7C(v2);

    id v4 = &__NSDictionary0__struct;
    if (v3)
    {
      uint64_t v5 = [v3 objectForKeyedSubscript:@"badges"];
      objc_opt_class();
      char v6 = sub_100012D7C(v5);

      if (v6) {
        unsigned __int8 v7 = v6;
      }
      else {
        unsigned __int8 v7 = &__NSDictionary0__struct;
      }
      id v4 = v7;
    }
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_100012D7C(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

_UNKNOWN **sub_100012DD8(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_1000132F4();
  if (v3)
  {
    id v4 = [objc_alloc((Class)NSData) initWithContentsOfFile:v3];
    if (v4)
    {
      uint64_t v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        id v17 = (id)objc_opt_class();
        __int16 v18 = 2114;
        id v19 = v2;
        id v6 = v17;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Load cached badge metadata", buf, 0x16u);
      }
      id v15 = 0;
      unsigned __int8 v7 = +[NSPropertyListSerialization propertyListWithData:v4 options:0 format:0 error:&v15];
      id v8 = v15;
      objc_opt_class();
      objc_super v9 = sub_100012D7C(v7);

      if (v8)
      {
        int v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          id v13 = objc_opt_class();
          *(_DWORD *)buf = 138543874;
          id v17 = v13;
          __int16 v18 = 2114;
          id v19 = v2;
          __int16 v20 = 2114;
          id v21 = v8;
          id v14 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Failed to deserialize the cached badging data. Error: %{public}@", buf, 0x20u);
        }
      }
      if (v9) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = &off_10054E1D0;
      }
    }
    else
    {
      uint64_t v11 = (_UNKNOWN **)&__NSDictionary0__struct;
    }
  }
  else
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      id v17 = (id)objc_opt_class();
      __int16 v18 = 2114;
      id v19 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Unable to generate the path for badge metadata", buf, 0x16u);
    }
    uint64_t v11 = 0;
  }

  return v11;
}

id sub_100013084(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 0:
      id v4 = sub_100013350();
      uint64_t v5 = v4;
      CFStringRef v6 = @"SubscriptionEntitlements_v2.plist";
      goto LABEL_13;
    case 1:
      id v4 = sub_100013350();
      uint64_t v5 = v4;
      CFStringRef v6 = @"SubscriptionEntitlementsAppStore_v2.plist";
      goto LABEL_13;
    case 2:
      id v4 = sub_100013350();
      uint64_t v5 = v4;
      CFStringRef v6 = @"SubscriptionEntitlementsActivity_v2.plist";
      goto LABEL_13;
    case 3:
      id v4 = sub_100013350();
      uint64_t v5 = v4;
      CFStringRef v6 = @"SubscriptionEntitlementsMusic_v2.plist";
      goto LABEL_13;
    case 4:
      id v4 = sub_100013350();
      uint64_t v5 = v4;
      CFStringRef v6 = @"SubscriptionEntitlementsTV_v2.plist";
      goto LABEL_13;
    case 5:
      id v4 = sub_100013350();
      uint64_t v5 = v4;
      CFStringRef v6 = @"SubscriptionEntitlementsiCloud_v2.plist";
      goto LABEL_13;
    case 6:
      id v4 = sub_100013350();
      uint64_t v5 = v4;
      CFStringRef v6 = @"SubscriptionEntitlementsPodcast_v2.plist";
      goto LABEL_13;
    case 7:
      id v4 = sub_100013350();
      uint64_t v5 = v4;
      CFStringRef v6 = @"SubscriptionEntitlementsHWBundle_v2.plist";
LABEL_13:
      id v8 = [v4 stringByAppendingPathComponent:v6];

      if (!v8) {
        goto LABEL_14;
      }
      goto LABEL_17;
    default:
      unsigned __int8 v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v11 = 138412290;
        id v12 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Unable to determine the path", (uint8_t *)&v11, 0xCu);
      }

LABEL_14:
      objc_super v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v11 = 138412290;
        id v12 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@] Path to cached entitlement is nil", (uint8_t *)&v11, 0xCu);
      }

      id v8 = 0;
LABEL_17:

      return v8;
  }
}

id sub_1000132F4()
{
  uint64_t v0 = sub_100013350();
  id v1 = [v0 stringByAppendingPathComponent:@"badging.plist"];

  return v1;
}

id sub_100013350()
{
  uint64_t v0 = self;
  return sub_100013380(v0, @"com.apple.appstored");
}

id sub_100013380(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = v2;
  uint64_t v4 = self;
  uint64_t v5 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  CFStringRef v6 = [v5 firstObject];

  if (v6)
  {
    unsigned __int8 v7 = +[NSURL fileURLWithPath:v6];
    id v8 = sub_100013518(v4, v7, v3);
  }
  else
  {
    objc_super v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      int v12 = 134218498;
      uint64_t v13 = 13;
      __int16 v14 = 2048;
      uint64_t v15 = 1;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Unable to determine path for directory: %ld domain mask: %lu with path component: %{public}@", (uint8_t *)&v12, 0x20u);
    }

    id v8 = 0;
  }

  int v10 = [v8 path];

  return v10;
}

id sub_100013518(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  CFStringRef v6 = [v5 URLByAppendingPathComponent:v4];

  if (v6)
  {
    unsigned __int8 v7 = +[NSFileManager defaultManager];
    id v12 = 0;
    unsigned __int8 v8 = [v7 createDirectoryAtURL:v6 withIntermediateDirectories:1 attributes:0 error:&v12];
    id v9 = v12;

    if ((v8 & 1) == 0)
    {
      int v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543618;
        __int16 v14 = v6;
        __int16 v15 = 2114;
        id v16 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to create directory: %{public}@ error: %{public}@", buf, 0x16u);
      }

      CFStringRef v6 = 0;
    }
  }
  else
  {
    id v9 = 0;
  }

  return v6;
}

id sub_100013680(void *a1, unint64_t a2)
{
  if (a1)
  {
    id v4 = objc_alloc_init(_TtC9appstored6LogKey);
    id v5 = sub_100013CBC(a1, a2, v4);
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

void *sub_100013AF8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v10 = 0;
    int v11 = &v10;
    uint64_t v12 = 0x3032000000;
    uint64_t v13 = sub_100017F08;
    __int16 v14 = sub_100017B40;
    id v15 = 0;
    id v5 = a1[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100012C5C;
    block[3] = &unk_100521288;
    id v9 = &v10;
    void block[4] = a1;
    id v8 = v3;
    dispatch_sync(v5, block);
    a1 = (id)v11[5];

    _Block_object_dispose(&v10, 8);
  }

  return a1;
}

id sub_100013C18()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10023BAD0;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0B90 != -1) {
    dispatch_once(&qword_1005B0B90, block);
  }
  uint64_t v0 = (void *)qword_1005B0B88;
  return v0;
}

id sub_100013CBC(void *a1, unint64_t a2, void *a3)
{
  if (a1)
  {
    if (a2 > 7) {
      CFStringRef v4 = @"Unknown";
    }
    else {
      CFStringRef v4 = *(&off_100528510 + a2);
    }
    a1 = [a3 prependingCategory:v4];
    uint64_t v3 = vars8;
  }
  return a1;
}

uint64_t sub_100013E9C(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 200), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_1000140A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000140C0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) allValues];
  uint64_t v3 = [v2 filteredArrayUsingPredicate:*(void *)(a1 + 40)];

  CFStringRef v4 = objc_opt_new();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        int v11 = *(void **)(*(void *)(a1 + 32) + 40);
        uint64_t v12 = [v10 bundleID];
        id Property = [v11 objectForKeyedSubscript:v12];
        id v15 = Property;
        if (Property) {
          id Property = objc_getProperty(Property, v14, 72, 1);
        }
        id v16 = Property;

        if ([v16 reportRemotely])
        {
          id v17 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            uint64_t v27 = v10;
            _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Skipping app for catalog query since it is reporting remotely: %{public}@", buf, 0xCu);
          }
        }
        else
        {
          id v17 = [v10 copy];
          [v4 addObject:v17];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v7);
  }

  id v18 = [*(id *)(a1 + 48) count];
  uint64_t v19 = *(void *)(a1 + 56);
  if (v18)
  {
    __int16 v20 = +[NSPredicate predicateWithFormat:@"NOT bundleID IN %@", *(void *)(a1 + 48)];
    id v21 = [v4 filteredArrayUsingPredicate:v20];
    (*(void (**)(uint64_t, void *, void))(v19 + 16))(v19, v21, 0);
  }
  else
  {
    (*(void (**)(void, void *, void))(v19 + 16))(*(void *)(a1 + 56), v4, 0);
  }
}

void sub_100014350(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v10 = v5;
  if (a2)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:a2];
    id v6 = *(void **)(a1 + 40);
    id v7 = [*(id *)(a1 + 32) valueForKey:@"bundleID"];
    [v6 addObjectsFromArray:v7];
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v9 = v5;
    id v7 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v9;
  }
}

id sub_1000143E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      int v11 = [*(id *)(a1 + 8) resultsMatchingPredicate:v5 error:a3];
      goto LABEL_24;
    }
    id v6 = v5;
    id v7 = [v6 leftExpression];
    id v8 = [v7 expressionType];

    if (v8 == (id)3)
    {
      id v9 = [v6 leftExpression];
      uint64_t v10 = [v6 rightExpression];
    }
    else
    {
      uint64_t v12 = [v6 rightExpression];
      id v13 = [v12 expressionType];

      if (v13 != (id)3)
      {
        int v11 = [*(id *)(a1 + 8) resultsMatchingPredicate:v6 error:a3];
        __int16 v14 = 0;
        id v9 = 0;
        if (v11) {
          goto LABEL_23;
        }
LABEL_9:
        id v15 = sub_1000155F0(v14);
        if (![v15 count]
          || (id v16 = [v6 predicateOperatorType], v16 != (id)4) && v16 != (id)10)
        {

LABEL_22:
          int v11 = [*(id *)(a1 + 8) resultsMatchingPredicate:v6 error:a3];
          goto LABEL_23;
        }
        sub_100014D3C(v9);
        id v17 = (id)objc_claimAutoreleasedReturnValue();
        id v18 = v15;
        if ([v17 isEqualToString:@"bundleID"])
        {
          uint64_t v19 = [*(id *)(a1 + 8) resultsWithBundleIDs:v18 error:a3];
        }
        else
        {
          if (![v17 isEqualToString:@"storeItemID"])
          {
            int v11 = 0;
LABEL_21:

            if (!v11) {
              goto LABEL_22;
            }
LABEL_23:

            goto LABEL_24;
          }
          uint64_t v19 = [*(id *)(a1 + 8) resultsWithItemIDs:v18 error:a3];
        }
        int v11 = (void *)v19;
        goto LABEL_21;
      }
      id v9 = [v6 rightExpression];
      uint64_t v10 = [v6 leftExpression];
    }
    __int16 v14 = (void *)v10;
    goto LABEL_9;
  }
  int v11 = 0;
LABEL_24:

  return v11;
}

void sub_10001462C(uint64_t a1)
{
  uint64_t v47 = 0;
  __int16 v48 = &v47;
  uint64_t v49 = 0x3032000000;
  id v50 = sub_100018398;
  __int16 v51 = sub_100017D88;
  id v52 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v37 = a1;
  uint64_t v3 = *(void **)(a1 + 40);
  id obj = 0;
  BOOL v4 = sub_10000FCE4(v2, v3, &obj);
  objc_storeStrong(&v52, obj);
  if (v4)
  {
    [*(id *)(v37 + 40) allowEvaluation];
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = *(void **)(v37 + 48);
      id v7 = [v6 processInfo];
      id v8 = [v7 bundleIdentifier];
      id v9 = [*(id *)(v37 + 40) predicateFormat];
      *(_DWORD *)buf = 138543874;
      id v55 = v6;
      __int16 v56 = 2114;
      id v57 = v8;
      __int16 v58 = 2114;
      unint64_t v59 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ Starting query for %{public}@: %{public}@", buf, 0x20u);
    }
    uint64_t v10 = +[NSMutableArray array];
    uint64_t v36 = +[NSMutableSet set];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v35 = *(id *)(*(void *)(v37 + 32) + 16);
    id v11 = [v35 countByEnumeratingWithState:&v42 objects:v53 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v43;
      while (2)
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v43 != v12) {
            objc_enumerationMutation(v35);
          }
          __int16 v14 = *(void **)(*((void *)&v42 + 1) + 8 * i);
          uint64_t v16 = *(void *)(v37 + 40);
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3221225472;
          v38[2] = sub_100014350;
          v38[3] = &unk_10052BA10;
          id v17 = v10;
          id v39 = v17;
          id v40 = v36;
          id v41 = &v47;
          [v14 executeQuery:v16 excludingBundleIDs:v40 usingBlock:v38];

          if (v48[5])
          {

            id v17 = 0;
            goto LABEL_18;
          }
        }
        id v11 = [v35 countByEnumeratingWithState:&v42 objects:v53 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
    else
    {
      id v17 = v10;
    }
LABEL_18:

    if ([v17 count])
    {
      if ([v17 count] == (id)1)
      {
        uint64_t v19 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v20 = *(void **)(v37 + 48);
          id v21 = [v17 firstObject];
          *(_DWORD *)buf = 138543618;
          id v55 = v20;
          __int16 v56 = 2114;
          id v57 = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}@ Completed with 1 result: %{public}@", buf, 0x16u);
        }
        goto LABEL_27;
      }
      uint64_t v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        char v26 = *(void **)(v37 + 48);
        id v27 = [v17 count];
        *(_DWORD *)buf = 138543618;
        id v55 = v26;
        __int16 v56 = 2048;
        id v57 = v27;
        long long v23 = "%{public}@ Completed with %lu result(s)";
        long long v24 = v19;
        uint32_t v25 = 22;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        long long v22 = *(void **)(v37 + 48);
        *(_DWORD *)buf = 138543362;
        id v55 = v22;
        long long v23 = "%{public}@ Completed with no results";
        long long v24 = v19;
        uint32_t v25 = 12;
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);
      }
    }
LABEL_27:

    uint64_t v28 = *(void *)(v37 + 56);
    id v29 = [v17 copy];
    (*(void (**)(uint64_t, id, uint64_t))(v28 + 16))(v28, v29, v48[5]);

    goto LABEL_28;
  }
  id v18 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    double v30 = *(void **)(v37 + 48);
    id v31 = [v30 processInfo];
    id v32 = [v31 bundleIdentifier];
    id v33 = [*(id *)(v37 + 40) predicateFormat];
    uint64_t v34 = v48[5];
    *(_DWORD *)buf = 138544130;
    id v55 = v30;
    __int16 v56 = 2114;
    id v57 = v32;
    __int16 v58 = 2114;
    unint64_t v59 = v33;
    __int16 v60 = 2114;
    uint64_t v61 = v34;
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@ Query failed for %{public}@: %{public}@ error: %{public}@", buf, 0x2Au);
  }
  (*(void (**)(void))(*(void *)(v37 + 56) + 16))();
LABEL_28:
  _Block_object_dispose(&v47, 8);
}

void sub_100014C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

id sub_100014D3C(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    if ([a1 expressionType] == (id)3)
    {
      a1 = [v2 keyPath];
    }
    else
    {
      a1 = 0;
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100014F54(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  uint64_t v10 = a5;
  if (a1)
  {
    if (!v9)
    {
      NSErrorUserInfoKey v22 = NSDebugDescriptionErrorKey;
      CFStringRef v23 = @"Service is not available.";
      id v15 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      uint64_t v16 = +[NSError errorWithDomain:ASDErrorDomain code:512 userInfo:v15];
      v10[2](v10, 0, v16);

      goto LABEL_9;
    }
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = a3;
    id v13 = a4;
    if (v11)
    {
      if (sub_100015188(v11, a3, a4))
      {
        __int16 v14 = v9[2](v9);
        ((void (**)(id, void *, void *))v10)[2](v10, v14, 0);

        goto LABEL_9;
      }
    }
    else
    {
      id v17 = v13;
    }
    NSErrorUserInfoKey v20 = NSDebugDescriptionErrorKey;
    CFStringRef v21 = @"Not entitled for this service.";
    id v18 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    uint64_t v19 = +[NSError errorWithDomain:ASDErrorDomain code:505 userInfo:v18];
    v10[2](v10, 0, v19);
  }
LABEL_9:
}

void sub_10001516C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100015188(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    unsigned __int8 v6 = [*(id *)(a1 + 8) containsObject:a2];
    if (a3) {
      char v7 = v6;
    }
    else {
      char v7 = 1;
    }
    if ((v7 & 1) == 0) {
      unsigned __int8 v6 = sub_100015238((uint64_t)XPCServiceEntitlements, a3, *(__SecTask **)(v5 + 16), *(_DWORD *)(v5 + 24));
    }
    uint64_t v5 = (v6 & 1) != 0
      || sub_100015238((uint64_t)XPCServiceEntitlements, @"com.apple.itunesstored.private", *(__SecTask **)(v5 + 16), *(_DWORD *)(v5 + 24));
  }

  return v5;
}

void sub_100015224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100015238(uint64_t a1, void *a2, __SecTask *a3, int a4)
{
  unsigned __int8 v6 = a2;
  self;
  if (!a3)
  {
    uint64_t v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      id v21 = (id)objc_opt_class();
      __int16 v22 = 2112;
      CFStringRef v23 = v6;
      __int16 v24 = 1024;
      int v25 = a4;
      id v18 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@]: No task for entitlement: %@ pid: %i", buf, 0x1Cu);
    }
    goto LABEL_12;
  }
  CFErrorRef error = 0;
  CFTypeRef v7 = SecTaskCopyValueForEntitlement(a3, v6, &error);
  if (error)
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = objc_opt_class();
      *(_DWORD *)buf = 138413058;
      id v21 = v16;
      __int16 v22 = 2112;
      CFStringRef v23 = v6;
      __int16 v24 = 1024;
      int v25 = a4;
      __int16 v26 = 2112;
      CFErrorRef v27 = error;
      id v17 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@]: Unable to get entitlements: %@ for pid: %i error: %@", buf, 0x26u);
    }
  }
  if (!v7)
  {
LABEL_12:
    BOOL v10 = 0;
    goto LABEL_17;
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  BOOL v10 = TypeID == CFGetTypeID(v7) && CFBooleanGetValue((CFBooleanRef)v7) != 0;
  id v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = objc_opt_class();
    *(_DWORD *)buf = 138413058;
    id v21 = v13;
    __int16 v22 = 2112;
    CFStringRef v23 = v6;
    __int16 v24 = 1024;
    int v25 = a4;
    __int16 v26 = 1024;
    LODWORD(v27) = v10;
    id v14 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@]: We have the entitlement: %@ for pid: %i result: %d", buf, 0x22u);
  }
  CFRelease(v7);
LABEL_17:

  return v10;
}

ASDUpdatesServiceProtocol *__cdecl sub_1000154C4(id a1)
{
  return (ASDUpdatesServiceProtocol *)sub_100015528();
}

ASDAppStoreServiceProtocol *__cdecl sub_1000154D0(id a1)
{
  return (ASDAppStoreServiceProtocol *)sub_100015580();
}

uint64_t sub_1000154DC(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 568), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

id sub_100015528()
{
  self;
  if (qword_1005B11B0 != -1) {
    dispatch_once(&qword_1005B11B0, &stru_10052BD68);
  }
  uint64_t v0 = (void *)qword_1005B11A8;
  return v0;
}

id sub_100015580()
{
  self;
  if (qword_1005B0BF0 != -1) {
    dispatch_once(&qword_1005B0BF0, &stru_100524118);
  }
  uint64_t v0 = (void *)qword_1005B0BE8;
  return v0;
}

ASDIAPHistoryServiceProtocol *__cdecl sub_1000155D8(id a1)
{
  return (ASDIAPHistoryServiceProtocol *)sub_100015928();
}

ASDAppLibraryServiceProtocol *__cdecl sub_1000155E4(id a1)
{
  return (ASDAppLibraryServiceProtocol *)sub_1000158D0();
}

id sub_1000155F0(void *a1)
{
  if (!a1 || [a1 expressionType]) {
    goto LABEL_3;
  }
  uint64_t v3 = [a1 constantValue];
  if ([v3 conformsToProtocol:&OBJC_PROTOCOL___NSFastEnumeration])
  {
    BOOL v4 = +[NSMutableArray array];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v11 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend(v4, "addObject:", *(void *)(*((void *)&v11 + 1) + 8 * i), (void)v11);
        }
        id v7 = [v5 countByEnumeratingWithState:&v11 objects:v16 count:16];
      }
      while (v7);
    }

    id v2 = [v4 copy];
  }
  else
  {
    if (!v3)
    {
LABEL_3:
      id v2 = 0;
      goto LABEL_16;
    }
    id v15 = v3;
    id v2 = +[NSArray arrayWithObjects:&v15 count:1];
  }

LABEL_16:
  return v2;
}

void *sub_10001584C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)LibraryLazyResultsEnumerator;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      id v6 = [v5 copy];
      id v7 = (void *)a1[1];
      a1[1] = v6;

      a1[3] = a2;
    }
  }

  return a1;
}

id sub_1000158D0()
{
  self;
  if (qword_1005B1130 != -1) {
    dispatch_once(&qword_1005B1130, &stru_10052B9E8);
  }
  uint64_t v0 = (void *)qword_1005B1128;
  return v0;
}

id sub_100015928()
{
  self;
  if (qword_1005B0D20 != -1) {
    dispatch_once(&qword_1005B0D20, &stru_1005251A8);
  }
  uint64_t v0 = (void *)qword_1005B0D18;
  return v0;
}

id sub_1000159BC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = sub_100016788();
    id v2 = [v1 processInfo];
    uint64_t v3 = [v2 bundleIdentifier];
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v3;
}

void sub_100015A88(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_100015BF8();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  sub_100015AEC((uint64_t)v3, v2);
}

void sub_100015AEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000124B8;
    v6[3] = &unk_1005218C0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_sync(v5, v6);
  }
}

void sub_100015B94(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_100015BF8();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  sub_100015C50((uint64_t)v3, v2);
}

id sub_100015BF8()
{
  self;
  if (qword_1005B0FD8 != -1) {
    dispatch_once(&qword_1005B0FD8, &stru_100528F20);
  }
  uint64_t v0 = (void *)qword_1005B0FD0;
  return v0;
}

void sub_100015C50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_time_t v4 = dispatch_time(0, *(void *)(a1 + 24));
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10034AA10;
    v6[3] = &unk_1005218C0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_after(v4, v5, v6);
  }
}

char *sub_100015E10(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = sub_10001644C((uint64_t *)&unk_1005A6330);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  BOOL v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  long long v13 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v26 - v14;
  sub_100016588(a1, (uint64_t)v5, (uint64_t *)&unk_1005A6330);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100016714((uint64_t)v5, (uint64_t *)&unk_1005A6330);
    id v16 = objc_allocWithZone(ObjectType);
    id v17 = sub_100016180(0, 0xE000000000000000, (uint64_t)"/", 1, 2, 0, (void *)0xE000000000000000, 0x3F3F3F3F3F3F3F3FLL, (void *)0xE800000000000000, 0);
    sub_100016714(a1, (uint64_t *)&unk_1005A6330);
    swift_getObjectType();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v5, v6);
    swift_getObjectType();
    uint64_t v26 = a1;
    id v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v18(v13, v15, v6);
    v18(v10, v13, v6);
    unsigned int v27 = bswap32(UUID.uuid.getter());
    sub_100016534();
    uint64_t v19 = String.init<A>(_:radix:uppercase:)();
    id v21 = v20;
    id v22 = objc_allocWithZone(ObjectType);
    CFStringRef v23 = sub_100016180(0, 0xE000000000000000, (uint64_t)"/", 1, 2, 0, (void *)0xE000000000000000, v19, v21, 0);
    swift_bridgeObjectRelease();
    id v17 = v23;
    sub_1000165EC();

    __int16 v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v10, v6);
    v24(v13, v6);
    sub_100016714(v26, (uint64_t *)&unk_1005A6330);
    v24(v15, v6);
  }
  swift_deallocPartialClassInstance();
  return v17;
}

char *sub_100016180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v10[OBJC_IVAR____TtC9appstored6LogKey_activity] = 0;
  uint64_t v14 = &v10[OBJC_IVAR____TtC9appstored6LogKey_activityState];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  id v39 = sub_1000FC4C8;
  uint64_t v40 = 0;
  id v41 = sub_1000FBADC;
  uint64_t v42 = 0;
  id v15 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001644C(&qword_1005A6D00);
  sub_100016490(&qword_1005A6D08, &qword_1005A6D00);
  sub_1000164E0();
  uint64_t v16 = Sequence<>.joined(separator:)();
  unint64_t v18 = v17;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  v19._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = a6;
  v20._object = a7;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = a8;
  v21._object = a9;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v22 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v22) {
    uint64_t v23 = 47;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v22) {
    unint64_t v24 = 0xE100000000000000;
  }
  else {
    unint64_t v24 = 0xE000000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = v16;
  v26._object = (void *)v18;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = v38;
  uint64_t v28 = &v15[OBJC_IVAR____TtC9appstored6LogKey_value];
  *(void *)uint64_t v28 = v37;
  *((void *)v28 + 1) = v27;
  *(void *)&v15[OBJC_IVAR____TtC9appstored6LogKey_parentActivity] = a10;
  swift_unknownObjectRetain();

  v36.receiver = v15;
  v36.super_class = ObjectType;
  id v29 = (char *)objc_msgSendSuper2(&v36, "init");
  double v30 = v29;
  if (*(void *)&v29[OBJC_IVAR____TtC9appstored6LogKey_parentActivity])
  {
    id v31 = v29;
    sub_1000165EC();
  }
  return v30;
}

uint64_t sub_10001644C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100016490(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002E5A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000164E0()
{
  unint64_t result = qword_1005A6D10;
  if (!qword_1005A6D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A6D10);
  }
  return result;
}

unint64_t sub_100016534()
{
  unint64_t result = qword_1005A4B48;
  if (!qword_1005A4B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4B48);
  }
  return result;
}

uint64_t sub_100016588(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10001644C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

char *sub_1000165EC()
{
  uint64_t v1 = OBJC_IVAR____TtC9appstored6LogKey_activity;
  if (*(void *)&v0[OBJC_IVAR____TtC9appstored6LogKey_activity])
  {
    id v2 = v0;
  }
  else
  {
    if (*(void *)&v0[OBJC_IVAR____TtC9appstored6LogKey_parentActivity])
    {
      uint64_t v3 = *(NSObject **)&v0[OBJC_IVAR____TtC9appstored6LogKey_parentActivity];
    }
    else
    {
      if (qword_1005A30B0 != -1) {
        swift_once();
      }
      uint64_t v3 = qword_1005A6B90;
      swift_unknownObjectRetain();
    }
    swift_unknownObjectRetain();
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "appstored/ad-hoc", v3, OS_ACTIVITY_FLAG_DEFAULT);
    swift_unknownObjectRelease();
    *(void *)&v0[v1] = v4;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v5 = (os_activity_scope_state_s *)&v0[OBJC_IVAR____TtC9appstored6LogKey_activityState];
    swift_beginAccess();
    os_activity_scope_enter(v4, v5);
    swift_endAccess();
    uint64_t v6 = v0;
    swift_unknownObjectRelease();
  }
  return v0;
}

uint64_t sub_100016714(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10001644C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void **sub_100016788()
{
  self;
  uint64_t v0 = sub_1000167FC();
  if (v0) {
    uint64_t v1 = sub_100416650((void **)[XPCRequestToken alloc], v0, 0);
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

NSObject *sub_1000167FC()
{
  self;
  uint64_t v0 = +[NSXPCConnection currentConnection];
  uint64_t v1 = v0;
  if (v0)
  {
    id v2 = [v0 userInfo];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v3 = [v2 objectForKeyedSubscript:@"XPCServiceClientUserInfoKey"];
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = v4;
LABEL_14:

        goto LABEL_15;
      }
      uint64_t v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v8[0] = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "(XPCServiceClient) There is no service client - call was probably racing the teardown of the connection", (uint8_t *)v8, 2u);
      }

      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "(XPCServiceClient) There is no connection context - tokens can only be created from service client connections", buf, 2u);
      }
    }
    uint64_t v5 = 0;
    goto LABEL_14;
  }
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)BOOL v10 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "(XPCServiceClient) There is no current connection - tokens can only be created at the point an XPC call enters", v10, 2u);
  }
  uint64_t v5 = 0;
LABEL_15:

  return v5;
}

id sub_1000169A4()
{
  self;
  if (qword_1005B0D00 != -1) {
    dispatch_once(&qword_1005B0D00, &stru_100525168);
  }
  uint64_t v0 = (void *)qword_1005B0CF8;
  return v0;
}

id sub_1000169FC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v3 = +[NSSortDescriptor sortDescriptorWithKey:@"resultComplexity" ascending:1];
  unint64_t v17 = v3;
  uint64_t v4 = +[NSArray arrayWithObjects:&v17 count:1];

  uint64_t v5 = [*(id *)(a1 + 32) sortedArrayUsingDescriptors:v4];
  if ([v5 count])
  {
    uint64_t v6 = [v5 objectAtIndexedSubscript:0];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v6);
          }
          [v2 addObject:*(void *)(*((void *)&v12 + 1) + 8 * i)];
        }
        id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v8);
    }
  }
  if (*(void *)(a1 + 48) >= 2uLL) {
    [v2 filterUsingPredicate:*(void *)(a1 + 40)];
  }

  return v2;
}

id sub_100016DC4(uint64_t a1, void *a2)
{
  id v2 = sub_100016E30(*(void *)(a1 + 32), a2);
  if (v2) {
    sub_100017560((uint64_t)Optional, v2);
  }
  else {
  uint64_t v3 = sub_10038E38C();
  }

  return v3;
}

id sub_100016E30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && (sub_1000173A0(v3) & 1) == 0)
  {
    uint64_t v6 = [v4 isBeta];
    if (v4) {
      uint64_t v7 = 2 * ([v4 applicationFamilyID] != 0);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7 | v6;
    if ([v4 isPlaceholder]) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 4;
    }
    unsigned int v10 = [v4 isLaunchProhibited];
    uint64_t v11 = 16;
    if (!v10) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v8 | v9 | v11;
    if ([v4 isArcadeApp]) {
      uint64_t v13 = 32;
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v14 = [v4 isPlaceholder];
    uint64_t v15 = 128;
    if (!v14) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = v12 | v13 | v15;
    id v17 = objc_alloc((Class)ASDApp);
    unint64_t v18 = [v4 bundleIdentifier];
    id v5 = [v17 initWithBundleID:v18];

    Swift::String v19 = [v4 localizedName];
    [v5 setLocalizedName:v19];

    Swift::String v20 = [v4 iTunesMetadata];
    id v21 = [v20 storeItemIdentifier];
    if (v21)
    {
      id v22 = v21;
    }
    else
    {
      uint64_t v23 = *(void **)(a1 + 48);
      unint64_t v24 = [v4 bundleIdentifier];
      unint64_t v25 = [v23 objectForKeyedSubscript:v24];
      id v22 = [v25 unsignedLongLongValue];

      if (!v22)
      {
LABEL_34:
        objc_super v36 = [v4 appClipMetadata];

        if (v36) {
          uint64_t v37 = v16 | 0x800;
        }
        else {
          uint64_t v37 = v16;
        }
        [v5 setStatus:v37];
        [v5 setExtensions:sub_100017410(v4)];
        if ([v5 isInstalled])
        {
          uint64_t v38 = [v4 URL];
          id v39 = [v38 path];
          [v5 setBundlePath:v39];

          uint64_t v40 = [v4 executableURL];
          id v41 = [v40 path];
          [v5 setExecutablePath:v41];
        }
        else
        {
          uint64_t v42 = *(void **)(a1 + 32);
          uint64_t v40 = [v4 bundleIdentifier];
          id v41 = sub_1003893D8(v42, v40);
          [v5 setRemoteProgress:v41];
        }

        long long v43 = [v4 shortVersionString];
        [v5 setBundleShortVersion:v43];

        long long v44 = [v4 exactBundleVersion];
        [v5 setBundleVersion:v44];

        long long v45 = [v20 artistName];
        [v5 setArtistName:v45];

        if ([v20 storeFront])
        {
          __int16 v46 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v20 storeFront]);
          [v5 setStoreFront:v46];
        }
        else
        {
          [v5 setStoreFront:0];
        }

        goto LABEL_44;
      }
      v16 |= 0x200uLL;
    }
    [v5 setStoreItemID:v22];
    if ([v4 isBeta])
    {
      objc_msgSend(v5, "setStoreExternalVersionID:", objc_msgSend(v20, "betaVersionIdentifier"));
    }
    else
    {
      uint64_t v26 = v16 | 0x100;
      objc_msgSend(v5, "setStoreExternalVersionID:", objc_msgSend(v20, "versionIdentifier"));
      if ((v16 & 0x200) == 0)
      {
        id v27 = [v4 bundleIdentifier];
        uint64_t v28 = sub_1003893D8(*(void **)(a1 + 32), v27);

        if (v28)
        {
          id v29 = 0;
        }
        else
        {
          uint64_t v54 = 0;
          id v55 = &v54;
          uint64_t v56 = 0x3032000000;
          id v57 = sub_1000181E8;
          __int16 v58 = sub_100017CB0;
          id v59 = 0;
          double v30 = sub_10001A308();
          __int16 v48 = _NSConcreteStackBlock;
          uint64_t v49 = 3221225472;
          id v50 = sub_10032042C;
          __int16 v51 = &unk_100524060;
          uint64_t v53 = &v54;
          id v52 = v27;
          [v30 readUsingSession:&v48];

          id v29 = (id)v55[5];
          _Block_object_dispose(&v54, 8);
        }
        if (v29)
        {
          id v31 = +[AMSBuyParams buyParamsWithString:v29];
          id v32 = [v31 parameterForKey:AMSBuyParamPropertyAppExtVrsId];
          id v33 = v32;
          if (v32)
          {
            id v34 = [v32 longLongValue];
            if (v34 > [v20 versionIdentifier])
            {
              uint64_t v26 = v16 | 0x108;
              [v5 setUpdateBuyParams:v29];
            }
          }
        }
      }
      uint64_t v16 = v26;
    }
    id v35 = objc_msgSend(v20, "storeCohort", v48, v49, v50, v51);
    [v5 setStoreCohort:v35];

    goto LABEL_34;
  }
  id v5 = 0;
LABEL_44:

  return v5;
}

void sub_100017388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000173A0(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = [a1 iTunesMetadata];
  id v2 = [v1 distributorInfo];

  uint64_t v3 = [v2 distributorID];

  if (v3) {
    uint64_t v3 = [v2 distributorIsFirstPartyApple] ^ 1;
  }

  return v3;
}

uint64_t sub_100017410(void *a1)
{
  if (!a1) {
    return 0;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v1 = objc_msgSend(a1, "applicationExtensionRecords", 0);
  id v2 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = [*(id *)(*((void *)&v11 + 1) + 8 * i) extensionPointRecord];
        uint64_t v8 = [v7 name];
        unsigned int v9 = [v8 isEqualToString:@"com.apple.message-payload-provider"];

        if (v9) {
          uint64_t v4 = 1;
        }
      }
      id v3 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id sub_100017560(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = objc_opt_new();
  *(unsigned char *)(v3 + _Block_object_dispose(&a9, 8) = 1;
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  return (id)v3;
}

id sub_1000175C8(uint64_t a1)
{
  id v2 = +[LSApplicationRecord enumeratorWithOptions:0];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100016DC4;
  v6[3] = &unk_100528150;
  v6[4] = *(void *)(a1 + 32);
  uint64_t v3 = sub_100017698(v2, v6);
  uint64_t v4 = sub_100017780(v3, *(void **)(a1 + 40));

  return v4;
}

TransformEnumerator *sub_100017698(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = [TransformEnumerator alloc];
    id v5 = a1;
    id v6 = v3;
    if (v4)
    {
      v11.receiver = v4;
      v11.super_class = (Class)TransformEnumerator;
      uint64_t v7 = (TransformEnumerator *)objc_msgSendSuper2(&v11, "init");
      uint64_t v4 = v7;
      if (v7)
      {
        objc_storeStrong((id *)&v7->_enumerator, a1);
        id v8 = [v6 copy];
        id transform = v4->_transform;
        v4->_id transform = v8;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

FilterEnumerator *sub_100017780(void *a1, void *a2)
{
  if (a1)
  {
    id v4 = a2;
    id v5 = [FilterEnumerator alloc];
    id v6 = a1;
    id v7 = v4;
    if (v5)
    {
      v10.receiver = v5;
      v10.super_class = (Class)FilterEnumerator;
      id v8 = (FilterEnumerator *)objc_msgSendSuper2(&v10, "init");
      id v5 = v8;
      if (v8)
      {
        objc_storeStrong((id *)&v8->_enumerator, a1);
        objc_storeStrong((id *)&v5->_predicate, a2);
      }
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

uint64_t sub_100017878()
{
  return swift_release();
}

uint64_t sub_100017880()
{
  return swift_release();
}

uint64_t sub_100017888()
{
  return swift_release();
}

uint64_t sub_100017890()
{
  return swift_release();
}

uint64_t sub_100017898()
{
  return swift_release();
}

uint64_t sub_1000178A0()
{
  return swift_release();
}

uint64_t sub_1000178A8()
{
  return swift_release();
}

uint64_t sub_1000178B0()
{
  return swift_release();
}

uint64_t sub_1000178B8()
{
  return swift_release();
}

uint64_t sub_1000178C0()
{
  return swift_release();
}

uint64_t sub_1000178C8()
{
  return swift_release();
}

uint64_t sub_1000178D0()
{
  return swift_release();
}

uint64_t sub_1000178D8()
{
  return swift_release();
}

uint64_t sub_1000178E0()
{
  return swift_release();
}

uint64_t sub_1000178E8()
{
  return swift_release();
}

uint64_t sub_1000178F0()
{
  return swift_release();
}

uint64_t sub_1000178F8()
{
  return swift_release();
}

uint64_t sub_100017900()
{
  return swift_release();
}

uint64_t sub_100017908()
{
  return swift_release();
}

uint64_t sub_100017910()
{
  return swift_release();
}

uint64_t sub_100017918()
{
  return swift_release();
}

uint64_t sub_100017920()
{
  return swift_release();
}

uint64_t sub_100017928()
{
  return swift_release();
}

uint64_t sub_100017930()
{
  return swift_release();
}

uint64_t sub_100017938()
{
  return swift_release();
}

uint64_t sub_100017940(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017950(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017960(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017970(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017980(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017990(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000179A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000179B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000179C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000179D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000179E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000179F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

void sub_100017AD0(uint64_t a1)
{
}

void sub_100017AD8(uint64_t a1)
{
}

void sub_100017AE0(uint64_t a1)
{
}

void sub_100017AE8(uint64_t a1)
{
}

void sub_100017AF0(uint64_t a1)
{
}

void sub_100017AF8(uint64_t a1)
{
}

void sub_100017B00(uint64_t a1)
{
}

void sub_100017B08(uint64_t a1)
{
}

void sub_100017B10(uint64_t a1)
{
}

void sub_100017B18(uint64_t a1)
{
}

void sub_100017B20(uint64_t a1)
{
}

void sub_100017B28(uint64_t a1)
{
}

void sub_100017B30(uint64_t a1)
{
}

void sub_100017B38(uint64_t a1)
{
}

void sub_100017B40(uint64_t a1)
{
}

void sub_100017B48(uint64_t a1)
{
}

void sub_100017B50(uint64_t a1)
{
}

void sub_100017B58(uint64_t a1)
{
}

void sub_100017B60(uint64_t a1)
{
}

void sub_100017B68(uint64_t a1)
{
}

void sub_100017B70(uint64_t a1)
{
}

void sub_100017B78(uint64_t a1)
{
}

void sub_100017B80(uint64_t a1)
{
}

void sub_100017B88(uint64_t a1)
{
}

void sub_100017B90(uint64_t a1)
{
}

void sub_100017B98(uint64_t a1)
{
}

void sub_100017BA0(uint64_t a1)
{
}

void sub_100017BA8(uint64_t a1)
{
}

void sub_100017BB0(uint64_t a1)
{
}

void sub_100017BB8(uint64_t a1)
{
}

void sub_100017BC0(uint64_t a1)
{
}

void sub_100017BC8(uint64_t a1)
{
}

void sub_100017BD0(uint64_t a1)
{
}

void sub_100017BD8(uint64_t a1)
{
}

void sub_100017BE0(uint64_t a1)
{
}

void sub_100017BE8(uint64_t a1)
{
}

void sub_100017BF0(uint64_t a1)
{
}

void sub_100017BF8(uint64_t a1)
{
}

void sub_100017C00(uint64_t a1)
{
}

void sub_100017C08(uint64_t a1)
{
}

void sub_100017C10(uint64_t a1)
{
}

void sub_100017C18(uint64_t a1)
{
}

void sub_100017C20(uint64_t a1)
{
}

void sub_100017C28(uint64_t a1)
{
}

void sub_100017C30(uint64_t a1)
{
}

void sub_100017C38(uint64_t a1)
{
}

void sub_100017C40(uint64_t a1)
{
}

void sub_100017C48(uint64_t a1)
{
}

void sub_100017C50(uint64_t a1)
{
}

void sub_100017C58(uint64_t a1)
{
}

void sub_100017C60(uint64_t a1)
{
}

void sub_100017C68(uint64_t a1)
{
}

void sub_100017C70(uint64_t a1)
{
}

void sub_100017C78(uint64_t a1)
{
}

void sub_100017C80(uint64_t a1)
{
}

void sub_100017C88(uint64_t a1)
{
}

void sub_100017C90(uint64_t a1)
{
}

void sub_100017C98(uint64_t a1)
{
}

void sub_100017CA0(uint64_t a1)
{
}

void sub_100017CA8(uint64_t a1)
{
}

void sub_100017CB0(uint64_t a1)
{
}

void sub_100017CB8(uint64_t a1)
{
}

void sub_100017CC0(uint64_t a1)
{
}

void sub_100017CC8(uint64_t a1)
{
}

void sub_100017CD0(uint64_t a1)
{
}

void sub_100017CD8(uint64_t a1)
{
}

void sub_100017CE0(uint64_t a1)
{
}

void sub_100017CE8(uint64_t a1)
{
}

void sub_100017CF0(uint64_t a1)
{
}

void sub_100017CF8(uint64_t a1)
{
}

void sub_100017D00(uint64_t a1)
{
}

void sub_100017D08(uint64_t a1)
{
}

void sub_100017D10(uint64_t a1)
{
}

void sub_100017D18(uint64_t a1)
{
}

void sub_100017D20(uint64_t a1)
{
}

void sub_100017D28(uint64_t a1)
{
}

void sub_100017D30(uint64_t a1)
{
}

void sub_100017D38(uint64_t a1)
{
}

void sub_100017D40(uint64_t a1)
{
}

void sub_100017D48(uint64_t a1)
{
}

void sub_100017D50(uint64_t a1)
{
}

void sub_100017D58(uint64_t a1)
{
}

void sub_100017D60(uint64_t a1)
{
}

void sub_100017D68(uint64_t a1)
{
}

void sub_100017D70(uint64_t a1)
{
}

void sub_100017D78(uint64_t a1)
{
}

void sub_100017D80(uint64_t a1)
{
}

void sub_100017D88(uint64_t a1)
{
}

void sub_100017D90(uint64_t a1)
{
}

void sub_100017D98(uint64_t a1)
{
}

void sub_100017DA0(uint64_t a1)
{
}

void sub_100017DA8(uint64_t a1)
{
}

void sub_100017DB0(uint64_t a1)
{
}

void sub_100017DB8(uint64_t a1)
{
}

void sub_100017DC0(uint64_t a1)
{
}

void sub_100017DC8(uint64_t a1)
{
}

void sub_100017DD0(uint64_t a1)
{
}

void sub_100017DD8(uint64_t a1)
{
}

void sub_100017DE0(uint64_t a1)
{
}

void sub_100017DE8(uint64_t a1)
{
}

void sub_100017DF0(uint64_t a1)
{
}

void sub_100017DF8(uint64_t a1)
{
}

void sub_100017E00(uint64_t a1)
{
}

void sub_100017E08(uint64_t a1)
{
}

void sub_100017E10(uint64_t a1)
{
}

void sub_100017E18(uint64_t a1)
{
}

void sub_100017E20(uint64_t a1)
{
}

uint64_t sub_100017E28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017E38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017E48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017E58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017E68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017E78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017E88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017E98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017EA8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017EB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017EC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017ED8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017EE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017EF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017F98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017FA8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017FB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017FC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017FD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017FE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100017FF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018008(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018018(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018028(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018038(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018048(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018058(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018068(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018078(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018088(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018098(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000180A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000180B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000180C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000180D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000180E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000180F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018108(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018118(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018128(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018138(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018148(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018158(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018168(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018178(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018188(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018198(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000181A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000181B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000181C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000181D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000181E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000181F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018208(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018218(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018228(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018238(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018248(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018258(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018268(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018278(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018288(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018298(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000182A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000182B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000182C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000182D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000182E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000182F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018308(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018318(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018328(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018338(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018348(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018358(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018368(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018378(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018388(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018398(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000183A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000183B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000183C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000183D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000183E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000183F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018408(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018428(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018438(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018448(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018458(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018468(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018478(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018488(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018498(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000184A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000184B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000184C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

id sub_100018500(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
}

uint64_t sub_10001850C(uint64_t a1)
{
  uint64_t v2 = sqlite3_step(*(sqlite3_stmt **)(a1 + 48));
  if (v2 == 100) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  return v2;
}

uint64_t sub_10001856C(uint64_t a1)
{
  return 0;
}

ASDPurchaseHistoryServiceProtocol *__cdecl sub_100018594(id a1)
{
  return (ASDPurchaseHistoryServiceProtocol *)sub_10001A20C();
}

uint64_t sub_1000185A0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100018698(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000185A0;
  return v6(a1);
}

uint64_t sub_100018774(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = sub_1000184D8;
  id v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1005A6998 + dword_1005A6998);
  return v6(a1, v4);
}

uint64_t sub_10001882C(void *a1)
{
  return sub_100005378(0, a1[2], 0, a1);
}

Swift::Int sub_100018840(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  Swift::Int v72 = result;
  if (result < v3)
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1)
    {
LABEL_114:
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v75 = v1;
    if (v3 >= 2)
    {
      uint64_t v6 = v5 >> 1;
      sub_10001644C(&qword_1005A4EB0);
      uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v7 + 16) = v6;
      v70 = (void *)v7;
      __dst = (char *)(v7 + 32);
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    v70 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      if (v11 < 2) {
        goto LABEL_88;
      }
      goto LABEL_74;
    }
LABEL_11:
    Swift::Int v9 = 0;
    v69 = v2;
    uint64_t v10 = *v2;
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v71 = v3;
    do
    {
      Swift::Int v12 = v9 + 1;
      if (v9 + 1 >= v3 || (Swift::Int v12 = v9 + 2, v13 = v3, v9 + 2 >= v3))
      {
        if (v12 >= v3)
        {
          Swift::Int v13 = v12;
        }
        else
        {
          if (__OFSUB__(v12, v9)) {
            goto LABEL_109;
          }
          Swift::Int v13 = v12;
          if (v12 - v9 < v72)
          {
            if (__OFADD__(v9, v72)) {
              goto LABEL_110;
            }
            Swift::Int v13 = v9 + v72 >= v3 ? v3 : v9 + v72;
            if (v13 < v9)
            {
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
              goto LABEL_114;
            }
          }
        }
      }
      if (v13 < v9) {
        goto LABEL_104;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_1000897DC(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v15 = *((void *)v8 + 2);
      unint64_t v14 = *((void *)v8 + 3);
      unint64_t v11 = v15 + 1;
      Swift::Int v73 = v13;
      if (v15 >= v14 >> 1) {
        uint64_t v8 = sub_1000897DC((char *)(v14 > 1), v15 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v11;
      uint64_t v16 = v8 + 32;
      id v17 = &v8[16 * v15 + 32];
      *(void *)id v17 = v9;
      *((void *)v17 + 1) = v13;
      if (v15)
      {
        while (1)
        {
          unint64_t v18 = v11 - 1;
          if (v11 >= 4)
          {
            uint64_t v23 = &v16[16 * v11];
            uint64_t v24 = *((void *)v23 - 8);
            uint64_t v25 = *((void *)v23 - 7);
            BOOL v29 = __OFSUB__(v25, v24);
            uint64_t v26 = v25 - v24;
            if (v29) {
              goto LABEL_93;
            }
            uint64_t v28 = *((void *)v23 - 6);
            uint64_t v27 = *((void *)v23 - 5);
            BOOL v29 = __OFSUB__(v27, v28);
            uint64_t v21 = v27 - v28;
            char v22 = v29;
            if (v29) {
              goto LABEL_94;
            }
            unint64_t v30 = v11 - 2;
            id v31 = &v16[16 * v11 - 32];
            uint64_t v33 = *(void *)v31;
            uint64_t v32 = *((void *)v31 + 1);
            BOOL v29 = __OFSUB__(v32, v33);
            uint64_t v34 = v32 - v33;
            if (v29) {
              goto LABEL_96;
            }
            BOOL v29 = __OFADD__(v21, v34);
            uint64_t v35 = v21 + v34;
            if (v29) {
              goto LABEL_99;
            }
            if (v35 >= v26)
            {
              uint64_t v53 = &v16[16 * v18];
              uint64_t v55 = *(void *)v53;
              uint64_t v54 = *((void *)v53 + 1);
              BOOL v29 = __OFSUB__(v54, v55);
              uint64_t v56 = v54 - v55;
              if (v29) {
                goto LABEL_103;
              }
              BOOL v46 = v21 < v56;
              goto LABEL_63;
            }
          }
          else
          {
            if (v11 != 3)
            {
              uint64_t v47 = *((void *)v8 + 4);
              uint64_t v48 = *((void *)v8 + 5);
              BOOL v29 = __OFSUB__(v48, v47);
              uint64_t v40 = v48 - v47;
              char v41 = v29;
              goto LABEL_57;
            }
            uint64_t v20 = *((void *)v8 + 4);
            uint64_t v19 = *((void *)v8 + 5);
            BOOL v29 = __OFSUB__(v19, v20);
            uint64_t v21 = v19 - v20;
            char v22 = v29;
          }
          if (v22) {
            goto LABEL_95;
          }
          unint64_t v30 = v11 - 2;
          objc_super v36 = &v16[16 * v11 - 32];
          uint64_t v38 = *(void *)v36;
          uint64_t v37 = *((void *)v36 + 1);
          BOOL v39 = __OFSUB__(v37, v38);
          uint64_t v40 = v37 - v38;
          char v41 = v39;
          if (v39) {
            goto LABEL_98;
          }
          uint64_t v42 = &v16[16 * v18];
          uint64_t v44 = *(void *)v42;
          uint64_t v43 = *((void *)v42 + 1);
          BOOL v29 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          if (v29) {
            goto LABEL_101;
          }
          if (__OFADD__(v40, v45)) {
            goto LABEL_102;
          }
          if (v40 + v45 >= v21)
          {
            BOOL v46 = v21 < v45;
LABEL_63:
            if (v46) {
              unint64_t v18 = v30;
            }
            goto LABEL_65;
          }
LABEL_57:
          if (v41) {
            goto LABEL_97;
          }
          uint64_t v49 = &v16[16 * v18];
          uint64_t v51 = *(void *)v49;
          uint64_t v50 = *((void *)v49 + 1);
          BOOL v29 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          if (v29) {
            goto LABEL_100;
          }
          if (v52 < v40) {
            goto LABEL_13;
          }
LABEL_65:
          unint64_t v57 = v18 - 1;
          if (v18 - 1 >= v11)
          {
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            goto LABEL_111;
          }
          if (!v10) {
            goto LABEL_112;
          }
          __int16 v58 = &v16[16 * v57];
          uint64_t v59 = *(void *)v58;
          __int16 v60 = &v16[16 * v18];
          uint64_t v61 = *((void *)v60 + 1);
          sub_1000895E8((char *)(v10 + 8 * *(void *)v58), (char *)(v10 + 8 * *(void *)v60), v10 + 8 * v61, __dst);
          if (v75)
          {
LABEL_85:
            swift_bridgeObjectRelease();
            v70[2] = 0;
            return swift_bridgeObjectRelease();
          }
          if (v61 < v59) {
            goto LABEL_90;
          }
          if (v18 > *((void *)v8 + 2)) {
            goto LABEL_91;
          }
          *(void *)__int16 v58 = v59;
          *(void *)&v16[16 * v57 + 8] = v61;
          unint64_t v62 = *((void *)v8 + 2);
          if (v18 >= v62) {
            goto LABEL_92;
          }
          unint64_t v11 = v62 - 1;
          memmove(&v16[16 * v18], v60 + 16, 16 * (v62 - 1 - v18));
          *((void *)v8 + 2) = v62 - 1;
          if (v62 <= 2) {
            goto LABEL_13;
          }
        }
      }
      unint64_t v11 = 1;
LABEL_13:
      Swift::Int v3 = v71;
      Swift::Int v9 = v73;
    }
    while (v73 < v71);
    uint64_t v2 = v69;
    if (v11 < 2)
    {
LABEL_88:
      swift_bridgeObjectRelease();
      v70[2] = 0;
      return swift_bridgeObjectRelease();
    }
LABEL_74:
    uint64_t v63 = *v2;
    while (1)
    {
      unint64_t v64 = v11 - 2;
      if (v11 < 2) {
        goto LABEL_105;
      }
      if (!v63) {
        goto LABEL_113;
      }
      uint64_t v65 = *(void *)&v8[16 * v64 + 32];
      uint64_t v66 = *(void *)&v8[16 * v11 + 24];
      sub_1000895E8((char *)(v63 + 8 * v65), (char *)(v63 + 8 * *(void *)&v8[16 * v11 + 16]), v63 + 8 * v66, __dst);
      if (v75) {
        goto LABEL_85;
      }
      if (v66 < v65) {
        goto LABEL_106;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100089994((uint64_t)v8);
      }
      if (v64 >= *((void *)v8 + 2)) {
        goto LABEL_107;
      }
      v67 = &v8[16 * v64 + 32];
      *(void *)v67 = v65;
      *((void *)v67 + 1) = v66;
      unint64_t v68 = *((void *)v8 + 2);
      if (v11 > v68) {
        goto LABEL_108;
      }
      memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v68 - v11));
      *((void *)v8 + 2) = v68 - 1;
      unint64_t v11 = v68 - 1;
      if (v68 <= 2) {
        goto LABEL_88;
      }
    }
  }
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_100018D68(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_100018DA4(objc_class *a1, uint64_t a2)
{
  sub_100004FA4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100018DAC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100018DD4(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_100018DE4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

unint64_t sub_100018E30()
{
  unint64_t result = qword_1005A4EC0;
  if (!qword_1005A4EC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005A4EC0);
  }
  return result;
}

unint64_t sub_100018E70()
{
  unint64_t result = qword_1005A4108;
  if (!qword_1005A4108)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005A4108);
  }
  return result;
}

uint64_t sub_100018EB0(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = 0;
  if (v8)
  {
    while (1)
    {
      id v10 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a1 + 8 * v9 + 32);
      unint64_t v11 = v10;
      id v16 = v10;
      char v12 = sub_100080AA4(&v16, a2, a3, a4);

      if (v4 || (v12 & 1) != 0) {
        break;
      }
      uint64_t v13 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v9 = 0;
        if (!v8) {
          return v9;
        }
      }
      else
      {
        ++v9;
        if (v13 == v8) {
          return 0;
        }
      }
    }
  }
  return v9;
}

uint64_t sub_100018FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000056F0(a1, a2, a3);
}

Swift::Int sub_100019008(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_10001882C(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  Swift::Int result = sub_100018840(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1000190D4()
{
  uint64_t v1 = v0[9];
  if (*(void *)(v1 + 112))
  {
    uint64_t v2 = *(void **)(v1 + 112);
  }
  else
  {
    uint64_t v2 = &_swiftEmptyArrayStorage;
    *(void *)(v1 + 112) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  v0[10] = v2;
  uint64_t v3 = v0[4];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100006E88, v3, 0);
}

uint64_t sub_10001916C()
{
  self;
  if (sub_100005C38() && sub_100009458())
  {
    uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 152);
    *(void *)(v0 + 72) = v1;
    return _swift_task_switch(sub_1000190D4, v1, 0);
  }
  else
  {
    uint64_t v2 = *(void **)(v0 + 24);
    static Logger.updates.getter();
    id v3 = v2;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(char **)(v0 + 24);
    if (v6)
    {
      os_log_type_t type = v5;
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412802;
      id v10 = *(void **)&v7[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v0 + 16) = v10;
      id v11 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v10;

      *(_WORD *)(v8 + 12) = 1026;
      *(_DWORD *)(v0 + 8_Block_object_dispose(&a9, 8) = sub_100005C38();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 1_Block_object_dispose(&a9, 8) = 1026;
      *(_DWORD *)(v0 + 92) = sub_100009458();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, type, "[%@] Skipping provisioned app install due to restrictions disabled: auto-downloads: %{BOOL,public}d app-install-allowed: %{BOOL,public}d", (uint8_t *)v8, 0x18u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
    swift_task_dealloc();
    swift_task_dealloc();
    char v12 = *(uint64_t (**)(void *))(v0 + 8);
    return v12(&_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100019410()
{
  uint64_t v1 = (void (**)(void, void))(v0[2] + OBJC_IVAR____TtC9appstored14UpdatesContext_callbackHandler);
  if (*v1) {
    (*v1)(v0[4], 0);
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000194A0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100019410, 0, 0);
}

uint64_t sub_1000195C0(void *a1)
{
  return sub_10000D124(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000195CC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10000D9AC, 0, 0);
}

uint64_t type metadata accessor for MediaAPIUpdateEntity()
{
  return self;
}

uint64_t sub_1000196F0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_100019700(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for MediaAPIUpdate()
{
  return self;
}

uint64_t sub_100019760(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 456), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

id sub_100019834(uint64_t a1)
{
  if (a1)
  {
    id v33 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v2 = sub_100267F88(*(id *)(a1 + 8), @"subscriptions");
    uint64_t v3 = sub_1003B63BC(v2);

    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id obj = v3;
    id v31 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v31)
    {
      uint64_t v30 = *(void *)v39;
      *(void *)&long long v4 = 138412546;
      long long v28 = v4;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v39 != v30) {
            objc_enumerationMutation(obj);
          }
          BOOL v6 = *(void **)(*((void *)&v38 + 1) + 8 * v5);
          uint64_t v7 = sub_10026811C(v6, @"appAdamId");
          sub_1002689B4(v6, @"segment");
          id v8 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v32 = v5;
          if ([v8 isEqualToString:@"AppStore"])
          {
            uint64_t v9 = 1;
          }
          else if ([v8 isEqualToString:@"News"])
          {
            uint64_t v9 = 0;
          }
          else if ([v8 isEqualToString:@"Activity"])
          {
            uint64_t v9 = 2;
          }
          else if ([v8 isEqualToString:@"Music"])
          {
            uint64_t v9 = 3;
          }
          else if ([v8 isEqualToString:@"TV"])
          {
            uint64_t v9 = 4;
          }
          else if ([v8 isEqualToString:@"iCloud"])
          {
            uint64_t v9 = 5;
          }
          else if ([v8 isEqualToString:@"Podcasts"])
          {
            uint64_t v9 = 6;
          }
          else if ([v8 isEqualToString:@"HWBundle"])
          {
            uint64_t v9 = 7;
          }
          else
          {
            id v10 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              uint64_t v25 = objc_opt_class();
              *(_DWORD *)buf = v28;
              uint64_t v45 = v25;
              __int16 v46 = 2114;
              id v47 = v8;
              id v26 = v25;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@]: Error parsing unknown segment string: %{public}@", buf, 0x16u);
            }
            uint64_t v9 = -1;
          }

          id v11 = sub_100267F88(v6, @"inAppSubscriptions");
          char v12 = sub_1003B63BC(v11);

          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          id v13 = v12;
          id v14 = [v13 countByEnumeratingWithState:&v34 objects:v42 count:16];
          if (v14)
          {
            id v15 = v14;
            uint64_t v16 = *(void *)v35;
            do
            {
              id v17 = 0;
              do
              {
                if (*(void *)v35 != v16) {
                  objc_enumerationMutation(v13);
                }
                uint64_t v18 = *(void *)(*((void *)&v34 + 1) + 8 * (void)v17);
                id v19 = objc_alloc((Class)ASDSubscriptionEntitlement);
                uint64_t v20 = *(void **)(a1 + 8);
                if (v20) {
                  id v21 = sub_1002681FC(v20, @"user.hasFamily", 0);
                }
                else {
                  id v21 = 0;
                }
                id v22 = objc_msgSend(v19, "initWithDictionary:forAppAdamID:segment:hasFamily:", v18, v7, v9, v21, v28);
                uint64_t v23 = v22;
                if (v22 && [v22 segment] == (id)v9) {
                  [v33 addObject:v23];
                }

                id v17 = (char *)v17 + 1;
              }
              while (v15 != v17);
              id v24 = [v13 countByEnumeratingWithState:&v34 objects:v42 count:16];
              id v15 = v24;
            }
            while (v24);
          }

          uint64_t v5 = v32 + 1;
        }
        while ((id)(v32 + 1) != v31);
        id v31 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
      }
      while (v31);
    }
  }
  else
  {
    id v33 = 0;
  }
  return v33;
}

id sub_100019C68(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = objc_opt_new();
    uint64_t v3 = sub_100267F88(*(id *)(a1 + 8), @"subscriptions");
    long long v4 = sub_1003B63BC(v3);

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = sub_100267F88(*(id *)(*((void *)&v23 + 1) + 8 * i), @"introOfferConsumedFamilyIds");
          id v11 = sub_1003B6428(v10);

          long long v21 = 0u;
          long long v22 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          id v12 = v11;
          id v13 = [v12 countByEnumeratingWithState:&v19 objects:v27 count:16];
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)v20;
            do
            {
              for (j = 0; j != v14; j = (char *)j + 1)
              {
                if (*(void *)v20 != v15) {
                  objc_enumerationMutation(v12);
                }
                [v2 addObject:*(void *)(*((void *)&v19 + 1) + 8 * (void)j)];
              }
              id v14 = [v12 countByEnumeratingWithState:&v19 objects:v27 count:16];
            }
            while (v14);
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v23 objects:v28 count:16];
      }
      while (v7);
    }

    id v17 = +[NSArray arrayWithArray:v2];
  }
  else
  {
    id v17 = 0;
  }
  return v17;
}

id sub_10001A034(void *a1, uint64_t a2)
{
  if (a1)
  {
    long long v4 = (char *)[a1 count];
    id v5 = &v4[-a2];
    id v6 = objc_msgSend(a1, "subarrayWithRange:", &v4[-a2], a2);
    objc_msgSend(a1, "removeObjectsInRange:", v5, a2);
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

id sub_10001A0C8()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D63EC;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B11E0 != -1) {
    dispatch_once(&qword_1005B11E0, block);
  }
  uint64_t v0 = (void *)qword_1005B11D8;
  return v0;
}

id sub_10001A20C()
{
  self;
  if (qword_1005B1180 != -1) {
    dispatch_once(&qword_1005B1180, &stru_10052BC10);
  }
  uint64_t v0 = (void *)qword_1005B1178;
  return v0;
}

id sub_10001A264()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024AE00;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0BB0 != -1) {
    dispatch_once(&qword_1005B0BB0, block);
  }
  uint64_t v0 = (void *)qword_1005B0BA8;
  return v0;
}

id sub_10001A308()
{
  self;
  if (qword_1005B0EA0 != -1) {
    dispatch_once(&qword_1005B0EA0, &stru_100526C20);
  }
  uint64_t v0 = (void *)qword_1005B0E98;
  return v0;
}

id sub_10001A458()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RestoreInstallCreator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RestoreInstallCreator()
{
  return self;
}

__n128 initializeBufferWithCopyOfBuffer for AppVersion(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AppVersion(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AppVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

void type metadata accessor for ASDSoftwareUpdateState(uint64_t a1)
{
}

void type metadata accessor for LoadSoftwareUpdatesReason(uint64_t a1)
{
}

void type metadata accessor for AMSBagKey(uint64_t a1)
{
}

void type metadata accessor for ASDInstallAttributionVersion(uint64_t a1)
{
}

uint64_t sub_10001A56C(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3350, type metadata accessor for ASDError);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001A5D8(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3350, type metadata accessor for ASDError);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001A648(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001A6B4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10001A6BC(uint64_t a1, uint64_t a2)
{
  return sub_10001B500(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

id sub_10001A6E0()
{
  return *v0;
}

uint64_t sub_10001A6E8()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10001A734()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10001A78C()
{
  return Hasher._finalize()();
}

uint64_t sub_10001A7F4(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3308, type metadata accessor for AMSError);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001A860(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3308, type metadata accessor for AMSError);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001A8CC(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3340, type metadata accessor for AMSError);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001A93C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10001A9B4(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10001AA34@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10001AA80()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10001AA90(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10001AAFC(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001AB68(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
  id v5 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10001ABF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001AC7C(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3378, type metadata accessor for AppInstallLogCode);
  uint64_t v3 = sub_10001B25C(&qword_1005A3380, type metadata accessor for AppInstallLogCode);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001AD38()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10001AD48(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3340, type metadata accessor for AMSError);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10001ADB4(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3340, type metadata accessor for AMSError);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001AE20(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001B25C(&qword_1005A3340, type metadata accessor for AMSError);
  id v5 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10001AEB0()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10001AEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001B25C(&qword_1005A3340, type metadata accessor for AMSError);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10001AF64()
{
  return Hasher._finalize()();
}

void *sub_10001AFC4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&a9, 8) = 0;
  return result;
}

void sub_10001AFD4(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_10001AFE0(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10001AFF4()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_10001B060@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001B08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10001B110(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3218, type metadata accessor for AMSBagKey);
  uint64_t v3 = sub_10001B25C((unint64_t *)&unk_1005A3220, type metadata accessor for AMSBagKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001B1CC()
{
  return sub_10001B25C(&qword_1005A3200, type metadata accessor for AMSBagKey);
}

uint64_t sub_10001B214()
{
  return sub_10001B25C(&qword_1005A3208, type metadata accessor for AMSBagKey);
}

uint64_t sub_10001B25C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001B2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001B25C(&qword_1005A3340, type metadata accessor for AMSError);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10001B328(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3398, type metadata accessor for SKANEnvironment);
  uint64_t v3 = sub_10001B25C((unint64_t *)&unk_1005A33A0, type metadata accessor for SKANEnvironment);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001B3E4@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10001B42C(uint64_t a1)
{
  uint64_t v2 = sub_10001B25C(&qword_1005A3388, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_10001B25C(&qword_1005A3390, type metadata accessor for URLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001B4E8(uint64_t a1, uint64_t a2)
{
  return sub_10001B500(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10001B500(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10001B544()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001B598()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001B60C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10001B698()
{
  return sub_10001B25C(&qword_1005A3210, type metadata accessor for AMSBagKey);
}

void sub_10001B6E0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v63 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = sub_1002790EC(a1);
  id v62 = self;
  unsigned int v8 = [v62 deviceIsAppleTV];
  uint64_t v9 = &off_100523170;
  if (v8) {
    uint64_t v9 = &off_100523188;
  }
  id v10 = *v9;
  id v66 = 0;
  id v11 = v10;
  id v12 = [a1 placeholderPromiseWithError:&v66];
  id v13 = v66;
  if (!v12)
  {
    long long v35 = v7;
    id v36 = v66;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    long long v37 = (void *)_convertErrorToNSError(_:)();
    id v38 = (id)IXCreateUserPresentableError();

    if (!v38)
    {
      type metadata accessor for ASDError(0);
      uint64_t v65 = 822;
      sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
      sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
      _BridgedStoredNSError.init(_:userInfo:)();
    }
    swift_willThrow();

    goto LABEL_16;
  }
  id v14 = v12;
  id v64 = v7;
  id v66 = 0;
  id v15 = v13;
  id v16 = [v14 metadataWithError:&v66];
  id v17 = v66;
  if (!v16)
  {
    id v39 = v66;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    long long v40 = (void *)_convertErrorToNSError(_:)();
    id v41 = (id)IXCreateUserPresentableError();

    if (!v41)
    {
      type metadata accessor for ASDError(0);
      uint64_t v65 = 825;
      sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
      sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
      _BridgedStoredNSError.init(_:userInfo:)();
    }
    swift_willThrow();

LABEL_16:
    swift_errorRelease();
    return;
  }
  id v18 = v16;
  id v19 = v17;
  id v61 = v18;
  id v20 = [v18 itemID];
  if (!v20) {
    goto LABEL_7;
  }
  sub_10001BE10();
  v21.super.super.Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  __int16 v60 = v11;
  Class isa = v21.super.super.isa;
  id v23 = v20;
  id v59 = v20;
  long long v24 = a1;
  long long v25 = a2;
  long long v26 = v6;
  uint64_t v27 = v14;
  uint64_t v28 = v4;
  id v29 = v23;
  char v30 = static NSObject.== infix(_:_:)();

  id v58 = v29;
  id v31 = (void *)v28;
  id v14 = v27;
  uint64_t v32 = v26;
  id v33 = v25;
  id v20 = v59;

  id v11 = v60;
  if ((v30 & 1) == 0)
  {
    id v57 = v24;
    id v42 = v61;
    id v43 = [v61 softwareVersionBundleID];
    if (!v43)
    {
      id v44 = [v57 identity];
      id v43 = [v44 bundleID];
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v42 setSoftwareVersionBundleID:v45];

    id v46 = sub_1003B7A68(objc_allocWithZone((Class)RestoreAppInstall), v42, v33);
    if (v46)
    {
      id v59 = v31;
      unsigned __int8 v47 = [v62 deviceIsAppleTV];
      id v48 = v57;
      if (v47)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v49 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v46 setValue:v49 forProperty:@"log_code"];
      }
      id v50 = [v48 uniqueIdentifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class v51 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v52 = *(void (**)(char *, id))(v63 + 8);
      v52(v32, v59);
      [v46 setValue:v51 forProperty:@"external_id"];

      id v53 = [v48 uniqueIdentifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class v54 = UUID._bridgeToObjectiveC()().super.isa;
      v52(v32, v59);
      uint64_t v55 = @"coordinator_id";
      [v46 setValue:v54 forProperty:v55];
    }
    else
    {

      __break(1u);
    }
  }
  else
  {
LABEL_7:
    id v34 = v61;

    if (!(id)IXCreateUserPresentableError())
    {
      type metadata accessor for ASDError(0);
      uint64_t v65 = 825;
      sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
      sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
      _BridgedStoredNSError.init(_:userInfo:)();
    }
    swift_willThrow();
  }
}

void type metadata accessor for ASDError(uint64_t a1)
{
}

unint64_t sub_10001BE10()
{
  unint64_t result = qword_1005A3230;
  if (!qword_1005A3230)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005A3230);
  }
  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for AppInstallType(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for AMSError(uint64_t a1)
{
}

void type metadata accessor for AppInstallLogCode(uint64_t a1)
{
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for AMSAccountCachedServerDataIntKey(uint64_t a1)
{
}

void type metadata accessor for SKANEnvironment(uint64_t a1)
{
}

void sub_10001BF18(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10001BF60()
{
  return sub_10001B25C(&qword_1005A3290, type metadata accessor for SKANEnvironment);
}

uint64_t sub_10001BFA8()
{
  return sub_10001B25C(&qword_1005A3298, type metadata accessor for SKANEnvironment);
}

uint64_t sub_10001BFF0()
{
  return sub_10001B25C(&qword_1005A32A0, type metadata accessor for SKANEnvironment);
}

uint64_t sub_10001C038()
{
  return sub_10001B25C(&qword_1005A32A8, type metadata accessor for ASDError);
}

uint64_t sub_10001C080()
{
  return sub_10001B25C(&qword_1005A32B0, type metadata accessor for ASDError);
}

uint64_t sub_10001C0C8()
{
  return sub_10001B25C(&qword_1005A32B8, type metadata accessor for URLResourceKey);
}

uint64_t sub_10001C110()
{
  return sub_10001B25C(&qword_1005A32C0, type metadata accessor for URLResourceKey);
}

uint64_t sub_10001C158()
{
  return sub_10001B25C(&qword_1005A32C8, type metadata accessor for URLResourceKey);
}

uint64_t sub_10001C1A0()
{
  return sub_10001B25C(&qword_1005A32D0, type metadata accessor for AppInstallLogCode);
}

uint64_t sub_10001C1E8()
{
  return sub_10001B25C(&qword_1005A32D8, type metadata accessor for AppInstallLogCode);
}

uint64_t sub_10001C230()
{
  return sub_10001B25C(&qword_1005A32E0, type metadata accessor for AppInstallLogCode);
}

uint64_t sub_10001C278()
{
  return sub_10001B25C(&qword_1005A32E8, type metadata accessor for AMSError);
}

uint64_t sub_10001C2C0()
{
  return sub_10001B25C((unint64_t *)&unk_1005A32F0, type metadata accessor for AMSError);
}

uint64_t sub_10001C308()
{
  return sub_10001B25C(&qword_1005A4490, type metadata accessor for CFString);
}

uint64_t sub_10001C350()
{
  return sub_10001B25C(&qword_1005A3300, type metadata accessor for CFString);
}

uint64_t sub_10001C398()
{
  return sub_10001B25C(&qword_1005A3308, type metadata accessor for AMSError);
}

uint64_t sub_10001C3E0()
{
  return sub_10001B25C(&qword_1005A3310, type metadata accessor for AMSError);
}

uint64_t sub_10001C428()
{
  return sub_10001B25C(&qword_1005A3318, type metadata accessor for AMSError);
}

uint64_t sub_10001C470()
{
  return sub_10001B25C(&qword_1005A3320, type metadata accessor for Code);
}

uint64_t sub_10001C4B8()
{
  return sub_10001B25C(&qword_1005A3328, type metadata accessor for Code);
}

unint64_t sub_10001C504()
{
  unint64_t result = qword_1005A3330;
  if (!qword_1005A3330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3330);
  }
  return result;
}

uint64_t sub_10001C558()
{
  return sub_10001B25C(&qword_1005A3338, type metadata accessor for Code);
}

uint64_t sub_10001C5A0()
{
  return sub_10001B25C(&qword_1005A3340, type metadata accessor for AMSError);
}

uint64_t sub_10001C5E8()
{
  return sub_10001B25C(&qword_1005A3348, _s3__C4CodeOMa_0);
}

uint64_t sub_10001C630()
{
  return sub_10001B25C(&qword_1005A4450, type metadata accessor for ASDError);
}

uint64_t sub_10001C678()
{
  return sub_10001B25C(&qword_1005A3350, type metadata accessor for ASDError);
}

uint64_t sub_10001C6C0()
{
  return sub_10001B25C(&qword_1005A3358, type metadata accessor for ASDError);
}

uint64_t sub_10001C708()
{
  return sub_10001B25C((unint64_t *)&unk_1005A3360, type metadata accessor for ASDError);
}

uint64_t sub_10001C750()
{
  return sub_10001B25C(&qword_1005A6020, _s3__C4CodeOMa_0);
}

uint64_t sub_10001C798()
{
  return sub_10001B25C(&qword_1005A3370, _s3__C4CodeOMa_0);
}

id sub_10001C85C()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SkannerDatabaseTransaction()
{
  return self;
}

id sub_10001C8B8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for FairPlayService()) init];
  qword_1005B1440 = (uint64_t)result;
  return result;
}

uint64_t sub_10001C980(uint64_t a1)
{
  unint64_t v2 = sub_10001F480();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001C9BC(uint64_t a1)
{
  unint64_t v2 = sub_10001F480();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001CA00()
{
  if (v0[24]) {
    return 0;
  }
  else {
    return *(int *)v0;
  }
}

unint64_t sub_10001CA18()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  if (*(unsigned char *)(v0 + 24) && (uint64_t v5 = *(void *)v0, v6 = *(void *)(v0 + 8), v4 != 1))
  {
    return sub_1000429D8((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    sub_10001644C((uint64_t *)&unk_1005A3620);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100488070;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v8;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v5;
    *(void *)(inited + 56) = v6;
    sub_10001F21C(v1, v2, v3, v4);
    return sub_1000429D8(inited);
  }
}

uint64_t sub_10001CB14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Data.Deallocator();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void (**)(uint64_t))((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = 0;
  unsigned int v25 = 0;
  sub_1001391BC(a1, a2, 1, 5, (uint64_t)&v26, (uint64_t)&v25);
  if (v10)
  {
    uint64_t v11 = v10;
    sub_10001ECD8();
    swift_allocError();
    char v13 = 0;
    *(void *)uint64_t v12 = v11;
    unint64_t v14 = 0xD000000000000021;
    unint64_t v15 = 0x800000010044ADC0;
LABEL_3:
    *(void *)(v12 + _Block_object_dispose(&a9, 8) = v14;
    *(void *)(v12 + 16) = v15;
    *(unsigned char *)(v12 + 24) = v13;
    return swift_willThrow();
  }
  uint64_t v17 = v26;
  if (!v26)
  {
    sub_10001ECD8();
    swift_allocError();
    unint64_t v15 = 0;
    *(void *)uint64_t v12 = 0xD000000000000012;
    unint64_t v14 = 0x800000010044ADF0;
    char v13 = 1;
    goto LABEL_3;
  }
  uint64_t v18 = v25;
  void *v9 = sub_10001CDE8;
  v9[1] = 0;
  (*(void (**)(void (**)(uint64_t), void, uint64_t))(v7 + 104))(v9, enum case for Data.Deallocator.custom(_:), v6);
  Data.Deallocator._deallocator.getter();
  if (v18)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v19 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v20 = sub_10001EFC0(v19, v18);
    unint64_t v22 = v21;
    swift_release();
  }
  else
  {
    id v23 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
    v23(v17, 0);
    swift_release();
    swift_release();
    uint64_t v20 = 0;
    unint64_t v22 = 0xC000000000000000;
  }
  uint64_t result = (*(uint64_t (**)(void (**)(uint64_t), uint64_t))(v7 + 8))(v9, v6);
  *a3 = v20;
  a3[1] = v22;
  return result;
}

uint64_t sub_10001CF64(uint64_t a1, const void *a2, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = swift_getObjectType();
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  return _swift_task_switch(sub_10001CFF0, 0, 0);
}

uint64_t sub_10001CFF0()
{
  uint64_t v1 = (void *)v0[3];
  sub_10001E420((uint64_t)v1, v0[2], v0[4], (void (*)(void, uint64_t, uint64_t))sub_10001CB14);

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001EC80(v6, v7);
  uint64_t v3 = (void (**)(void, void, void))v0[5];
  ((void (**)(void, Class, void))v3)[2](v3, isa, 0);

  _Block_release(v3);
  int v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10001D0FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Data.Deallocator();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = 0;
  unsigned int v25 = 0;
  sub_100127BD8(a1, a2, 313, 0, 0, 0, 0, 0, 0, (uint64_t)&v26, (uint64_t)&v25);
  if (v10)
  {
    uint64_t v11 = v10;
    sub_10001ECD8();
    swift_allocError();
    char v13 = 0;
    *(void *)uint64_t v12 = v11;
    unint64_t v14 = 0xD000000000000027;
    unint64_t v15 = 0x800000010044AD70;
LABEL_3:
    *(void *)(v12 + _Block_object_dispose(&a9, 8) = v14;
    *(void *)(v12 + 16) = v15;
    *(unsigned char *)(v12 + 24) = v13;
    return swift_willThrow();
  }
  uint64_t v17 = v26;
  if (!v26)
  {
    sub_10001ECD8();
    swift_allocError();
    unint64_t v15 = 0;
    *(void *)uint64_t v12 = 0xD000000000000018;
    unint64_t v14 = 0x800000010044ADA0;
    char v13 = 1;
    goto LABEL_3;
  }
  uint64_t v18 = v25;
  void *v9 = sub_10001F4D4;
  v9[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for Data.Deallocator.custom(_:), v6);
  Data.Deallocator._deallocator.getter();
  if (v18)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v19 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v20 = sub_10001EFC0(v19, v18);
    unint64_t v22 = v21;
    swift_release();
  }
  else
  {
    id v23 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
    v23(v17, 0);
    swift_release();
    swift_release();
    uint64_t v20 = 0;
    unint64_t v22 = 0xC000000000000000;
  }
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v20;
  a3[1] = v22;
  return result;
}

uint64_t sub_10001D568(uint64_t a1, const void *a2, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = swift_getObjectType();
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  return _swift_task_switch(sub_10001D5F4, 0, 0);
}

uint64_t sub_10001D5F4()
{
  uint64_t v1 = (void *)v0[3];
  sub_10001E420((uint64_t)v1, v0[2], v0[4], (void (*)(void, uint64_t, uint64_t))sub_10001D0FC);

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001EC80(v6, v7);
  uint64_t v3 = (void (**)(void, void, void))v0[5];
  ((void (**)(void, Class, void))v3)[2](v3, isa, 0);

  _Block_release(v3);
  int v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10001D700(uint64_t a1, uint64_t a2, unint64_t a3)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
        goto LABEL_36;
      }
      sub_10001EC28(a2, a3);
      uint64_t v7 = __DataStorage._bytes.getter();
      if (v7)
      {
        uint64_t v8 = __DataStorage._offset.getter();
        if (__OFSUB__((int)a2, v8)) {
          goto LABEL_40;
        }
        uint64_t v9 = v7 + (int)a2 - v8;
        uint64_t v10 = __DataStorage._length.getter();
        if (v9)
        {
          uint64_t v11 = v10 >= v6 ? (a2 >> 32) - (int)a2 : v10;
          if (v11 < 0)
          {
            __break(1u);
LABEL_13:
            uint64_t v12 = *(void *)(a2 + 16);
            uint64_t v13 = *(void *)(a2 + 24);
            swift_retain();
            swift_retain();
            uint64_t v14 = __DataStorage._bytes.getter();
            if (v14)
            {
              uint64_t v15 = __DataStorage._offset.getter();
              if (__OFSUB__(v12, v15))
              {
LABEL_39:
                __break(1u);
LABEL_40:
                __break(1u);
              }
              v14 += v12 - v15;
            }
            BOOL v16 = __OFSUB__(v13, v12);
            uint64_t v17 = v13 - v12;
            if (!v16)
            {
              uint64_t v18 = __DataStorage._length.getter();
              if (v18 >= v17) {
                uint64_t v19 = v17;
              }
              else {
                uint64_t v19 = v18;
              }
              if (v14) {
                unint64_t v20 = v19;
              }
              else {
                unint64_t v20 = 0;
              }
              if ((v20 & 0x8000000000000000) == 0)
              {
                if (!HIDWORD(v20))
                {
                  sub_100137450();
                  if (v21)
                  {
                    uint64_t v22 = v21;
                    sub_10001ECD8();
                    swift_allocError();
                    *(void *)uint64_t v23 = v22;
                    *(void *)(v23 + _Block_object_dispose(&a9, 8) = 0xD000000000000017;
                    *(void *)(v23 + 16) = 0x800000010044AD50;
                    *(unsigned char *)(v23 + 24) = 0;
                    swift_willThrow();
                  }
                  swift_release();
                  swift_release();
                  return;
                }
                goto LABEL_38;
              }
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
              goto LABEL_39;
            }
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
        }
      }
      else
      {
        __DataStorage._length.getter();
      }
      sub_100137450();
      if (v26)
      {
        uint64_t v27 = v26;
        sub_10001ECD8();
        swift_allocError();
        *(void *)uint64_t v28 = v27;
        *(void *)(v28 + _Block_object_dispose(&a9, 8) = 0xD000000000000017;
        *(void *)(v28 + 16) = 0x800000010044AD50;
        *(unsigned char *)(v28 + 24) = 0;
        swift_willThrow();
      }
      sub_10001EC80(a2, a3);
      return;
    case 2uLL:
      goto LABEL_13;
    case 3uLL:
      sub_100137450();
      if (v5) {
        goto LABEL_29;
      }
      return;
    default:
      sub_100137450();
      if (!v5) {
        return;
      }
LABEL_29:
      uint64_t v24 = v5;
      sub_10001ECD8();
      swift_allocError();
      *(void *)uint64_t v25 = v24;
      *(void *)(v25 + _Block_object_dispose(&a9, 8) = 0xD000000000000017;
      *(void *)(v25 + 16) = 0x800000010044AD50;
      *(unsigned char *)(v25 + 24) = 0;
      swift_willThrow();
      return;
  }
}

uint64_t sub_10001DBCC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v3[4] = v8;
  v3[5] = v10;
  return _swift_task_switch(sub_10001DC70, 0, 0);
}

uint64_t sub_10001DC70()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  sub_10001EC28(v1, v2);
  sub_10001E710((uint64_t)v3, v1, v2, sub_10001D700);

  sub_10001EC80(v1, v2);
  (*(void (**)(void, void))(*(void *)(v0 + 24) + 16))(*(void *)(v0 + 24), 0);
  _Block_release(*(const void **)(v0 + 24));
  int v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_10001DD78(uint64_t a1, uint64_t a2, unint64_t a3)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
        goto LABEL_34;
      }
      sub_10001EC28(a2, a3);
      uint64_t v6 = __DataStorage._bytes.getter();
      if (v6)
      {
        uint64_t v7 = __DataStorage._offset.getter();
        if (__OFSUB__((int)a2, v7)) {
          goto LABEL_38;
        }
        uint64_t v8 = v6 + (int)a2 - v7;
        uint64_t v9 = __DataStorage._length.getter();
        if (v8)
        {
          uint64_t v10 = v9 >= v5 ? (a2 >> 32) - (int)a2 : v9;
          if (v10 < 0)
          {
            __break(1u);
LABEL_11:
            uint64_t v11 = *(void *)(a2 + 16);
            uint64_t v12 = *(void *)(a2 + 24);
            swift_retain();
            swift_retain();
            uint64_t v13 = __DataStorage._bytes.getter();
            if (v13)
            {
              uint64_t v14 = __DataStorage._offset.getter();
              if (__OFSUB__(v11, v14))
              {
LABEL_37:
                __break(1u);
LABEL_38:
                __break(1u);
              }
              v13 += v11 - v14;
            }
            BOOL v15 = __OFSUB__(v12, v11);
            uint64_t v16 = v12 - v11;
            if (!v15)
            {
              uint64_t v17 = __DataStorage._length.getter();
              if (v17 >= v16) {
                uint64_t v18 = v16;
              }
              else {
                uint64_t v18 = v17;
              }
              if (v13) {
                unint64_t v19 = v18;
              }
              else {
                unint64_t v19 = 0;
              }
              if ((v19 & 0x8000000000000000) == 0)
              {
                if (!HIDWORD(v19))
                {
                  sub_100186434();
                  if (v20)
                  {
                    uint64_t v21 = v20;
                    sub_10001ECD8();
                    swift_allocError();
                    *(void *)uint64_t v22 = v21;
                    *(void *)(v22 + _Block_object_dispose(&a9, 8) = 0xD000000000000024;
                    *(void *)(v22 + 16) = 0x800000010044AD20;
                    *(unsigned char *)(v22 + 24) = 0;
                    swift_willThrow();
                  }
                  swift_release();
                  swift_release();
                  return;
                }
                goto LABEL_36;
              }
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
      }
      else
      {
        __DataStorage._length.getter();
      }
      sub_100186434();
      if (v26)
      {
        uint64_t v27 = v26;
        sub_10001ECD8();
        swift_allocError();
        *(void *)uint64_t v28 = v27;
        *(void *)(v28 + _Block_object_dispose(&a9, 8) = 0xD000000000000024;
        *(void *)(v28 + 16) = 0x800000010044AD20;
        *(unsigned char *)(v28 + 24) = 0;
        swift_willThrow();
      }
      sub_10001EC80(a2, a3);
      return;
    case 2uLL:
      goto LABEL_11;
    default:
      sub_100186434();
      if (v23)
      {
        uint64_t v24 = v23;
        sub_10001ECD8();
        swift_allocError();
        *(void *)uint64_t v25 = v24;
        *(void *)(v25 + _Block_object_dispose(&a9, 8) = 0xD000000000000024;
        *(void *)(v25 + 16) = 0x800000010044AD20;
        *(unsigned char *)(v25 + 24) = 0;
        swift_willThrow();
      }
      return;
  }
}

uint64_t sub_10001E274(void *a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v3[4] = v8;
  v3[5] = v10;
  return _swift_task_switch(sub_10001E318, 0, 0);
}

uint64_t sub_10001E318()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  sub_10001EC28(v1, v2);
  sub_10001E710((uint64_t)v3, v1, v2, sub_10001DD78);

  sub_10001EC80(v1, v2);
  (*(void (**)(void, void))(*(void *)(v0 + 24) + 16))(*(void *)(v0 + 24), 0);
  _Block_release(*(const void **)(v0 + 24));
  int v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void *sub_10001E420(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  memset(v24, 0, sizeof(v24));
  id v7 = (id)MobileGestalt_get_current_device();
  if (!v7) {
LABEL_15:
  }
    __break(1u);
  uint64_t v8 = v7;
  id v9 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

  if (!v9)
  {
    sub_10001ECD8();
    swift_allocError();
    *(void *)(v16 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(v16 + 16) = 0;
    *(void *)uint64_t v16 = 0;
    *(unsigned char *)(v16 + 24) = 2;
    return (void *)swift_willThrow();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v11 > (unint64_t)&_mh_execute_header)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1001A9C5C(v10 + 32, (v11 - 1), (uint64_t)v24);
  if (v12)
  {
    uint64_t v13 = v12;
    sub_10001ECD8();
    swift_allocError();
    *(void *)uint64_t v14 = v13;
    *(void *)(v14 + _Block_object_dispose(&a9, 8) = 0xD000000000000018;
    *(void *)(v14 + 16) = 0x800000010044ACC0;
    *(unsigned char *)(v14 + 24) = 0;
    swift_willThrow();
    return (void *)swift_release();
  }
  swift_release();
  v23[0] = 0;
  v23[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  uint64_t result = (void *)CPSharedResourcesDirectory();
  if (result)
  {
    id v22 = result;
    type metadata accessor for CFString(0);
    _print_unlocked<A, B>(_:_:)();

    v17._object = (void *)0x800000010044ACE0;
    v17._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v17);
    LODWORD(v23[0]) = 0;
    uint64_t v18 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    unsigned int v19 = sub_1000FD1B8(0, (uint64_t)v24, v18 + 32, (uint64_t)v23);
    swift_release();
    if (v19)
    {
      sub_10001ECD8();
      swift_allocError();
      *(void *)uint64_t v20 = v19;
      *(void *)(v20 + _Block_object_dispose(&a9, 8) = 0xD00000000000001CLL;
      *(void *)(v20 + 16) = 0x800000010044AD00;
      *(unsigned char *)(v20 + 24) = 0;
      return (void *)swift_willThrow();
    }
    int v21 = v23[0];
    a4(LODWORD(v23[0]), a2, a3);
    return (void *)sub_1000FD91C(v21);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_10001E710(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void, uint64_t, unint64_t))
{
  memset(v24, 0, sizeof(v24));
  id v7 = (id)MobileGestalt_get_current_device();
  if (!v7) {
LABEL_16:
  }
    __break(1u);
  uint64_t v8 = v7;
  id v9 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

  if (!v9)
  {
    sub_10001ECD8();
    swift_allocError();
    *(void *)(v15 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(v15 + 16) = 0;
    *(void *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 24) = 2;
LABEL_11:
    swift_willThrow();
    return (void *)sub_10001EC80(a2, a3);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v11 > (unint64_t)&_mh_execute_header)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1001A9C5C(v10 + 32, (v11 - 1), (uint64_t)v24);
  if (v12)
  {
    uint64_t v13 = v12;
    sub_10001ECD8();
    swift_allocError();
    *(void *)uint64_t v14 = v13;
    *(void *)(v14 + _Block_object_dispose(&a9, 8) = 0xD000000000000018;
    *(void *)(v14 + 16) = 0x800000010044ACC0;
    *(unsigned char *)(v14 + 24) = 0;
    swift_willThrow();
    swift_release();
    return (void *)sub_10001EC80(a2, a3);
  }
  swift_release();
  v23[0] = 0;
  v23[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  uint64_t result = (void *)CPSharedResourcesDirectory();
  if (result)
  {
    id v22 = result;
    type metadata accessor for CFString(0);
    _print_unlocked<A, B>(_:_:)();

    v17._object = (void *)0x800000010044ACE0;
    v17._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v17);
    LODWORD(v23[0]) = 0;
    uint64_t v18 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    unsigned int v19 = sub_1000FD1B8(0, (uint64_t)v24, v18 + 32, (uint64_t)v23);
    swift_release();
    if (!v19)
    {
      int v21 = v23[0];
      a4(LODWORD(v23[0]), a2, a3);
      sub_1000FD91C(v21);
      return (void *)sub_10001EC80(a2, a3);
    }
    sub_10001ECD8();
    swift_allocError();
    *(void *)uint64_t v20 = v19;
    *(void *)(v20 + _Block_object_dispose(&a9, 8) = 0xD00000000000001CLL;
    *(void *)(v20 + 16) = 0x800000010044AD00;
    *(unsigned char *)(v20 + 24) = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id sub_10001EA4C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FairPlayService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FairPlayService()
{
  return self;
}

uint64_t sub_10001EAAC()
{
  objc_super v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  int v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1005A3590 + dword_1005A3590);
  return v6(v2, v3, v4);
}

uint64_t sub_10001EB64()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  int v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1005A63C8 + dword_1005A63C8);
  return v6(v2, v3, v4);
}

uint64_t sub_10001EC28(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_10001EC80(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t sub_10001ECD8()
{
  unint64_t result = qword_1005A35B0;
  if (!qword_1005A35B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A35B0);
  }
  return result;
}

uint64_t sub_10001ED30()
{
  _Block_release(*(const void **)(v0 + 24));
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001ED78()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  int v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100005040;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1005A35B8 + dword_1005A35B8);
  return v6(v2, v3, v4);
}

uint64_t sub_10001EE34(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000184D8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1005A63D0 + dword_1005A63D0);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10001EF04()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_1005A35D8 + dword_1005A35D8);
  return v6(v2, v3, v4);
}

uint64_t sub_10001EFC0(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = __DataStorage._length.getter();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      id v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = sub_100036C48(v4, v8);
      swift_release();
      return v3;
    }
    unint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10001F0AC()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001F0EC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_1005A35F8 + dword_1005A35F8);
  return v6(v2, v3, v4);
}

uint64_t sub_10001F1A8()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t initializeBufferWithCopyOfBuffer for FairPlayService.Error(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_10001F21C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for FairPlayService.Error(uint64_t a1)
{
  return sub_10001F250(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_10001F250(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FairPlayService.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_10001F21C(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for FairPlayService.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_10001F21C(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_10001F250(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for FairPlayService.Error(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FairPlayService.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_10001F250(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FairPlayService.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FairPlayService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10001F434(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10001F450(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(void *)__n128 result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FairPlayService.Error()
{
  return &type metadata for FairPlayService.Error;
}

unint64_t sub_10001F480()
{
  unint64_t result = qword_1005A3618;
  if (!qword_1005A3618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3618);
  }
  return result;
}

uint64_t sub_10001F4D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v101 = a2;
  uint64_t v102 = a3;
  uint64_t v105 = a1;
  uint64_t v90 = a4;
  uint64_t v76 = type metadata accessor for Logger();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v97 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  v98 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v8 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  unsigned __int8 v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v104 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v14 - 8);
  v95 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for Date();
  uint64_t v100 = *(void *)(v106 - 8);
  uint64_t v16 = __chkstk_darwin(v106);
  v77 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  v86 = (char *)&v74 - v19;
  __chkstk_darwin(v18);
  v87 = (char *)&v74 - v20;
  uint64_t v21 = sub_10001644C(&qword_1005A3660);
  __chkstk_darwin(v21 - 8);
  unsigned int v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10001644C(&qword_1005A3668);
  __chkstk_darwin(v24 - 8);
  unsigned int v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for DateComponents();
  uint64_t v91 = *(void *)(v93 - 8);
  uint64_t v27 = __chkstk_darwin(v93);
  v83 = (char *)&v74 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v103 = (char *)&v74 - v29;
  uint64_t v30 = type metadata accessor for Calendar();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  id v33 = (char *)&v74 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  uint64_t v89 = v31;
  id v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
  uint64_t v94 = v30;
  uint64_t v82 = v31 + 56;
  v81 = v34;
  v34(v26, 1, 1, v30);
  uint64_t v35 = type metadata accessor for TimeZone();
  uint64_t v36 = *(void *)(v35 - 8);
  long long v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
  uint64_t v80 = v35;
  v79 = v37;
  uint64_t v78 = v36 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v37)(v23, 1, 1);
  sub_10004274C(60);
  v84 = v26;
  v85 = v23;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  (*(void (**)(char *, void, uint64_t))(v104 + 104))(v13, enum case for Calendar.MatchingPolicy.nextTime(_:), v11);
  uint64_t v108 = 0;
  swift_stdlib_random();
  uint64_t v38 = v8;
  id v39 = (unsigned int *)&enum case for Calendar.RepeatedTimePolicy.first(_:);
  if ((v108 & 0x20000) != 0) {
    id v39 = (unsigned int *)&enum case for Calendar.RepeatedTimePolicy.last(_:);
  }
  uint64_t v40 = v96;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *v39, v96);
  uint64_t v41 = v97;
  id v42 = v98;
  uint64_t v43 = v99;
  (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for Calendar.SearchDirection.forward(_:), v99);
  uint64_t v44 = (uint64_t)v95;
  v92 = v33;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  uint64_t v45 = v100;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v40);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v13, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v44, 1, v106) == 1)
  {
    uint64_t v46 = v105;
    sub_1000214BC(v44);
    unsigned __int8 v47 = v88;
    static Logger.download.getter();
    id v48 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v86, v102, v106);
    NSString v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v49, v50))
    {

      (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v106);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v76);
      goto LABEL_12;
    }
    uint64_t v51 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v107 = v46;
    uint64_t v108 = v52;
    *(_DWORD *)uint64_t v51 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 12) = 2048;
    uint64_t v107 = v101;
    uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 22) = 2048;
    double v54 = a5 / 60.0;
    if ((~COERCE__INT64(a5 / 60.0) & 0x7FF0000000000000) != 0)
    {
      if (v54 > -9.22337204e18)
      {
        if (v54 < 9.22337204e18)
        {
          uint64_t v107 = (uint64_t)v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v51 + 32) = 2080;
          uint64_t v55 = v47;
          uint64_t v56 = v106;
          sub_10002151C();
          uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v107 = sub_1000F7290(v57, v58, &v108);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v100 + 8))(v48, v56);
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Received an optimal download window but we weren't able to create valid dates with the provided data: %ld:%ld %ld minutes at %s", (uint8_t *)v51, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v75 + 8))(v55, v76);
LABEL_12:
          (*(void (**)(char *, uint64_t))(v91 + 8))(v103, v93);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v92, v94);
          uint64_t v72 = type metadata accessor for DateInterval();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v90, 1, 1, v72);
        }
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v59 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v87, v44, v106);
  uint64_t v60 = v94;
  v81(v84, 1, 1, v94);
  v79(v85, 1, 1, v80);
  id v61 = v83;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  uint64_t v62 = v45;
  uint64_t v63 = v92;
  char v64 = Calendar.date(_:matchesComponents:)();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v91 + 8);
  id v66 = v61;
  uint64_t v67 = v93;
  v65(v66, v93);
  uint64_t v68 = v60;
  v69 = v63;
  if (v64)
  {
    uint64_t v70 = v106;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v77, v59, v106);
    uint64_t v71 = v90;
    DateInterval.init(start:duration:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v70);
LABEL_16:
    v65(v103, v67);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v69, v68);
    uint64_t v73 = type metadata accessor for DateInterval();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v71, 0, 1, v73);
  }
  uint64_t result = sub_10004274C(5);
  if ((unsigned __int128)(result * (__int128)60) >> 64 != (60 * result) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((unsigned __int128)(60 * result * (__int128)60) >> 64 == (3600 * result) >> 63)
  {
    Date.addingTimeInterval(_:)();
    uint64_t v71 = v90;
    DateInterval.init(start:duration:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v106);
    goto LABEL_16;
  }
LABEL_21:
  __break(1u);
  return result;
}

void sub_100020220(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(void)@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v102 = a4;
  uint64_t v113 = a3;
  uint64_t v115 = a1;
  uint64_t v97 = a5;
  uint64_t v83 = type metadata accessor for Logger();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  v95 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v109 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  v110 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v106 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v107 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v103 = *(void *)(v11 - 8);
  uint64_t v12 = v103;
  uint64_t v104 = v11;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v15 - 8);
  uint64_t v105 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for Date();
  uint64_t v112 = *(void *)(v116 - 8);
  uint64_t v17 = __chkstk_darwin(v116);
  v84 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v93 = (char *)&v80 - v20;
  __chkstk_darwin(v19);
  uint64_t v94 = (char *)&v80 - v21;
  uint64_t v22 = sub_10001644C(&qword_1005A3660);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10001644C(&qword_1005A3668);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for DateComponents();
  uint64_t v98 = *(void *)(v100 - 8);
  uint64_t v28 = __chkstk_darwin(v100);
  uint64_t v90 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v114 = (char *)&v80 - v30;
  uint64_t v31 = type metadata accessor for Calendar();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  id v34 = (char *)&v80 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  uint64_t v96 = v32;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  uint64_t v101 = v31;
  uint64_t v89 = v32 + 56;
  v88 = v35;
  v35(v27, 1, 1, v31);
  uint64_t v36 = type metadata accessor for TimeZone();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
  uint64_t v87 = v36;
  v86 = v38;
  uint64_t v85 = v37 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v38)(v24, 1, 1);
  sub_10004274C(60);
  uint64_t v81 = a2;
  uint64_t v91 = v27;
  v92 = v24;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  id v39 = v14;
  uint64_t v40 = v104;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for Calendar.MatchingPolicy.nextTime(_:), v104);
  uint64_t v118 = 0;
  swift_stdlib_random();
  uint64_t v41 = v106;
  id v42 = v107;
  uint64_t v43 = (unsigned int *)&enum case for Calendar.RepeatedTimePolicy.first(_:);
  if ((v118 & 0x20000) != 0) {
    uint64_t v43 = (unsigned int *)&enum case for Calendar.RepeatedTimePolicy.last(_:);
  }
  uint64_t v44 = v108;
  (*(void (**)(char *, void, uint64_t))(v106 + 104))(v107, *v43, v108);
  uint64_t v45 = v109;
  uint64_t v46 = v110;
  uint64_t v47 = v111;
  (*(void (**)(char *, void, uint64_t))(v109 + 104))(v110, enum case for Calendar.SearchDirection.forward(_:), v111);
  uint64_t v48 = (uint64_t)v105;
  uint64_t v99 = v34;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  uint64_t v49 = v112;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v44);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v39, v40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v48, 1, v116) == 1)
  {
    uint64_t v50 = v115;
    sub_1000214BC(v48);
    uint64_t v51 = v95;
    static Logger.download.getter();
    uint64_t v52 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v93, v113, v116);
    id v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v53, v54))
    {

      (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v116);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
      goto LABEL_12;
    }
    uint64_t v55 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    uint64_t v117 = v50;
    uint64_t v118 = v56;
    *(_DWORD *)uint64_t v55 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v55 + 12) = 2048;
    uint64_t v117 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v55 + 22) = 2048;
    double v57 = a6 / 60.0;
    if ((~COERCE__INT64(a6 / 60.0) & 0x7FF0000000000000) != 0)
    {
      if (v57 > -9.22337204e18)
      {
        if (v57 < 9.22337204e18)
        {
          uint64_t v117 = (uint64_t)v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v55 + 32) = 2080;
          sub_10002151C();
          uint64_t v58 = v116;
          uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v117 = sub_1000F7290(v59, v60, &v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v112 + 8))(v52, v58);
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Received an optimal download window but we weren't able to create valid dates with the provided data: %ld:%ld %ld minutes at %s", (uint8_t *)v55, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
LABEL_12:
          (*(void (**)(char *, uint64_t))(v98 + 8))(v114, v100);
          (*(void (**)(char *, uint64_t))(v96 + 8))(v99, v101);
          uint64_t v74 = type metadata accessor for DateInterval();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v97, 1, 1, v74);
          goto LABEL_13;
        }
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v61 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v94, v48, v116);
  uint64_t v62 = v101;
  v88(v91, 1, 1, v101);
  v86(v92, 1, 1, v87);
  uint64_t v63 = v90;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  uint64_t v64 = v49;
  uint64_t v65 = v99;
  char v66 = Calendar.date(_:matchesComponents:)();
  uint64_t v67 = *(void (**)(char *, uint64_t))(v98 + 8);
  uint64_t v68 = v63;
  uint64_t v69 = v100;
  v67(v68, v100);
  uint64_t v70 = v62;
  if (v66)
  {
    uint64_t v71 = v116;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v84, v61, v116);
    uint64_t v72 = v97;
    DateInterval.init(start:duration:)();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v61, v71);
    v67(v114, v69);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v65, v70);
    uint64_t v73 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v72, 0, 1, v73);
LABEL_13:
    uint64_t v75 = v102;
LABEL_17:
    _Block_release(v75);
    return;
  }
  uint64_t v76 = v102;
  uint64_t v77 = v102[2](v102);
  if ((unsigned __int128)(v77 * (__int128)60) >> 64 != (60 * v77) >> 63) {
    goto LABEL_21;
  }
  if ((unsigned __int128)(60 * v77 * (__int128)60) >> 64 == (3600 * v77) >> 63)
  {
    Date.addingTimeInterval(_:)();
    uint64_t v78 = v97;
    DateInterval.init(start:duration:)();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v61, v116);
    v67(v114, v69);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v65, v62);
    uint64_t v79 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v78, 0, 1, v79);
    uint64_t v75 = v76;
    goto LABEL_17;
  }
LABEL_22:
  __break(1u);
}

uint64_t type metadata accessor for StoreItemResponseSwift()
{
  return self;
}

uint64_t sub_1000214BC(uint64_t a1)
{
  uint64_t v2 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10002151C()
{
  unint64_t result = qword_1005A4E30;
  if (!qword_1005A4E30)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4E30);
  }
  return result;
}

id sub_100021574()
{
  id result = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:-1];
  qword_1005A3670 = (uint64_t)result;
  return result;
}

uint64_t sub_1000215AC()
{
  uint64_t v1 = OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping);
  }
  else
  {
    uint64_t v2 = sub_100021614();
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100021614()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for CocoaError.Code();
  __chkstk_darwin(v1);
  uint64_t v2 = Data.init(contentsOf:options:)();
  unint64_t v4 = v3;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10001644C(&qword_1005A3828);
  sub_10002E6B0(&qword_1005A3840);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_10001EC80(v2, v4);
  swift_release();
  return v6;
}

uint64_t sub_100021B08(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v42 = a1;
  uint64_t v43 = a2;
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[0] = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v41[0] - 8);
  __chkstk_darwin(v41[0]);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[1] = self;
  id v11 = sub_10030B11C();
  id v12 = objc_allocWithZone((Class)AMSMediaTokenService);
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 initWithClientIdentifier:v13 bag:v11];

  *(void *)(v3 + 40) = v14;
  self;
  id v15 = sub_100013350();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  unint64_t v44 = 0xD000000000000020;
  unint64_t v45 = 0x800000010044AF90;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  sub_1000164E0();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void))(v8 + 8))(v10, v41[0]);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) = 0;
  *(void *)(v3
            + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping) = 0;
  uint64_t v16 = v42;
  uint64_t v17 = v43;
  *(void *)(v3 + 16) = v42;
  *(void *)(v3 + 24) = v17;
  uint64_t v18 = *(void **)(v3 + 40);
  id v19 = v16;
  id v20 = v18;
  id v21 = sub_10030B11C();
  id v22 = [objc_allocWithZone((Class)AMSMediaRequestEncoder) initWithTokenService:v20 bag:v21];

  *(void *)(v3 + 32) = v22;
  uint64_t v23 = self;
  id v24 = v22;
  id v25 = [v23 currentProcess];
  [v24 setClientInfo:v25];

  id v26 = *(id *)(v3 + 32);
  swift_bridgeObjectRetain();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v26 setLogKey:v27];

  id v28 = [objc_allocWithZone((Class)AMSURLSession) init];
  *(void *)(v3 + 4_Block_object_dispose(&a9, 8) = v28;
  uint64_t v29 = *(void *)(v3 + 40);
  id v30 = objc_allocWithZone((Class)AMSMediaProtocolHandler);
  id v31 = v28;
  id v32 = [v30 initWithTokenService:v29];
  [v31 setProtocolHandler:v32];

  uint64_t v33 = *(void **)(v3 + 48);
  id v34 = objc_allocWithZone((Class)AMSMediaResponseDecoder);
  id v35 = v33;
  id v36 = [v34 init];
  [v35 setResponseDecoder:v36];

  uint64_t v37 = *(void **)(v3 + 48);
  id v38 = *(id *)(v3 + 40);
  id v39 = v37;
  [v38 setSession:v39];

  return v3;
}

uint64_t sub_100021FD0()
{
  v1[66] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[67] = v2;
  v1[68] = *(void *)(v2 - 8);
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  v1[49] = _swiftEmptyArrayStorage;
  uint64_t v3 = (void *)swift_task_alloc();
  v1[76] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100022148;
  return sub_100028934();
}

uint64_t sub_100022148(uint64_t a1)
{
  *(void *)(*(void *)v1 + 616) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100022274, 0, 0);
}

uint64_t sub_100022274()
{
  uint64_t v1 = *(void **)(v0 + 616);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 624) = v2;
  if (v2)
  {
    *(void *)(v0 + 64_Block_object_dispose(&a9, 8) = 0;
    *(_OWORD *)(v0 + 632) = 0u;
    if (!v1[2]) {
      __break(1u);
    }
    uint64_t v3 = v1[5];
    *(void *)(v0 + 656) = v3;
    uint64_t v4 = v1[7];
    *(void *)(v0 + 664) = v4;
    uint64_t v5 = v1[6];
    uint64_t v6 = (void *)v1[4];
    *(void *)(v0 + 672) = v6;
    id v7 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 680) = v8;
    void *v8 = v0;
    v8[1] = sub_1000227E8;
    return sub_100025D98((uint64_t)v6, v3, v5, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(*(void *)(v0 + 528)
                   + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) & 1) != 0)
    {
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      *(void *)(v0 + 456) = sub_1000215AC();
      sub_10001644C(&qword_1005A3828);
      sub_10002E6B0(&qword_1005A3830);
      uint64_t v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      swift_release();
      Data.write(to:options:)();
      sub_10001EC80(v10, v12);
    }
    sub_100018DD4(0);
    uint64_t v13 = *(void *)(v0 + 392);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v14(v13);
  }
}

uint64_t sub_1000227E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[86] = a1;
  v4[87] = a2;
  v4[88] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1000245B0;
  }
  else {
    uint64_t v5 = sub_100022930;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100022930()
{
  uint64_t v203 = v0;
  uint64_t v2 = *(void (**)(id *))(v0 + 688);
  if (!v2)
  {
    uint64_t v11 = *(void *)(v0 + 672);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v18 = *(void *)(v0 + 704);
    uint64_t v19 = *(void *)(v0 + 640);
    uint64_t v2 = *(void (**)(id *))(v0 + 632);
    goto LABEL_97;
  }
  uint64_t v196 = *(void *)(v0 + 696);
  uint64_t v3 = *(void **)(v0 + 672);
  v180 = (uint64_t *)(v0 + 528);
  swift_bridgeObjectRetain_n();
  sub_10009BC14((unint64_t)v2, (void (*)(uint64_t *__return_ptr, id *))sub_100024E28, 0);
  static Logger.updates.getter();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  id v4 = v3;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v5 = v4;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v198 = (uint64_t)v2;
  if (!os_log_type_enabled(v6, v7))
  {
    id v20 = *(void **)(v0 + 672);
    uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 600);
    uint64_t v21 = *(void *)(v0 + 544);
    uint64_t v22 = *(void *)(v0 + 536);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    v199 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v199(isUniquelyReferenced_nonNull_native, v22);
    goto LABEL_20;
  }
  LOBYTE(v194) = v7;
  v195 = v6;
  uint64_t v2 = (void (*)(id *))(v0 + 488);
  unint64_t v8 = *(void *)(v0 + 688);
  uint64_t v9 = *(void *)(v0 + 528);
  uint64_t isUniquelyReferenced_nonNull_native = swift_slowAlloc();
  uint64_t v10 = (void *)swift_slowAlloc();
  *(void *)(v0 + 472) = swift_slowAlloc();
  *(_DWORD *)uint64_t isUniquelyReferenced_nonNull_native = 138413314;
  uint64_t v11 = *(void *)(v9 + 16);
  unint64_t v12 = *(void **)(v11 + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
  *(void *)(v0 + 480) = v12;
  id v13 = v12;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v197 = (uint64_t)v10;
  void *v10 = v12;
  swift_release_n();
  *(_WORD *)(isUniquelyReferenced_nonNull_native + 12) = 2050;
  if (v8 >> 62) {
    goto LABEL_121;
  }
  uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    *(void *)uint64_t v2 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(isUniquelyReferenced_nonNull_native + 22) = 2082;
    unint64_t v15 = *(void *)(v11 + OBJC_IVAR____TtC9appstored14UpdatesContext_reason);
    type metadata accessor for LoadSoftwareUpdatesReason(0);
    if (v15 > 8) {
      break;
    }
    if (((1 << v15) & 0xD6) != 0)
    {
      uint64_t v16 = 0x756F72676B636162;
      unint64_t v17 = 0xEB0000000020646ELL;
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0xE000000000000000;
    }
    uint64_t v23 = *(void **)(v0 + 672);
    *(void *)(v0 + 504) = sub_1000F7290(v16, v17, (uint64_t *)(v0 + 472));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(isUniquelyReferenced_nonNull_native + 32) = 2082;
    if (v14 == 1) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = 115;
    }
    if (v14 == 1) {
      unint64_t v25 = 0xE000000000000000;
    }
    else {
      unint64_t v25 = 0xE100000000000000;
    }
    *(void *)(v0 + 512) = sub_1000F7290(v24, v25, (uint64_t *)(v0 + 472));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v2 = (void (*)(id *))v198;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(isUniquelyReferenced_nonNull_native + 42) = 2114;
    Class isa = (Class)objc_msgSend(v23, "ams_DSID");
    if (!isa)
    {
      sub_100018D68(0, (unint64_t *)&qword_1005A3230);
      Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    }
    NSString v27 = *(void **)(v0 + 672);
    uint64_t v200 = *(void *)(v0 + 600);
    uint64_t v28 = *(void *)(v0 + 544);
    uint64_t v29 = *(void *)(v0 + 536);
    *(void *)(v0 + 520) = isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)(v197 + _Block_object_dispose(&a9, 8) = isa;

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v195, (os_log_type_t)v194, "[%@] ╒ Received %{public}ld %{public}sserver update%{public}s for account: %{public}@", (uint8_t *)isUniquelyReferenced_nonNull_native, 0x34u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v30 = v200;
    v199 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v199(v30, v29);
LABEL_20:
    unint64_t v31 = *(void *)(v0 + 688);
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v11) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v11) {
        goto LABEL_35;
      }
    }
    if (v11 < 1) {
      goto LABEL_120;
    }
    uint64_t v32 = 0;
    unint64_t v33 = *(void *)(v0 + 688) & 0xC000000000000001;
    uint64_t v197 = 138412546;
    do
    {
      if (v33) {
        id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v37 = *((id *)v2 + v32 + 4);
      }
      id v38 = v37;
      static Logger.updates.getter();
      swift_retain_n();
      id v39 = v38;
      id v34 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      BOOL v41 = os_log_type_enabled(v34, v40);
      uint64_t v42 = *(void *)(v0 + 528);
      if (v41)
      {
        uint64_t v43 = swift_slowAlloc();
        unint64_t v44 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 138412546;
        unint64_t v45 = *(void **)(*(void *)(v42 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
        *(void *)(v43 + 4) = v45;
        *unint64_t v44 = v45;
        id v46 = v45;
        swift_release_n();
        *(_WORD *)(v43 + 12) = 2114;
        *(void *)(v43 + 14) = v39;
        v44[1] = v39;

        _os_log_impl((void *)&_mh_execute_header, v34, v40, "[%@] ├ UPD %{public}@", (uint8_t *)v43, 0x16u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        id v34 = v39;
      }
      ++v32;
      uint64_t v35 = *(void *)(v0 + 592);
      uint64_t v36 = *(void *)(v0 + 536);

      v199(v35, v36);
      uint64_t v2 = (void (*)(id *))v198;
    }
    while (v11 != v32);
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v49 = *(void *)(v196 + 16);
    if (v49)
    {
      aBlock = (void *)(v0 + 96);
      uint64_t v197 = v0 + 144;
      v191 = (_OWORD *)(v0 + 240);
      uint64_t v194 = v0 + 336;
      v179 = (_OWORD *)(v0 + 176);
      v193 = (void **)(v0 + 360);
      v181 = (void *)(v0 + 448);
      v189 = (void **)(v0 + 464);
      v190 = (uint64_t *)(v0 + 416);
      *(void *)(v0 + 336) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      uint64_t v2 = (void (*)(id *))(v196 + 40);
      uint64_t v182 = *(void *)(v0 + 704);
      while (1)
      {
        uint64_t v51 = *((void *)v2 - 1);
        unint64_t v50 = *(void *)v2;
        swift_bridgeObjectRetain_n();
        uint64_t v52 = sub_1000B05C0(v51, v50);
        if (v53)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v54 = v52;
          id v55 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v52, aBlock);
          id v56 = objc_allocWithZone((Class)ApplicationProxy);
          *v193 = 0;
          double v57 = [v56 initWithItemID:v55 error:v193];
          uint64_t v58 = *v193;
          uint64_t v198 = v51;
          if (v57)
          {
            uint64_t v59 = v57;
            id v60 = v58;

            id v61 = (void *)sub_1000429D8((uint64_t)_swiftEmptyArrayStorage);
            id v62 = [v59 bundleID];
            v195 = v59;
            if (v62)
            {
              uint64_t v11 = (uint64_t)v62;
              uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v65 = v64;

              *(void *)(v0 + 232) = &type metadata for String;
              *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v63;
              *(void *)(v0 + 216) = v65;
              sub_10000C948((_OWORD *)(v0 + 208), v191);
              uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v0 + 464) = v61;
              unint64_t v67 = sub_100049A4C(0x4449656C646E7562, 0xE800000000000000);
              uint64_t v68 = v61[2];
              BOOL v69 = (v66 & 1) == 0;
              uint64_t v70 = v68 + v69;
              if (__OFADD__(v68, v69)) {
                goto LABEL_117;
              }
              char v71 = v66;
              if (v61[3] >= v70)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  sub_1000D33EC();
                }
              }
              else
              {
                sub_1000CFEAC(v70, isUniquelyReferenced_nonNull_native);
                unint64_t v72 = sub_100049A4C(0x4449656C646E7562, 0xE800000000000000);
                if ((v71 & 1) != (v73 & 1)) {
                  goto LABEL_113;
                }
                unint64_t v67 = v72;
              }
              id v61 = *v189;
              if (v71)
              {
                uint64_t v97 = (_OWORD *)(v61[7] + 32 * v67);
                sub_10002E618((uint64_t)v97);
                sub_10000C948(v191, v97);
              }
              else
              {
                sub_1000D3058(v67, 0x4449656C646E7562, 0xE800000000000000, v191, *v189);
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRetain();
              unint64_t v92 = sub_100049A4C(0x4449656C646E7562, 0xE800000000000000);
              char v94 = v93;
              swift_bridgeObjectRelease();
              if (v94)
              {
                char v95 = swift_isUniquelyReferenced_nonNull_native();
                void *v181 = v61;
                if ((v95 & 1) == 0)
                {
                  sub_1000D33EC();
                  id v61 = (void *)*v181;
                }
                swift_bridgeObjectRelease();
                sub_10000C948((_OWORD *)(v61[7] + 32 * v92), v179);
                sub_1000B2ED4(v92, (uint64_t)v61);
                swift_bridgeObjectRelease();
                uint64_t v96 = v0 + 176;
              }
              else
              {
                uint64_t v96 = v0 + 176;
                _OWORD *v179 = 0u;
                *(_OWORD *)(v0 + 192) = 0u;
              }
              sub_100016714(v96, &qword_1005A5660);
            }
            *(void *)(v0 + 296) = &type metadata for Int;
            *(void *)(v0 + 272) = v54;
            sub_10000C948((_OWORD *)(v0 + 272), (_OWORD *)v197);
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = v61;
            uint64_t v11 = sub_100049A4C(0x44496D657469, 0xE600000000000000);
            uint64_t v99 = v61[2];
            BOOL v100 = (v98 & 1) == 0;
            uint64_t v101 = v99 + v100;
            if (__OFADD__(v99, v100))
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
              goto LABEL_119;
            }
            char v102 = v98;
            if (v61[3] >= v101)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_1000D33EC();
              }
            }
            else
            {
              sub_1000CFEAC(v101, isUniquelyReferenced_nonNull_native);
              unint64_t v103 = sub_100049A4C(0x44496D657469, 0xE600000000000000);
              if ((v102 & 1) != (v104 & 1))
              {
LABEL_113:
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              }
              uint64_t v11 = v103;
            }
            uint64_t v105 = *(void **)(v0 + 408);
            if (v102)
            {
              uint64_t v106 = (_OWORD *)(v105[7] + 32 * v11);
              sub_10002E618((uint64_t)v106);
              sub_10000C948((_OWORD *)v197, v106);
            }
            else
            {
              v105[((unint64_t)v11 >> 6) + 8] |= 1 << v11;
              uint64_t v107 = (void *)(v105[6] + 16 * v11);
              *uint64_t v107 = 0x44496D657469;
              v107[1] = 0xE600000000000000;
              sub_10000C948((_OWORD *)v197, (_OWORD *)(v105[7] + 32 * v11));
              uint64_t v108 = v105[2];
              BOOL v109 = __OFADD__(v108, 1);
              uint64_t v110 = v108 + 1;
              if (v109) {
                goto LABEL_118;
              }
              v105[2] = v110;
            }
            swift_bridgeObjectRelease();
            uint64_t v111 = *(void **)v194;
            char v112 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v194 = v111;
            if ((v112 & 1) == 0)
            {
              uint64_t v111 = sub_1000E7D54(0, v111[2] + 1, 1, v111);
              *(void *)uint64_t v194 = v111;
            }
            unint64_t v114 = v111[2];
            unint64_t v113 = v111[3];
            if (v114 >= v113 >> 1)
            {
              uint64_t v111 = sub_1000E7D54((void *)(v113 > 1), v114 + 1, 1, v111);
              *(void *)uint64_t v194 = v111;
            }
            v111[2] = v114 + 1;
            v111[v114 + 4] = v105;
            static Logger.updates.getter();
            swift_retain_n();
            uint64_t v115 = v195;
            swift_bridgeObjectRetain();
            uint64_t v116 = v115;
            uint64_t v117 = Logger.logObject.getter();
            os_log_type_t v118 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v117, v118))
            {
              os_log_type_t v186 = v118;
              log = v117;
              uint64_t v119 = *v180;
              uint64_t v120 = swift_slowAlloc();
              v184 = v116;
              v121 = (void *)swift_slowAlloc();
              uint64_t *v190 = swift_slowAlloc();
              *(_DWORD *)uint64_t v120 = 138412802;
              v122 = *(void **)(*(void *)(v119 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
              *(void *)(v0 + 424) = v122;
              id v123 = v122;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v121 = v122;
              swift_release_n();
              *(_WORD *)(v120 + 12) = 2082;
              id v124 = [v184 bundleID];
              if (v124)
              {
                v125 = v124;
                uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v128 = v127;
              }
              else
              {
                uint64_t v126 = 0;
                unint64_t v128 = 0xE000000000000000;
              }
              v195 = *(NSObject **)(v0 + 584);
              uint64_t v183 = *(void *)(v0 + 536);
              *(void *)(v0 + 432) = sub_1000F7290(v126, v128, v190);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              *(_WORD *)(v120 + 22) = 2082;
              swift_bridgeObjectRetain();
              *(void *)(v0 + 440) = sub_1000F7290(v198, v50, v190);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, log, v186, "[%@] ├ DEF { bundleID: %{public}s itemID: %{public}s }", (uint8_t *)v120, 0x20u);
              sub_10001644C((uint64_t *)&unk_1005A3AA0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v199((uint64_t)v195, v183);
            }
            else
            {
              uint64_t v129 = *(void *)(v0 + 584);
              uint64_t v130 = *(void *)(v0 + 536);

              swift_release_n();
              swift_bridgeObjectRelease_n();

              v199(v129, v130);
            }
          }
          else
          {
            id v74 = v58;
            uint64_t v75 = _convertNSErrorToError(_:)();

            v195 = v75;
            swift_willThrow();

            sub_10001644C((uint64_t *)&unk_1005A3620);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_100488070;
            *(void *)(inited + 32) = 0x44496D657469;
            *(void *)(inited + 40) = 0xE600000000000000;
            *(void *)(inited + 72) = &type metadata for String;
            *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v51;
            *(void *)(inited + 56) = v50;
            swift_bridgeObjectRetain();
            unint64_t v77 = sub_1000429D8(inited);
            uint64_t v78 = *(void **)v194;
            char v79 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v194 = v78;
            if ((v79 & 1) == 0)
            {
              uint64_t v78 = sub_1000E7D54(0, v78[2] + 1, 1, v78);
              *(void *)uint64_t v194 = v78;
            }
            unint64_t v81 = v78[2];
            unint64_t v80 = v78[3];
            if (v81 >= v80 >> 1)
            {
              uint64_t v78 = sub_1000E7D54((void *)(v80 > 1), v81 + 1, 1, v78);
              *(void *)uint64_t v194 = v78;
            }
            v78[2] = v81 + 1;
            v78[v81 + 4] = v77;
            static Logger.updates.getter();
            swift_retain_n();
            swift_bridgeObjectRetain();
            uint64_t v82 = Logger.logObject.getter();
            os_log_type_t v83 = static os_log_type_t.default.getter();
            BOOL v84 = os_log_type_enabled(v82, v83);
            uint64_t v85 = *(void *)(v0 + 560);
            uint64_t v86 = *(void *)(v0 + 536);
            uint64_t v87 = *(void *)(v0 + 528);
            if (v84)
            {
              uint64_t v187 = *(void *)(v0 + 536);
              uint64_t v88 = swift_slowAlloc();
              uint64_t v185 = v85;
              uint64_t v89 = (void *)swift_slowAlloc();
              v202[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v88 = 138412546;
              uint64_t v90 = *(void **)(*(void *)(v87 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
              *(void *)(v88 + 4) = v90;
              *uint64_t v89 = v90;
              id v91 = v90;
              swift_release_n();
              *(_WORD *)(v88 + 12) = 2082;
              swift_bridgeObjectRetain();
              *(void *)(v88 + 14) = sub_1000F7290(v198, v50, v202);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v82, v83, "[%@] Found deferred update but not proxy for for itemID: %{public}s", (uint8_t *)v88, 0x16u);
              sub_10001644C((uint64_t *)&unk_1005A3AA0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              swift_errorRelease();

              v199(v185, v187);
            }
            else
            {
              swift_release_n();
              swift_bridgeObjectRelease_n();
              swift_errorRelease();

              v199(v85, v86);
            }
            uint64_t v182 = 0;
          }
        }
        uint64_t v2 = (void (*)(id *))((char *)v2 + 16);
        if (!--v49)
        {
          swift_bridgeObjectRelease();
          if (*(void *)(*(void *)v194 + 16))
          {
            v131 = *(void **)(*(void *)(*(void *)(v0 + 528) + 16)
                            + OBJC_IVAR____TtC9appstored14UpdatesContext_requestToken);
            uint64_t v132 = self;
            id v133 = sub_10023217C(v132, v131);
            uint64_t v19 = *(void *)(v0 + 640);
            uint64_t v2 = *(void (**)(id *))(v0 + 632);
            uint64_t v18 = v182;
            if (v133)
            {
              v134 = v133;
              uint64_t v135 = swift_allocObject();
              *(void *)(v135 + 16) = v194;
              sub_100018DD4((uint64_t)v2);
              uint64_t v136 = swift_allocObject();
              uint64_t v2 = sub_10002E600;
              *(void *)(v136 + 16) = sub_10002E600;
              *(void *)(v136 + 24) = v135;
              *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = sub_100018DAC;
              *(void *)(v0 + 136) = v136;
              *(void *)(v0 + 96) = _NSConcreteStackBlock;
              *(void *)(v0 + 104) = 1107296256;
              *(void *)(v0 + 112) = sub_100018DE4;
              *(void *)(v0 + 120) = &unk_100511710;
              v137 = _Block_copy(aBlock);
              swift_retain();
              swift_release();
              sub_10023220C((uint64_t)v134, 1101, v137);

              _Block_release(v137);
              char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
              swift_release();
              if (isEscapingClosureAtFileLocation) {
                __break(1u);
              }
              uint64_t v19 = v135;
            }
          }
          else
          {
            uint64_t v19 = *(void *)(v0 + 640);
            uint64_t v2 = *(void (**)(id *))(v0 + 632);
            uint64_t v18 = v182;
          }
          swift_bridgeObjectRelease();
          goto LABEL_93;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v0 + 704);
    uint64_t v19 = *(void *)(v0 + 640);
    uint64_t v2 = *(void (**)(id *))(v0 + 632);
LABEL_93:
    static Logger.updates.getter();
    swift_retain_n();
    v139 = Logger.logObject.getter();
    os_log_type_t v140 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v139, v140))
    {
      LOBYTE(v194) = v0 + 88;
      v195 = *(NSObject **)(v0 + 672);
      uint64_t v196 = *(void *)(v0 + 656);
      uint64_t v197 = *(void *)(v0 + 664);
      uint64_t v141 = *(void *)(v0 + 528);
      uint64_t v198 = v19;
      v142 = (uint8_t *)swift_slowAlloc();
      v143 = (void *)swift_slowAlloc();
      *(_DWORD *)v142 = 138412290;
      uint64_t v144 = *(void *)(v141 + 16);
      v145 = v2;
      v146 = *(void **)(v144 + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 344) = v146;
      id v147 = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v143 = v146;
      uint64_t v2 = v145;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v139, v140, "[%@] ╘", v142, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v19 = v198;
      swift_slowDealloc();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();

      v139 = *(NSObject **)(v0 + 672);
    }
    uint64_t v11 = *(void *)(v0 + 576);
    uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 544);
    uint64_t v148 = *(void *)(v0 + 536);

    v199(v11, v148);
LABEL_97:
    unint64_t v149 = *(void *)(v0 + 648) + 1;
    if (v149 == *(void *)(v0 + 624))
    {
      swift_bridgeObjectRelease();
      if ((*(unsigned char *)(*(void *)(v0 + 528)
                     + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) & 1) != 0)
      {
        type metadata accessor for PropertyListEncoder();
        swift_allocObject();
        PropertyListEncoder.init()();
        *(void *)(v0 + 456) = sub_1000215AC();
        sub_10001644C(&qword_1005A3828);
        sub_10002E6B0(&qword_1005A3830);
        uint64_t v150 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        if (v18)
        {
          swift_bridgeObjectRelease();
          swift_release();
          static Logger.updates.getter();
          swift_retain();
          swift_errorRetain();
          swift_retain();
          swift_errorRetain();
          v162 = Logger.logObject.getter();
          os_log_type_t v163 = static os_log_type_t.error.getter();
          BOOL v164 = os_log_type_enabled(v162, v163);
          uint64_t v165 = *(void *)(v0 + 552);
          uint64_t v166 = *(void *)(v0 + 544);
          uint64_t v167 = *(void *)(v0 + 536);
          uint64_t v168 = *(void *)(v0 + 528);
          if (v164)
          {
            uint64_t v169 = swift_slowAlloc();
            uint64_t v192 = v166;
            v170 = (void *)swift_slowAlloc();
            v202[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v169 = 138412546;
            v201 = v2;
            v171 = *(void **)(*(void *)(v168 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
            *(void *)(v0 + 400) = v171;
            id v172 = v171;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v170 = v171;
            swift_release_n();
            *(_WORD *)(v169 + 12) = 2082;
            *(void *)(v0 + 384) = v18;
            swift_errorRetain();
            sub_10001644C(&qword_1005A4E40);
            uint64_t v173 = String.init<A>(describing:)();
            *(void *)(v0 + 376) = sub_1000F7290(v173, v174, v202);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v162, v163, "[%@] Error saving cached storefront mapping: %{public}s", (uint8_t *)v169, 0x16u);
            sub_10001644C((uint64_t *)&unk_1005A3AA0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
            (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v165, v167);
            uint64_t v175 = (uint64_t)v201;
          }
          else
          {
            swift_errorRelease();
            swift_release_n();
            swift_errorRelease();
            swift_errorRelease();

            (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v165, v167);
            uint64_t v175 = (uint64_t)v2;
          }
LABEL_110:
          sub_100018DD4(v175);
          uint64_t v176 = *(void *)(v0 + 392);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          v177 = *(uint64_t (**)(uint64_t))(v0 + 8);
          return v177(v176);
        }
        uint64_t v160 = v150;
        unint64_t v161 = v151;
        swift_bridgeObjectRelease();
        swift_release();
        Data.write(to:options:)();
        sub_10001EC80(v160, v161);
      }
      uint64_t v175 = (uint64_t)v2;
      goto LABEL_110;
    }
    *(void *)(v0 + 64_Block_object_dispose(&a9, 8) = v149;
    *(void *)(v0 + 640) = v19;
    *(void *)(v0 + 632) = v2;
    uint64_t v152 = *(void *)(v0 + 616);
    if (v149 < *(void *)(v152 + 16))
    {
      v153 = (void *)(v152 + 32 * v149);
      uint64_t v154 = v153[5];
      *(void *)(v0 + 656) = v154;
      uint64_t v155 = v153[7];
      *(void *)(v0 + 664) = v155;
      uint64_t v156 = v153[6];
      v157 = (void *)v153[4];
      *(void *)(v0 + 672) = v157;
      id v158 = v157;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v159 = (void *)swift_task_alloc();
      *(void *)(v0 + 680) = v159;
      void *v159 = v0;
      v159[1] = sub_1000227E8;
      return sub_100025D98((uint64_t)v157, v154, v156, v155);
    }
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v47 = *(void **)(v0 + 672);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  *(void *)(v0 + 496) = v15;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t sub_1000245B0()
{
  uint64_t v36 = v0;
  static Logger.updates.getter();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v31 = (void *)v0[84];
    uint64_t v32 = v0[68];
    uint64_t v33 = v0[67];
    uint64_t v34 = v0[71];
    uint64_t v3 = v0[66];
    uint64_t v4 = swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412546;
    uint64_t v6 = *(void **)(*(void *)(v3 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    v0[46] = v6;
    id v7 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v5 = v6;
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    v0[41] = sub_1000F7290(v8, v9, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] error requesting updates: %{public}s", (uint8_t *)v4, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  else
  {
    uint64_t v10 = (void *)v0[84];
    uint64_t v11 = v0[71];
    uint64_t v12 = v0[68];
    uint64_t v13 = v0[67];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  uint64_t v14 = v0[80];
  uint64_t v15 = v0[79];
  unint64_t v16 = v0[81] + 1;
  if (v16 == v0[78])
  {
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v0[66] + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) == 1)
    {
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      v0[57] = sub_1000215AC();
      sub_10001644C(&qword_1005A3828);
      sub_10002E6B0(&qword_1005A3830);
      uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      swift_release();
      Data.write(to:options:)();
      sub_10001EC80(v26, v28);
    }
    sub_100018DD4(v15);
    uint64_t v29 = v0[49];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(uint64_t))v0[1];
    return v30(v29);
  }
  else
  {
    v0[81] = v16;
    v0[80] = v14;
    v0[79] = v15;
    uint64_t v17 = v0[77];
    if (v16 >= *(void *)(v17 + 16)) {
      __break(1u);
    }
    uint64_t v18 = (void *)(v17 + 32 * v16);
    uint64_t v19 = v18[5];
    v0[82] = v19;
    uint64_t v20 = v18[7];
    v0[83] = v20;
    uint64_t v21 = v18[6];
    uint64_t v22 = (void *)v18[4];
    v0[84] = v22;
    id v23 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = (void *)swift_task_alloc();
    v0[85] = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_1000227E8;
    return sub_100025D98((uint64_t)v22, v19, v21, v20);
  }
}

void sub_100024E28(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    id v4 = objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdate());
    id v5 = sub_1000C4B78(v3);

    id v3 = v5;
  }
  *a2 = v3;
}

void sub_100024E8C(id *a1)
{
  id v3 = @"deferredUpdates";
  swift_bridgeObjectRetain();
  sub_10001644C(&qword_1005A5E50);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1003545D4(a1, (uint64_t)isa, (uint64_t)v3);
}

uint64_t sub_100024F28(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[26] = v3;
  v2[27] = *(void *)(v3 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  return _swift_task_switch(sub_100025004, 0, 0);
}

uint64_t sub_100025004()
{
  id v1 = [*(id *)(v0 + 192) longLongValue];
  uint64_t v2 = sub_1000215AC();
  if (*(void *)(v2 + 16))
  {
    unint64_t v3 = sub_100049AC4((uint64_t)v1);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v3);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_15:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v51(v7, v6);
    }
  }
  swift_bridgeObjectRelease();
  id v8 = objc_allocWithZone((Class)ACAccountType);
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 initWithIdentifier:v9 description:v10];

  id v12 = [objc_allocWithZone((Class)ACAccount) initWithAccountType:v11];
  *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v12;

  uint64_t v13 = *(void **)(v0 + 192);
  id v56 = v12;
  if (!v12)
  {
    static Logger.updates.getter();
    swift_retain_n();
    id v28 = v13;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    uint64_t v31 = v30;
    BOOL v32 = os_log_type_enabled(v29, v30);
    uint64_t v33 = *(void **)(v0 + 192);
    uint64_t v34 = *(void *)(v0 + 200);
    if (v32)
    {
      uint64_t v35 = swift_slowAlloc();
      typea = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 138412546;
      os_log_type_t v55 = v31;
      uint64_t v36 = v29;
      uint64_t v37 = *(void **)(*(void *)(v34 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 144) = v37;
      id v38 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *typea = v37;
      uint64_t v29 = v36;
      swift_release_n();
      *(_WORD *)(v35 + 12) = 2114;
      *(void *)(v0 + 136) = v33;
      id v39 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      typea[1] = v33;

      _os_log_impl((void *)&_mh_execute_header, v36, v55, "[%@] Unable to create an account for %{public}@", (uint8_t *)v35, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  id v14 = [v13 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v15._countAndFlagsBits = 12589;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, "ams_setStorefront:", v16);

  static Logger.updates.getter();
  swift_retain_n();
  id v17 = v13;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void **)(v0 + 192);
  uint64_t v22 = *(void *)(v0 + 200);
  if (v20)
  {
    os_log_type_t type = v19;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 138412546;
    unint64_t v25 = *(void **)(*(void *)(v22 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v0 + 176) = v25;
    id v26 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v25;
    swift_release_n();
    *(_WORD *)(v23 + 12) = 2114;
    *(void *)(v0 + 184) = v21;
    id v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24[1] = v21;

    _os_log_impl((void *)&_mh_execute_header, v18, type, "[%@] Looking up country code for %{public}@", (uint8_t *)v23, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
  uint64_t v40 = *(void *)(v0 + 240);
  uint64_t v41 = *(void *)(v0 + 208);
  uint64_t v42 = *(void *)(v0 + 216);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  *(void *)(v0 + 256) = v43;
  *(void *)(v0 + 264) = (v42 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v43(v40, v41);
  id v44 = [self currentProcess];
  id v45 = v56;
  NSString v46 = String._bridgeToObjectiveC()();
  NSString v47 = String._bridgeToObjectiveC()();
  id v48 = [self bagForProfile:v46 profileVersion:v47 processInfo:v44 account:v45];
  *(void *)(v0 + 272) = v48;

  id v49 = [v48 stringForKey:@"countryCode"];
  *(void *)(v0 + 280) = v49;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_100025734;
  uint64_t v50 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000;
  *(void *)(v0 + 96) = sub_100025CD4;
  *(void *)(v0 + 104) = &unk_1005116A8;
  *(void *)(v0 + 112) = v50;
  [v49 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100025734()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 28_Block_object_dispose(&a9, 8) = v1;
  if (v1) {
    uint64_t v2 = sub_10002598C;
  }
  else {
    uint64_t v2 = sub_100025844;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100025844()
{
  uint64_t v1 = *(void **)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 248);
  unint64_t v3 = *(void **)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void **)(v0 + 120);

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = [v3 longLongValue];
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000215AC();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1000D2138(v6, v8, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  *(void *)(v4
            + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping) = v10;

  swift_bridgeObjectRelease();
  *(unsigned char *)(v4 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) = 1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v12(v6, v8);
}

uint64_t sub_10002598C()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 280);
  swift_willThrow();

  static Logger.updates.getter();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v18 = *(void *)(v1 + 288);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v1 + 256);
    os_log_type_t v19 = *(void **)(v1 + 272);
    BOOL v20 = *(void **)(v1 + 248);
    uint64_t v5 = *(void *)(v1 + 200);
    uint64_t v21 = *(void *)(v1 + 208);
    uint64_t v22 = *(void *)(v1 + 232);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    uint64_t v8 = *(void **)(*(void *)(v5 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v1 + 152) = v8;
    id v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2082;
    *(void *)(v1 + 160) = v18;
    swift_errorRetain();
    sub_10001644C(&qword_1005A4E40);
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v1 + 16_Block_object_dispose(&a9, 8) = sub_1000F7290(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Unable to get country code from the bag: %{public}s", (uint8_t *)v6, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v23(v22, v21);
  }
  else
  {
    id v12 = *(void **)(v1 + 272);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v1 + 256);
    uint64_t v14 = *(void *)(v1 + 232);
    uint64_t v15 = *(void *)(v1 + 208);

    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();

    v13(v14, v15);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v16 = *(uint64_t (**)(void, void))(v1 + 8);
  return v16(0, 0);
}

uint64_t sub_100025CD4(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_10001644C(&qword_1005A4E40);
    uint64_t v6 = swift_allocError();
    void *v7 = a4;
    id v8 = a4;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    if (a2)
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 64) + 40);
      *(void *)uint64_t v9 = a2;
      *(unsigned char *)(v9 + _Block_object_dispose(&a9, 8) = a3;
      id v10 = a2;
      a1 = v4;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_100025D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[87] = v4;
  v5[86] = a4;
  v5[85] = a3;
  v5[84] = a2;
  v5[83] = a1;
  sub_10001644C((uint64_t *)&unk_1005A5670);
  v5[88] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v5[89] = v6;
  v5[90] = *(void *)(v6 - 8);
  v5[91] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[92] = v7;
  v5[93] = *(void *)(v7 - 8);
  v5[94] = swift_task_alloc();
  v5[95] = swift_task_alloc();
  v5[96] = swift_task_alloc();
  v5[97] = swift_task_alloc();
  return _swift_task_switch(sub_100025F48, 0, 0);
}

uint64_t sub_100025F48()
{
  static Logger.updates.getter();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[87];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = *(void **)(*(void *)(v3 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    v0[82] = v6;
    id v7 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Checking the bag for the appropriate language key…", v4, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v8 = v0[97];
  uint64_t v9 = v0[93];
  uint64_t v10 = v0[92];
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v0[98] = v11;
  v0[99] = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v8, v10);
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [self bagForProfile:v12 profileVersion:v13];
  v0[100] = v14;

  id v15 = [v14 stringForKey:@"language-tag"];
  v0[101] = v15;
  v0[10] = v0;
  v0[15] = v0 + 69;
  v0[11] = sub_10002627C;
  uint64_t v16 = swift_continuation_init();
  v0[39] = _NSConcreteStackBlock;
  v0[40] = 0x40000000;
  v0[41] = sub_100025CD4;
  v0[42] = &unk_100511648;
  v0[43] = v16;
  [v15 valueWithCompletion:v0 + 39];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_10002627C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 816) = v1;
  if (v1) {
    os_log_type_t v2 = sub_10002772C;
  }
  else {
    os_log_type_t v2 = sub_1000263B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000263B8()
{
  uint64_t v1 = *(void **)(v0 + 552);

  *(void *)(v0 + 824) = v1;
  uint64_t v2 = *(void *)(v0 + 720);
  uint64_t v3 = *(void *)(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 704);
  uint64_t v5 = *(void **)(v0 + 688);
  uint64_t v6 = *(void *)(v0 + 680);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000284E8(v6, v5, v7, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
  {
    sub_100016714(*(void *)(v0 + 704), (uint64_t *)&unk_1005A5670);
    static Logger.updates.getter();
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 696);
    if (v10)
    {
      NSString v12 = (uint8_t *)swift_slowAlloc();
      id v28 = (void *)swift_slowAlloc();
      *(_DWORD *)NSString v12 = 138412290;
      NSString v13 = *(void **)(*(void *)(v11 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 584) = v13;
      id v14 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v13;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] Not able to retrieve a valid URL to check for updates", v12, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v1 = *(void **)(v0 + 800);
    }
    else
    {
      swift_release_n();

      uint64_t v8 = *(NSObject **)(v0 + 800);
    }
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v24 = *(void *)(v0 + 768);
    uint64_t v25 = *(void *)(v0 + 736);

    v23(v24, v25);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void, void))(v0 + 8);
    return v26(0, 0);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 696);
    uint64_t v16 = *(void *)(v0 + 664);
    (*(void (**)(void, void, void))(*(void *)(v0 + 720) + 32))(*(void *)(v0 + 728), *(void *)(v0 + 704), *(void *)(v0 + 712));
    id v17 = *(void **)(v15 + 32);
    [v17 setAccount:v16];
    URL._bridgeToObjectiveC()(v18);
    BOOL v20 = v19;
    id v21 = [v17 requestWithURL:v19];
    *(void *)(v0 + 832) = v21;

    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 576;
    *(void *)(v0 + 152) = sub_100026808;
    uint64_t v22 = swift_continuation_init();
    *(void *)(v0 + 392) = _NSConcreteStackBlock;
    *(void *)(v0 + 400) = 0x40000000;
    *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = sub_100028428;
    *(void *)(v0 + 416) = &unk_100511678;
    *(void *)(v0 + 424) = v22;
    [v21 resultWithCompletion:v0 + 392];
    return _swift_continuation_await(v0 + 144);
  }
}

uint64_t sub_100026808()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 840) = v1;
  if (v1) {
    uint64_t v2 = sub_1000281AC;
  }
  else {
    uint64_t v2 = sub_100026944;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100026944()
{
  uint64_t v64 = v0;
  uint64_t v1 = (void *)v0[104];
  uint64_t v2 = v0[83];
  uint64_t v3 = (void *)v0[72];
  v0[106] = v3;

  id v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setHTTPMethod:v5];

  if (v2)
  {
    uint64_t v6 = (void *)v0[83];
    uint64_t v7 = self;
    v0[76] = 0;
    id v8 = sub_1002F2D98(v7, v6, 11, v0 + 76);
    os_log_type_t v9 = (void *)v0[76];
    if (v8)
    {
      BOOL v10 = v8;
      uint64_t v11 = (void *)v0[83];
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      id v14 = v9;
    }
    else
    {
      uint64_t v15 = (void *)v0[83];
      id v16 = v9;
      uint64_t v17 = _convertNSErrorToError(_:)();

      swift_willThrow();
      static Logger.updates.getter();
      swift_retain();
      id v18 = v15;
      swift_errorRetain();
      swift_retain();
      id v19 = v18;
      swift_errorRetain();
      BOOL v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        os_log_type_t v62 = v21;
        log = v20;
        uint64_t v22 = v0[87];
        id v59 = (id)v0[83];
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412802;
        uint64_t v25 = *(void **)(*(void *)(v22 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
        v0[77] = v25;
        id v26 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v24 = v25;
        swift_release_n();
        *(_WORD *)(v23 + 12) = 2114;
        Class isa = (Class)objc_msgSend(v59, "ams_DSID");
        if (!isa)
        {
          sub_100018D68(0, (unint64_t *)&qword_1005A3230);
          Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
        }
        id v28 = (void (*)(id, uint64_t))v0[98];
        uint64_t v58 = v0[92];
        id v60 = (id)v0[94];
        uint64_t v29 = (void *)v0[83];
        v0[78] = isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v24[1] = isa;

        *(_WORD *)(v23 + 22) = 2082;
        v0[79] = v17;
        swift_errorRetain();
        sub_10001644C(&qword_1005A4E40);
        uint64_t v30 = String.init<A>(describing:)();
        v0[80] = sub_1000F7290(v30, v31, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v62, "[%@] Error generating keybag for account: %{public}@ error: %{public}s", (uint8_t *)v23, 0x20u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        v28(v60, v58);
      }
      else
      {
        BOOL v32 = (void (*)(uint64_t, uint64_t))v0[98];
        uint64_t v33 = v0[94];
        uint64_t v34 = v0[92];
        uint64_t v35 = (void *)v0[83];

        swift_errorRelease();
        swift_release_n();

        swift_errorRelease();
        swift_errorRelease();

        v32(v33, v34);
      }
      uint64_t v2 = 0;
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v36 = v0[84];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v37 = self;
  swift_bridgeObjectRetain();
  id v38 = [v37 deviceGUID];
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v40;

  v0[44] = v36;
  v0[45] = v39;
  v0[46] = v41;
  v0[47] = v2;
  v0[48] = v13;
  sub_10002E4EC();
  v0[107] = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[108] = v42;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  id v43 = v4;
  Class v44 = Data._bridgeToObjectiveC()().super.isa;
  id v45 = sub_10025C358(v44);

  if (v45)
  {
    uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v48 = v47;

    v49.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001EC80(v46, v48);
  }
  else
  {
    v49.super.Class isa = 0;
  }
  uint64_t v50 = v0[87];
  [v43 setHTTPBody:v49.super.isa];

  NSString v51 = String._bridgeToObjectiveC()();
  NSString v52 = String._bridgeToObjectiveC()();
  [v43 setValue:v51 forHTTPHeaderField:v52];

  NSString v53 = String._bridgeToObjectiveC()();
  NSString v54 = String._bridgeToObjectiveC()();
  [v43 setValue:v53 forHTTPHeaderField:v54];

  id v55 = [*(id *)(v50 + 48) dataTaskPromiseWithRequest:v43];
  v0[109] = v55;
  v0[2] = v0;
  v0[7] = v0 + 71;
  v0[3] = sub_1000271B8;
  uint64_t v56 = swift_continuation_init();
  v0[54] = _NSConcreteStackBlock;
  v0[55] = 0x40000000;
  v0[56] = sub_100028428;
  v0[57] = &unk_100511690;
  v0[58] = v56;
  [v55 resultWithCompletion:v0 + 54];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000271B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 880) = v1;
  if (v1) {
    uint64_t v2 = sub_1000282D4;
  }
  else {
    uint64_t v2 = sub_1000272F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000272F4()
{
  uint64_t v1 = *(void **)(v0 + 872);
  uint64_t v2 = *(void **)(v0 + 568);
  *(void *)(v0 + 88_Block_object_dispose(&a9, 8) = v2;

  if ([v2 object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 472) = 0u;
    *(_OWORD *)(v0 + 48_Block_object_dispose(&a9, 8) = 0u;
  }
  sub_10002E540(v0 + 472, v0 + 504);
  if (*(void *)(v0 + 528))
  {
    sub_10001644C(&qword_1005A5E50);
    if (swift_dynamicCast()) {
      uint64_t v3 = *(void *)(v0 + 600);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    sub_100016714(v0 + 504, &qword_1005A5660);
    uint64_t v3 = 0;
  }
  uint64_t v4 = dword_1005A3970;
  id v5 = *(id *)(*(void *)(*(void *)(v0 + 696) + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 896) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000274B0;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005A3970 + v4))(v3, (uint64_t)v5);
}

uint64_t sub_1000274B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 904) = a1;
  *(void *)(v3 + 912) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000275E0, 0, 0);
}

uint64_t sub_1000275E0()
{
  uint64_t v1 = v0[114];
  uint64_t v2 = v0[113];
  uint64_t v3 = (void *)v0[111];
  uint64_t v4 = (void *)v0[106];
  uint64_t v5 = (void *)v0[103];
  uint64_t v6 = (void *)v0[100];
  uint64_t v7 = v0[91];
  uint64_t v8 = v0[90];
  uint64_t v9 = v0[89];
  sub_10001EC80(v0[107], v0[108]);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v10(v2, v1);
}

uint64_t sub_10002772C()
{
  uint64_t v1 = *(void **)(v0 + 808);
  swift_willThrow();

  type metadata accessor for Code(0);
  *(void *)(v0 + 592) = 204;
  swift_errorRetain();
  sub_10002E668(&qword_1005A3320, type metadata accessor for Code);
  char v2 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  if (v2)
  {
    swift_errorRelease();
    static Logger.updates.getter();
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 696);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      uint64_t v9 = *(void **)(*(void *)(v6 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 64_Block_object_dispose(&a9, 8) = v9;
      id v10 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v8 = v9;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Failed to get “language-tag” from the bag; falling back on “language”…",
        v7,
        0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v13 = *(void **)(v0 + 800);
    (*(void (**)(void, void))(v0 + 784))(*(void *)(v0 + 760), *(void *)(v0 + 736));
    id v14 = [v13 stringForKey:@"language"];
    *(void *)(v0 + 920) = v14;
    *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v0;
    *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v0 + 536;
    *(void *)(v0 + 216) = sub_100027B24;
    uint64_t v15 = swift_continuation_init();
    *(void *)(v0 + 272) = _NSConcreteStackBlock;
    *(void *)(v0 + 280) = 0x40000000;
    *(void *)(v0 + 28_Block_object_dispose(&a9, 8) = sub_100025CD4;
    *(void *)(v0 + 296) = &unk_100511660;
    *(void *)(v0 + 304) = v15;
    [v14 valueWithCompletion:v0 + 272];
    return _swift_continuation_await(v0 + 208);
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100027B24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240);
  *(void *)(*(void *)v0 + 92_Block_object_dispose(&a9, 8) = v1;
  if (v1) {
    char v2 = sub_1000280B0;
  }
  else {
    char v2 = sub_100027C60;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100027C60()
{
  uint64_t v1 = *(void **)(v0 + 536);

  *(void *)(v0 + 824) = v1;
  uint64_t v2 = *(void *)(v0 + 720);
  uint64_t v3 = *(void *)(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 704);
  BOOL v5 = *(void **)(v0 + 688);
  uint64_t v6 = *(void *)(v0 + 680);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000284E8(v6, v5, v7, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
  {
    sub_100016714(*(void *)(v0 + 704), (uint64_t *)&unk_1005A5670);
    static Logger.updates.getter();
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 696);
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      id v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      uint64_t v13 = *(void **)(*(void *)(v11 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 584) = v13;
      id v14 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v13;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] Not able to retrieve a valid URL to check for updates", v12, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v1 = *(void **)(v0 + 800);
    }
    else
    {

      swift_release_n();
      uint64_t v8 = *(NSObject **)(v0 + 800);
    }
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v24 = *(void *)(v0 + 768);
    uint64_t v25 = *(void *)(v0 + 736);

    v23(v24, v25);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v26 = *(uint64_t (**)(void, void))(v0 + 8);
    return v26(0, 0);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 696);
    uint64_t v16 = *(void *)(v0 + 664);
    (*(void (**)(void, void, void))(*(void *)(v0 + 720) + 32))(*(void *)(v0 + 728), *(void *)(v0 + 704), *(void *)(v0 + 712));
    uint64_t v17 = *(void **)(v15 + 32);
    [v17 setAccount:v16];
    URL._bridgeToObjectiveC()(v18);
    BOOL v20 = v19;
    id v21 = [v17 requestWithURL:v19];
    *(void *)(v0 + 832) = v21;

    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 576;
    *(void *)(v0 + 152) = sub_100026808;
    uint64_t v22 = swift_continuation_init();
    *(void *)(v0 + 392) = _NSConcreteStackBlock;
    *(void *)(v0 + 400) = 0x40000000;
    *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = sub_100028428;
    *(void *)(v0 + 416) = &unk_100511678;
    *(void *)(v0 + 424) = v22;
    [v21 resultWithCompletion:v0 + 392];
    return _swift_continuation_await(v0 + 144);
  }
}

uint64_t sub_1000280B0()
{
  uint64_t v1 = (void *)v0[115];
  uint64_t v2 = (void *)v0[100];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000281AC()
{
  uint64_t v1 = (void *)v0[104];
  uint64_t v2 = (void *)v0[103];
  uint64_t v3 = (void *)v0[100];
  uint64_t v4 = v0[91];
  uint64_t v5 = v0[90];
  uint64_t v6 = v0[89];
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000282D4()
{
  uint64_t v11 = (void *)v0[109];
  unint64_t v1 = v0[108];
  uint64_t v2 = v0[107];
  uint64_t v3 = (void *)v0[106];
  uint64_t v4 = (void *)v0[103];
  uint64_t v5 = (void *)v0[100];
  uint64_t v6 = v0[91];
  uint64_t v7 = v0[90];
  uint64_t v8 = v0[89];
  swift_willThrow();
  sub_10001EC80(v2, v1);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100028428(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10001644C(&qword_1005A4E40);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_1000284E8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v24[1] = a3;
  v24[2] = a4;
  uint64_t v7 = type metadata accessor for URLComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  BOOL v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  URLComponents.scheme.setter();
  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  strcpy((char *)v26, "/v1/catalog/");
  BYTE5(v26[1]) = 0;
  HIWORD(v26[1]) = -5120;
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x736574616470752FLL;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  URLComponents.path.setter();
  unint64_t v13 = *(void *)(*(void *)(v4 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_reason);
  if (v13 < 9)
  {
    sub_10001644C(&qword_1005A3818);
    type metadata accessor for URLQueryItem();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_100488170;
    URLQueryItem.init(name:value:)();
    id v14 = self;
    unsigned int v15 = [v14 deviceIsiPad];
    uint64_t v25 = v7;
    if (v15)
    {
      uint64_t v16 = (id *)&AMSMediaTaskPlatformiPad;
    }
    else
    {
      if (([v14 deviceIsiPhone] & 1) == 0
        && ![v14 deviceIsiPod])
      {
        NSString v17 = String._bridgeToObjectiveC()();
        goto LABEL_8;
      }
      uint64_t v16 = (id *)&AMSMediaTaskPlatformiPhone;
    }
    NSString v17 = *v16;
LABEL_8:
    id v18 = v17;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    URLQueryItem.init(name:value:)();
    URLQueryItem.init(name:value:)();
    URLComponents.queryItems.setter();
    self;
    id v19 = sub_10030B11C();
    NSString v20 = String._bridgeToObjectiveC()();
    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = sub_10030CC9C(v19, v20, v21);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    URLComponents.host.setter();
    URLComponents.url.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v25);
  }
  type metadata accessor for LoadSoftwareUpdatesReason(0);
  v26[0] = v13;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_100028934()
{
  v1[59] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[60] = v2;
  v1[61] = *(void *)(v2 - 8);
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  return _swift_task_switch(sub_100028A10, 0, 0);
}

uint64_t sub_100028A10()
{
  v0[65] = self;
  id v1 = sub_10030B11C();
  v0[66] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[67] = v2;
  v0[10] = v0;
  v0[15] = v0 + 56;
  v0[11] = sub_100028B5C;
  uint64_t v3 = swift_continuation_init();
  v0[30] = _NSConcreteStackBlock;
  v0[31] = 0x40000000;
  v0[32] = sub_10002D900;
  v0[33] = &unk_100511618;
  v0[34] = v3;
  sub_10030D528((uint64_t)v1, v2, 0, v0 + 30);
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_100028B5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 544) = v1;
  if (v1) {
    NSString v2 = sub_10002C214;
  }
  else {
    NSString v2 = sub_100028C6C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100028C6C()
{
  uint64_t v1 = *(void *)(v0 + 448);
  *(void *)(v0 + 552) = v1;
  NSString v2 = *(void **)(v0 + 536);

  static Logger.updates.getter();
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v19 = v1;
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412802;
    uint64_t v8 = *(void **)(*(void *)(v5 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v0 + 456) = v8;
    id v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2050;
    uint64_t v10 = *(void *)(*(void *)(v5 + 24) + 16);
    swift_release();
    *(void *)(v0 + 464) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v6 + 22) = 2050;
    *(void *)(v0 + 440) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Looking up %{public}ld apps with a batch size of %{public}ld", (uint8_t *)v6, 0x20u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = *(void *)(v0 + 512);
  uint64_t v12 = *(void *)(v0 + 480);
  uint64_t v13 = *(void *)(v0 + 488);
  id v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v0 + 560) = v14;
  *(void *)(v0 + 56_Block_object_dispose(&a9, 8) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v11, v12);
  id v15 = sub_10030B11C();
  *(void *)(v0 + 576) = v15;
  NSString v16 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 584) = v16;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 768;
  *(void *)(v0 + 24) = sub_100028FA0;
  uint64_t v17 = swift_continuation_init();
  *(void *)(v0 + 280) = _NSConcreteStackBlock;
  *(void *)(v0 + 28_Block_object_dispose(&a9, 8) = 0x40000000;
  *(void *)(v0 + 296) = sub_100073DBC;
  *(void *)(v0 + 304) = &unk_100511630;
  *(void *)(v0 + 312) = v17;
  sub_10030CFAC(v15, v16, 0, (void *)(v0 + 280));
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100028FA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 592) = v1;
  if (v1) {
    NSString v2 = sub_10002C558;
  }
  else {
    NSString v2 = sub_1000290B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000290B0()
{
  uint64_t v1 = (void *)v0;
  NSString v2 = *(void **)(v0 + 584);
  uint64_t v3 = *(void **)(v0 + 576);
  int v4 = *(unsigned __int8 *)(v0 + 768);

  uint64_t v7 = *(char **)(v1[59] + 24);
  uint64_t v192 = v1;
  if (v4 == 1)
  {
    uint64_t v7 = (char *)sub_10002D9B4((uint64_t)v7);
    uint64_t v8 = v7;
    id v9 = _swiftEmptyArrayStorage;
    goto LABEL_3;
  }
  uint64_t v92 = *((void *)v7 + 2);
  char v93 = (char *)_swiftEmptyArrayStorage;
  if (v92)
  {
    uint64_t v94 = swift_bridgeObjectRetain() + 64;
    char v95 = (char *)_swiftEmptyArrayStorage;
    v193 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v97 = v95;
      uint64_t v98 = *(void *)(v94 - 24);
      uint64_t v195 = *(void *)(v94 - 32);
      uint64_t v99 = *(void **)(v94 - 16);
      char v197 = *(unsigned char *)(v94 - 8);
      int v100 = *(unsigned __int8 *)(v94 - 7);
      uint64_t v101 = *(void **)v94;
      uint64_t v204 = *(void *)(v94 + 8);
      char v102 = *(void **)(v94 + 24);
      uint64_t v209 = *(void *)(v94 + 16);
      uint64_t v211 = *(void *)(v94 + 32);
      uint64_t v104 = *(void *)(v94 + 48);
      uint64_t v103 = *(void *)(v94 + 56);
      uint64_t v199 = *(void *)(v94 + 40);
      swift_bridgeObjectRetain_n();
      uint64_t v216 = v103;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v201 = v99;
      id v105 = v99;
      v206 = v101;
      id v106 = v101;
      v213 = v102;
      id v107 = v102;
      id v108 = v105;
      id v109 = v106;
      id v110 = v107;
      v218 = v108;
      if (v100 == 1)
      {
        char v95 = v97;
        uint64_t v111 = v109;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v95 = sub_1000E7A0C(0, *((void *)v97 + 2) + 1, 1, v97);
        }
        uint64_t v112 = v104;
        unint64_t v114 = *((void *)v95 + 2);
        unint64_t v113 = *((void *)v95 + 3);
        uint64_t v115 = v216;
        if (v114 >= v113 >> 1) {
          char v95 = sub_1000E7A0C((char *)(v113 > 1), v114 + 1, 1, v95);
        }
        *((void *)v95 + 2) = v114 + 1;
        uint64_t v96 = &v95[96 * v114];
        *((void *)v96 + 4) = v195;
        *((void *)v96 + 5) = v98;
        *((void *)v96 + 6) = v201;
        v96[56] = v197;
        v96[57] = 1;
      }
      else
      {
        char v95 = v97;
        uint64_t v111 = v109;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v116 = v193;
        }
        else {
          uint64_t v116 = sub_1000E7A0C(0, *((void *)v193 + 2) + 1, 1, v193);
        }
        uint64_t v112 = v104;
        unint64_t v118 = *((void *)v116 + 2);
        unint64_t v117 = *((void *)v116 + 3);
        uint64_t v115 = v216;
        if (v118 >= v117 >> 1) {
          uint64_t v116 = sub_1000E7A0C((char *)(v117 > 1), v118 + 1, 1, v116);
        }
        *((void *)v116 + 2) = v118 + 1;
        v193 = v116;
        uint64_t v96 = &v116[96 * v118];
        *((void *)v96 + 4) = v195;
        *((void *)v96 + 5) = v98;
        *((void *)v96 + 6) = v201;
        v96[56] = v197;
        v96[57] = 0;
      }
      *((void *)v96 + _Block_object_dispose(&a9, 8) = v206;
      *((void *)v96 + 9) = v204;
      *((void *)v96 + 10) = v209;
      *((void *)v96 + 11) = v213;
      *((void *)v96 + 12) = v211;
      *((void *)v96 + 13) = v199;
      *((void *)v96 + 14) = v112;
      *((void *)v96 + 15) = v115;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v94 += 96;
      --v92;
    }
    while (v92);
    uint64_t v7 = (char *)swift_bridgeObjectRelease();
    uint64_t v1 = v192;
    char v93 = v193;
  }
  else
  {
    char v95 = (char *)_swiftEmptyArrayStorage;
  }
  v1[76] = v93;
  v1[75] = v95;
  uint64_t v119 = *((void *)v95 + 2);
  if (v119)
  {
    uint64_t v120 = v1 + 18;
    swift_bridgeObjectRetain();
    uint64_t v121 = 32;
    v122 = &selRef_actionWithLabel_url_;
    do
    {
      unint64_t v128 = v95;
      long long v129 = *(_OWORD *)&v95[v121 + 16];
      *(_OWORD *)uint64_t v120 = *(_OWORD *)&v95[v121];
      *((_OWORD *)v120 + 1) = v129;
      long long v130 = *(_OWORD *)&v95[v121 + 32];
      long long v131 = *(_OWORD *)&v95[v121 + 48];
      long long v132 = *(_OWORD *)&v95[v121 + 80];
      *((_OWORD *)v120 + 4) = *(_OWORD *)&v95[v121 + 64];
      *((_OWORD *)v120 + 5) = v132;
      *((_OWORD *)v120 + 2) = v130;
      *((_OWORD *)v120 + 3) = v131;
      sub_10002E484(v120);
      id v133 = sub_10002DD64();
      id v134 = [v133 v122[56]];

      unint64_t v135 = sub_100049B4C(v134);
      uint64_t v136 = _swiftEmptyDictionarySingleton[2];
      BOOL v137 = (v5 & 1) == 0;
      uint64_t v7 = (char *)(v136 + v137);
      if (__OFADD__(v136, v137))
      {
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
        goto LABEL_205;
      }
      char v138 = v5;
      if (_swiftEmptyDictionarySingleton[3] < (uint64_t)v7)
      {
        sub_1000CFB90((uint64_t)v7, 1);
        unint64_t v139 = sub_100049B4C(v134);
        if ((v138 & 1) != (v140 & 1))
        {
          sub_10001644C(&qword_1005A3810);
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v135 = v139;
      }
      if (v138)
      {

        uint64_t v141 = _swiftEmptyDictionarySingleton[7];
        v142 = *(char **)(v141 + 8 * v135);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v141 + 8 * v135) = v142;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v142 = sub_1000E7A0C(0, *((void *)v142 + 2) + 1, 1, v142);
          *(void *)(v141 + 8 * v135) = v142;
        }
        unint64_t v145 = *((void *)v142 + 2);
        unint64_t v144 = *((void *)v142 + 3);
        if (v145 >= v144 >> 1)
        {
          v142 = sub_1000E7A0C((char *)(v144 > 1), v145 + 1, 1, v142);
          *(void *)(v141 + 8 * v135) = v142;
        }
        v122 = &selRef_actionWithLabel_url_;
        *((void *)v142 + 2) = v145 + 1;
        id v123 = &v142[96 * v145];
        long long v124 = *((_OWORD *)v120 + 1);
        *((_OWORD *)v123 + 2) = *(_OWORD *)v120;
        *((_OWORD *)v123 + 3) = v124;
        long long v125 = *((_OWORD *)v120 + 2);
        long long v126 = *((_OWORD *)v120 + 3);
        long long v127 = *((_OWORD *)v120 + 5);
        *((_OWORD *)v123 + 6) = *((_OWORD *)v120 + 4);
        *((_OWORD *)v123 + 7) = v127;
        *((_OWORD *)v123 + 4) = v125;
        *((_OWORD *)v123 + 5) = v126;
      }
      else
      {
        sub_10001644C(&qword_1005A3800);
        uint64_t v7 = (char *)swift_allocObject();
        long long v146 = *((_OWORD *)v120 + 2);
        long long v147 = *((_OWORD *)v120 + 4);
        long long v148 = *((_OWORD *)v120 + 5);
        *((_OWORD *)v7 + 5) = *((_OWORD *)v120 + 3);
        *((_OWORD *)v7 + 6) = v147;
        *((_OWORD *)v7 + 7) = v148;
        long long v149 = *(_OWORD *)v120;
        long long v150 = *((_OWORD *)v120 + 1);
        *((_OWORD *)v7 + 1) = xmmword_100488070;
        *((_OWORD *)v7 + 2) = v149;
        *((_OWORD *)v7 + 3) = v150;
        *((_OWORD *)v7 + 4) = v146;
        _swiftEmptyDictionarySingleton[(v135 >> 6) + 8] |= 1 << v135;
        *(void *)(_swiftEmptyDictionarySingleton[6] + 8 * v135) = v134;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v135) = v7;
        uint64_t v151 = _swiftEmptyDictionarySingleton[2];
        BOOL v152 = __OFADD__(v151, 1);
        uint64_t v153 = v151 + 1;
        if (v152) {
          goto LABEL_195;
        }
        _swiftEmptyDictionarySingleton[2] = v153;
      }
      v121 += 96;
      --v119;
      char v95 = v128;
    }
    while (v119);
    uint64_t v7 = (char *)swift_bridgeObjectRelease();
    uint64_t v1 = v192;
  }
  int64_t v154 = 0;
  v1[77] = _swiftEmptyDictionarySingleton;
  char v155 = _swiftEmptyDictionarySingleton[4];
  *((unsigned char *)v1 + 769) = v155;
  uint64_t v156 = 1 << v155;
  if (v156 < 64) {
    uint64_t v157 = ~(-1 << v156);
  }
  else {
    uint64_t v157 = -1;
  }
  unint64_t v158 = v157 & _swiftEmptyDictionarySingleton[8];
  v1[86] = _swiftEmptyArrayStorage;
  v159 = &qword_1005A3000;
LABEL_149:
  while (2)
  {
    if (v158)
    {
      unint64_t v160 = __clz(__rbit64(v158));
      v158 &= v158 - 1;
      unint64_t v161 = v160 | (v154 << 6);
      uint64_t v7 = (char *)v1[77];
LABEL_165:
      v1[79] = v158;
      v1[78] = v154;
      uint64_t v167 = 8 * v161;
      uint64_t v168 = *(void **)(*((void *)v7 + 6) + v167);
      v1[80] = v168;
      uint64_t v169 = *(void *)(*((void *)v7 + 7) + v167);
      v1[81] = v169;
      if (!v168) {
        continue;
      }
      unint64_t v207 = v158;
      int64_t v210 = v154;
      v170 = self;
      id v171 = v168;
      swift_bridgeObjectRetain();
      id v172 = objc_msgSend(v170, "ams_sharedAccountStore");
      id v173 = objc_msgSend(v172, "ams_iTunesAccountWithDSID:", v171);
      v1[82] = v173;

      if (!v173)
      {

        uint64_t v7 = (char *)swift_bridgeObjectRelease();
        goto LABEL_148;
      }
      v202 = v171;
      uint64_t v174 = *(void *)(v169 + 16);
      if (!v174) {
        goto LABEL_147;
      }
      sub_100018D68(0, (unint64_t *)&qword_1005A3230);
      swift_bridgeObjectRetain_n();
      uint64_t v175 = v169 + 64;
      while (1)
      {
        uint64_t v176 = *(void **)(v175 - 16);
        v177 = *(void **)v175;
        v178 = *(void **)(v175 + 24);
        v219 = v176;
        if (!v178) {
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v179 = v176;
        v180 = v177;
        id v181 = v178;
        swift_bridgeObjectRetain();
        id v214 = v179;
        v217 = v180;
        id v212 = v180;
        id v182 = v181;
        Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
        LOBYTE(v180) = static NSObject.== infix(_:_:)();

        if (v180)
        {

          v159 = &qword_1005A3000;
          v177 = v217;
LABEL_173:
          os_log_type_t v186 = v177;
          if (qword_1005A2F98 != -1) {
            swift_once();
          }
          id v182 = (id)v159[206];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_177;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v159 = &qword_1005A3000;
LABEL_177:
        v192[83] = v182;
        swift_bridgeObjectRelease();
        if (qword_1005A2F98 != -1) {
          swift_once();
        }
        id v187 = (id)v159[206];
        char v188 = static NSObject.== infix(_:_:)();

        if ((v188 & 1) == 0)
        {
          swift_bridgeObjectRelease_n();
          v189 = (void *)swift_task_alloc();
          v192[84] = v189;
          void *v189 = v192;
          v189[1] = sub_10002A478;
          uint64_t v190 = v192[59];
          v189[3] = v182;
          v189[4] = v190;
          v189[2] = v169;
          uint64_t v7 = (char *)sub_10002E068;
          uint64_t v5 = 0;
          uint64_t v6 = 0;
          return _swift_task_switch(v7, v5, v6);
        }

        v175 += 96;
        if (!--v174)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v1 = v192;
LABEL_147:

          swift_bridgeObjectRelease();
LABEL_148:
          unint64_t v158 = v207;
          int64_t v154 = v210;
          goto LABEL_149;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v184 = v176;
      id v185 = v177;
      goto LABEL_173;
    }
    break;
  }
  int64_t v162 = v154 + 1;
  if (__OFADD__(v154, 1)) {
    goto LABEL_200;
  }
  int64_t v163 = (unint64_t)((1 << *((unsigned char *)v1 + 769)) + 63) >> 6;
  uint64_t v7 = (char *)v1[77];
  if (v162 < v163)
  {
    BOOL v164 = v7 + 64;
    unint64_t v165 = *(void *)&v7[8 * v162 + 64];
    ++v154;
    if (!v165)
    {
      int64_t v154 = v162 + 1;
      if (v162 + 1 >= v163) {
        goto LABEL_189;
      }
      unint64_t v165 = *(void *)&v164[8 * v154];
      if (!v165)
      {
        int64_t v154 = v162 + 2;
        if (v162 + 2 >= v163) {
          goto LABEL_189;
        }
        unint64_t v165 = *(void *)&v164[8 * v154];
        if (!v165)
        {
          int64_t v166 = v162 + 3;
          if (v166 >= v163) {
            goto LABEL_189;
          }
          unint64_t v165 = *(void *)&v164[8 * v166];
          if (!v165)
          {
            while (1)
            {
              int64_t v154 = v166 + 1;
              if (__OFADD__(v166, 1)) {
                goto LABEL_204;
              }
              if (v154 >= v163) {
                goto LABEL_189;
              }
              unint64_t v165 = *(void *)&v164[8 * v154];
              ++v166;
              if (v165) {
                goto LABEL_164;
              }
            }
          }
          int64_t v154 = v166;
        }
      }
    }
LABEL_164:
    unint64_t v158 = (v165 - 1) & v165;
    unint64_t v161 = __clz(__rbit64(v165)) + (v154 << 6);
    goto LABEL_165;
  }
LABEL_189:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_10002D9B4(v1[76]);
  uint64_t v7 = (char *)swift_bridgeObjectRelease();
  id v9 = (void *)v1[86];
LABEL_3:
  int64_t v10 = 0;
  uint64_t v11 = v1 + 40;
  uint64_t v12 = v1 + 43;
  uint64_t v198 = v1 + 53;
  uint64_t v200 = v1 + 54;
  v1[87] = v8;
  char v13 = v8[32];
  *((unsigned char *)v1 + 770) = v13;
  uint64_t v14 = 1 << v13;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & *((void *)v8 + 8);
  while (2)
  {
    if (v16)
    {
      uint64_t v18 = (v16 - 1) & v16;
      unint64_t v19 = __clz(__rbit64(v16)) | (v10 << 6);
      uint64_t v7 = (char *)v1[87];
      goto LABEL_24;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_203;
    }
    int64_t v21 = (unint64_t)((1 << *((unsigned char *)v1 + 770)) + 63) >> 6;
    uint64_t v7 = (char *)v1[87];
    if (v20 >= v21)
    {
LABEL_190:
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v191 = (uint64_t (*)(void *))v1[1];
      return v191(v9);
    }
    id v22 = v7 + 64;
    unint64_t v23 = *(void *)&v7[8 * v20 + 64];
    ++v10;
    if (v23) {
      goto LABEL_23;
    }
    int64_t v10 = v20 + 1;
    if (v20 + 1 >= v21) {
      goto LABEL_190;
    }
    unint64_t v23 = *(void *)&v22[8 * v10];
    if (v23) {
      goto LABEL_23;
    }
    int64_t v10 = v20 + 2;
    if (v20 + 2 >= v21) {
      goto LABEL_190;
    }
    unint64_t v23 = *(void *)&v22[8 * v10];
    if (v23)
    {
LABEL_23:
      uint64_t v18 = (v23 - 1) & v23;
      unint64_t v19 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_24:
      v1[89] = v18;
      v1[88] = v10;
      uint64_t v25 = v1[69];
      uint64_t v26 = 8 * v19;
      id v27 = *(void **)(*((void *)v7 + 6) + v26);
      v1[90] = v27;
      uint64_t v28 = *(void *)(*((void *)v7 + 7) + v26);
      v1[91] = v28;
      v1[53] = 0;
      unint64_t v29 = *(void *)(v28 + 16);
      if (v25 <= 0)
      {
        if (v25 && !v29) {
          goto LABEL_30;
        }
      }
      else if (v29 < v25)
      {
        goto LABEL_30;
      }
      unint64_t v29 = v25;
LABEL_30:
      *uint64_t v200 = v29;
      swift_bridgeObjectRetain_n();
      id v30 = v27;
      swift_beginAccess();
      uint64_t v7 = (char *)swift_beginAccess();
      uint64_t v31 = *v198;
      uint64_t v32 = *v200;
      if (*v198 >= *v200)
      {
LABEL_7:
        uint64_t v17 = (void *)v1[90];
        swift_bridgeObjectRelease_n();

        unint64_t v16 = v1[89];
        int64_t v10 = v1[88];
        continue;
      }
      uint64_t v194 = v12;
      uint64_t v196 = v11;
      while (1)
      {
        v1[95] = v9;
        uint64_t v33 = v1[91];
        v1[53] = v32;
        unint64_t v34 = *(void *)(v33 + 16);
        uint64_t v35 = v34 - v32;
        if (__OFSUB__(v34, v32)) {
          goto LABEL_197;
        }
        uint64_t v36 = v1[69];
        if (v36 < 1)
        {
          BOOL v38 = v35 <= 0 && v36 < v35;
          uint64_t v37 = *(void *)(v33 + 16);
          if (v38) {
            goto LABEL_42;
          }
        }
        else if ((v35 & 0x8000000000000000) == 0)
        {
          uint64_t v37 = *(void *)(v33 + 16);
          if (v35 < (unint64_t)v36) {
            goto LABEL_42;
          }
        }
        uint64_t v37 = v32 + v36;
        if (__OFADD__(v32, v36)) {
          goto LABEL_201;
        }
LABEL_42:
        *uint64_t v200 = v37;
        if (v31 < 0) {
          goto LABEL_198;
        }
        if (v34 < v31 || (uint64_t)v34 < v32) {
          goto LABEL_199;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        uint64_t v40 = (void *)swift_dynamicCastClass();
        if (!v40)
        {
          swift_bridgeObjectRelease();
          uint64_t v40 = _swiftEmptyArrayStorage;
        }
        uint64_t v41 = v40[2];
        swift_release();
        uint64_t v42 = v1[91];
        if (v41 == v32 - v31)
        {
          id v43 = (void *)swift_dynamicCastClass();
          if (!v43)
          {
            swift_bridgeObjectRelease();
            id v43 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          id v43 = sub_1000A860C(v42, v42 + 32, v31, (2 * v32) | 1);
        }
        swift_bridgeObjectRelease();
        if (qword_1005A2F98 != -1) {
          swift_once();
        }
        Class v44 = (void *)qword_1005A3670;
        sub_100018D68(0, (unint64_t *)&qword_1005A3230);
        id v45 = v44;
        char v46 = static NSObject.== infix(_:_:)();

        if ((v46 & 1) == 0)
        {
          uint64_t v205 = v43[2];
          if (v205)
          {
            unint64_t v47 = 0;
            v208 = v43 + 4;
            uint64_t v203 = v43;
            while (1)
            {
              if (v47 >= v43[2]) {
                goto LABEL_196;
              }
              unint64_t v48 = &v208[12 * v47];
              NSData v49 = (void *)v48[2];
              int v50 = *((unsigned __int8 *)v48 + 25);
              NSString v51 = (void *)v48[4];
              NSString v52 = (void *)v48[7];
              v215 = v52;
              if (v49)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v53 = v49;
                swift_bridgeObjectRetain();
                id v54 = v53;
                id v55 = v51;
                id v56 = v52;
                Class v57 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                char v58 = static NSObject.== infix(_:_:)();

                if (v58)
                {
                }
                else
                {
                  id v61 = objc_msgSend(self, "ams_sharedAccountStore");
                  id v62 = objc_msgSend(v61, "ams_iTunesAccountWithDSID:", v54);

                  if (v62)
                  {
                    if (!v50) {
                      goto LABEL_82;
                    }
                    goto LABEL_64;
                  }
                }
              }
              else
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v59 = v51;
                id v60 = v52;
              }
              if (v51)
              {
                id v71 = v51;
                Class v72 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                char v73 = static NSObject.== infix(_:_:)();

                if (v73)
                {

                  id v62 = 0;
                }
                else
                {
                  id v74 = objc_msgSend(self, "ams_sharedAccountStore");
                  id v62 = objc_msgSend(v74, "ams_iTunesAccountWithDSID:", v71);
                }
                if (!v50)
                {
LABEL_82:
                  if (!v62) {
                    goto LABEL_85;
                  }
LABEL_83:
                  if (v50 == objc_msgSend(v62, "ams_isManagedAppleID"))
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();

LABEL_93:
                    uint64_t v7 = (char *)swift_bridgeObjectRelease();
                    uint64_t v1 = v192;
                    goto LABEL_94;
                  }

                  goto LABEL_85;
                }
              }
              else
              {
                id v62 = 0;
                if (!v50) {
                  goto LABEL_82;
                }
              }
LABEL_64:
              if (v62) {
                goto LABEL_83;
              }
              uint64_t v63 = v51;
              id v64 = objc_msgSend(self, "ams_sharedAccountStore");
              id v65 = objc_msgSend(v64, "ams_iTunesAccounts");

              sub_100018D68(0, &qword_1005A3808);
              unint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              unint64_t v67 = v49;
              if (v66 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v68)
                {
LABEL_67:
                  uint64_t v69 = 0;
                  do
                  {
                    uint64_t v7 = (v66 & 0xC000000000000001) != 0
                       ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
                       : (char *)*(id *)(v66 + 8 * v69 + 32);
                    id v62 = v7;
                    uint64_t v70 = v69 + 1;
                    if (__OFADD__(v69, 1)) {
                      goto LABEL_194;
                    }
                    if (objc_msgSend(v7, "ams_isManagedAppleID"))
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_bridgeObjectRelease();

                      goto LABEL_93;
                    }

                    ++v69;
                  }
                  while (v70 != v68);
                }
              }
              else
              {
                uint64_t v68 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v68) {
                  goto LABEL_67;
                }
              }
              swift_bridgeObjectRelease();
              NSData v49 = v67;
              NSString v51 = v63;
LABEL_85:
              ++v47;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              uint64_t v7 = (char *)swift_bridgeObjectRelease();
              id v43 = v203;
              if (v47 == v205)
              {
                swift_release();
                uint64_t v1 = v192;
                goto LABEL_90;
              }
            }
          }
        }
        swift_release();
LABEL_90:
        id v75 = objc_msgSend(self, "ams_sharedAccountStore");
        id v62 = objc_msgSend(v75, "ams_activeiTunesAccount");

LABEL_94:
        v1[92] = v62;
        uint64_t v76 = v1[91];
        unint64_t v77 = *(void *)(v76 + 16);
        if (!v77)
        {
LABEL_107:
          uint64_t v89 = (void *)swift_task_alloc();
          v1[93] = v89;
          *uint64_t v89 = v1;
          v89[1] = sub_10002B5DC;
          uint64_t v90 = v1[90];
          return sub_100024F28(v90);
        }
        unint64_t v78 = 0;
        char v79 = (uint64_t *)(v76 + 104);
        while (1)
        {
          uint64_t v80 = *v79;
          if (*v79) {
            break;
          }
          ++v78;
          v79 += 12;
          if (v77 == v78) {
            goto LABEL_107;
          }
        }
        if (v78 >= v77) {
          goto LABEL_202;
        }
        uint64_t v81 = *(v79 - 1);
        id v82 = v62;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v83 = swift_isUniquelyReferenced_nonNull_native();
        id v9 = (void *)v1[95];
        if ((v83 & 1) == 0) {
          id v9 = sub_1000E7B34(0, v9[2] + 1, 1, (void *)v1[95]);
        }
        unint64_t v85 = v9[2];
        unint64_t v84 = v9[3];
        if (v85 >= v84 >> 1) {
          id v9 = sub_1000E7B34((void *)(v84 > 1), v85 + 1, 1, v9);
        }
        uint64_t v86 = v1[92];
        uint64_t v87 = v1[91];
        v9[2] = v85 + 1;
        uint64_t v88 = &v9[4 * v85];
        v88[4] = v86;
        v88[5] = v87;
        v88[6] = v81;
        v88[7] = v80;

        uint64_t v31 = v1[53];
        uint64_t v32 = v1[54];
        uint64_t v12 = v194;
        uint64_t v11 = v196;
        if (v31 >= v32) {
          goto LABEL_7;
        }
      }
    }
    break;
  }
  int64_t v24 = v20 + 3;
  if (v24 >= v21) {
    goto LABEL_190;
  }
  unint64_t v23 = *(void *)&v22[8 * v24];
  if (v23)
  {
    int64_t v10 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v21) {
      goto LABEL_190;
    }
    unint64_t v23 = *(void *)&v22[8 * v10];
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
LABEL_205:
  __break(1u);
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_10002A478(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[46] = v2;
  v3[47] = a1;
  v3[48] = a2;
  v3[85] = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10002A580, 0, 0);
}

uint64_t sub_10002A580()
{
  unint64_t v130 = isa + 344;
  long long v131 = (uint64_t *)(isa + 424);
  long long v132 = (uint64_t *)(isa + 432);
  uint64_t v1 = *(void ***)(isa + 680);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    static Logger.updates.getter();
    swift_retain_n();
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    unint64_t v19 = *(void **)(isa + 664);
    uint64_t v20 = *(void *)(isa + 472);
    if (v18)
    {
      long long v146 = *(NSObject **)(isa + 656);
      v143 = *(void **)(isa + 664);
      int64_t v21 = (uint8_t *)swift_slowAlloc();
      id v22 = (void *)swift_slowAlloc();
      *(_DWORD *)int64_t v21 = 138412290;
      uint64_t v1 = *(void ***)(*(void *)(v20 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(isa + 416) = v1;
      unint64_t v23 = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v22 = v1;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%@] Unable to fetch updates for MAID batch with no storefront country code", v21, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v16 = v146;
    }
    else
    {

      swift_release_n();
    }

    int64_t v24 = *(void **)(isa + 640);
    uint64_t v3 = *(void **)(isa + 560);
    uint64_t v6 = *(void **)(isa + 504);
    uint64_t v25 = *(void *)(isa + 480);

    ((void (*)(void *, uint64_t))v3)(v6, v25);
    int64_t v2 = *(void *)(isa + 632);
    int64_t v15 = *(void *)(isa + 624);
    uint64_t v14 = (void *)isa;
    goto LABEL_11;
  }
  int64_t v2 = *(void *)(isa + 376);
  uint64_t v3 = *(void **)(isa + 656);
  int v4 = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *(void **)(isa + 688);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_164;
  }
LABEL_3:
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = sub_1000E7B34((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  id v9 = *(void **)(isa + 664);
  int64_t v10 = *(void **)(isa + 656);
  uint64_t v11 = *(void *)(isa + 648);
  uint64_t v12 = (void *)v136[80];
  v6[2] = v8 + 1;
  char v13 = &v6[4 * v8];
  void v13[4] = v3;
  v13[5] = v11;
  v13[6] = v2;
  v13[7] = v1;

  uint64_t v14 = v136;
  int64_t v2 = v136[79];
  int64_t v15 = v136[78];
  v136[86] = v6;
  while (1)
  {
    while (1)
    {
      do
      {
LABEL_11:
        if (v2)
        {
          unint64_t v26 = __clz(__rbit64(v2));
          v2 &= v2 - 1;
          unint64_t v27 = v26 | (v15 << 6);
          uint64_t v28 = v14[77];
          goto LABEL_27;
        }
        int64_t v29 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        int64_t v30 = (unint64_t)((1 << *((unsigned char *)v14 + 769)) + 63) >> 6;
        uint64_t v28 = v14[77];
        if (v29 >= v30) {
          goto LABEL_48;
        }
        uint64_t v31 = v28 + 64;
        unint64_t v32 = *(void *)(v28 + 64 + 8 * v29);
        ++v15;
        if (v32) {
          goto LABEL_26;
        }
        int64_t v15 = v29 + 1;
        if (v29 + 1 >= v30) {
          goto LABEL_48;
        }
        unint64_t v32 = *(void *)(v31 + 8 * v15);
        if (v32) {
          goto LABEL_26;
        }
        int64_t v15 = v29 + 2;
        if (v29 + 2 >= v30) {
          goto LABEL_48;
        }
        unint64_t v32 = *(void *)(v31 + 8 * v15);
        if (v32) {
          goto LABEL_26;
        }
        int64_t v33 = v29 + 3;
        if (v33 >= v30)
        {
LABEL_48:
          swift_release();
          swift_bridgeObjectRelease();
          Class v57 = sub_10002D9B4(v14[76]);
          uint64_t v54 = swift_bridgeObjectRelease();
          int64_t v58 = 0;
          v14[87] = v57;
          char v59 = v57[32];
          *((unsigned char *)v14 + 770) = v59;
          if (1 << v59 < 64) {
            uint64_t v60 = ~(-1 << (1 << v59));
          }
          else {
            uint64_t v60 = -1;
          }
          unint64_t v61 = v60 & *((void *)v57 + 8);
          id v62 = (void *)v14[86];
          while (2)
          {
            if (v61)
            {
              uint64_t v64 = (v61 - 1) & v61;
              unint64_t v65 = __clz(__rbit64(v61)) | (v58 << 6);
              uint64_t v54 = v14[87];
              goto LABEL_69;
            }
            int64_t v66 = v58 + 1;
            if (__OFADD__(v58, 1)) {
              goto LABEL_170;
            }
            int64_t v67 = (unint64_t)((1 << *((unsigned char *)v14 + 770)) + 63) >> 6;
            uint64_t v54 = v14[87];
            if (v66 >= v67) {
              goto LABEL_157;
            }
            uint64_t v68 = v54 + 64;
            unint64_t v69 = *(void *)(v54 + 64 + 8 * v66);
            ++v58;
            if (!v69)
            {
              int64_t v58 = v66 + 1;
              if (v66 + 1 >= v67) {
                goto LABEL_157;
              }
              unint64_t v69 = *(void *)(v68 + 8 * v58);
              if (!v69)
              {
                int64_t v58 = v66 + 2;
                if (v66 + 2 >= v67) {
                  goto LABEL_157;
                }
                unint64_t v69 = *(void *)(v68 + 8 * v58);
                if (!v69)
                {
                  int64_t v70 = v66 + 3;
                  if (v70 < v67)
                  {
                    unint64_t v69 = *(void *)(v68 + 8 * v70);
                    if (v69)
                    {
                      int64_t v58 = v70;
                      goto LABEL_68;
                    }
                    while (1)
                    {
                      int64_t v58 = v70 + 1;
                      if (__OFADD__(v70, 1)) {
                        goto LABEL_171;
                      }
                      if (v58 >= v67) {
                        break;
                      }
                      unint64_t v69 = *(void *)(v68 + 8 * v58);
                      ++v70;
                      if (v69) {
                        goto LABEL_68;
                      }
                    }
                  }
LABEL_157:
                  swift_release();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  long long v129 = (uint64_t (*)(void *))v14[1];
                  return v129(v62);
                }
              }
            }
LABEL_68:
            uint64_t v64 = (v69 - 1) & v69;
            unint64_t v65 = __clz(__rbit64(v69)) + (v58 << 6);
LABEL_69:
            v14[89] = v64;
            v14[88] = v58;
            uint64_t v71 = v14[69];
            uint64_t v72 = 8 * v65;
            char v73 = *(void **)(*(void *)(v54 + 48) + v72);
            v14[90] = v73;
            uint64_t v74 = *(void *)(*(void *)(v54 + 56) + v72);
            v14[91] = v74;
            v14[53] = 0;
            unint64_t v75 = *(void *)(v74 + 16);
            if (v71 <= 0)
            {
              if (v71 && !v75) {
                goto LABEL_75;
              }
            }
            else if (v75 < v71)
            {
              goto LABEL_75;
            }
            unint64_t v75 = v71;
LABEL_75:
            *long long v132 = v75;
            swift_bridgeObjectRetain_n();
            id v76 = v73;
            swift_beginAccess();
            uint64_t v54 = swift_beginAccess();
            uint64_t v77 = *v131;
            uint64_t v78 = *v132;
            if (*v131 >= *v132) {
              goto LABEL_52;
            }
LABEL_76:
            v14[95] = v62;
            uint64_t v79 = v14[91];
            v14[53] = v78;
            unint64_t v80 = *(void *)(v79 + 16);
            uint64_t v81 = v80 - v78;
            if (__OFSUB__(v80, v78))
            {
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
              return _swift_task_switch(v54, v55, v56);
            }
            uint64_t v82 = v14[69];
            if (v82 < 1)
            {
              BOOL v84 = v81 <= 0 && v82 < v81;
              uint64_t v83 = *(void *)(v79 + 16);
              if (!v84) {
                goto LABEL_85;
              }
            }
            else if (v81 < 0 || (uint64_t v83 = *(void *)(v79 + 16), v81 >= (unint64_t)v82))
            {
LABEL_85:
              uint64_t v83 = v78 + v82;
              if (__OFADD__(v78, v82)) {
                goto LABEL_168;
              }
            }
            *long long v132 = v83;
            if (v77 < 0) {
              goto LABEL_166;
            }
            if (v80 < v77 || (uint64_t)v80 < v78) {
              goto LABEL_167;
            }
            int64_t v2 = type metadata accessor for __ContiguousArrayStorageBase();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain_n();
            uint64_t v86 = (void *)swift_dynamicCastClass();
            if (!v86)
            {
              swift_bridgeObjectRelease();
              uint64_t v86 = _swiftEmptyArrayStorage;
            }
            uint64_t v87 = v86[2];
            swift_release();
            uint64_t v88 = v14[91];
            if (v87 == v78 - v77)
            {
              uint64_t v3 = (void *)swift_dynamicCastClass();
              if (!v3)
              {
                swift_bridgeObjectRelease();
                uint64_t v3 = _swiftEmptyArrayStorage;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v3 = sub_1000A860C(v88, v88 + 32, v77, (2 * v78) | 1);
            }
            swift_bridgeObjectRelease();
            if (qword_1005A2F98 != -1) {
              swift_once();
            }
            uint64_t v89 = (void *)qword_1005A3670;
            uint64_t v6 = (void *)sub_100018D68(0, (unint64_t *)&qword_1005A3230);
            id v90 = v89;
            unint64_t isa = static NSObject.== infix(_:_:)();

            if ((isa & 1) != 0 || (uint64_t v138 = v3[2]) == 0)
            {
LABEL_137:
              swift_release();
              id v112 = objc_msgSend(self, "ams_sharedAccountStore");
              id v104 = objc_msgSend(v112, "ams_activeiTunesAccount");

              goto LABEL_141;
            }
            unint64_t v91 = 0;
            char v140 = v3;
            v142 = v3 + 4;
LABEL_101:
            if (v91 >= v3[2]) {
              goto LABEL_162;
            }
            uint64_t v92 = &v142[12 * v91];
            char v93 = (void *)v92[2];
            int v94 = *((unsigned __int8 *)v92 + 25);
            uint64_t v1 = (void **)v92[4];
            char v95 = (void *)v92[7];
            int64_t v2 = v92[11];
            unint64_t v145 = v95;
            if (v93)
            {
              swift_bridgeObjectRetain();
              int64_t v96 = v2;
              swift_bridgeObjectRetain();
              id v97 = v93;
              swift_bridgeObjectRetain();
              id v98 = v97;
              uint64_t v99 = v1;
              id v100 = v95;
              unint64_t isa = (unint64_t)NSNumber.init(integerLiteral:)(0).super.super.isa;
              char v101 = static NSObject.== infix(_:_:)();

              if (v101)
              {

                int64_t v2 = v96;
                goto LABEL_119;
              }
              unint64_t isa = (unint64_t)objc_msgSend(self, "ams_sharedAccountStore");
              id v104 = objc_msgSend((id)isa, "ams_iTunesAccountWithDSID:", v98);

              int64_t v2 = v96;
              if (v104)
              {
                if (v94) {
                  goto LABEL_108;
                }
LABEL_126:
                if (v104) {
                  goto LABEL_127;
                }
LABEL_129:
                uint64_t v3 = v140;
                goto LABEL_130;
              }
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v102 = v1;
              id v103 = v95;
            }
LABEL_119:
            if (v1)
            {
              int64_t v109 = v2;
              id v110 = v1;
              unint64_t isa = (unint64_t)NSNumber.init(integerLiteral:)(0).super.super.isa;
              char v111 = static NSObject.== infix(_:_:)();

              if (v111)
              {

                id v104 = 0;
                int64_t v2 = v109;
                if (!v94) {
                  goto LABEL_126;
                }
              }
              else
              {
                unint64_t isa = (unint64_t)objc_msgSend(self, "ams_sharedAccountStore");
                id v104 = objc_msgSend((id)isa, "ams_iTunesAccountWithDSID:", v110);

                int64_t v2 = v109;
                if (!v94) {
                  goto LABEL_126;
                }
              }
            }
            else
            {
              id v104 = 0;
              if (!v94) {
                goto LABEL_126;
              }
            }
LABEL_108:
            if (v104)
            {
LABEL_127:
              if (v94 == objc_msgSend(v104, "ams_isManagedAppleID", v130))
              {
                swift_bridgeObjectRelease();
                swift_release();
                goto LABEL_140;
              }

              goto LABEL_129;
            }
            unint64_t isa = (unint64_t)objc_msgSend(self, "ams_sharedAccountStore");
            id v105 = objc_msgSend((id)isa, "ams_iTunesAccounts");

            sub_100018D68(0, &qword_1005A3808);
            int64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if ((unint64_t)v2 >> 62)
            {
              if (v2 < 0) {
                unint64_t isa = v2;
              }
              else {
                unint64_t isa = v2 & 0xFFFFFFFFFFFFFF8;
              }
              swift_bridgeObjectRetain();
              uint64_t v3 = (void *)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v3)
              {
LABEL_111:
                uint64_t v106 = 0;
                unint64_t isa = v2 & 0xC000000000000001;
                while (1)
                {
                  if (isa) {
                    id v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v107 = *(id *)(v2 + 8 * v106 + 32);
                  }
                  id v104 = v107;
                  id v108 = (void *)(v106 + 1);
                  if (__OFADD__(v106, 1)) {
                    goto LABEL_161;
                  }
                  if (objc_msgSend(v107, "ams_isManagedAppleID")) {
                    break;
                  }

                  ++v106;
                  if (v108 == v3) {
                    goto LABEL_118;
                  }
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
LABEL_140:
                swift_bridgeObjectRelease();

                uint64_t v54 = swift_bridgeObjectRelease();
                uint64_t v14 = v136;
LABEL_141:
                v14[92] = v104;
                uint64_t v113 = v14[91];
                unint64_t v114 = *(void *)(v113 + 16);
                if (!v114)
                {
LABEL_154:
                  long long v126 = (void *)swift_task_alloc();
                  v14[93] = v126;
                  *long long v126 = v14;
                  v126[1] = sub_10002B5DC;
                  uint64_t v127 = v14[90];
                  return sub_100024F28(v127);
                }
                unint64_t v115 = 0;
                uint64_t v116 = (uint64_t *)(v113 + 104);
                while (1)
                {
                  uint64_t v117 = *v116;
                  if (*v116) {
                    break;
                  }
                  ++v115;
                  v116 += 12;
                  if (v114 == v115) {
                    goto LABEL_154;
                  }
                }
                if (v115 >= v114) {
                  goto LABEL_169;
                }
                uint64_t v118 = *(v116 - 1);
                id v119 = v104;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v120 = swift_isUniquelyReferenced_nonNull_native();
                id v62 = (void *)v14[95];
                if ((v120 & 1) == 0) {
                  id v62 = sub_1000E7B34(0, v62[2] + 1, 1, (void *)v14[95]);
                }
                unint64_t v122 = v62[2];
                unint64_t v121 = v62[3];
                if (v122 >= v121 >> 1) {
                  id v62 = sub_1000E7B34((void *)(v121 > 1), v122 + 1, 1, v62);
                }
                uint64_t v123 = v14[92];
                uint64_t v124 = v14[91];
                v62[2] = v122 + 1;
                long long v125 = &v62[4 * v122];
                v125[4] = v123;
                v125[5] = v124;
                v125[6] = v118;
                v125[7] = v117;

                uint64_t v77 = v14[53];
                uint64_t v78 = v14[54];
                if (v77 >= v78)
                {
LABEL_52:
                  uint64_t v63 = (void *)v14[90];
                  swift_bridgeObjectRelease_n();

                  unint64_t v61 = v14[89];
                  int64_t v58 = v14[88];
                  continue;
                }
                goto LABEL_76;
              }
            }
            else
            {
              uint64_t v3 = *(void **)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v3) {
                goto LABEL_111;
              }
            }
            break;
          }
LABEL_118:
          swift_bridgeObjectRelease();
          uint64_t v3 = v140;
LABEL_130:
          ++v91;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          uint64_t v14 = v136;
          if (v91 == v138) {
            goto LABEL_137;
          }
          goto LABEL_101;
        }
        unint64_t v32 = *(void *)(v31 + 8 * v33);
        if (!v32)
        {
          while (1)
          {
            int64_t v15 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              break;
            }
            if (v15 >= v30) {
              goto LABEL_48;
            }
            unint64_t v32 = *(void *)(v31 + 8 * v15);
            ++v33;
            if (v32) {
              goto LABEL_26;
            }
          }
LABEL_163:
          __break(1u);
LABEL_164:
          uint64_t v6 = sub_1000E7B34(0, v6[2] + 1, 1, v6);
          goto LABEL_3;
        }
        int64_t v15 = v33;
LABEL_26:
        int64_t v2 = (v32 - 1) & v32;
        unint64_t v27 = __clz(__rbit64(v32)) + (v15 << 6);
LABEL_27:
        v14[79] = v2;
        v14[78] = v15;
        uint64_t v34 = 8 * v27;
        unint64_t isa = *(void *)(*(void *)(v28 + 48) + v34);
        v14[80] = isa;
        uint64_t v3 = *(void **)(*(void *)(v28 + 56) + v34);
        v14[81] = v3;
      }
      while (!isa);
      uint64_t v35 = self;
      unint64_t isa = (unint64_t)(id)isa;
      swift_bridgeObjectRetain();
      uint64_t v6 = objc_msgSend(v35, "ams_sharedAccountStore");
      id v36 = objc_msgSend(v6, "ams_iTunesAccountWithDSID:", isa);
      v14[82] = v36;

      if (v36) {
        break;
      }

      swift_bridgeObjectRelease();
    }
    uint64_t v37 = v3[2];
    if (v37) {
      break;
    }
LABEL_10:

    swift_bridgeObjectRelease();
  }
  unint64_t v133 = isa;
  int64_t v134 = v2;
  int64_t v135 = v15;
  uint64_t v147 = sub_100018D68(0, (unint64_t *)&qword_1005A3230);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = (void **)(v3 + 8);
  while (1)
  {
    BOOL v38 = *(v1 - 2);
    uint64_t v39 = *v1;
    uint64_t v40 = v1[3];
    if (v40)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v41 = v38;
      id v42 = v40;
      swift_bridgeObjectRetain();
      uint64_t v141 = v41;
      id v139 = v41;
      unint64_t v144 = v39;
      id v137 = v39;
      id v43 = v42;
      Class v44 = NSNumber.init(integerLiteral:)(0).super.super.isa;
      char v45 = static NSObject.== infix(_:_:)();

      if ((v45 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v136;
        goto LABEL_39;
      }

      char v46 = v136;
      uint64_t v39 = v144;
      BOOL v38 = v141;
    }
    else
    {
      char v46 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v47 = v38;
      id v48 = v39;
    }
    NSData v49 = v38;
    if (qword_1005A2F98 != -1) {
      swift_once();
    }
    id v43 = (id)qword_1005A3670;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v14 = v46;
LABEL_39:
    v14[83] = v43;
    swift_bridgeObjectRelease();
    if (qword_1005A2F98 != -1) {
      swift_once();
    }
    id v50 = (id)qword_1005A3670;
    uint64_t v6 = (void *)v147;
    char v51 = static NSObject.== infix(_:_:)();

    if ((v51 & 1) == 0) {
      break;
    }

    v1 += 12;
    if (!--v37)
    {
      swift_bridgeObjectRelease_n();
      int64_t v2 = v134;
      int64_t v15 = v135;
      unint64_t isa = v133;
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease_n();
  NSString v52 = (void *)swift_task_alloc();
  v14[84] = v52;
  *NSString v52 = v14;
  v52[1] = sub_10002A478;
  uint64_t v53 = v14[59];
  v52[3] = v43;
  v52[4] = v53;
  v52[2] = v3;
  uint64_t v54 = (uint64_t)sub_10002E068;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  return _swift_task_switch(v54, v55, v56);
}

uint64_t sub_10002B5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[49] = v2;
  v3[50] = a1;
  v3[51] = a2;
  v3[94] = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10002B6E4, 0, 0);
}

void sub_10002B6E4()
{
  unint64_t v1 = v0 + 424;
  int64_t v2 = (uint64_t *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 752);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 400);
    uint64_t v5 = *(void *)(v0 + 736);
    goto LABEL_105;
  }
  static Logger.updates.getter();
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 472);
  if (v8)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    uint64_t v12 = *(void **)(*(void *)(v9 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v10 + 4) = v12;
    *uint64_t v11 = v12;
    id v13 = v12;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Unable to fetch updates for batch with no storefront country code", (uint8_t *)v10, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v14 = *(void (**)(uint64_t, unint64_t))(v0 + 560);
  uint64_t v15 = *(void *)(v0 + 496);
  unint64_t v16 = *(void *)(v0 + 480);

  v14(v15, v16);
  uint64_t v5 = *(void *)(v0 + 424);
  uint64_t v17 = *(void *)(v0 + 432);
  if (v5 >= v17)
  {
    BOOL v18 = *(void **)(v0 + 760);
    unint64_t v16 = 1;
    goto LABEL_10;
  }
  while (2)
  {
    uint64_t v37 = *(void *)(v0 + 728);
    *(void *)(v0 + 424) = v17;
    unint64_t v38 = *(void *)(v37 + 16);
    uint64_t v39 = v38 - v17;
    if (__OFSUB__(v38, v17))
    {
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
    uint64_t v40 = *(void *)(v0 + 552);
    if (v40 < 1)
    {
      if (v39 <= 0)
      {
        uint64_t v41 = *(void *)(v37 + 16);
        if (v40 < v39) {
          goto LABEL_46;
        }
      }
    }
    else if ((v39 & 0x8000000000000000) == 0)
    {
      uint64_t v41 = *(void *)(v37 + 16);
      if (v39 < (unint64_t)v40) {
        goto LABEL_46;
      }
    }
    uint64_t v41 = v17 + v40;
    if (__OFADD__(v17, v40))
    {
      __break(1u);
LABEL_118:
      __break(1u);
      return;
    }
LABEL_46:
    *int64_t v2 = v41;
    if (v5 < 0)
    {
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    if (v38 < v5 || (uint64_t)v38 < v17) {
      goto LABEL_115;
    }
    unint64_t v16 = (2 * v17) | 1;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    id v42 = (void *)swift_dynamicCastClass();
    if (!v42)
    {
      swift_bridgeObjectRelease();
      id v42 = _swiftEmptyArrayStorage;
    }
    uint64_t v43 = v42[2];
    swift_release();
    uint64_t v37 = *(void *)(v0 + 728);
    if (v43 == v17 - v5)
    {
      uint64_t v5 = swift_dynamicCastClass();
      if (!v5)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = (uint64_t)_swiftEmptyArrayStorage;
      }
      goto LABEL_54;
    }
LABEL_116:
    swift_bridgeObjectRelease();
    uint64_t v5 = (uint64_t)sub_1000A860C(v37, v37 + 32, v5, v16);
LABEL_54:
    swift_bridgeObjectRelease();
    uint64_t v44 = v0 + 344;
    if (qword_1005A2F98 != -1) {
      swift_once();
    }
    char v45 = (void *)qword_1005A3670;
    uint64_t v37 = sub_100018D68(0, (unint64_t *)&qword_1005A3230);
    id v46 = v45;
    char v47 = static NSObject.== infix(_:_:)();

    if ((v47 & 1) != 0 || (uint64_t v91 = *(void *)(v5 + 16)) == 0)
    {
LABEL_92:
      swift_release();
      id v76 = objc_msgSend(self, "ams_sharedAccountStore");
      uint64_t v5 = (uint64_t)objc_msgSend(v76, "ams_activeiTunesAccount");

      goto LABEL_96;
    }
    unint64_t v16 = 0;
    unint64_t v93 = v1;
    uint64_t v94 = v5 + 32;
    uint64_t v92 = v5;
    while (1)
    {
      if (v16 >= *(void *)(v5 + 16)) {
        goto LABEL_112;
      }
      unint64_t v48 = v94 + 96 * v16;
      NSData v49 = *(void **)(v48 + 16);
      int v96 = *(unsigned __int8 *)(v48 + 25);
      id v50 = *(void **)(v48 + 32);
      char v51 = *(void **)(v48 + 56);
      char v95 = v51;
      if (v49)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        NSString v52 = v49;
        id v53 = v49;
        swift_bridgeObjectRetain();
        id v54 = v53;
        uint64_t v55 = v50;
        id v56 = v50;
        id v57 = v51;
        Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
        char v59 = static NSObject.== infix(_:_:)();

        if (v59)
        {

          id v50 = v55;
          NSData v49 = v52;
          uint64_t v44 = v0 + 344;
        }
        else
        {
          id v62 = objc_msgSend(self, "ams_sharedAccountStore");
          uint64_t v5 = (uint64_t)objc_msgSend(v62, "ams_iTunesAccountWithDSID:", v54);

          id v50 = v55;
          NSData v49 = v52;
          uint64_t v44 = v0 + 344;
          if (v5)
          {
            if (!v96) {
              goto LABEL_84;
            }
            goto LABEL_66;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v60 = v50;
        id v61 = v51;
      }
      if (v50) {
        break;
      }
      uint64_t v5 = 0;
      if (!v96) {
        goto LABEL_84;
      }
LABEL_66:
      if (v5) {
        goto LABEL_85;
      }
      id v63 = objc_msgSend(self, "ams_sharedAccountStore");
      id v64 = objc_msgSend(v63, "ams_iTunesAccounts");

      sub_100018D68(0, &qword_1005A3808);
      unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v89 = v49;
      id v90 = v50;
      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v65)
        {
LABEL_69:
          uint64_t v66 = 0;
          while (1)
          {
            id v67 = (v1 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v1 + 8 * v66 + 32);
            uint64_t v5 = (uint64_t)v67;
            uint64_t v68 = v66 + 1;
            if (__OFADD__(v66, 1)) {
              break;
            }
            if (objc_msgSend(v67, "ams_isManagedAppleID"))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              goto LABEL_95;
            }

            ++v66;
            if (v68 == v65) {
              goto LABEL_76;
            }
          }
          __break(1u);
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
      }
      else
      {
        uint64_t v65 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v65) {
          goto LABEL_69;
        }
      }
LABEL_76:
      swift_bridgeObjectRelease();
      uint64_t v44 = v0 + 344;
      uint64_t v5 = v92;
      id v50 = v90;
LABEL_88:
      ++v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      unint64_t v1 = v93;
      if (v16 == v91) {
        goto LABEL_92;
      }
    }
    uint64_t v69 = v44;
    int64_t v70 = v49;
    uint64_t v71 = v50;
    id v72 = v50;
    Class v73 = NSNumber.init(integerLiteral:)(0).super.super.isa;
    char v74 = static NSObject.== infix(_:_:)();

    if (v74)
    {

      uint64_t v5 = 0;
    }
    else
    {
      id v75 = objc_msgSend(self, "ams_sharedAccountStore");
      uint64_t v5 = (uint64_t)objc_msgSend(v75, "ams_iTunesAccountWithDSID:", v72);
    }
    id v50 = v71;
    NSData v49 = v70;
    uint64_t v44 = v69;
    if (v96) {
      goto LABEL_66;
    }
LABEL_84:
    if (!v5)
    {
LABEL_87:
      uint64_t v5 = v92;
      goto LABEL_88;
    }
LABEL_85:
    if (v96 != objc_msgSend((id)v5, "ams_isManagedAppleID", v89))
    {

      goto LABEL_87;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_95:
    unint64_t v1 = v93;
LABEL_96:
    *(void *)(v0 + 736) = v5;
    uint64_t v77 = *(void *)(v0 + 728);
    unint64_t v78 = *(void *)(v77 + 16);
    if (!v78)
    {
LABEL_100:
      uint64_t v81 = (void *)swift_task_alloc();
      *(void *)(v0 + 744) = v81;
      *uint64_t v81 = v0;
      v81[1] = sub_10002B5DC;
      uint64_t v82 = *(void *)(v0 + 720);
      sub_100024F28(v82);
      return;
    }
    unint64_t v79 = 0;
    unint64_t v80 = (uint64_t *)(v77 + 104);
    while (1)
    {
      uint64_t v3 = *v80;
      if (*v80) {
        break;
      }
      ++v79;
      v80 += 12;
      if (v78 == v79) {
        goto LABEL_100;
      }
    }
    if (v79 >= v78) {
      goto LABEL_118;
    }
    uint64_t v4 = *(v80 - 1);
    swift_bridgeObjectRetain();
LABEL_105:
    unint64_t v16 = (unint64_t)(id)v5;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v18 = *(void **)(v0 + 760);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      BOOL v18 = sub_1000E7B34(0, v18[2] + 1, 1, *(void **)(v0 + 760));
    }
    unint64_t v85 = v18[2];
    unint64_t v84 = v18[3];
    if (v85 >= v84 >> 1) {
      BOOL v18 = sub_1000E7B34((void *)(v84 > 1), v85 + 1, 1, v18);
    }
    uint64_t v86 = *(void *)(v0 + 736);
    uint64_t v87 = *(void *)(v0 + 728);
    v18[2] = v85 + 1;
    uint64_t v88 = &v18[4 * v85];
    v88[4] = v86;
    v88[5] = v87;
    v88[6] = v4;
    v88[7] = v3;

    uint64_t v5 = *(void *)(v0 + 424);
    uint64_t v17 = *(void *)(v0 + 432);
    if (v5 < v17)
    {
LABEL_37:
      *(void *)(v0 + 760) = v18;
      continue;
    }
    break;
  }
  unint64_t v16 = 1;
LABEL_10:
  while (2)
  {
    int64_t v21 = *(void **)(v0 + 720);
    swift_bridgeObjectRelease_n();

    unint64_t v22 = *(void *)(v0 + 712);
    int64_t v23 = *(void *)(v0 + 704);
    if (v22)
    {
      uint64_t v24 = (v22 - 1) & v22;
      unint64_t v25 = __clz(__rbit64(v22)) | (v23 << 6);
      uint64_t v26 = *(void *)(v0 + 696);
      goto LABEL_26;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    int64_t v28 = (unint64_t)((1 << *(unsigned char *)(v0 + 770)) + 63) >> 6;
    uint64_t v26 = *(void *)(v0 + 696);
    if (v27 >= v28) {
      goto LABEL_32;
    }
    uint64_t v29 = v26 + 64;
    unint64_t v30 = *(void *)(v26 + 64 + 8 * v27);
    ++v23;
    if (v30) {
      goto LABEL_25;
    }
    int64_t v23 = v27 + 1;
    if (v27 + 1 >= v28) {
      goto LABEL_32;
    }
    unint64_t v30 = *(void *)(v29 + 8 * v23);
    if (v30) {
      goto LABEL_25;
    }
    int64_t v23 = v27 + 2;
    if (v27 + 2 >= v28) {
      goto LABEL_32;
    }
    unint64_t v30 = *(void *)(v29 + 8 * v23);
    if (v30)
    {
LABEL_25:
      uint64_t v24 = (v30 - 1) & v30;
      unint64_t v25 = __clz(__rbit64(v30)) + (v23 << 6);
LABEL_26:
      *(void *)(v0 + 712) = v24;
      *(void *)(v0 + 704) = v23;
      uint64_t v32 = *(void *)(v0 + 552);
      uint64_t v33 = 8 * v25;
      uint64_t v34 = *(void **)(*(void *)(v26 + 48) + v33);
      *(void *)(v0 + 720) = v34;
      uint64_t v35 = *(void *)(*(void *)(v26 + 56) + v33);
      *(void *)(v0 + 72_Block_object_dispose(&a9, 8) = v35;
      *(void *)(v0 + 424) = 0;
      unint64_t v19 = *(void *)(v35 + 16);
      if (v32 <= 0)
      {
        if (v32 && !v19)
        {
LABEL_9:
          *int64_t v2 = v19;
          swift_bridgeObjectRetain_n();
          id v20 = v34;
          swift_beginAccess();
          swift_beginAccess();
          uint64_t v5 = *(void *)v1;
          uint64_t v17 = *v2;
          if (*(void *)v1 < *v2) {
            goto LABEL_37;
          }
          continue;
        }
      }
      else if (v19 < v32)
      {
        goto LABEL_9;
      }
      unint64_t v19 = v32;
      goto LABEL_9;
    }
    break;
  }
  int64_t v31 = v27 + 3;
  if (v31 < v28)
  {
    unint64_t v30 = *(void *)(v29 + 8 * v31);
    if (!v30)
    {
      while (1)
      {
        int64_t v23 = v31 + 1;
        if (__OFADD__(v31, 1)) {
          goto LABEL_36;
        }
        if (v23 >= v28) {
          goto LABEL_32;
        }
        unint64_t v30 = *(void *)(v29 + 8 * v23);
        ++v31;
        if (v30) {
          goto LABEL_25;
        }
      }
    }
    int64_t v23 = v31;
    goto LABEL_25;
  }
LABEL_32:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v36 = *(void (**)(void *))(v0 + 8);
  v36(v18);
}

uint64_t sub_10002C214()
{
  swift_willThrow();
  swift_errorRelease();
  *(void *)(v0 + 552) = 100;
  unint64_t v1 = *(void **)(v0 + 528);

  static Logger.updates.getter();
  swift_retain_n();
  int64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 472);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412802;
    os_log_type_t v7 = *(void **)(*(void *)(v4 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v0 + 456) = v7;
    id v8 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2050;
    uint64_t v9 = *(void *)(*(void *)(v4 + 24) + 16);
    swift_release();
    *(void *)(v0 + 464) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v5 + 22) = 2050;
    *(void *)(v0 + 440) = 100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Looking up %{public}ld apps with a batch size of %{public}ld", (uint8_t *)v5, 0x20u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = *(void *)(v0 + 512);
  uint64_t v11 = *(void *)(v0 + 480);
  uint64_t v12 = *(void *)(v0 + 488);
  id v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v0 + 560) = v13;
  *(void *)(v0 + 56_Block_object_dispose(&a9, 8) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v10, v11);
  id v14 = sub_10030B11C();
  *(void *)(v0 + 576) = v14;
  NSString v15 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 584) = v15;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 768;
  *(void *)(v0 + 24) = sub_100028FA0;
  uint64_t v16 = swift_continuation_init();
  *(void *)(v0 + 280) = _NSConcreteStackBlock;
  *(void *)(v0 + 28_Block_object_dispose(&a9, 8) = 0x40000000;
  *(void *)(v0 + 296) = sub_100073DBC;
  *(void *)(v0 + 304) = &unk_100511630;
  *(void *)(v0 + 312) = v16;
  sub_10030CFAC(v14, v15, 0, (void *)(v0 + 280));
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10002C558()
{
  unint64_t v1 = v0;
  int64_t v2 = (void *)v0[73];
  os_log_type_t v3 = (void *)v1[72];
  swift_willThrow();
  swift_errorRelease();

  uint64_t v6 = *(void **)(v1[59] + 24);
  uint64_t v7 = v6[2];
  id v8 = (char *)_swiftEmptyArrayStorage;
  id v181 = v1;
  if (v7)
  {
    uint64_t v9 = swift_bridgeObjectRetain() + 64;
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    id v182 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(void *)(v9 - 24);
      uint64_t v183 = *(void *)(v9 - 32);
      id v14 = *(void **)(v9 - 16);
      char v186 = *(unsigned char *)(v9 - 8);
      int v15 = *(unsigned __int8 *)(v9 - 7);
      uint64_t v16 = *(void **)v9;
      uint64_t v189 = *(void *)(v9 + 8);
      uint64_t v17 = *(void **)(v9 + 24);
      uint64_t v18 = *(void *)(v9 + 40);
      uint64_t v195 = *(void *)(v9 + 16);
      uint64_t v198 = *(void *)(v9 + 32);
      uint64_t v19 = *(void *)(v9 + 56);
      uint64_t v205 = *(void *)(v9 + 48);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      char v188 = v14;
      id v20 = v14;
      uint64_t v192 = v16;
      id v21 = v16;
      v201 = v17;
      id v22 = v17;
      id v204 = v20;
      id v184 = v21;
      id v23 = v22;
      if (v15 == 1)
      {
        uint64_t v10 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_1000E7A0C(0, *((void *)v12 + 2) + 1, 1, v12);
        }
        unint64_t v25 = *((void *)v10 + 2);
        unint64_t v24 = *((void *)v10 + 3);
        if (v25 >= v24 >> 1) {
          uint64_t v10 = sub_1000E7A0C((char *)(v24 > 1), v25 + 1, 1, v10);
        }
        *((void *)v10 + 2) = v25 + 1;
        uint64_t v11 = &v10[96 * v25];
        *((void *)v11 + 4) = v183;
        *((void *)v11 + 5) = v13;
        *((void *)v11 + 6) = v188;
        v11[56] = v186;
        v11[57] = 1;
      }
      else
      {
        uint64_t v10 = v12;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v26 = v182;
        }
        else {
          uint64_t v26 = sub_1000E7A0C(0, *((void *)v182 + 2) + 1, 1, v182);
        }
        unint64_t v28 = *((void *)v26 + 2);
        unint64_t v27 = *((void *)v26 + 3);
        if (v28 >= v27 >> 1) {
          uint64_t v26 = sub_1000E7A0C((char *)(v27 > 1), v28 + 1, 1, v26);
        }
        *((void *)v26 + 2) = v28 + 1;
        id v182 = v26;
        uint64_t v11 = &v26[96 * v28];
        *((void *)v11 + 4) = v183;
        *((void *)v11 + 5) = v13;
        *((void *)v11 + 6) = v188;
        v11[56] = v186;
        v11[57] = 0;
      }
      *((void *)v11 + _Block_object_dispose(&a9, 8) = v192;
      *((void *)v11 + 9) = v189;
      *((void *)v11 + 10) = v195;
      *((void *)v11 + 11) = v201;
      *((void *)v11 + 12) = v198;
      *((void *)v11 + 13) = v18;
      *((void *)v11 + 14) = v205;
      *((void *)v11 + 15) = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v9 += 96;
      --v7;
    }
    while (v7);
    uint64_t v6 = (void *)swift_bridgeObjectRelease();
    unint64_t v1 = v181;
    id v8 = v182;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  v1[76] = v8;
  v1[75] = v10;
  uint64_t v29 = *((void *)v10 + 2);
  if (v29)
  {
    unint64_t v30 = (char *)(v1 + 18);
    swift_bridgeObjectRetain();
    uint64_t v31 = 32;
    uint64_t v32 = &selRef_actionWithLabel_url_;
    do
    {
      unint64_t v38 = v10;
      long long v39 = *(_OWORD *)&v10[v31 + 16];
      *(_OWORD *)unint64_t v30 = *(_OWORD *)&v10[v31];
      *((_OWORD *)v30 + 1) = v39;
      long long v40 = *(_OWORD *)&v10[v31 + 32];
      long long v41 = *(_OWORD *)&v10[v31 + 48];
      long long v42 = *(_OWORD *)&v10[v31 + 80];
      *((_OWORD *)v30 + 4) = *(_OWORD *)&v10[v31 + 64];
      *((_OWORD *)v30 + 5) = v42;
      *((_OWORD *)v30 + 2) = v40;
      *((_OWORD *)v30 + 3) = v41;
      sub_10002E484(v30);
      id v43 = sub_10002DD64();
      unint64_t v1 = [v43 v32[56]];

      unint64_t v45 = sub_100049B4C(v1);
      uint64_t v46 = _swiftEmptyDictionarySingleton[2];
      BOOL v47 = (v44 & 1) == 0;
      uint64_t v48 = v46 + v47;
      if (__OFADD__(v46, v47))
      {
        __break(1u);
        goto LABEL_186;
      }
      char v49 = v44;
      if (_swiftEmptyDictionarySingleton[3] < v48)
      {
        sub_1000CFB90(v48, 1);
        unint64_t v50 = sub_100049B4C(v1);
        if ((v49 & 1) != (v51 & 1))
        {
          sub_10001644C(&qword_1005A3810);
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v45 = v50;
      }
      if (v49)
      {

        uint64_t v52 = _swiftEmptyDictionarySingleton[7];
        id v53 = *(char **)(v52 + 8 * v45);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v52 + 8 * v45) = v53;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          id v53 = sub_1000E7A0C(0, *((void *)v53 + 2) + 1, 1, v53);
          *(void *)(v52 + 8 * v45) = v53;
        }
        unint64_t v56 = *((void *)v53 + 2);
        unint64_t v55 = *((void *)v53 + 3);
        if (v56 >= v55 >> 1)
        {
          id v53 = sub_1000E7A0C((char *)(v55 > 1), v56 + 1, 1, v53);
          *(void *)(v52 + 8 * v45) = v53;
        }
        uint64_t v10 = v38;
        *((void *)v53 + 2) = v56 + 1;
        uint64_t v33 = &v53[96 * v56];
        long long v34 = *((_OWORD *)v30 + 1);
        *((_OWORD *)v33 + 2) = *(_OWORD *)v30;
        *((_OWORD *)v33 + 3) = v34;
        long long v35 = *((_OWORD *)v30 + 2);
        long long v36 = *((_OWORD *)v30 + 3);
        long long v37 = *((_OWORD *)v30 + 5);
        *((_OWORD *)v33 + 6) = *((_OWORD *)v30 + 4);
        *((_OWORD *)v33 + 7) = v37;
        *((_OWORD *)v33 + 4) = v35;
        *((_OWORD *)v33 + 5) = v36;
        uint64_t v32 = &selRef_actionWithLabel_url_;
      }
      else
      {
        sub_10001644C(&qword_1005A3800);
        uint64_t v6 = (void *)swift_allocObject();
        long long v57 = *((_OWORD *)v30 + 2);
        long long v58 = *((_OWORD *)v30 + 4);
        long long v59 = *((_OWORD *)v30 + 5);
        *((_OWORD *)v6 + 5) = *((_OWORD *)v30 + 3);
        *((_OWORD *)v6 + 6) = v58;
        *((_OWORD *)v6 + 7) = v59;
        long long v60 = *(_OWORD *)v30;
        long long v61 = *((_OWORD *)v30 + 1);
        *((_OWORD *)v6 + 1) = xmmword_100488070;
        *((_OWORD *)v6 + 2) = v60;
        *((_OWORD *)v6 + 3) = v61;
        *((_OWORD *)v6 + 4) = v57;
        _swiftEmptyDictionarySingleton[(v45 >> 6) + 8] |= 1 << v45;
        uint64_t v62 = 8 * v45;
        *(void *)(_swiftEmptyDictionarySingleton[6] + v62) = v1;
        *(void *)(_swiftEmptyDictionarySingleton[7] + v62) = v6;
        uint64_t v63 = _swiftEmptyDictionarySingleton[2];
        BOOL v64 = __OFADD__(v63, 1);
        uint64_t v65 = v63 + 1;
        if (v64)
        {
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
          goto LABEL_199;
        }
        _swiftEmptyDictionarySingleton[2] = v65;
        uint64_t v10 = v38;
      }
      v31 += 96;
      --v29;
    }
    while (v29);
    uint64_t v6 = (void *)swift_bridgeObjectRelease();
    unint64_t v1 = v181;
  }
  int64_t v66 = 0;
  v180 = v1 + 53;
  id v185 = v1 + 54;
  v1[77] = _swiftEmptyDictionarySingleton;
  char v67 = _swiftEmptyDictionarySingleton[4];
  *((unsigned char *)v1 + 769) = v67;
  uint64_t v68 = 1 << v67;
  if (v68 < 64) {
    uint64_t v69 = ~(-1 << v68);
  }
  else {
    uint64_t v69 = -1;
  }
  unint64_t v70 = v69 & _swiftEmptyDictionarySingleton[8];
  v1[86] = _swiftEmptyArrayStorage;
  while (1)
  {
    do
    {
      if (v70)
      {
        unint64_t v73 = __clz(__rbit64(v70));
        v70 &= v70 - 1;
        unint64_t v74 = v73 | (v66 << 6);
        uint64_t v6 = (void *)v1[77];
      }
      else
      {
        int64_t v75 = v66 + 1;
        if (__OFADD__(v66, 1)) {
          goto LABEL_190;
        }
        int64_t v76 = (unint64_t)((1 << *((unsigned char *)v1 + 769)) + 63) >> 6;
        uint64_t v6 = (void *)v1[77];
        if (v75 >= v76)
        {
LABEL_80:
          swift_release();
          swift_bridgeObjectRelease();
          char v102 = sub_10002D9B4(v1[76]);
          uint64_t v6 = (void *)swift_bridgeObjectRelease();
          int64_t v103 = 0;
          v1[87] = v102;
          char v104 = v102[32];
          *((unsigned char *)v1 + 770) = v104;
          if (1 << v104 < 64) {
            uint64_t v105 = ~(-1 << (1 << v104));
          }
          else {
            uint64_t v105 = -1;
          }
          unint64_t v106 = v105 & *((void *)v102 + 8);
          unint64_t v45 = v1[86];
          while (2)
          {
            if (v106)
            {
              uint64_t v107 = (v106 - 1) & v106;
              unint64_t v108 = __clz(__rbit64(v106)) | (v103 << 6);
              uint64_t v6 = (void *)v1[87];
              goto LABEL_101;
            }
            int64_t v109 = v103 + 1;
            if (!__OFADD__(v103, 1))
            {
              int64_t v110 = (unint64_t)((1 << *((unsigned char *)v1 + 770)) + 63) >> 6;
              uint64_t v6 = (void *)v1[87];
              if (v109 >= v110) {
                goto LABEL_186;
              }
              char v111 = (char *)(v6 + 8);
              unint64_t v112 = v6[v109 + 8];
              ++v103;
              if (!v112)
              {
                int64_t v103 = v109 + 1;
                if (v109 + 1 >= v110) {
                  goto LABEL_186;
                }
                unint64_t v112 = *(void *)&v111[8 * v103];
                if (!v112)
                {
                  int64_t v103 = v109 + 2;
                  if (v109 + 2 >= v110) {
                    goto LABEL_186;
                  }
                  unint64_t v112 = *(void *)&v111[8 * v103];
                  if (!v112)
                  {
                    int64_t v113 = v109 + 3;
                    if (v113 < v110)
                    {
                      unint64_t v112 = *(void *)&v111[8 * v113];
                      if (v112)
                      {
                        int64_t v103 = v113;
                        goto LABEL_100;
                      }
                      while (1)
                      {
                        int64_t v103 = v113 + 1;
                        if (__OFADD__(v113, 1)) {
                          break;
                        }
                        if (v103 >= v110) {
                          goto LABEL_186;
                        }
                        unint64_t v112 = *(void *)&v111[8 * v103];
                        ++v113;
                        if (v112) {
                          goto LABEL_100;
                        }
                      }
LABEL_200:
                      __break(1u);
                      return _swift_task_switch(v6, v4, v5);
                    }
LABEL_186:
                    swift_release();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    v179 = (uint64_t (*)(unint64_t))v1[1];
                    return v179(v45);
                  }
                }
              }
LABEL_100:
              uint64_t v107 = (v112 - 1) & v112;
              unint64_t v108 = __clz(__rbit64(v112)) + (v103 << 6);
LABEL_101:
              v1[89] = v107;
              v1[88] = v103;
              uint64_t v114 = v1[69];
              uint64_t v115 = 8 * v108;
              uint64_t v116 = *(void **)(v6[6] + v115);
              v1[90] = v116;
              uint64_t v117 = *(void *)(v6[7] + v115);
              v1[91] = v117;
              v1[53] = 0;
              unint64_t v118 = *(void *)(v117 + 16);
              if (v114 <= 0)
              {
                if (v114 && !v118) {
                  goto LABEL_107;
                }
              }
              else if (v118 < v114)
              {
                goto LABEL_107;
              }
              unint64_t v118 = v114;
LABEL_107:
              *id v185 = v118;
              swift_bridgeObjectRetain_n();
              id v119 = v116;
              swift_beginAccess();
              uint64_t v6 = (void *)swift_beginAccess();
              uint64_t v120 = *v180;
              uint64_t v121 = *v185;
              if (*v180 >= *v185) {
                goto LABEL_84;
              }
LABEL_108:
              v1[95] = v45;
              uint64_t v122 = v1[91];
              v1[53] = v121;
              unint64_t v123 = *(void *)(v122 + 16);
              uint64_t v124 = v123 - v121;
              if (__OFSUB__(v123, v121)) {
                goto LABEL_194;
              }
              uint64_t v125 = v1[69];
              if (v125 < 1)
              {
                BOOL v127 = v124 <= 0 && v125 < v124;
                uint64_t v126 = *(void *)(v122 + 16);
                if (!v127) {
                  goto LABEL_117;
                }
              }
              else if (v124 < 0 || (uint64_t v126 = *(void *)(v122 + 16), v124 >= (unint64_t)v125))
              {
LABEL_117:
                uint64_t v126 = v121 + v125;
                if (__OFADD__(v121, v125)) {
                  goto LABEL_197;
                }
              }
              *id v185 = v126;
              if (v120 < 0) {
                goto LABEL_195;
              }
              if (v123 < v120 || (uint64_t)v123 < v121) {
                goto LABEL_196;
              }
              type metadata accessor for __ContiguousArrayStorageBase();
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain_n();
              long long v129 = (void *)swift_dynamicCastClass();
              if (!v129)
              {
                swift_bridgeObjectRelease();
                long long v129 = _swiftEmptyArrayStorage;
              }
              uint64_t v130 = v129[2];
              swift_release();
              uint64_t v131 = v1[91];
              if (v130 == v121 - v120)
              {
                long long v132 = (void *)swift_dynamicCastClass();
                if (!v132)
                {
                  swift_bridgeObjectRelease();
                  long long v132 = _swiftEmptyArrayStorage;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                long long v132 = sub_1000A860C(v131, v131 + 32, v120, (2 * v121) | 1);
              }
              swift_bridgeObjectRelease();
              if (qword_1005A2F98 != -1) {
                swift_once();
              }
              unint64_t v133 = (void *)qword_1005A3670;
              sub_100018D68(0, (unint64_t *)&qword_1005A3230);
              id v134 = v133;
              char v135 = static NSObject.== infix(_:_:)();

              if ((v135 & 1) != 0 || (uint64_t v191 = v132[2]) == 0)
              {
LABEL_166:
                swift_release();
                id v163 = objc_msgSend(self, "ams_sharedAccountStore");
                id v151 = objc_msgSend(v163, "ams_activeiTunesAccount");

                goto LABEL_167;
              }
              unint64_t v136 = 0;
              uint64_t v194 = v132;
              char v197 = v132 + 4;
LABEL_133:
              if (v136 >= v132[2]) {
                goto LABEL_192;
              }
              id v137 = &v197[12 * v136];
              uint64_t v138 = (void *)v137[2];
              int v139 = *((unsigned __int8 *)v137 + 25);
              char v140 = (void *)v137[4];
              uint64_t v141 = (void *)v137[7];
              uint64_t v203 = v141;
              if (v138)
              {
                int v200 = *((unsigned __int8 *)v137 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v142 = v138;
                swift_bridgeObjectRetain();
                id v143 = v142;
                id v144 = v140;
                id v145 = v141;
                Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
                char v147 = static NSObject.== infix(_:_:)();

                if (v147)
                {

                  int v139 = v200;
                  goto LABEL_151;
                }
                id v150 = objc_msgSend(self, "ams_sharedAccountStore");
                id v151 = objc_msgSend(v150, "ams_iTunesAccountWithDSID:", v143);

                int v139 = v200;
                if (v151)
                {
                  if (v200) {
                    goto LABEL_140;
                  }
LABEL_158:
                  if (v151) {
                    goto LABEL_159;
                  }
LABEL_161:
                  long long v132 = v194;
                  goto LABEL_162;
                }
              }
              else
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v148 = v140;
                id v149 = v141;
              }
LABEL_151:
              if (v140)
              {
                id v159 = v140;
                Class v160 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                char v161 = static NSObject.== infix(_:_:)();

                if (v161)
                {

                  id v151 = 0;
                }
                else
                {
                  id v162 = objc_msgSend(self, "ams_sharedAccountStore");
                  id v151 = objc_msgSend(v162, "ams_iTunesAccountWithDSID:", v159);
                }
                if (!v139) {
                  goto LABEL_158;
                }
              }
              else
              {
                id v151 = 0;
                if (!v139) {
                  goto LABEL_158;
                }
              }
LABEL_140:
              if (v151)
              {
LABEL_159:
                if (v139 == objc_msgSend(v151, "ams_isManagedAppleID"))
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  uint64_t v6 = (void *)swift_bridgeObjectRelease();
                  goto LABEL_167;
                }

                goto LABEL_161;
              }
              id v152 = objc_msgSend(self, "ams_sharedAccountStore");
              id v153 = objc_msgSend(v152, "ams_iTunesAccounts");

              sub_100018D68(0, &qword_1005A3808);
              unint64_t v154 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              char v155 = v140;
              if (v154 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v156 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v156)
                {
LABEL_143:
                  uint64_t v157 = 0;
                  while (1)
                  {
                    if ((v154 & 0xC000000000000001) != 0) {
                      uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                    }
                    else {
                      uint64_t v6 = *(id *)(v154 + 8 * v157 + 32);
                    }
                    id v151 = v6;
                    uint64_t v158 = v157 + 1;
                    if (__OFADD__(v157, 1)) {
                      goto LABEL_191;
                    }
                    if (objc_msgSend(v6, "ams_isManagedAppleID")) {
                      break;
                    }

                    ++v157;
                    if (v158 == v156) {
                      goto LABEL_150;
                    }
                  }
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  uint64_t v6 = (void *)swift_bridgeObjectRelease();
                  unint64_t v1 = v181;
LABEL_167:
                  v1[92] = v151;
                  uint64_t v164 = v1[91];
                  unint64_t v165 = *(void *)(v164 + 16);
                  if (!v165)
                  {
LABEL_182:
                    v177 = (void *)swift_task_alloc();
                    v1[93] = v177;
                    void *v177 = v1;
                    v177[1] = sub_10002B5DC;
                    uint64_t v178 = v1[90];
                    return sub_100024F28(v178);
                  }
                  unint64_t v166 = 0;
                  uint64_t v167 = (uint64_t *)(v164 + 104);
                  while (1)
                  {
                    uint64_t v168 = *v167;
                    if (*v167) {
                      break;
                    }
                    ++v166;
                    v167 += 12;
                    if (v165 == v166) {
                      goto LABEL_182;
                    }
                  }
                  if (v166 >= v165) {
                    goto LABEL_198;
                  }
                  uint64_t v169 = *(v167 - 1);
                  id v170 = v151;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  char v171 = swift_isUniquelyReferenced_nonNull_native();
                  unint64_t v45 = v1[95];
                  if ((v171 & 1) == 0) {
                    unint64_t v45 = (unint64_t)sub_1000E7B34(0, *(void *)(v45 + 16) + 1, 1, (void *)v1[95]);
                  }
                  unint64_t v173 = *(void *)(v45 + 16);
                  unint64_t v172 = *(void *)(v45 + 24);
                  if (v173 >= v172 >> 1) {
                    unint64_t v45 = (unint64_t)sub_1000E7B34((void *)(v172 > 1), v173 + 1, 1, (void *)v45);
                  }
                  uint64_t v174 = v181[92];
                  uint64_t v175 = v181[91];
                  *(void *)(v45 + 16) = v173 + 1;
                  uint64_t v176 = (void *)(v45 + 32 * v173);
                  unint64_t v1 = v181;
                  v176[4] = v174;
                  v176[5] = v175;
                  v176[6] = v169;
                  v176[7] = v168;

                  uint64_t v120 = v181[53];
                  uint64_t v121 = v181[54];
                  if (v120 >= v121)
                  {
LABEL_84:

                    uint64_t v6 = (void *)swift_bridgeObjectRelease_n();
                    unint64_t v106 = v1[89];
                    int64_t v103 = v1[88];
                    continue;
                  }
                  goto LABEL_108;
                }
              }
              else
              {
                uint64_t v156 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v156) {
                  goto LABEL_143;
                }
              }
LABEL_150:
              swift_bridgeObjectRelease();
              unint64_t v1 = v181;
              long long v132 = v194;
              char v140 = v155;
LABEL_162:
              ++v136;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              uint64_t v6 = (void *)swift_bridgeObjectRelease();
              if (v136 == v191) {
                goto LABEL_166;
              }
              goto LABEL_133;
            }
            break;
          }
LABEL_199:
          __break(1u);
          goto LABEL_200;
        }
        uint64_t v77 = (char *)(v6 + 8);
        unint64_t v78 = v6[v75 + 8];
        ++v66;
        if (!v78)
        {
          int64_t v66 = v75 + 1;
          if (v75 + 1 >= v76) {
            goto LABEL_80;
          }
          unint64_t v78 = *(void *)&v77[8 * v66];
          if (!v78)
          {
            int64_t v66 = v75 + 2;
            if (v75 + 2 >= v76) {
              goto LABEL_80;
            }
            unint64_t v78 = *(void *)&v77[8 * v66];
            if (!v78)
            {
              int64_t v79 = v75 + 3;
              if (v79 >= v76) {
                goto LABEL_80;
              }
              unint64_t v78 = *(void *)&v77[8 * v79];
              if (!v78)
              {
                while (1)
                {
                  int64_t v66 = v79 + 1;
                  if (__OFADD__(v79, 1)) {
                    goto LABEL_193;
                  }
                  if (v66 >= v76) {
                    goto LABEL_80;
                  }
                  unint64_t v78 = *(void *)&v77[8 * v66];
                  ++v79;
                  if (v78) {
                    goto LABEL_55;
                  }
                }
              }
              int64_t v66 = v79;
            }
          }
        }
LABEL_55:
        unint64_t v70 = (v78 - 1) & v78;
        unint64_t v74 = __clz(__rbit64(v78)) + (v66 << 6);
      }
      v1[79] = v70;
      v1[78] = v66;
      uint64_t v80 = 8 * v74;
      uint64_t v81 = *(void **)(v6[6] + v80);
      v1[80] = v81;
      uint64_t v82 = *(void *)(v6[7] + v80);
      v1[81] = v82;
    }
    while (!v81);
    uint64_t v83 = self;
    id v71 = v81;
    swift_bridgeObjectRetain();
    id v84 = objc_msgSend(v83, "ams_sharedAccountStore");
    id v85 = objc_msgSend(v84, "ams_iTunesAccountWithDSID:", v71);
    v1[82] = v85;

    if (v85) {
      break;
    }
    swift_bridgeObjectRelease();
    id v72 = v71;
LABEL_39:
  }
  uint64_t v190 = v71;
  unint64_t v193 = v70;
  int64_t v196 = v66;
  uint64_t v86 = *(void *)(v82 + 16);
  if (!v86)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    id v71 = v190;

    unint64_t v70 = v193;
    int64_t v66 = v196;
    id v72 = v85;
    goto LABEL_39;
  }
  sub_100018D68(0, (unint64_t *)&qword_1005A3230);
  swift_bridgeObjectRetain_n();
  uint64_t v187 = v82;
  uint64_t v87 = v82 + 64;
  while (1)
  {
    uint64_t v88 = *(void **)(v87 - 16);
    uint64_t v89 = *(void **)v87;
    id v90 = *(void **)(v87 + 24);
    if (v90)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v91 = v90;
      swift_bridgeObjectRetain();
      id v202 = v88;
      v206 = v89;
      id v199 = v89;
      id v92 = v91;
      Class v93 = NSNumber.init(integerLiteral:)(0).super.super.isa;
      char v94 = static NSObject.== infix(_:_:)();

      if ((v94 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_68;
      }

      uint64_t v89 = v206;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v95 = v88;
      id v96 = v89;
    }
    if (qword_1005A2F98 != -1) {
      swift_once();
    }
    id v92 = (id)qword_1005A3670;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_68:
    unint64_t v1 = v181;
    v181[83] = v92;
    swift_bridgeObjectRelease();
    if (qword_1005A2F98 != -1) {
      swift_once();
    }
    id v97 = (id)qword_1005A3670;
    char v98 = static NSObject.== infix(_:_:)();

    if ((v98 & 1) == 0) {
      break;
    }

    v87 += 96;
    if (!--v86)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v99 = (void *)swift_task_alloc();
  v181[84] = v99;
  *uint64_t v99 = v181;
  v99[1] = sub_10002A478;
  uint64_t v100 = v181[59];
  v99[3] = v92;
  v99[4] = v100;
  v99[2] = v187;
  uint64_t v6 = sub_10002E068;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  return _swift_task_switch(v6, v4, v5);
}

uint64_t sub_10002D900(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10001644C(&qword_1005A4E40);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

void *sub_10002D9B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyDictionarySingleton;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v40 = v2;
  while (1)
  {
    uint64_t v41 = *(void *)(v2 + v3 + 32);
    char v42 = *(unsigned char *)(v2 + v3 + 56);
    char v43 = *(unsigned char *)(v2 + v3 + 57);
    long long v5 = *(_OWORD *)(v2 + v3 + 64);
    uint64_t v6 = *(void *)(v2 + v3 + 104);
    uint64_t v7 = *(void *)(v2 + v3 + 120);
    uint64_t v45 = *(void *)(v2 + v3 + 96);
    uint64_t v46 = *(void *)(v2 + v3 + 112);
    long long v44 = *(_OWORD *)(v2 + v3 + 80);
    id v8 = *(void **)(v2 + v3 + 48);
    long long v47 = *(_OWORD *)(v2 + v3 + 40);
    long long v48 = v5;
    if (*((void *)&v44 + 1))
    {
      sub_100018D68(0, (unint64_t *)&qword_1005A3230);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v9 = *((id *)&v44 + 1);
      swift_bridgeObjectRetain();
      id v10 = v8;
      id v11 = (id)v48;
      id v12 = v9;
      Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
      char v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      int v15 = (void *)v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v16 = v8;
      id v17 = v15;
    }
    if (qword_1005A2F98 != -1) {
      swift_once();
    }
    id v12 = (id)qword_1005A3670;
LABEL_12:
    unint64_t v19 = sub_100049B08((uint64_t)v12);
    uint64_t v20 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    char v23 = v18;
    if (*((void *)&_swiftEmptyDictionarySingleton + 3) < v22)
    {
      sub_1000CF600(v22, 1);
      unint64_t v24 = sub_100049B08((uint64_t)v12);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_27;
      }
      unint64_t v19 = v24;
    }
    if (v23)
    {

      uint64_t v26 = *((void *)&_swiftEmptyDictionarySingleton + 7);
      unint64_t v27 = *(char **)(v26 + 8 * v19);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v26 + 8 * v19) = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v27 = sub_1000E7A0C(0, *((void *)v27 + 2) + 1, 1, v27);
        *(void *)(v26 + 8 * v19) = v27;
      }
      unint64_t v30 = *((void *)v27 + 2);
      unint64_t v29 = *((void *)v27 + 3);
      long long v32 = v47;
      long long v31 = v48;
      if (v30 >= v29 >> 1)
      {
        uint64_t v33 = sub_1000E7A0C((char *)(v29 > 1), v30 + 1, 1, v27);
        long long v32 = v47;
        long long v31 = v48;
        unint64_t v27 = v33;
        *(void *)(v26 + 8 * v19) = v33;
      }
      uint64_t v2 = v40;
      *((void *)v27 + 2) = v30 + 1;
      uint64_t v4 = &v27[96 * v30];
      *((void *)v4 + 4) = v41;
      *(_OWORD *)(v4 + 40) = v32;
      v4[56] = v42;
      v4[57] = v43;
      *((_OWORD *)v4 + 4) = v31;
      *((_OWORD *)v4 + 5) = v44;
      *((void *)v4 + 12) = v45;
      *((void *)v4 + 13) = v6;
      *((void *)v4 + 14) = v46;
      *((void *)v4 + 15) = v7;
    }
    else
    {
      sub_10001644C(&qword_1005A3800);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_100488070;
      *(void *)(v34 + 32) = v41;
      *(_OWORD *)(v34 + 40) = v47;
      *(unsigned char *)(v34 + 56) = v42;
      *(unsigned char *)(v34 + 57) = v43;
      *(_OWORD *)(v34 + 64) = v48;
      *(_OWORD *)(v34 + 80) = v44;
      *(void *)(v34 + 96) = v45;
      *(void *)(v34 + 104) = v6;
      *(void *)(v34 + 112) = v46;
      *(void *)(v34 + 120) = v7;
      *((void *)&_swiftEmptyDictionarySingleton + (v19 >> 6) + 8) |= 1 << v19;
      uint64_t v35 = 8 * v19;
      *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + v35) = v12;
      *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + v35) = v34;
      uint64_t v36 = *((void *)&_swiftEmptyDictionarySingleton + 2);
      BOOL v37 = __OFADD__(v36, 1);
      uint64_t v38 = v36 + 1;
      if (v37) {
        goto LABEL_26;
      }
      *((void *)&_swiftEmptyDictionarySingleton + 2) = v38;
      uint64_t v2 = v40;
    }
    v3 += 96;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return &_swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  sub_100018D68(0, (unint64_t *)&qword_1005A3230);
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_10002DD64()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  if (v2)
  {
    sub_100018D68(0, (unint64_t *)&qword_1005A3230);
    id v3 = v2;
    Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    char v5 = static NSObject.== infix(_:_:)();

    if (v5)
    {
    }
    else
    {
      id v6 = objc_msgSend(self, "ams_sharedAccountStore");
      id v7 = objc_msgSend(v6, "ams_iTunesAccountWithDSID:", v3);

      if (v7) {
        goto LABEL_9;
      }
    }
  }
  id v8 = *(void **)(v1 + 32);
  if (!v8)
  {
LABEL_8:
    id v7 = 0;
LABEL_9:
    char v12 = *(unsigned char *)(v1 + 25);
    if (v12) {
      goto LABEL_10;
    }
LABEL_22:
    if (!v7) {
      return v7;
    }
    goto LABEL_23;
  }
  sub_100018D68(0, (unint64_t *)&qword_1005A3230);
  id v9 = v8;
  Class v10 = NSNumber.init(integerLiteral:)(0).super.super.isa;
  char v11 = static NSObject.== infix(_:_:)();

  if (v11)
  {

    goto LABEL_8;
  }
  id v20 = objc_msgSend(self, "ams_sharedAccountStore");
  id v7 = objc_msgSend(v20, "ams_iTunesAccountWithDSID:", v9);

  char v12 = *(unsigned char *)(v1 + 25);
  if ((v12 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_10:
  if (!v7)
  {
    id v13 = objc_msgSend(self, "ams_sharedAccountStore");
    id v14 = objc_msgSend(v13, "ams_iTunesAccounts");

    sub_100018D68(0, &qword_1005A3808);
    unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v15 >> 62) {
      goto LABEL_29;
    }
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v16)
    {
      uint64_t v17 = 4;
      while (1)
      {
        id v18 = (v15 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v15 + 8 * v17);
        id v7 = v18;
        uint64_t v19 = v17 - 3;
        if (__OFADD__(v17 - 4, 1)) {
          break;
        }
        if (objc_msgSend(v18, "ams_isManagedAppleID"))
        {
          swift_bridgeObjectRelease();
          return v7;
        }

        ++v17;
        if (v19 == v16) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_29:
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_23:
  if ((v12 & 1) != objc_msgSend(v7, "ams_isManagedAppleID"))
  {

    return 0;
  }
  return v7;
}

uint64_t sub_10002E044(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10002E068, 0, 0);
}

void sub_10002E068()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(v1 + 104);
    while (1)
    {
      uint64_t v5 = *v4;
      if (*v4) {
        break;
      }
      ++v3;
      v4 += 12;
      if (v2 == v3) {
        goto LABEL_5;
      }
    }
    if (v3 >= v2)
    {
      __break(1u);
    }
    else
    {
      uint64_t v8 = *(v4 - 1);
      id v9 = (void (*)(uint64_t, uint64_t))v0[1];
      swift_bridgeObjectRetain();
      v9(v8, v5);
    }
  }
  else
  {
LABEL_5:
    id v6 = (void *)swift_task_alloc();
    v0[5] = v6;
    *id v6 = v0;
    v6[1] = sub_10002E18C;
    uint64_t v7 = v0[3];
    sub_100024F28(v7);
  }
}

uint64_t sub_10002E18C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_10002E290()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_cachedStorefrontMappingURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_10002E368()
{
  return type metadata accessor for MediaAPIUpdateAvailabilityCheck();
}

uint64_t type metadata accessor for MediaAPIUpdateAvailabilityCheck()
{
  uint64_t result = qword_1005A36B8;
  if (!qword_1005A36B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002E3BC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_10002E484(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  unint64_t v3 = (void *)a1[4];
  uint64_t v4 = (void *)a1[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v2;
  id v6 = v3;
  id v7 = v4;
  return a1;
}

unint64_t sub_10002E4EC()
{
  unint64_t result = qword_1005A3820;
  if (!qword_1005A3820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3820);
  }
  return result;
}

uint64_t sub_10002E540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C(&qword_1005A5660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E5A8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10002E5F0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10002E600(id *a1)
{
}

uint64_t sub_10002E608()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002E618(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10002E668(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002E6B0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002E5A8(&qword_1005A3828);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for UpdateBatch(id *a1)
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for UpdateBatch(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UpdateBatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for UpdateBatch(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for UpdateBatch(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateBatch(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateBatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&a9, 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateBatch()
{
  return &type metadata for UpdateBatch;
}

uint64_t destroy for SkannerInteropPayload()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SkannerInteropPayload(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SkannerInteropPayload(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  return a1;
}

__n128 initializeWithTake for SkannerInteropPayload(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SkannerInteropPayload(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SkannerInteropPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SkannerInteropPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SkannerInteropPayload()
{
  return &type metadata for SkannerInteropPayload;
}

uint64_t sub_10002EC08(char a1)
{
  uint64_t result = 0x707954746E657665;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7954746C75736572;
      break;
    case 2:
      uint64_t result = 0x726F7774654E6461;
      break;
    case 3:
      uint64_t result = 0x657079546461;
      break;
    case 4:
      uint64_t result = 0x7463617265746E69;
      break;
    case 5:
      uint64_t result = 0x74616E6974736564;
      break;
    case 6:
      uint64_t result = 0x7461745370747468;
      break;
    case 7:
      uint64_t result = 0x6B63616274736F70;
      break;
    case 8:
      uint64_t result = 0x6D6F44726F727265;
      break;
    case 9:
      uint64_t result = 0x646F43726F727265;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_10002ED84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10002ED98()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002EDE0()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10002EE0C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10002EE50()
{
  return sub_10002EC08(*v0);
}

uint64_t sub_10002EE58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002F378(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002EE80()
{
  return 0;
}

void sub_10002EE8C(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10002EE98(uint64_t a1)
{
  unint64_t v2 = sub_10002FD44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002EED4(uint64_t a1)
{
  unint64_t v2 = sub_10002FD44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002EF10(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10001644C(&qword_1005A3888);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FD00(a1, a1[3]);
  sub_10002FD44();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = *v3;
  char v11 = 0;
  sub_10002FF90();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_100030134((uint64_t)(v3 + 1), (uint64_t)&v17, &qword_1005A3898);
    sub_100030134((uint64_t)&v17, (uint64_t)&v12, &qword_1005A3898);
    char v11 = 1;
    sub_10002FFE4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100030134((uint64_t)(v3 + 24), (uint64_t)&v16, &qword_1005A38A8);
    sub_100030134((uint64_t)&v16, (uint64_t)&v12, &qword_1005A38A8);
    char v11 = 3;
    sub_100030038();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100030134((uint64_t)(v3 + 25), (uint64_t)&v15, &qword_1005A38B8);
    sub_100030134((uint64_t)&v15, (uint64_t)&v12, &qword_1005A38B8);
    char v11 = 4;
    sub_10003008C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100030134((uint64_t)(v3 + 26), (uint64_t)&v14, &qword_1005A38C8);
    sub_100030134((uint64_t)&v14, (uint64_t)&v12, &qword_1005A38C8);
    char v11 = 5;
    sub_1000300E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100030134((uint64_t)(v3 + 41), (uint64_t)&v13, &qword_1005A38D8);
    sub_100030134((uint64_t)&v13, (uint64_t)&v12, &qword_1005A38D8);
    char v11 = 7;
    sub_100030198();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_10002F2E8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002F83C(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 4_Block_object_dispose(&a9, 8) = v5;
    *(_OWORD *)(a2 + 57) = *(_OWORD *)((char *)v7 + 9);
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10002F334(void *a1)
{
  return sub_10002EF10(a1);
}

uint64_t sub_10002F378(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7954746C75736572 && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F7774654E6461 && a2 == 0xEB0000000044496BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657079546461 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7463617265746E69 && a2 == 0xEF657079546E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7461745370747468 && a2 == 0xEE0065646F437375 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6B63616274736F70 && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6D6F44726F727265 && a2 == 0xEB000000006E6961 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_10002F83C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10001644C(&qword_1005A3848);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FD00(a1, a1[3]);
  sub_10002FD44();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10002E618((uint64_t)a1);
  }
  char v37 = 0;
  sub_10002FD98();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unsigned __int8 v9 = v38;
  char v37 = 1;
  sub_10002FDEC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v10 = v38;
  unsigned __int8 v38 = 2;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v35 = v11;
  int v36 = v10;
  char v37 = 3;
  sub_10002FE40();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v34 = v13;
  int v14 = v38;
  char v37 = 4;
  sub_10002FE94();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v33 = v14;
  int v15 = v38;
  char v37 = 5;
  sub_10002FEE8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v32 = v15;
  int v16 = v38;
  unsigned __int8 v38 = 6;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v29 = v18;
  uint64_t v30 = v17;
  int v31 = v16;
  char v37 = 7;
  sub_10002FF3C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v28 = v38;
  unsigned __int8 v38 = 8;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v20 = v19;
  unsigned __int8 v38 = 9;
  swift_bridgeObjectRetain();
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  HIDWORD(v26) = v22;
  uint64_t v23 = v21;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10002E618((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v24 = v34;
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v9;
  *(unsigned char *)(a2 + 1) = v36;
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = v35;
  *(void *)(a2 + 16) = v24;
  *(unsigned char *)(a2 + 24) = v33;
  *(unsigned char *)(a2 + 25) = v32;
  *(unsigned char *)(a2 + 26) = v31;
  *(void *)(a2 + 32) = v30;
  *(unsigned char *)(a2 + 40) = v29 & 1;
  *(unsigned char *)(a2 + 41) = v28;
  *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = v27;
  *(void *)(a2 + 56) = v20;
  *(void *)(a2 + 64) = v23;
  *(unsigned char *)(a2 + 72) = BYTE4(v26) & 1;
  return result;
}

void *sub_10002FD00(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10002FD44()
{
  unint64_t result = qword_1005A3850;
  if (!qword_1005A3850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3850);
  }
  return result;
}

unint64_t sub_10002FD98()
{
  unint64_t result = qword_1005A3858;
  if (!qword_1005A3858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3858);
  }
  return result;
}

unint64_t sub_10002FDEC()
{
  unint64_t result = qword_1005A3860;
  if (!qword_1005A3860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3860);
  }
  return result;
}

unint64_t sub_10002FE40()
{
  unint64_t result = qword_1005A3868;
  if (!qword_1005A3868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3868);
  }
  return result;
}

unint64_t sub_10002FE94()
{
  unint64_t result = qword_1005A3870;
  if (!qword_1005A3870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3870);
  }
  return result;
}

unint64_t sub_10002FEE8()
{
  unint64_t result = qword_1005A3878;
  if (!qword_1005A3878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3878);
  }
  return result;
}

unint64_t sub_10002FF3C()
{
  unint64_t result = qword_1005A3880;
  if (!qword_1005A3880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3880);
  }
  return result;
}

unint64_t sub_10002FF90()
{
  unint64_t result = qword_1005A3890;
  if (!qword_1005A3890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3890);
  }
  return result;
}

unint64_t sub_10002FFE4()
{
  unint64_t result = qword_1005A38A0;
  if (!qword_1005A38A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A38A0);
  }
  return result;
}

unint64_t sub_100030038()
{
  unint64_t result = qword_1005A38B0;
  if (!qword_1005A38B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A38B0);
  }
  return result;
}

unint64_t sub_10003008C()
{
  unint64_t result = qword_1005A38C0;
  if (!qword_1005A38C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A38C0);
  }
  return result;
}

unint64_t sub_1000300E0()
{
  unint64_t result = qword_1005A38D0;
  if (!qword_1005A38D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A38D0);
  }
  return result;
}

uint64_t sub_100030134(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10001644C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100030198()
{
  unint64_t result = qword_1005A38E0;
  if (!qword_1005A38E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A38E0);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for SkannerEvent.ResultType(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SkannerInteropPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SkannerInteropPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100030354);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t sub_10003037C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100030384(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SkannerInteropPayload.CodingKeys()
{
  return &type metadata for SkannerInteropPayload.CodingKeys;
}

unint64_t sub_1000303A0()
{
  unint64_t result = qword_1005A38E8;
  if (!qword_1005A38E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A38E8);
  }
  return result;
}

unint64_t sub_1000303F8()
{
  unint64_t result = qword_1005A38F0;
  if (!qword_1005A38F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A38F0);
  }
  return result;
}

unint64_t sub_100030450()
{
  unint64_t result = qword_1005A38F8;
  if (!qword_1005A38F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A38F8);
  }
  return result;
}

id sub_1000305F4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UpdatesDatabaseMergeResult();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for UpdatesDatabaseMergeResult()
{
  return self;
}

ValueMetadata *type metadata accessor for AppVersion()
{
  return &type metadata for AppVersion;
}

uint64_t destroy for UpdateEligibleApp(id *a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UpdateEligibleApp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v3;
  unsigned int v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  BOOL v7 = *(void **)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v6;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  id v9 = v4;
  id v10 = v5;
  id v11 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UpdateEligibleApp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = *(void **)(a1 + 16);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  id v6 = v5;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  BOOL v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v8;
  id v9 = v8;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  id v10 = *(void **)(a1 + 56);
  id v11 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v11;
  id v12 = v11;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for UpdateEligibleApp(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v4;
  return result;
}

uint64_t assignWithTake for UpdateEligibleApp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 8);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  long long v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  id v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateEligibleApp(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateEligibleApp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8_Block_object_dispose(&a9, 8) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8_Block_object_dispose(&a9, 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateEligibleApp()
{
  return &type metadata for UpdateEligibleApp;
}

uint64_t sub_1000309B4(char *a1, unsigned __int8 *a2)
{
  return sub_1000F0CD8(*a1, *a2);
}

Swift::Int sub_1000309C0()
{
  return Hasher._finalize()();
}

uint64_t sub_100030A48()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100030ABC()
{
  return Hasher._finalize()();
}

unint64_t sub_100030B40@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100031FE4(*a1);
  *a2 = result;
  return result;
}

void sub_100030B70(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 1635018093;
  if (v2 != 1) {
    uint64_t v4 = 1701869940;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 25705;
  }
  if (!v5) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_100030BB4()
{
  uint64_t v1 = 1635018093;
  if (*v0 != 1) {
    uint64_t v1 = 1701869940;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

unint64_t sub_100030BF4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100031FE4(a1);
  *a2 = result;
  return result;
}

void sub_100030C1C(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100030C28(uint64_t a1)
{
  unint64_t v2 = sub_1000310D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030C64(uint64_t a1)
{
  unint64_t v2 = sub_1000310D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030CA0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10001644C(&qword_1005A3948);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002FD00(a1, a1[3]);
  sub_1000310D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10001644C(&qword_1005A3958);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100488070;
  *(void *)(inited + 32) = 0xD000000000000012;
  *(void *)(inited + 40) = 0x800000010044B2E0;
  unint64_t v13 = *(void *)(v3 + 40);
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 56) = v10;
  unint64_t v13 = sub_100042B10(inited);
  v12[7] = 1;
  sub_10001644C(&qword_1005A3960);
  sub_100031128();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    unint64_t v13 = *(void *)(v3 + 48);
    dispatch thunk of CustomStringConvertible.description.getter();
    LOBYTE(v13) = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100030F10(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10001644C(&qword_1005A3998);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002FD00(a1, a1[3]);
  sub_100032030();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  sub_10001644C(&qword_1005A39A8);
  sub_100032084();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    void v10[5] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000310BC(void *a1)
{
  return sub_100030CA0(a1);
}

unint64_t sub_1000310D4()
{
  unint64_t result = qword_1005A3950;
  if (!qword_1005A3950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3950);
  }
  return result;
}

unint64_t sub_100031128()
{
  unint64_t result = qword_1005A3968;
  if (!qword_1005A3968)
  {
    sub_10002E5A8(&qword_1005A3960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3968);
  }
  return result;
}

uint64_t sub_100031194()
{
  uint64_t v1 = 1684632935;
  if (*v0 != 1) {
    uint64_t v1 = 0x636E7973626BLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1635017060;
  }
}

uint64_t sub_1000311DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000323E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100031204(uint64_t a1)
{
  unint64_t v2 = sub_100032030();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100031240(uint64_t a1)
{
  unint64_t v2 = sub_100032030();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003127C(void *a1)
{
  return sub_100030F10(a1);
}

uint64_t sub_100031294(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 192) = a1;
  *(void *)(v2 + 200) = a2;
  return _swift_task_switch(sub_1000312B4, 0, 0);
}

uint64_t sub_1000312B4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  if (!v1) {
    goto LABEL_14;
  }
  if (!*(void *)(v1 + 16) || (unint64_t v2 = sub_100049A4C(0x73746C75736572, 0xE700000000000000), (v3 & 1) == 0))
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_100031C38(*(void *)(v1 + 56) + 32 * v2, v0 + 16);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 40))
  {
LABEL_13:
    sub_100031BD8(v0 + 16);
    goto LABEL_14;
  }
  sub_10001644C(&qword_1005A5E50);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:

    uint64_t v10 = _swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)(v0 + 184);
  if (!*(void *)(v4 + 16)
    || (unint64_t v5 = sub_100049A4C(0xD000000000000010, 0x800000010044B380), (v6 & 1) == 0)
    || (sub_100031C38(*(void *)(v4 + 56) + 32 * v5, v0 + 80),
        sub_10001644C(&qword_1005A3978),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(v0 + 160);
  *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v7;
  if (*(void *)(v4 + 16) && (unint64_t v8 = sub_100049A4C(0xD00000000000001CLL, 0x800000010044B3A0), (v9 & 1) != 0))
  {
    sub_100031C38(*(void *)(v4 + 56) + 32 * v8, v0 + 112);
  }
  else
  {
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 12_Block_object_dispose(&a9, 8) = 0u;
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 136))
  {
    unint64_t v13 = (uint64_t *)(v0 + 176);
    if (swift_dynamicCast())
    {
      uint64_t v14 = *v13;
      uint64_t v15 = *(void *)(*v13 + 16);
      if (v15)
      {
        uint64_t v33 = v7;
        uint64_t v16 = 0;
        uint64_t v17 = (_OWORD *)(v0 + 48);
        int v18 = (char *)_swiftEmptyArrayStorage;
        while (1)
        {
          uint64_t v19 = *(void *)(v14 + 8 * v16 + 32);
          if (*(void *)(v19 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v20 = sub_100049A4C(25705, 0xE200000000000000);
            if (v21)
            {
              sub_100031C38(*(void *)(v19 + 56) + 32 * v20, v0 + 48);
            }
            else
            {
              _OWORD *v17 = 0u;
              *(_OWORD *)(v0 + 64) = 0u;
            }
            swift_bridgeObjectRelease();
            if (*(void *)(v0 + 72))
            {
              if (swift_dynamicCast())
              {
                uint64_t v22 = *(void *)(v0 + 144);
                uint64_t v23 = *(void *)(v0 + 152);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  int v18 = sub_1000E7C44(0, *((void *)v18 + 2) + 1, 1, v18);
                }
                unint64_t v25 = *((void *)v18 + 2);
                unint64_t v24 = *((void *)v18 + 3);
                if (v25 >= v24 >> 1) {
                  int v18 = sub_1000E7C44((char *)(v24 > 1), v25 + 1, 1, v18);
                }
                *((void *)v18 + 2) = v25 + 1;
                uint64_t v26 = &v18[16 * v25];
                *((void *)v26 + 4) = v22;
                *((void *)v26 + 5) = v23;
              }
              goto LABEL_26;
            }
          }
          else
          {
            _OWORD *v17 = 0u;
            *(_OWORD *)(v0 + 64) = 0u;
          }
          sub_100031BD8(v0 + 48);
LABEL_26:
          if (v15 == ++v16)
          {
            swift_bridgeObjectRelease();
            uint64_t v7 = v33;
            goto LABEL_42;
          }
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100031BD8(v0 + 112);
  }
  int v18 = (char *)_swiftEmptyArrayStorage;
LABEL_42:
  *(void *)(v0 + 216) = v18;
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = _swiftEmptyArrayStorage;
  uint64_t v27 = *(void *)(v7 + 16);
  *(void *)(v0 + 224) = v27;
  if (v27)
  {
    *(void *)(v0 + 232) = 0;
    int v28 = *(void **)(v0 + 200);
    uint64_t v29 = *(void *)(*(void *)(v0 + 208) + 32);
    objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdate());
    swift_bridgeObjectRetain();
    id v30 = v28;
    int v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v31;
    *int v31 = v0;
    v31[1] = sub_100031734;
    uint64_t v32 = *(void *)(v0 + 200);
    return sub_1000C15EC(v29, v32);
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void **)(v0 + 216);
LABEL_15:
  uint64_t v11 = *(uint64_t (**)(void *, void *))(v0 + 8);
  return v11(_swiftEmptyArrayStorage, v10);
}

uint64_t sub_100031734(uint64_t a1)
{
  *(void *)(*(void *)v1 + 24_Block_object_dispose(&a9, 8) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100031834, 0, 0);
}

uint64_t sub_100031834()
{
  uint64_t v1 = *(void **)(v0 + 248);
  if (v1)
  {
    id v2 = v1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v3 = *(void *)(v0 + 232) + 1;
  if (v3 == *(void *)(v0 + 224))
  {

    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 216);
    char v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v6(v4, v5);
  }
  else
  {
    *(void *)(v0 + 232) = v3;
    unint64_t v8 = *(void **)(v0 + 200);
    uint64_t v9 = *(void *)(*(void *)(v0 + 208) + 8 * v3 + 32);
    objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdate());
    swift_bridgeObjectRetain();
    id v10 = v8;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100031734;
    uint64_t v12 = *(void *)(v0 + 200);
    return sub_1000C15EC(v9, v12);
  }
}

id sub_1000319B8@<X0>(void *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  id v8 = [a1 bundleID];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v26 = 0;
  }
  id v12 = [a1 storeMetadata];
  uint64_t v13 = v12;
  if (v12)
  {
    id v14 = [v12 storefrontCountryCode];

    if (v14)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v16;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  unint64_t v17 = (unint64_t)[a1 storeItemID];
  if ((v17 & 0x8000000000000000) == 0)
  {
    unint64_t v18 = v17;
    unint64_t v25 = v13;
    int v19 = a3 & 1;
    id v20 = [a1 storefront];
    unsigned __int8 v21 = [a1 isManagedAccount];
    uint64_t v22 = v10;
    if (v19)
    {
      a2 = (unint64_t)[a1 storeExternalVersionID];
      if ((a2 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
    }
    else if ((a2 & 0x8000000000000000) == 0)
    {
LABEL_12:
      id v23 = [a1 downloaderDSID];
      id result = [a1 purchaserDSID];
      *(void *)a4 = v22;
      *(void *)(a4 + _Block_object_dispose(&a9, 8) = v26;
      *(void *)(a4 + 16) = v23;
      *(unsigned char *)(a4 + 24) = v19 ^ 1;
      *(unsigned char *)(a4 + 25) = v21;
      *(void *)(a4 + 32) = result;
      *(void *)(a4 + 40) = a2;
      *(void *)(a4 + 4_Block_object_dispose(&a9, 8) = v18;
      *(void *)(a4 + 56) = v20;
      *(void *)(a4 + 64) = v15;
      *(void *)(a4 + 72) = v25;
      *(void *)(a4 + 80) = 1936748641;
      *(void *)(a4 + 8_Block_object_dispose(&a9, 8) = 0xE400000000000000;
      return result;
    }
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100031BD8(uint64_t a1)
{
  uint64_t v2 = sub_10001644C(&qword_1005A5660);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031C38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t destroy for MediaAPIUpdateRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MediaAPIUpdateRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MediaAPIUpdateRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for MediaAPIUpdateRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for MediaAPIUpdateRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaAPIUpdateRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaAPIUpdateRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIUpdateRequest()
{
  return &type metadata for MediaAPIUpdateRequest;
}

ValueMetadata *type metadata accessor for UpdateEligibleApp.CodingKeys()
{
  return &type metadata for UpdateEligibleApp.CodingKeys;
}

unint64_t sub_100031EE0()
{
  unint64_t result = qword_1005A3980;
  if (!qword_1005A3980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3980);
  }
  return result;
}

unint64_t sub_100031F38()
{
  unint64_t result = qword_1005A3988;
  if (!qword_1005A3988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3988);
  }
  return result;
}

unint64_t sub_100031F90()
{
  unint64_t result = qword_1005A3990;
  if (!qword_1005A3990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A3990);
  }
  return result;
}

unint64_t sub_100031FE4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10050FEF0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_100032030()
{
  unint64_t result = qword_1005A39A0;
  if (!qword_1005A39A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A39A0);
  }
  return result;
}

unint64_t sub_100032084()
{
  unint64_t result = qword_1005A39B0;
  if (!qword_1005A39B0)
  {
    sub_10002E5A8(&qword_1005A39A8);
    sub_1000320F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A39B0);
  }
  return result;
}

unint64_t sub_1000320F8()
{
  unint64_t result = qword_1005A39B8;
  if (!qword_1005A39B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A39B8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SystemAlert.Response(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s9appstored17UpdateEligibleAppV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000322A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIUpdateRequest.CodingKeys()
{
  return &type metadata for MediaAPIUpdateRequest.CodingKeys;
}

unint64_t sub_1000322E4()
{
  unint64_t result = qword_1005A39C0;
  if (!qword_1005A39C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A39C0);
  }
  return result;
}

unint64_t sub_10003233C()
{
  unint64_t result = qword_1005A39C8;
  if (!qword_1005A39C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A39C8);
  }
  return result;
}

unint64_t sub_100032394()
{
  unint64_t result = qword_1005A39D0;
  if (!qword_1005A39D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A39D0);
  }
  return result;
}

uint64_t sub_1000323E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1635017060 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684632935 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636E7973626BLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t type metadata accessor for SkannerStoryEntity()
{
  return self;
}

id sub_10003272C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AppCapabilitiesService()) init];
  qword_1005B1448 = (uint64_t)result;
  return result;
}

uint64_t sub_10003297C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_100032A08, 0, 0);
}

uint64_t sub_100032A08()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v0[4];
  int v3 = (void *)v0[2];
  id v4 = [objc_allocWithZone((Class)type metadata accessor for LogKey()) init];
  char v5 = sub_100032D6C(v3, v4);

  if (v2)
  {
    id v6 = (void (**)(void, void))v0[4];
    v6[2](v6, v5 & 1);
    _Block_release(v6);
  }
  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void sub_100032AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v9 = [self metadataWithAction:a1 bundleID:v7 capabilities:isa];

    if (a5) {
      id v10 = a5;
    }
    else {
      id v10 = [objc_allocWithZone((Class)type metadata accessor for LogKey()) init];
    }
    id v11 = a5;
    char v12 = sub_100032D6C(v9, v10);

    if ((v12 & 1) == 0)
    {
      id v13 = ASDErrorDomain;
      NSString v14 = String._bridgeToObjectiveC()();
      (id)ASDErrorWithDescription();

      swift_willThrow();
    }
  }
}

uint64_t sub_100032D6C(void *a1, void *a2)
{
  if (qword_1005A2FA8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100033880(v4, (uint64_t)qword_1005A3A00);
  id v5 = a1;
  id v6 = a2;
  id v7 = v5;
  id v8 = v6;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    char v43 = (void *)swift_slowAlloc();
    long long v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412802;
    id v12 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v43 = v8;

    *(_WORD *)(v11 + 12) = 2082;
    id v13 = [v7 bundleID];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = v8;
    unint64_t v17 = v16;

    sub_1000F7290(v14, v17, (uint64_t *)&v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v8 = v15;
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2050;
    [v7 action];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if ([v7 supportsFeatureA])
  {
    unint64_t v18 = v8;
    int v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unsigned __int8 v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v21 = 138412290;
      long long v44 = v18;
      id v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v22 = v18;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%@] Checking support for feature A", v21, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      int v19 = v18;
    }

    if ((sub_100033540((uint64_t)[v7 action], v18) & 1) == 0) {
      return 0;
    }
  }
  if ([v7 supportsFeatureB])
  {
    unint64_t v24 = v8;
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      int v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      long long v44 = v24;
      uint64_t v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v24;

      _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%@] Checking support for feature B", v27, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v25 = v24;
    }

    if ((sub_100033B6C((uint64_t)[v7 action], v24, 7, 4) & 1) == 0) {
      return 0;
    }
  }
  if ([v7 supportsFeatureC])
  {
    id v30 = v8;
    int v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 138412290;
      long long v44 = v30;
      uint64_t v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v30;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%@] Checking support for feature C", v33, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      int v31 = v30;
    }

    if ((sub_100033B6C((uint64_t)[v7 action], v30, 23, 6) & 1) == 0) {
      return 0;
    }
  }
  int v36 = v8;
  char v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    long long v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v39 = 138412290;
    long long v44 = v36;
    uint64_t v41 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v40 = v36;

    _os_log_impl((void *)&_mh_execute_header, v37, v38, "[%@] All capability checks passed", v39, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    char v37 = v36;
  }

  return 1;
}

uint64_t sub_100033540(uint64_t a1, void *a2)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
      uint64_t v5 = 2;
      goto LABEL_9;
    case 1:
    case 2:
      goto LABEL_8;
    case 3:
      return result;
    case 4:
      if ((sub_1000338B8(2, a2) & 1) == 0) {
        goto LABEL_13;
      }
LABEL_8:
      uint64_t v5 = 3;
LABEL_9:
      uint64_t result = sub_1000338B8(v5, a2);
      break;
    default:
      if (qword_1005A2FA8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100033880(v6, (uint64_t)qword_1005A3A00);
      id v7 = a2;
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = swift_slowAlloc();
        uint64_t v11 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 138412546;
        id v12 = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v11 = v7;

        *(_WORD *)(v10 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] Unknown eligibility action: %ld", (uint8_t *)v10, 0x16u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
LABEL_13:
      uint64_t result = 0;
      break;
  }
  return result;
}

id sub_1000337D8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppCapabilitiesService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppCapabilitiesService()
{
  return self;
}

uint64_t sub_100033834()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100033B08(v0, qword_1005A3A00);
  sub_100033880(v0, (uint64_t)qword_1005A3A00);
  return static Logger.appCapabilities.getter();
}

uint64_t sub_100033880(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000338B8(uint64_t a1, void *a2)
{
  int domain_answer = os_eligibility_get_domain_answer();
  if (domain_answer == noErr.getter()) {
    return 0;
  }
  if (qword_1005A2FA8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100033880(v5, (uint64_t)qword_1005A3A00);
  id v6 = a2;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t type = v8;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412802;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v10 = v6;

    *(_WORD *)(v9 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 1026;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "[%@] Unable to determine eligibility for domain %{public}llu: %{public}d", (uint8_t *)v9, 0x1Cu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t *sub_100033B08(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100033B6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a1 - 1) < 3) {
    goto LABEL_2;
  }
  if (a1 != 4)
  {
    if (!a1)
    {
      uint64_t v6 = a3;
      goto LABEL_6;
    }
    if (qword_1005A2FA8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100033880(v8, (uint64_t)qword_1005A3A00);
    id v9 = a2;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      id v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412546;
      id v14 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v13 = v9;

      *(_WORD *)(v12 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%@] Unknown eligibility action: %ld", (uint8_t *)v12, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  if ((sub_1000338B8(a3, a2) & 1) == 0) {
    return 0;
  }
LABEL_2:
  uint64_t v6 = a4;
LABEL_6:
  return sub_1000338B8(v6, a2);
}

uint64_t sub_100033FCC()
{
  _Block_release(*(const void **)(v0 + 24));
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100034014()
{
  objc_super v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100005040;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1005A3AB0 + dword_1005A3AB0);
  return v6(v2, v3, v4);
}

id sub_1000340D0()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues;
  sub_10001644C((uint64_t *)&unk_1005A3B50);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 20) = 0;
  *(unsigned char *)(v3 + 16) = 2;
  *(void *)&v0[v2] = v3;
  v9.receiver = v0;
  v9.super_class = ObjectType;
  id v4 = objc_msgSendSuper2(&v9, "init");
  uint64_t v5 = self;
  id v6 = v4;
  id result = [v5 sharedConnection];
  if (result)
  {
    uint64_t v8 = result;
    [result registerObserver:v6];

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000341CC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for RestrictionsCache()) init];
  qword_1005B1450 = (uint64_t)result;
  return result;
}

id sub_1000342E8@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *a1;
  if (v3 == 2)
  {
    self;
    id result = sub_10033641C();
    *a1 = (_BYTE)result;
  }
  else
  {
    id result = (id)(v3 & 1);
  }
  *a2 = (_BYTE)result;
  return result;
}

unsigned char *sub_100034348(unsigned char *result)
{
  *id result = 2;
  return result;
}

uint64_t type metadata accessor for RestrictionsCache()
{
  return self;
}

uint64_t getEnumTagSinglePayload for RestrictionsCache.ValueStore(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for RestrictionsCache.ValueStore(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000345A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RestrictionsCache.ValueStore()
{
  return &type metadata for RestrictionsCache.ValueStore;
}

id sub_1000345D8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SKANInteropProviderService()) init];
  qword_1005B1458 = (uint64_t)result;
  return result;
}

void sub_1000347FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t type metadata accessor for SKANInteropProviderService()
{
  return self;
}

uint64_t sub_100034B74()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100034BAC(uint64_t a1)
{
  sub_1000527EC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100034BB4()
{
  return sub_1000F9DE4(*(void *)(v0 + 16));
}

uint64_t sub_100034BBC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001EC80(a1, a2);
  }
  return a1;
}

void sub_100034BD0(uint64_t a1, unint64_t a2)
{
  sub_1000347FC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100034BE0(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_10001644C(&qword_1005A3C08);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10001644C(&qword_1005A3C08);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100034DD0(int a1, void *aBlock, const void *a3, void *a4)
{
  v4[2] = a4;
  int v7 = _Block_copy(aBlock);
  v4[3] = _Block_copy(a3);
  sub_100035364();
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v8;
  uint64_t v9 = swift_allocObject();
  v4[5] = v9;
  *(void *)(v9 + 16) = v7;
  id v13 = (char *)&dword_1005A3C00 + dword_1005A3C00;
  id v10 = a4;
  os_log_type_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *os_log_type_t v11 = v4;
  v11[1] = sub_100034F04;
  return ((uint64_t (*)(uint64_t, void, uint64_t))v13)(v8, sub_1000353DC, v9);
}

uint64_t sub_100034F04()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  Class v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_1000350C8()
{
  _Block_release(*(const void **)(v0 + 24));
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100035118()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  Class v5 = (const void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000184D8;
  uint64_t v7 = (uint64_t (*)(int, void *, const void *, void *))((char *)&dword_1005A3BE8 + dword_1005A3BE8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1000351D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  v12[4] = sub_10003591C;
  v12[5] = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  _OWORD v12[2] = sub_100035300;
  v12[3] = &unk_100511DF0;
  uint64_t v9 = _Block_copy(v12);
  id v10 = *(void (**)(uint64_t, uint64_t, void *))(a4 + 16);
  swift_retain();
  v10(a4, a1, v9);
  _Block_release(v9);
  swift_release();
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a4) {
    __break(1u);
  }
  return result;
}

void sub_100035300(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  id v4 = a2;
  v3(a2);
}

unint64_t sub_100035364()
{
  unint64_t result = qword_1005A3BF8;
  if (!qword_1005A3BF8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005A3BF8);
  }
  return result;
}

uint64_t sub_1000353A4()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000353DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000351D8(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1000353E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100035408, 0, 0);
}

uint64_t sub_100035408()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = *(void *)(v0 + 16);
  if (v2)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v4 = *(id *)(v3 + 32);
    }
    id v7 = v4;
    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v4;
    *(void *)(v0 + 56) = 1;
    uint64_t v8 = swift_task_alloc();
    *(void *)(v0 + 64) = v8;
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v0 + 24);
    *(void *)(v8 + 32) = v7;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v9;
    void *v9 = v0;
    v9[1] = sub_10003559C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    Class v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10003559C()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_100035848;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000356CC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000356CC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);

  if (v1 == v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 16);
    if ((v6 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v6 + 8 * v5 + 32);
    }
    id v8 = v7;
    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v7;
    *(void *)(v0 + 56) = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = swift_task_alloc();
      *(void *)(v0 + 64) = v9;
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(v0 + 24);
      *(void *)(v9 + 32) = v8;
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v10;
      void *v10 = v0;
      v10[1] = sub_10003559C;
    }
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_100035848()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000358AC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), void *))(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 32);
  void v5[2] = a1;
  return v2(v3, sub_100035904, v5);
}

uint64_t sub_100035904(uint64_t a1)
{
  return sub_100034BE0(a1);
}

uint64_t sub_10003590C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003591C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_100035944(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10001644C(&qword_1005A3C10);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        sub_100035EBC();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_100035E00(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_100031C38(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_100035E00((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_100035E5C((uint64_t)v30);
      swift_bridgeObjectRelease();
      sub_100035EBC();
      swift_release();
      return 0;
    }
    sub_100031C38((uint64_t)v31 + 8, (uint64_t)v25);
    sub_100035E5C((uint64_t)v30);
    sub_10000C948(v25, v26);
    long long v27 = v24;
    sub_10000C948(v26, v28);
    long long v16 = v27;
    sub_10000C948(v28, v29);
    sub_10000C948(v29, &v27);
    unint64_t result = sub_100049A4C(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      id v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      _OWORD *v8 = v16;
      uint64_t v9 = (_OWORD *)(v2[7] + 32 * v17);
      sub_10002E618((uint64_t)v9);
      unint64_t result = (unint64_t)sub_10000C948(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_10000C948(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_100035D08()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = sub_1002685DC(isa, v1);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v4 = sub_100035944(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100035E00(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100035E5C(uint64_t a1)
{
  uint64_t v2 = sub_10001644C(&qword_1005A3C18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100035EBC()
{
  return swift_release();
}

id sub_100035EDC()
{
  swift_bridgeObjectRetain();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for SKANBlindedData()
{
  return self;
}

void *sub_1000361F4(int a1, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return (void *)v4;
  }
  return result;
}

void *sub_100036374()
{
  uint64_t v1 = v0;
  uint64_t v2 = SKANUTClient.blindedElement()();
  unint64_t v4 = v3;
  Swift::String v5 = Data.base64EncodedString(options:)(0);
  sub_10001EC80(v2, v4);
  Swift::String v6 = Data.base64EncodedString(options:)(0);
  unint64_t v7 = sub_100036D0C();
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    unint64_t v9 = v7;
    *(void *)(v0 + OBJC_IVAR____TtC9appstored26SKANPersistentTokenHandler_timestamp) = v7;
    uint64_t v10 = (objc_class *)type metadata accessor for SKANBlindedData();
    unint64_t v11 = (char *)objc_allocWithZone(v10);
    *(Swift::String *)&v11[OBJC_IVAR____TtC9appstored15SKANBlindedData_blindedElement] = v5;
    *(Swift::String *)&v11[OBJC_IVAR____TtC9appstored15SKANBlindedData_privateInput] = v6;
    *(void *)&v11[OBJC_IVAR____TtC9appstored15SKANBlindedData_timestamp] = v9;
    v18.receiver = v11;
    v18.super_class = v10;
    id v12 = objc_msgSendSuper2(&v18, "init");
    uint64_t v13 = OBJC_IVAR____TtC9appstored26SKANPersistentTokenHandler_blindedData;
    unint64_t v14 = *(void **)(v1 + OBJC_IVAR____TtC9appstored26SKANPersistentTokenHandler_blindedData);
    *(void *)(v1 + OBJC_IVAR____TtC9appstored26SKANPersistentTokenHandler_blindedData) = v12;

    int64_t v15 = *(void **)(v1 + v13);
    id v16 = v15;
  }
  return v15;
}

uint64_t sub_1000364F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = Data.init(base64Encoded:options:)();
  if (v7 >> 60 == 15) {
    goto LABEL_16;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v11 = SecCertificateCreateWithData(0, isa);

  if (!v11)
  {
LABEL_15:
    sub_100034BBC(v8, v9);
LABEL_16:
    type metadata accessor for ASDError(0);
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100036BF0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return a2;
  }
  SecKeyRef v12 = SecCertificateCopyKey(v11);
  if (!v12)
  {
LABEL_14:

    goto LABEL_15;
  }
  uint64_t v33 = v12;
  CFDataRef v13 = SecKeyCopyExternalRepresentation(v12, 0);
  if (!v13)
  {

    unint64_t v11 = v33;
    goto LABEL_14;
  }
  CFDataRef v14 = v13;
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v16;
  uint64_t v31 = v15;

  if (!*(void *)(a3 + 16)) {
    goto LABEL_19;
  }
  unint64_t v17 = sub_100049A4C(0x746E656D656C65, 0xE700000000000000);
  if ((v18 & 1) == 0) {
    goto LABEL_19;
  }
  sub_100031C38(*(void *)(a3 + 56) + 32 * v17, (uint64_t)v32);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_19;
  }
  if (!*(void *)(a3 + 16)
    || (unint64_t v19 = sub_100049A4C(0x666F6F7270, 0xE500000000000000), (v20 & 1) == 0)
    || (sub_100031C38(*(void *)(a3 + 56) + 32 * v19, (uint64_t)v32), (swift_dynamicCast() & 1) == 0)
    || (v28 = Data.init(base64Encoded:options:)(), v22 = v21, swift_bridgeObjectRelease(), unint64_t v29 = v22, v22 >> 60 == 15))
  {
    swift_bridgeObjectRelease();
LABEL_19:
    type metadata accessor for ASDError(0);
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100036BF0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_100034BBC(v8, v9);

    sub_10001EC80(v31, v30);
    return a2;
  }
  uint64_t v27 = Data.init(base64Encoded:options:)();
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  if (v25 >> 60 == 15)
  {
    sub_100034BBC(v28, v29);
    goto LABEL_19;
  }
  uint64_t v26 = SKANUTClient.finalize(publicInput:evaluatedElement:proof:publicKey:)();
  if (!v3) {
    a2 = v26;
  }
  sub_100034BBC(v27, v25);
  sub_100034BBC(v28, v29);
  sub_10001EC80(v31, v30);

  sub_100034BBC(v8, v9);
  return a2;
}

uint64_t sub_100036AEC()
{
  return type metadata accessor for SKANPersistentTokenHandler();
}

uint64_t type metadata accessor for SKANPersistentTokenHandler()
{
  uint64_t result = qword_1005A3C88;
  if (!qword_1005A3C88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100036B40()
{
  uint64_t result = type metadata accessor for SKANUTClient();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100036BF0()
{
  unint64_t result = qword_1005A4450;
  if (!qword_1005A4450)
  {
    type metadata accessor for ASDError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005A4450);
  }
  return result;
}

uint64_t sub_100036C48(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

unint64_t sub_100036D0C()
{
  uint64_t v0 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v0 - 8);
  long long v39 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Calendar();
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DateComponents();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v34 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  SecKeyRef v12 = (char *)&v34 - v11;
  Date.init()();
  sub_10001644C(&qword_1005A3C98);
  uint64_t v13 = type metadata accessor for Calendar.Component();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100488780;
  unint64_t v18 = v17 + v16;
  unint64_t v19 = *(void (**)(unint64_t, void, uint64_t))(v14 + 104);
  v19(v18, enum case for Calendar.Component.year(_:), v13);
  v19(v18 + v15, enum case for Calendar.Component.month(_:), v13);
  v19(v18 + 2 * v15, enum case for Calendar.Component.day(_:), v13);
  sub_1000CCC58(v17);
  swift_setDeallocating();
  char v20 = v12;
  uint64_t v21 = v35;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  static Calendar.current.getter();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = v38;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v37 + 8);
  v23(v4, v38);
  static Calendar.current.getter();
  uint64_t v24 = (uint64_t)v39;
  Calendar.date(from:)();
  unint64_t v25 = v4;
  uint64_t v26 = v24;
  v23(v25, v22);
  uint64_t v27 = v36;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v24, 1, v36) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v41);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v27);
    sub_1000214BC(v24);
    return 0;
  }
  unint64_t v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v34, v26, v27);
  Date.timeIntervalSince1970.getter();
  double v31 = v30;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v21 + 8);
  v32(v29, v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v41);
  unint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v20, v27);
  double v33 = v31 * 1000.0;
  if ((~COERCE__INT64(v31 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v33 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v33 < 1.84467441e19) {
    return (unint64_t)v33;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100037210(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_100036C48(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000372C4()
{
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v0)
  {
    uint64_t v3 = result;
    unint64_t v4 = v2;
    uint64_t v5 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v10 = 0;
    id v7 = [v5 JSONObjectWithData:isa options:4 error:&v10];

    id v8 = v10;
    if (v7)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_10001EC80(v3, v4);
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = v8;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_10001EC80(v3, v4);
    }
  }
  return result;
}

uint64_t type metadata accessor for DictionaryEncoder()
{
  return self;
}

uint64_t sub_100037410()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DictionaryDecoder()
{
  return self;
}

void sub_10003746C(double a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_isValvoid (*v52)(char *, id) = 1;
  double v2 = *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_minValue);
  if (v2 > a1) {
    double v2 = a1;
  }
  *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_minValue) = v2;
  double v3 = *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_maxValue);
  if (v3 <= a1) {
    double v3 = a1;
  }
  *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_maxValue) = v3;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_avgCount);
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_avgCount) = v6;
    *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_avgValue) = *(double *)(v1
                                                                                  + OBJC_IVAR____TtC9appstored10Throughput_avgValue)
                                                                      + (a1
                                                                       - *(double *)(v1
                                                                                   + OBJC_IVAR____TtC9appstored10Throughput_avgValue))
                                                                      / (double)v6;
  }
}

id sub_100037590()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Throughput();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Throughput()
{
  return self;
}

void sub_1000375E8()
{
}

void sub_100037644()
{
}

xpc_object_t sub_100037804@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t result = xpc_copy(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037858()
{
  uint64_t v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x58);
  uint64_t result = v1();
  if (v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = ((uint64_t (*)(uint64_t))v1)(result);
  if (v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (!result) {
LABEL_9:
  }
    __break(1u);
  return result;
}

id sub_100037924()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityClass();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActivityClass()
{
  return self;
}

double sub_10003797C()
{
  sub_1000379D8((uint64_t *)v1);
  xmmword_1005A3EC0 = v7;
  *(_OWORD *)&qword_1005A3ED0 = v8;
  xmmword_1005A3EE0 = v9;
  xmmword_1005A3E80 = v3;
  *(_OWORD *)&qword_1005A3E90 = v4;
  xmmword_1005A3EA0 = v5;
  *(_OWORD *)&qword_1005A3EB0 = v6;
  xmmword_1005A3E40 = v1[0];
  *(_OWORD *)&qword_1005A3E50 = v1[1];
  double result = *(double *)&v2;
  xmmword_1005A3E60 = v1[2];
  *(_OWORD *)&qword_1005A3E70 = v2;
  return result;
}

uint64_t sub_1000379D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = String.init(cString:)();
  uint64_t v4 = v3;
  uint64_t v5 = String.init(cString:)();
  uint64_t v7 = v6;
  uint64_t v8 = String.init(cString:)();
  uint64_t v10 = v9;
  uint64_t v11 = String.init(cString:)();
  uint64_t v13 = v12;
  uint64_t v14 = String.init(cString:)();
  uint64_t v42 = v15;
  uint64_t v16 = String.init(cString:)();
  uint64_t v40 = v17;
  uint64_t v41 = v16;
  uint64_t v18 = String.init(cString:)();
  uint64_t v38 = v19;
  uint64_t v39 = v18;
  uint64_t result = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v21 = String.init(cString:)();
  uint64_t v36 = v22;
  uint64_t v37 = v21;
  uint64_t result = XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v34 = v14;
  uint64_t v35 = v13;
  uint64_t v23 = v11;
  uint64_t v24 = v10;
  uint64_t v25 = v7;
  uint64_t v26 = v4;
  uint64_t v32 = String.init(cString:)();
  uint64_t v33 = v27;
  uint64_t result = XPC_ACTIVITY_EXPECTED_DURATION;
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v29 = String.init(cString:)();
  uint64_t result = XPC_ACTIVITY_SHOULD_WAKE_DEVICE;
  if (XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
    uint64_t v30 = v28;
    uint64_t result = String.init(cString:)();
    *a1 = v2;
    a1[1] = v26;
    a1[2] = v5;
    a1[3] = v25;
    a1[4] = v8;
    a1[5] = v24;
    a1[6] = v23;
    a1[7] = v35;
    a1[8] = v34;
    a1[9] = v42;
    a1[10] = v41;
    a1[11] = v40;
    a1[12] = v39;
    a1[13] = v38;
    a1[14] = v37;
    a1[15] = v36;
    a1[16] = v32;
    a1[17] = v33;
    a1[18] = v29;
    a1[19] = v30;
    a1[20] = result;
    a1[21] = v31;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

id sub_100037B9C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for InstallWebAttributionService()) init];
  qword_1005B1480 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for InstallWebAttributionService()
{
  return self;
}

void sub_100037D90(void *a1)
{
  NSString v2 = [a1 version];
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v3 = ASDInstallAttributionVersionCreateFromString();

  id v4 = [a1 appAdamId];
  id v5 = [v4 longLongValue];

  if ((uint64_t)v5 <= 0) {
    goto LABEL_14;
  }
  NSString v6 = [a1 adNetworkRegistrableDomain];
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  unsigned __int8 v7 = sub_1002F1FD4(v6);

  if ((v7 & 1) == 0) {
    goto LABEL_14;
  }
  id v8 = [a1 impressionId];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  swift_bridgeObjectRelease();
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12) {
    goto LABEL_14;
  }
  NSString v13 = [a1 sourceWebRegistrableDomain];
  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  unsigned __int8 v14 = sub_1002F1FD4(v13);

  if ((v14 & 1) == 0 || v3 <= 399)
  {
LABEL_14:
    id v15 = ASDErrorDomain;
    NSString v16 = String._bridgeToObjectiveC()();
    (id)ASDErrorWithDescription();

    swift_willThrow();
  }
}

void sub_100038094(void *a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v57 = a3;
  long long v58 = a2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  __chkstk_darwin(v4);
  id v53 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  long long v59 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v48 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)&v48 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v48 - v16;
  static Logger.skAdNetwork.getter();
  id v18 = a1;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v51 = v7;
    uint64_t v22 = v21;
    char v49 = (void *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    uint64_t v61 = v50;
    *(_DWORD *)uint64_t v22 = 136446466;
    id v23 = objc_msgSend(v18, "sourceWebRegistrableDomain", v22 + 4);
    uint64_t v56 = v6;
    id v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v15;
    unint64_t v27 = v26;

    uint64_t v60 = sub_1000F7290(v25, v27, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2114;
    id v28 = [v18 appAdamId];
    uint64_t v60 = (uint64_t)v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v49 = v28;
    id v15 = v52;

    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Received call to perform install attribution from web: %{public}s for app: %{public}@", (uint8_t *)v22, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v29 = *(void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v30 = v56;
    v29(v17, v56);
  }
  else
  {

    uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
    v29(v17, v6);
    uint64_t v30 = v6;
  }
  static Logger.skAdNetwork.getter();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Validating stub web impression config", v33, 2u);
    swift_slowDealloc();
  }

  v29(v15, v30);
  sub_100037D90(v18);
  static Logger.skAdNetwork.getter();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Adding stub web impression", v36, 2u);
    swift_slowDealloc();
  }

  v29(v12, v30);
  id v37 = [objc_allocWithZone((Class)InstallAttributionWebParams) init];
  id v38 = [v18 appAdamId];
  sub_100263BD8((uint64_t)v37, v38);

  NSString v39 = [v18 adNetworkRegistrableDomain];
  uint64_t v40 = v58;
  if (!v39)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  sub_100263BE8((uint64_t)v37, v39);

  NSString v41 = [v18 impressionId];
  if (!v41)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  sub_10027D6CC((uint64_t)v37, v41);

  NSString v42 = [v18 sourceWebRegistrableDomain];
  if (!v42)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  sub_10027BF34((uint64_t)v37, v42);

  NSString v43 = [v18 version];
  if (!v43)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  sub_100263BF8((uint64_t)v37, v43);

  long long v44 = v53;
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v55);
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  sub_100263C08((uint64_t)v37, isa);

  sub_1002DC3B0((uint64_t)v37, (uint64_t)[v18 attributionContext]);
  self;
  uint64_t v46 = sub_1003C44E0();
  long long v47 = sub_1003C7ACC(v46, v37);

  if (v40) {
    v40(v47);
  }
}

uint64_t sub_100038B70()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100038C7C(uint64_t result, void *a2, const void **a3, uint64_t a4)
{
  if (!result)
  {
    v11[8] = v4;
    v11[9] = v5;
    *a2 = 16400;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a4;
    id v11[4] = sub_100038FE4;
    void v11[5] = v8;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100038D4C;
    v11[3] = &unk_100511EB8;
    uint64_t v9 = _Block_copy(v11);
    uint64_t v10 = *a3;
    *a3 = v9;
    _Block_release(v10);
    return swift_release();
  }
  return result;
}

void sub_100038D4C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100038DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

uint64_t type metadata accessor for SkannerDatabaseStore()
{
  return self;
}

uint64_t sub_100038FBC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100038FCC(uint64_t a1, void *a2, const void **a3)
{
  return sub_100038C7C(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_100038FD4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100038FE8(uint64_t a1)
{
  _StringGuts.grow(_:)(119);
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  v2._object = (void *)0x800000010044BDF0;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x5F72656E6E616B73;
  v3._object = (void *)0xEF736569726F7473;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 665632;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x64695F79726F7473;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xA2C5458455420;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0xD000000000000016;
  v7._object = (void *)0x800000010044B450;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x52454745544E4920;
  v8._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0xD000000000000010;
  v9._object = (void *)0x800000010044B430;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x52454745544E4920;
  v10._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000011;
  v11._object = (void *)0x800000010044B410;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x52454745544E4920;
  v12._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x5F676E69646E6570;
  v13._object = (void *)0xEE0073746E657665;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x550A2C424F4C4220;
  v14._object = (void *)0xEE0028455551494ELL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000016;
  v15._object = (void *)0x800000010044B450;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD000000000000018;
  v16._object = (void *)0x800000010044BE10;
  String.append(_:)(v16);
  id v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1003D8394(a1, v17);
}

Swift::Int sub_100039248()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100039290()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000392BC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *sub_100039300@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + _Block_object_dispose(&a9, 8) = v3;
  return result;
}

uint64_t sub_10003948C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

uint64_t *sub_1000395EC@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = result[1];
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    id result = (uint64_t *)swift_retain();
    Swift::String v6 = sub_10003B7F0;
  }
  else
  {
    Swift::String v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

uint64_t sub_10003966C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    *(void *)(v6 + 24) = a3;
    uint64_t v7 = swift_allocObject();
    Swift::String v8 = sub_10003B7F0;
    *(void *)(v7 + 16) = sub_10003B7F0;
    *(void *)(v7 + 24) = v6;
    swift_retain();
    Swift::String v9 = sub_10003B7F4;
  }
  else
  {
    Swift::String v9 = 0;
    uint64_t v7 = 0;
    Swift::String v8 = 0;
  }
  uint64_t v10 = *a1;
  sub_1000196F0(a2);
  sub_100018DD4(v10);
  uint64_t result = sub_100018DD4((uint64_t)v8);
  *a1 = (uint64_t)v9;
  a1[1] = v7;
  return result;
}

uint64_t sub_1000397E8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CancellationError();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 16) == 2 && (*(unsigned char *)(a1 + 8) & 1) != 0)
  {
    Swift::String v11 = *(void **)a1;
    sub_10003AAA4(v11, 1);
    sub_10001644C(&qword_1005A4E40);
    uint64_t result = swift_dynamicCast();
    char v9 = result;
    if (result) {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  else
  {
    char v9 = 0;
  }
  *a2 = v9;
  return result;
}

uint64_t sub_100039998@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 16) == 2;
  return result;
}

id sub_1000399AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = OBJC_IVAR____TtC9appstored12AssetPromise__progress;
  sub_10001644C(&qword_1005A40A0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 0;
  *(void *)&v3[v8] = v9;
  uint64_t v10 = &v3[OBJC_IVAR____TtC9appstored12AssetPromise_requestID];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  sub_10001644C(&qword_1005A40A8);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 36) = 0;
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  *(unsigned char *)(v13 + 32) = 0;
  *(void *)&v3[OBJC_IVAR____TtC9appstored12AssetPromise_state] = v13;
  v16.receiver = v3;
  v16.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v16, "init");
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

void sub_100039BC0(void *a1, char a2, void (*a3)(id))
{
  uint64_t v6 = type metadata accessor for CancellationError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v13[1] = a1;
    swift_errorRetain();
    swift_errorRetain();
    sub_10001644C(&qword_1005A4E40);
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = objc_allocWithZone((Class)NSError);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [v10 initWithDomain:v11 code:3072 userInfo:0];

      a3(v12);
      sub_10003AAF0(a1, 1);
    }
    else
    {
      a3(a1);
      sub_10003AAF0(a1, 1);
    }
  }
}

void sub_100039D90(void *a1, char a2, void (*a3)(void *, id))
{
  uint64_t v6 = type metadata accessor for CancellationError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v14[1] = a1;
    swift_errorRetain();
    swift_errorRetain();
    sub_10001644C(&qword_1005A4E40);
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v11 = objc_allocWithZone((Class)NSError);
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v13 = [v11 initWithDomain:v12 code:3072 userInfo:0];

      a3(0, v13);
      sub_10003AAF0(a1, 1);
    }
    else
    {
      swift_errorRetain();
      a3(0, a1);
      sub_10003AAF0(a1, 1);
      sub_10003AAF0(a1, 1);
    }
  }
  else
  {
    id v10 = a1;
    a3(a1, 0);
    sub_10003AAF0(a1, 0);
  }
}

void sub_100039FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

void sub_10003A034(void *a1, char a2, void (*a3)(void *))
{
  if ((a2 & 1) == 0)
  {
    a3(a1);
    sub_10003AAF0(a1, 0);
  }
}

void sub_10003A0A8(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  id v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_10003A1BC(uint64_t a1, char a2)
{
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC9appstored12AssetPromise_state);
  char v5 = a2 & 1;
  uint64_t v6 = (uint64_t)&v4[4];
  id v7 = v4 + 9;
  os_unfair_lock_lock(v4 + 9);
  sub_10003ACA8(v6, &v13);
  os_unfair_lock_unlock(v7);
  uint64_t v8 = v13;
  uint64_t v9 = *(void *)(v13 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = v8 + 40;
    do
    {
      id v11 = *(void (**)(uint64_t *))(v10 - 8);
      uint64_t v13 = a1;
      char v14 = v5;
      swift_retain();
      v11(&v13);
      swift_release();
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void sub_10003A36C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v10 - 8);
  NSString v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
    os_log_type_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    void v20[4] = v13;
    v20[5] = v14;
    v20[6] = a2;
    sub_10003AA74(v13, v14, 0);
    id v21 = a2;
    sub_100018FDC((uint64_t)v12, (uint64_t)&unk_1005A4090, (uint64_t)v20);
    swift_release();
    sub_10001644C(&qword_1005A4098);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_100488070;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = a3;
    *(void *)(v23 + 24) = a4;
    *(void *)(v22 + 32) = sub_10003B5A8;
    *(void *)(v22 + 40) = v23;
    swift_retain();
    sub_10003AAC0(v13, v14, 0);
    *(void *)a1 = v22;
LABEL_9:
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    *(unsigned char *)(a1 + 16) = 1;
    *(void *)a5 = 0;
    *(unsigned char *)(a5 + _Block_object_dispose(&a9, 8) = -1;
    return;
  }
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a3;
    *(void *)(v15 + 24) = a4;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_1000E7F60(0, v13[2] + 1, 1, v13);
    }
    unint64_t v17 = v13[2];
    unint64_t v16 = v13[3];
    if (v17 >= v16 >> 1) {
      uint64_t v13 = sub_1000E7F60((void *)(v16 > 1), v17 + 1, 1, v13);
    }
    void v13[2] = v17 + 1;
    id v18 = &v13[2 * v17];
    void v18[4] = sub_10003B5A8;
    v18[5] = v15;
    *(void *)a1 = v13;
    goto LABEL_9;
  }
  *(void *)a5 = v13;
  *(unsigned char *)(a5 + _Block_object_dispose(&a9, 8) = v14 & 1;
  sub_10003AAA4(v13, v14 & 1);
}

uint64_t sub_10003A610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return _swift_task_switch(sub_10003A634, 0, 0);
}

uint64_t sub_10003A634()
{
  (*(void (**)(void))(v0 + 16))(*(void *)(v0 + 32));
  Swift::UInt v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10003A69C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = *(void **)a1;
  if (!*(unsigned char *)(a1 + 16))
  {
    sub_10003AAC0(v8, *(void *)(a1 + 8), 0);
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_4:
    *(void *)a1 = a2;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = a3 & 1;
    *(unsigned char *)(a1 + 16) = 2;
    *a4 = v8;
    return sub_10003AAA4(a2, a3 & 1);
  }
  if (*(unsigned char *)(a1 + 16) == 1) {
    goto LABEL_4;
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003A840()
{
  return type metadata accessor for AssetPromise();
}

uint64_t type metadata accessor for AssetPromise()
{
  uint64_t result = qword_1005A4070;
  if (!qword_1005A4070) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10003A894()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AssetPromise.ProgressWrapper(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for AssetPromise.ProgressWrapper()
{
  return swift_release();
}

void *assignWithCopy for AssetPromise.ProgressWrapper(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AssetPromise.ProgressWrapper(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetPromise.ProgressWrapper(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetPromise.ProgressWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetPromise.ProgressWrapper()
{
  return &type metadata for AssetPromise.ProgressWrapper;
}

id sub_10003AA74(id result, char a2, char a3)
{
  switch(a3)
  {
    case 2:
      return sub_10003AAA4(result, a2 & 1);
    case 1:
      return (id)swift_bridgeObjectRetain();
    case 0:
      return (id)swift_retain();
  }
  return result;
}

id sub_10003AAA4(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void destroy for AssetPromise.State(uint64_t a1)
{
}

void sub_10003AAC0(void *a1, char a2, char a3)
{
  switch(a3)
  {
    case 2:
      sub_10003AAF0(a1, a2 & 1);
      break;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
      swift_release();
      break;
  }
}

void sub_10003AAF0(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t _s9appstored12AssetPromiseC5StateOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10003AA74(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AssetPromise.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10003AA74(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10003AAC0(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for AssetPromise.State(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AssetPromise.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10003AAC0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetPromise.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetPromise.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10003AC88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10003AC90(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AssetPromise.State()
{
  return &type metadata for AssetPromise.State;
}

id sub_10003ACA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10003A69C(a1, *(void **)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

unint64_t sub_10003ACC8()
{
  unint64_t result = qword_1005A4080;
  if (!qword_1005A4080)
  {
    type metadata accessor for CancellationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005A4080);
  }
  return result;
}

uint64_t sub_10003AD20(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = type metadata accessor for CancellationError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10003B740;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC9appstored12AssetPromise_state);
  uint64_t v22 = a1;
  uint64_t v23 = sub_10003B798;
  uint64_t v24 = v9;
  uint64_t v11 = (uint64_t)&v10[4];
  NSString v12 = v10 + 9;
  swift_retain_n();
  _Block_copy(a2);
  os_unfair_lock_lock(v12);
  sub_10003B90C(v11, (uint64_t)&v25);
  os_unfair_lock_unlock(v12);
  unsigned __int8 v13 = v26;
  if (v26 != 255)
  {
    uint64_t v14 = v25;
    if (v26)
    {
      sub_10003AAA4(v25, 1);
      swift_errorRetain();
      swift_errorRetain();
      sub_10001644C(&qword_1005A4E40);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v19 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void *))a2)[2](a2, v19);

        sub_10003B590(v14, v13);
        sub_10003B590(v14, v13);
        sub_10003AAF0(v14, 1);
        goto LABEL_7;
      }
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v15 = objc_allocWithZone((Class)NSError);
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v17 = [v15 initWithDomain:v16 code:3072 userInfo:0];

      id v18 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void *))a2)[2](a2, v18);

      sub_10003B590(v14, v13);
      sub_10003B590(v14, v13);
    }
    sub_10003B590(v14, v13);
  }
LABEL_7:
  swift_release();
  return swift_release_n();
}

void sub_10003B034(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CancellationError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v16[1] = a1;
    swift_errorRetain();
    swift_errorRetain();
    sub_10001644C(&qword_1005A4E40);
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v11 = objc_allocWithZone((Class)NSError);
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v13 = [v11 initWithDomain:v12 code:3072 userInfo:0];

      uint64_t v14 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0, v14);

      sub_10003AAF0(a1, 1);
    }
    else
    {
      swift_errorRetain();
      id v15 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0, v15);

      sub_10003AAF0(a1, 1);
      sub_10003AAF0(a1, 1);
    }
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, void *, void))(a3 + 16);
    v10(a3, a1, 0);
  }
}

uint64_t sub_10003B268(uint64_t a1, const void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_10003B714;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC9appstored12AssetPromise_state);
  uint64_t v7 = (uint64_t)&v6[4];
  uint64_t v8 = v6 + 9;
  swift_retain_n();
  _Block_copy(a2);
  os_unfair_lock_lock(v8);
  sub_10003B90C(v7, (uint64_t)&v12);
  os_unfair_lock_unlock(v8);
  unsigned __int8 v9 = v13;
  if (v13 != 255)
  {
    uint64_t v10 = v12;
    _Block_copy(a2);
    sub_10003B728(v10, v9);
    sub_10003B034(v10, v9 & 1, (uint64_t)a2);
    _Block_release(a2);
    sub_10003B590(v10, v9);
    sub_10003B590(v10, v9);
  }
  swift_release();
  return swift_release_n();
}

uint64_t sub_10003B3DC(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_10003B8D8;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC9appstored12AssetPromise_state);
  uint64_t v7 = (uint64_t)&v6[4];
  uint64_t v8 = v6 + 9;
  swift_retain_n();
  _Block_copy(a2);
  os_unfair_lock_lock(v8);
  sub_10003B570(v7, (uint64_t)&v12);
  os_unfair_lock_unlock(v8);
  unsigned __int8 v9 = v13;
  if (v13 != 255)
  {
    uint64_t v10 = v12;
    if ((v13 & 1) == 0) {
      ((void (**)(void, void *))a2)[2](a2, v12);
    }
    sub_10003B590(v10, v9);
  }
  swift_release();
  return swift_release_n();
}

uint64_t sub_10003B52C()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10003B564(void *a1, char a2)
{
  sub_10003A034(a1, a2 & 1, *(void (**)(void *))(v2 + 16));
}

void sub_10003B570(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10003A36C(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

void sub_10003B590(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_10003AAF0(a1, a2 & 1);
  }
}

uint64_t sub_10003B5AC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10003B5F4()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + _Block_object_dispose(&a9, 8) = sub_100005040;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_10003A634, 0, 0);
}

uint64_t sub_10003B6A8()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003B6E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_10003B714(uint64_t a1, uint64_t a2)
{
  sub_100039FC4(a1, a2, *(void *)(v2 + 16));
}

void sub_10003B71C(void *a1, char a2)
{
  sub_100039D90(a1, a2 & 1, *(void (**)(void *, id))(v2 + 16));
}

id sub_10003B728(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10003AAA4(result, a2 & 1);
  }
  return result;
}

void sub_10003B740()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = (id)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10003B798(void *a1, char a2)
{
  sub_100039BC0(a1, a2 & 1, *(void (**)(id))(v2 + 16));
}

uint64_t sub_10003B7A4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10003B7B8(uint64_t *a1)
{
  return sub_10003966C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10003B7D4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10003B7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t *))(v3 + 16);
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v6 = a3;
  return v4(&v8, &v7, &v6);
}

uint64_t sub_10003B83C(void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(v3 + 16))(*a1, *a2, *a3);
}

ValueMetadata *type metadata accessor for AssetPromisePhase()
{
  return &type metadata for AssetPromisePhase;
}

unint64_t sub_10003B884()
{
  unint64_t result = qword_1005A40B0;
  if (!qword_1005A40B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A40B0);
  }
  return result;
}

void sub_10003B90C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t _s14BasePropertiesOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14BasePropertiesOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003BA84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14BasePropertiesOMa()
{
  return &_s14BasePropertiesON;
}

Swift::Int sub_10003BABC()
{
  return Hasher._finalize()();
}

Swift::Int sub_10003BBB8()
{
  return Hasher._finalize()();
}

uint64_t sub_10003BD24(unsigned __int8 *a1, char *a2)
{
  return sub_1000F05F8(*a1, *a2);
}

Swift::Int sub_10003BD30()
{
  return sub_10003BBB8();
}

uint64_t sub_10003BD3C()
{
  return sub_1000F1958();
}

Swift::Int sub_10003BD44()
{
  return sub_10003BBB8();
}

unint64_t sub_10003BD4C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10003BF14(*a1);
  *a2 = result;
  return result;
}

void sub_10003BD7C(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7368801;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006E6FLL;
      uint64_t v3 = 0x6973726556707061;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x7372655665736162;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0xEB000000006E6F69;
      break;
    case 3:
      strcpy((char *)a1, "eventVersion");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 4:
      strcpy((char *)a1, "osBuildVersion");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 5:
      *(void *)a1 = 0x656D614E736FLL;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0xE600000000000000;
      break;
    case 6:
      *(void *)a1 = 0x6F6973726556736FLL;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0xE90000000000006ELL;
      break;
    case 7:
      strcpy((char *)a1, "timezoneOffset");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v2;
      break;
  }
}

unint64_t sub_10003BEC0()
{
  unint64_t result = qword_1005A40B8;
  if (!qword_1005A40B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A40B8);
  }
  return result;
}

unint64_t sub_10003BF14(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100510080, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

void sub_10003BF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v26[3] = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  __chkstk_darwin(v6);
  int v8 = (char *)v26 - v7;
  self;
  id v9 = sub_10030B11C();
  unsigned int v10 = sub_10030D1EC(v9, @"skanner-service-enabled", 0);

  if (v10)
  {
    if (qword_1005A2FB0 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(qword_1005B1450 + OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 20));
    sub_1000342E8((unsigned char *)(v11 + 16), v28);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 20));
    int v12 = LOBYTE(v28[0]);
    swift_release();
    if (v12 == 1)
    {
      static Logger.skanner.getter();
      unsigned __int8 v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v15 = 134217984;
        *(void *)&v28[0] = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Logging interop events for app %lld", v15, 0xCu);
        swift_slowDealloc();
      }

      NSString v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v26[1] = v5 + 8;
      v16(v8, v4);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      sub_10001644C(&qword_1005A4110);
      sub_1000402F0();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      uint64_t v17 = *(void *)&v28[0];
      uint64_t v18 = *(void *)(*(void *)&v28[0] + 16);
      if (v18)
      {
        unint64_t v27 = (char *)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v19 = (objc_class *)type metadata accessor for SkannerEvent();
        uint64_t v20 = 32;
        do
        {
          v28[0] = *(_OWORD *)(v17 + v20);
          long long v21 = *(_OWORD *)(v17 + v20 + 16);
          long long v22 = *(_OWORD *)(v17 + v20 + 32);
          long long v23 = *(_OWORD *)(v17 + v20 + 48);
          *(_OWORD *)&v29[9] = *(_OWORD *)(v17 + v20 + 57);
          _OWORD v28[2] = v22;
          *(_OWORD *)uint64_t v29 = v23;
          v28[1] = v21;
          id v24 = objc_allocWithZone(v19);
          sub_1000403B8((uint64_t)v28);
          sub_1000F2798(v28);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v20 += 80;
          --v18;
        }
        while (v18);
        uint64_t v25 = v27;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = (char *)_swiftEmptyArrayStorage;
      }
      sub_10003D85C(v25, a3);
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10003C4A0(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  id v10 = sub_10030B11C();
  unsigned int v11 = sub_10030D1EC(v10, @"skanner-service-enabled", 0);

  if (v11)
  {
    if (qword_1005A2FB0 != -1) {
      swift_once();
    }
    uint64_t v12 = *(void *)(qword_1005B1450 + OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 20));
    sub_1000342E8((unsigned char *)(v12 + 16), aBlock);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 20));
    int v13 = LOBYTE(aBlock[0]);
    swift_release();
    if (v13 == 1)
    {
      static Logger.skanner.getter();
      os_log_type_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        NSString v16 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)NSString v16 = 134217984;
        aBlock[0] = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Logging event to story for app %lld", v16, 0xCu);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      sub_10001644C(&qword_1005A43D0);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_100488A80;
      *(void *)(v17 + 32) = a1;
      aBlock[0] = v17;
      specialized Array._endMutation()();
      uint64_t v18 = aBlock[0];
      uint64_t v19 = *(void **)(v3 + OBJC_IVAR____TtC9appstored18SkannerCoordinator_databaseStore);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a2;
      *(unsigned char *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = v18;
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_1000403F0;
      *(void *)(v21 + 24) = v20;
      aBlock[4] = sub_100040438;
      aBlock[5] = v21;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003D6C8;
      aBlock[3] = &unk_100512690;
      long long v22 = _Block_copy(aBlock);
      id v23 = a1;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v19 modifyUsingTransaction:v22];
      _Block_release(v22);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
}

id sub_10003C860()
{
  self;
  uint64_t v0 = (os_unfair_lock_s *)sub_1001F5660();
  uint64_t v1 = sub_1001F5824(v0);

  id v2 = [objc_allocWithZone((Class)type metadata accessor for SkannerDatabaseStore()) initWithDatabase:v1];
  id result = sub_10003FA10((uint64_t)v2);
  qword_1005B1490 = (uint64_t)result;
  return result;
}

void sub_10003C93C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  id v10 = sub_10030B11C();
  unsigned int v11 = sub_10030D1EC(v10, @"skanner-service-enabled", 0);

  if (v11)
  {
    if (qword_1005A2FB0 != -1) {
      swift_once();
    }
    uint64_t v12 = *(void *)(qword_1005B1450 + OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 20));
    sub_1000342E8((unsigned char *)(v12 + 16), aBlock);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 20));
    int v13 = LOBYTE(aBlock[0]);
    swift_release();
    if (v13 == 1)
    {
      static Logger.skanner.getter();
      os_log_type_t v14 = a1;
      os_log_type_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        unint64_t v17 = 0xEC0000006E6F6973;
        uint64_t v18 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v30 = a2;
        aBlock[0] = v28;
        *(_DWORD *)uint64_t v18 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2080;
        uint64_t v19 = v14[OBJC_IVAR____TtC9appstored12SkannerEvent_eventType];
        uint64_t v20 = 0x736572706D496461;
        uint64_t v29 = a2;
        switch(v19)
        {
          case 1:
            uint64_t v20 = 0x7265766E6F436461;
            break;
          case 2:
            unint64_t v17 = 0xE700000000000000;
            uint64_t v20 = 0x74736575716572;
            break;
          case 3:
            unint64_t v17 = 0xED00006574656C70;
            uint64_t v20 = 0x6D6F4379726F7473;
            break;
          default:
            break;
        }
        uint64_t v30 = sub_1000F7290(v20, v17, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting story if needed for app %lld. Logging %s event", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        a2 = v29;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      uint64_t v21 = *(void **)&v3[OBJC_IVAR____TtC9appstored18SkannerCoordinator_databaseStore];
      long long v22 = (void *)swift_allocObject();
      v22[2] = a2;
      v22[3] = v14;
      void v22[4] = v3;
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = sub_1000402D4;
      *(void *)(v23 + 24) = v22;
      aBlock[4] = (uint64_t)sub_100040438;
      aBlock[5] = v23;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10003D6C8;
      aBlock[3] = (uint64_t)&unk_100512708;
      id v24 = _Block_copy(aBlock);
      uint64_t v25 = v14;
      unsigned __int8 v26 = v3;
      swift_retain();
      swift_release();
      [v21 modifyUsingTransaction:v24];
      _Block_release(v24);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
        JUMPOUT(0x10003CE04);
      }
    }
  }
}

uint64_t sub_10003CE14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  int v13 = (char *)&v58 - v12;
  __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)&v58 - v14;
  uint64_t v16 = sub_10006FBE0(a2);
  if (v16)
  {
    unint64_t v17 = (void *)v16;
    sub_10001644C(&qword_1005A43D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100488A80;
    *(void *)(inited + 32) = a3;
    unint64_t v63 = inited;
    specialized Array._endMutation()();
    unint64_t v19 = v63;
    id v20 = a3;
    sub_1000577B0(v19);
    swift_bridgeObjectRelease();
    id v21 = [v17 databaseID];
    id v22 = [objc_allocWithZone((Class)type metadata accessor for SkannerStoryEntity()) initWithPersistentID:v21 onConnection:*(void *)(a1 + OBJC_IVAR____TtC9appstored22SkannerDatabaseSession_connection)];
    id v23 = [v17 propertyValues];
    uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000C51E4(v24);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v22 setValuesWithDictionary:isa];

    static Logger.skanner.getter();
    unsigned __int8 v26 = v20;
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v60 = v7;
      uint64_t v61 = v6;
      unint64_t v29 = 0xEC0000006E6F6973;
      uint64_t v30 = 0x736572706D496461;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      unint64_t v63 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      switch(v26[OBJC_IVAR____TtC9appstored12SkannerEvent_eventType])
      {
        case 1:
          uint64_t v30 = 0x7265766E6F436461;
          break;
        case 2:
          unint64_t v29 = 0xE700000000000000;
          uint64_t v30 = 0x74736575716572;
          break;
        case 3:
          uint64_t v30 = 0x6D6F4379726F7473;
          unint64_t v29 = 0xED00006574656C70;
          break;
        default:
          break;
      }
      uint64_t v62 = sub_1000F7290(v30, v29, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Logged %s event to existing story", v31, 0xCu);
      uint64_t v50 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v60 + 8))(v15, v61);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
      return 1;
    }
  }
  else
  {
    uint64_t v60 = v7;
    uint64_t v61 = v6;
    BOOL v32 = sub_1000427DC();
    sub_10001644C(&qword_1005A43D0);
    uint64_t v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_100488A80;
    *(void *)(v33 + 32) = a3;
    unint64_t v63 = v33;
    specialized Array._endMutation()();
    unint64_t v34 = v63;
    type metadata accessor for SkannerStory();
    id v59 = a3;
    swift_bridgeObjectRetain();
    id v35 = sub_10005876C(a2, v32, v34);
    swift_bridgeObjectRelease();
    id v36 = [v35 propertyValues];
    uint64_t v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000C51E4(v37);
    swift_bridgeObjectRelease();
    id v38 = *(void **)(a1 + OBJC_IVAR____TtC9appstored22SkannerDatabaseSession_connection);
    id v39 = objc_allocWithZone((Class)type metadata accessor for SkannerStoryEntity());
    id v40 = v38;
    Class v41 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v42 = [v39 initWithPropertyValues:v41 onConnection:v40];

    LOBYTE(v40) = [v42 existsInDatabase];
    swift_bridgeObjectRelease();

    if (v40)
    {
      static Logger.skanner.getter();
      NSString v43 = v59;
      long long v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        unint64_t v46 = 0xEC0000006E6F6973;
        uint64_t v47 = 0x736572706D496461;
        uint64_t v48 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        uint64_t v62 = a2;
        unint64_t v63 = v49;
        *(_DWORD *)uint64_t v48 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v48 + 12) = 2080;
        switch(v43[OBJC_IVAR____TtC9appstored12SkannerEvent_eventType])
        {
          case 1:
            uint64_t v47 = 0x7265766E6F436461;
            break;
          case 2:
            unint64_t v46 = 0xE700000000000000;
            uint64_t v47 = 0x74736575716572;
            break;
          case 3:
            uint64_t v47 = 0x6D6F4379726F7473;
            unint64_t v46 = 0xED00006574656C70;
            break;
          default:
            break;
        }
        uint64_t v62 = sub_1000F7290(v47, v46, (uint64_t *)&v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Created new story for app %lld with %s event", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v61);
        return 1;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v61);
        return 1;
      }
    }
    else
    {
      static Logger.skanner.getter();
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      BOOL v53 = os_log_type_enabled(v51, v52);
      uint64_t v55 = v60;
      uint64_t v54 = v61;
      if (v53)
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 134217984;
        unint64_t v63 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to create new story for app %lld", v56, 0xCu);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v54);
      return 0;
    }
  }
  return v50;
}

uint64_t sub_10003D6C8(uint64_t a1, void *a2)
{
  id v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  char v4 = v2();

  return v4 & 1;
}

void sub_10003D85C(char *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v33 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v10 = (char *)&aBlock[-1] - v9;
  self;
  id v11 = sub_10030B11C();
  unsigned int v12 = sub_10030D1EC(v11, @"skanner-service-enabled", 0);

  if (v12)
  {
    unint64_t v13 = v5;
    uint64_t v14 = v6;
    os_log_type_t v15 = v2;
    uint64_t v16 = a2;
    if (qword_1005A2FB0 != -1) {
      goto LABEL_14;
    }
    while (1)
    {
      uint64_t v17 = *(void *)(qword_1005B1450 + OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v17 + 20));
      sub_1000342E8((unsigned char *)(v17 + 16), aBlock);
      os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 20));
      int v18 = LOBYTE(aBlock[0]);
      swift_release();
      if (v18 != 1) {
        break;
      }
      uint64_t v19 = v16;
      id v20 = v15;
      uint64_t v21 = v14;
      unint64_t v22 = v13;
      unint64_t v13 = (unint64_t)a1;
      a1 = v10;
      if (v13 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v28)
        {
LABEL_16:
          unint64_t v29 = v33;
          static Logger.skanner.getter();
          uint64_t v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v30, v31))
          {
            BOOL v32 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)BOOL v32 = 134217984;
            aBlock[0] = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "Tried to log zero events for app %lld", v32, 0xCu);
            swift_slowDealloc();
          }

          (*(void (**)(char *, unint64_t))(v21 + 8))(v29, v22);
          return;
        }
      }
      else if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_16;
      }
      static Logger.skanner.getter();
      swift_bridgeObjectRetain_n();
      id v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        id v10 = (char *)swift_slowAlloc();
        *(_DWORD *)id v10 = 134218240;
        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v25 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        aBlock[0] = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *((_WORD *)v10 + 6) = 2048;
        aBlock[0] = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Logging %ld events to story for app %lld", (uint8_t *)v10, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, unint64_t))(v21 + 8))(a1, v22);
      unsigned __int8 v26 = *(void **)&v20[OBJC_IVAR____TtC9appstored18SkannerCoordinator_databaseStore];
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v19;
      *(unsigned char *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = v13;
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = sub_1000403F0;
      *(void *)(v27 + 24) = v14;
      aBlock[4] = sub_100040438;
      uint64_t v35 = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003D6C8;
      aBlock[3] = &unk_100512618;
      os_log_type_t v15 = (char *)_Block_copy(aBlock);
      uint64_t v16 = v35;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v26 modifyUsingTransaction:v15];
      _Block_release(v15);
      LOBYTE(v26) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v26 & 1) == 0) {
        return;
      }
      __break(1u);
LABEL_14:
      swift_once();
    }
  }
}

void sub_10003DE10(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  id v8 = sub_10030B11C();
  unsigned int v9 = sub_10030D1EC(v8, @"skanner-service-enabled", 0);

  if (v9)
  {
    if (qword_1005A2FB0 != -1) {
      swift_once();
    }
    uint64_t v10 = *(void *)(qword_1005B1450 + OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 20));
    sub_1000342E8((unsigned char *)(v10 + 16), aBlock);
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 20));
    int v11 = LOBYTE(aBlock[0]);
    swift_release();
    if (v11 == 1)
    {
      static Logger.skanner.getter();
      unsigned int v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 134217984;
        aBlock[0] = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Completing story for app %lld", v14, 0xCu);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_10001644C(&qword_1005A43D0);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_100488A80;
      id v16 = objc_allocWithZone((Class)type metadata accessor for SkannerEvent());
      *(void *)(v15 + 32) = sub_1000F2348(3, 9, 0, 0, 0, 0, 0, 0, 4u, 2u, 3u, 0, 1u, 3u, 0, 1u, 2u, 0, 1u,
                                0,
                                0,
                                0,
                                1u);
      aBlock[0] = v15;
      specialized Array._endMutation()();
      uint64_t v17 = aBlock[0];
      int v18 = *(void **)(v2 + OBJC_IVAR____TtC9appstored18SkannerCoordinator_databaseStore);
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = a1;
      *(unsigned char *)(v19 + 24) = 1;
      *(void *)(v19 + 32) = v17;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = sub_100040254;
      *(void *)(v20 + 24) = v19;
      aBlock[4] = sub_100040438;
      void aBlock[5] = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003D6C8;
      aBlock[3] = &unk_1005125A0;
      uint64_t v21 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v18 modifyUsingTransaction:v21];
      _Block_release(v21);
      LOBYTE(v1_Block_object_dispose(&a9, 8) = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (v18) {
        __break(1u);
      }
    }
  }
}

void sub_10003E29C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  id v6 = sub_10030B11C();
  unsigned int v7 = sub_10030D1EC(v6, @"skanner-service-enabled", 0);

  if (v7)
  {
    if (qword_1005A2FB0 != -1) {
      swift_once();
    }
    uint64_t v8 = *(void *)(qword_1005B1450 + OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 20));
    sub_1000342E8((unsigned char *)(v8 + 16), aBlock);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
    int v9 = LOBYTE(aBlock[0]);
    swift_release();
    if (v9 == 1)
    {
      static Logger.skanner.getter();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        unsigned int v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned int v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Flushing pending events from all stories", v12, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      os_log_type_t v13 = *(void **)&v1[OBJC_IVAR____TtC9appstored18SkannerCoordinator_databaseStore];
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v1;
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = sub_10003F8F0;
      *(void *)(v15 + 24) = v14;
      aBlock[4] = sub_10003F908;
      void aBlock[5] = v15;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003D6C8;
      aBlock[3] = &unk_100512370;
      id v16 = _Block_copy(aBlock);
      uint64_t v17 = v1;
      swift_retain();
      swift_release();
      [v13 modifyUsingTransaction:v16];
      _Block_release(v16);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
}

uint64_t sub_10003E5D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v49 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v48 - v6;
  uint64_t v7 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v7 - 8);
  int v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v59 = _swiftEmptyArrayStorage;
  Class v55 = (Class)type metadata accessor for SkannerStoryEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v56 = OBJC_IVAR____TtC9appstored22SkannerDatabaseSession_connection;
  uint64_t v57 = a1;
  os_log_type_t v11 = *(void **)(a1 + OBJC_IVAR____TtC9appstored22SkannerDatabaseSession_connection);
  uint64_t v52 = ObjCClassFromMetadata;
  id v12 = sub_1002FF548(ObjCClassFromMetadata, v11, 0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &v59;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10003F9D0;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_10003F9E8;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003F95C;
  aBlock[3] = &unk_1005123E8;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v12 enumerateMemoryEntitiesUsingBlock:v15];

  _Block_release(v15);
  unint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    unint64_t isEscapingClosureAtFileLocation = (unint64_t)v59;
    uint64_t result = swift_release();
    uint64_t v50 = v3;
    uint64_t v51 = v2;
    if (!(isEscapingClosureAtFileLocation >> 62))
    {
      uint64_t v18 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v18) {
        goto LABEL_12;
      }
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_12;
  }
LABEL_4:
  if (v18 >= 1)
  {
    unint64_t v54 = isEscapingClosureAtFileLocation & 0xC000000000000001;
    type metadata accessor for Metrics();
    uint64_t inited = swift_initStaticObject();
    uint64_t v19 = 0;
    unint64_t v20 = isEscapingClosureAtFileLocation;
    do
    {
      if (v54) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(isEscapingClosureAtFileLocation + 8 * v19 + 32);
      }
      unint64_t v22 = v21;
      ++v19;
      id v23 = sub_100057CB8();
      sub_100057CB8();
      swift_bridgeObjectRelease();
      sub_100058070((uint64_t)_swiftEmptyArrayStorage);
      id v24 = v22;
      uint64_t v25 = sub_10003FB4C((unint64_t)v23, v24);
      swift_bridgeObjectRelease();

      unsigned __int8 v26 = sub_10003ECB0((uint64_t)v25);
      swift_bridgeObjectRelease();
      uint64_t v27 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v9, 1, 1, v27);
      uint64_t v28 = (void *)swift_allocObject();
      _OWORD v28[2] = 0;
      _OWORD v28[3] = 0;
      uint64_t v29 = inited;
      void v28[4] = v26;
      v28[5] = v29;
      swift_bridgeObjectRetain();
      sub_100018FDC((uint64_t)v9, (uint64_t)&unk_1005A40F8, (uint64_t)v28);
      swift_bridgeObjectRelease();
      swift_release();
      id v30 = [v24 databaseID];
      id v31 = [objc_allocWithZone(v55) initWithPersistentID:v30 onConnection:*(void *)(v57 + v56)];
      id v32 = [v24 propertyValues];
      uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000C51E4(v33);
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v31 setValuesWithDictionary:isa];

      unint64_t isEscapingClosureAtFileLocation = v20;
    }
    while (v18 != v19);
LABEL_12:
    swift_bridgeObjectRelease();
    NSString v35 = String._bridgeToObjectiveC()();
    aBlock[0] = 1;
    uint64_t v36 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v37 = [self predicateWithProperty:v35 equalToValue:v36];
    swift_unknownObjectRelease();

    id v38 = sub_1002FF548(v52, *(void **)(v57 + v56), v37);
    LOBYTE(v36) = [v38 deleteAllEntities];

    if (v36)
    {
      id v39 = v48;
      static Logger.skanner.getter();
      id v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      BOOL v42 = os_log_type_enabled(v40, v41);
      uint64_t v44 = v50;
      uint64_t v43 = v51;
      if (v42)
      {
        os_log_type_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v45 = 0;
        unint64_t v46 = "Deleted completed stories";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v40, v41, v46, v45, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      id v39 = v49;
      static Logger.skanner.getter();
      id v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      BOOL v47 = os_log_type_enabled(v40, v41);
      uint64_t v44 = v50;
      uint64_t v43 = v51;
      if (v47)
      {
        os_log_type_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v45 = 0;
        unint64_t v46 = "Failed to delete completed stories";
        goto LABEL_17;
      }
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v43);
    return 1;
  }
  __break(1u);
  return result;
}

void *sub_10003ECB0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v12 = _swiftEmptyArrayStorage;
    sub_1000BAF1C(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (char *)(a1 + 32);
    do
    {
      memcpy(__dst, v4, 0x161uLL);
      sub_10003FEA8((uint64_t)__dst);
      id v12 = v2;
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1000BAF1C(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v12;
      }
      int v9 = &type metadata for SkannerEvent.Payload;
      unint64_t v10 = sub_10003FFE4();
      *(void *)&long long v8 = swift_allocObject();
      memcpy((void *)(v8 + 16), __dst, 0x161uLL);
      v2[2] = v6 + 1;
      sub_100040108(&v8, (uint64_t)&v2[5 * v6 + 4]);
      v4 += 360;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_10003EDE4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    int v9 = _swiftEmptyArrayStorage;
    sub_10000897C(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      v4 += 8;
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000897C(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_10000897C(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_10000C948(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_10003EF4C()
{
  uint64_t v1 = v0;
  self;
  id v2 = sub_10030B11C();
  unsigned int v3 = sub_10030D1EC(v2, @"skanner-service-enabled", 0);

  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  if (qword_1005A2FB0 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)(qword_1005B1450 + OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 20));
  sub_1000342E8((unsigned char *)(v4 + 16), aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 20));
  int v5 = LOBYTE(aBlock[0]);
  swift_release();
  unint64_t v6 = _swiftEmptyArrayStorage;
  if (v5 != 1) {
    return v6;
  }
  unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC9appstored18SkannerCoordinator_databaseStore);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v22;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1000401E4;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100018DAC;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018DE4;
  aBlock[3] = &unk_1005124B0;
  unint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(id)v7 readUsingSession:v10];
  _Block_release(v10);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v22;
    if (!(v22 >> 62))
    {
      uint64_t v11 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11) {
        goto LABEL_8;
      }
LABEL_20:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11) {
    goto LABEL_20;
  }
LABEL_8:
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t result = (void *)sub_1000BAF3C(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = 0;
    unint64_t v6 = (void *)aBlock[0];
    do
    {
      if ((v7 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(v7 + 8 * v13 + 32);
      }
      uint64_t v15 = v14;
      id v16 = [v14 propertyValues];
      uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v18 = sub_1000C51E4(v17);
      swift_bridgeObjectRelease();
      aBlock[0] = v6;
      unint64_t v20 = v6[2];
      unint64_t v19 = v6[3];
      if (v20 >= v19 >> 1)
      {
        sub_1000BAF3C(v19 > 1, v20 + 1, 1);
        unint64_t v6 = (void *)aBlock[0];
      }
      ++v13;
      v6[2] = v20 + 1;
      v6[v20 + 4] = v18;
    }
    while (v11 != v13);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003F304(uint64_t a1, void *a2)
{
  id v12 = _swiftEmptyArrayStorage;
  type metadata accessor for SkannerStoryEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v5 = sub_1002FF548(ObjCClassFromMetadata, *(void **)(a1 + OBJC_IVAR____TtC9appstored22SkannerDatabaseSession_connection), 0);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v12;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10004043C;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_100040418;
  void aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003F95C;
  aBlock[3] = &unk_100512528;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v5 enumerateMemoryEntitiesUsingBlock:v8];

  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    unint64_t v10 = v12;
    swift_release();
    *a2 = v10;
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL sub_10003F4AC(uint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)&v28 - v13;
  uint64_t v15 = sub_10006FBE0(a2);
  if (v15)
  {
    sub_100057930(a3 & 1);
    sub_1000577B0(a4);
    id v16 = [v15 databaseID];
    id v17 = [objc_allocWithZone((Class)type metadata accessor for SkannerStoryEntity()) initWithPersistentID:v16 onConnection:*(void *)(a1 + OBJC_IVAR____TtC9appstored22SkannerDatabaseSession_connection)];
    id v18 = [v15 propertyValues];
    uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000C51E4(v19);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v17 setValuesWithDictionary:isa];

    static Logger.skanner.getter();
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v23 = 134217984;
      uint64_t v29 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updated story for app: %lld", v23, 0xCu);
      swift_slowDealloc();
    }

    id v24 = v15;
  }
  else
  {
    static Logger.skanner.getter();
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      unsigned __int8 v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v26 = 134217984;
      uint64_t v29 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to retrieve story for app: %lld", v26, 0xCu);
      swift_slowDealloc();
    }
    id v12 = v14;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v15 != 0;
}

uint64_t type metadata accessor for SkannerCoordinator()
{
  return self;
}

uint64_t sub_10003F8B8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003F8F0(uint64_t a1)
{
  return sub_10003E5D4(a1);
}

uint64_t sub_10003F8F8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003F908()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10003F934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_10003F95C(uint64_t a1, void *a2)
{
  id v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_10003F9C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003F9D0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10006FF34(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10003F9D8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003F9E8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_10003FA10(uint64_t a1)
{
  uint64_t v13 = &type metadata for SkannerStoryMetrics;
  id v14 = &off_1005127F0;
  id v2 = (objc_class *)type metadata accessor for SkannerCoordinator();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  uint64_t v4 = sub_100040120((uint64_t)v12, (uint64_t)&type metadata for SkannerStoryMetrics);
  __chkstk_darwin(v4);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v10 = &type metadata for SkannerStoryMetrics;
  uint64_t v11 = &off_1005127F0;
  sub_100040170((uint64_t)v9, (uint64_t)&v3[OBJC_IVAR____TtC9appstored18SkannerCoordinator_storyMetrics]);
  *(void *)&v3[OBJC_IVAR____TtC9appstored18SkannerCoordinator_databaseStore] = a1;
  v8.receiver = v3;
  v8.super_class = v2;
  id v6 = objc_msgSendSuper2(&v8, "init");
  sub_10002E618((uint64_t)v9);
  sub_10002E618((uint64_t)v12);
  return v6;
}

void *sub_10003FB4C(unint64_t a1, void *a2)
{
  id v22 = a2;
  if (a1 >> 62) {
    goto LABEL_26;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      uint64_t v7 = v6;
      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v22 valueForProperty:v9];

      if (v10)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_10000C948(&v19, v20);
      }
      else
      {
        memset(v20, 0, sizeof(v20));
      }
      sub_10001644C(&qword_1005A5660);
      int v11 = swift_dynamicCast();
      uint64_t v13 = *((void *)&v19 + 1);
      uint64_t v12 = v19;
      if (!v11)
      {
        uint64_t v13 = 0;
        uint64_t v12 = 0;
      }
      if (v13) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = 0;
      }
      if (v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = 0xE000000000000000;
      }
      sub_1000F1C28(v14, v15, (uint64_t)__src);

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_1000E8070(0, v4[2] + 1, 1, v4);
      }
      unint64_t v17 = v4[2];
      unint64_t v16 = v4[3];
      if (v17 >= v16 >> 1) {
        uint64_t v4 = sub_1000E8070((void *)(v16 > 1), v17 + 1, 1, v4);
      }
      v4[2] = v17 + 1;
      memcpy(&v4[45 * v17 + 4], __src, 0x161uLL);
      if (v8 == v3)
      {
        swift_bridgeObjectRelease();
        return v4;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10003FDA0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003FDE8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100005040;
  return sub_1000BA48C(a1, v4, v5, v7, v6);
}

uint64_t sub_10003FEA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v4 = v2;
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_10003FFE4()
{
  unint64_t result = qword_1005A4100;
  if (!qword_1005A4100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4100);
  }
  return result;
}

uint64_t sub_100040038()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 369, 7);
}

uint64_t sub_100040108(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100040120(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100040170(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000401D4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000401E4(uint64_t a1)
{
  return sub_10003F304(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000401EC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000401FC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004020C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004021C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

BOOL sub_100040254(uint64_t a1)
{
  return sub_10003F4AC(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100040264()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040274()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040284()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040294()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000402D4(uint64_t a1)
{
  return sub_10003CE14(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000402E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000402F0()
{
  unint64_t result = qword_1005A4118;
  if (!qword_1005A4118)
  {
    sub_10002E5A8(&qword_1005A4110);
    sub_100040364();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4118);
  }
  return result;
}

unint64_t sub_100040364()
{
  unint64_t result = qword_1005A4120;
  if (!qword_1005A4120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4120);
  }
  return result;
}

uint64_t sub_1000403B8(uint64_t a1)
{
  return a1;
}

id sub_1000404C0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _AppStoreWidget();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for _AppStoreWidget()
{
  return self;
}

uint64_t sub_100040518(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __chkstk_darwin(v2);
  id v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)v34 - v7;
  int v9 = 0;
  uint64_t v10 = 0;
  id v38 = (uint64_t (**)(char *, uint64_t))(v11 + 8);
  unint64_t v40 = 0x800000010044C130;
  unint64_t v41 = 0x800000010044C160;
  unint64_t v39 = 0x800000010044C110;
  *(void *)&long long v12 = 136315138;
  long long v35 = v12;
  v34[1] = (char *)&type metadata for Any + 8;
  *(void *)&long long v12 = 136315394;
  long long v36 = v12;
  uint64_t v37 = v6;
  do
  {
    LODWORD(v14) = v9;
    if (*((unsigned char *)&off_100510188 + v10 + 32)) {
      uint64_t v15 = 0xD000000000000020;
    }
    else {
      uint64_t v15 = 0xD000000000000025;
    }
    if (*((unsigned char *)&off_100510188 + v10 + 32)) {
      unint64_t v16 = v40;
    }
    else {
      unint64_t v16 = v41;
    }
    id v17 = objc_allocWithZone((Class)CHSTimelineController);
    NSString v18 = String._bridgeToObjectiveC()();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v20 = [v17 initWithExtensionBundleIdentifier:v18 kind:v19];

    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = [v20 reloadTimelineWithReason:v21];

    if (v22)
    {
      int v44 = (int)v14;
      uint64_t v14 = v8;
      swift_willThrow();

      static Logger.general.getter();
      id v23 = v22;
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = v5;
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = (void *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = v36;
        *(void *)(v27 + 4) = sub_1000F7290(v15, v16, &v45);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2112;
        id v29 = v23;
        uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v27 + 14) = v30;
        void *v28 = v30;

        _os_log_impl((void *)&_mh_execute_header, v24, v26, "Error reloading widget (%s: %@", (uint8_t *)v27, 0x16u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        uint64_t v2 = v37;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t result = (*v38)(v25, v2);
      id v5 = v25;
      uint64_t v8 = v14;
      LOBYTE(v14) = v44;
    }
    else
    {

      static Logger.general.getter();
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = v35;
        *(void *)(v33 + 4) = sub_1000F7290(v15, v16, &v45);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Reloaded widget (%s", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy();
        uint64_t v2 = v37;
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t result = (*v38)(v8, v2);
    }
    int v9 = 1;
    uint64_t v10 = &_mh_execute_header.magic + 1;
  }
  while ((v14 & 1) == 0);
  return result;
}

void static Analytics.postHashMismatch(taskInfo:)(void *a1)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  v6[4] = sub_1000417E8;
  void v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_100041B5C;
  _OWORD v6[3] = &unk_100512758;
  uint64_t v4 = _Block_copy(v6);
  id v5 = a1;
  swift_release();
  sub_10040EA60(ObjCClassFromMetadata, v4, 25);
  _Block_release(v4);
}

void *sub_100040AC0(void *a1)
{
  uint64_t v3 = sub_10001644C(&qword_1005A4150);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NWInterface();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = sub_10023E264((uint64_t)a1);
  *((void *)&v109 + 1) = &type metadata for Bool;
  LOBYTE(v10_Block_object_dispose(&a9, 8) = v10 ^ 1;
  sub_10000C948(&v108, v107);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int64_t v110 = &_swiftEmptyDictionarySingleton;
  sub_1000D2278(v107, 0x6361437465737361, 0xEA00000000006568, isUniquelyReferenced_nonNull_native);
  long long v12 = v110;
  swift_bridgeObjectRelease();
  id v14 = sub_10023E120(a1, v13);
  id v15 = [v14 countOfBytesReceived];

  *((void *)&v109 + 1) = &type metadata for Int64;
  *(void *)&long long v108 = v15;
  sub_10000C948(&v108, v107);
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v106 = v12;
  sub_1000D2278(v107, 0x6365527365747962, 0xED00006465766965, v16);
  int64_t v110 = v106;
  swift_bridgeObjectRelease();
  id v18 = sub_10023E274(a1, v17);
  if (v18)
  {
    id v20 = v18;
    id v21 = [v18 transactionMetrics];

    sub_100018D68(0, (unint64_t *)&qword_1005A4158);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23)
      {
LABEL_4:
        unint64_t v24 = v23 - 1;
        if (__OFSUB__(v23, 1))
        {
          __break(1u);
        }
        else if ((v22 & 0xC000000000000001) == 0)
        {
          if ((v24 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v24 < *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v25 = *(id *)(v22 + 8 * v24 + 32);
            goto LABEL_9;
          }
          __break(1u);
          goto LABEL_64;
        }
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        os_log_type_t v26 = v25;
        swift_bridgeObjectRelease();
        id v27 = [v26 response];
        if (!v27) {
          goto LABEL_24;
        }
        uint64_t v1 = v27;
        self;
        uint64_t v28 = swift_dynamicCastObjCClass();
        if (!v28)
        {

          goto LABEL_24;
        }
        id v29 = (void *)v28;
        NSString v30 = String._bridgeToObjectiveC()();
        id v31 = [v29 valueForHTTPHeaderField:v30];

        if (v31)
        {
          char v104 = v26;
          uint64_t v105 = v7;
          unint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v34 = v33;

          *(void *)&long long v108 = 47;
          *((void *)&v108 + 1) = 0xE100000000000000;
          __chkstk_darwin(v35);
          *(&v102 - 2) = (unint64_t)&v108;
          unint64_t v103 = v32;
          unint64_t v36 = sub_100041CCC(sub_10004221C, (uint64_t)(&v102 - 4), v32, v34);
          if ((v37 & 1) == 0)
          {
            uint64_t v38 = HIBYTE(v34) & 0xF;
            if ((v34 & 0x2000000000000000) == 0) {
              uint64_t v38 = v103 & 0xFFFFFFFFFFFFLL;
            }
            if (v36 >> 14 < 4 * v38)
            {
              swift_bridgeObjectRetain();
              uint64_t v39 = v103;
              unint64_t v40 = String.index(after:)();
              swift_bridgeObjectRelease();
              unint64_t v41 = sub_100042274(v40, v39, v34);
              unint64_t v43 = v42;
              unint64_t v103 = v44;
              unint64_t v46 = v45;
              swift_bridgeObjectRelease();
              if ((v41 ^ v43) >> 14)
              {
                unint64_t v102 = v46;
                uint64_t v47 = sub_100042148(v41, v43, v103, v46, 10);
                os_log_type_t v26 = v104;
                if ((v48 & 0x100) == 0)
                {
                  uint64_t v49 = (unsigned __int8 *)v47;
                  char v50 = v48;
                  swift_bridgeObjectRelease();
                  if (v50) {
                    goto LABEL_65;
                  }
                  goto LABEL_30;
                }
                uint64_t v49 = sub_100041DD8(v41, v43, v103, v102, 10);
                char v60 = v59;
                swift_bridgeObjectRelease();
                if ((v60 & 1) == 0)
                {
LABEL_30:
                  uint64_t v7 = v105;
                  *((void *)&v109 + 1) = &type metadata for Int;
                  *(void *)&long long v108 = v49;
                  goto LABEL_23;
                }
LABEL_65:
                sub_1000B29CC(0x4C746E65746E6F63, 0xED00006874676E65, v107);
                sub_100016714((uint64_t)v107, &qword_1005A5660);

                uint64_t v7 = v105;
LABEL_24:
                id v54 = [v26 _interfaceName];
                if (v54)
                {
                  Class v55 = v54;
                  static String._unconditionallyBridgeFromObjectiveC(_:)();

                  NWInterface.init(_:)();
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
                  {

                    sub_100016714((uint64_t)v5, &qword_1005A4150);
                  }
                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
                    sub_1000417F0();
                    NSString v56 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    *((void *)&v109 + 1) = sub_100018D68(0, &qword_1005A4168);
                    *(void *)&long long v108 = v56;
                    sub_10000C948(&v108, v107);
                    uint64_t v57 = v110;
                    char v58 = swift_isUniquelyReferenced_nonNull_native();
                    unint64_t v106 = v57;
                    sub_1000D2278(v107, 0x6361667265746E69, 0xED00006570795465, v58);
                    int64_t v110 = v106;

                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
                  }
                }
                else
                {
                }
                goto LABEL_33;
              }
LABEL_64:
              swift_bridgeObjectRelease();
              os_log_type_t v26 = v104;
              goto LABEL_65;
            }
          }
          swift_bridgeObjectRelease();
          os_log_type_t v26 = v104;
          uint64_t v7 = v105;
        }
        id v51 = [v29 expectedContentLength];
        *((void *)&v109 + 1) = &type metadata for Int64;
        *(void *)&long long v108 = v51;
LABEL_23:
        sub_10000C948(&v108, v107);
        uint64_t v52 = v110;
        char v53 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v106 = v52;
        sub_1000D2278(v107, 0x4C746E65746E6F63, 0xED00006874676E65, v53);
        int64_t v110 = v106;

        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v23) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_33:
  id v61 = sub_10023E250(a1, v19);
  if (!v61) {
    goto LABEL_54;
  }
  *(void *)&long long v108 = v61;
  sub_10001644C(&qword_1005A4E40);
  sub_100018D68(0, (unint64_t *)&qword_1005A4160);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_54;
  }
  unint64_t v63 = *(void **)&v107[0];
  id v64 = [*(id *)&v107[0] domain];
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  if (v65 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v67 != v68)
  {
    char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v69) {
      goto LABEL_39;
    }

LABEL_54:
    id v88 = sub_10023E250(a1, v62);
    if (v88
      && (*(void *)&long long v108 = v88,
          sub_10001644C(&qword_1005A4E40),
          sub_100018D68(0, (unint64_t *)&qword_1005A4160),
          (swift_dynamicCast() & 1) != 0))
    {
      uint64_t v89 = *(void **)&v107[0];
      id v90 = [*(id *)&v107[0] domain];
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v93 = v92;

      *(void *)&long long v108 = v91;
      *((void *)&v108 + 1) = v93;
      v94._object = (void *)0xE900000000000028;
      v94._countAndFlagsBits = 0x6E776F6E6B6E552FLL;
      String.append(_:)(v94);
      *(void *)&v107[0] = [v89 code];
      v95._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v95);
      swift_bridgeObjectRelease();
      v96._countAndFlagsBits = 41;
      v96._object = (void *)0xE100000000000000;
      String.append(_:)(v96);
      *((void *)&v109 + 1) = &type metadata for String;
      sub_10000C948(&v108, v107);
      id v97 = v110;
      char v98 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v106 = v97;
      sub_1000D2278(v107, 0x707954726F727265, 0xE900000000000065, v98);
      uint64_t v87 = v106;
    }
    else
    {
      *((void *)&v109 + 1) = &type metadata for String;
      *(void *)&long long v108 = 1701736302;
      *((void *)&v108 + 1) = 0xE400000000000000;
      sub_10000C948(&v108, v107);
      uint64_t v99 = v110;
      char v100 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v106 = v99;
      sub_1000D2278(v107, 0x707954726F727265, 0xE900000000000065, v100);
      uint64_t v87 = v106;
    }
    goto LABEL_58;
  }
  swift_bridgeObjectRelease_n();
LABEL_39:
  sub_100041A54(v63);
  NSString v70 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *((void *)&v109 + 1) = sub_100018D68(0, &qword_1005A4168);
  *(void *)&long long v108 = v70;
  sub_10000C948(&v108, v107);
  id v71 = v110;
  char v72 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v106 = v71;
  sub_1000D2278(v107, 0x707954726F727265, 0xE900000000000065, v72);
  int64_t v110 = v106;
  swift_bridgeObjectRelease();
  id v73 = [v63 userInfo];
  uint64_t v74 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v74 + 16) && (unint64_t v77 = sub_100049A4C(v75, v76), (v78 & 1) != 0))
  {
    sub_100031C38(*(void *)(v74 + 56) + 32 * v77, (uint64_t)&v108);
  }
  else
  {
    long long v108 = 0u;
    long long v109 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v109 + 1))
  {
    sub_10000C948(&v108, v107);
    int64_t v79 = v110;
    char v80 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v106 = v79;
    sub_1000D2278(v107, 0x7366664F656C6966, 0xEA00000000007465, v80);
    int64_t v110 = v106;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100016714((uint64_t)&v108, &qword_1005A5660);
    sub_1000B29CC(0x7366664F656C6966, 0xEA00000000007465, v107);
    sub_100016714((uint64_t)v107, &qword_1005A5660);
  }
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v74 + 16) && (unint64_t v83 = sub_100049A4C(v81, v82), (v84 & 1) != 0))
  {
    sub_100031C38(*(void *)(v74 + 56) + 32 * v83, (uint64_t)&v108);
  }
  else
  {
    long long v108 = 0u;
    long long v109 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v109 + 1))
  {
    sub_10000C948(&v108, v107);
    id v85 = v110;
    char v86 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v106 = v85;
    sub_1000D2278(v107, 0x65646E4968736168, 0xE900000000000078, v86);
    uint64_t v87 = v106;

LABEL_58:
    swift_bridgeObjectRelease();
    return v87;
  }
  sub_100016714((uint64_t)&v108, &qword_1005A5660);
  sub_1000B29CC(0x65646E4968736168, 0xE900000000000078, v107);
  sub_100016714((uint64_t)v107, &qword_1005A5660);

  return v110;
}

uint64_t sub_1000417B0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_1000417E8()
{
  return sub_100040AC0(*(void **)(v0 + 16));
}

uint64_t sub_1000417F0()
{
  uint64_t v0 = type metadata accessor for NWInterface.InterfaceType();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v13 - v5;
  NWInterface.type.getter();
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v6, v0);
  if (v7 == enum case for NWInterface.InterfaceType.other(_:)) {
    return 0x726568746FLL;
  }
  if (v7 == enum case for NWInterface.InterfaceType.wifi(_:)) {
    return 1768319351;
  }
  if (v7 == enum case for NWInterface.InterfaceType.cellular(_:)) {
    return 0x72616C756C6C6563;
  }
  if (v7 == enum case for NWInterface.InterfaceType.wiredEthernet(_:)) {
    return 0x6465726977;
  }
  if (v7 == enum case for NWInterface.InterfaceType.loopback(_:)) {
    return 0x6B636162706F6F6CLL;
  }
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  v9._countAndFlagsBits = 0x286E776F6E6B6E75;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  NWInterface.type.getter();
  _print_unlocked<A, B>(_:_:)();
  char v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t v8 = v13[0];
  v10(v6, v0);
  return v8;
}

unint64_t sub_100041A54(void *a1)
{
  if ([a1 code] == (id)4) {
    return 0xD000000000000023;
  }
  if ([a1 code] == (id)2) {
    return 0xD000000000000022;
  }
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  [a1 code];
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD00000000000001FLL;
}

Class sub_100041B5C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }
  return v4.super.isa;
}

unint64_t sub_100041CCC(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

unsigned __int8 *sub_100041DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1000422C0();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    char v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1000B4094();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    char v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    char v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = sub_100041ECC(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_100041ECC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  NSString v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100042148(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_100042314((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_10004221C(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

unint64_t sub_100042274(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t sub_1000422C0()
{
  unint64_t result = qword_1005A4170;
  if (!qword_1005A4170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4170);
  }
  return result;
}

uint64_t sub_100042314(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_1000F7798(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_1000F7798(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_1000F7798(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  NSString v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    NSString v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          unint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t sub_100042750(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    unint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_1000427DC()
{
  if (sub_100042878()) {
    return 1;
  }
  self;
  id v1 = sub_10030B11C();
  double v2 = sub_10030D38C(v1, @"skanner-service-sample-rate", 0.1);

  return (double)sub_100042750(0x20000000000001uLL) * 1.11022302e-16 + 0.0 <= v2;
}

uint64_t sub_100042878()
{
  return os_variant_has_internal_content();
}

ValueMetadata *type metadata accessor for SkannerStoryMetrics()
{
  return &type metadata for SkannerStoryMetrics;
}

unint64_t sub_100042894(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001644C(&qword_1005A4228);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100016588(v6, (uint64_t)v15, &qword_1005A4230);
    unint64_t result = sub_100049A08((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10000C948(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000429D8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001644C(&qword_1005A3C10);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100016588(v6, (uint64_t)&v15, &qword_1005A4238);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100049A4C(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10000C948(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100042B10(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001644C((uint64_t *)&unk_1005A4CD0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100049A4C(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_100042C34(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_11;
  }
  sub_10001644C(&qword_1005A4208);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_retain();
  memcpy(__dst, (const void *)(a1 + 32), 0x14AuLL);
  uint64_t v4 = __dst[0];
  uint64_t v5 = __dst[1];
  sub_10004C744((uint64_t)__dst);
  unint64_t v6 = sub_100049A4C(v4, v5);
  if (v7)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  uint64_t v8 = 368;
  while (1)
  {
    *(void *)((char *)v2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * v6);
    uint64_t *v9 = v4;
    v9[1] = v5;
    unint64_t result = memcpy((void *)(v2[7] + 320 * v6), &__dst[2], 0x13AuLL);
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v2[2] = v13;
    if (!--v3) {
      goto LABEL_9;
    }
    memcpy(__dst, (const void *)(a1 + v8), 0x14AuLL);
    uint64_t v4 = __dst[0];
    uint64_t v5 = __dst[1];
    sub_10004C744((uint64_t)__dst);
    unint64_t v6 = sub_100049A4C(v4, v5);
    v8 += 336;
    if (v14) {
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100042DA8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001644C(&qword_1005A4250);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100016588(v6, (uint64_t)&v13, &qword_1005A4258);
    uint64_t v7 = v13;
    unint64_t result = sub_100049BDC(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_10000C948(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100042ED8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001644C(&qword_1005A4240);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100049A4C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100042FEC()
{
  qword_1005B1498 = (uint64_t)&off_1005101B0;
}

id sub_100043000()
{
  id v1 = v0;
  static Logger.arcade.getter();
  self;
  id v2 = sub_10030B11C();
  if (qword_1005A2FD8 != -1) {
    swift_once();
  }
  sub_10003EDE4(qword_1005B1498);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = sub_10030C674(v2, @"arcade-hardware-promo-scenario-ids", isa, 0);

  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = sub_1000C0404(v5);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    uint64_t v6 = (void *)qword_1005B1498;
    swift_bridgeObjectRetain();
  }
  *(void *)&v1[OBJC_IVAR____TtC9appstored29KatanaSubscriptionCoordinator_hardwareBundlePromoScenarios] = v6;

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for KatanaSubscriptionCoordinator();
  return objc_msgSendSuper2(&v8, "init");
}

id sub_100043190()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for KatanaSubscriptionCoordinator()) init];
  qword_1005B14A0 = (uint64_t)result;
  return result;
}

uint64_t sub_100043220(void *a1, void *a2)
{
  id v4 = objc_msgSend(a1, "ams_DSID");
  if (!v4)
  {
    id v24 = a2;
    id v25 = a1;
    id v26 = v24;
    id v27 = v25;
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      unsigned __int8 v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138412547;
      id v32 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unsigned __int8 v31 = v26;

      *(_WORD *)(v30 + 12) = 2113;
      *(void *)&__dst[0] = v27;
      id v33 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v31[1] = v27;

      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%@] Failed to find DSID for account: %{private}@", (uint8_t *)v30, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  uint64_t v5 = v4;
  id v6 = [v4 stringValue];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v9 = v8;

  unsigned __int8 v101 = 0;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  *(void *)&__dst[0] = 0xD000000000000017;
  *((void *)&__dst[0] + 1) = 0x800000010044C360;
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  uint64_t v11 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100047B2C(a1, a2, (uint64_t)v104);
  sub_10004CA0C((uint64_t)v104, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10004CAA8);
  sub_100030134((uint64_t)v104, (uint64_t)v105, &qword_1005A4268);
  if (sub_10004CB30((uint64_t)v105) != 1)
  {
    id v34 = a2;
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v98 = v7;
      uint64_t v38 = (void *)swift_slowAlloc();
      *(void *)&__dst[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412546;
      char v100 = v11;
      id v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v34;

      *(_WORD *)(v37 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&__src[0] = sub_1000F7290(v98, (unint64_t)v9, (uint64_t *)__dst);
      uint64_t v11 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%@] Subscription info exists for accountID: %{public}s. Clearing default.", (uint8_t *)v37, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    uint64_t v40 = self;
    sub_1003F2074(v40, 0, v11);

    return 0;
  }
  uint64_t v12 = self;
  id v13 = sub_1003F1F68(v12, v11);
  if (!v13
    || (long long v14 = v13,
        uint64_t v96 = v12,
        uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v14,
        unint64_t v16 = sub_100035944(v15),
        swift_bridgeObjectRelease(),
        !v16))
  {
    swift_bridgeObjectRelease();
LABEL_24:

    goto LABEL_25;
  }
  uint64_t v97 = v7;
  id v17 = a2;
  swift_bridgeObjectRetain_n();
  id v18 = v17;
  NSString v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  uint64_t v99 = v11;
  unint64_t v95 = (unint64_t)v9;
  Swift::String v94 = v18;
  if (os_log_type_enabled(v19, v20))
  {
    os_log_type_t typea = v20;
    unint64_t v21 = (unint64_t)v9;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v89 = (void *)swift_slowAlloc();
    *(void *)&__dst[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 138412546;
    id v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v89 = v18;

    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)&__src[0] = sub_1000F7290(v7, v21, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v19, typea, "[%@] Migrating subscription info for account: %{public}s", (uint8_t *)v22, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v42 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&__dst[0] = 0;
  id v44 = [v42 dataWithJSONObject:isa options:0 error:__dst];

  id v45 = *(id *)&__dst[0];
  if (v44)
  {
    uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v48 = v47;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_10004C6F0();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    sub_10001EC80(v46, v48);
    char v50 = BYTE8(__dst[0]);
    os_log_t log = *(os_log_t *)&__dst[1];
    *(void *)os_log_type_t type = *(void *)&__dst[0];
    char v51 = BYTE8(__dst[1]);
    long long v52 = __dst[2];
    uint64_t v90 = *(void *)&__dst[3];
    char v53 = BYTE8(__dst[3]);
    uint64_t v54 = *(void *)&__dst[4];
    char v55 = BYTE8(__dst[4]);
    uint64_t v56 = *(void *)&__dst[5];
    char v57 = BYTE8(__dst[5]);
    uint64_t v58 = *(void *)&__dst[6];
    char v59 = BYTE8(__dst[6]);
    uint64_t v60 = *(void *)&__dst[7];
    char v61 = BYTE8(__dst[7]);
    uint64_t v62 = *(void *)&__dst[8];
    char v63 = BYTE8(__dst[8]);
    uint64_t v64 = *(void *)&__dst[9];
    char v65 = BYTE8(__dst[9]);
    uint64_t v66 = *(void *)&__dst[10];
    char v67 = BYTE8(__dst[10]);
    long long v68 = __dst[11];
    uint64_t v69 = *(void *)&__dst[12];
    char v70 = BYTE8(__dst[12]);
    long long v71 = __dst[13];
    uint64_t v72 = *(void *)&__dst[14];
    char v73 = BYTE8(__dst[14]);
    long long v74 = __dst[15];
    uint64_t v75 = *(void *)&__dst[16];
    char v76 = BYTE8(__dst[16]);
    long long v77 = __dst[17];
    long long v78 = __dst[18];
    uint64_t v79 = *(void *)&__dst[19];
    char v80 = BYTE8(__dst[19]);
    char v81 = BYTE9(__dst[19]);
  }
  else
  {
    uint64_t v49 = v45;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    os_log_t log = 0;
    *(void *)os_log_type_t type = 0;
    uint64_t v90 = 0;
    uint64_t v54 = 0;
    uint64_t v56 = 0;
    uint64_t v58 = 0;
    uint64_t v60 = 0;
    uint64_t v62 = 0;
    uint64_t v64 = 0;
    uint64_t v66 = 0;
    uint64_t v69 = 0;
    uint64_t v72 = 0;
    uint64_t v75 = 0;
    uint64_t v79 = 0;
    long long v52 = 0uLL;
    char v81 = 2;
    char v50 = 1;
    char v51 = 1;
    char v53 = 1;
    char v55 = 1;
    char v57 = 1;
    char v59 = 1;
    char v61 = 1;
    char v63 = 1;
    long long v68 = 0uLL;
    char v65 = 1;
    long long v71 = 0uLL;
    char v67 = 1;
    char v70 = 1;
    long long v74 = 0uLL;
    char v73 = 1;
    long long v77 = 0uLL;
    char v76 = 1;
    long long v78 = 0uLL;
    char v80 = 1;
  }
  *(void *)&__src[0] = *(void *)type;
  BYTE8(__src[0]) = v50;
  *(void *)&__src[1] = log;
  BYTE8(__src[1]) = v51;
  __src[2] = v52;
  *(void *)&__src[3] = v90;
  BYTE8(__src[3]) = v53;
  *(void *)&__src[4] = v54;
  BYTE8(__src[4]) = v55;
  *(void *)&__src[5] = v56;
  BYTE8(__src[5]) = v57;
  *(void *)&__src[6] = v58;
  BYTE8(__src[6]) = v59;
  *(void *)&__src[7] = v60;
  BYTE8(__src[7]) = v61;
  *(void *)&__src[8] = v62;
  BYTE8(__src[8]) = v63;
  *(void *)&__src[9] = v64;
  BYTE8(__src[9]) = v65;
  *(void *)&__src[10] = v66;
  BYTE8(__src[10]) = v67;
  __src[11] = v68;
  *(void *)&__src[12] = v69;
  BYTE8(__src[12]) = v70;
  __src[13] = v71;
  *(void *)&__src[14] = v72;
  BYTE8(__src[14]) = v73;
  __src[15] = v74;
  *(void *)&__src[16] = v75;
  BYTE8(__src[16]) = v76;
  __src[17] = v77;
  __src[18] = v78;
  *(void *)&__src[19] = v79;
  BYTE8(__src[19]) = v80;
  BYTE9(__src[19]) = v81;
  memcpy(__dst, __src, 0x13AuLL);
  char v82 = sub_100048298(__dst, a1, v94);
  sub_10004C3EC((uint64_t)__src);
  unsigned __int8 v101 = v82 & 1;
  uint64_t v11 = v99;
  sub_1003F2074(v96, 0, v99);
  id v83 = v94;
  swift_bridgeObjectRetain();
  char v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v84, v85))
  {
    swift_bridgeObjectRelease_n();

    goto LABEL_24;
  }
  uint64_t v86 = swift_slowAlloc();
  uint64_t v87 = (void *)swift_slowAlloc();
  uint64_t v102 = swift_slowAlloc();
  *(_DWORD *)uint64_t v86 = 138412802;
  id v88 = v83;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  void *v87 = v83;

  *(_WORD *)(v86 + 12) = 2082;
  swift_bridgeObjectRetain();
  sub_1000F7290(v97, v95, &v102);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v86 + 22) = 1024;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl((void *)&_mh_execute_header, v84, v85, "[%@] Migrated subscription info for account: %{public}s result: %{BOOL}d", (uint8_t *)v86, 0x1Cu);
  sub_10001644C((uint64_t *)&unk_1005A3AA0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_25:
  swift_beginAccess();
  return v101;
}

uint64_t sub_100043EF4(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v9 = (char *)v54 - v8;
  char v73 = 0;
  id v66 = a1;
  unint64_t v10 = sub_100047460(a1);
  uint64_t v11 = *(void *)(v10 + 64);
  unint64_t v67 = v10 + 64;
  unint64_t v72 = v10;
  uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  v54[1] = v1;
  uint64_t v64 = v1 + OBJC_IVAR____TtC9appstored29KatanaSubscriptionCoordinator_logger;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t result = swift_beginAccess();
  int64_t v16 = 0;
  unint64_t v17 = v12 + 63;
  id v18 = v9;
  int64_t v68 = v17 >> 6;
  char v63 = (void (**)(char *, uint64_t))(v4 + 8);
  *(void *)&long long v19 = 138413058;
  long long v57 = v19;
  uint64_t v56 = (char *)&type metadata for Any + 8;
  *(void *)&long long v19 = 138412802;
  long long v55 = v19;
  char v59 = v7;
  uint64_t v60 = v3;
  uint64_t v62 = v9;
  unint64_t v65 = v10;
  while (v14)
  {
    unint64_t v21 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v22 = v21 | (v16 << 6);
LABEL_23:
    if ((*(unsigned char *)(*(void *)(v10 + 56) + 320 * v22 + 312) & 1) == 0)
    {
      uint64_t v69 = v16;
      id v26 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v22);
      uint64_t v28 = *v26;
      unint64_t v27 = v26[1];
      swift_bridgeObjectRetain();
      Date.init(timeIntervalSince1970:)();
      Date.init()();
      Date.timeIntervalSince1970.getter();
      double v30 = v29;
      Date.timeIntervalSince1970.getter();
      double v32 = v30 - v31;
      if (v32 <= 2678400.0)
      {
        id v47 = v66;
        swift_bridgeObjectRetain();
        id v48 = v47;
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = swift_slowAlloc();
          long long v52 = (void *)swift_slowAlloc();
          v71[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = v55;
          *(void *)(v51 + 4) = v48;
          *long long v52 = v66;

          *(_WORD *)(v51 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v51 + 14) = sub_1000F7290(v28, v27, v71);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v51 + 22) = 2050;
          *(double *)(v51 + 24) = v32;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] Not clearing subscriptionInfo for accountID: %{public}s age: %{public}f", (uint8_t *)v51, 0x20u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          uint64_t v7 = v59;
          swift_slowDealloc();
          swift_arrayDestroy();
          uint64_t v3 = v60;
          swift_slowDealloc();
          id v18 = v62;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }

        os_log_type_t v20 = *v63;
        (*v63)(v7, v3);
      }
      else
      {
        uint64_t v33 = v72;
        swift_bridgeObjectRetain_n();
        uint64_t v61 = v28;
        unint64_t v34 = sub_100049A4C(v28, v27);
        int v36 = v35;
        swift_bridgeObjectRelease();
        if (v36)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v70 = v33;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1000D35D4();
            uint64_t v33 = v70;
          }
          swift_bridgeObjectRelease();
          memcpy(v71, (const void *)(*(void *)(v33 + 56) + 320 * v34), 0x13AuLL);
          sub_1000B30AC(v34, v33);
          swift_bridgeObjectRelease();
          sub_10004C3EC((uint64_t)v71);
        }
        unint64_t v72 = v33;
        swift_bridgeObjectRelease();
        char v73 = 1;
        id v38 = v66;
        id v39 = v66;
        swift_bridgeObjectRetain();
        id v40 = v39;
        unsigned __int8 v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = swift_slowAlloc();
          int v58 = v36;
          id v44 = v38;
          uint64_t v45 = v43;
          uint64_t v46 = (void *)swift_slowAlloc();
          v71[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = v57;
          *(void *)(v45 + 4) = v40;
          *uint64_t v46 = v44;

          *(_WORD *)(v45 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v45 + 14) = sub_1000F7290(v61, v27, v71);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v45 + 22) = 1026;
          *(_DWORD *)(v45 + 24) = (v58 & 1) == 0;
          *(_WORD *)(v45 + 2_Block_object_dispose(&a9, 8) = 2050;
          *(double *)(v45 + 30) = v32;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "[%@] Cleared subscriptionInfo for accountID: %{public}s result: %{BOOL,public}d age: %{public}f", (uint8_t *)v45, 0x26u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          uint64_t v7 = v59;
          swift_slowDealloc();
          swift_arrayDestroy();
          uint64_t v3 = v60;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }

        os_log_type_t v20 = *v63;
        (*v63)(v7, v3);
        id v18 = v62;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v18, v3);
      unint64_t v10 = v65;
      int64_t v16 = v69;
    }
  }
  int64_t v23 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v23 >= v68) {
    goto LABEL_35;
  }
  unint64_t v24 = *(void *)(v67 + 8 * v23);
  ++v16;
  if (v24) {
    goto LABEL_22;
  }
  int64_t v16 = v23 + 1;
  if (v23 + 1 >= v68) {
    goto LABEL_35;
  }
  unint64_t v24 = *(void *)(v67 + 8 * v16);
  if (v24) {
    goto LABEL_22;
  }
  int64_t v16 = v23 + 2;
  if (v23 + 2 >= v68) {
    goto LABEL_35;
  }
  unint64_t v24 = *(void *)(v67 + 8 * v16);
  if (v24)
  {
LABEL_22:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v16 << 6);
    goto LABEL_23;
  }
  int64_t v25 = v23 + 3;
  if (v25 < v68)
  {
    unint64_t v24 = *(void *)(v67 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        int64_t v16 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_40;
        }
        if (v16 >= v68) {
          goto LABEL_35;
        }
        unint64_t v24 = *(void *)(v67 + 8 * v16);
        ++v25;
        if (v24) {
          goto LABEL_22;
        }
      }
    }
    int64_t v16 = v25;
    goto LABEL_22;
  }
LABEL_35:
  swift_release();
  swift_beginAccess();
  if (v73 == 1)
  {
    swift_beginAccess();
    char v53 = sub_100048528(v72, (uint64_t)v66);
  }
  else
  {
    char v53 = 0;
  }
  swift_bridgeObjectRelease();
  return v53 & 1;
}

uint64_t sub_1000446E0(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  memcpy(v38, v1, 0x13AuLL);
  sub_10004C84C();
  uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v24 = v23;
  swift_release();
  int64_t v25 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v38[0] = 0;
  id v27 = [v25 JSONObjectWithData:isa options:0 error:v38];

  if (v27)
  {
    id v28 = *(id *)&v38[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001644C(&qword_1005A5E50);
    if (swift_dynamicCast())
    {
      uint64_t v37 = v36;
      sub_1000B29CC(0xD000000000000015, 0x800000010044C380, v38);
      sub_100016714((uint64_t)v38, &qword_1005A5660);
      sub_10001EC80(v22, v24);
      return v37;
    }
    sub_10001EC80(v22, v24);
  }
  else
  {
    id v30 = *(id *)&v38[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10001EC80(v22, v24);
    static Logger.arcade.getter();
    id v7 = a1;
    swift_errorRetain();
    id v8 = v7;
    char v9 = v6;
    id v10 = v8;
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      int v35 = v9;
      uint64_t v14 = v13;
      uint64_t v15 = swift_slowAlloc();
      os_log_t v31 = v11;
      int64_t v16 = (void *)v15;
      uint64_t v32 = swift_slowAlloc();
      *(void *)&v38[0] = v32;
      *(_DWORD *)uint64_t v14 = 138412546;
      uint64_t v37 = (uint64_t)v10;
      uint64_t v34 = v3;
      id v17 = v10;
      uint64_t v33 = v4;
      id v18 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v16 = v10;

      *(_WORD *)(v14 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      uint64_t v37 = sub_1000F7290(v19, v20, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v21 = v31;
      _os_log_impl((void *)&_mh_execute_header, v31, v12, "[%@] Error serializing property list: %{public}s", (uint8_t *)v14, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v34);
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
  }
  return 0;
}

uint64_t sub_100044FDC(void *a1, id a2, void *a3)
{
  id v6 = objc_msgSend(a2, "ams_DSID");
  if (!v6)
  {
    id v17 = a3;
    id v18 = a2;
    id v19 = v17;
    id v20 = v18;
    os_log_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      unint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138412547;
      id v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v24 = v19;

      *(_WORD *)(v23 + 12) = 2113;
      __dst[0] = (uint64_t)v20;
      id v26 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v24[1] = v20;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%@] Updating cached subscription info failed to find DSID for account: %{private}@", (uint8_t *)v23, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_11;
  }
  id v7 = v6;
  id v8 = [v6 stringValue];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  id v12 = a3;
  swift_bridgeObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    double v29 = (void *)swift_slowAlloc();
    __dst[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138412546;
    id v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *double v29 = v12;

    *(_WORD *)(v15 + 12) = 2082;
    swift_bridgeObjectRetain();
    __src[0] = sub_1000F7290(v9, v11, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%@] Updating cached subscription info for account: %{public}s", (uint8_t *)v15, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  sub_1000454C8(a1, a2, v12, (uint64_t)v30);
  sub_100030134((uint64_t)v30, (uint64_t)__src, &qword_1005A4268);
  if (sub_10004CB30((uint64_t)__src) == 1)
  {
LABEL_11:
    char v27 = 0;
    return v27 & 1;
  }
  memcpy(__dst, __src, 0x13AuLL);
  char v27 = sub_100048298(__dst, a2, v12);
  sub_10004CA0C((uint64_t)v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10004CAA8);
  return v27 & 1;
}

void sub_1000454C8(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v176 = a2;
  uint64_t v177 = a4;
  uint64_t v7 = type metadata accessor for Calendar.Component();
  id v8 = *(void **)(v7 - 8);
  uint64_t v179 = v7;
  v180 = v8;
  __chkstk_darwin(v7);
  uint64_t v178 = (char *)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v151 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v168 = (char *)&v151 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v167 = (char *)&v151 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v174 = (char *)&v151 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v169 = (char *)&v151 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v24 = (char *)&v151 - v23;
  __chkstk_darwin(v22);
  id v26 = (char *)&v151 - v25;
  uint64_t v27 = type metadata accessor for Date();
  id v181 = *(char **)(v27 - 8);
  uint64_t v28 = __chkstk_darwin(v27);
  unint64_t v166 = (char *)&v151 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v151 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  id v163 = (char *)&v151 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  unint64_t v173 = (char *)&v151 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v164 = (char *)&v151 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  __chkstk_darwin(v39);
  os_log_type_t v42 = (char *)&v151 - v41;
  if (!a1)
  {
    sub_100047B2C(v176, a3, (uint64_t)v195);
    sub_100030134((uint64_t)v195, (uint64_t)v194, &qword_1005A4268);
    sub_100030134((uint64_t)v195, (uint64_t)v196, &qword_1005A4268);
    if (sub_10004CB30((uint64_t)v196) == 1)
    {
      uint64_t v51 = v194;
    }
    else
    {
      id v181 = (char *)&v192[16] + 8;
      memcpy(v197, v196, 0x13AuLL);
      uint64_t v84 = v197[0];
      LODWORD(v167) = LOBYTE(v197[1]);
      char v85 = v197[3];
      unint64_t v165 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v197[4];
      unint64_t v166 = (char *)v197[2];
      uint64_t v86 = v197[5];
      uint64_t v164 = (char *)v197[6];
      LODWORD(v163) = LOBYTE(v197[7]);
      uint64_t v162 = v197[8];
      LODWORD(v161) = LOBYTE(v197[9]);
      unint64_t v160 = v197[10];
      LODWORD(v159) = LOBYTE(v197[11]);
      uint64_t v158 = (void (*)(char *, void, uint64_t))v197[12];
      LODWORD(v157) = LOBYTE(v197[13]);
      uint64_t v156 = v197[14];
      LODWORD(v155) = LOBYTE(v197[15]);
      uint64_t v154 = v197[16];
      unsigned int v153 = LOBYTE(v197[17]);
      uint64_t v179 = v197[20];
      LODWORD(v17_Block_object_dispose(&a9, 8) = LOBYTE(v197[21]);
      uint64_t v87 = v197[23];
      uint64_t v175 = v197[24];
      uint64_t v176 = (void *)v197[22];
      LODWORD(v174) = LOBYTE(v197[25]);
      uint64_t v88 = v197[27];
      unint64_t v172 = (void *)v197[28];
      unint64_t v173 = (char *)v197[26];
      LODWORD(v171) = LOBYTE(v197[29]);
      LODWORD(v170) = LOBYTE(v197[33]);
      LODWORD(v180) = LOBYTE(v197[39]);
      uint64_t v89 = v197[30];
      uint64_t v90 = v197[31];
      uint64_t v91 = v197[32];
      uint64_t v152 = v197[36];
      uint64_t v92 = v197[37];
      uint64_t v168 = (char *)v197[38];
      LODWORD(v169) = BYTE1(v197[39]);
      sub_100030134((uint64_t)&v197[34], (uint64_t)v198, &qword_1005A4278);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10004CBA8((uint64_t)v198);
      *(void *)&v192[0] = v84;
      BYTE8(v192[0]) = (_BYTE)v167;
      *(void *)&v192[1] = v166;
      BYTE8(v192[1]) = v85;
      *(void *)&v192[2] = v165;
      *((void *)&v192[2] + 1) = v86;
      *(void *)&v192[3] = v164;
      BYTE8(v192[3]) = (_BYTE)v163;
      *(void *)&v192[4] = v162;
      BYTE8(v192[4]) = v161;
      *(void *)&v192[5] = v160;
      BYTE8(v192[5]) = v159;
      *(void *)&v192[6] = v158;
      BYTE8(v192[6]) = (_BYTE)v157;
      *(void *)&v192[7] = v156;
      BYTE8(v192[7]) = v155;
      *(void *)&v192[8] = v154;
      BYTE8(v192[8]) = v153;
      *(void *)&v192[9] = 0;
      BYTE8(v192[9]) = 1;
      *(void *)&v192[10] = v179;
      BYTE8(v192[10]) = (_BYTE)v178;
      *(void *)&v192[11] = v176;
      *((void *)&v192[11] + 1) = v87;
      *(void *)&v192[12] = v175;
      BYTE8(v192[12]) = (_BYTE)v174;
      *(void *)&v192[13] = v173;
      *((void *)&v192[13] + 1) = v88;
      *(void *)&v192[14] = v172;
      BYTE8(v192[14]) = v171;
      *(void *)&v192[15] = v89;
      *((void *)&v192[15] + 1) = v90;
      *(void *)&v192[16] = v91;
      uint64_t v93 = v181;
      char *v181 = (char)v170;
      v192[17] = xmmword_100488B20;
      *(void *)&v192[18] = v152;
      *((void *)&v192[18] + 1) = v92;
      *(void *)&v192[19] = v168;
      v93[48] = (char)v180;
      BYTE9(v192[19]) = (_BYTE)v169;
      sub_10004C464((uint64_t)v192);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10004C3EC((uint64_t)v192);
      memcpy(v193, v192, 0x13AuLL);
      nullsub_24(v193);
      uint64_t v51 = v193;
    }
    goto LABEL_68;
  }
  uint64_t v154 = v40;
  unint64_t v172 = a3;
  uint64_t v162 = v4;
  v198[0] = 1;
  char v191 = 1;
  unsigned __int8 v190 = 1;
  char v189 = 1;
  char v188 = 1;
  char v187 = 1;
  char v186 = 1;
  char v185 = 1;
  unsigned __int8 v184 = 1;
  char v183 = 1;
  char v182 = 1;
  id v43 = a1;
  LODWORD(v156) = [v43 autoRenewEnabled];
  v193[0] = 0;
  id v44 = [v43 chargeStoreFrontID];
  uint64_t v176 = (void *)Int.init(truncating:)();

  LOBYTE(v192[0]) = 0;
  id v45 = [v43 expiryDate];
  uint64_t v161 = (uint64_t)v13;
  id v151 = v32;
  if (v45)
  {
    uint64_t v46 = v45;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v47 = v181;
    id v48 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v181 + 7);
    uint64_t v49 = v24;
    uint64_t v50 = 0;
  }
  else
  {
    id v47 = v181;
    id v48 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v181 + 7);
    uint64_t v49 = v24;
    uint64_t v50 = 1;
  }
  unint64_t v165 = v48;
  v48((uint64_t)v49, v50, 1, v27);
  uint64_t v53 = v179;
  long long v52 = v180;
  uint64_t v54 = (void (*)(void))v180[13];
  uint64_t v55 = (uint64_t)v178;
  LODWORD(v159) = enum case for Calendar.Component.month(_:);
  unint64_t v160 = (unint64_t)(v180 + 13);
  uint64_t v158 = (void (*)(char *, void, uint64_t))v54;
  v54(v178);
  sub_10004690C((uint64_t)v24, v55, v26);
  uint64_t v56 = (void (*)(uint64_t, uint64_t))v52[1];
  v180 = v52 + 1;
  uint64_t v157 = v56;
  v56(v55, v53);
  sub_100016714((uint64_t)v24, (uint64_t *)&unk_1005A4E20);
  uint64_t v57 = (uint64_t)(v47 + 48);
  int v58 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v47 + 6);
  if (v58(v26, 1, v27) == 1)
  {
    sub_100016714((uint64_t)v26, (uint64_t *)&unk_1005A4E20);
    uint64_t v59 = 0;
    uint64_t v175 = 0;
  }
  else
  {
    (*((void (**)(char *, char *, uint64_t))v47 + 4))(v42, v26, v27);
    uint64_t v60 = (uint64_t)v169;
    (*((void (**)(char *, char *, uint64_t))v47 + 2))(v169, v42, v27);
    v165(v60, 0, 1, v27);
    uint64_t v175 = sub_10004A658(v60);
    uint64_t v59 = v61;
    sub_100016714(v60, (uint64_t *)&unk_1005A4E20);
    (*((void (**)(char *, uint64_t))v47 + 1))(v42, v27);
    swift_bridgeObjectRelease();
  }
  uint64_t v62 = v172;
  uint64_t v63 = (uint64_t)v174;
  id v64 = objc_msgSend(v43, "initialPurchaseTimestamp", v151);
  uint64_t v155 = v59;
  id v170 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v58;
  uint64_t v171 = v57;
  if (v64)
  {
    unint64_t v65 = v64;
    Int.init(truncating:)();
    uint64_t v66 = v154;
    Date.init(timeIntervalSince1970:)();
    sub_100046D88(v66, v62, v63);
    unsigned int v67 = v58((char *)v63, 1, v27);
    uint64_t v68 = v27;
    uint64_t v69 = v181;
    if (v67 == 1)
    {
      (*((void (**)(uint64_t, uint64_t))v181 + 1))(v66, v68);

      sub_100016714(v63, (uint64_t *)&unk_1005A4E20);
      uint64_t v174 = 0;
      uint64_t v70 = v69;
      uint64_t v27 = v68;
    }
    else
    {
      (*((void (**)(char *, uint64_t, uint64_t))v181 + 4))(v164, v63, v68);
      Date.timeIntervalSince1970.getter();
      double v72 = v71;

      double v73 = v72 * 1000.0;
      if ((~COERCE__INT64(v72 * 1000.0) & 0x7FF0000000000000) == 0)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      if (v73 <= -9.22337204e18)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      if (v73 >= 9.22337204e18)
      {
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
      uint64_t v70 = v69;
      uint64_t v27 = v68;
      uint64_t v174 = (char *)(uint64_t)v73;
      long long v74 = (void (*)(char *, uint64_t))*((void *)v70 + 1);
      v74(v164, v68);
      v74((char *)v154, v68);
      unsigned __int8 v190 = 0;
    }
  }
  else
  {
    uint64_t v174 = 0;
    uint64_t v70 = v181;
  }
  LODWORD(v164) = [v43 isInGracePeriod];
  char v189 = 0;
  LODWORD(v154) = [v43 isOfferPeriod];
  char v188 = 0;
  LODWORD(v152) = [v43 isPurchaser];
  char v187 = 0;
  unsigned int v153 = [v43 isTrialPeriod];
  char v185 = 0;
  id v75 = [v43 vendorAdHocOfferID];
  char v76 = v168;
  if (v75)
  {

    id v77 = [v43 vendorAdHocOfferID];
    if (v77)
    {
      long long v78 = v77;
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v81 = v80;
    }
    else
    {
      uint64_t v79 = 0;
      char v81 = 0;
    }
    uint64_t v82 = (uint64_t)v167;
    uint64_t v83 = (uint64_t)v173;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v79 = 0;
    char v81 = 0;
    uint64_t v82 = (uint64_t)v167;
    uint64_t v83 = (uint64_t)v173;
  }
  id v94 = [v43 serviceBeginsTimestamp];
  if (!v94) {
    goto LABEL_28;
  }
  unint64_t v95 = v94;
  Int.init(truncating:)();
  Date.init(timeIntervalSince1970:)();
  sub_100046D88(v83, v172, v82);
  if (v170(v82, 1, v27) == 1)
  {
    (*((void (**)(uint64_t, uint64_t))v70 + 1))(v83, v27);

    sub_100016714(v82, (uint64_t *)&unk_1005A4E20);
LABEL_28:
    unint64_t v172 = 0;
    goto LABEL_33;
  }
  (*((void (**)(char *, uint64_t, uint64_t))v70 + 4))(v163, v82, v27);
  Date.timeIntervalSince1970.getter();
  double v97 = v96;

  double v98 = v97 * 1000.0;
  if ((~COERCE__INT64(v97 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v98 <= -9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v98 < 9.22337204e18)
  {
    unint64_t v172 = (void *)(uint64_t)v98;
    uint64_t v99 = (void (*)(char *, uint64_t))*((void *)v70 + 1);
    v99(v163, v27);
    v99(v173, v27);
    unsigned __int8 v184 = 0;
LABEL_33:
    unint64_t v173 = (char *)v79;
    id v100 = [v43 startDate];
    unsigned __int8 v101 = v165;
    uint64_t v167 = v81;
    if (v100)
    {
      uint64_t v102 = v100;
      uint64_t v103 = v161;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v104 = 0;
    }
    else
    {
      uint64_t v104 = 1;
      uint64_t v103 = v161;
    }
    v101(v103, v104, 1, v27);
    uint64_t v106 = (uint64_t)v178;
    uint64_t v105 = v179;
    v158(v178, v159, v179);
    sub_10004690C(v103, v106, v76);
    v157(v106, v105);
    sub_100016714(v103, (uint64_t *)&unk_1005A4E20);
    if (v170((uint64_t)v76, 1, v27) == 1)
    {
      sub_100016714((uint64_t)v76, (uint64_t *)&unk_1005A4E20);
      id v170 = 0;
      id v163 = 0;
    }
    else
    {
      uint64_t v107 = v151;
      (*((void (**)(char *, char *, uint64_t))v70 + 4))(v151, v76, v27);
      uint64_t v108 = (uint64_t)v169;
      (*((void (**)(char *, char *, uint64_t))v70 + 2))(v169, v107, v27);
      v101(v108, 0, 1, v27);
      id v170 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_10004A658(v108);
      id v163 = v109;
      sub_100016714(v108, (uint64_t *)&unk_1005A4E20);
      (*((void (**)(char *, uint64_t))v70 + 1))(v107, v27);
      swift_bridgeObjectRelease();
    }
    id v110 = [v43 inAppAdamID];
    v180 = [v110 longLongValue];

    char v183 = 0;
    id v111 = [v43 featureAccessTypeID];
    uint64_t v169 = (char *)(v111
                 && (unint64_t v112 = v111, v113 = [v111 integerValue], v112, (uint64_t)v113 > 0));
    uint64_t v114 = 1819047278;
    char v182 = 0;
    id v115 = [v43 freeTrialPeriodID];
    if (v115)
    {
      uint64_t v116 = v115;
      id v117 = [v115 integerValue];

      if ((uint64_t)v117 > 0) {
        uint64_t v114 = 21574;
      }
      uint64_t v179 = v114;
      if ((uint64_t)v117 <= 0) {
        unint64_t v118 = 0xE400000000000000;
      }
      else {
        unint64_t v118 = 0xE200000000000000;
      }
    }
    else
    {
      uint64_t v179 = 1819047278;
      unint64_t v118 = 0xE400000000000000;
    }
    uint64_t v119 = v162;
    unint64_t v165 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v118;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unsigned int v120 = [v43 isTrialPeriod];
    uint64_t v121 = 1684627792;
    if (v120) {
      uint64_t v121 = 0x6169725465657266;
    }
    uint64_t v178 = (char *)v121;
    if (v120) {
      unint64_t v122 = 0xE90000000000006CLL;
    }
    else {
      unint64_t v122 = 0xE400000000000000;
    }
    uint64_t v168 = (char *)v122;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v123 = [v43 subscriptionBundleID];
    id v124 = [v123 integerValue];

    if (v124)
    {
      uint64_t v171 = 0x6E4F20656C707041;
      unint64_t v125 = 0xE900000000000065;
    }
    else
    {
      unint64_t v125 = 0xEA0000000000656ELL;
      id v126 = [v43 promoScenarioID];
      if (v126)
      {
        BOOL v127 = v126;
        uint64_t v128 = 0x6F6C61646E617453;
        id v129 = [v126 longLongValue];

        char v130 = sub_1000E4E04(v129, *(void *)(v119+ OBJC_IVAR____TtC9appstored29KatanaSubscriptionCoordinator_hardwareBundlePromoScenarios));
        if (v130) {
          uint64_t v128 = 0x6572617764726148;
        }
        uint64_t v171 = v128;
        if (v130) {
          unint64_t v125 = 0xEF656C646E754220;
        }
      }
      else
      {
        uint64_t v171 = 0x6F6C61646E617453;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v186 = 0;
    uint64_t v131 = v166;
    Date.init()();
    Date.timeIntervalSince1970.getter();
    double v133 = v132;

    double v134 = v133 * 1000.0;
    if ((~COERCE__INT64(v133 * 1000.0) & 0x7FF0000000000000) != 0)
    {
      if (v134 > -9.22337204e18)
      {
        if (v134 < 9.22337204e18)
        {
          uint64_t v135 = v156;
          uint64_t v136 = v164;
          uint64_t v137 = v154;
          uint64_t v159 = v164;
          unint64_t v160 = v154;
          uint64_t v138 = v152;
          uint64_t v161 = v152;
          uint64_t v162 = v156;
          uint64_t v164 = (char *)&v196[33];
          uint64_t v139 = v27;
          uint64_t v140 = (uint64_t)v134;
          uint64_t v141 = (void (*)(char *, uint64_t))*((void *)v181 + 1);
          uint64_t v142 = v153;
          uint64_t v158 = (void (*)(char *, void, uint64_t))v153;
          v141(v131, v139);
          LODWORD(v181) = v190;
          LODWORD(v166) = v184;
          v194[0] = v135;
          LOBYTE(v194[1]) = 0;
          v194[2] = v176;
          LOBYTE(v194[3]) = 0;
          v194[4] = v175;
          unint64_t v143 = v125;
          uint64_t v144 = v155;
          v194[5] = v155;
          v194[6] = 0;
          LOBYTE(v194[7]) = 1;
          v194[8] = 0;
          LOBYTE(v194[9]) = 1;
          id v145 = v163;
          v194[10] = v174;
          LOBYTE(v194[11]) = v190;
          v194[12] = v136;
          LOBYTE(v194[13]) = 0;
          v194[14] = v137;
          LOBYTE(v194[15]) = 0;
          v194[16] = v138;
          LOBYTE(v194[17]) = 0;
          v194[18] = 1;
          LOBYTE(v194[19]) = 0;
          v194[20] = v142;
          LOBYTE(v194[21]) = 0;
          v194[22] = v173;
          char v147 = v167;
          long long v146 = v168;
          v194[23] = v167;
          v194[24] = v172;
          LOBYTE(v194[25]) = v184;
          id v148 = v169;
          v194[26] = v170;
          v194[27] = v163;
          v194[28] = v180;
          LOBYTE(v194[29]) = 0;
          v194[30] = v179;
          id v149 = v165;
          v194[31] = v165;
          LOBYTE(v194[33]) = 0;
          v194[32] = v169;
          v194[34] = v178;
          v194[35] = v168;
          v194[36] = v171;
          v194[37] = v143;
          v194[38] = v140;
          LOWORD(v194[39]) = 256;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_10004C464((uint64_t)v194);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          memcpy(v195, v194, 0x13AuLL);
          nullsub_24(v195);
          v196[0] = v162;
          LOBYTE(v196[1]) = v193[0];
          v196[2] = v176;
          LOBYTE(v196[3]) = v192[0];
          v196[4] = v175;
          v196[5] = v144;
          LOBYTE(v196[7]) = v198[0];
          LOBYTE(v196[9]) = v191;
          v196[10] = v174;
          LOBYTE(v196[11]) = (_BYTE)v181;
          v196[12] = v159;
          LOBYTE(v196[13]) = v189;
          v196[14] = v160;
          LOBYTE(v196[15]) = v188;
          v196[16] = v161;
          LOBYTE(v196[17]) = v187;
          LOBYTE(v196[19]) = v186;
          v196[20] = v158;
          LOBYTE(v196[21]) = v185;
          v196[22] = v173;
          v196[23] = v147;
          v196[24] = v172;
          LOBYTE(v196[25]) = (_BYTE)v166;
          v196[26] = v170;
          v196[27] = v145;
          v196[28] = v180;
          LOBYTE(v196[29]) = v183;
          v196[30] = v179;
          v196[31] = v149;
          id v150 = v164;
          *uint64_t v164 = v182;
          v196[32] = v148;
          v196[34] = v178;
          v196[35] = v146;
          v196[36] = v171;
          v196[37] = v143;
          v196[38] = v140;
          v150[48] = 0;
          v196[18] = 1;
          BYTE1(v196[39]) = 1;
          v196[6] = 0;
          v196[8] = 0;
          sub_10004C3EC((uint64_t)v196);
          uint64_t v51 = v195;
LABEL_68:
          sub_100030134((uint64_t)v51, (uint64_t)v199, &qword_1005A4268);
          sub_100030134((uint64_t)v199, v177, &qword_1005A4268);
          return;
        }
        goto LABEL_71;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
LABEL_77:
  __break(1u);
}

uint64_t sub_10004690C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v5 = type metadata accessor for DateComponents();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Calendar.Identifier();
  uint64_t v7 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v31 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016588(a1, (uint64_t)v17, (uint64_t *)&unk_1005A4E20);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v22((uint64_t)v17, 1, v18) == 1)
  {
    sub_100016714((uint64_t)v17, (uint64_t *)&unk_1005A4E20);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, 1, 1, v18);
  }
  else
  {
    uint64_t v30 = a3;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v29(v21, v17, v18);
    uint64_t v24 = v32;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Calendar.Identifier.gregorian(_:), v32);
    Calendar.init(identifier:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
    sub_10004A334(v35);
    uint64_t v25 = v36;
    Calendar.dateComponents(_:from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = (uint64_t)v31;
    Calendar.date(from:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v38);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    uint64_t v27 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    if (v22(v26, 1, v18) == 1)
    {
      sub_100016714(v26, (uint64_t *)&unk_1005A4E20);
      return (*v27)((uint64_t)v30, 1, 1, v18);
    }
    else
    {
      uint64_t v28 = v30;
      v29(v30, (char *)v26, v18);
      return (*v27)((uint64_t)v28, 0, 1, v18);
    }
  }
}

uint64_t sub_100046D88@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v50 = a2;
  uint64_t v54 = a1;
  uint64_t v55 = a3;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  uint64_t v56 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Calendar.Component();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  uint64_t v58 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = type metadata accessor for Calendar.Identifier();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Calendar();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for Calendar.Identifier.gregorian(_:), v15);
  Calendar.init(identifier:)();
  uint64_t v23 = v18;
  uint64_t v24 = v54;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
  Date.init()();
  v60[1] = 0;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Calendar.Component.weekOfMonth(_:), v5);
  LOBYTE(v15) = Calendar.dateInterval(of:start:interval:for:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v15)
  {
    uint64_t v25 = v55;
    Calendar.startOfDay(for:)();
    uint64_t v27 = v57;
    uint64_t v26 = v58;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v57);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    uint64_t v28 = 0;
    uint64_t v29 = v25;
  }
  else
  {
    uint64_t v48 = v20;
    uint64_t v49 = v19;
    static Logger.arcade.getter();
    uint64_t v27 = v57;
    uint64_t v26 = v58;
    uint64_t v30 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v53, v24, v57);
    id v31 = v50;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v59 = (uint64_t)v31;
      v60[0] = v54;
      *(_DWORD *)uint64_t v35 = 138412546;
      id v37 = v31;
      os_log_t v47 = v32;
      LODWORD(v50) = v34;
      id v38 = v37;
      uint64_t v27 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v31;

      *(_WORD *)(v35 + 12) = 2082;
      sub_10004CBD4((unint64_t *)&qword_1005A4E30, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v39 = v53;
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_1000F7290(v40, v41, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v42 = *(void (**)(char *, uint64_t))(v58 + 8);
      v42(v39, v27);
      os_log_t v43 = v47;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v50, "[%@] Failed to deres date: %{public}s", (uint8_t *)v35, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      uint64_t v28 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v51 + 8))(v56, v52);
      v42(v14, v27);
      uint64_t v26 = v58;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v22, v49);
    }
    else
    {

      id v44 = *(void (**)(char *, uint64_t))(v26 + 8);
      v44(v30, v27);

      (*(void (**)(char *, uint64_t))(v51 + 8))(v56, v52);
      v44(v14, v27);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v22, v49);
      uint64_t v28 = 1;
    }
    uint64_t v29 = v55;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v29, v28, 1, v27);
}

unint64_t sub_100047460(void *a1)
{
  uint64_t v36 = type metadata accessor for URL.DirectoryHint();
  uint64_t v38 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  id v37 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10001644C((uint64_t *)&unk_1005A5670);
  __chkstk_darwin(v4 - 8);
  int v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v40 - 8);
  uint64_t v7 = __chkstk_darwin(v40);
  uint64_t v35 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v39 = (char *)v33 - v9;
  uint64_t v10 = v1 + OBJC_IVAR____TtC9appstored29KatanaSubscriptionCoordinator_logger;
  id v11 = a1;
  v33[1] = v10;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  v33[0] = v11;
  uint64_t v41 = v6;
  if (v14)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138412290;
    unint64_t v42 = (unint64_t)v11;
    id v17 = v11;
    uint64_t v6 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@] Loading all subscription info", v15, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  self;
  id v18 = sub_1002C90FC();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v34, 1, 1, v40);
  uint64_t v19 = enum case for URL.DirectoryHint.inferFromPath(_:);
  uint64_t v21 = v37;
  uint64_t v20 = v38;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 104);
  uint64_t v23 = v36;
  v22(v37, enum case for URL.DirectoryHint.inferFromPath(_:), v36);
  uint64_t v24 = v35;
  URL.init(filePath:directoryHint:relativeTo:)();
  unint64_t v42 = 0xD00000000000001FLL;
  unint64_t v43 = 0x800000010044C320;
  v22(v21, v19, v23);
  sub_1000164E0();
  uint64_t v25 = v39;
  URL.appending<A>(path:directoryHint:)();
  uint64_t v26 = v41;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v23);
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v26 + 8);
  v27(v24, v40);
  uint64_t v28 = Data.init(contentsOf:options:)();
  unint64_t v30 = v29;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10004CB54();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  sub_10001EC80(v28, v30);
  unint64_t v32 = v42;
  v27(v25, v40);
  return v32;
}

uint64_t sub_100047B2C@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = objc_msgSend(a1, "ams_DSID");
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 stringValue];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    id v12 = a2;
    swift_bridgeObjectRetain_n();
    id v13 = v12;
    BOOL v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    uint64_t v44 = a3;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      unint64_t v42 = (void *)swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412546;
      uint64_t v17 = v9;
      id v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v42 = v13;

      uint64_t v9 = v17;
      *(_WORD *)(v16 + 12) = 2082;
      swift_bridgeObjectRetain();
      v47[0] = sub_1000F7290(v17, v11, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%@] Loading subscription info for account: %{public}s", (uint8_t *)v16, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    unint64_t v29 = sub_100047460(v13);
    if (*(void *)(v29 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v30 = sub_100049A4C(v9, v11);
      if ((v31 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10004C948((uint64_t)v48);
        goto LABEL_15;
      }
      unint64_t v32 = (const void *)(*(void *)(v29 + 56) + 320 * v30);
      memcpy(__dst, v32, 0x13AuLL);
      memmove(v48, v32, 0x13AuLL);
      nullsub_24(v48);
      sub_10004C464((uint64_t)__dst);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10004C948((uint64_t)v48);
    }
    swift_bridgeObjectRelease();
LABEL_15:
    sub_100030134((uint64_t)v48, (uint64_t)v47, &qword_1005A4268);
    id v33 = v13;
    sub_10004CA0C((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10004C984);
    id v34 = v33;
    swift_bridgeObjectRetain();
    sub_10004CA0C((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10004C984);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      os_log_t log = v35;
      uint64_t v38 = (void *)swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412802;
      __dst[0] = v34;
      id v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v34;

      *(_WORD *)(v37 + 12) = 2082;
      swift_bridgeObjectRetain();
      __dst[0] = sub_1000F7290(v9, v11, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v37 + 22) = 1024;
      BOOL v40 = sub_10004CB30((uint64_t)v47) == 0;
      sub_10004CA0C((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10004CAA8);
      LODWORD(__dst[0]) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10004CA0C((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10004CAA8);
      _os_log_impl((void *)&_mh_execute_header, log, v36, "[%@] Subscription info loaded for account: %{public}s exists: %{BOOL}d", (uint8_t *)v37, 0x1Cu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10004CA0C((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10004CAA8);
      swift_bridgeObjectRelease_n();

      sub_10004CA0C((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10004CAA8);
    }
    sub_100030134((uint64_t)v47, (uint64_t)v48, &qword_1005A4268);
    a3 = v44;
    return sub_100030134((uint64_t)v48, a3, &qword_1005A4268);
  }
  id v19 = a2;
  id v20 = a1;
  id v21 = v19;
  id v22 = v20;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v45 = a3;
    uint64_t v26 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 138412547;
    id v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v26 = v21;

    *(_WORD *)(v25 + 12) = 2113;
    v48[0] = (uint64_t)v22;
    id v28 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v26[1] = v22;

    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@] Failed to find DSID for account: %{private}@", (uint8_t *)v25, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    a3 = v45;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10004C948((uint64_t)v47);
  sub_100030134((uint64_t)v47, (uint64_t)v48, &qword_1005A4268);
  return sub_100030134((uint64_t)v48, a3, &qword_1005A4268);
}

uint64_t sub_100048298(const void *a1, id a2, void *a3)
{
  id v6 = objc_msgSend(a2, "ams_DSID");
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 stringValue];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    unint64_t v12 = sub_100047460(a3);
    swift_bridgeObjectRetain();
    sub_10004C464((uint64_t)a1);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1000D23CC(a1, v9, v11, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    char v14 = sub_100048528(v12, (uint64_t)a3);
    swift_bridgeObjectRelease();
    return v14 & 1;
  }
  else
  {
    id v16 = a3;
    id v17 = a2;
    id v18 = v16;
    id v19 = v17;
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 138412547;
      id v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v18;

      *(_WORD *)(v22 + 12) = 2113;
      id v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v23[1] = v19;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@] Failed to find DSID for account: %{private}@", (uint8_t *)v22, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
}

uint64_t sub_100048528(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  uint64_t v36 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001644C((uint64_t *)&unk_1005A5670);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t v38 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)&v29 - v15;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  unint64_t v39 = a1;
  sub_10004C8F4();
  uint64_t v34 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v35 = v17;
  uint64_t v30 = v2;
  uint64_t v31 = a2;
  swift_release();
  self;
  id v18 = sub_1002C90FC();
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v20;
  uint64_t v33 = v19;

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v10, 1, 1, v38);
  uint64_t v21 = enum case for URL.DirectoryHint.inferFromPath(_:);
  uint64_t v22 = v36;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 104);
  v23(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
  URL.init(filePath:directoryHint:relativeTo:)();
  unint64_t v39 = 0xD00000000000001FLL;
  unint64_t v40 = 0x800000010044C320;
  v23(v7, v21, v5);
  sub_1000164E0();
  URL.appending<A>(path:directoryHint:)();
  uint64_t v24 = v37;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  swift_bridgeObjectRelease();
  id v25 = *(void (**)(char *, uint64_t))(v24 + 8);
  v25(v14, v38);
  uint64_t v27 = v34;
  unint64_t v26 = v35;
  Data.write(to:options:)();
  v25(v16, v38);
  sub_10001EC80(v27, v26);
  return 1;
}

id sub_100048AA0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KatanaSubscriptionCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100048B58()
{
  return type metadata accessor for KatanaSubscriptionCoordinator();
}

uint64_t type metadata accessor for KatanaSubscriptionCoordinator()
{
  uint64_t result = qword_1005A41B8;
  if (!qword_1005A41B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100048BAC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100048C4C(char a1)
{
  unint64_t result = 0x656E65526F747561;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x6144657269707865;
      break;
    case 3:
    case 17:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x6164417070416E69;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    case 6:
      unint64_t result = 0x5065636172477369;
      break;
    case 7:
      unint64_t result = 0x50726566664F7369;
      break;
    case 8:
      unint64_t result = 0x6168637275507369;
      break;
    case 9:
      unint64_t result = 0x7263736275537369;
      break;
    case 10:
      unint64_t result = 0x506C616972547369;
      break;
    case 11:
      unint64_t result = 0x656449726566666FLL;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    case 13:
      unint64_t result = 0x7461447472617473;
      break;
    case 14:
      unint64_t result = 0xD000000000000012;
      break;
    case 15:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 16:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 18:
      unint64_t result = 0xD000000000000010;
      break;
    case 19:
      unint64_t result = 0xD000000000000015;
      break;
    case 20:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100048EFC()
{
  return sub_100048C4C(*v0);
}

uint64_t sub_100048F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10004A85C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100048F2C(unsigned char *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_100048F38(uint64_t a1)
{
  unint64_t v2 = sub_10004C398();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100048F74(uint64_t a1)
{
  unint64_t v2 = sub_10004C398();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100048FB0(void *a1)
{
  uint64_t v3 = sub_10001644C(&qword_1005A41D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FD00(a1, a1[3]);
  sub_10004C398();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void *sub_100049444@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10004B12C(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x13AuLL);
  }
  return result;
}

uint64_t sub_100049498(void *a1)
{
  return sub_100048FB0(a1);
}

uint64_t sub_1000494B0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C(&qword_1005A4210);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FD00(a1, a1[3]);
  sub_10004C69C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10001644C(&qword_1005A41F0);
  sub_10004C7D0(&qword_1005A4218, (void (*)(void))sub_10004C84C);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100049638()
{
  return 1;
}

Swift::Int sub_100049640()
{
  return Hasher._finalize()();
}

uint64_t sub_100049694()
{
  return String.hash(into:)();
}

Swift::Int sub_1000496AC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000496FC@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100510250, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100049750(void *a1@<X8>)
{
  *a1 = 0x6F666E496C6C61;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_10004976C()
{
  return 0x6F666E496C6C61;
}

uint64_t sub_100049784@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100510288, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void sub_1000497DC(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000497E8(uint64_t a1)
{
  unint64_t v2 = sub_10004C69C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100049824(uint64_t a1)
{
  unint64_t v2 = sub_10004C69C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100049860@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10004C4DC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10004988C(void *a1)
{
  return sub_1000494B0(a1, *v1);
}

void sub_1000498A8()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::String v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)NSDateFormatter) init];
  Locale.init(identifier:)();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setLocale:isa];

  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setDateFormat:v6];

  qword_1005A4178 = (uint64_t)v4;
}

unint64_t sub_100049A08(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100049C90(a1, v4);
}

unint64_t sub_100049A4C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return sub_100049D58(a1, a2, v4);
}

unint64_t sub_100049AC4(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_100049E3C(a1, v2);
}

unint64_t sub_100049B08(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100049ED8(a1, v4);
}

unint64_t sub_100049B4C(void *a1)
{
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    id v2 = a1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v3 = Hasher._finalize()();
  return sub_100049FE4(a1, v3);
}

unint64_t sub_100049BDC(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_10004CBD4(&qword_1005A4248, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  return sub_10004A0C8(a1, v2);
}

unint64_t sub_100049C90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100035E00(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10004C8A0((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100049D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100049E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100049ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10001BE10();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100049FE4(void *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v8 = ~v4;
    do
    {
      id v9 = *(void **)(*(void *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          sub_10001BE10();
          id v10 = v9;
          id v11 = a1;
          char v12 = static NSObject.== infix(_:_:)();

          if (v12) {
            return v5;
          }
        }
      }
      else if (!a1)
      {
        return v5;
      }
      unint64_t v5 = (v5 + 1) & v8;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_10004A0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_10004CBD4(&qword_1005A4248, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10004A224(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10001644C(&qword_1005A4280);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_100049AC4(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    id v10 = (void *)(v3[7] + 16 * result);
    void *v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    BOOL v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100049AC4(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10004A334(uint64_t a1)
{
  v24[1] = a1;
  uint64_t v1 = type metadata accessor for Calendar.Component();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  v24[0] = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)v24 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v24 - v8;
  sub_10001644C(&qword_1005A3C98);
  uint64_t v10 = *(void *)(v2 + 72);
  unint64_t v11 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100488B30;
  uint64_t v25 = v12;
  unint64_t v13 = v12 + v11;
  BOOL v14 = *(void (**)(unint64_t, void, uint64_t))(v2 + 104);
  v14(v12 + v11, enum case for Calendar.Component.year(_:), v1);
  v14(v13 + v10, enum case for Calendar.Component.month(_:), v1);
  v14(v13 + 2 * v10, enum case for Calendar.Component.day(_:), v1);
  v14(v13 + 3 * v10, enum case for Calendar.Component.hour(_:), v1);
  v14(v13 + 4 * v10, enum case for Calendar.Component.minute(_:), v1);
  v14(v13 + 5 * v10, enum case for Calendar.Component.second(_:), v1);
  uint64_t v15 = v10;
  uint64_t result = ((uint64_t (*)(unint64_t, void, uint64_t))v14)(v13 + 6 * v10, enum case for Calendar.Component.nanosecond(_:), v1);
  unint64_t v17 = 0;
  unint64_t v26 = &_swiftEmptySetSingleton;
  id v18 = (void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  uint64_t v19 = (void (**)(char *, uint64_t))(v2 + 8);
  while (v17 < *(void *)(v25 + 16))
  {
    uint64_t v20 = *v18;
    (*v18)(v9, v13, v1);
    uint64_t v21 = (char *)v24[0];
    v20((char *)v24[0], (unint64_t)v9, v1);
    sub_1000BB778((uint64_t)v7, v21);
    uint64_t v22 = *v19;
    (*v19)(v7, v1);
    LOBYTE(v20) = static Calendar.Component.== infix(_:_:)();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v9, v1);
    if ((v20 & 1) == 0)
    {
      v13 += v15;
      if (v17++ != 6) {
        continue;
      }
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v26;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004A658(uint64_t a1)
{
  uint64_t v2 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016588(a1, (uint64_t)v4, (uint64_t *)&unk_1005A4E20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100016714((uint64_t)v4, (uint64_t *)&unk_1005A4E20);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    if (qword_1005A2FE8 != -1) {
      swift_once();
    }
    uint64_t v10 = (void *)qword_1005A4178;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v12 = [v10 stringFromDate:isa];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v9;
}

uint64_t sub_10004A85C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x656E65526F747561 && a2 == 0xE900000000000077
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010044C4C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6144657269707865 && a2 == 0xEA00000000006574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010044C4A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6164417070416E69 && a2 == 0xEB0000000064496DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010044C480 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5065636172477369 && a2 == 0xED0000646F697265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x50726566664F7369 && a2 == 0xED0000646F697265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6168637275507369 && a2 == 0xEB00000000726573 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7263736275537369 && a2 == 0xEC00000072656269 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x506C616972547369 && a2 == 0xED0000646F697265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x656449726566666FLL && a2 == 0xEF7265696669746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000010044C460 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010044C440 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010044C420 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000010044C400 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010044C3E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010044C3C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010044C380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010044C3A0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 20;
    }
    else {
      return 21;
    }
  }
}

void *sub_10004B12C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10001644C(&qword_1005A41C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v190 = 1;
  char v188 = 1;
  char v186 = 1;
  char v184 = 1;
  char v182 = 1;
  char v180 = 1;
  char v178 = 1;
  char v176 = 1;
  char v174 = 1;
  char v172 = 1;
  char v170 = 1;
  char v168 = 1;
  char v166 = 1;
  char v164 = 1;
  uint64_t v9 = a1[3];
  uint64_t v89 = a1;
  sub_10002FD00(a1, v9);
  sub_10004C398();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v107 = v2;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v90 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    uint64_t v97 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v191 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = (uint64_t)v89;
LABEL_4:
    sub_10002E618(v19);
    uint64_t v110 = v18;
    char v111 = v190;
    *(_DWORD *)unint64_t v112 = *(_DWORD *)v189;
    *(_DWORD *)&v112[3] = *(_DWORD *)&v189[3];
    uint64_t v113 = v17;
    char v114 = v188;
    *(_DWORD *)id v115 = *(_DWORD *)v187;
    *(_DWORD *)&v115[3] = *(_DWORD *)&v187[3];
    uint64_t v116 = v16;
    uint64_t v117 = v191;
    uint64_t v118 = v15;
    char v119 = v186;
    *(_DWORD *)unsigned int v120 = *(_DWORD *)v185;
    *(_DWORD *)&v120[3] = *(_DWORD *)&v185[3];
    uint64_t v121 = v14;
    char v122 = v184;
    *(_DWORD *)id v123 = *(_DWORD *)v183;
    *(_DWORD *)&v123[3] = *(_DWORD *)&v183[3];
    uint64_t v124 = v13;
    char v125 = v182;
    *(_DWORD *)&v126[3] = *(_DWORD *)&v181[3];
    *(_DWORD *)id v126 = *(_DWORD *)v181;
    uint64_t v127 = v12;
    char v128 = v180;
    *(_DWORD *)&v129[3] = *(_DWORD *)&v179[3];
    *(_DWORD *)id v129 = *(_DWORD *)v179;
    uint64_t v130 = v11;
    char v131 = v178;
    *(_DWORD *)&v132[3] = *(_DWORD *)&v177[3];
    *(_DWORD *)double v132 = *(_DWORD *)v177;
    uint64_t v133 = v97;
    char v134 = v176;
    *(_DWORD *)&v135[3] = *(_DWORD *)&v175[3];
    *(_DWORD *)uint64_t v135 = *(_DWORD *)v175;
    uint64_t v136 = v106;
    char v137 = v174;
    *(_DWORD *)&v138[3] = *(_DWORD *)&v173[3];
    *(_DWORD *)uint64_t v138 = *(_DWORD *)v173;
    uint64_t v139 = v105;
    char v140 = v172;
    *(_DWORD *)&v141[3] = *(_DWORD *)&v171[3];
    *(_DWORD *)uint64_t v141 = *(_DWORD *)v171;
    uint64_t v142 = v103;
    uint64_t v143 = v104;
    uint64_t v144 = v102;
    char v145 = v170;
    *(_DWORD *)&v146[3] = *(_DWORD *)&v169[3];
    *(_DWORD *)long long v146 = *(_DWORD *)v169;
    uint64_t v147 = v100;
    uint64_t v148 = v101;
    uint64_t v149 = v99;
    char v150 = v168;
    *(_DWORD *)&v151[3] = *(_DWORD *)&v167[3];
    *(_DWORD *)id v151 = *(_DWORD *)v167;
    uint64_t v152 = v96;
    uint64_t v153 = v98;
    uint64_t v154 = v95;
    char v155 = v166;
    *(_DWORD *)uint64_t v156 = *(_DWORD *)v165;
    *(_DWORD *)&v156[3] = *(_DWORD *)&v165[3];
    uint64_t v157 = v94;
    uint64_t v158 = v90;
    uint64_t v159 = v93;
    uint64_t v160 = v91;
    uint64_t v161 = v92;
    char v162 = v164;
    char v163 = 2;
    return (void *)sub_10004C3EC((uint64_t)&v110);
  }
  LOBYTE(v110) = 0;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v22 = v21;
  uint64_t v88 = v10;
  char v190 = v21 & 1;
  LOBYTE(v110) = 1;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v25 = v24;
  uint64_t v87 = v23;
  char v188 = v24 & 1;
  LOBYTE(v110) = 2;
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v86 = v25;
  LOBYTE(v110) = 3;
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v191 = v28;
  uint64_t v85 = v29;
  char v186 = v30 & 1;
  LOBYTE(v110) = 4;
  LODWORD(v2_Block_object_dispose(&a9, 8) = v30;
  uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v83 = v28;
  uint64_t v84 = v31;
  char v184 = v32 & 1;
  LOBYTE(v110) = 5;
  char v33 = v32;
  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v81 = v22;
  uint64_t v82 = v34;
  char v182 = v35 & 1;
  LOBYTE(v110) = 6;
  int v36 = v35;
  uint64_t v80 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v79 = v36;
  char v38 = v37;
  char v180 = v37 & 1;
  LOBYTE(v110) = 7;
  uint64_t v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v78 = v26;
  char v40 = v39;
  char v178 = v39 & 1;
  LOBYTE(v110) = 8;
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v107 = 0;
  id v75 = a2;
  uint64_t v97 = v41;
  char v43 = v42;
  char v176 = v42 & 1;
  LOBYTE(v110) = 9;
  uint64_t v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v107 = 0;
  int v76 = v44;
  char v174 = v44 & 1;
  LOBYTE(v110) = 10;
  uint64_t v105 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v74 = v45;
  uint64_t v107 = 0;
  char v172 = v45 & 1;
  LOBYTE(v110) = 11;
  uint64_t v103 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v104 = v46;
  uint64_t v107 = 0;
  LOBYTE(v110) = 12;
  swift_bridgeObjectRetain();
  uint64_t v47 = v107;
  uint64_t v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v73 = v48;
  uint64_t v107 = v47;
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v90 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
LABEL_16:
    uint64_t v18 = v88;
    uint64_t v19 = (uint64_t)v89;
    uint64_t v17 = v87;
    uint64_t v11 = v77;
    uint64_t v16 = v78;
    uint64_t v14 = v84;
    uint64_t v15 = v85;
    uint64_t v13 = v82;
    uint64_t v12 = v80;
    goto LABEL_4;
  }
  char v170 = v73 & 1;
  LOBYTE(v110) = 13;
  uint64_t v100 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v101 = v49;
  uint64_t v107 = 0;
  LOBYTE(v110) = 14;
  swift_bridgeObjectRetain();
  uint64_t v50 = v107;
  uint64_t v99 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v72 = v51;
  uint64_t v107 = v50;
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v90 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    goto LABEL_16;
  }
  char v168 = v72 & 1;
  LOBYTE(v110) = 15;
  uint64_t v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v98 = v52;
  uint64_t v107 = 0;
  LOBYTE(v110) = 16;
  swift_bridgeObjectRetain();
  uint64_t v53 = v107;
  uint64_t v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v71 = v54;
  uint64_t v107 = v53;
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v90 = 0;
    uint64_t v95 = 0;
    goto LABEL_16;
  }
  char v166 = v71 & 1;
  LOBYTE(v110) = 17;
  uint64_t v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v90 = v55;
  uint64_t v107 = 0;
  LOBYTE(v110) = 18;
  swift_bridgeObjectRetain();
  uint64_t v56 = v107;
  uint64_t v93 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v91 = v57;
  uint64_t v107 = v56;
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    goto LABEL_16;
  }
  LOBYTE(v110) = 19;
  swift_bridgeObjectRetain();
  uint64_t v58 = v107;
  uint64_t v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v107 = v58;
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v92 = 0;
    goto LABEL_16;
  }
  int v69 = v59 & 1;
  char v164 = v59 & 1;
  char v109 = 20;
  int v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v107 = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v108[264] = v71 & 1;
  v108[312] = v69;
  v108[8] = v81 & 1;
  v108[24] = v86 & 1;
  v108[56] = v83 & 1;
  v108[72] = v33 & 1;
  v108[88] = v79 & 1;
  v108[104] = v38 & 1;
  v108[120] = v40 & 1;
  v108[136] = v43 & 1;
  v108[152] = v76 & 1;
  v108[168] = v74 & 1;
  v108[200] = v73 & 1;
  v108[232] = v72 & 1;
  uint64_t v61 = v87;
  uint64_t v60 = v88;
  *(void *)uint64_t v108 = v88;
  *(void *)&v108[16] = v87;
  uint64_t v62 = v191;
  *(void *)&v108[32] = v78;
  *(void *)&v108[40] = v191;
  *(void *)&v108[48] = v85;
  *(void *)&v108[64] = v84;
  *(void *)&v108[80] = v82;
  *(void *)&v108[96] = v80;
  *(void *)&v108[112] = v77;
  uint64_t v63 = v98;
  *(void *)&v108[128] = v97;
  *(void *)&v108[144] = v106;
  uint64_t v64 = v104;
  *(void *)&v108[160] = v105;
  *(void *)&v108[176] = v103;
  *(void *)&v108[184] = v104;
  uint64_t v65 = v101;
  *(void *)&v108[192] = v102;
  *(void *)&v108[208] = v100;
  *(void *)&v108[216] = v101;
  *(void *)&v108[224] = v99;
  *(void *)&v108[240] = v96;
  *(void *)&v108[248] = v98;
  *(void *)&v108[256] = v95;
  *(void *)&v108[272] = v94;
  uint64_t v67 = v90;
  uint64_t v66 = v91;
  *(void *)&v108[280] = v90;
  *(void *)&v108[288] = v93;
  *(void *)&v108[296] = v91;
  *(void *)&v108[304] = v92;
  v108[313] = v70;
  sub_10004C464((uint64_t)v108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002E618((uint64_t)v89);
  uint64_t v110 = v60;
  char v111 = v190;
  *(_DWORD *)unint64_t v112 = *(_DWORD *)v189;
  *(_DWORD *)&v112[3] = *(_DWORD *)&v189[3];
  uint64_t v113 = v61;
  char v114 = v188;
  *(_DWORD *)id v115 = *(_DWORD *)v187;
  *(_DWORD *)&v115[3] = *(_DWORD *)&v187[3];
  uint64_t v116 = v78;
  uint64_t v117 = v62;
  uint64_t v118 = v85;
  char v119 = v186;
  *(_DWORD *)unsigned int v120 = *(_DWORD *)v185;
  *(_DWORD *)&v120[3] = *(_DWORD *)&v185[3];
  uint64_t v121 = v84;
  char v122 = v184;
  *(_DWORD *)id v123 = *(_DWORD *)v183;
  *(_DWORD *)&v123[3] = *(_DWORD *)&v183[3];
  uint64_t v124 = v82;
  char v125 = v182;
  *(_DWORD *)&v126[3] = *(_DWORD *)&v181[3];
  *(_DWORD *)id v126 = *(_DWORD *)v181;
  uint64_t v127 = v80;
  char v128 = v180;
  *(_DWORD *)&v129[3] = *(_DWORD *)&v179[3];
  *(_DWORD *)id v129 = *(_DWORD *)v179;
  uint64_t v130 = v77;
  char v131 = v178;
  *(_DWORD *)&v132[3] = *(_DWORD *)&v177[3];
  *(_DWORD *)double v132 = *(_DWORD *)v177;
  uint64_t v133 = v97;
  char v134 = v176;
  *(_DWORD *)&v135[3] = *(_DWORD *)&v175[3];
  *(_DWORD *)uint64_t v135 = *(_DWORD *)v175;
  uint64_t v136 = v106;
  char v137 = v174;
  *(_DWORD *)&v138[3] = *(_DWORD *)&v173[3];
  *(_DWORD *)uint64_t v138 = *(_DWORD *)v173;
  uint64_t v139 = v105;
  char v140 = v172;
  *(_DWORD *)&v141[3] = *(_DWORD *)&v171[3];
  *(_DWORD *)uint64_t v141 = *(_DWORD *)v171;
  uint64_t v142 = v103;
  uint64_t v143 = v64;
  uint64_t v144 = v102;
  char v145 = v170;
  *(_DWORD *)&v146[3] = *(_DWORD *)&v169[3];
  *(_DWORD *)long long v146 = *(_DWORD *)v169;
  uint64_t v147 = v100;
  uint64_t v148 = v65;
  uint64_t v149 = v99;
  char v150 = v168;
  *(_DWORD *)&v151[3] = *(_DWORD *)&v167[3];
  *(_DWORD *)id v151 = *(_DWORD *)v167;
  uint64_t v152 = v96;
  uint64_t v153 = v63;
  uint64_t v154 = v95;
  char v155 = v166;
  *(_DWORD *)uint64_t v156 = *(_DWORD *)v165;
  *(_DWORD *)&v156[3] = *(_DWORD *)&v165[3];
  uint64_t v157 = v94;
  uint64_t v158 = v67;
  uint64_t v159 = v93;
  uint64_t v160 = v66;
  uint64_t v161 = v92;
  char v162 = v164;
  char v163 = v70;
  sub_10004C3EC((uint64_t)&v110);
  return memcpy(v75, v108, 0x13AuLL);
}

unint64_t sub_10004C398()
{
  unint64_t result = qword_1005A41D0;
  if (!qword_1005A41D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A41D0);
  }
  return result;
}

uint64_t sub_10004C3EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004C464(uint64_t a1)
{
  return a1;
}

void *sub_10004C4DC(void *a1)
{
  uint64_t v3 = sub_10001644C(&qword_1005A41E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042C34((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_10002FD00(a1, a1[3]);
  sub_10004C69C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10002E618((uint64_t)a1);
  }
  else
  {
    sub_10001644C(&qword_1005A41F0);
    sub_10004C7D0(&qword_1005A41F8, (void (*)(void))sub_10004C6F0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_10002E618((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10004C69C()
{
  unint64_t result = qword_1005A41E8;
  if (!qword_1005A41E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A41E8);
  }
  return result;
}

unint64_t sub_10004C6F0()
{
  unint64_t result = qword_1005A4200;
  if (!qword_1005A4200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4200);
  }
  return result;
}

uint64_t sub_10004C744(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004C7D0(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002E5A8(&qword_1005A41F0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004C84C()
{
  unint64_t result = qword_1005A4220;
  if (!qword_1005A4220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4220);
  }
  return result;
}

uint64_t sub_10004C8A0(uint64_t a1)
{
  return a1;
}

unint64_t sub_10004C8F4()
{
  unint64_t result = qword_1005A4260;
  if (!qword_1005A4260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4260);
  }
  return result;
}

uint64_t sub_10004C948(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = 0u;
  uint64_t result = a1 + 48;
  *(_OWORD *)(result + 250) = 0u;
  return result;
}

uint64_t sub_10004C984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10004CA0C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v8 = *(_WORD *)(a1 + 312);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    *(void *)(a1 + 304),
    v8);
  return a1;
}

uint64_t sub_10004CAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10004CB30(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

unint64_t sub_10004CB54()
{
  unint64_t result = qword_1005A4270;
  if (!qword_1005A4270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4270);
  }
  return result;
}

uint64_t sub_10004CBA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004CBD4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KatanaSubscriptionMetadata.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for KatanaSubscriptionMetadata.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10004CD0CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004CD34()
{
  return 0;
}

ValueMetadata *type metadata accessor for KatanaSubscriptionMetadata.CodingKeys()
{
  return &type metadata for KatanaSubscriptionMetadata.CodingKeys;
}

uint64_t getEnumTagSinglePayload for KatanaSubscriptionInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KatanaSubscriptionInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    *uint64_t result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004CEA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 20;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KatanaSubscriptionInfo.CodingKeys()
{
  return &type metadata for KatanaSubscriptionInfo.CodingKeys;
}

uint64_t destroy for KatanaSubscriptionInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KatanaSubscriptionInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 16_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v5;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v6 = *(void *)(a2 + 216);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v6;
  uint64_t v7 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v7;
  uint64_t v8 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 24_Block_object_dispose(&a9, 8) = v8;
  uint64_t v9 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v9;
  uint64_t v10 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v10;
  uint64_t v11 = *(void *)(a2 + 296);
  *(void *)(a1 + 28_Block_object_dispose(&a9, 8) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v11;
  uint64_t v12 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v12;
  *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KatanaSubscriptionInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&a9, 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v6;
  uint64_t v7 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = a2[10];
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = *((unsigned char *)a2 + 88);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = a2[14];
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(void *)(a1 + 112) = v10;
  uint64_t v11 = a2[16];
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v11;
  uint64_t v12 = a2[18];
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 144) = v12;
  uint64_t v13 = a2[20];
  *(unsigned char *)(a1 + 16_Block_object_dispose(&a9, 8) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 176) = a2[22];
  *(void *)(a1 + 184) = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a2[24];
  *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
  *(void *)(a1 + 192) = v14;
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = a2[26];
  *(void *)(a1 + 216) = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a2[28];
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  *(void *)(a1 + 224) = v15;
  *(void *)(a1 + 240) = a2[30];
  *(void *)(a1 + 24_Block_object_dispose(&a9, 8) = a2[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a2[32];
  *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
  *(void *)(a1 + 256) = v16;
  *(void *)(a1 + 272) = a2[34];
  *(void *)(a1 + 280) = a2[35];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 28_Block_object_dispose(&a9, 8) = a2[36];
  *(void *)(a1 + 296) = a2[37];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a2[38];
  *(unsigned char *)(a1 + 312) = *((unsigned char *)a2 + 312);
  *(void *)(a1 + 304) = v17;
  *(unsigned char *)(a1 + 313) = *((unsigned char *)a2 + 313);
  return a1;
}

void *initializeWithTake for KatanaSubscriptionInfo(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x13AuLL);
}

uint64_t assignWithTake for KatanaSubscriptionInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 16_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 216);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  uint64_t v8 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 24_Block_object_dispose(&a9, 8) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  uint64_t v9 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 296);
  *(void *)(a1 + 28_Block_object_dispose(&a9, 8) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for KatanaSubscriptionInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 314)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KatanaSubscriptionInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24_Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(_WORD *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 314) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 314) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KatanaSubscriptionInfo()
{
  return &type metadata for KatanaSubscriptionInfo;
}

ValueMetadata *type metadata accessor for KatanaSubscriptionMetadata()
{
  return &type metadata for KatanaSubscriptionMetadata;
}

unint64_t sub_10004D524()
{
  unint64_t result = qword_1005A4288;
  if (!qword_1005A4288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4288);
  }
  return result;
}

unint64_t sub_10004D57C()
{
  unint64_t result = qword_1005A4290;
  if (!qword_1005A4290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4290);
  }
  return result;
}

unint64_t sub_10004D5D4()
{
  unint64_t result = qword_1005A4298;
  if (!qword_1005A4298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4298);
  }
  return result;
}

unint64_t sub_10004D62C()
{
  unint64_t result = qword_1005A42A0;
  if (!qword_1005A42A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A42A0);
  }
  return result;
}

unint64_t sub_10004D684()
{
  unint64_t result = qword_1005A42A8;
  if (!qword_1005A42A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A42A8);
  }
  return result;
}

unint64_t sub_10004D6DC()
{
  unint64_t result = qword_1005A42B0;
  if (!qword_1005A42B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A42B0);
  }
  return result;
}

id sub_10004D730()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for RestoreKeeper()) init];
  qword_1005B14A8 = (uint64_t)result;
  return result;
}

uint64_t sub_10004D7BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10004DA34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v31 - v10;
  if (a2)
  {
    swift_errorRetain();
    static Logger.restore.getter();
    id v12 = a3;
    swift_errorRetain();
    uint64_t v13 = v12;
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v32 = v6;
      uint64_t v18 = (void *)v17;
      *(_DWORD *)uint64_t v16 = 138412546;
      uint64_t v33 = v5;
      uint64_t v34 = v13;
      uint64_t v19 = v13;
      os_log_t v31 = v14;
      uint64_t v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v13;

      *(_WORD *)(v16 + 12) = 2112;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v34 = v21;
      uint64_t v5 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v18[1] = v21;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v22 = v31;
      _os_log_impl((void *)&_mh_execute_header, v31, v15, "[%@] Deletion failed with error: %@", (uint8_t *)v16, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      uint64_t v6 = v32;
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v11 = v9;
  }
  else
  {
    static Logger.restore.getter();
    uint64_t v23 = a3;
    int v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v33 = v5;
      uint64_t v34 = v23;
      uint64_t v28 = (void *)v27;
      uint64_t v32 = v6;
      *(_DWORD *)uint64_t v26 = 138412290;
      uint64_t v29 = v23;
      uint64_t v6 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v23;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%@] Deletion complete", v26, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      uint64_t v5 = v33;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      int v24 = v23;
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

void sub_10004DE10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10004DF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 20_Block_object_dispose(&a9, 8) = v17;
  *(_OWORD *)(v8 + 176) = v15;
  *(_OWORD *)(v8 + 192) = v16;
  *(_OWORD *)(v8 + 144) = v13;
  *(_OWORD *)(v8 + 160) = v14;
  *(void *)(v8 + 12_Block_object_dispose(&a9, 8) = a7;
  *(void *)(v8 + 136) = a8;
  *(void *)(v8 + 112) = a5;
  *(void *)(v8 + 120) = a6;
  *(void *)(v8 + 104) = a4;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 216) = v9;
  *(void *)(v8 + 224) = *(void *)(v9 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 240) = v10;
  *(void *)(v8 + 24_Block_object_dispose(&a9, 8) = *(void *)(v10 - 8);
  *(void *)(v8 + 256) = swift_task_alloc();
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = swift_task_alloc();
  return _swift_task_switch(sub_10004E0F4, 0, 0);
}

uint64_t sub_10004E0F4()
{
  uint64_t v21 = v0;
  uint64_t v1 = *(void *)(v0[13] + OBJC_IVAR____TtC9appstored13RestoreKeeper_lockedRestores);
  v0[35] = v1;
  int v2 = (void *)(v1 + 16);
  unint64_t v3 = (os_unfair_lock_s *)(v1 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v3);
  sub_10004D7BC(v2, &v20);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v6 = v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = v6;
  sub_1000D2558(1, v4, v5, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(swift_task_alloc() + 16) = v8;
  os_unfair_lock_lock(v3);
  sub_1000523F8(v2);
  v0[38] = 0;
  os_unfair_lock_unlock(v3);
  uint64_t v9 = v0[23];
  uint64_t v19 = v0[22];
  uint64_t v11 = v0[20];
  uint64_t v10 = v0[21];
  uint64_t v13 = v0[18];
  uint64_t v12 = v0[19];
  uint64_t v15 = v0[16];
  uint64_t v14 = v0[17];
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  type metadata accessor for SystemAlert();
  uint64_t v16 = swift_allocObject();
  v0[36] = v16;
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = v14;
  *(void *)(v16 + 32) = v13;
  *(void *)(v16 + 40) = v12;
  *(void *)(v16 + 4_Block_object_dispose(&a9, 8) = v11;
  *(void *)(v16 + 56) = v10;
  *(void *)(v16 + 64) = v19;
  *(void *)(v16 + 72) = v9;
  *(unsigned char *)(v16 + 80) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[37] = v17;
  void *v17 = v0;
  v17[1] = sub_10004E384;
  v17[2] = v16;
  v17[3] = *(void *)v16;
  return _swift_task_switch(sub_10004EE54, 0, 0);
}

uint64_t sub_10004E384(char a1)
{
  *(unsigned char *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10004E4D0, 0, 0);
}

void sub_10004E4D0()
{
  int v79 = v0;
  if (!*((unsigned char *)v0 + 312))
  {
    uint64_t v10 = (void *)v0[24];
    static Logger.restore.getter();
    id v11 = v10;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = (void *)v0[24];
    uint64_t v77 = (void **)(v0 + 9);
    if (v14)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      int v76 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412290;
      v0[12] = v15;
      id v17 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v76 = v15;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@] User chose to continue", v16, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    os_log_t v31 = (void *)v0[24];
    uint64_t v33 = v0[14];
    uint64_t v32 = v0[15];
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0[31] + 8);
    v34(v0[34], v0[30]);
    int v35 = sub_100051C7C(v33, v32, v31);
    if (v35)
    {
      int v36 = v35;
      char v37 = (void *)v0[24];
      static Logger.restore.getter();
      id v38 = v37;
      id v39 = v36;
      id v40 = v38;
      id v22 = v39;
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = v0[33];
      uint64_t v45 = v0[30];
      if (v43)
      {
        id v75 = v34;
        os_log_type_t type = v42;
        uint64_t v46 = v0[29];
        uint64_t v71 = v0[28];
        os_log_t log = v41;
        int v69 = v0 + 10;
        uint64_t v70 = v0[27];
        uint64_t v47 = (void *)v0[24];
        uint64_t v48 = swift_slowAlloc();
        uint64_t v49 = (void *)swift_slowAlloc();
        v78[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 138412546;
        uint64_t v74 = v44;
        v0[10] = v47;
        id v50 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v49 = v47;

        *(_WORD *)(v48 + 12) = 2080;
        id v51 = [v22 uniqueIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000525D8(&qword_1005A4460, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v54 = v53;
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v46, v70);
        v0[11] = sub_1000F7290(v52, v54, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, log, type, "[%@] Prioritizing coordinator with id: %s", (uint8_t *)v48, 0x16u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v75(v74, v45);
      }
      else
      {
        uint64_t v55 = (void *)v0[24];

        v34(v44, v45);
      }
      char *v77 = 0;
      unsigned int v56 = objc_msgSend(v22, "prioritizeWithError:", v77, v69);
      uint64_t v57 = *v77;
      if (v56)
      {
        uint64_t v30 = v0[38];
        id v58 = v57;
      }
      else
      {
        id v59 = v57;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v30 = 0;
      }
      goto LABEL_21;
    }
LABEL_15:
    uint64_t v30 = v0[38];
    goto LABEL_22;
  }
  if (*((unsigned char *)v0 + 312) != 1) {
    goto LABEL_15;
  }
  uint64_t v1 = (void *)v0[24];
  static Logger.restore.getter();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)v0[24];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    v0[8] = v6;
    id v9 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v6;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] User chose to delete", v7, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(void, void))(v0[31] + 8))(v0[32], v0[30]);
  id v18 = objc_allocWithZone((Class)IXApplicationIdentity);
  swift_bridgeObjectRetain();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [v18 initWithBundleIdentifier:v19];

  if (!v20) {
    goto LABEL_15;
  }
  id v21 = objc_allocWithZone((Class)IXUninstallOptions);
  id v22 = v20;
  id v23 = [v21 init];
  if (v23)
  {
    int v24 = v23;
    os_log_type_t v25 = (void *)v0[24];
    [v23 setWaitForDeletion:0];
    [v24 setRequestUserConfirmation:0];
    uint64_t v26 = self;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v25;
    v0[6] = sub_100052490;
    v0[7] = v27;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_10004DE10;
    v0[5] = &unk_100512C08;
    uint64_t v28 = _Block_copy(v0 + 2);
    id v29 = v25;
    swift_release();
    [v26 uninstallAppWithIdentity:v22 options:v24 completion:v28];

    _Block_release(v28);
    uint64_t v30 = v0[38];
    id v22 = v24;
  }
  else
  {

    uint64_t v30 = v0[38];
  }
LABEL_21:

LABEL_22:
  uint64_t v60 = v0[35];
  uint64_t v61 = (os_unfair_lock_s *)(v60 + 24);
  uint64_t v62 = (void *)(v60 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v61);
  sub_10004D7BC(v62, v78);
  os_unfair_lock_unlock(v61);
  if (!v30)
  {
    uint64_t v63 = v0[35];
    uint64_t v64 = (os_unfair_lock_s *)(v63 + 24);
    uint64_t v65 = (void *)(v63 + 16);
    sub_1000B2AD0(v0[14], v0[15]);
    swift_bridgeObjectRelease();
    uint64_t v66 = v78[0];
    *(void *)(swift_task_alloc() + 16) = v66;
    os_unfair_lock_lock(v64);
    sub_1000523F8(v65);
    uint64_t v67 = (void (*)(void))v0[25];
    os_unfair_lock_unlock((os_unfair_lock_t)(v0[35] + 24));
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v67(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v68 = (void (*)(void))v0[1];
    v68();
  }
}

uint64_t sub_10004EE0C()
{
  *(void *)(v1 + 16) = v0;
  *(void *)(v1 + 24) = *v0;
  return _swift_task_switch(sub_10004EE54, 0, 0);
}

uint64_t sub_10004EE54()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = swift_task_alloc();
  v0[4] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_10004EF50;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0x28746E6573657270, 0xE900000000000029, sub_100052498, v3, &type metadata for SystemAlert.Response);
}

uint64_t sub_10004EF50()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10004F068, 0, 0);
}

uint64_t sub_10004F068()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 48));
}

unint64_t sub_10004F104(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a2 databaseID];
  id v12 = [a1 connection];
  os_log_type_t v13 = [objc_allocWithZone((Class)AppInstallEntity) initWithPersistentID:v11 onConnection:v12];

  unint64_t v14 = (unint64_t)[v13 existsInDatabase];
  if (v14)
  {
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    [v13 setValue:isa forProperty:@"supress_dialogs"];

    Class v16 = Int._bridgeToObjectiveC()().super.super.isa;
    [v13 setValue:v16 forProperty:@"priority"];

    static Logger.restore.getter();
    id v17 = a4;
    id v29 = v10;
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      uint64_t v28 = v8;
      *(_DWORD *)id v20 = 138412290;
      uint64_t v30 = v17;
      id v21 = v17;
      unsigned int v27 = v14;
      uint64_t v22 = v7;
      id v23 = v21;
      uint64_t v8 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v17;

      uint64_t v7 = v22;
      unint64_t v14 = v27;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ Moved to user prioritized", v20, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      id v17 = v13;
    }
    else
    {

      id v18 = v13;
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v29, v7);
  }
  else
  {
  }
  return v14;
}

id sub_10004F474()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RestoreKeeper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RestoreKeeper()
{
  return self;
}

uint64_t sub_10004F4DC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100018D68(0, (unint64_t *)&unk_1005A43C0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v9 = [a1 connection];
  id v10 = sub_1002FF548(ObjCClassFromMetadata, v9, a2);

  sub_10000C820(a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10005110C;
  *(void *)(v13 + 24) = v12;
  void v16[4] = sub_100051124;
  v16[5] = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_10003F95C;
  v16[3] = &unk_100512AF0;
  unint64_t v14 = _Block_copy(v16);
  swift_retain();
  swift_release();
  [v10 enumerateMemoryEntitiesWithProperties:isa usingBlock:v14];

  _Block_release(v14);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v10) {
    __break(1u);
  }
  return result;
}

void sub_10004F6C8(void *a1, uint64_t a2, uint64_t a3, id *a4)
{
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    id v8 = *a4;
    *a4 = (id)v6;
    id v7 = a1;
  }
}

uint64_t sub_10004F7C0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_100018D68(0, (unint64_t *)&qword_1005A4498);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1000525D8(&qword_1005A44A0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10001644C(&qword_1005A44A8);
  sub_100052620(&qword_1005A44B0, &qword_1005A44A8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_1005A42C0 = result;
  return result;
}

uint64_t sub_10004FA14(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10001644C(&qword_1005A4468);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  if (qword_1005A2FF8 != -1) {
    swift_once();
  }
  v16[1] = qword_1005A42C0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_100052570;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AB758;
  aBlock[3] = &unk_100512C58;
  unint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v20 = _swiftEmptyArrayStorage;
  sub_1000525D8(&qword_1005A4470, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10001644C(&qword_1005A4478);
  sub_100052620(&qword_1005A4480, &qword_1005A4478);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  return swift_release();
}

void sub_10004FDC8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001644C(&qword_1005A4488);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100488780;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v9 = (void *)inited;
  v35[0] = v5;
  v35[1] = a2;
  *(void *)(inited + 32) = kCFUserNotificationAlertHeaderKey;
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  v9[8] = &type metadata for String;
  v9[5] = v11;
  v9[6] = v10;
  if (!kCFUserNotificationAlertMessageKey)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  v9[9] = kCFUserNotificationAlertMessageKey;
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5];
  v9[13] = &type metadata for String;
  v9[10] = v12;
  v9[11] = v13;
  if (!kCFUserNotificationDefaultButtonTitleKey) {
    goto LABEL_22;
  }
  v9[14] = kCFUserNotificationDefaultButtonTitleKey;
  uint64_t v14 = a1[6];
  uint64_t v15 = a1[7];
  v9[18] = &type metadata for String;
  v9[15] = v14;
  v9[16] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CFStringRef v16 = (id)kCFUserNotificationAlertHeaderKey;
  CFStringRef v17 = (id)kCFUserNotificationAlertMessageKey;
  CFStringRef v18 = (id)kCFUserNotificationDefaultButtonTitleKey;
  unint64_t v19 = sub_100042DA8((uint64_t)v9);
  CFOptionFlags v20 = a1[9];
  if (v20)
  {
    if (kCFUserNotificationAlternateButtonTitleKey)
    {
      CFOptionFlags v21 = a1[8];
      id v39 = &type metadata for String;
      responseFlags[0] = v21;
      responseFlags[1] = v20;
      sub_10000C948(responseFlags, error);
      uint64_t v22 = (id)kCFUserNotificationAlternateButtonTitleKey;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v36 = v19;
      sub_1000D26C4(error, v22, isUniquelyReferenced_nonNull_native);
      unint64_t v24 = v36;

      swift_bridgeObjectRelease();
      uint64_t v25 = (void *)SBUserNotificationAlternateButtonPresentationStyleKey;
      if (SBUserNotificationAlternateButtonPresentationStyleKey)
      {
        id v39 = &type metadata for UInt32;
        LODWORD(responseFlags[0]) = 1;
        sub_10000C948(responseFlags, error);
        id v26 = v25;
        char v27 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v36 = v24;
        sub_1000D26C4(error, v26, v27);

        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_8:
  error[0] = 0;
  type metadata accessor for CFString(0);
  sub_1000525D8(&qword_1005A4490, type metadata accessor for CFString);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CFUserNotificationRef v29 = CFUserNotificationCreate(0, 0.0, 3uLL, error, isa);

  if (v29 && !error[0])
  {
    responseFlags[0] = 2;
    uint64_t v30 = v29;
    CFUserNotificationReceiveResponse(v30, 0.0, responseFlags);
    char v31 = responseFlags[0];
    if (responseFlags[0] != 1)
    {
      if (!responseFlags[0])
      {
        LOBYTE(v36) = 0;
LABEL_18:
        sub_10001644C(&qword_1005A4468);
        CheckedContinuation.resume(returning:)();

        return;
      }
      char v31 = 2;
    }
    LOBYTE(v36) = v31;
    goto LABEL_18;
  }
  static Logger.daemon.getter();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 67240192;
    swift_beginAccess();
    LODWORD(v36) = error[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Could not create CFUserNotification: %{public}d", v34, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v35[0] + 8))(v7, v4);
  LOBYTE(v36) = 2;
  sub_10001644C(&qword_1005A4468);
  CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000502BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SystemAlert()
{
  return self;
}

void sub_100050330(uint64_t a1, uint64_t a2, void *a3, char *a4, void (**a5)(const void *, void *))
{
  uint64_t v10 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v13 - 8);
  uint64_t v77 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v15 - 8);
  int v76 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v78 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v70 - v21;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = a5;
  uint64_t v74 = a5;
  _Block_copy(a5);
  static Logger.restore.getter();
  id v23 = a3;
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v81 = a2;
  uint64_t v82 = a4;
  uint64_t v79 = v17;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    int v73 = v12;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v71 = (void *)swift_slowAlloc();
    uint64_t v83 = v18;
    *(_DWORD *)uint64_t v28 = 138412290;
    uint64_t v72 = a1;
    uint64_t v85 = v23;
    CFUserNotificationRef v29 = v23;
    a2 = v81;
    uint64_t v30 = v72;
    uint64_t v18 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v71 = v23;

    a4 = v82;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%@] Prompting the user whether or not to delete restore", v28, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    a1 = v30;
    uint64_t v17 = v79;
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v73;
    swift_slowDealloc();
  }
  else
  {

    unint64_t v24 = v23;
  }

  char v31 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v83 = v18 + 8;
  v31(v22, v17);
  uint64_t v32 = *(void *)&a4[OBJC_IVAR____TtC9appstored13RestoreKeeper_lockedRestores];
  os_log_type_t v33 = (void *)(v32 + 16);
  uint64_t v34 = (os_unfair_lock_s *)(v32 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v34);
  sub_10004D7BC(v33, &v85);
  os_unfair_lock_unlock(v34);
  if (v85[2].isa)
  {
    sub_100049A4C(a1, a2);
    char v36 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v36)
    {
      type metadata accessor for ASDError(0);
      uint64_t v84 = 506;
      sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
      sub_1000525D8(&qword_1005A4450, type metadata accessor for ASDError);
      _BridgedStoredNSError.init(_:userInfo:)();
      char v37 = v85;
      id v38 = (void *)_convertErrorToNSError(_:)();
      v74[2](v74, v38);
      swift_release();

      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  id v39 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v40 = sub_1000D718C(a1, a2, 1);
  id v75 = v23;
  uint64_t v41 = v40;
  uint64_t v42 = a1;
  id v43 = [v40 localizedName];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v47._object = (void *)0x800000010044C690;
  v47._countAndFlagsBits = 0xD000000000000015;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v47);
  v48._countAndFlagsBits = v44;
  v48._object = v46;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v48);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v49);
  String.LocalizationValue.init(stringInterpolation:)();
  uint64_t v83 = String.init(appStoreDaemonLocalized:comment:)();
  uint64_t v51 = v50;
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v79 = String.init(appStoreDaemonLocalized:comment:)();
  uint64_t v53 = v52;
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v54 = String.init(appStoreDaemonLocalized:comment:)();
  uint64_t v56 = v55;
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v57 = String.init(appStoreDaemonLocalized:comment:)();
  uint64_t v59 = v58;
  uint64_t v60 = type metadata accessor for TaskPriority();
  uint64_t v61 = (uint64_t)v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v12, 1, 1, v60);
  uint64_t v62 = (void *)swift_allocObject();
  v62[2] = 0;
  v62[3] = 0;
  uint64_t v64 = v82;
  uint64_t v63 = v83;
  v62[4] = v82;
  v62[5] = v42;
  v62[6] = v81;
  v62[7] = v63;
  uint64_t v65 = v79;
  v62[8] = v51;
  v62[9] = v65;
  v62[10] = v53;
  v62[11] = v54;
  v62[12] = v56;
  v62[13] = v57;
  uint64_t v66 = v75;
  v62[14] = v59;
  v62[15] = v66;
  uint64_t v67 = v80;
  v62[16] = sub_100034BAC;
  v62[17] = v67;
  uint64_t v68 = v66;
  swift_bridgeObjectRetain();
  int v69 = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100018FDC(v61, (uint64_t)&unk_1005A4448, (uint64_t)v62);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t sub_100050C60(uint64_t a1, uint64_t a2)
{
  sub_10001644C(&qword_1005A4E50);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100488780;
  *(_OWORD *)(v4 + 32) = xmmword_100488EA0;
  *(void *)(v4 + 4_Block_object_dispose(&a9, 8) = -40;
  sub_10001644C(&qword_1005A43D0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100488EB0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v14 = a1;
  swift_bridgeObjectRetain();
  uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v8 = objc_msgSend(self, "predicateWithProperty:value:comparisonType:", v6, v7, 1, v14, a2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(v5 + 32) = v8;
  uint64_t v9 = self;
  uint64_t v10 = @"IFNULL(app_install.phase, 10)";
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [v9 doesNotContainPredicateWithProperty:v10 values:isa];

  *(void *)(v5 + 40) = v12;
  specialized Array._endMutation()();
  return v5;
}

uint64_t sub_100050E1C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = sub_100050C60(a1, a2);
  sub_10000C5EC(v2);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [self predicateMatchingAllPredicates:isa];

  sub_10001644C(&qword_1005A4F70);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100488EC0;
  *(void *)(v5 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 4_Block_object_dispose(&a9, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 56) = v7;
  *(void *)(v5 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 72) = v8;
  *(void *)(v5 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 8_Block_object_dispose(&a9, 8) = v9;
  *(void *)(v5 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 104) = v10;
  uint64_t v19 = 0;
  self;
  id v11 = sub_1003E0BA4();
  id v12 = (void *)swift_allocObject();
  void v12[2] = v4;
  v12[3] = v5;
  v12[4] = &v19;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1000510D8;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_1000510F4;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018DE4;
  aBlock[3] = &unk_100512A78;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v4;
  swift_retain();
  swift_release();
  [v11 readUsingSession:v14];

  _Block_release(v14);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = v19;
    swift_release();
    return v17;
  }
  return result;
}

uint64_t sub_100051098()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000510D8(void *a1)
{
  return sub_10004F4DC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000510E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000510F4(uint64_t a1)
{
  return sub_10009C4A4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000510FC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10005110C(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10004F6C8(a1, a2, a3, *(id **)(v3 + 16));
}

uint64_t sub_100051114()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100051124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003F934(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void sub_10005112C(void *a1, char a2, void *a3)
{
  self;
  id v6 = sub_1003E0BA4();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100052200;
  *(void *)(v8 + 24) = v7;
  v17[4] = sub_10003F908;
  v17[5] = v8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10003D6C8;
  v17[3] = &unk_100512B68;
  uint64_t v9 = _Block_copy(v17);
  id v10 = a1;
  id v11 = a3;
  swift_retain();
  swift_release();
  [v6 modifyUsingTransaction:v9];

  _Block_release(v9);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (a3)
  {
    __break(1u);
  }
  else
  {
    if (sub_10026E91C(v10, @"bootstrapped") == (id)2)
    {
      self;
      id v12 = sub_1002ED270();
      sub_1002EDDA0((uint64_t)v12, 0x2000);
      swift_release();
    }
    else
    {
      self;
      id v13 = sub_1002B3410();
      NSString v14 = String._bridgeToObjectiveC()();
      id v15 = objc_msgSend(self, "ams_sharedAccountStore");
      id v16 = objc_msgSend(v15, "ams_activeiTunesAccount");

      id v12 = objc_msgSend(v16, "ams_DSID");
      sub_1002B4918((uint64_t)v13, v14, v12, 1);
      swift_release();
    }
  }
}

NSObject *sub_1000513C8(void *a1, char a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v6 - 8);
  id v55 = (id)v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = __chkstk_darwin(v10);
  id v13 = (char *)&v53 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v53 - v14;
  id v16 = [a1 identity];
  id v17 = [v16 bundleID];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  uint64_t v21 = (void *)sub_100050E1C(v18, v20);
  swift_bridgeObjectRelease();
  if (v21)
  {
    sub_10005112C(v21, a2 & 1, a3);
    static Logger.restore.getter();
    uint64_t v22 = a3;
    id v23 = v21;
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412546;
      LODWORD(v53) = v26;
      uint64_t v56 = v22;
      CFUserNotificationRef v29 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v22;

      *(_WORD *)(v27 + 12) = 2112;
      uint64_t v30 = sub_100424C14(v23);
      uint64_t v56 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v28[1] = v30;

      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v53, "[%@] Found active restore with logKey: %@", (uint8_t *)v27, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v23 = v22;
      unint64_t v24 = v22;
    }

    return (*(uint64_t (**)(char *, id))(v54 + 8))(v15, v55);
  }
  else
  {
    if ([a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise])
    {
      uint64_t v56 = 0;
      id v31 = [a1 appAssetPromiseResponsibleClientWithError:&v56];
      uint64_t v32 = v56;
      if (v31 == (id)1)
      {
        self;
        os_log_type_t v33 = v32;
        id v34 = sub_1002B3410();
        id v35 = sub_1002B3FA8((uint64_t)v34);

        sub_10001B6E0(a1, v35);
        Swift::String v47 = v46;

        sub_10005112C(v47, a2 & 1, a3);
        static Logger.restore.getter();
        Swift::String v48 = a3;
        Swift::String v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = (uint8_t *)swift_slowAlloc();
          uint64_t v53 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 138412290;
          uint64_t v56 = v48;
          uint64_t v52 = v48;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v53 = v48;

          _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] Displaying job started dialog", v51, 0xCu);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          Swift::String v47 = v48;
          Swift::String v49 = v48;
        }

        return (*(uint64_t (**)(char *, id))(v54 + 8))(v13, v55);
      }
      char v37 = v56;
    }
    static Logger.restore.getter();
    id v38 = a3;
    id v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 138412290;
      uint64_t v56 = v38;
      uint64_t v42 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v38;

      _os_log_impl((void *)&_mh_execute_header, v39, v40, "[%@] Prioritizing active restore coordinator which App Store is not responsible", v41, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v39 = v38;
    }

    (*(void (**)(char *, id))(v54 + 8))(v9, v55);
    uint64_t v56 = 0;
    unsigned int v43 = [a1 prioritizeWithError:&v56];
    uint64_t v44 = v56;
    if (v43)
    {
      return v44;
    }
    else
    {
      id v55 = v56;
      uint64_t v45 = v56;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return swift_errorRelease();
    }
  }
}

void *sub_100051C7C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)IXApplicationIdentity);
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v10 = [v8 initWithBundleID:v9];

  uint64_t v11 = self;
  id v38 = 0;
  id v12 = [v11 existingCoordinatorForAppWithIdentity:v10 error:&v38];
  id v13 = v38;
  if (v12)
  {
    uint64_t v14 = v12;
    self;
    id v15 = (void *)swift_dynamicCastObjCClass();
    id v16 = v13;
    if (v15)
    {
      id v17 = v14;
      static Logger.restore.getter();
      id v18 = v17;
      id v19 = a3;
      uint64_t v20 = v18;
      id v21 = v19;
      uint64_t v22 = Logger.logObject.getter();
      int v23 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v22, (os_log_type_t)v23))
      {

        id v31 = v20;
        uint64_t v10 = v20;
LABEL_13:

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return v15;
      }
      HIDWORD(v33) = v23;
      id v34 = v22;
      id v35 = v20;
      uint64_t v36 = v5;
      uint64_t v37 = v4;
      uint64_t v24 = swift_slowAlloc();
      os_log_type_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412546;
      id v38 = v21;
      id v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v25 = v21;

      *(_WORD *)(v24 + 12) = 1024;
      if ([v15 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise])
      {
        id v38 = 0;
        id v27 = [v15 appAssetPromiseResponsibleClientWithError:&v38];
        id v28 = v38;
        uint64_t v20 = v35;

        if (v27 == (id)1)
        {
          int v29 = 1;
LABEL_12:
          uint64_t v5 = v36;
          uint64_t v4 = v37;
          id v31 = v34;
          LODWORD(v3_Block_object_dispose(&a9, 8) = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v31, BYTE4(v33), "%@ Found existing restore with App Store responsible: %{BOOL}d", (uint8_t *)v24, 0x12u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v20 = v35;
      }
      int v29 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    id v30 = v38;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  return v15;
}

uint64_t sub_10005205C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for FeatureFlag();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = self;
  if ([v10 deviceIsAppleTV]) {
    return 0;
  }
  if ([v10 deviceIsAudioAccessory]) {
    return 0;
  }
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FeatureFlag.activeRestore(_:), v6);
  char v11 = asd_isFeatureEnabled(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0) {
    return 0;
  }
  uint64_t result = (uint64_t)sub_100051C7C(a1, a2, a3);
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t sub_1000521C0()
{
  return _swift_deallocObject(v0, 40, 7);
}

unint64_t sub_100052200(void *a1)
{
  return sub_10004F104(a1, *(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100052210()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100052220()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100052258()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return _swift_deallocObject(v0, 144, 7);
}

uint64_t sub_1000522D0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  char v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *char v11 = v2;
  v11[1] = sub_100005040;
  return sub_10004DF6C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000523F8(void *a1)
{
  return sub_100052410(a1);
}

uint64_t sub_100052410(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100052458()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100052490(uint64_t a1, uint64_t a2)
{
  return sub_10004DA34(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_100052498(uint64_t a1)
{
  return sub_10004FA14(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000524A0()
{
  uint64_t v1 = sub_10001644C(&qword_1005A4468);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

void sub_100052570()
{
  uint64_t v1 = *(void *)(sub_10001644C(&qword_1005A4468) - 8);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  sub_10004FDC8(v2, v3);
}

uint64_t sub_1000525D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100052620(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002E5A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SystemAlert.Response(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005273CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemAlert.Response()
{
  return &type metadata for SystemAlert.Response;
}

unint64_t sub_100052778()
{
  unint64_t result = qword_1005A44B8;
  if (!qword_1005A44B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A44B8);
  }
  return result;
}

void sub_1000527EC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

id *sub_100052850()
{
  uint64_t v0 = (id *)[objc_allocWithZone((Class)TaskQueue) init];
  NSString v1 = String._bridgeToObjectiveC()();
  sub_1002B2B6C(v0, (uint64_t)v1);

  unint64_t result = sub_1002B2BB4(v0, 25);
  qword_1005B14B0 = (uint64_t)v0;
  return result;
}

uint64_t sub_1000529FC()
{
  v1[46] = v0;
  type metadata accessor for String.LocalizationValue.StringInterpolation();
  v1[47] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue();
  v1[48] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v1[49] = v2;
  v1[50] = *(void *)(v2 - 8);
  v1[51] = swift_task_alloc();
  v1[52] = swift_task_alloc();
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  return _swift_task_switch(sub_100052B90, 0, 0);
}

uint64_t sub_100052B90()
{
  char v172 = v0;
  NSString v1 = (NSObject **)(v0 + 46);
  uint64_t v2 = (void *)v0[46];
  static Logger.updates.getter();
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    *(void *)os_log_type_t typea = v0[50];
    buf = (uint8_t *)v0[49];
    uint64_t v167 = v0[61];
    unsigned int v6 = (char *)v0[46];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    v171[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412546;
    uint64_t v9 = *(void **)&v6[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
    v0[44] = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v9;

    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v11 = *(void *)&v6[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID];
    unint64_t v12 = *(void *)&v6[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID + 8];
    swift_bridgeObjectRetain();
    v0[45] = sub_1000F7290(v11, v12, v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Starting pre-installed app update authorization task for %{public}s", (uint8_t *)v7, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    NSString v1 = (NSObject **)(v0 + 46);
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v13 = *(void (**)(uint64_t, uint8_t *))(*(void *)typea + 8);
    v13(v167, buf);
  }
  else
  {
    uint64_t v14 = v0[61];
    id v15 = (uint8_t *)v0[49];
    uint64_t v16 = v0[50];
    id v17 = (void *)v0[46];

    uint64_t v13 = *(void (**)(uint64_t, uint8_t *))(v16 + 8);
    v13(v14, v15);
  }
  v0[62] = v13;
  if (![self isAutomaticUpdateAuthorizationEnabled])
  {
    uint64_t v36 = (void *)v0[46];
    static Logger.updates.getter();
    id v37 = v36;
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = (char *)v0[46];
    if (v40)
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v158 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 138412290;
      *(void *)typeb = v13;
      unsigned int v43 = *(void **)&v41[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[23] = v43;
      id v44 = v43;
      NSString v1 = (NSObject **)(v0 + 46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v158 = v43;
      uint64_t v13 = *(void (**)(uint64_t, uint8_t *))typeb;

      _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%@] Automatic update authorization is not enabled.", v42, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v38 = *v1;
    }
    uint64_t v55 = v0[53];
    uint64_t v56 = (uint8_t *)v0[49];

    v13(v55, v56);
    type metadata accessor for ASDError(0);
    v0[40] = 1300;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100056258(&qword_1005A4450, type metadata accessor for ASDError);
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_22;
  }
  self;
  if (!sub_100005C38() || !sub_100009458())
  {
    uint64_t v45 = (void *)v0[46];
    static Logger.updates.getter();
    id v46 = v45;
    Swift::String v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    os_log_type_t v50 = (char *)v0[46];
    if (v49)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v159 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 138412290;
      uint64_t v52 = v13;
      uint64_t v53 = *(void **)&v50[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[26] = v53;
      id v54 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v159 = v53;
      uint64_t v13 = v52;

      _os_log_impl((void *)&_mh_execute_header, v47, v48, "[%@] Device restrictions prohibit app updates", v51, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      NSString v1 = (NSObject **)(v0 + 46);
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      Swift::String v47 = *v1;
    }
    uint64_t v57 = v0[54];
    uint64_t v58 = (uint8_t *)v0[49];

    v13(v57, v58);
    type metadata accessor for ASDError(0);
    v0[25] = 1300;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100056258(&qword_1005A4450, type metadata accessor for ASDError);
    _BridgedStoredNSError.init(_:userInfo:)();
LABEL_22:
    swift_willThrow();
    goto LABEL_23;
  }
  id v18 = (uint64_t *)(v0[46] + OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v21 = sub_1000D718C(v20, v19, 0);
  v0[63] = v21;
  v0[64] = 0;
  uint64_t v22 = v21;
  if (!sub_10042802C(v21))
  {
    uint64_t v90 = (void *)v0[46];
    static Logger.updates.getter();
    id v91 = v90;
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    BOOL v94 = os_log_type_enabled(v92, v93);
    uint64_t v95 = (char *)v0[46];
    if (v94)
    {
      uint64_t v96 = (uint8_t *)swift_slowAlloc();
      id v170 = v22;
      uint64_t v97 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 138412290;
      uint64_t v98 = *(void **)&v95[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[29] = v98;
      id v99 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v97 = v98;

      _os_log_impl((void *)&_mh_execute_header, v92, v93, "[%@] This app doesn't require authorization for pre-installed apps", v96, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      uint64_t v22 = v170;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v13(v0[55], (uint8_t *)v0[49]);
    type metadata accessor for ASDError(0);
    v0[28] = 1300;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100056258(&qword_1005A4450, type metadata accessor for ASDError);
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_45;
  }
  id v23 = [v22 iTunesMetadata];
  id v24 = [v23 storeItemIdentifier];

  if (!v24)
  {
    uint64_t v100 = (void *)v0[46];
    static Logger.updates.getter();
    id v101 = v100;
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.error.getter();
    BOOL v104 = os_log_type_enabled(v102, v103);
    uint64_t v105 = (char *)v0[46];
    if (v104)
    {
      *(void *)typec = v13;
      uint64_t v106 = (uint8_t *)swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v106 = 138412290;
      uint64_t v107 = *(void **)&v105[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[32] = v107;
      id v108 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->Class isa = (Class)v107;
      uint64_t v13 = *(void (**)(uint64_t, uint8_t *))typec;

      _os_log_impl((void *)&_mh_execute_header, v102, v103, "[%@] This app doesn't require authorization for pre-installed apps - No item ID", v106, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v13(v0[56], (uint8_t *)v0[49]);
    type metadata accessor for ASDError(0);
    v0[31] = 1300;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100056258(&qword_1005A4450, type metadata accessor for ASDError);
    _BridgedStoredNSError.init(_:userInfo:)();
LABEL_45:
    swift_willThrow();

    NSString v1 = (NSObject **)(v0 + 46);
    goto LABEL_23;
  }
  if ((sub_100055018() & 1) == 0)
  {

    goto LABEL_30;
  }
  if ([*(id *)((char *)&(*v1)->isa+ OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_processHandle) isValid])
  {
    char v25 = sub_10005530C();
    id v26 = *v1;
    if (v25)
    {
      id v169 = v22;
      os_log_type_t type = (void (*)(uint64_t, uint64_t))v13;
      static Logger.updates.getter();
      id v27 = v26;
      id v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      BOOL v30 = os_log_type_enabled(v28, v29);
      id v31 = (char *)v0[46];
      if (v30)
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 138412290;
        id v34 = *(void **)&v31[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
        v0[43] = v34;
        id v35 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v33 = v34;

        _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%@] Requesting pre-installed app update authorization", v32, 0xCu);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v126 = v0[60];
      uint64_t v127 = v0[49];
      bufa = (uint8_t *)v0[46];
      v0[65] = (v0[50] + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      type(v126, v127);
      String.LocalizationValue.init(stringLiteral:)();
      String.init(appStoreDaemonLocalized:comment:)();
      NSString v128 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v129 = String._bridgeToObjectiveC()();
      uint64_t v130 = self;
      id v131 = [v130 actionWithTitle:v128 identifier:v129];
      v0[66] = v131;

      String.LocalizationValue.init(stringLiteral:)();
      String.init(appStoreDaemonLocalized:comment:)();
      NSString v132 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v133 = String._bridgeToObjectiveC()();
      id v134 = [v130 actionWithTitle:v132 identifier:v133];
      v0[67] = v134;

      [v134 setStyle:2];
      id v135 = [v169 localizedName];
      uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v138 = v137;

      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v139._object = (void *)0x800000010044C8C0;
      v139._countAndFlagsBits = 0xD000000000000024;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v139);
      v140._countAndFlagsBits = v136;
      v140._object = v138;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v140);
      swift_bridgeObjectRelease();
      v141._countAndFlagsBits = 0;
      v141._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v141);
      String.LocalizationValue.init(stringInterpolation:)();
      String.init(appStoreDaemonLocalized:comment:)();
      String.LocalizationValue.init(stringLiteral:)();
      String.init(appStoreDaemonLocalized:comment:)();
      id v142 = objc_allocWithZone((Class)AMSDialogRequest);
      NSString v143 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v144 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v145 = [v142 initWithTitle:v143 message:v144];
      v0[68] = v145;

      sub_10001644C(&qword_1005A43D0);
      uint64_t v146 = swift_allocObject();
      *(_OWORD *)(v146 + 16) = xmmword_100488EB0;
      *(void *)(v146 + 32) = v131;
      *(void *)(v146 + 40) = v134;
      v171[0] = v146;
      specialized Array._endMutation()();
      sub_100018D68(0, (unint64_t *)&unk_1005A4520);
      id v147 = v131;
      id v148 = v134;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v145 setButtonActions:isa];

      [v145 setDefaultAction:v147];
      v0[69] = *(void *)&bufa[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      swift_bridgeObjectRetain();
      NSString v150 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v145 setLogKey:v150];

      [v145 setStyle:1];
      id v151 = [self defaultCenter];
      [v151 postNotificationName:@"RequestPresenterWillPresentUINotification" object:0];

      id v152 = [objc_allocWithZone((Class)_ASDSystemAlertDialogTask) initWithRequest:v145];
      v0[70] = v152;
      id v153 = [v152 present];
      v0[71] = v153;
      v0[2] = v0;
      v0[7] = v0 + 39;
      v0[3] = sub_100054624;
      uint64_t v154 = swift_continuation_init();
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 0x40000000;
      v0[12] = sub_100028428;
      v0[13] = &unk_100512D88;
      v0[14] = v154;
      objc_msgSend(v153, "resultWithCompletion:");
      return _swift_continuation_await(v0 + 2);
    }
    static Logger.updates.getter();
    uint64_t v118 = v26;
    char v119 = Logger.logObject.getter();
    os_log_type_t v120 = static os_log_type_t.info.getter();
    BOOL v121 = os_log_type_enabled(v119, v120);
    char v122 = (char *)v0[46];
    if (v121)
    {
      *(void *)typed = v13;
      id v123 = (uint8_t *)swift_slowAlloc();
      char v155 = (void *)swift_slowAlloc();
      *(_DWORD *)id v123 = 138543362;
      uint64_t v124 = *(void **)&v122[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[38] = v124;
      id v125 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v155 = v124;
      uint64_t v13 = *(void (**)(uint64_t, uint8_t *))typed;

      _os_log_impl((void *)&_mh_execute_header, v119, v120, "[%{public}@] App hasn't launched enough times", v123, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v13(v0[58], (uint8_t *)v0[49]);
    type metadata accessor for ASDError(0);
    v0[37] = 1300;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100056258(&qword_1005A4450, type metadata accessor for ASDError);
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    char v109 = (void *)v0[46];
    static Logger.updates.getter();
    id v110 = v109;
    char v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.default.getter();
    BOOL v113 = os_log_type_enabled(v111, v112);
    char v114 = (char *)v0[46];
    if (v113)
    {
      id v115 = (uint8_t *)swift_slowAlloc();
      os_log_t loga = (os_log_t)swift_slowAlloc();
      *(_DWORD *)id v115 = 138412290;
      uint64_t v116 = *(void **)&v114[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[35] = v116;
      id v117 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      loga->Class isa = (Class)v116;

      _os_log_impl((void *)&_mh_execute_header, v111, v112, "[%@] App is no longer running", v115, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    NSString v1 = (NSObject **)(v0 + 46);

    v13(v0[57], (uint8_t *)v0[49]);
    type metadata accessor for ASDError(0);
    v0[34] = 1300;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100056258(&qword_1005A4450, type metadata accessor for ASDError);
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  swift_willThrow();

LABEL_23:
  type metadata accessor for Code(0);
  v0[20] = 0;
  swift_errorRetain();
  sub_100056258(&qword_1005A3320, type metadata accessor for Code);
  char v59 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  uint64_t v60 = *v1;
  if ((v59 & 1) == 0)
  {
    static Logger.updates.getter();
    uint64_t v70 = v60;
    swift_errorRetain();
    uint64_t v71 = v70;
    swift_errorRetain();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    BOOL v74 = os_log_type_enabled(v72, v73);
    uint64_t v76 = v0[50];
    uint64_t v75 = v0[51];
    uint64_t v77 = v0[49];
    uint64_t v78 = (char *)v0[46];
    if (v74)
    {
      uint64_t v79 = swift_slowAlloc();
      uint64_t v80 = (void *)swift_slowAlloc();
      v171[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 138412546;
      uint64_t v168 = v75;
      uint64_t v81 = *(void **)&v78[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[18] = v81;
      id v82 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v80 = v81;

      *(_WORD *)(v79 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v83 = Error.localizedDescription.getter();
      v0[21] = sub_1000F7290(v83, v84, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "[%@] Finished pre-installed app update authorization task with error: %{public}s", (uint8_t *)v79, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v168, v77);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v88 = (uint64_t (*)(void))v0[1];
    goto LABEL_33;
  }
  swift_errorRelease();
  static Logger.updates.getter();
  uint64_t v61 = v60;
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  BOOL v64 = os_log_type_enabled(v62, v63);
  uint64_t v65 = (char *)v0[46];
  if (v64)
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v66 = 138412290;
    uint64_t v68 = *(void **)&v65[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
    v0[22] = v68;
    id v69 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v67 = v68;

    _os_log_impl((void *)&_mh_execute_header, v62, v63, "[%@] Dialog request ended with unknown error; potential dismiss by user by trying to return to home screen",
      v66,
      0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v62 = *v1;
  }
  uint64_t v85 = v0[52];
  uint64_t v86 = v0[49];
  uint64_t v87 = v0[50];

  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v85, v86);
LABEL_30:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v88 = (uint64_t (*)(void))v0[1];
LABEL_33:
  return v88();
}

uint64_t sub_100054624()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 576) = v1;
  if (v1) {
    uint64_t v2 = sub_100054A28;
  }
  else {
    uint64_t v2 = sub_100054734;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100054734()
{
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v2 = *(NSObject **)(v0 + 368);
  id v3 = *(void **)(v0 + 312);

  sub_100055590(v3, 28271, 0xE200000000000000, v2);
  if (!v1)
  {
    uint64_t v4 = *(void **)(v0 + 368);
    static Logger.updates.getter();
    id v5 = v4;
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void **)(v0 + 552);
      uint64_t v22 = *(void **)(v0 + 536);
      id v23 = *(void **)(v0 + 528);
      id v24 = *(void **)(v0 + 504);
      id v21 = *(void **)(v0 + 368);
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      id v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      *(void *)(v0 + 336) = v8;
      id v11 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v8;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Finished pre-installed app update authorization task", v9, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v12 = (void **)(v0 + 560);
    }
    else
    {
      uint64_t v13 = *(void **)(v0 + 560);
      uint64_t v14 = *(void **)(v0 + 368);

      unint64_t v12 = (void **)(v0 + 536);
      unsigned int v6 = *(NSObject **)(v0 + 528);
      id v3 = *(void **)(v0 + 504);
    }
    id v15 = *v12;
    uint64_t v16 = *(void **)(v0 + 544);
    id v17 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
    uint64_t v18 = *(void *)(v0 + 472);
    uint64_t v19 = *(void *)(v0 + 392);

    v17(v18, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(void (**)(void))(v0 + 8);
    v20();
  }
}

uint64_t sub_100054A28()
{
  BOOL v40 = v0;
  uint64_t v1 = (void *)v0[71];
  uint64_t v2 = (void *)v0[70];
  id v3 = (void *)v0[68];
  uint64_t v4 = (void *)v0[67];
  id v5 = (void *)v0[66];
  unsigned int v6 = (void *)v0[63];
  swift_willThrow();

  type metadata accessor for Code(0);
  v0[20] = 0;
  swift_errorRetain();
  sub_100056258(&qword_1005A3320, type metadata accessor for Code);
  LOBYTE(v1) = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  os_log_type_t v7 = (void *)v0[46];
  if (v1)
  {
    swift_errorRelease();
    static Logger.updates.getter();
    id v8 = v7;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    unint64_t v12 = (char *)v0[46];
    if (v11)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      id v37 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      uint64_t v14 = *(void **)&v12[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[22] = v14;
      id v15 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v37 = v14;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%@] Dialog request ended with unknown error; potential dismiss by user by trying to return to home screen",
        v13,
        0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v9 = v0[46];
    }
    uint64_t v31 = v0[52];
    uint64_t v32 = v0[49];
    uint64_t v33 = v0[50];

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v34 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    static Logger.updates.getter();
    id v16 = v7;
    swift_errorRetain();
    id v17 = v16;
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v22 = v0[50];
    uint64_t v21 = v0[51];
    uint64_t v23 = v0[49];
    id v24 = (char *)v0[46];
    if (v20)
    {
      uint64_t v38 = v0[49];
      uint64_t v25 = swift_slowAlloc();
      os_log_type_t type = v19;
      id v26 = (void *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412546;
      id v27 = *(void **)&v24[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey];
      v0[18] = v27;
      id v28 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v26 = v27;

      *(_WORD *)(v25 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v29 = Error.localizedDescription.getter();
      v0[21] = sub_1000F7290(v29, v30, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, type, "[%@] Finished pre-installed app update authorization task with error: %{public}s", (uint8_t *)v25, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v38);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v34 = (uint64_t (*)(void))v0[1];
  }
  return v34();
}

uint64_t sub_100055018()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = self;
  id v7 = sub_1003F1F68(v6, @"AutomaticUpdateAuthorizations");
  if (!v7) {
    return 1;
  }
  id v8 = v7;
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = *(void *)&v1[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID + 8];
  *(void *)&long long v24 = *(void *)&v1[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID];
  *((void *)&v24 + 1) = v10;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_5;
  }
  unint64_t v11 = sub_100049A08((uint64_t)v26);
  if (v12)
  {
    sub_100031C38(*(void *)(v9 + 56) + 32 * v11, (uint64_t)&v24);
  }
  else
  {
LABEL_5:
    long long v24 = 0u;
    long long v25 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10004C8A0((uint64_t)v26);
  uint64_t v13 = *((void *)&v25 + 1);
  sub_100031BD8((uint64_t)&v24);
  if (!v13) {
    return 1;
  }
  static Logger.updates.getter();
  uint64_t v14 = v1;
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    *(_DWORD *)id v17 = 138412290;
    uint64_t v23 = v3;
    uint64_t v18 = v2;
    os_log_type_t v19 = *(Class *)((char *)&v14->isa + OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey);
    v26[0] = v19;
    id v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v22 = v19;
    uint64_t v2 = v18;
    uint64_t v3 = v23;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%@] This app has already provided an authorization response for automatic updates", v17, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v15 = v14;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t sub_10005530C()
{
  uint64_t v1 = self;
  uint64_t v2 = (__CFString *)String._bridgeToObjectiveC()();
  id v3 = sub_1003F1F68(v1, v2);

  if (!v3
    || (uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v3,
        unint64_t v5 = sub_100035944(v4),
        swift_bridgeObjectRelease(),
        !v5))
  {
    unint64_t v5 = sub_1000429D8((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID + 8);
  if (!*(void *)(v5 + 16))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100049A4C(v7, v6);
  if ((v9 & 1) == 0)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_100031C38(*(void *)(v5 + 56) + 32 * v8, (uint64_t)&v18);
  swift_bridgeObjectRelease();
  if (!*((void *)&v19 + 1))
  {
LABEL_11:
    uint64_t result = sub_100031BD8((uint64_t)&v18);
    goto LABEL_12;
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v11 = *(void *)&v17[0];
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v11 = 0;
LABEL_13:
  uint64_t v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    if (v12 <= 2)
    {
      swift_bridgeObjectRetain();
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      *((void *)&v19 + 1) = sub_100018D68(0, (unint64_t *)&qword_1005A3230);
      *(void *)&long long v18 = isa;
      sub_10000C948(&v18, v17);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1000D2278(v17, v7, v6, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      Class v15 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      os_log_type_t v16 = (__CFString *)String._bridgeToObjectiveC()();
      sub_1003F2074(v1, v15, v16);
    }
    swift_bridgeObjectRelease();
    return v12 > 2;
  }
  return result;
}

void sub_100055590(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v36 - v13;
  id v15 = [a1 selectedActionIdentifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (v16 == a2 && v18 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    static Logger.updates.getter();
    id v28 = a4;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v39 = v4;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      id v37 = (void *)swift_slowAlloc();
      uint64_t v38 = v29;
      *(_DWORD *)uint64_t v31 = 138543362;
      uint64_t v32 = *(Class *)((char *)&v28->isa + OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey);
      uint64_t v42 = v32;
      id v33 = v32;
      id v27 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v37 = v32;

      _os_log_impl((void *)&_mh_execute_header, v27, v30, "[%{public}@] Enabling automatic updates", v31, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v27 = v28;
    }
    goto LABEL_14;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_9;
  }
  static Logger.updates.getter();
  uint64_t v21 = a4;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    long long v24 = (uint8_t *)swift_slowAlloc();
    id v37 = (void *)swift_slowAlloc();
    uint64_t v38 = a4;
    uint64_t v39 = v4;
    *(_DWORD *)long long v24 = 138543362;
    long long v25 = *(Class *)((char *)&v21->isa + OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey);
    uint64_t v42 = v25;
    id v26 = v25;
    id v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v37 = v25;

    _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%{public}@] Disabling automatic updates", v24, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v27 = v21;
  }
  uint64_t v14 = v12;
LABEL_14:
  uint64_t v35 = v40;
  uint64_t v34 = v41;

  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v34);
  sub_10005598C();
}

void sub_10005598C()
{
  uint64_t v1 = (__CFString *)String._bridgeToObjectiveC()();
  CFPropertyListRef v2 = CFPreferencesCopyAppValue(@"AutomaticUpdateAuthorizations", v1);

  if (!v2 || (*(void *)&long long v17 = v2, sub_10001644C(&qword_1005A5E50), !swift_dynamicCast())) {
    sub_1000429D8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID + 8);
  swift_bridgeObjectRetain();
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  uint64_t v18 = sub_100018D68(0, (unint64_t *)&qword_1005A3230);
  *(void *)&long long v17 = isa;
  sub_10000C948(&v17, v16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1000D2278(v16, v4, v3, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Class v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v8 = (__CFString *)String._bridgeToObjectiveC()();
  CFPreferencesSetAppValue(@"AutomaticUpdateAuthorizations", v7, v8);

  uint64_t v9 = (__CFString *)String._bridgeToObjectiveC()();
  uint64_t v10 = (__CFString *)String._bridgeToObjectiveC()();
  CFPropertyListRef v11 = CFPreferencesCopyAppValue(v9, v10);

  if (v11)
  {
    *(void *)&long long v17 = v11;
    sub_10001644C(&qword_1005A5E50);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRetain();
      sub_1000B29CC(v4, v3, &v17);
      swift_bridgeObjectRelease();
      sub_100031BD8((uint64_t)&v17);
      uint64_t v12 = (__CFString *)String._bridgeToObjectiveC()();
      Class v13 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v14 = (__CFString *)String._bridgeToObjectiveC()();
      CFPreferencesSetAppValue(v12, v13, v14);
    }
  }
  id v15 = (__CFString *)String._bridgeToObjectiveC()();
  CFPreferencesAppSynchronize(v15);
}

uint64_t sub_100055DF8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100055EA0;
  return sub_1000529FC();
}

uint64_t sub_100055EA0()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  unint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    unint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t type metadata accessor for PreinstalledAppUpdateAuthorizationTask()
{
  return self;
}

uint64_t sub_100056164()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000561A4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100005040;
  unint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1005A4508 + dword_1005A4508);
  return v5(v2, v3);
}

uint64_t sub_100056258(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000562A0()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000562D8(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType();
  id v15 = (uint64_t *)&v7[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_bundleID];
  uint64_t *v15 = a1;
  v15[1] = a2;
  uint64_t v16 = &v7[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_completion];
  *(void *)uint64_t v16 = a5;
  *((void *)v16 + 1) = a6;
  objc_allocWithZone((Class)type metadata accessor for LogKey());
  long long v17 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v18 = sub_1000FBE18(0, 0xE000000000000000, (uint64_t)"/", 1, 2, 0, 0xE000000000000000, a3, a1, a2, 0);
  swift_bridgeObjectRelease();
  *(void *)&v17[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_logKey] = v18;
  *(void *)&v17[OBJC_IVAR____TtC9appstored38PreinstalledAppUpdateAuthorizationTask_processHandle] = a4;
  id v19 = a4;

  v21.receiver = v17;
  v21.super_class = ObjectType;
  return objc_msgSendSuper2(&v21, "init");
}

uint64_t sub_1000563F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.updates.getter();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "cleanupAfterUninstalledApps(withBundleIDs:)", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    v37[1] = "com.apple.appstored";
    uint64_t v11 = (__CFString *)String._bridgeToObjectiveC()();
    uint64_t v12 = (__CFString *)String._bridgeToObjectiveC()();
    CFPropertyListRef v13 = CFPreferencesCopyAppValue(v11, v12);

    if (!v13 || (*(void *)&long long v42 = v13, sub_10001644C(&qword_1005A5E50), (swift_dynamicCast() & 1) == 0)) {
      unint64_t v45 = 0;
    }
    uint64_t v14 = (__CFString *)String._bridgeToObjectiveC()();
    CFStringRef v38 = @"AutomaticUpdateAuthorizations";
    CFPropertyListRef v15 = CFPreferencesCopyAppValue(@"AutomaticUpdateAuthorizations", v14);

    uint64_t v40 = "gResult\"8@\"NSError\"16";
    if (!v15 || (*(void *)&long long v42 = v15, sub_10001644C(&qword_1005A5E50), (swift_dynamicCast() & 1) == 0)) {
      unint64_t v44 = 0;
    }
    swift_bridgeObjectRetain();
    char v16 = 0;
    char v17 = 0;
    uint64_t v39 = a1;
    uint64_t v18 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v20 = *(v18 - 1);
      uint64_t v19 = *v18;
      if (v45)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v21 = sub_100049A4C(v20, v19);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if (v23)
        {
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v25 = v45;
          unint64_t v41 = v45;
          unint64_t v45 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_1000D33EC();
            uint64_t v25 = v41;
          }
          swift_bridgeObjectRelease();
          sub_10000C948((_OWORD *)(*(void *)(v25 + 56) + 32 * v21), &v42);
          sub_1000B2ED4(v21, v25);
          unint64_t v45 = v25;
          swift_bridgeObjectRelease();
          char v16 = 1;
          goto LABEL_20;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      long long v42 = 0u;
      long long v43 = 0u;
LABEL_20:
      sub_100031BD8((uint64_t)&v42);
      if (v44)
      {
        swift_bridgeObjectRetain();
        unint64_t v26 = sub_100049A4C(v20, v19);
        char v28 = v27;
        swift_bridgeObjectRelease();
        if (v28)
        {
          char v29 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v30 = v44;
          unint64_t v41 = v44;
          unint64_t v44 = 0x8000000000000000;
          if ((v29 & 1) == 0)
          {
            sub_1000D33EC();
            uint64_t v30 = v41;
          }
          swift_bridgeObjectRelease();
          sub_10000C948((_OWORD *)(*(void *)(v30 + 56) + 32 * v26), &v42);
          sub_1000B2ED4(v26, v30);
          unint64_t v44 = v30;
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v42 = 0u;
          long long v43 = 0u;
        }
        swift_bridgeObjectRelease();
        v17 |= *((void *)&v43 + 1) != 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        long long v42 = 0u;
        long long v43 = 0u;
      }
      v18 += 2;
      sub_100031BD8((uint64_t)&v42);
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        if (v45 && !*(void *)(v45 + 16))
        {
          unint64_t v45 = 0;
          swift_bridgeObjectRelease();
        }
        if (v44 && !*(void *)(v44 + 16))
        {
          unint64_t v44 = 0;
          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0) {
            goto LABEL_36;
          }
LABEL_33:
          uint64_t v31 = (__CFString *)String._bridgeToObjectiveC()();
          if (v45)
          {
            swift_bridgeObjectRetain();
            v32.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v32.super.Class isa = 0;
          }
          id v33 = (__CFString *)String._bridgeToObjectiveC()();
          CFPreferencesSetAppValue(v31, v32.super.isa, v33);

          swift_unknownObjectRelease();
          if (v17) {
            goto LABEL_40;
          }
        }
        else
        {
          if (v16) {
            goto LABEL_33;
          }
LABEL_36:
          if ((v17 & 1) == 0)
          {
LABEL_45:
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
LABEL_40:
          if (v44)
          {
            swift_bridgeObjectRetain();
            v34.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v34.super.Class isa = 0;
          }
          uint64_t v35 = (__CFString *)String._bridgeToObjectiveC()();
          CFPreferencesSetAppValue(v38, v34.super.isa, v35);
          swift_unknownObjectRelease();
        }
        uint64_t v36 = (__CFString *)String._bridgeToObjectiveC()();
        CFPreferencesAppSynchronize(v36);

        goto LABEL_45;
      }
    }
  }
  return result;
}

uint64_t sub_100056C54(void *a1)
{
  uint64_t v3 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 bundleID];
  if (v6)
  {
    os_log_type_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    uint64_t v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
    uint64_t v12 = (void *)swift_allocObject();
    void v12[2] = 0;
    v12[3] = 0;
    v12[4] = v8;
    v12[5] = v10;
    void v12[6] = v1;
    id v13 = v1;
    sub_100018FDC((uint64_t)v5, (uint64_t)&unk_1005A4650, (uint64_t)v12);
    return swift_release();
  }
  else
  {
    id v15 = ASDErrorDomain;
    NSString v16 = String._bridgeToObjectiveC()();
    (id)ASDErrorWithDescription();

    return swift_willThrow();
  }
}

uint64_t sub_100056DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[5] = a5;
  void v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for RepairRequest();
  v6[10] = v8;
  v6[11] = *(void *)(v8 - 8);
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_100056F18, 0, 0);
}

uint64_t sub_100056F18()
{
  if ((*(_DWORD *)(v0[6] + OBJC_IVAR____TtC9appstored20ALDApplicationRepair_fairPlayStatus) & 0x80000000) != 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  swift_bridgeObjectRetain();
  RepairRequest.init(bundleID:isBackground:reason:)();
  type metadata accessor for AppLibrary();
  v0[13] = static AppLibrary.current.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100057070;
  uint64_t v2 = v0[12];
  return AppLibrary.handleRepairRequest(_:)(v2);
}

uint64_t sub_100057070()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100057224;
  }
  else {
    uint64_t v2 = sub_1000571A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000571A0()
{
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100057224()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  static Logger.repair.getter();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[8];
    uint64_t v14 = v0[7];
    uint64_t v15 = v0[9];
    unint64_t v3 = v0[5];
    uint64_t v4 = v0[4];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    swift_bridgeObjectRetain();
    v0[2] = sub_1000F7290(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%{public}s] Repair request failed with error: %{public}@", (uint8_t *)v5, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  }
  else
  {
    uint64_t v8 = v0[8];
    uint64_t v7 = v0[9];
    uint64_t v9 = v0[7];
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

id sub_1000575D8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ALDApplicationRepair();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ALDApplicationRepair()
{
  return self;
}

uint64_t sub_1000576A0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000576E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100005040;
  return sub_100056DF8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000577B0(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100057B28())
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_100057CB8();
    sub_10009BBFC(a1);
    return sub_100058070((uint64_t)v11);
  }
  else
  {
    static Logger.skanner.getter();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Story is not sampled", v8, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t sub_100057930(char a1)
{
  uint64_t v13 = &type metadata for Bool;
  v12[0] = a1;
  sub_10005862C((uint64_t)v12, (uint64_t)v10);
  uint64_t v2 = v11;
  if (v11)
  {
    uint64_t v3 = sub_10002FD00(v10, v11);
    uint64_t v4 = *(void *)(v2 - 8);
    __chkstk_darwin(v3);
    uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v4 + 16))(v6);
    uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
    sub_10002E618((uint64_t)v10);
  }
  else
  {
    uint64_t v7 = 0;
  }
  NSString v8 = String._bridgeToObjectiveC()();
  [v1 setValue:v7 forProperty:v8];
  swift_unknownObjectRelease();

  return sub_100031BD8((uint64_t)v12);
}

uint64_t sub_100057B28()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 valueForProperty:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000C948(&v4, v5);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10001644C(&qword_1005A5660);
  if (swift_dynamicCast()) {
    return v4;
  }
  else {
    return 2;
  }
}

void *sub_100057CB8()
{
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 valueForProperty:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000C948(&v7, v8);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_10001644C(&qword_1005A5660);
  if ((swift_dynamicCast() & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v4 = v10;
  if (v10 >> 60 == 15) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = v9;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10001644C(&qword_1005A4680);
  sub_1000586A8(&qword_1005A4698, &qword_1005A46A0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_100034BBC(v5, v4);
  swift_release();
  return *(void **)&v8[0];
}

uint64_t sub_100058070(uint64_t a1)
{
  NSString v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *(void *)&long long v19 = a1;
  sub_10001644C(&qword_1005A4680);
  sub_1000586A8(&qword_1005A4688, &qword_1005A4690);
  uint64_t v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_release();
  if (v7 >> 60 == 15)
  {
    long long v19 = 0u;
    long long v20 = 0u;
  }
  else
  {
    *((void *)&v20 + 1) = &type metadata for Data;
    *(void *)&long long v19 = v5;
    *((void *)&v19 + 1) = v7;
  }
  sub_10005862C((uint64_t)&v19, (uint64_t)v17);
  uint64_t v8 = v18;
  if (v18)
  {
    uint64_t v9 = sub_10002FD00(v17, v18);
    uint64_t v10 = *(void *)(v8 - 8);
    __chkstk_darwin(v9);
    uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v10 + 16))(v12);
    sub_100058694(v5, v7);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    sub_10002E618((uint64_t)v17);
  }
  else
  {
    sub_100058694(v5, v7);
    uint64_t v13 = 0;
  }
  NSString v14 = String._bridgeToObjectiveC()();
  [v2 setValue:v13 forProperty:v14];
  swift_unknownObjectRelease();

  sub_100034BBC(v5, v7);
  return sub_100031BD8((uint64_t)&v19);
}

uint64_t type metadata accessor for SkannerStory()
{
  return self;
}

uint64_t sub_10005862C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C(&qword_1005A5660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100058694(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001EC28(a1, a2);
  }
  return a1;
}

uint64_t sub_1000586A8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002E5A8(&qword_1005A4680);
    sub_100058728(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100058728(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SkannerEvent();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10005876C(uint64_t a1, int a2, unint64_t a3)
{
  unint64_t v19 = a3;
  HIDWORD(v17) = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001644C(&qword_1005A46A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100488170;
  unint64_t v20 = 0x64695F79726F7473;
  unint64_t v21 = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  UUID.init()();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v9;
  *(void *)(inited + 80) = v11;
  unint64_t v20 = 0xD000000000000016;
  unint64_t v21 = 0x800000010044B450;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 16_Block_object_dispose(&a9, 8) = &type metadata for Int64;
  *(void *)(inited + 144) = a1;
  unint64_t v20 = 0xD000000000000010;
  unint64_t v21 = 0x800000010044B430;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 240) = &type metadata for Bool;
  *(unsigned char *)(inited + 216) = BYTE4(v17);
  unint64_t v20 = 0xD000000000000011;
  unint64_t v21 = 0x800000010044B410;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 312) = &type metadata for Bool;
  *(unsigned char *)(inited + 28_Block_object_dispose(&a9, 8) = 0;
  sub_100042894(inited);
  id v12 = objc_allocWithZone(v18);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = [v12 initWithPropertyValues:isa];

  id v15 = v14;
  sub_1000577B0(v19);

  return v15;
}

void *sub_1000589FC()
{
  sub_1000BAF94(0, 5, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v2 + 1;
  if (v2 >= v1 >> 1)
  {
    sub_1000BAF94(v1 > 1, v2 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v3;
  uint64_t v4 = &_swiftEmptyArrayStorage[2 * v2];
  v4[4] = 0x64695F79726F7473;
  v4[5] = 0xE800000000000000;
  unint64_t v5 = _swiftEmptyArrayStorage[3];
  int64_t v6 = v2 + 2;
  if (v3 >= v5 >> 1)
  {
    sub_1000BAF94(v5 > 1, v6, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v6;
  unint64_t v7 = &_swiftEmptyArrayStorage[2 * v3];
  v7[4] = 0xD000000000000016;
  void v7[5] = 0x800000010044B450;
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v9 + 1;
  if (v9 >= v8 >> 1)
  {
    sub_1000BAF94(v8 > 1, v9 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v10;
  uint64_t v11 = &_swiftEmptyArrayStorage[2 * v9];
  id v11[4] = 0xD000000000000010;
  void v11[5] = 0x800000010044B430;
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  int64_t v13 = v9 + 2;
  if (v10 >= v12 >> 1)
  {
    sub_1000BAF94(v12 > 1, v13, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v13;
  id v14 = &_swiftEmptyArrayStorage[2 * v10];
  v14[4] = 0xD000000000000011;
  v14[5] = 0x800000010044B410;
  unint64_t v16 = _swiftEmptyArrayStorage[2];
  unint64_t v15 = _swiftEmptyArrayStorage[3];
  if (v16 >= v15 >> 1)
  {
    sub_1000BAF94(v15 > 1, v16 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v16 + 1;
  uint64_t v17 = (char *)&_swiftEmptyArrayStorage[2 * v16];
  strcpy(v17 + 32, "pending_events");
  v17[47] = -18;
  return result;
}

Swift::Int sub_100058F24()
{
  return Hasher._finalize()();
}

id sub_100059024()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for StoreKitExternalGateway()) init];
  qword_1005B14B8 = (uint64_t)result;
  return result;
}

uint64_t sub_1000590B0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  __chkstk_darwin(v10);
  unint64_t v12 = &v29[-v11];
  uint64_t v13 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v16 = sub_100035944(a1);
  if (v16 && (sub_10005AA5C(v16, v34), sub_10005AE40((uint64_t)v34, (uint64_t)&v35), (void)v36))
  {
    uint64_t v30 = a2;
    uint64_t v31 = v8;
    *(_OWORD *)CFStringRef v38 = v35;
    *(_OWORD *)&v38[16] = v36;
    uint64_t v17 = v37;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v32[0] = *(_OWORD *)v38;
    v32[1] = *(_OWORD *)&v38[16];
    uint64_t v33 = v17;
    sub_10005AEA8();
    uint64_t v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v23 = v22;
    swift_release();
    long long v39 = *(_OWORD *)&v38[8];
    sub_10004CBA8((uint64_t)&v39);
    v40[0] = v17;
    sub_10005AEFC((uint64_t)v40);
    uint64_t v24 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v15, 1, 1, v24);
    uint64_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = 0;
    v25[3] = 0;
    uint64_t v26 = v30;
    v25[4] = v4;
    v25[5] = v26;
    v25[6] = a3;
    v25[7] = v21;
    v25[8] = v23;
    id v27 = v4;
    swift_bridgeObjectRetain();
    sub_100018FDC((uint64_t)v15, (uint64_t)&unk_1005A46F0, (uint64_t)v25);
    return swift_release();
  }
  else
  {
    static Logger.storeKit.getter();
    swift_bridgeObjectRetain_n();
    Class v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v31 = v8;
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(void *)&v32[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)CFStringRef v38 = sub_1000F7290(a2, a3, (uint64_t *)v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to extract token family information from %s buy response", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v31);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
    }
  }
}

uint64_t sub_1000596E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  uint64_t v9 = type metadata accessor for Logger();
  v8[21] = v9;
  v8[22] = *(void *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  return _swift_task_switch(sub_1000597BC, 0, 0);
}

uint64_t sub_1000597BC()
{
  os_log_type_t v19 = v0;
  static Logger.storeKit.getter();
  swift_bridgeObjectRetain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = v0[22];
    uint64_t v16 = v0[21];
    uint64_t v17 = v0[24];
    unint64_t v3 = v0[18];
    uint64_t v4 = v0[17];
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[16] = sub_1000F7290(v4, v3, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Handing off external purchase token family info for %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int64_t v6 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v6(v17, v16);
  }
  else
  {
    uint64_t v7 = v0[24];
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[22];
    swift_bridgeObjectRelease_n();

    int64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[25] = v6;
  uint64_t v10 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[26] = isa;
  NSString v12 = String._bridgeToObjectiveC()();
  v0[27] = v12;
  v0[2] = v0;
  v0[3] = sub_100059A94;
  uint64_t v13 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100059E50;
  v0[13] = &unk_100512E18;
  v0[14] = v13;
  [v10 handleNewTokenFamily:isa bundleID:v12 withReply:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100059A94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 224) = v1;
  if (v1) {
    os_log_type_t v2 = sub_100059C18;
  }
  else {
    os_log_type_t v2 = sub_100059BA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100059BA4()
{
  uint64_t v1 = *(void **)(v0 + 208);

  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100059C18()
{
  uint64_t v17 = v0;
  uint64_t v1 = (void *)v0[27];
  os_log_type_t v2 = (void *)v0[26];
  swift_willThrow();

  static Logger.storeKit.getter();
  swift_bridgeObjectRetain_n();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v14 = v0[23];
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[25];
    uint64_t v13 = v0[21];
    uint64_t v6 = v0[17];
    unint64_t v5 = v0[18];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[15] = sub_1000F7290(v6, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to hand off new token family for %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();

    v15(v14, v13);
  }
  else
  {
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[25];
    uint64_t v9 = v0[23];
    uint64_t v10 = v0[21];
    swift_errorRelease();
    swift_bridgeObjectRelease_n();

    v8(v9, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100059E50(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10001644C(&qword_1005A4E40);
    uint64_t v4 = swift_allocError();
    *unint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t type metadata accessor for StoreKitExternalGateway()
{
  return self;
}

uint64_t sub_100059FF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_10001644C(&qword_1005A4720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FD00(a1, a1[3]);
  sub_10005B4A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10005A164(char *a1, char *a2)
{
  return sub_1000F0A98(*a1, *a2);
}

Swift::Int sub_10005A170()
{
  return Hasher._finalize()();
}

uint64_t sub_10005A1FC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005A274()
{
  return Hasher._finalize()();
}

uint64_t sub_10005A2FC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005102E8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10005A35C(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000015;
  if (*v1) {
    unint64_t v2 = 0x7079546E656B6F74;
  }
  unint64_t v3 = 0x800000010044A610;
  if (*v1) {
    unint64_t v3 = 0xE900000000000065;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10005A3A4()
{
  if (*v0) {
    return 0x7079546E656B6F74;
  }
  else {
    return 0xD000000000000015;
  }
}

uint64_t sub_10005A3E8@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005102E8, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10005A44C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10005A458(uint64_t a1)
{
  unint64_t v2 = sub_10005B4A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005A494(uint64_t a1)
{
  unint64_t v2 = sub_10005B4A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005A4D0(void *a1)
{
  return sub_100059FF0(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10005A4F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10001644C(&qword_1005A46F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002FD00(a1, a1[3]);
  sub_10005B38C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (*(void *)(*(void *)(v3 + 32) + 16))
    {
      uint64_t v11 = *(void *)(v3 + 32);
      v10[15] = 3;
      sub_10001644C(&qword_1005A4708);
      sub_10005B3E0();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005A6CC(unsigned __int8 *a1, char *a2)
{
  return sub_1000F08C0(*a1, *a2);
}

Swift::Int sub_10005A6D8()
{
  return sub_100058F24();
}

uint64_t sub_10005A6E0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005A7C8()
{
  return sub_10003BABC();
}

unint64_t sub_10005A7D0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005BA40(*a1);
  *a2 = result;
  return result;
}

void sub_10005A800(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEE006E656B6F5465;
  uint64_t v3 = 0x7669746341736168;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED00006449796C69;
      uint64_t v3 = 0x6D61466E656B6F74;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0xD000000000000013;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0x800000010044A650;
      break;
    case 3:
      strcpy((char *)a1, "tokenEntries");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v2;
      break;
  }
}

unint64_t sub_10005A8C0()
{
  unint64_t result = 0x7669746341736168;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6D61466E656B6F74;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x746E456E656B6F74;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10005A974@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005BA40(a1);
  *a2 = result;
  return result;
}

void sub_10005A99C(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10005A9A8(uint64_t a1)
{
  unint64_t v2 = sub_10005B38C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005A9E4(uint64_t a1)
{
  unint64_t v2 = sub_10005B38C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005AA20(void *a1)
{
  return sub_10005A4F0(a1);
}

uint64_t sub_10005AA5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_11;
  }
  unint64_t v4 = sub_100049A4C(0x6D61466E656B6F74, 0xED00006449796C69);
  if ((v5 & 1) == 0) {
    goto LABEL_11;
  }
  sub_100031C38(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v31);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v6 = v30;
  if (!*(void *)(a1 + 16)
    || (uint64_t v7 = v29, v8 = sub_100049A4C(0xD000000000000013, 0x800000010044A650), (v9 & 1) == 0)
    || (sub_100031C38(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v31), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v14 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v10 = 0;
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  uint64_t v10 = v29;
  if (*(void *)(a1 + 16) && (unint64_t v11 = sub_100049A4C(0x746E456E656B6F74, 0xEC00000073656972), (v12 & 1) != 0))
  {
    sub_100031C38(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v32 + 1))
  {
    sub_100031BD8((uint64_t)&v31);
    goto LABEL_18;
  }
  sub_10001644C(&qword_1005A3978);
  if (!swift_dynamicCast())
  {
LABEL_18:
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  uint64_t v16 = v29;
LABEL_19:
  uint64_t v17 = v16[2];
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    uint64_t v15 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v19 = v16[v18 + 4];
      if (*(void *)(v19 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v20 = sub_100049A4C(0xD000000000000015, 0x800000010044A610);
        if (v21)
        {
          sub_100031C38(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v31);
          if (swift_dynamicCast())
          {
            if (*(void *)(v19 + 16)
              && (unint64_t v22 = sub_100049A4C(0x7079546E656B6F74, 0xE900000000000065), (v23 & 1) != 0))
            {
              sub_100031C38(*(void *)(v19 + 56) + 32 * v22, (uint64_t)&v31);
            }
            else
            {
              long long v31 = 0u;
              long long v32 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v32 + 1))
            {
              if (swift_dynamicCast())
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v15 = sub_1000E8198(0, v15[2] + 1, 1, v15);
                }
                unint64_t v25 = v15[2];
                unint64_t v24 = v15[3];
                unint64_t v26 = v25 + 1;
                if (v25 >= v24 >> 1)
                {
                  char v28 = sub_1000E8198((void *)(v24 > 1), v25 + 1, 1, v15);
                  unint64_t v26 = v25 + 1;
                  uint64_t v15 = v28;
                }
                _OWORD v15[2] = v26;
                id v27 = &v15[4 * v25];
                v27[4] = v29;
                v27[5] = v30;
                v27[6] = v29;
                v27[7] = v30;
                goto LABEL_22;
              }
            }
            else
            {
              sub_100031BD8((uint64_t)&v31);
            }
          }
        }
        swift_bridgeObjectRelease();
      }
LABEL_22:
      if (v17 == ++v18)
      {
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
  }
  uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_41:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v14 = 1;
LABEL_12:
  *a2 = v14;
  a2[1] = (uint64_t)v7;
  a2[2] = v6;
  a2[3] = (uint64_t)v10;
  a2[4] = (uint64_t)v15;
  return result;
}

uint64_t sub_10005AE40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C(&qword_1005A46D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005AEA8()
{
  unint64_t result = qword_1005A46E0;
  if (!qword_1005A46E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005A46E0);
  }
  return result;
}

uint64_t sub_10005AEFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005AF28()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  sub_10001EC80(*(void *)(v0 + 56), *(void *)(v0 + 64));
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10005AF78(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = sub_100005040;
  return sub_1000596E8(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t destroy for ExternalPurchaseTokenV2Family.Token()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ExternalPurchaseTokenV2Family.Token(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ExternalPurchaseTokenV2Family.Token(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ExternalPurchaseTokenV2Family.Token(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Family.Token()
{
  return &type metadata for ExternalPurchaseTokenV2Family.Token;
}

uint64_t destroy for ExternalPurchaseTokenV2Family()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExternalPurchaseTokenV2Family(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExternalPurchaseTokenV2Family(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExternalPurchaseTokenV2Family(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExternalPurchaseTokenV2Family(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExternalPurchaseTokenV2Family(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Family()
{
  return &type metadata for ExternalPurchaseTokenV2Family;
}

unint64_t sub_10005B38C()
{
  unint64_t result = qword_1005A4700;
  if (!qword_1005A4700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4700);
  }
  return result;
}

unint64_t sub_10005B3E0()
{
  unint64_t result = qword_1005A4710;
  if (!qword_1005A4710)
  {
    sub_10002E5A8(&qword_1005A4708);
    sub_10005B454();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4710);
  }
  return result;
}

unint64_t sub_10005B454()
{
  unint64_t result = qword_1005A4718;
  if (!qword_1005A4718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4718);
  }
  return result;
}

unint64_t sub_10005B4A8()
{
  unint64_t result = qword_1005A4728;
  if (!qword_1005A4728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4728);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ExternalPurchaseTokenV2Family.Token.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExternalPurchaseTokenV2Family.Token.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005B658);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10005B680(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Family.Token.CodingKeys()
{
  return &type metadata for ExternalPurchaseTokenV2Family.Token.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ExternalPurchaseTokenV2Family.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExternalPurchaseTokenV2Family.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005B7F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Family.CodingKeys()
{
  return &type metadata for ExternalPurchaseTokenV2Family.CodingKeys;
}

unint64_t sub_10005B834()
{
  unint64_t result = qword_1005A4730;
  if (!qword_1005A4730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4730);
  }
  return result;
}

unint64_t sub_10005B88C()
{
  unint64_t result = qword_1005A4738;
  if (!qword_1005A4738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4738);
  }
  return result;
}

unint64_t sub_10005B8E4()
{
  unint64_t result = qword_1005A4740;
  if (!qword_1005A4740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4740);
  }
  return result;
}

unint64_t sub_10005B93C()
{
  unint64_t result = qword_1005A4748;
  if (!qword_1005A4748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4748);
  }
  return result;
}

unint64_t sub_10005B994()
{
  unint64_t result = qword_1005A4750;
  if (!qword_1005A4750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4750);
  }
  return result;
}

unint64_t sub_10005B9EC()
{
  unint64_t result = qword_1005A4758;
  if (!qword_1005A4758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4758);
  }
  return result;
}

unint64_t sub_10005BA40(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100510338, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t sub_10005BA8C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10005E67C(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + _Block_object_dispose(&a9, 8) = v4 & 1;
  return result;
}

void sub_10005BAC0(void *a1@<X8>)
{
  *a1 = &off_1005103B8;
}

id sub_10005BAD0(uint64_t a1)
{
  Swift::String v2 = &v1[OBJC_IVAR____TtC9appstored10ASEMetrics_enqueueTransactionID];
  *(void *)Swift::String v2 = 0xD000000000000025;
  *((void *)v2 + 1) = 0x800000010044CCC0;
  unint64_t v3 = &v1[OBJC_IVAR____TtC9appstored10ASEMetrics_flushTransactionID];
  *(void *)unint64_t v3 = 0xD000000000000023;
  *((void *)v3 + 1) = 0x800000010044CCF0;
  unint64_t v4 = 0xE900000000000064;
  uint64_t v5 = 0x65726F7473707041;
  switch(a1)
  {
    case 0:
      break;
    case 1:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x656461637241;
      break;
    case 2:
      unint64_t v4 = 0xE900000000000065;
      uint64_t v5 = 0x72696673736F7243;
      break;
    case 3:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v5 = 5590596;
      break;
    default:
      uint64_t v15 = a1;
      uint64_t v13 = v1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x10005BCF0);
  }
  self;
  unsigned int v6 = v1;
  id v7 = sub_10030B11C();
  id v8 = objc_allocWithZone((Class)AMSMetrics);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithContainerID:v9 bag:v7];

  *(void *)&v6[OBJC_IVAR____TtC9appstored10ASEMetrics_amsMetrics] = v10;
  [v10 setFlushTimerEnabled:0];
  unint64_t v11 = (uint64_t *)&v6[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
  *unint64_t v11 = v5;
  v11[1] = v4;

  v14.receiver = v6;
  v14.super_class = (Class)type metadata accessor for ASEMetrics();
  return objc_msgSendSuper2(&v14, "init");
}

uint64_t sub_10005BEAC(void *a1, char a2, void *aBlock, void *a4)
{
  *(unsigned char *)(v4 + 56) = a2;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  *(void *)(v4 + 32) = _Block_copy(aBlock);
  id v7 = a1;
  id v8 = a4;
  return _swift_task_switch(sub_10005BF3C, 0, 0);
}

uint64_t sub_10005BF3C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  sub_10001644C(&qword_1005A43D0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100488A80;
  *(void *)(v2 + 32) = v1;
  uint64_t v7 = v2;
  specialized Array._endMutation()();
  *(void *)(v0 + 40) = v7;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10005C02C;
  char v5 = *(unsigned char *)(v0 + 56);
  return sub_10005C1A0(v7, v5);
}

uint64_t sub_10005C02C()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 32);
  uint64_t v2 = *(void **)(*v0 + 24);
  id v3 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  v1[2](v1);
  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_10005C1A0(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 289) = a2;
  *(void *)(v3 + 16_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v3 + 176) = v2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 184) = v4;
  *(void *)(v3 + 192) = *(void *)(v4 - 8);
  *(void *)(v3 + 200) = swift_task_alloc();
  *(void *)(v3 + 20_Block_object_dispose(&a9, 8) = swift_task_alloc();
  *(void *)(v3 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_10005C280, 0, 0);
}

uint64_t sub_10005C280()
{
  uint64_t v51 = v0;
  unint64_t v1 = *(void *)(v0 + 168);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v2 = *(char **)(v0 + 176);
    if (v29) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(char **)(v0 + 176);
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_3:
      uint64_t v3 = self;
      *(void *)(v0 + 224) = v3;
      uint64_t v4 = &v2[OBJC_IVAR____TtC9appstored10ASEMetrics_enqueueTransactionID];
      *(void *)(v0 + 232) = *(void *)&v2[OBJC_IVAR____TtC9appstored10ASEMetrics_enqueueTransactionID];
      *(void *)(v0 + 240) = *((void *)v4 + 1);
      NSString v5 = String._bridgeToObjectiveC()();
      sub_100015A88(v3, v5);

      static Logger.metrics.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v6 = v2;
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        os_log_type_t v46 = v8;
        NSString v9 = *(char **)(v0 + 176);
        uint64_t v10 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446466;
        uint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
        unint64_t v12 = *(void *)&v9[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 144) = sub_1000F7290(v11, v12, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v10 + 12) = 2082;
        if (v1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v13 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v18 = *(void *)(v0 + 192);
        uint64_t v43 = *(void *)(v0 + 216);
        uint64_t v44 = *(void *)(v0 + 184);
        *(void *)(v0 + 152) = v13;
        uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v50 = v19;
        v20._countAndFlagsBits = 32;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        v21._countAndFlagsBits = 0x746E657665;
        v21._object = (void *)0xE500000000000000;
        String.append(_:)(v21);
        if (v13 == 1) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = 115;
        }
        if (v13 == 1) {
          unint64_t v23 = 0xE000000000000000;
        }
        else {
          unint64_t v23 = 0xE100000000000000;
        }
        unint64_t v24 = v23;
        String.append(_:)(*(Swift::String *)&v22);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 160) = sub_1000F7290(v49, v50, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v7, v46, "[%{public}s] Enqueueing %{public}s", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
        v17(v43, v44);
      }
      else
      {
        uint64_t v14 = *(void *)(v0 + 216);
        uint64_t v15 = *(void *)(v0 + 184);
        uint64_t v16 = *(void *)(v0 + 192);

        swift_bridgeObjectRelease_n();
        uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
        v17(v14, v15);
      }
      *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v17;
      unint64_t v25 = *(void **)(*(void *)(v0 + 176) + OBJC_IVAR____TtC9appstored10ASEMetrics_amsMetrics);
      sub_10005E298();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v27 = [v25 promiseForEnqueueingEvents:isa];
      *(void *)(v0 + 256) = v27;

      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 288;
      *(void *)(v0 + 24) = sub_10005C8F4;
      uint64_t v28 = swift_continuation_init();
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000;
      *(void *)(v0 + 96) = sub_100073DBC;
      *(void *)(v0 + 104) = &unk_100513070;
      *(void *)(v0 + 112) = v28;
      [v27 resultWithTimeout:v0 + 80 completion:120.0];
      return _swift_continuation_await(v0 + 16);
    }
  }
  static Logger.metrics.getter();
  uint64_t v30 = v2;
  long long v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 208);
  uint64_t v35 = *(void *)(v0 + 184);
  uint64_t v36 = *(void *)(v0 + 192);
  uint64_t v37 = *(char **)(v0 + 176);
  if (v33)
  {
    uint64_t v47 = *(void *)(v0 + 208);
    CFStringRef v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)CFStringRef v38 = 136446210;
    uint64_t v45 = v35;
    uint64_t v39 = *(void *)&v37[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v40 = *(void *)&v37[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 136) = sub_1000F7290(v39, v40, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%{public}s] No AMSMetricsEvents to enqueue", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v47, v45);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

uint64_t sub_10005C8F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 264) = v1;
  if (v1) {
    uint64_t v2 = sub_10005CCC4;
  }
  else {
    uint64_t v2 = sub_10005CA04;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005CA04()
{
  if (*(unsigned char *)(v0 + 289) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10005CB14;
    return sub_10005D6AC();
  }
  else
  {

    uint64_t v3 = *(void *)(v0 + 224);
    NSString v4 = String._bridgeToObjectiveC()();
    sub_100015B94(v3, v4);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    NSString v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10005CB14()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10005CFDC;
  }
  else {
    uint64_t v2 = sub_10005CC28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005CC28()
{
  uint64_t v1 = *(void *)(v0 + 224);
  NSString v2 = String._bridgeToObjectiveC()();
  sub_100015B94(v1, v2);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10005CCC4()
{
  uint64_t v25 = v0;
  swift_willThrow();
  uint64_t v1 = *(void **)(v0 + 176);
  static Logger.metrics.getter();
  id v2 = v1;
  swift_errorRetain();
  id v3 = v2;
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v22 = *(void *)(v0 + 200);
    unint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    Swift::String v20 = *(void **)(v0 + 256);
    uint64_t v6 = *(char **)(v0 + 176);
    uint64_t v21 = *(void *)(v0 + 184);
    uint64_t v7 = swift_slowAlloc();
    os_log_type_t v8 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v9 = *(void *)&v6[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v10 = *(void *)&v6[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = sub_1000F7290(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v7 + 12) = 2114;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 120) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] Failed to enqueue events due to error: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v23(v22, v21);
  }
  else
  {
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v15 = *(void **)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 184);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v12(v13, v14);
  }
  uint64_t v16 = *(void *)(v0 + 224);
  NSString v17 = String._bridgeToObjectiveC()();
  sub_100015B94(v16, v17);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_10005CFDC()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 176);
  static Logger.metrics.getter();
  id v2 = v1;
  swift_errorRetain();
  id v3 = v2;
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v22 = *(void *)(v0 + 200);
    unint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    Swift::String v20 = *(void **)(v0 + 256);
    uint64_t v6 = *(char **)(v0 + 176);
    uint64_t v21 = *(void *)(v0 + 184);
    uint64_t v7 = swift_slowAlloc();
    os_log_type_t v8 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v9 = *(void *)&v6[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v10 = *(void *)&v6[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = sub_1000F7290(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v7 + 12) = 2114;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 120) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] Failed to enqueue events due to error: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v23(v22, v21);
  }
  else
  {
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v15 = *(void **)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 184);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v12(v13, v14);
  }
  uint64_t v16 = *(void *)(v0 + 224);
  NSString v17 = String._bridgeToObjectiveC()();
  sub_100015B94(v16, v17);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_10005D470(int a1, char a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  sub_10005E298();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v7;
  a4;
  os_log_type_t v8 = (void *)swift_task_alloc();
  v4[5] = v8;
  void *v8 = v4;
  v8[1] = sub_10005D550;
  return sub_10005C1A0(v7, a2);
}

uint64_t sub_10005D550()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 24);
  id v2 = *(void **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  v1[2](v1);
  _Block_release(v1);
  id v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_10005D6AC()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  return _swift_task_switch(sub_10005D77C, 0, 0);
}

uint64_t sub_10005D77C()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(char **)(v0 + 160);
  uint64_t v2 = self;
  *(void *)(v0 + 200) = v2;
  id v3 = &v1[OBJC_IVAR____TtC9appstored10ASEMetrics_flushTransactionID];
  *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = *(void *)&v1[OBJC_IVAR____TtC9appstored10ASEMetrics_flushTransactionID];
  *(void *)(v0 + 216) = *((void *)v3 + 1);
  NSString v4 = String._bridgeToObjectiveC()();
  sub_100015A88(v2, v4);

  static Logger.metrics.getter();
  uint64_t v5 = v1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = *(char **)(v0 + 160);
    uint64_t v21 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 192);
    unint64_t v19 = v8;
    uint64_t v20 = *(void *)(v0 + 176);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    uint64_t v10 = *(void *)&v8[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v11 = *(void *)&v8[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 152) = sub_1000F7290(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] Flushing events", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v12(v22, v21);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 176);

    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  *(void *)(v0 + 224) = v12;
  id v16 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(v0 + 160)
                                                              + OBJC_IVAR____TtC9appstored10ASEMetrics_amsMetrics), "flush", v19));
  *(void *)(v0 + 232) = v16;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_10005DA90;
  uint64_t v17 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000;
  *(void *)(v0 + 96) = sub_100028428;
  *(void *)(v0 + 104) = &unk_100513058;
  *(void *)(v0 + 112) = v17;
  [v16 resultWithTimeout:v0 + 80 completion:120.0];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10005DA90()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    uint64_t v2 = sub_10005DECC;
  }
  else {
    uint64_t v2 = sub_10005DBA0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005DBA0()
{
  uint64_t v35 = v0;
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = (void *)v0[15];
  static Logger.metrics.getter();
  id v3 = v2;
  id v4 = v1;
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v30 = v0[23];
    long long v31 = (void (*)(uint64_t, uint64_t))v0[28];
    uint64_t v28 = (void *)v0[29];
    os_log_type_t v8 = (char *)v0[20];
    uint64_t v29 = v0[21];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v10 = *(void *)&v8[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v11 = *(void *)&v8[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain();
    v0[16] = sub_1000F7290(v10, v11, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v9 + 12) = 2082;
    uint64_t v12 = Int.init(truncating:)();
    v0[17] = v12;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v34 = v13;
    v14._countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 0x746E657665;
    v15._object = (void *)0xE500000000000000;
    String.append(_:)(v15);
    if (v12 == 1) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = 115;
    }
    if (v12 == 1) {
      unint64_t v17 = 0xE000000000000000;
    }
    else {
      unint64_t v17 = 0xE100000000000000;
    }
    unint64_t v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    v0[18] = sub_1000F7290(v33, v34, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] Flushed %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v31(v30, v29);
  }
  else
  {
    uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[28];
    unint64_t v19 = (void *)v0[29];
    uint64_t v21 = v0[23];
    uint64_t v23 = (void *)v0[20];
    uint64_t v22 = v0[21];

    v20(v21, v22);
  }
  uint64_t v24 = v0[25];
  NSString v25 = String._bridgeToObjectiveC()();
  sub_100015B94(v24, v25);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_10005DECC()
{
  uint64_t v1 = (void *)v0[29];
  uint64_t v2 = v0[25];
  swift_willThrow();

  NSString v3 = String._bridgeToObjectiveC()();
  sub_100015B94(v2, v3);

  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10005E0F0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  id v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *id v4 = v2;
  v4[1] = sub_100055EA0;
  return sub_10005D6AC();
}

id sub_10005E1C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASEMetrics();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ASEMetrics()
{
  return self;
}

unint64_t sub_10005E298()
{
  unint64_t result = qword_1005A47B8;
  if (!qword_1005A47B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005A47B8);
  }
  return result;
}

uint64_t sub_10005E2D8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005E318()
{
  objc_super v2 = *(const void **)(v0 + 16);
  NSString v3 = *(void **)(v0 + 24);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *id v4 = v1;
  v4[1] = sub_1000184D8;
  id v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1005A47C0 + dword_1005A47C0);
  return v5(v2, v3);
}

uint64_t sub_10005E3D0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  id v5 = *(void **)(v0 + 32);
  id v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000184D8;
  uint64_t v7 = (uint64_t (*)(int, char, void *, void *))((char *)&dword_1005A47D0 + dword_1005A47D0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10005E4A0()
{
  _Block_release(*(const void **)(v0 + 32));
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005E4E8()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  id v5 = *(void **)(v0 + 32);
  id v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100005040;
  uint64_t v7 = (uint64_t (*)(void *, char, void *, void *))((char *)&dword_1005A47E0 + dword_1005A47E0);
  return v7(v2, v3, v5, v4);
}

ValueMetadata *type metadata accessor for ASEMetricsType()
{
  return &type metadata for ASEMetricsType;
}

unint64_t sub_10005E5C8()
{
  unint64_t result = qword_1005A4800;
  if (!qword_1005A4800)
  {
    sub_10002E5A8(&qword_1005A4808);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4800);
  }
  return result;
}

unint64_t sub_10005E628()
{
  unint64_t result = qword_1005A4810;
  if (!qword_1005A4810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4810);
  }
  return result;
}

unint64_t sub_10005E67C(unint64_t result)
{
  if (result > 3) {
    return 0;
  }
  return result;
}

id sub_10005E68C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AppInstallMetrics()) init];
  qword_1005B14C0 = (uint64_t)result;
  return result;
}

uint64_t sub_10005E718(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 824) = v6;
  *(void *)(v7 + 816) = a6;
  *(void *)(v7 + 80_Block_object_dispose(&a9, 8) = a5;
  *(void *)(v7 + 800) = a4;
  *(unsigned char *)(v7 + 1436) = a3;
  *(void *)(v7 + 792) = a2;
  *(void *)(v7 + 784) = a1;
  sub_10001644C(&qword_1005A4640);
  *(void *)(v7 + 832) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AppInstallationEvent();
  *(void *)(v7 + 840) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 84_Block_object_dispose(&a9, 8) = v9;
  *(void *)(v7 + 856) = *(void *)(v9 + 64);
  *(void *)(v7 + 864) = swift_task_alloc();
  *(void *)(v7 + 872) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AppInstallationEligibility();
  *(void *)(v7 + 880) = v10;
  *(void *)(v7 + 88_Block_object_dispose(&a9, 8) = *(void *)(v10 - 8);
  *(void *)(v7 + 896) = swift_task_alloc();
  *(void *)(v7 + 904) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  *(void *)(v7 + 912) = v11;
  *(void *)(v7 + 920) = *(void *)(v11 - 8);
  *(void *)(v7 + 92_Block_object_dispose(&a9, 8) = swift_task_alloc();
  *(void *)(v7 + 936) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  *(void *)(v7 + 944) = v12;
  *(void *)(v7 + 952) = *(void *)(v12 - 8);
  *(void *)(v7 + 960) = swift_task_alloc();
  *(void *)(v7 + 96_Block_object_dispose(&a9, 8) = swift_task_alloc();
  *(void *)(v7 + 976) = swift_task_alloc();
  *(void *)(v7 + 984) = swift_task_alloc();
  *(void *)(v7 + 992) = swift_task_alloc();
  *(void *)(v7 + 1000) = swift_task_alloc();
  *(void *)(v7 + 100_Block_object_dispose(&a9, 8) = swift_task_alloc();
  *(void *)(v7 + 1016) = swift_task_alloc();
  *(void *)(v7 + 1024) = swift_task_alloc();
  *(void *)(v7 + 1032) = swift_task_alloc();
  *(void *)(v7 + 1040) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for AccountIdentity();
  *(void *)(v7 + 104_Block_object_dispose(&a9, 8) = v13;
  *(void *)(v7 + 1056) = *(void *)(v13 - 8);
  *(void *)(v7 + 1064) = swift_task_alloc();
  *(void *)(v7 + 1072) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for AppInstallType();
  *(void *)(v7 + 1080) = v14;
  *(void *)(v7 + 108_Block_object_dispose(&a9, 8) = *(void *)(v14 - 8);
  *(void *)(v7 + 1096) = swift_task_alloc();
  *(void *)(v7 + 1104) = swift_task_alloc();
  *(void *)(v7 + 1112) = swift_task_alloc();
  *(void *)(v7 + 1120) = swift_task_alloc();
  *(void *)(v7 + 112_Block_object_dispose(&a9, 8) = swift_task_alloc();
  *(void *)(v7 + 1136) = swift_task_alloc();
  *(void *)(v7 + 1144) = swift_task_alloc();
  *(void *)(v7 + 1152) = swift_task_alloc();
  sub_10001644C(&qword_1005A4850);
  *(void *)(v7 + 1160) = swift_task_alloc();
  *(void *)(v7 + 116_Block_object_dispose(&a9, 8) = swift_task_alloc();
  return _swift_task_switch(sub_10005EB48, 0, 0);
}

uint64_t sub_10005EB48()
{
  v0[147] = self;
  id v1 = sub_10030B11C();
  v0[148] = v1;
  v0[10] = v0;
  v0[15] = (char *)v0 + 1435;
  v0[11] = sub_10005EC7C;
  uint64_t v2 = swift_continuation_init();
  v0[39] = _NSConcreteStackBlock;
  v0[40] = 0x40000000;
  v0[41] = sub_100073DBC;
  v0[42] = &unk_100513210;
  v0[43] = v2;
  sub_10030CFAC(v1, @"app-installation-events-enabled", 0, v0 + 39);
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_10005EC7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 1192) = v1;
  if (v1) {
    uint64_t v2 = sub_100062974;
  }
  else {
    uint64_t v2 = sub_10005ED8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005ED8C()
{
  uint64_t v157 = v0;
  uint64_t v1 = v0;
  int v2 = *(unsigned __int8 *)(v0 + 1435);

  if (v2 == 1)
  {
    id v3 = objc_allocWithZone((Class)ApplicationProxy);
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v5 = [v3 initWithBundleID:v4];
    *(void *)(v1 + 1200) = v5;

    if (v5)
    {
      uint64_t v6 = *(void *)(v1 + 1168);
      uint64_t v7 = *(void *)(v1 + 1160);
      uint64_t v8 = *(void *)(v1 + 1088);
      uint64_t v9 = *(void *)(v1 + 1080);
      sub_100063AD4(*(unsigned char *)(v1 + 1436), v6);
      sub_100064BB8(v6, v7);
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v9);
      uint64_t v11 = *(void *)(v1 + 1160);
      if (v10 == 1)
      {
        uint64_t v12 = *(void **)(v1 + 816);
        sub_100016714(v11, &qword_1005A4850);
        static Logger.appUsage.getter();
        swift_bridgeObjectRetain_n();
        id v13 = v12;
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        BOOL v16 = os_log_type_enabled(v14, v15);
        uint64_t v17 = *(void *)(v1 + 1168);
        uint64_t v18 = *(void *)(v1 + 976);
        uint64_t v19 = *(void *)(v1 + 952);
        uint64_t v20 = *(NSObject **)(v1 + 944);
        uint64_t v21 = *(void **)(v1 + 816);
        if (v16)
        {
          char v125 = *(unsigned char *)(v1 + 1436);
          uint64_t v144 = *(void *)(v1 + 976);
          unint64_t v22 = *(void *)(v1 + 792);
          os_log_t v121 = *(os_log_t *)(v1 + 784);
          NSString v150 = v5;
          uint64_t v23 = swift_slowAlloc();
          os_log_t log = v14;
          uint64_t v24 = (void *)swift_slowAlloc();
          v156[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 138412802;
          *(void *)(v1 + 64_Block_object_dispose(&a9, 8) = v21;
          os_log_t v139 = v20;
          id v25 = v21;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v24 = v21;

          *(_WORD *)(v23 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v1 + 56_Block_object_dispose(&a9, 8) = sub_1000F7290((uint64_t)v121, v22, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 22) = 2082;
          *(unsigned char *)(v1 + 1434) = v125;
          type metadata accessor for AppInstallType(0);
          uint64_t v26 = String.init<A>(describing:)();
          *(void *)(v1 + 552) = sub_1000F7290(v26, v27, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v15, "[AppInstallMetrics/%@][%{public}s] Skipping unsupported installType: %{public}s)", (uint8_t *)v23, 0x20u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, os_log_t))(v19 + 8))(v144, v139);
          sub_100016714(v17, &qword_1005A4850);
          goto LABEL_14;
        }

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, NSObject *))(v19 + 8))(v18, v20);
LABEL_51:
        sub_100016714(v17, &qword_1005A4850);
        goto LABEL_14;
      }
      uint64_t v53 = *(NSObject **)(v1 + 1152);
      uint64_t v54 = *(void *)(v1 + 1144);
      uint64_t v55 = *(void *)(v1 + 1088);
      uint64_t v56 = *(void *)(v1 + 1080);
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v55 + 32))(v53, v11, v56);
      unsigned int v57 = [v5 hasMIDBasedSINF];
      uint64_t v58 = *(void (**)(uint64_t, os_log_t, uint64_t))(v55 + 16);
      *(void *)(v1 + 120_Block_object_dispose(&a9, 8) = v58;
      *(void *)(v1 + 1216) = (v55 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v58(v54, v53, v56);
      id v151 = v5;
      if (v57)
      {
        char v59 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 1088) + 8);
        v59(*(void *)(v1 + 1144), *(void *)(v1 + 1080));
      }
      else
      {
        uint64_t v153 = v1;
        uint64_t v62 = *(void (**)(void, void, void))(*(void *)(v1 + 1088) + 104);
        v62(*(void *)(v1 + 1136), enum case for AppInstallType.upp(_:), *(void *)(v1 + 1080));
        sub_100064C20();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (*(void *)(v1 + 504) != *(void *)(v1 + 520) || *(void *)(v1 + 512) != *(void *)(v1 + 528))
        {
          os_log_type_t type = v62;
          os_log_t v136 = *(os_log_t *)(v1 + 1152);
          uint64_t v147 = *(void *)(v1 + 1144);
          uint64_t v87 = *(void *)(v1 + 1136);
          uint64_t v132 = *(void *)(v1 + 1128);
          uint64_t v88 = *(void *)(v1 + 1088);
          uint64_t v89 = *(void *)(v1 + 1080);
          char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v91 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
          v91(v87, v89);
          uint64_t v92 = v147;
          id v148 = v91;
          v91(v92, v89);
          v58(v132, v136, v89);
          if (v90)
          {
            char v59 = v148;
            v148(*(void *)(v1 + 1128), *(void *)(v1 + 1080));
          }
          else
          {
            type(*(void *)(v1 + 1120), enum case for AppInstallType.tvProviderBuy(_:), *(void *)(v1 + 1080));
            dispatch thunk of RawRepresentable.rawValue.getter();
            dispatch thunk of RawRepresentable.rawValue.getter();
            if (*(void *)(v1 + 536) != *(void *)(v1 + 488) || *(void *)(v1 + 544) != *(void *)(v1 + 496))
            {
              *(void *)uint64_t v126 = *(void *)(v1 + 1128);
              uint64_t v96 = *(void *)(v1 + 1120);
              uint64_t v133 = *(void *)(v1 + 1112);
              os_log_t v137 = *(os_log_t *)(v1 + 1152);
              uint64_t v97 = *(void *)(v1 + 1080);
              char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v148(v96, v97);
              v148(*(void *)v126, v97);
              v58(v133, v137, v97);
              if (v98)
              {
                char v59 = v148;
                v148(*(void *)(v1 + 1112), *(void *)(v1 + 1080));
              }
              else
              {
                type(*(void *)(v1 + 1104), enum case for AppInstallType.tvProviderUpdate(_:), *(void *)(v1 + 1080));
                dispatch thunk of RawRepresentable.rawValue.getter();
                dispatch thunk of RawRepresentable.rawValue.getter();
                uint64_t v99 = *(void *)(v1 + 1112);
                uint64_t v100 = *(void *)(v1 + 1104);
                uint64_t v101 = *(void *)(v1 + 1080);
                if (*(void *)(v1 + 472) == *(void *)(v1 + 456) && *(void *)(v1 + 480) == *(void *)(v1 + 464))
                {
                  swift_bridgeObjectRelease_n();
                  char v59 = v148;
                  v148(v100, v101);
                  v148(v99, v101);
                }
                else
                {
                  char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  char v59 = v148;
                  v148(v100, v101);
                  v148(v99, v101);
                  if ((v102 & 1) == 0)
                  {
                    id v103 = [v5 downloaderDSID];
                    id v68 = v103;
                    if (!v103)
                    {
                      id v104 = [v5 purchaserDSID];
                      if (!v104) {
                        goto LABEL_48;
                      }
                      id v68 = v104;
                    }
                    uint64_t v105 = self;
                    id v106 = v103;
                    id v67 = [v105 defaultStore];
                    if (v67)
                    {
                      uint64_t v107 = v67;
                      id v69 = objc_msgSend(v67, "ams_iTunesAccountWithDSID:", v68);

LABEL_25:
                      *(void *)(v1 + 1232) = v69;
                      *(void *)(v1 + 1224) = v59;

                      if (v69)
                      {
                        id v70 = v69;
                        id v71 = objc_msgSend(v70, "ams_DSID");
                        if (v71)
                        {
                          uint64_t v72 = v71;
                          *(void *)(v1 + 1240) = [v71 longLongValue];

                          id v73 = [v70 identifier];
                          if (v73)
                          {
                            BOOL v74 = v73;
                            v156[0] = 0;
                            v156[1] = 0;
                            static String._conditionallyBridgeFromObjectiveC(_:result:)();

                            *(void *)(v1 + 124_Block_object_dispose(&a9, 8) = 0;
                            *(void *)(v1 + 1256) = 0;
                          }
                        }
                        uint64_t v146 = v59;
                        uint64_t v75 = *(void **)(v1 + 816);
                        static Logger.appUsage.getter();
                        swift_bridgeObjectRetain_n();
                        id v76 = v75;
                        uint64_t v77 = Logger.logObject.getter();
                        os_log_type_t v78 = static os_log_type_t.default.getter();
                        BOOL v79 = os_log_type_enabled(v77, v78);
                        uint64_t v17 = *(void *)(v1 + 1168);
                        uint64_t v80 = *(void *)(v1 + 1152);
                        uint64_t v154 = *(void *)(v1 + 1080);
                        uint64_t v81 = *(void *)(v1 + 952);
                        os_log_t v135 = *(os_log_t *)(v1 + 944);
                        os_log_t v140 = *(os_log_t *)(v1 + 992);
                        id v82 = *(void **)(v1 + 816);
                        unint64_t v83 = *(void *)(v1 + 792);
                        if (v79)
                        {
                          uint64_t v120 = *(void *)(v1 + 784);
                          uint64_t v128 = *(void *)(v1 + 1152);
                          uint64_t v84 = swift_slowAlloc();
                          char v122 = v77;
                          uint64_t v85 = (void *)swift_slowAlloc();
                          v156[0] = swift_slowAlloc();
                          *(_DWORD *)uint64_t v84 = 138412546;
                          *(void *)(v1 + 592) = v82;
                          id v86 = v82;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          void *v85 = v82;

                          *(_WORD *)(v84 + 12) = 2082;
                          swift_bridgeObjectRetain();
                          *(void *)(v1 + 600) = sub_1000F7290(v120, v83, v156);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease_n();
                          _os_log_impl((void *)&_mh_execute_header, v122, v78, "[AppInstallMetrics/%@][%{public}s] Skipping because we could not determine the account identifier", (uint8_t *)v84, 0x16u);
                          sub_10001644C((uint64_t *)&unk_1005A3AA0);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_slowDealloc();

                          (*(void (**)(os_log_t, os_log_t))(v81 + 8))(v140, v135);
                          v146(v128, v154);
                          sub_100016714(v17, &qword_1005A4850);
                          goto LABEL_14;
                        }

                        swift_bridgeObjectRelease_n();
                        (*(void (**)(os_log_t, os_log_t))(v81 + 8))(v140, v135);
                        v146(v80, v154);
                        goto LABEL_51;
                      }
LABEL_48:
                      id v108 = *(void **)(v1 + 816);
                      static Logger.appUsage.getter();
                      swift_bridgeObjectRetain_n();
                      id v109 = v108;
                      id v110 = Logger.logObject.getter();
                      os_log_type_t v111 = static os_log_type_t.default.getter();
                      BOOL v112 = os_log_type_enabled(v110, v111);
                      uint64_t v17 = *(void *)(v1 + 1168);
                      uint64_t v113 = *(void *)(v1 + 1152);
                      uint64_t v155 = *(void *)(v1 + 1080);
                      uint64_t v114 = *(void *)(v1 + 952);
                      uint64_t v134 = *(void *)(v1 + 944);
                      os_log_t v138 = *(os_log_t *)(v1 + 984);
                      id v115 = *(void **)(v1 + 816);
                      unint64_t v116 = *(void *)(v1 + 792);
                      if (v112)
                      {
                        os_log_t v123 = *(os_log_t *)(v1 + 784);
                        os_log_t loga = *(os_log_t *)(v1 + 1152);
                        uint64_t v117 = swift_slowAlloc();
                        uint64_t v124 = v110;
                        uint64_t v118 = (void *)swift_slowAlloc();
                        v156[0] = swift_slowAlloc();
                        *(_DWORD *)uint64_t v117 = 138412546;
                        *(void *)(v1 + 576) = v115;
                        uint64_t v149 = (void (*)(os_log_t, uint64_t))v59;
                        id v119 = v115;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        *uint64_t v118 = v115;

                        *(_WORD *)(v117 + 12) = 2082;
                        swift_bridgeObjectRetain();
                        *(void *)(v1 + 584) = sub_1000F7290((uint64_t)v123, v116, v156);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        _os_log_impl((void *)&_mh_execute_header, v124, v111, "[AppInstallMetrics/%@][%{public}s] Skipping because we could not determine the account", (uint8_t *)v117, 0x16u);
                        sub_10001644C((uint64_t *)&unk_1005A3AA0);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();

                        (*(void (**)(os_log_t, uint64_t))(v114 + 8))(v138, v134);
                        v149(loga, v155);
                        sub_100016714(v17, &qword_1005A4850);
                        goto LABEL_14;
                      }

                      swift_bridgeObjectRelease_n();
                      (*(void (**)(os_log_t, uint64_t))(v114 + 8))(v138, v134);
                      v59(v113, v155);
                      goto LABEL_51;
                    }
LABEL_53:
                    __break(1u);
                    return _swift_continuation_await(v67);
                  }
                }
              }
LABEL_23:
              id v67 = [self defaultStore];
              if (v67)
              {
                id v68 = v67;
                id v69 = objc_msgSend(v67, "ams_activeiTunesAccount");
                goto LABEL_25;
              }
              __break(1u);
              goto LABEL_53;
            }
            uint64_t v93 = *(void *)(v1 + 1128);
            uint64_t v94 = *(void *)(v1 + 1120);
            uint64_t v95 = *(void *)(v1 + 1080);
            swift_bridgeObjectRelease_n();
            char v59 = v148;
            v148(v94, v95);
            v148(v93, v95);
          }
LABEL_22:
          v58(*(void *)(v1 + 1112), *(os_log_t *)(v1 + 1152), *(void *)(v1 + 1080));
          v59(*(void *)(v1 + 1112), *(void *)(v1 + 1080));
          goto LABEL_23;
        }
        uint64_t v63 = *(void *)(v1 + 1144);
        uint64_t v64 = *(void *)(v1 + 1136);
        uint64_t v65 = *(void *)(v1 + 1088);
        uint64_t v66 = *(void *)(v153 + 1080);
        swift_bridgeObjectRelease_n();
        char v59 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
        v59(v64, v66);
        v59(v63, v66);
        uint64_t v1 = v153;
      }
      v58(*(void *)(v1 + 1128), *(os_log_t *)(v1 + 1152), *(void *)(v1 + 1080));
      v59(*(void *)(v1 + 1128), *(void *)(v1 + 1080));
      goto LABEL_22;
    }
    unint64_t v41 = *(void **)(v1 + 816);
    static Logger.appUsage.getter();
    swift_bridgeObjectRetain_n();
    id v42 = v41;
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    uint64_t v46 = *(void *)(v1 + 968);
    uint64_t v47 = *(void *)(v1 + 952);
    uint64_t v48 = *(void *)(v1 + 944);
    uint64_t v49 = *(void **)(v1 + 816);
    unint64_t v50 = *(void *)(v1 + 792);
    if (v45)
    {
      os_log_t v142 = *(os_log_t *)(v1 + 784);
      uint64_t v51 = swift_slowAlloc();
      id v131 = (void *)swift_slowAlloc();
      v156[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 138412546;
      *(void *)(v1 + 720) = v49;
      uint64_t v145 = v48;
      id v52 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v131 = v49;

      *(_WORD *)(v51 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v1 + 656) = sub_1000F7290((uint64_t)v142, v50, v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "[AppInstallMetrics/%@][%{public}s] Skipping app install event due to proxy lookup failure", (uint8_t *)v51, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v145);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    }
  }
  else
  {
    uint64_t v28 = *(void **)(v0 + 816);
    static Logger.appUsage.getter();
    swift_bridgeObjectRetain_n();
    id v29 = v28;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v0 + 960);
    uint64_t v34 = *(void *)(v0 + 952);
    uint64_t v35 = *(void *)(v0 + 944);
    uint64_t v36 = *(void **)(v0 + 816);
    unint64_t v37 = *(void *)(v1 + 792);
    if (v32)
    {
      os_log_t v141 = *(os_log_t *)(v1 + 784);
      uint64_t v152 = v35;
      uint64_t v38 = swift_slowAlloc();
      NSString v143 = v30;
      uint64_t v39 = (void *)swift_slowAlloc();
      v156[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412546;
      *(void *)(v1 + 744) = v36;
      id v40 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v36;

      *(_WORD *)(v38 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v1 + 72_Block_object_dispose(&a9, 8) = sub_1000F7290((uint64_t)v141, v37, v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v143, v31, "[AppInstallMetrics/%@][%{public}s] Skipping app install event due to reporting being disabled in bag", (uint8_t *)v38, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v152);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
  }
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v60 = *(uint64_t (**)(void))(v1 + 8);
  return v60(0);
}

uint64_t sub_100060CF0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 1280) = v1;
  if (v1) {
    int v2 = sub_100062DD4;
  }
  else {
    int v2 = sub_100060E00;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100060E00()
{
  uint64_t v31 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 1433);

  if (v1 == 1)
  {
    *(void *)(v0 + 128_Block_object_dispose(&a9, 8) = [objc_allocWithZone((Class)type metadata accessor for AccountCacheCoordinator()) init];
    int v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 1296) = v2;
    *int v2 = v0;
    v2[1] = sub_10006125C;
    uint64_t v3 = *(void *)(v0 + 1232);
    uint64_t v4 = *(void *)(v0 + 816);
    uint64_t v5 = *(void *)(v0 + 792);
    uint64_t v6 = *(void *)(v0 + 784);
    return sub_1000D8A98(v3, v4, v6, v5);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 816);
    static Logger.appUsage.getter();
    swift_bridgeObjectRetain_n();
    id v9 = v8;
    int v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v26 = *(void *)(v0 + 1264);
      uint64_t v27 = *(void *)(v0 + 952);
      uint64_t v28 = *(void *)(v0 + 944);
      uint64_t v29 = *(void *)(v0 + 1032);
      uint64_t v12 = *(void **)(v0 + 816);
      unint64_t v13 = *(void *)(v0 + 792);
      uint64_t v24 = *(void *)(v0 + 784);
      uint64_t v14 = swift_slowAlloc();
      os_log_t log = v10;
      os_log_type_t v15 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412802;
      *(void *)(v0 + 712) = v12;
      id v16 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v15 = v12;

      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 68_Block_object_dispose(&a9, 8) = sub_1000F7290(v24, v13, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 22) = 2048;
      *(void *)(v0 + 624) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, log, v11, "[AppInstallMetrics/%@][%{public}s] storefront: %ld", (uint8_t *)v14, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v17(v29, v28);
    }
    else
    {
      uint64_t v18 = *(void *)(v0 + 1032);
      uint64_t v19 = *(void *)(v0 + 952);
      uint64_t v20 = *(void *)(v0 + 944);
      uint64_t v21 = *(void **)(v0 + 816);

      swift_bridgeObjectRelease_n();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v17(v18, v20);
    }
    *(void *)(v0 + 1320) = 0;
    *(void *)(v0 + 1312) = v17;
    id v22 = sub_10030B11C();
    *(void *)(v0 + 132_Block_object_dispose(&a9, 8) = v22;
    *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v0;
    *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v0 + 1432;
    *(void *)(v0 + 216) = sub_1000617F0;
    uint64_t v23 = swift_continuation_init();
    *(void *)(v0 + 392) = _NSConcreteStackBlock;
    *(void *)(v0 + 400) = 0x40000000;
    *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = sub_100073DBC;
    *(void *)(v0 + 416) = &unk_100513280;
    *(void *)(v0 + 424) = v23;
    sub_10030CFAC(v22, @"app-installation-include-billing-country-code", 0, (void *)(v0 + 392));
    return _swift_continuation_await(v0 + 208);
  }
}

uint64_t sub_10006125C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[54] = v2;
  v4[55] = a1;
  v4[56] = a2;
  uint64_t v5 = (void *)v3[161];
  v4[163] = a2;
  swift_task_dealloc();

  return _swift_task_switch(sub_10006137C, 0, 0);
}

uint64_t sub_10006137C()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[163];
  if (v1) {
    uint64_t v2 = v0[55];
  }
  else {
    uint64_t v2 = 0;
  }
  if (v1) {
    unint64_t v3 = v0[163];
  }
  else {
    unint64_t v3 = 0xE000000000000000;
  }
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1000B05C0(v2, v3);
    if (v6) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v5;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)v0[102];
  static Logger.appUsage.getter();
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  swift_bridgeObjectRetain();
  id v10 = v9;
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v27 = v0[158];
    uint64_t v31 = v0[130];
    uint64_t v29 = v0[119];
    uint64_t v30 = v0[118];
    os_log_type_t type = v12;
    unint64_t v13 = (void *)v0[102];
    unint64_t v14 = v0[99];
    uint64_t v26 = v0[98];
    uint64_t v15 = swift_slowAlloc();
    id v25 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138413058;
    v0[95] = v13;
    id v16 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v25 = v13;

    *(_WORD *)(v15 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[96] = sub_1000F7290(v26, v14, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 22) = 2048;
    v0[97] = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 32) = 2080;
    swift_bridgeObjectRetain();
    v0[92] = sub_1000F7290(v2, v3, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, type, "[AppInstallMetrics/%@][%{public}s] storefront: %ld billingStorefront: %s", (uint8_t *)v15, 0x2Au);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v17(v31, v30);
  }
  else
  {
    uint64_t v18 = v0[130];
    uint64_t v19 = v0[119];
    uint64_t v20 = v0[118];
    uint64_t v21 = (void *)v0[102];

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v17(v18, v20);
  }
  v0[165] = v7;
  v0[164] = v17;
  id v22 = sub_10030B11C();
  v0[166] = v22;
  v0[26] = v0;
  v0[31] = v0 + 179;
  v0[27] = sub_1000617F0;
  uint64_t v23 = swift_continuation_init();
  v0[49] = _NSConcreteStackBlock;
  v0[50] = 0x40000000;
  v0[51] = sub_100073DBC;
  v0[52] = &unk_100513280;
  v0[53] = v23;
  sub_10030CFAC(v22, @"app-installation-include-billing-country-code", 0, v0 + 49);
  return _swift_continuation_await(v0 + 26);
}

uint64_t sub_1000617F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240);
  *(void *)(*(void *)v0 + 1336) = v1;
  if (v1) {
    uint64_t v2 = sub_100062EB8;
  }
  else {
    uint64_t v2 = sub_100061900;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100061900()
{
  int v1 = *(unsigned __int8 *)(v0 + 1432);

  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 1072);
    type metadata accessor for AccountCachedServerData();
    uint64_t v3 = static AccountCachedServerData.shared.getter();
    *(void *)(v0 + 1344) = v3;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 1352) = v4;
    v4[2] = v3;
    v4[3] = 7;
    v4[4] = v2;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 1360) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100061B34;
    uint64_t v6 = *(void *)(v0 + 816);
    return sub_1000E0808(v6, 0, (uint64_t)sub_100064E64, (uint64_t)v4);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 1056) + 8))(*(void *)(v0 + 1072), *(void *)(v0 + 1048));
    uint64_t v8 = *(void *)(v0 + 1312);
    *(void *)(v0 + 140_Block_object_dispose(&a9, 8) = *(void *)(v0 + 1320);
    *(_OWORD *)(v0 + 1392) = 0u;
    *(void *)(v0 + 1384) = v8;
    id v9 = sub_10030B11C();
    *(void *)(v0 + 1416) = v9;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 640;
    *(void *)(v0 + 24) = sub_100061DC4;
    uint64_t v10 = swift_continuation_init();
    *(void *)(v0 + 352) = _NSConcreteStackBlock;
    *(void *)(v0 + 360) = 0x40000000;
    *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = sub_100063C58;
    *(void *)(v0 + 376) = &unk_100513228;
    *(void *)(v0 + 384) = v10;
    sub_10030C810(v9, @"app-installation-targets", 0, (void *)(v0 + 352));
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_100061B34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v3 + 1376) = a2;
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100061C58, 0, 0);
}

uint64_t sub_100061C58()
{
  uint64_t v1 = *(void *)(v0 + 1376);
  uint64_t v2 = *(void *)(v0 + 1368);
  (*(void (**)(void, void))(*(void *)(v0 + 1056) + 8))(*(void *)(v0 + 1072), *(void *)(v0 + 1048));
  uint64_t v3 = *(void *)(v0 + 1312);
  *(void *)(v0 + 140_Block_object_dispose(&a9, 8) = *(void *)(v0 + 1320);
  *(void *)(v0 + 1400) = v1;
  *(void *)(v0 + 1392) = v2;
  *(void *)(v0 + 1384) = v3;
  id v4 = sub_10030B11C();
  *(void *)(v0 + 1416) = v4;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 640;
  *(void *)(v0 + 24) = sub_100061DC4;
  uint64_t v5 = swift_continuation_init();
  *(void *)(v0 + 352) = _NSConcreteStackBlock;
  *(void *)(v0 + 360) = 0x40000000;
  *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = sub_100063C58;
  *(void *)(v0 + 376) = &unk_100513228;
  *(void *)(v0 + 384) = v5;
  sub_10030C810(v4, @"app-installation-targets", 0, (void *)(v0 + 352));
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100061DC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 1424) = v1;
  if (v1) {
    uint64_t v2 = sub_100063038;
  }
  else {
    uint64_t v2 = sub_100061ED4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100061ED4()
{
  uint64_t v73 = v0;
  uint64_t v1 = *(void *)(v0 + 640);

  uint64_t v2 = sub_1000C0424(v1);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v2 = *(void **)(*(void *)(v0 + 824) + OBJC_IVAR____TtC9appstored17AppInstallMetrics_supportedStorefronts);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  if (sub_1000E4E04(*(void *)(v0 + 1264), v2))
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v3 = *(void *)(v0 + 1408);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  char v4 = sub_1000E4E04(v3, v2);
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
  {
LABEL_14:
    uint64_t v19 = *(void **)(v0 + 816);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.appUsage.getter();
    swift_bridgeObjectRetain_n();
    id v20 = v19;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    uint64_t v66 = v21;
    BOOL v23 = os_log_type_enabled(v21, v22);
    id v69 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    id v71 = *(void (**)(uint64_t, uint64_t))(v0 + 1224);
    uint64_t v24 = *(void *)(v0 + 1168);
    uint64_t v25 = *(void *)(v0 + 1152);
    uint64_t v26 = *(void *)(v0 + 1016);
    uint64_t v27 = *(void **)(v0 + 816);
    unint64_t v28 = *(void *)(v0 + 792);
    if (v23)
    {
      uint64_t v50 = *(void *)(v0 + 784);
      uint64_t v64 = *(void *)(v0 + 1080);
      uint64_t v58 = *(void *)(v0 + 1016);
      uint64_t v60 = *(void *)(v0 + 944);
      uint64_t v55 = *(void **)(v0 + 1232);
      uint64_t v53 = *(void **)(v0 + 1200);
      uint64_t v29 = swift_slowAlloc();
      uint64_t v62 = v24;
      uint64_t v30 = (void *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 138412546;
      *(void *)(v0 + 664) = v27;
      id v31 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v27;

      *(_WORD *)(v29 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 672) = sub_1000F7290(v50, v28, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v66, v22, "[AppInstallMetrics/%@][%{public}s] Skipping", (uint8_t *)v29, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v69(v58, v60);
      v71(v25, v64);
      uint64_t v32 = v62;
    }
    else
    {
      uint64_t v33 = *(void *)(v0 + 1080);
      uint64_t v34 = *(void *)(v0 + 944);
      uint64_t v35 = *(void **)(v0 + 1232);

      swift_bridgeObjectRelease_n();
      v69(v26, v34);
      v71(v25, v33);
      uint64_t v32 = v24;
    }
    sub_100016714(v32, &qword_1005A4850);
    unsigned int v45 = 0;
    goto LABEL_18;
  }
LABEL_7:
  id v5 = [*(id *)(v0 + 1200) storeMetadata];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [v5 sourceApp];

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  uint64_t v8 = *(void *)(v0 + 1408);
  uint64_t v44 = *(void *)(v0 + 1264);
  id v52 = *(void **)(v0 + 1232);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1208);
  id v9 = *(void **)(v0 + 1200);
  uint64_t v56 = *(void *)(v0 + 1168);
  uint64_t v65 = *(void *)(v0 + 1152);
  uint64_t v40 = *(void *)(v0 + 1096);
  uint64_t v54 = *(void *)(v0 + 1088);
  uint64_t v63 = *(void *)(v0 + 1080);
  uint64_t v10 = *(void *)(v0 + 936);
  uint64_t v39 = *(void *)(v0 + 928);
  uint64_t v57 = *(void *)(v0 + 904);
  uint64_t v11 = *(void *)(v0 + 896);
  uint64_t v67 = *(void *)(v0 + 888);
  uint64_t v68 = *(void *)(v0 + 880);
  uint64_t v70 = *(void *)(v0 + 920);
  uint64_t v59 = *(void *)(v0 + 872);
  uint64_t v61 = *(void *)(v0 + 912);
  uint64_t v49 = *(void *)(v0 + 864);
  uint64_t v48 = *(void *)(v0 + 840);
  uint64_t v46 = *(void *)(v0 + 832);
  uint64_t v47 = *(void *)(v0 + 848);
  uint64_t v51 = *(void **)(v0 + 816);
  uint64_t v38 = *(void *)(v0 + 792);
  uint64_t v42 = *(void *)(v0 + 784);
  unsigned int v41 = [v9 isBeta];
  os_log_type_t v12 = &selRef_betaExternalVersionID;
  if (!v41) {
    os_log_type_t v12 = &selRef_storeExternalVersionID;
  }
  [v9 *v12];
  static Date.now.getter();
  [v9 storeItemID];
  id v13 = [self productVersion];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  self;
  unint64_t v14 = (id)sub_100335ADC();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(v0 + 680) = v8;
  dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v0 + 560) = v44;
  dispatch thunk of CustomStringConvertible.description.getter();
  unsigned int v45 = 1;
  AppInstallationEligibility.init(accountID:accountIdentifier:billingStorefront:storefront:eligible:)();
  AppInstallationEligibility.billingCountryCode.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v11, v57, v68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v39, v10, v61);
  v43(v40, v65, v63);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AppInstallationEvent.init(bundleID:eligibility:externalVersionID:installDate:installType:isBeta:itemID:osVersion:platform:source:token:webDomain:)();
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v46, 1, 1, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v49, v59, v48);
  unint64_t v16 = (*(unsigned __int8 *)(v47 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  *((void *)v17 + 4) = v51;
  *((void *)v17 + 5) = v42;
  *((void *)v17 + 6) = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(&v17[v16], v49, v48);
  swift_bridgeObjectRetain();
  id v18 = v51;
  sub_1000644F4(v46, (uint64_t)&unk_1005A4868, (uint64_t)v17);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v59, v48);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v57, v68);
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v10, v61);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v65, v63);
  sub_100016714(v56, &qword_1005A4850);
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36(v45);
}

uint64_t sub_100062974()
{
  BOOL v23 = v0;
  uint64_t v1 = (void *)v0[148];
  swift_willThrow();
  swift_errorRelease();

  uint64_t v2 = (void *)v0[102];
  static Logger.appUsage.getter();
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  char v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v19 = v0[119];
    uint64_t v20 = v0[118];
    uint64_t v21 = v0[120];
    uint64_t v6 = (void *)v0[102];
    unint64_t v7 = v0[99];
    uint64_t v17 = v0[98];
    uint64_t v8 = swift_slowAlloc();
    os_log_t log = v4;
    id v9 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    v0[93] = v6;
    id v10 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v6;

    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[91] = sub_1000F7290(v17, v7, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v5, "[AppInstallMetrics/%@][%{public}s] Skipping app install event due to reporting being disabled in bag", (uint8_t *)v8, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  else
  {
    uint64_t v11 = v0[120];
    uint64_t v12 = v0[119];
    uint64_t v13 = v0[118];
    unint64_t v14 = (void *)v0[102];

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15(0);
}

uint64_t sub_100062DD4()
{
  uint64_t v1 = (void *)v0[159];
  swift_willThrow();
  swift_errorRelease();

  v0[161] = [objc_allocWithZone((Class)type metadata accessor for AccountCacheCoordinator()) init];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[162] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10006125C;
  uint64_t v3 = v0[154];
  uint64_t v4 = v0[102];
  uint64_t v5 = v0[99];
  uint64_t v6 = v0[98];
  return sub_1000D8A98(v3, v4, v6, v5);
}

uint64_t sub_100062EB8()
{
  uint64_t v1 = *(void **)(v0 + 1328);
  swift_willThrow();
  swift_errorRelease();

  (*(void (**)(void, void))(*(void *)(v0 + 1056) + 8))(*(void *)(v0 + 1072), *(void *)(v0 + 1048));
  uint64_t v2 = *(void *)(v0 + 1312);
  *(void *)(v0 + 140_Block_object_dispose(&a9, 8) = *(void *)(v0 + 1320);
  *(_OWORD *)(v0 + 1392) = 0u;
  *(void *)(v0 + 1384) = v2;
  id v3 = sub_10030B11C();
  *(void *)(v0 + 1416) = v3;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 640;
  *(void *)(v0 + 24) = sub_100061DC4;
  uint64_t v4 = swift_continuation_init();
  *(void *)(v0 + 352) = _NSConcreteStackBlock;
  *(void *)(v0 + 360) = 0x40000000;
  *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = sub_100063C58;
  *(void *)(v0 + 376) = &unk_100513228;
  *(void *)(v0 + 384) = v4;
  sub_10030C810(v3, @"app-installation-targets", 0, (void *)(v0 + 352));
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100063038()
{
  uint64_t v73 = v0;
  uint64_t v1 = *(void **)(v0 + 1416);
  swift_willThrow();
  swift_errorRelease();

  uint64_t v2 = *(void *)(*(void *)(v0 + 824) + OBJC_IVAR____TtC9appstored17AppInstallMetrics_supportedStorefronts);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (sub_1000E4E04(*(void *)(v0 + 1264), v2))
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(v0 + 1408);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v4 = sub_1000E4E04(v3, v2);
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
  {
LABEL_12:
    uint64_t v19 = *(void **)(v0 + 816);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.appUsage.getter();
    swift_bridgeObjectRetain_n();
    id v20 = v19;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    uint64_t v66 = v21;
    BOOL v23 = os_log_type_enabled(v21, v22);
    id v69 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    id v71 = *(void (**)(uint64_t, uint64_t))(v0 + 1224);
    uint64_t v24 = *(void *)(v0 + 1168);
    uint64_t v25 = *(void *)(v0 + 1152);
    uint64_t v26 = *(void *)(v0 + 1016);
    uint64_t v27 = *(void **)(v0 + 816);
    unint64_t v28 = *(void *)(v0 + 792);
    if (v23)
    {
      uint64_t v50 = *(void *)(v0 + 784);
      uint64_t v64 = *(void *)(v0 + 1080);
      uint64_t v58 = *(void *)(v0 + 1016);
      uint64_t v60 = *(void *)(v0 + 944);
      uint64_t v55 = *(void **)(v0 + 1232);
      uint64_t v53 = *(void **)(v0 + 1200);
      uint64_t v29 = swift_slowAlloc();
      uint64_t v62 = v24;
      uint64_t v30 = (void *)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 138412546;
      *(void *)(v0 + 664) = v27;
      id v31 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v27;

      *(_WORD *)(v29 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 672) = sub_1000F7290(v50, v28, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v66, v22, "[AppInstallMetrics/%@][%{public}s] Skipping", (uint8_t *)v29, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v69(v58, v60);
      v71(v25, v64);
      uint64_t v32 = v62;
    }
    else
    {
      uint64_t v33 = *(void *)(v0 + 1080);
      uint64_t v34 = *(void *)(v0 + 944);
      uint64_t v35 = *(void **)(v0 + 1232);

      swift_bridgeObjectRelease_n();
      v69(v26, v34);
      v71(v25, v33);
      uint64_t v32 = v24;
    }
    sub_100016714(v32, &qword_1005A4850);
    unsigned int v45 = 0;
    goto LABEL_16;
  }
LABEL_5:
  id v5 = [*(id *)(v0 + 1200) storeMetadata];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [v5 sourceApp];

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  uint64_t v8 = *(void *)(v0 + 1408);
  uint64_t v44 = *(void *)(v0 + 1264);
  id v52 = *(void **)(v0 + 1232);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1208);
  id v9 = *(void **)(v0 + 1200);
  uint64_t v56 = *(void *)(v0 + 1168);
  uint64_t v65 = *(void *)(v0 + 1152);
  uint64_t v40 = *(void *)(v0 + 1096);
  uint64_t v54 = *(void *)(v0 + 1088);
  uint64_t v63 = *(void *)(v0 + 1080);
  uint64_t v10 = *(void *)(v0 + 936);
  uint64_t v39 = *(void *)(v0 + 928);
  uint64_t v57 = *(void *)(v0 + 904);
  uint64_t v11 = *(void *)(v0 + 896);
  uint64_t v67 = *(void *)(v0 + 888);
  uint64_t v68 = *(void *)(v0 + 880);
  uint64_t v70 = *(void *)(v0 + 920);
  uint64_t v59 = *(void *)(v0 + 872);
  uint64_t v61 = *(void *)(v0 + 912);
  uint64_t v49 = *(void *)(v0 + 864);
  uint64_t v48 = *(void *)(v0 + 840);
  uint64_t v46 = *(void *)(v0 + 832);
  uint64_t v47 = *(void *)(v0 + 848);
  uint64_t v51 = *(void **)(v0 + 816);
  uint64_t v38 = *(void *)(v0 + 792);
  uint64_t v42 = *(void *)(v0 + 784);
  unsigned int v41 = [v9 isBeta];
  uint64_t v12 = &selRef_betaExternalVersionID;
  if (!v41) {
    uint64_t v12 = &selRef_storeExternalVersionID;
  }
  [v9 *v12];
  static Date.now.getter();
  [v9 storeItemID];
  id v13 = [self productVersion];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  self;
  unint64_t v14 = (id)sub_100335ADC();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(v0 + 680) = v8;
  dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v0 + 560) = v44;
  dispatch thunk of CustomStringConvertible.description.getter();
  unsigned int v45 = 1;
  AppInstallationEligibility.init(accountID:accountIdentifier:billingStorefront:storefront:eligible:)();
  AppInstallationEligibility.billingCountryCode.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v11, v57, v68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v39, v10, v61);
  v43(v40, v65, v63);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AppInstallationEvent.init(bundleID:eligibility:externalVersionID:installDate:installType:isBeta:itemID:osVersion:platform:source:token:webDomain:)();
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v46, 1, 1, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v49, v59, v48);
  unint64_t v16 = (*(unsigned __int8 *)(v47 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  *((void *)v17 + 4) = v51;
  *((void *)v17 + 5) = v42;
  *((void *)v17 + 6) = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(&v17[v16], v49, v48);
  swift_bridgeObjectRetain();
  id v18 = v51;
  sub_1000644F4(v46, (uint64_t)&unk_1005A4868, (uint64_t)v17);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v59, v48);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v57, v68);
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v10, v61);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v65, v63);
  sub_100016714(v56, &qword_1005A4850);
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36(v45);
}

uint64_t sub_100063AD4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AppInstallType();
  __chkstk_darwin(v4);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = a1 - 1;
  if (a1 - 1) <= 0x15u && ((0x3BFE7Du >> v8))
  {
    uint64_t v11 = *(unsigned int *)*(&off_100513310 + v8);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
    uint64_t v14 = v5;
    v12(v7, v11, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a2, v7, v4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v4);
  }
  else
  {
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v9(a2, 1, 1, v4);
  }
}

uint64_t sub_100063C58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10001644C(&qword_1005A4E40);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100063D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  uint64_t v8 = type metadata accessor for Logger();
  v7[10] = v8;
  v7[11] = *(void *)(v8 - 8);
  v7[12] = swift_task_alloc();
  v7[13] = swift_task_alloc();
  return _swift_task_switch(sub_100063DF8, 0, 0);
}

uint64_t sub_100063DF8()
{
  uint64_t v25 = v0;
  uint64_t v1 = (void *)v0[6];
  static Logger.appUsage.getter();
  id v2 = v1;
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v21 = v0[11];
    uint64_t v22 = v0[10];
    uint64_t v23 = v0[13];
    uint64_t v6 = (void *)v0[6];
    unint64_t v18 = v0[8];
    uint64_t v19 = v0[7];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v0[4] = v6;
    uint64_t v24 = v20;
    *(_DWORD *)uint64_t v7 = 138412546;
    id v8 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v17 = v6;

    *(_WORD *)(v7 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[5] = sub_1000F7290(v19, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[AppInstallMetrics/%@][%{public}s] Sending app install event", (uint8_t *)v7, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v9 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v9(v23, v22);
  }
  else
  {
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[11];
    uint64_t v13 = (void *)v0[6];

    swift_bridgeObjectRelease_n();
    id v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  v0[14] = v9;
  type metadata accessor for AppInstallationMetricsClient();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[15] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1000640F4;
  uint64_t v15 = v0[9];
  return static AppInstallationMetricsClient.addInstall(_:)(v15);
}

uint64_t sub_1000640F4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100064234, 0, 0);
  }
}

uint64_t sub_100064234()
{
  uint64_t v24 = v0;
  uint64_t v1 = (void *)v0[6];
  static Logger.appUsage.getter();
  id v2 = v1;
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v21 = v0[12];
    uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[14];
    uint64_t v20 = v0[10];
    unint64_t v6 = v0[8];
    uint64_t v18 = v0[7];
    uint64_t v7 = (void *)v0[6];
    uint64_t v8 = swift_slowAlloc();
    unint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    v0[2] = v7;
    uint64_t v23 = v19;
    *(_DWORD *)uint64_t v8 = 138412546;
    os_log_t log = v4;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v16 = v7;

    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[3] = sub_1000F7290(v18, v6, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v5, "[AppInstallMetrics/%@][%{public}s] Sent app install event", (uint8_t *)v8, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v22(v21, v20);
  }
  else
  {
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[14];
    uint64_t v11 = v0[12];
    uint64_t v12 = v0[10];
    uint64_t v13 = (void *)v0[6];

    swift_bridgeObjectRelease_n();
    v10(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000644F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100016714(a1, &qword_1005A4640);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

id sub_10006481C()
{
  *(void *)&v0[OBJC_IVAR____TtC9appstored17AppInstallMetrics_supportedStorefronts] = &off_1005103F8;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppInstallMetrics();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t sub_100064864(int a1, char a2, uint64_t a3, void *a4, void *aBlock, void *a6)
{
  v6[2] = a4;
  _OWORD v6[3] = a6;
  v6[4] = _Block_copy(aBlock);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v15 = 0;
  }
  void v6[5] = v15;
  void v6[6] = v13;
  id v16 = a4;
  a6;
  uint64_t v17 = (void *)swift_task_alloc();
  v6[7] = v17;
  void *v17 = v6;
  v17[1] = sub_10006498C;
  return sub_10005E718(v11, v13, a2, a3, v15, (uint64_t)v16);
}

uint64_t sub_10006498C(char a1)
{
  id v3 = *(void (***)(void, void))(*v1 + 32);
  uint64_t v4 = *(void **)(*v1 + 24);
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v3[2](v3, a1 & 1);
  _Block_release(v3);
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

id sub_100064B50()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppInstallMetrics();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppInstallMetrics()
{
  return self;
}

uint64_t sub_100064BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C(&qword_1005A4850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100064C20()
{
  unint64_t result = qword_1005A4858;
  if (!qword_1005A4858)
  {
    type metadata accessor for AppInstallType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005A4858);
  }
  return result;
}

uint64_t sub_100064C78()
{
  uint64_t v1 = type metadata accessor for AppInstallationEvent();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100064D54(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AppInstallationEvent() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100005040;
  return sub_100063D24(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100064E64()
{
  return sub_1000DF39C();
}

uint64_t sub_100064E70()
{
  _Block_release(*(const void **)(v0 + 48));
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100064EC8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  uint64_t v5 = *(void **)(v0 + 48);
  uint64_t v6 = *(void **)(v0 + 56);
  char v7 = *(unsigned char *)(v0 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  void *v8 = v1;
  v8[1] = sub_100005040;
  uint64_t v9 = (uint64_t (*)(int, char, uint64_t, void *, void *, void *))((char *)&dword_1005A4870 + dword_1005A4870);
  return v9(v2, v7, v3, v4, v5, v6);
}

id sub_100064FA8()
{
  uint64_t v0 = type metadata accessor for ContinuousClock();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (objc_class *)type metadata accessor for WidgetReloadOnNetworkReachableActivity(0);
  uint64_t v5 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v6 = &v5[OBJC_IVAR____TtC9appstored38WidgetReloadOnNetworkReachableActivity_backoff];
  swift_retain();
  static Clock<>.continuous.getter();
  char v7 = (int *)sub_10001644C((uint64_t *)&unk_1005A48C8);
  *(void *)&v6[v7[12]] = 0;
  uint64_t v8 = &v6[v7[13]];
  uint64_t v9 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_OWORD *)uint64_t v6 = xmmword_100489440;
  *((_OWORD *)v6 + 1) = xmmword_100489450;
  *((void *)v6 + 4) = 0;
  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(&v6[v7[11]], v3, v0);
  *(void *)&v5[OBJC_IVAR____TtC9appstored38WidgetReloadOnNetworkReachableActivity_activity] = 0;
  swift_release();
  v11.receiver = v5;
  v11.super_class = v4;
  id result = objc_msgSendSuper2(&v11, "init");
  qword_1005B14C8 = (uint64_t)result;
  return result;
}

id sub_100065160()
{
  uint64_t v1 = type metadata accessor for ContinuousClock();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v6 = &v5[OBJC_IVAR____TtC9appstored38WidgetReloadOnNetworkReachableActivity_backoff];
  swift_retain();
  static Clock<>.continuous.getter();
  char v7 = (int *)sub_10001644C((uint64_t *)&unk_1005A48C8);
  *(void *)&v6[v7[12]] = 0;
  uint64_t v8 = &v6[v7[13]];
  uint64_t v9 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_OWORD *)uint64_t v6 = xmmword_100489440;
  *((_OWORD *)v6 + 1) = xmmword_100489450;
  *((void *)v6 + 4) = 0;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(&v6[v7[11]], v4, v1);
  *(void *)&v5[OBJC_IVAR____TtC9appstored38WidgetReloadOnNetworkReachableActivity_activity] = 0;
  swift_release();
  v11.receiver = v5;
  v11.super_class = v0;
  return objc_msgSendSuper2(&v11, "init");
}

void sub_100065368(uint64_t a1)
{
  uint64_t v42 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  unsigned int v41 = (char *)&v39 - v7;
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v39 - v8;
  uint64_t v9 = sub_10001644C(&qword_1005A48F0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9 - 8);
  uint64_t v13 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(_xpc_activity_s **)(v1 + OBJC_IVAR____TtC9appstored38WidgetReloadOnNetworkReachableActivity_activity);
  if (v20)
  {
    sub_100016588(v42, (uint64_t)v15, &qword_1005A48F0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    {
      swift_unknownObjectRetain();
      sub_100016714((uint64_t)v15, &qword_1005A48F0);
      uint64_t v21 = v41;
      static Logger.activity.getter();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Activity was already set up.", v24, 2u);
        swift_slowDealloc();
      }

      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v21, v44);
    }
    else
    {
      sub_1000671E0((uint64_t)v15, (uint64_t)v19);
      swift_unknownObjectRetain();
      uint64_t v34 = v40;
      static Logger.activity.getter();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Modifying criteria of scheduled activity.", v37, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v44);
      sub_100065BF4();
      xpc_activity_set_criteria(v20, v38);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_100067244((uint64_t)v19);
    }
  }
  else
  {
    uint64_t v25 = v10;
    uint64_t v26 = v42;
    uint64_t v27 = v1;
    static Logger.activity.getter();
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Registering activity", v30, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v43 + 8))(v5, v44);
    if ("com.apple.appstored.WidgetReload")
    {
      sub_100016588(v26, (uint64_t)v13, &qword_1005A48F0);
      unint64_t v31 = (*(unsigned __int8 *)(v25 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v27;
      sub_100030134((uint64_t)v13, v32 + v31, &qword_1005A48F0);
      aBlock[4] = sub_100067170;
      void aBlock[5] = v32;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100066948;
      aBlock[3] = &unk_100513410;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      xpc_activity_register("com.apple.appstored.WidgetReload", XPC_ACTIVITY_CHECK_IN, v33);
      _Block_release(v33);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100065A58(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  sub_10001644C(&qword_1005A48F0);
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_100065B0C, a2, 0);
}

uint64_t sub_100065B0C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = (void (**)(void))v0[4];
  uint64_t v3 = type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  sub_100065368(v2);
  sub_100016714(v2, &qword_1005A48F0);
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_100065BF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10001644C(&qword_1005A48D8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_object_t empty = xpc_dictionary_create_empty();
  uint64_t v6 = type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(0);
  int64_t v7 = Duration.components.getter();
  xpc_dictionary_set_int64(empty, XPC_ACTIVITY_DELAY, v7);
  xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_int64(empty, XPC_ACTIVITY_GRACE_PERIOD, 2);
  xpc_dictionary_set_string(empty, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
    __break(1u);
    goto LABEL_12;
  }
  xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  sub_100016588(v1, (uint64_t)v4, &qword_1005A48D8);
  uint64_t v8 = type metadata accessor for NWEndpoint();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    sub_100016714((uint64_t)v4, &qword_1005A48D8);
  }
  else
  {
    uint64_t v10 = NWEndpoint.nw.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v8);
    if (v10)
    {
      uint64_t v11 = (const char *)XPC_ACTIVITY_NETWORK_TRANSFER_ENDPOINT;
      if (!XPC_ACTIVITY_NETWORK_TRANSFER_ENDPOINT)
      {
LABEL_13:
        __break(1u);
        return;
      }
      uint64_t v12 = (void *)nw_endpoint_copy_dictionary();
      xpc_dictionary_set_value(empty, v11, v12);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  if (!*(void *)(v1 + *(int *)(v6 + 20))) {
    return;
  }
  uint64_t v13 = (const char *)XPC_ACTIVITY_NETWORK_TRANSFER_PARAMETERS;
  if (!XPC_ACTIVITY_NETWORK_TRANSFER_PARAMETERS)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_retain();
  NWParameters.nw.getter();
  uint64_t v14 = (void *)nw_parameters_copy_dictionary();
  swift_unknownObjectRelease();
  xpc_dictionary_set_value(empty, v13, v14);
  swift_release();
  swift_unknownObjectRelease();
}

uint64_t sub_100065E78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10001644C(&qword_1005A48D8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9 - 8);
  uint64_t v13 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - v14;
  if (!a1)
  {
    uint64_t v21 = type metadata accessor for NWEndpoint();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v15, 1, 1, v21);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_unknownObjectRetain();
  NWEndpoint.init(_:)();
  if (a2)
  {
LABEL_3:
    type metadata accessor for NWParameters();
    swift_unknownObjectRetain();
    a2 = NWParameters.__allocating_init(_:)();
  }
LABEL_4:
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  sub_100016588((uint64_t)v15, (uint64_t)v13, &qword_1005A48D8);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = v3;
  sub_100030134((uint64_t)v13, (uint64_t)v19 + v17, &qword_1005A48D8);
  *(void *)((char *)v19 + v1_Block_object_dispose(&a9, 8) = a2;
  swift_retain();
  swift_retain();
  sub_100018FDC((uint64_t)v8, (uint64_t)&unk_1005A48E8, (uint64_t)v19);
  swift_release();
  swift_release();
  return sub_100016714((uint64_t)v15, &qword_1005A48D8);
}

uint64_t sub_100066114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[6] = a5;
  v6[7] = a6;
  void v6[5] = a4;
  sub_10001644C(&qword_1005A48F0);
  v6[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000661B0, a4, 0);
}

uint64_t sub_1000661B0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  sub_100016588(v0[6], v1, &qword_1005A48D8);
  swift_beginAccess();
  swift_retain();
  uint64_t v3 = sub_100066360();
  uint64_t v5 = v4;
  swift_endAccess();
  uint64_t v6 = type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(0);
  *(void *)(v1 + *(int *)(v6 + 20)) = v2;
  uint64_t v7 = (uint64_t *)(v1 + *(int *)(v6 + 24));
  uint64_t *v7 = v3;
  v7[1] = v5;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 0, 1, v6);
  sub_100065368(v1);
  sub_100016714(v1, &qword_1005A48F0);
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100066360()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10001644C(&qword_1005A4900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = sub_10001644C((uint64_t *)&unk_1005A48C8);
  type metadata accessor for ContinuousClock();
  sub_1000672F4(&qword_1005A48C0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  uint64_t v13 = v0 + *(int *)(v12 + 52);
  sub_100016588(v13, (uint64_t)v4, &qword_1005A4900);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100016714((uint64_t)v4, &qword_1005A4900);
    uint64_t v14 = v13;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    sub_1000672F4(&qword_1005A4910, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.duration(to:)();
    char v15 = static Duration.< infix(_:_:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v15) {
      goto LABEL_6;
    }
    *(void *)(v1 + *(int *)(v12 + 48)) = 0;
    uint64_t v14 = v13;
  }
  sub_100016714(v14, &qword_1005A4900);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v13, v11, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
LABEL_6:
  uint64_t v17 = *(int *)(v12 + 48);
  uint64_t v18 = *(void *)(v1 + v17);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v20 >= 9) {
    uint64_t v20 = 9;
  }
  *(void *)(v1 + v17) = v20;
  uint64_t v21 = *(void *)(v1 + 16);
  if (v21 >= v20)
  {
    uint64_t v26 = static Duration.zero.getter();
LABEL_19:
    uint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return v27;
  }
  BOOL v19 = __OFSUB__(v20, v21);
  uint64_t v22 = v20 - v21;
  if (v19) {
    goto LABEL_21;
  }
  BOOL v19 = __OFSUB__(v22, 1);
  unint64_t v23 = v22 - 1;
  if (!v19)
  {
    BOOL v24 = v23 > 0x40;
    if (v23 >= 0x40) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = 1 << v23;
    }
    if (v24) {
      uint64_t v25 = 0;
    }
    uint64_t v28 = v25;
    sub_1000672A0();
    uint64_t v26 = static Duration.* infix<A>(_:_:)();
    goto LABEL_19;
  }
LABEL_22:
  __break(1u);
  return result;
}

const char *sub_100066700(_xpc_activity_s *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001644C(&qword_1005A48F8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  if (state != 2)
  {
    uint64_t v14 = 0;
    if (state)
    {
LABEL_10:
      *(void *)(v3 + OBJC_IVAR____TtC9appstored38WidgetReloadOnNetworkReachableActivity_activity) = v14;
      return (const char *)swift_unknownObjectRelease();
    }
    xpc_object_t v15 = xpc_activity_copy_criteria(a1);
    uint64_t v16 = *(int *)(v10 + 48);
    sub_100016588(a2, (uint64_t)v12, &qword_1005A48F0);
    *(void *)&v12[v16] = v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1)
    {
      swift_unknownObjectRelease();
      sub_1000671E0((uint64_t)v12, (uint64_t)v9);
      sub_100065BF4();
      xpc_activity_set_criteria(a1, v18);
      swift_unknownObjectRelease();
      sub_100067244((uint64_t)v9);
      goto LABEL_9;
    }
    if (v15)
    {
      swift_unknownObjectRelease();
LABEL_9:
      swift_unknownObjectRetain();
      uint64_t v14 = a1;
      goto LABEL_10;
    }
    xpc_activity_set_completion_status();
    uint64_t result = "com.apple.appstored.WidgetReload";
    if (!"com.apple.appstored.WidgetReload")
    {
      __break(1u);
      goto LABEL_13;
    }
LABEL_7:
    xpc_activity_unregister("com.apple.appstored.WidgetReload");
    uint64_t v14 = 0;
    goto LABEL_10;
  }
  sub_100040518(0xD000000000000011, 0x800000010044CF80);
  xpc_activity_set_completion_status();
  uint64_t result = "com.apple.appstored.WidgetReload";
  if ("com.apple.appstored.WidgetReload") {
    goto LABEL_7;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_100066948(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_100066B4C()
{
  sub_100016714(v0 + OBJC_IVAR____TtC9appstored38WidgetReloadOnNetworkReachableActivity_backoff, (uint64_t *)&unk_1005A48C8);
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100066BA4()
{
  return type metadata accessor for WidgetReloadOnNetworkReachableActivity(0);
}

uint64_t type metadata accessor for WidgetReloadOnNetworkReachableActivity(uint64_t a1)
{
  return sub_100066FAC(a1, (uint64_t *)&unk_1005A48A8);
}

void sub_100066BCC()
{
  sub_100066C70();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100066C70()
{
  if (!qword_1005A48B8)
  {
    type metadata accessor for ContinuousClock();
    sub_1000672F4(&qword_1005A48C0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    unint64_t v0 = type metadata accessor for Backoff();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005A48B8);
    }
  }
}

uint64_t sub_100066D04()
{
  return v0;
}

uint64_t sub_100066D10()
{
  uint64_t v1 = *(void *)(sub_10001644C(&qword_1005A48D8) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();
  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100066E5C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10001644C(&qword_1005A48D8) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100005040;
  return sub_100066114(a1, v6, v7, v8, v9, v10);
}

uint64_t type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(uint64_t a1)
{
  return sub_100066FAC(a1, (uint64_t *)&unk_1005A4990);
}

uint64_t sub_100066FAC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100066FE4()
{
  uint64_t v1 = *(void *)(sub_10001644C(&qword_1005A48F0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v0 + v3, 1, v5))
  {
    uint64_t v6 = type metadata accessor for NWEndpoint();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v3, v6);
    }
    swift_release();
  }
  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

const char *sub_100067170(_xpc_activity_s *a1)
{
  uint64_t v3 = *(void *)(sub_10001644C(&qword_1005A48F0) - 8);
  return sub_100066700(a1, v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_1000671E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100067244(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WidgetReloadOnNetworkReachableActivity.Criteria(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000672A0()
{
  unint64_t result = qword_1005A4908;
  if (!qword_1005A4908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4908);
  }
  return result;
}

uint64_t sub_1000672F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006733C()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006737C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000184D8;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1005A4918 + dword_1005A4918);
  return v5(v2, v3);
}

uint64_t *sub_100067430(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for NWEndpoint();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_10001644C(&qword_1005A48D8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000675B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return swift_release();
}

char *sub_10006767C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_10001644C(&qword_1005A48D8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  swift_retain();
  return a1;
}

char *sub_1000677B0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_10001644C(&qword_1005A48D8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  return a1;
}

char *sub_100067968(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_10001644C(&qword_1005A48D8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  return a1;
}

char *sub_100067A98(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_10001644C(&qword_1005A48D8);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_release();
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_100067C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067C4C);
}

uint64_t sub_100067C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001644C(&qword_1005A48D8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100067D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067D30);
}

uint64_t sub_100067D30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10001644C(&qword_1005A48D8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

void sub_100067DF0()
{
  sub_100067E90();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100067E90()
{
  if (!qword_1005A49A0)
  {
    type metadata accessor for NWEndpoint();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005A49A0);
    }
  }
}

void *sub_100067EE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = (void *)sub_1000A94D0(a1);
    uint64_t v4 = (uint64_t)result;
    int v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 64;
    uint64_t v17 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v18 = v7;
      id v11 = *(id *)(*(void *)(a1 + 56) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v12 = *(void *)(v8 + 8 * v10);
      if ((v12 & (1 << v4)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_26;
      }
      unint64_t v13 = v12 & (-2 << (v4 & 0x3F));
      if (v13)
      {
        int64_t v9 = __clz(__rbit64(v13)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v14 = v10 + 1;
        unint64_t v15 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v15)
        {
          unint64_t v16 = *(void *)(v8 + 8 * v14);
          if (v16)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v16)) + (v14 << 6);
          }
          else
          {
            while (v15 - 2 != v10)
            {
              unint64_t v16 = *(void *)(a1 + 80 + 8 * v10++);
              if (v16)
              {
                unint64_t v14 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v7 = v18 + 1;
      uint64_t v4 = v9;
      if (v18 + 1 == v17) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

double sub_1000680C8@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

id sub_1000680D4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for LaunchHistory()) init];
  qword_1005B14E0 = (uint64_t)result;
  return result;
}

uint64_t sub_100068160(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  self;
  id v3 = sub_10038F000();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = ObjectType;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_10006EF64;
  *(void *)(v5 + 24) = v4;
  void v8[4] = sub_100040438;
  void v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  _OWORD v8[2] = sub_10003D6C8;
  v8[3] = &unk_100513618;
  int v6 = _Block_copy(v8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v3 modifyUsingTransaction:v6];

  _Block_release(v6);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000682E4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return 1;
  }
  id v27 = self;
  id v26 = self;
  sub_100018D68(0, &qword_1005A4A68);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v24 = self;
  swift_bridgeObjectRetain();
  unint64_t v31 = 0;
  uint64_t v30 = v3 - 1;
  for (unint64_t i = (uint64_t *)(a2 + 40); ; i += 2)
  {
    int v6 = (void **)*(i - 1);
    uint64_t v7 = *i;
    sub_10001644C(&qword_1005A4ED0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100489530;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain_n();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    aBlock = v6;
    uint64_t v33 = v7;
    swift_bridgeObjectRetain();
    id v10 = [v27 predicateWithProperty:v9 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    uint64_t v11 = sub_100018D68(0, &qword_1005A4A70);
    *(void *)(v8 + 56) = v11;
    *(void *)(v8 + 32) = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    aBlock = v6;
    uint64_t v33 = v7;
    swift_bridgeObjectRetain();
    id v13 = [v27 predicateWithProperty:v12 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    *(void *)(v8 + 8_Block_object_dispose(&a9, 8) = v11;
    *(void *)(v8 + 64) = v13;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v15 = [v26 predicateMatchingAnyPredicates:isa];

    id v16 = [a1 connection];
    id v17 = sub_1002FF548(ObjCClassFromMetadata, v16, v15);

    id v18 = [v24 defaultProperties];
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = a1;
    v19[3] = v6;
    v19[4] = v7;
    v19[5] = a3;
    id v20 = a1;
    sub_100018DD4((uint64_t)v31);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_10006EFBC;
    *(void *)(v21 + 24) = v19;
    os_log_type_t v36 = sub_10006EFD8;
    uint64_t v37 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v34 = sub_100068A30;
    uint64_t v35 = &unk_100513690;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v17 enumeratePersistentIDsAndProperties:v18 usingBlock:v22];

    _Block_release(v22);
    LOBYTE(v1_Block_object_dispose(&a9, 8) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v18) {
      break;
    }
    if (!v30)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
    --v30;
    unint64_t v31 = sub_10006EFBC;
  }
  __break(1u);
  return result;
}

uint64_t sub_100068764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [a5 connection];
  id v16 = [objc_allocWithZone((Class)LaunchEventEntity) initWithPersistentID:a1 onConnection:v15];

  [v16 deleteFromDatabase];
  static Logger.appUsage.getter();
  swift_bridgeObjectRetain_n();
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v25 = a6;
    uint64_t v29 = v20;
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v27 = v12;
    uint64_t v21 = _typeName(_:qualified:)();
    uint64_t v28 = sub_1000F7290(v21, v22, &v29);
    uint64_t v26 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1000F7290(v25, a7, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}s][%s] Removed launch history", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, v26);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100068A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v8(a2, v9, a4, a5);
  return swift_bridgeObjectRelease();
}

id sub_100068B28(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  sub_100018D68(0, &qword_1005A4A68);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = [a1 connection];
  id v11 = sub_1002FF548(ObjCClassFromMetadata, v10, 0);

  id result = [self defaultProperties];
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000C820(v14);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
    unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v17 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    *(void *)(v17 + ((v8 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_10006F3AC;
    *(void *)(v18 + 24) = v17;
    aBlock[4] = sub_100051124;
    void aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003F95C;
    aBlock[3] = &unk_100513780;
    uint64_t v19 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v11 enumerateMemoryEntitiesWithProperties:isa usingBlock:v19];

    _Block_release(v19);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100068E38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v14 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v15 = a1;
  id v16 = sub_1003AC9B0(v14);
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
    goto LABEL_9;
  }
  uint64_t v17 = v16;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v10, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
  {
LABEL_9:
    __break(1u);
    return;
  }
  char v18 = DateInterval.contains(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if (v18)
  {
    id v19 = v15;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
}

void sub_1000691BC(void (**a1)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for DateInterval();
  uint64_t v75 = *(void *)(v4 - 8);
  id v76 = (char *)v4;
  __chkstk_darwin(v4);
  uint64_t v74 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v77 = (char *)&v72 - v7;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v81 = *(void *)(v8 - 8);
  uint64_t v82 = v8;
  __chkstk_darwin(v8);
  os_log_t v79 = (os_log_t)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v72 - v11;
  uint64_t v12 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for Date();
  id v15 = *(void (***)(char *, char *, uint64_t))(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v72 - v19;
  Date.init()();
  unint64_t v83 = v20;
  Date.timeIntervalSinceReferenceDate.getter();
  double v22 = v21;
  unint64_t v23 = *(os_unfair_lock_s **)&v2[OBJC_IVAR____TtC9appstored13LaunchHistory_lockedThing];
  p_os_unfair_lock_opaque = (double *)&v23[4]._os_unfair_lock_opaque;
  uint64_t v25 = v23 + 6;
  os_unfair_lock_lock(v23 + 6);
  sub_1000680C8(p_os_unfair_lock_opaque, v88);
  os_unfair_lock_unlock(v25);
  uint64_t v84 = a1;
  if (*(double *)v88 != 0.0)
  {
LABEL_7:
    os_unfair_lock_lock(v25);
    sub_1000680C8(p_os_unfair_lock_opaque, v88);
    os_unfair_lock_unlock(v25);
    if (*(double *)v88 != COERCE_DOUBLE(1))
    {
      os_unfair_lock_lock(v25);
      sub_1000680C8(p_os_unfair_lock_opaque, v88);
      os_unfair_lock_unlock(v25);
      if (*(double *)&v2[OBJC_IVAR____TtC9appstored13LaunchHistory_fiveMinutes] >= v22 - *(double *)v88)
      {
        uint64_t v63 = v83;
        uint64_t v51 = v85;
        v15[2](v17, v83, v85);
        uint64_t v64 = v77;
        DateInterval.init(start:duration:)();
        uint64_t v66 = v74;
        uint64_t v65 = v75;
        uint64_t v67 = *(void (**)(char *, char *, char *))(v75 + 16);
        uint64_t v68 = v76;
        v67(v74, v64, v76);
        id v69 = (objc_class *)type metadata accessor for LaunchSyncResult();
        uint64_t v70 = (char *)objc_allocWithZone(v69);
        v67(&v70[OBJC_IVAR____TtC9appstored16LaunchSyncResult_dateInterval], v66, v68);
        *(void *)&v70[OBJC_IVAR____TtC9appstored16LaunchSyncResult_updateCount] = 0;
        *(void *)&v70[OBJC_IVAR____TtC9appstored16LaunchSyncResult_error] = 0;
        v87.receiver = v70;
        v87.super_class = v69;
        objc_msgSendSuper2(&v87, "init");
        id v71 = *(void (**)(char *, char *))(v65 + 8);
        v71(v66, v68);
        v71(v77, v68);
        goto LABEL_18;
      }
    }
    os_unfair_lock_lock(v25);
    sub_1000680C8(p_os_unfair_lock_opaque, v88);
    os_unfair_lock_unlock(v25);
    if (*(double *)v88 <= 0.0)
    {
      os_log_t v52 = v79;
      static Logger.appUsage.getter();
      *(double *)&uint64_t v53 = COERCE_DOUBLE(a1);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        id v76 = v2;
        uint64_t v58 = (double *)v57;
        uint64_t v59 = swift_slowAlloc();
        uint64_t v77 = (char *)v15;
        v88[0] = v59;
        *(_DWORD *)uint64_t v56 = 136446466;
        uint64_t v60 = _typeName(_:qualified:)();
        double v86 = COERCE_DOUBLE(sub_1000F7290(v60, v61, v88));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2112;
        double v86 = *(double *)&v53;
        uint64_t v62 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        double *v58 = *(double *)&v53;

        _os_log_impl((void *)&_mh_execute_header, v54, v55, "[%{public}s/%@] Refreshing launch history events for initial sync", (uint8_t *)v56, 0x16u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        id v15 = (void (**)(char *, char *, uint64_t))v77;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(os_log_t, uint64_t))(v81 + 8))(v79, v82);
      }
      else
      {

        (*(void (**)(os_log_t, uint64_t))(v81 + 8))(v52, v82);
      }
    }
    else
    {
      uint64_t v37 = v80;
      static Logger.appUsage.getter();
      xpc_object_t v38 = a1;
      uint64_t v39 = v2;
      double v40 = COERCE_DOUBLE(v38);
      unsigned int v41 = v39;
      uint64_t v42 = Logger.logObject.getter();
      int v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, (os_log_type_t)v43))
      {
        uint64_t v73 = v41;
        LODWORD(v74) = v43;
        os_log_t v79 = v42;
        id v76 = v2;
        uint64_t v77 = (char *)v15;
        uint64_t v44 = swift_slowAlloc();
        unsigned int v45 = (double *)swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        v88[0] = v75;
        *(_DWORD *)uint64_t v44 = 136446722;
        uint64_t v46 = _typeName(_:qualified:)();
        double v86 = COERCE_DOUBLE(sub_1000F7290(v46, v47, v88));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2112;
        double v86 = v40;
        id v48 = *(id *)&v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unsigned int v45 = v40;

        *(_WORD *)(v44 + 22) = 2048;
        os_unfair_lock_lock(v25);
        sub_1000680C8(p_os_unfair_lock_opaque, &v86);
        os_unfair_lock_unlock(v25);
        double v86 = v22 - v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v49 = v73;

        os_log_t v50 = v79;
        _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v74, "[%{public}s/%@] Refreshing launch history events after %f seconds", (uint8_t *)v44, 0x20u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v82);
        uint64_t v51 = v85;
        id v15 = (void (**)(char *, char *, uint64_t))v77;
LABEL_17:
        sub_100069C70(v84);
        uint64_t v63 = v83;
LABEL_18:
        ((void (*)(char *, uint64_t))v15[1])(v63, v51);
        return;
      }

      (*(void (**)(char *, uint64_t))(v81 + 8))(v37, v82);
    }
    uint64_t v51 = v85;
    goto LABEL_17;
  }
  uint64_t v26 = v2;
  self;
  id v27 = sub_10038F000();
  id v28 = sub_10038F128(v27);

  if (!v28)
  {
    uint64_t v2 = v26;
    goto LABEL_7;
  }
  id v29 = sub_1003F1D54(v28);
  if (v29)
  {
    uint64_t v30 = v29;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v31 = v15[4];
    uint64_t v32 = v15;
    uint64_t v33 = v85;
    v31(v14, v17, v85);
    ((void (*)(char *, void, uint64_t, uint64_t))v32[7])(v14, 0, 1, v33);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v32[6])(v14, 1, v33) != 1)
    {
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v35 = v34;
      uint64_t v36 = ((uint64_t (*)(char *, uint64_t))v32[1])(v14, v33);
      __chkstk_darwin(v36);
      *(&v72 - 2) = v35;
      os_unfair_lock_lock(v25);
      sub_10006F484(p_os_unfair_lock_opaque);
      os_unfair_lock_unlock(v25);

      id v15 = v32;
      uint64_t v2 = v26;
      a1 = v84;
      goto LABEL_7;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v15[7])(v14, 1, 1, v85);
  }
  __break(1u);

  os_unfair_lock_unlock(v25);
  __break(1u);
}

uint64_t sub_100069C70(void (**a1)(char *, uint64_t, uint64_t, uint64_t))
{
  id v108 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v1 = type metadata accessor for DateInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v1);
  uint64_t v5 = (void **)((char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  unint64_t v7 = (unint64_t)&v96 - v6;
  uint64_t v8 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v112 = *(void *)(v11 - 8);
  uint64_t v113 = v11;
  uint64_t v12 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v11);
  uint64_t v107 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v12);
  os_log_type_t v111 = (char *)&v96 - v15;
  uint64_t v16 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v14);
  id v109 = (char *)&v96 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v96 - v18;
  uint64_t v126 = 0;
  uint64_t v20 = swift_allocObject();
  uint64_t v106 = v20;
  *(void *)(v20 + 16) = 0;
  uint64_t v99 = v20 + 16;
  uint64_t v114 = self;
  id v21 = sub_10038F000();
  id v22 = sub_10038F128(v21);

  if (!v22) {
    id v22 = [objc_allocWithZone((Class)LaunchEventSyncMetadata) init];
  }
  id v110 = v19;
  id v104 = v22;
  id v23 = sub_1003F1D54(v22);
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56))(v10, 1, 1, v113);
    goto LABEL_7;
  }
  uint64_t v24 = v23;
  uint64_t v25 = v109;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = v112;
  id v27 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
  id v28 = v25;
  uint64_t v29 = v113;
  v27(v10, v28, v113);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v29) == 1)
  {
LABEL_7:
    uint64_t v30 = v110;
    static Date.distantPast.getter();
    sub_1000214BC((uint64_t)v10);
    goto LABEL_8;
  }
  uint64_t v30 = v110;
  v27(v110, v10, v113);
LABEL_8:
  static Date.now.getter();
  uint64_t v31 = v112 + 16;
  uint64_t v97 = *(void (**)(char *, char *, uint64_t))(v112 + 16);
  v97(v109, v30, v113);
  static Date.distantFuture.getter();
  DateInterval.init(start:end:)();
  uint64_t v32 = v108;
  sub_10006B480(v108, (void *)v7, 1);
  unint64_t v125 = v33;
  id v34 = [objc_allocWithZone((Class)type metadata accessor for Intents()) init];
  sub_1000CDADC((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v7, v32);
  unint64_t v36 = v35;

  if (v36) {
    sub_10009BE44(v36);
  }
  id v37 = (id)v125;
  uint64_t v98 = v31;
  if ((v125 & 0x8000000000000000) != 0 || (v125 & 0x4000000000000000) != 0) {
    goto LABEL_49;
  }
  xpc_object_t v38 = (void **)(v125 & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain_n();
LABEL_13:
  aBlock = v38;
  sub_10006D384((uint64_t *)&aBlock);
  uint64_t v105 = 0;
  swift_bridgeObjectRelease();
  uint64_t v39 = aBlock;
  if (((unint64_t)aBlock & 0x8000000000000000) != 0 || ((unint64_t)aBlock & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    id v40 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    id v40 = aBlock[2];
  }
  uint64_t v100 = v5;
  unint64_t v101 = v7;
  uint64_t v102 = v2;
  uint64_t v103 = v1;
  if (v40)
  {
    unint64_t v117 = (unint64_t)v39 & 0xC000000000000001;
    uint64_t v5 = (void **)&_swiftEmptyDictionarySingleton;
    uint64_t v41 = 4;
    unint64_t v7 = v114;
    uint64_t v1 = ObjectType;
    id v116 = v40;
    while (1)
    {
      if (v117) {
        id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v43 = v39[v41];
      }
      id v37 = v43;
      id v44 = (id)(v41 - 3);
      if (__OFADD__(v41 - 4, 1))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        swift_bridgeObjectRetain_n();
        xpc_object_t v38 = (void **)sub_1000A879C((unint64_t)v37);
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      id v45 = sub_1003ACB70(v43);
      if (!v45)
      {
        id v45 = sub_1003AC978(v37);
        if (!v45)
        {

          goto LABEL_21;
        }
      }
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v46;

      if (!v5[2]) {
        goto LABEL_32;
      }
      swift_bridgeObjectRetain();
      sub_100049A4C(v2, v47);
      if ((v48 & 1) == 0) {
        break;
      }

      swift_bridgeObjectRelease_n();
LABEL_20:
      id v40 = v116;
LABEL_21:
      ++v41;
      if (v44 == v40) {
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease();
LABEL_32:
    uint64_t v49 = v5;
    uint64_t v5 = v39;
    id v37 = v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock = v49;
    unint64_t v7 = sub_100049A4C(v2, v47);
    os_log_t v52 = v49[2];
    BOOL v53 = (v51 & 1) == 0;
    uint64_t v54 = (uint64_t)v52 + v53;
    if (__OFADD__(v52, v53)) {
      goto LABEL_47;
    }
    uint64_t v1 = v51;
    if ((uint64_t)v49[3] >= v54)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1000D3B44();
      }
    }
    else
    {
      sub_1000D0F00(v54, isUniquelyReferenced_nonNull_native);
      unint64_t v55 = sub_100049A4C(v2, v47);
      if ((v1 & 1) != (v56 & 1)) {
        goto LABEL_53;
      }
      unint64_t v7 = v55;
    }
    uint64_t v39 = v5;
    uint64_t v5 = aBlock;
    if (v1)
    {
      uint64_t v42 = (id *)aBlock[7];

      v42[v7] = v37;
    }
    else
    {
      aBlock[(v7 >> 6) + 8] = (void *)((unint64_t)aBlock[(v7 >> 6) + 8] | (1 << v7));
      uint64_t v57 = (uint64_t *)((char *)v5[6] + 16 * v7);
      *uint64_t v57 = v2;
      v57[1] = v47;
      *((void *)v5[7] + v7) = v37;
      uint64_t v58 = (char *)v5[2];
      BOOL v59 = __OFADD__(v58, 1);
      uint64_t v60 = v58 + 1;
      if (v59) {
        goto LABEL_48;
      }
      _OWORD v5[2] = v60;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v7 = v114;
    uint64_t v1 = ObjectType;
    goto LABEL_20;
  }
  uint64_t v1 = ObjectType;
LABEL_43:
  swift_release();
  uint64_t v61 = swift_bridgeObjectRetain();
  uint64_t v62 = v105;
  uint64_t v63 = sub_100067EE8(v61);
  id v116 = v62;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v64 = sub_10038F000();
  uint64_t v65 = (void *)swift_allocObject();
  uint64_t v66 = v106;
  v65[2] = v63;
  v65[3] = v66;
  uint64_t v67 = v108;
  v65[4] = v108;
  v65[5] = &v126;
  v65[6] = v1;
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = sub_10006EEA4;
  *(void *)(v68 + 24) = v65;
  unint64_t v117 = (unint64_t)v65;
  os_log_t v123 = sub_10003F908;
  uint64_t v124 = v68;
  aBlock = _NSConcreteStackBlock;
  uint64_t v120 = 1107296256;
  os_log_t v121 = sub_10003D6C8;
  char v122 = &unk_100513528;
  uint64_t v69 = v1;
  uint64_t v70 = _Block_copy(&aBlock);
  swift_retain();
  id v71 = v67;
  swift_retain();
  swift_release();
  [v64 modifyUsingTransaction:v70];

  _Block_release(v70);
  LOBYTE(v64) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v64)
  {
    __break(1u);
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v73 = v104;
    [v104 setValue:isa forProperty:@"last_duet_sync"];

    id v74 = sub_10038F000();
    uint64_t v75 = (void *)swift_allocObject();
    v75[2] = v73;
    v75[3] = v71;
    v75[4] = v69;
    uint64_t v76 = swift_allocObject();
    *(void *)(v76 + 16) = sub_10006EF04;
    *(void *)(v76 + 24) = v75;
    uint64_t ObjectType = (uint64_t)v75;
    os_log_t v123 = sub_100040438;
    uint64_t v124 = v76;
    aBlock = _NSConcreteStackBlock;
    uint64_t v120 = 1107296256;
    os_log_t v121 = sub_10003D6C8;
    char v122 = &unk_1005135A0;
    uint64_t v77 = _Block_copy(&aBlock);
    os_log_type_t v78 = v71;
    id v79 = v73;
    swift_retain();
    swift_release();
    [v74 modifyUsingTransaction:v77];

    _Block_release(v77);
    LOBYTE(v74) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v74 & 1) == 0)
    {
      uint64_t v80 = Date.timeIntervalSinceReferenceDate.getter();
      *((double *)&v96 - 2) = __chkstk_darwin(v80);
      p_os_unfair_lock_opaque = (double *)&v81[4]._os_unfair_lock_opaque;
      unint64_t v83 = v81 + 6;
      os_unfair_lock_lock(v81 + 6);
      sub_10006EF20(p_os_unfair_lock_opaque);
      os_unfair_lock_unlock(v83);
      uint64_t v84 = v113;
      v97(v109, v110, v113);
      static Date.distantFuture.getter();
      uint64_t v85 = v100;
      DateInterval.init(start:end:)();
      swift_beginAccess();
      id v116 = v79;
      uint64_t v86 = *(void *)(v106 + 16);
      uint64_t v87 = v126;
      uint64_t v88 = (objc_class *)type metadata accessor for LaunchSyncResult();
      uint64_t v89 = (char *)objc_allocWithZone(v88);
      uint64_t v90 = v102;
      uint64_t v91 = v103;
      (*(void (**)(char *, void **, uint64_t))(v102 + 16))(&v89[OBJC_IVAR____TtC9appstored16LaunchSyncResult_dateInterval], v85, v103);
      *(void *)&v89[OBJC_IVAR____TtC9appstored16LaunchSyncResult_updateCount] = v86;
      *(void *)&v89[OBJC_IVAR____TtC9appstored16LaunchSyncResult_error] = v87;
      swift_errorRetain();
      v118.receiver = v89;
      v118.super_class = v88;
      id v92 = objc_msgSendSuper2(&v118, "init");
      uint64_t v93 = *(void (**)(void **, uint64_t))(v90 + 8);
      v93(v85, v91);

      v93((void **)v101, v91);
      uint64_t v94 = *(void (**)(char *, uint64_t))(v112 + 8);
      v94(v111, v84);
      v94(v110, v84);
      swift_release();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_release();
      swift_release();
      return (uint64_t)v92;
    }
  }
  __break(1u);
LABEL_53:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

BOOL sub_10006A8E8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v55 = a6;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v50 - v14;
  sub_100018D68(0, &qword_1005A4A60);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v60[0] = 0;
  id v17 = sub_10040DF84(a1, isa);

  if (!v17)
  {
    id v30 = v60[0];
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    *a5 = v31;
    swift_errorRetain();
    swift_errorRelease();
    static Logger.appUsage.getter();
    id v32 = a4;
    swift_errorRetain();
    id v33 = v32;
    swift_errorRetain();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      LODWORD(v53) = v36;
      uint64_t v39 = (void *)v38;
      uint64_t v54 = (void *)swift_slowAlloc();
      v60[0] = v54;
      *(_DWORD *)uint64_t v37 = 136446722;
      os_log_t v52 = v34;
      uint64_t v40 = _typeName(_:qualified:)();
      uint64_t v58 = sub_1000F7290(v40, v41, (uint64_t *)v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2112;
      uint64_t v58 = (uint64_t)v33;
      id v42 = v33;
      uint64_t v55 = v10;
      id v43 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v33;

      *(_WORD *)(v37 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v44 = Error.localizedDescription.getter();
      uint64_t v58 = sub_1000F7290(v44, v45, (uint64_t *)v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v46 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v53, "[%{public}s/%@] Launch history import failed with error: %{public}s", (uint8_t *)v37, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v55);
      return v17 != 0;
    }
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();

    uint64_t v47 = *(void (**)(char *, uint64_t))(v56 + 8);
    char v48 = v13;
LABEL_8:
    v47(v48, v10);
    return v17 != 0;
  }
  id v18 = v60[0];
  id v19 = [v17 count];
  swift_beginAccess();
  *(void *)(a3 + 16) = v19;
  static Logger.appUsage.getter();
  id v20 = a4;
  swift_retain_n();
  id v21 = v20;
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (!os_log_type_enabled(v22, v23))
  {

    swift_release_n();
    uint64_t v47 = *(void (**)(char *, uint64_t))(v56 + 8);
    char v48 = v15;
    goto LABEL_8;
  }
  uint64_t v25 = swift_slowAlloc();
  uint64_t v51 = (void *)swift_slowAlloc();
  uint64_t v53 = swift_slowAlloc();
  uint64_t v59 = v53;
  *(_DWORD *)uint64_t v25 = 136446722;
  uint64_t v54 = v17;
  uint64_t v26 = _typeName(_:qualified:)();
  uint64_t v55 = v10;
  uint64_t v58 = sub_1000F7290(v26, v27, &v59);
  LODWORD(v52) = v24;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v25 + 12) = 2112;
  uint64_t v58 = (uint64_t)v21;
  id v28 = v21;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v51 = v21;

  *(_WORD *)(v25 + 22) = 2048;
  swift_beginAccess();
  uint64_t v29 = *(void *)(a3 + 16);
  swift_release();
  uint64_t v57 = v29;
  id v17 = v54;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v52, "[%{public}s/%@] Launch history import resulted in %ld updated event(s)", (uint8_t *)v25, 0x20u);
  sub_10001644C((uint64_t *)&unk_1005A3AA0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v56 + 8))(v15, v55);
  return v17 != 0;
}

BOOL sub_10006AF78(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  id v13 = sub_10040E3A0(a1, a2);
  if (!v13)
  {
    static Logger.appUsage.getter();
    id v22 = a3;
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      os_log_t v32 = (os_log_t)swift_slowAlloc();
      id v33 = (void *)swift_slowAlloc();
      uint64_t v37 = v33;
      *(_DWORD *)uint64_t v25 = 136446466;
      uint64_t v35 = v6;
      uint64_t v26 = _typeName(_:qualified:)();
      uint64_t v34 = 0;
      uint64_t v36 = sub_1000F7290(v26, v27, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2112;
      uint64_t v36 = (uint64_t)v22;
      id v28 = v22;
      id v13 = (id)v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v32->Class isa = (Class)v22;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s/%@] Launch history metadata import failed", (uint8_t *)v25, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v35);
      return v13 != 0;
    }

    uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
    id v30 = v10;
LABEL_8:
    v29(v30, v6);
    return v13 != 0;
  }
  static Logger.appUsage.getter();
  id v14 = a3;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v15, v16))
  {

    uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
    id v30 = v12;
    goto LABEL_8;
  }
  uint64_t v17 = swift_slowAlloc();
  id v33 = (void *)swift_slowAlloc();
  uint64_t v34 = swift_slowAlloc();
  uint64_t v37 = (void *)v34;
  *(_DWORD *)uint64_t v17 = 136446466;
  uint64_t v35 = v6;
  uint64_t v18 = _typeName(_:qualified:)();
  uint64_t v36 = sub_1000F7290(v18, v19, (uint64_t *)&v37);
  os_log_t v32 = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v17 + 12) = 2112;
  uint64_t v36 = (uint64_t)v14;
  id v20 = v14;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *id v33 = v14;

  os_log_t v21 = v32;
  _os_log_impl((void *)&_mh_execute_header, v32, v16, "[%{public}s/%@] Launch history metadata imported", (uint8_t *)v17, 0x16u);
  sub_10001644C((uint64_t *)&unk_1005A3AA0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v35);
  return v13 != 0;
}

void sub_10006B480(void (**a1)(char *, uint64_t, uint64_t, uint64_t), void *a2, int a3)
{
  int v203 = a3;
  id v211 = a2;
  uint64_t v209 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  char v183 = (char *)v171 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  char v182 = (char *)v171 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v175 = (char *)v171 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  char v184 = (char *)v171 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  char v176 = (char *)v171 - v13;
  __chkstk_darwin(v12);
  char v185 = (char *)v171 - v14;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v195 = *(void (***)(void, void))(v15 - 8);
  int64_t v196 = v195;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DateInterval();
  unint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  id v22 = (char *)v171 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  os_log_type_t v24 = (char *)v171 - v23;
  uint64_t v25 = type metadata accessor for Logger();
  Swift::Int v210 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  id v204 = (char *)v171 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  id v30 = (char *)v171 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v192 = (char *)v171 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)v171 - v33);
  unint64_t v215 = (unint64_t)_swiftEmptyArrayStorage;
  static Logger.appUsage.getter();
  unint64_t v208 = v19;
  uint64_t v35 = *(void (**)(void, void, void))(v19 + 16);
  v206 = v24;
  uint64_t v36 = v24;
  id v37 = v211;
  v35(v36, v211, v18);
  uint64_t v207 = v22;
  uint64_t v205 = (void (**)(void, void, void))v18;
  v35(v22, v37, v18);
  uint64_t v38 = v209;
  uint64_t v209 = v34;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  int v41 = v40;
  BOOL v42 = os_log_type_enabled(v39, v40);
  uint64_t v202 = v25;
  uint64_t v200 = v15;
  char v197 = v30;
  id v199 = v38;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v44 = (void *)swift_slowAlloc();
    uint64_t v194 = v44;
    v201 = (void *)swift_slowAlloc();
    id v216 = v201;
    *(_DWORD *)uint64_t v43 = 136446978;
    LODWORD(v19_Block_object_dispose(&a9, 8) = v41;
    uint64_t v45 = _typeName(_:qualified:)();
    id v214 = (void *)sub_1000F7290(v45, v46, (uint64_t *)&v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2112;
    id v214 = v38;
    uint64_t v47 = v38;
    uint64_t v191 = (void **)&v215;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v44 = v38;

    *(_WORD *)(v43 + 22) = 2080;
    char v48 = v206;
    DateInterval.start.getter();
    sub_10002151C();
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v51 = v50;
    os_log_t v193 = v39;
    os_log_t v52 = v196[1];
    v52(v17, v200);
    id v214 = (void *)sub_1000F7290(v49, v51, (uint64_t *)&v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v53 = *(void (**)(void, void))(v208 + 8);
    uint64_t v54 = v205;
    v53(v48, v205);
    *(_WORD *)(v43 + 32) = 2080;
    unint64_t v208 = v43 + 34;
    uint64_t v55 = (uint64_t)v207;
    DateInterval.end.getter();
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v58 = v57;
    v52(v17, v200);
    id v214 = (void *)sub_1000F7290(v56, v58, (uint64_t *)&v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v53(v55, v54);
    os_log_t v59 = v193;
    _os_log_impl((void *)&_mh_execute_header, v193, (os_log_type_t)v198, "[%{public}s/%@] Looking for source events from startDate: %s endDate: %s", (uint8_t *)v43, 0x2Au);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v15 = v200;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v60 = *(void (**)(void, void))(v208 + 8);
    uint64_t v61 = v205;
    v60(v206, v205);
    v60(v207, v61);
  }
  uint64_t v198 = *(void (**)(void, void))(v210 + 8);
  v198(v209, v202);
  uint64_t v62 = self;
  char v63 = sub_100390AD0();
  id v214 = &_swiftEmptySetSingleton;
  DateInterval.start.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v66 = v196 + 1;
  uint64_t v65 = v196[1];
  v65(v17, v15);
  DateInterval.end.getter();
  Class v67 = Date._bridgeToObjectiveC()().super.isa;
  char v190 = v65;
  v65(v17, v15);
  id v216 = 0;
  id v68 = sub_10039058C(v62, v63, isa, v67, 0, &v216);

  id v69 = v216;
  if (!v68)
  {
    uint64_t v157 = v69;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();
    uint64_t v158 = v204;
    static Logger.appUsage.getter();
    uint64_t v159 = v199;
    swift_errorRetain();
    uint64_t v160 = v159;
    swift_errorRetain();
    uint64_t v161 = Logger.logObject.getter();
    os_log_type_t v162 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v161, v162))
    {
      uint64_t v163 = swift_slowAlloc();
      char v164 = (void *)swift_slowAlloc();
      id v211 = (id)swift_slowAlloc();
      id v216 = v211;
      *(_DWORD *)uint64_t v163 = 136446722;
      uint64_t v165 = _typeName(_:qualified:)();
      id v214 = (void *)sub_1000F7290(v165, v166, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v163 + 12) = 2112;
      id v214 = v160;
      uint64_t v167 = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v164 = v160;

      *(_WORD *)(v163 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v168 = Error.localizedDescription.getter();
      id v214 = (void *)sub_1000F7290(v168, v169, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v161, v162, "[%{public}s/%@] Error accessing Biome launches: %{public}s", (uint8_t *)v163, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      id v170 = v204;
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();

      id v170 = v158;
    }
    v198(v170, v202);
    return;
  }
  sub_100018D68(0, &qword_1005A4A58);
  unint64_t v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v206 = v17;
  int64_t v196 = v66;
  if (v70 >> 62)
  {
LABEL_61:
    swift_bridgeObjectRetain();
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v72) {
      goto LABEL_7;
    }
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v72 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v72) {
    goto LABEL_62;
  }
LABEL_7:
  unint64_t v208 = v70 & 0xC000000000000001;
  uint64_t v209 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v195 + 7);
  id v204 = (char *)(v195 + 6);
  uint64_t v205 = (void (**)(void, void, void))(v195 + 4);
  uint64_t v195 = (void (**)(void, void))(v210 + 8);
  uint64_t v173 = &v213;
  uint64_t v73 = 4;
  *(void *)&long long v71 = 136447234;
  long long v172 = v71;
  v171[1] = (char *)&type metadata for Any + 8;
  *(void *)&long long v71 = 136446722;
  long long v174 = v71;
  uint64_t v191 = (void **)v70;
  v201 = (void *)v72;
  while (1)
  {
    if (v208) {
      id v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v74 = *(id *)(v70 + 8 * v73);
    }
    id v75 = v74;
    os_log_t v76 = (os_log_t)(v73 - 3);
    if (__OFADD__(v73 - 4, 1))
    {
      __break(1u);
      goto LABEL_61;
    }
    id v77 = (id)sub_10038DD20((uint64_t)v74);
    if (!v77)
    {

      goto LABEL_9;
    }
    os_log_type_t v78 = v77;
    unint64_t v79 = v70;
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v82 = v81;
    if (v203)
    {
      uint64_t v83 = (uint64_t)v214;
      swift_bridgeObjectRetain();
      char v84 = sub_10009C4CC(v80, v82, v83);
      swift_bridgeObjectRelease();
      if (v84)
      {

        swift_bridgeObjectRelease();
LABEL_25:
        uint64_t v72 = (uint64_t)v201;
        unint64_t v70 = v79;
        goto LABEL_9;
      }
    }
    uint64_t v207 = (char *)v80;
    Swift::Int v210 = v82;
    unsigned int v85 = sub_10038DD38((uint64_t)v75) - 4;
    id v211 = v75;
    if (v85 < 3) {
      break;
    }

    uint64_t v94 = v192;
    static Logger.appUsage.getter();
    uint64_t v95 = v199;
    uint64_t v96 = v199;
    Swift::Int v97 = v210;
    swift_bridgeObjectRetain();
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v98, v99))
    {

      swift_bridgeObjectRelease_n();
      uint64_t v198 = *v195;
      v198(v94, v202);
      goto LABEL_25;
    }
    unint64_t v100 = v97;
    uint64_t v101 = swift_slowAlloc();
    uint64_t v102 = (void *)swift_slowAlloc();
    uint64_t v198 = (void (*)(void, void))swift_slowAlloc();
    id v216 = v198;
    *(_DWORD *)uint64_t v101 = v174;
    uint64_t v103 = _typeName(_:qualified:)();
    *(void *)(v101 + 4) = sub_1000F7290(v103, v104, (uint64_t *)&v216);
    uint64_t v15 = v200;
    swift_bridgeObjectRelease();
    *(_WORD *)(v101 + 12) = 2112;
    *(void *)(v101 + 14) = v96;
    *uint64_t v102 = v95;

    *(_WORD *)(v101 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v101 + 24) = sub_1000F7290((uint64_t)v207, v100, (uint64_t *)&v216);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "[%{public}s/%@] [%s) Unsupported source stream", (uint8_t *)v101, 0x20u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    uint64_t v105 = v191;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v70 = (unint64_t)v105;
    uint64_t v198 = *v195;
    v198(v192, v202);
    uint64_t v72 = (uint64_t)v201;
LABEL_9:
    ++v73;
    if (v76 == (os_log_t)v72) {
      goto LABEL_62;
    }
  }
  LODWORD(v194) = v85;
  os_log_t v193 = (os_log_t)(v73 - 3);
  id v86 = (id)sub_1002F948C((uint64_t)v75);
  uint64_t v87 = v197;
  unint64_t v70 = v79;
  if (!v86)
  {
    id v92 = *v209;
    uint64_t v91 = (uint64_t)v185;
    (*v209)(v185, 1, 1, v15);
    goto LABEL_27;
  }
  uint64_t v88 = v86;
  uint64_t v89 = v206;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v90 = *v205;
  uint64_t v91 = (uint64_t)v185;
  (*v205)(v185, v89, v15);
  id v92 = *v209;
  (*v209)((char *)v91, 0, 1, v15);
  uint64_t v93 = *(unsigned int (**)(void, void, void))v204;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v204)(v91, 1, v15) == 1)
  {
    id v75 = v211;
LABEL_27:
    sub_1000214BC(v91);
    unint64_t v106 = 0xE200000000000000;
    uint64_t v188 = 16718;
    goto LABEL_31;
  }
  sub_1000214BC(v91);
  id v216 = 0;
  unint64_t v217 = 0xE000000000000000;
  id v107 = (id)sub_1002F948C((uint64_t)v211);
  if (!v107) {
    goto LABEL_64;
  }
  id v108 = v107;
  id v109 = v206;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v110 = v176;
  v90(v176, v109, v15);
  v92(v110, 0, 1, v15);
  if (v93(v110, 1, v15) == 1) {
    goto LABEL_65;
  }
  sub_10002151C();
  v111._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v190(v110, v15);
  unint64_t v106 = v217;
  uint64_t v188 = (uint64_t)v216;
  uint64_t v87 = v197;
  unint64_t v70 = (unint64_t)v191;
  id v75 = v211;
LABEL_31:
  id v112 = (id)sub_10038DD2C((uint64_t)v75);
  if (!v112)
  {
    uint64_t v116 = (uint64_t)v184;
    v92(v184, 1, 1, v15);
    goto LABEL_37;
  }
  uint64_t v113 = v112;
  uint64_t v114 = v206;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v115 = *v205;
  uint64_t v116 = (uint64_t)v184;
  (*v205)(v184, v114, v15);
  v92((char *)v116, 0, 1, v15);
  unint64_t v117 = *(unsigned int (**)(void, void, void))v204;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v204)(v116, 1, v15) == 1)
  {
LABEL_37:
    sub_1000214BC(v116);
    id v92 = (void (*)(char *, uint64_t, uint64_t, uint64_t))0xE200000000000000;
    uint64_t v187 = 16718;
LABEL_38:
    static Logger.appUsage.getter();
    uint64_t v124 = v199;
    unint64_t v125 = v199;
    unint64_t v126 = v210;
    swift_bridgeObjectRetain_n();
    uint64_t v127 = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v128 = Logger.logObject.getter();
    os_log_type_t v129 = static os_log_type_t.default.getter();
    int v186 = v129;
    if (os_log_type_enabled(v128, v129))
    {
      uint64_t v130 = swift_slowAlloc();
      id v131 = (void *)swift_slowAlloc();
      char v178 = v131;
      id v181 = (void *)swift_slowAlloc();
      id v216 = v181;
      *(_DWORD *)uint64_t v130 = v172;
      uint64_t v179 = v92;
      uint64_t v132 = _typeName(_:qualified:)();
      unint64_t v177 = v106;
      uint64_t v212 = sub_1000F7290(v132, v133, (uint64_t *)&v216);
      os_log_t v180 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v130 + 12) = 2112;
      uint64_t v212 = (uint64_t)v127;
      uint64_t v134 = v127;
      os_log_t v135 = v197;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v131 = v124;

      *(_WORD *)(v130 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v212 = sub_1000F7290((uint64_t)v207, v126, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v130 + 32) = 2080;
      unint64_t v136 = v177;
      swift_bridgeObjectRetain();
      uint64_t v212 = sub_1000F7290(v188, v136, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v130 + 42) = 2080;
      id v92 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v130 + 44);
      unint64_t v137 = (unint64_t)v179;
      swift_bridgeObjectRetain();
      uint64_t v212 = sub_1000F7290(v187, v137, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v138 = v180;
      _os_log_impl((void *)&_mh_execute_header, v180, (os_log_type_t)v186, "[%{public}s/%@] [%s] Found app launch usage with startDate: %s endDate: %s", (uint8_t *)v130, 0x34u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v70 = (unint64_t)v191;
      swift_slowDealloc();

      os_log_t v139 = v135;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      os_log_t v139 = v87;
    }
    v198(v139, v202);
    id v140 = v211;
    id v141 = sub_1003AC668(objc_allocWithZone((Class)LaunchEvent), ((_BYTE)v194 + 5));
    uint64_t v15 = v200;
    if (!v141)
    {

      __break(1u);
LABEL_64:
      v92(v176, 1, 1, v15);
LABEL_65:

      __break(1u);
    }
    os_log_t v142 = v141;
    sub_1003ACEB8(v141, (const char *)v78);

    NSString v143 = (char *)(id)sub_10038DFDC((uint64_t)v140);
    sub_1003ACED0(v142, v143);

    Class v144 = (Class)(id)sub_1002F948C((uint64_t)v140);
    Swift::Int v145 = (Swift::Int)v207;
    if (v144)
    {
      uint64_t v146 = v206;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v147 = v182;
      (*v205)(v182, v146, v15);
      id v148 = *v209;
      (*v209)(v147, 0, 1, v15);
      int v149 = (*(uint64_t (**)(char *, uint64_t, uint64_t))v204)(v147, 1, v15);
      NSString v150 = v183;
      if (v149 == 1)
      {
        Class v144 = 0;
      }
      else
      {
        id v151 = v147;
        Class v144 = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v152 = v151;
        id v140 = v211;
        v190(v152, v15);
      }
    }
    else
    {
      id v148 = *v209;
      (*v209)(v182, 1, 1, v15);
      NSString v150 = v183;
    }
    sub_1003ACF00(v142, (const char *)v144);

    Class v153 = (Class)(id)sub_10038DD2C((uint64_t)v140);
    if (v153)
    {
      uint64_t v154 = v206;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*v205)(v150, v154, v15);
      v148(v150, 0, 1, v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v204)(v150, 1, v15) == 1)
      {
        Class v153 = 0;
      }
      else
      {
        Class v153 = Date._bridgeToObjectiveC()().super.isa;
        v190(v150, v15);
      }
      id v140 = v211;
    }
    else
    {
      v148(v150, 1, 1, v15);
    }
    sub_1003ACEE8(v142, (const char *)v153);

    BOOL v155 = sub_10027CCE0((BOOL)v140);
    sub_1003ACF18(v142, v155);
    id v156 = v142;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v215 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v215 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_1000BBA74((Swift::Int *)&v216, v145, v210);

    swift_bridgeObjectRelease();
    uint64_t v72 = (uint64_t)v201;
    os_log_t v76 = v193;
    goto LABEL_9;
  }
  unint64_t v118 = v106;
  sub_1000214BC(v116);
  id v216 = 0;
  unint64_t v217 = 0xE000000000000000;
  id v119 = (id)sub_10038DD2C((uint64_t)v211);
  if (v119)
  {
    uint64_t v120 = v119;
    os_log_t v121 = v206;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    char v122 = v175;
    v115(v175, v121, v15);
    v92(v122, 0, 1, v15);
    if (v117(v122, 1, v15) == 1) {
      goto LABEL_67;
    }
    sub_10002151C();
    v123._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v123);
    swift_bridgeObjectRelease();
    v190(v122, v15);
    id v92 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v217;
    uint64_t v187 = (uint64_t)v216;
    unint64_t v70 = (unint64_t)v191;
    unint64_t v106 = v118;
    uint64_t v87 = v197;
    goto LABEL_38;
  }
  v92(v175, 1, 1, v15);
LABEL_67:

  __break(1u);
}

id sub_10006D088(uint64_t a1)
{
  return sub_10006D1D0(a1, type metadata accessor for LaunchHistory);
}

uint64_t type metadata accessor for LaunchHistory()
{
  return self;
}

id sub_10006D1B4()
{
  return sub_10006D1D0(0, type metadata accessor for LaunchSyncResult);
}

id sub_10006D1D0(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10006D288()
{
  return type metadata accessor for LaunchSyncResult();
}

uint64_t type metadata accessor for LaunchSyncResult()
{
  uint64_t result = qword_1005A4A48;
  if (!qword_1005A4A48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006D2DC()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006D384(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100089C0C(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_10006D400(v6);
  return specialized ContiguousArray._endMutation()();
}

void sub_10006D400(uint64_t *a1)
{
  unint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v173 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  unint64_t v166 = (char *)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v169 = (char *)&v148 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v156 = (char *)&v148 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v161 = (char *)&v148 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v152 = (char *)&v148 - v18;
  __chkstk_darwin(v17);
  uint64_t v154 = (char *)&v148 - v19;
  Class v153 = a1;
  Swift::Int v20 = a1[1];
  Swift::Int v21 = _minimumMergeRunLength(_:)(v20);
  if (v21 >= v20)
  {
    if (v20 < 0) {
      goto LABEL_144;
    }
    if (v20) {
      sub_10006E274(0, (char *)v20, (char *)1, v153);
    }
    return;
  }
  if (v20 >= 0) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = v20 + 1;
  }
  if (v20 < -1) {
    goto LABEL_164;
  }
  Swift::Int v150 = v21;
  uint64_t v159 = (char *)v20;
  uint64_t v164 = v1;
  if (v20 < 2)
  {
    uint64_t v25 = (char *)_swiftEmptyArrayStorage;
    uint64_t v175 = (uint64_t)_swiftEmptyArrayStorage;
    os_log_type_t v162 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v20 != 1)
    {
      unint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_110:
      if (v29 >= 2)
      {
        uint64_t v144 = *v153;
        do
        {
          unint64_t v5 = v29 - 2;
          if (v29 < 2) {
            goto LABEL_139;
          }
          if (!v144) {
            goto LABEL_159;
          }
          uint64_t v3 = v25;
          uint64_t v145 = *(void *)&v25[16 * v5 + 32];
          uint64_t v2 = *(char **)&v25[16 * v29 + 24];
          uint64_t v146 = v164;
          sub_10006E62C((char *)(v144 + 8 * v145), (void **)(v144 + 8 * *(void *)&v25[16 * v29 + 16]), (void **)(v144 + 8 * (void)v2), v162);
          uint64_t v164 = v146;
          if (v146) {
            break;
          }
          if ((uint64_t)v2 < v145) {
            goto LABEL_140;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v3 = sub_100089994((uint64_t)v3);
          }
          if (v5 >= *((void *)v3 + 2)) {
            goto LABEL_141;
          }
          uint64_t v147 = &v3[16 * v5 + 32];
          *(void *)uint64_t v147 = v145;
          *((void *)v147 + 1) = v2;
          unint64_t v5 = *((void *)v3 + 2);
          if (v29 > v5) {
            goto LABEL_142;
          }
          memmove(&v3[16 * v29 + 16], &v3[16 * v29 + 32], 16 * (v5 - v29));
          uint64_t v25 = v3;
          *((void *)v3 + 2) = v5 - 1;
          unint64_t v29 = v5 - 1;
        }
        while (v5 > 2);
      }
LABEL_121:
      swift_bridgeObjectRelease();
      *(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v23 = v22 >> 1;
    sub_100018D68(0, &qword_1005A4A60);
    uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) = v23;
    os_log_type_t v162 = (void **)((v24 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v175 = v24;
  }
  uint64_t v26 = 0;
  uint64_t v27 = *v153;
  uint64_t v171 = (id *)(v6 + 32);
  long long v172 = (char **)(v6 + 56);
  id v170 = (unsigned int (**)(char *, uint64_t, unint64_t))(v6 + 48);
  uint64_t v167 = (char *)(v6 + 8);
  uint64_t v149 = v27 + 16;
  uint64_t v148 = v27 - 8;
  uint64_t v25 = (char *)_swiftEmptyArrayStorage;
  uint64_t v28 = v159;
  while (1)
  {
    id v30 = v26;
    uint64_t v31 = (id *)(v26 + 1);
    uint64_t v158 = v26;
    if ((uint64_t)(v26 + 1) < (uint64_t)v28)
    {
      id v151 = v25;
      uint64_t v32 = *(void **)(v27 + 8 * (void)v26);
      id v33 = *(id *)(v27 + 8 * (void)v31);
      uint64_t v34 = v32;
      id v35 = sub_1003AC9B0(v33);
      if (!v35) {
        goto LABEL_160;
      }
      uint64_t v36 = v35;
      id v37 = v173;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = v154;
      long long v174 = (void (*)(char *, char *, unint64_t))*v171;
      v174(v154, v37, v5);
      uint64_t v3 = *v172;
      ((void (*)(char *, void, uint64_t, unint64_t))*v172)(v38, 0, 1, v5);
      uint64_t v163 = *v170;
      if (v163(v38, 1, v5) == 1) {
        goto LABEL_161;
      }
      id v39 = sub_1003AC9B0(v34);
      if (!v39) {
        goto LABEL_162;
      }
      os_log_type_t v40 = v39;
      uint64_t v168 = v34;
      int v41 = v173;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      BOOL v42 = v152;
      v174(v152, v41, v5);
      ((void (*)(char *, void, uint64_t, unint64_t))v3)(v42, 0, 1, v5);
      if (v163(v42, 1, v5) == 1) {
        goto LABEL_163;
      }
      uint64_t v43 = v154;
      int v157 = static Date.> infix(_:_:)();
      uint64_t v2 = *(char **)v167;
      (*(void (**)(char *, unint64_t))v167)(v42, v5);
      BOOL v155 = (void (*)(char *, unint64_t))v2;
      ((void (*)(char *, unint64_t))v2)(v43, v5);

      uint64_t v31 = (id *)(v30 + 2);
      if ((uint64_t)(v30 + 2) < (uint64_t)v159)
      {
        uint64_t v44 = (id *)(v149 + 8 * (void)v30);
        while (1)
        {
          uint64_t v168 = (char *)v31;
          uint64_t v45 = *(v44 - 1);
          id v46 = *v44;
          id v47 = v45;
          id v48 = sub_1003AC9B0(v46);
          if (!v48) {
            goto LABEL_154;
          }
          uint64_t v49 = v48;
          unint64_t v50 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v51 = v161;
          v174(v161, v50, v5);
          ((void (*)(char *, void, uint64_t, unint64_t))v3)(v51, 0, 1, v5);
          if (v163(v51, 1, v5) == 1) {
            goto LABEL_155;
          }
          id v52 = sub_1003AC9B0(v47);
          if (!v52) {
            goto LABEL_156;
          }
          uint64_t v53 = v52;
          uint64_t v160 = v44;
          uint64_t v54 = v47;
          uint64_t v55 = v46;
          uint64_t v56 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v57 = v156;
          v174(v156, v56, v5);
          unint64_t v58 = v3;
          ((void (*)(char *, void, uint64_t, unint64_t))v3)(v57, 0, 1, v5);
          if (v163(v57, 1, v5) == 1) {
            goto LABEL_157;
          }
          uint64_t v2 = v161;
          int v59 = static Date.> infix(_:_:)();
          uint64_t v60 = v57;
          int v61 = v59;
          uint64_t v3 = v167;
          uint64_t v62 = v155;
          v155(v60, v5);
          v62(v2, v5);

          if ((v157 ^ v61)) {
            break;
          }
          uint64_t v31 = (id *)(v168 + 1);
          uint64_t v44 = v160 + 1;
          uint64_t v3 = v58;
          if (v159 == v168 + 1)
          {
            uint64_t v31 = (id *)v159;
            goto LABEL_30;
          }
        }
        uint64_t v31 = (id *)v168;
LABEL_30:
        id v30 = v158;
      }
      uint64_t v25 = v151;
      if (v157)
      {
        if ((uint64_t)v31 < (uint64_t)v30) {
          goto LABEL_145;
        }
        if ((uint64_t)v30 < (uint64_t)v31)
        {
          char v63 = (uint64_t *)(v148 + 8 * (void)v31);
          id v64 = v31;
          uint64_t v65 = v30;
          uint64_t v66 = (uint64_t *)(v27 + 8 * (void)v30);
          do
          {
            id v64 = (id *)((char *)v64 - 1);
            if (v65 != (char *)v64)
            {
              if (!v27) {
                goto LABEL_158;
              }
              uint64_t v67 = *v66;
              *uint64_t v66 = *v63;
              *char v63 = v67;
            }
            ++v65;
            --v63;
            ++v66;
          }
          while ((uint64_t)v65 < (uint64_t)v64);
        }
      }
    }
    if ((uint64_t)v31 < (uint64_t)v159)
    {
      if (__OFSUB__(v31, v30)) {
        goto LABEL_143;
      }
      if ((char *)v31 - v30 < v150) {
        break;
      }
    }
LABEL_60:
    if ((uint64_t)v31 < (uint64_t)v30) {
      goto LABEL_138;
    }
    uint64_t v93 = v25;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v25 = v93;
    }
    else {
      uint64_t v25 = sub_1000897DC(0, *((void *)v93 + 2) + 1, 1, v93);
    }
    unint64_t v95 = *((void *)v25 + 2);
    unint64_t v94 = *((void *)v25 + 3);
    unint64_t v29 = v95 + 1;
    if (v95 >= v94 >> 1) {
      uint64_t v25 = sub_1000897DC((char *)(v94 > 1), v95 + 1, 1, v25);
    }
    *((void *)v25 + 2) = v29;
    long long v174 = (void (*)(char *, char *, unint64_t))(v25 + 32);
    uint64_t v96 = &v25[16 * v95 + 32];
    *(void *)uint64_t v96 = v30;
    *((void *)v96 + 1) = v31;
    uint64_t v168 = (char *)v31;
    if (v95)
    {
      Swift::Int v97 = (char *)v174;
      while (1)
      {
        unint64_t v98 = v29 - 1;
        if (v29 >= 4)
        {
          uint64_t v103 = &v97[16 * v29];
          uint64_t v104 = *((void *)v103 - 8);
          uint64_t v105 = *((void *)v103 - 7);
          BOOL v109 = __OFSUB__(v105, v104);
          uint64_t v106 = v105 - v104;
          if (v109) {
            goto LABEL_127;
          }
          uint64_t v108 = *((void *)v103 - 6);
          uint64_t v107 = *((void *)v103 - 5);
          BOOL v109 = __OFSUB__(v107, v108);
          uint64_t v101 = v107 - v108;
          char v102 = v109;
          if (v109) {
            goto LABEL_128;
          }
          unint64_t v110 = v29 - 2;
          Swift::String v111 = &v97[16 * v29 - 32];
          uint64_t v113 = *(void *)v111;
          uint64_t v112 = *((void *)v111 + 1);
          BOOL v109 = __OFSUB__(v112, v113);
          uint64_t v114 = v112 - v113;
          if (v109) {
            goto LABEL_130;
          }
          BOOL v109 = __OFADD__(v101, v114);
          uint64_t v115 = v101 + v114;
          if (v109) {
            goto LABEL_133;
          }
          if (v115 >= v106)
          {
            unint64_t v133 = &v97[16 * v98];
            uint64_t v135 = *(void *)v133;
            uint64_t v134 = *((void *)v133 + 1);
            BOOL v109 = __OFSUB__(v134, v135);
            uint64_t v136 = v134 - v135;
            if (v109) {
              goto LABEL_137;
            }
            BOOL v126 = v101 < v136;
            goto LABEL_98;
          }
        }
        else
        {
          if (v29 != 3)
          {
            uint64_t v127 = *((void *)v25 + 4);
            uint64_t v128 = *((void *)v25 + 5);
            BOOL v109 = __OFSUB__(v128, v127);
            uint64_t v120 = v128 - v127;
            char v121 = v109;
            goto LABEL_92;
          }
          uint64_t v100 = *((void *)v25 + 4);
          uint64_t v99 = *((void *)v25 + 5);
          BOOL v109 = __OFSUB__(v99, v100);
          uint64_t v101 = v99 - v100;
          char v102 = v109;
        }
        if (v102) {
          goto LABEL_129;
        }
        unint64_t v110 = v29 - 2;
        uint64_t v116 = &v97[16 * v29 - 32];
        uint64_t v118 = *(void *)v116;
        uint64_t v117 = *((void *)v116 + 1);
        BOOL v119 = __OFSUB__(v117, v118);
        uint64_t v120 = v117 - v118;
        char v121 = v119;
        if (v119) {
          goto LABEL_132;
        }
        char v122 = &v97[16 * v98];
        uint64_t v124 = *(void *)v122;
        uint64_t v123 = *((void *)v122 + 1);
        BOOL v109 = __OFSUB__(v123, v124);
        uint64_t v125 = v123 - v124;
        if (v109) {
          goto LABEL_135;
        }
        if (__OFADD__(v120, v125)) {
          goto LABEL_136;
        }
        if (v120 + v125 >= v101)
        {
          BOOL v126 = v101 < v125;
LABEL_98:
          if (v126) {
            unint64_t v98 = v110;
          }
          goto LABEL_100;
        }
LABEL_92:
        if (v121) {
          goto LABEL_131;
        }
        os_log_type_t v129 = &v97[16 * v98];
        uint64_t v131 = *(void *)v129;
        uint64_t v130 = *((void *)v129 + 1);
        BOOL v109 = __OFSUB__(v130, v131);
        uint64_t v132 = v130 - v131;
        if (v109) {
          goto LABEL_134;
        }
        if (v132 < v120) {
          goto LABEL_14;
        }
LABEL_100:
        unint64_t v137 = v98 - 1;
        if (v98 - 1 >= v29)
        {
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
          goto LABEL_147;
        }
        if (!v27) {
          goto LABEL_153;
        }
        uint64_t v3 = v25;
        os_log_t v138 = (uint64_t *)&v97[16 * v137];
        os_log_t v139 = v97;
        uint64_t v140 = *v138;
        id v141 = &v139[16 * v98];
        uint64_t v2 = (char *)*((void *)v141 + 1);
        uint64_t v142 = v164;
        sub_10006E62C((char *)(v27 + 8 * *v138), (void **)(v27 + 8 * *(void *)v141), (void **)(v27 + 8 * (void)v2), v162);
        uint64_t v164 = v142;
        if (v142) {
          goto LABEL_121;
        }
        if ((uint64_t)v2 < v140) {
          goto LABEL_124;
        }
        if (v98 > *((void *)v3 + 2)) {
          goto LABEL_125;
        }
        *os_log_t v138 = v140;
        Swift::Int v97 = (char *)v174;
        *((void *)v174 + 2 * v137 + 1) = v2;
        unint64_t v143 = *((void *)v3 + 2);
        if (v98 >= v143) {
          goto LABEL_126;
        }
        unint64_t v29 = v143 - 1;
        memmove(v141, v141 + 16, 16 * (v143 - 1 - v98));
        uint64_t v25 = v3;
        *((void *)v3 + 2) = v143 - 1;
        if (v143 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v29 = 1;
LABEL_14:
    uint64_t v28 = v159;
    uint64_t v26 = v168;
    if ((uint64_t)v168 >= (uint64_t)v159) {
      goto LABEL_110;
    }
  }
  if (__OFADD__(v30, v150)) {
    goto LABEL_146;
  }
  id v68 = v159;
  if ((uint64_t)&v30[v150] < (uint64_t)v159) {
    id v68 = &v30[v150];
  }
  if ((uint64_t)v68 >= (uint64_t)v30)
  {
    if (v31 != (id *)v68)
    {
      id v151 = v25;
      id v69 = (char *)(v148 + 8 * (void)v31);
      uint64_t v165 = v27;
      uint64_t v160 = (id *)v68;
      do
      {
        long long v71 = v69;
        uint64_t v72 = *(void **)(v27 + 8 * (void)v31);
        uint64_t v73 = v30;
        uint64_t v163 = (unsigned int (*)(char *, uint64_t, unint64_t))v71;
        id v74 = v71;
        uint64_t v168 = (char *)v31;
        while (1)
        {
          id v75 = *(void **)v74;
          id v76 = v72;
          long long v174 = v75;
          id v77 = sub_1003AC9B0(v76);
          if (!v77) {
            goto LABEL_150;
          }
          os_log_type_t v78 = v77;
          unint64_t v79 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v3 = (char *)*v171;
          uint64_t v80 = v169;
          ((void (*)(char *, char *, unint64_t))*v171)(v169, v79, v5);
          uint64_t v2 = *v172;
          ((void (*)(char *, void, uint64_t, unint64_t))*v172)(v80, 0, 1, v5);
          uint64_t v81 = *v170;
          if ((*v170)(v80, 1, v5) == 1) {
            goto LABEL_151;
          }
          id v82 = sub_1003AC9B0(v174);
          if (!v82) {
            goto LABEL_148;
          }
          uint64_t v83 = v82;
          unint64_t v84 = v5;
          unsigned int v85 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v86 = v166;
          uint64_t v87 = v85;
          unint64_t v5 = v84;
          ((void (*)(char *, char *, unint64_t))v3)(v166, v87, v84);
          ((void (*)(char *, void, uint64_t, unint64_t))v2)(v86, 0, 1, v84);
          if (v81(v86, 1, v84) == 1) {
            goto LABEL_149;
          }
          uint64_t v88 = v169;
          char v89 = static Date.> infix(_:_:)();
          uint64_t v90 = v86;
          char v91 = v89;
          uint64_t v3 = v167;
          uint64_t v2 = *(char **)v167;
          (*(void (**)(char *, unint64_t))v167)(v90, v5);
          ((void (*)(char *, unint64_t))v2)(v88, v5);

          uint64_t v27 = v165;
          if ((v91 & 1) == 0) {
            break;
          }
          unint64_t v70 = v168;
          if (!v165) {
            goto LABEL_152;
          }
          id v92 = *(void **)v74;
          uint64_t v72 = (void *)*((void *)v74 + 1);
          *(void *)id v74 = v72;
          *((void *)v74 + 1) = v92;
          v74 -= 8;
          if (v70 == ++v73) {
            goto LABEL_49;
          }
        }
        unint64_t v70 = v168;
LABEL_49:
        uint64_t v31 = (id *)(v70 + 1);
        id v69 = (char *)v163 + 8;
        id v30 = v158;
      }
      while (v31 != v160);
      uint64_t v31 = v160;
      uint64_t v25 = v151;
    }
    goto LABEL_60;
  }
LABEL_147:
  __break(1u);
LABEL_148:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v2)(v166, 1, 1, v5);
LABEL_149:
  __break(1u);
LABEL_150:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))*v172)(v169, 1, 1, v5);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v3)(v161, 1, 1, v5);
LABEL_155:
  __break(1u);
LABEL_156:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v3)(v156, 1, 1, v5);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))*v172)(v154, 1, 1, v5);
LABEL_161:
  __break(1u);
LABEL_162:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v3)(v152, 1, 1, v5);
LABEL_163:
  __break(1u);
LABEL_164:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10006E274(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v37 = a1;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v48 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v47 = (char *)&v35 - v14;
  uint64_t v36 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *a4;
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    id v46 = (char **)(v8 + 56);
    uint64_t v44 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    id v39 = (void (**)(void *, uint64_t))(v8 + 8);
    uint64_t v40 = v15;
    uint64_t v16 = v15 + 8 * (void)a3 - 8;
LABEL_5:
    uint64_t v17 = *(void **)(v40 + 8 * (void)a3);
    int v41 = a3;
    uint64_t v42 = v37;
    uint64_t v38 = v16;
    while (1)
    {
      uint64_t v18 = *(char **)v16;
      id v19 = v17;
      Swift::Int v20 = v18;
      id v21 = sub_1003AC9B0(v19);
      if (!v21) {
        break;
      }
      uint64_t v22 = v21;
      uint64_t v18 = v13;
      uint64_t v23 = v48;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v24 = *v45;
      uint64_t v25 = v47;
      (*v45)(v47, v23, v7);
      a3 = *v46;
      ((void (*)(char *, void, uint64_t, uint64_t))*v46)(v25, 0, 1, v7);
      uint64_t v26 = *v44;
      if ((*v44)(v25, 1, v7) == 1) {
        goto LABEL_15;
      }
      id v27 = sub_1003AC9B0(v20);
      if (!v27) {
        goto LABEL_16;
      }
      uint64_t v28 = v27;
      uint64_t v43 = v20;
      unint64_t v29 = v19;
      id v30 = v48;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v24(v18, v30, v7);
      uint64_t v13 = v18;
      ((void (*)(char *, void, uint64_t, uint64_t))a3)(v18, 0, 1, v7);
      if (v26(v18, 1, v7) == 1) {
        goto LABEL_17;
      }
      uint64_t v31 = v47;
      char v32 = static Date.> infix(_:_:)();
      id v33 = *v39;
      (*v39)(v18, v7);
      v33(v31, v7);

      a3 = v41;
      if (v32)
      {
        if (!v40) {
          goto LABEL_18;
        }
        uint64_t v34 = *(char **)v16;
        uint64_t v17 = *(void **)(v16 + 8);
        *(void *)uint64_t v16 = v17;
        *(void *)(v16 + _Block_object_dispose(&a9, 8) = v34;
        v16 -= 8;
        if (a3 != (char *)++v42) {
          continue;
        }
      }
      ++a3;
      uint64_t v16 = v38 + 8;
      if (a3 == v36) {
        return;
      }
      goto LABEL_5;
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v46)(v47, 1, 1, v7);
LABEL_15:
    __break(1u);
LABEL_16:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))a3)(v18, 1, 1, v7);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

uint64_t sub_10006E62C(char *a1, void **a2, void **a3, void **a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = (void *)type metadata accessor for Date();
  id v82 = (void (**)(char *, void *))*(v10 - 1);
  __chkstk_darwin(v10);
  unint64_t v95 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  unsigned int v85 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v90 = (char *)&v80 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v87 = (char *)&v80 - v18;
  __chkstk_darwin(v17);
  id v92 = (char *)&v80 - v19;
  uint64_t v93 = v10;
  uint64_t v20 = (char *)a2 - a1;
  uint64_t v21 = (char *)a2 - a1 + 7;
  if ((char *)a2 - a1 >= 0) {
    uint64_t v21 = (char *)a2 - a1;
  }
  uint64_t v22 = v21 >> 3;
  uint64_t v23 = a2;
  uint64_t v88 = a3;
  uint64_t v24 = (char *)a3 - (char *)a2;
  uint64_t v25 = v24 / 8;
  unint64_t v94 = (void **)a1;
  unint64_t v98 = (void **)a1;
  Swift::Int v97 = a4;
  uint64_t v80 = (void (*)(char *, uint64_t, uint64_t, void))v4;
  if (v21 >> 3 >= v24 / 8)
  {
    if (v24 < -7) {
      goto LABEL_60;
    }
    id v52 = v23;
    if (a4 != v23 || &v23[v25] <= a4) {
      memmove(a4, v23, 8 * v25);
    }
    uint64_t v53 = &a4[v25];
    uint64_t v96 = v53;
    unint64_t v98 = v23;
    if (v24 < 8 || v94 >= v23) {
      goto LABEL_51;
    }
    uint64_t v54 = v82;
    uint64_t v55 = (void (**)(void))(v82 + 4);
    uint64_t v28 = (id *)(v82 + 7);
    char v89 = (unsigned int (**)(char *, uint64_t, void *))(v82 + 6);
    ++v82;
    uint64_t v83 = (void (**)(void))(v54 + 4);
    uint64_t v56 = (char *)(v88 - 1);
    unint64_t v57 = v52;
    unint64_t v84 = a4;
    uint64_t v81 = (id *)(v54 + 7);
    while (1)
    {
      char v91 = v56;
      uint64_t v87 = (char *)v53;
      uint64_t v88 = v52;
      unint64_t v58 = v53 - 1;
      int v59 = *--v57;
      uint64_t v60 = *(v53 - 1);
      id v92 = v59;
      id v86 = v60;
      id v61 = sub_1003AC9B0(v60);
      if (!v61) {
        goto LABEL_56;
      }
      uint64_t v62 = v61;
      char v63 = v95;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v64 = *v55;
      uint64_t v65 = v90;
      ((void (*)(char *, char *, void *))*v55)(v90, v63, v10);
      uint64_t v66 = v10;
      uint64_t v10 = *v28;
      ((void (*)(char *, void, uint64_t, void *))*v28)(v65, 0, 1, v66);
      uint64_t v67 = *v89;
      if ((*v89)(v65, 1, v66) == 1) {
        goto LABEL_57;
      }
      id v68 = sub_1003AC9B0(v92);
      if (!v68) {
        goto LABEL_58;
      }
      id v69 = v68;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v70 = v85;
      long long v71 = v93;
      v64();
      ((void (*)(char *, void, uint64_t, void *))v10)(v70, 0, 1, v71);
      if (v67(v70, 1, v71) == 1) {
        goto LABEL_59;
      }
      uint64_t v72 = v90;
      uint64_t v73 = v91 + 8;
      char v74 = static Date.> infix(_:_:)();
      id v75 = *v82;
      (*v82)(v70, v71);
      v75(v72, v71);

      uint64_t v10 = v71;
      if (v74)
      {
        uint64_t v53 = (void **)v87;
        id v76 = v91;
        if (v73 != (char *)v88 || v91 >= (char *)v88) {
          *(void *)char v91 = *v57;
        }
        unint64_t v98 = v57;
      }
      else
      {
        uint64_t v96 = v58;
        id v76 = v91;
        if (v73 >= v87 && v91 < v87)
        {
          id v77 = v94;
          uint64_t v28 = v81;
          if (v73 != v87) {
            *(void *)char v91 = *v58;
          }
          unint64_t v57 = v88;
          uint64_t v53 = v58;
          os_log_type_t v78 = v84;
          goto LABEL_49;
        }
        *(void *)char v91 = *v58;
        unint64_t v57 = v88;
        uint64_t v53 = v58;
      }
      os_log_type_t v78 = v84;
      id v77 = v94;
      uint64_t v28 = v81;
LABEL_49:
      uint64_t v55 = v83;
      if (v53 > v78)
      {
        uint64_t v56 = v76 - 8;
        id v52 = v57;
        if (v57 > v77) {
          continue;
        }
      }
      goto LABEL_51;
    }
  }
  if (v20 >= -7)
  {
    uint64_t v26 = v94;
    if (a4 != v94 || &v94[v22] <= a4) {
      memmove(a4, v94, 8 * v22);
    }
    id v86 = &a4[v22];
    uint64_t v96 = v86;
    if (v20 >= 8)
    {
      id v27 = v23;
      if (v23 < v88)
      {
        uint64_t v90 = (char *)(v82 + 4);
        char v91 = (char *)(v82 + 7);
        char v89 = (unsigned int (**)(char *, uint64_t, void *))(v82 + 6);
        unsigned int v85 = (char *)(v82 + 1);
        while (1)
        {
          unint64_t v94 = v26;
          uint64_t v28 = v27;
          unint64_t v29 = a4;
          id v30 = *a4;
          id v31 = *v27;
          uint64_t v10 = v30;
          id v32 = sub_1003AC9B0(v31);
          if (!v32) {
            break;
          }
          id v33 = v32;
          uint64_t v34 = v95;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v35 = *(void (**)(char *, char *, void *))v90;
          uint64_t v37 = v92;
          uint64_t v36 = v93;
          (*(void (**)(char *, char *, void *))v90)(v92, v34, v93);
          unint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, void *))v91;
          (*(void (**)(char *, void, uint64_t, void *))v91)(v37, 0, 1, v36);
          uint64_t v38 = *v89;
          if ((*v89)(v37, 1, v36) == 1) {
            goto LABEL_53;
          }
          id v39 = sub_1003AC9B0(v10);
          if (!v39) {
            goto LABEL_54;
          }
          uint64_t v40 = v39;
          int v41 = v95;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v42 = v87;
          uint64_t v43 = v41;
          uint64_t v44 = v93;
          v35(v87, v43, v93);
          v5(v42, 0, 1, v44);
          if (v38(v42, 1, v44) == 1) {
            goto LABEL_55;
          }
          uint64_t v45 = v92;
          char v46 = static Date.> infix(_:_:)();
          id v47 = v42;
          char v48 = v46;
          unint64_t v5 = (void (*)(char *, uint64_t, uint64_t, void *))v85;
          uint64_t v49 = *(void (**)(char *, void *))v85;
          (*(void (**)(char *, void *))v85)(v47, v44);
          v49(v45, v44);

          if (v48)
          {
            unint64_t v50 = (unint64_t)(v28 + 1);
            unint64_t v51 = v94;
            a4 = v29;
            if (v94 < v28 || (unint64_t)v94 >= v50 || v94 != v28) {
              *unint64_t v94 = *v28;
            }
          }
          else
          {
            unint64_t v51 = v94;
            if (v94 != v29) {
              *unint64_t v94 = *v29;
            }
            a4 = v29 + 1;
            Swift::Int v97 = v29 + 1;
            unint64_t v50 = (unint64_t)v28;
          }
          uint64_t v26 = v51 + 1;
          unint64_t v98 = v26;
          if (a4 < v86)
          {
            id v27 = (id *)v50;
            if (v50 < (unint64_t)v88) {
              continue;
            }
          }
          goto LABEL_51;
        }
        (*(void (**)(char *, uint64_t, uint64_t, void *))v91)(v92, 1, 1, v93);
LABEL_53:
        __break(1u);
LABEL_54:
        v5(v87, 1, 1, v93);
LABEL_55:
        __break(1u);
LABEL_56:
        ((void (*)(char *, uint64_t, uint64_t, id))*v28)(v90, 1, 1, v10);
LABEL_57:
        __break(1u);
LABEL_58:
        ((void (*)(char *, uint64_t, uint64_t, void *))v10)(v85, 1, 1, v93);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
    }
LABEL_51:
    sub_1000898D8((void **)&v98, (const void **)&v97, &v96);
    return 1;
  }
LABEL_60:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006EE4C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006EE5C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

BOOL sub_10006EEA4(void *a1)
{
  return sub_10006A8E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(uint64_t **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_10006EEB4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006EEC4()
{
  return _swift_deallocObject(v0, 40, 7);
}

BOOL sub_10006EF04(void *a1)
{
  return sub_10006AF78(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10006EF10()
{
  return _swift_deallocObject(v0, 32, 7);
}

double sub_10006EF20(double *a1)
{
  double result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

uint64_t sub_10006EF2C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006EF64(void *a1)
{
  return sub_1000682E4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10006EF6C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006EF7C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10006EFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100068764(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t sub_10006EFC8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006EFD8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10006F000(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DateInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v14 = _swiftEmptyArrayStorage;
  self;
  id v5 = sub_10038F000();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  *(void *)(v7 + ((v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)) = &v14;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10006F260;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_100018DAC;
  void aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018DE4;
  aBlock[3] = &unk_100513708;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v5 readUsingSession:v9];

  _Block_release(v9);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = v14;
    swift_release();
    return (uint64_t)v11;
  }
  return result;
}

id sub_10006F260(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DateInterval() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100068B28(a1, v1 + v4, v5);
}

uint64_t sub_10006F2FC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006F310()
{
  uint64_t v1 = type metadata accessor for DateInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v6, v5);
}

void sub_10006F3AC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for DateInterval() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void **)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_100068E38(a1, a2, a3, v3 + v8, v9);
}

uint64_t sub_10006F460()
{
  return _swift_deallocObject(v0, 32, 7);
}

double sub_10006F484(double *a1)
{
  return sub_10006EF20(a1);
}

uint64_t sub_10006F4B0()
{
  uint64_t v0 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - v4;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v16 - v7;
  XPCDictionary.init()();
  if ((unsigned __int128)(XPC_ACTIVITY_INTERVAL_1_DAY * (__int128)30) >> 64 == (30 * XPC_ACTIVITY_INTERVAL_1_DAY) >> 63)
  {
    if (qword_1005A2FC0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  int64_t v16 = 30 * XPC_ACTIVITY_INTERVAL_1_DAY;
  char v17 = 0;
  sub_10006FABC();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  int64_t v16 = XPC_ACTIVITY_INTERVAL_8_HOURS;
  char v17 = 0;
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  self;
  id v9 = sub_1003F21C8();
  if (v9)
  {
    uint64_t v10 = v9;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 0, 1, v11);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
  }
  sub_10006FB10((uint64_t)v5, (uint64_t)v8);
  sub_10006FB78((uint64_t)v8, (uint64_t)v2);
  type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v2, 1, v11) == 1)
  {
    sub_1000214BC((uint64_t)v2);
    double v13 = 0.0;
LABEL_11:
    int64_t v16 = (uint64_t)v13 & ~((uint64_t)v13 >> 63);
    char v17 = 0;
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter();
    String.init(cString:)();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter();
    return sub_1000214BC((uint64_t)v8);
  }
  Date.timeIntervalSinceNow.getter();
  double v13 = v14;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v2, v11);
  if ((~*(void *)&v13 & 0x7FF0000000000000) != 0)
  {
    if (v13 <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v13 < 9.22337204e18)
    {
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

const char *sub_10006F930()
{
  return "com.apple.appstored.activities.AdPlatformsStatusConditions";
}

uint64_t sub_10006FA70()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for AdPlatformsStatusConditionsActivity()
{
  return self;
}

unint64_t sub_10006FABC()
{
  unint64_t result = qword_1005A4AC0;
  if (!qword_1005A4AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4AC0);
  }
  return result;
}

uint64_t sub_10006FB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006FB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006FBE0(uint64_t a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  aBlock[0] = a1;
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v5 = [self predicateWithProperty:v3 equalToValue:v4];
  swift_unknownObjectRelease();

  uint64_t v18 = _swiftEmptyArrayStorage;
  type metadata accessor for SkannerStoryEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC9appstored22SkannerDatabaseSession_connection);
  id v8 = v5;
  id v9 = sub_1002FF548(ObjCClassFromMetadata, v7, v8);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &v18;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10003F9D0;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_100051124;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003F95C;
  aBlock[3] = &unk_1005137F8;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v9 enumerateMemoryEntitiesUsingBlock:v12];

  _Block_release(v12);
  unint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v15) {
      goto LABEL_8;
    }
    goto LABEL_4;
  }
  unint64_t isEscapingClosureAtFileLocation = (unint64_t)v18;

  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation >> 62) {
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15)
  {
LABEL_8:
    swift_bridgeObjectRelease();

    return v15;
  }
LABEL_4:
  if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v16 = *(id *)(isEscapingClosureAtFileLocation + 32);
LABEL_7:
    uint64_t v15 = (uint64_t)v16;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006FF34(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SkannerStory();
  if (swift_dynamicCastClass())
  {
    id v10 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
  else
  {
    static Logger.skanner.getter();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      double v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to get story from SQLiteMemoryEntity", v14, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

id sub_100070108()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SkannerDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SkannerDatabaseSession()
{
  return self;
}

uint64_t sub_100070170()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100070180()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100070190()
{
  if (qword_1005A2FC0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  sub_10006FABC();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  String.init(cString:)();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter();
}

const char *sub_100070350()
{
  return "com.apple.appstored.CacheDeleteUpdate";
}

uint64_t sub_100070464()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CacheDeleteActivity()
{
  return self;
}

char *sub_1000706C8(id *a1)
{
  uint64_t v2 = sub_10001644C((uint64_t *)&unk_1005A6330);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  unsigned int v5 = sub_100326B7C((uint64_t)a1);
  if (v5 > 4)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = off_100513820[v5]->isa;
    id v7 = isa;
  }
  uint64_t v8 = sub_1002B17C4(a1);
  if (v8)
  {
    id v9 = v8;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
  }
  id v12 = (id)sub_10032936C((uint64_t)a1);
  if (v12)
  {
    os_log_type_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_100329380((uint64_t)a1);
  uint64_t v18 = sub_100071078(0, isa, (uint64_t)v4, v14, v16, v17, 0);

  swift_deallocPartialClassInstance();
  return v18;
}

char *sub_1000708BC(void *a1, void *a2)
{
  uint64_t v4 = sub_10001644C((uint64_t *)&unk_1005A6330);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  id v8 = sub_100278EBC(a1, v7);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 0, 1, v9);
  id v11 = sub_100278ED0(a1, v10);
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = sub_100071078(0, a2, (uint64_t)v6, v13, v15, 0, 1);

  swift_deallocPartialClassInstance();
  return v16;
}

char *sub_100070A68(uint64_t a1)
{
  swift_getObjectType();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100049A4C(v2, v3), (v5 & 1) != 0)) {
    sub_100031C38(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v23);
  }
  else {
    memset(v23, 0, sizeof(v23));
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v8 = sub_100049A4C(v6, v7), (v9 & 1) != 0)) {
    sub_100031C38(*(void *)(a1 + 56) + 32 * v8, (uint64_t)v22);
  }
  else {
    memset(v22, 0, sizeof(v22));
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v12 = sub_100049A4C(v10, v11), (v13 & 1) != 0)) {
    sub_100031C38(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v21);
  }
  else {
    memset(v21, 0, sizeof(v21));
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v16 = sub_100049A4C(v14, v15), (v17 & 1) != 0)) {
    sub_100031C38(*(void *)(a1 + 56) + 32 * v16, (uint64_t)v20);
  }
  else {
    memset(v20, 0, sizeof(v20));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_10007162C((uint64_t)v23, (uint64_t)v22, (uint64_t)v21, (uint64_t)v20);
  swift_deallocPartialClassInstance();
  return v18;
}

char *sub_100070D10(void *a1, uint64_t (*a2)(void *), uint64_t (*a3)(void *), uint64_t (*a4)(void *))
{
  uint64_t v8 = sub_10001644C((uint64_t *)&unk_1005A6330);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v13 = (char *)&v28 - v12;
  swift_getObjectType();
  if ([a1 valueForProperty:@"log_code"])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v34, 0, sizeof(v34));
  }
  id v14 = (id)a2(a1);
  if (v14)
  {
    uint64_t v15 = v14;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 0, 1, v16);
  }
  else
  {
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  }
  sub_1000719B4((uint64_t)v10, (uint64_t)v13);
  type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16) == 1)
  {
    sub_100016714((uint64_t)v13, (uint64_t *)&unk_1005A6330);
    long long v32 = 0u;
    long long v33 = 0u;
  }
  else
  {
    *((void *)&v33 + 1) = v16;
    uint64_t v18 = sub_100071A1C((uint64_t *)&v32);
    (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(v18, v13, v16);
  }
  id v19 = (id)a3(a1);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    *((void *)&v31 + 1) = &type metadata for String;
    *(void *)&long long v30 = v21;
    *((void *)&v30 + 1) = v23;
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  id v24 = (id)a4(a1);
  if (v24)
  {
    id v25 = v24;
    *((void *)&v29 + 1) = sub_10001BE10();
    *(void *)&long long v28 = v25;
  }
  else
  {
    long long v28 = 0u;
    long long v29 = 0u;
  }
  uint64_t v26 = sub_10007162C((uint64_t)v34, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28);

  swift_deallocPartialClassInstance();
  return v26;
}

char *sub_100071078(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14 = sub_10001644C((uint64_t *)&unk_1005A6330);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v51 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v54 = (char *)&v50 - v21;
  uint64_t v56 = a1;
  if (a1)
  {
    uint64_t v22 = *(void *)&a1[OBJC_IVAR____TtC9appstored6LogKey_value];
    uint64_t v23 = *(void *)&a1[OBJC_IVAR____TtC9appstored6LogKey_value + 8];
    uint64_t v53 = v22;
    swift_bridgeObjectRetain();
    uint64_t v57 = a3;
    id v58 = a2;
    if (a2)
    {
LABEL_3:
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v55 = v24;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v53 = 0;
    uint64_t v23 = 0xE000000000000000;
    uint64_t v57 = a3;
    id v58 = a2;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v55 = (void *)0xE300000000000000;
  uint64_t v52 = 4144959;
LABEL_6:
  sub_10001644C(&qword_1005A4B40);
  uint64_t inited = swift_initStackObject();
  uint64_t v26 = (void *)inited;
  *(_OWORD *)(inited + 16) = xmmword_100489530;
  *(void *)(inited + 32) = a4;
  *(void *)(inited + 40) = a5;
  if ((a7 & 1) == 0)
  {
    uint64_t v59 = a6;
    sub_1000715D8();
    uint64_t v27 = BinaryInteger.description.getter();
    uint64_t v29 = v28;
    a4 = v26[4];
    a5 = v26[5];
    v26[6] = v27;
    v26[7] = v28;
    if (a5) {
      goto LABEL_8;
    }
LABEL_13:
    long long v30 = (char *)_swiftEmptyArrayStorage;
    if (!v29) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  uint64_t v27 = 0;
  uint64_t v29 = 0;
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(inited + 56) = 0;
  if (!a5) {
    goto LABEL_13;
  }
LABEL_8:
  swift_bridgeObjectRetain();
  long long v30 = sub_1000E7C44(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v32 = *((void *)v30 + 2);
  unint64_t v31 = *((void *)v30 + 3);
  if (v32 >= v31 >> 1) {
    long long v30 = sub_1000E7C44((char *)(v31 > 1), v32 + 1, 1, v30);
  }
  *((void *)v30 + 2) = v32 + 1;
  long long v33 = &v30[16 * v32];
  *((void *)v33 + 4) = a4;
  *((void *)v33 + 5) = a5;
  uint64_t v27 = v26[6];
  uint64_t v29 = v26[7];
  if (v29)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v30 = sub_1000E7C44(0, *((void *)v30 + 2) + 1, 1, v30);
    }
    unint64_t v35 = *((void *)v30 + 2);
    unint64_t v34 = *((void *)v30 + 3);
    if (v35 >= v34 >> 1) {
      long long v30 = sub_1000E7C44((char *)(v34 > 1), v35 + 1, 1, v30);
    }
    *((void *)v30 + 2) = v35 + 1;
    uint64_t v36 = &v30[16 * v35];
    *((void *)v36 + 4) = v27;
    *((void *)v36 + 5) = v29;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v37 = v57;
  sub_100016588(v57, (uint64_t)v16, (uint64_t *)&unk_1005A6330);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    int v41 = v54;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v54, v16, v17);
    uint64_t v42 = v51;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v51, v41, v17);
    LODWORD(v59) = bswap32(UUID.uuid.getter());
    sub_100016534();
    uint64_t v43 = String.init<A>(_:radix:uppercase:)();
    uint64_t v45 = v44;
    objc_allocWithZone((Class)type metadata accessor for LogKey());
    swift_bridgeObjectRetain();
    char v46 = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v47 = sub_1000FBB48(v53, v23, (uint64_t)"][", 2, 2, v52, v46, v43, v45, (uint64_t)v30, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v39 = v47;

    char v48 = *(void (**)(char *, uint64_t))(v18 + 8);
    v48(v42, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48(v54, v17);
    id v40 = v56;
    if (v56) {
      goto LABEL_21;
    }
LABEL_23:
    id v40 = v58;
    goto LABEL_24;
  }
  sub_100016714((uint64_t)v16, (uint64_t *)&unk_1005A6330);
  id v38 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  id v39 = sub_1000FBB48(v53, v23, (uint64_t)"][", 2, 2, v52, v55, 0x3F3F3F3F3F3F3F3FLL, (void *)0xE800000000000000, (uint64_t)v30, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v40 = v56;
  if (!v56) {
    goto LABEL_23;
  }
LABEL_21:

LABEL_24:
  sub_100016714(v37, (uint64_t *)&unk_1005A6330);
  return v39;
}

unint64_t sub_1000715D8()
{
  unint64_t result = qword_1005A4B50;
  if (!qword_1005A4B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4B50);
  }
  return result;
}

char *sub_10007162C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10001644C((uint64_t *)&unk_1005A6330);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016588(a1, (uint64_t)v24, &qword_1005A5660);
  if (v25)
  {
    if (swift_dynamicCast())
    {
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_100016714((uint64_t)v24, &qword_1005A5660);
  }
  NSString v11 = 0;
LABEL_6:
  sub_100016588(a2, (uint64_t)v24, &qword_1005A5660);
  if (v25)
  {
    uint64_t v12 = type metadata accessor for UUID();
    int v13 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, v13 ^ 1u, 1, v12);
  }
  else
  {
    sub_100016714((uint64_t)v24, &qword_1005A5660);
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v10, 1, 1, v14);
  }
  sub_100016588(a3, (uint64_t)v24, &qword_1005A5660);
  if (v25)
  {
    int v15 = swift_dynamicCast();
    if (v15) {
      uint64_t v16 = v23[0];
    }
    else {
      uint64_t v16 = 0;
    }
    if (v15) {
      uint64_t v17 = v23[1];
    }
    else {
      uint64_t v17 = 0;
    }
  }
  else
  {
    sub_100016714((uint64_t)v24, &qword_1005A5660);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  sub_100016588(a4, (uint64_t)v24, &qword_1005A5660);
  if (v25)
  {
    int v18 = swift_dynamicCast();
    if (v18) {
      uint64_t v19 = v23[0];
    }
    else {
      uint64_t v19 = 0;
    }
    char v20 = v18 ^ 1;
  }
  else
  {
    sub_100016714((uint64_t)v24, &qword_1005A5660);
    uint64_t v19 = 0;
    char v20 = 1;
  }
  uint64_t v21 = sub_100071078(0, v11, (uint64_t)v10, v16, v17, v19, v20);
  sub_100016714(a4, &qword_1005A5660);
  sub_100016714(a3, &qword_1005A5660);
  sub_100016714(a2, &qword_1005A5660);
  sub_100016714(a1, &qword_1005A5660);
  return v21;
}

uint64_t sub_10007191C()
{
  sub_10001644C(&qword_1005A4F70);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100488170;
  *(void *)(v0 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 72) = v3;
  *(void *)(v0 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v4;
  return v0;
}

uint64_t sub_1000719B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C((uint64_t *)&unk_1005A6330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100071A1C(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

id sub_100071A80()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SkannerService()) init];
  qword_1005B1500 = (uint64_t)result;
  return result;
}

id sub_100071C68()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SkannerService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SkannerService()
{
  return self;
}

uint64_t type metadata accessor for SKANFetchPostbackRejectedParams()
{
  return self;
}

uint64_t sub_100071DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[30] = a4;
  v5[31] = a5;
  uint64_t v6 = type metadata accessor for LocalizedStringsRequest();
  v5[32] = v6;
  v5[33] = *(void *)(v6 - 8);
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LocalizedStringsResponse();
  v5[36] = v7;
  v5[37] = *(void *)(v7 - 8);
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[40] = v8;
  v5[41] = *(void *)(v8 - 8);
  v5[42] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for LocalizedStringsRequest.LocalizedString();
  v5[43] = v9;
  v5[44] = *(void *)(v9 - 8);
  v5[45] = swift_task_alloc();
  return _swift_task_switch(sub_100071FEC, 0, 0);
}

uint64_t sub_100071FEC()
{
  uint64_t v1 = *(void **)(v0 + 240);
  id v2 = [v1 localizedName];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = v3;
  *(void *)(v0 + 376) = v5;
  id v6 = [v1 record];
  id v7 = [v6 iTunesMetadata];

  id v8 = [v7 distributorInfo];
  *(void *)(v0 + 384) = v8;

  id v9 = [v8 distributorID];
  if (!v9)
  {
    __break(1u);
    return LocalizedStringsRequest.run()(v9);
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(void **)(v0 + 240);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  *(void *)(v0 + 392) = v12;
  *(void *)(v0 + 400) = v14;
  id v15 = [v11 bundleID];
  if (!v15) {
    goto LABEL_8;
  }
  uint64_t v16 = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  if (v12 == v17 && v14 == v19)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
LABEL_8:
      uint64_t v22 = *(void *)(v0 + 352);
      sub_10001644C((uint64_t *)&unk_1005A4CC0);
      *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = *(void *)(v22 + 72);
      *(_DWORD *)(v0 + 44_Block_object_dispose(&a9, 8) = *(_DWORD *)(v22 + 80);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_100488070;
      sub_1000733FC((uint64_t)_swiftEmptyArrayStorage);
      LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)();
      LocalizedStringsRequest.init(strings:)();
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 416) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_1000725A0;
      id v9 = *(id *)(v0 + 312);
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  id v24 = [v8 domain];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)(v0 + 352);
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    sub_10001644C(&qword_1005A3958);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100489530;
    *(void *)(inited + 32) = 0x656D614E707061;
    *(void *)(inited + 40) = 0xE700000000000000;
    *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v3;
    *(void *)(inited + 56) = v5;
    strcpy((char *)(inited + 64), "newDistributor");
    *(unsigned char *)(inited + 79) = -18;
    *(void *)(inited + 80) = v27;
    *(void *)(inited + 8_Block_object_dispose(&a9, 8) = v29;
    sub_100042B10(inited);
    LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)();
    unint64_t v31 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    *(void *)(v0 + 424) = 0xD000000000000039;
    *(void *)(v0 + 432) = 0x800000010044D6A0;
    uint64_t v33 = *(void *)(v0 + 352);
    uint64_t v32 = *(void *)(v0 + 360);
    uint64_t v34 = *(void *)(v0 + 344);
    sub_10001644C((uint64_t *)&unk_1005A4CC0);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_100488780;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v33 + 16))(v35 + v31, v32, v34);
    sub_1000733FC((uint64_t)_swiftEmptyArrayStorage);
    LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)();
    sub_1000733FC((uint64_t)_swiftEmptyArrayStorage);
    LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)();
    LocalizedStringsRequest.init(strings:)();
    uint64_t v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_100072AD8;
    id v9 = *(id *)(v0 + 304);
LABEL_12:
    return LocalizedStringsRequest.run()(v9);
  }
  swift_bridgeObjectRelease();
  static Logger.appInstall.getter();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    id v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing domain for web distributor", v39, 2u);
    swift_slowDealloc();
  }
  uint64_t v41 = *(void *)(v0 + 328);
  uint64_t v40 = *(void *)(v0 + 336);
  uint64_t v42 = *(void *)(v0 + 320);

  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
  return v43();
}

uint64_t sub_1000725A0()
{
  id v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[35];
    id v6 = v2 + 32;
    uint64_t v4 = v2[32];
    uint64_t v5 = v6[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    id v7 = sub_1000730B8;
  }
  else
  {
    (*(void (**)(void, void))(v2[33] + 8))(v2[35], v2[32]);
    id v7 = sub_100072714;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100072714()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = LocalizedStringsResponse.localizedStrings.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_100049A4C(0xD000000000000033, 0x800000010044D5B0), (v6 & 1) != 0))
  {
    uint64_t v8 = *(void *)(v0 + 376);
    id v7 = *(void **)(v0 + 384);
    uint64_t v9 = *(void *)(v0 + 368);
    uint64_t v10 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_10001644C(&qword_1005A3958);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100488780;
    *(void *)(inited + 32) = 0x656D614E707061;
    *(void *)(inited + 40) = 0xE700000000000000;
    *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v9;
    *(void *)(inited + 56) = v8;
    *(void *)(inited + 64) = 0x7562697274736964;
    *(void *)(inited + 72) = 0xEB00000000726F74;
    id v14 = [v7 distributorNameForCurrentLocale];
    uint64_t v15 = *(void *)(v0 + 400);
    if (v14)
    {
      uint64_t v16 = v14;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      swift_bridgeObjectRelease();
      uint64_t v15 = v19;
    }
    else
    {
      uint64_t v17 = *(void *)(v0 + 392);
    }
    *(void *)(inited + 80) = v17;
    *(void *)(inited + 8_Block_object_dispose(&a9, 8) = v15;
    strcpy((char *)(inited + 96), "newDistributor");
    *(unsigned char *)(inited + 111) = -18;
    *(void *)(inited + 112) = v12;
    *(void *)(inited + 120) = v11;
    sub_100042B10(inited);
    LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)();
    unint64_t v22 = (*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448);
    *(void *)(v0 + 424) = 0xD000000000000032;
    *(void *)(v0 + 432) = 0x800000010044D5F0;
    uint64_t v24 = *(void *)(v0 + 352);
    uint64_t v23 = *(void *)(v0 + 360);
    uint64_t v25 = *(void *)(v0 + 344);
    sub_10001644C((uint64_t *)&unk_1005A4CC0);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_100488780;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 16))(v26 + v22, v23, v25);
    sub_1000733FC((uint64_t)_swiftEmptyArrayStorage);
    LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)();
    sub_1000733FC((uint64_t)_swiftEmptyArrayStorage);
    LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)();
    LocalizedStringsRequest.init(strings:)();
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_100072AD8;
    uint64_t v28 = *(void *)(v0 + 304);
    return LocalizedStringsRequest.run()(v28);
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

uint64_t sub_100072AD8()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[33];
    uint64_t v3 = v2[34];
    uint64_t v5 = v2[32];
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    char v6 = sub_100072C38;
  }
  else
  {
    (*(void (**)(void, void))(v2[33] + 8))(v2[34], v2[32]);
    char v6 = sub_100072D04;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100072C38()
{
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100072D04()
{
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[36];
  uint64_t v4 = LocalizedStringsResponse.localizedStrings.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (*(void *)(v4 + 16) && (sub_100049A4C(0xD000000000000020, 0x800000010044D670), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    if (v6 && (sub_100049A4C(0xD000000000000030, 0x800000010044D630), (v7 & 1) != 0))
    {
      uint64_t v8 = v0[54];
      if (*(void *)(v4 + 16))
      {
        uint64_t v9 = v0[53];
        swift_bridgeObjectRetain();
        sub_100049A4C(v9, v8);
        unint64_t v31 = (void *)v0[48];
        uint64_t v11 = v0[44];
        uint64_t v10 = v0[45];
        uint64_t v12 = v0[43];
        if (v13)
        {
          id v28 = (id)v0[31];
          uint64_t v29 = v0[45];
          uint64_t v30 = v0[43];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v14 = objc_allocWithZone((Class)AMSDialogRequest);
          NSString v15 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v16 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v17 = [v14 initWithTitle:v15 message:v16];

          NSString v18 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v19 = [self actionWithTitle:v18];

          [v17 addButtonAction:v19];
          [v28 presentDialogRequest:v17 resultHandler:0];

          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v29, v30);
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
        }
      }
      else
      {
        unint64_t v22 = (void *)v0[48];
        uint64_t v24 = v0[44];
        uint64_t v23 = v0[45];
        uint64_t v25 = v0[43];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      }
    }
    else
    {
      char v21 = (void *)v0[48];
      (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v20 = (void *)v0[48];
    (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_1000730B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for MarketplaceKitLocalizedStrings()
{
  return self;
}

uint64_t sub_1000732F4()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007333C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100005040;
  return sub_100071DF8(a1, v4, v5, v7, v6);
}

unint64_t sub_1000733FC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001644C((uint64_t *)&unk_1005A4CD0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000CCA90(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100073520()
{
  if (qword_1005A2FC0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  sub_10006FABC();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  String.init(cString:)();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.setter();
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter();
}

const char *sub_100073710()
{
  return "com.apple.appstored.ODPSync";
}

void sub_100073724()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.metrics.getter();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v8 = _typeName(_:qualified:)();
    v13[0] = v1;
    v13[1] = sub_1000F7290(v8, v9, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] run", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, void))(v2 + 8))(v4, v13[0]);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  self;
  id v10 = sub_1002E1CF4();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = ObjectType;
  aBlock[4] = (uint64_t)sub_100073DB4;
  void aBlock[5] = v11;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000929CC;
  aBlock[3] = (uint64_t)&unk_100513898;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  sub_1002E384C((uint64_t)v10, 5, 6, v12);
  _Block_release(v12);
}

void sub_1000739E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    static Logger.appUsage.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v16 = v14;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v10 = _typeName(_:qualified:)();
      uint64_t v15 = sub_1000F7290(v10, v11, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2114;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v15 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] Complete with error: %{public}@", (uint8_t *)v9, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_100073D58()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ODPSyncActivity()
{
  return self;
}

uint64_t sub_100073DA4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100073DB4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100073DBC(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10001644C(&qword_1005A4E40);
    uint64_t v5 = swift_allocError();
    *os_log_type_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

id sub_100073E70()
{
  type metadata accessor for UpdatesManager_Swift();
  swift_allocObject();
  id result = sub_100074328();
  qword_1005B1508 = (uint64_t)result;
  return result;
}

id sub_100073EAC()
{
  return sub_100074328();
}

uint64_t sub_100073EE0()
{
  sub_10001644C(&qword_1005A43D0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100488EB0;
  NSString v1 = String._bridgeToObjectiveC()();
  uint64_t v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v3 = self;
  id v4 = [v3 predicateWithProperty:v1 value:v2 comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(v0 + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 predicateWithProperty:v5 value:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() comparisonType:2];
  swift_unknownObjectRelease();

  *(void *)(v0 + 40) = v6;
  uint64_t result = specialized Array._endMutation()();
  qword_1005A4D20 = v0;
  return result;
}

id sub_100074050()
{
  id result = sub_100074070();
  qword_1005A4D28 = (uint64_t)result;
  return result;
}

id sub_100074070()
{
  sub_10001644C(&qword_1005A4E50);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100488780;
  *(_OWORD *)(v0 + 32) = xmmword_100489670;
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = 3;
  if (qword_1005A3038 != -1) {
    swift_once();
  }
  unint64_t v8 = qword_1005A4D20;
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  sub_10001644C((uint64_t *)&unk_1005A4E58);
  uint64_t v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v3 = objc_msgSend(self, "containsPredicateWithProperty:values:", v1, v2, v0);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v4 = v3;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_10000C5EC(v8);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [self predicateMatchingAllPredicates:isa];

  return v6;
}

void sub_100074264(uint64_t a1)
{
}

void sub_10007428C(uint64_t a1)
{
}

void sub_1000742B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setDateFormat:v6];

  *a4 = v5;
}

id sub_100074328()
{
  uint64_t v1 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(unsigned char *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(unsigned char *)(v0 + 12_Block_object_dispose(&a9, 8) = 1;
  *(_OWORD *)(v0 + 136) = xmmword_100489680;
  type metadata accessor for TVProviderAndProvisionedApps();
  uint64_t v4 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  *(void *)(v0 + 152) = v4;
  swift_release();
  id v5 = (objc_class *)type metadata accessor for UpdatesManager_Swift();
  v11.receiver = (id)v0;
  v11.super_class = v5;
  id v6 = objc_msgSendSuper2(&v11, "init");
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  unint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  void v8[4] = v6;
  id v9 = v6;
  sub_100018FDC((uint64_t)v3, (uint64_t)&unk_1005A4FA0, (uint64_t)v8);
  swift_release();
  return v9;
}

uint64_t sub_1000744A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  return _swift_task_switch(sub_1000744C4, 0, 0);
}

uint64_t sub_1000744C4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  id v2 = [self defaultCenter];
  id v3 = self;
  uint64_t v4 = @"AccountStorePrimaryAccountDidChange";
  id v5 = [v3 sharedInstance];
  [v2 addObserver:v1 selector:"handleAccountChangeNotification" name:v4 object:v5];

  id v6 = [v3 activeAccount];
  id v7 = v6;
  if (v6)
  {
    id v8 = objc_msgSend(v6, "ams_DSID");

    if (v8)
    {
      id v7 = [v8 longLongValue];

      char v9 = 0;
      goto LABEL_6;
    }
    id v7 = 0;
  }
  char v9 = 1;
LABEL_6:
  *(unsigned char *)(v0 + 8_Block_object_dispose(&a9, 8) = v9;
  *(void *)(v0 + 72) = v7;
  uint64_t v10 = *(void *)(v0 + 64);
  return _swift_task_switch(sub_100074644, v10, 0);
}

uint64_t sub_100074644()
{
  char v1 = *(unsigned char *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  *(void *)(v2 + 120) = *(void *)(v0 + 72);
  *(unsigned char *)(v2 + 12_Block_object_dispose(&a9, 8) = v1;
  return _swift_task_switch(sub_100074670, 0, 0);
}

uint64_t sub_100074670()
{
  sub_10007CCA0();
  self;
  id v1 = sub_10001A308();
  v0[6] = sub_100075094;
  v0[7] = 0;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_10003D6C8;
  v0[5] = &unk_100514200;
  uint64_t v2 = _Block_copy(v0 + 2);
  swift_release();
  [v1 modifyUsingTransaction:v2];

  _Block_release(v2);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v0[8];
    v0[10] = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)sub_1000747C8;
    uint64_t v4 = v6;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(isEscapingClosureAtFileLocation, v4, v5);
}

uint64_t sub_1000747C8()
{
  id v1 = *(char **)(v0 + 80);
  uint64_t v2 = sub_10007E820(v1);
  sub_100089EAC(v2, 0x696C616974696E49, 0xEC000000676E697ALL, v1);

  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000749E8(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_100074A64, a2, 0);
}

uint64_t sub_100074A64()
{
  id v1 = *(void (***)(void, void))(v0 + 24);
  self;
  BOOL v2 = sub_100005CF8();
  swift_release();
  v1[2](v1, v2);
  _Block_release(v1);
  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100074C6C(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_100074CE8, a2, 0);
}

uint64_t sub_100074CE8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void (**)(void, void))v0[3];
  uint64_t v3 = *(unsigned __int8 *)(v1 + 112);
  *(unsigned char *)(v1 + 112) = 0;
  swift_release();
  v2[2](v2, v3);
  _Block_release(v2);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100074D6C(void *a1, char a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v8 = objc_msgSend(self, "predicateWithProperty:value:comparisonType:", v6, v7, 3, 8);
  swift_unknownObjectRelease();

  id v9 = [a1 connection];
  if (a2) {
    id v10 = 0;
  }
  else {
    id v10 = v8;
  }
  type metadata accessor for MediaAPIUpdate();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v12 = sub_100300254(ObjCClassFromMetadata, v9, v10);

  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10008DEF4;
  *(void *)(v14 + 24) = v13;
  void v18[4] = sub_10008E130;
  v18[5] = v14;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_10003F95C;
  v18[3] = &unk_100514B00;
  uint64_t v15 = _Block_copy(v18);
  swift_retain();
  swift_release();
  [v12 enumerateMemoryEntitiesUsingBlock:v15];

  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100074FA8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

BOOL sub_100075018(void *a1)
{
  sub_100018D68(0, &qword_1005A5680);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  BOOL v3 = sub_100374400(a1, isa);

  return v3;
}

id sub_100075098(void *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  return sub_100374338(a1, Current - ASDSoftwareUpdateHistoryInterval);
}

uint64_t sub_1000750DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v7;
  void *v7 = v5;
  v7[1] = sub_1000194A0;
  return sub_100006D28(a5);
}

uint64_t sub_10007517C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_100016714((uint64_t)v4, &qword_1005A4640);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_1005A4F80;
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    void v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000753BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_1000753DC, 0, 0);
}

uint64_t sub_1000753DC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 32) = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  return _swift_task_switch(sub_10007545C, v1, 0);
}

uint64_t sub_10007545C()
{
  uint64_t v1 = *(char **)(v0 + 32);
  uint64_t v2 = sub_10007E820(v1);
  *(void *)(v0 + 40) = v2;
  sub_100089EAC(v2, 0xD00000000000001ALL, 0x800000010044DBC0, v1);

  return _swift_task_switch(sub_1000754F0, 0, 0);
}

uint64_t sub_1000754F0()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100075528(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000755F8, 0, 0);
}

uint64_t sub_1000755F8()
{
  uint64_t v1 = v0[6];
  if (v1)
  {
    uint64_t v2 = v0[7];
    sub_10001644C(&qword_1005A4F70);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_100488070;
    v0[2] = v1;
    *(void *)(v3 + 32) = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v3 + 40) = v4;
    objc_allocWithZone((Class)type metadata accessor for LogKey());
    v0[12] = sub_1000FBB48(0, 0xE000000000000000, (uint64_t)"/", 1, 2, 0, (void *)0xE000000000000000, 0xD000000000000013, (void *)0x800000010044DBA0, v3, 0);
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(v2 + 152);
    v0[13] = v5;
    return _swift_task_switch(sub_10007576C, v5, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6(0);
  }
}

uint64_t sub_10007576C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  if (*(void *)(v1 + 112))
  {
    uint64_t v2 = *(void **)(v1 + 112);
  }
  else
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    *(void *)(v1 + 112) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 112) = v2;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100075800, 0, 0);
}

uint64_t sub_100075800()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v4 = 32;
    while (v3 < 0 || *(void *)(v1 + v4) != v3)
    {
      v4 += 16;
      if (!--v2) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    static Logger.updates.getter();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 48);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134349056;
      *(void *)(v0 + 40) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}lld is one of the headboard apps", v8, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 72);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v12(1);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100075A04;
    uint64_t v15 = *(void *)(v0 + 96);
    return sub_1000D50B8(v15);
  }
}

uint64_t sub_100075A04(uint64_t a1)
{
  *(void *)(*(void *)v1 + 12_Block_object_dispose(&a9, 8) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100075B04, 0, 0);
}

uint64_t sub_100075B04()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 48);
  uint64_t v1 = *(void **)(v0 + 128);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  char v4 = sub_1000E4D3C(v2, v3, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    static Logger.updates.getter();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 48);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134349056;
      *(void *)(v0 + 32) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}lld is one of the tv provider apps", v8, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  else
  {
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12(v4 & 1);
}

uint64_t sub_100075E28(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[4] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_100075EE4;
  return sub_100075528(a1);
}

uint64_t sub_100075EE4(char a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 24);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  swift_release();
  v3[2](v3, a1 & 1);
  _Block_release(v3);
  char v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_1000761B0(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_100076240, a3, 0);
}

uint64_t sub_100076240()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_1000B9258(7, v1, 0, 0, 0, 0, 1, 1, 0, 1);
  v0[5] = v4;

  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100076338;
  return sub_100006D28((uint64_t)v4);
}

uint64_t sub_100076338(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100076450, v2, 0);
}

uint64_t sub_100076450()
{
  uint64_t v1 = *(void (***)(void, void, void))(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 16);

  swift_release();
  sub_100018D68(0, (unint64_t *)&qword_1005A4EC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class, void))v1)[2](v1, isa, 0);

  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100076520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a6;
  v7[4] = a7;
  void v7[2] = a5;
  return _swift_task_switch(sub_100076544, a4, 0);
}

uint64_t sub_100076544()
{
  sub_10008ABB8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100076760()
{
  return sub_1000769FC((uint64_t)&unk_100514148, (uint64_t)&unk_100514170, (uint64_t)&unk_1005A4F60);
}

uint64_t sub_10007679C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1000767BC, 0, 0);
}

uint64_t sub_1000767BC()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v2 = sub_1000B9258(1, 0, 0, 0, 0, 0, 0, 0, 0, 1);
  *(void *)(v0 + 24) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000768A0;
  return sub_100083DB0((uint64_t)v2);
}

uint64_t sub_1000768A0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10008E18C, 0, 0);
}

uint64_t sub_1000769C0()
{
  return sub_1000769FC((uint64_t)&unk_1005140F8, (uint64_t)&unk_100514120, (uint64_t)&unk_1005A4F48);
}

uint64_t sub_1000769FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v6 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  id v11[4] = v5;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_retain();
  if (v12 == 1)
  {
    sub_100016714((uint64_t)v8, &qword_1005A4640);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = v11;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100076C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100076C50, 0, 0);
}

uint64_t sub_100076C50()
{
  if (([self deviceIsAppleTV] & 1) != 0
    || (uint64_t v1 = self, sub_1003F3678())
    || sub_100005CF8())
  {
    id v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    sub_1003F37CC(v1, 1);
    id v4 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
    id v5 = sub_1000B9258(3, 0, 0, 0, 0, 0, 0, 0, 0, 1);
    v0[3] = v5;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[4] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100076DB4;
    return sub_100083DB0((uint64_t)v5);
  }
}

uint64_t sub_100076DB4()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100076EBC, 0, 0);
}

uint64_t sub_100076EBC()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100076F34(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)aBlock - v12;
  self;
  id v14 = sub_1003F41C8();
  if (v14)
  {
    uint64_t v15 = v14;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v16(v6, v10, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v16(v13, v6, v7);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  Date.init(timeIntervalSinceNow:)();
  sub_100016714((uint64_t)v6, (uint64_t *)&unk_1005A4E20);
LABEL_6:
  type metadata accessor for MediaAPIUpdate();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v18 = [a1 connection];
  id v19 = sub_100300254(ObjCClassFromMetadata, v18, 0);

  sub_10000C820((uint64_t)&off_1005104F0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  unint64_t v21 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v22 = (v9 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v23 + v21, v10, v7);
  *(void *)(v23 + v22) = a2;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = sub_10008DA60;
  *(void *)(v24 + 24) = v23;
  aBlock[4] = sub_10008E130;
  void aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003F95C;
  aBlock[3] = &unk_100514858;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v19 enumerateMemoryEntitiesWithProperties:isa usingBlock:v25];
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void sub_100077368(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MediaAPIUpdate();
  uint64_t v17 = swift_dynamicCastClass();
  if (v17)
  {
    id v18 = (void *)v17;
    uint64_t v32 = a5;
    id v33 = a1;
    id v19 = sub_1000C06E0();
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = sub_10026E8A4(v18, (uint64_t)v20);

    if (v21)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v9, 1, 1, v13);
    }
    sub_100030134((uint64_t)v9, (uint64_t)v12, (uint64_t *)&unk_1005A4E20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {

      sub_100016714((uint64_t)v12, (uint64_t *)&unk_1005A4E20);
      return;
    }
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    if ((static Date.> infix(_:_:)() & 1) == 0) {
      goto LABEL_10;
    }
    if (v19 != (id)1) {
      goto LABEL_10;
    }
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned __int8 v23 = sub_10026E91C(v18, (uint64_t)v22);

    if ((v23 & 1) == 0) {
      goto LABEL_10;
    }
    NSString v24 = String._bridgeToObjectiveC()();
    id v25 = [v18 valueForProperty:v24];

    if (v25)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v34, 0, sizeof(v34));
    }
    sub_100030134((uint64_t)v34, (uint64_t)v35, &qword_1005A5660);
    if (v36)
    {
      sub_10001644C(&qword_1005A5100);
      if (swift_dynamicCast())
      {
        id v26 = objc_allocWithZone((Class)UpdateItemMetrics);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v28 = [v26 initWithData:isa];

        if (!v28)
        {
LABEL_10:
          (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);

          return;
        }
        id v29 = v28;
        uint64_t v30 = v32;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    else
    {

      sub_100016714((uint64_t)v35, &qword_1005A5660);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t sub_1000777E8(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000778A8, v1, 0);
}

uint64_t sub_1000778A8()
{
  uint64_t v1 = (void *)v0[4];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  uint64_t v4 = (char *)sub_1000B9258(0, v1, 0, 0, 0, 0, 0, 0, 0, 1);

  uint64_t v5 = sub_10007E820(v4);
  sub_100089EAC(v5, 0xD000000000000014, 0x800000010044DB80, v4);
  static Logger.updates.getter();
  uint64_t v6 = v4;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    os_log_t log = v7;
    uint64_t v10 = *(void **)&v6[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[2] = v10;
    os_log_type_t type = v8;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v15 = v10;

    *(_WORD *)(v9 + 12) = 2050;
    v0[3] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v12 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "[%@] Refresh update count returning count: %{public}ld", (uint8_t *)v9, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v12 = v6;
    uint64_t v6 = (char *)v7;
  }

  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(char *))v0[1];
  return v13(v5);
}

uint64_t sub_100077CC4(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100077D84;
  return sub_1000777E8((uint64_t)a1);
}

uint64_t sub_100077D84(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_release();
  uint64_t v9 = *(void *)(v5 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 32));
  id v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100077F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[5] = a5;
  void v6[6] = a6;
  v6[4] = a4;
  uint64_t v8 = type metadata accessor for Logger();
  v6[7] = v8;
  v6[8] = *(void *)(v8 - 8);
  v6[9] = swift_task_alloc();
  return _swift_task_switch(sub_100077FFC, a6, 0);
}

uint64_t sub_100077FFC()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[5];
  id v3 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v4 = v1;
  id v5 = sub_1000B9258(8, v1, 0, 0, 0, 0, 0, 0, v2, 0);
  v0[10] = v5;

  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000780F8;
  return sub_100083DB0((uint64_t)v5);
}

uint64_t sub_1000780F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100078214, v1, 0);
}

uint64_t sub_100078214()
{
  uint64_t v1 = (void *)v0[10];
  static Logger.updates.getter();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = v0[10];
    uint64_t v13 = v0[5];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    uint64_t v7 = *(Class *)((char *)&v5->isa + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    v0[2] = v7;
    id v8 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v7;

    *(_WORD *)(v6 + 12) = 2050;
    v0[3] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v9 = v3;
    uint64_t v3 = v5;
  }
  else
  {
    uint64_t v9 = v0[10];
  }
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100078594(uint64_t a1, void *a2, const void *a3, uint64_t a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  sub_10001644C(&qword_1005A4640);
  v4[5] = swift_task_alloc();
  v4[6] = _Block_copy(a3);
  id v8 = a2;
  swift_retain();
  return _swift_task_switch(sub_10007865C, a4, 0);
}

uint64_t sub_10007865C()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (void (**)(void, void))v0[6];
  os_log_type_t v4 = (void *)v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = v0[2];
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v2, 1, 1, v6);
  uint64_t v8 = sub_10008D784(&qword_1005A50C8, v7, (void (*)(uint64_t))type metadata accessor for UpdatesManager_Swift);
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v3;
  v9[3] = v8;
  void v9[4] = v4;
  v9[5] = v5;
  v9[6] = v3;
  swift_retain_n();
  id v10 = v4;
  sub_100018FDC(v2, (uint64_t)&unk_1005A50D0, (uint64_t)v9);
  swift_release();

  swift_release();
  v1[2](v1, 0);
  _Block_release(v1);
  swift_task_dealloc();
  id v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000787E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  void v6[5] = a6;
  uint64_t v6[2] = a1;
  _OWORD v6[3] = a4;
  return _swift_task_switch(sub_100078808, 0, 0);
}

uint64_t sub_100078808()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  return _swift_task_switch(sub_100078888, v1, 0);
}

uint64_t sub_100078888()
{
  unint64_t v2 = v0[5];
  uint64_t v1 = (char *)v0[6];
  uint64_t v3 = v0[4];
  os_log_type_t v4 = sub_10007E820(v1);
  v0[7] = v4;
  sub_100089EAC(v4, v3, v2, v1);

  return _swift_task_switch(sub_100078918, 0, 0);
}

uint64_t sub_100078918()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100078BF4(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_100078C84, a3, 0);
}

uint64_t sub_100078C84()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_1000B9258(0, v1, 0, 0, 0, 0, 0, 1, 0, 1);
  v0[5] = v4;

  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100078D7C;
  return sub_100083DB0((uint64_t)v4);
}

uint64_t sub_100078D7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10008E0BC, v2, 0);
}

uint64_t sub_100079014(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1000790A4, a3, 0);
}

uint64_t sub_1000790A4()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_1000B9258(1, v1, 0, 0, 0, 0, 0, 1, 0, 1);
  v0[5] = v4;

  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10007919C;
  return sub_100083DB0((uint64_t)v4);
}

uint64_t sub_10007919C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000792B4, v2, 0);
}

uint64_t sub_1000792B4()
{
  uint64_t v1 = *(void (***)(void, void, void))(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 16);

  swift_release();
  sub_100018D68(0, (unint64_t *)&qword_1005A4EC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class, void))v1)[2](v1, isa, 0);

  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100079384(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100079444, v1, 0);
}

uint64_t sub_100079444()
{
  uint64_t v1 = (void *)v0[3];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_1000B9258(2, v1, 0, 0, 0, 0, 1, 0, 0, 1);
  v0[8] = v4;

  static Logger.updates.getter();
  uint64_t v5 = (char *)v4;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v9 = *(void **)&v5[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[2] = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v9;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Refreshing from server for reloadManagedUpdates", v8, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  id v11 = (void *)swift_task_alloc();
  v0[9] = v11;
  *id v11 = v0;
  v11[1] = sub_100079694;
  return sub_100083DB0((uint64_t)v5);
}

uint64_t sub_100079694(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000797AC, v2, 0);
}

uint64_t sub_1000797AC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 80);
  return v1(v2);
}

uint64_t sub_10007999C(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100079A60;
  return sub_100079384((uint64_t)v5);
}

uint64_t sub_100079A60()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_release();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_100018D68(0, (unint64_t *)&qword_1005A4EC0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 32);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  id v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_100079C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v7;
  void *v7 = v5;
  v7[1] = sub_100079CC4;
  return sub_100083DB0(a5);
}

uint64_t sub_100079CC4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10008E0C4, 0, 0);
}

uint64_t sub_100079DE4(char a1)
{
  *(unsigned char *)(v2 + 4_Block_object_dispose(&a9, 8) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 24) = v3;
  *(void *)(v2 + 32) = *(void *)(v3 - 8);
  *(void *)(v2 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_100079EA4, v1, 0);
}

uint64_t sub_100079EA4()
{
  uint64_t v19 = v0;
  static Logger.updates.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v16 = *(void *)(v0 + 24);
    uint64_t v17 = *(void *)(v0 + 40);
    int v4 = *(unsigned __int8 *)(v0 + 48);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v18 = v6;
    if (v4) {
      uint64_t v7 = 0x64656C62616E65;
    }
    else {
      uint64_t v7 = 0x64656C6261736964;
    }
    if (v4) {
      unint64_t v8 = 0xE700000000000000;
    }
    else {
      unint64_t v8 = 0xE800000000000000;
    }
    *(void *)(v0 + 16) = sub_1000F7290(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Setting auto updates to %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v17, v16);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  int v12 = *(unsigned __int8 *)(v0 + 48);
  uint64_t v13 = self;
  sub_1003F42B0(v13, v12);
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10007A238(char a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[4] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10007A2F4;
  return sub_100079DE4(a1);
}

uint64_t sub_10007A2F4()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 24);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  os_log_type_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_10007A430()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v10 = sub_1000B9258(2, 0, 0, 0, 0, 0, 0, 0, 0, 1);
  self;
  if (sub_100005C38())
  {
    static Logger.updates.getter();
    uint64_t v11 = v10;
    int v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v25 = v5;
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      unsigned __int8 v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      v22[1] = v14 + 4;
      uint64_t v24 = v6;
      uint64_t v15 = *(Class *)((char *)&v11->isa + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      id v26 = v15;
      id v16 = v15;
      uint64_t v5 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unsigned __int8 v23 = v15;
      uint64_t v6 = v24;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@] Setup following migration", v14, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      int v12 = v11;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v20 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v4, 1, 1, v20);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    void v18[4] = v1;
    v18[5] = v11;
    swift_retain();
    uint64_t v19 = &unk_1005A4F38;
  }
  else
  {
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    void v18[4] = v1;
    v18[5] = v10;
    swift_retain();
    uint64_t v19 = &unk_1005A4F28;
  }
  sub_100018FDC((uint64_t)v4, (uint64_t)v19, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_10007A80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[4] = a5;
  uint64_t v7 = type metadata accessor for Logger();
  void v5[5] = v7;
  v5[6] = *(void *)(v7 - 8);
  v5[7] = swift_task_alloc();
  unint64_t v8 = (void *)swift_task_alloc();
  v5[8] = v8;
  void *v8 = v5;
  v8[1] = sub_10007A908;
  return sub_100083DB0(a5);
}

uint64_t sub_10007A908(uint64_t a1)
{
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007AA08, 0, 0);
}

uint64_t sub_10007AA08()
{
  uint64_t v1 = (void *)v0[4];
  static Logger.updates.getter();
  id v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v15 = v4;
    id v16 = v3;
    unint64_t v5 = v0[9];
    uint64_t v6 = (char *)v0[4];
    uint64_t v7 = swift_slowAlloc();
    unint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412546;
    id v9 = *(void **)&v6[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[2] = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v9;

    *(_WORD *)(v7 + 12) = 2050;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    v0[3] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v15, "[%@] Force update sync complete with %{public}ld updates", (uint8_t *)v7, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int v12 = (void *)v0[4];
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  swift_task_dealloc();
  os_log_type_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10007AC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10007AC98, a4, 0);
}

uint64_t sub_10007AC98()
{
  uint64_t v1 = *(char **)(v0 + 24);
  id v2 = sub_10007E820(v1);
  sub_100089EAC(v2, 0x6F6974617267694DLL, 0xE90000000000006ELL, v1);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10007AD34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  static Logger.updates.getter();
  id v10 = v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v24 = v5;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = v6;
    uint64_t v14 = (uint8_t *)v13;
    id v21 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138412290;
    uint64_t v22 = v1;
    os_log_type_t v15 = *(Class *)((char *)&v10->isa + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    uint64_t v25 = v15;
    id v16 = v15;
    uint64_t v5 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v21 = v15;
    uint64_t v1 = v22;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%@] Show Pending Updates Badge", v14, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v23;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v11 = v10;
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  void v18[4] = v1;
  v18[5] = v10;
  swift_retain();
  sub_100018FDC((uint64_t)v4, (uint64_t)&unk_1005A4F18, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_10007B048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10007B068, a4, 0);
}

uint64_t sub_10007B068()
{
  uint64_t v1 = *(char **)(v0 + 24);
  uint64_t v2 = sub_10007E820(v1);
  sub_100089EAC(v2, 0xD00000000000001ALL, 0x800000010044DB60, v1);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10007B104(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_10007B1E4, v2, 0);
}

uint64_t sub_10007B1E4()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = (void *)v0[13];
  objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v2;
  id v4 = sub_1000B9258(5, v2, 0, 0, 0, 0, 0, 1, 0, 1);
  v0[20] = v4;

  static Logger.updates.getter();
  id v5 = v4;
  swift_bridgeObjectRetain_n();
  uint64_t v6 = (char *)v5;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v20 = v0[16];
    uint64_t v21 = v0[15];
    uint64_t v22 = v0[19];
    uint64_t v19 = v0[12];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    id v10 = *(void **)&v6[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[9] = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v10;

    *(_WORD *)(v9 + 12) = 2082;
    v0[10] = v19;
    sub_10001644C(&qword_1005A4EE8);
    sub_10008C644();
    uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
    v0[11] = sub_1000F7290(v12, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%@] Starting update all with order: %{public}s", (uint8_t *)v9, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v14(v22, v21);
  }
  else
  {
    uint64_t v15 = v0[19];
    uint64_t v16 = v0[15];
    uint64_t v17 = v1[16];

    swift_bridgeObjectRelease_n();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  v1[21] = v14;
  v1[22] = [objc_allocWithZone((Class)PerformUpdatesTask) initWithContext:v6];
  return _swift_task_switch(sub_10007B55C, 0, 0);
}

uint64_t sub_10007B55C()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = swift_task_alloc();
  v0[23] = v2;
  *(void *)(v2 + 16) = v1;
  id v3 = (void *)swift_task_alloc();
  v0[24] = v3;
  *id v3 = v0;
  v3[1] = sub_10007B640;
  return withCheckedContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x29286E7572, 0xE500000000000000, sub_10008E0C0, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10007B640()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10007B758, 0, 0);
}

uint64_t sub_10007B758()
{
  return _swift_task_switch(sub_10007B774, *(void *)(v0 + 112), 0);
}

uint64_t sub_10007B774(uint64_t a1, const char *a2)
{
  uint64_t v48 = v2;
  id v3 = sub_1003037BC(*(id *)(v2 + 176), a2);
  id v4 = *(void **)(v2 + 160);
  if (v3)
  {
    uint64_t v5 = v3;
    static Logger.updates.getter();
    id v6 = v4;
    id v7 = v5;
    id v8 = v6;
    id v9 = v7;
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = *(char **)(v2 + 160);
    unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v2 + 168);
    uint64_t v15 = *(void *)(v2 + 144);
    uint64_t v16 = *(void *)(v2 + 120);
    if (v12)
    {
      uint64_t v46 = *(void *)(v2 + 120);
      uint64_t v17 = swift_slowAlloc();
      os_log_t log = v10;
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412546;
      uint64_t v19 = *(void **)&v14[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v2 + 40) = v19;
      id v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v19;

      *(_WORD *)(v17 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      *(void *)(v2 + 64) = sub_1000F7290(v21, v22, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, log, v11, "[%@] Error performing update all task: %{public}s", (uint8_t *)v17, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v13(v15, v46);
    }
    else
    {

      v13(v15, v16);
    }
    id v33 = *(void **)(v2 + 176);
    uint64_t v34 = *(void **)(v2 + 160);
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v2 + 8);
    return v35(0);
  }
  else
  {
    static Logger.updates.getter();
    id v23 = v4;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(char **)(v2 + 160);
    if (v26)
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      id v29 = (void *)swift_slowAlloc();
      *(_DWORD *)id v28 = 138412290;
      uint64_t v30 = *(void **)&v27[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v2 + 56) = v30;
      id v31 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v29 = v30;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%@] Successfully finished update all with order", v28, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v32 = *(NSObject **)(v2 + 160);
    }
    else
    {

      uint64_t v32 = *(NSObject **)(v2 + 160);
      uint64_t v24 = v32;
    }
    os_log_type_t v38 = *(void (**)(uint64_t, uint64_t))(v2 + 168);
    uint64_t v37 = *(void **)(v2 + 176);
    uint64_t v39 = *(void *)(v2 + 136);
    uint64_t v40 = *(void *)(v2 + 120);

    v38(v39, v40);
    uint64_t v41 = sub_1003037D4((uint64_t)v37);
    id v42 = [v37 jobResults];
    sub_100018D68(0, &qword_1005A4F08);
    uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
    return v44(v41, v43);
  }
}

uint64_t sub_10007BE20(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v6;
  id v7 = a2;
  swift_retain();
  id v8 = (void *)swift_task_alloc();
  v4[6] = v8;
  void *v8 = v4;
  v8[1] = sub_10007BF00;
  return sub_10007B104(v6, (uint64_t)a2);
}

uint64_t sub_10007BF00(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  if (v1)
  {
    if (v5)
    {
      id v8 = *(void (***)(void, void, void, void))(v4 + 32);
      id v9 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
      ((void (**)(void, void, void, void *))v8)[2](v8, 0, 0, v9);
      _Block_release(v8);
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    if (v5)
    {
      uint64_t v10 = *(void (***)(void, void, void, void))(v4 + 32);
      sub_100018D68(0, &qword_1005A4F08);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      ((void (**)(void, void, Class, void))v10)[2](v10, a1 & 1, isa, 0);
      _Block_release(v10);
    }
    swift_bridgeObjectRelease();
  }
  BOOL v12 = *(uint64_t (**)(void))(v7 + 8);
  return v12();
}

uint64_t sub_10007C134(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 80) = a1;
  *(void *)(v3 + 8_Block_object_dispose(&a9, 8) = a2;
  return _swift_task_switch(sub_10007C154, v2, 0);
}

uint64_t sub_10007C154()
{
  *((_OWORD *)v0 + 4) = xmmword_100489690;
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  self;
  id v3 = sub_10001A308();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = v0 + 8;
  v4[3] = v2;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_10008C81C;
  *(void *)(v5 + 24) = v4;
  v0[6] = sub_10008E188;
  v0[7] = v5;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100018DE4;
  v0[5] = &unk_100514048;
  uint64_t v6 = _Block_copy(v0 + 2);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v3 readUsingSession:v6];

  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[9];
    swift_release();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v10(v8, v9);
  }
  return result;
}

uint64_t sub_10007C320(void *a1, uint64_t *a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = sub_1004209A0(a1, v4);

  if (v5)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xF000000000000000;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  *a2 = v6;
  a2[1] = v8;
  return sub_100034BBC(v9, v10);
}

uint64_t sub_10007C534(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  swift_retain();
  unint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  void *v8 = v3;
  v8[1] = sub_10007C61C;
  v8[10] = v5;
  v8[11] = v7;
  return _swift_task_switch(sub_10007C154, a3, 0);
}

uint64_t sub_10007C61C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100034BBC(a1, a2);
  }
  unint64_t v8 = *(void (***)(void, void))(v5 + 24);
  ((void (**)(void, Class))v8)[2](v8, isa);

  _Block_release(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10007C934(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_10007C9C4, a3, 0);
}

uint64_t sub_10007C9C4()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_1000B9258(0, v1, 0, 0, 0, 0, 0, 0, 0, 1);
  v0[5] = v4;

  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10007CABC;
  return sub_100006D28((uint64_t)v4);
}

uint64_t sub_10007CABC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007CBD4, v2, 0);
}

uint64_t sub_10007CBD4()
{
  uint64_t v1 = *(void (***)(void, void))(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 16);

  swift_release();
  sub_100018D68(0, (unint64_t *)&qword_1005A4EC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_10007CCA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = 0;
  id v5 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v6 = sub_100016180(0, 0xE000000000000000, (uint64_t)"/", 1, 2, 0, (void *)0xE000000000000000, 0xD00000000000001BLL, (void *)0x800000010044DB00, 0);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = _swiftEmptyArrayStorage;
  self;
  id v8 = sub_10001A308();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v6;
  v9[3] = &v17;
  void v9[4] = v7 + 16;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10008C6A0;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100040438;
  void aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003D6C8;
  aBlock[3] = &unk_100513F30;
  uint64_t v11 = _Block_copy(aBlock);
  BOOL v12 = v6;
  swift_retain();
  swift_release();
  [v8 modifyUsingTransaction:v11];

  _Block_release(v11);
  LOBYTE(v_Block_object_dispose(&a9, 8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    if (v17 == 1)
    {
      uint64_t v13 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
      uint64_t v14 = (void *)swift_allocObject();
      void v14[2] = 0;
      v14[3] = 0;
      void v14[4] = v1;
      v14[5] = v7;
      swift_retain();
      swift_retain();
      sub_100018FDC((uint64_t)v4, (uint64_t)&unk_1005A4F00, (uint64_t)v14);
      swift_release();
    }
    swift_release();
    swift_release();
  }
}

uint64_t sub_10007CFA8(void *a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v9 = [a1 connection];
  id v10 = sub_1002FF548(ObjCClassFromMetadata, v9, 0);

  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  id v11[4] = a3;
  void v11[5] = a4;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10008C7C0;
  *(void *)(v12 + 24) = v11;
  void v18[4] = sub_10008C7DC;
  v18[5] = v12;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000950B8;
  v18[3] = &unk_100513FD0;
  uint64_t v13 = _Block_copy(v18);
  id v14 = a1;
  id v15 = a2;
  swift_retain();
  swift_release();
  [v10 enumeratePersistentIDsUsingBlock:v13];

  _Block_release(v13);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = *a3;
    swift_release();
    return v17;
  }
  return result;
}

void sub_10007D170(uint64_t a1, int a2, int a3, id a4, void *a5, unsigned char *a6, char **a7)
{
  id v12 = [a4 connection];
  id v25 = [objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdateEntity()) initWithPersistentID:a1 onConnection:v12];

  if ([v25 existsInDatabase])
  {
    if (sub_1003763C0((uint64_t)a4, v25, a5))
    {
      *a6 = 1;
      id v13 = sub_10026E95C(v25, @"bundle_id");
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        uint64_t v18 = *a7;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a7 = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v18 = sub_1000E7C44(0, *((void *)v18 + 2) + 1, 1, v18);
          *a7 = v18;
        }
        unint64_t v21 = *((void *)v18 + 2);
        unint64_t v20 = *((void *)v18 + 3);
        unint64_t v22 = v21 + 1;
        if (v21 >= v20 >> 1)
        {
          uint64_t v24 = sub_1000E7C44((char *)(v20 > 1), v21 + 1, 1, v18);
          unint64_t v22 = v21 + 1;
          uint64_t v18 = v24;
          *a7 = v24;
        }
        *((void *)v18 + 2) = v22;
        id v23 = &v18[16 * v21];
        *((void *)v23 + 4) = v15;
        *((void *)v23 + 5) = v17;
      }
    }
  }
}

uint64_t sub_10007D2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 4_Block_object_dispose(&a9, 8) = a5;
  return _swift_task_switch(sub_10007D314, 0, 0);
}

uint64_t sub_10007D314()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  v0[7] = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  swift_beginAccess();
  v0[8] = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10007D3C8, v1, 0);
}

uint64_t sub_10007D3C8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10008ABB8(*(void **)(v0 + 56), 0xD000000000000010, 0x800000010044DB20);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007D458, v1, 0);
}

uint64_t sub_10007D458()
{
  uint64_t v1 = *(char **)(v0 + 56);
  uint64_t v2 = sub_10007E820(v1);
  sub_100089EAC(v2, 0xD00000000000001ELL, 0x800000010044DB40, v1);
  return _swift_task_switch(sub_10007D4E8, 0, 0);
}

uint64_t sub_10007D4E8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007D560(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  static Logger.updates.getter();
  id v12 = v11;
  swift_bridgeObjectRetain_n();
  id v13 = (char *)v12;
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = v7;
    uint64_t v17 = v16;
    uint64_t v18 = (void *)swift_slowAlloc();
    v27[1] = v18;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v35 = v29;
    *(_DWORD *)uint64_t v17 = 138412546;
    os_log_t v28 = v14;
    uint64_t v32 = v6;
    uint64_t v33 = v2;
    uint64_t v19 = *(void **)&v13[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    uint64_t v34 = (uint64_t)v19;
    uint64_t v30 = v8;
    id v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v19;

    *(_WORD *)(v17 + 12) = 2082;
    uint64_t v34 = a1;
    sub_10001644C(&qword_1005A4EE8);
    sub_10008C644();
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v34 = sub_1000F7290(v21, v22, &v35);
    uint64_t v6 = v32;
    uint64_t v2 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    os_log_t v23 = v28;
    _os_log_impl((void *)&_mh_execute_header, v28, v15, "[%@] Cleaning up following removal of apps: %{public}s", (uint8_t *)v17, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v6, 1, 1, v24);
  id v25 = (void *)swift_allocObject();
  _OWORD v25[2] = 0;
  v25[3] = 0;
  v25[4] = a1;
  v25[5] = v13;
  v25[6] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100018FDC((uint64_t)v6, (uint64_t)&unk_1005A4EE0, (uint64_t)v25);
  return swift_release();
}

uint64_t sub_10007D964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  v6[18] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[21] = v7;
  v6[22] = *(void *)(v7 - 8);
  v6[23] = swift_task_alloc();
  return _swift_task_switch(sub_10007DA28, 0, 0);
}

uint64_t sub_10007DA28()
{
  id v1 = [objc_allocWithZone((Class)CleanupManager) init];
  v0[24] = v1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[25] = isa;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10007DB64;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10007DFA8;
  v0[13] = &unk_100513EA0;
  v0[14] = v3;
  sub_1002FB1A0((uint64_t)v1, isa, v0 + 10);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10007DB64()
{
  return _swift_task_switch(sub_10007DC44, 0, 0);
}

uint64_t sub_10007DC44()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 120);

  if (v2 < 1)
  {
    swift_task_dealloc();
    id v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v3 = *(void **)(v0 + 152);
    static Logger.updates.getter();
    id v4 = v3;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(char **)(v0 + 152);
    if (v7)
    {
      os_log_type_t type = v6;
      uint64_t v9 = swift_slowAlloc();
      id v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412546;
      id v11 = *(void **)&v8[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v11;
      id v12 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v11;

      *(_WORD *)(v9 + 12) = 2050;
      *(void *)(v0 + 136) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, type, "[%@] Removed %{public}ld uninstalled updates", (uint8_t *)v9, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v5 = *(NSObject **)(v0 + 152);
    }
    uint64_t v16 = *(void *)(v0 + 176);
    uint64_t v15 = *(void *)(v0 + 184);
    uint64_t v18 = *(void *)(v0 + 160);
    uint64_t v17 = *(void *)(v0 + 168);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    return _swift_task_switch(sub_10007DE90, v18, 0);
  }
}

uint64_t sub_10007DE90()
{
  uint64_t v1 = *(void *)(v0 + 160);
  sub_10008ABB8(*(void **)(v0 + 152), 0x6D65722073707041, 0xEC0000006465766FLL);
  return _swift_task_switch(sub_10007DF18, v1, 0);
}

uint64_t sub_10007DF18()
{
  uint64_t v1 = *(char **)(v0 + 152);
  uint64_t v2 = sub_10007E820(v1);
  sub_100089EAC(v2, 0x6D65722073707041, 0xEC0000006465766FLL, v1);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10007DFA8(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_10007E02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  uint64_t v6 = type metadata accessor for Logger();
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  return _swift_task_switch(sub_10007E0EC, 0, 0);
}

uint64_t sub_10007E0EC()
{
  id v1 = [objc_allocWithZone((Class)CleanupManager) init];
  v0[23] = v1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[24] = isa;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10007E228;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10007DFA8;
  v0[13] = &unk_1005142C8;
  v0[14] = v3;
  sub_1002FB348((uint64_t)v1, isa, v0 + 10);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10007E228()
{
  return _swift_task_switch(sub_10007E308, 0, 0);
}

uint64_t sub_10007E308()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 120);

  if (v2 < 1)
  {
    swift_task_dealloc();
    id v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
    *(void *)(v0 + 200) = v3;
    static Logger.updates.getter();
    id v4 = v3;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t type = v6;
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412546;
      uint64_t v9 = *(Class *)((char *)&v4->isa + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v9;
      id v10 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v8 = v9;

      *(_WORD *)(v7 + 12) = 2050;
      *(void *)(v0 + 136) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, type, "[%@] Corrected %{public}ld installed updates", (uint8_t *)v7, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v5 = v4;
    }
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v16 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    return _swift_task_switch(sub_10007E570, v16, 0);
  }
}

uint64_t sub_10007E570()
{
  uint64_t v1 = *(void *)(v0 + 152);
  sub_10008ABB8(*(void **)(v0 + 200), 0xD000000000000016, 0x800000010044DBE0);
  return _swift_task_switch(sub_10007E5F4, v1, 0);
}

uint64_t sub_10007E5F4()
{
  uint64_t v1 = *(char **)(v0 + 200);
  uint64_t v2 = sub_10007E820(v1);
  sub_100089EAC(v2, 0xD000000000000016, 0x800000010044DBE0, v1);
  return _swift_task_switch(sub_10007E684, 0, 0);
}

uint64_t sub_10007E684()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

char *sub_10007E820(char *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v112 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v113 = (char *)v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v95 - v6;
  __chkstk_darwin(v8);
  uint64_t v105 = (char *)v95 - v9;
  __chkstk_darwin(v10);
  uint64_t v108 = (char *)v95 - v11;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100005A10();
  uint64_t v117 = _swiftEmptyArrayStorage;
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  double v17 = v16;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v18 = v13 + 8;
  char v102 = v15;
  uint64_t v101 = v19;
  v19(v15, v12);
  self;
  id v20 = sub_10001A308();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = &v117;
  *(void *)(v21 + 24) = ObjectType;
  unint64_t v22 = (void *)swift_allocObject();
  void v22[2] = sub_10008C4EC;
  v22[3] = v21;
  aBlock[4] = sub_10008E188;
  void aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100018DE4;
  aBlock[3] = &unk_100513DD8;
  os_log_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v20 readUsingSession:v23];

  _Block_release(v23);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v20) {
LABEL_40:
  }
    __break(1u);
  uint64_t v100 = v21;
  uint64_t v116 = 0;
  uint64_t v24 = [self sharedDatabaseContext];
  aBlock[0] = 0;
  unsigned int v25 = [v24 startAccessingReturningError:aBlock];
  id v26 = aBlock[0];
  uint64_t v114 = a1;
  uint64_t v103 = v24;
  if (v25)
  {
    uint64_t v27 = v117;
    uint64_t v28 = v117[2];
    if (v28)
    {
      uint64_t v97 = v18;
      uint64_t v98 = v12;
      uint64_t v99 = v7;
      id v111 = self;
      uint64_t v107 = OBJC_IVAR____TtC9appstored14UpdatesContext_logKey;
      uint64_t v96 = v3;
      unint64_t v110 = (void (**)(char *, uint64_t))(v3 + 8);
      id v29 = v26;
      swift_bridgeObjectRetain();
      v95[1] = v27;
      uint64_t v30 = v27 + 5;
      *(void *)&long long v31 = 138412546;
      long long v106 = v31;
      uint64_t v104 = (char *)&type metadata for Any + 8;
      uint64_t v32 = v105;
      while (1)
      {
        uint64_t v33 = (char *)*(v30 - 1);
        unint64_t v34 = *v30;
        swift_bridgeObjectRetain_n();
        NSString v35 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v36 = [v111 proxyForBundleID:v35];

        if (!v36) {
          goto LABEL_17;
        }
        if (![v36 isInstalled])
        {

LABEL_17:
          uint64_t v113 = v33;
          static Logger.updates.getter();
          uint64_t v45 = a1;
          swift_bridgeObjectRetain();
          uint64_t v46 = v45;
          uint64_t v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = swift_slowAlloc();
            uint64_t v50 = (void *)swift_slowAlloc();
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v49 = v106;
            unint64_t v51 = *(void **)&v114[v107];
            *(void *)(v49 + 4) = v51;
            *uint64_t v50 = v51;
            id v52 = v51;

            *(_WORD *)(v49 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v49 + 14) = sub_1000F7290((uint64_t)v113, v34, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "[%@] Found update that is not installed: %{public}s", (uint8_t *)v49, 0x16u);
            sub_10001644C((uint64_t *)&unk_1005A3AA0);
            swift_arrayDestroy();
            a1 = v114;
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }

          (*v110)(v32, v112);
          goto LABEL_7;
        }
        id v37 = [v36 record];
        os_log_type_t v38 = v37;
        if (!v109)
        {
LABEL_19:

LABEL_20:
          swift_bridgeObjectRelease();
          if (__OFADD__(v116, 1))
          {
            __break(1u);
            goto LABEL_40;
          }
          ++v116;
          a1 = v114;
          goto LABEL_27;
        }
        if (v109 == 1) {
          goto LABEL_23;
        }
        id v39 = [v37 bundleIdentifier];
        if (!v39) {
          goto LABEL_19;
        }
        uint64_t v40 = v39;
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v43 = v42;

        if (!sub_10042802C(v38)) {
          break;
        }
        char v44 = sub_10009C4CC(v41, v43, v109);
        swift_bridgeObjectRelease();

        if ((v44 & 1) == 0) {
          goto LABEL_20;
        }
LABEL_24:
        uint64_t v113 = v33;
        static Logger.updates.getter();
        a1 = v114;
        uint64_t v53 = v114;
        swift_bridgeObjectRetain();
        uint64_t v54 = v53;
        uint64_t v55 = v108;
        uint64_t v56 = v54;
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = swift_slowAlloc();
          uint64_t v60 = (void *)swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v59 = v106;
          id v61 = *(void **)&v114[v107];
          *(void *)(v59 + 4) = v61;
          *uint64_t v60 = v61;
          id v62 = v61;

          *(_WORD *)(v59 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v59 + 14) = sub_1000F7290((uint64_t)v113, v34, (uint64_t *)aBlock);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "[%@] Found update but was authorized to install it automatically: %{public}s", (uint8_t *)v59, 0x16u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          a1 = v114;
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v110)(v108, v112);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*v110)(v55, v112);
        }
LABEL_27:
        uint64_t v32 = v105;
LABEL_7:
        v30 += 2;
        if (!--v28)
        {
          swift_bridgeObjectRelease();
          uint64_t v3 = v96;
          uint64_t v7 = v99;
          uint64_t v12 = v98;
          uint64_t v24 = v103;
          goto LABEL_34;
        }
      }
      swift_bridgeObjectRelease();
LABEL_23:

      goto LABEL_24;
    }
    id v77 = aBlock[0];
LABEL_34:
    sub_10000E0D4(v109);
    [v24 stopAccessing];
    id v76 = v102;
  }
  else
  {
    uint64_t v97 = v18;
    uint64_t v98 = v12;
    uint64_t v99 = v7;
    id v63 = aBlock[0];
    sub_10000E0D4(v109);
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v64 = v113;
    static Logger.updates.getter();
    uint64_t v65 = a1;
    swift_errorRetain();
    uint64_t v66 = v65;
    swift_errorRetain();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      uint64_t v96 = v3;
      long long v71 = (void *)v70;
      id v111 = (id)swift_slowAlloc();
      aBlock[0] = v111;
      *(_DWORD *)uint64_t v69 = 138412546;
      uint64_t v72 = *(void **)&v66[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      uint64_t v115 = (uint64_t)v72;
      id v73 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v71 = v72;
      a1 = v114;

      *(_WORD *)(v69 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v74 = Error.localizedDescription.getter();
      uint64_t v115 = sub_1000F7290(v74, v75, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "[%@] Error accessing the LS database: %{public}s", (uint8_t *)v69, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      uint64_t v3 = v96;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v113, v112);
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v64, v112);
    }
    uint64_t v7 = v99;
    uint64_t v12 = v98;
    id v76 = v102;
    uint64_t v24 = v103;
  }
  os_log_type_t v78 = v101;
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  double v80 = v79;
  v78(v76, v12);
  static Logger.updates.getter();
  uint64_t v81 = v116;
  id v82 = a1;
  uint64_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.default.getter();
  int v85 = v84;
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v86 = swift_slowAlloc();
    uint64_t v113 = v81;
    uint64_t v87 = v86;
    uint64_t v88 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v87 = 138412802;
    LODWORD(v114) = v85;
    uint64_t v89 = v3;
    uint64_t v90 = *(Class *)((char *)&v82->isa + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    aBlock[0] = v90;
    id v91 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v88 = v90;
    uint64_t v3 = v89;
    id v92 = v103;

    *(_WORD *)(v87 + 12) = 2050;
    aBlock[0] = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v87 + 22) = 2050;
    *(double *)aBlock = v80 - v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v114, "[%@] Current update count: %{public}ld elapsedTime: %{public}f", (uint8_t *)v87, 0x20u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v83 = v82;
    id v92 = v82;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v112);
  swift_beginAccess();
  uint64_t v93 = v116;
  swift_bridgeObjectRelease();
  swift_release();
  return v93;
}

uint64_t sub_10007F678(void *a1, uint64_t a2)
{
  type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v5 = [a1 connection];
  if (qword_1005A3040 != -1) {
    swift_once();
  }
  id v6 = sub_1002FF548(ObjCClassFromMetadata, v5, (void *)qword_1005A4D28);

  sub_10001644C(&qword_1005A4ED0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100488070;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 32) = 0x695F656C646E7562;
  *(void *)(v7 + 40) = 0xE900000000000064;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10008C514;
  *(void *)(v10 + 24) = v9;
  void v13[4] = sub_10008E130;
  v13[5] = v10;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = sub_10003F95C;
  v13[3] = &unk_100513E50;
  uint64_t v11 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v6 enumerateMemoryEntitiesWithProperties:isa usingBlock:v11];

  _Block_release(v11);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

void sub_10007F8C4(void *a1, uint64_t a2, uint64_t a3, char **a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = sub_10026E95C(a1, (uint64_t)v6);

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    uint64_t v11 = *a4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = sub_1000E7C44(0, *((void *)v11 + 2) + 1, 1, v11);
      *a4 = v11;
    }
    unint64_t v14 = *((void *)v11 + 2);
    unint64_t v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1)
    {
      uint64_t v11 = sub_1000E7C44((char *)(v13 > 1), v14 + 1, 1, v11);
      *a4 = v11;
    }
    *((void *)v11 + 2) = v14 + 1;
    uint64_t v15 = &v11[16 * v14];
    *((void *)v15 + 4) = v8;
    *((void *)v15 + 5) = v10;
  }
}

uint64_t sub_10007F9C4()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = 0;
  self;
  id v5 = sub_10001A308();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v16;
  *(void *)(v6 + 24) = ObjectType;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10008C4C4;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_10008E188;
  void aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018DE4;
  aBlock[3] = &unk_100513D60;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v5 readUsingSession:v8];

  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    static Logger.updates.getter();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134349056;
      swift_beginAccess();
      aBlock[0] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Current update count is: %{public}ld", v12, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
    swift_beginAccess();
    uint64_t v13 = v16;
    swift_release();
    return v13;
  }
  return result;
}

void sub_10007FCBC(void *a1, void *a2)
{
  type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v5 = qword_1005A3040;
  uint64_t v6 = @"ROWID";
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_1005A4D28;
  id v8 = [a1 connection];
  id v9 = sub_1002FF80C(ObjCClassFromMetadata, v6, v7, v8);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100018D68(0, (unint64_t *)&qword_1005A3230);
  if (swift_dynamicCast())
  {
    id v10 = [v11 integerValue];

    *a2 = v10;
  }
}

uint64_t sub_10007FE08(void *a1, uint64_t a2)
{
  sub_10001644C(&qword_1005A4E50);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100488780;
  *(_OWORD *)(v4 + 32) = xmmword_100489670;
  *(void *)(v4 + 4_Block_object_dispose(&a9, 8) = 3;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  sub_10001644C((uint64_t *)&unk_1005A4E58);
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = objc_msgSend(self, "containsPredicateWithProperty:values:", v5, v6, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v9 = [a1 connection];
  id v10 = sub_1002FF548(ObjCClassFromMetadata, v9, v7);

  sub_10000C820((uint64_t)&off_100510560);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10008C1A8;
  *(void *)(v13 + 24) = v12;
  void v16[4] = sub_100051124;
  v16[5] = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  _OWORD v16[2] = sub_10003F95C;
  v16[3] = &unk_100513B58;
  unint64_t v14 = _Block_copy(v16);
  swift_retain();
  swift_release();
  [v10 enumerateMemoryEntitiesWithProperties:isa usingBlock:v14];

  _Block_release(v14);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

void sub_1000800B0(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  type metadata accessor for MediaAPIUpdate();
  if (swift_dynamicCastClass())
  {
    uint64_t v6 = swift_dynamicCastClassUnconditional();
    id v11 = a1;
    id v7 = sub_1000C0768();
    if (v7)
    {
      uint64_t v8 = (uint64_t)v7;
      id v9 = v11;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *a4;
      *a4 = 0x8000000000000000;
      sub_1000D2988(v6, v8, isUniquelyReferenced_nonNull_native);
      *a4 = v12;

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
}

void sub_1000801B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v71 - v17;
  __chkstk_darwin(v16);
  id v20 = (char *)v71 - v19;
  type metadata accessor for MediaAPIUpdate();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21) {
    return;
  }
  unint64_t v22 = (void *)v21;
  unint64_t v75 = a5;
  uint64_t v76 = v9;
  int v23 = *(unsigned __int8 *)(a4 + OBJC_IVAR____TtC9appstored14UpdatesContext_isVPPLookup);
  id v77 = a1;
  if (v23 == 1)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned __int8 v25 = sub_10026E91C(v22, (uint64_t)v24);

    if ((v25 & 8) == 0)
    {
      NSString v26 = String._bridgeToObjectiveC()();
      unsigned __int8 v27 = sub_10026E91C(v22, (uint64_t)v26);

      if ((v27 & 0x10) == 0) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v74 = v15;
  uint64_t v28 = sub_1000C0814();
  if (v29 >> 60 == 15)
  {
LABEL_6:
    id v30 = v77;

    return;
  }
  uint64_t v31 = v28;
  unint64_t v32 = v29;
  uint64_t v33 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v80[0] = 0;
  id v35 = [v33 JSONObjectWithData:isa options:0 error:v80];

  if (!v35)
  {
    id v46 = v80[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100034BBC(v31, v32);

    swift_errorRelease();
    return;
  }
  uint64_t v73 = v31;
  id v36 = v80[0];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10001644C(&qword_1005A5E50);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_100034BBC(v73, v32);

    return;
  }
  unint64_t v72 = v32;
  uint64_t v37 = sub_10008B9B8(*(uint64_t *)&v79[0]);
  swift_bridgeObjectRelease();
  sub_1000C51E4(v37);
  swift_bridgeObjectRelease();
  id v38 = objc_allocWithZone((Class)ASDSoftwareUpdate);
  Class v39 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v40 = [v38 initWithUpdateDictionary:v39];

  if (!v40)
  {
    __break(1u);
    return;
  }
  int v41 = *(unsigned __int8 *)(a4 + OBJC_IVAR____TtC9appstored14UpdatesContext_includeMetrics);
  uint64_t v42 = v11;
  uint64_t v43 = v40;
  if (v41 == 1)
  {
    NSString v44 = String._bridgeToObjectiveC()();
    id v45 = [v77 valueForProperty:v44];

    if (v45)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v79, 0, sizeof(v79));
    }
    sub_100030134((uint64_t)v79, (uint64_t)v80, &qword_1005A5660);
    if (v80[3])
    {
      if (swift_dynamicCast())
      {
        sub_1000C51E4(v78);
        swift_bridgeObjectRelease();
        v47.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
LABEL_23:
        [v43 setMetrics:v47.super.isa];

        goto LABEL_24;
      }
    }
    else
    {
      sub_100016714((uint64_t)v80, &qword_1005A5660);
    }
    v47.super.Class isa = 0;
    goto LABEL_23;
  }
LABEL_24:
  os_log_type_t v48 = (char *)sub_1000C06E0();
  NSString v49 = String._bridgeToObjectiveC()();
  unsigned __int8 v50 = sub_10026E91C(v22, (uint64_t)v49);

  if ((v50 & 1) != 0 && (unint64_t)(v48 - 3) <= 1)
  {
    unint64_t v51 = v43;
    id v52 = 0;
  }
  else
  {
    unint64_t v51 = v43;
    id v52 = v48;
  }
  [v51 setUpdateState:v52];
  uint64_t v53 = v76;
  [v43 setRawUpdateState:v48];
  NSString v54 = String._bridgeToObjectiveC()();
  id v55 = sub_10026E91C(v22, (uint64_t)v54);

  [v43 setPackageType:v55];
  NSString v56 = String._bridgeToObjectiveC()();
  id v57 = sub_10026E8A4(v22, (uint64_t)v56);

  v71[1] = v42;
  if (v57)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
    uint64_t v59 = v18;
    uint64_t v60 = 0;
  }
  else
  {
    os_log_type_t v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
    uint64_t v59 = v18;
    uint64_t v60 = 1;
  }
  id v61 = v58;
  v58(v59, v60, 1, v8);
  sub_100030134((uint64_t)v18, (uint64_t)v20, (uint64_t *)&unk_1005A4E20);
  id v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  if (v62(v20, 1, v8) == 1)
  {
    Class v63 = 0;
  }
  else
  {
    Class v63 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v20, v8);
  }
  unint64_t v64 = v72;
  [v43 setInstallDate:v63];

  NSString v65 = String._bridgeToObjectiveC()();
  Class v66 = (Class)sub_10026E8A4(v22, (uint64_t)v65);

  if (v66)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v67 = v76;
    os_log_type_t v68 = v74;
    (*(void (**)(void))(v76 + 32))();
    v61(v68, 0, 1, v8);
    if (v62(v68, 1, v8) == 1)
    {
      Class v66 = 0;
    }
    else
    {
      Class v66 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v8);
    }
    uint64_t v69 = v75;
    unint64_t v64 = v72;
  }
  else
  {
    v61(v74, 1, 1, v8);
    uint64_t v69 = v75;
  }
  [v43 setTimestamp:v66];

  id v70 = v43;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_100034BBC(v73, v64);
}

uint64_t sub_100080AA4(id *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v52 = a4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v55 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = *a1;
  id v13 = [*a1 bundleIdentifier];
  if (v13)
  {
    uint64_t v14 = v13;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v16 = [self proxyForBundleID:v15];

    if (v16)
    {
      if (([v16 isInstalled] & 1) == 0)
      {
        uint64_t v17 = *(void *)(a2 + 16);
        if (v17)
        {
          uint64_t v53 = v10;
          uint64_t v54 = v9;
          swift_bridgeObjectRetain();
          uint64_t v18 = 80;
          do
          {
            uint64_t v19 = *(void **)(a2 + v18);
            unint64_t v20 = (unint64_t)[v16 storeItemID];
            if ((v20 & 0x8000000000000000) == 0 && v19 == (void *)v20)
            {
              swift_bridgeObjectRelease();
              goto LABEL_10;
            }
            v18 += 96;
            --v17;
          }
          while (v17);

          swift_bridgeObjectRelease();
          uint64_t v5 = v4;
          uint64_t v10 = v53;
          uint64_t v9 = v54;
        }
        else
        {
        }
        goto LABEL_19;
      }
LABEL_10:
      id v21 = [v16 record];
      unint64_t v22 = v21;
      uint64_t v23 = v52;
      if (!v52) {
        goto LABEL_16;
      }
      if (v52 == 1)
      {

LABEL_26:
        char v29 = 1;
        goto LABEL_27;
      }
      id v24 = [v21 bundleIdentifier];
      if (v24)
      {
        unsigned __int8 v25 = v24;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;

        if ((sub_10042802C(v22) & 1) == 0)
        {

          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
        char v29 = sub_10009C4CC(v26, v28, v23);

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_16:

        char v29 = 0;
      }
LABEL_27:
      [v12 setAutoUpdateEnabled:v29 & 1];

      return 0;
    }
  }
LABEL_19:
  uint64_t v53 = v10;
  uint64_t v54 = v9;
  id v30 = v55;
  static Logger.updates.getter();
  id v31 = a3;
  id v32 = v12;
  uint64_t v33 = (char *)v31;
  id v34 = v32;
  id v35 = Logger.logObject.getter();
  int v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, (os_log_type_t)v36))
  {
    HIDWORD(v49) = v36;
    uint64_t v52 = v5;
    uint64_t v37 = swift_slowAlloc();
    id v38 = (void *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    uint64_t v57 = v51;
    *(_DWORD *)uint64_t v37 = 138412546;
    Class v39 = *(void **)&v33[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    uint64_t v56 = (uint64_t)v39;
    id v40 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unsigned __int8 v50 = v38;
    *id v38 = v39;

    *(_WORD *)(v37 + 12) = 2082;
    id v41 = [v34 bundleIdentifier];
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;
    }
    else
    {
      unint64_t v45 = 0xE300000000000000;
      uint64_t v43 = 7104878;
    }
    uint64_t v47 = v54;
    uint64_t v56 = sub_1000F7290(v43, v45, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, BYTE4(v49), "[%@] Removed non-installed update with bundleID: %{public}s", (uint8_t *)v37, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    uint64_t v46 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v47);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v54);
    return 1;
  }
  return v46;
}

uint64_t sub_100080FB0()
{
  return sub_1000769FC((uint64_t)&unk_100513BB8, (uint64_t)&unk_100513BE0, (uint64_t)&unk_1005A4E88);
}

uint64_t sub_100080FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  sub_10001644C(&qword_1005A4640);
  v4[4] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  v4[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000810EC, 0, 0);
}

uint64_t sub_1000810EC()
{
  id v1 = [self activeAccount];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, "ams_DSID");
    v0[9] = v3;

    if (v3)
    {
      if ([self deviceIsAppleTV])
      {
        self;
        if (sub_100005CF8())
        {
          uint64_t v4 = v0[3];
          return _swift_task_switch(sub_100081218, v4, 0);
        }
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100081218()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 80) = *(void *)(v1 + 120);
  *(unsigned char *)(v0 + 104) = *(unsigned char *)(v1 + 128);
  return _swift_task_switch(sub_100081248, 0, 0);
}

uint64_t sub_100081248()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = [*(id *)(v0 + 72) longLongValue];
  return _swift_task_switch(sub_1000812C0, v1, 0);
}

uint64_t sub_1000812C0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v1 + 120) = *(void *)(v0 + 88);
  *(unsigned char *)(v1 + 12_Block_object_dispose(&a9, 8) = 0;
  return _swift_task_switch(sub_1000812EC, 0, 0);
}

uint64_t sub_1000812EC()
{
  if (*(unsigned char *)(v0 + 104) == 1) {
    [*(id *)(v0 + 72) longLongValue];
  }
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 152);
  *(void *)(v0 + 96) = v1;
  return _swift_task_switch(sub_100081370, v1, 0);
}

uint64_t sub_100081370()
{
  uint64_t v1 = v0[12];
  if (*(void *)(v1 + 112))
  {
    *(void *)(v1 + 112) = 0;
    swift_bridgeObjectRelease();
    static Logger.updates.getter();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Cleared cached headboard apps", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[8];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[6];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  return _swift_task_switch(sub_100081484, 0, 0);
}

uint64_t sub_100081484()
{
  static Logger.updates.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = *(unsigned __int8 *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134349056;
    if (v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v4;
    }
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Account changed to: %{public}lld", v5, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v7 = *(void **)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v9 = *(void *)(v0 + 24);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  id v10 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v11 = sub_1000B9258(6, 0, 0, 0, 0, 0, 0, 0, 0, 1);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  id v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  v13[3] = 0;
  void v13[4] = v9;
  v13[5] = v11;
  swift_retain();
  id v14 = v11;
  sub_100018FDC(v8, (uint64_t)&unk_1005A4EA0, (uint64_t)v13);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1000816DC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  a3(v4);
  return swift_release();
}

uint64_t sub_100081720(char *a1, char *a2)
{
  uint64_t v5 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v81 = *(void *)(v12 - 8);
  uint64_t v82 = v12;
  __chkstk_darwin(v12);
  id v14 = (char *)v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v71 - v16;
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)v71 - v19;
  uint64_t result = sub_10007F9C4();
  uint64_t v83 = a2;
  double v80 = v14;
  if (result >= 1)
  {
    uint64_t v76 = v9;
    uint64_t v77 = result;
    uint64_t v78 = v2;
    double v79 = a1;
    uint64_t v22 = self;
    BOOL v23 = sub_100005CF8();
    unint64_t v24 = *(void *)&a2[OBJC_IVAR____TtC9appstored14UpdatesContext_reason];
    if (v24 > 8)
    {
      type metadata accessor for LoadSoftwareUpdatesReason(0);
      uint64_t v84 = v24;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return result;
    }
    BOOL v25 = v23;
    if (((1 << v24) & 0x1BD) != 0 || !v23)
    {
      static Logger.updates.getter();
      uint64_t v27 = v83;
      uint64_t v28 = v83;
      char v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        os_log_t v75 = v29;
        uint64_t v33 = (void *)v32;
        uint64_t v76 = swift_slowAlloc();
        uint64_t v84 = v76;
        *(_DWORD *)uint64_t v31 = 138412802;
        id v34 = *(void **)&v28[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
        uint64_t v86 = (uint64_t)v34;
        id v35 = v34;
        uint64_t v27 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v33 = v34;

        *(_WORD *)(v31 + 12) = 1026;
        LODWORD(v86) = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v31 + 1_Block_object_dispose(&a9, 8) = 2082;
        uint64_t v36 = sub_1000B8940();
        uint64_t v86 = sub_1000F7290(v36, v37, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        char v29 = v75;
        _os_log_impl((void *)&_mh_execute_header, v75, v30, "[%@] Not purchasing updates with auto updates enabled: %{BOOL,public}d reason: %{public}s", (uint8_t *)v31, 0x1Cu);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v81 + 8))(v17, v82);
      a1 = v79;
    }
    else
    {
      static Logger.updates.getter();
      uint64_t v57 = v83;
      os_log_type_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      int v60 = v59;
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v62 = swift_slowAlloc();
        os_log_t v75 = (os_log_t)swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        uint64_t v84 = v74;
        *(_DWORD *)uint64_t v62 = 138412802;
        os_log_t v73 = v58;
        v71[1] = v62 + 4;
        int v72 = v60;
        Class v63 = *(void **)&v57[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
        uint64_t v86 = (uint64_t)v63;
        void v71[2] = &v87;
        id v64 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v75->Class isa = (Class)v63;

        *(_WORD *)(v62 + 12) = 1026;
        LODWORD(v86) = 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v62 + 1_Block_object_dispose(&a9, 8) = 2082;
        uint64_t v65 = sub_1000B8940();
        uint64_t v86 = sub_1000F7290(v65, v66, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        os_log_type_t v58 = v73;
        _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v72, "[%@] Purchasing updates with auto updates enabled: %{BOOL,public}d reason: %{public}s", (uint8_t *)v62, 0x1Cu);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v81 + 8))(v20, v82);
      a1 = v79;
      static Date.now.getter();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v11, v8);
      sub_1003F43D0(v22, isa);

      uint64_t v68 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v7, 1, 1, v68);
      uint64_t v69 = (void *)swift_allocObject();
      v69[2] = 0;
      v69[3] = 0;
      v69[4] = v57;
      id v70 = v57;
      sub_100018FDC((uint64_t)v7, (uint64_t)&unk_1005A4E70, (uint64_t)v69);
      swift_release();
      uint64_t v27 = v83;
    }
    uint64_t v84 = 0;
    unint64_t v85 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    uint64_t v84 = 0xD000000000000023;
    unint64_t v85 = 0x800000010044DA80;
    v38._countAndFlagsBits = sub_1000B8940();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    uint64_t v39 = v84;
    unint64_t v40 = v85;
    id v41 = sub_10007E820(v27);
    sub_100089EAC(v41, v39, v40, v27);
    swift_bridgeObjectRelease();
    id v14 = v80;
    uint64_t result = v77;
  }
  if ((a1[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_shouldNotifyOfChanges] & 1) != 0
    || *(void *)&a1[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount] != result)
  {
    static Logger.updates.getter();
    uint64_t v42 = v83;
    uint64_t v43 = a1;
    unint64_t v44 = v42;
    unint64_t v45 = v43;
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v83 = (char *)swift_slowAlloc();
      uint64_t v84 = (uint64_t)v83;
      *(_DWORD *)uint64_t v48 = 138412802;
      unsigned __int8 v50 = *(void **)&v44[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      uint64_t v86 = (uint64_t)v50;
      id v51 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v49 = v50;

      *(_WORD *)(v48 + 12) = 2050;
      uint64_t v52 = *(void *)&v45[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount];

      uint64_t v86 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v48 + 22) = 2082;
      uint64_t v53 = sub_1000B8940();
      uint64_t v86 = sub_1000F7290(v53, v54, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%@] Notify updates changed with count: %{public}ld reason: %{public}s", (uint8_t *)v48, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v82);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v81 + 8))(v14, v82);
    }
    uint64_t v55 = sub_1000B8940();
    sub_10008ABB8(v44, v55, v56);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008217C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10008219C, 0, 0);
}

uint64_t sub_10008219C()
{
  id v1 = [objc_allocWithZone((Class)PerformUpdatesTask) initWithContext:v0[2]];
  v0[3] = v1;
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  int v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *int v3 = v0;
  v3[1] = sub_1000822A4;
  return withCheckedContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x29286E7572, 0xE500000000000000, sub_10008C2A8, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_1000822A4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10008E18C, 0, 0);
}

uint64_t sub_1000823BC(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_10008247C, v1, 0);
}

id sub_10008247C()
{
  v0[8] = _swiftEmptyArrayStorage;
  uint64_t v1 = v0 + 8;
  v0[9] = _swiftEmptyArrayStorage;
  v0[10] = _swiftEmptyDictionarySingleton;
  id v33 = [objc_allocWithZone((Class)ASDCoastGuard) init];
  id result = [self defaultWorkspace];
  if (!result) {
    goto LABEL_16;
  }
  uint64_t v3 = result;
  uint64_t v4 = (char *)v0[12];
  NSString v5 = String._bridgeToObjectiveC()();
  unsigned __int8 v32 = [v3 applicationIsInstalled:v5];

  uint64_t v31 = sub_10008AF10();
  uint64_t v6 = *(void *)&v4[OBJC_IVAR____TtC9appstored14UpdatesContext_reason];
  BOOL v8 = v6 == 2 || v6 == 4;
  BOOL v30 = v8;
  static Logger.updates.getter();
  uint64_t v9 = v4;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = (char *)v0[12];
  if (v12)
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    char v29 = (void *)swift_slowAlloc();
    *(_DWORD *)id v14 = 138412290;
    uint64_t v15 = *(void **)&v13[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[11] = v15;
    id v16 = v15;
    uint64_t v1 = v0 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v29 = v15;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%@] ╒ Prepping update request", v14, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v17 = v0[13];
  uint64_t v18 = (void *)v0[12];
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  uint64_t v19 = self;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v31;
  *(unsigned char *)(v20 + 32) = v32;
  *(unsigned char *)(v20 + 33) = v30;
  *(void *)(v20 + 40) = v17;
  *(void *)(v20 + 4_Block_object_dispose(&a9, 8) = v0 + 9;
  *(void *)(v20 + 56) = v33;
  *(void *)(v20 + 64) = v0 + 10;
  *(void *)(v20 + 72) = v1;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10008B488;
  *(void *)(v21 + 24) = v20;
  v0[6] = sub_10008B4D8;
  v0[7] = v21;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100083D54;
  v0[5] = &unk_100513A40;
  uint64_t v22 = _Block_copy(v0 + 2);
  id v23 = v18;
  swift_retain();
  id v24 = v33;
  swift_retain();
  swift_release();
  [v19 enumerateApplicationsOfType:0 usingBlock:v22];

  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  id result = (id)swift_release();
  if (v22)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v25 = v0[8];
  uint64_t v26 = v0[9];
  uint64_t v27 = v0[10];
  swift_release();
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return (id)v28(v25, v26, v27);
}

void sub_1000828BC(id a1, uint64_t a2, unsigned char *a3, uint64_t a4, char a5, char a6, uint64_t a7, unsigned char *a8, void *a9, NSObject *a10, char **a11)
{
  id v181 = a8;
  uint64_t v188 = a11;
  os_log_t v186 = a10;
  id v185 = a9;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v189 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v187 = (char *)&v174 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v182 = ((char *)&v174 - v19);
  __chkstk_darwin(v20);
  char v183 = (char *)&v174 - v21;
  __chkstk_darwin(v22);
  char v184 = ((char *)&v174 - v23);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v174 - v25;
  double v28 = __chkstk_darwin(v27);
  BOOL v30 = (char *)&v174 - v29;
  if ((a3[OBJC_IVAR____TtC9appstored14UpdatesContext_targetedItemID + 8] & 1) == 0)
  {
    uint64_t v31 = v26;
    unsigned __int8 v32 = a3;
    id v33 = *(id *)&a3[OBJC_IVAR____TtC9appstored14UpdatesContext_targetedItemID];
    BOOL v34 = objc_msgSend(a1, "storeItemID", v28) == v33;
    a3 = v32;
    uint64_t v26 = v31;
    if (!v34) {
      return;
    }
  }
  id v179 = *(id *)&a3[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
  if (![a1 validateEligibilityForUpdatesWithLogKey:v28]) {
    return;
  }
  id v35 = [a1 storeItemID];
  uint64_t v36 = *(void *)(a4 + 16);
  uint64_t v176 = v16;
  if (v36 && (unint64_t v37 = sub_100049AC4((uint64_t)v35), (v38 & 1) != 0))
  {
    uint64_t v39 = *(void **)(*(void *)(a4 + 56) + 8 * v37);
    uint64_t v40 = swift_allocObject();
    id v178 = v39;
    id v41 = v39;
    uint64_t v42 = v26;
    uint64_t v43 = a3;
    id v44 = a1;
    unint64_t v45 = sub_1000C08A8();

    id v46 = [(objc_class *)v45 longLongValue];
    a1 = v44;
    a3 = v43;
    uint64_t v26 = v42;
    uint64_t v180 = v40;
    *(void *)(v40 + 16) = v46;
    uint64_t v16 = v176;
    if (a5) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v47 = swift_allocObject();
    id v178 = 0;
    uint64_t v180 = v47;
    *(void *)(v47 + 16) = 0;
    if (a5) {
      goto LABEL_15;
    }
  }
  id v175 = [a1 bundleID];
  if (v175)
  {
    uint64_t v174 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;
    unsigned __int8 v50 = a1;
    id v51 = [a1 storeMetadata];
    if (!v51
      || (uint64_t v52 = v51, v53 = [v51 deviceBasedVPP], v52, (v53 & 1) == 0))
    {
      if (([v50 isManagedAccount] & 1) == 0)
      {
        id v71 = v178;
        if (!v178)
        {
          swift_release();

          swift_bridgeObjectRelease();
          return;
        }
        static Logger.updates.getter();
        uint64_t v104 = a3;
        swift_bridgeObjectRetain();
        uint64_t v105 = Logger.logObject.getter();
        os_log_type_t v106 = static os_log_type_t.default.getter();
        int v107 = v106;
        if (os_log_type_enabled(v105, v106))
        {
          uint64_t v108 = swift_slowAlloc();
          os_log_t v186 = v105;
          LODWORD(v187) = v107;
          uint64_t v109 = v108;
          unint64_t v110 = (void *)swift_slowAlloc();
          uint64_t v188 = (char **)swift_slowAlloc();
          *(void *)&v191[0] = v188;
          *(_DWORD *)uint64_t v109 = 138412546;
          id v111 = v179;
          uint64_t v190 = (uint64_t)v179;
          id v112 = v179;
          id v71 = v178;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v110 = v111;

          *(_WORD *)(v109 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v190 = sub_1000F7290(v174, v49, (uint64_t *)v191);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          os_log_t v113 = v186;
          _os_log_impl((void *)&_mh_execute_header, v186, (os_log_type_t)v187, "[%@] ├ DRP { %{public}s }", (uint8_t *)v109, 0x16u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v189 + 8))(v30, v176);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v189 + 8))(v30, v176);
          id v111 = v179;
        }
        self;
        id v130 = sub_10001A308();
        uint64_t v131 = v175;
        sub_1002E8604(v130, v175, v111);
        swift_release();

LABEL_60:
        return;
      }
    }

    swift_bridgeObjectRelease();
    a1 = v50;
  }
LABEL_15:
  id v177 = a1;
  if (a6)
  {
    static Logger.updates.getter();
    id v54 = a1;
    uint64_t v55 = a3;
    id v56 = v54;
    uint64_t v57 = v55;
    id v58 = v56;
    os_log_type_t v59 = Logger.logObject.getter();
    int v60 = static os_log_type_t.default.getter();
    char v184 = v59;
    if (os_log_type_enabled(v59, (os_log_type_t)v60))
    {
      LODWORD(v182) = v60;
      id v181 = a3;
      uint64_t v61 = swift_slowAlloc();
      uint64_t v62 = (void *)swift_slowAlloc();
      char v183 = (char *)swift_slowAlloc();
      *(void *)&v191[0] = v183;
      *(_DWORD *)uint64_t v61 = 138413058;
      id v63 = v179;
      uint64_t v190 = (uint64_t)v179;
      id v64 = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v62 = v63;
      swift_retain();

      *(_WORD *)(v61 + 12) = 2082;
      id v65 = [v58 bundleID];
      if (v65)
      {
        unint64_t v66 = v65;
        uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v69 = v68;
      }
      else
      {
        uint64_t v67 = 7104878;
        unint64_t v69 = 0xE300000000000000;
      }
      uint64_t v190 = sub_1000F7290(v67, v69, (uint64_t *)v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v61 + 22) = 2050;
      id v126 = [v58 storeExternalVersionID];

      uint64_t v190 = (uint64_t)v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v61 + 32) = 2050;
      uint64_t v127 = v180;
      swift_beginAccess();
      uint64_t v190 = *(void *)(v127 + 16);
      uint64_t v70 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v128 = v184;
      _os_log_impl((void *)&_mh_execute_header, v184, (os_log_type_t)v182, "[%@] ├ FRC { %{public}s evid: %{public}lld currentEvid: %{public}lld }", (uint8_t *)v61, 0x2Au);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v189 + 8))(v26, v176);
      a3 = v181;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v189 + 8))(v26, v176);
      uint64_t v70 = v180;
    }
    id v129 = [v58 storeExternalVersionID];
    swift_beginAccess();
    *(void *)(v70 + 16) = v129;
LABEL_52:
    id v71 = v178;
    goto LABEL_53;
  }
  uint64_t v70 = v180;
  if (!*(void *)(v180 + 16))
  {
    uint64_t v87 = v184;
    static Logger.updates.getter();
    id v88 = a1;
    uint64_t v89 = a3;
    id v90 = v88;
    id v91 = v89;
    id v92 = v90;
    uint64_t v93 = Logger.logObject.getter();
    int v94 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v93, (os_log_type_t)v94))
    {
      LODWORD(v175) = v94;
      id v181 = a3;
      char v182 = v93;
      uint64_t v95 = swift_slowAlloc();
      uint64_t v96 = (void *)swift_slowAlloc();
      char v183 = (char *)swift_slowAlloc();
      *(void *)&v191[0] = v183;
      *(_DWORD *)uint64_t v95 = 138412802;
      id v97 = v179;
      uint64_t v190 = (uint64_t)v179;
      id v98 = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v96 = v97;

      *(_WORD *)(v95 + 12) = 2082;
      id v99 = [v92 bundleID];
      if (v99)
      {
        uint64_t v100 = v99;
        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v103 = v102;
      }
      else
      {
        uint64_t v101 = 7104878;
        unint64_t v103 = 0xE300000000000000;
      }
      uint64_t v132 = v182;
      uint64_t v190 = sub_1000F7290(v101, v103, (uint64_t *)v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 22) = 2050;
      id v133 = [v92 storeExternalVersionID];

      uint64_t v190 = (uint64_t)v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v175, "[%@] ├ NEW { %{public}s evid: %{public}lld }", (uint8_t *)v95, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(NSObject *, uint64_t))(v189 + 8))(v184, v16);
      uint64_t v70 = v180;
      a3 = v181;
    }
    else
    {

      (*(void (**)(NSObject *, uint64_t))(v189 + 8))(v87, v16);
    }
    *(void *)(v70 + 16) = [v92 storeExternalVersionID];
    goto LABEL_52;
  }
  id v71 = v178;
  if (!v178) {
    goto LABEL_54;
  }
  id v72 = v178;
  if (sub_10008BF2C(v72))
  {
    id v73 = v72;
    uint64_t v74 = v181;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v74 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    *(void *)(v70 + 16) = [a1 storeExternalVersionID];
    static Logger.updates.getter();
    os_log_t v75 = a3;
    id v76 = v73;
    uint64_t v77 = v75;
    uint64_t v78 = v76;
    double v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.default.getter();
    int v81 = v80;
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v82 = swift_slowAlloc();
      LODWORD(v184) = v81;
      uint64_t v83 = v82;
      uint64_t v84 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 138412546;
      id v181 = a3;
      id v85 = v179;
      *(void *)&v191[0] = v179;
      id v86 = v179;
      id v71 = v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v84 = v85;
      a3 = v181;

      *(_WORD *)(v83 + 12) = 2114;
      *(void *)&v191[0] = v78;
      uint64_t v78 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v84[1] = v71;

      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v184, "[%@] ├ REL %{public}@", (uint8_t *)v83, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      double v79 = v78;
    }

    (*(void (**)(char *, uint64_t))(v189 + 8))(v183, v176);
  }
  else
  {
    static Logger.updates.getter();
    uint64_t v114 = a3;
    id v115 = v72;
    uint64_t v116 = v114;
    uint64_t v117 = v115;
    uint64_t v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.default.getter();
    int v120 = v119;
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v121 = swift_slowAlloc();
      uint64_t v122 = swift_slowAlloc();
      LODWORD(v184) = v120;
      uint64_t v123 = (void *)v122;
      *(_DWORD *)uint64_t v121 = 138412546;
      id v124 = v179;
      *(void *)&v191[0] = v179;
      id v181 = a3;
      id v125 = v179;
      id v71 = v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v123 = v124;

      *(_WORD *)(v121 + 12) = 2114;
      *(void *)&v191[0] = v117;
      uint64_t v117 = v117;
      a3 = v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v123[1] = v71;

      _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v184, "[%@] ├ PRE %{public}@", (uint8_t *)v121, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v118 = v117;
    }

    (*(void (**)(NSObject *, uint64_t))(v189 + 8))(v182, v176);
  }
  uint64_t v70 = v180;
LABEL_53:
  a1 = v177;
LABEL_54:
  uint64_t v134 = (unint64_t *)(v70 + 16);
  swift_beginAccess();
  uint64_t v135 = *(void *)(v70 + 16);
  if (v135 < 1)
  {
    swift_release();
    goto LABEL_60;
  }
  unsigned int v136 = [a1 codeSignatureVersion];
  if (v136 < kMISFutureMinSupportedSignatureVersion)
  {
    unint64_t v137 = (unint64_t)[a1 storeItemID];
    if ((v137 & 0x8000000000000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    if ([v185 isUnrepairableAppWithItemID:v137 externalVersionID:v135])
    {
      id v138 = 0;
    }
    else
    {
      id v138 = [a1 storeExternalVersionID];
      swift_beginAccess();
      unint64_t *v134 = 0;
    }
    id v139 = a1;
    id v140 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLongLong:", objc_msgSend(a1, "storeItemID"));
    id v141 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:v138];
    if (v141)
    {
      sub_100089240((uint64_t)v141, v140);
    }
    else
    {
      uint64_t v142 = sub_1000B2BA0((unint64_t)v140);

      id v140 = (id)v142;
    }

    a1 = v139;
  }
  if (v71)
  {
    unint64_t v143 = v71;
    if (sub_10026E91C(v143, @"update_state") == (id)5)
    {
      uint64_t v144 = sub_1000C08A8();
      id v145 = [(objc_class *)v144 longLongValue];

      swift_beginAccess();
      unint64_t *v134 = (unint64_t)v145;
      static Logger.updates.getter();
      uint64_t v146 = a3;
      id v147 = v177;
      uint64_t v148 = v146;
      uint64_t v149 = v147;
      Swift::Int v150 = Logger.logObject.getter();
      os_log_type_t v151 = static os_log_type_t.default.getter();
      int v152 = v151;
      if (os_log_type_enabled(v150, v151))
      {
        uint64_t v153 = swift_slowAlloc();
        LODWORD(v185) = v152;
        uint64_t v154 = v153;
        BOOL v155 = swift_slowAlloc();
        os_log_t v186 = v150;
        id v156 = v155;
        char v184 = v155;
        *(_DWORD *)uint64_t v154 = 138412802;
        char v183 = (char *)(v154 + 12);
        int v157 = (objc_class *)v179;
        *(void *)&v191[0] = v179;
        id v158 = v179;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v156->Class isa = v157;
        uint64_t v159 = v186;
        swift_retain();

        *(_WORD *)(v154 + 12) = 2050;
        id v160 = [v149 storeItemID];

        *(void *)&v191[0] = v160;
        uint64_t v161 = v180;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v154 + 22) = 2050;
        swift_beginAccess();
        *(void *)&v191[0] = *(void *)(v161 + 16);
        id v71 = v178;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v159, (os_log_type_t)v185, "[%@] Only checking for newer updates (%{public}lld -> %{public}lld) due to the current update being marked as blocked.", (uint8_t *)v154, 0x20u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v143 = v149;
        uint64_t v159 = v149;
      }

      (*(void (**)(char *, uint64_t))(v189 + 8))(v187, v176);
    }
    else
    {
    }
    a1 = v177;
  }
  swift_beginAccess();
  unint64_t v162 = *v134;
  id v163 = a1;
  sub_1000319B8(v163, v162, 0, (uint64_t)v191);

  uint64_t v164 = v188;
  uint64_t v165 = *v188;
  sub_10002E484(v191);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v164 = v165;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v165 = sub_1000E7A0C(0, *((void *)v165 + 2) + 1, 1, v165);
    *uint64_t v188 = v165;
  }
  unint64_t v168 = *((void *)v165 + 2);
  unint64_t v167 = *((void *)v165 + 3);
  if (v168 >= v167 >> 1)
  {
    uint64_t v165 = sub_1000E7A0C((char *)(v167 > 1), v168 + 1, 1, v165);
    *uint64_t v188 = v165;
  }
  *((void *)v165 + 2) = v168 + 1;
  unint64_t v169 = &v165[96 * v168];
  long long v170 = v191[1];
  *((_OWORD *)v169 + 2) = v191[0];
  *((_OWORD *)v169 + 3) = v170;
  long long v171 = v191[2];
  long long v172 = v191[3];
  long long v173 = v191[5];
  *((_OWORD *)v169 + 6) = v191[4];
  *((_OWORD *)v169 + 7) = v173;
  *((_OWORD *)v169 + 4) = v171;
  *((_OWORD *)v169 + 5) = v172;

  sub_10008B510(v191);
  swift_release();
}

void sub_100083D54(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_100083DB0(uint64_t a1)
{
  v2[60] = a1;
  v2[61] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[62] = v3;
  v2[63] = *(void *)(v3 - 8);
  v2[64] = swift_task_alloc();
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  v2[67] = swift_task_alloc();
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  sub_10001644C((uint64_t *)&unk_1005A4E20);
  v2[70] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[71] = v4;
  v2[72] = *(void *)(v4 - 8);
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  v2[75] = swift_task_alloc();
  return _swift_task_switch(sub_100083F58, v1, 0);
}

uint64_t sub_100083F58()
{
  uint64_t v42 = v0;
  unint64_t v1 = *(void *)(v0[60] + OBJC_IVAR____TtC9appstored14UpdatesContext_reason);
  v0[76] = v1;
  type metadata accessor for LoadSoftwareUpdatesReason(0);
  v0[77] = v2;
  if (v1 <= 8)
  {
    if (((1 << v1) & 0xD6) == 0) {
      goto LABEL_14;
    }
    self;
    id v3 = sub_1003F41C8();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = v0[74];
      uint64_t v6 = v0[72];
      uint64_t v7 = v0[71];
      uint64_t v8 = v0[70];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
      v9(v8, v5, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) != 1)
      {
        uint64_t v10 = v0[75];
        uint64_t v11 = v0[73];
        uint64_t v12 = v0[72];
        uint64_t v13 = v0[71];
        id v14 = (void *)v0[60];
        v9(v10, v0[70], v13);
        static Logger.updates.getter();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v13);
        id v15 = v14;
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t type = static os_log_type_t.default.getter();
        BOOL v17 = os_log_type_enabled(v16, type);
        uint64_t v18 = v0[75];
        uint64_t v19 = v0[73];
        uint64_t v20 = v0[72];
        uint64_t v21 = v0[71];
        uint64_t v22 = v0[69];
        uint64_t v24 = v0[62];
        uint64_t v23 = v0[63];
        uint64_t v25 = (char *)v0[60];
        if (v17)
        {
          uint64_t v39 = v0[69];
          uint64_t v26 = swift_slowAlloc();
          uint64_t v38 = v19;
          uint64_t v27 = (void *)swift_slowAlloc();
          uint64_t v41 = swift_slowAlloc();
          *(_DWORD *)uint64_t v26 = 138412546;
          uint64_t v37 = v21;
          double v28 = *(void **)&v25[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
          v0[47] = v28;
          id v29 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v27 = v28;

          *(_WORD *)(v26 + 12) = 2082;
          sub_10008D784((unint64_t *)&qword_1005A4E30, 255, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
          v0[51] = sub_1000F7290(v30, v31, &v41);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unsigned __int8 v32 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
          v32(v38, v37);
          _os_log_impl((void *)&_mh_execute_header, v16, type, "[%@] Starting reload for automatic updates, last auto-update completion date: %{public}s", (uint8_t *)v26, 0x16u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v39, v24);
          v32(v18, v37);
        }
        else
        {

          BOOL v34 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
          v34(v19, v21);

          (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
          v34(v18, v21);
        }
LABEL_14:
        id v35 = (void *)swift_task_alloc();
        v0[78] = v35;
        *id v35 = v0;
        v35[1] = sub_100084464;
        uint64_t v36 = v0[60];
        return sub_100088098(v36);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[72] + 56))(v0[70], 1, 1, v0[71]);
    }
    sub_100016714(v0[70], (uint64_t *)&unk_1005A4E20);
    goto LABEL_14;
  }
  v0[40] = v1;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t sub_100084464(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 488);
  *(void *)(v3 + 632) = a1;
  *(void *)(v3 + 640) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100084580, v4, 0);
}

uint64_t sub_100084580()
{
  uint64_t v1 = v0[79];
  uint64_t v2 = (void *)v0[60];
  type metadata accessor for MediaAPIUpdateAvailabilityCheck();
  swift_allocObject();
  v0[81] = sub_100021B08(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[82] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10008464C;
  return sub_100021FD0();
}

uint64_t sub_10008464C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 488);
  *(void *)(*(void *)v1 + 664) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100084764, v2, 0);
}

uint64_t sub_100084764()
{
  id v163 = isa;
  uint64_t v1 = isa[83];
  isa[45] = _swiftEmptyArrayStorage;
  sub_100089528(*(void *)(v1 + 16));
  specialized Array._endMutation()();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (id *)(isa[83] + 32);
    do
    {
      id v4 = *v3;
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        id v5 = objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdate());
        uint64_t v6 = sub_1000C4B78(v4);

        id v4 = v6;
      }
      id v7 = v4;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((isa[45] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((isa[45] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      ++v3;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  isa[42] = _swiftEmptyDictionarySingleton;
  unint64_t v8 = isa[45];
  os_log_type_t v151 = isa + 45;
  if (v8 >> 62) {
    goto LABEL_133;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v161 = isa + 42;
    int v152 = isa;
    uint64_t v149 = (id *)(isa + 58);
    if (!v9) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v148 = isa + 59;
    unint64_t v159 = v8 & 0xC000000000000001;
    uint64_t v150 = isa[80];
    uint64_t v156 = v9;
    while (1)
    {
      id v14 = v159 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v8 + 8 * v10 + 32);
      id v15 = v14;
      uint64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      if ((*((unsigned char *)v14 + OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip) & 1) == 0)
      {
        sub_1000C0768();
        v16.super.super.Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
        Class isa = v16.super.super.isa;
        if ((v150 & 0xC000000000000001) != 0)
        {
          uint64_t v17 = __CocoaDictionary.lookup(_:)();
          if (!v17) {
            goto LABEL_36;
          }
          *uint64_t v148 = v17;
          sub_100018D68(0, (unint64_t *)&qword_1005A3230);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v18 = *v149;
          swift_unknownObjectRelease();
        }
        else
        {
          if (!*(void *)(v150 + 16) || (unint64_t v19 = sub_100049B08((uint64_t)v16.super.super.isa), (v20 & 1) == 0))
          {
LABEL_36:

LABEL_37:
            goto LABEL_14;
          }
          id v18 = *(id *)(*(void *)(v150 + 56) + 8 * v19);
        }

        if (!v18) {
          goto LABEL_37;
        }
      }
      unint64_t v21 = v8;
      uint64_t v22 = v15;
      Class isa = (void *)sub_1000C0970();
      uint64_t v24 = v23;
      unint64_t v8 = (unint64_t)UInt._bridgeToObjectiveC()().super.super.isa;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v162 = (void *)*v161;
      uint64_t v26 = v162;
      *uint64_t v161 = 0x8000000000000000;
      unint64_t v28 = sub_100049A4C((uint64_t)isa, v24);
      uint64_t v29 = v26[2];
      BOOL v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30)) {
        goto LABEL_127;
      }
      char v32 = v27;
      if (v26[3] >= v31)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v27 & 1) == 0) {
            goto LABEL_34;
          }
        }
        else
        {
          sub_1000D3B50();
          uint64_t v26 = v162;
          if ((v32 & 1) == 0) {
            goto LABEL_34;
          }
        }
      }
      else
      {
        sub_1000D0F0C(v31, isUniquelyReferenced_nonNull_native);
        uint64_t v26 = v162;
        unint64_t v33 = sub_100049A4C((uint64_t)isa, v24);
        if ((v32 & 1) != (v34 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v28 = v33;
        if ((v32 & 1) == 0)
        {
LABEL_34:
          v26[(v28 >> 6) + 8] |= 1 << v28;
          id v35 = (void *)(v26[6] + 16 * v28);
          *id v35 = isa;
          v35[1] = v24;
          *(void *)(v26[7] + 8 * v2_Block_object_dispose(&a9, 8) = v8;
          uint64_t v36 = v26[2];
          BOOL v37 = __OFADD__(v36, 1);
          uint64_t v38 = v36 + 1;
          if (v37) {
            goto LABEL_128;
          }
          _OWORD v26[2] = v38;
          swift_bridgeObjectRetain();
          goto LABEL_13;
        }
      }
      uint64_t v11 = v26[7];
      uint64_t v12 = 8 * v28;

      *(void *)(v11 + v12) = v8;
LABEL_13:
      Class isa = (void *)*v161;
      *uint64_t v161 = v26;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v8 = v21;
      uint64_t v9 = v156;
      uint64_t v13 = v10 + 1;
LABEL_14:
      ++v10;
      if (v13 == v9) {
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    swift_bridgeObjectRetain_n();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_40:
  swift_bridgeObjectRelease();
  if (*(void *)(*v161 + 16))
  {
    uint64_t v39 = v152;
    uint64_t v40 = (void *)v152[60];
    static Logger.updates.getter();
    id v41 = v40;
    swift_bridgeObjectRetain_n();
    id v42 = v41;
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    uint64_t v46 = v152[68];
    uint64_t v47 = v152[62];
    uint64_t v48 = v152[63];
    unint64_t v49 = (char *)v152[60];
    if (v45)
    {
      os_log_type_t typea = v44;
      uint64_t v50 = swift_slowAlloc();
      id v51 = (void *)swift_slowAlloc();
      unint64_t v162 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 138412546;
      uint64_t v52 = *(void **)&v49[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      os_log_t log = v43;
      v152[56] = v52;
      id v53 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v51 = v52;
      uint64_t v39 = v152;

      *(_WORD *)(v50 + 12) = 2082;
      sub_100018D68(0, (unint64_t *)&qword_1005A3230);
      swift_bridgeObjectRetain();
      uint64_t v54 = Dictionary.Keys.description.getter();
      unint64_t v56 = v55;
      swift_bridgeObjectRelease();
      v152[57] = sub_1000F7290(v54, v56, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, typea, "[%@] Setting updateAvailability as Available for apps: %{public}s", (uint8_t *)v50, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v57(v46, v47);
    v39[84] = v57;
    id v90 = self;
    swift_beginAccess();
    v39[85] = sub_100018D68(0, (unint64_t *)&qword_1005A3230);
    swift_bridgeObjectRetain();
    Class v91 = Dictionary._bridgeToObjectiveC()().super.isa;
    v39[86] = v91;
    swift_bridgeObjectRelease();
    v39[2] = v39;
    v39[7] = (char *)v39 + 732;
    v39[3] = sub_100085CAC;
    uint64_t v92 = swift_continuation_init();
    v39[22] = _NSConcreteStackBlock;
    v39[23] = 0x40000000;
    v39[24] = sub_100073DBC;
    v39[25] = &unk_100513938;
    v39[26] = v92;
    [v90 setUpdateAvailabilityForApplicationsWithBundleIdentifiers:v91 completionHandler:v39 + 22];
    uint64_t v93 = v39 + 2;
    return _swift_continuation_await(v93);
  }
  id v58 = v152;
  unint64_t isEscapingClosureAtFileLocation = *v151;
  unint64_t v60 = *v151 >> 62;
  if (!v60)
  {
    Class isa = *(void **)((*v151 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!isa) {
      goto LABEL_52;
    }
    goto LABEL_45;
  }
  while (2)
  {
    swift_bridgeObjectRetain();
    Class isa = (void *)_CocoaArrayWrapper.endIndex.getter();
    if (!isa)
    {
LABEL_52:
      swift_bridgeObjectRelease();
      if (!v60)
      {
        uint64_t v61 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_54;
      }
      goto LABEL_146;
    }
LABEL_45:
    uint64_t v61 = 0;
    uint64_t v62 = &OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip;
    while (1)
    {
      id v63 = (isEscapingClosureAtFileLocation & 0xC000000000000001) != 0
          ? (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(isEscapingClosureAtFileLocation + 8 * v61 + 32);
      char v64 = v63[OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip];

      if (v64) {
        break;
      }
      id v65 = (void *)(v61 + 1);
      if (__OFADD__(v61, 1)) {
        goto LABEL_129;
      }
      ++v61;
      if (v65 == isa) {
        goto LABEL_52;
      }
    }
    swift_bridgeObjectRelease();
    v104.super.Class isa = (Class)(v61 + 1);
    if (__OFADD__(v61, 1)) {
      goto LABEL_148;
    }
    if (v60) {
      goto LABEL_149;
    }
    if (v104.super.isa != *(Class *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_78:
      unint64_t v60 = v61 + 5;
      while (1)
      {
        unint64_t v118 = v60 - 4;
        Class isa = (void *)(isEscapingClosureAtFileLocation & 0xC000000000000001);
        if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0)
        {
          os_log_type_t v119 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v118 & 0x8000000000000000) != 0) {
            goto LABEL_130;
          }
          if (v118 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_131;
          }
          os_log_type_t v119 = *(id *)(isEscapingClosureAtFileLocation + 8 * v60);
        }
        char v120 = v119[*v62];

        if ((v120 & 1) == 0)
        {
          if (v118 != v61)
          {
            if (isa)
            {
              uint64_t v123 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              id v124 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v61 < 0) {
                goto LABEL_135;
              }
              unint64_t v121 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v61 >= v121) {
                goto LABEL_136;
              }
              id v122 = *(id *)(isEscapingClosureAtFileLocation + 8 * v61 + 32);
              if ((v118 & 0x8000000000000000) != 0) {
                goto LABEL_137;
              }
              if (v118 >= v121) {
                goto LABEL_138;
              }
              uint64_t v123 = (uint64_t)v122;
              id v124 = *(id *)(isEscapingClosureAtFileLocation + 8 * v60);
            }
            Class isa = v124;
            int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *os_log_type_t v151 = isEscapingClosureAtFileLocation;
            if (!isUniquelyReferenced_nonNull_bridgeObject
              || (isEscapingClosureAtFileLocation & 0x8000000000000000) != 0
              || (isEscapingClosureAtFileLocation & 0x4000000000000000) != 0)
            {
              unint64_t isEscapingClosureAtFileLocation = sub_100089C20(isEscapingClosureAtFileLocation);
              *os_log_type_t v151 = isEscapingClosureAtFileLocation;
            }
            id v126 = *(void **)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 8 * v61 + 0x20);
            *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 8 * v61 + 0x20) = isa;

            specialized Array._endMutation()();
            unint64_t isEscapingClosureAtFileLocation = *v151;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || (isEscapingClosureAtFileLocation & 0x8000000000000000) != 0
              || (isEscapingClosureAtFileLocation & 0x4000000000000000) != 0)
            {
              unint64_t isEscapingClosureAtFileLocation = sub_100089C20(isEscapingClosureAtFileLocation);
              *os_log_type_t v151 = isEscapingClosureAtFileLocation;
            }
            if ((v118 & 0x8000000000000000) != 0) {
              goto LABEL_139;
            }
            uint64_t v127 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8;
            if (v118 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_140;
            }
            uint64_t v128 = *(void **)(v127 + 8 * v60);
            *(void *)(v127 + 8 * v60) = v123;

            unint64_t isEscapingClosureAtFileLocation = (unint64_t)v151;
            specialized Array._endMutation()();
          }
          BOOL v37 = __OFADD__(v61++, 1);
          if (v37) {
            break;
          }
        }
        BOOL v37 = __OFADD__(v118, 1);
        unint64_t v129 = v60 - 3;
        if (v37) {
          goto LABEL_132;
        }
        unint64_t isEscapingClosureAtFileLocation = *v151;
        if (*v151 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v130 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v60;
        if (v129 == v130) {
          goto LABEL_54;
        }
      }
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      continue;
    }
    break;
  }
  while (1)
  {
LABEL_54:
    if (isEscapingClosureAtFileLocation >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v66 < v61)
      {
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        swift_bridgeObjectRetain();
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        continue;
      }
    }
    else
    {
      uint64_t v66 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v66 < v61) {
        goto LABEL_144;
      }
    }
    uint64_t v67 = v58[80];
    unint64_t v68 = (void *)v58[60];
    sub_10008B094(v61, v66);
    v58[39] = 0;
    unint64_t v8 = self;
    id v69 = sub_10001A308();
    uint64_t v70 = (void *)swift_allocObject();
    v58[88] = v70;
    v70[2] = v151;
    v70[3] = v68;
    v70[4] = v67;
    v70[5] = v58 + 39;
    id v160 = (id *)(v58 + 39);
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = sub_10008B3B4;
    *(void *)(v71 + 24) = v70;
    v58[14] = sub_100040438;
    v58[15] = v71;
    v58[10] = _NSConcreteStackBlock;
    v58[11] = 1107296256;
    v58[12] = sub_10003D6C8;
    v58[13] = &unk_1005139A0;
    id v72 = _Block_copy(v58 + 10);
    id v73 = v68;
    swift_retain();
    swift_release();
    [v69 modifyUsingTransaction:v72];

    _Block_release(v72);
    unint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      goto LABEL_145;
    }
    uint64_t v74 = (void *)v58[60];
    static Logger.updates.getter();
    id v75 = v74;
    id v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v76, v77))
    {
      *(void *)os_log_type_t type = v8;
      uint64_t v78 = (char *)v58[60];
      uint64_t v79 = swift_slowAlloc();
      os_log_type_t v80 = (void *)swift_slowAlloc();
      unint64_t v162 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 138413058;
      int v81 = *(void **)&v78[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      v58[44] = v81;
      id v82 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v80 = v81;

      *(_WORD *)(v79 + 12) = 2050;
      swift_beginAccess();
      uint64_t v83 = v58[39];
      if (!v83) {
        goto LABEL_152;
      }
      v58[46] = *(void *)(v83 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v79 + 22) = 1026;
      uint64_t v84 = v58[39];
      if (!v84) {
        goto LABEL_153;
      }
      uint64_t v157 = v58[66];
      uint64_t v85 = v58[63];
      os_log_type_t v151 = (unint64_t *)v58[62];
      id v86 = (void *)v58[60];
      *((_DWORD *)v58 + 182) = *(unsigned __int8 *)(v84 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_result);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v79 + 2_Block_object_dispose(&a9, 8) = 2082;
      uint64_t v87 = sub_1000B8940();
      v58[48] = sub_1000F7290(v87, v88, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "[%@] Merged %{public}ld app updates into database with result: %{BOOL,public}d reason: %{public}s", (uint8_t *)v79, 0x26u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v89 = *(void (**)(uint64_t, unint64_t *))(v85 + 8);
      v89(v157, v151);
      unint64_t v8 = *(void *)type;
    }
    else
    {
      uint64_t v94 = v58[66];
      uint64_t v96 = (unint64_t *)v58[62];
      uint64_t v95 = v58[63];
      id v97 = (void *)v58[60];

      uint64_t v89 = *(void (**)(uint64_t, unint64_t *))(v95 + 8);
      v89(v94, v96);
    }
    swift_beginAccess();
    if (!*v160) {
      break;
    }
    unint64_t v98 = v58[76];
    id v99 = (char *)v58[60];
    uint64_t v100 = (char *)*v160;
    sub_100081720(v100, v99);

    if (v98 > 8)
    {
      v152[41] = v152[76];
      return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    }
    if (((1 << v98) & 0xD6) == 0) {
      goto LABEL_113;
    }
    id v58 = v152;
    uint64_t v101 = v152[74];
    uint64_t v102 = v152[72];
    uint64_t v62 = (uint64_t *)v152[71];
    uint64_t v103 = self;
    Date.init()();
    v104.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v105 = *(void (**)(uint64_t, uint64_t *))(v102 + 8);
    uint64_t v61 = v102 + 8;
    v105(v101, v62);
    sub_1003F4434(v103, v104.super.isa);

    unint64_t isEscapingClosureAtFileLocation = (unint64_t)sub_10001A308();
    v152[20] = sub_100075098;
    v152[21] = 0;
    v152[16] = _NSConcreteStackBlock;
    v152[17] = 1107296256;
    v152[18] = sub_10003D6C8;
    v152[19] = &unk_1005139C8;
    os_log_type_t v106 = _Block_copy(v152 + 16);
    swift_release();
    [(id)isEscapingClosureAtFileLocation modifyUsingTransaction:v106];

    _Block_release(v106);
    if ((swift_isEscapingClosureAtFileLocation() & 1) == 0)
    {
      int v107 = (void *)v152[60];
      static Logger.updates.getter();
      id v108 = v107;
      uint64_t v109 = Logger.logObject.getter();
      os_log_type_t v110 = static os_log_type_t.default.getter();
      BOOL v111 = os_log_type_enabled(v109, v110);
      id v112 = (char *)v152[60];
      if (v111)
      {
        os_log_t v113 = (uint8_t *)swift_slowAlloc();
        id v158 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_t v113 = 138412290;
        uint64_t v114 = v89;
        id v115 = *(void **)&v112[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
        v152[43] = v115;
        id v116 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v158 = v115;
        uint64_t v89 = v114;

        _os_log_impl((void *)&_mh_execute_header, v109, v110, "[%@] Cleared expired history", v113, 0xCu);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v109 = v152[60];
      }
      uint64_t v131 = v152[65];
      uint64_t v132 = (unint64_t *)v152[62];

      v89(v131, v132);
LABEL_113:
      if (sub_100042878())
      {
        id v133 = v152;
        uint64_t v134 = v152[76];
        uint64_t v135 = v152[74];
        uint64_t v136 = v152[72];
        uint64_t v137 = v152[71];
        id v138 = [objc_allocWithZone((Class)ASDUpdatePollMetrics) init];
        static Date.now.getter();
        Class v139 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v135, v137);
        [v138 setPollTime:v139];

        if (v134 == 1)
        {
          NSString v140 = String._bridgeToObjectiveC()();
        }
        else
        {
          sub_1000B8940();
          NSString v140 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [v138 setReason:v140];

        if (!*v160) {
          goto LABEL_154;
        }
        id v141 = (char *)*v160;
        swift_bridgeObjectRelease();
        uint64_t v142 = *(void *)&v141[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_bundleIDs];
        swift_bridgeObjectRetain();

        sub_10000C820(v142);
        swift_bridgeObjectRelease();
        Class v143 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v138 setBundleIDs:v143];

        id v144 = [objc_allocWithZone((Class)ASDUpdateMetricsStore) init];
        [v144 addPoll:v138];
      }
      else
      {
        swift_bridgeObjectRelease();
        id v133 = v152;
      }
      id v145 = (void *)swift_task_alloc();
      v133[89] = v145;
      *id v145 = v133;
      v145[1] = sub_100086D34;
      uint64_t v146 = v133[60];
      return sub_100006D28(v146);
    }
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    swift_bridgeObjectRetain();
    id v147 = (objc_class *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v104.super.isa != v147) {
      goto LABEL_78;
    }
  }
  __break(1u);
LABEL_152:

  __break(1u);
LABEL_153:

  __break(1u);
LABEL_154:
  __break(1u);
  return _swift_continuation_await(v93);
}

uint64_t sub_100085CAC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 696) = v2;
  uint64_t v3 = *(void *)(v1 + 488);
  if (v2) {
    id v4 = sub_100086F68;
  }
  else {
    id v4 = sub_100085DCC;
  }
  return _swift_task_switch(v4, v3, 0);
}

void sub_100085DCC()
{
  uint64_t v115 = v0;
  uint64_t v1 = (unint64_t *)(v0 + 360);
  uint64_t v2 = *(void **)(v0 + 480);

  static Logger.updates.getter();
  id v3 = v2;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v105 = v0 + 432;
    uint64_t v110 = *(void *)(v0 + 536);
    id v112 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
    uint64_t v109 = *(void *)(v0 + 496);
    id v7 = *(char **)(v0 + 480);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v114 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    uint64_t v10 = *(void **)&v7[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    *(void *)(v0 + 432) = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;
    uint64_t v1 = (unint64_t *)(v0 + 360);

    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v12 = Dictionary.Keys.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 440) = sub_1000F7290(v12, v14, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@] Set updateAvailability to Available for apps: %{public}s", (uint8_t *)v8, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v112(v110, v109);
  }
  else
  {
    id v15 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
    uint64_t v16 = *(void *)(v0 + 536);
    uint64_t v17 = *(void *)(v0 + 496);
    id v18 = *(void **)(v0 + 480);

    swift_bridgeObjectRelease_n();
    v15(v16, v17);
  }
  unint64_t isEscapingClosureAtFileLocation = *v1;
  id v20 = (id)(*v1 >> 62);
  if (v20) {
    goto LABEL_91;
  }
  uint64_t v21 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v21; uint64_t v21 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v22 = 0;
    uint64_t v23 = &OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip;
    while (1)
    {
      if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0) {
        uint64_t v24 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v24 = *(id *)(isEscapingClosureAtFileLocation + 8 * v22 + 32);
      }
      char v25 = v24[OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip];

      if (v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v63 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_98;
        }
        if (v20) {
          goto LABEL_99;
        }
        if (v63 == *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_15;
        }
LABEL_32:
        uint64_t v75 = v22 + 5;
        while (1)
        {
          unint64_t v76 = v75 - 4;
          id v20 = (id)(isEscapingClosureAtFileLocation & 0xC000000000000001);
          if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0)
          {
            os_log_type_t v77 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v76 & 0x8000000000000000) != 0) {
              goto LABEL_81;
            }
            if (v76 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_82;
            }
            os_log_type_t v77 = *(id *)(isEscapingClosureAtFileLocation + 8 * v75);
          }
          char v78 = v77[*v23];

          if ((v78 & 1) == 0)
          {
            if (v76 != v22)
            {
              if (v20)
              {
                id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                id v81 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (v22 < 0) {
                  goto LABEL_85;
                }
                unint64_t v79 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v22 >= v79) {
                  goto LABEL_86;
                }
                id v80 = *(id *)(isEscapingClosureAtFileLocation + 8 * v22 + 32);
                if ((v76 & 0x8000000000000000) != 0) {
                  goto LABEL_87;
                }
                if (v76 >= v79) {
                  goto LABEL_88;
                }
                id v20 = v80;
                id v81 = *(id *)(isEscapingClosureAtFileLocation + 8 * v75);
              }
              id v82 = v81;
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *uint64_t v1 = isEscapingClosureAtFileLocation;
              if (!isUniquelyReferenced_nonNull_bridgeObject
                || (isEscapingClosureAtFileLocation & 0x8000000000000000) != 0
                || (isEscapingClosureAtFileLocation & 0x4000000000000000) != 0)
              {
                unint64_t isEscapingClosureAtFileLocation = sub_100089C20(isEscapingClosureAtFileLocation);
                *uint64_t v1 = isEscapingClosureAtFileLocation;
              }
              uint64_t v84 = *(void **)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 8 * v22 + 0x20);
              *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 8 * v22 + 0x20) = v82;

              specialized Array._endMutation()();
              unint64_t isEscapingClosureAtFileLocation = *v1;
              if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                || (isEscapingClosureAtFileLocation & 0x8000000000000000) != 0
                || (isEscapingClosureAtFileLocation & 0x4000000000000000) != 0)
              {
                unint64_t isEscapingClosureAtFileLocation = sub_100089C20(isEscapingClosureAtFileLocation);
                *uint64_t v1 = isEscapingClosureAtFileLocation;
              }
              if ((v76 & 0x8000000000000000) != 0) {
                goto LABEL_89;
              }
              uint64_t v85 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8;
              if (v76 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_90;
              }
              id v86 = *(void **)(v85 + 8 * v75);
              *(void *)(v85 + 8 * v75) = v20;

              unint64_t isEscapingClosureAtFileLocation = (unint64_t)v1;
              specialized Array._endMutation()();
            }
            if (__OFADD__(v22++, 1)) {
              goto LABEL_84;
            }
          }
          id v20 = (id)(v75 - 3);
          if (__OFADD__(v76, 1)) {
            goto LABEL_83;
          }
          unint64_t isEscapingClosureAtFileLocation = *v1;
          if (*v1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v88 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v75;
          if (v20 == (id)v88) {
            goto LABEL_15;
          }
        }
      }
      uint64_t v26 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        break;
      }
      ++v22;
      if (v26 == v21) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    swift_bridgeObjectRetain();
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_96;
  }
  uint64_t v22 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    while (1)
    {
LABEL_15:
      if (isEscapingClosureAtFileLocation >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v27 < v22)
        {
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
      }
      else
      {
        uint64_t v27 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v27 < v22) {
          goto LABEL_94;
        }
      }
      uint64_t v28 = *(void *)(v0 + 640);
      uint64_t v29 = *(void **)(v0 + 480);
      sub_10008B094(v22, v27);
      *(void *)(v0 + 312) = 0;
      self;
      id v30 = sub_10001A308();
      uint64_t v31 = (void *)swift_allocObject();
      *(void *)(v0 + 704) = v31;
      _OWORD v31[2] = v1;
      v31[3] = v29;
      v31[4] = v28;
      v31[5] = v0 + 312;
      os_log_t v113 = (id *)(v0 + 312);
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = sub_10008B3B4;
      *(void *)(v32 + 24) = v31;
      *(void *)(v0 + 112) = sub_100040438;
      *(void *)(v0 + 120) = v32;
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 1107296256;
      *(void *)(v0 + 96) = sub_10003D6C8;
      *(void *)(v0 + 104) = &unk_1005139A0;
      unint64_t v33 = _Block_copy((const void *)(v0 + 80));
      id v34 = v29;
      swift_retain();
      swift_release();
      id v35 = &selRef_itemResponse;
      [v30 modifyUsingTransaction:v33];

      _Block_release(v33);
      unint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        break;
      }
LABEL_95:
      __break(1u);
LABEL_96:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v23 = (uint64_t *)(v0 + 352);
    uint64_t v36 = *(void **)(v0 + 480);
    static Logger.updates.getter();
    id v37 = v36;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      os_log_type_t log = v39;
      uint64_t v40 = *(char **)(v0 + 480);
      uint64_t v41 = swift_slowAlloc();
      id v42 = (void *)swift_slowAlloc();
      uint64_t v114 = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 138413058;
      uint64_t v43 = *(void **)&v40[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v0 + 352) = v43;
      id v44 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v42 = v43;

      *(_WORD *)(v41 + 12) = 2050;
      swift_beginAccess();
      uint64_t v45 = *(void *)(v0 + 312);
      if (!v45) {
        goto LABEL_102;
      }
      *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = *(void *)(v45
                                        + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 22) = 1026;
      uint64_t v46 = *(void *)(v0 + 312);
      if (!v46) {
        goto LABEL_103;
      }
      uint64_t v108 = *(void *)(v0 + 528);
      uint64_t v47 = *(void *)(v0 + 504);
      *(void *)os_log_type_t type = *(void *)(v0 + 496);
      uint64_t v48 = *(void **)(v0 + 480);
      *(_DWORD *)(v0 + 72_Block_object_dispose(&a9, 8) = *(unsigned __int8 *)(v46 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_result);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 2_Block_object_dispose(&a9, 8) = 2082;
      uint64_t v49 = sub_1000B8940();
      *(void *)(v0 + 384) = sub_1000F7290(v49, v50, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, log, "[%@] Merged %{public}ld app updates into database with result: %{BOOL,public}d reason: %{public}s", (uint8_t *)v41, 0x26u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v51 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v51(v108, *(void *)type);
      uint64_t v23 = (uint64_t *)(v0 + 352);
      id v35 = &selRef_itemResponse;
    }
    else
    {
      uint64_t v52 = *(void *)(v0 + 528);
      uint64_t v53 = *(void *)(v0 + 496);
      uint64_t v54 = *(void *)(v0 + 504);
      unint64_t v55 = *(void **)(v0 + 480);

      id v51 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v51(v52, v53);
    }
    swift_beginAccess();
    if (!*v113)
    {
      __break(1u);
LABEL_102:

      __break(1u);
LABEL_103:

      __break(1u);
LABEL_104:
      __break(1u);
      return;
    }
    unint64_t v56 = *(void *)(v0 + 608);
    uint64_t v57 = *(char **)(v0 + 480);
    id v58 = (char *)*v113;
    sub_100081720(v58, v57);

    if (v56 > 8)
    {
      *(void *)(v0 + 32_Block_object_dispose(&a9, 8) = *(void *)(v0 + 608);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      return;
    }
    if (((1 << v56) & 0xD6) == 0) {
      goto LABEL_67;
    }
    uint64_t v59 = *(void *)(v0 + 592);
    uint64_t v60 = *(void *)(v0 + 576);
    uint64_t v61 = *(void *)(v0 + 568);
    uint64_t v22 = self;
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    char v64 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    uint64_t v63 = v60 + 8;
    v64(v59, v61);
    sub_1003F4434(v22, isa);

    unint64_t isEscapingClosureAtFileLocation = (unint64_t)sub_10001A308();
    *(void *)(v0 + 160) = sub_100075098;
    *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = 0;
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = _NSConcreteStackBlock;
    *(void *)(v0 + 136) = 1107296256;
    *(void *)(v0 + 144) = sub_10003D6C8;
    *(void *)(v0 + 152) = &unk_1005139C8;
    uint64_t v1 = (unint64_t *)_Block_copy((const void *)(v0 + 128));
    swift_release();
    objc_msgSend((id)isEscapingClosureAtFileLocation, v35[92], v1);

    _Block_release(v1);
    if ((swift_isEscapingClosureAtFileLocation() & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    swift_bridgeObjectRetain();
    uint64_t v104 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v63 != v104) {
      goto LABEL_32;
    }
  }
  id v65 = *(void **)(v0 + 480);
  static Logger.updates.getter();
  id v66 = v65;
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  BOOL v69 = os_log_type_enabled(v67, v68);
  uint64_t v70 = *(char **)(v0 + 480);
  if (v69)
  {
    uint64_t v71 = (uint8_t *)swift_slowAlloc();
    BOOL v111 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v71 = 138412290;
    id v72 = v51;
    id v73 = *(void **)&v70[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    *(void *)(v0 + 344) = v73;
    id v74 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v111 = v73;
    id v51 = v72;

    _os_log_impl((void *)&_mh_execute_header, v67, v68, "[%@] Cleared expired history", v71, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v67 = *(NSObject **)(v0 + 480);
  }
  uint64_t v89 = *(void *)(v0 + 520);
  uint64_t v90 = *(void *)(v0 + 496);

  v51(v89, v90);
LABEL_67:
  if (sub_100042878())
  {
    uint64_t v91 = *(void *)(v0 + 608);
    uint64_t v92 = *(void *)(v0 + 592);
    uint64_t v93 = *(void *)(v0 + 576);
    uint64_t v94 = *(void *)(v0 + 568);
    id v95 = [objc_allocWithZone((Class)ASDUpdatePollMetrics) init];
    static Date.now.getter();
    Class v96 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
    [v95 setPollTime:v96];

    if (v91 == 1)
    {
      NSString v97 = String._bridgeToObjectiveC()();
    }
    else
    {
      sub_1000B8940();
      NSString v97 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v95, "setReason:", v97, v105);

    if (!*v113) {
      goto LABEL_104;
    }
    unint64_t v98 = (char *)*v113;
    swift_bridgeObjectRelease();
    uint64_t v99 = *(void *)&v98[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_bundleIDs];
    swift_bridgeObjectRetain();

    sub_10000C820(v99);
    swift_bridgeObjectRelease();
    Class v100 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v95 setBundleIDs:v100];

    id v101 = [objc_allocWithZone((Class)ASDUpdateMetricsStore) init];
    [v101 addPoll:v95];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v102 = (void *)swift_task_alloc();
  *(void *)(v0 + 712) = v102;
  *uint64_t v102 = v0;
  v102[1] = sub_100086D34;
  uint64_t v103 = *(void *)(v0 + 480);
  sub_100006D28(v103);
}

uint64_t sub_100086D34(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 488);
  *(void *)(*(void *)v1 + 720) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100086E4C, v2, 0);
}

uint64_t sub_100086E4C()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 720);
  return v1(v2);
}

void sub_100086F68()
{
  os_log_type_t v119 = v0;
  uint64_t v1 = v0 + 45;
  uint64_t v2 = (void *)v0[86];
  id v3 = (void *)v0[60];
  swift_willThrow();

  static Logger.updates.getter();
  id v4 = v3;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int v107 = v0 + 49;
    uint64_t v114 = v0[64];
    uint64_t v116 = (void (*)(uint64_t, uint64_t))v0[84];
    uint64_t v113 = v0[62];
    uint64_t v8 = (char *)v0[60];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v109 = (void *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412802;
    os_log_type_t log = v6;
    uint64_t v10 = *(void **)&v8[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[49] = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v109 = v10;

    *(_WORD *)(v9 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v12 = Error.localizedDescription.getter();
    v0[52] = sub_1000F7290(v12, v13, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v9 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v14 = Dictionary.Keys.description.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    v0[53] = sub_1000F7290(v14, v16, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "[%@] Failed to set updateAvailability to Available %{public}s for apps: %{public}s", (uint8_t *)v9, 0x20u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v116(v114, v113);
  }
  else
  {
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[84];
    uint64_t v18 = v0[64];
    uint64_t v19 = v0[62];
    id v20 = (void *)v0[60];
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();

    swift_bridgeObjectRelease_n();
    v17(v18, v19);
  }
  unint64_t isEscapingClosureAtFileLocation = *v1;
  id v22 = (id)(*v1 >> 62);
  if (v22) {
    goto LABEL_91;
  }
  uint64_t v23 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v23; uint64_t v23 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v24 = 0;
    char v25 = &OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip;
    while (1)
    {
      if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0) {
        uint64_t v26 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v26 = *(id *)(isEscapingClosureAtFileLocation + 8 * v24 + 32);
      }
      char v27 = v26[OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip];

      if (v27)
      {
        swift_bridgeObjectRelease();
        uint64_t v65 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          goto LABEL_98;
        }
        if (v22) {
          goto LABEL_99;
        }
        if (v65 == *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_15;
        }
LABEL_32:
        uint64_t v77 = v24 + 5;
        while (1)
        {
          unint64_t v78 = v77 - 4;
          id v22 = (id)(isEscapingClosureAtFileLocation & 0xC000000000000001);
          if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0)
          {
            unint64_t v79 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v78 & 0x8000000000000000) != 0) {
              goto LABEL_81;
            }
            if (v78 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_82;
            }
            unint64_t v79 = *(id *)(isEscapingClosureAtFileLocation + 8 * v77);
          }
          char v80 = v79[*v25];

          if ((v80 & 1) == 0)
          {
            if (v78 != v24)
            {
              if (v22)
              {
                id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (v24 < 0) {
                  goto LABEL_85;
                }
                unint64_t v81 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v24 >= v81) {
                  goto LABEL_86;
                }
                id v82 = *(id *)(isEscapingClosureAtFileLocation + 8 * v24 + 32);
                if ((v78 & 0x8000000000000000) != 0) {
                  goto LABEL_87;
                }
                if (v78 >= v81) {
                  goto LABEL_88;
                }
                id v22 = v82;
                id v83 = *(id *)(isEscapingClosureAtFileLocation + 8 * v77);
              }
              id v84 = v83;
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *uint64_t v1 = isEscapingClosureAtFileLocation;
              if (!isUniquelyReferenced_nonNull_bridgeObject
                || (isEscapingClosureAtFileLocation & 0x8000000000000000) != 0
                || (isEscapingClosureAtFileLocation & 0x4000000000000000) != 0)
              {
                unint64_t isEscapingClosureAtFileLocation = sub_100089C20(isEscapingClosureAtFileLocation);
                *uint64_t v1 = isEscapingClosureAtFileLocation;
              }
              id v86 = *(void **)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 8 * v24 + 0x20);
              *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 8 * v24 + 0x20) = v84;

              specialized Array._endMutation()();
              unint64_t isEscapingClosureAtFileLocation = *v1;
              if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                || (isEscapingClosureAtFileLocation & 0x8000000000000000) != 0
                || (isEscapingClosureAtFileLocation & 0x4000000000000000) != 0)
              {
                unint64_t isEscapingClosureAtFileLocation = sub_100089C20(isEscapingClosureAtFileLocation);
                *uint64_t v1 = isEscapingClosureAtFileLocation;
              }
              if ((v78 & 0x8000000000000000) != 0) {
                goto LABEL_89;
              }
              uint64_t v87 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8;
              if (v78 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_90;
              }
              uint64_t v88 = *(void **)(v87 + 8 * v77);
              *(void *)(v87 + 8 * v77) = v22;

              unint64_t isEscapingClosureAtFileLocation = (unint64_t)v1;
              specialized Array._endMutation()();
            }
            if (__OFADD__(v24++, 1)) {
              goto LABEL_84;
            }
          }
          id v22 = (id)(v77 - 3);
          if (__OFADD__(v78, 1)) {
            goto LABEL_83;
          }
          unint64_t isEscapingClosureAtFileLocation = *v1;
          if (*v1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v90 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v77;
          if (v22 == (id)v90) {
            goto LABEL_15;
          }
        }
      }
      uint64_t v28 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      ++v24;
      if (v28 == v23) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    swift_bridgeObjectRetain();
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_96;
  }
  uint64_t v24 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    while (1)
    {
LABEL_15:
      if (isEscapingClosureAtFileLocation >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v29 < v24)
        {
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
      }
      else
      {
        uint64_t v29 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v29 < v24) {
          goto LABEL_94;
        }
      }
      uint64_t v30 = v0[80];
      uint64_t v31 = (void *)v0[60];
      sub_10008B094(v24, v29);
      v0[39] = 0;
      self;
      id v32 = sub_10001A308();
      unint64_t v33 = (void *)swift_allocObject();
      v0[88] = v33;
      void v33[2] = v1;
      v33[3] = v31;
      v33[4] = v30;
      v33[5] = v0 + 39;
      uint64_t v117 = (id *)(v0 + 39);
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = sub_10008B3B4;
      *(void *)(v34 + 24) = v33;
      v0[14] = sub_100040438;
      v0[15] = v34;
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 1107296256;
      v0[12] = sub_10003D6C8;
      v0[13] = &unk_1005139A0;
      id v35 = _Block_copy(v0 + 10);
      id v36 = v31;
      swift_retain();
      swift_release();
      id v37 = &selRef_itemResponse;
      [v32 modifyUsingTransaction:v35];

      _Block_release(v35);
      unint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        break;
      }
LABEL_95:
      __break(1u);
LABEL_96:
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    char v25 = v0 + 44;
    uint64_t v38 = (void *)v0[60];
    static Logger.updates.getter();
    id v39 = v38;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      os_log_type_t v111 = v41;
      id v42 = (char *)v0[60];
      uint64_t v43 = swift_slowAlloc();
      id v44 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 138413058;
      uint64_t v45 = *(void **)&v42[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      v0[44] = v45;
      id v46 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v44 = v45;

      *(_WORD *)(v43 + 12) = 2050;
      swift_beginAccess();
      uint64_t v47 = v0[39];
      if (!v47) {
        goto LABEL_102;
      }
      v0[46] = *(void *)(v47 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 22) = 1026;
      uint64_t v48 = v0[39];
      if (!v48) {
        goto LABEL_103;
      }
      uint64_t v112 = v0[66];
      uint64_t v49 = v0[63];
      uint64_t v110 = v0[62];
      unint64_t v50 = (void *)v0[60];
      *((_DWORD *)v0 + 182) = *(unsigned __int8 *)(v48 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_result);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 2_Block_object_dispose(&a9, 8) = 2082;
      uint64_t v51 = sub_1000B8940();
      v0[48] = sub_1000F7290(v51, v52, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v111, "[%@] Merged %{public}ld app updates into database with result: %{BOOL,public}d reason: %{public}s", (uint8_t *)v43, 0x26u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v53(v112, v110);
      char v25 = v0 + 44;
      id v37 = &selRef_itemResponse;
    }
    else
    {
      uint64_t v54 = v0[66];
      uint64_t v55 = v0[62];
      uint64_t v56 = v0[63];
      uint64_t v57 = (void *)v0[60];

      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v53(v54, v55);
    }
    swift_beginAccess();
    if (!*v117)
    {
      __break(1u);
LABEL_102:

      __break(1u);
LABEL_103:

      __break(1u);
LABEL_104:
      __break(1u);
      return;
    }
    unint64_t v58 = v0[76];
    uint64_t v59 = (char *)v0[60];
    uint64_t v60 = (char *)*v117;
    sub_100081720(v60, v59);

    if (v58 > 8)
    {
      v0[41] = v0[76];
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      return;
    }
    if (((1 << v58) & 0xD6) == 0) {
      goto LABEL_67;
    }
    uint64_t v61 = v0[74];
    uint64_t v62 = v0[72];
    uint64_t v63 = v0[71];
    uint64_t v24 = self;
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v66 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    uint64_t v65 = v62 + 8;
    v66(v61, v63);
    sub_1003F4434(v24, isa);

    unint64_t isEscapingClosureAtFileLocation = (unint64_t)sub_10001A308();
    v0[20] = sub_100075098;
    v0[21] = 0;
    v0[16] = _NSConcreteStackBlock;
    v0[17] = 1107296256;
    v0[18] = sub_10003D6C8;
    v0[19] = &unk_1005139C8;
    uint64_t v1 = (unint64_t *)_Block_copy(v0 + 16);
    swift_release();
    objc_msgSend((id)isEscapingClosureAtFileLocation, v37[92], v1);

    _Block_release(v1);
    if ((swift_isEscapingClosureAtFileLocation() & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    swift_bridgeObjectRetain();
    uint64_t v106 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v65 != v106) {
      goto LABEL_32;
    }
  }
  uint64_t v67 = (void *)v0[60];
  static Logger.updates.getter();
  id v68 = v67;
  BOOL v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.default.getter();
  BOOL v71 = os_log_type_enabled(v69, v70);
  id v72 = (char *)v0[60];
  if (v71)
  {
    id v73 = (uint8_t *)swift_slowAlloc();
    uint64_t v115 = (void *)swift_slowAlloc();
    *(_DWORD *)id v73 = 138412290;
    id v74 = v53;
    uint64_t v75 = *(void **)&v72[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[43] = v75;
    id v76 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v115 = v75;
    uint64_t v53 = v74;

    _os_log_impl((void *)&_mh_execute_header, v69, v70, "[%@] Cleared expired history", v73, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    BOOL v69 = v0[60];
  }
  uint64_t v91 = v0[65];
  uint64_t v92 = v0[62];

  v53(v91, v92);
LABEL_67:
  if (sub_100042878())
  {
    uint64_t v93 = v0[76];
    uint64_t v94 = v0[74];
    uint64_t v95 = v0[72];
    uint64_t v96 = v0[71];
    id v97 = [objc_allocWithZone((Class)ASDUpdatePollMetrics) init];
    static Date.now.getter();
    Class v98 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
    [v97 setPollTime:v98];

    if (v93 == 1)
    {
      NSString v99 = String._bridgeToObjectiveC()();
    }
    else
    {
      sub_1000B8940();
      NSString v99 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v97, "setReason:", v99, v107);

    if (!*v117) {
      goto LABEL_104;
    }
    Class v100 = (char *)*v117;
    swift_bridgeObjectRelease();
    uint64_t v101 = *(void *)&v100[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_bundleIDs];
    swift_bridgeObjectRetain();

    sub_10000C820(v101);
    swift_bridgeObjectRelease();
    Class v102 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v97 setBundleIDs:v102];

    id v103 = [objc_allocWithZone((Class)ASDUpdateMetricsStore) init];
    [v103 addPoll:v97];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v104 = (void *)swift_task_alloc();
  v0[89] = v104;
  *uint64_t v104 = v0;
  v104[1] = sub_100086D34;
  uint64_t v105 = v0[60];
  sub_100006D28(v105);
}

uint64_t sub_100087F8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  type metadata accessor for MediaAPIUpdate();
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  BOOL v9 = *(void *)(a3 + OBJC_IVAR____TtC9appstored14UpdatesContext_reason) == 2;
  sub_100018D68(0, (unint64_t *)&qword_1005A3230);
  sub_10008B3D0();
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  id v11 = sub_100374798(a1, isa, v9, v10);

  uint64_t v12 = *a5;
  *a5 = v11;
  unint64_t v13 = v11;

  uint64_t v14 = *((unsigned __int8 *)&v13->super.isa + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_result);
  return v14;
}

uint64_t sub_100088098(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v4 = type metadata accessor for Logger();
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[15] = _swiftEmptyArrayStorage;
  id v5 = (void *)swift_task_alloc();
  v2[23] = v5;
  *id v5 = v2;
  v5[1] = sub_100088198;
  return sub_1000058F0(a1);
}

uint64_t sub_100088198(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000882B0, v2, 0);
}

uint64_t sub_1000882B0()
{
  uint64_t v1 = v0[24];
  if (*(void *)(v1 + 16)) {
    sub_10009BE5C(v1);
  }
  else {
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = (void *)swift_task_alloc();
  v0[25] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100088360;
  uint64_t v3 = v0[18];
  return sub_1000823BC(v3);
}

uint64_t sub_100088360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[8] = v3;
  v5[9] = a1;
  v5[10] = a2;
  v5[11] = a3;
  uint64_t v6 = v4[19];
  v5[26] = a1;
  v5[27] = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100088480, v6, 0);
}

uint64_t sub_100088480()
{
  uint64_t v1 = v0[26];
  if (*(void *)(v1 + 16)) {
    sub_10009BE5C(v1);
  }
  else {
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = (void *)v0[18];
  static Logger.updates.getter();
  uint64_t v3 = v0[15];
  id v4 = v2;
  swift_bridgeObjectRetain_n();
  id v5 = v4;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  BOOL v9 = (char *)v0[18];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v10 = swift_slowAlloc();
    id v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412546;
    uint64_t v12 = *(void **)&v9[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[16] = v12;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v11 = v12;

    *(_WORD *)(v10 + 12) = 2050;
    uint64_t v14 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    v0[17] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "[%@] ╘ Update request contains %{public}ld eligible app(s)", (uint8_t *)v10, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  unint64_t v15 = v0[27];
  (*(void (**)(void, void))(v0[21] + 8))(v0[22], v0[20]);
  if (v15 >> 62) {
    goto LABEL_11;
  }
  uint64_t v16 = v0[27];
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    while (1)
    {
      self;
      id v17 = sub_10001A308();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v16;
      uint64_t v19 = swift_allocObject();
      id v20 = sub_100088F90;
      *(void *)(v19 + 16) = sub_100088F90;
      *(void *)(v19 + 24) = v18;
      v0[6] = sub_10003F908;
      v0[7] = v19;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256;
      v0[4] = sub_10003D6C8;
      v0[5] = &unk_100513910;
      uint64_t v21 = _Block_copy(v0 + 2);
      swift_retain();
      swift_release();
      [v17 modifyUsingTransaction:v21];

      _Block_release(v21);
      LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v21 & 1) == 0) {
        break;
      }
      __break(1u);
LABEL_11:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v0[27];
      if (!v22) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    id v20 = 0;
  }
  uint64_t v23 = v0[11];
  swift_beginAccess();
  uint64_t v24 = v0[15];
  sub_100018DD4((uint64_t)v20);
  swift_task_dealloc();
  char v25 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v25(v24, v23);
}

BOOL sub_100088894(void *a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    sub_100018D68(0, &qword_1005A5680);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_100018D68(0, &qword_1005A5680);
  }
  sub_100018D68(0, &qword_1005A5680);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  BOOL v4 = sub_100374400(a1, isa);

  return v4;
}

uint64_t sub_10008898C(void *a1)
{
  sub_10001644C(&qword_1005A4E50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100489530;
  *(_OWORD *)(v2 + 32) = xmmword_1004896A0;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  sub_10001644C((uint64_t *)&unk_1005A4E58);
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v5 = objc_msgSend(self, "containsPredicateWithProperty:values:", v3, v4, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v7 = [a1 connection];
  id v8 = sub_1002FF548(ObjCClassFromMetadata, v7, v5);

  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10008CE80;
  *(void *)(v10 + 24) = v9;
  void v14[4] = sub_10008E134;
  v14[5] = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  void v14[2] = sub_1000950B8;
  v14[3] = &unk_100514278;
  id v11 = _Block_copy(v14);
  id v12 = a1;
  swift_retain();
  swift_release();
  [v8 enumeratePersistentIDsUsingBlock:v11];

  _Block_release(v11);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((a1 & 1) == 0) {
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100088BFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(a4, "connection", v8);
  id v12 = [objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdateEntity()) initWithPersistentID:a1 onConnection:v11];

  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  NSString v14 = String._bridgeToObjectiveC()();
  [v12 setValue:isa forProperty:v14];

  static Logger.updates.getter();
  id v15 = v12;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v26 = v6;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446210;
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = sub_10026E95C(v15, (uint64_t)v19);

    if (v20)
    {
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;
    }
    else
    {
      unint64_t v23 = 0xE300000000000000;
      uint64_t v21 = 7104878;
    }
    uint64_t v27 = sub_1000F7290(v21, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Resetting update state to available on startup: %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v26);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_100088EFC()
{
  swift_release();
  swift_defaultActor_destroy();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for UpdatesManager_Swift()
{
  return self;
}

uint64_t sub_100088F58()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_100088F90(void *a1)
{
  return sub_100088894(a1, *(void *)(v1 + 16));
}

uint64_t sub_100088F98()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100088FA8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100088FB4(uint64_t *a1)
{
  void (*v21)(Swift::Int *__return_ptr, Swift::Int *);
  uint64_t v22;
  Swift::Int v23[2];
  Swift::Int v24;
  Swift::Int v25;
  char v26;
  uint64_t v27;

  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t (*)(Swift::Int *))a1[1];
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t i = 0;
  uint64_t v27 = result;
  uint64_t v6 = *(void *)(v2 + 64);
  unint64_t v22 = v2 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & v6;
  uint64_t v21 = (void (*)(Swift::Int *__return_ptr, Swift::Int *))a1[3];
  int64_t v10 = (unint64_t)(63 - v7) >> 6;
  if ((v8 & v6) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v13 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
  }
  else
  {
    if (v13 >= v10) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v13);
    if (v14)
    {
LABEL_17:
      unint64_t v9 = (v14 - 1) & v14;
      unint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
      for (i = v13; ; unint64_t v12 = v11 | (i << 6))
      {
        os_log_type_t v17 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v12);
        Swift::Int v18 = *v17;
        Swift::Int v19 = v17[1];
        char v20 = *(unsigned char *)(*(void *)(v2 + 56) + v12);
        uint64_t v24 = *v17;
        uint64_t v25 = v19;
        uint64_t v26 = v20;
        swift_bridgeObjectRetain();
        if (v3(&v24))
        {
          uint64_t v24 = v18;
          uint64_t v25 = v19;
          uint64_t v26 = v20;
          v21(v23, &v24);
          swift_bridgeObjectRelease();
          sub_1000BBA74(&v24, v23[0], v23[1]);
          uint64_t result = swift_bridgeObjectRelease();
          if (!v9) {
            goto LABEL_8;
          }
        }
        else
        {
          uint64_t result = swift_bridgeObjectRelease();
          if (!v9) {
            goto LABEL_8;
          }
        }
LABEL_7:
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
      }
    }
    int64_t v15 = i + 2;
    if (i + 2 >= v10) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v15);
    if (v14)
    {
LABEL_13:
      int64_t v13 = v15;
      goto LABEL_17;
    }
    int64_t v16 = i + 3;
    if (i + 3 >= v10) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v16);
    if (v14)
    {
LABEL_16:
      int64_t v13 = v16;
      goto LABEL_17;
    }
    int64_t v15 = i + 4;
    if (i + 4 >= v10) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v15);
    if (v14) {
      goto LABEL_13;
    }
    int64_t v16 = i + 5;
    if (i + 5 >= v10) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v16);
    if (v14) {
      goto LABEL_16;
    }
    int64_t v15 = i + 6;
    if (i + 6 >= v10)
    {
LABEL_31:
      sub_100035EBC();
      swift_release();
      swift_release();
      return v27;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v15);
    if (v14) {
      goto LABEL_13;
    }
    while (1)
    {
      int64_t v13 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      if (v13 >= v10) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v13);
      ++v15;
      if (v14) {
        goto LABEL_17;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100089240(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = sub_1000892F4(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_1000D2AC4(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v10;
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000892F4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10001644C(&qword_1005A4E48);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_100018D68(0, (unint64_t *)&qword_1005A3230);
      do
      {
        swift_dynamicCast();
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1000D14D8(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_100089528(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_1000895E8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  unint64_t v22 = __src;
  uint64_t v21 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      char v20 = v16;
      unint64_t v22 = a2;
      if (v7 < a2 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        do
        {
          if (v16 != v17 + 8 || v17 >= v16) {
            *(void *)uint64_t v17 = *((void *)v16 - 1);
          }
          v16 -= 8;
          v17 -= 8;
        }
        while (v16 > v4);
        char v20 = v16;
      }
      goto LABEL_34;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    unint64_t v14 = &v4[8 * v10];
    char v20 = v14;
    if ((unint64_t)a2 < a3 && v8 >= 8)
    {
      do
      {
        BOOL v15 = v4 + 8;
        if (v7 != v4 || v7 >= v15) {
          *(void *)uint64_t v7 = *(void *)v4;
        }
        v7 += 8;
        v4 += 8;
      }
      while (v15 < v14);
      unint64_t v22 = v7;
      uint64_t v21 = v15;
    }
LABEL_34:
    sub_1000898D8((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000897DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10001644C(&qword_1005A4EB8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000898D8(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_100089994(uint64_t a1)
{
  return sub_1000897DC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000899A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v38 = v8;
  uint64_t v39 = 0;
  uint64_t v40 = v11 & v9;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000BDDF8(&v34);
  uint64_t v12 = *((void *)&v34 + 1);
  if (!*((void *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100035EBC();
    return swift_release();
  }
  while (1)
  {
    uint64_t v15 = v34;
    sub_10000C948(&v35, v33);
    uint64_t v16 = *a5;
    unint64_t v18 = sub_100049A4C(v15, v12);
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (*(void *)(v16 + 24) >= v21)
    {
      if (a4)
      {
        if (v17) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_1000D33EC();
        if (v22) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_1000CFEAC(v21, a4 & 1);
      unint64_t v23 = sub_100049A4C(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_6:
        uint64_t v13 = 32 * v18;
        sub_100031C38(*(void *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_100031C38((uint64_t)v31, (uint64_t)v32);
        sub_10002E618((uint64_t)v31);
        sub_10002E618((uint64_t)v33);
        swift_bridgeObjectRelease();
        unint64_t v14 = (_OWORD *)(*(void *)(*a5 + 56) + v13);
        sub_10002E618((uint64_t)v14);
        sub_10000C948(v32, v14);
        goto LABEL_7;
      }
    }
    uint64_t v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    uint64_t v26 = (uint64_t *)(v25[6] + 16 * v18);
    *uint64_t v26 = v15;
    v26[1] = v12;
    sub_10000C948(v33, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    _OWORD v25[2] = v29;
LABEL_7:
    sub_1000BDDF8(&v34);
    uint64_t v12 = *((void *)&v34 + 1);
    a4 = 1;
    if (!*((void *)&v34 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100089C0C(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100089C20(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_100089C9C(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *unint64_t v3 = v2;
  v3[1] = sub_100089D7C;
  return v5(v2 + 16);
}

uint64_t sub_100089D7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_100089EAC(void *a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v72 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v64 - v12;
  id v14 = objc_allocWithZone((Class)UISApplicationState);
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 initWithBundleIdentifier:v15];

  if ([v16 badgeValue])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  sub_100030134((uint64_t)&v75, (uint64_t)v77, &qword_1005A5660);
  sub_100016588((uint64_t)v77, (uint64_t)&v75, &qword_1005A5660);
  uint64_t v71 = a2;
  if (*((void *)&v76 + 1))
  {
    sub_100018D68(0, (unint64_t *)&qword_1005A3230);
    if (swift_dynamicCast())
    {
      id v17 = (id)v73;
      uint64_t v18 = (uint64_t)[(id)v73 integerValue];

      goto LABEL_55;
    }
  }
  else
  {
    sub_100016714((uint64_t)&v75, &qword_1005A5660);
  }
  sub_100016588((uint64_t)v77, (uint64_t)&v75, &qword_1005A5660);
  if (!*((void *)&v76 + 1))
  {
    sub_100016714((uint64_t)&v75, &qword_1005A5660);
    goto LABEL_64;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_64:
    if (!a1) {
      goto LABEL_68;
    }
    uint64_t v18 = 0;
    goto LABEL_66;
  }
  id v70 = v16;
  uint64_t result = v73;
  unint64_t v20 = HIBYTE(v74) & 0xF;
  unint64_t v21 = v73 & 0xFFFFFFFFFFFFLL;
  if ((v74 & 0x2000000000000000) != 0) {
    unint64_t v22 = HIBYTE(v74) & 0xF;
  }
  else {
    unint64_t v22 = v73 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
    swift_bridgeObjectRelease();
    id v16 = v70;
    goto LABEL_64;
  }
  if ((v74 & 0x1000000000000000) != 0)
  {
    uint64_t v18 = sub_1000B28BC(v73, v74, 10);
    char v25 = v63;
    goto LABEL_54;
  }
  if ((v74 & 0x2000000000000000) == 0)
  {
    if ((v73 & 0x1000000000000000) != 0) {
      unint64_t v23 = (unsigned __int8 *)((v74 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v23 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v18 = (uint64_t)sub_1000B28A4(v23, v21, 10);
    char v25 = v24 & 1;
LABEL_54:
    swift_bridgeObjectRelease();
    id v16 = v70;
    if ((v25 & 1) == 0)
    {
LABEL_55:
      if ((void *)v18 == a1)
      {
LABEL_68:
        uint64_t v67 = (uint64_t)a1;
        uint64_t v69 = v9;
        uint64_t v54 = v72;
        static Logger.updates.getter();
        id v55 = a4;
        swift_bridgeObjectRetain_n();
        uint64_t v56 = (char *)v55;
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = swift_slowAlloc();
          uint64_t v60 = (void *)swift_slowAlloc();
          uint64_t v66 = swift_slowAlloc();
          *(void *)&long long v75 = v66;
          *(_DWORD *)uint64_t v59 = 138413058;
          uint64_t v68 = v8;
          uint64_t v61 = *(void **)&v56[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
          id v70 = v16;
          uint64_t v73 = (uint64_t)v61;
          id v62 = v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v60 = v61;

          *(_WORD *)(v59 + 12) = 2050;
          uint64_t v73 = v67;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v59 + 22) = 1026;
          self;
          LODWORD(v73) = sub_100005CF8();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v59 + 2_Block_object_dispose(&a9, 8) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v73 = sub_1000F7290(v71, a3, (uint64_t *)&v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "[%@] Leaving badge count at: %{public}ld auto enabled: %{BOOL,public}d reason: %{public}s", (uint8_t *)v59, 0x26u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v69 + 8))(v72, v68);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v69 + 8))(v54, v8);
        }
        return sub_100016714((uint64_t)v77, &qword_1005A5660);
      }
LABEL_66:
      id v72 = (char *)v18;
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      [v16 setBadgeValue:isa];

      static Logger.updates.getter();
      id v39 = a4;
      swift_bridgeObjectRetain_n();
      uint64_t v40 = (char *)v39;
      unint64_t v41 = a3;
      uint64_t v42 = v40;
      uint64_t v43 = (uint64_t)a1;
      id v44 = v13;
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        os_log_t v65 = v45;
        uint64_t v49 = (void *)v48;
        uint64_t v50 = swift_slowAlloc();
        id v70 = v16;
        uint64_t v64 = v50;
        *(void *)&long long v75 = v50;
        *(_DWORD *)uint64_t v47 = 138413314;
        uint64_t v66 = (uint64_t)v44;
        uint64_t v51 = *(void **)&v42[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
        uint64_t v68 = v8;
        uint64_t v69 = v9;
        uint64_t v73 = (uint64_t)v51;
        id v52 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v49 = v51;

        *(_WORD *)(v47 + 12) = 2050;
        uint64_t v73 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v47 + 22) = 2050;
        uint64_t v73 = (uint64_t)v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v47 + 32) = 1026;
        self;
        LODWORD(v73) = sub_100005CF8();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v47 + 3_Block_object_dispose(&a9, 8) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v73 = sub_1000F7290(v71, v41, (uint64_t *)&v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v53 = v65;
        _os_log_impl((void *)&_mh_execute_header, v65, v46, "[%@] Updated badge count to: %{public}ld previous badgeValue: %{public}ld auto enabled: %{BOOL,public}d reason: %{public}s", (uint8_t *)v47, 0x30u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v66, v68);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v44, v8);
      }
      return sub_100016714((uint64_t)v77, &qword_1005A5660);
    }
    goto LABEL_64;
  }
  *(void *)&long long v75 = v73;
  *((void *)&v75 + 1) = v74 & 0xFFFFFFFFFFFFFFLL;
  if (v73 == 43)
  {
    if (!v20) {
      goto LABEL_76;
    }
    if (v20 == 1 || (BYTE1(v73) - 48) > 9u) {
      goto LABEL_41;
    }
    uint64_t v18 = (BYTE1(v73) - 48);
    if (v20 != 2)
    {
      if ((BYTE2(v73) - 48) > 9u) {
        goto LABEL_41;
      }
      uint64_t v18 = 10 * (BYTE1(v73) - 48) + (BYTE2(v73) - 48);
      unint64_t v26 = v20 - 3;
      if (v26)
      {
        uint64_t v27 = (unsigned __int8 *)&v75 + 3;
        while (1)
        {
          unsigned int v28 = *v27 - 48;
          if (v28 > 9) {
            goto LABEL_41;
          }
          uint64_t v29 = 10 * v18;
          if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
            goto LABEL_41;
          }
          uint64_t v18 = v29 + v28;
          if (__OFADD__(v29, v28)) {
            goto LABEL_41;
          }
          char v25 = 0;
          ++v27;
          if (!--v26) {
            goto LABEL_54;
          }
        }
      }
    }
LABEL_53:
    char v25 = 0;
    goto LABEL_54;
  }
  if (v73 != 45)
  {
    if (!v20 || (v73 - 48) > 9u) {
      goto LABEL_41;
    }
    uint64_t v18 = (v73 - 48);
    if (v20 != 1)
    {
      if ((BYTE1(v73) - 48) > 9u) {
        goto LABEL_41;
      }
      uint64_t v18 = 10 * (v73 - 48) + (BYTE1(v73) - 48);
      unint64_t v30 = v20 - 2;
      if (v30)
      {
        uint64_t v31 = (unsigned __int8 *)&v75 + 2;
        while (1)
        {
          unsigned int v32 = *v31 - 48;
          if (v32 > 9) {
            goto LABEL_41;
          }
          uint64_t v33 = 10 * v18;
          if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
            goto LABEL_41;
          }
          uint64_t v18 = v33 + v32;
          if (__OFADD__(v33, v32)) {
            goto LABEL_41;
          }
          char v25 = 0;
          ++v31;
          if (!--v30) {
            goto LABEL_54;
          }
        }
      }
    }
    goto LABEL_53;
  }
  if (v20)
  {
    if (v20 != 1 && (BYTE1(v73) - 48) <= 9u)
    {
      if (v20 == 2)
      {
        char v25 = 0;
        uint64_t v18 = -(uint64_t)(BYTE1(v73) - 48);
        goto LABEL_54;
      }
      if ((BYTE2(v73) - 48) <= 9u)
      {
        uint64_t v18 = -10 * (BYTE1(v73) - 48) - (BYTE2(v73) - 48);
        unint64_t v34 = v20 - 3;
        if (!v34) {
          goto LABEL_53;
        }
        long long v35 = (unsigned __int8 *)&v75 + 3;
        while (1)
        {
          unsigned int v36 = *v35 - 48;
          if (v36 > 9) {
            break;
          }
          uint64_t v37 = 10 * v18;
          if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
            break;
          }
          uint64_t v18 = v37 - v36;
          if (__OFSUB__(v37, v36)) {
            break;
          }
          char v25 = 0;
          ++v35;
          if (!--v34) {
            goto LABEL_54;
          }
        }
      }
    }
LABEL_41:
    uint64_t v18 = 0;
    char v25 = 1;
    goto LABEL_54;
  }
  __break(1u);
LABEL_76:
  __break(1u);
  return result;
}

uint64_t sub_10008A8EC(char a1)
{
  id v17 = _swiftEmptyArrayStorage;
  self;
  id v2 = sub_10001A308();
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = &v17;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_10008DEA0;
  *(void *)(v4 + 24) = v3;
  NSString v15 = sub_10008E188;
  uint64_t v16 = v4;
  aBlock = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_100018DE4;
  id v14 = &unk_100514A10;
  uint64_t v5 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v2 readUsingSession:v5];

  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    id v7 = sub_10001A308();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = &v17;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_10008DECC;
    *(void *)(v9 + 24) = v8;
    NSString v15 = sub_100040438;
    uint64_t v16 = v9;
    aBlock = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256;
    uint64_t v13 = sub_10003D6C8;
    id v14 = &unk_100514A88;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v7 modifyUsingTransaction:v10];

    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((v7 & 1) == 0)
    {
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

void sub_10008ABB8(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.updates.getter();
  id v10 = a1;
  swift_bridgeObjectRetain_n();
  uint64_t v11 = (char *)v10;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v28 = v7;
    uint64_t v15 = v14;
    char v24 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v15 = 138412546;
    os_log_t v25 = v12;
    uint64_t v16 = *(void **)&v11[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    uint64_t v27 = v6;
    uint64_t v29 = (uint64_t)v16;
    uint64_t v23 = a2;
    id v17 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v24 = v16;

    *(_WORD *)(v15 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1000F7290(v23, a3, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v18 = v25;
    _os_log_impl((void *)&_mh_execute_header, v25, v13, "[%@] Sending updates changed notification with reason: %{public}s", (uint8_t *)v15, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v27);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  notify_post("com.apple.appstored.updatesstorechanged");
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v20 = self;
  id v21 = sub_1002CF238(v20, isa);

  self;
  id v22 = sub_10001A0C8();
  sub_1003D64D4((uint64_t)v22, v21);
}

uint64_t sub_10008AF10()
{
  uint64_t v7 = _swiftEmptyDictionarySingleton;
  self;
  id v0 = sub_10001A308();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = &v7;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_10008C180;
  *(void *)(v2 + 24) = v1;
  aBlock[4] = sub_100018DAC;
  void aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018DE4;
  aBlock[3] = &unk_100513AE0;
  uint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v0 readUsingSession:v3];

  _Block_release(v3);
  LOBYTE(v0) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v7;
    swift_release();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_10008B094(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  type metadata accessor for MediaAPIUpdate();
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  return specialized Array._endMutation()();
}

uint64_t sub_10008B374()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008B3B4(void *a1)
{
  return sub_100087F8C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void ***)(v1 + 40));
}

uint64_t sub_10008B3C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10008B3D0()
{
  unint64_t result = qword_1005A4E38;
  if (!qword_1005A4E38)
  {
    sub_100018D68(255, (unint64_t *)&qword_1005A3230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A4E38);
  }
  return result;
}

uint64_t sub_10008B438()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_10008B488(void *a1, uint64_t a2)
{
  sub_1000828BC(a1, a2, *(unsigned char **)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), *(unsigned char *)(v2 + 33), *(void *)(v2 + 40), *(unsigned char **)(v2 + 48), *(void **)(v2 + 56), *(NSObject **)(v2 + 64), *(char ***)(v2 + 72));
}

uint64_t sub_10008B4C8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008B4D8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10008B500()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_10008B510(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = (void *)a1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10008B9B8(uint64_t a1)
{
  sub_10001644C((uint64_t *)&unk_1005A4E20);
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v37 - v6;
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v37 - v8;
  uint64_t v41 = a1;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_100035D08();
  if (v10)
  {
    uint64_t v11 = v10;
    if (*(void *)(v10 + 16) && (unint64_t v12 = sub_100049A4C(0xD000000000000011, 0x800000010044DAE0), (v13 & 1) != 0))
    {
      sub_100031C38(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v39);
      sub_10000C948(&v39, v38);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v37 = a1;
      sub_1000D2278(v38, 0x6C616E7265747865, 0xEA00000000006449, isUniquelyReferenced_nonNull_native);
      uint64_t v15 = v37;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000B29CC(0x6C616E7265747865, 0xEA00000000006449, &v39);
      sub_100016714((uint64_t)&v39, &qword_1005A5660);
      uint64_t v15 = v41;
    }
    swift_bridgeObjectRetain();
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v39 = v15;
    sub_1000899A8(v11, (uint64_t)sub_1000AFB04, 0, v16, (uint64_t *)&v39);
    a1 = v39;
    uint64_t v41 = v39;
    swift_bridgeObjectRelease();
    if (*(void *)(v11 + 16) && (unint64_t v17 = sub_100049A4C(0x44657361656C6572, 0xEB00000000657461), (v18 & 1) != 0))
    {
      sub_100031C38(*(void *)(v11 + 56) + 32 * v17, (uint64_t)&v39);
    }
    else
    {
      long long v39 = 0u;
      long long v40 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v40 + 1))
    {
      uint64_t v23 = &qword_1005A5660;
      char v24 = &v39;
LABEL_26:
      sub_100016714((uint64_t)v24, v23);
      return a1;
    }
    if (swift_dynamicCast())
    {
      if (qword_1005A3050 != -1) {
        swift_once();
      }
      uint64_t v19 = (void *)qword_1005A4D38;
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v21 = [v19 dateFromString:v20];

      if (v21)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v22 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 0, 1, v22);
      }
      else
      {
        uint64_t v25 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 1, 1, v25);
      }
      sub_100030134((uint64_t)v7, (uint64_t)v9, (uint64_t *)&unk_1005A4E20);
      if (qword_1005A3048 != -1) {
        swift_once();
      }
      uint64_t v26 = (void *)qword_1005A4D30;
      sub_100016588((uint64_t)v9, (uint64_t)v4, (uint64_t *)&unk_1005A4E20);
      uint64_t v27 = type metadata accessor for Date();
      uint64_t v28 = *(void *)(v27 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v4, 1, v27) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v27);
      }
      id v30 = [v26 stringForObjectValue:isa];
      swift_unknownObjectRelease();
      if (v30)
      {
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v32;

        *((void *)&v40 + 1) = &type metadata for String;
        *(void *)&long long v39 = v31;
        *((void *)&v39 + 1) = v33;
        sub_10000C948(&v39, v38);
        uint64_t v34 = v41;
        char v35 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v37 = v34;
        sub_1000D2278(v38, 0x44657361656C6572, 0xEB00000000657461, v35);
        a1 = v37;
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1000B29CC(0x44657361656C6572, 0xEB00000000657461, &v39);
        sub_100016714((uint64_t)&v39, &qword_1005A5660);
        a1 = v41;
      }
      uint64_t v23 = (uint64_t *)&unk_1005A4E20;
      char v24 = (long long *)v9;
      goto LABEL_26;
    }
  }
  return a1;
}

BOOL sub_10008BF2C(void *a1)
{
  uint64_t v2 = sub_10001644C((uint64_t *)&unk_1005A4E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - v10;
  id v12 = sub_10026E8A4(a1, @"timestamp");
  if (v12)
  {
    char v13 = v12;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v14(v4, v8, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v14(v11, v4, v5);
      Date.timeIntervalSinceNow.getter();
      double v16 = v15;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return v16 < -1209600.0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_100016714((uint64_t)v4, (uint64_t *)&unk_1005A4E20);
  return 1;
}

uint64_t sub_10008C170()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008C180(void *a1)
{
  return sub_10007FE08(a1, *(void *)(v1 + 16));
}

uint64_t sub_10008C188()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C198()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10008C1A8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000800B0(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_10008C1B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C1C0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008C200()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000184D8;
  v3[2] = v2;
  return _swift_task_switch(sub_10008219C, 0, 0);
}

uint64_t sub_10008C2A8(uint64_t a1)
{
  return sub_1000AAFA8(a1, *(void **)(v1 + 16));
}

uint64_t sub_10008C2B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000184D8;
  return sub_100080FEC(a1, v4, v5, v6);
}

uint64_t sub_10008C36C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000184D8;
  v3[2] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100079CC4;
  return sub_100083DB0(v2);
}

uint64_t sub_10008C450()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008C488()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10008C498(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000801B8(a1, a2, a3, *(void *)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_10008C4A4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C4B4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10008C4C4(void *a1)
{
  sub_10007FCBC(a1, *(void **)(v1 + 16));
}

uint64_t sub_10008C4CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C4DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C4EC(void *a1)
{
  return sub_10007F678(a1, *(void *)(v1 + 16));
}

uint64_t sub_10008C4F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C504()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10008C514(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10007F8C4(a1, a2, a3, *(char ***)(v3 + 16));
}

uint64_t sub_10008C51C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C52C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008C57C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000184D8;
  return sub_10007D964(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_10008C644()
{
  unint64_t result = qword_1005A4EF0;
  if (!qword_1005A4EF0)
  {
    sub_10002E5A8(&qword_1005A4EE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005A4EF0);
  }
  return result;
}

uint64_t sub_10008C6A0(void *a1)
{
  return sub_10007CFA8(a1, *(void **)(v1 + 16), *(unsigned __int8 **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10008C6AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C6BC()
{
  return sub_10008CEB0((void (*)(void))&_swift_release);
}

uint64_t sub_10008C6D4()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + _Block_object_dispose(&a9, 8) = sub_1000184D8;
  *(_OWORD *)(v2 + 40) = v3;
  return _swift_task_switch(sub_10007D314, 0, 0);
}

uint64_t sub_10008C780()
{
  return _swift_deallocObject(v0, 48, 7);
}

void sub_10008C7C0(uint64_t a1, int a2, int a3)
{
  sub_10007D170(a1, a2, a3, *(id *)(v3 + 16), *(void **)(v3 + 24), *(unsigned char **)(v3 + 32), *(char ***)(v3 + 40));
}

uint64_t sub_10008C7CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100095090(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10008C7E4()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008C81C(void *a1)
{
  return sub_10007C320(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_10008C828()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C83C()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + _Block_object_dispose(&a9, 8) = sub_1000184D8;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_10007B068, v3, 0);
}

uint64_t sub_10008C8EC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + _Block_object_dispose(&a9, 8) = sub_1000184D8;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_10007AC98, v3, 0);
}

uint64_t sub_10008C99C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_1000184D8;
  return sub_10007A80C(a1, v4, v5, v7, v6);
}

uint64_t sub_10008CA60()
{
  uint64_t v2 = *(void *)(v0 + 32);
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *long long v3 = v1;
  v3[1] = sub_1000184D8;
  v3[2] = v2;
  return _swift_task_switch(sub_100076C50, 0, 0);
}

uint64_t sub_10008CB08()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008CB44()
{
  uint64_t v2 = *(void *)(v0 + 32);
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *long long v3 = v1;
  v3[1] = sub_1000184D8;
  v3[2] = v2;
  return _swift_task_switch(sub_1000767BC, 0, 0);
}

uint64_t sub_10008CBF0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  _OWORD v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100005040;
  return _swift_task_switch(sub_1000753DC, 0, 0);
}

uint64_t sub_10008CCA0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100005040;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1005A4F88 + dword_1005A4F88);
  return v6(a1, v4);
}

uint64_t sub_10008CD5C()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008CD9C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *long long v3 = v1;
  v3[1] = sub_1000184D8;
  v3[8] = v2;
  return _swift_task_switch(sub_1000744C4, 0, 0);
}

uint64_t sub_10008CE48()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008CE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100088BFC(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10008CE88()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008CE98()
{
  return sub_10008CEB0((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10008CEB0(void (*a1)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 32));
  swift_release();
  return _swift_deallocObject(v1, 48, 7);
}

uint64_t sub_10008CF08(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_1000184D8;
  return sub_10007E02C(a1, v4, v5, v7, v6);
}

uint64_t sub_10008CFCC()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1005A4FB8 + dword_1005A4FB8);
  return v6(v2, v3, v4);
}

uint64_t sub_10008D08C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(int, void *, uint64_t))((char *)&dword_1005A4FC8 + dword_1005A4FC8);
  return v6(v2, v3, v4);
}

uint64_t sub_10008D148()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008D198()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000184D8;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, uint64_t))((char *)&dword_1005A4FE8 + dword_1005A4FE8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10008D264()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(char, void *, uint64_t))((char *)&dword_1005A5008 + dword_1005A5008);
  return v6(v2, v4, v3);
}

uint64_t sub_10008D328()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1005A5030 + dword_1005A5030);
  return v6(v2, v3, v4);
}

uint64_t sub_10008D3E8()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1005A5050 + dword_1005A5050);
  return v6(v2, v3, v4);
}

uint64_t sub_10008D4A8()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1005A5070 + dword_1005A5070);
  return v6(v2, v3, v4);
}

uint64_t sub_10008D564()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008D5AC(uint64_t a1)
{
  long long v7 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  *(void *)(v5 + _Block_object_dispose(&a9, 8) = sub_1000184D8;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_100078808, 0, 0);
}

uint64_t sub_10008D674()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008D6BC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000184D8;
  long long v7 = (uint64_t (*)(uint64_t, void *, const void *, uint64_t))((char *)&dword_1005A50A0 + dword_1005A50A0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10008D784(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008D7CC()
{
  swift_unknownObjectRelease();

  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008D814(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000184D8;
  return sub_100077F34(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10008D8E0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1005A50D8 + dword_1005A50D8);
  return v6(v2, v3, v4);
}

uint64_t sub_10008D99C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008D9AC(void *a1)
{
  return sub_100076F34(a1, *(void *)(v1 + 16));
}

uint64_t sub_10008D9B4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008D9C4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v6, v5);
}

void sub_10008DA60(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void **)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_100077368(a1, a2, a3, v3 + v8, v9);
}

uint64_t sub_10008DB14()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008DB24()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10008DB74()
{
  uint64_t v2 = *(void *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + _Block_object_dispose(&a9, 8) = sub_1000184D8;
  *(void *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 16) = v6;
  return _swift_task_switch(sub_100076544, v2, 0);
}

uint64_t sub_10008DC40()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008DC88()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  long long v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1005A5118 + dword_1005A5118);
  return v6(v2, v3, v4);
}

uint64_t sub_10008DD48()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008DD88()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000184D8;
  long long v6 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_1005A5138 + dword_1005A5138);
  return v6(v2, v3, v4);
}

uint64_t sub_10008DE48()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008DE90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008DEA0(void *a1)
{
  return sub_100074D6C(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10008DEAC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008DEBC()
{
  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_10008DECC(void *a1)
{
  return sub_100075018(a1);
}

uint64_t sub_10008DED4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008DEE4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008DEF4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100074FA8(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10008DEFC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008DF10()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000184D8;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1005A5168 + dword_1005A5168);
  return v5(v2, v3);
}

uint64_t sub_10008DFC8()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008E008()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000184D8;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1005A5188 + dword_1005A5188);
  return v5(v2, v3);
}

id sub_10008E190()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CrashCoordinator()) init];
  qword_1005B1510 = (uint64_t)result;
  return result;
}

id sub_10008E21C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = __chkstk_darwin(v2);
  long long v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(a1, "error", v4);
  if (result)
  {
    uint64_t v8 = result;
    static Logger.appUsage.getter();
    id v9 = v8;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = v16;
      *(_DWORD *)uint64_t v12 = 136315650;
      uint64_t v17 = sub_1000F7290(0xD000000000000020, 0x800000010044DDB0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v17 = sub_1000F7290(0xD000000000000022, 0x800000010044DDE0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      uint64_t v17 = sub_1000F7290(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s:%s: Biome query completed with error - %s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

id sub_10008E4DC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v48 - v10;
  id result = objc_msgSend(a1, "eventBody", v9);
  if (result)
  {
    uint64_t v13 = result;
    [a1 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)();
    id v14 = [v13 bundleID];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v55 = v17;
      uint64_t v56 = v16;

      id v18 = [v13 appVersion];
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v53 = v21;
        uint64_t v54 = v20;
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v54 = 0;
      }
      id v22 = [v13 bundleVersion];
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v51 = v25;
        uint64_t v52 = v24;
      }
      else
      {
        uint64_t v51 = 0;
        uint64_t v52 = 0;
      }
      uint64_t v26 = (void *)(a2 + 16);
      uint64_t v27 = *(void (**)(unsigned char *, char *, uint64_t))(v5 + 16);
      uint64_t v58 = v4;
      uint64_t v50 = v27;
      v27(v7, v11, v4);
      id v28 = [v13 incidentID];
      uint64_t v57 = v11;
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v31;
        uint64_t v49 = v30;
      }
      else
      {
        uint64_t v48 = 0;
        uint64_t v49 = 0;
      }
      unsigned __int8 v32 = objc_msgSend(v13, "isBeta", v48, v49);
      unsigned __int8 v33 = [v13 isFirstParty];
      uint64_t v34 = (objc_class *)type metadata accessor for CrashEvent();
      char v35 = objc_allocWithZone(v34);
      unsigned int v36 = (uint64_t *)&v35[OBJC_IVAR____TtC9appstored10CrashEvent_appVersion];
      uint64_t v37 = v53;
      *unsigned int v36 = v54;
      v36[1] = v37;
      uint64_t v38 = (uint64_t *)&v35[OBJC_IVAR____TtC9appstored10CrashEvent_bundleID];
      uint64_t v39 = v55;
      *uint64_t v38 = v56;
      v38[1] = v39;
      long long v40 = (uint64_t *)&v35[OBJC_IVAR____TtC9appstored10CrashEvent_bundleVersion];
      uint64_t v41 = v51;
      uint64_t *v40 = v52;
      v40[1] = v41;
      uint64_t v42 = v58;
      v50(&v35[OBJC_IVAR____TtC9appstored10CrashEvent_date], v7, v58);
      uint64_t v43 = (uint64_t *)&v35[OBJC_IVAR____TtC9appstored10CrashEvent_incidentID];
      uint64_t v44 = v48;
      *uint64_t v43 = v49;
      v43[1] = v44;
      v35[OBJC_IVAR____TtC9appstored10CrashEvent_isBeta] = v32;
      v35[OBJC_IVAR____TtC9appstored10CrashEvent_isSystem] = v33;
      v59.receiver = v35;
      v59.super_class = v34;
      id v45 = objc_msgSendSuper2(&v59, "init");
      os_log_type_t v46 = *(void (**)(char *, uint64_t))(v5 + 8);
      v46(v7, v42);
      swift_beginAccess();
      id v47 = v45;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

      return (id)((uint64_t (*)(char *, uint64_t))v46)(v57, v42);
    }
    else
    {

      return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
  }
  return result;
}

id sub_10008EA18()
{
  uint64_t v1 = OBJC_IVAR____TtC9appstored16CrashCoordinator_appCrashStream;
  uint64_t v2 = v0;
  id v3 = [(id)BiomeLibrary() OSAnalytics];
  swift_unknownObjectRelease();
  id v4 = [v3 Stability];
  swift_unknownObjectRelease();
  id v5 = [v4 Crash];
  swift_unknownObjectRelease();
  *(void *)&v0[v1] = v5;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CrashCoordinator();
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t sub_10008EAF4(void *a1, uint64_t a2, const void *a3, void *a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v8 = type metadata accessor for Date();
  v4[4] = v8;
  v4[5] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v4[6] = v9;
  v4[7] = _Block_copy(a3);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = (uint64_t (*)(uint64_t))((char *)&dword_1005A5240 + dword_1005A5240);
  id v10 = a1;
  a4;
  os_log_type_t v11 = (void *)swift_task_alloc();
  v4[8] = v11;
  *os_log_type_t v11 = v4;
  v11[1] = sub_10008EC44;
  return v13(v9);
}

uint64_t sub_10008EC44()
{
  uint64_t v1 = *(void (***)(void, void))(*v0 + 56);
  uint64_t v2 = *(void *)(*v0 + 48);
  uint64_t v3 = *(void *)(*v0 + 40);
  uint64_t v4 = *(void *)(*v0 + 32);
  id v5 = *(void **)(*v0 + 24);
  uint64_t v6 = *(void **)(*v0 + 16);
  uint64_t v10 = *v0;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  type metadata accessor for CrashEvent();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v10 + 8);
  return v8();
}

id sub_10008EE5C(uint64_t a1)
{
  return sub_10008F040(a1, type metadata accessor for CrashCoordinator);
}

uint64_t type metadata accessor for CrashCoordinator()
{
  return self;
}

id sub_10008EF68(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + *a3 + 8))
  {
    swift_bridgeObjectRetain();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  return v3;
}

id sub_10008F024()
{
  return sub_10008F040(0, type metadata accessor for CrashEvent);
}

id sub_10008F040(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10008F138()
{
  return type metadata accessor for CrashEvent();
}

uint64_t type metadata accessor for CrashEvent()
{
  uint64_t result = qword_1005A5220;
  if (!qword_1005A5220) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008F18C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10008F240()
{
  _Block_release(*(const void **)(v0 + 32));
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008F290()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  id v5 = (const void *)v0[4];
  objc_super v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100005040;
  objc_super v7 = (uint64_t (*)(void *, uint64_t, const void *, void *))((char *)&dword_1005A5230 + dword_1005A5230);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10008F358(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  sub_10001644C((uint64_t *)&unk_1005A4E20);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_10008F3FC, 0, 0);
}

uint64_t sub_10008F3FC()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  sub_10008F6EC();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v3, v5);
  objc_super v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v7(v2, 0, 1, v5);
  v7(v1, 1, 1, v5);
  id v8 = sub_1000CD958(v2, v1, 5000, 1000, 0);
  id v9 = [*(id *)(v4 + OBJC_IVAR____TtC9appstored16CrashCoordinator_appCrashStream) publisherWithOptions:v8];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  v0[6] = sub_10008E21C;
  v0[7] = 0;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000CDAD8;
  v0[5] = &unk_100514CB8;
  uint64_t v11 = _Block_copy(v0 + 2);
  v0[12] = sub_10008F764;
  v0[13] = v10;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256;
  v0[10] = sub_100038D4C;
  v0[11] = &unk_100514CE0;
  uint64_t v12 = _Block_copy(v0 + 8);
  swift_retain();
  swift_release();
  id v13 = [v9 sinkWithCompletion:v11 receiveInput:v12];

  _Block_release(v12);
  _Block_release(v11);

  swift_beginAccess();
  uint64_t v14 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
  return v15(v14);
}

unint64_t sub_10008F6EC()
{
  unint64_t result = qword_1005A5248;
  if (!qword_1005A5248)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005A5248);
  }
  return result;
}

uint64_t sub_10008F72C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10008F764(void *a1)
{
  return sub_10008E4DC(a1, v1);
}

BOOL static ASDInstallAttributionVersion.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

unint64_t sub_10008F784()
{
  unint64_t result = qword_1005A5250;
  if (!qword_1005A5250)
  {
    type metadata accessor for ASDInstallAttributionVersion(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A5250);
  }
  return result;
}

BOOL sub_10008F7DC(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_10008F7F0(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10008F804(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10008F818(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_10008F884(void *a1)
{
  uint64_t result = (uint64_t)[a1 bundleIdentifier];
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    swift_bridgeObjectRelease();
    uint64_t v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      id v8 = [a1 typeForInstallMachinery];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (v12)
        {
          if (v10 == v13 && v12 == v14)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = 0;
            if ((v16 & 1) == 0) {
              return result;
            }
          }
          if (([a1 isProfileValidated] & 1) == 0)
          {
            id v17 = [a1 iTunesMetadata];
            id v18 = [v17 distributorInfo];

            id v19 = [v18 distributorID];
            if (!v19) {
              return 1;
            }

            id v20 = [a1 iTunesMetadata];
            id v21 = [v20 distributorInfo];

            id v22 = [v21 localizedDistributorName];
            if (!v22) {
              return 1;
            }

            id v23 = [a1 iTunesMetadata];
            id v24 = [v23 distributorInfo];

            id v25 = [v24 developerName];
            if (!v25) {
              return 1;
            }
          }
          return 0;
        }
      }
      else
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  return result;
}

uint64_t sub_10008FAE4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

id sub_10008FBA0(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v5, *a3);
}

uint64_t type metadata accessor for MigratorDistributorIDTask()
{
  return self;
}

uint64_t sub_1000903C4(uint64_t a1)
{
  uint64_t v2 = sub_10001644C((uint64_t *)&unk_1005A5670);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100090424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001644C(&qword_1005A5280);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001644C(&qword_1005A5288);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 numberFromString:v14];

  if (v15)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    Locale.init(identifier:)();
    static RegexComponent<>.localizedInteger(locale:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
    sub_100090780();
    sub_1000907D4();
    BidirectionalCollection<>.firstMatch<A, B>(of:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_10001644C(&qword_1005A52A0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
    {
      sub_100090830((uint64_t)v12);
      return 0;
    }
    else
    {
      Regex.Match.output.getter();
      uint64_t v18 = v22;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
      return [objc_allocWithZone((Class)NSNumber) initWithInteger:v18];
    }
  }
  return v15;
}

unint64_t sub_100090780()
{
  unint64_t result = qword_1005A5290;
  if (!qword_1005A5290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A5290);
  }
  return result;
}

unint64_t sub_1000907D4()
{
  unint64_t result = qword_1005A5298;
  if (!qword_1005A5298)
  {
    sub_10002E5A8(&qword_1005A5280);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A5298);
  }
  return result;
}

uint64_t sub_100090830(uint64_t a1)
{
  uint64_t v2 = sub_10001644C(&qword_1005A5288);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100090A74()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetricsBridge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MetricsBridge()
{
  return self;
}

void sub_100090ACC(void *a1)
{
  uint64_t v2 = sub_10001644C(&qword_1005A4640);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    type metadata accessor for Metrics();
    id v5 = a1;
    uint64_t inited = swift_initStaticObject();
    v11[3] = type metadata accessor for AppInstallationEvent();
    id v11[4] = sub_100092868();
    v11[0] = v5;
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
    sub_100040170((uint64_t)v11, (uint64_t)v10);
    uint64_t v8 = (void *)swift_allocObject();
    _OWORD v8[2] = 0;
    v8[3] = 0;
    void v8[4] = inited;
    sub_100040108(v10, (uint64_t)(v8 + 5));
    id v9 = v5;
    sub_100018FDC((uint64_t)v4, (uint64_t)&unk_1005A52E0, (uint64_t)v8);
    swift_release();
    sub_10002E618((uint64_t)v11);
  }
}

void *sub_100090C40(uint64_t a1)
{
  uint64_t v1 = 17;
  uint64_t v3 = &byte_100510630;
  while (2)
  {
    int v5 = *v3++;
    switch(v5)
    {
      case 1:
        strcpy((char *)v31, "fetchStartTime");
        HIBYTE(v31[1]) = -18;
        AnyHashable.init<A>(_:)();
        unint64_t v6 = 0x6174536863746566;
        unint64_t v8 = 0xEE00656D69547472;
        goto LABEL_24;
      case 2:
        unint64_t v6 = 0xD000000000000010;
        uint64_t v7 = "responseStartTime";
        goto LABEL_23;
      case 3:
        id v9 = "connectionStartTime";
        goto LABEL_20;
      case 4:
        v31[0] = 0x65736E6F70736572;
        v31[1] = 0xEF656D6954646E45;
        AnyHashable.init<A>(_:)();
        unint64_t v6 = 0x65736E6F70736572;
        unint64_t v8 = 0xEF656D6954646E45;
        goto LABEL_24;
      case 5:
        unint64_t v6 = 0xD000000000000013;
        uint64_t v7 = "connectionEndTime";
        goto LABEL_23;
      case 6:
        id v9 = "secureConnectionStartTime";
        goto LABEL_20;
      case 7:
        unint64_t v6 = 0xD000000000000019;
        uint64_t v7 = "domainLookupStartTime";
        goto LABEL_23;
      case 8:
        unint64_t v6 = 0xD000000000000015;
        uint64_t v7 = "domainLookupEndTime";
        goto LABEL_23;
      case 9:
        unint64_t v6 = 0xD000000000000013;
        uint64_t v7 = "requestMessageSize";
        goto LABEL_23;
      case 10:
        unint64_t v6 = 0xD000000000000012;
        uint64_t v7 = "responseMessageSize";
        goto LABEL_23;
      case 11:
        unint64_t v6 = 0xD000000000000013;
        uint64_t v7 = "connectionReused";
        goto LABEL_23;
      case 12:
        unint64_t v6 = 0xD000000000000010;
        uint64_t v7 = "xpSessionDuration";
        goto LABEL_23;
      case 13:
        id v9 = "tageCachedResponses";
LABEL_20:
        unint64_t v8 = (unint64_t)v9 | 0x8000000000000000;
        v31[0] = 0xD000000000000011;
        v31[1] = (unint64_t)v9 | 0x8000000000000000;
        AnyHashable.init<A>(_:)();
        unint64_t v6 = 0xD000000000000011;
        goto LABEL_24;
      case 14:
        unint64_t v6 = 0xD000000000000019;
        uint64_t v7 = "store_software_version_id";
        goto LABEL_23;
      case 15:
        unint64_t v6 = 0xD000000000000023;
        uint64_t v7 = "X-Apple-Store-Front";
        goto LABEL_23;
      case 16:
        strcpy((char *)v31, "statusCode");
        BYTE3(v31[1]) = 0;
        HIDWORD(v31[1]) = -369098752;
        AnyHashable.init<A>(_:)();
        unint64_t v6 = 0x6F43737574617473;
        unint64_t v8 = 0xEA00000000006564;
        goto LABEL_24;
      default:
        unint64_t v6 = 0xD000000000000015;
        uint64_t v7 = "requestStartTime";
LABEL_23:
        unint64_t v8 = (unint64_t)v7 | 0x8000000000000000;
        v31[0] = v6;
        v31[1] = (unint64_t)v7 | 0x8000000000000000;
        AnyHashable.init<A>(_:)();
LABEL_24:
        *(void *)&long long v29 = v6;
        *((void *)&v29 + 1) = v8;
        AnyHashable.init<A>(_:)();
        if (*(void *)(a1 + 16) && (unint64_t v10 = sub_100049A08((uint64_t)v31), (v11 & 1) != 0))
        {
          sub_100031C38(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v29);
        }
        else
        {
          long long v29 = 0u;
          long long v30 = 0u;
        }
        sub_10004C8A0((uint64_t)v31);
        if (*((void *)&v30 + 1))
        {
          sub_10000C948(&v29, v28);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v14 = sub_100049A08((uint64_t)v32);
          uint64_t v15 = _swiftEmptyDictionarySingleton[2];
          BOOL v16 = (v13 & 1) == 0;
          uint64_t v17 = v15 + v16;
          if (__OFADD__(v15, v16))
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            JUMPOUT(0x100091258);
          }
          char v18 = v13;
          if (_swiftEmptyDictionarySingleton[3] >= v17)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              if (v13) {
                goto LABEL_2;
              }
            }
            else
            {
              sub_1000D4054();
              if (v18) {
                goto LABEL_2;
              }
            }
          }
          else
          {
            sub_1000D17AC(v17, isUniquelyReferenced_nonNull_native);
            unint64_t v19 = sub_100049A08((uint64_t)v32);
            if ((v18 & 1) != (v20 & 1)) {
              goto LABEL_50;
            }
            unint64_t v14 = v19;
            if (v18)
            {
LABEL_2:
              uint64_t v4 = (_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v14);
              sub_10002E618((uint64_t)v4);
              sub_10000C948(v28, v4);
              goto LABEL_3;
            }
          }
          _swiftEmptyDictionarySingleton[(v14 >> 6) + 8] |= 1 << v14;
          sub_100035E00((uint64_t)v32, _swiftEmptyDictionarySingleton[6] + 40 * v14);
          sub_10000C948(v28, (_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v14));
          uint64_t v24 = _swiftEmptyDictionarySingleton[2];
          BOOL v25 = __OFADD__(v24, 1);
          uint64_t v26 = v24 + 1;
          if (v25) {
            goto LABEL_49;
          }
          _swiftEmptyDictionarySingleton[2] = v26;
LABEL_3:
          swift_bridgeObjectRelease();
          sub_10004C8A0((uint64_t)v32);
          if (!--v1) {
            return _swiftEmptyDictionarySingleton;
          }
          continue;
        }
        sub_100016714((uint64_t)&v29, &qword_1005A5660);
        swift_bridgeObjectRetain();
        unint64_t v21 = sub_100049A08((uint64_t)v32);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if (v23)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000D4054();
          }
          sub_10004C8A0(_swiftEmptyDictionarySingleton[6] + 40 * v21);
          sub_10000C948((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v21), v28);
          sub_1000B3628(v21, (uint64_t)_swiftEmptyDictionarySingleton);
          swift_bridgeObjectRelease();
        }
        else
        {
          memset(v28, 0, sizeof(v28));
        }
        sub_10004C8A0((uint64_t)v32);
        sub_100016714((uint64_t)v28, &qword_1005A5660);
        if (--v1) {
          continue;
        }
        return _swiftEmptyDictionarySingleton;
    }
  }
}

void *sub_10009129C(void *a1)
{
  uint64_t v2 = sub_10001644C((uint64_t *)&unk_1005A5670);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v55 - v6;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v55 - v14;
  unint64_t result = objc_msgSend(a1, "loadURLEventDictionary", v13);
  if (!result) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v19 = sub_100090C40(v18);
  swift_bridgeObjectRelease();
  uint64_t v61 = v19;
  id v20 = [a1 URLResponse];
  if (v20)
  {
    unint64_t v21 = v20;
    id v22 = [v20 URL];

    if (v22)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
    }
    sub_100030134((uint64_t)v4, (uint64_t)v7, (uint64_t *)&unk_1005A5670);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v7, v8);
      *(void *)&long long v58 = 0x5574736575716572;
      *((void *)&v58 + 1) = 0xEA00000000006C72;
      AnyHashable.init<A>(_:)();
      URL._bridgeToObjectiveC()(v23);
      BOOL v25 = v24;
      id v26 = sub_10028937C(v24);

      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = URL.absoluteString.getter();
      uint64_t v29 = v28;
      long long v30 = *(void (**)(char *, uint64_t))(v9 + 8);
      v30(v11, v8);
      objc_super v59 = &type metadata for String;
      *(void *)&long long v58 = v27;
      *((void *)&v58 + 1) = v29;
      sub_10000C948(&v58, v57);
      uint64_t v31 = v61;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v56 = v31;
      sub_1000D2C38(v57, (uint64_t)v60, isUniquelyReferenced_nonNull_native);
      uint64_t v61 = v56;
      swift_bridgeObjectRelease();
      sub_10004C8A0((uint64_t)v60);
      v30(v15, v8);
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  sub_100016714((uint64_t)v7, (uint64_t *)&unk_1005A5670);
LABEL_10:
  id v33 = [a1 URLResponse];
  if (v33)
  {
    uint64_t v34 = v33;
    self;
    uint64_t v35 = swift_dynamicCastObjCClass();
    if (v35)
    {
      unsigned int v36 = (void *)v35;
      *(void *)&long long v58 = 0xD000000000000010;
      *((void *)&v58 + 1) = 0x800000010044DEC0;
      AnyHashable.init<A>(_:)();
      NSString v37 = String._bridgeToObjectiveC()();
      id v38 = [v36 valueForHTTPHeaderField:v37];

      if (v38)
      {
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;

        objc_super v59 = &type metadata for String;
        *(void *)&long long v58 = v39;
        *((void *)&v58 + 1) = v41;
        sub_10000C948(&v58, v57);
        uint64_t v42 = v61;
        char v43 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = v42;
        sub_1000D2C38(v57, (uint64_t)v60, v43);
        uint64_t v61 = v56;
        swift_bridgeObjectRelease();
        sub_10004C8A0((uint64_t)v60);
      }
      else
      {
        sub_1000B2CF0((uint64_t)v60, &v58);
        sub_10004C8A0((uint64_t)v60);
        sub_100016714((uint64_t)&v58, &qword_1005A5660);
      }
    }
  }
  id v44 = [a1 purchase];
  if (v44)
  {
    id v45 = v44;
    id v46 = [v44 additionalHeaders];

    if (v46)
    {
      uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v47 + 16) && (unint64_t v48 = sub_100049A4C(0x6567412D72657355, 0xEA0000000000746ELL), (v49 & 1) != 0))
      {
        uint64_t v50 = (uint64_t *)(*(void *)(v47 + 56) + 16 * v48);
        uint64_t v52 = *v50;
        uint64_t v51 = v50[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)&long long v58 = 0x6E65674172657375;
        *((void *)&v58 + 1) = 0xE900000000000074;
        AnyHashable.init<A>(_:)();
        objc_super v59 = &type metadata for String;
        *(void *)&long long v58 = v52;
        *((void *)&v58 + 1) = v51;
        sub_10000C948(&v58, v57);
        uint64_t v53 = v61;
        char v54 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = v53;
        sub_1000D2C38(v57, (uint64_t)v60, v54);
        uint64_t v61 = v56;
        swift_bridgeObjectRelease();
        sub_10004C8A0((uint64_t)v60);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  return v61;
}

void sub_1000918F0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10001644C((uint64_t *)&unk_1005A5670);
  __chkstk_darwin(v8 - 8);
  uint64_t v123 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v127 = (char *)&v116 - v11;
  __chkstk_darwin(v12);
  uint64_t v128 = (char *)&v116 - v13;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v124 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v125 = (char *)&v116 - v18;
  uint64_t v19 = sub_10001644C(&qword_1005A52D0);
  __chkstk_darwin(v19 - 8);
  __chkstk_darwin(v20);
  id v126 = (char *)&v116 - v21;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v116 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v116 - v26;
  __chkstk_darwin(v28);
  long long v30 = (char *)&v116 - v29;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v116 - v33;
  if (!a2) {
    return;
  }
  uint64_t v119 = v32;
  uint64_t v120 = v15;
  uint64_t v121 = v14;
  id v35 = objc_allocWithZone((Class)AMSMetricsLoadURLContext);
  id v36 = a2;
  id v130 = a1;
  id v122 = v36;
  id v37 = objc_msgSend(v35, "initWithTask:metrics:", a1);
  self;
  id v38 = sub_10030B11C();
  [v37 setBag:v38];

  if (a3) {
    uint64_t v39 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    uint64_t v39 = 0;
  }
  [v37 setError:v39];

  [v37 setSession:a4];
  id v40 = objc_allocWithZone((Class)AMSMetricsLoadURLEvent);
  id v117 = v37;
  id v116 = [v40 initWithContext:v37];
  id v41 = [v116 dictionaryForPosting];
  uint64_t v42 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  char v43 = sub_100090C40(v42);
  swift_bridgeObjectRelease();
  uint64_t v136 = v43;
  v133.value._countAndFlagsBits = 0x6E65674172657375;
  v133.value._object = (void *)0xE900000000000074;
  AnyHashable.init<A>(_:)();
  id v44 = [v130 currentRequest];
  if (v44)
  {
    id v45 = v44;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v46 = type metadata accessor for URLRequest();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v30, 0, 1, v46);
  }
  else
  {
    uint64_t v46 = type metadata accessor for URLRequest();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v30, 1, 1, v46);
  }
  sub_100030134((uint64_t)v30, (uint64_t)v34, &qword_1005A52D0);
  type metadata accessor for URLRequest();
  uint64_t v47 = *(void *)(v46 - 8);
  unint64_t v129 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  if (v129(v34, 1, v46) == 1)
  {
    sub_100016714((uint64_t)v34, &qword_1005A52D0);
  }
  else
  {
    v48._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String_optional v49 = URLRequest.value(forHTTPHeaderField:)(v48);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v46);
    if (v49.value._object)
    {
      *((void *)&v134 + 1) = &type metadata for String;
      Swift::String_optional v133 = v49;
      sub_10000C948(&v133, v132);
      uint64_t v50 = v136;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v131 = v50;
      sub_1000D2C38(v132, (uint64_t)v135, isUniquelyReferenced_nonNull_native);
      uint64_t v136 = v131;
      swift_bridgeObjectRelease();
      sub_10004C8A0((uint64_t)v135);
      goto LABEL_14;
    }
  }
  sub_1000B2CF0((uint64_t)v135, &v133);
  sub_10004C8A0((uint64_t)v135);
  sub_100016714((uint64_t)&v133, &qword_1005A5660);
LABEL_14:
  id v52 = [v130 currentRequest];
  if (v52)
  {
    uint64_t v53 = v52;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    char v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
    uint64_t v55 = v24;
    uint64_t v56 = 0;
  }
  else
  {
    char v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
    uint64_t v55 = v24;
    uint64_t v56 = 1;
  }
  unint64_t v118 = v54;
  v54((uint64_t)v55, v56, 1, v46);
  sub_100030134((uint64_t)v24, (uint64_t)v27, &qword_1005A52D0);
  if (v129(v27, 1, v46) == 1)
  {
    sub_100016714((uint64_t)v27, &qword_1005A52D0);
  }
  else
  {
    v57._countAndFlagsBits = 0xD000000000000013;
    v57._object = (void *)0x800000010044DF00;
    Swift::String_optional v58 = URLRequest.value(forHTTPHeaderField:)(v57);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v46);
    if (v58.value._object)
    {
      v133.value._countAndFlagsBits = 0xD000000000000010;
      v133.value._object = (void *)0x800000010044DEC0;
      AnyHashable.init<A>(_:)();
      *((void *)&v134 + 1) = &type metadata for String;
      Swift::String_optional v133 = v58;
      sub_10000C948(&v133, v132);
      objc_super v59 = v136;
      char v60 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v131 = v59;
      sub_1000D2C38(v132, (uint64_t)v135, v60);
      uint64_t v136 = v131;
      swift_bridgeObjectRelease();
      sub_10004C8A0((uint64_t)v135);
      uint64_t v61 = v120;
      uint64_t v63 = (uint64_t)v127;
      uint64_t v62 = (uint64_t)v128;
      id v64 = v130;
      uint64_t v65 = (uint64_t)v126;
      goto LABEL_29;
    }
  }
  v133.value._countAndFlagsBits = 0xD000000000000010;
  v133.value._object = (void *)0x800000010044DEC0;
  AnyHashable.init<A>(_:)();
  id v64 = v130;
  id v66 = [v130 response];
  uint64_t v65 = (uint64_t)v126;
  if (!v66) {
    goto LABEL_27;
  }
  uint64_t v67 = v66;
  id v68 = [v66 _allHTTPHeaderFieldsAsArrays];

  if (!v68) {
    goto LABEL_27;
  }
  uint64_t v69 = sub_10001644C(&qword_1005A4EE8);
  uint64_t v70 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v70 + 16) || (unint64_t v71 = sub_100049A4C(0xD00000000000001BLL, 0x800000010044DEE0), (v72 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_27:
    sub_1000B2CF0((uint64_t)v135, &v133);
    sub_10004C8A0((uint64_t)v135);
    sub_100016714((uint64_t)&v133, &qword_1005A5660);
    goto LABEL_28;
  }
  uint64_t v73 = *(void *)(*(void *)(v70 + 56) + 8 * v71);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)&v134 + 1) = v69;
  v133.value._countAndFlagsBits = v73;
  sub_10000C948(&v133, v132);
  unint64_t v74 = v136;
  char v75 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v131 = v74;
  sub_1000D2C38(v132, (uint64_t)v135, v75);
  uint64_t v136 = v131;
  swift_bridgeObjectRelease();
  sub_10004C8A0((uint64_t)v135);
LABEL_28:
  uint64_t v61 = v120;
  uint64_t v63 = (uint64_t)v127;
  uint64_t v62 = (uint64_t)v128;
LABEL_29:
  id v76 = [v64 currentRequest];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = v119;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = 1;
    uint64_t v78 = v119;
  }
  v118(v78, v79, 1, v46);
  sub_100030134(v78, v65, &qword_1005A52D0);
  if (v129((char *)v65, 1, v46) == 1)
  {
    sub_100016714(v65, &qword_1005A52D0);
    uint64_t v80 = v121;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v63, 1, 1, v121);
    unint64_t v81 = v122;
  }
  else
  {
    URLRequest.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v65, v46);
    id v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    uint64_t v80 = v121;
    int v83 = v82(v63, 1, v121);
    unint64_t v81 = v122;
    if (v83 != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v62, v63, v80);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v80);
      goto LABEL_43;
    }
  }
  id v84 = [v64 response];
  if (v84)
  {
    uint64_t v85 = v84;
    id v86 = [v84 URL];

    if (v86)
    {
      uint64_t v87 = (uint64_t)v123;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v88 = 0;
    }
    else
    {
      uint64_t v88 = 1;
      uint64_t v87 = (uint64_t)v123;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v87, v88, 1, v80);
    sub_100030134(v87, v62, (uint64_t *)&unk_1005A5670);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v62, 1, 1, v80);
  }
  sub_100016714(v63, (uint64_t *)&unk_1005A5670);
  id v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
LABEL_43:
  if (v82(v62, 1, v80) == 1)
  {
    sub_100016714(v62, (uint64_t *)&unk_1005A5670);
  }
  else
  {
    uint64_t v89 = v125;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v125, v62, v80);
    v133.value._countAndFlagsBits = 0x5574736575716572;
    v133.value._object = (void *)0xEA00000000006C72;
    AnyHashable.init<A>(_:)();
    URL._bridgeToObjectiveC()(v90);
    uint64_t v92 = v91;
    id v93 = sub_10028937C(v91);

    uint64_t v94 = v124;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v95 = URL.absoluteString.getter();
    id v97 = v96;
    Class v98 = *(void (**)(char *, uint64_t))(v61 + 8);
    v98(v94, v80);
    *((void *)&v134 + 1) = &type metadata for String;
    v133.value._countAndFlagsBits = v95;
    v133.value._object = v97;
    sub_10000C948(&v133, v132);
    NSString v99 = v136;
    char v100 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v131 = v99;
    sub_1000D2C38(v132, (uint64_t)v135, v100);
    uint64_t v136 = v131;
    swift_bridgeObjectRelease();
    sub_10004C8A0((uint64_t)v135);
    v98(v89, v80);
  }
  v133.value._countAndFlagsBits = 0x506B726F7774656ELL;
  v133.value._object = (void *)0xEF6C6F636F746F72;
  AnyHashable.init<A>(_:)();
  uint64_t v101 = v136;
  if (v136[2] && (unint64_t v102 = sub_100049A08((uint64_t)v135), (v103 & 1) != 0))
  {
    sub_100031C38(v101[7] + 32 * v102, (uint64_t)&v133);
  }
  else
  {
    Swift::String_optional v133 = (Swift::String_optional)0;
    long long v134 = 0u;
  }
  sub_10004C8A0((uint64_t)v135);
  uint64_t v104 = *((void *)&v134 + 1);
  sub_100016714((uint64_t)&v133, &qword_1005A5660);
  if (v104) {
    goto LABEL_51;
  }
  id v105 = [v81 transactionMetrics];
  sub_100092828();
  unint64_t v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v106 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v115 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v115) {
      goto LABEL_54;
    }
LABEL_61:

    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_61;
  }
LABEL_54:
  if ((v106 & 0xC000000000000001) != 0)
  {
    id v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v107 = *(id *)(v106 + 32);
  }
  uint64_t v108 = v107;
  swift_bridgeObjectRelease();
  id v109 = [v108 networkProtocolName];

  if (v109)
  {
    uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v112 = v111;

    v133.value._countAndFlagsBits = 0x506B726F7774656ELL;
    v133.value._object = (void *)0xEF6C6F636F746F72;
    AnyHashable.init<A>(_:)();
    *((void *)&v134 + 1) = &type metadata for String;
    v133.value._countAndFlagsBits = v110;
    v133.value._object = v112;
    sub_10000C948(&v133, v132);
    uint64_t v113 = v136;
    char v114 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v131 = v113;
    sub_1000D2C38(v132, (uint64_t)v135, v114);
    uint64_t v136 = v131;
    swift_bridgeObjectRelease();
    sub_10004C8A0((uint64_t)v135);
LABEL_51:

    return;
  }
}

unint64_t sub_100092828()
{
  unint64_t result = qword_1005A4158;
  if (!qword_1005A4158)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005A4158);
  }
  return result;
}

unint64_t sub_100092868()
{
  unint64_t result = qword_1005A52D8;
  if (!qword_1005A52D8)
  {
    type metadata accessor for AppInstallationEvent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005A52D8);
  }
  return result;
}

uint64_t sub_1000928C0()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10002E618(v0 + 40);
  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100092908(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100005040;
  return sub_1000B9E54(a1, v4, v5, v6, (uint64_t)(v1 + 5));
}

void sub_1000929CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_100092ABC()
{
  XPCDictionary.init()();
  String.init(cString:)();
  if (qword_1005A2FC0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t result = XPCDictionary.subscript.setter();
  uint64_t v2 = 15;
  if (*(void *)(v0 + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncIntervalMinutes) > 0xFuLL) {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncIntervalMinutes);
  }
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((unsigned __int128)(XPC_ACTIVITY_INTERVAL_1_MIN * (__int128)v2) >> 64 != (XPC_ACTIVITY_INTERVAL_1_MIN * v2) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_10006FABC();
  swift_bridgeObjectRetain();
  uint64_t result = XPCDictionary.subscript.setter();
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncGracePeriodMinutes);
  if (v3 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((unsigned __int128)(XPC_ACTIVITY_INTERVAL_1_MIN * (__int128)v3) >> 64 == (XPC_ACTIVITY_INTERVAL_1_MIN * v3) >> 63)
  {
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter();
    swift_bridgeObjectRetain();
    return XPCDictionary.subscript.setter();
  }
LABEL_13:
  __break(1u);
  return result;
}

const char *sub_100092DA8()
{
  return "com.apple.appstored.activities.TestFlightExtensionSyncActivity";
}

void sub_100092DBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.testFlightExtension.getter();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "TestFlightExtensionSyncActivity - run", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  self;
  uint64_t v9 = (id *)sub_10035E2CC();
  uint64_t v10 = sub_10035E520(v9);

  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  aBlock[4] = sub_1000934B0;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000929CC;
  aBlock[3] = &unk_100514D80;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v1;
  swift_release();
  sub_100368430((uint64_t)v10, v12);
  _Block_release(v12);
}

uint64_t sub_100092FD4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)&v0[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_dispatchQueue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_1000934D4;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AB758;
  aBlock[3] = &unk_100514DD0;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_1000937FC(&qword_1005A4470, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10001644C(&qword_1005A4478);
  sub_100052620(&qword_1005A4480, &qword_1005A4478);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void sub_1000932C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_serviceHost);
  v3[4] = nullsub_24;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1000929CC;
  v3[3] = &unk_100514DF8;
  uint64_t v2 = _Block_copy(v3);
  sub_100404494(v1, v2);
  _Block_release(v2);
}

uint64_t sub_1000933A0()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TestFlightExtensionSyncActivity()
{
  return self;
}

uint64_t sub_100093478()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000934B0()
{
  return sub_100092FD4();
}

void sub_1000934D4()
{
  sub_1000932C8(*(void *)(v0 + 16));
}

id sub_1000934DC(void *a1)
{
  uint64_t v14 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncIntervalMinutes] = 0;
  *(void *)&v1[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncGracePeriodMinutes] = 0;
  uint64_t v13 = OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_dispatchQueue;
  sub_1000937BC();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  uint64_t v8 = v1;
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = _swiftEmptyArrayStorage;
  sub_1000937FC(&qword_1005A44A0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10001644C(&qword_1005A44A8);
  sub_100052620(&qword_1005A44B0, &qword_1005A44A8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v1[v13] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v8[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_deadline] = 0;
  uint64_t v9 = &v8[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_descriptiveName];
  *(void *)uint64_t v9 = 0xD000000000000012;
  *((void *)v9 + 1) = 0x800000010044E270;
  uint64_t v10 = v14;
  *(void *)&v8[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_serviceHost] = v14;
  id v11 = v10;

  v16.receiver = v8;
  v16.super_class = ObjectType;
  return objc_msgSendSuper2(&v16, "init");
}

unint64_t sub_1000937BC()
{
  unint64_t result = qword_1005A4498;
  if (!qword_1005A4498)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005A4498);
  }
  return result;
}

uint64_t sub_1000937FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100093B64()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MediaAPIUpdateEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100093B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_100093BA4()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_100093CBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  if (*(_DWORD *)(v9 + 84)) {
    size_t v11 = *(void *)(v9 + 64);
  }
  else {
    size_t v11 = *(void *)(v9 + 64) + 1;
  }
  if ((v10 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v9 + 80) | v7) & 0x100000) != 0
    || v11
     + ((v10
       + ((v8 + ((v7 + 40) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
       + 8) & ~v10) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    uint64_t v15 = v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    objc_super v16 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *objc_super v16 = *v17;
    uint64_t v18 = (_OWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (_OWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    unint64_t v20 = ((unint64_t)v18 + v7 + 16) & ~(unint64_t)v7;
    unint64_t v21 = ((unint64_t)v19 + v7 + 16) & ~(unint64_t)v7;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v20, v21, v5);
    uint64_t v22 = (void *)((v8 + v20) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = (void *)((v8 + v21) & 0xFFFFFFFFFFFFFFF8);
    void *v22 = *v23;
    uint64_t v24 = (void *)(((unint64_t)v22 + v10 + 8) & ~v10);
    uint64_t v25 = (const void *)(((unint64_t)v23 + v10 + 8) & ~v10);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v25, 1, AssociatedTypeWitness))
    {
      memcpy(v24, v25, v11);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v24, v25, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v24, 0, 1, AssociatedTypeWitness);
    }
    return a1;
  }
  return (uint64_t *)v15;
}

uint64_t sub_100093F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t, void))(v2 + 8))(v4, *(void *)(a2 + 16));
  unint64_t v5 = (*(void *)(v3 + 56) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = v7;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, AssociatedTypeWitness);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);
    return v10(v8, AssociatedTypeWitness);
  }
  return result;
}

_OWORD *sub_1000940A8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = (_OWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (_OWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t, void))(v8 + 16))(v11, v12, *(void *)(a3 + 16));
  uint64_t v13 = *(void *)(v9 + 48) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)(((unint64_t)v14 + v18 + 8) & ~v18);
  unint64_t v20 = (const void *)(((unint64_t)v15 + v18 + 8) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v20, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v17 + 84)) {
      size_t v21 = *(void *)(v17 + 64);
    }
    else {
      size_t v21 = *(void *)(v17 + 64) + 1;
    }
    memcpy(v19, v20, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v19, v20, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_10009426C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  unint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  v6[1] = v7[1];
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t, void))(v8 + 24))(v11, v12, *(void *)(a3 + 16));
  uint64_t v13 = *(void *)(v9 + 40) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)(((unint64_t)v14 + v18 + 8) & ~v18);
  unint64_t v20 = (void *)(((unint64_t)v15 + v18 + 8) & ~v18);
  size_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v15) = v21(v19, 1, AssociatedTypeWitness);
  int v22 = v21(v20, 1, AssociatedTypeWitness);
  if (v15)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v19, v20, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v23 = *(_DWORD *)(v17 + 84);
    size_t v24 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v19, v20, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v26 = *(void (**)(void *, uint64_t))(v17 + 8);
    uint64_t v25 = v17 + 8;
    v26(v19, AssociatedTypeWitness);
    int v23 = *(_DWORD *)(v25 + 76);
    size_t v24 = *(void *)(v25 + 56);
  }
  if (v23) {
    size_t v27 = v24;
  }
  else {
    size_t v27 = v24 + 1;
  }
  memcpy(v19, v20, v27);
  return a1;
}

_OWORD *sub_1000944B0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = (_OWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (_OWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t, void))(v8 + 32))(v11, v12, *(void *)(a3 + 16));
  uint64_t v13 = *(void *)(v9 + 32) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)(((unint64_t)v14 + v18 + 8) & ~v18);
  unint64_t v20 = (const void *)(((unint64_t)v15 + v18 + 8) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v20, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v17 + 84)) {
      size_t v21 = *(void *)(v17 + 64);
    }
    else {
      size_t v21 = *(void *)(v17 + 64) + 1;
    }
    memcpy(v19, v20, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v19, v20, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_OWORD *sub_100094674(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  v6[1] = v7[1];
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t, void))(v8 + 40))(v11, v12, *(void *)(a3 + 16));
  uint64_t v13 = *(void *)(v9 + 24) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)(((unint64_t)v14 + v18 + 8) & ~v18);
  unint64_t v20 = (void *)(((unint64_t)v15 + v18 + 8) & ~v18);
  size_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v15) = v21(v19, 1, AssociatedTypeWitness);
  int v22 = v21(v20, 1, AssociatedTypeWitness);
  if (v15)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v19, v20, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v23 = *(_DWORD *)(v17 + 84);
    size_t v24 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v19, v20, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v26 = *(void (**)(void *, uint64_t))(v17 + 8);
    uint64_t v25 = v17 + 8;
    v26(v19, AssociatedTypeWitness);
    int v23 = *(_DWORD *)(v25 + 76);
    size_t v24 = *(void *)(v25 + 56);
  }
  if (v23) {
    size_t v27 = v24;
  }
  else {
    size_t v27 = v24 + 1;
  }
  memcpy(v19, v20, v27);
  return a1;
}

uint64_t sub_1000948AC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = v8;
  int v10 = *(_DWORD *)(v8 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = *(void *)(v8 + 64);
  if (v10) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v15 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(v6 + 64) + 7;
  uint64_t v18 = v14 + 8;
  if (a2 <= v12) {
    goto LABEL_30;
  }
  uint64_t v19 = v16 + ((v18 + ((v17 + ((v13 + 40) & ~v13)) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((a2 - v12 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v22 < 2)
    {
LABEL_30:
      if (v12)
      {
        unint64_t v26 = ((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 16) & ~v13;
        if (v7 >= v11)
        {
          uint64_t v29 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
          return v29(v26, v7, v5);
        }
        else
        {
          unsigned int v27 = (*(uint64_t (**)(unint64_t))(v9 + 48))((v18 + ((v17 + v26) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
          if (v27 >= 2) {
            return v27 - 1;
          }
          else {
            return 0;
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_30;
  }
LABEL_20:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = v19;
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v12 + (v25 | v23) + 1;
}

void sub_100094B7C(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v35 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(void *)(v8 + 64) + 7;
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  size_t v19 = *(void *)(v11 + 64);
  if (v13) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v19 + 1;
  }
  size_t v21 = ((v18 + 8 + ((v17 + ((v16 + 40) & ~v16)) & 0xFFFFFFFFFFFFFFF8)) & ~v18) + v20;
  if (a3 <= v15) {
    goto LABEL_17;
  }
  if (v21 <= 3)
  {
    unsigned int v22 = ((a3 - v15 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v22))
    {
      int v10 = 4;
      if (v15 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_18;
    }
    if (v22 >= 0x100) {
      int v10 = 2;
    }
    else {
      int v10 = v22 > 1;
    }
LABEL_17:
    if (v15 >= a2) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  int v10 = 1;
  if (v15 >= a2)
  {
LABEL_25:
    uint64_t v26 = ~v18;
    switch(v10)
    {
      case 1:
        a1[v21] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v21] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v21] = 0;
        goto LABEL_29;
      default:
LABEL_29:
        if (a2)
        {
LABEL_30:
          unint64_t v27 = (((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v16 + 16) & ~v16;
          if (v9 >= v14)
          {
            uint64_t v32 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
            v32(v27, a2, v9, v7);
          }
          else
          {
            uint64_t v28 = (unsigned char *)((v18 + 8 + ((v17 + v27) & 0xFFFFFFFFFFFFFFF8)) & v26);
            if (v14 >= a2)
            {
              uint64_t v33 = *(void (**)(unint64_t, void))(v12 + 56);
              unint64_t v34 = (v18 + 8 + ((v17 + v27) & 0xFFFFFFFFFFFFFFF8)) & v26;
              v33(v34, (a2 + 1));
            }
            else
            {
              if (v20 <= 3) {
                int v29 = ~(-1 << (8 * v20));
              }
              else {
                int v29 = -1;
              }
              if (v20)
              {
                int v30 = v29 & (~v14 + a2);
                if (v20 <= 3) {
                  int v31 = v20;
                }
                else {
                  int v31 = 4;
                }
                bzero(v28, v20);
                switch(v31)
                {
                  case 2:
                    *(_WORD *)uint64_t v28 = v30;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v28 = v30;
                    _OWORD v28[2] = BYTE2(v30);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v28 = v30;
                    break;
                  default:
                    unsigned char *v28 = v30;
                    break;
                }
              }
            }
          }
        }
        break;
    }
    return;
  }
LABEL_18:
  unsigned int v23 = ~v15 + a2;
  if (v21 < 4)
  {
    int v24 = (v23 >> (8 * v21)) + 1;
    if (v21)
    {
      int v25 = v23 & ~(-1 << (8 * v21));
      bzero(a1, v21);
      if (v21 == 3)
      {
        *(_WORD *)a1 = v25;
        a1[2] = BYTE2(v25);
      }
      else if (v21 == 2)
      {
        *(_WORD *)a1 = v25;
      }
      else
      {
        *a1 = v25;
      }
    }
  }
  else
  {
    bzero(a1, v21);
    *(_DWORD *)a1 = v23;
    int v24 = 1;
  }
  switch(v10)
  {
    case 1:
      a1[v21] = v24;
      break;
    case 2:
      *(_WORD *)&a1[v21] = v24;
      break;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x100094F78);
    case 4:
      *(_DWORD *)&a1[v21] = v24;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Backoff()
{
  return sub_100094FC8();
}

uint64_t sub_100094FC8()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100094FF8()
{
  uint64_t v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  sub_100015B94(v0, v1);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCTransaction()
{
  return self;
}

uint64_t sub_100095090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000950B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
}

uint64_t sub_1000950EC()
{
  type metadata accessor for GlobalState();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v0 + 112) = &_swiftEmptySetSingleton;
  qword_1005A5490 = v0;
  return result;
}

uint64_t sub_100095200()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000952FC, 0, 0);
}

uint64_t sub_1000952FC()
{
  v0[1].opaque[0] = 0;
  v0[1].opaque[1] = 0;
  if (qword_1005A3068 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[2].opaque[1];
  uint64_t v2 = _os_activity_create((void *)&_mh_execute_header, "appstored/AppDownloadDoneTask", (os_activity_t)qword_1005A5498, OS_ACTIVITY_FLAG_DEFAULT);
  v0[5].opaque[0] = (uint64_t)v2;
  os_activity_scope_enter(v2, v0 + 1);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC9appstored19AppDownloadDoneTask_bag);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC9appstored19AppDownloadDoneTask_store);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5].opaque[1] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100095448;
  return sub_10009591C(v3, v4);
}

uint64_t sub_100095448()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000956E8;
  }
  else {
    uint64_t v2 = sub_100095588;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100095588()
{
  static Logger.appInstall.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "AppDownloadDoneTask completed successfully", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[4].opaque[1];
  uint64_t v5 = v0[3].opaque[1];
  uint64_t v6 = v0[3].opaque[0];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  os_activity_scope_leave(v0 + 1);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0->opaque[1];
  return v7();
}

uint64_t sub_1000956E8()
{
  static Logger.appInstall.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2].opaque[0] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "AppDownloadDoneTask ended in error: %{public}@", v3, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[3].opaque[1];
  uint64_t v6 = v0[4].opaque[0];
  uint64_t v8 = v0[3].opaque[0];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_willThrow();
  os_activity_scope_leave(v0 + 1);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0->opaque[1];
  return v9();
}

uint64_t sub_10009591C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  v2[20] = a2;
  v2[21] = ObjectType;
  v2[19] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  uint64_t v9 = (char *)&dword_1005A55D8 + dword_1005A55D8;
  uint64_t v7 = (void *)swift_task_alloc();
  v2[26] = v7;
  void *v7 = v2;
  v7[1] = sub_100095A60;
  return ((uint64_t (*)(uint64_t (*)@<X0>(void *@<X0>, void *@<X8>), void))v9)(sub_1000967C8, 0);
}

uint64_t sub_100095A60(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100095B60, 0, 0);
}

uint64_t sub_100095B60()
{
  if (*(void *)(v0[27] + 16))
  {
    if (qword_1005A3060 != -1) {
      swift_once();
    }
    uint64_t v1 = qword_1005A5490;
    v0[28] = qword_1005A5490;
    return _swift_task_switch(sub_100095CF0, v1, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    static Logger.appInstall.getter();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "No work to do", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = v0[23];
    uint64_t v5 = v0[24];
    uint64_t v7 = v0[22];

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100095CF0()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_retain();
  *(void *)(v0 + 232) = sub_10009B248(v1);
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_100095D88, 0, 0);
}

uint64_t sub_100095D88()
{
  if (*(void *)(v0[29] + 16))
  {
    uint64_t v1 = (void *)v0[19];
    v0[2] = v0;
    v0[7] = v0 + 18;
    v0[3] = sub_100095F74;
    uint64_t v2 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100028428;
    v0[13] = &unk_100514EF0;
    v0[14] = v2;
    [v1 createSnapshotWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    static Logger.appInstall.getter();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No work to do", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = v0[25];
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[23];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100095F74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100096538;
  }
  else
  {
    uint64_t v2 = sub_10009608C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10009608C()
{
  uint64_t v1 = v0[29];
  uint64_t v3 = (void *)v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = (void *)v0[18];
  v0[31] = v4;
  sub_10001644C(&qword_1005A4F70);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100488EC0;
  *(void *)(v5 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 4_Block_object_dispose(&a9, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 56) = v7;
  *(void *)(v5 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 72) = v8;
  *(void *)(v5 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 8_Block_object_dispose(&a9, 8) = v9;
  *(void *)(v5 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 104) = v10;
  uint64_t v11 = (void *)swift_allocObject();
  v0[32] = v11;
  v11[2] = v3;
  v11[3] = v5;
  id v11[4] = v4;
  void v11[5] = v2;
  uint64_t v12 = swift_allocObject();
  v0[33] = v12;
  *(void *)(v12 + 16) = v3;
  int v13 = (void *)swift_task_alloc();
  v0[34] = v13;
  void v13[2] = v1;
  v13[3] = sub_10009B3C4;
  void v13[4] = v11;
  v13[5] = &unk_1005A55F0;
  void v13[6] = v12;
  id v14 = v3;
  id v15 = v4;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[35] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100096298;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v16, &type metadata for Int64, (char *)&type metadata for () + 8, 0, 0, &unk_1005A5600, v13, &type metadata for Int64);
}

uint64_t sub_100096298()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000963B0, 0, 0);
}

uint64_t sub_1000963B0()
{
  uint64_t v1 = qword_1005A5490;
  *(void *)(v0 + 28_Block_object_dispose(&a9, 8) = qword_1005A5490;
  return _swift_task_switch(sub_1000963D4, v1, 0);
}

uint64_t sub_1000963D4()
{
  uint64_t v1 = *(void *)(v0 + 288) + 112;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 232);
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v4 = (uint64_t *)(v2 + 32);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v5 = *v4++;
        sub_10009A16C(v5);
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000964B4, 0, 0);
}

uint64_t sub_1000964B4()
{
  uint64_t v1 = *(void **)(v0 + 248);
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100096538()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100096720(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100055EA0;
  return sub_100095200();
}

uint64_t sub_1000967C8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  int v13 = _swiftEmptyArrayStorage;
  sub_100018D68(0, (unint64_t *)&unk_1005A5690);
  id v4 = [objc_allocWithZone((Class)SQLiteQueryDescriptor) initWithEntityClass:swift_getObjCClassFromMetadata()];
  id v5 = [a1 connection];
  id v6 = [objc_allocWithZone((Class)SQLiteQuery) initOnConnection:v5 descriptor:v4];

  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &v13;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10009BB94;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_10009BBAC;
  void aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000950B8;
  aBlock[3] = &unk_100515238;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v6 enumeratePersistentIDsUsingBlock:v9];

  _Block_release(v9);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = v13;
    uint64_t result = swift_release();
    *a2 = v11;
  }
  return result;
}

uint64_t sub_1000969D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v6 = (void *)*a4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a4 = (uint64_t)v6;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000E82A8(0, v6[2] + 1, 1, v6);
    id v6 = (void *)result;
    *a4 = result;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)sub_1000E82A8((void *)(v8 > 1), v9 + 1, 1, v6);
    id v6 = (void *)result;
  }
  uint64_t v6[2] = v9 + 1;
  v6[v9 + 4] = a1;
  *a4 = (uint64_t)v6;
  return result;
}

uint64_t sub_100096A80(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  return _swift_task_switch(sub_100096AA4, 0, 0);
}

uint64_t sub_100096AA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0 + 10;
  uint64_t v5 = v1[26];
  id v4 = (void *)v1[27];
  uint64_t v6 = v1[25];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10009BA98;
  *(void *)(v8 + 24) = v7;
  v1[14] = sub_10009BB34;
  v1[15] = v8;
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 1107296256;
  v1[12] = sub_100099F38;
  v1[13] = &unk_1005151A8;
  unint64_t v9 = _Block_copy(v3);
  v1[28] = v9;
  swift_retain();
  swift_release();
  v1[2] = v1;
  v1[7] = v1 + 16;
  _OWORD v1[3] = sub_100096C6C;
  uint64_t v10 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_10009A090;
  v1[13] = &unk_1005151D0;
  v1[14] = v10;
  [v4 asyncReadUsingSession:v9 completion:v3];
  return _swift_continuation_await(v2);
}

uint64_t sub_100096C6C()
{
  return _swift_task_switch(sub_100096D4C, 0, 0);
}

uint64_t sub_100096D4C()
{
  uint64_t v1 = (const void *)v0[28];
  sub_10002E540((uint64_t)(v0 + 16), (uint64_t)(v0 + 20));
  _Block_release(v1);
  sub_10002E540((uint64_t)(v0 + 20), (uint64_t)(v0 + 10));
  sub_10001644C(&qword_1005A5660);
  sub_10001644C(&qword_1005A5688);
  swift_dynamicCast();
  uint64_t v2 = v0[24];
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_100096E14(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  return _swift_task_switch(sub_100096E38, 0, 0);
}

uint64_t sub_100096E38()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0 + 10;
  uint64_t v5 = v1[26];
  id v4 = (void *)v1[27];
  uint64_t v6 = v1[25];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10009BA98;
  *(void *)(v8 + 24) = v7;
  v1[14] = sub_10009BAD8;
  v1[15] = v8;
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 1107296256;
  v1[12] = sub_100099F38;
  v1[13] = &unk_100515118;
  unint64_t v9 = _Block_copy(v3);
  v1[28] = v9;
  swift_retain();
  swift_release();
  v1[2] = v1;
  v1[7] = v1 + 16;
  _OWORD v1[3] = sub_100097000;
  uint64_t v10 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_10009A090;
  v1[13] = &unk_100515140;
  v1[14] = v10;
  [v4 asyncReadUsingSession:v9 completion:v3];
  return _swift_continuation_await(v2);
}

uint64_t sub_100097000()
{
  return _swift_task_switch(sub_1000970E0, 0, 0);
}

uint64_t sub_1000970E0()
{
  uint64_t v1 = (const void *)v0[28];
  sub_10002E540((uint64_t)(v0 + 16), (uint64_t)(v0 + 20));
  _Block_release(v1);
  sub_10002E540((uint64_t)(v0 + 20), (uint64_t)(v0 + 10));
  sub_10001644C(&qword_1005A5660);
  sub_100018D68(0, &qword_1005A5680);
  swift_dynamicCast();
  uint64_t v2 = v0[24];
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

void *sub_1000971B4(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  long long v10[2] = a2;
  void v10[3] = a1;
  v10[4] = a3;
  void v10[5] = a4;
  v10[6] = a5;
  id v11 = a2;
  swift_bridgeObjectRetain();
  id v12 = a4;
  return &unk_1005A5650;
}

uint64_t sub_100097244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[30] = a3;
  v4[31] = a4;
  v4[28] = a1;
  v4[29] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[32] = v5;
  v4[33] = *(void *)(v5 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  return _swift_task_switch(sub_100097324, 0, 0);
}

uint64_t sub_100097324()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = swift_allocObject();
  v0[37] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005A5658 + dword_1005A5658);
  swift_bridgeObjectRetain();
  id v4 = (void *)swift_task_alloc();
  v0[38] = v4;
  *id v4 = v0;
  v4[1] = sub_100097418;
  return v6((uint64_t)sub_10009BA10, v3);
}

uint64_t sub_100097418(uint64_t a1)
{
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100097538, 0, 0);
}

uint64_t sub_100097538()
{
  uint64_t v1 = *(void **)(v0 + 248);
  id v2 = [*(id *)(v0 + 312) propertyValues];
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = sub_10009A400(v3, v1);
  *(void *)(v0 + 320) = v4;
  swift_bridgeObjectRelease();
  if (v4)
  {
    id v5 = [self defaultSession];
    id v6 = [v5 dataTaskPromiseWithRequestPromise:v4];
    *(void *)(v0 + 32_Block_object_dispose(&a9, 8) = v6;

    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 152;
    *(void *)(v0 + 24) = sub_10009781C;
    uint64_t v7 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000;
    *(void *)(v0 + 96) = sub_100028428;
    *(void *)(v0 + 104) = &unk_1005150B0;
    *(void *)(v0 + 112) = v7;
    [v6 resultWithTimeout:v0 + 80 completion:60.0];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    static Logger.appInstall.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    id v11 = *(void **)(v0 + 312);
    if (v10)
    {
      uint64_t v12 = *(void *)(v0 + 232);
      int v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int v13 = 134217984;
      *(void *)(v0 + 184) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to create request for pid=%lld", v13, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(*(void *)(v0 + 264) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 256));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v15 = *(void *)(v0 + 232);
    return v14(v15);
  }
}

uint64_t sub_10009781C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 336) = v1;
  if (v1) {
    id v2 = sub_100097B0C;
  }
  else {
    id v2 = sub_10009792C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10009792C()
{
  uint64_t v1 = *(void **)(v0 + 152);

  if ((uint64_t)[v1 responseStatusCode] > 399)
  {
    static Logger.appInstall.getter();
    id v4 = v1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    os_log_type_t v9 = *(void **)(v0 + 312);
    uint64_t v8 = *(void **)(v0 + 320);
    if (v7)
    {
      id v14 = *(void **)(v0 + 320);
      BOOL v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v10 = 134217984;
      *(void *)(v0 + 216) = [v4 responseStatusCode];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received HTTP %ld; deleting from queue", v10, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      id v4 = v8;
    }

    (*(void (**)(void, void))(*(void *)(v0 + 264) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 256));
  }
  else
  {
    uint64_t v3 = *(void **)(v0 + 312);
    id v2 = *(void **)(v0 + 320);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v12 = *(void *)(v0 + 232);
  return v11(v12);
}

uint64_t sub_100097B0C()
{
  uint64_t v1 = *(void **)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  swift_willThrow();

  *(void *)(v0 + 160) = v2;
  swift_errorRetain();
  sub_10001644C(&qword_1005A4E40);
  type metadata accessor for AMSError(0);
  if (swift_dynamicCast())
  {
    uint64_t v3 = *(void **)(v0 + 168);
    type metadata accessor for Code(0);
    *(void *)(v0 + 176) = 305;
    sub_10009BA18(&qword_1005A3320, type metadata accessor for Code);
    id v4 = v3;
    char v5 = static _ErrorCodeProtocol.~= infix(_:_:)();

    if (v5)
    {
      *(void *)(v0 + 192) = v4;
      sub_10009BA18(&qword_1005A3340, type metadata accessor for AMSError);
      uint64_t v6 = _BridgedStoredNSError.userInfo.getter();
      if (*(void *)(v6 + 16) && (unint64_t v7 = sub_100049A4C(0xD000000000000012, 0x800000010044E4F0), (v8 & 1) != 0))
      {
        sub_100031C38(*(void *)(v6 + 56) + 32 * v7, v0 + 120);
      }
      else
      {
        *(_OWORD *)(v0 + 120) = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*(void *)(v0 + 144))
      {
        uint64_t v18 = *(void **)(v0 + 312);
        uint64_t v17 = *(void **)(v0 + 320);
        sub_100016714(v0 + 120, &qword_1005A5660);

        goto LABEL_15;
      }
      if ((swift_dynamicCast() & 1) != 0 && *(void *)(v0 + 200) == 1010)
      {
        swift_errorRelease();
        static Logger.appInstall.getter();
        BOOL v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = *(void *)(v0 + 232);
          int v13 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)int v13 = 134217984;
          *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalid URL for pid=%lld: ", v13, 0xCu);
          swift_slowDealloc();
          id v14 = v4;
        }
        else
        {
          id v14 = v10;
          BOOL v10 = v4;
        }
        size_t v19 = *(void **)(v0 + 320);
        uint64_t v21 = *(void *)(v0 + 264);
        uint64_t v20 = *(void *)(v0 + 272);
        uint64_t v22 = *(void *)(v0 + 256);

        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
        swift_errorRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        unsigned int v23 = *(uint64_t (**)(uint64_t))(v0 + 8);
        uint64_t v24 = *(void *)(v0 + 232);
        return v23(v24);
      }
    }
    os_log_type_t v9 = *(void **)(v0 + 320);
  }
  else
  {
    os_log_type_t v9 = *(void **)(v0 + 320);
  }
LABEL_15:
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

void sub_100097EF0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v7 = [a1 connection];
  id v8 = [objc_allocWithZone((Class)AppDoneEntity) initWithPersistentID:a2 onConnection:v7];

  sub_10000C820(a3);
  id v9 = objc_allocWithZone((Class)SQLiteMemoryEntity);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithDatabaseEntity:v8 properties:isa];

  *a4 = v11;
}

uint64_t sub_100097FCC(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 256) = a2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = a3;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 20_Block_object_dispose(&a9, 8) = v4;
  *(void *)(v3 + 216) = *(void *)(v4 - 8);
  *(void *)(v3 + 224) = swift_task_alloc();
  *(void *)(v3 + 232) = swift_task_alloc();
  *(void *)(v3 + 240) = swift_task_alloc();
  return _swift_task_switch(sub_1000980AC, 0, 0);
}

uint64_t sub_1000980AC()
{
  int v1 = *(unsigned __int8 *)(v0 + 256);
  if (v1 == 255)
  {
    static Logger.appInstall.getter();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "No more results", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 216);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    goto LABEL_15;
  }
  if (v1)
  {
    uint64_t v17 = *(void *)(v0 + 192);
    *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v17;
    sub_10009B788(v17, 1);
    sub_10009B788(v17, 1);
    sub_10001644C(&qword_1005A4E40);
    swift_willThrowTypedImpl();
    static Logger.appInstall.getter();
    sub_10009B788(v17, 1);
    sub_10009B788(v17, 1);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    unsigned __int8 v21 = *(unsigned char *)(v0 + 256);
    uint64_t v22 = *(void *)(v0 + 192);
    if (v20)
    {
      unsigned int v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)unsigned int v23 = 138543362;
      sub_10009B788(v22, 1);
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 176) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      sub_10009B794(v22, v21);
      sub_10009B794(v22, v21);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error sending songDownloadDone: %{public}@", v23, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10009B794(v22, v21);
      sub_10009B794(v22, v21);
    }
    else
    {
      sub_10009B794(*(void *)(v0 + 192), *(unsigned char *)(v0 + 256));
      sub_10009B794(v22, v21);
      sub_10009B7AC(v22, 1);
      sub_10009B7AC(v22, 1);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  static Logger.appInstall.getter();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 192);
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v11 = 134217984;
    *(void *)(v0 + 184) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "songDownloadDone successfully processed for pid=%lld", v11, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v12 = *(void **)(v0 + 200);
  (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 208));
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v0 + 112) = sub_10009B7D0;
  *(void *)(v0 + 120) = v14;
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 1107296256;
  *(void *)(v0 + 96) = sub_10008FAE4;
  *(void *)(v0 + 104) = &unk_100515020;
  uint64_t v15 = _Block_copy((const void *)(v0 + 80));
  *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v15;
  swift_release();
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_100098600;
  uint64_t v16 = swift_continuation_init();
  *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = _NSConcreteStackBlock;
  *(void *)(v0 + 136) = 0x40000000;
  *(void *)(v0 + 144) = sub_1000987D8;
  *(void *)(v0 + 152) = &unk_100515048;
  *(void *)(v0 + 160) = v16;
  [v12 asyncModifyUsingTransaction:v15 completion:v0 + 128];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100098600()
{
  return _swift_task_switch(sub_1000986E0, 0, 0);
}

uint64_t sub_1000986E0()
{
  _Block_release(*(const void **)(v0 + 248));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10009875C(void *a1, uint64_t a2)
{
  id v3 = [a1 connection];
  id v4 = [objc_allocWithZone((Class)AppDoneEntity) initWithPersistentID:a2 onConnection:v3];

  id v5 = [v4 deleteFromDatabase];
  return v5;
}

uint64_t sub_1000987D8()
{
  return swift_continuation_resume();
}

uint64_t sub_1000987E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[24] = a6;
  v7[25] = a7;
  v7[22] = a4;
  v7[23] = a5;
  v7[20] = a2;
  v7[21] = a3;
  uint64_t v8 = type metadata accessor for Logger();
  v7[26] = v8;
  v7[27] = *(void *)(v8 - 8);
  v7[28] = swift_task_alloc();
  sub_10001644C(&qword_1005A4640);
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  v7[32] = swift_task_alloc();
  return _swift_task_switch(sub_100098900, 0, 0);
}

uint64_t sub_100098900()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 264) = v2;
  uint64_t v38 = v2;
  if (!v2)
  {
LABEL_15:
    unint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = v27;
    uint64_t v26 = sub_10001644C(&qword_1005A5628);
    *unint64_t v27 = v0;
    v27[1] = sub_100099514;
    uint64_t v25 = v0 + 144;
    goto LABEL_16;
  }
  uint64_t v37 = v1 + 32;
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v4 = *(void *)(v3 - 8);
  id v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 176);
    uint64_t v9 = *(void *)(v37 + 8 * v5);
    *(void *)(v0 + 272) = v3;
    *(void *)(v0 + 280) = v4;
    *(void *)(v0 + 28_Block_object_dispose(&a9, 8) = v36;
    *(void *)(v0 + 296) = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v36(v6, 1, 1, v3);
    uint64_t v10 = v8(v9);
    uint64_t v12 = v11;
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = 0;
    v13[3] = 0;
    void v13[4] = v10;
    v13[5] = v12;
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = 0;
    uint64_t v15 = v14 + 2;
    v14[3] = 0;
    void v14[4] = &unk_1005A5618;
    v14[5] = v13;
    sub_10009B720(v6, v7);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    *(void *)(v0 + 304) = v16;
    *(void *)(v0 + 312) = (v4 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    int v17 = v16(v7, 1, v3);
    uint64_t v18 = *(void *)(v0 + 248);
    if (v17 == 1)
    {
      sub_100016714(*(void *)(v0 + 248), &qword_1005A4640);
      if (*v15) {
        goto LABEL_5;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v18, v3);
      if (*v15)
      {
LABEL_5:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v21 = v20;
        swift_unknownObjectRelease();
        goto LABEL_8;
      }
    }
    uint64_t v19 = 0;
    uint64_t v21 = 0;
LABEL_8:
    uint64_t v22 = **(void **)(v0 + 160);
    uint64_t v23 = v21 | v19;
    if (v21 | v19)
    {
      uint64_t v23 = v0 + 16;
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v19;
      *(void *)(v0 + 40) = v21;
    }
    uint64_t v24 = *(void *)(v0 + 256);
    *(void *)(v0 + 80) = 1;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v23;
    *(void *)(v0 + 96) = v22;
    swift_task_create();
    swift_release();
    uint64_t v25 = sub_100016714(v24, &qword_1005A4640);
    if (v5 == 11) {
      break;
    }
    if (v38 == ++v5) {
      goto LABEL_14;
    }
  }
  if (v38 == 12)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  *(void *)(v0 + 320) = 12;
  if (*(void *)(v0 + 264) <= 0xCuLL)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + 32_Block_object_dispose(&a9, 8) = *(void *)(*(void *)(v0 + 168) + 128);
    static Logger.appInstall.getter();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      int v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Waiting for next result", v30, 2u);
      swift_slowDealloc();
    }
    uint64_t v32 = *(void *)(v0 + 216);
    uint64_t v31 = *(void *)(v0 + 224);
    uint64_t v33 = *(void *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    unint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v34;
    uint64_t v26 = sub_10001644C(&qword_1005A5628);
    *unint64_t v34 = v0;
    v34[1] = sub_100098DBC;
    uint64_t v25 = v0 + 128;
LABEL_16:
  }
  return ThrowingTaskGroup.nextResult()(v25, v26);
}

uint64_t sub_100098DBC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000994F8;
  }
  else
  {
    *(void *)(v2 + 352) = *(void *)(v2 + 128);
    *(unsigned char *)(v2 + 137) = *(unsigned char *)(v2 + 136);
    uint64_t v3 = sub_100098EE0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100098EE0()
{
  int v1 = *(unsigned __int8 *)(v0 + 137);
  if (v1 == 255)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(int **)(v0 + 192);
    sub_10009B788(*(void *)(v0 + 352), v1 & 1);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100099054;
    uint64_t v6 = *(void *)(v0 + 352);
    uint64_t v7 = *(unsigned __int8 *)(v0 + 137);
    return v8(v6, v7);
  }
}

uint64_t sub_100099054()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 352);
  unsigned __int8 v2 = *(unsigned char *)(*(void *)v0 + 137);
  swift_task_dealloc();
  sub_10009B794(v1, v2);
  return _swift_task_switch(sub_100099174, 0, 0);
}

uint64_t sub_100099174()
{
  uint64_t v1 = *(void *)(v0 + 328);
  unsigned __int8 v2 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 288))(v4, 1, 1, v3);
  uint64_t v7 = v6(v1);
  uint64_t v9 = v8;
  uint64_t v10 = (void *)swift_allocObject();
  long long v10[2] = 0;
  void v10[3] = 0;
  v10[4] = v7;
  void v10[5] = v9;
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  id v11[4] = &unk_1005A5630;
  void v11[5] = v10;
  sub_10009B720(v4, v5);
  if (v2(v5, 1, v3) == 1)
  {
    sub_100016714(*(void *)(v0 + 232), &qword_1005A4640);
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 272);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 232);
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v12);
  }
  uint64_t v15 = **(void **)(v0 + 160);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 264);
  uint64_t v18 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 320) + 1;
  *(void *)(v0 + 104) = 1;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v15;
  unsigned __int8 v20 = *(unsigned char *)(v0 + 137);
  swift_task_create();
  swift_release();
  sub_10009B794(v16, v20);
  uint64_t v21 = sub_100016714(v18, &qword_1005A4640);
  if (v19 == v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = v23;
    uint64_t v22 = sub_10001644C(&qword_1005A5628);
    *uint64_t v23 = v0;
    v23[1] = sub_100099514;
    uint64_t v21 = v0 + 144;
  }
  else
  {
    unint64_t v24 = *(void *)(v0 + 320) + 1;
    *(void *)(v0 + 320) = v24;
    if (v24 >= *(void *)(v0 + 264))
    {
      __break(1u);
      return ThrowingTaskGroup.nextResult()(v21, v22);
    }
    *(void *)(v0 + 32_Block_object_dispose(&a9, 8) = *(void *)(*(void *)(v0 + 168) + 8 * v24 + 32);
    static Logger.appInstall.getter();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Waiting for next result", v27, 2u);
      swift_slowDealloc();
    }
    uint64_t v29 = *(void *)(v0 + 216);
    uint64_t v28 = *(void *)(v0 + 224);
    uint64_t v30 = *(void *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v31;
    uint64_t v22 = sub_10001644C(&qword_1005A5628);
    *uint64_t v31 = v0;
    v31[1] = sub_100098DBC;
    uint64_t v21 = v0 + 128;
  }
  return ThrowingTaskGroup.nextResult()(v21, v22);
}

uint64_t sub_1000994F8()
{
  return _swift_unexpectedError(*(void *)(v0 + 344), "_Concurrency/TaskGroup.swift", 28, 1, 1173);
}

uint64_t sub_100099514()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100099988;
  }
  else
  {
    *(void *)(v2 + 384) = *(void *)(v2 + 144);
    *(unsigned char *)(v2 + 13_Block_object_dispose(&a9, 8) = *(unsigned char *)(v2 + 152);
    uint64_t v3 = sub_100099638;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100099638()
{
  int v1 = *(unsigned __int8 *)(v0 + 138);
  if (v1 == 255)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(int **)(v0 + 192);
    sub_10009B788(*(void *)(v0 + 384), v1 & 1);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000997A4;
    uint64_t v6 = *(void *)(v0 + 384);
    uint64_t v7 = *(unsigned __int8 *)(v0 + 138);
    return v8(v6, v7);
  }
}

uint64_t sub_1000997A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 384);
  unsigned __int8 v2 = *(unsigned char *)(*(void *)v0 + 138);
  swift_task_dealloc();
  sub_10009B794(v1, v2);
  return _swift_task_switch(sub_1000998C4, 0, 0);
}

uint64_t sub_1000998C4()
{
  sub_10009B794(*(void *)(v0 + 384), *(unsigned char *)(v0 + 138));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = v1;
  uint64_t v2 = sub_10001644C(&qword_1005A5628);
  *uint64_t v1 = v0;
  v1[1] = sub_100099514;
  return ThrowingTaskGroup.nextResult()(v0 + 144, v2);
}

uint64_t sub_100099988()
{
  return _swift_unexpectedError(*(void *)(v0 + 376), "_Concurrency/TaskGroup.swift", 28, 1, 1173);
}

uint64_t sub_1000999A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100099A70;
  return v6();
}

uint64_t sub_100099A70(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_100099B70(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100099C40;
  return v7();
}

uint64_t sub_100099C40(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t type metadata accessor for AppDownloadDoneTask()
{
  return self;
}

uint64_t sub_100099DF0()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for GlobalState()
{
  return self;
}

uint64_t sub_100099E4C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100099E8C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000184D8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1005A55B0 + dword_1005A55B0);
  return v5(v2, v3);
}

id sub_100099F38(uint64_t a1, void *a2)
{
  void (*v3)(void *__return_ptr);
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void v13[3];
  uint64_t v14;
  uint64_t vars8;

  uint64_t v3 = *(void (**)(void *__return_ptr))(a1 + 32);
  swift_retain();
  uint64_t v4 = a2;
  v3(v13);
  swift_release();

  uint64_t v5 = v14;
  if (v14)
  {
    uint64_t v6 = sub_10002FD00(v13, v14);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = __chkstk_darwin(v6);
    uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    uint64_t v11 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    sub_10002E618((uint64_t)v13);
  }
  else
  {
    uint64_t v11 = 0;
  }
  return v11;
}

uint64_t sub_10009A090(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    *((void *)&v6 + 1) = (char *)&type metadata for Swift.AnyObject + 8;
    *(void *)&long long v5 = a2;
  }
  else
  {
    long long v5 = 0u;
    long long v6 = 0u;
  }
  sub_10002E540((uint64_t)&v5, (uint64_t)v7);
  uint64_t v3 = *(void *)(*(void *)(v2 + 64) + 40);
  swift_unknownObjectRetain();
  sub_10002E540((uint64_t)v7, v3);
  return swift_continuation_resume();
}

uint64_t sub_10009A128()
{
  qword_1005A5498 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

uint64_t sub_10009A16C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000BCFFC();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_10009A278(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_10009A278(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              void *v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10009A400(uint64_t a1, void *a2)
{
  uint64_t v145 = type metadata accessor for URLQueryItem();
  uint64_t v150 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v146 = (char *)v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001644C(&qword_1005A5668);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URLComponents();
  uint64_t v142 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v140 = (char *)v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001644C((uint64_t *)&unk_1005A5670);
  __chkstk_darwin(v10 - 8);
  Class v139 = (char *)v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v132 - v13;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v143 = v15;
  uint64_t v144 = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v132 - v20;
  id v22 = objc_allocWithZone((Class)AMSURLRequestEncoder);
  id v149 = a2;
  id v23 = [v22 initWithBag:a2];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = *(void *)(a1 + 16);
  id v141 = v21;
  if (!v26 || (unint64_t v27 = sub_100049A4C(v24, v25), (v28 & 1) == 0))
  {
    long long v154 = 0u;
    long long v155 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_100031C38(*(void *)(a1 + 56) + 32 * v27, (uint64_t)&v154);
  swift_bridgeObjectRelease();
  if (!*((void *)&v155 + 1))
  {
LABEL_7:
    sub_100016714((uint64_t)&v154, &qword_1005A5660);
    goto LABEL_8;
  }
  sub_100018D68(0, (unint64_t *)&qword_1005A3230);
  if (swift_dynamicCast())
  {
    uint64_t v29 = (void *)v151;
    id v30 = objc_msgSend(self, "ams_sharedAccountStore");
    uint64_t v31 = v18;
    id v32 = objc_msgSend(v30, "ams_iTunesAccountWithDSID:", v29);

    [v23 setAccount:v32];
    uint64_t v18 = v31;
  }
LABEL_8:
  [v23 setDialogOptions:1];
  unint64_t v153 = sub_100042B10((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v35 = sub_100049A4C(v33, v34), (v36 & 1) != 0))
  {
    sub_100031C38(*(void *)(a1 + 56) + 32 * v35, (uint64_t)&v154);
  }
  else
  {
    long long v154 = 0u;
    long long v155 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v155 + 1))
  {
    if (swift_dynamicCast() & 1) != 0 && (v151)
    {
      id v37 = [self serialNumber];
      if (v37)
      {
        uint64_t v38 = v37;
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v40 = v18;
        uint64_t v42 = v41;

        unint64_t v43 = v153;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v153 = 0x8000000000000000;
        *(void *)&long long v154 = v43;
        uint64_t v45 = v42;
        uint64_t v18 = v40;
        sub_1000D2D84(v39, v45, 0x754E6C6169726573, 0xEC0000007265626DLL, isUniquelyReferenced_nonNull_native);
        unint64_t v153 = v154;
      }
      else
      {
        sub_1000B2DEC(0x754E6C6169726573, 0xEC0000007265626DLL);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100016714((uint64_t)&v154, &qword_1005A5660);
  }
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v48 = sub_100049A4C(v46, v47), (v49 & 1) != 0))
  {
    sub_100031C38(*(void *)(a1 + 56) + 32 * v48, (uint64_t)&v154);
  }
  else
  {
    long long v154 = 0u;
    long long v155 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v155 + 1))
  {
    sub_100016714((uint64_t)&v154, &qword_1005A5660);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v144 + 56))(v14, 1, 1, v143);
    goto LABEL_29;
  }
  uint64_t v50 = v143;
  int v51 = swift_dynamicCast();
  uint64_t v52 = v144;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v144 + 56))(v14, v51 ^ 1u, 1, v50);
  id v138 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (v138(v14, 1, v50) == 1)
  {
LABEL_29:
    sub_100016714((uint64_t)v14, (uint64_t *)&unk_1005A5670);
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(a1 + 16) && (unint64_t v61 = sub_100049A4C(v59, v60), (v62 & 1) != 0))
    {
      sub_100031C38(*(void *)(a1 + 56) + 32 * v61, (uint64_t)&v154);
    }
    else
    {
      long long v154 = 0u;
      long long v155 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v155 + 1))
    {
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_69:

        goto LABEL_70;
      }
      uint64_t v63 = v151;
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(a1 + 16) && (unint64_t v66 = sub_100049A4C(v64, v65), (v67 & 1) != 0))
      {
        sub_100031C38(*(void *)(a1 + 56) + 32 * v66, (uint64_t)&v154);
      }
      else
      {
        long long v154 = 0u;
        long long v155 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v155 + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v105 = v151;
          uint64_t v104 = v152;
          uint64_t v106 = HIBYTE(v152) & 0xF;
          if ((v152 & 0x2000000000000000) == 0) {
            uint64_t v106 = v151 & 0xFFFFFFFFFFFFLL;
          }
          if (v106)
          {
            id v107 = [v23 account];
            id v108 = [v149 URLForKey:@"songDownloadDone" account:v107];

            *(void *)&long long v154 = v63;
            uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v111 = v110;
            unint64_t v112 = v153;
            char v113 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v153 = 0x8000000000000000;
            *(void *)&long long v154 = v112;
            sub_1000D2D84(v109, v111, 0x6449676E6F73, 0xE600000000000000, v113);
            uint64_t v114 = v154;
            swift_bridgeObjectRelease();
            char v115 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v154 = v114;
            sub_1000D2D84(v105, v104, 0x64616F6C6E776F64, 0xEB0000000064692DLL, v115);
            swift_bridgeObjectRelease();
            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v117 = [v23 requestWithMethod:2 bagURL:v108 parameters:isa];

            return (uint64_t)v117;
          }
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          return 0;
        }
        goto LABEL_69;
      }
    }

    sub_100016714((uint64_t)&v154, &qword_1005A5660);
LABEL_70:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v137 = v18;
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
  char v54 = v141;
  uint64_t v136 = v52 + 32;
  uint64_t v135 = v53;
  v53(v141, v14, v50);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  uint64_t v55 = v142;
  uint64_t v56 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v7, 1, v8) == 1)
  {

    (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v50);
    swift_bridgeObjectRelease();
    Swift::String v57 = &qword_1005A5668;
    uint64_t v58 = (uint64_t)v7;
LABEL_75:
    sub_100016714(v58, v57);
    return 0;
  }
  _OWORD v132[2] = v52 + 48;
  id v134 = v23;
  id v68 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  uint64_t v133 = v8;
  v68(v140, v7, v8);
  uint64_t v69 = (void *)URLComponents.queryItems.getter();
  if (!v69) {
    uint64_t v69 = _swiftEmptyArrayStorage;
  }
  uint64_t v70 = v69[2];
  if (!v70)
  {
    swift_bridgeObjectRelease();
LABEL_73:
    unint64_t v118 = v140;
    URLComponents.queryItems.setter();
    uint64_t v119 = v139;
    URLComponents.url.getter();
    unsigned int v120 = v138(v119, 1, v56);
    id v121 = v134;
    uint64_t v122 = v133;
    uint64_t v123 = v142;
    uint64_t v124 = v144;
    if (v120 != 1)
    {
      id v126 = v137;
      v135(v137, v119, v56);
      URL._bridgeToObjectiveC()(v127);
      unint64_t v129 = v128;
      Class v130 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v117 = [v121 requestWithMethod:2 URL:v129 parameters:v130];

      uint64_t v131 = *(void (**)(char *, uint64_t))(v124 + 8);
      v131(v126, v56);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v118, v122);
      v131(v141, v56);
      return (uint64_t)v117;
    }

    (*(void (**)(char *, uint64_t))(v123 + 8))(v118, v122);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v141, v56);
    swift_bridgeObjectRelease();
    Swift::String v57 = (uint64_t *)&unk_1005A5670;
    uint64_t v58 = (uint64_t)v119;
    goto LABEL_75;
  }
  id v149 = *(id *)(v150 + 16);
  unint64_t v71 = (*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
  v132[1] = v69;
  char v72 = (char *)v69 + v71;
  v150 += 16;
  uint64_t v147 = *(void *)(v150 + 56);
  uint64_t v148 = (void (**)(char *, uint64_t))(v150 - 8);
  uint64_t v73 = v145;
  unint64_t v74 = v146;
  ((void (*)(char *, char *, uint64_t))v149)(v146, (char *)v69 + v71, v145);
  while (1)
  {
    uint64_t v76 = URLQueryItem.name.getter();
    uint64_t v78 = v77;
    uint64_t v79 = URLQueryItem.value.getter();
    unint64_t v81 = v153;
    if (!v80)
    {
      swift_bridgeObjectRetain();
      unint64_t v93 = sub_100049A4C(v76, v78);
      char v95 = v94;
      swift_bridgeObjectRelease();
      if (v95)
      {
        uint64_t v96 = v153;
        char v97 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v154 = v96;
        if ((v97 & 1) == 0)
        {
          sub_1000D423C();
          uint64_t v96 = v154;
        }
        swift_bridgeObjectRelease();
        sub_1000B37F4(v93, v96);
        unint64_t v153 = v96;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      goto LABEL_44;
    }
    uint64_t v82 = v79;
    uint64_t v83 = v80;
    char v84 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v153 = 0x8000000000000000;
    *(void *)&long long v154 = v81;
    unint64_t v86 = sub_100049A4C(v76, v78);
    uint64_t v87 = *(void *)(v81 + 16);
    BOOL v88 = (v85 & 1) == 0;
    uint64_t v89 = v87 + v88;
    if (__OFADD__(v87, v88)) {
      break;
    }
    char v90 = v85;
    if (*(void *)(v81 + 24) >= v89)
    {
      if ((v84 & 1) == 0) {
        sub_1000D423C();
      }
    }
    else
    {
      sub_1000D1AC4(v89, v84);
      unint64_t v91 = sub_100049A4C(v76, v78);
      if ((v90 & 1) != (v92 & 1)) {
        goto LABEL_82;
      }
      unint64_t v86 = v91;
    }
    unint64_t v74 = v146;
    Class v98 = (void *)v154;
    if (v90)
    {
      char v75 = (uint64_t *)(*(void *)(v154 + 56) + 16 * v86);
      swift_bridgeObjectRelease();
      *char v75 = v82;
      v75[1] = v83;
    }
    else
    {
      *(void *)(v154 + 8 * (v86 >> 6) + 64) |= 1 << v86;
      NSString v99 = (uint64_t *)(v98[6] + 16 * v86);
      *NSString v99 = v76;
      v99[1] = v78;
      char v100 = (uint64_t *)(v98[7] + 16 * v86);
      *char v100 = v82;
      v100[1] = v83;
      uint64_t v101 = v98[2];
      BOOL v102 = __OFADD__(v101, 1);
      uint64_t v103 = v101 + 1;
      if (v102) {
        goto LABEL_81;
      }
      v98[2] = v103;
      swift_bridgeObjectRetain();
    }
    unint64_t v153 = (unint64_t)v98;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v73 = v145;
LABEL_44:
    (*v148)(v74, v73);
    v72 += v147;
    if (!--v70)
    {
      swift_bridgeObjectRelease();
      uint64_t v56 = v143;
      goto LABEL_73;
    }
    ((void (*)(char *, char *, uint64_t))v149)(v74, v72, v73);
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10009B248(uint64_t result)
{
  uint64_t v2 = v1;
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = result + 32;
  uint64_t v6 = _swiftEmptyArrayStorage;
LABEL_2:
  if (v3 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v3;
  }
  while (1)
  {
    if (v4 == v3) {
      return (uint64_t)v6;
    }
    if (v7 == v3) {
      break;
    }
    uint64_t v8 = *(void *)(v5 + 8 * v3++);
    swift_beginAccess();
    char v9 = sub_1000BBC24(&v13, v8);
    uint64_t result = swift_endAccess();
    if (v9)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = v6;
      uint64_t v12 = v2;
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1000BAF6C(0, v6[2] + 1, 1);
        uint64_t v6 = v14;
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        uint64_t result = sub_1000BAF6C(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v14;
      }
      uint64_t v6[2] = v11 + 1;
      v6[v11 + 4] = v8;
      uint64_t v2 = v12;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10009B37C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

void *sub_10009B3C4(uint64_t a1)
{
  return sub_1000971B4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10009B3D0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009B408(uint64_t a1, char a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100005040;
  return sub_100097FCC(a1, a2, v6);
}

uint64_t sub_10009B4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *unint64_t v11 = v3;
  v11[1] = sub_100005040;
  return sub_1000987E0(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_10009B590()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10009BBF8;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1005A5608 + dword_1005A5608);
  return v6(v2, v3, v4);
}

uint64_t sub_10009B654(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000184D8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1005A5610 + dword_1005A5610);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10009B720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C(&qword_1005A4640);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009B788(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_10009B794(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10009B7AC(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10009B7AC(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10009B7C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10009B7D0(void *a1)
{
  return sub_10009875C(a1, *(void *)(v1 + 16));
}

uint64_t sub_10009B7D8()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10009B820()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10009B8DC;
  return sub_100097244(v2, v3, v4, v5);
}

uint64_t sub_10009B8DC(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10009B9D8()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10009BA10(void *a1@<X0>, void *a2@<X8>)
{
  sub_100097EF0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_10009BA18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009BA60()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10009BA98@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  *a1 = v4;
  return result;
}

uint64_t sub_10009BAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 16);
  *(void *)(a2 + 24) = sub_100018D68(0, &qword_1005A5680);
  return v4(a1);
}

uint64_t sub_10009BB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 16);
  *(void *)(a2 + 24) = sub_10001644C(&qword_1005A5688);
  return v4(a1);
}

uint64_t sub_10009BB84()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009BB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000969D4(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_10009BB9C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009BBAC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10009BBFC(unint64_t a1)
{
  return sub_10009BFB8(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A897C);
}

uint64_t sub_10009BC14(unint64_t a1, void (*a2)(uint64_t *__return_ptr, id *), unint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v7 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v9 = *v4;
  uint64_t v10 = *(void *)(*v4 + 16);
  if (__OFADD__(v10, v8))
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    int64_t v7 = *(void *)(*v4 + 16);
    sub_1000BDD04();
    if (!v20) {
      goto LABEL_12;
    }
    uint64_t v21 = v20;
    while (1)
    {
LABEL_21:
      uint64_t v22 = *v4;
      int64_t v23 = *(void *)(*v4 + 24) >> 1;
      if (v23 < v7 + 1)
      {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v22 = *v4;
        int64_t v23 = *(void *)(*v4 + 24) >> 1;
        if (v7 < v23)
        {
LABEL_23:
          uint64_t v24 = v22 + 32;
          while (1)
          {
            *(void *)(v24 + 8 * v7++) = v21;
            sub_1000BDD04();
            if (!v25) {
              break;
            }
            uint64_t v21 = v25;
            if (v23 == v7)
            {
              int64_t v7 = v23;
              *(void *)(*v4 + 16) = v23;
              goto LABEL_21;
            }
          }
LABEL_30:
          *(void *)(*v4 + 16) = v7;
          goto LABEL_12;
        }
      }
      else if (v7 < v23)
      {
        goto LABEL_23;
      }
      *(void *)(v22 + 16) = v7;
    }
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = v9;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v12 = *(void *)(v9 + 24) >> 1, v12 < v10 + v8))
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v4 = v9;
    uint64_t v12 = *(void *)(v9 + 24) >> 1;
  }
  uint64_t v13 = *(void *)(v9 + 16);
  uint64_t v14 = v12 - v13;
  uint64_t v15 = sub_1000A91EC(v26, v9 + 8 * v13 + 32, v12 - v13, v7, a2, a3);
  if (v15 < v8) {
    goto LABEL_17;
  }
  if (v15 >= 1)
  {
    uint64_t v16 = *(void *)(*v4 + 16);
    BOOL v17 = __OFADD__(v16, v15);
    uint64_t v18 = v16 + v15;
    if (v17)
    {
      __break(1u);
      goto LABEL_30;
    }
    *(void *)(*v4 + 16) = v18;
  }
  if (v15 == v14) {
    goto LABEL_18;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  swift_release();
  return specialized Array._endMutation()();
}

uint64_t sub_10009BE44(unint64_t a1)
{
  return sub_10009BFB8(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A8B8C);
}

uint64_t sub_10009BE5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000E7A0C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[96 * v8 + 32];
  if (a1 + 32 < v9 + 96 * v2 && v9 < a1 + 32 + 96 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009BFB8(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t sub_10009C18C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PurchaseCandidate();
  uint64_t v38 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v37 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v36 = (uint64_t)&v30 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v30 = v1;
  id v40 = _swiftEmptyArrayStorage;
  sub_1000BAF94(0, v7, 0);
  uint64_t result = sub_1000A94D0(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0;
  uint64_t v13 = a1 + 64;
  uint64_t v31 = a1 + 80;
  int64_t v32 = v7;
  uint64_t v34 = a1 + 64;
  uint64_t v35 = a1;
  uint64_t v33 = v10;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v11 >> 6;
    if ((*(void *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v10) {
      goto LABEL_26;
    }
    uint64_t v17 = v36;
    sub_1000AA434(*(void *)(a1 + 56) + *(void *)(v38 + 72) * v11, v36);
    uint64_t v18 = v37;
    sub_1000AA4F4(v17, v37);
    uint64_t v39 = *(void *)(v18 + 32);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v21 = v20;
    sub_1000AA498(v18);
    unint64_t v8 = v40;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1000BAF94(0, v8[2] + 1, 1);
      unint64_t v8 = v40;
    }
    unint64_t v23 = v8[2];
    unint64_t v22 = v8[3];
    if (v23 >= v22 >> 1)
    {
      uint64_t result = sub_1000BAF94(v22 > 1, v23 + 1, 1);
      unint64_t v8 = v40;
    }
    _OWORD v8[2] = v23 + 1;
    uint64_t v24 = &v8[2 * v23];
    v24[4] = v19;
    v24[5] = v21;
    a1 = v35;
    int64_t v14 = 1 << *(unsigned char *)(v35 + 32);
    if (v11 >= v14) {
      goto LABEL_27;
    }
    uint64_t v13 = v34;
    uint64_t v25 = *(void *)(v34 + 8 * v16);
    if ((v25 & (1 << v11)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v10) = v33;
    if (*(_DWORD *)(v35 + 36) != v33) {
      goto LABEL_29;
    }
    unint64_t v26 = v25 & (-2 << (v11 & 0x3F));
    if (v26)
    {
      int64_t v14 = __clz(__rbit64(v26)) | v11 & 0xFFFFFFFFFFFFFFC0;
      int64_t v15 = v32;
    }
    else
    {
      unint64_t v27 = v16 + 1;
      unint64_t v28 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v32;
      if (v16 + 1 < v28)
      {
        unint64_t v29 = *(void *)(v34 + 8 * v27);
        if (v29)
        {
LABEL_22:
          int64_t v14 = __clz(__rbit64(v29)) + (v27 << 6);
        }
        else
        {
          while (v28 - 2 != v16)
          {
            unint64_t v29 = *(void *)(v31 + 8 * v16++);
            if (v29)
            {
              unint64_t v27 = v16 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v12;
    uint64_t v11 = v14;
    if (v12 == v15) {
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10009C4A4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10009C4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          unint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_10009C604(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_10009C90C()
{
  v1[45] = v0;
  sub_10001644C((uint64_t *)&unk_1005A6330);
  v1[46] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[47] = v2;
  v1[48] = *(void *)(v2 - 8);
  v1[49] = swift_task_alloc();
  v1[50] = swift_task_alloc();
  sub_10001644C((uint64_t *)&unk_1005A57C0);
  v1[51] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for PurchaseCandidate();
  v1[52] = v3;
  v1[53] = *(void *)(v3 - 8);
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[64] = v4;
  v1[65] = *(void *)(v4 - 8);
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  return _swift_task_switch(sub_10009CBD4, 0, 0);
}

uint64_t sub_10009CBD4()
{
  uint64_t v117 = v0;
  uint64_t v1 = (void **)(v0 + 360);
  uint64_t v2 = *(void **)(v0 + 360);
  static Logger.purchase.getter();
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = &unk_1005A5000;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v110 = v115[75];
    uint64_t v107 = v115[65];
    uint64_t v108 = v115[64];
    uint64_t v7 = (char *)v115[45];
    uint64_t v8 = swift_slowAlloc();
    BOOL v102 = v1;
    uint64_t v9 = (void *)swift_slowAlloc();
    v116[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    uint64_t v10 = *(void **)&v7[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    v115[44] = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;

    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v12 = Array.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)&unk_1005A5000;
    v115[25] = sub_1000F7290(v12, v14, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Purchasing batch: %{public}s", (uint8_t *)v8, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    uint64_t v1 = v102;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
    v15(v110, v108);
  }
  else
  {
    uint64_t v16 = v115[75];
    uint64_t v17 = v115[65];
    uint64_t v18 = v115[64];
    uint64_t v19 = (void *)v115[45];

    unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v15(v16, v18);
  }
  v115[76] = v15;
  uint64_t v20 = (uint64_t (*)())[self defaultStore];
  if (!v20)
  {
    __break(1u);
    return _swift_task_switch(v20, v21, v22);
  }
  unint64_t v23 = v20;
  id v24 = objc_msgSend(v20, "ams_activeiTunesAccount");
  v115[77] = v24;

  uint64_t v109 = v24;
  if (v24)
  {
    uint64_t v25 = v115 + 20;
    unint64_t v26 = (char *)*v1;
    unint64_t v27 = _swiftEmptyDictionarySingleton;
    v115[20] = _swiftEmptyArrayStorage;
    v115[17] = _swiftEmptyDictionarySingleton;
    uint64_t v101 = v26;
    uint64_t v28 = *(void *)&v26[v6[212]];
    uint64_t v113 = *(void *)(v28 + 16);
    if (v113)
    {
      uint64_t v103 = v1;
      uint64_t v104 = v115[52];
      uint64_t v105 = (void *)v115[63];
      uint64_t v100 = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
      swift_bridgeObjectRetain();
      uint64_t v29 = 0;
      uint64_t v111 = v28;
      do
      {
        uint64_t v35 = *(void *)(v28 + 8 * v29 + 32);
        char v36 = sub_1000A99C8(v35);
        uint64_t v39 = v38;
        if (v36)
        {
          type metadata accessor for ASDError(0);
          v115[43] = 506;
          sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
          sub_100036BF0();
          _BridgedStoredNSError.init(_:userInfo:)();
          id v40 = (void *)v115[42];
          id v41 = [objc_allocWithZone((Class)ASDPurchaseResponseItem) init];
          if (v39)
          {
            NSString v42 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v42 = 0;
          }
          [v41 _setBundleID:v42];

          Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
          [v41 _setItemID:isa];

          id v44 = v40;
          uint64_t v45 = (void *)_convertErrorToNSError(_:)();

          [v41 _setError:v45];
          id v46 = v41;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          uint64_t v47 = (void *)v115[45];
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          static Logger.purchase.getter();
          id v48 = v47;
          char v49 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.default.getter();
          BOOL v51 = os_log_type_enabled(v49, v50);
          uint64_t v52 = (void *)v115[45];
          if (v51)
          {
            uint64_t v53 = swift_slowAlloc();
            char v54 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v53 = 138412546;
            uint64_t v55 = *(void **)&v101[v100];
            *(void *)(v53 + 4) = v55;
            *char v54 = v55;
            id v56 = v55;

            *(_WORD *)(v53 + 12) = 2050;
            *(void *)(v53 + 14) = v35;
            _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] Skipping itemID: %{public}lld due to activeInstall", (uint8_t *)v53, 0x16u);
            sub_10001644C((uint64_t *)&unk_1005A3AA0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            Swift::String v57 = v44;
          }
          else
          {

            Swift::String v57 = *v103;
            char v49 = v44;
          }
          uint64_t v28 = v111;
          uint64_t v58 = v115[74];
          uint64_t v59 = v115[64];

          v15(v58, v59);
          uint64_t v25 = v115 + 20;
        }
        else
        {
          uint64_t v31 = v115[62];
          uint64_t v30 = (void *)v115[63];
          sub_1000AA420(v37, v38);
          id v32 = v109;
          UUID.init()();
          *uint64_t v30 = v32;
          v105[1] = 0;
          v105[2] = 0;
          v105[3] = 0;
          v105[4] = v35;
          *(void *)((char *)v30 + *(int *)(v104 + 36)) = 0;
          uint64_t v33 = (void *)((char *)v30 + *(int *)(v104 + 40));
          *uint64_t v33 = 0;
          v33[1] = 0;
          sub_1000AA434((uint64_t)v30, v31);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v116[0] = v115[17];
          v115[17] = 0x8000000000000000;
          sub_1000D2F0C(v31, v35, isUniquelyReferenced_nonNull_native);
          v115[17] = v116[0];
          swift_bridgeObjectRelease();
          sub_1000AA498((uint64_t)v30);
          uint64_t v28 = v111;
        }
        ++v29;
      }
      while (v113 != v29);
      swift_bridgeObjectRelease();
      unint64_t v27 = (void *)v115[17];
      uint64_t v1 = v103;
    }
    if (v27[2])
    {
      uint64_t v60 = swift_bridgeObjectRetain();
      uint64_t v61 = sub_10009C18C(v60);
      v115[78] = v61;
      swift_bridgeObjectRelease();
      char v62 = (void *)swift_task_alloc();
      v115[79] = v62;
      void *v62 = v115;
      v62[1] = sub_10009DB4C;
      uint64_t v63 = v115[45];
      v62[16] = v61;
      v62[17] = v63;
      uint64_t v20 = sub_1000A0B40;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      return _swift_task_switch(v20, v21, v22);
    }
    unint64_t v81 = (void *)v115[45];
    static Logger.purchase.getter();
    id v82 = v81;
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.default.getter();
    BOOL v85 = os_log_type_enabled(v83, v84);
    unint64_t v86 = (char *)v115[45];
    if (v85)
    {
      uint64_t v87 = (uint8_t *)swift_slowAlloc();
      BOOL v88 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v87 = 138412290;
      uint64_t v89 = *(void **)&v86[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      v115[18] = v89;
      id v90 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v88 = v89;

      _os_log_impl((void *)&_mh_execute_header, v83, v84, "[%@] No candidates to purchase", v87, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      unint64_t v91 = (char *)v115[45];
    }
    else
    {

      unint64_t v91 = (char *)*v1;
      uint64_t v83 = *v1;
    }
    uint64_t v93 = v115[68];
    uint64_t v94 = v115[64];

    v15(v93, v94);
    id v95 = objc_allocWithZone((Class)ASDPurchaseResponse);
    sub_100018D68(0, &qword_1005A57D0);
    Class v96 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v97 = [v95 initWithPurchaseResponseItems:v96];

    Class v98 = *(void **)&v91[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse];
    *(void *)&v91[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse] = v97;

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v92 = (uint64_t (*)(void))v115[1];
  }
  else
  {
    uint64_t v114 = v15;
    uint64_t v64 = (void *)v115[45];
    static Logger.purchase.getter();
    id v65 = v64;
    unint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    BOOL v68 = os_log_type_enabled(v66, v67);
    uint64_t v69 = v115[67];
    uint64_t v70 = v115[64];
    unint64_t v71 = (char *)v115[45];
    if (v68)
    {
      uint64_t v72 = swift_slowAlloc();
      os_log_type_t log = v66;
      uint64_t v73 = (void *)swift_slowAlloc();
      v116[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 138412546;
      uint64_t v112 = v70;
      unint64_t v74 = *(void **)&v71[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      v115[26] = v74;
      id v75 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v74;

      *(_WORD *)(v72 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v76 = Array.description.getter();
      unint64_t v78 = v77;
      swift_bridgeObjectRelease();
      v115[21] = sub_1000F7290(v76, v78, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, log, v67, "[%@] Account required to install %{public}s", (uint8_t *)v72, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v79 = v69;
      uint64_t v80 = v112;
    }
    else
    {

      uint64_t v79 = v69;
      uint64_t v80 = v70;
    }
    v114(v79, v80);
    type metadata accessor for ASDError(0);
    v115[36] = 509;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100036BF0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v92 = (uint64_t (*)(void))v115[1];
  }
  return v92();
}

uint64_t sub_10009DB4C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 640) = a1;
  *(void *)(v3 + 64_Block_object_dispose(&a9, 8) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1000A0200;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10009DC6C;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_10009DC6C()
{
  uint64_t v87 = v0;
  unint64_t v1 = *(void *)(v0 + 640);
  if (v1 >> 62)
  {
LABEL_57:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  BOOL v85 = (uint64_t *)(v0 + 136);
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v3 = 0;
    uint64_t v70 = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
    uint64_t v71 = *(void *)(v0 + 360);
    uint64_t v82 = *(void *)(v0 + 488);
    uint64_t v80 = *(void *)(v0 + 416);
    uint64_t v81 = *(void *)(v0 + 424);
    unint64_t v4 = v1 & 0xC000000000000001;
    uint64_t v84 = *(void *)(v0 + 640) + 32;
    unint64_t v77 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v83 = v2;
    unint64_t v79 = v1 & 0xC000000000000001;
    do
    {
      if (v4) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v84 + 8 * v3);
      }
      uint64_t v6 = v5;
      uint64_t v7 = sub_1002F948C((uint64_t)v5);
      uint64_t v8 = *v85;
      if (*(void *)(*v85 + 16) && (unint64_t v9 = sub_100049AC4(v7), (v10 & 1) != 0))
      {
        uint64_t v12 = *(void *)(v0 + 480);
        uint64_t v11 = *(void *)(v0 + 488);
        sub_1000AA434(*(void *)(v8 + 56) + *(void *)(v81 + 72) * v9, v12);
        sub_1000AA4F4(v12, v11);
        swift_beginAccess();
        uint64_t v13 = *(int *)(v80 + 36);
        unint64_t v14 = *(void **)(v11 + v13);
        *(void *)(v11 + v13) = v6;
        unint64_t v15 = v6;

        uint64_t v16 = sub_1002F9408(v15);
        uint64_t v17 = v16;
        if (v16)
        {
          uint64_t v18 = sub_10039F908(v16);

          if (v18)
          {
            id v19 = (id)sub_1002305D0((uint64_t)v18);

            uint64_t v18 = (id *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v17 = v20;
          }
          else
          {
            uint64_t v17 = 0;
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v21 = *(void *)(v0 + 488);
        uint64_t v23 = *(void *)(v0 + 408);
        uint64_t v22 = *(void *)(v0 + 416);
        id v24 = *(void **)(v0 + 360);
        *(void *)(v82 + _Block_object_dispose(&a9, 8) = v18;
        *(void *)(v82 + 16) = v17;
        swift_bridgeObjectRelease();
        uint64_t v25 = sub_1002F948C((uint64_t)v15);
        sub_1000AA434(v21, v23);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v23, 0, 1, v22);
        sub_1000B0B74(v23, v25);
        static Logger.purchase.getter();
        id v26 = v24;
        unint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v76 = *(void *)(v0 + 584);
          unint64_t v78 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
          unint64_t v74 = v15;
          uint64_t v75 = *(void *)(v0 + 512);
          uint64_t v72 = *(void *)(v0 + 488);
          uint64_t v29 = *(void **)(v0 + 360);
          os_log_type_t log = v27;
          uint64_t v30 = swift_slowAlloc();
          uint64_t v31 = (void *)swift_slowAlloc();
          uint64_t v86 = swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = 138412546;
          id v32 = *(void **)(v71 + v70);
          *(void *)(v0 + 320) = v32;
          id v33 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v31 = v32;

          *(_WORD *)(v30 + 12) = 2082;
          uint64_t v34 = sub_1000A1188();
          *(void *)(v0 + 32_Block_object_dispose(&a9, 8) = sub_1000F7290(v34, v35, &v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v28, "[%@][%{public}s] Added batch candidate", (uint8_t *)v30, 0x16u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v78(v76, v75);
          sub_1000AA498(v72);
          unint64_t v77 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
        }
        else
        {
          uint64_t v36 = *(void *)(v0 + 584);
          uint64_t v37 = *(void *)(v0 + 512);
          uint64_t v38 = *(void *)(v0 + 488);
          uint64_t v39 = *(void **)(v0 + 360);

          v77(v36, v37);
          sub_1000AA498(v38);
        }
        uint64_t v2 = v83;
        unint64_t v4 = v79;
      }
      else
      {
      }
      ++v3;
    }
    while (v2 != v3);
  }
  unint64_t v1 = v0 + 88;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 656) = [self defaultWorkspace];
  swift_beginAccess();
  uint64_t v40 = *(void *)(v0 + 136);
  *(void *)(v0 + 664) = v40;
  char v41 = *(unsigned char *)(v40 + 32);
  *(unsigned char *)(v0 + 812) = v41;
  uint64_t v42 = 1 << v41;
  if (v42 < 64) {
    uint64_t v43 = ~(-1 << v42);
  }
  else {
    uint64_t v43 = -1;
  }
  unint64_t v44 = v43 & *(void *)(v40 + 64);
  *(void *)(v0 + 672) = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
  uint64_t v45 = *(void *)(v0 + 608);
  *(void *)(v0 + 68_Block_object_dispose(&a9, 8) = v45;
  *(void *)(v0 + 680) = v45;
  swift_bridgeObjectRetain();
  int64_t v46 = 0;
  while (v44)
  {
    unint64_t v47 = __clz(__rbit64(v44));
    v44 &= v44 - 1;
    unint64_t v48 = v47 | (v46 << 6);
    uint64_t v49 = *(void *)(v0 + 664);
LABEL_45:
    *(void *)(v0 + 704) = v46;
    *(void *)(v0 + 696) = v44;
    uint64_t v56 = *(void *)(v0 + 464);
    uint64_t v55 = *(void *)(v0 + 472);
    uint64_t v57 = *(void *)(v0 + 416);
    sub_1000AA434(*(void *)(v49 + 56) + *(void *)(*(void *)(v0 + 424) + 72) * v48, v55);
    sub_1000AA4F4(v55, v56);
    swift_beginAccess();
    uint64_t v58 = *(id **)(v56 + *(int *)(v57 + 36));
    if (v58)
    {
      uint64_t v59 = sub_1002F9408(v58);
      *(void *)(v0 + 712) = v59;
      if (v59)
      {
        uint64_t v60 = v59;
        uint64_t v61 = sub_10039F908(v59);
        *(void *)(v0 + 720) = v61;
        if (v61)
        {
          uint64_t v67 = *(void *)(*(void *)(v0 + 360) + *(void *)(v0 + 672));
          *(void *)(v0 + 72_Block_object_dispose(&a9, 8) = v67;
          BOOL v68 = (void *)swift_task_alloc();
          *(void *)(v0 + 736) = v68;
          *BOOL v68 = v0;
          v68[1] = sub_10009E478;
          uint64_t v69 = *(void *)(v0 + 464);
          sub_1000A12D4(v69, v67);
          return;
        }
      }
    }
    sub_1000AA498(*(void *)(v0 + 464));
  }
  int64_t v50 = v46 + 1;
  if (__OFADD__(v46, 1))
  {
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  int64_t v51 = (unint64_t)((1 << *(unsigned char *)(v0 + 812)) + 63) >> 6;
  uint64_t v49 = *(void *)(v0 + 664);
  if (v50 >= v51) {
    goto LABEL_49;
  }
  uint64_t v52 = v49 + 64;
  unint64_t v53 = *(void *)(v49 + 64 + 8 * v50);
  ++v46;
  if (v53) {
    goto LABEL_44;
  }
  int64_t v46 = v50 + 1;
  if (v50 + 1 >= v51) {
    goto LABEL_49;
  }
  unint64_t v53 = *(void *)(v52 + 8 * v46);
  if (v53) {
    goto LABEL_44;
  }
  int64_t v46 = v50 + 2;
  if (v50 + 2 >= v51) {
    goto LABEL_49;
  }
  unint64_t v53 = *(void *)(v52 + 8 * v46);
  if (v53) {
    goto LABEL_44;
  }
  int64_t v46 = v50 + 3;
  if (v50 + 3 >= v51) {
    goto LABEL_49;
  }
  unint64_t v53 = *(void *)(v52 + 8 * v46);
  if (v53)
  {
LABEL_44:
    unint64_t v44 = (v53 - 1) & v53;
    unint64_t v48 = __clz(__rbit64(v53)) + (v46 << 6);
    goto LABEL_45;
  }
  int64_t v54 = v50 + 4;
  if (v54 < v51)
  {
    unint64_t v53 = *(void *)(v52 + 8 * v54);
    if (!v53)
    {
      while (1)
      {
        int64_t v46 = v54 + 1;
        if (__OFADD__(v54, 1)) {
          goto LABEL_56;
        }
        if (v46 >= v51) {
          goto LABEL_49;
        }
        unint64_t v53 = *(void *)(v52 + 8 * v46);
        ++v54;
        if (v53) {
          goto LABEL_44;
        }
      }
    }
    int64_t v46 = v54;
    goto LABEL_44;
  }
LABEL_49:
  char v62 = *(void **)(v0 + 616);
  swift_release();
  uint64_t v63 = swift_bridgeObjectRetain();
  uint64_t v64 = sub_1000A232C(v63, v62);
  *(void *)(v0 + 752) = v64;
  swift_bridgeObjectRelease();
  id v65 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v65;
  *id v65 = v0;
  v65[1] = sub_10009EEAC;
  uint64_t v66 = *(void *)(v0 + 616);
  sub_1000A2E98(v64, v66);
}

uint64_t sub_10009E478(uint64_t a1)
{
  *(void *)(*(void *)v1 + 744) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10009E578, 0, 0);
}

uint64_t sub_10009E578()
{
  uint64_t v97 = v0;
  uint64_t v1 = *(void **)(v0 + 744);
  if (v1)
  {
    if ((sub_100278EE4(*(void **)(v0 + 744)) & 1) == 0
      || (self, (uint64_t v2 = swift_dynamicCastObjCClass()) == 0))
    {
      uint64_t v25 = *(void **)(v0 + 360);
      static Logger.purchase.getter();
      id v26 = v1;
      id v27 = v25;
      id v28 = v26;
      id v29 = v27;
      id v30 = v28;
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      id v95 = v31;
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v86 = *(void *)(v0 + 744);
        id v33 = *(void **)(v0 + 728);
        uint64_t v87 = *(void **)(v0 + 712);
        uint64_t v88 = *(void **)(v0 + 720);
        uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
        uint64_t v90 = *(void *)(v0 + 512);
        uint64_t v92 = *(void *)(v0 + 576);
        uint64_t v85 = *(void *)(v0 + 464);
        uint64_t v34 = *(void **)(v0 + 360);
        uint64_t v35 = swift_slowAlloc();
        uint64_t v36 = (void *)swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 138413058;
        *(void *)(v0 + 176) = v33;
        id v37 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v36 = v33;

        *(_WORD *)(v35 + 12) = 2082;
        uint64_t v38 = sub_1000A1188();
        *(void *)(v0 + 184) = sub_1000F7290(v38, v39, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 22) = 2112;
        *(void *)(v0 + 192) = v30;
        id v40 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v36[1] = v86;

        *(_WORD *)(v35 + 32) = 1024;
        LODWORD(v33) = sub_100278EE4(v40);

        *(_DWORD *)(v0 + 80_Block_object_dispose(&a9, 8) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v95, v32, "[%@][%{public}s] Skipping install with existing invalid coordinator: %@ AppStore isAppDRI: %{BOOL}d", (uint8_t *)v35, 0x26u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v93(v92, v90);
        uint64_t result = sub_1000AA498(v85);
        uint64_t v42 = *(void *)(v0 + 608);
      }
      else
      {
        unint64_t v47 = *(void **)(v0 + 720);
        unint64_t v48 = *(void **)(v0 + 712);
        uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
        uint64_t v49 = *(void *)(v0 + 576);
        uint64_t v50 = *(void *)(v0 + 512);
        uint64_t v51 = *(void *)(v0 + 464);
        uint64_t v52 = *(void **)(v0 + 360);

        v94(v49, v50);
        uint64_t result = sub_1000AA498(v51);
        uint64_t v42 = *(void *)(v0 + 680);
      }
      uint64_t v43 = v42;
      goto LABEL_21;
    }
    uint64_t v3 = *(void *)(v0 + 656);
    uint64_t v4 = *(void *)(v0 + 464);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v2;
    id v6 = v1;

    if (!v3) {
      goto LABEL_19;
    }
    uint64_t v7 = *(void *)(v0 + 712);
    id v8 = *(id *)(v0 + 656);
    NSString v9 = (id)sub_1002305D0(v7);
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v10 = (id)sub_1002305D0(*(void *)(v0 + 720));
    if (!v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v11 = [*(id *)(v0 + 656) createDeviceIdentifierWithVendorName:v9 bundleIdentifier:v10];

    if (v11)
    {
      uint64_t v13 = *(void *)(v0 + 384);
      uint64_t v12 = *(void *)(v0 + 392);
      uint64_t v15 = *(void *)(v0 + 368);
      uint64_t v14 = *(void *)(v0 + 376);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      v16(v15, v12, v14);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v14);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v14) != 1)
      {
        uint64_t v17 = *(void *)(v0 + 464);
        uint64_t v89 = *(void **)(v0 + 656);
        uint64_t v91 = *(void *)(v0 + 416);
        uint64_t v18 = *(void *)(v0 + 400);
        uint64_t v20 = *(void *)(v0 + 376);
        uint64_t v19 = *(void *)(v0 + 384);
        v16(v18, *(void *)(v0 + 368), v20);
        uint64_t v21 = UUID.uuidString.getter();
        uint64_t v23 = v22;

        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
        id v24 = (uint64_t *)(v17 + *(int *)(v91 + 40));
        *id v24 = v21;
        v24[1] = v23;
        swift_bridgeObjectRelease();
LABEL_19:
        int64_t v54 = *(void **)(v0 + 720);
        uint64_t v55 = *(void **)(v0 + 712);
        uint64_t v56 = *(void *)(v0 + 464);
        uint64_t v57 = *(void *)(v0 + 416);
        uint64_t v58 = *(void *)(v0 + 424);
        uint64_t v59 = *(void *)(v0 + 408);
        uint64_t v60 = *(void *)(v56 + 32);
        sub_1000AA434(v56, v59);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
        swift_beginAccess();
        sub_1000B0B74(v59, v60);
        swift_endAccess();

        uint64_t v46 = v56;
        goto LABEL_20;
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 384) + 56))(*(void *)(v0 + 368), 1, 1, *(void *)(v0 + 376));
    }
    uint64_t v53 = *(void *)(v0 + 368);

    sub_100016714(v53, (uint64_t *)&unk_1005A6330);
    goto LABEL_19;
  }
  unint64_t v44 = *(void **)(v0 + 720);
  uint64_t v45 = *(void *)(v0 + 464);

  uint64_t v46 = v45;
LABEL_20:
  uint64_t result = sub_1000AA498(v46);
  uint64_t v43 = *(void *)(v0 + 688);
  uint64_t v42 = *(void *)(v0 + 680);
LABEL_21:
  int64_t v61 = *(void *)(v0 + 704);
  unint64_t v62 = *(void *)(v0 + 696);
  *(void *)(v0 + 68_Block_object_dispose(&a9, 8) = v43;
  *(void *)(v0 + 680) = v42;
  while (v62)
  {
    unint64_t v63 = __clz(__rbit64(v62));
    v62 &= v62 - 1;
    unint64_t v64 = v63 | (v61 << 6);
    uint64_t result = *(void *)(v0 + 664);
LABEL_41:
    *(void *)(v0 + 704) = v61;
    *(void *)(v0 + 696) = v62;
    uint64_t v71 = *(void *)(v0 + 464);
    uint64_t v70 = *(void *)(v0 + 472);
    uint64_t v72 = *(void *)(v0 + 416);
    sub_1000AA434(*(void *)(result + 56) + *(void *)(*(void *)(v0 + 424) + 72) * v64, v70);
    sub_1000AA4F4(v70, v71);
    swift_beginAccess();
    uint64_t v73 = *(id **)(v71 + *(int *)(v72 + 36));
    if (v73)
    {
      unint64_t v74 = sub_1002F9408(v73);
      *(void *)(v0 + 712) = v74;
      if (v74)
      {
        uint64_t v75 = v74;
        uint64_t v76 = sub_10039F908(v74);
        *(void *)(v0 + 720) = v76;
        if (v76)
        {
          uint64_t v82 = *(void *)(*(void *)(v0 + 360) + *(void *)(v0 + 672));
          *(void *)(v0 + 72_Block_object_dispose(&a9, 8) = v82;
          uint64_t v83 = (void *)swift_task_alloc();
          *(void *)(v0 + 736) = v83;
          void *v83 = v0;
          v83[1] = sub_10009E478;
          uint64_t v84 = *(void *)(v0 + 464);
          return sub_1000A12D4(v84, v82);
        }
      }
    }
    uint64_t result = sub_1000AA498(*(void *)(v0 + 464));
  }
  int64_t v65 = v61 + 1;
  if (__OFADD__(v61, 1))
  {
    __break(1u);
LABEL_52:
    __break(1u);
    return result;
  }
  int64_t v66 = (unint64_t)((1 << *(unsigned char *)(v0 + 812)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 664);
  if (v65 >= v66) {
    goto LABEL_45;
  }
  uint64_t v67 = result + 64;
  unint64_t v68 = *(void *)(result + 64 + 8 * v65);
  ++v61;
  if (v68) {
    goto LABEL_40;
  }
  int64_t v61 = v65 + 1;
  if (v65 + 1 >= v66) {
    goto LABEL_45;
  }
  unint64_t v68 = *(void *)(v67 + 8 * v61);
  if (v68) {
    goto LABEL_40;
  }
  int64_t v61 = v65 + 2;
  if (v65 + 2 >= v66) {
    goto LABEL_45;
  }
  unint64_t v68 = *(void *)(v67 + 8 * v61);
  if (v68) {
    goto LABEL_40;
  }
  int64_t v61 = v65 + 3;
  if (v65 + 3 >= v66) {
    goto LABEL_45;
  }
  unint64_t v68 = *(void *)(v67 + 8 * v61);
  if (v68)
  {
LABEL_40:
    unint64_t v62 = (v68 - 1) & v68;
    unint64_t v64 = __clz(__rbit64(v68)) + (v61 << 6);
    goto LABEL_41;
  }
  int64_t v69 = v65 + 4;
  if (v69 < v66)
  {
    unint64_t v68 = *(void *)(v67 + 8 * v69);
    if (!v68)
    {
      while (1)
      {
        int64_t v61 = v69 + 1;
        if (__OFADD__(v69, 1)) {
          goto LABEL_52;
        }
        if (v61 >= v66) {
          goto LABEL_45;
        }
        unint64_t v68 = *(void *)(v67 + 8 * v61);
        ++v69;
        if (v68) {
          goto LABEL_40;
        }
      }
    }
    int64_t v61 = v69;
    goto LABEL_40;
  }
LABEL_45:
  unint64_t v77 = *(void **)(v0 + 616);
  swift_release();
  uint64_t v78 = swift_bridgeObjectRetain();
  uint64_t v79 = sub_1000A232C(v78, v77);
  *(void *)(v0 + 752) = v79;
  swift_bridgeObjectRelease();
  uint64_t v80 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v80;
  *uint64_t v80 = v0;
  v80[1] = sub_10009EEAC;
  uint64_t v81 = *(void *)(v0 + 616);
  return sub_1000A2E98(v79, v81);
}

uint64_t sub_10009EEAC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 76_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v3 + 776) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000A08A0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_10009EFE8;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_10009EFE8()
{
  uint64_t v124 = v0;
  unint64_t v1 = *(void *)(v0 + 768);
  unint64_t v106 = v1 >> 62;
  unint64_t v107 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      if (v2 < 1)
      {
LABEL_63:
        __break(1u);
        return;
      }
      uint64_t v3 = 0;
      uint64_t v4 = *(void *)(v0 + 768) + 32;
      do
      {
        if ((v107 & 0xC000000000000001) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v5 = *(id *)(v4 + 8 * v3);
        }
        uint64_t v7 = v5;
        id v8 = sub_1003A7D80(v5, v6);
        if (v8)
        {
          NSString v9 = v8;
          id v10 = [v8 longLongValue];

          sub_1000BBC24(&v122, (uint64_t)v10);
        }

        ++v3;
      }
      while (v2 != v3);
    }
  }
  uint64_t v104 = v0 + 272;
  uint64_t v11 = *(void *)(v0 + 448);
  uint64_t v105 = *(void **)(v0 + 440);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v116 = v12 + 64;
  uint64_t v14 = -1;
  uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
  if (-v15 < 64) {
    uint64_t v14 = ~(-1 << -(char)v15);
  }
  unint64_t v16 = v14 & v13;
  int64_t v117 = (unint64_t)(63 - v15) >> 6;
  uint64_t v118 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
  uint64_t v119 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain();
  int64_t v17 = 0;
  uint64_t v115 = v11;
  while (v16)
  {
    unint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v19 = v18 | (v17 << 6);
LABEL_33:
    uint64_t v23 = *(void *)(v0 + 448);
    uint64_t v24 = *(void *)(v0 + 456);
    sub_1000AA434(*(void *)(v119 + 56) + *(void *)(*(void *)(v0 + 424) + 72) * v19, v24);
    sub_1000AA4F4(v24, v23);
    BOOL v25 = sub_10009C604(*(void *)(v11 + 32), (uint64_t)&_swiftEmptySetSingleton);
    uint64_t v26 = *(void *)(v0 + 448);
    id v27 = *(void **)(v0 + 360);
    if (v25)
    {
      unint64_t v120 = v16;
      uint64_t v28 = *(void *)(v0 + 440);
      static Logger.purchase.getter();
      sub_1000AA434(v26, v28);
      id v29 = v27;
      id v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v64 = *(void *)(v0 + 672);
        int64_t v65 = *(char **)(v0 + 360);
        uint64_t v66 = swift_slowAlloc();
        uint64_t v67 = (void *)swift_slowAlloc();
        uint64_t v121 = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 138412546;
        unint64_t v68 = *(void **)&v65[v64];
        *(void *)(v66 + 4) = v68;
        void *v67 = v68;
        id v69 = v68;

        *(_WORD *)(v66 + 12) = 2082;
        uint64_t v122 = 5849665;
        unint64_t v123 = 0xE300000000000000;
        UUID.uuidString.getter();
        sub_1000FC118(8);
        swift_bridgeObjectRelease();
        v70._countAndFlagsBits = static String._fromSubstring(_:)();
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v71._countAndFlagsBits = 47;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        if (v105[2])
        {
          uint64_t v72 = v105[1];
          uint64_t v73 = (void *)v105[2];
        }
        else
        {
          uint64_t v72 = 0;
          uint64_t v73 = (void *)0xE000000000000000;
        }
        uint64_t v109 = *(void *)(v0 + 512);
        uint64_t v110 = *(void *)(v0 + 568);
        uint64_t v74 = *(void *)(v0 + 440);
        uint64_t v111 = *(void *)(v0 + 448);
        uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
        swift_bridgeObjectRetain();
        v75._countAndFlagsBits = v72;
        v75._object = v73;
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        v76._countAndFlagsBits = 58;
        v76._object = (void *)0xE100000000000000;
        String.append(_:)(v76);
        *(void *)(v0 + 264) = v105[4];
        v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v77);
        swift_bridgeObjectRelease();
        *(void *)(v66 + 14) = sub_1000F7290(v122, v123, &v121);
        swift_bridgeObjectRelease();
        sub_1000AA498(v74);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%@][%{public}s] Found purchase response item", (uint8_t *)v66, 0x16u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v113(v110, v109);
        sub_1000AA498(v111);
        uint64_t v118 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
        uint64_t v11 = v115;
        unint64_t v16 = v120;
      }
      else
      {
        uint64_t v32 = *(void *)(v0 + 568);
        uint64_t v33 = *(void *)(v0 + 512);
        uint64_t v35 = *(void *)(v0 + 440);
        uint64_t v34 = *(void *)(v0 + 448);
        int64_t v36 = v17;
        id v37 = *(void **)(v0 + 360);

        sub_1000AA498(v35);
        int64_t v17 = v36;
        v118(v32, v33);
        sub_1000AA498(v34);
        unint64_t v16 = v120;
      }
    }
    else
    {
      uint64_t v38 = *(void *)(v0 + 432);
      static Logger.purchase.getter();
      sub_1000AA434(v26, v38);
      id v39 = v27;
      id v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = *(void *)(v0 + 672);
        uint64_t v112 = *(void *)(v0 + 512);
        uint64_t v114 = *(void *)(v0 + 560);
        uint64_t v108 = *(void *)(v0 + 432);
        uint64_t v43 = *(char **)(v0 + 360);
        uint64_t v44 = swift_slowAlloc();
        uint64_t v45 = (void *)swift_slowAlloc();
        uint64_t v122 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 138412546;
        uint64_t v46 = *(void **)&v43[v42];
        *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v46;
        id v47 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v45 = v46;

        *(_WORD *)(v44 + 12) = 2082;
        uint64_t v48 = sub_1000A1188();
        *(void *)(v0 + 256) = sub_1000F7290(v48, v49, &v122);
        uint64_t v50 = (void *)(v0 + 160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000AA498(v108);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "[%@][%{public}s] Failed to find item in purchase response", (uint8_t *)v44, 0x16u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v118(v114, v112);
      }
      else
      {
        uint64_t v51 = *(void *)(v0 + 560);
        uint64_t v52 = *(void *)(v0 + 512);
        uint64_t v53 = *(void *)(v0 + 432);
        int64_t v54 = *(void **)(v0 + 360);

        sub_1000AA498(v53);
        v118(v51, v52);
        uint64_t v50 = (void *)(v0 + 160);
      }
      type metadata accessor for ASDError(0);
      *(void *)(v0 + 240) = 742;
      sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
      sub_100036BF0();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v55 = *(void **)(v0 + 232);
      id v56 = [objc_allocWithZone((Class)ASDPurchaseResponseItem) init];
      uint64_t v11 = v115;
      if (*(void *)(v115 + 16))
      {
        swift_bridgeObjectRetain();
        NSString v57 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v57 = 0;
      }
      objc_msgSend(v56, "_setBundleID:", v57, v104);

      Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
      [v56 _setItemID:isa];

      id v59 = v55;
      uint64_t v60 = (void *)_convertErrorToNSError(_:)();

      [v56 _setError:v60];
      id v61 = v56;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      unint64_t v62 = *(NSObject **)(v0 + 448);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v63 = v59;
      sub_1000A370C(v62, (uint64_t)v63);

      sub_1000AA498((uint64_t)v62);
    }
  }
  int64_t v20 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v20 >= v117) {
    goto LABEL_49;
  }
  unint64_t v21 = *(void *)(v116 + 8 * v20);
  ++v17;
  if (v21) {
    goto LABEL_32;
  }
  int64_t v17 = v20 + 1;
  if (v20 + 1 >= v117) {
    goto LABEL_49;
  }
  unint64_t v21 = *(void *)(v116 + 8 * v17);
  if (v21) {
    goto LABEL_32;
  }
  int64_t v17 = v20 + 2;
  if (v20 + 2 >= v117) {
    goto LABEL_49;
  }
  unint64_t v21 = *(void *)(v116 + 8 * v17);
  if (v21) {
    goto LABEL_32;
  }
  int64_t v17 = v20 + 3;
  if (v20 + 3 >= v117) {
    goto LABEL_49;
  }
  unint64_t v21 = *(void *)(v116 + 8 * v17);
  if (v21)
  {
LABEL_32:
    unint64_t v16 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_33;
  }
  int64_t v22 = v20 + 4;
  if (v22 < v117)
  {
    unint64_t v21 = *(void *)(v116 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        int64_t v17 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_62;
        }
        if (v17 >= v117) {
          goto LABEL_49;
        }
        unint64_t v21 = *(void *)(v116 + 8 * v17);
        ++v22;
        if (v21) {
          goto LABEL_32;
        }
      }
    }
    int64_t v17 = v22;
    goto LABEL_32;
  }
LABEL_49:
  swift_release();
  swift_bridgeObjectRelease();
  if (v106)
  {
    swift_bridgeObjectRetain();
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v88 >= 1) {
      goto LABEL_54;
    }
LABEL_51:
    uint64_t v78 = *(void **)(v0 + 360);
    swift_bridgeObjectRelease();
    static Logger.purchase.getter();
    id v79 = v78;
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = *(void *)(v0 + 672);
      uint64_t v83 = *(char **)(v0 + 360);
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      uint64_t v85 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 138412290;
      uint64_t v86 = *(void **)&v83[v82];
      *(void *)(v0 + 272) = v86;
      id v87 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v85 = v86;

      _os_log_impl((void *)&_mh_execute_header, v80, v81, "[%@] Nothing in response to import", v84, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v80 = *(NSObject **)(v0 + 360);
    }
    uint64_t v93 = *(void *)(v0 + 552);
    uint64_t v94 = *(void *)(v0 + 512);

    v118(v93, v94);
    id v95 = *(void **)(v0 + 752);
    uint64_t v96 = *(void **)(v0 + 656);
    uint64_t v97 = *(void **)(v0 + 616);
    uint64_t v98 = *(void *)(v0 + 360);
    id v99 = objc_allocWithZone((Class)ASDPurchaseResponse);
    sub_100018D68(0, &qword_1005A57D0);
    Class v100 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v101 = [v99 initWithPurchaseResponseItems:v100];

    BOOL v102 = *(void **)(v98 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse);
    *(void *)(v98 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse) = v101;

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v103 = *(void (**)(void))(v0 + 8);
    v103();
  }
  else
  {
    if (*(uint64_t *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1) {
      goto LABEL_51;
    }
LABEL_54:
    uint64_t v89 = *(void *)(v0 + 136);
    *(void *)(v0 + 784) = v89;
    swift_bridgeObjectRetain();
    uint64_t v90 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v90;
    *uint64_t v90 = v0;
    v90[1] = sub_10009FE4C;
    uint64_t v91 = *(void *)(v0 + 768);
    uint64_t v92 = *(void *)(v0 + 752);
    sub_1000A46F0(v91, v92, v89);
  }
}

uint64_t sub_10009FE4C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 800) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10009FF88, 0, 0);
}

uint64_t sub_10009FF88()
{
  unint64_t v1 = v0[100];
  if (v1) {
    sub_10009BFB8(v1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A8FCC);
  }
  uint64_t v2 = (void *)v0[94];
  uint64_t v3 = (void *)v0[82];
  uint64_t v4 = (void *)v0[77];
  uint64_t v5 = v0[45];
  id v6 = objc_allocWithZone((Class)ASDPurchaseResponse);
  sub_100018D68(0, &qword_1005A57D0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithPurchaseResponseItems:isa];

  NSString v9 = *(void **)(v5 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse);
  *(void *)(v5 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse) = v8;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000A0200()
{
  uint64_t v54 = v0;
  unint64_t v1 = *(void **)(v0 + 360);
  swift_bridgeObjectRelease();
  static Logger.purchase.getter();
  id v2 = v1;
  swift_errorRetain();
  id v3 = v2;
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v51 = *(void *)(v0 + 528);
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v50 = *(void *)(v0 + 512);
    id v6 = *(char **)(v0 + 360);
    uint64_t v7 = swift_slowAlloc();
    id v8 = (void *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412802;
    os_log_type_t type = v5;
    NSString v9 = *(void **)&v6[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    *(void *)(v0 + 280) = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v9;

    *(_WORD *)(v7 + 12) = 2082;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v11 = Dictionary.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 296) = sub_1000F7290(v11, v13, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2112;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 304) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v8[1] = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, type, "[%@] Encountered error looking up MAPI data for: [%{public}s] error: %@", (uint8_t *)v7, 0x20u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v52(v51, v50);
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v16 = *(void *)(v0 + 528);
    uint64_t v17 = *(void *)(v0 + 512);
    unint64_t v18 = *(void **)(v0 + 360);
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();

    v15(v16, v17);
  }
  *(void *)(v0 + 656) = [self defaultWorkspace];
  swift_beginAccess();
  uint64_t v19 = *(void *)(v0 + 136);
  *(void *)(v0 + 664) = v19;
  char v20 = *(unsigned char *)(v19 + 32);
  *(unsigned char *)(v0 + 812) = v20;
  uint64_t v21 = 1 << v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & *(void *)(v19 + 64);
  *(void *)(v0 + 672) = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
  uint64_t v24 = *(void *)(v0 + 608);
  *(void *)(v0 + 68_Block_object_dispose(&a9, 8) = v24;
  *(void *)(v0 + 680) = v24;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v26 = 0;
  while (v23)
  {
    unint64_t v27 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    unint64_t v28 = v27 | (v26 << 6);
    uint64_t result = *(void *)(v0 + 664);
LABEL_27:
    *(void *)(v0 + 704) = v26;
    *(void *)(v0 + 696) = v23;
    uint64_t v35 = *(void *)(v0 + 464);
    uint64_t v34 = *(void *)(v0 + 472);
    uint64_t v36 = *(void *)(v0 + 416);
    sub_1000AA434(*(void *)(result + 56) + *(void *)(*(void *)(v0 + 424) + 72) * v28, v34);
    sub_1000AA4F4(v34, v35);
    swift_beginAccess();
    id v37 = *(id **)(v35 + *(int *)(v36 + 36));
    if (v37)
    {
      uint64_t v38 = sub_1002F9408(v37);
      *(void *)(v0 + 712) = v38;
      if (v38)
      {
        id v39 = v38;
        id v40 = sub_10039F908(v38);
        *(void *)(v0 + 720) = v40;
        if (v40)
        {
          uint64_t v46 = *(void *)(*(void *)(v0 + 360) + *(void *)(v0 + 672));
          *(void *)(v0 + 72_Block_object_dispose(&a9, 8) = v46;
          id v47 = (void *)swift_task_alloc();
          *(void *)(v0 + 736) = v47;
          *id v47 = v0;
          v47[1] = sub_10009E478;
          uint64_t v48 = *(void *)(v0 + 464);
          return sub_1000A12D4(v48, v46);
        }
      }
    }
    uint64_t result = sub_1000AA498(*(void *)(v0 + 464));
  }
  int64_t v29 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
LABEL_38:
    __break(1u);
    return result;
  }
  int64_t v30 = (unint64_t)((1 << *(unsigned char *)(v0 + 812)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 664);
  if (v29 >= v30) {
    goto LABEL_31;
  }
  uint64_t v31 = result + 64;
  unint64_t v32 = *(void *)(result + 64 + 8 * v29);
  ++v26;
  if (v32) {
    goto LABEL_26;
  }
  int64_t v26 = v29 + 1;
  if (v29 + 1 >= v30) {
    goto LABEL_31;
  }
  unint64_t v32 = *(void *)(v31 + 8 * v26);
  if (v32) {
    goto LABEL_26;
  }
  int64_t v26 = v29 + 2;
  if (v29 + 2 >= v30) {
    goto LABEL_31;
  }
  unint64_t v32 = *(void *)(v31 + 8 * v26);
  if (v32) {
    goto LABEL_26;
  }
  int64_t v26 = v29 + 3;
  if (v29 + 3 >= v30) {
    goto LABEL_31;
  }
  unint64_t v32 = *(void *)(v31 + 8 * v26);
  if (v32)
  {
LABEL_26:
    unint64_t v23 = (v32 - 1) & v32;
    unint64_t v28 = __clz(__rbit64(v32)) + (v26 << 6);
    goto LABEL_27;
  }
  int64_t v33 = v29 + 4;
  if (v33 < v30)
  {
    unint64_t v32 = *(void *)(v31 + 8 * v33);
    if (!v32)
    {
      while (1)
      {
        int64_t v26 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_38;
        }
        if (v26 >= v30) {
          goto LABEL_31;
        }
        unint64_t v32 = *(void *)(v31 + 8 * v26);
        ++v33;
        if (v32) {
          goto LABEL_26;
        }
      }
    }
    int64_t v26 = v33;
    goto LABEL_26;
  }
LABEL_31:
  os_log_type_t v41 = *(void **)(v0 + 616);
  swift_release();
  uint64_t v42 = swift_bridgeObjectRetain();
  uint64_t v43 = sub_1000A232C(v42, v41);
  *(void *)(v0 + 752) = v43;
  swift_bridgeObjectRelease();
  uint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v44;
  *uint64_t v44 = v0;
  v44[1] = sub_10009EEAC;
  uint64_t v45 = *(void *)(v0 + 616);
  return sub_1000A2E98(v43, v45);
}

uint64_t sub_1000A08A0()
{
  unint64_t v1 = (void *)_convertErrorToNSError(_:)();
  id v2 = (id)ASDErrorWithSafeUserInfo();

  if (!v2)
  {
    type metadata accessor for ASDError(0);
    v0[28] = 500;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100036BF0();
    _BridgedStoredNSError.init(_:userInfo:)();
    id v2 = (id)v0[27];
  }
  id v3 = (void *)v0[94];
  uint64_t v4 = (void *)v0[82];
  os_log_type_t v5 = (void *)v0[77];
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_1000A4500(v6, (uint64_t)v2);
  swift_bridgeObjectRelease();
  swift_willThrow();

  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000A0B20(uint64_t a1)
{
  *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v2 + 136) = v1;
  return _swift_task_switch(sub_1000A0B40, 0, 0);
}

uint64_t sub_1000A0B40()
{
  self;
  id v1 = sub_10030B11C();
  id v2 = objc_allocWithZone((Class)AMSMediaTask);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 initWithType:0 clientIdentifier:v3 clientVersion:v4 bag:v1];
  v0[18] = v5;

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v5 setItemIdentifiers:isa];

  self;
  id v7 = sub_1000169A4();
  [v5 setClientInfo:v7];

  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setLogKey:v8];

  sub_100042B10((uint64_t)&off_100510648);
  Class v9 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 setAdditionalQueryParams:v9];

  id v10 = [v5 perform];
  v0[19] = v10;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000A0E04;
  uint64_t v11 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000A6B04;
  v0[13] = &unk_100515430;
  v0[14] = v11;
  [v10 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000A0E04()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    id v2 = sub_1000A1110;
  }
  else {
    id v2 = sub_1000A0F14;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A0F14()
{
  uint64_t v1 = (void *)v0[15];
  id v2 = [v1 responseDataItems];
  if (v2)
  {
    NSString v3 = v2;
    sub_10001644C(&qword_1005A5100);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v5; ++i)
      {
        id v7 = objc_allocWithZone((Class)MediaApp);
        swift_bridgeObjectRetain();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        Class v9 = sub_1002F92DC(v7, isa);

        if (v9)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
    }
    id v10 = (void *)v0[18];
    uint64_t v11 = (void *)v0[19];
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v12 = (void *)v0[18];
    uint64_t v13 = (void *)v0[19];
  }
  uint64_t v14 = (uint64_t (*)(void *))v0[1];
  return v14(_swiftEmptyArrayStorage);
}

uint64_t sub_1000A1110()
{
  uint64_t v1 = (void *)v0[19];
  id v2 = (void *)v0[18];
  swift_willThrow();

  NSString v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000A1188()
{
  type metadata accessor for PurchaseCandidate();
  UUID.uuidString.getter();
  sub_1000FC118(8);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 47;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  if (*(void *)(v0 + 16))
  {
    uint64_t v3 = *(void *)(v0 + 8);
    uint64_t v4 = *(void **)(v0 + 16);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 5849665;
}

uint64_t sub_1000A12D4(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  type metadata accessor for PurchaseCandidate();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v3[24] = v4;
  v3[25] = *(void *)(v4 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  return _swift_task_switch(sub_1000A1458, 0, 0);
}

uint64_t sub_1000A1458()
{
  uint64_t v133 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    uint64_t v35 = *(void **)(v0 + 144);
    uint64_t v36 = *(void *)(v0 + 152);
    static Logger.purchase.getter();
    sub_1000AA434(v1, v36);
    id v37 = v35;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v42 = *(void *)(v0 + 200);
    uint64_t v41 = *(void *)(v0 + 208);
    uint64_t v43 = *(void *)(v0 + 192);
    uint64_t v44 = *(char **)(v0 + 144);
    uint64_t v45 = *(void *)(v0 + 152);
    if (v40)
    {
      *(void *)uint64_t v125 = *(void *)(v0 + 208);
      uint64_t v46 = swift_slowAlloc();
      uint64_t v119 = (void *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 138412546;
      os_log_type_t v121 = v39;
      id v47 = *(void **)&v44[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      *(void *)(v0 + 16) = v47;
      id v48 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v119 = v47;

      *(_WORD *)(v46 + 12) = 2082;
      uint64_t v49 = sub_1000A1188();
      *(void *)(v0 + 24) = sub_1000F7290(v49, v50, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498(v45);
      _os_log_impl((void *)&_mh_execute_header, v38, v121, "[%@][%{public}s] Failed to find bundleID", (uint8_t *)v46, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(os_log_type_t *, uint64_t))(v42 + 8))(*(os_log_type_t **)v125, v43);
    }
    else
    {

      sub_1000AA498(v45);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    }
    goto LABEL_21;
  }
  uint64_t v3 = (void **)(v0 + 56);
  uint64_t v4 = *(void *)(v1 + 8);
  id v5 = objc_allocWithZone((Class)IXApplicationIdentity);
  swift_bridgeObjectRetain_n();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithBundleIdentifier:v6];

  if (!v7)
  {
    uint64_t v51 = *(void *)(v0 + 160);
    uint64_t v52 = *(void **)(v0 + 144);
    uint64_t v53 = *(void *)(v0 + 128);
    static Logger.purchase.getter();
    sub_1000AA434(v53, v51);
    id v54 = v52;
    swift_bridgeObjectRetain();
    id v55 = v54;
    id v56 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.error.getter();
    BOOL v57 = os_log_type_enabled(v56, v126);
    uint64_t v58 = *(void *)(v0 + 216);
    uint64_t v60 = *(void *)(v0 + 192);
    uint64_t v59 = *(void *)(v0 + 200);
    uint64_t v128 = *(void *)(v0 + 160);
    id v61 = *(char **)(v0 + 144);
    if (v57)
    {
      uint64_t v62 = swift_slowAlloc();
      uint64_t v114 = (void *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 138412802;
      uint64_t v118 = v56;
      id v63 = *(void **)&v61[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      *(void *)(v0 + 32) = v63;
      id v64 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v114 = v63;

      *(_WORD *)(v62 + 12) = 2082;
      uint64_t v65 = sub_1000A1188();
      *(void *)(v0 + 40) = sub_1000F7290(v65, v66, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498(v128);
      *(_WORD *)(v62 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = sub_1000F7290(v4, v2, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v118, v126, "[%@][%{public}s] Failed to create an app identify for %s", (uint8_t *)v62, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
LABEL_21:
      Class v130 = 0;
      goto LABEL_22;
    }

    sub_1000AA498(v128);
    swift_bridgeObjectRelease_n();

LABEL_20:
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
    goto LABEL_21;
  }
  NSString v8 = self;
  *uint64_t v3 = 0;
  Class v9 = (id *)[v8 existingCoordinatorForAppWithIdentity:v7 error:v0 + 56];
  id v10 = *v3;
  if (v9)
  {
    uint64_t v11 = *(void *)(v0 + 184);
    unint64_t v12 = v9;
    uint64_t v13 = *(void **)(v0 + 144);
    uint64_t v14 = *(void *)(v0 + 128);
    id v15 = v10;
    swift_bridgeObjectRelease();
    static Logger.purchase.getter();
    sub_1000AA434(v14, v11);
    id v16 = v13;
    Class v130 = v12;
    uint64_t v17 = v12;
    id v18 = v16;
    uint64_t v19 = v17;
    char v20 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v20, type);
    uint64_t v22 = *(void *)(v0 + 240);
    uint64_t v24 = *(NSObject **)(v0 + 192);
    uint64_t v23 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 184);
    int64_t v26 = *(char **)(v0 + 144);
    if (v21)
    {
      uint64_t v113 = *(void *)(v0 + 184);
      uint64_t v127 = v7;
      uint64_t v27 = swift_slowAlloc();
      os_log_t v117 = (os_log_t)v23;
      unint64_t v28 = (void *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412802;
      *(void *)unint64_t v120 = v22;
      os_log_t v122 = v24;
      int64_t v29 = *(void **)&v26[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      *(void *)(v0 + 112) = v29;
      id v30 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v29;

      *(_WORD *)(v27 + 12) = 2082;
      uint64_t v31 = sub_1000A1188();
      *(void *)(v0 + 120) = sub_1000F7290(v31, v32, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498(v113);
      *(_WORD *)(v27 + 22) = 1024;
      unsigned int v33 = sub_100278EE4(v19);

      *(_DWORD *)(v0 + 24_Block_object_dispose(&a9, 8) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v20, type, "[%@][%{public}s] Returning existing coordinator with appDRI: %{BOOL}d", (uint8_t *)v27, 0x1Cu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      os_log_t v34 = v117;
LABEL_6:
      ((void (*)(os_log_type_t *, os_log_t))v34[1].isa)(*(os_log_type_t **)v120, v122);
      goto LABEL_22;
    }

    sub_1000AA498(v25);
    (*(void (**)(uint64_t, NSObject *))(v23 + 8))(v22, v24);
    goto LABEL_22;
  }
  unint64_t v129 = v7;
  uint64_t v67 = *(char **)(v0 + 136);
  id v68 = v10;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRelease();
  id v69 = [objc_allocWithZone((Class)CoordinatorBuilder) init];
  Swift::String v70 = (char *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1003BFFD4(v69, v70);

  sub_1003BFFF4((uint64_t)v69, 1);
  sub_10032B4D8(v69, v67);
  sub_1003BFFE8((uint64_t)v69, 1);
  sub_1003C0000((uint64_t)v69, 0);
  *(void *)(v0 + 64) = 0;
  Swift::String v71 = (id *)sub_1003BFC54(v69, (void *)(v0 + 64));
  uint64_t v72 = *(void **)(v0 + 64);
  if (!v71)
  {
    id v76 = v72;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v77 = *(void *)(v0 + 168);
    uint64_t v78 = *(void **)(v0 + 144);
    uint64_t v79 = *(void *)(v0 + 128);
    static Logger.purchase.getter();
    sub_1000AA434(v79, v77);
    id v80 = v78;
    swift_errorRetain();
    id v81 = v80;
    swift_errorRetain();
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    BOOL v84 = os_log_type_enabled(v82, v83);
    uint64_t v58 = *(void *)(v0 + 224);
    uint64_t v60 = *(void *)(v0 + 192);
    uint64_t v59 = *(void *)(v0 + 200);
    uint64_t v85 = *(void *)(v0 + 168);
    uint64_t v86 = *(char **)(v0 + 144);
    if (v84)
    {
      uint64_t v87 = swift_slowAlloc();
      os_log_t log = (os_log_t)v85;
      uint64_t v88 = (void *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v87 = 138412802;
      uint64_t v131 = v58;
      os_log_t v123 = (os_log_t)v59;
      uint64_t v89 = *(void **)&v86[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      *(void *)(v0 + 72) = v89;
      id v90 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v88 = v89;

      *(_WORD *)(v87 + 12) = 2082;
      uint64_t v91 = sub_1000A1188();
      *(void *)(v0 + 80) = sub_1000F7290(v91, v92, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498((uint64_t)log);
      *(_WORD *)(v87 + 22) = 2112;
      swift_errorRetain();
      uint64_t v93 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v88[1] = v93;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "[%@][%{public}s] Failed to create coordinator due to error: %@", (uint8_t *)v87, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      ((void (*)(uint64_t, uint64_t))v123[1].isa)(v131, v60);
      goto LABEL_21;
    }

    swift_errorRelease();
    sub_1000AA498(v85);
    swift_errorRelease();
    swift_errorRelease();

    goto LABEL_20;
  }
  uint64_t v73 = v71;
  uint64_t v74 = *(id **)(v0 + 128);
  id v75 = v72;
  sub_1000A5A38(v73, v74);
  Class v130 = v73;
  uint64_t v96 = *(void *)(v0 + 176);
  uint64_t v97 = *(void **)(v0 + 144);
  uint64_t v98 = *(void *)(v0 + 128);
  static Logger.purchase.getter();
  sub_1000AA434(v98, v96);
  id v99 = v97;
  Class v100 = Logger.logObject.getter();
  os_log_type_t v101 = static os_log_type_t.default.getter();
  BOOL v102 = os_log_type_enabled(v100, v101);
  uint64_t v103 = *(void *)(v0 + 232);
  uint64_t v105 = *(NSObject **)(v0 + 192);
  uint64_t v104 = *(void *)(v0 + 200);
  uint64_t v106 = *(void *)(v0 + 176);
  unint64_t v107 = *(char **)(v0 + 144);
  if (v102)
  {
    uint64_t v108 = swift_slowAlloc();
    uint64_t v115 = (void *)swift_slowAlloc();
    v132[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v108 = 138412546;
    *(void *)unint64_t v120 = v103;
    os_log_t v122 = v105;
    uint64_t v109 = *(void **)&v107[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    *(void *)(v0 + 96) = v109;
    id v110 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v115 = v109;

    *(_WORD *)(v108 + 12) = 2082;
    uint64_t v111 = sub_1000A1188();
    *(void *)(v0 + 104) = sub_1000F7290(v111, v112, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000AA498(v106);
    _os_log_impl((void *)&_mh_execute_header, v100, v101, "[%@][%{public}s] Created coordinator", (uint8_t *)v108, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_t v34 = (os_log_t)v104;
    goto LABEL_6;
  }

  sub_1000AA498(v106);
  (*(void (**)(uint64_t, NSObject *))(v104 + 8))(v103, v105);
LABEL_22:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v94 = *(uint64_t (**)(id *))(v0 + 8);
  return v94(v130);
}

uint64_t sub_1000A232C(uint64_t a1, void *a2)
{
  id v88 = a2;
  uint64_t v101 = type metadata accessor for Logger();
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  id v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for PurchaseCandidate();
  uint64_t v105 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  id v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v104 = (uint64_t)&v84 - v9;
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v84 - v11;
  id v13 = objc_allocWithZone((Class)AMSBuyParams);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 initWithString:v14];

  unint64_t v107 = v2;
  uint64_t v16 = *(void *)&v2[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_additionalBuyParams];
  uint64_t v17 = &selRef_setAppAdamId_;
  uint64_t v94 = a1;
  uint64_t v106 = v5;
  uint64_t v93 = v7;
  uint64_t v103 = v12;
  if (!v16) {
    goto LABEL_29;
  }
  uint64_t v18 = *(void *)(v16 + 64);
  uint64_t v108 = (void *)(v16 + 64);
  uint64_t v19 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  int64_t v99 = v22 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v26 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v27 = v26 | (v24 << 6);
  while (2)
  {
    uint64_t v28 = *(void *)(v16 + 56);
    int64_t v29 = (void *)(*(void *)(v16 + 48) + 16 * v27);
    uint64_t v30 = v29[1];
    *(void *)&long long v109 = *v29;
    *((void *)&v109 + 1) = v30;
    sub_100031C38(v28 + 32 * v27, (uint64_t)v110);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100030134((uint64_t)&v109, (uint64_t)&v111, &qword_1005A5840);
      if (!*((void *)&v111 + 1))
      {
        swift_release();
        uint64_t v17 = &selRef_setAppAdamId_;
        a1 = v94;
        id v5 = v106;
        id v7 = v93;
        unint64_t v12 = v103;
LABEL_29:
        NSString v87 = String._bridgeToObjectiveC()();
        uint64_t v34 = *(void *)&v107[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemIDs];
        int64_t v35 = *(void *)(v34 + 16);
        if (v35)
        {
          id v85 = v15;
          uint64_t v92 = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
          uint64_t v98 = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemMetadata;
          uint64_t v97 = (void (**)(char *, uint64_t))(v100 + 8);
          uint64_t v91 = (char *)&v109 + 8;
          swift_bridgeObjectRetain();
          uint64_t v36 = 0;
          uint64_t v86 = 0;
          uint64_t v108 = _swiftEmptyArrayStorage;
          *(void *)&long long v37 = 138412546;
          long long v90 = v37;
          uint64_t v89 = (char *)&type metadata for Any + 8;
          uint64_t v100 = v34;
          int64_t v99 = v35;
          do
          {
            if (*(void *)(a1 + 16))
            {
              uint64_t v38 = *(void *)(v34 + 8 * v36 + 32);
              unint64_t v39 = sub_100049AC4(v38);
              if (v40)
              {
                uint64_t v41 = v104;
                sub_1000AA434(*(void *)(a1 + 56) + *(void *)(v105 + 72) * v39, v104);
                sub_1000AA4F4(v41, (uint64_t)v12);
                if (*((void *)v12 + 3))
                {
                  static Logger.purchase.getter();
                  sub_1000AA434((uint64_t)v12, (uint64_t)v7);
                  uint64_t v42 = v107;
                  uint64_t v43 = v107;
                  uint64_t v44 = v5;
                  uint64_t v45 = Logger.logObject.getter();
                  uint64_t v46 = (uint64_t)v7;
                  os_log_type_t v47 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v45, v47))
                  {
                    uint64_t v48 = swift_slowAlloc();
                    uint64_t v49 = swift_slowAlloc();
                    os_log_t v95 = v45;
                    uint64_t v50 = v38;
                    uint64_t v51 = (void *)v49;
                    uint64_t v96 = swift_slowAlloc();
                    *(void *)&long long v111 = v96;
                    *(_DWORD *)uint64_t v48 = v90;
                    uint64_t v52 = *(void **)&v42[v92];
                    *(void *)&long long v109 = v52;
                    id v53 = v52;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    id v54 = v51;
                    uint64_t v38 = v50;
                    *id v54 = v52;

                    *(_WORD *)(v48 + 12) = 2082;
                    uint64_t v55 = (uint64_t)v93;
                    uint64_t v56 = sub_1000A1188();
                    *(void *)&long long v109 = sub_1000F7290(v56, v57, (uint64_t *)&v111);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    sub_1000AA498(v55);
                    os_log_t v58 = v95;
                    _os_log_impl((void *)&_mh_execute_header, v95, v47, "[%@][%{public}s] Attempting batch purchase", (uint8_t *)v48, 0x16u);
                    sub_10001644C((uint64_t *)&unk_1005A3AA0);
                    swift_arrayDestroy();
                    a1 = v94;
                    swift_slowDealloc();
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();

                    (*v97)(v106, v101);
                    uint64_t v46 = v55;
                  }
                  else
                  {

                    sub_1000AA498(v46);
                    (*v97)(v44, v101);
                  }
                  uint64_t v59 = v108;
                  uint64_t v114 = _swiftEmptyDictionarySingleton;
                  unint64_t v12 = v103;
                  *(void *)&long long v111 = *((void *)v103 + 4);
                  uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
                  *((void *)&v112 + 1) = &type metadata for String;
                  *(void *)&long long v111 = v60;
                  *((void *)&v111 + 1) = v61;
                  sub_10000C948(&v111, &v109);
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v113 = v114;
                  uint64_t v114 = (void *)0x8000000000000000;
                  sub_1000D2278(&v109, 0x41656C62616C6173, 0xED000064496D6164, isUniquelyReferenced_nonNull_native);
                  uint64_t v114 = v113;
                  swift_bridgeObjectRelease();
                  id v63 = &v12[*(int *)(v102 + 40)];
                  uint64_t v64 = *((void *)v63 + 1);
                  int64_t v35 = v99;
                  if (v64)
                  {
                    uint64_t v65 = *(void *)v63;
                    *((void *)&v112 + 1) = &type metadata for String;
                    *(void *)&long long v111 = v65;
                    *((void *)&v111 + 1) = v64;
                    sub_10000C948(&v111, &v109);
                    swift_bridgeObjectRetain();
                    char v66 = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v113 = v114;
                    uint64_t v114 = (void *)0x8000000000000000;
                    sub_1000D2278(&v109, 6580598, 0xE300000000000000, v66);
                    uint64_t v114 = v113;
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v67 = *(void *)&v107[v98];
                  if (v67 && *(void *)(v67 + 16) && (unint64_t v68 = sub_100049AC4(v38), (v69 & 1) != 0))
                  {
                    sub_100031C38(*(void *)(v67 + 56) + 32 * v68, (uint64_t)&v111);
                    sub_10001644C(&qword_1005A5E50);
                    uint64_t v70 = swift_dynamicCast();
                    id v7 = (char *)v46;
                    if (v70)
                    {
                      uint64_t v71 = v109;
                      __chkstk_darwin(v70);
                      *(&v84 - 2) = (uint64_t)&v114;
                      uint64_t v72 = v86;
                      sub_1000A9558(v71, (void (*)(uint64_t, uint64_t, unsigned char *))sub_1000AA670);
                      uint64_t v86 = v72;
                      uint64_t v59 = v108;
                      swift_bridgeObjectRelease();
                    }
                  }
                  else
                  {
                    id v7 = (char *)v46;
                  }
                  id v5 = v106;
                  uint64_t v73 = v114;
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v59 = sub_1000E7D54(0, v59[2] + 1, 1, v59);
                  }
                  uint64_t v74 = v59;
                  unint64_t v75 = v59[2];
                  uint64_t v108 = v74;
                  unint64_t v76 = v74[3];
                  if (v75 >= v76 >> 1) {
                    uint64_t v108 = sub_1000E7D54((void *)(v76 > 1), v75 + 1, 1, v108);
                  }
                  uint64_t v77 = v108;
                  v108[2] = v75 + 1;
                  v77[v75 + 4] = v73;
                  sub_1000AA498((uint64_t)v12);
                  swift_bridgeObjectRelease();
                  uint64_t v34 = v100;
                }
                else
                {
                  sub_1000AA498((uint64_t)v12);
                }
              }
            }
            ++v36;
          }
          while (v35 != v36);
          swift_bridgeObjectRelease();
          id v15 = v85;
          uint64_t v17 = &selRef_setAppAdamId_;
        }
        sub_10001644C(&qword_1005A5E50);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v79 = v87;
        objc_msgSend(v15, v17[276], isa, v87);

        id v80 = objc_msgSend(v88, "ams_DSID");
        if (v80)
        {
          id v81 = v80;
          id v82 = [v80 stringValue];

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v83 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          objc_msgSend(v15, v17[276], v83, AMSBuyParamPropertyDsid);
        }
        return (uint64_t)v15;
      }
      sub_10000C948(&v112, &v109);
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10002FD00(&v109, *((uint64_t *)&v110[0] + 1));
      [v15 setParameter:_bridgeAnythingToObjectiveC<A>(_:)() forKey:v25];

      swift_unknownObjectRelease();
      uint64_t result = sub_10002E618((uint64_t)&v109);
      if (v21) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v31 = v24 + 1;
      if (__OFADD__(v24, 1))
      {
        __break(1u);
        goto LABEL_57;
      }
      if (v31 < v22)
      {
        unint64_t v32 = v108[v31];
        if (v32) {
          goto LABEL_12;
        }
        int64_t v33 = v24 + 2;
        ++v24;
        if (v31 + 1 < v22)
        {
          unint64_t v32 = v108[v33];
          if (v32) {
            goto LABEL_15;
          }
          int64_t v24 = v31 + 1;
          if (v31 + 2 < v22)
          {
            unint64_t v32 = v108[v31 + 2];
            if (v32)
            {
              v31 += 2;
              goto LABEL_12;
            }
            int64_t v33 = v31 + 3;
            int64_t v24 = v31 + 2;
            if (v31 + 3 < v22) {
              break;
            }
          }
        }
      }
LABEL_26:
      unint64_t v21 = 0;
      memset(v110, 0, sizeof(v110));
      long long v109 = 0u;
    }
    unint64_t v32 = v108[v33];
    if (v32)
    {
LABEL_15:
      int64_t v31 = v33;
LABEL_12:
      unint64_t v21 = (v32 - 1) & v32;
      unint64_t v27 = __clz(__rbit64(v32)) + (v31 << 6);
      int64_t v24 = v31;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v22)
    {
      int64_t v24 = v99;
      goto LABEL_26;
    }
    unint64_t v32 = v108[v31];
    ++v33;
    if (v32) {
      goto LABEL_12;
    }
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_1000A2E98(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v4 = type metadata accessor for NSFastEnumerationIterator();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  return _swift_task_switch(sub_1000A2F5C, 0, 0);
}

uint64_t sub_1000A2F5C()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  self;
  id v4 = sub_10030B11C();
  id v5 = [objc_allocWithZone((Class)AMSPurchaseQueueConfiguration) initWithBag:v4];
  v0[31] = v5;

  [v5 setDelegate:v1];
  id v6 = [objc_allocWithZone((Class)AMSPurchaseQueue) initWithConfiguration:v5];
  v0[32] = v6;
  id v7 = [objc_allocWithZone((Class)AMSPurchase) initWithPurchaseType:0 buyParams:v3];
  v0[33] = v7;
  [v7 setAccount:v2];
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setLogUUID:v8];

  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_client + 8);
  if (!v9
    || (*(void *)(v1 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_client) != 0xD000000000000012
     || v9 != 0x800000010044E7D0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    [v7 setSendBlindedData:1];
  }
  self;
  id v10 = sub_1000169A4();
  [v7 setClientInfo:v10];

  sub_10001644C(&qword_1005A43D0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100488A80;
  *(void *)(v11 + 32) = v7;
  uint64_t v17 = v11;
  specialized Array._endMutation()();
  sub_100018D68(0, &qword_1005A5820);
  id v12 = v7;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v6, "enquePurchases:", isa, v17);
  v0[34] = v14;

  v0[2] = v0;
  v0[7] = v0 + 23;
  v0[3] = sub_1000A32B0;
  uint64_t v15 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000A6B04;
  v0[13] = &unk_100515418;
  v0[14] = v15;
  [v14 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000A32B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 280) = v1;
  if (v1) {
    uint64_t v2 = sub_1000A3670;
  }
  else {
    uint64_t v2 = sub_1000A33C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A33C0()
{
  uint64_t v1 = *(void **)(v0 + 184);
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (*(void *)(v0 + 144))
  {
    uint64_t v18 = v1;
    uint64_t v2 = (id *)(v0 + 192);
    do
    {
      sub_10000C948((_OWORD *)(v0 + 120), (_OWORD *)(v0 + 152));
      sub_100018D68(0, &qword_1005A5828);
      if (swift_dynamicCast())
      {
        id v3 = *v2;
        Class isa = (Class)[*v2 responseDictionary];
        if (isa)
        {
          static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        uint64_t v5 = self;
        id v6 = sub_1003DD184(v5, isa, 0);

        if (v6)
        {
          id v7 = v6;
          id v9 = sub_1003DDD3C(v7, v8);
          if (v9)
          {
            id v10 = v9;
            sub_100018D68(0, &qword_1005A5818);
            unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            sub_10009BFB8(v11, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A8DAC);
          }
        }
      }
      NSFastEnumerationIterator.next()();
    }
    while (*(void *)(v0 + 144));
    uint64_t v1 = v18;
  }
  id v13 = *(void **)(v0 + 264);
  id v12 = *(void **)(v0 + 272);
  uint64_t v15 = *(void **)(v0 + 248);
  id v14 = *(void **)(v0 + 256);
  (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));

  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void *))(v0 + 8);
  return v16(_swiftEmptyArrayStorage);
}

uint64_t sub_1000A3670()
{
  uint64_t v1 = (void *)v0[34];
  id v3 = (void *)v0[32];
  uint64_t v2 = (void *)v0[33];
  uint64_t v4 = (void *)v0[31];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void sub_1000A370C(os_log_t a1, uint64_t a2)
{
  os_log_t v132 = (os_log_t)type metadata accessor for PurchaseCandidate();
  __chkstk_darwin(v132);
  id v6 = (char *)v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v133 = (char *)v118 - v8;
  __chkstk_darwin(v9);
  uint64_t v126 = (uint64_t)v118 - v10;
  __chkstk_darwin(v11);
  id v13 = (char *)v118 - v12;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v135 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v134 = (char *)v118 - v18;
  __chkstk_darwin(v19);
  os_log_t v127 = (os_log_t)((char *)v118 - v20);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v118 - v22;
  static Logger.purchase.getter();
  sub_1000AA434((uint64_t)a1, (uint64_t)v13);
  id v24 = v2;
  swift_errorRetain();
  NSString v25 = (char *)v24;
  swift_errorRetain();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  int v28 = v27;
  BOOL v29 = os_log_type_enabled(v26, v27);
  id v130 = v25;
  uint64_t v131 = v14;
  uint64_t v128 = v16;
  uint64_t v125 = v6;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    os_log_t v123 = v23;
    unint64_t v32 = (void *)v31;
    unint64_t v129 = (void *)swift_slowAlloc();
    id v137 = v129;
    *(_DWORD *)uint64_t v30 = 138412802;
    os_log_t v124 = v26;
    uint64_t v33 = a2;
    uint64_t v34 = a1;
    int64_t v35 = *(void **)&v25[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    uint64_t v136 = (uint64_t)v35;
    int v122 = v28;
    id v36 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v32 = v35;
    a1 = v34;
    a2 = v33;

    *(_WORD *)(v30 + 12) = 2082;
    uint64_t v37 = sub_1000A1188();
    uint64_t v136 = sub_1000F7290(v37, v38, (uint64_t *)&v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000AA498((uint64_t)v13);
    *(_WORD *)(v30 + 22) = 2114;
    swift_errorRetain();
    uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v136 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32[1] = v39;
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v40 = v124;
    _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v122, "[%@][%{public}s] Purchase failed due to error: %{public}@", (uint8_t *)v30, 0x20u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v14 = v131;
    swift_slowDealloc();

    uint64_t v41 = *(void (**)(char *, uint64_t))(v135 + 8);
    v41(v123, v14);
  }
  else
  {

    sub_1000AA498((uint64_t)v13);
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v41 = *(void (**)(char *, uint64_t))(v135 + 8);
    v41(v23, v14);
  }
  uint64_t v42 = (uint64_t)v133;
  uint64_t v43 = *(id **)((char *)&a1->isa + SHIDWORD(v132[4].isa));
  uint64_t v44 = v134;
  if (v43)
  {
    uint64_t v45 = sub_1002F9408(v43);
    if (v45)
    {
      uint64_t v46 = v45;
      id v47 = (id)sub_1002305D0((uint64_t)v45);

      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t isa = (unint64_t)a1[2].isa;
      if (isa)
      {
        uint64_t v50 = a1[1].isa;
        os_log_t v123 = (char *)v48;
        os_log_t v124 = v50;
        os_log_t v51 = v127;
        static Logger.purchase.getter();
        os_log_t v132 = a1;
        uint64_t v52 = (uint64_t)a1;
        uint64_t v53 = v126;
        sub_1000AA434(v52, v126);
        id v54 = v130;
        swift_bridgeObjectRetain_n();
        uint64_t v55 = (char *)v54;
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.default.getter();
        int v122 = v57;
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          uint64_t v121 = a2;
          uint64_t v59 = v58;
          uint64_t v60 = (void *)swift_slowAlloc();
          v118[1] = v60;
          unint64_t v120 = (void *)swift_slowAlloc();
          id v137 = v120;
          *(_DWORD *)uint64_t v59 = 138412802;
          os_log_t v119 = v56;
          unint64_t v129 = v41;
          uint64_t v61 = v14;
          uint64_t v62 = *(void **)&v55[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
          uint64_t v136 = (uint64_t)v62;
          id v63 = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v60 = v62;
          uint64_t v14 = v61;
          uint64_t v41 = (void (*)(char *, uint64_t))v129;

          *(_WORD *)(v59 + 12) = 2082;
          uint64_t v64 = v126;
          uint64_t v65 = sub_1000A1188();
          uint64_t v136 = sub_1000F7290(v65, v66, (uint64_t *)&v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000AA498(v64);
          *(_WORD *)(v59 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v136 = sub_1000F7290((uint64_t)v124, isa, (uint64_t *)&v137);
          uint64_t v42 = (uint64_t)v133;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          os_log_t v67 = v119;
          _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v122, "[%@][%{public}s] Removing vid for bundleID: %s", (uint8_t *)v59, 0x20u);
          sub_10001644C((uint64_t *)&unk_1005A3AA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v41((char *)v127, v14);
        }
        else
        {

          sub_1000AA498(v53);
          swift_bridgeObjectRelease_n();
          v41((char *)v51, v14);
        }
        id v68 = [self defaultWorkspace];
        a1 = v132;
        if (v68)
        {
          char v69 = v68;
          NSString v70 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v71 = String._bridgeToObjectiveC()();
          [v69 removeDeviceIdentifierForVendorName:v70 bundleIdentifier:v71];
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v44 = v134;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  Class v72 = a1[3].isa;
  if (v72)
  {
    uint64_t v73 = v72;
    static Logger.purchase.getter();
    sub_1000AA434((uint64_t)a1, v42);
    id v74 = v130;
    unint64_t v75 = v73;
    unint64_t v76 = (char *)v74;
    uint64_t v77 = v75;
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.default.getter();
    int v80 = v79;
    BOOL v81 = os_log_type_enabled(v78, v79);
    unint64_t v129 = v41;
    uint64_t v133 = v76;
    if (v81)
    {
      uint64_t v82 = swift_slowAlloc();
      os_log_t v132 = a1;
      uint64_t v83 = v82;
      uint64_t v84 = swift_slowAlloc();
      os_log_t v127 = v78;
      id v85 = v84;
      os_log_t v124 = v84;
      id v130 = (id)swift_slowAlloc();
      id v137 = v130;
      *(_DWORD *)uint64_t v83 = 138412802;
      LODWORD(v126) = v80;
      uint64_t v86 = *(void **)&v76[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      uint64_t v136 = (uint64_t)v86;
      id v87 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v85->unint64_t isa = (Class)v86;

      *(_WORD *)(v83 + 12) = 2082;
      uint64_t v88 = sub_1000A1188();
      uint64_t v136 = sub_1000F7290(v88, v89, (uint64_t *)&v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498(v42);
      *(_WORD *)(v83 + 22) = 2082;
      id v90 = [(objc_class *)v77 identity];
      id v91 = [v90 bundleID];

      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v94 = v93;

      uint64_t v14 = v131;
      uint64_t v95 = v92;
      uint64_t v41 = (void (*)(char *, uint64_t))v129;
      uint64_t v136 = sub_1000F7290(v95, v94, (uint64_t *)&v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v96 = v127;
      _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v126, "[%@][%{public}s] Canceling: %{public}s", (uint8_t *)v83, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v132;
      swift_slowDealloc();

      uint64_t v97 = v134;
    }
    else
    {

      sub_1000AA498(v42);
      uint64_t v97 = v44;
    }
    v41(v97, v14);
    uint64_t v98 = (void *)_convertErrorToNSError(_:)();
    id v137 = 0;
    unsigned int v99 = [(objc_class *)v77 cancelForReason:v98 client:1 error:&v137];

    if (v99)
    {
      id v100 = v137;
    }
    else
    {
      uint64_t v134 = (char *)v77;
      id v101 = v137;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v102 = v128;
      static Logger.purchase.getter();
      uint64_t v103 = (uint64_t)v125;
      sub_1000AA434((uint64_t)a1, (uint64_t)v125);
      uint64_t v104 = v133;
      swift_errorRetain();
      uint64_t v105 = v104;
      swift_errorRetain();
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = swift_slowAlloc();
        long long v109 = (void *)swift_slowAlloc();
        uint64_t v133 = (char *)swift_slowAlloc();
        id v137 = v133;
        *(_DWORD *)uint64_t v108 = 138412802;
        os_log_t v132 = v106;
        id v110 = *(void **)&v105[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
        uint64_t v136 = (uint64_t)v110;
        id v111 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *long long v109 = v110;

        *(_WORD *)(v108 + 12) = 2082;
        uint64_t v112 = sub_1000A1188();
        uint64_t v136 = sub_1000F7290(v112, v113, (uint64_t *)&v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000AA498(v103);
        *(_WORD *)(v108 + 22) = 2114;
        swift_errorRetain();
        uint64_t v114 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v136 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v109[1] = v114;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v115 = v132;
        _os_log_impl((void *)&_mh_execute_header, v132, v107, "[%@][%{public}s] Coordinator cancelation failed with error: %{public}@", (uint8_t *)v108, 0x20u);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        uint64_t v116 = v128;
        uint64_t v117 = v131;
      }
      else
      {

        swift_errorRelease();
        sub_1000AA498(v103);
        swift_errorRelease();
        swift_errorRelease();

        uint64_t v116 = v102;
        uint64_t v117 = v14;
      }
      ((void (*)(char *, uint64_t))v129)(v116, v117);
    }
  }
}

uint64_t sub_1000A4500(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseCandidate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = ((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v12) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v12) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v12) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18)
        {
          int64_t v14 = v17 + 3;
          if (v17 + 3 >= v12) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v8 + 8 * v14);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_5:
    sub_1000AA434(*(void *)(a1 + 56) + *(void *)(v5 + 72) * v16, (uint64_t)v7);
    sub_1000A370C(v7, a2);
    uint64_t result = sub_1000AA498((uint64_t)v7);
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v12) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000A46F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PurchaseCandidate();
  v4[16] = v6;
  v4[17] = *(void *)(v6 - 8);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_1000A483C, 0, 0);
}

uint64_t sub_1000A483C()
{
  v0[4] = _swiftEmptyArrayStorage;
  unint64_t v1 = v0[8];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = v3;
    v0[21] = v3;
    if (v3) {
      goto LABEL_3;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v73 = _swiftEmptyArrayStorage;
LABEL_30:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v80 = (uint64_t (*)(void *))v0[1];
    return v80(v73);
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v3 = swift_bridgeObjectRetain();
  v0[21] = v2;
  if (!v2) {
    goto LABEL_29;
  }
LABEL_3:
  v0[22] = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
  if (v2 < 1)
  {
    __break(1u);
    return withCheckedContinuation<A>(isolation:function:_:)(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  uint64_t v11 = 0;
  while (1)
  {
    v0[23] = v11;
    uint64_t v17 = v0[8];
    id v18 = (v17 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
        : *(id *)(v17 + 8 * v11 + 32);
    uint64_t v20 = v18;
    v0[24] = v18;
    id v21 = sub_1003A7D80(v18, v19);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = v0[10];
      id v24 = [v21 longLongValue];

      if (*(void *)(v23 + 16))
      {
        unint64_t v25 = sub_100049AC4((uint64_t)v24);
        if (v26) {
          break;
        }
      }
    }
    uint64_t v48 = (void *)v0[11];
    static Logger.purchase.getter();
    id v49 = v48;
    id v50 = v20;
    id v51 = v49;
    uint64_t v52 = v50;
    id v13 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v53))
    {
      uint64_t v54 = v0[22];
      uint64_t v55 = (char *)v0[11];
      uint64_t v56 = swift_slowAlloc();
      os_log_type_t v57 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 138412546;
      uint64_t v58 = *(void **)&v55[v54];
      *(void *)(v56 + 4) = v58;
      *os_log_type_t v57 = v58;
      id v59 = v58;

      *(_WORD *)(v56 + 12) = 2114;
      id v61 = sub_1003A7D80(v52, v60);
      *(void *)(v56 + 14) = v61;
      v57[1] = v61;

      _os_log_impl((void *)&_mh_execute_header, v13, v53, "[%@][%{public}@] Skipping purchase due to missing purchase candidate", (uint8_t *)v56, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      int64_t v12 = (void *)v0[11];

      id v13 = v52;
    }
    uint64_t v15 = v0[13];
    uint64_t v14 = v0[14];
    uint64_t v16 = v0[12];

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
LABEL_7:
    uint64_t v11 = v0[23] + 1;
    if (v11 == v0[21])
    {
      swift_bridgeObjectRelease();
      uint64_t v73 = (void *)v0[4];
      goto LABEL_30;
    }
  }
  uint64_t v27 = v0[19];
  uint64_t v28 = v0[20];
  sub_1000AA434(*(void *)(v0[10] + 56) + *(void *)(v0[17] + 72) * v25, v27);
  sub_1000AA4F4(v27, v28);
  BOOL v29 = *(void **)(v28 + 24);
  v0[25] = v29;
  if (!v29)
  {
    uint64_t v30 = v0[20];
    uint64_t v31 = v0[18];
    unint64_t v32 = (void *)v0[11];
    static Logger.purchase.getter();
    sub_1000AA434(v30, v31);
    id v33 = v32;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      os_log_type_t v82 = v35;
      uint64_t v83 = v34;
      uint64_t v36 = v0[22];
      uint64_t v37 = v0[18];
      unint64_t v38 = (char *)v0[11];
      uint64_t v39 = swift_slowAlloc();
      os_log_t v40 = (void *)swift_slowAlloc();
      v0[5] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 138412546;
      uint64_t v41 = *(void **)&v38[v36];
      *(void *)(v39 + 4) = v41;
      void *v40 = v41;
      id v42 = v41;

      *(_WORD *)(v39 + 12) = 2082;
      v0[2] = 5849665;
      v0[3] = 0xE300000000000000;
      UUID.uuidString.getter();
      sub_1000FC118(8);
      swift_bridgeObjectRelease();
      v43._countAndFlagsBits = static String._fromSubstring(_:)();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44._countAndFlagsBits = 47;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      uint64_t v45 = v0[18];
      if (*(void *)(v37 + 16))
      {
        uint64_t v46 = *(void *)(v45 + 8);
        id v47 = *(void **)(v37 + 16);
      }
      else
      {
        uint64_t v46 = 0;
        id v47 = (void *)0xE000000000000000;
      }
      os_log_t v67 = v83;
      uint64_t v68 = v0[15];
      uint64_t v69 = v0[13];
      uint64_t v84 = v0[12];
      swift_bridgeObjectRetain();
      v70._countAndFlagsBits = v46;
      v70._object = v47;
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      v71._countAndFlagsBits = 58;
      v71._object = (void *)0xE100000000000000;
      String.append(_:)(v71);
      v0[6] = *(void *)(v45 + 32);
      v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      *(void *)(v39 + 14) = sub_1000F7290(v0[2], v0[3], v0 + 5);
      swift_bridgeObjectRelease();
      sub_1000AA498(v45);
      _os_log_impl((void *)&_mh_execute_header, v67, v82, "[%@][%{public}s] Skipping purchase import missing coordinator", (uint8_t *)v39, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v84);
    }
    else
    {
      uint64_t v62 = v0[18];
      uint64_t v63 = v0[15];
      uint64_t v64 = v0[12];
      uint64_t v65 = v0[13];
      unint64_t v66 = (void *)v0[11];

      sub_1000AA498(v62);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
    }
    sub_1000AA498(v0[20]);
    goto LABEL_7;
  }
  uint64_t v74 = v0[20];
  uint64_t v75 = v0[11];
  uint64_t v76 = v0[9];
  uint64_t v77 = (void *)swift_task_alloc();
  v0[26] = v77;
  v77[2] = v75;
  v77[3] = v74;
  v77[4] = v29;
  v77[5] = v20;
  v77[6] = v76;
  id v78 = v29;
  os_log_type_t v79 = (void *)swift_task_alloc();
  v0[27] = v79;
  uint64_t v10 = sub_10001644C(&qword_1005A57F8);
  *os_log_type_t v79 = v0;
  v79[1] = sub_1000A4FBC;
  unint64_t v7 = 0x800000010044E780;
  uint64_t v8 = sub_1000AA558;
  uint64_t v3 = (uint64_t)(v0 + 7);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0xD000000000000027;
  uint64_t v9 = v77;
  return withCheckedContinuation<A>(isolation:function:_:)(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000A4FBC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000A50D4, 0, 0);
}

uint64_t sub_1000A50D4()
{
  uint64_t v2 = (void *)v0[24];
  uint64_t v1 = (void *)v0[25];
  uint64_t v3 = v0[20];
  sub_10009BFB8(v0[7], (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A8FCC);

  sub_1000AA498(v3);
  uint64_t v4 = v0[23] + 1;
  if (v4 == v0[21])
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v5 = v0[4];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
    return v6(v5);
  }
  while (1)
  {
    v0[23] = v4;
    uint64_t v13 = v0[8];
    id v14 = (v13 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
        : *(id *)(v13 + 8 * v4 + 32);
    uint64_t v16 = v14;
    v0[24] = v14;
    id v17 = sub_1003A7D80(v14, v15);
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = v0[10];
      id v20 = [v17 longLongValue];

      if (*(void *)(v19 + 16))
      {
        unint64_t v21 = sub_100049AC4((uint64_t)v20);
        if (v22) {
          break;
        }
      }
    }
    Swift::String v44 = (void *)v0[11];
    static Logger.purchase.getter();
    id v45 = v44;
    id v46 = v16;
    id v47 = v45;
    uint64_t v48 = v46;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v49))
    {
      uint64_t v50 = v0[22];
      id v51 = (char *)v0[11];
      uint64_t v52 = swift_slowAlloc();
      os_log_type_t v53 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 138412546;
      uint64_t v54 = *(void **)&v51[v50];
      *(void *)(v52 + 4) = v54;
      *os_log_type_t v53 = v54;
      id v55 = v54;

      *(_WORD *)(v52 + 12) = 2114;
      id v57 = sub_1003A7D80(v48, v56);
      *(void *)(v52 + 14) = v57;
      v53[1] = v57;

      _os_log_impl((void *)&_mh_execute_header, v9, v49, "[%@][%{public}@] Skipping purchase due to missing purchase candidate", (uint8_t *)v52, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v8 = (void *)v0[11];

      uint64_t v9 = v48;
    }
    uint64_t v11 = v0[13];
    uint64_t v10 = v0[14];
    uint64_t v12 = v0[12];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
LABEL_8:
    uint64_t v4 = v0[23] + 1;
    if (v4 == v0[21]) {
      goto LABEL_2;
    }
  }
  uint64_t v23 = v0[19];
  uint64_t v24 = v0[20];
  sub_1000AA434(*(void *)(v0[10] + 56) + *(void *)(v0[17] + 72) * v21, v23);
  sub_1000AA4F4(v23, v24);
  unint64_t v25 = *(void **)(v24 + 24);
  v0[25] = v25;
  char v26 = (void *)v0[11];
  uint64_t v27 = v0[20];
  if (!v25)
  {
    uint64_t v28 = v0[18];
    static Logger.purchase.getter();
    sub_1000AA434(v27, v28);
    id v29 = v26;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v74 = v31;
      uint64_t v32 = v0[22];
      uint64_t v33 = v0[18];
      uint64_t v34 = (char *)v0[11];
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      v0[5] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 138412546;
      uint64_t v37 = *(void **)&v34[v32];
      *(void *)(v35 + 4) = v37;
      *uint64_t v36 = v37;
      id v38 = v37;

      *(_WORD *)(v35 + 12) = 2082;
      v0[2] = 5849665;
      v0[3] = 0xE300000000000000;
      UUID.uuidString.getter();
      sub_1000FC118(8);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = static String._fromSubstring(_:)();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = 47;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      uint64_t v41 = v0[18];
      if (*(void *)(v33 + 16))
      {
        uint64_t v42 = *(void *)(v41 + 8);
        Swift::String v43 = *(void **)(v33 + 16);
      }
      else
      {
        uint64_t v42 = 0;
        Swift::String v43 = (void *)0xE000000000000000;
      }
      uint64_t v63 = v0[13];
      uint64_t v72 = v0[12];
      uint64_t v73 = v0[15];
      swift_bridgeObjectRetain();
      v64._countAndFlagsBits = v42;
      v64._object = v43;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v65._countAndFlagsBits = 58;
      v65._object = (void *)0xE100000000000000;
      String.append(_:)(v65);
      v0[6] = *(void *)(v41 + 32);
      v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      *(void *)(v35 + 14) = sub_1000F7290(v0[2], v0[3], v0 + 5);
      swift_bridgeObjectRelease();
      sub_1000AA498(v41);
      _os_log_impl((void *)&_mh_execute_header, v30, v74, "[%@][%{public}s] Skipping purchase import missing coordinator", (uint8_t *)v35, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v73, v72);
    }
    else
    {
      uint64_t v58 = v0[18];
      uint64_t v59 = v0[15];
      uint64_t v60 = v0[12];
      uint64_t v61 = v0[13];
      uint64_t v62 = (void *)v0[11];

      sub_1000AA498(v58);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v60);
    }
    sub_1000AA498(v0[20]);
    goto LABEL_8;
  }
  uint64_t v67 = v0[9];
  uint64_t v68 = (void *)swift_task_alloc();
  v0[26] = v68;
  v68[2] = v26;
  v68[3] = v27;
  v68[4] = v25;
  v68[5] = v16;
  v68[6] = v67;
  id v69 = v25;
  Swift::String v70 = (void *)swift_task_alloc();
  v0[27] = v70;
  uint64_t v71 = sub_10001644C(&qword_1005A57F8);
  void *v70 = v0;
  v70[1] = sub_1000A4FBC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000027, 0x800000010044E780, sub_1000AA558, v68, v71);
}

uint64_t sub_1000A5990(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100055EA0;
  return sub_10009C90C();
}

void sub_1000A5A38(id *a1, id *a2)
{
  uint64_t v150 = a1;
  uint64_t v4 = type metadata accessor for PurchaseCandidate();
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v131 - v9;
  __chkstk_darwin(v11);
  uint64_t v145 = (uint64_t)&v131 - v12;
  uint64_t v152 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v15 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v18 = (char *)&v131 - v17;
  __chkstk_darwin(v19);
  uint64_t v148 = (char *)&v131 - v20;
  uint64_t v21 = sub_10001644C((uint64_t *)&unk_1005A5670);
  __chkstk_darwin(v21 - 8);
  uint64_t v146 = (uint64_t)&v131 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v144 = (uint64_t)&v131 - v24;
  __chkstk_darwin(v25);
  uint64_t v147 = (uint64_t)&v131 - v26;
  __chkstk_darwin(v27);
  id v29 = (char *)&v131 - v28;
  __chkstk_darwin(v30);
  os_log_t v149 = (os_log_t)((char *)&v131 - v31);
  uint64_t v32 = *(int *)(v5 + 44);
  unint64_t v153 = a2;
  uint64_t v33 = *(id **)((char *)a2 + v32);
  if (!v33) {
    goto LABEL_8;
  }
  uint64_t v34 = sub_1002F9408(v33);
  if (!v34) {
    goto LABEL_8;
  }
  uint64_t v35 = v34;
  uint64_t v151 = v13;
  uint64_t v36 = sub_10039F908(v34);
  if (!v36)
  {

    uint64_t v13 = v151;
LABEL_8:
    static Logger.purchase.getter();
    sub_1000AA434((uint64_t)v153, (uint64_t)v7);
    os_log_type_t v49 = v2;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      unint64_t v153 = (id *)v15;
      uint64_t v53 = v52;
      uint64_t v54 = swift_slowAlloc();
      os_log_t v149 = v50;
      id v55 = (void *)v54;
      uint64_t v150 = (id *)swift_slowAlloc();
      long long v155 = v150;
      *(_DWORD *)uint64_t v53 = 138412546;
      uint64_t v151 = v13;
      uint64_t v56 = *(void **)&v49[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      uint64_t v154 = (uint64_t)v56;
      id v57 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v55 = v56;

      *(_WORD *)(v53 + 12) = 2082;
      uint64_t v58 = sub_1000A1188();
      uint64_t v154 = sub_1000F7290(v58, v59, (uint64_t *)&v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498((uint64_t)v7);
      os_log_t v60 = v149;
      _os_log_impl((void *)&_mh_execute_header, v149, v51, "[%@][%{public}s] Metadata missing platform attributes", (uint8_t *)v53, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(id *, uint64_t))(v151 + 8))(v153, v152);
    }
    else
    {

      sub_1000AA498((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v152);
    }
    return;
  }
  uint64_t v37 = v36;
  if (sub_100279094(v150))
  {
    static Logger.purchase.getter();
    sub_1000AA434((uint64_t)v153, (uint64_t)v10);
    id v38 = v2;
    Swift::String v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    int v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v42 = swift_slowAlloc();
      Swift::String v43 = (void *)swift_slowAlloc();
      unint64_t v153 = (id *)swift_slowAlloc();
      long long v155 = v153;
      *(_DWORD *)uint64_t v42 = 138412546;
      LODWORD(v150) = v41;
      os_log_t v149 = v39;
      Swift::String v44 = *(void **)&v38[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      uint64_t v142 = v35;
      uint64_t v143 = v37;
      uint64_t v154 = (uint64_t)v44;
      id v45 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v43 = v44;

      *(_WORD *)(v42 + 12) = 2082;
      uint64_t v46 = sub_1000A1188();
      uint64_t v154 = sub_1000F7290(v46, v47, (uint64_t *)&v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498((uint64_t)v10);
      os_log_t v48 = v149;
      _os_log_impl((void *)&_mh_execute_header, v149, (os_log_type_t)v150, "[%@][%{public}s] Already has a placeholder", (uint8_t *)v42, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000AA498((uint64_t)v10);
    }
    (*(void (**)(char *, uint64_t))(v151 + 8))(v18, v152);
  }
  else
  {
    uint64_t v143 = v37;
    id v61 = (id)sub_1002305D0((uint64_t)v37);
    NSString v62 = v61;
    uint64_t v63 = (char *)v61;
    if (!v61)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v63 = (char *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v137 = v63;
    id v64 = v153[4];
    NSString v139 = v62;
    id v140 = v64;
    id v65 = v61;
    uint64_t v142 = v35;
    id v66 = (id)sub_1002F948C((uint64_t)v35);
    NSString v67 = v66;
    uint64_t v68 = (char *)v66;
    if (!v66)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v68 = (char *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v136 = v68;
    NSString v138 = v67;
    id v69 = v66;
    id v70 = (id)sub_1002305DC((uint64_t)v143);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    id v71 = objc_allocWithZone((Class)AMSMediaArtwork);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v73 = [v71 initWithDictionary:isa];

    id v74 = objc_msgSend(v73, "URLWithSize:cropStyle:format:", AMSMediaArtworkCropStyleBoundedBox, AMSMediaArtworkFormatPNG, 128.0, 128.0);
    id v141 = v73;
    if (v74)
    {
      uint64_t v75 = v74;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v76 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v29, 0, 1, v76);
    }
    else
    {
      uint64_t v77 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v29, 1, 1, v77);
    }
    uint64_t v78 = v151;
    os_log_type_t v79 = v148;
    os_log_t v80 = v149;
    uint64_t v81 = v147;
    sub_100030134((uint64_t)v29, (uint64_t)v149, (uint64_t *)&unk_1005A5670);
    static Logger.purchase.getter();
    uint64_t v82 = v145;
    sub_1000AA434((uint64_t)v153, v145);
    sub_1000AA678((uint64_t)v80, v81);
    uint64_t v83 = v2;
    uint64_t v84 = Logger.logObject.getter();
    int v85 = static os_log_type_t.info.getter();
    BOOL v86 = os_log_type_enabled(v84, (os_log_type_t)v85);
    uint64_t v135 = v83;
    if (v86)
    {
      int v132 = v85;
      os_log_t v134 = v84;
      uint64_t v87 = swift_slowAlloc();
      uint64_t v88 = (void *)swift_slowAlloc();
      uint64_t v133 = (id *)swift_slowAlloc();
      long long v155 = v133;
      *(_DWORD *)uint64_t v87 = 138412802;
      uint64_t v89 = v81;
      id v90 = *(void **)&v83[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      uint64_t v154 = (uint64_t)v90;
      id v91 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v131 = v88;
      void *v88 = v90;

      *(_WORD *)(v87 + 12) = 2082;
      uint64_t v92 = sub_1000A1188();
      uint64_t v154 = sub_1000F7290(v92, v93, (uint64_t *)&v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498(v82);
      *(_WORD *)(v87 + 22) = 2080;
      uint64_t v94 = v144;
      sub_1000AA678(v89, v144);
      uint64_t v95 = type metadata accessor for URL();
      uint64_t v96 = *(void *)(v95 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95) == 1)
      {
        sub_100016714(v94, (uint64_t *)&unk_1005A5670);
        unint64_t v97 = 0xE200000000000000;
        uint64_t v98 = 16718;
      }
      else
      {
        uint64_t v98 = URL.absoluteString.getter();
        unint64_t v97 = v100;
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v94, v95);
      }
      unsigned int v99 = v142;
      uint64_t v154 = sub_1000F7290(v98, v97, (uint64_t *)&v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100016714(v147, (uint64_t *)&unk_1005A5670);
      os_log_t v101 = v134;
      _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v132, "[%@][%{public}s] Found metadata. artworkURL: %s", (uint8_t *)v87, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v151 + 8))(v148, v152);
      os_log_t v80 = v149;
    }
    else
    {

      sub_1000AA498(v82);
      sub_100016714(v81, (uint64_t *)&unk_1005A5670);

      (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v152);
      unsigned int v99 = v142;
    }
    id v102 = [objc_allocWithZone((Class)PlaceholderBuilder) init];
    uint64_t v103 = v146;
    sub_1000AA678((uint64_t)v80, v146);
    uint64_t v104 = type metadata accessor for URL();
    uint64_t v105 = *(void *)(v104 - 8);
    os_log_type_t v107 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104) != 1)
    {
      URL._bridgeToObjectiveC()(v106);
      os_log_type_t v107 = v108;
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v103, v104);
    }
    sub_10032B4C4(v102, v107);

    long long v109 = v136;
    sub_10032B4EC(v102, v136);

    id v110 = v137;
    sub_10032B4D8(v102, v137);

    sub_10032B50C(v102, *(char **)&v135[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey]);
    sub_10032B500((uint64_t)v102, 1);
    sub_10032B520((uint64_t)v102, 0);
    id v111 = (id *)[objc_allocWithZone((Class)MIStoreMetadata) init];
    uint64_t v112 = v99;
    NSString v113 = (id)sub_1002305D0((uint64_t)v99);
    if (!v113)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v113 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v111 setArtistName:v113];

    uint64_t v114 = v139;
    [v111 setSoftwareVersionBundleID:v139];

    os_log_t v115 = v138;
    [v111 setItemName:v138];

    id v116 = objc_allocWithZone((Class)NSNumber);
    id v117 = [v116 initWithLongLong:v140];
    [v111 setItemID:v117];

    id v118 = *v153;
    id v119 = objc_msgSend(*v153, "ams_DSID");
    [v111 setPurchaserID:v119];

    id v120 = objc_msgSend(v118, "ams_altDSID");
    [v111 setAltDSID:v120];

    NSString v121 = String._bridgeToObjectiveC()();
    [v111 setSourceApp:v121];

    sub_10032B52C(v102, (char *)v111);
    long long v155 = 0;
    id v122 = sub_10032A178((uint64_t)v102, &v155);
    os_log_t v123 = v155;
    os_log_t v124 = v141;
    if (v122)
    {
      uint64_t v125 = v122;
      long long v155 = 0;
      uint64_t v126 = v123;
      if (sub_10027A504(v150, v125, &v155))
      {
        os_log_t v127 = v155;
        sub_100016714((uint64_t)v80, (uint64_t *)&unk_1005A5670);

        return;
      }
      id v130 = v155;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v111 = v143;
      unint64_t v129 = (id *)v124;
      os_log_t v124 = v102;
      id v102 = v125;
    }
    else
    {
      uint64_t v128 = v155;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      unint64_t v129 = v143;
    }

    sub_100016714((uint64_t)v80, (uint64_t *)&unk_1005A5670);
  }
}

uint64_t sub_1000A6AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100031C38(a3, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return sub_1000B0A9C((uint64_t)v6, a1, a2);
}

uint64_t sub_1000A6B08(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100018D68(0, (unint64_t *)&unk_1005A43C0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v11 = [a1 connection];
  id v12 = sub_1002FF548(ObjCClassFromMetadata, v11, a2);

  sub_10000C820(a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1000AA74C;
  *(void *)(v15 + 24) = v14;
  void v18[4] = sub_100051124;
  v18[5] = v15;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_10003F95C;
  v18[3] = &unk_100515510;
  uint64_t v16 = _Block_copy(v18);
  swift_retain();
  swift_release();
  [v12 enumerateMemoryEntitiesWithProperties:isa usingBlock:v16];

  _Block_release(v16);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v12) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A6CF8(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned char *a5)
{
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v9 = (void *)result;
    id v10 = a1;
    id v11 = sub_100424D84(v9);
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
    }
    else
    {

      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    *a4 = v13;
    a4[1] = v15;
    uint64_t result = swift_bridgeObjectRelease();
    *a5 = 1;
  }
  return result;
}

uint64_t sub_1000A6DA8(void *a1, void *a2, void *a3, NSObject *a4, void *a5, id *a6)
{
  id v116 = a6;
  id v118 = a4;
  id v120 = a1;
  id v119 = (void *)sub_10001644C((uint64_t *)&unk_1005A5808);
  uint64_t v114 = *(v119 - 1);
  __chkstk_darwin(v119);
  uint64_t v112 = v9;
  NSString v113 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v117 = (id)type metadata accessor for PurchaseCandidate();
  __chkstk_darwin(v117);
  id v11 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v109 = (uint64_t)&v105 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v105 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v121 = v17;
  uint64_t v122 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  id v110 = (char *)&v105 - v22;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v105 - v24;
  static Logger.purchase.getter();
  sub_1000AA434((uint64_t)a3, (uint64_t)v16);
  uint64_t v26 = a2;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  id v111 = v20;
  uint64_t v108 = v11;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v106 = a5;
    uint64_t v31 = v30;
    uint64_t v32 = (void *)swift_slowAlloc();
    os_log_t v115 = (void *)swift_slowAlloc();
    aBlock[0] = v115;
    *(_DWORD *)uint64_t v31 = 138412546;
    os_log_t v105 = v27;
    uint64_t v33 = *(Class *)((char *)&v26->isa + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey);
    uint64_t v123 = (uint64_t)v33;
    os_log_type_t v107 = a3;
    id v34 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v32 = v33;
    uint64_t v35 = v121;

    *(_WORD *)(v31 + 12) = 2082;
    uint64_t v36 = sub_1000A1188();
    uint64_t v123 = sub_1000F7290(v36, v37, (uint64_t *)aBlock);
    a3 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000AA498((uint64_t)v16);
    os_log_t v38 = v105;
    _os_log_impl((void *)&_mh_execute_header, v105, v28, "[%@][%{public}s] Attempting purchase import", (uint8_t *)v31, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v106;
    swift_slowDealloc();

    Swift::String v39 = *(void (**)(void, void))(v122 + 8);
    os_log_type_t v40 = v25;
    uint64_t v41 = v35;
  }
  else
  {

    sub_1000AA498((uint64_t)v16);
    uint64_t v41 = v121;
    Swift::String v39 = *(void (**)(void, void))(v122 + 8);
    os_log_type_t v40 = v25;
  }
  os_log_t v115 = v39;
  v39(v40, v41);
  uint64_t v42 = v26;
  id v43 = [objc_allocWithZone((Class)PurchaseInfo) init];
  [v43 setCoordinator:v118];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v43 setExternalID:isa];

  id v118 = v42;
  os_log_type_t v107 = *(Class *)((char *)&v42->isa + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey);
  objc_msgSend(v43, "setBatchLogKey:");
  [v43 setLogCode:@"ABY"];
  [v43 setArcade:1];
  id v46 = sub_1003A7D6C(a5, v45);
  [v43 setBundleID:v46];

  [v43 setAccount:*a3];
  [v43 setClientType:0];
  id v48 = sub_1003A7D80(a5, v47);
  uint64_t v50 = v119;
  id v51 = v120;
  if (v48)
  {
    uint64_t v52 = v48;
    [v43 setItemID:v48];
  }
  id v53 = sub_1003A7D94(a5, v49);
  if (v53)
  {
    id v55 = v53;
    [v43 setItemName:v53];
  }
  id v56 = sub_1003A7D58(a5, v54);
  if (v56)
  {
    id v57 = v56;
    [v43 setVendorName:v56];
  }
  id v58 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:1];
  [v43 setMetricsType:v58];

  [v43 setPurchaseType:0];
  [v43 setCoordinatorIntent:1];
  [v43 setCoordinatorImportance:3];
  [v43 setBuyParams:v116];
  self;
  id v59 = sub_1000169A4();
  if (!v59) {
    __break(1u);
  }
  os_log_t v60 = v59;
  [v43 setClientInfo:v59];

  [v43 updateGeneratedProperties];
  id v61 = sub_1002AFBE4((id *)objc_allocWithZone((Class)PurchaseBatch), v43, 0);
  NSString v62 = v113;
  uint64_t v63 = v114;
  (*(void (**)(char *, id, void *))(v114 + 16))(v113, v51, v50);
  unint64_t v64 = (*(unsigned __int8 *)(v63 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  id v65 = (char *)swift_allocObject();
  (*(void (**)(char *, char *, void *))(v63 + 32))(&v65[v64], v62, v50);
  aBlock[4] = sub_1000AA5FC;
  void aBlock[5] = v65;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100038D4C;
  aBlock[3] = &unk_1005153F0;
  id v66 = (char *)_Block_copy(aBlock);
  swift_release();
  sub_1002B0E5C(v61, v66);
  _Block_release(v66);
  sub_10001644C(&qword_1005A43D0);
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_100488A80;
  *(void *)(v67 + 32) = a5;
  aBlock[0] = (id)v67;
  specialized Array._endMutation()();
  uint64_t v68 = (id *)objc_allocWithZone((Class)PurchaseImportTask);
  sub_100018D68(0, &qword_1005A5818);
  id v69 = a5;
  id v70 = v43;
  id v71 = v61;
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v73 = sub_1002517FC(v68, v72, v70, v71);

  aBlock[0] = 0;
  id v74 = v118;
  id v117 = v73;
  if (![v118 runSubTask:v73 returningError:aBlock])
  {
    id v116 = v71;
    id v89 = aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    aBlock[0] = _swiftEmptyArrayStorage;
    CheckedContinuation.resume(returning:)();
    uint64_t v76 = v111;
    static Logger.purchase.getter();
    uint64_t v90 = (uint64_t)v108;
    sub_1000AA434((uint64_t)a3, (uint64_t)v108);
    id v91 = v74;
    swift_errorRetain();
    uint64_t v92 = v91;
    swift_errorRetain();
    unint64_t v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v93, v94))
    {
      uint64_t v95 = swift_slowAlloc();
      uint64_t v96 = swift_slowAlloc();
      id v118 = v93;
      unint64_t v97 = (void *)v96;
      id v119 = (void *)swift_slowAlloc();
      aBlock[0] = v119;
      *(_DWORD *)uint64_t v95 = 138412802;
      id v120 = v70;
      id v98 = v107;
      uint64_t v123 = (uint64_t)v107;
      unsigned int v99 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v97 = v98;

      *(_WORD *)(v95 + 12) = 2082;
      uint64_t v100 = sub_1000A1188();
      uint64_t v123 = sub_1000F7290(v100, v101, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000AA498(v90);
      *(_WORD *)(v95 + 22) = 2112;
      swift_errorRetain();
      uint64_t v102 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v123 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v97[1] = v102;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v103 = v118;
      _os_log_impl((void *)&_mh_execute_header, v118, v94, "[%@][%{public}s] Failed to purchase import error: %@", (uint8_t *)v95, 0x20u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      uint64_t v88 = v111;
      return ((uint64_t (*)(char *, uint64_t))v115)(v88, v121);
    }

    swift_errorRelease();
    sub_1000AA498(v90);
    swift_errorRelease();
    swift_errorRelease();

LABEL_18:
    uint64_t v88 = v76;
    return ((uint64_t (*)(char *, uint64_t))v115)(v88, v121);
  }
  id v75 = aBlock[0];
  uint64_t v76 = v110;
  static Logger.purchase.getter();
  uint64_t v77 = v109;
  sub_1000AA434((uint64_t)a3, v109);
  uint64_t v78 = v74;
  os_log_type_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v79, v80))
  {

    sub_1000AA498(v77);
    goto LABEL_18;
  }
  uint64_t v81 = swift_slowAlloc();
  uint64_t v82 = (void *)swift_slowAlloc();
  aBlock[0] = (id)swift_slowAlloc();
  *(_DWORD *)uint64_t v81 = 138412546;
  id v116 = v71;
  id v83 = v107;
  uint64_t v123 = (uint64_t)v107;
  id v120 = v70;
  uint64_t v84 = v107;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v82 = v83;

  *(_WORD *)(v81 + 12) = 2082;
  uint64_t v85 = v109;
  uint64_t v86 = sub_1000A1188();
  uint64_t v123 = sub_1000F7290(v86, v87, (uint64_t *)aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1000AA498(v85);
  _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%@][%{public}s] Purchase import succeeded", (uint8_t *)v81, 0x16u);
  sub_10001644C((uint64_t *)&unk_1005A3AA0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v88 = v110;
  return ((uint64_t (*)(void, void))v115)(v88, v121);
}

uint64_t sub_1000A7B70(void *a1)
{
  id v1 = [a1 items];
  sub_100018D68(0, &qword_1005A57D0);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10001644C((uint64_t *)&unk_1005A5808);
  return CheckedContinuation.resume(returning:)();
}

void sub_1000A7C00(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10001644C(&qword_1005A5788);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = self;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1000AA258;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A7EC8;
  aBlock[3] = &unk_100515328;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_10033CF54(v9, a2, v12);
  _Block_release(v12);
}

uint64_t sub_1000A7DD0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (unsigned char *)(a3 + 16);
  if (a2 && (swift_beginAccess(), (*v4 & 1) == 0))
  {
    swift_beginAccess();
    *uint64_t v4 = 1;
    swift_errorRetain();
    sub_10001644C(&qword_1005A5788);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    uint64_t result = swift_beginAccess();
    if ((*v4 & 1) == 0)
    {
      swift_beginAccess();
      *uint64_t v4 = 1;
      id v6 = a1;
      sub_10001644C(&qword_1005A5788);
      return CheckedContinuation.resume(returning:)();
    }
  }
  return result;
}

void sub_1000A7EC8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1000A80EC(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  void v5[4] = a3;
  void v5[5] = a5;
  _OWORD v5[2] = a1;
  v5[3] = a2;
  v5[6] = _Block_copy(aBlock);
  uint64_t v15 = (uint64_t (*)(uint64_t))((char *)&dword_1005A5770 + dword_1005A5770);
  id v10 = a1;
  id v11 = a2;
  id v12 = a3;
  a5;
  uint64_t v13 = (void *)swift_task_alloc();
  v5[7] = v13;
  *uint64_t v13 = v5;
  v13[1] = sub_1000A81E0;
  return v15((uint64_t)v10);
}

uint64_t sub_1000A81E0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  id v6 = *(void **)(*v2 + 40);
  id v7 = *(void **)(*v2 + 32);
  uint64_t v8 = *(void **)(*v2 + 24);
  uint64_t v9 = *(void **)(*v2 + 16);
  uint64_t v10 = *v2;
  swift_task_dealloc();

  id v11 = *(void (***)(void, void, void))(v5 + 48);
  if (v3)
  {
    id v12 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v11)[2](v11, 0, v12);

    _Block_release(v11);
  }
  else
  {
    ((void (**)(void, void *, void))v11)[2](*(void *)(v5 + 48), a1, 0);
    _Block_release(v11);
  }
  uint64_t v13 = *(uint64_t (**)(void))(v10 + 8);
  return v13();
}

uint64_t type metadata accessor for PurchaseArcadeBatchTask()
{
  return self;
}

uint64_t sub_1000A84E4()
{
  _Block_release(*(const void **)(v0 + 40));
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A853C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  id v6 = (void *)v0[6];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000184D8;
  uint64_t v8 = (uint64_t (*)(void *, void *, void *, void *, void *))((char *)&dword_1005A5760 + dword_1005A5760);
  return v8(v2, v3, v4, v5, v6);
}

void *sub_1000A860C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    if (v5 <= 0)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        unint64_t v10 = a2 + 96 * a3;
        if (v10 < (unint64_t)&v8[12 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 96 * v5) {
          goto LABEL_17;
        }
        swift_arrayInitWithCopy();
        return v8;
      }
    }
    else
    {
      sub_10001644C(&qword_1005A3800);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = j__malloc_size(v8);
      _OWORD v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 96);
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000A879C(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10001644C(&qword_1005A43D0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1000A8B8C((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_1000A8894(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10001644C(&qword_1005A5858);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  unint64_t v6 = sub_1000A933C(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100035EBC();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_1000A897C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000AA764((unint64_t *)&unk_1005A5880, &qword_1005A4680);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10001644C(&qword_1005A4680);
          id v12 = sub_1000D464C(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SkannerEvent();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A8B8C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000AA764((unint64_t *)&unk_1005A5870, (uint64_t *)&unk_1005A5860);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10001644C((uint64_t *)&unk_1005A5860);
          id v12 = sub_1000D46B8(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100018D68(0, &qword_1005A4A60);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A8DAC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000AA764(&qword_1005A5838, &qword_1005A5830);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10001644C(&qword_1005A5830);
          id v12 = sub_1000D46B8(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100018D68(0, &qword_1005A5818);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A8FCC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000AA764(&qword_1005A5800, &qword_1005A57F8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10001644C(&qword_1005A57F8);
          id v12 = sub_1000D46B8(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100018D68(0, &qword_1005A57D0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A91EC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *__return_ptr, id *), unint64_t a6)
{
  if (a2)
  {
    uint64_t v11 = a3;
    if (a3)
    {
      if (a3 < 0) {
        goto LABEL_18;
      }
      uint64_t v6 = a2;
      if (a4 >> 62)
      {
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v12) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v12 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v12)
        {
LABEL_6:
          unint64_t v13 = 0;
          uint64_t v17 = v11--;
          do
          {
            if ((a4 & 0xC000000000000001) != 0)
            {
              id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v13 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_18:
                __break(1u);
                goto LABEL_19;
              }
              id v14 = *(id *)(a4 + 8 * v13 + 32);
            }
            uint64_t v15 = v14;
            id v19 = v14;
            a5(&v18, &v19);

            *(void *)(v6 + 8 * v13) = v18;
            if (v11 == v13)
            {
              uint64_t v11 = v17;
              goto LABEL_16;
            }
            ++v13;
          }
          while (v12 != v13);
        }
      }
      uint64_t v11 = v12;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
LABEL_16:
  *a1 = a4;
  a1[1] = v11;
  a1[2] = (unint64_t)a5;
  a1[3] = a6;
  return v11;
}

void *sub_1000A933C(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000A94D0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000A9558(uint64_t a1, void (*a2)(uint64_t, uint64_t, unsigned char *))
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v20 + 8 * v15);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v15 + 1;
      if (v15 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v20 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v15 + 2;
        if (v15 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v20 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v15 + 3;
          if (v15 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v16 = *(void *)(v20 + 8 * v9);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    unint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    sub_100031C38(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v19);
    v18[0] = v13;
    v18[1] = v14;
    swift_bridgeObjectRetain();
    a2(v13, v14, v19);
    uint64_t result = sub_100016714((uint64_t)v18, (uint64_t *)&unk_1005A5848);
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v7) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v20 + 8 * v17);
  if (v16)
  {
    int64_t v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v20 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_1000A9724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_bridgeObjectRelease();
  *(void *)&v5[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse] = 0;
  unint64_t v11 = v5;
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000A8894(v12);
  swift_bridgeObjectRelease();
  *(void *)&v11[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemIDs] = v13;
  *(void *)&v11[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemMetadata] = a1;
  uint64_t v14 = &v11[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_client];
  *(void *)uint64_t v14 = a3;
  *((void *)v14 + 1) = a4;
  *(void *)&v11[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey] = a5;
  *(void *)&v11[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_additionalBuyParams] = 0;
  id v15 = a5;

  v17.receiver = v11;
  v17.super_class = ObjectType;
  return objc_msgSendSuper2(&v17, "init");
}

uint64_t sub_1000A9810(uint64_t a1)
{
  sub_10001644C(&qword_1005A4E50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100488780;
  *(_OWORD *)(v2 + 32) = xmmword_100488EA0;
  *(void *)(v2 + 4_Block_object_dispose(&a9, 8) = -40;
  sub_10001644C(&qword_1005A43D0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100488EB0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:a1];
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v6 = self;
  id v7 = v4;
  id v8 = [v6 predicateWithProperty:v5 value:v7 comparisonType:1];

  *(void *)(v3 + 32) = v8;
  int64_t v9 = self;
  unint64_t v10 = @"IFNULL(app_install.phase, 10)";
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [v9 doesNotContainPredicateWithProperty:v10 values:isa];

  *(void *)(v3 + 40) = v12;
  specialized Array._endMutation()();
  return v3;
}

uint64_t sub_1000A99C8(uint64_t a1)
{
  unint64_t v1 = sub_1000A9810(a1);
  sub_10000C5EC(v1);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [self predicateMatchingAllPredicates:isa];

  sub_10001644C(&qword_1005A4F70);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100489530;
  *(void *)(v4 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 4_Block_object_dispose(&a9, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v4 + 56) = v6;
  v16[0] = 0;
  v16[1] = 0;
  unsigned __int8 v15 = 0;
  self;
  id v7 = sub_1003E0BA4();
  id v8 = (void *)swift_allocObject();
  _OWORD v8[2] = v3;
  v8[3] = v4;
  void v8[4] = v16;
  void v8[5] = &v15;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1000AA720;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100018DAC;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018DE4;
  aBlock[3] = &unk_100515498;
  unint64_t v10 = _Block_copy(aBlock);
  id v11 = v3;
  swift_retain();
  swift_release();
  [v7 readUsingSession:v10];

  _Block_release(v10);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v11)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = v15;
    swift_release();
    return v13;
  }
  return result;
}

uint64_t sub_1000A9C1C(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000A9CDC, 0, 0);
}

uint64_t sub_1000A9CDC()
{
  uint64_t v1 = (void *)v0[5];
  static Logger.purchase.getter();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (char *)v0[5];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v7 = *(void **)&v5[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    v0[3] = v7;
    id v8 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v16 = v7;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Attempting interactive authentication for batch purchase", v6, 0xCu);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = (void *)v0[5];
  }
  uint64_t v10 = v0[4];
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  uint64_t v11 = swift_allocObject();
  v0[9] = v11;
  *(unsigned char *)(v11 + 16) = 0;
  uint64_t v12 = swift_task_alloc();
  v0[10] = v12;
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[11] = v13;
  uint64_t v14 = sub_10001644C((uint64_t *)&unk_1005A5778);
  *uint64_t v13 = v0;
  v13[1] = sub_1000A9F5C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000021, 0x800000010044E6E0, sub_1000AA180, v12, v14);
}

uint64_t sub_1000A9F5C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1000AA0F8;
  }
  else
  {
    swift_task_dealloc();
    id v2 = sub_1000AA078;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1000AA078()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    swift_release();
    swift_task_dealloc();
    id v2 = *(void (**)(uint64_t))(v0 + 8);
    v2(v1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000AA0F8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000AA170()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_1000AA180(uint64_t a1)
{
  sub_1000A7C00(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000AA188()
{
  uint64_t v1 = sub_10001644C(&qword_1005A5788);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000AA258(void *a1, uint64_t a2)
{
  sub_10001644C(&qword_1005A5788);
  uint64_t v5 = *(void *)(v2 + 16);
  return sub_1000A7DD0(a1, a2, v5);
}

uint64_t sub_1000AA2E0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AA320()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100005040;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1005A5790 + dword_1005A5790);
  return v5(v2, v3);
}

uint64_t type metadata accessor for PurchaseCandidate()
{
  uint64_t result = qword_1005A58E8;
  if (!qword_1005A58E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AA420(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000AA434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseCandidate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA498(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PurchaseCandidate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AA4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseCandidate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA558(void *a1)
{
  return sub_1000A6DA8(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(NSObject **)(v1 + 32), *(void **)(v1 + 40), *(id **)(v1 + 48));
}

uint64_t sub_1000AA568()
{
  uint64_t v1 = sub_10001644C((uint64_t *)&unk_1005A5808);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000AA5FC(void *a1)
{
  sub_10001644C((uint64_t *)&unk_1005A5808);
  return sub_1000A7B70(a1);
}

uint64_t sub_1000AA670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6AA8(a1, a2, a3);
}

uint64_t sub_1000AA678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C((uint64_t *)&unk_1005A5670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA6E0()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000AA720(void *a1)
{
  return sub_1000A6B08(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000AA72C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AA73C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AA74C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6CF8(a1, a2, a3, *(uint64_t **)(v3 + 16), *(unsigned char **)(v3 + 24));
}

uint64_t sub_1000AA754()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AA764(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002E5A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_1000AA7B4(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    id v8 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v8;
    uint64_t v10 = a2[3];
    uint64_t v9 = a2[4];
    *((void *)a1 + 3) = v10;
    *((void *)a1 + 4) = v9;
    uint64_t v11 = a3[8];
    uint64_t v25 = &a1[v11];
    uint64_t v12 = (uint64_t)a2 + v11;
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    unsigned __int8 v15 = v4;
    swift_bridgeObjectRetain();
    unint64_t v16 = v10;
    v14(v25, v12, v13);
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    id v19 = *(char **)((char *)a2 + v17);
    *(void *)&v7[v17] = v19;
    uint64_t v20 = &v7[v18];
    uint64_t v21 = (char **)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *(void *)uint64_t v20 = *v21;
    *((void *)v20 + 1) = v22;
    id v23 = v19;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1000AA8F4(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *sub_1000AA9A0(void *a1, uint64_t a2, int *a3)
{
  uint64_t v7 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  id v8 = *(void **)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  a1[4] = *(void *)(a2 + 32);
  uint64_t v9 = a3[8];
  id v23 = (char *)a1 + v9;
  uint64_t v10 = a2 + v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v7;
  swift_bridgeObjectRetain();
  id v14 = v8;
  v12(v23, v10, v11);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  uint64_t v18 = (void *)((char *)a1 + v16);
  id v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  id v21 = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000AAA94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v10;
  id v11 = v10;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = *(void **)(a1 + v16);
  uint64_t v18 = *(void **)(a2 + v16);
  *(void *)(a1 + v16) = v18;
  id v19 = v18;

  uint64_t v20 = a3[10];
  id v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *id v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000AABAC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_1000AAC5C(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = a2[2];
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = a2[1];
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = a2[3];

  *(void *)(a1 + 32) = a2[4];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[9];
  uint64_t v14 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = *(void *)((char *)a2 + v13);

  uint64_t v15 = a3[10];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000AAD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AAD5C);
}

uint64_t sub_1000AAD5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000AAE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AAE20);
}

void *sub_1000AAE20(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000AAEC8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000AAFA8(uint64_t a1, void *a2)
{
  uint64_t v22 = a1;
  id v23 = a2;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001644C(&qword_1005A5940);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000937BC();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  uint64_t v15 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static DispatchWorkItemFlags.assignCurrentContext.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v22, v5);
  unint64_t v16 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v23;
  *(void *)(v17 + 16) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_1000AB5F4;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AB758;
  aBlock[3] = &unk_100515560;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v18;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v27);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v25);
  return swift_release();
}

void sub_1000AB35C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001644C(&qword_1005A5940);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (id *)[objc_allocWithZone((Class)TaskQueue) init];
  sub_1002B2BC8(v7, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000AB6F0;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AB758;
  aBlock[3] = &unk_1005155B0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  sub_1002B2BDC(v7, (uint64_t)v10);
  _Block_release(v10);
}

uint64_t sub_1000AB524()
{
  uint64_t v1 = sub_10001644C(&qword_1005A5940);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000AB5F4()
{
  uint64_t v1 = *(void *)(sub_10001644C(&qword_1005A5940) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  sub_1000AB35C(v2, v3);
}

uint64_t sub_1000AB65C()
{
  uint64_t v1 = sub_10001644C(&qword_1005A5940);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000AB6F0()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000AB758(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

id sub_1000AB9A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SKANEnvironmentHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SKANEnvironmentHelper()
{
  return self;
}

__CFString *sub_1000AB9F8(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = (id)sub_10026FE28((uint64_t)a1);
  if (v6)
  {
    uint64_t v7 = v6;
    if ([v6 integerValue]) {
      unint64_t v8 = &off_10052AF00;
    }
    else {
      unint64_t v8 = off_10052AEF8;
    }
    uint64_t v14 = *v8;
  }
  else
  {
    id v9 = (id)sub_10026FE34((uint64_t)a1);
    if (v9)
    {

      self;
      if (sub_1003F3F90()
        && (id v10 = sub_1003F3FE0(), v10, v10)
        && (id v11 = sub_1003F401C()) != 0
        && (v11, (id v12 = sub_1003F4058()) != 0))
      {

        uint64_t v13 = off_10052AEF8;
      }
      else
      {
        uint64_t v13 = &off_10052AF00;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = *v13;
    }
    else
    {
      static Logger.skAdNetwork.getter();
      unint64_t v16 = a1;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        id v20 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 138412290;
        v23[0] = v19 + 4;
        id v21 = (id)sub_10026FE1C((uint64_t)v16);
        v23[1] = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v20 = v21;

        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Could not determine environment for impression for app: %@", v19, 0xCu);
        sub_10001644C((uint64_t *)&unk_1005A3AA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v17 = v16;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
  }
  return v14;
}

uint64_t sub_1000ABCD8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = v2;
    if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v6 & 1) == 0) {
        return result;
      }
    }
    self;
    uint64_t result = sub_1003F3F90();
    if (result)
    {
      id v7 = sub_1003F3FE0();

      if (v7)
      {
        uint64_t result = (uint64_t)sub_1003F401C();
        if (result)
        {

          uint64_t result = (uint64_t)sub_1003F4058();
          if (result)
          {

            return 1;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000ABDE8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      return 0;
    }
  }
  self;
  if (!sub_1003F3F90()) {
    return 0;
  }
  id v7 = sub_1003F3FE0();

  if (!v7) {
    return 0;
  }
  id v8 = sub_1003F401C();
  if (!v8) {
    return 0;
  }

  id v9 = sub_1003F4058();
  if (!v9) {
    return 0;
  }

  id v10 = sub_1003F401C();
  if (!v10) {
    return 0;
  }
  id v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v12;
}

id sub_1000ABF28(id result, uint64_t (*a2)(uint64_t))
{
  if (result)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
    if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0) {
        return 0;
      }
    }
    uint64_t v9 = self;
    if (!sub_1003F3F90()) {
      return 0;
    }
    id v10 = sub_1003F3FE0();

    if (!v10) {
      return 0;
    }
    uint64_t result = sub_1003F401C();
    if (result)
    {

      uint64_t result = sub_1003F4058();
      if (result)
      {

        return (id)a2(v9);
      }
    }
  }
  return result;
}

unint64_t sub_1000AC048(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10001644C(&qword_1005A3C10);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v24 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)v35 + 8;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v13 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v13 >= v23) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v13);
  int64_t v15 = i + 1;
  if (!v14)
  {
    int64_t v15 = i + 2;
    if (i + 2 >= v23) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = i + 3;
      if (i + 3 >= v23) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = i + 4;
        if (i + 4 >= v23) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v15);
        if (!v14)
        {
          int64_t v16 = i + 5;
          if (i + 5 < v23)
          {
            unint64_t v14 = *(void *)(v24 + 8 * v16);
            if (v14)
            {
              int64_t v15 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v15 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_36;
              }
              if (v15 >= v23) {
                break;
              }
              unint64_t v14 = *(void *)(v24 + 8 * v15);
              ++v16;
              if (v14) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100035EBC();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v14 - 1) & v14;
  unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
  for (i = v15; ; unint64_t v12 = v11 | (i << 6))
  {
    sub_100035E00(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v34);
    sub_100031C38(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v6);
    v32[0] = v35[0];
    v32[1] = v35[1];
    uint64_t v33 = v36;
    _OWORD v31[2] = v34[0];
    v31[3] = v34[1];
    swift_dynamicCast();
    sub_10000C948((_OWORD *)((char *)v32 + 8), v28);
    sub_10000C948(v28, v30);
    sub_10000C948(v30, v31);
    sub_10000C948(v31, &v29);
    unint64_t result = sub_100049A4C(v26, v27);
    unint64_t v17 = result;
    if (v18)
    {
      char v8 = v6;
      uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v9 = v26;
      v9[1] = v27;
      uint64_t v6 = v8;
      id v10 = (_OWORD *)(v2[7] + 32 * v17);
      sub_10002E618((uint64_t)v10);
      unint64_t result = (unint64_t)sub_10000C948(&v29, v10);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v19 = v26;
    v19[1] = v27;
    unint64_t result = (unint64_t)sub_10000C948(&v29, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v20 = v2[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_34;
    }
    v2[2] = v22;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000AC458()
{
  v1[29] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[30] = v2;
  v1[31] = *(void *)(v2 - 8);
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for InstallConfirmationRequest();
  v1[38] = v3;
  v1[39] = *(void *)(v3 - 8);
  v1[40] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for InstallSheetContext.InstallType();
  v1[41] = v4;
  v1[42] = *(void *)(v4 - 8);
  v1[43] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for InstallSheetContext.Source();
  v1[44] = v5;
  v1[45] = *(void *)(v5 - 8);
  v1[46] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InstallSheetContext();
  v1[47] = v6;
  v1[48] = *(void *)(v6 - 8);
  v1[49] = swift_task_alloc();
  v1[50] = swift_task_alloc();
  return _swift_task_switch(sub_1000AC704, 0, 0);
}

uint64_t sub_1000AC704()
{
  uint64_t v1 = (void *)v0[29];
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_isUpdate))
  {
    static Logger.appInstall.getter();
    id v2 = v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = (char *)v0[29];
    if (v5)
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      char v18 = (void *)swift_slowAlloc();
      *(_DWORD *)id v7 = 138412290;
      uint64_t v8 = *(void **)&v6[OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_logKey];
      v0[28] = v8;
      id v9 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v18 = v8;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Install sheet not required for updates", v7, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(void, void))(v0[31] + 8))(v0[33], v0[30]);
    goto LABEL_13;
  }
  NSString v10 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v12 = [self metadataWithAction:0 bundleID:v10 capabilities:isa];
  v0[51] = v12;

  [v12 setSupportsFeatureA:1];
  if (qword_1005A2FA0 != -1) {
    swift_once();
  }
  id v13 = [objc_allocWithZone((Class)type metadata accessor for LogKey()) init];
  char v14 = sub_100032D6C(v12, v13);

  if ((v14 & 1) == 0)
  {

LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  int64_t v15 = (void *)swift_task_alloc();
  v0[52] = v15;
  void *v15 = v0;
  v15[1] = sub_1000ACB00;
  return static AppDistributor.shouldShowInstallConfirmations(for:)(0xD000000000000012, 0x800000010044CE80);
}

uint64_t sub_1000ACB00(char a1)
{
  *(unsigned char *)(*(void *)v1 + 520) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000ACC2C, 0, 0);
}

uint64_t sub_1000ACC2C()
{
  if (*(unsigned char *)(v0 + 520) == 1)
  {
    uint64_t v1 = *(unsigned char **)(v0 + 232);
    if (v1[OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_isUserInitiated] == 1)
    {
      self;
      id v2 = sub_10030B11C();
      *(void *)(v0 + 424) = v2;
      NSString v3 = String._bridgeToObjectiveC()();
      *(void *)(v0 + 432) = v3;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 24) = sub_1000AD21C;
      uint64_t v4 = swift_continuation_init();
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000;
      *(void *)(v0 + 96) = sub_1000AE628;
      *(void *)(v0 + 104) = &unk_100515650;
      *(void *)(v0 + 112) = v4;
      sub_10030CA70(v2, v3, 0, (void *)(v0 + 80));
      return _swift_continuation_await(v0 + 16);
    }
    static Logger.appInstall.getter();
    int64_t v15 = v1;
    int64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(char **)(v0 + 232);
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      BOOL v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      uint64_t v22 = *(void **)&v19[OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_logKey];
      *(void *)(v0 + 136) = v22;
      id v23 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v21 = v22;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%@] Install sheet required but this isn't user initiated, failing", v20, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v25 = *(void **)(v0 + 408);
    (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 240));
    type metadata accessor for ASDError(0);
    *(void *)(v0 + 144) = 534;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100036BF0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    BOOL v5 = *(void **)(v0 + 232);
    static Logger.appInstall.getter();
    id v6 = v5;
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    NSString v10 = *(char **)(v0 + 232);
    if (v9)
    {
      uint64_t v27 = *(char **)(v0 + 408);
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v12 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v11 = 138412290;
      id v13 = *(void **)&v10[OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_logKey];
      *(void *)(v0 + 160) = v13;
      id v14 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v12 = v13;

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%@] Install sheet not required", v11, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      NSString v10 = v27;
    }
    else
    {
    }
    (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 272), *(void *)(v0 + 240));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v24();
}

uint64_t sub_1000AD21C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 440) = v1;
  if (v1) {
    id v2 = sub_1000AE1AC;
  }
  else {
    id v2 = sub_1000AD358;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000AD358()
{
  uint64_t v1 = *(void **)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);

  *(void *)(v0 + 44_Block_object_dispose(&a9, 8) = v2;
  *(void *)(v0 + 456) = v3;
  *(unsigned char *)(v0 + 521) = *(unsigned char *)(*(void *)(v0 + 232)
                                  + OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_isRedownload);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000AD460;
  v4[28] = *(void *)(v0 + 232);
  return _swift_task_switch(sub_1000AE704, 0, 0);
}

uint64_t sub_1000AD460(uint64_t a1)
{
  *(void *)(*(void *)v1 + 472) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000AD58C, 0, 0);
}

uint64_t sub_1000AD58C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  if (*(void *)(v1 + OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_qosMetricsFields)) {
    unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_qosMetricsFields);
  }
  else {
    unint64_t v2 = sub_1000429D8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v3 = *(void *)(v0 + 472);
  swift_bridgeObjectRetain();
  sub_1000AF158(v2, v3);
  uint64_t v4 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = 0;
  id v6 = [v4 dataWithJSONObject:isa options:0 error:v0 + 168];

  id v7 = *(id *)(v0 + 168);
  if (v6)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    unint64_t v11 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v8 = 0;
    unint64_t v10 = 0xF000000000000000;
  }
  *(void *)(v0 + 480) = v8;
  *(void *)(v0 + 48_Block_object_dispose(&a9, 8) = v10;
  uint64_t v21 = *(void *)(v0 + 400);
  uint64_t v22 = *(void *)(v0 + 384);
  uint64_t v23 = *(void *)(v0 + 392);
  uint64_t v24 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 360);
  uint64_t v17 = *(void *)(v0 + 368);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v13 = *(void *)(v0 + 336);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 328);
  uint64_t v14 = *(void *)(v0 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100058694(v8, v10);
  InstallSheetContext.Source.AppStoreSheetContext.init(showBiometrics:installType:metricsFieldData:)();
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v17, enum case for InstallSheetContext.Source.appStoreWithContext(_:), v18);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v19, enum case for InstallSheetContext.InstallType.app(_:), v20);
  *(void *)(v0 + 496) = *(void *)(v14 + OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_logKey);
  swift_bridgeObjectRetain();
  InstallSheetContext.init(itemID:versionID:source:type:logKey:learnMoreURL:authenticationContextData:showBiometricsForAppStoreInstall:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v21, v24);
  InstallConfirmationRequest.init(context:)();
  int64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v15;
  void *v15 = v0;
  v15[1] = sub_1000AD940;
  return InstallConfirmationRequest.run()();
}

uint64_t sub_1000AD940(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 512) = v1;
  swift_task_dealloc();
  if (v1)
  {
    BOOL v5 = sub_1000AE2E4;
  }
  else
  {
    *(unsigned char *)(v4 + 522) = a1 & 1;
    BOOL v5 = sub_1000ADA94;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000ADA94()
{
  uint64_t v1 = *(void **)(v0 + 232);
  if (*(unsigned char *)(v0 + 522))
  {
    static Logger.appInstall.getter();
    id v2 = v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    id v59 = v3;
    if (os_log_type_enabled(v3, v4))
    {
      BOOL v5 = *(void **)(v0 + 496);
      id v6 = *(void **)(v0 + 232);
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)(v0 + 216) = v5;
      id v9 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v8 = v5;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Asked to continue the install", v7, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v18 = *(void **)(v0 + 232);
    }
    uint64_t v20 = *(void *)(v0 + 480);
    unint64_t v19 = *(void *)(v0 + 488);
    uint64_t v21 = *(void *)(v0 + 384);
    os_log_t log = *(os_log_t *)(v0 + 376);
    uint64_t v57 = *(void *)(v0 + 400);
    uint64_t v22 = *(void *)(v0 + 312);
    uint64_t v23 = *(void *)(v0 + 320);
    uint64_t v24 = *(void *)(v0 + 304);
    uint64_t v25 = *(void *)(v0 + 288);
    uint64_t v27 = *(void *)(v0 + 240);
    uint64_t v26 = *(void *)(v0 + 248);

    sub_100034BBC(v20, v19);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    (*(void (**)(uint64_t, os_log_t))(v21 + 8))(v57, log);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    static Logger.appInstall.getter();
    id v10 = v1;
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *(void **)(v0 + 496);
      uint64_t v14 = *(void **)(v0 + 232);
      int64_t v15 = (uint8_t *)swift_slowAlloc();
      int64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)int64_t v15 = 138412290;
      *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v13;
      id v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v16 = v13;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%@] Asked to cancel the install", v15, 0xCu);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      long long v29 = *(void **)(v0 + 232);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 296), *(void *)(v0 + 240));
    type metadata accessor for ASDError(0);
    *(void *)(v0 + 200) = 907;
    sub_1000CC958((uint64_t)_swiftEmptyArrayStorage);
    sub_100036BF0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v30 = *(void **)(v0 + 232);
    static Logger.appInstall.getter();
    id v31 = v30;
    swift_errorRetain();
    id v32 = v31;
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = *(void **)(v0 + 496);
      os_log_t loga = v33;
      uint64_t v36 = *(void **)(v0 + 232);
      uint64_t v37 = swift_slowAlloc();
      os_log_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412546;
      *(void *)(v0 + 176) = v35;
      id v39 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_t v38 = v35;

      *(_WORD *)(v37 + 12) = 2114;
      swift_errorRetain();
      uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 184) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v38[1] = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v34, "[%@] Error asking for install confirmation: %{public}@", (uint8_t *)v37, 0x16u);
      sub_10001644C((uint64_t *)&unk_1005A3AA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v41 = loga;
    }
    else
    {
      uint64_t v42 = *(void **)(v0 + 232);

      swift_errorRelease();
      swift_errorRelease();
      uint64_t v41 = v33;
    }
    uint64_t v43 = *(void *)(v0 + 480);
    Swift::String v44 = *(void **)(v0 + 408);
    uint64_t v58 = *(void *)(v0 + 400);
    uint64_t v45 = *(void *)(v0 + 384);
    unint64_t v53 = *(void *)(v0 + 488);
    os_log_t logb = *(os_log_t *)(v0 + 376);
    uint64_t v46 = *(void *)(v0 + 312);
    uint64_t v47 = *(void *)(v0 + 320);
    uint64_t v48 = *(void *)(v0 + 304);
    uint64_t v50 = *(void *)(v0 + 248);
    uint64_t v49 = *(void *)(v0 + 256);
    uint64_t v51 = *(void *)(v0 + 240);

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    swift_willThrow();

    sub_100034BBC(v43, v53);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
    (*(void (**)(uint64_t, os_log_t))(v45 + 8))(v58, logb);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v28();
}

uint64_t sub_1000AE1AC()
{
  uint64_t v1 = *(void **)(v0 + 432);
  id v2 = *(void **)(v0 + 424);
  swift_willThrow();
  swift_errorRelease();

  *(void *)(v0 + 44_Block_object_dispose(&a9, 8) = 0xD000000000000015;
  *(void *)(v0 + 456) = 0x800000010044EA50;
  *(unsigned char *)(v0 + 521) = *(unsigned char *)(*(void *)(v0 + 232)
                                  + OBJC_IVAR____TtC9appstored28PostPurchaseInstallSheetTask_isRedownload);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000AD460;
  v3[28] = *(void *)(v0 + 232);
  return _swift_task_switch(sub_1000AE704, 0, 0);
}

uint64_t sub_1000AE2E4()
{
  uint64_t v1 = (void *)v0[29];
  static Logger.appInstall.getter();
  id v2 = v1;
  swift_errorRetain();
  id v3 = v2;
  swift_errorRetain();
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (void *)v0[62];
    os_log_t log = v4;
    uint64_t v7 = (void *)v0[29];
    uint64_t v8 = swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    v0[22] = v6;
    *(_DWORD *)uint64_t v8 = 138412546;
    id v10 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v6;

    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[23] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v9[1] = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v5, "[%@] Error asking for install confirmation: %{public}@", (uint8_t *)v8, 0x16u);
    sub_10001644C((uint64_t *)&unk_1005A3AA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    os_log_type_t v12 = log;
  }
  else
  {
    uint64_t v13 = (void *)v0[29];

    swift_errorRelease();
    swift_errorRelease();
    os_log_type_t v12 = v4;
  }
  uint64_t v14 = v0[60];
  int64_t v15 = (void *)v0[51];
  os_log_t loga = (os_log_t)v0[50];
  uint64_t v16 = v0[48];
  unint64_t v25 = v0[61];
  uint64_t v26 = v0[47];
  uint64_t v17 = v0[39];
  uint64_t v18 = v0[40];
  uint64_t v19 = v0[38];
  uint64_t v21 = v0[31];
  uint64_t v20 = v0[32];
  uint64_t v22 = v0[30];

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  swift_willThrow();

  sub_100034BBC(v14, v25);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  (*(void (**)(os_log_t, uint64_t))(v16 + 8))(loga, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1000AE628(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10001644C(&qword_1005A4E40);
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = *(uint64_t **)(*(void *)(v3 + 64) + 40);
    uint64_t *v9 = v8;
    v9[1] = v10;
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000AE6E4()
{
  *(void *)(v1 + 224) = v0;
  return _swift_task_switch(sub_1000AE704, 0, 0);
}

uint64_t sub_1000AE704()
{
  self;
  id v1 = sub_10030B11C();
  v0[29] = v1;
  v0[10] = v0;
  v0[15] = v0 + 27;
  v0[11] = sub_1000AE818;
  uint64_t v2 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_100028428;
  v0[21] = &unk_100515668;
  v0[22] = v2;
  sub_10030B39C((uint64_t)v1, v0 + 18);
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_1000AE818()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    uint64_t v2 = sub_1000AEDA8;
  }
  else {
    uint64_t v2 = sub_1000AE928;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000AE928()
{
  uint64_t v1 = (void *)v0[29];
  uint64_t v2 = (void *)v0[27];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 dictionaryForKey:v3];
  v0[31] = v4;

  v0[2] = v0;
  v0[7] = v0 + 23;
  v0[3] = sub_1000AEA8C;
  uint64_t v5 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_100025CD4;
  v0[21] = &unk_100515680;
  v0[22] = v5;
  [v4 valueWithCompletion:v0 + 18];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000AEA8C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 256) = v1;
  if (v1) {
    uint64_t v2 = sub_1000AEF80;
  }
  else {
    uint64_t v2 = sub_1000AEB9C;
  }
  return _swift_task_switch(v2, 0, 0);
}