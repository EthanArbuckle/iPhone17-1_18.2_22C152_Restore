void sub_1003CA120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&STACK[0x258], 8);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&STACK[0x440], 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1003CA210(uint64_t a1, void *a2)
{
  v3 = sub_1003E6D58(a2, *(void **)(a1 + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3 != 0;
}

id sub_1003CA268(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = v3;
  if (a1)
  {
    uint64_t v23 = 0;
    v24 = &v23;
    uint64_t v25 = 0x3032000000;
    v26 = sub_1000183E8;
    v27 = sub_100017DB0;
    id v28 = 0;
    v5 = *(void **)(a1 + 56);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1003CA514;
    v20[3] = &unk_100521288;
    v22 = &v23;
    v20[4] = a1;
    id v6 = v3;
    id v21 = v6;
    sub_100010468(v5, v20);
    v7 = +[SKANPersistentTokenHandler generateRandomPrivateInput];
    v8 = [[_TtC9appstored26SKANPersistentTokenHandler alloc] initWithRandomPrivateInput:v7];
    v9 = (void *)v24[5];
    v24[5] = (uint64_t)v8;

    v10 = [(id)v24[5] tryGenerateBlindedElement];
    v11 = objc_opt_new();
    v12 = [v10 blindedElement];
    [v11 setObject:v12 forKeyedSubscript:@"blinded-element"];

    v13 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v10 timestamp]);
    [v11 setObject:v13 forKeyedSubscript:@"timestamp"];

    v14 = objc_opt_new();
    [v14 setObject:v11 forKeyedSubscript:@"token-info"];
    v15 = *(void **)(a1 + 56);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1003CA588;
    v17[3] = &unk_1005212B0;
    v17[4] = a1;
    id v18 = v6;
    v19 = &v23;
    sub_100010468(v15, v17);

    _Block_object_dispose(&v23, 8);
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1003CA4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003CA514(void *a1)
{
  v2 = (void *)a1[4];
  if (v2) {
    v2 = (void *)v2[8];
  }
  uint64_t v3 = a1[5];
  v7 = v2;
  uint64_t v4 = [v7 objectForKeyedSubscript:v3];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

id sub_1003CA588(void *a1)
{
  v1 = (void *)a1[4];
  if (v1) {
    v1 = (void *)v1[8];
  }
  return [v1 setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKeyedSubscript:a1[5]];
}

void sub_1003CA5AC(long long *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v78 = a3;
  id v81 = a4;
  id v80 = a5;
  if (a1)
  {
    v10 = ASDLogHandleForCategory();
    v11 = v10;
    if (!v9)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Received nil app adam ID while handling purchase completion", buf, 2u);
      }
      goto LABEL_77;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Handling purchase completion for app: %{public}@", buf, 0xCu);
    }

    id v12 = v81;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      ASDErrorWithDescription();
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      v79 = 0;
LABEL_15:

      v11 = v15;
      v17 = +[SkannerEvent resultTypeTokenReceived];
      id v18 = +[SkannerEvent destinationCommerce];
      v77 = +[SkannerEvent requestWithResult:v17 destination:v18 responseCode:v80 postback:0 error:v11];

      v19 = +[SkannerCoordinator sharedInstance];
      objc_msgSend(v19, "logEvent:forAdvertisedAppAdamID:synchronizeWithSnout:", v77, objc_msgSend(v9, "longLongValue"), 1);

      if (v79)
      {
        v20 = +[SkannerEvent resultTypeFinalized];
        id v21 = +[SkannerEvent postbackTypePending];
        v22 = +[SkannerEvent conversionWithResult:v20 postbackType:v21 postbackSequenceIndex:0 error:0];

        uint64_t v95 = 0;
        v96 = &v95;
        uint64_t v97 = 0x2020000000;
        uint64_t v98 = 0;
        uint64_t v91 = 0;
        v92 = &v91;
        uint64_t v93 = 0x2020000000;
        uint64_t v94 = 0;
        uint64_t v23 = (void *)a1[3];
        v87[0] = _NSConcreteStackBlock;
        v87[1] = 3221225472;
        v87[2] = sub_1003CB5A0;
        v87[3] = &unk_10052C108;
        v89 = &v95;
        id v24 = v9;
        id v88 = v24;
        v90 = &v91;
        [v23 readUsingSession:v87];
        uint64_t v25 = v96[3];
        if (v25 < 1)
        {
          v27 = 0;
        }
        else
        {
          if (v92[3] == v25) {
            v26 = off_10052AEF8;
          }
          else {
            v26 = &off_10052AF00;
          }
          v27 = *v26;
        }
        id v28 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543618;
          *(void *)&buf[4] = v24;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v27;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Determined environment for app %{public}@: %{public}@", buf, 0x16u);
        }

        id v29 = v24;
        id v75 = v79;
        v76 = v27;
        *(void *)&long long v111 = 0;
        *((void *)&v111 + 1) = &v111;
        uint64_t v112 = 0x3032000000;
        v113 = sub_1000183E8;
        v114 = sub_100017DB0;
        id v115 = 0;
        v30 = (void *)a1[7];
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = sub_1003CB654;
        v107 = &unk_100521288;
        v110 = &v111;
        v108 = (long long *)a1;
        v31 = (long long *)v29;
        v109 = v31;
        sub_100010468(v30, buf);
        if (*(void *)(*((void *)&v111 + 1) + 40))
        {
          v32 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            v33 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(*((void *)&v111 + 1) + 40) timestamp]);
            LODWORD(v101) = 138412290;
            *(void *)((char *)&v101 + 4) = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Finalization timestamp %@", (uint8_t *)&v101, 0xCu);
          }
          v34 = +[NSMutableDictionary dictionaryWithDictionary:v75];
          v35 = v34;
          if (v34) {
            id v36 = sub_1002680CC(v34, @"redownload", 0);
          }
          else {
            id v36 = 0;
          }
          v37 = objc_opt_new();
          objc_msgSend(v37, "setTimestamp:", objc_msgSend(*(id *)(*((void *)&v111 + 1) + 40), "timestamp"));
          objc_msgSend(v37, "setAppAdamId:", objc_msgSend(v31, "unsignedLongLongValue"));
          [v37 setIsRedownload:v36];
          v38 = sub_1002689B4(v35, @"certificate");
          if (v38)
          {
            uint64_t v39 = [v37 data];
            v40 = *(void **)(*((void *)&v111 + 1) + 40);
            id v100 = 0;
            v72 = (void *)v39;
            v41 = objc_msgSend(v40, "tryFinalizeWithPublicData:finalizationDict:pubCertString:error:");
            id v42 = v100;
            v73 = v41;
            v71 = v42;
            if (v41)
            {
              uint64_t v70 = [v41 base64EncodedStringWithOptions:0];
              if (v70)
              {
                uint64_t v43 = [*(id *)(*((void *)&v111 + 1) + 40) blindedData];
                v44 = (void *)v43;
                if (v43)
                {
                  v69 = (void *)v43;
                  v74 = objc_opt_new();
                  [v74 setObject:v31 forKeyedSubscript:@"item-identifier"];
                  v45 = [v69 privateInput];
                  [v74 setObject:v45 forKeyedSubscript:@"private-input"];

                  [v74 setObject:v70 forKeyedSubscript:@"prf-client"];
                  [v74 setObject:v38 forKeyedSubscript:@"certificate"];
                  v46 = +[NSNumber numberWithBool:v36];
                  [v74 setObject:v46 forKeyedSubscript:@"is-redownload"];

                  v47 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(*((void *)&v111 + 1) + 40) timestamp]);
                  [v74 setObject:v47 forKeyedSubscript:@"timestamp"];

                  if (+[NSJSONSerialization isValidJSONObject:v74])
                  {
                    id v99 = 0;
                    v68 = +[NSJSONSerialization dataWithJSONObject:v74 options:4 error:&v99];
                    id v67 = v99;
                    if (v68)
                    {
                      +[SKANTokenHandoff handoffTokenWithTokenData:advertisedItemID:environment:](_TtC9appstored16SKANTokenHandoff, "handoffTokenWithTokenData:advertisedItemID:environment:", v68, [v31 unsignedLongLongValue], v76);
                    }
                    else
                    {
                      v51 = ASDLogHandleForCategory();
                      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(v101) = 0;
                        _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "Failed to hand token off, serialization failed.", (uint8_t *)&v101, 2u);
                      }
                    }
                    v52 = (void *)a1[7];
                    *(void *)&long long v101 = _NSConcreteStackBlock;
                    *((void *)&v101 + 1) = 3221225472;
                    v102 = sub_1003CB6C8;
                    v103 = &unk_1005218C0;
                    v104 = a1;
                    v105 = v31;
                    sub_100010468(v52, &v101);
                    v48 = v67;
                  }
                  else
                  {
                    ASDErrorWithDescription();
                    v48 = (id)objc_claimAutoreleasedReturnValue();
                  }

                  v44 = v69;
                }
                else
                {
                  v48 = ASDErrorWithDescription();
                }

                v50 = (void *)v70;
              }
              else
              {
                uint64_t v49 = ASDErrorWithDescription();
                v50 = 0;
                v48 = v49;
              }
            }
            else
            {
              v48 = v42;
            }
          }
          else
          {
            v48 = ASDErrorWithDescription();
          }
        }
        else
        {
          v48 = ASDErrorWithDescription();
        }

        _Block_object_dispose(&v111, 8);
        if (v48)
        {
          v53 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543618;
            *(void *)&buf[4] = v31;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v48;
            _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Finalization failed for app %{public}@ with error: %{public}@", buf, 0x16u);
          }

          [v22 setError:v48];
          v54 = +[SkannerCoordinator sharedInstance];
          objc_msgSend(v54, "logEvent:forAdvertisedAppAdamID:synchronizeWithSnout:", v22, objc_msgSend(v31, "longLongValue"), 1);
        }
        else
        {
          v55 = v31;
          *(void *)&long long v111 = 0;
          *((void *)&v111 + 1) = &v111;
          uint64_t v112 = 0x2020000000;
          LOBYTE(v113) = 0;
          v56 = (void *)a1[3];
          *(void *)buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = sub_1003CDA28;
          v107 = &unk_1005268D0;
          v109 = &v111;
          v57 = v55;
          v108 = v57;
          [v56 modifyUsingTransaction:buf];
          if (*(unsigned char *)(*((void *)&v111 + 1) + 24))
          {
            v48 = 0;
          }
          else
          {
            v48 = ASDErrorWithDescription();
          }

          _Block_object_dispose(&v111, 8);
          if (v48)
          {
            v58 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543618;
              *(void *)&buf[4] = v57;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v48;
              _os_log_error_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Failed to clean postbacks from app %{public}@ with error: %{public}@", buf, 0x16u);
            }

            [v22 setError:v48];
            v59 = +[SkannerCoordinator sharedInstance];
            objc_msgSend(v59, "logEvent:forAdvertisedAppAdamID:", v22, objc_msgSend(v57, "longLongValue"));
          }
          if (v76)
          {
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x2020000000;
            LOBYTE(v107) = 0;
            v60 = (void *)a1[3];
            v82[0] = _NSConcreteStackBlock;
            v82[1] = 3221225472;
            v82[2] = sub_1003CB608;
            v82[3] = &unk_10052BF38;
            v86 = buf;
            v61 = v57;
            v83 = v61;
            v84 = v76;
            id v85 = v78;
            [v60 modifyUsingTransaction:v82];
            if (*(unsigned char *)(*(void *)&buf[8] + 24))
            {
              v62 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v111) = 138543362;
                *(void *)((char *)&v111 + 4) = v61;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Pending postback created for app %{public}@", (uint8_t *)&v111, 0xCu);
              }

              [v22 setError:0];
              v63 = +[SkannerCoordinator sharedInstance];
              objc_msgSend(v63, "logEvent:forAdvertisedAppAdamID:", v22, objc_msgSend(v61, "longLongValue"));
            }
            else
            {
              v65 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
              {
                LODWORD(v111) = 138543362;
                *(void *)((char *)&v111 + 4) = v61;
                _os_log_error_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "Pending postback creation failed for app %{public}@", (uint8_t *)&v111, 0xCu);
              }

              v66 = ASDErrorWithDescription();
              [v22 setError:v66];

              v63 = +[SkannerCoordinator sharedInstance];
              objc_msgSend(v63, "logEvent:forAdvertisedAppAdamID:", v22, objc_msgSend(v61, "longLongValue"));
            }

            _Block_object_dispose(buf, 8);
          }
          else
          {
            v64 = +[SkannerCoordinator sharedInstance];
            objc_msgSend(v64, "completeStoryForAdvertisedAppAdamID:", objc_msgSend(v57, "longLongValue"));
          }
        }

        _Block_object_dispose(&v91, 8);
        _Block_object_dispose(&v95, 8);
        v11 = v48;
      }
      else
      {
        v22 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&buf[4] = v11;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Could not parse info from dictionary: %{public}@", buf, 0xCu);
        }
      }

LABEL_77:
      goto LABEL_78;
    }
    v13 = sub_1002689B4(v12, @"error");
    if (v13)
    {
      id v14 = +[NSString stringWithFormat:@"Error found in ad network response: %@", v13];
      ASDErrorWithDescription();
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v16 = sub_100268568(v12, @"token-info");
      if (v16)
      {
        id v14 = v16;
        id v15 = 0;
        v79 = v14;
        goto LABEL_14;
      }
      ASDErrorWithDescription();
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      id v14 = 0;
    }
    v79 = 0;
LABEL_14:

    goto LABEL_15;
  }
LABEL_78:
}

void sub_1003CB500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose((const void *)(v45 - 176), 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1003CB5A0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1003E41B4(v4, v3);
  id v5 = sub_1003E4260(v4, *(void **)(a1 + 32));

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v5;
}

uint64_t sub_1003CB608(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = sub_100349720(a2, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
}

void sub_1003CB654(void *a1)
{
  v2 = (void *)a1[4];
  if (v2) {
    v2 = (void *)v2[8];
  }
  uint64_t v3 = a1[5];
  v7 = v2;
  uint64_t v4 = [v7 objectForKeyedSubscript:v3];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

id sub_1003CB6C8(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  if (v1) {
    v1 = (void *)v1[8];
  }
  return [v1 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

id sub_1003CB6E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = sub_100349628(a2, v3, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  return v5;
}

uint64_t sub_1003CB73C(void *a1, void *a2)
{
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  BOOL v6 = sub_100345500(a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

id sub_1003CB7B8(uint64_t a1, void *a2)
{
  return sub_100346FC4(a2, *(void **)(a1 + 32));
}

uint64_t sub_1003CB7C8(void *a1, void *a2)
{
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  BOOL v6 = sub_1003487CC(a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

BOOL sub_1003CB844(id a1, InstallAttributionPingback *a2)
{
  return sub_10027C8FC((uint64_t)a2);
}

id *sub_1003CB84C(uint64_t a1)
{
  v2 = sub_1003F3F18();
  uint64_t v3 = v2;
  if (v2) {
    uint64_t v4 = (id *)[v2 BOOLValue];
  }
  else {
    uint64_t v4 = sub_10030BBA8(*(id **)(a1 + 16), @"install-attribution-should-send-dev-pingback", 0);
  }
  uint64_t v5 = v4;

  return v5;
}

uint64_t sub_1003CB8B0(uint64_t a1, BOOL a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  BOOL v4 = sub_100346040(a2, *(void **)(a1 + 32));
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1003CB92C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v5 = *(void **)(a1 + 24);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1003D1620;
      v8[3] = &unk_10052C130;
      id v9 = v3;
      [v5 readUsingSession:v8];
      BOOL v6 = v9;
    }
    else
    {
      BOOL v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v7 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Received nil app adam ID while checking if story for app is complete", v7, 2u);
      }
    }
  }
}

uint64_t sub_1003CBA18(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = sub_1003E517C(v3, *(void **)(a1 + 32));
  uint64_t v5 = objc_opt_new();
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v29;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v29 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v28 + 1) + 8 * i);
        if (v11
          && *(unsigned char *)(v11 + 13)
          && sub_10027C8FC(*(void *)(*((void *)&v28 + 1) + 8 * i)))
        {
          sub_100270214(v11, *(void **)(a1 + 40));
          *(unsigned char *)(v11 + 14) = 1;
          [v5 addObject:v11];
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v8);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v12 = v5;
  id v13 = [v12 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v25;
    do
    {
      for (j = 0; j != v14; j = (char *)j + 1)
      {
        if (*(void *)v25 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
        if (*(unsigned char *)(v17 + 24))
        {
          id v18 = *(void **)(*((void *)&v24 + 1) + 8 * (void)j);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          id obj = *(id *)(v19 + 40);
          BOOL v20 = sub_100345500(v3, v18, &obj);
          objc_storeStrong((id *)(v19 + 40), obj);
          uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
        }
        else
        {
          BOOL v20 = 0;
        }
        *(unsigned char *)(v17 + 24) = v20;
      }
      id v14 = [v12 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v14);
  }

  uint64_t v21 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  return v21;
}

void sub_1003CBC60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v30 = 0;
    long long v31 = &v30;
    uint64_t v32 = 0x3032000000;
    v33 = sub_1000183E8;
    v34 = sub_100017DB0;
    id v35 = 0;
    uint64_t v26 = 0;
    long long v27 = &v26;
    uint64_t v28 = 0x2020000000;
    char v29 = 1;
    uint64_t v22 = 0;
    uint64_t v23 = &v22;
    uint64_t v24 = 0x2020000000;
    char v25 = 0;
    id v7 = *(void **)(a1 + 24);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1003CBF9C;
    v19[3] = &unk_100524E00;
    uint64_t v21 = &v22;
    id v8 = v5;
    id v20 = v8;
    [v7 readUsingSession:v19];
    if (*((unsigned char *)v23 + 24))
    {
      uint64_t v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        id v37 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Pingback has already been registered, ignoring call to registered: %{public}@", buf, 0xCu);
      }
    }
    else
    {
      v10 = *(void **)(a1 + 24);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1003CBFD8;
      v15[3] = &unk_10052BFF0;
      uint64_t v11 = v8;
      v16 = v11;
      uint64_t v17 = &v30;
      id v18 = &v26;
      [v10 modifyUsingTransaction:v15];
      if (*((unsigned char *)v27 + 24)) {
        sub_1003C47F4(a1);
      }
      if ((sub_1003C4D74() & 1) == 0) {
        sub_1003CC15C(a1, v6, v11);
      }
      if (!*((unsigned char *)v27 + 24) && !v31[5])
      {
        uint64_t v12 = ASDErrorWithDescription();
        id v13 = (void *)v31[5];
        v31[5] = v12;
      }
      id v14 = +[SkannerEvent resultTypeRegister];
      sub_1003CC28C(a1, v11, v14, (void *)v31[5]);

      uint64_t v9 = v16;
    }

    _Block_object_dispose(&v22, 8);
    _Block_object_dispose(&v26, 8);
    _Block_object_dispose(&v30, 8);
  }
}

void sub_1003CBF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1003CBF9C(uint64_t a1, BOOL a2)
{
  BOOL result = sub_1003E6B2C(a2, *(void **)(a1 + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1003CBFD8(uint64_t a1, void *a2)
{
  if (a2 && (sub_1003467B4(a2, 0, @"none", *(void **)(a1 + 32), 0) & 1) != 0)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registered pingback for app: %{public}@", buf, 0xCu);
    }
    uint64_t v5 = 1;
  }
  else
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      uint64_t v11 = v9;
      __int16 v12 = 2114;
      uint64_t v13 = 0;
      __int16 v14 = 1024;
      int v15 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error setting install attribution pingback registered for app: %{public}@, error: %{public}@, result: %i", buf, 0x1Cu);
    }
    uint64_t v5 = 0;
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v5;
  return v5;
}

void sub_1003CC15C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x3032000000;
  v12[3] = sub_1000183E8;
  v12[4] = sub_100017DB0;
  sub_1002F205C((uint64_t)v5);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  id v7 = *(void **)(a1 + 24);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1003CCA54;
  v9[3] = &unk_1005268D0;
  uint64_t v11 = v12;
  id v8 = v6;
  id v10 = v8;
  [v7 modifyUsingTransaction:v9];

  _Block_object_dispose(v12, 8);
}

void sub_1003CC274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003CC28C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v24 = 0;
  char v25 = &v24;
  uint64_t v26 = 0x3032000000;
  uint64_t v27 = sub_1000183E8;
  uint64_t v28 = sub_100017DB0;
  id v29 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x3032000000;
  uint64_t v21 = sub_1000183E8;
  uint64_t v22 = sub_100017DB0;
  id v23 = 0;
  id v10 = *(void **)(a1 + 24);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1003D1530;
  v14[3] = &unk_10052C108;
  id v11 = v7;
  id v15 = v11;
  v16 = &v24;
  uint64_t v17 = &v18;
  [v10 readUsingSession:v14];
  __int16 v12 = +[SkannerEvent conversionWithResult:v8 postbackType:v25[5] postbackSequenceIndex:v19[5] error:v9];
  id v13 = +[SkannerCoordinator sharedInstance];
  objc_msgSend(v13, "logEvent:forAdvertisedAppAdamID:", v12, objc_msgSend(v11, "longLongValue"));

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v24, 8);
}

void sub_1003CC454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1003CC47C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  uint64_t v17 = a7;
  if (a1)
  {
    uint64_t v18 = ASDErrorWithDescription();
    if (sub_1002F3620((unint64_t)v13))
    {
      id v19 = [v13 integerValue];
      if ((unint64_t)v19 < 0x40)
      {
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v40 = 0x3032000000;
        v41 = sub_1000183E8;
        id v42 = sub_100017DB0;
        id v43 = 0;
        uint64_t v35 = 0;
        id v36 = &v35;
        uint64_t v37 = 0x2020000000;
        char v38 = 1;
        id v23 = *(void **)(a1 + 24);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_1003CC8BC;
        v28[3] = &unk_10052C018;
        id v33 = v19;
        id v29 = v14;
        char v34 = a6;
        id v24 = v15;
        id v30 = v24;
        p_long long buf = &buf;
        uint64_t v32 = &v35;
        [v23 modifyUsingTransaction:v28];
        if (*((unsigned char *)v36 + 24)) {
          sub_1003C47F4(a1);
        }
        if ((sub_1003C4D74() & 1) == 0) {
          sub_1003CC15C(a1, v16, v24);
        }
        if (!*((unsigned char *)v36 + 24) && !*(void *)(*((void *)&buf + 1) + 40))
        {
          uint64_t v25 = ASDErrorWithDescription();
          uint64_t v26 = *(void **)(*((void *)&buf + 1) + 40);
          *(void *)(*((void *)&buf + 1) + 40) = v25;
        }
        uint64_t v27 = +[SkannerEvent resultTypeUpdate];
        sub_1003CC28C(a1, v24, v27, *(void **)(*((void *)&buf + 1) + 40));

        if (v17) {
          v17[2](v17, *(void *)(*((void *)&buf + 1) + 40));
        }

        _Block_object_dispose(&v35, 8);
        _Block_object_dispose(&buf, 8);

        goto LABEL_24;
      }
      uint64_t v20 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Attempted to set invalid conversion value for app adamID: %{public}@, aborting.", (uint8_t *)&buf, 0xCu);
      }

      if (v17) {
        ((void (**)(id, void *))v17)[2](v17, v18);
      }
    }
    else
    {
      uint64_t v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Attempted to set invalid type for conversion value for app adamID: %{public}@, aborting.", (uint8_t *)&buf, 0xCu);
      }

      if (v17) {
        ((void (**)(id, void *))v17)[2](v17, v18);
      }
    }
    uint64_t v21 = +[SkannerEvent resultTypeUpdate];
    sub_1003CC28C(a1, v15, v21, v18);

LABEL_24:
  }
}

void sub_1003CC890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CC8BC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003467B4(a2, *(void *)(a1 + 64), *(void **)(a1 + 32), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 72));
  id v4 = 0;
  id v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v16 = v14;
      __int16 v17 = 2114;
      uint64_t v18 = v5;
      __int16 v19 = 1024;
      int v20 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error updating install attribution pingback for app: %{public}@, error: %{public}@, result: %i", buf, 0x1Cu);
    }
  }
  if (v3)
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Updated conversion value for app: %{public}@", buf, 0xCu);
    }
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v5;
  id v12 = v5;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v3;
  return v3;
}

uint64_t sub_1003CCA54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v4) {
    sub_10027C7E8((uint64_t)InstallAttributionPingback, v4);
  }
  else {
  id v5 = sub_1003F3F54();
  }
  if (v5)
  {
    int v6 = sub_100347FA8(v3, v5, *(void **)(a1 + 32));
    id v7 = 0;
    id v8 = v7;
    if (v6) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (!v9)
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543874;
        uint64_t v17 = v15;
        __int16 v18 = 2114;
        __int16 v19 = v8;
        __int16 v20 = 1024;
        int v21 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error setting developer pingback domain for app: %{public}@, error: %{public}@, result: %i", buf, 0x1Cu);
      }
    }
    if (v6)
    {
      id v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Developer pingback domain set for app: %{public}@", buf, 0xCu);
      }

      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    id v8 = 0;
  }

  return v13;
}

uint64_t sub_1003CCC28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x3032000000;
    v15[3] = sub_1000183E8;
    void v15[4] = sub_100017DB0;
    id v16 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = &v11;
    uint64_t v13 = 0x2020000000;
    char v14 = 0;
    id v5 = *(void **)(a1 + 24);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003CCD80;
    v7[3] = &unk_100524E50;
    BOOL v9 = &v11;
    id v8 = v3;
    uint64_t v10 = v15;
    [v5 modifyUsingTransaction:v7];
    a1 = *((unsigned char *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
    _Block_object_dispose(v15, 8);
  }
  return a1;
}

void sub_1003CCD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CCD80(void *a1, void *a2)
{
  id v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  BOOL v6 = sub_100345500(a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
  int v7 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  id v8 = ASDLogHandleForCategory();
  uint64_t v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Successfully added test postback", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(*(void *)(a1[6] + 8) + 40);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v14 = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to add test postback with error: %{public}@", buf, 0xCu);
  }

  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

void *sub_1003CCED4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v19 = 0;
    __int16 v20 = &v19;
    uint64_t v21 = 0x3032000000;
    uint64_t v22 = sub_1000183E8;
    id v23 = sub_100017DB0;
    id v24 = 0;
    uint64_t v5 = (void *)a1[3];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1003CD11C;
    v16[3] = &unk_100524E00;
    __int16 v18 = &v19;
    id v17 = v3;
    [v5 readUsingSession:v16];
    a1 = objc_opt_new();
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v6 = (id)v20[5];
    id v7 = [v6 countByEnumeratingWithState:&v12 objects:v25 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v13;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v6);
          }
          uint64_t v10 = sub_10027C424((uint64_t)InstallAttributionPingback, *(void **)(*((void *)&v12 + 1) + 8 * i));
          if (v10) {
            objc_msgSend(a1, "addObject:", v10, (void)v12);
          }
        }
        id v7 = [v6 countByEnumeratingWithState:&v12 objects:v25 count:16];
      }
      while (v7);
    }

    _Block_object_dispose(&v19, 8);
  }

  return a1;
}

void sub_1003CD0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003CD11C(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003E4E94(a2, *(void *)(a1 + 32), 0);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_1003CD174(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x3032000000;
    v15[3] = sub_1000183E8;
    void v15[4] = sub_100017DB0;
    id v16 = 0;
    uint64_t v11 = 0;
    long long v12 = &v11;
    uint64_t v13 = 0x2020000000;
    char v14 = 0;
    uint64_t v5 = *(void **)(a1 + 24);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003CD2CC;
    v7[3] = &unk_100524E50;
    uint64_t v9 = &v11;
    id v8 = v3;
    uint64_t v10 = v15;
    [v5 modifyUsingTransaction:v7];
    a1 = *((unsigned char *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
    _Block_object_dispose(v15, 8);
  }
  return a1;
}

void sub_1003CD2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CD2CC(uint64_t *a1, void *a2)
{
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = sub_100345464(a2, a1[4]);
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v4;
  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

void sub_1003CD348(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id obj = v2;
  id v3 = [obj countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v6);
        id v8 = sub_1003C44E0();
        id v9 = v7;
        uint64_t v10 = v9;
        if (v8)
        {
          uint64_t v11 = (void *)v8[3];
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          v17[2] = sub_1003D121C;
          v17[3] = &unk_10052BEC8;
          id v18 = v9;
          [v11 modifyUsingTransaction:v17];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v4);
  }
}

void sub_1003CD4EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void (**)(void, void, void))v6;
  if (a1)
  {
    id v22 = v6;
    id v8 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v5 count]);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v23 = v5;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v24 objects:v30 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v25;
LABEL_4:
      uint64_t v13 = 0;
      while (1)
      {
        if (*(void *)v25 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = *(void **)(*((void *)&v24 + 1) + 8 * v13);
        id v15 = [v14 mutableCopy];
        long long v16 = [v14 objectForKeyedSubscript:@"sourceDomain"];
        id v17 = [v14 objectForKeyedSubscript:@"sourceAppId"];
        id v18 = v17;
        if (v16)
        {
          [v15 setObject:0 forKeyedSubscript:@"sourceAppId"];
          if ((sub_1002F1FD4(v16) & 1) == 0) {
            goto LABEL_14;
          }
        }
        else if (((unint64_t)[v17 integerValue] & 0x8000000000000000) != 0)
        {
LABEL_14:
          uint64_t v19 = ASDErrorWithDescription();

          id v7 = (void (**)(void, void, void))v22;
          if (!v19) {
            goto LABEL_18;
          }
          __int16 v20 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543362;
            id v29 = v19;
            _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Test postback source configuration failed with error: %{public}@", buf, 0xCu);
          }

          (*((void (**)(id, void, void *))v22 + 2))(v22, 0, v19);
          goto LABEL_21;
        }
        [v8 addObject:v15];

        if (v11 == (id)++v13)
        {
          id v11 = [v9 countByEnumeratingWithState:&v24 objects:v30 count:16];
          if (v11) {
            goto LABEL_4;
          }
          break;
        }
      }
    }

    id v7 = (void (**)(void, void, void))v22;
LABEL_18:
    uint64_t v21 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Test postback source configuration succeeded", buf, 2u);
    }

    ((void (**)(void, void *, void))v7)[2](v7, v8, 0);
LABEL_21:
    id v5 = v23;
  }
}

void sub_1003CD7FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 24);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003CD898;
    v6[3] = &unk_10052BEC8;
    id v7 = v3;
    [v5 modifyUsingTransaction:v6];
  }
}

id sub_1003CD898(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  if (v3) {
    id v5 = *(void **)(v3 + 48);
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    unsigned int v8 = *(unsigned __int8 *)(v7 + 14) != 0;
  }
  else {
    unsigned int v8 = 0;
  }
  id v9 = sub_100346678(v4, (uint64_t)v6, v8);

  id v10 = ASDLogHandleForCategory();
  id v11 = v10;
  if (!v9)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    id v15 = *(void **)(a1 + 32);
    if (v15) {
      id v15 = (void *)v15[2];
    }
    uint64_t v13 = v15;
    int v16 = 138543618;
    id v17 = v13;
    __int16 v18 = 1024;
    int v19 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Error removing install attribution pingback for app: %{public}@, result: %i", (uint8_t *)&v16, 0x12u);
    goto LABEL_10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void **)(a1 + 32);
    if (v12) {
      uint64_t v12 = (void *)v12[2];
    }
    uint64_t v13 = v12;
    int v16 = 138543362;
    id v17 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removed pingback for app: %{public}@", (uint8_t *)&v16, 0xCu);
LABEL_10:
  }
LABEL_12:

  return v9;
}

uint64_t sub_1003CDA28(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_100346FC4(a2, *(void **)(a1 + 32));
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1003CDA70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 24);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003CDB0C;
    v6[3] = &unk_10052BEC8;
    id v7 = v3;
    [v5 modifyUsingTransaction:v6];
  }
}

id sub_1003CDB0C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  if (v3) {
    id v5 = *(void **)(v3 + 48);
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;
  id v7 = sub_100347104(v4, (uint64_t)v6);

  unsigned int v8 = ASDLogHandleForCategory();
  id v9 = v8;
  if (!v7)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    uint64_t v13 = *(void **)(a1 + 32);
    if (v13) {
      uint64_t v13 = (void *)v13[2];
    }
    id v11 = v13;
    int v14 = 138543618;
    id v15 = v11;
    __int16 v16 = 1024;
    int v17 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error incrementing pingback retry count for app: %{public}@, result: %i", (uint8_t *)&v14, 0x12u);
    goto LABEL_8;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = *(void **)(a1 + 32);
    if (v10) {
      id v10 = (void *)v10[2];
    }
    id v11 = v10;
    int v14 = 138543362;
    id v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Incremented pingback retry count for app: %{public}@", (uint8_t *)&v14, 0xCu);
LABEL_8:
  }
LABEL_10:

  return v7;
}

void sub_1003CDC80(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003E5D30(a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1003CDCCC(uint64_t a1, void *a2)
{
  activity = a2;
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state != 2)
  {
    int v4 = state;
    if (!state)
    {
      id v5 = xpc_activity_copy_criteria(activity);
      if (!v5)
      {
        id v6 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting criteria for install attribution pingback retry task", (uint8_t *)&buf, 2u);
        }

        xpc_activity_set_criteria(activity, *(xpc_object_t *)(a1 + 32));
        id v5 = 0;
      }
      goto LABEL_120;
    }
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v4;
      id v11 = "Unknown state: %d when processing install attribution pingback retry task";
      uint64_t v12 = v5;
      uint32_t v13 = 8;
LABEL_119:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&buf, v13);
      goto LABEL_120;
    }
    goto LABEL_120;
  }
  sub_1003C44E0(InstallAttributionManager);
  uint64_t v94 = (uint64_t *)objc_claimAutoreleasedReturnValue();
  id v7 = *(void **)(a1 + 40);
  xpc_activity_t v80 = activity;
  id v83 = v7;
  if (v94)
  {
    unsigned int v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v83;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending mature pingbacks for environment: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    unsigned int v93 = [v83 isEqualToString:@"development"];
    id v9 = @"com.apple.appstored.InstallAttributionManager.PingbackRetry";
    if (v93) {
      id v9 = @"com.apple.appstored.InstallAttributionManager.PingbackRetry.Development";
    }
    v79 = v9;
    if (v93
      && !+[SKANEnvironmentHelper shouldUseDevelopmentSettingsForEnvironment:v83])
    {
      id v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Developer mode is not enabled for development pingback transmission, unregistering task", (uint8_t *)&buf, 2u);
      }

      xpc_activity_unregister((const char *)[@"com.apple.appstored.InstallAttributionManager.PingbackRetry.Development" UTF8String]);
      goto LABEL_115;
    }
    uint64_t v10 = v94[2];
    id v121 = 0;
    id v78 = sub_10030BE3C(v10, @"install-attribution-max-ping-back-attempts", &off_10054CDE0, &v121);
    id v76 = v121;
    if (v78)
    {
      uint64_t v86 = (uint64_t)[v78 integerValue];
    }
    else
    {
      int v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v76;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to get install attribution retry limit from bag, error: %{public}@", (uint8_t *)&buf, 0xCu);
      }

      uint64_t v86 = 10;
    }
    id v15 = +[NSMutableSet setWithObject:v83];
    if ([v83 isEqual:@"production"]) {
      [v15 addObject:@"development"];
    }
    uint64_t v115 = 0;
    v116 = &v115;
    uint64_t v117 = 0x3032000000;
    v118 = sub_1000183E8;
    v119 = sub_100017DB0;
    id v120 = 0;
    __int16 v16 = (void *)v94[3];
    v112[0] = _NSConcreteStackBlock;
    v112[1] = 3221225472;
    v112[2] = sub_1003CFF08;
    v112[3] = &unk_100524E00;
    v114 = &v115;
    id v77 = v15;
    id v113 = v77;
    [v16 readUsingSession:v112];
    if (![(id)v116[5] count])
    {
      uint64_t v21 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "No registered pingbacks found. Unregistering pingback retry task.", (uint8_t *)&buf, 2u);
      }

      xpc_activity_unregister((const char *)[(__CFString *)v79 UTF8String]);
      goto LABEL_114;
    }
    uint64_t v106 = 0;
    v107 = &v106;
    uint64_t v108 = 0x3032000000;
    v109 = sub_1000183E8;
    v110 = sub_100017DB0;
    id v111 = 0;
    int v17 = (void *)v94[3];
    v103[0] = _NSConcreteStackBlock;
    v103[1] = 3221225472;
    v103[2] = sub_1003CFF5C;
    v103[3] = &unk_100524E00;
    v105 = &v106;
    id v104 = v77;
    [v17 readUsingSession:v103];
    group = dispatch_group_create();
    v74 = +[NSSet setWithObjects:@"Accept-Language", 0];
    __int16 v18 = +[SKANEnvironmentHelper shouldUseProxyOverrideForEnvironment:v83];
    int v19 = v18;
    if (v18)
    {
      unsigned int v20 = [v18 BOOLValue];

      if (!v20)
      {
LABEL_47:
        id v75 = +[NSURLSessionConfiguration defaultSessionConfiguration];
        if (v75)
        {
          int v82 = 0;
          goto LABEL_49;
        }
        id v36 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Error in creating URLSessionConfig", (uint8_t *)&buf, 2u);
        }
        goto LABEL_113;
      }
    }
    else
    {
      id v23 = sub_10030BB1C(v94[2], @"install-attribution-should-use-proxy", @"false");
      long long v24 = v23;
      if (!v23) {
        goto LABEL_47;
      }
      unsigned __int8 v25 = [v23 isEqualToString:@"true"];

      if ((v25 & 1) == 0) {
        goto LABEL_47;
      }
    }
    uint64_t v26 = v94[2];
    *(void *)&long long v99 = 0;
    long long v27 = sub_10030B9EC(v26, @"install-attribution-postback-proxy-url", &v99);
    id v28 = (id)v99;
    if (v27)
    {
      id v29 = [v27 host];
      id v30 = [v27 port];
      CFStringRef v125 = @"HTTPEnable";
      uint64_t v126 = @"HTTPSEnable";
      *(void *)&long long buf = &off_10054CDF8;
      *((void *)&buf + 1) = &off_10054CDF8;
      CFStringRef v127 = kCFStreamPropertyHTTPProxyPort;
      CFStringRef v128 = kCFStreamPropertyHTTPSProxyPort;
      v137 = v30;
      v138 = v30;
      long long v31 = +[NSDictionary dictionaryWithObjects:&buf forKeys:&v125 count:4];
      uint64_t v32 = v31;
      if (v29)
      {
        id v33 = [v31 mutableCopy];
        [v33 setObject:v29 forKeyedSubscript:kCFStreamPropertyHTTPProxyHost];
        [v33 setObject:v29 forKeyedSubscript:kCFStreamPropertyHTTPSProxyHost];
        id v34 = [v33 copy];

        uint64_t v32 = v34;
      }
      uint64_t v35 = +[NSURLSessionConfiguration ephemeralSessionConfiguration];
      [v35 setConnectionProxyDictionary:v32];
      [v35 set_preventsSystemHTTPProxyAuthentication:1];
      [v35 set_requiresSecureHTTPSProxyConnection:1];
      id v75 = v35;
    }
    else
    {
      id v29 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v28;
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Could not get install attribution postback proxy URL from the bag: %{public}@", (uint8_t *)&buf, 0xCu);
      }
      id v75 = 0;
    }

    if (v75)
    {
      int v82 = 1;
LABEL_49:
      [v75 set_suppressedAutoAddedHTTPHeaders:v74];
      uint64_t v38 = +[NSURLSession sessionWithConfiguration:v75 delegate:v94 delegateQueue:0];
      if (v38)
      {
        id v85 = v38;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        id obj = (id)v107[5];
        id v39 = [obj countByEnumeratingWithState:&v99 objects:&buf count:16];
        if (!v39) {
          goto LABEL_107;
        }
        uint64_t v95 = *(void *)v100;
        while (1)
        {
          id v96 = v39;
          for (i = 0; i != v96; i = (char *)i + 1)
          {
            if (*(void *)v100 != v95) {
              objc_enumerationMutation(obj);
            }
            uint64_t v41 = *(void *)(*((void *)&v99 + 1) + 8 * i);
            if (v41) {
              id v42 = *(void **)(v41 + 16);
            }
            else {
              id v42 = 0;
            }
            id v43 = v42;
            id v44 = [v43 longLongValue];

            uint64_t v97 = +[SkannerEvent resultTypeTransmission];
            if (v41 && *(unsigned char *)(v41 + 14))
            {
              uint64_t v45 = +[SkannerEvent destinationDeveloper];
            }
            else
            {
              uint64_t v45 = +[SkannerEvent destinationAdNetwork];
            }
            v46 = (void *)v45;
            v47 = +[SkannerEvent requestWithResult:v97 destination:v45 responseCode:0 postback:v41 error:0];
            if (!v41 || *(uint64_t *)(v41 + 120) < 1 || ((v93 | sub_10027C86C(v41)) & 1) != 0)
            {
              v48 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)block = 0;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Processing mature pingbacks", block, 2u);
              }

              if (v41) {
                uint64_t v49 = *(void **)(v41 + 16);
              }
              else {
                uint64_t v49 = 0;
              }
              id v50 = v49;
              id v51 = [v50 copy];

              if (v41) {
                v52 = *(void **)(v41 + 112);
              }
              else {
                v52 = 0;
              }
              id v53 = v52;
              v54 = +[NSURL URLWithString:v53];

              if (!v54
                || (!v41 ? (v55 = 0) : (v55 = *(void **)(v41 + 112)),
                    id v56 = v55,
                    BOOL v57 = [v56 length] == 0,
                    v56,
                    v57))
              {
                if (v41) {
                  v62 = *(void **)(v41 + 112);
                }
                else {
                  v62 = 0;
                }
                id v63 = v62;
                v58 = ASDErrorWithDescription();

                v64 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)block = 138543362;
                  *(void *)&block[4] = v58;
                  _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "Aborting sending postback since postback URL is invalid %{public}@", block, 0xCu);
                }

                sub_1003CD7FC((uint64_t)v94, (void *)v41);
                [v47 setError:v58];
                id v59 = +[SkannerCoordinator sharedInstance];
                [v59 logEvent:v47 forAdvertisedAppAdamID:v44];
                goto LABEL_98;
              }
              v58 = sub_10027C92C(v41);
              sub_10027CCF4(v41);
              id v98 = 0;
              v92 = +[NSJSONSerialization dataWithJSONObject:v58 options:1 error:&v98];
              id v59 = v98;
              if (v59)
              {
                v60 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)block = 138543618;
                  *(void *)&block[4] = v51;
                  *(_WORD *)&block[12] = 2114;
                  *(void *)&block[14] = v59;
                  _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "Install attribution pingback serialization for app: %{public}@ failed with error: %{public}@", block, 0x16u);
                }

                sub_1003CD7FC((uint64_t)v94, (void *)v41);
                [v47 setError:v59];
                id v61 = +[SkannerCoordinator sharedInstance];
                [v61 logEvent:v47 forAdvertisedAppAdamID:v44];
LABEL_97:

LABEL_98:
                goto LABEL_99;
              }
              id v61 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:v54 cachePolicy:1 timeoutInterval:60.0];
              [v61 setHTTPMethod:@"POST"];
              [v61 setHTTPBody:v92];
              [v61 setValue:@"App Store" forHTTPHeaderField:@"User-Agent"];
              [v61 setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
              v90 = sub_1003D000C(v54);
              if (v90)
              {
                v66 = sub_1003D000C(v54);
                [v61 setValue:v66 forHTTPHeaderField:@"Proxy-Authorization"];

                goto LABEL_93;
              }
              if (v82)
              {
                uint64_t v88 = ASDErrorWithDescription();
                log = ASDLogHandleForCategory();
                if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)block = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Proxy auth header generation failed. Skipping this postback.", block, 2u);
                }

                sub_1003CDA70((uint64_t)v94, (void *)v41);
                [v47 setError:v88];
                id v67 = +[SkannerCoordinator sharedInstance];
                [v67 logEvent:v47 forAdvertisedAppAdamID:v44];

                v68 = (void *)v88;
              }
              else
              {
LABEL_93:
                if (v41) {
                  uint64_t v69 = *(void *)(v41 + 120);
                }
                else {
                  uint64_t v69 = 0;
                }
                BOOL v89 = v69 + 1 >= v86;
                dispatch_group_enter(group);
                CFStringRef v125 = (const __CFString *)_NSConcreteStackBlock;
                uint64_t v126 = 3221225472;
                CFStringRef v127 = (CFStringRef)sub_1003D0460;
                CFStringRef v128 = (CFStringRef)&unk_10052C0B8;
                id v129 = v51;
                id v130 = v97;
                id v131 = v46;
                uint64_t v132 = v41;
                BOOL v135 = v89;
                v133 = v94;
                v134 = group;
                uint64_t v70 = [v85 dataTaskWithRequest:v61 completionHandler:&v125];
                [v70 resume];

                v68 = v129;
              }

              goto LABEL_97;
            }
            ASDErrorWithDescription();
            id v51 = (id)objc_claimAutoreleasedReturnValue();
            v65 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
            {
              id v71 = *(id *)(v41 + 16);
              *(_DWORD *)block = 138543618;
              *(void *)&block[4] = v71;
              *(_WORD *)&block[12] = 2112;
              *(void *)&block[14] = v51;
              _os_log_error_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "Last retry happened too recently, skipping pingback for app:%{public}@ error:%@", block, 0x16u);
            }
            [v47 setError:v51];
            v54 = +[SkannerCoordinator sharedInstance];
            [v54 logEvent:v47 forAdvertisedAppAdamID:v44];
LABEL_99:
          }
          id v39 = [obj countByEnumeratingWithState:&v99 objects:&buf count:16];
          if (!v39)
          {
LABEL_107:

            v72 = dispatch_get_global_queue(0, 0);
            *(void *)block = _NSConcreteStackBlock;
            *(void *)&block[8] = 3221225472;
            *(void *)&block[16] = sub_1003D0850;
            v123 = &unk_100521388;
            v124 = v80;
            dispatch_group_notify(group, v72, block);

            id v36 = v85;
            goto LABEL_113;
          }
        }
      }
      v73 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "Failed to initialize url session", (uint8_t *)&buf, 2u);
      }

      id v36 = v75;
      goto LABEL_113;
    }
    id v36 = ASDErrorWithDescription();
    uint64_t v37 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v36;
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Aborting sending postback since proxy URL could not be found in the bag %{public}@", (uint8_t *)&buf, 0xCu);
    }

LABEL_113:
    _Block_object_dispose(&v106, 8);

LABEL_114:
    _Block_object_dispose(&v115, 8);

LABEL_115:
  }

  if (!xpc_activity_set_state(v80, 4))
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      id v11 = "Could not set state of the install attribution pingback retry task activity to XPC_ACTIVITY_STATE_CONTINUE";
      uint64_t v12 = v5;
      uint32_t v13 = 2;
      goto LABEL_119;
    }
LABEL_120:
  }
}

void sub_1003CEE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a70, 8);
  _Unwind_Resume(a1);
}

void sub_1003CEF44(uint64_t a1, void *a2, void *a3)
{
  id v35 = a2;
  id v34 = a3;
  uint64_t v42 = a1;
  if (a1)
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending test postbacks", buf, 2u);
    }

    id v36 = objc_opt_new();
    *(void *)long long buf = 0;
    xpc_activity_t v80 = buf;
    uint64_t v81 = 0x3032000000;
    int v82 = sub_1000183E8;
    id v83 = sub_100017DB0;
    id v84 = 0;
    id v6 = *(void **)(a1 + 24);
    v76[0] = _NSConcreteStackBlock;
    v76[1] = 3221225472;
    v76[2] = sub_1003CFB00;
    v76[3] = &unk_100524E00;
    id v78 = buf;
    id v39 = v35;
    id v77 = v39;
    [v6 readUsingSession:v76];
    if (![*((id *)v80 + 5) count])
    {
      group = ASDErrorWithDescription();
      id v29 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "No test postbacks found.", v68, 2u);
      }

      [v36 setObject:@"failure" forKeyedSubscript:@"status"];
      [v36 setObject:group forKeyedSubscript:@"error"];
      if (v34) {
        v34[2]();
      }
      goto LABEL_50;
    }
    group = dispatch_group_create();
    id v33 = +[NSSet setWithObjects:@"Accept-Language", 0];
    id v7 = +[NSURLSessionConfiguration defaultSessionConfiguration];
    unsigned int v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "set_suppressedAutoAddedHTTPHeaders:", v33);
      uint64_t v37 = +[NSURLSession sessionWithConfiguration:v8 delegate:a1 delegateQueue:0];
      if (v37)
      {
        v74[0] = 0;
        v74[1] = v74;
        v74[2] = 0x2020000000;
        char v75 = 1;
        [v36 setObject:@"success" forKeyedSubscript:@"status"];
        *(void *)v68 = 0;
        uint64_t v69 = v68;
        uint64_t v70 = 0x3032000000;
        id v71 = sub_1000183E8;
        v72 = sub_100017DB0;
        id v73 = (id)objc_opt_new();
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        id obj = *((id *)v80 + 5);
        id v9 = [obj countByEnumeratingWithState:&v64 objects:v87 count:16];
        if (v9)
        {
          uint64_t v41 = *(void *)v65;
          do
          {
            id v43 = v9;
            for (i = 0; i != v43; i = (char *)i + 1)
            {
              if (*(void *)v65 != v41) {
                objc_enumerationMutation(obj);
              }
              id v11 = *(void **)(*((void *)&v64 + 1) + 8 * i);
              uint64_t v12 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)id v85 = 0;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Processing test postback", v85, 2u);
              }

              uint32_t v13 = objc_opt_new();
              if (v11) {
                int v14 = (void *)v11[6];
              }
              else {
                int v14 = 0;
              }
              id v15 = v14;
              [v13 setObject:v15 forKeyedSubscript:@"transaction-id"];

              if (v11) {
                __int16 v16 = (void *)v11[14];
              }
              else {
                __int16 v16 = 0;
              }
              id v17 = v16;
              __int16 v18 = +[NSURL URLWithString:v17];

              if (v18)
              {
                int v19 = sub_10027C92C((uint64_t)v11);
                id v63 = 0;
                unsigned int v20 = +[NSJSONSerialization dataWithJSONObject:v19 options:1 error:&v63];
                id v21 = v63;
                if (v21)
                {
                  id v22 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)id v85 = 138543618;
                    *(void *)&v85[4] = v39;
                    *(_WORD *)&v85[12] = 2114;
                    *(void *)&v85[14] = v21;
                    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "SKAN test postback serialization for app: %{public}@ failed with error: %{public}@", v85, 0x16u);
                  }

                  [v13 setObject:@"failure" forKeyedSubscript:@"status"];
                  [v13 setObject:v21 forKeyedSubscript:@"error"];
                  [*((id *)v69 + 5) addObject:v13];
                  sub_1003CD7FC(v42, v11);
                }
                else
                {
                  id v26 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:v18 cachePolicy:1 timeoutInterval:60.0];
                  [v26 setHTTPMethod:@"POST"];
                  [v26 setHTTPBody:v20];
                  [v26 setValue:@"App Store" forHTTPHeaderField:@"User-Agent"];
                  [v26 setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
                  *(void *)id v85 = 0;
                  *(void *)&v85[8] = v85;
                  *(void *)&v85[16] = 0x2020000000;
                  char v86 = 0;
                  dispatch_group_enter(group);
                  v49[0] = _NSConcreteStackBlock;
                  v49[1] = 3221225472;
                  v49[2] = sub_1003CFB58;
                  v49[3] = &unk_10052C068;
                  id v50 = v39;
                  id v51 = v13;
                  v52 = @"status";
                  id v53 = @"failure";
                  v54 = @"error";
                  v55 = @"raw-http-response";
                  uint64_t v56 = v42;
                  v60 = v68;
                  BOOL v57 = v11;
                  id v61 = v85;
                  v58 = group;
                  id v59 = @"success";
                  v62 = v74;
                  long long v27 = [v37 dataTaskWithRequest:v26 completionHandler:v49];
                  [v27 resume];

                  _Block_object_dispose(v85, 8);
                }
              }
              else
              {
                if (v11) {
                  id v23 = (void *)v11[14];
                }
                else {
                  id v23 = 0;
                }
                id v24 = v23;
                int v19 = ASDErrorWithDescription();

                unsigned __int8 v25 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)id v85 = 138543362;
                  *(void *)&v85[4] = v19;
                  _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Aborting sending test postback since URL is invalid %{public}@", v85, 0xCu);
                }

                [v13 setObject:@"failure" forKeyedSubscript:@"status"];
                [v13 setObject:v19 forKeyedSubscript:@"error"];
                [*((id *)v69 + 5) addObject:v13];
                sub_1003CD7FC(v42, v11);
              }
            }
            id v9 = [obj countByEnumeratingWithState:&v64 objects:v87 count:16];
          }
          while (v9);
        }

        id v28 = dispatch_get_global_queue(0, 0);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1003CFE9C;
        block[3] = &unk_10052C090;
        v47 = v34;
        id v45 = v36;
        v46 = @"responses";
        v48 = v68;
        dispatch_group_notify(group, v28, block);

        _Block_object_dispose(v68, 8);
        _Block_object_dispose(v74, 8);
        goto LABEL_49;
      }
      uint64_t v37 = ASDErrorWithDescription();
      uint64_t v32 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v68 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Error in creating URLSession for SKAN test", v68, 2u);
      }

      [v36 setObject:@"failure" forKeyedSubscript:@"status"];
      long long v31 = v34;
      [v36 setObject:v37 forKeyedSubscript:@"error"];
      if (!v34) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v37 = ASDErrorWithDescription();
      id v30 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v68 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Error in creating URLSessionConfig for SKAN test", v68, 2u);
      }

      [v36 setObject:@"failure" forKeyedSubscript:@"status"];
      long long v31 = v34;
      [v36 setObject:v37 forKeyedSubscript:@"error"];
      if (!v34) {
        goto LABEL_49;
      }
    }
    ((void (*)(void (**)(void), void *))v31[2])(v31, v36);
LABEL_49:

LABEL_50:
    _Block_object_dispose(buf, 8);
  }
}

void sub_1003CFA58(_Unwind_Exception *a1)
{
}

void sub_1003CFB00(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003E4E94(a2, *(void *)(a1 + 32), 1);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1003CFB58(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v19 = *(void **)(a1 + 32);
      int v20 = 138543618;
      id v21 = v19;
      __int16 v22 = 2114;
      id v23 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Test postback for app: %{public}@ failed with error: %{public}@", (uint8_t *)&v20, 0x16u);
    }

    [*(id *)(a1 + 40) setObject:*(void *)(a1 + 56) forKeyedSubscript:*(void *)(a1 + 48)];
    ASDErrorWithSafeUserInfo();
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:*(void *)(a1 + 64)];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (v8 && (isKindOfClass & 1) != 0) {
      [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:*(void *)(a1 + 72)];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) addObject:*(void *)(a1 + 40)];
    sub_1003CD7FC(*(void *)(a1 + 80), *(void **)(a1 + 88));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = 0;
    goto LABEL_8;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = v8;
    if (v11) {
      [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:*(void *)(a1 + 72)];
    }
    id v15 = [v11 statusCode];
    __int16 v16 = ASDLogHandleForCategory();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v15 != (id)200)
    {
      if (v17)
      {
        int v20 = 134349056;
        id v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Sending test postback failed with HTTP error code: %{public}ld", (uint8_t *)&v20, 0xCu);
      }

      __int16 v18 = +[NSError errorWithDomain:NSURLErrorDomain code:v15 userInfo:0];
      [*(id *)(a1 + 40) setObject:*(void *)(a1 + 56) forKeyedSubscript:*(void *)(a1 + 48)];
      [*(id *)(a1 + 40) setObject:v18 forKeyedSubscript:*(void *)(a1 + 64)];
      [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) addObject:*(void *)(a1 + 40)];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = 0;
      sub_1003CD7FC(*(void *)(a1 + 80), *(void **)(a1 + 88));
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));

      goto LABEL_9;
    }
    if (v17)
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Test postback sent successfully", (uint8_t *)&v20, 2u);
    }

    [*(id *)(a1 + 40) setObject:*(void *)(a1 + 104) forKeyedSubscript:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) addObject:*(void *)(a1 + 40)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = 1;
    sub_1003CD7FC(*(void *)(a1 + 80), *(void **)(a1 + 88));
LABEL_8:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
LABEL_9:
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 128) + 8);
  char v14 = *(unsigned char *)(v13 + 24);
  if (v14) {
    char v14 = *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) != 0;
  }
  *(unsigned char *)(v13 + 24) = v14;
}

uint64_t sub_1003CFE9C(uint64_t result)
{
  if (*(void *)(result + 48))
  {
    uint64_t v1 = result;
    [*(id *)(result + 32) setObject:*(void *)(*(void *)(*(void *)(result + 56) + 8) + 40) forKeyedSubscript:*(void *)(result + 40)];
    id v2 = *(uint64_t (**)(void))(*(void *)(v1 + 48) + 16);
    return v2();
  }
  return result;
}

void sub_1003CFF08(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003E5DA4(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1003CFF5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = +[NSDate date];
  uint64_t v4 = sub_1003E5FF4(v3, v8, *(void **)(a1 + 32));

  uint64_t v5 = +[NSMutableArray arrayWithArray:v4];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

id sub_1003D000C(void *a1)
{
  id v1 = a1;
  id v2 = ASDErrorWithDescription();
  id v3 = [v1 absoluteString];

  uint64_t v4 = +[NSDate date];
  [v4 timeIntervalSince1970];
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@;%@;%f",
    @"App Store",
    v3,
  uint64_t v6 = v5);

  id v7 = [v6 stringByRemovingPercentEncoding];

  if (v7)
  {
    id v8 = [v7 dataUsingEncoding:4];
    id v9 = v8;
    if (v8)
    {
      uint64_t v10 = [v8 base64EncodedStringWithOptions:0];
      if ([v10 length])
      {
        id v23 = v2;
        id v11 = sub_10030B11C();
        id v24 = 0;
        uint64_t v12 = +[AMSMescal signatureFromData:v9 type:1 bag:v11 error:&v24];
        uint64_t v13 = v24;

        if (v13)
        {
          char v14 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            id v26 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Problem with generating mescal signature %@", buf, 0xCu);
          }
          id v15 = 0;
        }
        else
        {
          char v14 = [v12 base64EncodedStringWithOptions:0];
          __int16 v16 = +[NSString stringWithFormat:@"%@:%@", v10, v14];
          BOOL v17 = [v16 dataUsingEncoding:4];
          id v15 = [v17 base64EncodedStringWithOptions:0];
        }
        id v2 = v23;
      }
      else
      {
        uint64_t v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v26 = v2;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to generate signature %@", buf, 0xCu);
        }
        id v15 = 0;
      }
    }
    else
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v26 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to generate signature %@", buf, 0xCu);
      }
      id v15 = 0;
    }
  }
  else
  {
    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v26 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to generate signature %@", buf, 0xCu);
    }
    id v15 = 0;
  }

  __int16 v18 = +[NSString stringWithFormat:@"Basic %@", v15];

  if (v18)
  {
    id v19 = v18;
  }
  else
  {
    int v20 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      __int16 v22 = [v1 absoluteString];
      *(_DWORD *)long long buf = 138543362;
      id v26 = v22;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to generate proxy header for URL:%{public}@", buf, 0xCu);
    }
  }

  return v18;
}

void sub_1003D0460(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t v42 = 138543618;
      *(void *)&v42[4] = v41;
      *(_WORD *)&v42[12] = 2114;
      *(void *)&v42[14] = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Install attribution pingback for app: %{public}@ failed with error: %{public}@", v42, 0x16u);
    }

    id v11 = +[SkannerEvent requestWithResult:*(void *)(a1 + 40) destination:*(void *)(a1 + 48) responseCode:0 postback:*(void *)(a1 + 56) error:v9];
    uint64_t v12 = +[SkannerCoordinator sharedInstance];
    uint64_t v13 = *(void **)(a1 + 56);
    if (v13) {
      uint64_t v13 = (void *)v13[2];
    }
    char v14 = v13;
    objc_msgSend(v12, "logEvent:forAdvertisedAppAdamID:", v11, objc_msgSend(v14, "longLongValue"));

    __int16 v16 = *(void **)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    if (!*(unsigned char *)(a1 + 80))
    {
      sub_1003CDA70(v15, v16);
LABEL_28:

      goto LABEL_29;
    }
    sub_1003CD7FC(v15, v16);

LABEL_23:
    uint64_t v32 = +[NSDate date];
    [v32 timeIntervalSince1970];
    double v34 = v33;
    id v35 = *(void **)(a1 + 56);
    if (v35) {
      id v35 = (void *)v35[13];
    }
    id v36 = v35;
    [v36 doubleValue];
    id v11 = +[NSNumber numberWithDouble:-(v37 - v34 * 1000.0)];

    sub_10027D148(*(void *)(a1 + 56), v9 == 0, v11);
    uint64_t v38 = *(void **)(a1 + 56);
    uint64_t v39 = *(void *)(a1 + 64);
    if (v38) {
      uint64_t v38 = (void *)v38[2];
    }
    uint64_t v40 = v38;
    sub_1003CB92C(v39, v40);

    goto LABEL_28;
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) == 0)
  {
    id v24 = ASDErrorWithDescription();
    unsigned __int8 v25 = +[SkannerEvent requestWithResult:*(void *)(a1 + 40) destination:*(void *)(a1 + 48) responseCode:0 postback:*(void *)(a1 + 56) error:v24];

    if (!v25) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  id v18 = [v8 statusCode];
  id v19 = ASDLogHandleForCategory();
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v18 == (id)200)
  {
    if (!v20) {
      goto LABEL_18;
    }
    *(_WORD *)uint64_t v42 = 0;
    id v21 = "Pingback sent successfully";
    __int16 v22 = v19;
    uint32_t v23 = 2;
  }
  else
  {
    if (!v20) {
      goto LABEL_18;
    }
    *(_DWORD *)uint64_t v42 = 134349056;
    *(void *)&v42[4] = v18;
    id v21 = "Sending pingback failed with HTTP error code: %{public}ld";
    __int16 v22 = v19;
    uint32_t v23 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, v42, v23);
LABEL_18:

  uint64_t v26 = *(void *)(a1 + 40);
  uint64_t v27 = *(void *)(a1 + 48);
  id v28 = +[NSNumber numberWithInteger:v18];
  unsigned __int8 v25 = +[SkannerEvent requestWithResult:v26 destination:v27 responseCode:v28 postback:*(void *)(a1 + 56) error:0];

  sub_1003CD7FC(*(void *)(a1 + 64), *(void **)(a1 + 56));
  if (!v25) {
    goto LABEL_22;
  }
LABEL_19:
  id v29 = +[SkannerCoordinator sharedInstance];
  id v30 = *(void **)(a1 + 56);
  if (v30) {
    id v30 = (void *)v30[2];
  }
  long long v31 = v30;
  objc_msgSend(v29, "logEvent:forAdvertisedAppAdamID:", v25, objc_msgSend(v31, "longLongValue"));

LABEL_22:
  if (isKindOfClass) {
    goto LABEL_23;
  }
LABEL_29:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_1003D0850(uint64_t a1)
{
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    id v1 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Could not set state of the install attribution pingback retry task activity to XPC_ACTIVITY_STATE_DONE", v2, 2u);
    }
  }
}

void sub_1003D08CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state != 2)
  {
    int v5 = state;
    if (!state)
    {
      uint64_t v6 = xpc_activity_copy_criteria(v3);
      if (!v6)
      {
        id v7 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting criteria for Install Attribution clean params task", buf, 2u);
        }

        xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 32));
        uint64_t v6 = 0;
      }
      goto LABEL_41;
    }
    uint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      uint64_t v15 = "Unknown state: %d when processing Install Attribution clean params task";
      __int16 v16 = v6;
      uint32_t v17 = 8;
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  id v8 = sub_1003C44E0(InstallAttributionManager);
  if (v8)
  {
    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Running Install Attribution clean params task", buf, 2u);
    }

    uint64_t v68 = 0;
    uint64_t v69 = &v68;
    uint64_t v70 = 0x2020000000;
    char v71 = 0;
    uint64_t v10 = (void *)v8[3];
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_1003D1140;
    v67[3] = &unk_10052C040;
    v67[4] = &v68;
    [v10 readUsingSession:v67];
    if (*((unsigned char *)v69 + 24))
    {
      uint64_t v11 = v8[2];
      id v66 = 0;
      uint64_t v12 = sub_10030BE3C(v11, @"install-attribution-max-impressions-age", &off_10054CDF8, &v66);
      id v13 = v66;
      v52 = v12;
      if (v12) {
        uint64_t v14 = (uint64_t)[v12 integerValue];
      }
      else {
        uint64_t v14 = 1;
      }
      uint64_t v18 = v8[2];
      id v65 = v13;
      id v59 = sub_10030BE3C(v18, @"install-attribution-max-web-impression-age-days", &off_10054CDF8, &v65);
      id v19 = v65;

      if (v59) {
        uint64_t v56 = (uint64_t)[v59 integerValue];
      }
      else {
        uint64_t v56 = 1;
      }
      uint64_t v20 = v8[2];
      id v64 = v19;
      v58 = sub_10030BE3C(v20, @"install-attribution-max-lo-fi-params-age", &off_10054CDF8, &v64);
      id v21 = v64;

      if (v58) {
        uint64_t v55 = (uint64_t)[v58 integerValue];
      }
      else {
        uint64_t v55 = 1;
      }
      uint64_t v22 = v8[2];
      id v63 = v21;
      BOOL v57 = sub_10030BE3C(v22, @"install-attribution-max-cache-age", &off_10054CE10, &v63);
      id v23 = v63;

      if (v57) {
        uint64_t v54 = (uint64_t)[v57 integerValue];
      }
      else {
        uint64_t v54 = 30;
      }
      uint64_t v24 = v8[2];
      id v62 = v23;
      unsigned __int8 v25 = sub_10030BE3C(v24, @"install-attribution-max-pingback-cache-age", &off_10054CE28, &v62);
      id v26 = v62;

      if (v25) {
        uint64_t v53 = (uint64_t)[v25 integerValue];
      }
      else {
        uint64_t v53 = 60;
      }
      uint64_t v27 = v8[2];
      id v61 = v26;
      id v28 = sub_10030BE3C(v27, @"skadnetwork-max-ghostback-age", &off_10054CE28, &v61);
      id v29 = v61;

      if (v28) {
        double v30 = (double)(-86400 * (uint64_t)[v28 integerValue]);
      }
      else {
        double v30 = -5184000.0;
      }
      uint64_t v31 = v8[2];
      id v60 = v29;
      uint64_t v32 = sub_10030BE3C(v31, @"skadnetwork-max-token-age", &off_10054CDF8, &v60);
      id v51 = v60;

      if (v32) {
        double v33 = (double)(-86400 * (uint64_t)[v32 integerValue]);
      }
      else {
        double v33 = -86400.0;
      }
      id v34 = +[NSDate dateWithTimeIntervalSinceNow:(double)(-86400 * v14)];
      id v35 = (void *)v8[3];
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472;
      v74 = sub_1003D122C;
      char v75 = &unk_10052BEC8;
      id v36 = v34;
      id v76 = v36;
      [v35 modifyUsingTransaction:buf];

      id v37 = +[NSDate dateWithTimeIntervalSinceNow:(double)(-86400 * v56)];
      uint64_t v38 = (void *)v8[3];
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472;
      v74 = sub_1003D12B8;
      char v75 = &unk_10052BEC8;
      id v39 = v37;
      id v76 = v39;
      [v38 modifyUsingTransaction:buf];

      uint64_t v40 = +[NSDate dateWithTimeIntervalSinceNow:(double)(-86400 * v55)];
      sub_1003D1174((uint64_t)v8, v40, 1);

      uint64_t v41 = +[NSDate dateWithTimeIntervalSinceNow:(double)(-86400 * v54)];
      sub_1003D1174((uint64_t)v8, v41, 0);

      id v42 = +[NSDate dateWithTimeIntervalSinceNow:(double)(-86400 * v53)];
      id v43 = (void *)v8[3];
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472;
      v74 = sub_1003D142C;
      char v75 = &unk_10052BEC8;
      id v44 = v42;
      id v76 = v44;
      [v43 modifyUsingTransaction:buf];

      id v45 = +[NSDate dateWithTimeIntervalSinceNow:v30];
      v46 = (void *)v8[3];
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472;
      v74 = sub_1003D1510;
      char v75 = &unk_10052BEC8;
      id v47 = v45;
      id v76 = v47;
      [v46 modifyUsingTransaction:buf];

      id v48 = +[NSDate dateWithTimeIntervalSinceNow:v33];
      uint64_t v49 = (void *)v8[3];
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472;
      v74 = sub_1003D1520;
      char v75 = &unk_10052BEC8;
      id v50 = v48;
      id v76 = v50;
      [v49 modifyUsingTransaction:buf];
    }
    else
    {
      xpc_activity_unregister((const char *)[@"com.apple.appstored.InstallAttributionManager.CleanDatabase" UTF8String]);
    }
    _Block_object_dispose(&v68, 8);
  }

  if (!xpc_activity_set_state(v3, 5))
  {
    uint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v15 = "Could not set state of the Install Attribution clean params task activity to XPC_ACTIVITY_STATE_DONE";
      __int16 v16 = v6;
      uint32_t v17 = 2;
      goto LABEL_40;
    }
LABEL_41:
  }
}

void sub_1003D10D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

BOOL sub_1003D110C(uint64_t a1, BOOL a2)
{
  BOOL result = sub_1003E35C4(a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL sub_1003D1140(uint64_t a1, BOOL a2)
{
  BOOL result = sub_1003E35C4(a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1003D1174(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003D1344;
  v8[3] = &unk_10052C0E0;
  id v7 = v5;
  id v9 = v7;
  char v10 = a3;
  [v6 modifyUsingTransaction:v8];
}

BOOL sub_1003D121C(uint64_t a1, void *a2)
{
  return sub_100349D50(a2, *(void *)(a1 + 32));
}

id sub_1003D122C(uint64_t a1, void *a2)
{
  id v2 = sub_100344728(a2, *(void **)(a1 + 32));
  if ((v2 & 1) == 0)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error removing install attribution impressions.", v5, 2u);
    }
  }
  return v2;
}

id sub_1003D12B8(uint64_t a1, void *a2)
{
  id v2 = sub_100344CB8(a2, *(void **)(a1 + 32));
  if ((v2 & 1) == 0)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error removing web impressions.", v5, 2u);
    }
  }
  return v2;
}

unint64_t sub_1003D1344(uint64_t a1, void *a2)
{
  unint64_t v2 = sub_100344E3C(a2, *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  id v3 = 0;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v7 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error removing install attribution params: %{public}@", buf, 0xCu);
    }
  }
  return v2;
}

unint64_t sub_1003D142C(uint64_t a1, void *a2)
{
  unint64_t v2 = sub_100346B44(a2, *(void **)(a1 + 32));
  id v3 = 0;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v7 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error removing install attribution pingbacks: %{public}@", buf, 0xCu);
    }
  }
  return v2;
}

unint64_t sub_1003D1510(uint64_t a1, void *a2)
{
  return sub_1003498C8(a2, *(void **)(a1 + 32));
}

id sub_1003D1520(uint64_t a1, void *a2)
{
  return sub_100349C80(a2, *(void **)(a1 + 32));
}

void sub_1003D1530(uint64_t a1, void *a2)
{
  id v13 = a2;
  id v3 = sub_1003E6D58(v13, *(void **)(a1 + 32));
  if (v3)
  {
    uint64_t v4 = +[SkannerEvent postbackTypePending];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  else
  {
    uint64_t v6 = sub_1003E5208(v13, *(void **)(a1 + 32));
    if (v6)
    {
      uint64_t v7 = +[SkannerEvent postbackTypeRealized];
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      uint64_t v10 = +[NSNumber numberWithInteger:v6[21]];
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
  }
}

void sub_1003D1620(uint64_t a1, id a2)
{
  id v3 = sub_1003E517C(a2, *(void **)(a1 + 32));
  id v4 = [v3 count];

  if (!v4)
  {
    id v5 = +[SkannerCoordinator sharedInstance];
    objc_msgSend(v5, "completeStoryForAdvertisedAppAdamID:", objc_msgSend(*(id *)(a1 + 32), "longLongValue"));
  }
}

void sub_1003D16C8(uint64_t a1, void *a2)
{
  id v3 = sub_1003E6D58(a2, *(void **)(a1 + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3 != 0;
}

id sub_1003D18F0(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"bundle_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003D1928(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"clip_ref_source");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003D1960(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"clip_ref_type");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003D1998(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E82C(a1, @"clip_third_party_with_no_app_referrer");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003D1A14(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 parameterForKey:AMSBuyParamPropertyAppExtVrsId];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v2 = v1;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v3 = 0;
        goto LABEL_8;
      }
      id v2 = [v1 stringValue];
    }
    id v3 = v2;
LABEL_8:

    goto LABEL_9;
  }
  id v3 = 0;
LABEL_9:
  return v3;
}

id sub_1003D1AC4(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 parameterForKey:a2];
    if (v2)
    {
      uint64_t v6 = 0;
      id v3 = +[NSScanner scannerWithString:v2];
      id v4 = 0;
      if ([v3 scanUnsignedLongLong:&v6])
      {
        id v4 = +[NSNumber numberWithUnsignedLongLong:v6];
      }
    }
    else
    {
      id v4 = 0;
    }
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_1003D1C04(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  self;
  if ([v9 count] != (id)1 && objc_msgSend(v9, "count") != (id)2)
  {
    if (a5)
    {
      [v9 count];
      ASDErrorWithUserInfoAndFormat();
      uint64_t v69 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v69 = 0;
    }
    goto LABEL_80;
  }
  uint64_t v88 = a5;
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v12 = [v10 account];
  id v13 = objc_msgSend(v12, "ams_DSID");
  [v11 setObject:v13 forKeyedSubscript:@"account_id"];

  uint64_t v14 = [v10 bundleURL];
  [v11 setObject:v14 forKeyedSubscript:@"bundle_url"];

  uint64_t v15 = [v10 clientInfo];
  __int16 v16 = [v15 bundleIdentifier];
  [v11 setObject:v16 forKeyedSubscript:@"client_id"];

  uint32_t v17 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v10 clientType]);
  [v11 setObject:v17 forKeyedSubscript:@"client_type"];

  uint64_t v18 = [v10 logCode];
  [v11 setObject:v18 forKeyedSubscript:@"log_code"];

  id v19 = [v10 externalID];
  [v11 setObject:v19 forKeyedSubscript:@"external_id"];

  uint64_t v20 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v10 priority]);
  [v11 setObject:v20 forKeyedSubscript:@"priority"];

  id v21 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v10 updateType]);
  [v11 setObject:v21 forKeyedSubscript:@"update_type"];

  uint64_t v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v10 suppressDialogs]);
  [v11 setObject:v22 forKeyedSubscript:@"supress_dialogs"];

  id v23 = [v10 qosMetricsFields];
  [v11 setObject:v23 forKeyedSubscript:@"metrics_fields"];

  [v11 setObject:&off_10054CE70 forKeyedSubscript:@"phase"];
  if ([v10 isArcade]) {
    [v11 setObject:&__kCFBooleanTrue forKeyedSubscript:@"arcade"];
  }
  uint64_t v24 = [v10 purchase];
  unsigned int v25 = [v24 isDefaultBrowser];

  if (v25)
  {
    id v26 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = [v10 logKey];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v92 = (uint64_t)v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[%@] Will configure as default browser upon successful installation", buf, 0xCu);
    }
    [v11 setObject:&__kCFBooleanTrue forKeyedSubscript:@"default_browser"];
  }
  uint64_t v28 = sub_1003D4A3C();
  double v30 = (id *)v28;
  if (v8)
  {
    uint64_t v32 = (double *)objc_getProperty(v8, v29, 328, 1);
    if (v32)
    {
      id v33 = objc_getProperty(v8, v31, 328, 1);
      sub_1003D4ECC((uint64_t)v30, v33);

      id v34 = +[NSNumber numberWithDouble:v32[2]];
      [v11 setObject:v34 forKeyedSubscript:@"optimal_download_start"];
    }
    if (v30) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v32 = 0;
    if (v28)
    {
LABEL_13:
      id v35 = [v30[1] copy];
      goto LABEL_14;
    }
  }
  id v35 = 0;
LABEL_14:
  [v11 setObject:v35 forKeyedSubscript:@"policy"];

  id v36 = [v10 coordinator];
  id v37 = [v36 uniqueIdentifier];
  [v11 setObject:v37 forKeyedSubscript:@"coordinator_id"];

  uint64_t v38 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v10 coordinatorIntent]);
  [v11 setObject:v38 forKeyedSubscript:@"coordinator_intent"];

  if ([v10 isRemoteInstall]) {
    [v11 setObject:&__kCFBooleanTrue forKeyedSubscript:@"remote_install"];
  }
  id v39 = sub_10026CA24();
  BOOL v40 = sub_10026D18C((uint64_t)v39);

  if (v40 && [v10 updateType] == (id)1) {
    uint64_t v41 = &__kCFBooleanFalse;
  }
  else {
    uint64_t v41 = &__kCFBooleanTrue;
  }
  [v11 setObject:v41 forKeyedSubscript:@"approved"];
  BOOL v89 = v32;
  id v42 = sub_100400EF8((uint64_t)MIStoreMetadata, v8);
  id v43 = [v10 account];
  if (v43) {
    sub_100401854(v42, v43);
  }
  sub_100401904(v42, v10);
  id v90 = 0;
  id v44 = sub_10040163C((uint64_t)v42, &v90);
  id v45 = v90;
  if (!v44)
  {
    uint64_t v67 = ASDErrorWithUnderlyingErrorAndDescription();

    id v45 = (id)v67;
    if (v8) {
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v68 = [v10 companionBundleID];
    [v11 setObject:v68 forKeyedSubscript:@"companion_bundle_id"];

    id Property = 0;
    goto LABEL_27;
  }
  [v11 setObject:v44 forKeyedSubscript:@"store_metadata"];
  if (!v8) {
    goto LABEL_42;
  }
LABEL_24:
  if ((*((unsigned char *)v8 + 14) & 1) == 0)
  {
    id v47 = [v10 companionBundleID];
    [v11 setObject:v47 forKeyedSubscript:@"companion_bundle_id"];
  }
  id Property = objc_getProperty(v8, v46, 200, 1);
LABEL_27:
  id v49 = Property;

  if (v49)
  {
    if (v8) {
      id v51 = objc_getProperty(v8, v50, 200, 1);
    }
    else {
      id v51 = 0;
    }
    id v52 = v51;
    [v11 setObject:v52 forKeyedSubscript:@"install_verification_token"];
  }
  uint64_t v53 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v10 autoInstallOverride]);
  [v11 setObject:v53 forKeyedSubscript:@"auto_install_override"];

  if ([v10 clientType] == (id)1)
  {
    if (v8)
    {
      id v55 = objc_getProperty(v8, v54, 72, 1);
      BOOL v57 = v55;
      if (v55) {
        id v55 = objc_getProperty(v55, v56, 144, 1);
      }
    }
    else
    {
      BOOL v57 = 0;
      id v55 = 0;
    }
    id v58 = v55;
    int v59 = sub_1002E7430(v58);

    if (v59)
    {
      id v60 = [v10 bundleID];
      id v61 = +[ApplicationProxy proxyForBundleID:v60];

      if (v61 && ([(__CFString *)v61 isInstalled] & 1) != 0) {
        id v62 = &off_10054CE88;
      }
      else {
        id v62 = &off_10054CEA0;
      }
      [v11 setObject:v62 forKeyedSubscript:@"metrics_install_type"];
      CFStringRef v66 = @"DIS";
      id v65 = v11;
      CFStringRef v64 = @"log_code";
      goto LABEL_53;
    }
    [v11 setObject:&off_10054CEB8 forKeyedSubscript:@"metrics_install_type"];
    CFStringRef v70 = @"VPP";
    char v71 = v11;
    CFStringRef v72 = @"log_code";
LABEL_58:
    [v71 setObject:v70 forKeyedSubscript:v72];
    goto LABEL_59;
  }
  id v63 = [v10 metricsType];

  if (!v63)
  {
    if (v8)
    {
      if (*((unsigned char *)v8 + 8))
      {
        CFStringRef v72 = @"metrics_install_type";
        CFStringRef v70 = (const __CFString *)&off_10054CED0;
        goto LABEL_57;
      }
      if (*((unsigned char *)v8 + 18) & 1) != 0 || (*((unsigned char *)v8 + 16))
      {
        CFStringRef v72 = @"metrics_install_type";
        CFStringRef v70 = (const __CFString *)&off_10054CEE8;
        goto LABEL_57;
      }
    }
    CFStringRef v72 = @"metrics_install_type";
    CFStringRef v70 = (const __CFString *)&off_10054CF00;
LABEL_57:
    char v71 = v11;
    goto LABEL_58;
  }
  id v61 = [v10 metricsType];
  CFStringRef v64 = @"metrics_install_type";
  id v65 = v11;
  CFStringRef v66 = v61;
LABEL_53:
  [v65 setObject:v66 forKeyedSubscript:v64];

LABEL_59:
  uint64_t v73 = [v10 recoveryCount];

  if (v73)
  {
    v74 = [v10 recoveryCount];
    [v11 setObject:v74 forKeyedSubscript:@"recovery_count"];
  }
  if (v45)
  {
    uint64_t v69 = 0;
    if (v88) {
      *uint64_t v88 = v45;
    }
  }
  else
  {
    uint64_t v69 = sub_100424068([AppInstall alloc], v8, v9);
    char v75 = [v10 refreshInstallID];

    if (v75)
    {
      id v76 = [v10 refreshInstallID];
      objc_msgSend(v69, "setDatabaseID:", objc_msgSend(v76, "longLongValue"));
    }
    if ([v10 expectedSoftwarePlatform])
    {
      id v77 = [v10 expectedSoftwarePlatform];
      if (v8) {
        id v78 = (id)*((void *)v8 + 36);
      }
      else {
        id v78 = 0;
      }
      if (v77 != v78)
      {
        v79 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          uint64_t v85 = [v10 logKey];
          char v86 = (void *)v85;
          if (v8) {
            uint64_t v87 = *((void *)v8 + 36);
          }
          else {
            uint64_t v87 = 0;
          }
          *(_DWORD *)long long buf = 138412546;
          uint64_t v92 = v85;
          __int16 v93 = 2048;
          uint64_t v94 = v87;
          _os_log_error_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "[%@] Dropping incorrectly generated receipt - unexpected product type '%ld'", buf, 0x16u);
        }
        [v69 setValue:0 forProperty:@"receipt"];
      }
    }
    else
    {
      xpc_activity_t v80 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
      {
        uint64_t v81 = [v10 logKey];
        int v82 = (void *)v81;
        if (v8) {
          uint64_t v83 = *((void *)v8 + 36);
        }
        else {
          uint64_t v83 = 0;
        }
        *(_DWORD *)long long buf = 138412546;
        uint64_t v92 = v81;
        __int16 v93 = 2048;
        uint64_t v94 = v83;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "[%@] Expected platform wasn't set, hope we have the right type of receipt for '%ld'!", buf, 0x16u);
      }
    }
    [v69 setValuesWithDictionary:v11];
  }

LABEL_80:
  return v69;
}

void sub_1003D277C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v5;

      id v4 = *(void **)(a1 + 8);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

id *sub_1003D2EE8(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v4 = a2;
  id v5 = sub_1003DA6D4();
  id v6 = v4;
  id v7 = v5;
  v15.receiver = a1;
  v15.super_class = (Class)UpdatesResponse;
  id v8 = (id *)objc_msgSendSuper2(&v15, "init");
  id v9 = v8;
  if (v8)
  {
    objc_storeStrong(v8 + 2, a2);
    objc_storeStrong(v9 + 1, v5);
    id v10 = [v6 objectForKeyedSubscript:@"rolloutDeferred"];

    if (v10)
    {
      uint64_t v11 = sub_100268048(v9[2], @"rolloutDeferred");
      id v12 = v9[3];
      v9[3] = (id)v11;
    }
  }

  id v13 = v9;
  return v13;
}

id *sub_1003D2FFC(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = sub_1002685DC(a1[2], @"storePlatformData.software-update-slimmed-lockup.results");
    id v3 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v2 count]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003D311C;
    v7[3] = &unk_10052C188;
    void v7[4] = v1;
    id v8 = objc_alloc_init((Class)ASDCoastGuard);
    id v9 = v3;
    id v4 = v3;
    id v5 = v8;
    [v2 enumerateKeysAndObjectsUsingBlock:v7];
    uint64_t v1 = (id *)[v4 copy];
  }
  return v1;
}

void sub_1003D311C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v138 = a2;
  if (!v5)
  {
    id v146 = 0;
    goto LABEL_109;
  }
  id v7 = objc_opt_new();
  v162[0] = @"artistName";
  v162[1] = @"bundleId";
  v162[2] = @"buyParams";
  v162[3] = @"currentVersionReleaseDateTime";
  v162[4] = @"kind";
  v162[5] = @"name";
  v162[6] = @"releaseDate";
  v162[7] = @"whatsNew";
  v162[8] = @"url";
  +[NSArray arrayWithObjects:v162 count:9];
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v9 = [v8 countByEnumeratingWithState:&v152 objects:v161 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v153;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v153 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v152 + 1) + 8 * i);
        uint64_t v14 = sub_1002689B4(v6, v13);
        [v7 setObject:v14 forKeyedSubscript:v13];
      }
      id v10 = [v8 countByEnumeratingWithState:&v152 objects:v161 count:16];
    }
    while (v10);
  }

  v160[0] = @"hasMessagesExtension";
  v160[1] = @"isFirstParty";
  v160[2] = @"isHiddenFromSpringboard";
  v160[3] = @"isIOSBinaryMacOSCompatible";
  v160[4] = @"requiresRosetta";
  v160[5] = @"runsOnIntel";
  v160[6] = @"runsOnAppleSilicon";
  +[NSArray arrayWithObjects:v160 count:7];
  long long v148 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v15 = [obj countByEnumeratingWithState:&v148 objects:v159 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v149;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v149 != v17) {
          objc_enumerationMutation(obj);
        }
        id v19 = *(void **)(*((void *)&v148 + 1) + 8 * (void)j);
        uint64_t v20 = sub_10026811C(v6, v19);
        [v7 setObject:v20 forKeyedSubscript:v19];
      }
      id v16 = [obj countByEnumeratingWithState:&v148 objects:v159 count:16];
    }
    while (v16);
  }

  uint64_t v21 = sub_1002689B4(v6, @"id");
  uint64_t v22 = (void *)v21;
  if (v21) {
    id v23 = (id)v21;
  }
  else {
    id v23 = v138;
  }
  [v7 setObject:v23 forKeyedSubscript:@"id"];

  uint64_t v24 = [v7 objectForKeyedSubscript:@"id"];
  if (v24)
  {
    unsigned int v25 = [v7 objectForKeyedSubscript:@"id"];
    id v26 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v25 longLongValue]);
  }
  else
  {
    id v26 = 0;
  }
  uint64_t v27 = v4;

  uint64_t v28 = [v7 objectForKeyedSubscript:@"bundleId"];
  CFStringRef v158 = 0;
  if (!v26)
  {
    id v29 = 0;
LABEL_26:
    if (v28) {
      id v29 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v28 allowPlaceholder:1 error:&v158];
    }
    goto LABEL_28;
  }
  id v29 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithStoreItemIdentifier:error:", objc_msgSend(v26, "unsignedLongLongValue"), &v158);
  if (!v29) {
    goto LABEL_26;
  }
LABEL_28:
  double v30 = [v29 appClipMetadata];

  if (v30)
  {
    [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"is_app_clip"];
    uint64_t v31 = [v29 bundleIdentifier];
    [v7 setObject:v31 forKeyedSubscript:@"bundleId"];
  }
  v139 = v29;
  if ([v29 isArcadeApp]) {
    [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"isArcade"];
  }
  if (!v28
    && ((+[AMSDevice deviceIsAppleTV] & 1) != 0
     || +[AMSDevice deviceIsAppleWatch]))
  {
    uint64_t v32 = [v29 bundleIdentifier];
    [v7 setObject:v32 forKeyedSubscript:@"bundleId"];
  }
  CFStringRef v127 = [v7 objectForKeyedSubscript:@"artistName"];
  CFStringRef v128 = (void *)v28;
  if (!v127 && v28)
  {
    id v33 = [v29 iTunesMetadata];
    id v34 = [v33 artistName];
    [v7 setObject:v34 forKeyedSubscript:@"artistName"];
  }
  if (!v30 && ([v29 isPlaceholder] & 1) == 0)
  {
    if ([v29 applicationHasMIDBasedSINF])
    {
      id v35 = [v29 iTunesMetadata];
      unsigned __int8 v36 = +[UpdatesManager isTVProviderApp:](UpdatesManager, "isTVProviderApp:", [v35 storeItemIdentifier]);

      if ((v36 & 1) == 0) {
        [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"is_per_device"];
      }
    }
  }
  id v37 = sub_10042889C(v29);
  unsigned int v38 = [v37 isB2BCustomApp];

  if (v38) {
    [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"is_b2b_custom_app"];
  }
  v137 = v26;
  if ([v29 isPlaceholder] && objc_msgSend(v29, "placeholderFailureReason") == (id)4) {
    [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"is_offloaded"];
  }
  id v39 = *(void **)(v5 + 8);
  uint64_t v126 = [v29 iTunesMetadata];
  CFStringRef v125 = [v126 variantID];
  BOOL v40 = sub_10025B598((uint64_t)VariantDescriptor, v125);
  v124 = [v29 iTunesMetadata];
  uint64_t v41 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v124 versionIdentifier]);
  id v133 = v39;
  id v42 = v6;
  id v136 = v40;
  id v135 = v41;
  self;
  sub_100267F88(v42, @"updateFileSizeInfo");
  id v43 = v137;
  uint64_t v44 = v27;
  v134 = id v45 = v42;
  id v130 = v8;
  uint64_t v131 = v44;
  id v132 = v6;
  if (v134)
  {
    id v46 = v134;
    id v47 = v136;
    id v142 = v135;
    self;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    sub_1003B63BC(v46);
    id v144 = (id)objc_claimAutoreleasedReturnValue();
    id v48 = [v144 countByEnumeratingWithState:&v168 objects:&v163 count:16];
    if (v48)
    {
      id v49 = v48;
      id v119 = v46;
      id v120 = v42;
      v122 = v7;
      uint64_t v50 = *(void *)v169;
      id v51 = @"variants";
      id v52 = &stru_10052C1E8;
      while (2)
      {
        uint64_t v53 = 0;
        id v140 = v49;
        do
        {
          if (*(void *)v169 != v50) {
            objc_enumerationMutation(v144);
          }
          uint64_t v54 = *(void **)(*((void *)&v168 + 1) + 8 * (void)v53);
          id v55 = sub_100267F88(v54, v51);
          uint64_t v56 = sub_1003B63BC(v55);
          BOOL v57 = sub_10041DF50(v56, v52);

          if ([v57 containsObject:v47])
          {
            id v58 = sub_100268568(v54, @"deltaSizeByExternalVersionId");
            [v142 stringValue];
            uint64_t v59 = v50;
            id v60 = v47;
            id v61 = v52;
            id v63 = v62 = v51;
            sub_10026811C(v58, v63);
            CFStringRef v64 = (__CFString *)objc_claimAutoreleasedReturnValue();

            id v51 = v62;
            id v52 = v61;
            id v47 = v60;
            uint64_t v50 = v59;
            id v49 = v140;

            if (v64)
            {

              goto LABEL_61;
            }
          }

          uint64_t v53 = (char *)v53 + 1;
        }
        while (v49 != v53);
        id v49 = [v144 countByEnumeratingWithState:&v168 objects:&v163 count:16];
        if (v49) {
          continue;
        }
        break;
      }
      CFStringRef v64 = 0;
LABEL_61:
      id v45 = v120;
      id v7 = v122;
      id v43 = v137;
      id v46 = v119;
    }
    else
    {
      CFStringRef v64 = 0;
    }

    id v6 = v132;
    if (v64) {
      goto LABEL_88;
    }
  }
  id v65 = sub_100267F88(v45, @"fileSizeInfo");
  if (v65)
  {
    id v121 = v45;
    v123 = v7;
    id v66 = v65;
    id v67 = v133;
    self;
    v141 = v66;
    id v143 = objc_alloc_init((Class)NSMutableDictionary);
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    sub_1003B63BC(v66);
    id v145 = (id)objc_claimAutoreleasedReturnValue();
    id v68 = [v145 countByEnumeratingWithState:&v168 objects:&v163 count:16];
    if (v68)
    {
      id v69 = v68;
      uint64_t v70 = *(void *)v169;
      do
      {
        for (k = 0; k != v69; k = (char *)k + 1)
        {
          if (*(void *)v169 != v70) {
            objc_enumerationMutation(v145);
          }
          CFStringRef v72 = *(void **)(*((void *)&v168 + 1) + 8 * (void)k);
          uint64_t v73 = sub_100267F88(v72, @"variants");
          v74 = sub_1003B63BC(v73);
          char v75 = sub_10041DF50(v74, &stru_10052C208);

          id v76 = sub_10025BAD8((uint64_t)VariantDescriptor, v67, v75);
          if (v76)
          {
            id v77 = sub_10026811C(v72, @"size");
            if (v77) {
              [v143 setObject:v77 forKeyedSubscript:v76];
            }
          }
        }
        id v69 = [v145 countByEnumeratingWithState:&v168 objects:&v163 count:16];
      }
      while (v69);
    }

    id v78 = [v143 allKeys];
    if (v78)
    {
      v79 = sub_10025BAD8((uint64_t)VariantDescriptor, v67, v78);
      id v45 = v121;
      if (v79)
      {
        CFStringRef v64 = [v143 objectForKeyedSubscript:v79];
      }
      else
      {
        CFStringRef v64 = 0;
      }
      id v6 = v132;
      id v43 = v137;
    }
    else
    {
      CFStringRef v64 = 0;
      id v6 = v132;
      id v43 = v137;
      id v45 = v121;
    }

    id v7 = v123;
    if (v64) {
      goto LABEL_88;
    }
  }
  xpc_activity_t v80 = sub_100268568(v45, @"fileSizeByDevice");
  if (!v80) {
    goto LABEL_89;
  }
  id v81 = v80;
  id v82 = v133;
  self;
  uint64_t v83 = [v82 productVariants];

  if (!v83) {
    goto LABEL_86;
  }
  CFStringRef v163 = (const __CFString *)_NSConcreteStackBlock;
  uint64_t v164 = 3221225472;
  v165 = sub_1003D439C;
  v166 = &unk_1005281F0;
  id v167 = v81;
  sub_1003922B8(v83, &v163);
  CFStringRef v64 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (!v64)
  {
LABEL_86:
    sub_10026811C(v81, @"universal");
    CFStringRef v64 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  if (v64)
  {
LABEL_88:
    *(void *)&long long v168 = @"universal";
    CFStringRef v163 = v64;
    id v84 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v163, &v168, 1, v119);
  }
  else
  {
LABEL_89:
    id v84 = &__NSDictionary0__struct;
  }

  [v7 setObject:v84 forKeyedSubscript:@"fileSizeByDevice"];
  uint64_t v85 = sub_100268568(v45, @"artwork");
  char v86 = sub_1003D420C(v85);
  [v7 setObject:v86 forKeyedSubscript:@"artwork"];

  uint64_t v87 = sub_100268568(v45, @"ovalArtwork");
  uint64_t v88 = sub_1003D420C(v87);
  [v7 setObject:v88 forKeyedSubscript:@"ovalArtwork"];

  BOOL v89 = sub_100267F88(v45, @"deviceFamilies");
  [v7 setObject:v89 forKeyedSubscript:@"deviceFamilies"];

  CFStringRef v163 = @"contentRatingsBySystem";
  uint64_t v164 = @"appsApple";
  v165 = (id (*)(uint64_t, void *))@"value";
  id v90 = +[NSArray arrayWithObjects:&v163 count:3];
  uint64_t v91 = sub_1003B6384(v90);
  uint64_t v92 = sub_10026824C(v45, v91);

  if (v92)
  {
    v157 = v92;
    CFStringRef v158 = @"appsApple";
    CFStringRef v156 = @"value";
    __int16 v93 = +[NSDictionary dictionaryWithObjects:&v157 forKeys:&v156 count:1];
    *(void *)&long long v168 = v93;
    uint64_t v94 = +[NSDictionary dictionaryWithObjects:&v168 forKeys:&v158 count:1];
    [v7 setObject:v94 forKeyedSubscript:@"contentRatingsBySystem"];
  }
  uint64_t v95 = v7;
  id v96 = sub_100267F88(v45, @"offers");
  uint64_t v97 = v96;
  if (v96)
  {
    id v98 = sub_1003921D4(v96, &stru_10052C1C8);
    long long v99 = v98;
    uint64_t v4 = v131;
    if (v98)
    {
      long long v100 = sub_100267F88(v98, @"assets");
      long long v101 = [v100 firstObject];
      objc_opt_class();
      id v102 = v101;
      if (objc_opt_isKindOfClass()) {
        id v103 = v102;
      }
      else {
        id v103 = 0;
      }

      uint64_t v106 = sub_10026811C(v103, @"size");
      [v95 setObject:v106 forKeyedSubscript:ASDLookupPropertyFileSize];

      v107 = sub_1002689B4(v99, @"buyParams");
      if (!v107)
      {
        v107 = sub_1002689B4(v99, @"action-params");
      }
      objc_msgSend(v95, "setObject:forKeyedSubscript:", v107, ASDLookupPropertyBuyParams, v119);
      uint64_t v108 = sub_100268568(v99, @"version");
      v109 = v108;
      if (v108)
      {
        v110 = sub_1002689B4(v108, @"display");
        [v95 setObject:v110 forKeyedSubscript:ASDLookupPropertyDisplayVersion];

        id v111 = sub_10026811C(v109, @"externalId");
        [v95 setObject:v111 forKeyedSubscript:ASDLookupPropertyExternalVersionIdentifier];
      }
    }
  }
  else
  {
    long long v99 = sub_10026811C(v45, @"versionId");
    uint64_t v4 = v131;
    if (!v99)
    {
      id v104 = sub_1002689B4(v45, @"versionId");
      v105 = v104;
      if (v104)
      {
        long long v99 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v104 longLongValue]);
      }
      else
      {
        long long v99 = 0;
      }
    }
    objc_msgSend(v95, "setObject:forKeyedSubscript:", v99, ASDLookupPropertyExternalVersionIdentifier, v119);
  }

  id v146 = [v95 copy];
LABEL_109:

  uint64_t v112 = v146;
  if (v146)
  {
    id v113 = [[AppUpdateMemoryEntity alloc] initWithUpdateDictionary:v146];
    v114 = v113;
    if (v113)
    {
      uint64_t v115 = *(void **)(v4 + 40);
      v116 = [(AppUpdateMemoryEntity *)v113 itemID];
      id v117 = [v116 unsignedLongLongValue];
      v118 = [(AppUpdateMemoryEntity *)v114 evid];
      LOBYTE(v115) = objc_msgSend(v115, "isUnrepairableAppWithItemID:externalVersionID:", v117, objc_msgSend(v118, "unsignedLongLongValue"));

      if ((v115 & 1) == 0) {
        [*(id *)(v4 + 48) addObject:v114];
      }
    }

    uint64_t v112 = v146;
  }
}

id sub_1003D420C(void *a1)
{
  id v1 = a1;
  id v2 = sub_1002689B4(v1, @"url");
  id v3 = sub_10026811C(v1, @"height");
  uint64_t v4 = sub_10026811C(v1, @"width");

  uint64_t v5 = 0;
  if ([v2 length] && v3 && v4)
  {
    v7[0] = @"url";
    v7[1] = @"height";
    v8[0] = v2;
    v8[1] = v3;
    v7[2] = @"width";
    v8[2] = v4;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:3];
  }

  return v5;
}

BOOL sub_1003D4338(id a1, NSObject *a2)
{
  id v2 = sub_1002A8228(a2);
  id v3 = sub_1002689B4(v2, @"type");
  unsigned __int8 v4 = [v3 isEqualToString:@"update"];

  return v4;
}

id sub_1003D439C(uint64_t a1, void *a2)
{
  return sub_10026811C(*(void **)(a1 + 32), a2);
}

NSFastEnumeration *__cdecl sub_1003D43A4(id a1, NSDictionary *a2)
{
  return (NSFastEnumeration *)sub_10025B19C((uint64_t)VariantDescriptor, a2, 1);
}

NSFastEnumeration *__cdecl sub_1003D43B4(id a1, NSDictionary *a2)
{
  return (NSFastEnumeration *)sub_10025B19C((uint64_t)VariantDescriptor, a2, 1);
}

AppInstallPolicy *sub_1003D4A3C()
{
  self;
  v0 = objc_alloc_init(AppInstallPolicy);
  sub_1003D4A94((uint64_t)v0, 1);
  sub_1003D4B04((uint64_t)v0, 62);
  return v0;
}

void sub_1003D4A94(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithBool:a2];
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"ntwk"];
  }
}

void sub_1003D4B04(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithUnsignedInteger:a2];
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"imsk"];
  }
}

void *sub_1003D4BC0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)AppInstallPolicy;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 mutableCopy];
      uint64_t v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

id *sub_1003D4C34(id *result)
{
  if (result)
  {
    id v1 = [result[1] objectForKeyedSubscript:@"conr"];
    id v2 = [v1 integerValue];

    return (id *)v2;
  }
  return result;
}

void sub_1003D4C80(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithInteger:a2];
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"conr"];
  }
}

id *sub_1003D4CF0(id *result)
{
  if (result)
  {
    id v1 = [result[1] objectForKeyedSubscript:@"cell"];
    id v2 = [v1 integerValue];

    return (id *)v2;
  }
  return result;
}

void sub_1003D4D3C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithInteger:a2];
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"cell"];
  }
}

id *sub_1003D4DAC(id *result)
{
  if (result)
  {
    id v1 = [result[1] objectForKeyedSubscript:@"imsk"];
    id v2 = [v1 unsignedIntegerValue];

    return (id *)v2;
  }
  return result;
}

double *sub_1003D4DF8(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 8) objectForKeyedSubscript:@"odts"];
    uint64_t v3 = [*(id *)(a1 + 8) objectForKeyedSubscript:@"odte"];
    id v4 = (void *)v3;
    if (v2) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      id v10 = 0;
    }
    else
    {
      id v6 = [TimeWindow alloc];
      [v2 doubleValue];
      double v8 = v7;
      [v4 doubleValue];
      id v10 = sub_1003DA24C((double *)v6, v8, v9);
    }
  }
  else
  {
    id v10 = 0;
  }
  return v10;
}

void sub_1003D4ECC(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (a1)
  {
    double v7 = v3;
    if (v3)
    {
      BOOL v5 = +[NSNumber numberWithDouble:v3[2]];
      [*(id *)(a1 + 8) setObject:v5 forKeyedSubscript:@"odts"];

      id v6 = +[NSNumber numberWithDouble:v7[1]];
      [*(id *)(a1 + 8) setObject:v6 forKeyedSubscript:@"odte"];
    }
    else
    {
      [*(id *)(a1 + 8) setObject:0 forKeyedSubscript:@"odts"];
      [*(id *)(a1 + 8) setObject:0 forKeyedSubscript:@"odte"];
    }
    id v4 = v7;
  }
}

id *sub_1003D4FB0(id *result)
{
  if (result)
  {
    id v1 = [result[1] objectForKeyedSubscript:@"devs"];
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }
  return result;
}

void sub_1003D4FFC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithBool:a2];
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"devs"];
  }
}

id *sub_1003D506C(id *result)
{
  if (result)
  {
    id v1 = [result[1] objectForKeyedSubscript:@"migr"];
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }
  return result;
}

id *sub_1003D50B8(id *result)
{
  if (result)
  {
    id v1 = [result[1] objectForKeyedSubscript:@"ntwk"];
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }
  return result;
}

id *sub_1003D5104(id *result)
{
  if (result)
  {
    id v1 = [result[1] objectForKeyedSubscript:@"powr"];
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }
  return result;
}

void sub_1003D5150(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithBool:a2];
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"powr"];
  }
}

id *sub_1003D51C0(id *result)
{
  if (result)
  {
    id v1 = [result[1] objectForKeyedSubscript:@"term"];
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }
  return result;
}

void sub_1003D520C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithBool:a2];
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"term"];
  }
}

uint64_t sub_1003D5334(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 isExpensive]
    && (BOOL v5 = sub_1003D4CF0(v4), (unint64_t)v5 <= 4)
    && ((1 << (char)v5) & 0x15) != 0
    || [v3 isConstrained]
    && (id v6 = sub_1003D4C34(v4), (unint64_t)v6 <= 4)
    && ((1 << (char)v6) & 0x15) != 0)
  {
LABEL_7:
    uint64_t v7 = 1;
  }
  else
  {
    double v8 = (char *)[v3 interfaceType];
    double v9 = sub_1003D4DAC(v4);
    if (v9)
    {
      switch((unint64_t)v8)
      {
        case 0uLL:
          if ((v9 & 8) != 0) {
            break;
          }
          goto LABEL_7;
        case 1uLL:
          if ((v9 & 0x10) != 0) {
            break;
          }
          goto LABEL_7;
        case 2uLL:
          if ((v9 & 2) != 0) {
            break;
          }
          goto LABEL_7;
        case 3uLL:
          if ((v9 & 0x20) != 0) {
            break;
          }
          goto LABEL_7;
        case 4uLL:
          if ((v9 & 4) != 0) {
            break;
          }
          goto LABEL_7;
        default:
          id v10 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
          {
            if ((unint64_t)(v8 - 2) >= 3) {
              id v12 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"unknown (%ld)", v8);
            }
            else {
              id v12 = off_10052C228[(void)(v8 - 2)];
            }
            *(_DWORD *)long long buf = 138543362;
            uint64_t v14 = v12;
            _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Returning no match, encountered new interface type: %{public}@", buf, 0xCu);
          }
          goto LABEL_7;
      }
    }
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t sub_1003D5530(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  self;
  if (v8 && [v8 length])
  {
    id v11 = v8;
    id v12 = v9;
    id v13 = v10;
    uint64_t v14 = self;
    id v15 = [v12 receiptURL];
    id v39 = v15;
    BOOL v40 = v12;
    if (v15)
    {
      id v46 = 0;
      int v16 = sub_1003D58D4(v14, v11, v15, v13, &v46);
      id v17 = v46;
      if (v16)
      {
        id v35 = v10;
        id v36 = v9;
        id v37 = a5;
        id v38 = v8;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        uint64_t v18 = [v12 extensionReceiptURLs];
        id v19 = [v18 countByEnumeratingWithState:&v42 objects:buf count:16];
        if (v19)
        {
          id v20 = v19;
          uint64_t v21 = *(void *)v43;
          while (2)
          {
            uint64_t v22 = 0;
            id v23 = v17;
            do
            {
              if (*(void *)v43 != v21) {
                objc_enumerationMutation(v18);
              }
              uint64_t v24 = *(void **)(*((void *)&v42 + 1) + 8 * (void)v22);
              id v41 = v23;
              int v25 = sub_1003D58D4(v14, v11, v24, v13, &v41);
              id v17 = v41;

              if (!v25)
              {

                a5 = v37;
                id v8 = v38;
                id v10 = v35;
                id v9 = v36;
                goto LABEL_20;
              }
              uint64_t v22 = (char *)v22 + 1;
              id v23 = v17;
            }
            while (v20 != v22);
            id v20 = [v18 countByEnumeratingWithState:&v42 objects:buf count:16];
            if (v20) {
              continue;
            }
            break;
          }
        }

        id v26 = 0;
        uint64_t v27 = 1;
        a5 = v37;
        id v8 = v38;
        id v10 = v35;
        id v9 = v36;
LABEL_21:

        id v30 = v26;
        if (!a5) {
          goto LABEL_24;
        }
        goto LABEL_22;
      }
    }
    else
    {
      id v31 = v10;
      uint64_t v32 = [v12 bundleID];
      id v33 = +[NSString stringWithFormat:@"Invalid container for application: %@", v32];

      ASDErrorWithDescription();
      id v17 = (id)objc_claimAutoreleasedReturnValue();

      id v10 = v31;
    }
LABEL_20:

    id v26 = v17;
    uint64_t v27 = 0;
    id v17 = v26;
    goto LABEL_21;
  }
  uint64_t v28 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412546;
    id v48 = v10;
    __int16 v49 = 2048;
    id v50 = [v8 length];
    _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "[%@] Writing receipt failed - invalid or missing data (%{iec-bytes}lu)", buf, 0x16u);
  }

  id v29 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Invalid or missing receipt data (%lu bytes)", [v8 length]);
  ASDErrorWithDescription();
  id v30 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v27 = 0;
  if (a5)
  {
LABEL_22:
    if ((v27 & 1) == 0) {
      *a5 = v30;
    }
  }
LABEL_24:

  return v27;
}

uint64_t sub_1003D58D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  self;
  id v10 = +[NSFileManager defaultManager];
  v35[0] = NSFileOwnerAccountName;
  v35[1] = NSFileGroupOwnerAccountName;
  v36[0] = @"mobile";
  v36[1] = @"mobile";
  id v11 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:2];
  id v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    id v28 = v9;
    __int16 v29 = 2048;
    id v30 = [v7 length];
    __int16 v31 = 2114;
    id v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Writing receipt (%{iec-bytes}ld) to %{public}@", buf, 0x20u);
  }

  id v13 = [v8 URLByDeletingLastPathComponent];
  id v26 = 0;
  unsigned int v14 = [v10 createDirectoryAtURL:v13 withIntermediateDirectories:1 attributes:v11 error:&v26];
  id v15 = v26;
  int v16 = v15;
  if (!v14
    || (id v25 = v15,
        uint64_t v17 = 1,
        unsigned __int8 v18 = [v7 writeToURL:v8 options:1 error:&v25],
        id v19 = v25,
        v16,
        int v16 = v19,
        (v18 & 1) == 0))
  {
    id v20 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      id v23 = [v7 length];
      *(_DWORD *)long long buf = 138413058;
      id v28 = v9;
      __int16 v29 = 2048;
      id v30 = v23;
      __int16 v31 = 2114;
      id v32 = v8;
      __int16 v33 = 2114;
      id v34 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[%@] Error writing receipt (%{iec-bytes}ld) to %{public}@: %{public}@", buf, 0x2Au);
    }

    uint64_t v17 = (uint64_t)a5;
    if (a5)
    {
      uint64_t v21 = +[NSString stringWithFormat:@"Failed to write receipt to URL: %@", v8];
      ASDErrorWithUnderlyingErrorAndDescription();
      *a5 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v17 = 0;
    }
  }

  return v17;
}

sqlite3_stmt **sub_1003D5BB4(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    id v4 = a1;
    if (sqlite3_column_type(a1[6], a2) == 5)
    {
      a1 = 0;
    }
    else
    {
      BOOL v5 = sqlite3_column_blob(v4[6], a2);
      a1 = +[NSData dataWithBytes:v5 length:sqlite3_column_bytes(v4[6], a2)];
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_1003D5C44(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_1003D5BB4((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

sqlite3_stmt **sub_1003D5CB4(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    int v4 = a1;
    int v5 = sqlite3_column_type(a1[6], a2);
    if (v5 == 1)
    {
      a1 = +[NSNumber numberWithLongLong:sqlite3_column_int64(v4[6], a2)];
    }
    else if (v5 == 2)
    {
      a1 = +[NSNumber numberWithDouble:sqlite3_column_double(v4[6], a2)];
    }
    else
    {
      a1 = 0;
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_1003D5D5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_1003D5CB4((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

sqlite3_stmt **sub_1003D5DCC(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    int v4 = a1;
    if (sqlite3_column_type(a1[6], a2) == 5)
    {
      a1 = 0;
    }
    else
    {
      a1 = (sqlite3_stmt **)sqlite3_column_text(v4[6], a2);
      if (a1)
      {
        a1 = +[NSString stringWithUTF8String:a1];
      }
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_1003D5E40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_1003D5DCC((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

void *sub_1003D5EB0(void *a1)
{
  if (a1)
  {
    a1 = sub_1003D5EE4(a1, 0);
    uint64_t v1 = vars8;
  }
  return a1;
}

void *sub_1003D5EE4(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = a1[4];
    if (!v4)
    {
      uint64_t v5 = +[NSDictionary sharedKeySetForKeys:a1[5]];
      id v6 = (void *)a1[4];
      a1[4] = v5;

      uint64_t v4 = a1[4];
    }
    id v7 = +[NSMutableDictionary dictionaryWithSharedKeySet:v4];
    id v8 = (void *)a1[5];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003D6000;
    v11[3] = &unk_10052C248;
    id v12 = v3;
    id v13 = v7;
    unsigned int v14 = a1;
    id v9 = v7;
    [v8 enumerateObjectsUsingBlock:v11];
    a1 = [v9 copy];
  }
  return a1;
}

void sub_1003D6000(uint64_t a1, void *a2, unsigned int a3)
{
  id v7 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  if (!v5 || [v5 containsObject:v7])
  {
    id v6 = sub_1003D6084(*(void **)(a1 + 48), a3);
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v7];
  }
}

id sub_1003D6084(void *a1, unsigned int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3 || (a2 & 0x80000000) != 0)
  {
    if (!v3)
    {
LABEL_13:
      uint64_t v8 = sub_1003D5BB4(v4, a2);
LABEL_14:
      id v7 = (id)v8;
      goto LABEL_15;
    }
LABEL_9:
    id v7 = 0;
    switch(sqlite3_column_type(v3[6], a2))
    {
      case 1:
        uint64_t v8 = +[NSNumber numberWithLongLong:sqlite3_column_int64(v4[6], a2)];
        goto LABEL_14;
      case 2:
        uint64_t v8 = +[NSNumber numberWithDouble:sqlite3_column_double(v4[6], a2)];
        goto LABEL_14;
      case 3:
        goto LABEL_11;
      case 5:
        goto LABEL_15;
      default:
        goto LABEL_13;
    }
    goto LABEL_15;
  }
  if (*((_DWORD *)v3 + 2) <= (signed int)a2) {
    goto LABEL_9;
  }
  switch(*((unsigned char *)v3[2] + a2))
  {
    case 0:
      goto LABEL_9;
    case 1:
      int v5 = sqlite3_column_type(v3[6], a2);
      if (v5 == 1)
      {
        double v6 = (double)sqlite3_column_int64(v4[6], a2);
      }
      else
      {
        if (v5 != 2)
        {
LABEL_18:
          id v7 = 0;
          break;
        }
        double v6 = sqlite3_column_double(v4[6], a2);
      }
      uint64_t v8 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v6];
      goto LABEL_14;
    case 2:
      id v10 = sub_1003D5BB4(v3, a2);
      if (v10)
      {
        id v17 = 0;
        id v11 = +[NSJSONSerialization JSONObjectWithData:v10 options:0 error:&v17];
        id v12 = v17;
        if (v11) {
          goto LABEL_33;
        }
        id v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int v16 = [(sqlite3_stmt *)v4[5] objectAtIndexedSubscript:a2];
          *(_DWORD *)long long buf = 138543618;
          id v19 = v16;
          __int16 v20 = 2114;
          id v21 = v12;
        }
      }
      else
      {
        id v12 = 0;
      }
      id v11 = 0;
LABEL_33:
      id v7 = v11;

      break;
    case 3:
      unsigned int v14 = sub_1003D5DCC(v3, a2);
      if (!v14) {
        goto LABEL_29;
      }
      id v15 = [objc_alloc((Class)NSUUID) initWithUUIDString:v14];
      goto LABEL_28;
    case 4:
      unsigned int v14 = sub_1003D5DCC(v3, a2);
      if (v14)
      {
        id v15 = +[NSURL URLWithString:v14];
LABEL_28:
        id v7 = v15;
      }
      else
      {
LABEL_29:
        id v7 = 0;
      }

      break;
    case 5:
LABEL_11:
      uint64_t v8 = sub_1003D5DCC(v4, a2);
      goto LABEL_14;
    default:
      goto LABEL_18;
  }
LABEL_15:

  return v7;
}

void sub_1003D63EC(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B11D8;
  qword_1005B11D8 = (uint64_t)v1;
}

void sub_1003D64D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    int v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003D657C;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1003D657C(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      double v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v6);
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v8 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1, (void)v9);
        [v7 deliverNotifications:v8 withBarrierBlock:&stru_10052C268];

        double v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_1003D66C0(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    id v4 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003D6764;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_async(v4, v6);
  }
}

void sub_1003D6764(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      double v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v6);
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v8 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1, (void)v9);
        [v7 deliverProgress:v8 withBarrierBlock:&stru_10052C288];

        double v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_1003D68A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003D6950;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1003D6950(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 24);
  if (v2) {
    id Property = objc_getProperty(*(id *)(a1 + 40), a2, 16, 1);
  }
  else {
    id Property = 0;
  }
  id v5 = Property;
  [v3 setObject:v2 forKeyedSubscript:v5];
}

void sub_1003D69C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003D6A6C;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

id sub_1003D6A6C(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) removeObjectIdenticalTo:*(void *)(a1 + 40)];
}

id sub_1003D6CF0()
{
  self;
  v2[0] = @"bundle_id";
  v2[1] = @"event_type";
  v2[2] = @"event_subtype";
  v2[3] = @"metrics_type";
  v2[4] = @"timestamp";
  v2[5] = @"payload";
  v2[6] = @"has_been_posted";
  v0 = +[NSArray arrayWithObjects:v2 count:7];
  return v0;
}

id *sub_1003D6DB8(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)UpdatesBatchTask;
    a1 = (id *)objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      uint64_t v8 = [v7 logKey];
      id v9 = a1[6];
      a1[6] = (id)v8;

      id v10 = objc_alloc_init((Class)NSMutableArray);
      id v11 = a1[8];
      a1[8] = v10;

      objc_storeStrong(a1 + 5, a2);
      uint64_t v12 = [v7 requestToken];
      id v13 = a1[7];
      a1[7] = (id)v12;

      *((unsigned char *)a1 + 72) = [v7 userInitiated];
    }
  }

  return a1;
}

void sub_1003D7700(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_1002DB844((id *)[UpdatesTask alloc], v5, v6, *(unsigned char *)(*(void *)(a1 + 32) + 72));

  if (v7) {
    objc_setProperty_nonatomic_copy(v7, v8, *(id *)(*(void *)(a1 + 32) + 48), 64);
  }
  id v9 = *(void **)(a1 + 32);
  id v70 = 0;
  unsigned int v10 = [v9 runSubTask:v7 returningError:&v70];
  id v11 = (__CFString *)v70;
  if (v10)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    if (v7) {
      id v13 = v7[9];
    }
    else {
      id v13 = 0;
    }
    unsigned int v14 = v13;
    id v15 = v5;
    if (v12)
    {
      self = v14;
      id v66 = v11;
      CFStringRef v64 = v7;
      int v16 = sub_1003D2FFC((id *)&v14->isa);
      if (*(unsigned char *)(v12 + 72)) {
        id v17 = &stru_10052E4D8;
      }
      else {
        id v17 = @"background ";
      }
      unsigned __int8 v18 = v17;
      id v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(v12 + 48);
        id v21 = [v16 count];
        uint64_t v22 = objc_msgSend(v15, "ams_DSID");
        *(_DWORD *)long long buf = 138413058;
        uint64_t v86 = v20;
        __int16 v87 = 2048;
        id v88 = v21;
        __int16 v89 = 2114;
        id v90 = v18;
        __int16 v91 = 2114;
        uint64_t v92 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%@] ╒ Received %lu %{public}@server update(s) for account: %{public}@", buf, 0x2Au);
      }
      id v62 = v18;
      id v63 = v15;
      uint64_t v69 = v12;

      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      id v23 = v16;
      id v24 = [v23 countByEnumeratingWithState:&v71 objects:v79 count:16];
      if (v24)
      {
        id v25 = v24;
        uint64_t v26 = *(void *)v72;
        do
        {
          uint64_t v27 = v23;
          for (i = 0; i != v25; i = (char *)i + 1)
          {
            if (*(void *)v72 != v26) {
              objc_enumerationMutation(v27);
            }
            __int16 v29 = *(void **)(*((void *)&v71 + 1) + 8 * i);
            id v30 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v31 = *(void *)(v69 + 48);
              *(_DWORD *)long long buf = 138412546;
              uint64_t v86 = v31;
              __int16 v87 = 2114;
              id v88 = v29;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[%@] ├ UPD %{public}@", buf, 0x16u);
            }
          }
          id v23 = v27;
          id v25 = [v27 countByEnumeratingWithState:&v71 objects:v79 count:16];
        }
        while (v25);
      }

      unsigned int v14 = self;
      if (self) {
        id Property = objc_getProperty(self, v32, 24, 1);
      }
      else {
        id Property = 0;
      }
      id v34 = Property;

      id v11 = v66;
      uint64_t v36 = v69;
      if (v34)
      {
        id v60 = v23;
        id v61 = v5;
        if (self) {
          id v37 = objc_getProperty(self, v35, 24, 1);
        }
        else {
          id v37 = 0;
        }
        id v38 = v37;
        id v67 = objc_opt_new();
        long long v75 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        id obj = v38;
        id v39 = [obj countByEnumeratingWithState:&v75 objects:buf count:16];
        if (v39)
        {
          id v40 = v39;
          uint64_t v41 = *(void *)v76;
          do
          {
            for (j = 0; j != v40; j = (char *)j + 1)
            {
              if (*(void *)v76 != v41) {
                objc_enumerationMutation(obj);
              }
              long long v43 = *(void **)(*((void *)&v75 + 1) + 8 * (void)j);
              if ((objc_opt_respondsToSelector() & 1) != 0 && (uint64_t)[v43 longLongValue] >= 1)
              {
                long long v45 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v43 longLongValue]);
                id v46 = +[ApplicationProxy proxyForItemID:v45];

                if (v46)
                {
                  id v47 = objc_opt_new();
                  id v48 = [v46 bundleID];
                  [v47 setObject:v48 forKeyedSubscript:@"bundleID"];

                  [v47 setObject:v43 forKeyedSubscript:@"itemID"];
                  [v67 addObject:v47];
                  __int16 v49 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v50 = *(void *)(v69 + 48);
                    id v51 = [v46 bundleID];
                    id v52 = [v46 storeItemID];
                    *(_DWORD *)xpc_activity_t v80 = 138412802;
                    *(void *)&v80[4] = v50;
                    *(_WORD *)&v80[12] = 2114;
                    *(void *)&v80[14] = v51;
                    *(_WORD *)&v80[22] = 2048;
                    id v81 = v52;
                    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "[%@] ├ DEF { bundleID: %{public}@ itemID: %lld }", v80, 0x20u);
                  }
                }
                else
                {
                  CFStringRef v83 = @"itemID";
                  id v84 = v43;
                  uint64_t v53 = +[NSDictionary dictionaryWithObjects:&v84 forKeys:&v83 count:1];
                  [v67 addObject:v53];

                  id v47 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v54 = *(void *)(v69 + 48);
                    *(_DWORD *)xpc_activity_t v80 = 138412546;
                    *(void *)&v80[4] = v54;
                    *(_WORD *)&v80[12] = 2114;
                    *(void *)&v80[14] = v43;
                    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[%@] Found deferred update but not proxy for itemID: %{public}@", v80, 0x16u);
                  }
                }
              }
            }
            id v40 = [obj countByEnumeratingWithState:&v75 objects:buf count:16];
          }
          while (v40);
        }

        uint64_t v36 = v69;
        if ([v67 count])
        {
          id v55 = sub_10023217C((uint64_t)DiagnosticPublisher, *(void **)(v69 + 56));
          *(void *)xpc_activity_t v80 = _NSConcreteStackBlock;
          *(void *)&v80[8] = 3221225472;
          *(void *)&v80[16] = sub_1003D81BC;
          id v81 = &unk_100521760;
          id v82 = v67;
          sub_10023220C((uint64_t)v55, 1101, v80);
        }
        id v23 = v60;
        id v5 = v61;
        unsigned int v14 = self;
        id v11 = v66;
      }
      uint64_t v56 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v57 = *(void *)(v36 + 48);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v86 = v57;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "[%@] ╘ ", buf, 0xCu);
      }

      id v7 = v64;
      if (v23) {
        [*(id *)(v36 + 64) addObjectsFromArray:v23];
      }

      id v15 = v63;
    }
  }
  else
  {
    unsigned int v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v58 = *(void *)(*(void *)(a1 + 32) + 48);
      uint64_t v59 = objc_msgSend(v5, "ams_DSID");
      *(_DWORD *)long long buf = 138412802;
      uint64_t v86 = v58;
      __int16 v87 = 2114;
      id v88 = v59;
      __int16 v89 = 2114;
      id v90 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@] Failed to fetch updates for account: %{public}@ error: %{public}@", buf, 0x20u);
    }
  }
}

void sub_1003D7F34(uint64_t a1, void *a2)
{
  id v3 = [a2 itemID];
  if (v3)
  {
    id v4 = v3;
    [*(id *)(a1 + 32) addObject:v3];
    id v3 = v4;
  }
}

NSCopying *__cdecl sub_1003D7F94(id a1, UpdatableApp *a2)
{
  uint64_t v2 = [(UpdatableApp *)a2 storefrontID];
  if (sub_1002F35F4(v2)) {
    id v3 = v2;
  }
  else {
    id v3 = &off_10054CF18;
  }
  id v4 = v3;

  return v4;
}

void sub_1003D7FE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (([a2 isEqualToNumber:&off_10054CF18] & 1) == 0)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          uint64_t v12 = objc_msgSend(v11, "downloaderDSID", (void)v16);
          if (sub_1002F35F4(v12))
          {
            id v13 = objc_msgSend(*(id *)(a1 + 32), "ams_iTunesAccountWithDSID:", v12);
          }
          else
          {
            id v13 = 0;
          }
          unsigned int v14 = [v11 purchaserDSID];
          id v15 = v14;
          if (v13)
          {

LABEL_20:
            goto LABEL_21;
          }
          if (sub_1002F35F4(v14))
          {
            id v13 = objc_msgSend(*(id *)(a1 + 32), "ams_iTunesAccountWithDSID:", v15);

            if (v13) {
              goto LABEL_20;
            }
          }
          else
          {
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
  }
  id v13 = objc_msgSend(*(id *)(a1 + 32), "ams_activeiTunesAccount", (void)v16);
LABEL_21:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void *sub_1003D81BC(void *result, uint64_t a2)
{
  if (a2) {
    return [*(id *)(a2 + 8) setObject:result[4] forKeyedSubscript:@"deferredUpdates"];
  }
  return result;
}

id *sub_1003D8250(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)SQLiteDatabaseStoreMigrator;
    id v8 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      id v9 = [v7 copy];
      id v10 = a1[2];
      a1[2] = v9;

      *((unsigned char *)a1 + 24) = 1;
    }
  }

  return a1;
}

void sub_1003D82F4(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      id v12 = 0;
      char v10 = sub_100012004(v9, v7, &v12, v8);
      id v11 = v12;
      if ((v10 & 1) == 0 && a3) {
        *(unsigned char *)(a1 + 24) = 0;
      }
    }
    else
    {
      id v11 = 0;
    }
  }
}

void sub_1003D8394(uint64_t a1, void *a2)
{
  if (a1) {
    sub_1003D82F4(a1, a2, 1, 0);
  }
}

void sub_1003D83A8(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a1 && *(unsigned char *)(a1 + 24))
  {
    uint64_t v10 = *(void *)(a1 + 8);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003D847C;
    v11[3] = &unk_10052C3A0;
    char v13 = a3;
    void v11[4] = a1;
    id v12 = v8;
    sub_100009834(v10, v7, v11);
  }
}

uint64_t sub_1003D847C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && *(unsigned char *)(a1 + 48)) {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id *sub_1003D8AC0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v26 = a3;
  self;
  id v5 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v4 count]);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = v4;
  id v6 = [obj countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v29;
    *(void *)&long long v7 = 138543362;
    long long v25 = v7;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v29 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v28 + 1) + 8 * (void)v10);
        id v12 = sub_1002B17C4((id *)v11);
        if (v12)
        {
          if (v11) {
            char v13 = *(void **)(v11 + 104);
          }
          else {
            char v13 = 0;
          }
          id v14 = v13;

          if (v14)
          {
            id v15 = objc_alloc((Class)ASDEnterpriseAppMetadata);
            if (v11) {
              long long v16 = *(void **)(v11 + 104);
            }
            else {
              long long v16 = 0;
            }
            id v17 = v16;
            long long v18 = +[NSURL URLWithString:v17];
            long long v19 = [v15 initWithManifestURL:v18];

            if (v11) {
              BOOL v20 = *(unsigned char *)(v11 + 206) != 0;
            }
            else {
              BOOL v20 = 0;
            }
            -[NSObject setHideUserPrompts:](v19, "setHideUserPrompts:", v20, v25);
          }
          else
          {
            id v21 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = v25;
              id v33 = v26;
              _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[%{public}@] Dropping requested enterprise manifest with missing URL", buf, 0xCu);
            }

            long long v19 = +[NSNull null];
          }
          objc_msgSend(v5, "setObject:forKeyedSubscript:", v19, v12, v25);
        }
        else
        {
          long long v19 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v25;
            id v33 = v26;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%{public}@] Dropping requested enterprise manifest with missing externalID", buf, 0xCu);
          }
        }

        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v22 = [obj countByEnumeratingWithState:&v28 objects:v34 count:16];
      id v8 = v22;
    }
    while (v22);
  }

  id v23 = sub_1003D8DF0((id *)[InstallEnterpriseAppsTask alloc], v5, 1, v26);
  return v23;
}

id *sub_1003D8DF0(id *a1, void *a2, char a3, void *a4)
{
  id v8 = a2;
  id v9 = a4;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)InstallEnterpriseAppsTask;
    uint64_t v10 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v10;
    if (v10)
    {
      objc_storeStrong(v10 + 5, a2);
      *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x220], 8) = a3;
      objc_storeStrong(a1 + 7, a4);
    }
  }

  return a1;
}

id *sub_1003D8EB0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  id v6 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v4 count]);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        char v13 = +[NSUUID UUID];
        [v6 setObject:v12 forKeyedSubscript:v13];
      }
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v9);
  }

  id v14 = sub_1003D8DF0((id *)[InstallEnterpriseAppsTask alloc], v6, 0, v5);
  return v14;
}

id sub_1003D9050(id *a1)
{
  if (a1)
  {
    [a1 lock];
    id v2 = [a1[8] copy];
    [a1 unlock];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003D923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003D9254(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [v6 manifestURL];
    id v8 = [v7 scheme];
    unsigned int v9 = [v8 isEqualToString:@"itms-services"];

    if (v9)
    {
      uint64_t v10 = sub_100288C18((uint64_t)v7);
      uint64_t v11 = [v10 objectForKeyedSubscript:@"action"];
      unsigned __int8 v12 = [v11 isEqualToString:@"download-manifest"];

      if ((v12 & 1) == 0)
      {
        long long v28 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v44 = *(void *)(*(void *)(a1 + 40) + 56);
          *(_DWORD *)long long buf = 138543618;
          uint64_t v50 = v44;
          __int16 v51 = 2114;
          id v52 = v7;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "[%{public}@] Ignoring, unsupported action for enterprise request: %{public}@", buf, 0x16u);
        }

        long long v29 = +[NSString stringWithFormat:@"Ignoring, unsupported action for enterprise request: %@", v7];
        uint64_t v30 = ASDErrorWithDescription();
        uint64_t v31 = *(void *)(*(void *)(a1 + 48) + 8);
        id v32 = *(void **)(v31 + 40);
        *(void *)(v31 + 40) = v30;

        char v13 = v10;
        goto LABEL_36;
      }
      char v13 = [v10 objectForKeyedSubscript:@"url"];
      if (v13)
      {
        uint64_t v14 = +[NSURL URLWithString:v13];

        if (v14)
        {
          uint64_t v15 = [v10 objectForKeyedSubscript:@"digest"];

          char v13 = (void *)v15;
          id v7 = (void *)v14;
          goto LABEL_10;
        }
        uint64_t v41 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          uint64_t v47 = *(void *)(*(void *)(a1 + 40) + 56);
          *(_DWORD *)long long buf = 138543618;
          uint64_t v50 = v47;
          __int16 v51 = 2114;
          id v52 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "[%{public}@] Ignoring, invalid URL for enterprise request: %{public}@", buf, 0x16u);
        }

        id v7 = +[NSString stringWithFormat:@"Ignoring, invalid URL for enterprise request: %@", 0];
        uint64_t v42 = ASDErrorWithDescription();
        uint64_t v43 = *(void *)(*(void *)(a1 + 48) + 8);
        id v37 = *(void **)(v43 + 40);
        *(void *)(v43 + 40) = v42;
      }
      else
      {
        uint64_t v36 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          uint64_t v46 = *(void *)(*(void *)(a1 + 40) + 56);
          *(_DWORD *)long long buf = 138543618;
          uint64_t v50 = v46;
          __int16 v51 = 2114;
          id v52 = v7;
          _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "[%{public}@] Ignoring, missing URL for enterprise request: %{public}@", buf, 0x16u);
        }

        id v37 = +[NSString stringWithFormat:@"Ignoring, missing URL for enterprise request: %@", v7];
        uint64_t v38 = ASDErrorWithDescription();
        uint64_t v39 = *(void *)(*(void *)(a1 + 48) + 8);
        id v40 = *(void **)(v39 + 40);
        *(void *)(v39 + 40) = v38;
      }
      id v7 = v10;
      goto LABEL_36;
    }
    if (!v7)
    {
      id v33 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 56);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v50 = v45;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "[%{public}@] Ignoring, invalid enterprise request with missing URL", buf, 0xCu);
      }

      id v7 = +[NSString stringWithFormat:@"Ignoring, invalid enterprise request with missing URL"];
      uint64_t v34 = ASDErrorWithDescription();
      uint64_t v35 = *(void *)(*(void *)(a1 + 48) + 8);
      char v13 = *(void **)(v35 + 40);
      *(void *)(v35 + 40) = v34;
      goto LABEL_36;
    }
    char v13 = 0;
LABEL_10:
    long long v16 = sub_100243810((char *)[UPPManifestDownloadTask alloc], v7);
    long long v18 = v16;
    if (v16) {
      objc_setProperty_atomic(v16, v17, *(id *)(*(void *)(a1 + 40) + 56), 106);
    }
    id Property = *(id *)(*(void *)(a1 + 40) + 56);
    if (Property) {
      id Property = objc_getProperty(Property, v17, 32, 1);
    }
    id v20 = Property;
    id v22 = v20;
    if (v18)
    {
      objc_setProperty_atomic(v18, v21, v20, 90);

      v18[74] = [v6 hideUserPrompts];
      objc_setProperty_atomic(v18, v23, v13, 98);
    }
    else
    {

      [v6 hideUserPrompts];
    }
    sub_1002B2A3C();
    id v24 = (id *)objc_claimAutoreleasedReturnValue();
    id v48 = v18;
    long long v25 = +[NSArray arrayWithObjects:&v48 count:1];
    if (v24) {
      [v24[1] addOperations:v25 waitUntilFinished:1];
    }

    if (v18)
    {
      if (v18[24])
      {
LABEL_22:
        [*(id *)(a1 + 32) addObject:v5];

LABEL_36:
        goto LABEL_37;
      }
      id v27 = objc_getProperty(v18, v26, 32, 1);
    }
    else
    {
      id v27 = 0;
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v27);
    goto LABEL_22;
  }
  [*(id *)(a1 + 32) addObject:v5];
LABEL_37:
}

void *sub_1003D98D8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v34.receiver = a1;
    v34.super_class = (Class)AppLedgerEvent;
    a1 = objc_msgSendSuper2(&v34, "init");
    if (a1)
    {
      uint64_t v7 = sub_1002C1EE8(v5);
      id v8 = (void *)a1[7];
      a1[7] = v7;

      uint64_t v9 = sub_1002C1FCC(v5);
      uint64_t v10 = (void *)a1[1];
      a1[1] = v9;

      uint64_t v11 = sub_10026E95C(v5, @"client_id");
      if (v11)
      {
        uint64_t v12 = sub_10026E95C(v5, @"client_id");
        char v13 = (void *)a1[8];
        a1[8] = v12;
      }
      else
      {
        char v13 = (void *)a1[8];
        a1[8] = &stru_10052E4D8;
      }

      uint64_t v14 = sub_10026E82C(v5, @"item_id");
      uint64_t v15 = (void *)a1[6];
      a1[6] = v14;

      uint64_t v16 = sub_10026E95C(v5, @"bundle_version");
      long long v17 = (void *)a1[2];
      a1[2] = v16;

      uint64_t v18 = sub_10026E82C(v5, @"evid");
      long long v19 = (void *)a1[3];
      a1[3] = v18;

      id v20 = sub_10026E91C(v6, @"package_type");
      if (sub_1002C1E88(v5))
      {
        uint64_t v21 = 2;
      }
      else
      {
        if (v20 != (id)1)
        {
          a1[9] = 0;
LABEL_12:
          id v22 = [v5 valueForProperty:@"install_finished_timestamp"];
          objc_opt_class();
          id v23 = v22;
          if (objc_opt_isKindOfClass()) {
            id v24 = v23;
          }
          else {
            id v24 = 0;
          }

          if (v24)
          {
            id v25 = v23;
          }
          else
          {
            id v25 = +[NSDate now];
          }
          id v26 = (void *)a1[4];
          a1[4] = v25;

          id v27 = sub_10026E95C(v5, @"log_code");
          unsigned int v28 = sub_1002C1E88(v5);
          id v29 = v27;
          if ([v29 isEqualToString:@"CLP"])
          {
            uint64_t v30 = 10;
LABEL_24:

            a1[5] = v30;
            goto LABEL_25;
          }
          if (([v29 isEqualToString:@"BUY"] & 1) != 0
            || ([v29 isEqualToString:@"LGY"] & 1) != 0
            || ([v29 isEqualToString:@"ABY"] & 1) != 0)
          {
            uint64_t v30 = 11;
            goto LABEL_24;
          }
          if ([v29 isEqualToString:@"BYQ"])
          {
            uint64_t v30 = 15;
            goto LABEL_24;
          }
          if (![v29 isEqualToString:@"DIS"])
          {
            if ([v29 isEqualToString:@"PTV"])
            {
              BOOL v32 = v28 == 0;
              uint64_t v33 = 40;
              goto LABEL_34;
            }
            if (([v29 isEqualToString:@"VPP"] & 1) == 0
              && ![v29 isEqualToString:@"VPF"])
            {
              if ([v29 isEqualToString:@"RSD"])
              {
                uint64_t v30 = 17;
              }
              else if (([v29 isEqualToString:@"RSP"] & 1) != 0 {
                     || ([v29 isEqualToString:@"RSR"] & 1) != 0)
              }
              {
                uint64_t v30 = 14;
              }
              else if ([v29 isEqualToString:@"RTV"])
              {
                uint64_t v30 = 50;
              }
              else if ([v29 isEqualToString:@"SYS"])
              {
                uint64_t v30 = 70;
              }
              else if ([v29 isEqualToString:@"APR"])
              {
                uint64_t v30 = 1;
              }
              else if (([v29 isEqualToString:@"TFA"] & 1) != 0 {
                     || ([v29 isEqualToString:@"TFU"] & 1) != 0)
              }
              {
                uint64_t v30 = 20;
              }
              else if ([v29 isEqualToString:@"TFB"])
              {
                uint64_t v30 = 22;
              }
              else if (([v29 isEqualToString:@"UPD"] & 1) != 0 {
                     || ([v29 isEqualToString:@"UPB"] & 1) != 0
              }
                     || ([v29 isEqualToString:@"AUB"] & 1) != 0)
              {
                uint64_t v30 = 18;
              }
              else if (([v29 isEqualToString:@"UPA"] & 1) != 0 {
                     || ([v29 isEqualToString:@"AUA"] & 1) != 0)
              }
              {
                uint64_t v30 = 19;
              }
              else if ([v29 isEqualToString:@"WRD"])
              {
                uint64_t v30 = 60;
              }
              else
              {
                uint64_t v30 = 0;
              }
              goto LABEL_24;
            }
          }
          BOOL v32 = v28 == 0;
          uint64_t v33 = 30;
LABEL_34:
          if (v32) {
            uint64_t v30 = v33;
          }
          else {
            uint64_t v30 = v33 + 1;
          }
          goto LABEL_24;
        }
        uint64_t v21 = 1;
      }
      a1[9] = v21;
      goto LABEL_12;
    }
  }
LABEL_25:

  return a1;
}

void *sub_1003D9D90(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)AppLedgerEvent;
    id v7 = objc_msgSendSuper2(&v21, "init");
    a1 = v7;
    if (v7)
    {
      objc_storeStrong((id *)v7 + 7, a3);
      uint64_t v8 = [v5 bundleIdentifier];
      uint64_t v9 = (void *)a1[1];
      a1[1] = v8;

      uint64_t v10 = [v5 iTunesMetadata];
      uint64_t v11 = (void *)a1[8];
      a1[8] = @"com.apple.AppStore";

      uint64_t v12 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v10 storeItemIdentifier]);
      char v13 = (void *)a1[6];
      a1[6] = v12;

      uint64_t v14 = [v5 bundleVersion];
      uint64_t v15 = (void *)a1[2];
      a1[2] = v14;

      uint64_t v16 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v10 versionIdentifier]);
      long long v17 = (void *)a1[3];
      a1[3] = v16;

      a1[9] = 0;
      uint64_t v18 = +[NSDate now];
      long long v19 = (void *)a1[4];
      a1[4] = v18;

      a1[5] = 80;
    }
  }

  return a1;
}

void *sub_1003D9EF0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)AppLedgerEvent;
    id v7 = objc_msgSendSuper2(&v23, "init");
    a1 = v7;
    if (v7)
    {
      objc_storeStrong((id *)v7 + 7, a3);
      uint64_t v8 = [v5 bundleIdentifier];
      uint64_t v9 = (void *)a1[1];
      a1[1] = v8;

      uint64_t v10 = [v5 iTunesMetadata];
      uint64_t v11 = [v5 iTunesMetadata];
      uint64_t v12 = [v11 sourceApp];
      char v13 = (void *)a1[8];
      a1[8] = v12;

      uint64_t v14 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v10 storeItemIdentifier]);
      uint64_t v15 = (void *)a1[6];
      a1[6] = v14;

      uint64_t v16 = [v5 bundleVersion];
      long long v17 = (void *)a1[2];
      a1[2] = v16;

      uint64_t v18 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v10 versionIdentifier]);
      long long v19 = (void *)a1[3];
      a1[3] = v18;

      a1[9] = 0;
      uint64_t v20 = +[NSDate now];
      objc_super v21 = (void *)a1[4];
      a1[4] = v20;

      a1[5] = 90;
    }
  }

  return a1;
}

id sub_1003DA0E4(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = [a1 dataContainerURL];
    id v3 = [v2 URLByAppendingPathComponent:@"StoreKit" isDirectory:1];

    if (v3)
    {
      if ([v1 isProfileValidated]) {
        CFStringRef v4 = @"sandboxReceipt";
      }
      else {
        CFStringRef v4 = @"receipt";
      }
      id v1 = [v3 URLByAppendingPathComponent:v4 isDirectory:0];
    }
    else
    {
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v7 = [v1 bundleIdentifier];
        int v8 = 138543362;
        uint64_t v9 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "(LSBundleRecord) Couldn't create receiptURL, no dataContainerURL was returned: %{public}@", (uint8_t *)&v8, 0xCu);
      }
      id v1 = 0;
    }
  }
  return v1;
}

double *sub_1003DA24C(double *result, double a2, double a3)
{
  if (result)
  {
    v5.receiver = result;
    v5.super_class = (Class)TimeWindow;
    BOOL result = (double *)objc_msgSendSuper2(&v5, "init");
    if (result)
    {
      result[1] = a3;
      result[2] = a2;
    }
  }
  return result;
}

uint64_t sub_1003DA2A4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = +[NSDate date];
    [v2 timeIntervalSinceReferenceDate];
    double v4 = v3;

    if (*(double *)(v1 + 16) <= v4)
    {
      if (*(double *)(v1 + 8) >= v4) {
        return 1;
      }
      else {
        return 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_1003DA6D4()
{
  self;
  if (qword_1005B11E8 != -1) {
    dispatch_once(&qword_1005B11E8, &stru_10052C480);
  }
  v0 = (void *)qword_1005B11F0;
  return v0;
}

void sub_1003DA72C(id a1)
{
  uint64_t v1 = [Device alloc];
  if (v1)
  {
    v14.receiver = v1;
    v14.super_class = (Class)Device;
    id v2 = objc_msgSendSuper2(&v14, "init");
    if (v2)
    {
      if (sub_1003A4D28())
      {
        double v3 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "HRN mode is enabled", buf, 2u);
        }
      }
      uint64_t v4 = +[AMSDevice productVersion];
      objc_super v5 = (void *)v2[3];
      v2[3] = v4;

      self;
      *(_OWORD *)long long buf = 0u;
      memset(v18, 0, sizeof(v18));
      size_t v16 = 37;
      if (sysctlbyname("kern.bootsessionuuid", buf, &v16, 0, 0) < 0)
      {
        int v8 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v15 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "failed to get kern.bootsessionuuid", v15, 2u);
        }
        id v9 = 0;
      }
      else
      {
        id v6 = objc_alloc((Class)NSUUID);
        id v7 = objc_alloc((Class)NSString);
        int v8 = [v7 initWithBytesNoCopy:buf length:v16 - 1 encoding:4 freeWhenDone:0];
        id v9 = [v6 initWithUUIDString:v8];
      }

      uint64_t v10 = (void *)v2[4];
      v2[4] = v9;

      uint64_t v11 = MGCopyAnswer();
      uint64_t v12 = (void *)v2[2];
      v2[2] = v11;
    }
  }
  else
  {
    id v2 = 0;
  }
  char v13 = (void *)qword_1005B11F0;
  qword_1005B11F0 = (uint64_t)v2;
}

void sub_1003DAA90(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v4 = a3;
    id v7 = [v4 productVariants];
    if ([v7 count])
    {
      objc_super v5 = [v7 componentsJoinedByString:@" "];
      [a1 setValue:v5 forHTTPHeaderField:@"X-Apple-TA-Device"];
    }
    else
    {
      [a1 setValue:0 forHTTPHeaderField:@"X-Apple-TA-Device"];
    }
    id v6 = [v4 iOSSupportVersion];

    [a1 setValue:0 forHTTPHeaderField:@"X-Apple-TA-OS-Version"];
  }
}

id sub_1003DB030(uint64_t a1, void *a2)
{
  return [a2 bindString:*(void *)(a1 + 32) atPosition:1];
}

id sub_1003DB10C(uint64_t a1, void *a2)
{
  return [a2 bindString:*(void *)(a1 + 32) atPosition:1];
}

id sub_1003DB11C()
{
  self;
  if (qword_1005B1200 != -1) {
    dispatch_once(&qword_1005B1200, &stru_10052C4A0);
  }
  v0 = (void *)qword_1005B11F8;
  return v0;
}

void sub_1003DB174(id a1)
{
  uint64_t v1 = objc_alloc_init(InstallAttributionService);
  id v2 = (void *)qword_1005B11F8;
  qword_1005B11F8 = (uint64_t)v1;
}

id sub_1003DBC70(id result)
{
  if (result)
  {
    uint64_t v1 = sub_100016788();
    id v2 = [v1 processInfo];
    double v3 = [v2 bundleIdentifier];

    id v4 = [v3 isEqualToString:@"com.apple.asclient"];
    return v4;
  }
  return result;
}

id sub_1003DBE98(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v10 = 0;
    id v2 = a2;
    id v3 = objc_alloc((Class)LSApplicationRecord);
    id v4 = [v2 unsignedLongLongValue];

    objc_super v5 = [v3 initWithStoreItemIdentifier:v4 error:&v10];
    id v6 = v5;
    if (v5)
    {
      id v7 = sub_100296F10(v5);
    }
    else
    {
      int v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v12 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to find app record: %@", buf, 0xCu);
      }

      id v7 = 0;
    }
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

uint64_t sub_1003DC12C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003DC2A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1003DC62C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_20;
  }
  objc_super v5 = [v3 appAdamId];
  char v6 = sub_1002F3620((unint64_t)v5);

  if ((v6 & 1) == 0)
  {
    objc_super v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v24) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Advertised app ID is not a valid integer value.", (uint8_t *)&v24, 2u);
    }
    goto LABEL_19;
  }
  id v7 = [v4 sourceAppAdamId];
  char v8 = sub_1002F3620((unint64_t)v7);

  if ((v8 & 1) == 0)
  {
    objc_super v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v24) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Source app ID is not a valid integer value.", (uint8_t *)&v24, 2u);
    }
    goto LABEL_19;
  }
  id v9 = [v4 interactionType];

  if (v9)
  {
    uint64_t v10 = [v4 interactionType];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0)
    {
      objc_super v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v24) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Interaction type is not a valid string value.", (uint8_t *)&v24, 2u);
      }
LABEL_19:

      a1 = ASDErrorWithDescription();
      goto LABEL_20;
    }
  }
  uint64_t v12 = [v4 version];
  uint64_t v13 = ASDInstallAttributionVersionCreateFromString();

  a1 = 0;
  if (v13 <= 199)
  {
    if (!v13) {
      goto LABEL_32;
    }
    if (v13 != 100) {
      goto LABEL_20;
    }
    goto LABEL_25;
  }
  if ((unint64_t)(v13 - 200) < 3)
  {
LABEL_25:
    size_t v16 = [v4 campaignId];
    char v17 = sub_1002F3620((unint64_t)v16);

    if (v17)
    {
      uint64_t v18 = sub_1003C44E0();
      long long v19 = [v4 campaignId];
      uint64_t v20 = sub_1003C5B58((uint64_t)v18, (uint64_t)[v19 integerValue]);
      goto LABEL_27;
    }
    goto LABEL_32;
  }
  if (v13 != 400)
  {
    if (v13 != 300) {
      goto LABEL_20;
    }
    goto LABEL_25;
  }
  objc_super v21 = [v4 sourceIdentifier];
  char v22 = sub_1002F3620((unint64_t)v21);

  if (v22)
  {
    uint64_t v18 = sub_1003C44E0();
    long long v19 = [v4 sourceIdentifier];
    uint64_t v20 = sub_1003C5940((uint64_t)v18, (uint64_t)[v19 integerValue]);
LABEL_27:
    a1 = (void *)v20;

    if (!a1) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }
LABEL_32:
  a1 = ASDErrorWithDescription();
  if (!a1) {
    goto LABEL_20;
  }
LABEL_33:
  objc_super v23 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    int v24 = 138412290;
    id v25 = a1;
    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Found error while checking for unexepected input: %@", (uint8_t *)&v24, 0xCu);
  }

LABEL_20:
  return a1;
}

id sub_1003DD184(uint64_t a1, void *a2, int a3)
{
  id v3 = a2;
  self;
  id v4 = [StoreItemResponse alloc];
  id v5 = v3;
  if (v4
    && (v125.receiver = v4,
        v125.super_class = (Class)StoreItemResponse,
        (char v6 = objc_msgSendSuper2(&v125, "init")) != 0))
  {
    id v7 = v6;
    char v8 = sub_1002689B4(v5, @"page-type");
    v7[16] = [v8 isEqualToString:@"preorder-success"];

    id v9 = [v5 objectForKey:@"more"];
    uint64_t v106 = v7;
    v107 = v5;
    if (v9)
    {
      id v10 = objc_alloc_init((Class)NSMutableArray);
      long long v121 = 0u;
      long long v122 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      uint64_t v11 = sub_1003B63BC(v9);
      id v12 = [v11 countByEnumeratingWithState:&v121 objects:v133 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v122;
        do
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(void *)v122 != v14) {
              objc_enumerationMutation(v11);
            }
            size_t v16 = *(void **)(*((void *)&v121 + 1) + 8 * i);
            char v17 = sub_10026811C(v16, @"endId");
            uint64_t v18 = sub_10026811C(v16, @"startId");
            long long v19 = (void *)v18;
            if (v17) {
              BOOL v20 = v18 == 0;
            }
            else {
              BOOL v20 = 1;
            }
            if (!v20)
            {
              [v10 addObject:v18];
              [v10 addObject:v17];
            }
          }
          id v13 = [v11 countByEnumeratingWithState:&v121 objects:v133 count:16];
        }
        while (v13);
      }

      id v21 = [v10 copy];
      id v7 = v106;
      char v22 = (void *)*((void *)v106 + 10);
      *((void *)v106 + 10) = v21;

      id v5 = v107;
    }
    id v104 = v9;
    objc_super v23 = sub_10026811C(v5, @"failureType");
    if (v23)
    {
      int v24 = [v5 objectForKey:@"customerMessage"];
      uint64_t v25 = sub_1003DDC78(v23, v24);
      id v26 = (void *)*((void *)v7 + 6);
      *((void *)v7 + 6) = v25;
    }
    id v102 = v23;
    v105 = sub_100267F88(v5, @"failed-items");
    if (v105)
    {
      id v108 = objc_alloc_init((Class)NSMutableDictionary);
      long long v117 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      sub_1003B63BC(v105);
      id obj = (id)objc_claimAutoreleasedReturnValue();
      id v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v117, v132, 16, v23, v9);
      if (v27)
      {
        id v28 = v27;
        uint64_t v29 = *(void *)v118;
        do
        {
          for (j = 0; j != v28; j = (char *)j + 1)
          {
            if (*(void *)v118 != v29) {
              objc_enumerationMutation(obj);
            }
            uint64_t v31 = *(void **)(*((void *)&v117 + 1) + 8 * (void)j);
            BOOL v32 = sub_10026811C(v31, @"item-id");
            uint64_t v33 = sub_10026811C(v31, @"failureType");
            objc_super v34 = sub_1002689B4(v31, @"customerMessage");
            uint64_t v35 = sub_1003DDC78(v33, v34);

            if (v32) {
              BOOL v36 = v35 == 0;
            }
            else {
              BOOL v36 = 1;
            }
            if (!v36) {
              [v108 setObject:v35 forKeyedSubscript:v32];
            }
          }
          id v28 = [obj countByEnumeratingWithState:&v117 objects:v132 count:16];
        }
        while (v28);
      }

      id v37 = [v108 copy];
      id v7 = v106;
      uint64_t v38 = (void *)*((void *)v106 + 1);
      *((void *)v106 + 1) = v37;

      id v5 = v107;
    }
    uint64_t v39 = sub_100268348(v5, @"keybag");
    id v40 = (void *)*((void *)v7 + 8);
    *((void *)v7 + _Block_object_dispose(&STACK[0x220], 8) = v39;

    uint64_t v41 = sub_10026811C(v5, @"dsPersonId");
    uint64_t v42 = (void *)*((void *)v7 + 3);
    *((void *)v7 + 3) = v41;

    uint64_t v43 = sub_100267F88(v5, @"songList");
    if (!v43)
    {
      uint64_t v43 = sub_100267F88(v5, @"items");
    }
    objc_msgSend(v5, "objectForKeyedSubscript:", @"optimalDownloadPeriod", v102);
    id v44 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v45 = v44;
    if (v44)
    {
      id v48 = sub_1002689B4(v44, @"startTime");
      __int16 v49 = [v48 componentsSeparatedByString:@":"];
      uint64_t v50 = (uint64_t)sub_1002687B0(v45, @"durationInMinutes", 0);
      uint64_t v46 = 0;
      if ([v49 count] == (id)2 && v50 >= 1)
      {
        __int16 v51 = [v49 firstObject];
        id v52 = [v51 integerValue];

        uint64_t v53 = [v49 lastObject];
        id v54 = [v53 integerValue];

        id v55 = +[StoreItemResponseSwift nextOptimalDownloadWindowWithHour:v52 minute:v54 duration:(double)(60 * v50)];
        if (v55)
        {
          uint64_t v56 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
          {
            uint64_t v57 = [v55 startDate];
            uint64_t v58 = [v55 endDate];
            *(_DWORD *)long long buf = 138543618;
            id v129 = v57;
            __int16 v130 = 2114;
            uint64_t v131 = v58;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "Received optimal download window of %{public}@ to %{public}@", buf, 0x16u);
          }
          uint64_t v59 = [TimeWindow alloc];
          id v60 = [v55 startDate];
          [v60 timeIntervalSinceReferenceDate];
          double v62 = v61;
          id v63 = [v55 endDate];
          [v63 timeIntervalSinceReferenceDate];
          uint64_t v46 = sub_1003DA24C((double *)v59, v62, v64);
        }
        else
        {
          uint64_t v46 = 0;
        }
      }
    }
    else
    {
      uint64_t v46 = 0;
    }
    v109 = v45;

    id obja = (id)objc_opt_new();
    id v65 = objc_opt_new();
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    id v66 = v43;
    id v67 = [v66 countByEnumeratingWithState:&v113 objects:buf count:16];
    if (v67)
    {
      id v68 = v67;
      uint64_t v69 = *(void *)v114;
      do
      {
        id v70 = 0;
        do
        {
          if (*(void *)v114 != v69) {
            objc_enumerationMutation(v66);
          }
          long long v71 = sub_1003A6C9C((id *)[StoreItem alloc], *(void **)(*((void *)&v113 + 1) + 8 * (void)v70), a3);
          long long v73 = v71;
          if (v71)
          {
            id v74 = objc_getProperty(v71, v72, 208, 1);
            if (v74)
            {
              long long v76 = v74;
              id v77 = objc_getProperty(v73, v75, 96, 1);

              if (v77)
              {
                id v78 = objc_getProperty(v73, v75, 96, 1);
                id v80 = objc_getProperty(v73, v79, 208, 1);
                [obja setObject:v78 forKeyedSubscript:v80];
              }
            }
            objc_setProperty_atomic(v73, v75, v46, 328);
          }
          [v65 addObject:v73];

          id v70 = (char *)v70 + 1;
        }
        while (v68 != v70);
        id v81 = [v66 countByEnumeratingWithState:&v113 objects:buf count:16];
        id v68 = v81;
      }
      while (v81);
    }

    id v82 = [v65 copy];
    uint64_t v47 = v106;
    CFStringRef v83 = (void *)*((void *)v106 + 7);
    *((void *)v106 + 7) = v82;

    id v5 = v107;
    if (v107)
    {
      v106[17] = sub_1002680CC(v107, @"cancel-purchase-batch", 0);
      unsigned __int8 v84 = sub_1002680CC(v107, @"trigger-download", 0);
    }
    else
    {
      unsigned __int8 v84 = 0;
      v106[17] = 0;
    }
    v106[18] = v84;
    uint64_t v85 = sub_100268568(v107, @"metrics");
    uint64_t v86 = (void *)*((void *)v106 + 9);
    *((void *)v106 + 9) = v85;

    __int16 v87 = sub_100267F88(v107, @"duAnonymousPings");
    id v88 = v87;
    if (v87)
    {
      __int16 v89 = sub_1003B6494(v87);
      uint64_t v90 = sub_10041E130(v89, &stru_10052C4E8);
      __int16 v91 = (void *)*((void *)v106 + 4);
      *((void *)v106 + 4) = v90;
    }
    uint64_t v92 = v45;
    if (sub_1003C4D74())
    {
      uint64_t v93 = sub_100268568(v107, @"ad-network");
      uint64_t v94 = (void *)*((void *)v106 + 14);
      *((void *)v106 + 14) = v93;
    }
    else
    {
      uint64_t v95 = sub_100268568(v107, @"ad-networks");
      uint64_t v94 = v95;
      if (v95)
      {
        id v96 = sub_1002689B4(v95, @"error");
        if (v96)
        {
          uint64_t v97 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v126 = 138543362;
            CFStringRef v127 = v96;
            _os_log_error_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "Multi pingbacks error:%{public}@", v126, 0xCu);
          }

          id v98 = v96;
          long long v99 = (void *)*((void *)v106 + 13);
          *((void *)v106 + 13) = v98;
          uint64_t v92 = v109;
        }
        else
        {
          uint64_t v100 = sub_1002689B4(v94, @"url");
          long long v99 = (void *)*((void *)v106 + 12);
          *((void *)v106 + 12) = v100;
        }
      }
    }
  }
  else
  {
    uint64_t v47 = 0;
  }

  return v47;
}

StoreItemResponse *sub_1003DDB9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  self;
  id v7 = [StoreItemResponse alloc];
  id v8 = v6;
  id v9 = v5;
  if (v7)
  {
    v12.receiver = v7;
    v12.super_class = (Class)StoreItemResponse;
    id v10 = (StoreItemResponse *)objc_msgSendSuper2(&v12, "init");
    id v7 = v10;
    if (v10)
    {
      objc_storeStrong((id *)&v10->_error, a2);
      objc_storeStrong((id *)&v7->_accountID, a3);
    }
  }

  return v7;
}

id sub_1003DDC78(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    id v4 = 0;
  }
  if (v3) {
    [v3 integerValue];
  }
  id v5 = ASDErrorWithTitleAndMessage();

  return v5;
}

NSURL *__cdecl sub_1003DDD2C(id a1, NSString *a2)
{
  return +[NSURL URLWithString:a2];
}

id sub_1003DDD3C(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 56, 1);
  }
  return result;
}

id sub_1003DDE0C(id result)
{
  if (result) {
    return sub_1002680CC(result, @"trigger-download", 0);
  }
  return result;
}

id sub_1003DDE24(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  uint64_t v6 = self;
  if (!v4)
  {
    id v8 = 0;
    unint64_t v9 = 0;
    goto LABEL_3;
  }
  char v7 = *((unsigned char *)v4 + 10);
  id v8 = objc_getProperty(v4, v5, 40, 1);
  unint64_t v9 = *((void *)v4 + 2);
  if ((v7 & 1) == 0)
  {
LABEL_3:
    uint64_t v10 = sub_1003DE0B4(v6, v8, v9, a3);
    goto LABEL_5;
  }
  uint64_t v10 = sub_1003DDEFC(v6, v8, v9, a3);
LABEL_5:
  uint64_t v11 = (void *)v10;

  return v11;
}

id sub_1003DDEFC(uint64_t a1, void *a2, unint64_t a3, int a4)
{
  id v6 = a2;
  uint64_t v7 = self;
  id v8 = objc_alloc_init((Class)AMSDialogRequest);
  if (v6 && [v6 length])
  {
    unint64_t v9 = ASDLocalizedString();
    uint64_t v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v6);
    [v8 setTitle:v10];
  }
  else
  {
    unint64_t v9 = ASDLocalizedString();
    [v8 setTitle:v9];
  }

  uint64_t v11 = sub_1003DE590(v7, a3);
  [v8 setMessage:v11];

  objc_super v12 = sub_1003DE420();
  [v8 setButtonActions:v12];

  id v13 = [v8 buttonActions];
  uint64_t v14 = [v13 lastObject];
  [v8 setDefaultAction:v14];

  if (a4) {
    uint64_t v15 = @"cellularLimitUpdateRoaming";
  }
  else {
    uint64_t v15 = @"cellularLimitUpdate";
  }
  sub_100422394(v8, v15);

  return v8;
}

id sub_1003DE0B4(uint64_t a1, void *a2, unint64_t a3, int a4)
{
  id v6 = a2;
  uint64_t v7 = self;
  id v8 = objc_alloc_init((Class)AMSDialogRequest);
  if (v6 && [v6 length])
  {
    unint64_t v9 = ASDLocalizedString();
    uint64_t v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v6);
    [v8 setTitle:v10];
  }
  else
  {
    unint64_t v9 = ASDLocalizedString();
    [v8 setTitle:v9];
  }

  uint64_t v11 = sub_1003DE590(v7, a3);
  [v8 setMessage:v11];

  objc_super v12 = sub_1003DE420();
  [v8 setButtonActions:v12];

  id v13 = [v8 buttonActions];
  uint64_t v14 = [v13 lastObject];
  [v8 setDefaultAction:v14];

  if (a4) {
    uint64_t v15 = @"cellularLimitDownloadRoaming";
  }
  else {
    uint64_t v15 = @"cellularLimitDownload";
  }
  sub_100422394(v8, v15);

  return v8;
}

id sub_1003DE26C(uint64_t a1, unint64_t a2, int a3, int a4)
{
  self;
  id v7 = objc_alloc_init((Class)AMSDialogRequest);
  id v8 = ASDLocalizedString();
  [v7 setTitle:v8];

  if (a3 || a2)
  {
    unint64_t v9 = ASDLocalizedString();
    uint64_t v10 = sub_1003B65EC((uint64_t)EvaluatorDownload, a2);
    uint64_t v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v10);
    [v7 setMessage:v11];
  }
  else
  {
    unint64_t v9 = ASDLocalizedString();
    [v7 setMessage:v9];
  }

  objc_super v12 = sub_1003DE420();
  [v7 setButtonActions:v12];

  id v13 = [v7 buttonActions];
  uint64_t v14 = [v13 lastObject];
  [v7 setDefaultAction:v14];

  if (a4) {
    uint64_t v15 = @"cellularLimitUpdatesRoaming";
  }
  else {
    uint64_t v15 = @"cellularLimitUpdates";
  }
  sub_100422394(v7, v15);
  return v7;
}

id sub_1003DE420()
{
  self;
  id v0 = objc_alloc_init((Class)AMSDialogAction);
  uint64_t v1 = ASDLocalizedString();
  [v0 setTitle:v1];

  [v0 setIdentifier:@"CelularDataPromptActionDownloadNow"];
  sub_10025F158(v0, @"download");
  id v2 = objc_alloc_init((Class)AMSDialogAction);
  self;
  MGGetBoolAnswer();
  id v3 = ASDLocalizedString();
  [v2 setTitle:v3];

  [v2 setIdentifier:@"CelularDataPromptActionDownloadLater"];
  [v2 setStyle:2];
  sub_10025F158(v2, @"later");
  v6[0] = v2;
  v6[1] = v0;
  id v4 = +[NSArray arrayWithObjects:v6 count:2];

  return v4;
}

id sub_1003DE590(uint64_t a1, unint64_t a2)
{
  self;
  ASDLocalizedString();
  if (a2) {
    id v3 = {;
  }
    id v4 = sub_1003B65EC((uint64_t)EvaluatorDownload, a2);
    id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v3, v4);
  }
  else {
    id v5 = {;
  }
  }
  return v5;
}

id sub_1003DEA54(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = sub_1003DEAF4((uint64_t)PurchaseHistoryDatabaseSession, a2);
    id v4 = [v2 connection];
    sub_1002FF80C((uint64_t)PurchaseHistoryAppEntity, @"ROWID", v3, v4);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_1003DEAF4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init((Class)NSMutableArray);
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"purchaser_dsid", [v2 accountID]);
  [v3 addObject:v4];

  if ([v2 includeArcade] == (id)2)
  {
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"media_kind" value:&off_10054CF30 comparisonType:2];
    [v3 addObject:v5];
  }
  if ([v2 isFirstParty] == (id)2)
  {
    id v6 = &__kCFBooleanFalse;
  }
  else
  {
    if ([v2 isFirstParty] != (id)1) {
      goto LABEL_8;
    }
    id v6 = &__kCFBooleanTrue;
  }
  id v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"first_party" equalToValue:v6];
  [v3 addObject:v7];

LABEL_8:
  if ([v2 isHidden] == (id)2)
  {
    id v8 = &__kCFBooleanFalse;
  }
  else
  {
    if ([v2 isHidden] != (id)1) {
      goto LABEL_13;
    }
    id v8 = &__kCFBooleanTrue;
  }
  unint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"hidden" equalToValue:v8];
  [v3 addObject:v9];

LABEL_13:
  if ([v2 currentlyOptedInForMacOSEligibility] == (id)2)
  {
    uint64_t v10 = &__kCFBooleanFalse;
  }
  else
  {
    if ([v2 currentlyOptedInForMacOSEligibility] != (id)1) {
      goto LABEL_18;
    }
    uint64_t v10 = &__kCFBooleanTrue;
  }
  uint64_t v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_ios_binary_macos_available" equalToValue:v10];
  [v3 addObject:v11];

LABEL_18:
  if ([v2 optedInForMacOSEligibility] == (id)2)
  {
    objc_super v12 = &__kCFBooleanFalse;
  }
  else
  {
    if ([v2 optedInForMacOSEligibility] != (id)1) {
      goto LABEL_23;
    }
    objc_super v12 = &__kCFBooleanTrue;
  }
  id v13 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_ios_binary_macos_compatible" equalToValue:v12];
  [v3 addObject:v13];

LABEL_23:
  if ([v2 currentlyOptedInForXROSEligibility] == (id)2)
  {
    uint64_t v14 = &__kCFBooleanFalse;
  }
  else
  {
    if ([v2 currentlyOptedInForXROSEligibility] != (id)1) {
      goto LABEL_28;
    }
    uint64_t v14 = &__kCFBooleanTrue;
  }
  uint64_t v15 = +[SQLiteComparisonPredicate predicateWithProperty:@"currently_opted_in_for_ros_eligibility" equalToValue:v14];
  [v3 addObject:v15];

LABEL_28:
  if ([v2 optedInForXROSEligibility] == (id)2)
  {
    size_t v16 = &__kCFBooleanFalse;
  }
  else
  {
    if ([v2 optedInForXROSEligibility] != (id)1) {
      goto LABEL_33;
    }
    size_t v16 = &__kCFBooleanTrue;
  }
  char v17 = +[SQLiteComparisonPredicate predicateWithProperty:@"opted_in_for_ros_eligibility" equalToValue:v16];
  [v3 addObject:v17];

LABEL_33:
  if ([v2 supportsRealityDevice] == (id)2)
  {
    uint64_t v18 = &__kCFBooleanFalse;
  }
  else
  {
    if ([v2 supportsRealityDevice] != (id)1) {
      goto LABEL_38;
    }
    uint64_t v18 = &__kCFBooleanTrue;
  }
  long long v19 = +[SQLiteComparisonPredicate predicateWithProperty:@"supports_reality_device" equalToValue:v18];
  [v3 addObject:v19];

LABEL_38:
  BOOL v20 = [v2 searchTerm];

  if (v20)
  {
    id v21 = [v2 searchTerm];
    char v22 = +[SQLiteComparisonPredicate predicateWithProperty:@"long_title" value:v21 comparisonType:7];
    [v3 addObject:v22];
  }
  uint64_t v23 = [v2 storeIDs];
  if (v23)
  {
    int v24 = (void *)v23;
    uint64_t v25 = [v2 storeIDs];
    id v26 = [v25 count];

    if (v26)
    {
      id v27 = [v2 storeIDs];
      id v28 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"store_item_id" values:v27];
      [v3 addObject:v28];
    }
  }
  uint64_t v29 = [v2 bundleIDs];
  if (v29)
  {
    uint64_t v30 = (void *)v29;
    uint64_t v31 = [v2 bundleIDs];
    id v32 = [v31 count];

    if (v32)
    {
      uint64_t v33 = [v2 bundleIDs];
      objc_super v34 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"bundle_id" values:v33];
      [v3 addObject:v34];
    }
  }
  if ([v2 isPreorder] == (id)2)
  {
    uint64_t v35 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_preorder" equalToValue:&__kCFBooleanFalse];
    [v3 addObject:v35];

    if ([v2 includeArcade] == (id)1) {
      goto LABEL_55;
    }
    uint64_t v36 = +[SQLiteComparisonPredicate predicateWithProperty:@"media_kind" value:&off_10054CF30 comparisonType:2];
    goto LABEL_51;
  }
  if ([v2 isPreorder] == (id)1)
  {
    uint64_t v36 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_preorder" equalToValue:&__kCFBooleanTrue];
LABEL_51:
    id v37 = (void *)v36;
    [v3 addObject:v36];
    goto LABEL_54;
  }
  if ([v2 includeArcade] == (id)1) {
    goto LABEL_55;
  }
  id v37 = +[SQLiteComparisonPredicate predicateWithProperty:@"media_kind" value:&off_10054CF30 comparisonType:2];
  uint64_t v38 = +[SQLiteComparisonPredicate predicateWithProperty:@"media_kind" value:&off_10054CF30 comparisonType:1];
  uint64_t v39 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_preorder" equalToValue:&__kCFBooleanTrue];
  v47[0] = v38;
  v47[1] = v39;
  id v40 = +[NSArray arrayWithObjects:v47 count:2];
  uint64_t v41 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v40];

  v46[0] = v37;
  v46[1] = v41;
  uint64_t v42 = +[NSArray arrayWithObjects:v46 count:2];
  uint64_t v43 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v42];

  [v3 addObject:v43];
LABEL_54:

LABEL_55:
  id v44 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v3];

  return v44;
}

id sub_1003DF1F0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 accountID]);
    id v6 = sub_1003DF91C((uint64_t)a1, v5);

    if ([v6 unsignedLongValue])
    {
      id v7 = [[SQLiteQueryDescriptor alloc] initWithEntityClass:objc_opt_class()];
      unint64_t v9 = sub_1003DEAF4((uint64_t)PurchaseHistoryDatabaseSession, v4);
      if (v7) {
        objc_setProperty_nonatomic_copy(v7, v8, v9, 56);
      }

      uint64_t v10 = [v4 sortOptions];
      uint64_t v11 = &off_100527000;
      if (v10)
      {
        objc_super v12 = (void *)v10;
        id v13 = [v4 sortOptions];
        id v14 = [v13 count];

        if (v14)
        {
          self = v7;
          uint64_t v47 = a1;
          id v48 = v6;
          id v51 = objc_alloc_init((Class)NSMutableArray);
          id v50 = objc_alloc_init((Class)NSMutableArray);
          long long v54 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          id obj = [v4 sortOptions];
          id v15 = [obj countByEnumeratingWithState:&v54 objects:v59 count:16];
          if (v15)
          {
            id v16 = v15;
            uint64_t v17 = *(void *)v55;
            uint64_t v18 = kASDPurchaseHistoryQuerySortOptionDate;
            do
            {
              for (i = 0; i != v16; i = (char *)i + 1)
              {
                if (*(void *)v55 != v17) {
                  objc_enumerationMutation(obj);
                }
                BOOL v20 = *(void **)(*((void *)&v54 + 1) + 8 * i);
                objc_msgSend(v20, "name", self);
                id v21 = (id)objc_claimAutoreleasedReturnValue();
                self;
                if ([v21 isEqualToString:v18])
                {
                  char v22 = @"date_purchased";
                }
                else
                {
                  uint64_t v23 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v25 = objc_opt_class();
                    *(_DWORD *)long long buf = 138412546;
                    double v61 = v25;
                    __int16 v62 = 2112;
                    id v63 = v21;
                    id v26 = v25;
                    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[%@]: Unknown sort option: %@", buf, 0x16u);
                  }
                  char v22 = 0;
                }

                if (v22)
                {
                  [v51 addObject:v22];
                  if ([v20 ascending]) {
                    CFStringRef v24 = @"ASC";
                  }
                  else {
                    CFStringRef v24 = @"DESC";
                  }
                  [v50 addObject:v24];
                }
              }
              id v16 = [obj countByEnumeratingWithState:&v54 objects:v59 count:16];
            }
            while (v16);
          }

          id v7 = self;
          if (self)
          {
            objc_setProperty_nonatomic_copy(self, v27, v51, 48);
            objc_setProperty_nonatomic_copy(self, v28, v50, 40);
          }

          id v6 = v48;
          a1 = v47;
          uint64_t v11 = &off_100527000;
        }
      }
      v58[0] = @"bundle_id";
      v58[1] = @"content_rating_flags";
      uint64_t v29 = v11[260];
      v58[2] = @"circular_icon_url";
      v58[3] = v29;
      v58[4] = @"developer_name";
      v58[5] = @"family_shared";
      v58[6] = @"first_party";
      v58[7] = @"has_messages_extension";
      v58[8] = @"hidden";
      v58[9] = @"hidden_from_springboard";
      v58[10] = @"icon_url_template";
      v58[11] = @"is_32_bit_only";
      v58[12] = @"is_ios_binary_macos_available";
      v58[13] = @"currently_opted_in_for_ros_eligibility";
      v58[14] = @"is_ios_binary_macos_compatible";
      v58[15] = @"opted_in_for_ros_eligibility";
      v58[16] = @"is_preorder";
      v58[17] = @"long_title";
      v58[18] = @"media_kind";
      v58[19] = @"oval_icon_url_template";
      v58[20] = @"preflight_package_url";
      v58[21] = @"product_url";
      v58[22] = @"purchaser_dsid";
      v58[23] = @"redownload_params";
      v58[24] = @"required_capabilities";
      v58[25] = @"store_item_id";
      v58[26] = @"supports_ipad";
      v58[27] = @"supports_iphone";
      v58[28] = @"supports_mac";
      v58[29] = @"supports_reality_device";
      v58[30] = @"purchase_token";
      v58[31] = @"locker_item_id";
      v58[32] = @"genre_id";
      v58[33] = @"genre_name";
      v58[34] = @"watch_app_delivered_in_ios_app";
      v58[35] = @"watch_app_runs_independently";
      v58[36] = @"watch_app_watch_only";
      v58[37] = @"supports_layered_image";
      v58[38] = @"has_p3";
      v58[39] = @"title";
      uint64_t v30 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v58, 40, self);
      id v31 = [v30 mutableCopy];

      id v32 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v33 = [SQLiteQuery alloc];
      objc_super v34 = [a1 connection];
      id v35 = [(SQLiteQuery *)v33 initOnConnection:v34 descriptor:v7];

      v52[0] = _NSConcreteStackBlock;
      v52[1] = 3221225472;
      v52[2] = sub_1003DF9BC;
      v52[3] = &unk_100527420;
      id v36 = v32;
      id v53 = v36;
      [v35 enumeratePersistentIDsAndProperties:v31 usingBlock:v52];

      id v37 = 0;
    }
    else
    {
      uint64_t v38 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = objc_opt_class();
        id v42 = v41;
        uint64_t v43 = objc_opt_class();
        id v44 = v43;
        uint64_t v45 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v4 accountID]);
        *(_DWORD *)long long buf = 138412802;
        double v61 = v41;
        __int16 v62 = 2114;
        id v63 = v43;
        __int16 v64 = 2112;
        id v65 = v45;
        _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "[%@]: [%{public}@]: No data found for account: %@", buf, 0x20u);
      }
      id v37 = ASDErrorWithDescription();
      id v7 = 0;
      id v36 = 0;
    }

    id v39 = [v36 copy];
  }
  else
  {
    id v39 = 0;
  }

  return v39;
}

id sub_1003DF91C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_10032CE18((uint64_t)PurchaseHistoryDatabaseSession, a2);
    id v4 = sub_1003E022C(a1, v3);

    if (v4)
    {
      id v5 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v4 intValue]);
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

void sub_1003DF9BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v46 = objc_alloc_init((Class)ASDPurchaseHistoryApp);
  id v5 = [v4 objectForKeyedSubscript:@"bundle_id"];
  [v46 setBundleID:v5];

  id v6 = [v4 objectForKeyedSubscript:@"content_rating_flags"];
  objc_msgSend(v46, "setContentRatingFlags:", objc_msgSend(v6, "integerValue"));

  id v7 = [v4 objectForKeyedSubscript:@"circular_icon_url"];
  [v46 setCircularIconURLString:v7];

  id v8 = [v4 objectForKeyedSubscript:@"date_purchased"];
  [v46 setDatePurchased:v8];

  unint64_t v9 = [v4 objectForKeyedSubscript:@"developer_name"];
  [v46 setDeveloperName:v9];

  uint64_t v10 = [v4 objectForKeyedSubscript:@"family_shared"];
  objc_msgSend(v46, "setFamilyShared:", objc_msgSend(v10, "BOOLValue"));

  uint64_t v11 = [v4 objectForKeyedSubscript:@"first_party"];
  objc_msgSend(v46, "setFirstParty:", objc_msgSend(v11, "BOOLValue"));

  objc_super v12 = [v4 objectForKeyedSubscript:@"has_messages_extension"];
  objc_msgSend(v46, "setHasMessagesExtension:", objc_msgSend(v12, "BOOLValue"));

  id v13 = [v4 objectForKeyedSubscript:@"hidden"];
  objc_msgSend(v46, "setHidden:", objc_msgSend(v13, "BOOLValue"));

  id v14 = [v4 objectForKeyedSubscript:@"hidden_from_springboard"];
  objc_msgSend(v46, "setHiddenFromSpringboard:", objc_msgSend(v14, "BOOLValue"));

  id v15 = [v4 objectForKeyedSubscript:@"icon_url_template"];
  [v46 setIconURLString:v15];

  id v16 = [v4 objectForKeyedSubscript:@"media_kind"];
  objc_msgSend(v46, "setIsArcade:", objc_msgSend(v16, "unsignedIntValue") == 0x40000);

  uint64_t v17 = [v4 objectForKeyedSubscript:@"is_32_bit_only"];
  objc_msgSend(v46, "setIs32BitOnly:", objc_msgSend(v17, "BOOLValue"));

  uint64_t v18 = [v4 objectForKeyedSubscript:@"is_ios_binary_macos_available"];
  objc_msgSend(v46, "setCurrentlyOptedInForMacOSEligibility:", objc_msgSend(v18, "BOOLValue"));

  long long v19 = [v4 objectForKeyedSubscript:@"currently_opted_in_for_ros_eligibility"];
  objc_msgSend(v46, "setCurrentlyOptedInForXROSEligibility:", objc_msgSend(v19, "BOOLValue"));

  BOOL v20 = [v4 objectForKeyedSubscript:@"is_ios_binary_macos_compatible"];
  objc_msgSend(v46, "setOptedInForMacOSEligibility:", objc_msgSend(v20, "BOOLValue"));

  id v21 = [v4 objectForKeyedSubscript:@"opted_in_for_ros_eligibility"];
  objc_msgSend(v46, "setOptedInForXROSEligibility:", objc_msgSend(v21, "BOOLValue"));

  char v22 = [v4 objectForKeyedSubscript:@"is_preorder"];
  objc_msgSend(v46, "setIsPreorder:", objc_msgSend(v22, "BOOLValue"));

  uint64_t v23 = [v4 objectForKeyedSubscript:@"long_title"];
  [v46 setLongTitle:v23];

  CFStringRef v24 = [v4 objectForKeyedSubscript:@"media_kind"];
  objc_msgSend(v46, "setMediaKind:", objc_msgSend(v24, "unsignedIntValue"));

  uint64_t v25 = [v4 objectForKeyedSubscript:@"oval_icon_url_template"];
  [v46 setOvalIconURLString:v25];

  id v26 = [v4 objectForKeyedSubscript:@"preflight_package_url"];
  [v46 setPreflightPackageURL:v26];

  id v27 = [v4 objectForKeyedSubscript:@"product_url"];
  [v46 setProductURL:v27];

  SEL v28 = [v4 objectForKeyedSubscript:@"purchaser_dsid"];
  objc_msgSend(v46, "setPurchaserDSID:", objc_msgSend(v28, "longLongValue"));

  uint64_t v29 = [v4 objectForKeyedSubscript:@"redownload_params"];
  [v46 setRedownloadParams:v29];

  uint64_t v30 = [v4 objectForKeyedSubscript:@"required_capabilities"];
  [v46 setRequiredCapabilities:v30];

  id v31 = [v4 objectForKeyedSubscript:@"store_item_id"];
  objc_msgSend(v46, "setStoreItemID:", objc_msgSend(v31, "longLongValue"));

  id v32 = [v4 objectForKeyedSubscript:@"supports_ipad"];
  objc_msgSend(v46, "setSupportsIPad:", objc_msgSend(v32, "BOOLValue"));

  uint64_t v33 = [v4 objectForKeyedSubscript:@"supports_iphone"];
  objc_msgSend(v46, "setSupportsIPhone:", objc_msgSend(v33, "BOOLValue"));

  objc_super v34 = [v4 objectForKeyedSubscript:@"supports_mac"];
  objc_msgSend(v46, "setSupportsMac:", objc_msgSend(v34, "BOOLValue"));

  id v35 = [v4 objectForKeyedSubscript:@"supports_reality_device"];
  objc_msgSend(v46, "setSupportsRealityDevice:", objc_msgSend(v35, "BOOLValue"));

  id v36 = [v4 objectForKeyedSubscript:@"purchase_token"];
  objc_msgSend(v46, "setPurchaseToken:", objc_msgSend(v36, "unsignedIntValue"));

  id v37 = [v4 objectForKeyedSubscript:@"locker_item_id"];
  objc_msgSend(v46, "setLockerItemID:", objc_msgSend(v37, "unsignedLongLongValue"));

  uint64_t v38 = [v4 objectForKeyedSubscript:@"genre_id"];
  objc_msgSend(v46, "setGenreID:", objc_msgSend(v38, "longLongValue"));

  id v39 = [v4 objectForKeyedSubscript:@"genre_name"];
  [v46 setGenreName:v39];

  id v40 = [v4 objectForKeyedSubscript:@"watch_app_delivered_in_ios_app"];
  objc_msgSend(v46, "setWatchAppDeliveredIniOSApp:", objc_msgSend(v40, "BOOLValue"));

  uint64_t v41 = [v4 objectForKeyedSubscript:@"watch_app_runs_independently"];
  objc_msgSend(v46, "setWatchAppRunsIndependently:", objc_msgSend(v41, "BOOLValue"));

  id v42 = [v4 objectForKeyedSubscript:@"watch_app_watch_only"];
  objc_msgSend(v46, "setWatchOnly:", objc_msgSend(v42, "BOOLValue"));

  uint64_t v43 = [v4 objectForKeyedSubscript:@"supports_layered_image"];
  objc_msgSend(v46, "setSupportsLayeredImage:", objc_msgSend(v43, "BOOLValue"));

  id v44 = [v4 objectForKeyedSubscript:@"has_p3"];
  objc_msgSend(v46, "setHasP3:", objc_msgSend(v44, "BOOLValue"));

  uint64_t v45 = [v4 objectForKeyedSubscript:@"title"];

  [v46 setTitle:v45];
  [*(id *)(a1 + 32) addObject:v46];
}

id sub_1003E0108(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_1003E01B4((uint64_t)PurchaseHistoryDatabaseSession, a2);
    id v4 = sub_1003E022C(a1, v3);

    if (objc_opt_respondsToSelector())
    {
      [v4 doubleValue];
      id v5 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:");
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_1003E01B4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[NSString stringWithFormat:@"%@%@", @"LastForceRefreshedTimestampPropertyKey", v2];

  return v3;
}

id sub_1003E022C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0;
  objc_super v12 = &v11;
  uint64_t v13 = 0x3032000000;
  id v14 = sub_100018408;
  id v15 = sub_100017DC0;
  id v16 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003E040C;
  void v8[3] = &unk_100523FE8;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v11;
  sub_100009834(v4, @"SELECT value FROM purchase_history_db_properties WHERE key = ?", v8);
  id v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1003E0348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003E0360(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_10032CBCC((uint64_t)PurchaseHistoryDatabaseSession, a2);
    uint64_t v4 = sub_1003E022C(a1, v3);

    if (objc_opt_respondsToSelector())
    {
      [v4 doubleValue];
      id v5 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:");
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

void sub_1003E040C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003E04B0;
  v5[3] = &unk_100523438;
  v5[4] = *(void *)(a1 + 40);
  sub_1000096CC((uint64_t)v4, v5);
}

void sub_1003E04B0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003D6084(a2, 0);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void *sub_1003E0524(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)ODRBundleTagManifest;
    id v5 = objc_msgSendSuper2(&v9, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      uint64_t v6 = +[NSDate date];
      id v7 = (void *)a1[2];
      a1[2] = v6;
    }
  }

  return a1;
}

void *sub_1003E05B8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    if (!v5)
    {
      id v16 = 0;
      goto LABEL_31;
    }
    id v7 = v5;
    self;
    id v31 = 0;
    id v8 = +[NSData dataWithContentsOfURL:v7 options:0 error:&v31];

    id v9 = v31;
    uint64_t v10 = v9;
    if (!v8)
    {
      CFTypeRef v34 = NSUnderlyingErrorKey;
      cf[0] = v9;
      id v17 = +[NSDictionary dictionaryWithObjects:cf forKeys:&v34 count:1];
      if (a3)
      {
        +[NSError errorWithDomain:_NSBundleResourceRequestErrorDomain code:101 userInfo:v17];
        id v16 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v16 = 0;
      }
      id v19 = v10;
      goto LABEL_27;
    }
    id v11 = v8;
    self;
    CFTypeRef v34 = 0;
    cf[0] = 0;
    +[NSSet setWithObject:@"NSBundleResourceRequestTags"];
    char Filtered = _CFPropertyListCreateFiltered();

    if (Filtered)
    {
      CFTypeID v13 = CFGetTypeID(cf[0]);
      if (v13 == CFDictionaryGetTypeID())
      {
        id v14 = (void *)cf[0];
        id v15 = v10;
        goto LABEL_17;
      }
      NSErrorUserInfoKey v32 = NSDebugDescriptionErrorKey;
      CFStringRef v33 = @"Manifest is not a dictionary";
      uint64_t v18 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    }
    else if (v34)
    {
      NSErrorUserInfoKey v32 = NSUnderlyingErrorKey;
      CFStringRef v33 = (const __CFString *)v34;
      uint64_t v18 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
      CFRelease(v34);
    }
    else
    {
      uint64_t v18 = 0;
    }
    id v15 = +[NSError errorWithDomain:_NSBundleResourceRequestErrorDomain code:101 userInfo:v18];

    id v14 = 0;
LABEL_17:
    id v19 = v15;

    if (v14)
    {
      id v17 = v14;
      self;
      BOOL v20 = +[NSMutableDictionary dictionary];
      id v21 = [v17 objectForKeyedSubscript:@"NSBundleResourceRequestTags"];

      if (v21)
      {
        cf[0] = _NSConcreteStackBlock;
        cf[1] = (CFTypeRef)3221225472;
        cf[2] = sub_1003E0AD4;
        cf[3] = &unk_10052C518;
        id v22 = v20;
        id v36 = v22;
        [v21 enumerateKeysAndObjectsUsingBlock:cf];

        id v16 = [v22 copy];
      }
      else
      {
        CFTypeRef v34 = NSDebugDescriptionErrorKey;
        cf[0] = @"Manifest has no tags";
        CFStringRef v24 = +[NSDictionary dictionaryWithObjects:cf forKeys:&v34 count:1];
        if (a3)
        {
          *a3 = +[NSError errorWithDomain:_NSBundleResourceRequestErrorDomain code:101 userInfo:v24];
        }

        id v16 = 0;
      }
    }
    else
    {
      CFTypeRef v34 = NSUnderlyingErrorKey;
      cf[0] = v19;
      uint64_t v23 = +[NSDictionary dictionaryWithObjects:cf forKeys:&v34 count:1];
      if (a3)
      {
        *a3 = +[NSError errorWithDomain:_NSBundleResourceRequestErrorDomain code:101 userInfo:v23];
      }

      id v17 = 0;
      id v16 = 0;
    }
LABEL_27:

    if (v16)
    {
      uint64_t v25 = sub_1003E0524(a1, v16);
      if (!v25)
      {
LABEL_33:
        a1 = v25;

        goto LABEL_34;
      }
      id v26 = +[NSFileManager defaultManager];
      id v27 = [v7 path];
      a1 = [v26 attributesOfItemAtPath:v27 error:0];

      if (a1)
      {
        uint64_t v28 = [a1 fileModificationDate];
        uint64_t v29 = (void *)v25[2];
        v25[2] = v28;
      }
LABEL_32:

      goto LABEL_33;
    }
LABEL_31:
    uint64_t v25 = 0;
    goto LABEL_32;
  }
LABEL_34:

  return a1;
}

id *sub_1003E0AA0(id *a1)
{
  if (a1)
  {
    a1 = [a1[1] allKeys];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1003E0AD4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 objectForKeyedSubscript:@"NSAssetPacks"];
  if (!v5)
  {
    id v5 = +[NSArray array];
  }
  [*(id *)(a1 + 32) setObject:v5 forKey:v6];
}

id sub_1003E0BA4()
{
  self;
  if (qword_1005B1210 != -1) {
    dispatch_once(&qword_1005B1210, &stru_10052C538);
  }
  id v0 = (void *)qword_1005B1208;
  return v0;
}

void sub_1003E0BFC(id a1)
{
  uint64_t v1 = [AppInstallsDatabaseStore alloc];
  sub_1001F5660();
  id v5 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  id v2 = sub_1001F5734(v5);
  uint64_t v3 = [(SQLiteDatabaseStore *)v1 initWithDatabase:v2];
  id v4 = (void *)qword_1005B1208;
  qword_1005B1208 = (uint64_t)v3;
}

uint64_t sub_1003E0DB8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = sub_100416F64();
  if (v3) {
    objc_storeWeak(v3 + 2, v4);
  }

  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v3) {
      id Property = objc_getProperty(v3, v5, 24, 1);
    }
    else {
      id Property = 0;
    }
    id v9 = Property;
    sub_1003E0EFC(v7, v9);

    uint64_t v10 = [v3 connection];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1003E1628;
    v12[3] = &unk_1005218C0;
    v12[4] = *(void *)(a1 + 32);
    CFTypeID v13 = v3;
    sub_10025E79C((uint64_t)v10, v12);
  }
  return v6;
}

void sub_1003E0EFC(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3) {
      id v5 = [v3[4] copy];
    }
    else {
      id v5 = 0;
    }
    double v61 = v5;
    if ([v5 count])
    {
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      id v6 = v61;
      id v7 = [v6 countByEnumeratingWithState:&v73 objects:v79 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v74;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(void *)v74 != v9) {
              objc_enumerationMutation(v6);
            }
            id v11 = *(void **)(*((void *)&v73 + 1) + 8 * i);
            objc_super v12 = sub_100388088();
            sub_1003886AC((uint64_t)v12, v11);
          }
          id v8 = [v6 countByEnumeratingWithState:&v73 objects:v79 count:16];
        }
        while (v8);
      }
    }
    CFTypeID v13 = SKANGhostback;
    if (v4)
    {
      if (*((unsigned char *)v4 + 137))
      {
        id v14 = objc_alloc_init(_TtC9appstored19AppDownloadDoneTask);
        uint64_t v15 = sub_1002B2A3C();
        id v16 = (void *)v15;
        if (v15) {
          [*(id *)(v15 + 8) addOperation:v14];
        }
      }
      if (v4[16])
      {
        id v17 = sub_1002ED270();
        sub_1002EDDA0(v17, v4[16]);
      }
      int v18 = *((unsigned __int8 *)v4 + 138);
      int v19 = *((unsigned __int8 *)v4 + 139);
      id v20 = [v4[1] copy];

      if (v20)
      {
        char v63 = v19;
        char v64 = v18;
        __int16 v62 = +[NSMutableArray array];
        long long v69 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        id v21 = [v4[1] copy];
        id v22 = [v21 keyEnumerator];

        id v23 = [v22 countByEnumeratingWithState:&v69 objects:v78 count:16];
        if (v23)
        {
          id v24 = v23;
          uint64_t v25 = *(void *)v70;
          do
          {
            for (j = 0; j != v24; j = (char *)j + 1)
            {
              if (*(void *)v70 != v25) {
                objc_enumerationMutation(v22);
              }
              id v27 = *(void **)(*((void *)&v69 + 1) + 8 * (void)j);
              id v28 = [v4[1] copy];
              uint64_t v29 = [v28 objectForKeyedSubscript:v27];

              id v30 = [v4[2] copy];
              id v31 = [v30 objectForKeyedSubscript:v27];

              if (v29)
              {
                NSErrorUserInfoKey v32 = sub_10001A308();
                BOOL v33 = sub_1002E7D08((BOOL)v32, v27, (uint64_t)[v29 integerValue], (uint64_t)objc_msgSend(v31, "integerValue"));

                if (v33)
                {
                  [v62 addObject:v27];
                  char v63 = 1;
                  char v64 = 1;
                }
              }
            }
            id v24 = [v22 countByEnumeratingWithState:&v69 objects:v78 count:16];
          }
          while (v24);
        }

        if ([v62 count])
        {
          CFTypeRef v34 = sub_1002CF238((uint64_t)ASDNotification, v62);
          id v35 = sub_10001A0C8();
          sub_1003D64D4((uint64_t)v35, v34);
        }
        int v19 = v63 & 1;
        int v18 = v64 & 1;
        CFTypeID v13 = SKANGhostback;
      }
      BOOL v36 = v19 != 0;
      BOOL v37 = v18 != 0;
      if (*((unsigned char *)v4 + 140))
      {
        uint64_t v38 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Auto updates completed", (uint8_t *)&buf, 2u);
        }

        id v39 = [&v13[50] sharedManager];
        [v39 postProcessBackgroundUpdateMetrics];
      }
      if (*((unsigned char *)v4 + 136))
      {
        id v40 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Restore completed", (uint8_t *)&buf, 2u);
        }

        uint64_t v41 = [&v13[50] sharedManager];
        [v41 performPostRestoreUpdatesCheck];
      }
      id v42 = [v4[14] copy];

      if (v42)
      {
        id v43 = [v4[14] copy];
        id v44 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v45 = sub_1003E0BA4();
        *(void *)&long long buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472;
        id v81 = sub_1003E1F58;
        id v82 = &unk_100525BC8;
        id v46 = v43;
        id v83 = v46;
        id v84 = v44;
        id v47 = v44;
        [v45 readUsingSession:&buf];

        id v48 = [v47 copy];
        if ([v48 count])
        {
          __int16 v49 = sub_1002B3410();
          sub_1002B53E8((uint64_t)v49, v48);
        }
      }
      id v50 = [v4[9] copy];
    }
    else
    {
      BOOL v37 = 0;
      BOOL v36 = 0;
      id v50 = 0;
    }
    if ([v50 count])
    {
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      id v51 = v50;
      id v52 = [v51 countByEnumeratingWithState:&v65 objects:v77 count:16];
      if (v52)
      {
        id v53 = v52;
        uint64_t v54 = *(void *)v66;
        do
        {
          for (k = 0; k != v53; k = (char *)k + 1)
          {
            if (*(void *)v66 != v54) {
              objc_enumerationMutation(v51);
            }
            long long v56 = *(void **)(*((void *)&v65 + 1) + 8 * (void)k);
            long long v57 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 138543362;
              *(void *)((char *)&buf + 4) = v56;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Finishing progress for bundleID: %{public}@", (uint8_t *)&buf, 0xCu);
            }

            uint64_t v58 = sub_100388088();
            sub_1003895DC((uint64_t)v58, v56, @"Install complete");
          }
          id v53 = [v51 countByEnumeratingWithState:&v65 objects:v77 count:16];
        }
        while (v53);
      }

      CFTypeID v13 = SKANGhostback;
    }
    if (v37)
    {
      uint64_t v59 = [&v13[50] sharedManager];
      [v59 noteUpdatesStateChanged:@"Updates complete" logKey:0];
    }
    if (v36)
    {
      id v60 = [&v13[50] sharedManager];
      [v60 reloadApplicationBadgeWithReason:@"Updates complete"];
    }
  }
}

void sub_1003E1628(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 24, 1);
  }
  id v4 = Property;
  sub_1003E168C(v3, v4);
}

void sub_1003E168C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (a1)
  {
    sub_100286684((uint64_t)v3, &stru_10052C5F0);
    sub_100286730((uint64_t)v4, &stru_10052C630);
    sub_1002867DC((uint64_t)v4, &stru_10052C650);
    if (v4)
    {
      id v5 = [v4[10] copy];

      if (v5)
      {
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        id v6 = [v4[10] copy];
        id v7 = [v6 countByEnumeratingWithState:&v51 objects:v61 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v52;
          do
          {
            for (i = 0; i != v8; i = (char *)i + 1)
            {
              if (*(void *)v52 != v9) {
                objc_enumerationMutation(v6);
              }
              +[MetricsBridge enqueueAppInstallationEventWithEvent:*(void *)(*((void *)&v51 + 1) + 8 * i)];
            }
            id v8 = [v6 countByEnumeratingWithState:&v51 objects:v61 count:16];
          }
          while (v8);
        }
      }
      id v11 = [v4[11] copy];

      if (v11)
      {
        objc_super v12 = sub_1002D7CE8();
        id v13 = [v4[11] copy];
        id v14 = [v13 allObjects];
        sub_1002D84A8((uint64_t)v12, v14);
      }
      id v15 = [v4[12] copy];

      if (v15)
      {
        id v16 = [v4[12] copy];
        id v17 = +[NSNotificationCenter defaultCenter];
        [v17 postNotificationName:@"LegacyNotifications" object:v16];
      }
      id v18 = [v4[13] copy];

      if (v18)
      {
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        id v19 = [v4[13] copy];
        id v20 = [v19 countByEnumeratingWithState:&v47 objects:v60 count:16];
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = *(void *)v48;
          do
          {
            for (j = 0; j != v21; j = (char *)j + 1)
            {
              if (*(void *)v48 != v22) {
                objc_enumerationMutation(v19);
              }
              sub_10040E9A0((uint64_t)Analytics, *(void **)(*((void *)&v47 + 1) + 8 * (void)j), 16);
            }
            id v21 = [v19 countByEnumeratingWithState:&v47 objects:v60 count:16];
          }
          while (v21);
        }
      }
      id obj = [v4[8] copy];
      if (obj)
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        id v24 = [obj countByEnumeratingWithState:&v43 objects:v59 count:16];
        if (v24)
        {
          id v25 = v24;
          uint64_t v41 = *(void *)v44;
          do
          {
            for (k = 0; k != v25; k = (char *)k + 1)
            {
              if (*(void *)v44 != v41) {
                objc_enumerationMutation(obj);
              }
              id v27 = *(void **)(*((void *)&v43 + 1) + 8 * (void)k);
              id v28 = [v27 objectForKeyedSubscript:@"bundle_id"];
              uint64_t v29 = [v27 objectForKeyedSubscript:@"failure_error"];
              id v30 = [v27 objectForKeyedSubscript:@"gizmo_pairing_id"];
              id v31 = +[ACXDeviceConnection sharedDeviceConnection];
              id v42 = 0;
              unsigned __int8 v32 = [v31 installRequestFailedForApp:v28 onDeviceWithPairingID:v30 failureReason:v29 wasUserInitiated:0 error:&v42];
              id v33 = v42;

              if ((v32 & 1) == 0)
              {
                CFTypeRef v34 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 138543618;
                  id v56 = v28;
                  __int16 v57 = 2114;
                  id v58 = v33;
                  _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Failed to inform AppConduit about %{public}@ install failing: %{public}@", buf, 0x16u);
                }
              }
            }
            id v25 = [obj countByEnumeratingWithState:&v43 objects:v59 count:16];
          }
          while (v25);
        }
      }
      id v35 = [v4[3] copy];
      if (v35)
      {
        BOOL v36 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          id v39 = [v35 count];
          *(_DWORD *)long long buf = 134218242;
          id v56 = v39;
          __int16 v57 = 2112;
          id v58 = v35;
          _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Starting %lu async task(s): %@", buf, 0x16u);
        }

        uint64_t v37 = sub_1002B2A3C();
        uint64_t v38 = (void *)v37;
        if (v37) {
          [*(id *)(v37 + 8) addOperations:v35 waitUntilFinished:0];
        }
      }
    }
    else
    {
      id v35 = 0;
      id obj = 0;
    }
  }
}

void sub_1003E1C6C(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = sub_100416F64();
  if (v4) {
    objc_storeWeak(v4 + 2, v3);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003E1CF8(dispatch_queue_t **a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = objc_opt_class();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003E1DB0;
    v5[3] = &unk_10052C5B0;
    v5[4] = a1;
    id v6 = v3;
    sub_1002328C8(a1[1], a1, v4, v5);
  }
}

uint64_t sub_1003E1DB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100416F64();
  if (v3) {
    objc_storeWeak(v3 + 2, v4);
  }

  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v3) {
      id Property = objc_getProperty(v3, v5, 24, 1);
    }
    else {
      id Property = 0;
    }
    id v9 = Property;
    sub_1003E0EFC(v7, v9);

    uint64_t v10 = [v3 connection];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1003E1EF4;
    v12[3] = &unk_1005218C0;
    v12[4] = *(void *)(a1 + 32);
    id v13 = v3;
    sub_10025E79C((uint64_t)v10, v12);
  }
  return v6;
}

void sub_1003E1EF4(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 24, 1);
  }
  id v4 = Property;
  sub_1003E168C(v3, v4);
}

void sub_1003E1F58(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v7);
        id v9 = [AppInstallEntity alloc];
        id v10 = [v8 longLongValue];
        id v11 = [v3 connection];
        objc_super v12 = [(SQLiteEntity *)v9 initWithPersistentID:v10 onConnection:v11];

        id v13 = [RestoreAppInstall alloc];
        id v14 = +[RestoreAppInstall defaultProperties];
        id v15 = [(SQLiteMemoryEntity *)v13 initWithDatabaseEntity:v12 properties:v14];

        if (v15) {
          [*(id *)(a1 + 40) addObject:v15];
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v5);
  }
}

void sub_1003E20F8(id a1, lib_IXAppInstallCoordinatorTag *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v13 = 0;
  sub_100278E08((uint64_t)IXAppInstallCoordinator, v4, &v13);
  uint64_t v6 = (lib_IXAppInstallCoordinatorTag *)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = v13;
  id v8 = ASDLogHandleForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (v9)
    {
      *(_DWORD *)long long buf = 138543618;
      id v15 = v4;
      __int16 v16 = 2114;
      long long v17 = (NSError *)v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failing coordinator: %{public}@ failed, couldn't be found error: %{public}@", buf, 0x16u);
    }
    goto LABEL_10;
  }
  if (v9)
  {
    *(_DWORD *)long long buf = 138543618;
    id v15 = v6;
    __int16 v16 = 2114;
    long long v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failing coordinator: %{public}@ with reason: %{public}@", buf, 0x16u);
  }

  objc_super v12 = v7;
  char v10 = sub_100279D48(v6, v5, &v12);
  id v8 = v12;

  if ((v10 & 1) == 0)
  {
    id v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      id v15 = v6;
      __int16 v16 = 2114;
      long long v17 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failing coordinator: %{public}@ failed, error occurred: %{public}@", buf, 0x16u);
    }

    uint64_t v7 = 0;
LABEL_10:

    id v8 = v7;
  }
}

void sub_1003E22F0(id a1, lib_IXAppInstallCoordinatorTag *a2)
{
  id v2 = a2;
  id v10 = 0;
  sub_100278E08((uint64_t)IXAppInstallCoordinator, v2, &v10);
  id v3 = (lib_IXAppInstallCoordinatorTag *)objc_claimAutoreleasedReturnValue();
  id v4 = v10;
  id v5 = ASDLogHandleForCategory();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 138543618;
      objc_super v12 = v2;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pausing coordinator: %{public}@ failed, couldn't be found error: %{public}@", buf, 0x16u);
    }
    goto LABEL_10;
  }
  if (v6)
  {
    *(_DWORD *)long long buf = 138543362;
    objc_super v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pausing coordinator: %{public}@", buf, 0xCu);
  }

  BOOL v9 = v4;
  unsigned __int8 v7 = [(lib_IXAppInstallCoordinatorTag *)v3 pauseWithError:&v9];
  id v5 = v9;

  if ((v7 & 1) == 0)
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      objc_super v12 = v3;
      __int16 v13 = 2114;
      id v14 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Pausing coordinator: %{public}@ failed, error occurred: %{public}@", buf, 0x16u);
    }

    id v4 = 0;
LABEL_10:

    id v5 = v4;
  }
}

void sub_1003E24C8(id a1, lib_IXAppInstallCoordinatorTag *a2)
{
  id v2 = a2;
  id v10 = 0;
  sub_100278E08((uint64_t)IXAppInstallCoordinator, v2, &v10);
  id v3 = (lib_IXAppInstallCoordinatorTag *)objc_claimAutoreleasedReturnValue();
  id v4 = v10;
  id v5 = ASDLogHandleForCategory();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 138543618;
      objc_super v12 = v2;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resuming coordinator: %{public}@ failed, couldn't be found error: %{public}@", buf, 0x16u);
    }
    goto LABEL_10;
  }
  if (v6)
  {
    *(_DWORD *)long long buf = 138543362;
    objc_super v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resuming coordinator: %{public}@", buf, 0xCu);
  }

  BOOL v9 = v4;
  unsigned __int8 v7 = [(lib_IXAppInstallCoordinatorTag *)v3 resumeWithError:&v9];
  id v5 = v9;

  if ((v7 & 1) == 0)
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      objc_super v12 = v3;
      __int16 v13 = 2114;
      id v14 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Resuming coordinator: %{public}@ failed, error occurred: %{public}@", buf, 0x16u);
    }

    id v4 = 0;
LABEL_10:

    id v5 = v4;
  }
}

void sub_1003E26A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      BOOL v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v5;

      id v4 = *(void **)(a1 + 8);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

void sub_1003E3028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003E3040(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 record];
  id v4 = (char *)objc_msgSend(v3, "asd_galetteMode");

  id v5 = v7;
  if ((unint64_t)(v4 - 1) <= 1)
  {
    BOOL v6 = [v7 bundleID];
    if (v6) {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v6];
    }

    id v5 = v7;
  }
}

uint64_t sub_1003E30DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(v3, "setNeedsThirdPartyPurchasesConfirmationForBundleID:", *(void *)(*((void *)&v10 + 1) + 8 * (void)v8), (void)v10);
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }

  return 1;
}

void sub_1003E31E8(id a1, GaletteStoreSession *a2)
{
}

id sub_1003E31F8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc((Class)AMSPurchase);
  id v4 = [v2 purchaseType];
  id v5 = [v2 buyParams];
  id v6 = [v3 initWithPurchaseType:v4 buyParams:v5];

  uint64_t v7 = [v2 account];
  [v6 setAccount:v7];

  id v8 = [v2 additionalHeaders];
  id v9 = [v8 copy];
  [v6 setAdditionalHeaders:v9];

  long long v10 = [v2 originalPurchaserDSID];
  [v6 setOwnerAccountId:v10];

  uint64_t v11 = [v2 isDiscretionary] ^ 1;
  [v6 setUserInitiated:v11];
  [v6 setSendBlindedData:v11];
  objc_msgSend(v6, "setUseJSONContentType:", objc_msgSend(v2, "useJSONContentType"));
  objc_msgSend(v6, "setIgnoreRequirePasswordRestriction:", objc_msgSend(v2, "ignoreRequirePasswordRestriction"));
  long long v12 = [v2 presentingSceneIdentifier];
  [v6 setPresentingSceneIdentifier:v12];

  long long v13 = [v2 metricsOverlay];
  if (v13)
  {
  }
  else
  {
    id v14 = [v2 qosMetricsFields];

    if (!v14) {
      goto LABEL_9;
    }
  }
  id v15 = objc_alloc_init((Class)NSMutableDictionary);
  __int16 v16 = [v2 qosMetricsFields];

  if (v16)
  {
    long long v17 = +[AppInstallationEvent metricsOverlayWithPurchaseInfo:v2];
    [v15 addEntriesFromDictionary:v17];
  }
  long long v18 = [v2 metricsOverlay];

  if (v18)
  {
    long long v19 = [v2 metricsOverlay];
    [v15 addEntriesFromDictionary:v19];
  }
  [v6 setMetricsOverlay:v15];

LABEL_9:
  long long v20 = [v2 clientInfo];
  id v21 = [v2 presentingSceneBundleIdentifier];

  if (v21)
  {
    if (!v20)
    {
      long long v20 = sub_1000169A4();
    }
    uint64_t v22 = [v2 presentingSceneBundleIdentifier];
    [v20 setProxyAppBundleID:v22];
  }
  [v6 setClientInfo:v20];

  id v23 = [_TtC9appstored6LogKey alloc];
  id v24 = [v2 logCode];
  id v25 = [v2 externalID];
  id v26 = [v2 bundleID];
  id v27 = [v2 itemID];
  id v28 = [(LogKey *)v23 initWithBatchLogKey:0 logCode:v24 externalID:v25 bundleID:v26 itemID:v27];

  uint64_t v29 = [(LogKey *)v28 description];
  [v6 setLogUUID:v29];

  return v6;
}

BOOL sub_1003E35C4(BOOL result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    id v2 = [(id)result connection];
    id v3 = sub_1002FF3DC((uint64_t)InstallAttributionParamsDatabaseEntity, v2, 0);

    if (v3) {
      return 1;
    }
    id v4 = [v1 connection];
    id v5 = sub_1002FF3DC((uint64_t)InstallAttributionPingbackDatabaseEntity, v4, 0);

    if (v5) {
      return 1;
    }
    id v6 = [v1 connection];
    uint64_t v7 = sub_1002FF3DC((uint64_t)InstallAttributionImpressionDatabaseEntity, v6, 0);

    if (v7)
    {
      return 1;
    }
    else
    {
      id v8 = [v1 connection];
      id v9 = sub_1002FF3DC((uint64_t)InstallAttributionPingbackFetchInfoDatabaseEntity, v8, 0);

      return v9 != 0;
    }
  }
  return result;
}

BOOL sub_1003E36EC(BOOL a1, void *a2)
{
  BOOL v2 = a1;
  if (a1)
  {
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"source_app_adam_id", [a2 unsignedLongLongValue]);
    id v4 = [(id)v2 connection];
    id v5 = sub_1002FF548((uint64_t)InstallAttributionImpressionDatabaseEntity, v4, v3);

    BOOL v2 = (uint64_t)[v5 countOfEntities] > 0;
  }
  return v2;
}

id sub_1003E3798(id a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v3 longLongValue]);
    id v6 = [a1 connection];
    CFStringRef v20 = @"timestamp";
    uint64_t v7 = +[NSArray arrayWithObjects:&v20 count:1];
    CFStringRef v19 = @"DESC";
    id v8 = +[NSArray arrayWithObjects:&v19 count:1];
    id v9 = sub_1002FFCF8((uint64_t)InstallAttributionWebParamsDatabaseEntity, v6, v5, v7, v8);

    uint64_t v13 = 0;
    id v14 = &v13;
    uint64_t v15 = 0x3032000000;
    __int16 v16 = sub_100018428;
    long long v17 = sub_100017DD0;
    id v18 = (id)objc_opt_new();
    long long v10 = sub_1002A756C();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1003E39F4;
    v12[3] = &unk_100526568;
    v12[4] = &v13;
    [v9 enumeratePersistentIDsAndProperties:v10 usingBlock:v12];

    a1 = (id)v14[5];
    _Block_object_dispose(&v13, 8);
  }
  return a1;
}

void sub_1003E39D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003E39F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v13 = objc_opt_new();
  id v5 = [v4 objectForKeyedSubscript:@"app_adam_id"];
  sub_100263BD8((uint64_t)v13, v5);

  id v6 = [v4 objectForKeyedSubscript:@"ad_network_registrable_domain"];
  sub_100263BE8((uint64_t)v13, v6);

  uint64_t v7 = [v4 objectForKeyedSubscript:@"impression_id"];
  sub_10027D6CC((uint64_t)v13, v7);

  id v8 = [v4 objectForKeyedSubscript:@"source_web_registrable_domain"];
  sub_10027BF34((uint64_t)v13, v8);

  id v9 = [v4 objectForKeyedSubscript:@"version"];
  sub_100263BF8((uint64_t)v13, v9);

  long long v10 = [v4 objectForKeyedSubscript:@"timestamp"];
  sub_100263C08((uint64_t)v13, v10);

  uint64_t v11 = [v4 objectForKeyedSubscript:@"attribution_context"];

  id v12 = [v11 integerValue];
  if (v13) {
    v13[7] = v12;
  }

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v13];
}

id sub_1003E3B90(id a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 longLongValue]);
    uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"ad_network_id" equalToValue:v5];

    v12[0] = v6;
    v12[1] = v7;
    id v8 = +[NSArray arrayWithObjects:v12 count:2];
    id v9 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v8];

    long long v10 = sub_1003E3CDC(v3, v9, 0);
    id v3 = [v10 firstObject];
  }
  return v3;
}

id sub_1003E3CDC(id a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    uint64_t v7 = objc_opt_new();
    id v8 = [v3 connection];
    id v9 = sub_1002FFC6C((uint64_t)InstallAttributionParamsDatabaseEntity, v8, v6, v5);

    long long v10 = sub_10026F8A0();
    uint64_t v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    uint64_t v15 = sub_1003E3E38;
    __int16 v16 = &unk_100528D18;
    id v17 = v7;
    id v18 = v3;
    id v11 = v7;
    [v9 enumeratePersistentIDsAndProperties:v10 usingBlock:&v13];

    +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11, v13, v14, v15, v16);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

void sub_1003E3E38(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a3;
  if (!v4) {
    goto LABEL_23;
  }
  id v24 = objc_alloc_init(InstallAttributionParams);
  id v6 = [v5 objectForKeyedSubscript:@"app_adam_id"];
  sub_100263BD8((uint64_t)v24, v6);

  uint64_t v7 = [v5 objectForKeyedSubscript:@"ad_network_id"];
  sub_100263BE8((uint64_t)v24, v7);

  id v8 = [v5 objectForKeyedSubscript:@"impression_id"];
  sub_100263BF8((uint64_t)v24, v8);

  id v9 = [v5 objectForKeyedSubscript:@"timestamp"];
  sub_100263C38((uint64_t)v24, v9);

  long long v10 = [v5 objectForKeyedSubscript:@"attribution_signature"];
  sub_100263C48((uint64_t)v24, v10);

  id v11 = [v5 objectForKeyedSubscript:@"source_app_adam_id"];
  sub_100263C18((uint64_t)v24, v11);

  id v12 = [v5 objectForKeyedSubscript:@"fidelity_type"];
  id v13 = [v12 integerValue];
  if (v24) {
    v24->_fidelityType = (int64_t)v13;
  }

  uint64_t v14 = [v5 objectForKeyedSubscript:@"version"];
  sub_100263C58((uint64_t)v24, v14);

  uint64_t v15 = [v5 objectForKeyedSubscript:@"local_timestamp"];
  sub_10027030C((uint64_t)v24, v15);

  __int16 v16 = [v5 objectForKeyedSubscript:@"interaction_type"];
  sub_100270214((uint64_t)v24, v16);

  id v17 = [v5 objectForKeyedSubscript:@"environment"];
  sub_100270224((uint64_t)v24, v17);

  uint64_t v18 = sub_10026FBD4((uint64_t)v24);
  if (v18 <= 199)
  {
    if (!v18)
    {
      CFStringRef v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[SKAdNetwork]: Unknown version found while unpacking impression params from database entity dictionary", buf, 2u);
      }
      goto LABEL_13;
    }
    if (v18 != 100) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if ((unint64_t)(v18 - 200) < 3)
  {
LABEL_11:
    CFStringRef v19 = [v5 objectForKeyedSubscript:@"campaign_id"];
    id v20 = [v19 integerValue];
    if (v24) {
      v24->_campaignId = (int64_t)v20;
    }
    goto LABEL_13;
  }
  if (v18 == 400)
  {
    id v21 = [v5 objectForKeyedSubscript:@"source_identifier"];
    id v22 = [v21 integerValue];
    if (v24)
    {
      v24->_sourceIdentifier = (int64_t)v22;

      if (v24->_fidelityType != 1) {
        goto LABEL_14;
      }
      id v23 = [v5 objectForKeyedSubscript:@"web_impression_id"];
      objc_storeStrong((id *)&v24->_webImpressionId, v23);

      CFStringRef v19 = [v5 objectForKeyedSubscript:@"source_domain"];
      objc_storeStrong((id *)&v24->_sourceDomain, v19);
LABEL_13:

      goto LABEL_14;
    }

LABEL_23:
    id v24 = 0;
    goto LABEL_14;
  }
  if (v18 == 300) {
    goto LABEL_11;
  }
LABEL_14:

  [v3 addObject:v24];
}

id sub_1003E41B4(id result, void *a2)
{
  if (result)
  {
    BOOL v2 = result;
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 unsignedLongLongValue]);
    uint64_t v4 = [v2 connection];
    id v5 = sub_1002FF548((uint64_t)InstallAttributionParamsDatabaseEntity, v4, v3);

    id v6 = [v5 countOfEntities];
    return v6;
  }
  return result;
}

id sub_1003E4260(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 unsignedLongLongValue]);
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"environment" equalToValue:@"development"];
    v10[0] = v3;
    v10[1] = v4;
    id v5 = +[NSArray arrayWithObjects:v10 count:2];
    id v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];

    uint64_t v7 = [v2 connection];
    id v8 = sub_1002FF548((uint64_t)InstallAttributionParamsDatabaseEntity, v7, v6);

    id v2 = [v8 countOfEntities];
  }
  return v2;
}

id sub_1003E43AC(id a1, void *a2)
{
  id v22 = a2;
  if (a1)
  {
    v39[0] = @"app_adam_id";
    v39[1] = @"ad_network_id";
    v39[2] = @"campaign_id";
    v39[3] = @"source_identifier";
    v39[4] = @"impression_id";
    v39[5] = @"web_impression_id";
    v39[6] = @"timestamp";
    v39[7] = @"attribution_signature";
    v39[8] = @"source_app_adam_id";
    v39[9] = @"source_domain";
    v39[10] = @"version";
    v39[11] = @"local_timestamp";
    v39[12] = @"fidelity_type";
    v39[13] = @"interaction_type";
    v39[14] = @"environment";
    id v23 = +[NSArray arrayWithObjects:v39 count:15];
    id v24 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v22 unsignedLongLongValue]);
    uint64_t v27 = 0;
    id v28 = &v27;
    uint64_t v29 = 0x3032000000;
    id v30 = sub_100018428;
    id v31 = sub_100017DD0;
    id v32 = (id)objc_opt_new();
    uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"fidelity_type" equalToValue:&off_10054CF48];
    v38[0] = v24;
    v38[1] = v3;
    id v20 = (void *)v3;
    uint64_t v4 = +[NSArray arrayWithObjects:v38 count:2];
    id v21 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v4];

    id v5 = [a1 connection];
    CFStringRef v37 = @"local_timestamp";
    id v6 = +[NSArray arrayWithObjects:&v37 count:1];
    CFStringRef v36 = @"DESC";
    uint64_t v7 = +[NSArray arrayWithObjects:&v36 count:1];
    id v8 = sub_1002FFCF8((uint64_t)InstallAttributionParamsDatabaseEntity, v5, v21, v6, v7);

    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1003E48B8;
    v26[3] = &unk_100526568;
    v26[4] = &v27;
    [v8 enumeratePersistentIDsAndProperties:v23 usingBlock:v26];
    id v9 = [(id)v28[5] count];
    long long v10 = (void *)v28[5];
    if (v9 == (id)6)
    {
      a1 = v10;
    }
    else
    {
      id v19 = [v10 count];
      id v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"fidelity_type" equalToValue:&off_10054CF60];
      v35[0] = v24;
      v35[1] = v11;
      id v12 = +[NSArray arrayWithObjects:v35 count:2];
      id v13 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v12];

      uint64_t v14 = [a1 connection];
      CFStringRef v34 = @"local_timestamp";
      uint64_t v15 = +[NSArray arrayWithObjects:&v34 count:1];
      CFStringRef v33 = @"DESC";
      __int16 v16 = +[NSArray arrayWithObjects:&v33 count:1];
      id v17 = sub_1002FFCF8((uint64_t)InstallAttributionParamsDatabaseEntity, v14, v13, v15, v16);

      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1003E4BC8;
      v25[3] = &unk_100522EE8;
      v25[4] = &v27;
      v25[5] = 6 - (void)v19;
      [v17 enumeratePersistentIDsAndProperties:v23 usingBlock:v25];
      a1 = (id)v28[5];
    }
    _Block_object_dispose(&v27, 8);
  }
  return a1;
}

void sub_1003E4880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1003E48B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  id v28 = a3;
  id v8 = objc_alloc_init(InstallAttributionParams);
  id v9 = [v28 objectForKeyedSubscript:@"app_adam_id"];
  sub_100263BD8((uint64_t)v8, v9);

  long long v10 = [v28 objectForKeyedSubscript:@"ad_network_id"];
  sub_100263BE8((uint64_t)v8, v10);

  id v11 = [v28 objectForKeyedSubscript:@"version"];
  sub_100263C58((uint64_t)v8, v11);

  if (v8
    && (id v12 = v8->_version) != 0
    && (v13 = v12, uint64_t v14 = ASDInstallAttributionVersionCreateFromString(), v13, v14 >= 400))
  {
    uint64_t v15 = [v28 objectForKeyedSubscript:@"source_identifier"];
    v8->_sourceIdentifier = (int64_t)[v15 integerValue];

    __int16 v16 = [v28 objectForKeyedSubscript:@"web_impression_id"];
    sub_100263C08((uint64_t)v8, v16);
  }
  else
  {
    __int16 v16 = [v28 objectForKeyedSubscript:@"campaign_id"];
    id v17 = [v16 integerValue];
    if (v8) {
      v8->_campaignId = (int64_t)v17;
    }
  }

  uint64_t v18 = [v28 objectForKeyedSubscript:@"impression_id"];
  sub_100263BF8((uint64_t)v8, v18);

  id v19 = [v28 objectForKeyedSubscript:@"timestamp"];
  sub_100263C38((uint64_t)v8, v19);

  id v20 = [v28 objectForKeyedSubscript:@"attribution_signature"];
  sub_100263C48((uint64_t)v8, v20);

  id v21 = [v28 objectForKeyedSubscript:@"source_app_adam_id"];
  sub_100263C18((uint64_t)v8, v21);

  id v22 = [v28 objectForKeyedSubscript:@"source_domain"];
  sub_100263C28((uint64_t)v8, v22);

  id v23 = [v28 objectForKeyedSubscript:@"local_timestamp"];
  sub_10027030C((uint64_t)v8, v23);

  id v24 = [v28 objectForKeyedSubscript:@"fidelity_type"];
  id v25 = [v24 integerValue];
  if (v8) {
    v8->_fidelityType = (int64_t)v25;
  }

  id v26 = [v28 objectForKeyedSubscript:@"interaction_type"];
  sub_100270214((uint64_t)v8, v26);

  uint64_t v27 = [v28 objectForKeyedSubscript:@"environment"];
  sub_100270224((uint64_t)v8, v27);

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v8];
  if (a4 == 5) {
    *a5 = 1;
  }
}

void sub_1003E4BC8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  id v27 = a3;
  id v8 = objc_alloc_init(InstallAttributionParams);
  id v9 = [v27 objectForKeyedSubscript:@"app_adam_id"];
  sub_100263BD8((uint64_t)v8, v9);

  long long v10 = [v27 objectForKeyedSubscript:@"ad_network_id"];
  sub_100263BE8((uint64_t)v8, v10);

  id v11 = [v27 objectForKeyedSubscript:@"version"];
  sub_100263C58((uint64_t)v8, v11);

  if (v8
    && (id v12 = v8->_version) != 0
    && (v13 = v12, uint64_t v14 = ASDInstallAttributionVersionCreateFromString(), v13, v14 >= 400))
  {
    uint64_t v15 = [v27 objectForKeyedSubscript:@"source_identifier"];
    __int16 v16 = (objc_class *)[v15 integerValue];
    uint64_t v17 = 32;
  }
  else
  {
    uint64_t v15 = [v27 objectForKeyedSubscript:@"campaign_id"];
    __int16 v16 = (objc_class *)[v15 integerValue];
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v17 = 24;
  }
  *(Class *)((char *)&v8->super.isa + v17) = v16;
LABEL_8:

  uint64_t v18 = [v27 objectForKeyedSubscript:@"impression_id"];
  sub_100263BF8((uint64_t)v8, v18);

  id v19 = [v27 objectForKeyedSubscript:@"timestamp"];
  sub_100263C38((uint64_t)v8, v19);

  id v20 = [v27 objectForKeyedSubscript:@"attribution_signature"];
  sub_100263C48((uint64_t)v8, v20);

  id v21 = [v27 objectForKeyedSubscript:@"source_app_adam_id"];
  sub_100263C18((uint64_t)v8, v21);

  id v22 = [v27 objectForKeyedSubscript:@"local_timestamp"];
  sub_10027030C((uint64_t)v8, v22);

  id v23 = [v27 objectForKeyedSubscript:@"fidelity_type"];
  id v24 = [v23 integerValue];
  if (v8) {
    v8->_fidelityType = (int64_t)v24;
  }

  id v25 = [v27 objectForKeyedSubscript:@"interaction_type"];
  sub_100270214((uint64_t)v8, v25);

  id v26 = [v27 objectForKeyedSubscript:@"environment"];
  sub_100270224((uint64_t)v8, v26);

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v8];
  if (*(void *)(a1 + 40) == a4 + 1) {
    *a5 = 1;
  }
}

id sub_1003E4E94(id a1, uint64_t a2, char a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"app_bundle_id" equalToValue:a2];
    id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"app_adam_id" equalToLongLong:0];
    uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"registered" equalToLongLong:1];
    id v8 = (void *)v7;
    if (a3)
    {
      v17[0] = v5;
      v17[1] = v6;
      v17[2] = v7;
      id v9 = v17;
      uint64_t v10 = 3;
    }
    else
    {
      v16[0] = v5;
      v16[1] = v6;
      id v9 = v16;
      uint64_t v10 = 2;
    }
    id v11 = +[NSArray arrayWithObjects:v9 count:v10];
    id v12 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v11];

    CFStringRef v15 = @"local_timestamp";
    id v13 = +[NSArray arrayWithObjects:&v15 count:1];
    sub_1003E5020(v3, v12, v13);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

id sub_1003E5020(id a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    uint64_t v7 = objc_opt_new();
    id v8 = [v3 connection];
    id v9 = sub_1002FFC6C((uint64_t)InstallAttributionPingbackDatabaseEntity, v8, v6, v5);

    uint64_t v10 = sub_1003F9D70();
    id v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    CFStringRef v15 = sub_1003E722C;
    __int16 v16 = &unk_100528D18;
    id v17 = v3;
    id v18 = v7;
    id v11 = v7;
    [v9 enumeratePersistentIDsAndProperties:v10 usingBlock:&v13];

    +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11, v13, v14, v15, v16, v17);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

id sub_1003E517C(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 longLongValue]);
    sub_1003E5020(v2, v3, 0);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

InstallAttributionPingback *sub_1003E5208(InstallAttributionPingback *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [a2 longLongValue]);
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"registered" equalToLongLong:1];
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_winning_pingback" equalToLongLong:1];
    id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_developer_pingback" equalToLongLong:0];
    v28[0] = v3;
    v28[1] = v4;
    v28[2] = v5;
    v28[3] = v6;
    uint64_t v7 = +[NSArray arrayWithObjects:v28 count:4];
    id v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

    id v9 = [(InstallAttributionPingback *)v2 connection];
    uint64_t v10 = sub_1002FF620((uint64_t)InstallAttributionPingbackDatabaseEntity, v9, v8);

    id v11 = objc_opt_new();
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v12 = v10;
    id v13 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v13)
    {
      id v14 = v13;
      id v21 = v4;
      id v22 = v3;
      uint64_t v15 = *(void *)v24;
      while (2)
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(v12);
          }
          id v17 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          if (sub_1003E54B0((uint64_t)v2, v17, v11))
          {
            id v18 = sub_1003F9D70();
            id v19 = [v17 getValuesForProperties:v18];

            sub_1003E57F4(v2, v19);
            id v2 = (InstallAttributionPingback *)objc_claimAutoreleasedReturnValue();

            goto LABEL_12;
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
        if (v14) {
          continue;
        }
        break;
      }
      id v2 = 0;
LABEL_12:
      uint64_t v4 = v21;
      id v3 = v22;
    }
    else
    {
      id v2 = 0;
    }
  }
  return v2;
}

uint64_t sub_1003E54B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1)
  {
    uint64_t v23 = 0;
    goto LABEL_27;
  }
  uint64_t v7 = sub_10026E82C(v5, @"conversion_value_timestamp");
  id v8 = sub_10026E91C(v5, @"postback_sequence_index");
  id v9 = sub_10030B11C();
  uint64_t v42 = 0;
  uint64_t v10 = sub_10030B948((uint64_t)v9, @"install-attribution-conversion-window-lengths", &v42);
  uint64_t v11 = v42;

  if (v11)
  {
    id v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[SKAdNetwork: Could not load bag keys for conversion windows", buf, 2u);
    }
  }
  id v39 = (void *)v7;
  if (v10) {
    id v13 = (__CFString *)v10;
  }
  else {
    id v13 = @"0:2-3:7-8:35";
  }
  id v14 = [v5 objectForKeyedSubscript:@"environment"];
  uint64_t v15 = +[SKANEnvironmentHelper windowDurationOverrideForEnvironment:v14];
  __int16 v16 = v15;
  id v17 = v6;
  if (v15)
  {
    id v18 = v15;

    id v13 = v18;
  }
  id v19 = sub_1002F2628(v13);
  id v20 = [v19 objectAtIndexedSubscript:0];
  id v21 = [v19 objectAtIndexedSubscript:1];
  uint64_t v38 = v21;
  if (v8 > [v20 count])
  {
    id v22 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v40 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[SKAdNetwork: Postback sequence index is larger than max conversion windows. Aborting.", v40, 2u);
    }
    uint64_t v23 = 0;
    id v6 = v17;
    long long v24 = v39;
    goto LABEL_26;
  }
  CFStringRef v37 = v14;
  long long v25 = [v20 objectAtIndexedSubscript:v8];
  uint64_t v26 = (uint64_t)[v25 integerValue];

  id v27 = [v21 objectAtIndexedSubscript:v8];
  uint64_t v28 = (uint64_t)[v27 integerValue];

  [v39 doubleValue];
  id v30 = +[NSDate dateWithTimeIntervalSince1970:v29 / 1000.0];
  id v22 = v30;
  uint64_t v31 = 86400 * v26;
  if (v16) {
    uint64_t v31 = v26;
  }
  else {
    v28 *= 86400;
  }
  id v32 = [v30 dateByAddingTimeInterval:(double)v31];
  CFStringRef v33 = [v22 dateByAddingTimeInterval:(double)v28];
  id v34 = [v17 compare:v33];
  BOOL v35 = v34 == (id)1;
  if (!v8) {
    goto LABEL_22;
  }
  if (v34 != (id)1)
  {
    BOOL v35 = (char *)[v17 compare:v32] + 1 == 0;
LABEL_22:
    uint64_t v23 = !v35;
    goto LABEL_25;
  }
  uint64_t v23 = 0;
LABEL_25:

  id v6 = v17;
  long long v24 = v39;
  id v14 = v37;
LABEL_26:

LABEL_27:
  return v23;
}

InstallAttributionPingback *sub_1003E57F4(InstallAttributionPingback *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    a1 = objc_alloc_init(InstallAttributionPingback);
    uint64_t v4 = [v3 objectForKeyedSubscript:@"app_adam_id"];
    sub_100263BE8((uint64_t)a1, v4);

    id v5 = [v3 objectForKeyedSubscript:@"app_bundle_id"];
    sub_10027D6CC((uint64_t)a1, v5);

    id v6 = [v3 objectForKeyedSubscript:@"ad_network_id"];
    sub_10027BF34((uint64_t)a1, v6);

    uint64_t v7 = [v3 objectForKeyedSubscript:@"campaign_id"];
    id v8 = [v7 integerValue];
    if (a1) {
      a1->_campaignId = (int64_t)v8;
    }
    id v9 = [v3 objectForKeyedSubscript:@"source_identifier"];
    sub_100263C38((uint64_t)a1, v9);

    uint64_t v10 = [v3 objectForKeyedSubscript:@"transaction_id"];
    sub_100263C08((uint64_t)a1, v10);

    uint64_t v11 = [v3 objectForKeyedSubscript:@"attribution_signature"];
    sub_100263C18((uint64_t)a1, v11);

    id v12 = [v3 objectForKeyedSubscript:@"source_app_adam_id"];
    sub_100263C28((uint64_t)a1, v12);

    id v13 = [v3 objectForKeyedSubscript:@"source_domain"];
    sub_100263C48((uint64_t)a1, v13);

    id v14 = [v3 objectForKeyedSubscript:@"conversion_value"];
    id v15 = [v14 integerValue];
    if (a1) {
      a1->_conversionValue = (int64_t)v15;
    }
    __int16 v16 = [v3 objectForKeyedSubscript:@"coarse_conversion_value"];
    sub_10027030C((uint64_t)a1, v16);

    id v17 = [v3 objectForKeyedSubscript:@"conversion_value_timestamp"];
    sub_100263C68((uint64_t)a1, v17);

    id v18 = [v3 objectForKeyedSubscript:@"pingback_url"];
    sub_100270214((uint64_t)a1, v18);

    id v19 = [v3 objectForKeyedSubscript:@"redownload"];
    unsigned __int8 v20 = [v19 BOOLValue];
    if (a1) {
      a1->_redownload = v20;
    }

    id v21 = [v3 objectForKeyedSubscript:@"registered"];
    unsigned __int8 v22 = [v21 BOOLValue];
    if (a1) {
      a1->_registered = v22;
    }

    uint64_t v23 = [v3 objectForKeyedSubscript:@"retry_count"];
    id v24 = [v23 integerValue];
    if (a1) {
      a1->_retryCount = (int64_t)v24;
    }

    long long v25 = [v3 objectForKeyedSubscript:@"retry_timestamp"];
    sub_10027BF44((uint64_t)a1, v25);

    uint64_t v26 = [v3 objectForKeyedSubscript:@"version"];
    sub_10027BE20((uint64_t)a1, v26);

    id v27 = [v3 objectForKeyedSubscript:@"local_timestamp"];
    sub_10027BF54((uint64_t)a1, v27);

    uint64_t v28 = [v3 objectForKeyedSubscript:@"maturity_timestamp"];
    sub_10027BF64((uint64_t)a1, v28);

    double v29 = [v3 objectForKeyedSubscript:@"fidelity_type"];
    id v30 = [v29 integerValue];
    if (a1) {
      a1->_fidelityType = (int64_t)v30;
    }
    uint64_t v31 = [v3 objectForKeyedSubscript:@"is_winning_pingback"];
    unsigned __int8 v32 = [v31 BOOLValue];
    if (a1) {
      a1->_didWin = v32;
    }

    CFStringRef v33 = [v3 objectForKeyedSubscript:@"postback_sequence_index"];
    id v34 = [v33 integerValue];
    if (a1) {
      a1->_postbackSequenceIndex = (int64_t)v34;
    }
    BOOL v35 = [v3 objectForKeyedSubscript:@"is_developer_pingback"];
    unsigned __int8 v36 = [v35 BOOLValue];
    if (a1) {
      a1->_isDeveloperPingback = v36;
    }

    CFStringRef v37 = [v3 objectForKeyedSubscript:@"is_locked"];
    unsigned __int8 v38 = [v37 BOOLValue];
    if (a1)
    {
      a1->_isLocked = v38;

      id v39 = [v3 objectForKeyedSubscript:@"environment"];
      sub_10027D6DC((uint64_t)a1, v39);

      id v40 = a1->_version;
      if (v40)
      {
        BOOL v41 = ASDInstallAttributionVersionCreateFromString() > 399;
        goto LABEL_23;
      }
    }
    else
    {

      long long v46 = [v3 objectForKeyedSubscript:@"environment"];
      sub_10027D6DC(0, v46);

      id v40 = 0;
    }
    BOOL v41 = 0;
LABEL_23:

    uint64_t v42 = [v3 objectForKeyedSubscript:@"should_send_conversion_value"];
    unsigned __int8 v43 = [v42 BOOLValue];
    if (v41)
    {
      if (a1) {
        a1->_shouldSendFineConversionValue = v43;
      }

      uint64_t v42 = [v3 objectForKeyedSubscript:@"should_send_coarse_conversion_value"];
      unsigned __int8 v43 = [v42 BOOLValue];
      if (!a1) {
        goto LABEL_31;
      }
      uint64_t v44 = 10;
    }
    else
    {
      if (!a1)
      {
LABEL_31:

        goto LABEL_32;
      }
      uint64_t v44 = 8;
    }
    *((unsigned char *)&a1->super.isa + v44) = v43;
    goto LABEL_31;
  }
LABEL_32:

  return a1;
}

id sub_1003E5D30(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"registered" equalToLongLong:1];
    sub_1003E5020(v1, v2, 0);
    id v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

id sub_1003E5DA4(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"registered" equalToLongLong:1];
    id v5 = sub_1003E5EC8(v3);

    v9[0] = v4;
    v9[1] = v5;
    id v6 = +[NSArray arrayWithObjects:v9 count:2];
    uint64_t v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

    sub_1003E5020(v2, v7, 0);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_1003E5EC8(void *a1)
{
  id v1 = a1;
  id v2 = objc_opt_new();
  if ([v1 containsObject:@"development"])
  {
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"environment" equalToValue:@"development"];
    [v2 addObject:v3];
  }
  if ([v1 containsObject:@"production"])
  {
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"environment" equalToValue:@"production"];
    [v2 addObject:v4];

    id v5 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"environment"];
    [v2 addObject:v5];
  }
  id v6 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v2];

  return v6;
}

id sub_1003E5FF4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v35 = a3;
  if (a1)
  {
    id v34 = +[SQLiteComparisonPredicate predicateWithProperty:@"registered" equalToLongLong:1];
    CFStringRef v33 = sub_1003E5EC8(v35);
    v70[0] = v34;
    v70[1] = v33;
    id v6 = +[NSArray arrayWithObjects:v70 count:2];
    unsigned __int8 v32 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

    uint64_t v7 = [a1 connection];
    CFStringRef v69 = @"local_timestamp";
    id v8 = +[NSArray arrayWithObjects:&v69 count:1];
    CFStringRef v68 = @"ASC";
    id v9 = +[NSArray arrayWithObjects:&v68 count:1];
    uint64_t v31 = sub_1002FFCF8((uint64_t)InstallAttributionPingbackDatabaseEntity, v7, v32, v8, v9);

    uint64_t v37 = 0;
    unsigned __int8 v38 = &v37;
    uint64_t v39 = 0x3032000000;
    id v40 = sub_100018428;
    BOOL v41 = sub_100017DD0;
    id v42 = (id)objc_opt_new();
    uint64_t v10 = sub_1003F9D70();
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    void v36[2] = sub_1003E6748;
    v36[3] = &unk_10052C708;
    v36[4] = a1;
    v36[5] = &v37;
    [v31 enumeratePersistentIDsAndProperties:v10 usingBlock:v36];

    uint64_t v11 = (void *)v38[5];
    id v12 = v5;
    id v13 = v11;
    id v14 = sub_100392558(v13, &stru_10052C728);
    id v15 = sub_100392558(v13, &stru_10052C748);

    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    void v46[2] = sub_1003E6854;
    v46[3] = &unk_10052C770;
    id v16 = v12;
    id v47 = v16;
    id v17 = sub_100392558(v14, v46);

    id v18 = [v16 dateByAddingTimeInterval:-86400.0];
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_1003E68DC;
    v43[3] = &unk_10052C798;
    id v19 = v16;
    id v44 = v19;
    id v45 = v18;
    id v30 = v18;
    unsigned __int8 v20 = sub_100392558(v15, v43);

    id v21 = +[NSMutableArray arrayWithArray:v17];
    [v21 addObjectsFromArray:v20];
    [v21 sortUsingComparator:&stru_10052C7B8];
    unsigned __int8 v22 = sub_100392558(v21, &stru_10052C7D8);
    uint64_t v23 = sub_100392558(v21, &stru_10052C7F8);
    id v24 = sub_100392558(v21, &stru_10052C818);
    id v25 = v22;
    id v26 = v23;
    id v27 = v24;
    uint64_t v62 = 0;
    char v63 = &v62;
    uint64_t v64 = 0x3032000000;
    long long v65 = sub_100018428;
    long long v66 = sub_100017DD0;
    id v67 = (id)objc_opt_new();
    uint64_t v56 = 0;
    __int16 v57 = &v56;
    uint64_t v58 = 0x3032000000;
    uint64_t v59 = sub_100018428;
    id v60 = sub_100017DD0;
    id v61 = (id)objc_opt_new();
    if (v25)
    {
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472;
      v55[2] = sub_1003E7288;
      v55[3] = &unk_10052C840;
      v55[4] = &v62;
      v55[5] = &v56;
      [v25 enumerateObjectsUsingBlock:v55];
    }
    if (v26)
    {
      long long v49 = 0;
      uint64_t v50 = (uint64_t)&v49;
      uint64_t v51 = 0x3032000000;
      long long v52 = sub_100018428;
      long long v53 = sub_100017DD0;
      long long v54 = (uint64_t *)objc_opt_new();
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_1003E73A0;
      v48[3] = &unk_10052C840;
      v48[4] = &v49;
      v48[5] = &v56;
      [v26 enumerateObjectsUsingBlock:v48];
      [(id)v63[5] unionSet:*(void *)(v50 + 40)];
      _Block_object_dispose(&v49, 8);
    }
    if (v27)
    {
      long long v49 = _NSConcreteStackBlock;
      uint64_t v50 = 3221225472;
      uint64_t v51 = (uint64_t)sub_1003E74B8;
      long long v52 = (uint64_t (*)(uint64_t, uint64_t))&unk_10052C840;
      long long v53 = (void (*)(uint64_t))&v62;
      long long v54 = &v56;
      [v27 enumerateObjectsUsingBlock:&v49];
    }
    id v28 = (id)v57[5];
    _Block_object_dispose(&v56, 8);

    _Block_object_dispose(&v62, 8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    id v28 = 0;
  }

  return v28;
}

void sub_1003E66E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose((const void *)(v14 - 240), 8);
  _Block_object_dispose((const void *)(v14 - 192), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003E6748(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1003E57F4(*(InstallAttributionPingback **)(a1 + 32), a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v4];
}

BOOL sub_1003E67AC(id a1, InstallAttributionPingback *a2)
{
  if (!a2)
  {
    id v2 = 0;
    goto LABEL_6;
  }
  id v2 = a2->_version;
  if (!v2)
  {
LABEL_6:
    BOOL v3 = 0;
    goto LABEL_4;
  }
  BOOL v3 = ASDInstallAttributionVersionCreateFromString() > 399;
LABEL_4:

  return v3;
}

BOOL sub_1003E6800(id a1, InstallAttributionPingback *a2)
{
  if (!a2)
  {
    id v2 = 0;
    goto LABEL_6;
  }
  id v2 = a2->_version;
  if (!v2)
  {
LABEL_6:
    BOOL v3 = 1;
    goto LABEL_4;
  }
  BOOL v3 = ASDInstallAttributionVersionCreateFromString() < 400;
LABEL_4:

  return v3;
}

BOOL sub_1003E6854(uint64_t a1, uint64_t a2)
{
  if (a2) {
    BOOL v3 = *(void **)(a2 + 152);
  }
  else {
    BOOL v3 = 0;
  }
  id v4 = v3;
  [v4 doubleValue];
  id v6 = +[NSDate dateWithTimeIntervalSince1970:v5 / 1000.0];

  BOOL v7 = [v6 compare:*(void *)(a1 + 32)] != (id)1;
  return v7;
}

BOOL sub_1003E68DC(uint64_t a1, void *a2)
{
  BOOL v3 = a2;
  id v4 = v3;
  if (v3) {
    double v5 = (void *)v3[22];
  }
  else {
    double v5 = 0;
  }
  id v6 = v5;
  BOOL v7 = +[SKANEnvironmentHelper pingbackDelayOverrideForEnvironment:v6];

  if (!v7
    || (objc_msgSend(*(id *)(a1 + 32), "dateByAddingTimeInterval:", (double)-(uint64_t)objc_msgSend(v7, "integerValue")),
        id v8 = objc_claimAutoreleasedReturnValue(),
        (id v9 = v8) == 0))
  {
    id v8 = 0;
    id v9 = *(void **)(a1 + 40);
  }
  id v10 = v9;
  if (v4) {
    uint64_t v11 = (void *)v4[13];
  }
  else {
    uint64_t v11 = 0;
  }
  id v12 = v11;
  [v12 doubleValue];
  uint64_t v14 = +[NSDate dateWithTimeIntervalSince1970:v13 / 1000.0];

  id v15 = [v14 compare:v10];
  return v15 != (id)1;
}

int64_t sub_1003E6A00(id a1, id a2, id a3)
{
  id v4 = a3;
  if (a2) {
    double v5 = (void *)*((void *)a2 + 18);
  }
  else {
    double v5 = 0;
  }
  id v6 = v5;
  if (v4) {
    BOOL v7 = (void *)v4[18];
  }
  else {
    BOOL v7 = 0;
  }
  id v8 = v7;

  id v9 = [v6 compare:v8];
  return (int64_t)v9;
}

BOOL sub_1003E6A80(id a1, InstallAttributionPingback *a2)
{
  id v2 = a2;
  BOOL v3 = v2 && v2->_didWin && !v2->_isDeveloperPingback;

  return v3;
}

BOOL sub_1003E6AC8(id a1, InstallAttributionPingback *a2)
{
  id v2 = a2;
  BOOL v3 = v2 && v2->_didWin && v2->_isDeveloperPingback;

  return v3;
}

BOOL sub_1003E6B10(id a1, InstallAttributionPingback *a2)
{
  return !a2 || !a2->_didWin;
}

BOOL sub_1003E6B2C(BOOL a1, void *a2)
{
  BOOL v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v18 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v3 longLongValue]);
    id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"registered" equalToLongLong:1];
    v20[0] = v18;
    v20[1] = v4;
    double v5 = +[NSArray arrayWithObjects:v20 count:2];
    id v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];

    id v7 = [v3 longLongValue];
    id v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"app_adam_id" equalToLongLong:v7];
    id v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_registered" equalToLongLong:1];
    v19[0] = v8;
    v19[1] = v9;
    id v10 = +[NSArray arrayWithObjects:v19 count:2];
    uint64_t v11 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v10];

    id v12 = [(id)v2 connection];
    uint64_t v13 = sub_1002FF3DC((uint64_t)InstallAttributionPingbackDatabaseEntity, v12, v6);

    uint64_t v14 = [(id)v2 connection];
    uint64_t v15 = sub_1002FF3DC((uint64_t)SKANGhostbackEntity, v14, v11);
    uint64_t v16 = v13 | v15;

    BOOL v2 = v16 != 0;
  }
  return v2;
}

id sub_1003E6D58(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    double v5 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v3 longLongValue]);
    id v6 = [a1 connection];
    id v7 = sub_1002FF548((uint64_t)SKANGhostbackEntity, v6, v5);

    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x3032000000;
    uint64_t v14 = sub_100018428;
    uint64_t v15 = sub_100017DD0;
    id v16 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1003E6EF4;
    v10[3] = &unk_100521428;
    v10[4] = &v11;
    [v7 enumerateMemoryEntitiesUsingBlock:v10];
    id v8 = (id)v12[5];
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1003E6EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003E6EF4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

id sub_1003E6F2C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    double v5 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"app_adam_id", [v3 longLongValue]);
    id v6 = [a1 connection];
    id v7 = sub_1002FF548((uint64_t)SKANTokenEntity, v6, v5);

    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x3032000000;
    uint64_t v14 = sub_100018428;
    uint64_t v15 = sub_100017DD0;
    id v16 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1003E70C8;
    v10[3] = &unk_100521428;
    v10[4] = &v11;
    [v7 enumerateMemoryEntitiesUsingBlock:v10];
    id v8 = (id)v12[5];
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1003E70B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003E70C8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

id sub_1003E7100(id a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = objc_opt_new();
    id v8 = [v3 connection];
    id v9 = sub_1002FFC6C((uint64_t)SKANGhostbackEntity, v8, v6, v5);

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003E7220;
    v11[3] = &unk_1005213B0;
    id v3 = v7;
    id v12 = v3;
    [v9 enumerateMemoryEntitiesUsingBlock:v11];
  }
  return v3;
}

id sub_1003E7220(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_1003E722C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1003E57F4(*(InstallAttributionPingback **)(a1 + 32), a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 40) addObject:v4];
}

void sub_1003E7288(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = v3;
  if (v3)
  {
    id v4 = *((id *)v3 + 4);
    id v5 = (void *)v11[22];
  }
  else
  {
    id v4 = 0;
    id v5 = 0;
  }
  id v6 = v5;
  unsigned int v7 = +[SKANEnvironmentHelper shouldUseDevelopmentSettingsForEnvironment:v6];

  if (v11 && (uint64_t v8 = v11[15]) != 0)
  {
    if (v8 < 1) {
      int v9 = 0;
    }
    else {
      int v9 = sub_10027C86C((uint64_t)v11);
    }
  }
  else
  {
    int v9 = 1;
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) containsObject:v4]) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (v7 | v9) == 0;
  }
  if (!v10)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v11];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v4];
  }
}

void sub_1003E73A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = v3;
  if (v3)
  {
    id v4 = *((id *)v3 + 4);
    id v5 = (void *)v11[22];
  }
  else
  {
    id v4 = 0;
    id v5 = 0;
  }
  id v6 = v5;
  unsigned int v7 = +[SKANEnvironmentHelper shouldUseDevelopmentSettingsForEnvironment:v6];

  if (v11 && (uint64_t v8 = v11[15]) != 0)
  {
    if (v8 < 1) {
      int v9 = 0;
    }
    else {
      int v9 = sub_10027C86C((uint64_t)v11);
    }
  }
  else
  {
    int v9 = 1;
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) containsObject:v4]) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (v7 | v9) == 0;
  }
  if (!v10)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v11];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v4];
  }
}

void sub_1003E74B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = v3;
  if (v3)
  {
    id v4 = *((id *)v3 + 4);
    id v5 = (void *)v11[22];
  }
  else
  {
    id v4 = 0;
    id v5 = 0;
  }
  id v6 = v5;
  unsigned int v7 = +[SKANEnvironmentHelper shouldUseDevelopmentSettingsForEnvironment:v6];

  if (v11 && (uint64_t v8 = v11[15]) != 0)
  {
    if (v8 < 1) {
      int v9 = 0;
    }
    else {
      int v9 = sub_10027C86C((uint64_t)v11);
    }
  }
  else
  {
    int v9 = 1;
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) containsObject:v4]) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (v7 | v9) == 0;
  }
  if (!v10)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v11];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v4];
  }
}

void sub_1003E75E8()
{
  self;
  if (qword_1005B1218 != -1)
  {
    dispatch_once(&qword_1005B1218, &stru_10052C860);
  }
}

void sub_1003E7638(id a1)
{
  uint64_t v1 = objc_opt_new();
  BOOL v2 = (void *)qword_1005B1228;
  qword_1005B1228 = v1;

  uint64_t v3 = qword_1005B1228;
  if (qword_1005B1228)
  {
    id v4 = @"com.apple.storekitservice";
    id v5 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.storekitservice"];

    [v5 setDelegate:v3];
  }
  else
  {
    id v5 = 0;
  }
  id v6 = (void *)qword_1005B1220;
  qword_1005B1220 = (uint64_t)v5;

  unsigned int v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Starting StoreKit Service", v8, 2u);
  }

  [(id)qword_1005B1220 resume];
}

void sub_1003E81E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003E8204(uint64_t a1)
{
  BOOL v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = objc_opt_class();
    uint64_t v4 = *(void *)(a1 + 40);
    int v7 = 138543618;
    uint64_t v8 = v3;
    __int16 v9 = 2114;
    uint64_t v10 = v4;
    id v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@: Connection to %{public}@ invalidated", (uint8_t *)&v7, 0x16u);
  }
  return [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setExportedObject:0];
}

void sub_1003E82EC(uint64_t a1)
{
  BOOL v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = objc_opt_class();
    uint64_t v4 = *(void *)(a1 + 40);
    int v6 = 138543618;
    int v7 = v3;
    __int16 v8 = 2114;
    uint64_t v9 = v4;
    id v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@: Connection to %{public}@ interrupted", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1003E8578(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    int v7 = sub_1002D28B8((id *)[SQLiteTransporter alloc], v6);

    if (sub_1002D2930((uint64_t)v7))
    {
      __int16 v8 = [AppUpdatesDatabaseStore alloc];
      sub_1001F5660();
      uint64_t v9 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v10 = sub_1001F5734(v9);
      uint64_t v11 = [(SQLiteDatabaseStore *)v8 initWithDatabase:v10];

      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1003E86D4;
      v13[3] = &unk_10052C8B0;
      id v14 = v5;
      uint64_t v15 = &off_10054E0B8;
      id v16 = v11;
      id v12 = v11;
      sub_1002D2E5C((uint64_t)v7, v13);
    }
    sub_1002D2CB4((uint64_t)v7);
  }
}

void sub_1003E86D4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = +[NSString stringWithFormat:@"SELECT * FROM %@", v3];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1003E87B8;
  v6[3] = &unk_10052C888;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  sub_100009834((uint64_t)v4, v5, v6);
}

void sub_1003E87B8(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003E885C;
  v4[3] = &unk_100529848;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  sub_1000096CC(a2, v4);
}

void sub_1003E885C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  id v5 = sub_1003D5EE4(v3, *(void **)(a1 + 32));
  id v6 = [v5 objectForKeyedSubscript:@"bundle_id"];
  if (v6)
  {
    uint64_t v37 = 0;
    id v7 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v6 allowPlaceholder:0 error:&v37];
    if (v7)
    {
      id v8 = [v5 objectForKeyedSubscript:@"update_state"];
      uint64_t v9 = (char *)[v8 integerValue];

      if ((unint64_t)(v9 - 3) > 0xFFFFFFFFFFFFFFFDLL)
      {

        uint64_t v15 = [v5 objectForKeyedSubscript:@"bundle_id"];
        [v4 setObject:v15 forKeyedSubscript:@"bundle_id"];

        id v16 = [v5 objectForKeyedSubscript:@"is_background"];
        [v4 setObject:v16 forKeyedSubscript:@"is_background"];

        id v17 = [v5 objectForKeyedSubscript:@"is_offloaded"];
        [v4 setObject:v17 forKeyedSubscript:@"is_offloaded"];

        id v18 = [v5 objectForKeyedSubscript:@"is_per_device"];
        [v4 setObject:v18 forKeyedSubscript:@"is_per_device"];

        id v19 = [v5 objectForKeyedSubscript:@"purchase_id"];
        [v4 setObject:v19 forKeyedSubscript:@"purchase_id"];

        unsigned __int8 v20 = [v5 objectForKeyedSubscript:@"store_item_id"];
        [v4 setObject:v20 forKeyedSubscript:@"store_item_id"];

        id v21 = [v5 objectForKeyedSubscript:@"store_software_version_id"];
        [v4 setObject:v21 forKeyedSubscript:@"store_software_version_id"];

        unsigned __int8 v22 = [v5 objectForKeyedSubscript:@"update_state"];
        [v4 setObject:v22 forKeyedSubscript:@"update_state"];

        uint64_t v23 = sub_1003D5D5C((uint64_t)v3, @"install_date");
        id v24 = v23;
        if (v23)
        {
          [v23 doubleValue];
          id v25 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
          [v4 setObject:v25 forKeyedSubscript:@"install_date"];
        }
        id v26 = sub_1003D5D5C((uint64_t)v3, @"release_date");

        if (v26)
        {
          [v26 doubleValue];
          id v27 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
          [v4 setObject:v27 forKeyedSubscript:@"release_date"];
        }
        sub_1003D5D5C((uint64_t)v3, @"timestamp");
        id v7 = (id)objc_claimAutoreleasedReturnValue();

        if (v7)
        {
          [v7 doubleValue];
          id v28 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:");
          [v4 setObject:v28 forKeyedSubscript:@"timestamp"];
        }
        double v29 = sub_1003D5C44((uint64_t)v3, @"metrics_data");
        if (v29)
        {
          id v30 = +[NSJSONSerialization JSONObjectWithData:v29 options:0 error:0];
          if (v30) {
            [v4 setObject:v30 forKeyedSubscript:@"metrics_data"];
          }
        }
        uint64_t v31 = sub_1003D5C44((uint64_t)v3, @"store_item_data");

        if (v31)
        {
          unsigned __int8 v32 = +[NSJSONSerialization JSONObjectWithData:v31 options:0 error:0];
          if (v32) {
            [v4 setObject:v32 forKeyedSubscript:@"store_item_data"];
          }
        }
        CFStringRef v33 = *(void **)(a1 + 40);
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_1003E8E34;
        v34[3] = &unk_100526C48;
        id v35 = v6;
        id v36 = v4;
        [v33 modifyUsingTransaction:v34];

        goto LABEL_26;
      }
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v39 = v6;
        uint64_t v11 = "Skipping transported update where pending: %{public}@";
        id v12 = v10;
        uint32_t v13 = 12;
LABEL_29:
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
      }
    }
    else
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543618;
        uint64_t v39 = v6;
        __int16 v40 = 2114;
        uint64_t v41 = v37;
        uint64_t v11 = "Skipping transported update where uninstalled or demoted: %{public}@ %{public}@";
        id v12 = v10;
        uint32_t v13 = 22;
        goto LABEL_29;
      }
    }

LABEL_26:
    goto LABEL_27;
  }
  id v14 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Skipping transported update with no bundle identifier", buf, 2u);
  }

LABEL_27:
}

id sub_1003E8E34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:*(void *)(a1 + 32)];
  id v5 = [v3 connection];
  id v6 = sub_1002FF3DC((uint64_t)AppUpdateEntity, v5, v4);

  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v18 = 138543362;
      uint64_t v19 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unable to transport update with known bundle identifier: %{public}@", (uint8_t *)&v18, 0xCu);
    }
    id v8 = 0;
  }
  else
  {
    uint64_t v9 = [AppUpdateEntity alloc];
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = [v3 connection];
    id v7 = [(SQLiteEntity *)v9 initWithPropertyValues:v10 onConnection:v11];

    id v8 = [v7 existsInDatabase];
    id v12 = ASDLogHandleForCategory();
    uint32_t v13 = v12;
    if (v8)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v18 = 138543362;
        uint64_t v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sucessfully transported update for: %{public}@", (uint8_t *)&v18, 0xCu);
      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v18 = 138543362;
      uint64_t v19 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unable to transport update for: %{public}@", (uint8_t *)&v18, 0xCu);
    }
  }
  return v8;
}

void *sub_1003E9058(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v8.receiver = a1;
    v8.super_class = (Class)ClipAdditionalDataTask;
    id v5 = objc_msgSendSuper2(&v8, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      id v6 = ASDLogHandleForCategory();
      a1[2] = os_signpost_id_make_with_pointer(v6, a1);
    }
  }

  return a1;
}

Promise *sub_1003E90F0(uint64_t a1)
{
  if (a1)
  {
    double v29 = objc_alloc_init(Promise);
    BOOL v2 = ASDLogHandleForCategory();
    id v3 = v2;
    os_signpost_id_t v4 = *(void *)(a1 + 16);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Clip::AdditionalData/Prepare", "", buf, 2u);
    }

    id v5 = [objc_alloc((Class)AMSURLRequestEncoder) initWithBag:*(void *)(a1 + 8)];
    [v5 setClientInfo:*(void *)(a1 + 48)];
    id v6 = [*(id *)(a1 + 64) description];
    [v5 setLogUUID:v6];

    id v7 = objc_alloc((Class)AMSURLSession);
    objc_super v8 = +[NSURLSessionConfiguration defaultSessionConfiguration];
    id v9 = [v7 initWithConfiguration:v8];

    uint64_t v10 = objc_alloc_init(ClipAdditionalDataResponseDecoder);
    [v9 setResponseDecoder:v10];
    uint64_t v11 = [*(id *)(a1 + 8) URLForKey:@"appClipAdditionalData"];
    id v12 = objc_alloc_init((Class)AMSBuyParams);
    [v12 setParameter:*(void *)(a1 + 56) forKey:@"externalVersionId"];
    [v12 setParameter:*(void *)(a1 + 24) forKey:@"adamId"];
    [v12 setParameter:*(void *)(a1 + 32) forKey:@"assetToken"];
    [v12 setParameter:*(void *)(a1 + 40) forKey:@"bundleId"];
    uint32_t v13 = [v12 dictionary];

    uint64_t v14 = [v5 requestWithMethod:4 bagURL:v11 parameters:v13];

    id v34 = 0;
    uint64_t v15 = [v14 resultWithTimeout:&v34 error:60.0];
    id v16 = v34;
    uint64_t v17 = ASDLogHandleForCategory();
    int v18 = v17;
    os_signpost_id_t v19 = *(void *)(a1 + 16);
    if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v19, "Clip::AdditionalData/Prepare", "", buf, 2u);
    }

    if (v15)
    {
      unsigned __int8 v20 = ASDLogHandleForCategory();
      id v21 = v20;
      os_signpost_id_t v22 = *(void *)(a1 + 16);
      if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_BEGIN, v22, "Clip::AdditionalData/Request", "", buf, 2u);
      }

      uint64_t v23 = [v9 dataTaskPromiseWithRequest:v15];
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_1003E9530;
      v32[3] = &unk_10052C8D8;
      v32[4] = a1;
      id v24 = v29;
      CFStringRef v33 = v24;
      [v23 addSuccessBlock:v32];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_1003E95E0;
      v30[3] = &unk_100521620;
      v30[4] = a1;
      id v25 = v24;
      id v26 = v29;
      uint64_t v31 = v25;
      [v23 addErrorBlock:v30];
    }
    else
    {
      id v26 = v29;
      sub_1002029D0((uint64_t)v29, v16);
    }
    id v27 = v26;
  }
  else
  {
    id v27 = 0;
  }
  return v27;
}

void sub_1003E9530(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = ASDLogHandleForCategory();
  id v5 = v4;
  os_signpost_id_t v6 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)id v7 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "Clip::AdditionalData/Request", "", v7, 2u);
  }

  sub_100202928(*(void *)(a1 + 40), v3);
}

void sub_1003E95E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = ASDLogHandleForCategory();
  id v5 = v4;
  os_signpost_id_t v6 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)id v7 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "Clip::AdditionalData/Request", "", v7, 2u);
  }

  sub_1002029D0(*(void *)(a1 + 40), v3);
}

id sub_1003E978C(id result, uint64_t a2)
{
  if (result)
  {
    id v3 = result;
    os_signpost_id_t v4 = [BetaAppFeedbackEntity alloc];
    id v5 = [v3 connection];
    os_signpost_id_t v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

    BOOL v7 = [(SQLiteEntity *)v6 deleteFromDatabase];
    return (id)v7;
  }
  return result;
}

id sub_1003E980C(id a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = objc_opt_new();
    id v60 = 0;
    id v12 = [objc_alloc((Class)LSApplicationRecord) initWithURL:v8 allowPlaceholder:0 error:&v60];
    id v13 = v60;
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        long long v48 = [v7 bundleID];
        *(_DWORD *)long long buf = 138543874;
        id v62 = v8;
        __int16 v63 = 2114;
        id v64 = v48;
        __int16 v65 = 2114;
        long long v66 = v14;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to get an application record for %{public}@ (%{public}@): %{public}@", buf, 0x20u);
      }
      a1 = 0;
LABEL_21:

      goto LABEL_22;
    }
    uint64_t v51 = a1;
    id v54 = v9;
    id v55 = v8;
    id v16 = [v7 bundleID];
    uint64_t v17 = [v12 exactBundleVersion];
    int64_t v18 = +[ASDBetaAppVersion platformForRecord:v12];
    os_signpost_id_t v19 = [v12 shortVersionString];
    unsigned __int8 v20 = +[ASDBetaAppVersion versionWithBundleID:v16 bundleVersion:v17 platform:v18 andShortVersion:v19];

    [v7 setAppVersion:v20];
    id v59 = 0;
    uint64_t v53 = +[NSKeyedArchiver archivedDataWithRootObject:v20 requiringSecureCoding:1 error:&v59];
    id v21 = v59;
    os_signpost_id_t v22 = [v12 iTunesMetadata];
    uint64_t v23 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v22 storeItemIdentifier]);

    id v24 = [v7 pairedWatchModel];
    long long v52 = (void *)v23;
    uint64_t v56 = v21;
    if (v24)
    {
    }
    else
    {
      id v25 = [v7 pairedWatchOSVersion];

      if (!v25)
      {
LABEL_11:
        id v28 = [v12 appClipMetadata];

        id v58 = 0;
        double v29 = sub_100422748((uint64_t)AppMetadataLoader, v12, &v58);
        id v30 = v58;
        if (v30)
        {
          uint64_t v31 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            uint64_t v50 = [v7 appVersion];
            *(_DWORD *)long long buf = 138543618;
            id v62 = v50;
            __int16 v63 = 2114;
            id v64 = v30;
            _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Error fetching metadata for %{public}@: %{public}@", buf, 0x16u);
          }
        }
        unsigned __int8 v32 = [v29 betaBuildGroupID];
        [v10 setObject:v32 forKeyedSubscript:@"beta_build_group_id"];

        id v57 = 0;
        CFStringRef v33 = +[NSKeyedArchiver archivedDataWithRootObject:v7 requiringSecureCoding:1 error:&v57];
        id v34 = v57;
        if (v34)
        {
          id v35 = ASDLogHandleForCategory();
          id v36 = (void *)v53;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            long long v49 = [v7 appVersion];
            *(_DWORD *)long long buf = 138543618;
            id v62 = v49;
            __int16 v63 = 2114;
            id v64 = v34;
            _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Error archiving feedback for %{public}@: %{public}@", buf, 0x16u);
          }
          a1 = 0;
          id v9 = v54;
          id v8 = v55;
          uint64_t v37 = v52;
        }
        else
        {
          BOOL v38 = v28 != 0;
          id v9 = v54;
          [v10 setObject:v54 forKeyedSubscript:@"account_dsid"];
          id v36 = (void *)v53;
          [v10 setObject:v53 forKeyedSubscript:@"app_version"];
          [v10 setObject:v33 forKeyedSubscript:@"feedback"];
          uint64_t v39 = objc_alloc_init(_TtC9appstored6LogKey);
          __int16 v40 = [(LogKey *)v39 description];
          [v10 setObject:v40 forKeyedSubscript:@"log_key"];

          uint64_t v41 = [v7 imagesData];
          id v42 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", 2 * ([v41 count] == 0));
          [v10 setObject:v42 forKeyedSubscript:@"state"];

          [v10 setObject:v52 forKeyedSubscript:@"item_id"];
          BOOL v43 = v38;
          uint64_t v37 = v52;
          id v44 = +[NSNumber numberWithBool:v43];
          [v10 setObject:v44 forKeyedSubscript:@"is_app_clip"];

          id v45 = [BetaAppFeedbackEntity alloc];
          long long v46 = [v51 connection];
          id v35 = [(SQLiteEntity *)v45 initWithPropertyValues:v10 onConnection:v46];

          a1 = [v35 persistentID];
          id v8 = v55;
        }

        goto LABEL_21;
      }
    }
    id v26 = [v12 counterpartIdentifiers];
    id v27 = [v26 count];

    if (!v27)
    {
      [v7 setPairedWatchModel:0];
      [v7 setPairedWatchOSVersion:0];
    }
    goto LABEL_11;
  }
LABEL_22:

  return a1;
}

uint64_t sub_1003E9E3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = v3;
  if (a1)
  {
    if ([v3 databaseID])
    {
      id v5 = [BetaAppFeedbackEntity alloc];
      id v6 = [v4 databaseID];
      id v7 = [(id)a1 connection];
      id v8 = [(SQLiteEntity *)v5 initWithPersistentID:v6 onConnection:v7];

      id v9 = [v4 propertyValues];
      [(SQLiteEntity *)v8 setValuesWithDictionary:v9];

      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

BOOL sub_1003E9EF8(BOOL result, uint64_t a2, void *a3)
{
  if (result)
  {
    BOOL v4 = result;
    id v5 = a3;
    id v6 = +[NSNumber numberWithBool:a2];
    BOOL v7 = sub_1003E9F78(v4, v6, @"feedback_enabled", v5);

    return v7;
  }
  return result;
}

BOOL sub_1003E9F78(BOOL a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    id v9 = sub_1003B57E4(a1, a4);
    uint64_t v10 = [(id)a1 connection];
    uint64_t v11 = sub_1002FF3DC((uint64_t)BetaAppInfoEntity, v10, v9);

    a1 = v11 != 0;
    if (v11) {
      [v11 setValue:v7 forProperty:v8];
    }
  }
  return a1;
}

BOOL sub_1003EA03C(void *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    id v5 = [v3 version];
    id v6 = sub_1003B57E4((uint64_t)a1, v5);
    id v7 = [a1 connection];
    sub_1002FF3DC((uint64_t)BetaAppInfoEntity, v7, v6);
    id v8 = (BetaAppInfoEntity *)objc_claimAutoreleasedReturnValue();

    id v9 = [v5 bundleID];
    uint64_t v10 = v9;
    if (v9 && [v9 length])
    {
      if (!v8)
      {
        id v12 = [BetaAppInfoEntity alloc];
        CFStringRef v34 = @"bundle_id";
        id v35 = v10;
        id v13 = +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
        uint64_t v14 = [a1 connection];
        id v8 = [(SQLiteEntity *)v12 initWithPropertyValues:v13 onConnection:v14];
      }
      uint64_t v15 = [v4 localizedTestNotes];
      [(SQLiteEntity *)v8 setObject:v15 forKeyedSubscript:@"what_to_test"];

      id v16 = [v4 testerEmail];
      [(SQLiteEntity *)v8 setObject:v16 forKeyedSubscript:@"email"];

      uint64_t v17 = [v4 iconURLTemplate];
      [(SQLiteEntity *)v8 setObject:v17 forKeyedSubscript:@"icon_url_template"];

      int64_t v18 = [v4 expirationDate];
      [(SQLiteEntity *)v8 setObject:v18 forKeyedSubscript:@"expiration_date"];

      os_signpost_id_t v19 = [v5 bundleID];
      [(SQLiteEntity *)v8 setObject:v19 forKeyedSubscript:@"bundle_id"];

      unsigned __int8 v20 = [v5 bundleVersion];
      [(SQLiteEntity *)v8 setObject:v20 forKeyedSubscript:@"bundle_version"];

      id v21 = [v5 shortVersion];
      [(SQLiteEntity *)v8 setObject:v21 forKeyedSubscript:@"bundle_short_version"];

      os_signpost_id_t v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 isFeedbackEnabled]);
      [(SQLiteEntity *)v8 setObject:v22 forKeyedSubscript:@"feedback_enabled"];

      uint64_t v23 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 hasSharedFeedback]);
      [(SQLiteEntity *)v8 setObject:v23 forKeyedSubscript:@"has_shared_screenshot_feedback"];

      id v24 = [v4 lastWelcomeScreenViewDate];
      [(SQLiteEntity *)v8 setObject:v24 forKeyedSubscript:@"last_seen_date"];

      id v25 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 isLaunchScreenEnabled]);
      [(SQLiteEntity *)v8 setObject:v25 forKeyedSubscript:@"launch_screen_enabled"];

      id v26 = [v4 displayNames];
      id v27 = [v26 localizedNames];
      [(SQLiteEntity *)v8 setObject:v27 forKeyedSubscript:@"localized_display_names"];

      id v28 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v5 platform]);
      [(SQLiteEntity *)v8 setObject:v28 forKeyedSubscript:@"platform"];

      double v29 = [v4 displayNames];
      id v30 = [v29 primaryLocale];
      [(SQLiteEntity *)v8 setObject:v30 forKeyedSubscript:@"primary_locale"];

      BOOL v11 = [(SQLiteEntity *)v8 persistentID] != 0;
    }
    else
    {
      BOOL v11 = 0;
    }
    BOOL v33 = v11;

    BOOL v31 = v33;
  }
  else
  {
    BOOL v31 = 0;
  }

  return v31;
}

BOOL sub_1003EA470(BOOL result, uint64_t a2, void *a3)
{
  if (result)
  {
    BOOL v4 = result;
    id v5 = a3;
    id v6 = +[NSNumber numberWithBool:a2];
    BOOL v7 = sub_1003E9F78(v4, v6, @"has_shared_screenshot_feedback", v5);

    return v7;
  }
  return result;
}

BOOL sub_1003EA4F0(BOOL result, uint64_t a2, void *a3)
{
  if (result)
  {
    BOOL v4 = result;
    id v5 = a3;
    id v6 = +[NSNumber numberWithBool:a2];
    BOOL v7 = sub_1003E9F78(v4, v6, @"launch_screen_enabled", v5);

    return v7;
  }
  return result;
}

uint64_t sub_1003EA570(uint64_t result, void *a2)
{
  if (result)
  {
    BOOL v2 = (void *)result;
    id v3 = sub_1003B57E4(result, a2);
    BOOL v4 = [v2 connection];
    id v5 = sub_1002FF3DC((uint64_t)BetaAppInfoEntity, v4, v3);

    id v6 = [v5 deleteFromDatabase];
    return (uint64_t)v6;
  }
  return result;
}

BOOL sub_1003EA5F8(BOOL a1, uint64_t a2)
{
  BOOL v2 = a1;
  if (a1)
  {
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:a2];
    BOOL v4 = [(id)v2 connection];
    id v5 = sub_1002FF3DC((uint64_t)BetaAppInfoEntity, v4, v3);

    BOOL v2 = v5 != 0;
    if (v5) {
      [v5 setObject:0 forKeyedSubscript:@"last_seen_date"];
    }
  }
  return v2;
}

id *sub_1003EA6C8(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)SwitchAppOwnerTask;
    BOOL v11 = (id *)objc_msgSendSuper2(&v15, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 5, a2);
      objc_storeStrong(a1 + 6, a3);
      objc_storeStrong(a1 + 8, a4);
      id v12 = objc_alloc_init(_TtC9appstored6LogKey);
      id v13 = a1[7];
      a1[7] = v12;
    }
  }

  return a1;
}

uint64_t sub_1003EBD14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_1003D5530((uint64_t)WriteReceipt, v6, v5, *(void **)(a1 + 56), 0);
  id v8 = ASDLogHandleForCategory();
  id v9 = v8;
  if ((v7 & 1) == 0)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    id v10 = [v5 bundleID];
    int v12 = 138543362;
    id v13 = v10;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[SwitchArcade]: Receipt fresh failed for bundleID: %{public}@", (uint8_t *)&v12, 0xCu);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [v5 bundleID];
    int v12 = 138543362;
    id v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[SwitchArcade]: Receipt fresh succeeded for bundleID: %{public}@", (uint8_t *)&v12, 0xCu);
LABEL_4:
  }
LABEL_6:

  return v7;
}

void sub_1003EC004(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  BOOL v4 = sub_10026CA24();
  BOOL v5 = sub_10026D598((uint64_t)v4);

  if (!v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)long long buf = 138543362;
    id v31 = (id)objc_opt_class();
    id v11 = v31;
    int v12 = "[%{public}@]: Not prompting during device setup";
LABEL_12:
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);

    goto LABEL_20;
  }
  if (!v2 || ![v2 count])
  {
    id v6 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)long long buf = 138543362;
    id v31 = (id)objc_opt_class();
    id v11 = v31;
    int v12 = "[%{public}@]: No bundle ids";
    goto LABEL_12;
  }
  id v6 = +[ActiveAccountObserver activeAccount];
  if (!v6)
  {
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v31 = (id)objc_opt_class();
      id v14 = v31;
    }
    goto LABEL_19;
  }
  self;
  uint64_t v7 = sub_10030B11C();
  id v8 = sub_10030C128(v7, @"use-alternate-text-for-manage-subs-on-app-delete");
  id v9 = [v8 valueWithError:0];

  if (v9)
  {
    if ([v9 BOOLValue])
    {
LABEL_7:

      char v10 = 1;
LABEL_18:
      unsigned __int8 v20 = sub_10030B11C();
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1003EC3FC;
      v24[3] = &unk_10052C900;
      id v25 = v2;
      uint64_t v27 = v3;
      char v28 = v10;
      id v26 = v6;
      sub_10030C810(v20, @"manage-subs-app-delete-skip-list", 0, v24);

      id v13 = v25;
LABEL_19:

      goto LABEL_20;
    }
LABEL_17:

    char v10 = 0;
    goto LABEL_18;
  }
  objc_super v15 = sub_10030B11C();
  id v16 = sub_10030C454(v15, @"currentStorefrontCountryCodeISO3A");
  id v29 = 0;
  uint64_t v17 = [v16 valueWithError:&v29];
  id v18 = v29;

  if (v17)
  {
    unsigned __int8 v19 = [&off_10054E0D0 containsObject:v17];

    if (v19) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
  id v21 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    os_signpost_id_t v22 = objc_opt_class();
    *(_DWORD *)long long buf = 138543618;
    id v31 = v22;
    __int16 v32 = 2112;
    id v33 = v18;
    id v23 = v22;
    _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[%{public}@]: Encountered error while loading storefront country code bag value: %@", buf, 0x16u);
  }
LABEL_20:
}

void sub_1003EC3FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = [v6 domain];
    if ([v8 isEqualToString:AMSErrorDomain])
    {
      id v9 = [v7 code];

      if (v9 == (id)204) {
        goto LABEL_4;
      }
    }
    else
    {
    }
    uint64_t v11 = sub_1003F3DEC();

    id v5 = (id)v11;
    if (!v11) {
      goto LABEL_43;
    }
    goto LABEL_10;
  }
LABEL_4:
  if (v5) {
    char v10 = v5;
  }
  else {
    char v10 = &__NSArray0__struct;
  }
  sub_1003F3E28((uint64_t)AppDefaultsManager, v10);
LABEL_10:
  id v55 = v7;
  id v57 = objc_opt_new();
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t v54 = a1;
  id v12 = *(id *)(a1 + 32);
  id v13 = [v12 countByEnumeratingWithState:&v60 objects:v64 count:16];
  if (v13)
  {
    id v14 = v13;
    char v15 = 0;
    char v58 = 0;
    char v56 = 0;
    uint64_t v16 = *(void *)v61;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v61 != v16) {
          objc_enumerationMutation(v12);
        }
        id v18 = *(void **)(*((void *)&v60 + 1) + 8 * i);
        if (([v5 containsObject:v18] & 1) == 0)
        {
          if ([v18 isEqualToString:@"com.apple.Music"])
          {
            char v15 = 1;
          }
          else if ([v18 isEqualToString:@"com.apple.news"])
          {
            char v58 = 1;
          }
          else if ([v18 isEqualToString:@"com.apple.tv"])
          {
            char v56 = 1;
          }
          else
          {
            [v57 addObject:v18];
          }
        }
      }
      id v14 = [v12 countByEnumeratingWithState:&v60 objects:v64 count:16];
    }
    while (v14);
  }
  else
  {
    char v15 = 0;
    char v58 = 0;
    char v56 = 0;
  }

  unsigned __int8 v19 = +[NSArray arrayWithArray:v57];
  if (v15)
  {
    char v20 = *(unsigned char *)(v54 + 56);
    id v21 = self;
    os_signpost_id_t v22 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = @"com.apple.Music";
      id v24 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Checking status for %{public}@", buf, 0x16u);
    }
    id v25 = objc_alloc((Class)ICStoreRequestContext);
    id v26 = +[ICUserIdentity activeAccount];
    id v27 = [v25 initWithIdentity:v26];

    id v28 = [objc_alloc((Class)ICMusicSubscriptionStatusRequest) initWithStoreRequestContext:v27];
    [v28 setShouldReturnLastKnownStatusOnly:1];
    id v29 = +[ICMusicSubscriptionStatusController sharedStatusController];
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1003ECFF8;
    long long v66 = &unk_10052C920;
    id v67 = v21;
    LOBYTE(v6_Block_object_dispose(&STACK[0x220], 8) = v20;
    [v29 performSubscriptionStatusRequest:v28 withCompletionHandler:buf];
  }
  if (v58)
  {
    char v30 = *(unsigned char *)(v54 + 56);
    id v31 = self;
    __int16 v32 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = @"com.apple.news";
      id v34 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Checking status for %{public}@", buf, 0x16u);
    }
    id v35 = +[SubscriptionEntitlementsCoordinator sharedInstance];
    id v36 = sub_100416894((uint64_t)XPCRequestToken, 1);
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1003ED630;
    long long v66 = &unk_10052C940;
    id v67 = v31;
    LOBYTE(v6_Block_object_dispose(&STACK[0x220], 8) = v30;
    sub_100321A50(v35, 0, v36, 0, 0, 1, buf);
  }
  if (v56)
  {
    char v37 = *(unsigned char *)(v54 + 56);
    uint64_t v38 = self;
    uint64_t v39 = sub_1003ECE18(v38, @"com.apple.tv");
    if (v39)
    {
      id v40 = sub_1003ECB50(v38, @"com.apple.tv");
      if (v40)
      {
        id v41 = v40;
        id v59 = sub_1000109AC();
        id v42 = +[NSNumber numberWithLongLong:v41];
        long long v71 = v42;
        BOOL v43 = +[NSArray arrayWithObjects:&v71 count:1];
        id v44 = sub_100416894((uint64_t)XPCRequestToken, 1);
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_1003EDC7C;
        long long v66 = &unk_10052C988;
        uint64_t v68 = v38;
        id v67 = v39;
        id v69 = v41;
        char v70 = v37;
        sub_10037159C((uint64_t)v59, v43, v44, buf);
      }
    }
  }
  if ([v19 count])
  {
    id v45 = *(void **)(v54 + 40);
    char v46 = *(unsigned char *)(v54 + 56);
    id v47 = v19;
    id v48 = v45;
    uint64_t v49 = self;
    uint64_t v50 = sub_10001A264();
    id v51 = objc_alloc_init((Class)ASDPurchaseHistoryQuery);
    [v51 setBundleIDs:v47];
    long long v52 = objc_msgSend(v48, "ams_DSID");

    objc_msgSend(v51, "setAccountID:", objc_msgSend(v52, "longLongValue"));
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1003EDF40;
    long long v66 = &unk_10052C9B0;
    id v67 = v47;
    uint64_t v68 = v49;
    LOBYTE(v69) = v46;
    id v53 = v47;
    sub_10024B474((uint64_t)v50, v51, buf);
  }
  uint64_t v7 = v55;
LABEL_43:
}

id sub_1003ECB50(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  BOOL v4 = sub_10030B11C();
  id v28 = 0;
  id v5 = sub_10030B75C((uint64_t)v4, @"hideableSystemApps", &v28);
  id v6 = v28;

  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v18 = objc_opt_class();
      *(_DWORD *)long long buf = 138543874;
      id v31 = v18;
      __int16 v32 = 2114;
      id v33 = v2;
      __int16 v34 = 2114;
      id v35 = v6;
      id v19 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@]: Error reading bag finding adam ID for: %{public}@, error: %{public}@", buf, 0x20u);
    }
    id v8 = 0;
  }
  else
  {
    uint64_t v22 = v3;
    id v23 = v5;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v7 = v5;
    id v9 = [v7 countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v25;
      while (2)
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v25 != v11) {
            objc_enumerationMutation(v7);
          }
          id v13 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          id v14 = objc_msgSend(v13, "objectForKeyedSubscript:", @"bundle-id", v22);
          unsigned __int8 v15 = [v14 isEqualToString:v2];

          if (v15)
          {
            uint64_t v16 = [v13 objectForKeyedSubscript:@"id"];
            id v8 = [v16 longLongValue];

            goto LABEL_17;
          }
        }
        id v10 = [v7 countByEnumeratingWithState:&v24 objects:v29 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      char v20 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v31 = v20;
      __int16 v32 = 2114;
      id v33 = v2;
      id v21 = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@]: No adam ID in bag for %{public}@", buf, 0x16u);
    }
    id v8 = 0;
LABEL_17:
    id v5 = v23;
  }

  return v8;
}

NSObject *sub_1003ECE18(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v13 = 0;
  id v3 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifierOfSystemPlaceholder:v2 error:&v13];
  BOOL v4 = v3;
  if (v3)
  {
    id v5 = [v3 localizedName];
    if ([v5 length])
    {
      id v5 = v5;
      id v6 = v5;
      goto LABEL_10;
    }
    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      unsigned __int8 v15 = v11;
      __int16 v16 = 2114;
      id v17 = v2;
      id v12 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%{public}@]: Proxy missing name for %{public}@", buf, 0x16u);
    }
  }
  else
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = objc_opt_class();
      *(_DWORD *)long long buf = 138543874;
      unsigned __int8 v15 = v7;
      __int16 v16 = 2114;
      id v17 = v2;
      __int16 v18 = 2114;
      uint64_t v19 = v13;
      id v8 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@]: No app record for %{public}@: %{public}@", buf, 0x20u);
    }
  }
  id v6 = 0;
LABEL_10:

  return v6;
}

void sub_1003ECFF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = [v6 domain];
    if ([v8 isEqualToString:ICErrorDomain])
    {
      id v9 = [v7 code];

      if (v9 == (id)-7008)
      {
        id v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          int v33 = 138543618;
          id v34 = (id)objc_opt_class();
          __int16 v35 = 2114;
          CFStringRef v36 = @"com.apple.Music";
          id v11 = v34;
          id v12 = "[%{public}@]: No cached subscription info for %{public}@";
          uint64_t v13 = v10;
          uint32_t v14 = 22;
LABEL_22:
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v33, v14);
          goto LABEL_23;
        }
        goto LABEL_15;
      }
    }
    else
    {
    }
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v33 = 138543874;
      id v34 = (id)objc_opt_class();
      __int16 v35 = 2114;
      CFStringRef v36 = @"com.apple.Music";
      __int16 v37 = 2114;
      id v38 = v7;
      id v11 = v34;
      id v12 = "[%{public}@]: Error getting subscription info for %{public}@, %{public}@";
      uint64_t v13 = v10;
      uint32_t v14 = 32;
      goto LABEL_22;
    }
LABEL_15:

    goto LABEL_16;
  }
  unsigned __int8 v15 = [v5 subscriptionStatus];
  id v16 = [v15 statusType];

  id v10 = ASDLogHandleForCategory();
  BOOL v17 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v16 != (id)1)
  {
    if (v17)
    {
      id v29 = objc_opt_class();
      id v30 = v29;
      id v31 = [v5 subscriptionStatus];
      int v33 = 138543874;
      id v34 = v29;
      __int16 v35 = 2114;
      CFStringRef v36 = @"com.apple.Music";
      __int16 v37 = 2048;
      id v38 = [v31 statusType];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Subscription not enabled for %{public}@, status %li", (uint8_t *)&v33, 0x20u);
    }
    goto LABEL_15;
  }
  if (v17)
  {
    int v33 = 138543618;
    id v34 = (id)objc_opt_class();
    __int16 v35 = 2114;
    CFStringRef v36 = @"com.apple.Music";
    id v18 = v34;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Subscription enabled for %{public}@", (uint8_t *)&v33, 0x16u);
  }
  uint64_t v19 = [v5 subscriptionStatus];
  char v20 = [v19 expirationDate];
  id v21 = +[NSDate date];
  id v22 = [v20 compare:v21];

  if (v22 != (id)1)
  {
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v32 = objc_opt_class();
      int v33 = 138543618;
      id v34 = v32;
      __int16 v35 = 2114;
      CFStringRef v36 = @"com.apple.Music";
      id v11 = v32;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Filtering subscription for %{public}@", (uint8_t *)&v33, 0x16u);
LABEL_23:

      goto LABEL_15;
    }
    goto LABEL_15;
  }
  uint64_t v23 = sub_1003ECE18(*(void *)(a1 + 32), @"com.apple.Music");
  if (v23)
  {
    id v10 = v23;
    id v24 = sub_1003ECB50(*(void *)(a1 + 32), @"com.apple.Music");
    if (v24)
    {
      uint64_t v25 = (uint64_t)v24;
      uint64_t v26 = *(void *)(a1 + 32);
      long long v27 = [v5 subscriptionStatus];
      id v28 = [v27 expirationDate];
      sub_1003ED434(v26, v10, v25, v28);
    }
    goto LABEL_15;
  }
LABEL_16:
}

void sub_1003ED434(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = self;
  id v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    id v19 = (id)objc_opt_class();
    __int16 v20 = 2048;
    uint64_t v21 = a3;
    id v10 = v19;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Prompting single for %lld", buf, 0x16u);
  }
  id v11 = ASDLocalizedString();
  id v12 = objc_alloc_init((Class)NSDateFormatter);
  [v12 setDateStyle:2];
  uint64_t v13 = [v12 stringFromDate:v7];

  uint32_t v14 = ASDLocalizedString();
  unsigned __int8 v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v14, v6, v13);

  id v16 = ASDLocalizedString();
  BOOL v17 = ASDLocalizedString();
  sub_1003EE770(v8, v11, v15, v16, v17, a3);
}

void sub_1003ED630(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a5;
  if (v8)
  {
    id v9 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
    *(_DWORD *)long long buf = 138543874;
    id v46 = (id)objc_opt_class();
    __int16 v47 = 2114;
    CFStringRef v48 = @"com.apple.news";
    __int16 v49 = 2114;
    id v50 = v8;
    id v32 = v46;
    int v33 = "[%{public}@]: Error getting subscription info for %{public}@, %{public}@";
    id v34 = v9;
    uint32_t v35 = 32;
LABEL_31:
    _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, v33, buf, v35);

    goto LABEL_3;
  }
  if (![v7 count])
  {
    id v9 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
    *(_DWORD *)long long buf = 138543618;
    id v46 = (id)objc_opt_class();
    __int16 v47 = 2114;
    CFStringRef v48 = @"com.apple.news";
    id v32 = v46;
    int v33 = "[%{public}@]: No entitlements for %{public}@";
    id v34 = v9;
    uint32_t v35 = 22;
    goto LABEL_31;
  }
  if ([v7 count])
  {
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543618;
      id v46 = (id)objc_opt_class();
      __int16 v47 = 2114;
      CFStringRef v48 = @"com.apple.news";
      id v11 = v46;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Found subscription info for %{public}@", buf, 0x16u);
    }
    id v9 = sub_1003ECE18(*(void *)(a1 + 32), @"com.apple.news");
    if (v9)
    {
      id v12 = sub_1003ECB50(*(void *)(a1 + 32), @"com.apple.news");
      if (v12)
      {
        uint64_t v36 = (uint64_t)v12;
        __int16 v37 = v9;
        uint64_t v13 = a1;
        uint64_t v39 = objc_opt_new();
        uint32_t v14 = +[NSDate date];
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        id v38 = v7;
        id v15 = v7;
        id v16 = [v15 countByEnumeratingWithState:&v40 objects:v44 count:16];
        if (!v16) {
          goto LABEL_26;
        }
        id v17 = v16;
        uint64_t v18 = *(void *)v41;
        while (1)
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(void *)v41 != v18) {
              objc_enumerationMutation(v15);
            }
            __int16 v20 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            uint64_t v21 = [v20 expiryDate];
            if (v21)
            {
              id v22 = (void *)v21;
              uint64_t v23 = [v20 expiryDate];
              if ([v23 compare:v14] == (id)1)
              {
                unsigned int v24 = [v20 autoRenewEnabled];

                if (v24)
                {
                  [v39 addObject:v20];
                  continue;
                }
              }
              else
              {
              }
            }
            uint64_t v25 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v26 = objc_opt_class();
              *(_DWORD *)long long buf = 138543618;
              id v46 = v26;
              __int16 v47 = 2114;
              CFStringRef v48 = @"com.apple.news";
              id v27 = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Filtering an entitlement for %{public}@", buf, 0x16u);
            }
          }
          id v17 = [v15 countByEnumeratingWithState:&v40 objects:v44 count:16];
          if (!v17)
          {
LABEL_26:

            if ([v39 count] == (id)1)
            {
              id v28 = [v39 objectAtIndexedSubscript:0];
              uint64_t v29 = *(void *)(v13 + 32);
              id v30 = [v28 expiryDate];
              uint64_t v31 = v29;
              id v9 = v37;
              sub_1003ED434(v31, v37, v36, v30);

              id v8 = 0;
            }
            else
            {
              id v9 = v37;
              id v8 = 0;
              if ((unint64_t)[v39 count] >= 2) {
                sub_1003EDACC(*(void *)(v13 + 32), v37, v36);
              }
            }

            id v7 = v38;
            break;
          }
        }
      }
    }
LABEL_3:
  }
}

void sub_1003EDACC(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = self;
  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    id v14 = (id)objc_opt_class();
    __int16 v15 = 2048;
    uint64_t v16 = a3;
    id v7 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Prompting multiple for %lld", buf, 0x16u);
  }
  id v8 = ASDLocalizedString();
  id v9 = ASDLocalizedString();
  id v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v4);

  id v11 = ASDLocalizedString();
  id v12 = ASDLocalizedString();
  sub_1003EE770(v5, v8, v10, v11, v12, a3);
}

void sub_1003EDC7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class();
    id v6 = v5;
    *(_DWORD *)long long buf = 138543874;
    __int16 v15 = v5;
    __int16 v16 = 2048;
    id v17 = [v3 count];
    __int16 v18 = 2114;
    CFStringRef v19 = @"com.apple.tv";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Found %li IAPs for bundle ID: %{public}@", buf, 0x20u);
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1003EDE64;
  v13[3] = &unk_10052C960;
  void v13[4] = *(void *)(a1 + 40);
  id v7 = sub_100392558(v3, v13);
  if ([v7 count] == (id)1)
  {
    id v8 = [v7 objectAtIndexedSubscript:0];
    id v10 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    id v12 = [v8 expirationDate];
    sub_1003ED434(v9, v10, v11, v12);
  }
  else if ((unint64_t)[v7 count] >= 2)
  {
    sub_1003EDACC(*(void *)(a1 + 40), *(void **)(a1 + 32), *(void *)(a1 + 48));
  }
}

id sub_1003EDE64(uint64_t a1, void *a2)
{
  return sub_1003EDE6C(*(void *)(a1 + 32), a2);
}

id sub_1003EDE6C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if ([v2 type] == 3)
  {
    id v3 = [v2 expirationDate];
    if (v3)
    {
      id v4 = [v2 expirationDate];
      uint64_t v5 = +[NSDate date];
      if ([v4 compare:v5] == (id)1) {
        id v6 = [v2 autoRenewStatus];
      }
      else {
        id v6 = 0;
      }
    }
    else
    {
      id v6 = 0;
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_1003EDF40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class();
    id v6 = v5;
    id v7 = [v3 count];
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543874;
    int v33 = v5;
    __int16 v34 = 2048;
    id v35 = v7;
    __int16 v36 = 2114;
    uint64_t v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Found %li apps for bundle IDs %{public}@", buf, 0x20u);
  }
  if (v3 && [v3 count])
  {
    uint64_t v9 = objc_opt_new();
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v10 = v3;
    id v11 = [v10 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v28;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v28 != v13) {
            objc_enumerationMutation(v10);
          }
          __int16 v15 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          __int16 v16 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v15 storeItemID]);
          [v9 setObject:v15 forKeyedSubscript:v16];
        }
        id v12 = [v10 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }
      while (v12);
    }

    id v17 = sub_1000109AC();
    __int16 v18 = [v9 allKeys];
    CFStringRef v19 = sub_100416894((uint64_t)XPCRequestToken, 1);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1003EE204;
    v22[3] = &unk_10052C900;
    __int16 v20 = *(void **)(a1 + 32);
    uint64_t v25 = *(void *)(a1 + 40);
    id v23 = v20;
    id v24 = v9;
    char v26 = *(unsigned char *)(a1 + 48);
    id v21 = v9;
    sub_10037159C((uint64_t)v17, v18, v19, v22);
  }
}

void sub_1003EE204(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class();
    id v6 = v5;
    id v7 = [v3 count];
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543874;
    long long v63 = v5;
    __int16 v64 = 2048;
    id v65 = v7;
    __int16 v66 = 2114;
    *(void *)id v67 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Found %li IAPs for bundle IDs %{public}@", buf, 0x20u);
  }
  uint64_t v9 = objc_opt_new();
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id v10 = v3;
  __int16 v47 = v10;
  id v51 = [v10 countByEnumeratingWithState:&v57 objects:v70 count:16];
  if (v51)
  {
    uint64_t v12 = *(void *)v58;
    *(void *)&long long v11 = 138544386;
    long long v46 = v11;
    do
    {
      for (i = 0; i != v51; i = (char *)i + 1)
      {
        if (*(void *)v58 != v12) {
          objc_enumerationMutation(v10);
        }
        id v14 = *(void **)(*((void *)&v57 + 1) + 8 * i);
        unsigned int v15 = sub_1003EDE6C(*(void *)(a1 + 48), v14);
        __int16 v16 = ASDLogHandleForCategory();
        BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (v17)
          {
            __int16 v18 = objc_opt_class();
            id v19 = v18;
            __int16 v20 = [v14 adamId];
            *(_DWORD *)long long buf = 138543618;
            long long v63 = v18;
            __int16 v64 = 2114;
            id v65 = v20;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Promptable IAP: %{public}@", buf, 0x16u);
          }
          id v21 = [v14 appAdamId];
          id v22 = [v9 objectForKeyedSubscript:v21];

          if (v22)
          {
            id v23 = [v14 appAdamId];
            __int16 v16 = [v9 objectForKeyedSubscript:v23];

            [v16 addObject:v14];
          }
          else
          {
            __int16 v16 = +[NSMutableArray arrayWithObject:v14];
            uint64_t v31 = [v14 appAdamId];
            [v9 setObject:v16 forKeyedSubscript:v31];
          }
        }
        else if (v17)
        {
          id v24 = objc_opt_class();
          id v49 = v24;
          uint64_t v25 = [v14 adamId];
          unsigned int v26 = [v14 type];
          [v14 expirationDate];
          long long v27 = v9;
          v29 = uint64_t v28 = v12;
          unsigned int v30 = [v14 autoRenewStatus];
          *(_DWORD *)long long buf = v46;
          long long v63 = v24;
          __int16 v64 = 2114;
          id v65 = v25;
          __int16 v66 = 1024;
          *(_DWORD *)id v67 = v26;
          id v10 = v47;
          *(_WORD *)&v67[4] = 2114;
          *(void *)&v67[6] = v29;
          __int16 v68 = 1024;
          unsigned int v69 = v30;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Not prompting for IAP: %{public}@, type: %hhu, expiration date: %{public}@, auto-renew: %i", buf, 0x2Cu);

          uint64_t v12 = v28;
          uint64_t v9 = v27;
        }
      }
      id v51 = [v10 countByEnumeratingWithState:&v57 objects:v70 count:16];
    }
    while (v51);
  }

  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v52 = v9;
  id obj = [v9 allKeys];
  id v32 = [obj countByEnumeratingWithState:&v53 objects:v61 count:16];
  if (v32)
  {
    id v33 = v32;
    uint64_t v34 = *(void *)v54;
    do
    {
      for (j = 0; j != v33; j = (char *)j + 1)
      {
        if (*(void *)v54 != v34) {
          objc_enumerationMutation(obj);
        }
        uint64_t v36 = *(void *)(*((void *)&v53 + 1) + 8 * (void)j);
        uint64_t v37 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v36, v46);
        id v38 = [v52 objectForKeyedSubscript:v36];
        if ([v38 count] == (id)1)
        {
          uint64_t v39 = [v38 objectAtIndexedSubscript:0];
          uint64_t v50 = *(void *)(a1 + 48);
          long long v40 = [v37 longTitle];
          id v41 = [v37 storeItemID];
          [v39 expirationDate];
          id v42 = v33;
          v44 = uint64_t v43 = v34;
          sub_1003ED434(v50, v40, (uint64_t)v41, v44);

          uint64_t v34 = v43;
          id v33 = v42;
        }
        else
        {
          uint64_t v45 = *(void *)(a1 + 48);
          uint64_t v39 = [v37 longTitle];
          sub_1003EDACC(v45, v39, (uint64_t)[v37 storeItemID]);
        }
      }
      id v33 = [obj countByEnumeratingWithState:&v53 objects:v61 count:16];
    }
    while (v33);
  }
}

void sub_1003EE770(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  uint64_t v14 = self;
  unsigned int v15 = sub_10030B11C();
  id v39 = 0;
  __int16 v16 = sub_10030B9EC((uint64_t)v15, @"manageSubsSKV2Url", &v39);
  id v17 = v39;

  if (v17)
  {
    __int16 v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v19 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v43 = v19;
      __int16 v44 = 2114;
      id v45 = v17;
      id v20 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%{public}@]: Error retrieving URL for manage subs on app delete: %{public}@", buf, 0x16u);
    }
  }
  else
  {
    __int16 v18 = +[NSURLComponents componentsWithURL:v16 resolvingAgainstBaseURL:0];
    id v33 = v11;
    id v21 = +[NSString stringWithFormat:@"%lld", a6];
    id v22 = +[NSURLQueryItem queryItemWithName:@"app" value:v21];
    v41[0] = v22;
    +[NSURLQueryItem queryItemWithName:@"ctx" value:@"appdelete"];
    id v23 = v34 = v10;
    v41[1] = v23;
    +[NSArray arrayWithObjects:v41 count:2];
    id v24 = v32 = v14;
    [v18 setQueryItems:v24];

    uint64_t v25 = [v18 URL];
    id v26 = [objc_alloc((Class)AMSDialogRequest) initWithTitle:v34 message:v11];
    long long v27 = +[AMSDialogAction actionWithTitle:v12 style:0];
    uint64_t v28 = +[AMSDialogAction actionWithTitle:v13 style:2];
    v40[0] = v27;
    v40[1] = v28;
    long long v29 = +[NSArray arrayWithObjects:v40 count:2];
    [v26 setButtonActions:v29];

    [v26 setDefaultAction:v28];
    sub_100422394(v26, @"manageSubscriptionsOnDelete");
    sub_10025F158(v28, @"keep");
    sub_10025F158(v27, @"manage");
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    void v35[2] = sub_1003EEB24;
    v35[3] = &unk_10052C9F8;
    id v36 = v27;
    id v37 = v25;
    uint64_t v38 = v32;
    id v30 = v25;
    id v31 = v27;
    id v11 = v33;
    sub_10033CE18((uint64_t)InteractiveRequestPresenter, v26, v35);

    id v10 = v34;
  }
}

void sub_1003EEB24(uint64_t a1, void *a2)
{
  id v3 = [a2 selectedActionIdentifier];
  id v4 = [*(id *)(a1 + 32) identifier];
  unsigned int v5 = [v3 isEqualToString:v4];

  if (v5)
  {
    id v6 = objc_alloc_init((Class)AMSEngagementRequest);
    [v6 setURL:*(void *)(a1 + 40)];
    id v7 = +[ActiveAccountObserver activeAccount];
    [v6 setAccount:v7];

    id v8 = [objc_alloc((Class)AMSSystemEngagementTask) initWithRequest:v6];
    uint64_t v9 = [v8 present];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1003EEC50;
    v10[3] = &unk_10052C9D0;
    v10[4] = *(void *)(a1 + 48);
    [v9 addFinishBlock:v10];
  }
}

void sub_1003EEC50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    id v8 = [v6 domain];
    if ([v8 isEqualToString:AMSErrorDomain])
    {
      id v9 = [v7 code];

      if (v9 == (id)6) {
        goto LABEL_9;
      }
    }
    else
    {
    }
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138543618;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      unsigned int v15 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%{public}@]: Failed to present manage subs on app delete with error: %{public}@", (uint8_t *)&v12, 0x16u);
    }
  }
LABEL_9:
}

id *sub_1003EEFFC(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)ApplicationProxy;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5)
    {
      if (v4)
      {
        objc_storeStrong(v5 + 8, a2);
      }
      else
      {

        a1 = 0;
      }
    }
  }

  return a1;
}

id *sub_1003F013C(id *a1)
{
  if (a1)
  {
    sub_100428520(a1[8]);
    a1 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1003F0C24(id a1, LSApplicationExtensionRecord *a2)
{
  return sub_1003DA0E4(a2);
}

BOOL sub_1003F1140(id a1, LSApplicationRecord *a2)
{
  id v2 = a2;
  id v3 = [(LSApplicationRecord *)v2 bundleIdentifier];
  if (v3)
  {
    id v4 = [(LSApplicationRecord *)v2 bundleIdentifier];
    id v5 = [v4 length];

    if (v5
      && ([(LSApplicationRecord *)v2 iTunesMetadata],
          id v6 = objc_claimAutoreleasedReturnValue(),
          [v6 distributorInfo],
          objc_super v7 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v8 = [v7 distributorIsThirdParty],
          v7,
          v6,
          (v8 & 1) == 0))
    {
      id v9 = [(LSApplicationRecord *)v2 typeForInstallMachinery];
      LOBYTE(v3) = [v9 isEqualToString:LSUserApplicationType];
    }
    else
    {
      LOBYTE(v3) = 0;
    }
  }

  return (char)v3;
}

BOOL sub_1003F1208(id a1, LSApplicationRecord *a2)
{
  id v2 = [(LSApplicationRecord *)a2 typeForInstallMachinery];
  unsigned __int8 v3 = [v2 isEqualToString:LSSystemApplicationType];

  return v3;
}

BOOL sub_1003F1250(id a1, LSApplicationRecord *a2)
{
  id v2 = [(LSApplicationRecord *)a2 typeForInstallMachinery];
  unsigned __int8 v3 = [v2 isEqualToString:LSInternalApplicationType];

  return v3;
}

void sub_1003F1298(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v4 = sub_1003EEFFC((id *)[ApplicationProxy alloc], v5);
  if (v4) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_1003F173C()
{
  self;
  if (qword_1005B1238 != -1) {
    dispatch_once(&qword_1005B1238, &stru_10052CAE0);
  }
  id v0 = (void *)qword_1005B1230;
  return v0;
}

void sub_1003F1794(id a1)
{
  uint64_t v1 = objc_alloc_init(RepairService);
  id v2 = (void *)qword_1005B1230;
  qword_1005B1230 = (uint64_t)v1;
}

void sub_1003F18DC(void **a1)
{
  id v2 = sub_1002A7628((id *)[RepairApplicationTask alloc], a1[4], a1[5]);
  newValue[0] = _NSConcreteStackBlock;
  newValue[1] = 3221225472;
  newValue[2] = sub_1003F19B8;
  newValue[3] = &unk_10052BE30;
  id v7 = a1[6];
  if (v2) {
    objc_setProperty_atomic_copy(v2, v3, newValue, 64);
  }
  uint64_t v4 = sub_1002B2A3C();
  id v5 = (void *)v4;
  if (v4) {
    [*(id *)(v4 + 8) addOperation:v2];
  }
}

void sub_1003F19B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  ASDErrorWithSafeUserInfo();
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id, id))(v4 + 16))(v4, a2, v5, v6);
}

void sub_1003F1B1C(uint64_t a1)
{
  id v2 = objc_alloc_init(_TtC9appstored6LogKey);
  unsigned __int8 v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [*(id *)(a1 + 32) processInfo];
    id v5 = [v4 bundleIdentifier];
    *(_DWORD *)long long buf = 138412546;
    id v17 = v2;
    __int16 v18 = 2114;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Processing keybag refresh for client: %{public}@", buf, 0x16u);
  }
  id v6 = objc_alloc_init(RefetchKeybag);
  unsigned __int8 v8 = v6;
  if (v6)
  {
    objc_setProperty_atomic_copy(v6, v7, v2, 32);
    v8->_userInitiated = 1;
  }
  id v9 = sub_10023A6C4((id *)&v8->super.isa);
  id v15 = 0;
  id v10 = [v9 resultWithError:&v15];
  id v11 = v15;

  int v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v17 = v2;
    __int16 v18 = 1024;
    LODWORD(v19) = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Keybag refresh complete with result: %d", buf, 0x12u);
  }

  uint64_t v13 = *(void *)(a1 + 40);
  __int16 v14 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, id, void *))(v13 + 16))(v13, v10, v14);
}

id sub_1003F1D54(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"last_duet_sync"];
    id v2 = v1;
    if (v1)
    {
      id v3 = v1;
    }
    else
    {
      id v3 = +[NSDate distantPast];
    }
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

id sub_1003F1E0C(uint64_t a1, const __CFString *a2)
{
  self;
  id v3 = (void *)CFPreferencesCopyAppValue(a2, @"com.apple.appstored");
  objc_opt_class();
  uint64_t v4 = sub_100012D7C(v3);

  return v4;
}

id sub_1003F1E7C(uint64_t a1, void *a2, id a3)
{
  uint64_t v4 = a2;
  self;
  id v5 = (void *)CFPreferencesCopyAppValue(v4, @"com.apple.appstored");

  if (objc_opt_respondsToSelector()) {
    a3 = [v5 BOOLValue];
  }

  return a3;
}

id sub_1003F1EF8(uint64_t a1, const __CFString *a2)
{
  self;
  id v3 = (void *)CFPreferencesCopyAppValue(a2, @"com.apple.appstored");
  objc_opt_class();
  uint64_t v4 = sub_100012D7C(v3);

  return v4;
}

id sub_1003F1F68(uint64_t a1, const __CFString *a2)
{
  self;
  id v3 = (void *)CFPreferencesCopyAppValue(a2, @"com.apple.appstored");
  objc_opt_class();
  uint64_t v4 = sub_100012D7C(v3);

  return v4;
}

id sub_1003F1FD8(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = self;
  uint64_t v4 = (void *)sub_1003F2014(v3, a2);
  return v4;
}

uint64_t sub_1003F2014(uint64_t a1, const __CFString *a2)
{
  self;
  uint64_t v3 = (void *)CFPreferencesCopyAppValue(a2, @"com.apple.appstored");
  objc_opt_class();
  uint64_t v4 = sub_100012D7C(v3);

  return v4;
}

uint64_t sub_1003F2074(uint64_t a1, void *a2, const __CFString *a3)
{
  id v4 = a2;
  self;
  CFPreferencesSetAppValue(a3, v4, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

void sub_1003F20E0(uint64_t a1, uint64_t a2, void *a3)
{
  key = a3;
  self;
  self;
  CFPreferencesSetAppValue(key, +[NSNumber numberWithBool:a2], @"com.apple.appstored");
}

id sub_1003F2158(uint64_t a1, const __CFString *a2)
{
  self;
  uint64_t v3 = (void *)CFPreferencesCopyAppValue(a2, @"com.apple.appstored");
  objc_opt_class();
  id v4 = sub_100012D7C(v3);

  return v4;
}

id sub_1003F21C8()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"AdPlatformsStatusConditionSetDate", @"com.apple.appstored");
  return v0;
}

uint64_t sub_1003F2204(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"AdPlatformsStatusConditionSetDate", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F2268(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[NSString stringWithFormat:@"%@%@", @"TargetDate", v2];

  id v4 = (void *)CFPreferencesCopyAppValue(v3, @"com.apple.appstored");
  return v4;
}

id sub_1003F22F8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[NSString stringWithFormat:@"%@%@", @"PostIntervalOverrideSeconds", v2];

  id v4 = (void *)CFPreferencesCopyAppValue(v3, @"com.apple.appstored");
  return v4;
}

void sub_1003F2388(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  key = +[NSString stringWithFormat:@"%@%@", @"TargetDate", v4];

  CFPreferencesSetAppValue(key, v5, @"com.apple.appstored");
  CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F2438()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"ClipDataReclaimHistory", @"com.apple.appstored");
  if (!v0) {
    id v0 = &__NSDictionary0__struct;
  }
  return v0;
}

uint64_t sub_1003F2484(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"ClipDataReclaimHistory", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

BOOL sub_1003F24E8()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"ClipEnableLZMAAutodetection", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

id sub_1003F2538()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"CrossfirePostMetricsSamplingPercentageOverride", @"com.apple.appstored");
  return v0;
}

id sub_1003F2574(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v4 = (__CFString *)sub_1003F2614(v3, v2);

  id v5 = (void *)CFPreferencesCopyAppValue(v4, @"com.apple.appstored");
  if (v5) {
    id v6 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v5 options:0];
  }
  else {
    id v6 = 0;
  }

  return v6;
}

id sub_1003F2614(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[AMSDevice serialNumber];
  id v4 = v3;
  if (!v3)
  {
    if (!sub_1004004CC())
    {
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Database defaults key generation failed unexpectedly", buf, 2u);
      }
    }
    id v4 = @"xyzzy";
  }
  id v6 = v4;

  id v7 = [v2 stringByAppendingString:v6];

  id v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"%lu", objc_msgSend(v7, "hash"));
  return v8;
}

void sub_1003F2730(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  key = (__CFString *)sub_1003F2614(v6, v4);

  id v7 = [v5 base64EncodedStringWithOptions:0];

  CFPreferencesSetAppValue(key, v7, @"com.apple.appstored");
  CFPreferencesAppSynchronize(@"com.apple.appstored");
}

BOOL sub_1003F27DC()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"DiagnosticClockEnabled", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

double sub_1003F282C()
{
  self;
  uint64_t v0 = self;
  uint64_t v1 = (void *)sub_1003F2014(v0, @"DiagnosticClockOffset");
  id v2 = v1;
  if (v1)
  {
    [v1 doubleValue];
    double v4 = v3;
  }
  else
  {
    double v4 = 0.0;
  }

  return v4;
}

id sub_1003F2888()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AppUsageActorID", @"com.apple.appstored");
  return v0;
}

BOOL sub_1003F28C4()
{
  return CFPreferencesGetAppBooleanValue(@"TasteProfileEnabled", @"com.apple.appstored", 0) != 0;
}

id sub_1003F28FC()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AppUsageDailyPostCountOverride", @"com.apple.appstored");
  return v0;
}

BOOL sub_1003F2938()
{
  return CFPreferencesGetAppBooleanValue(@"AppUsageEnableMetricsForActorIDSession", @"com.apple.appstored", 0) != 0;
}

id sub_1003F2970()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AppUsageFlushIntervalOverride", @"com.apple.appstored");
  return v0;
}

id sub_1003F29AC()
{
  uint64_t v0 = self;
  return sub_1003F1EF8(v0, @"AppUsageFlushTargetDate");
}

id sub_1003F29DC()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AppUsagePostMetricsSamplingPercentageOverride", @"com.apple.appstored");
  return v0;
}

id sub_1003F2A18()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AppUsageResetActorIDOverride", @"com.apple.appstored");
  return v0;
}

id sub_1003F2A54()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AppUsageResetActorIDTargetDate", @"com.apple.appstored");
  return v0;
}

id sub_1003F2A90()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AppUsageTaskGracePeriodOverride", @"com.apple.appstored");
  return v0;
}

id sub_1003F2ACC()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AppUsageTaskSpreadPeriodOverride", @"com.apple.appstored");
  return v0;
}

BOOL sub_1003F2B08()
{
  return CFPreferencesGetAppBooleanValue(@"AppUsageUseTestTopic", @"com.apple.appstored", 0) != 0;
}

uint64_t sub_1003F2B40()
{
  self;
  CFPreferencesSetAppValue(@"AppUsageEnableMetricsForActorIDSession", 0, @"com.apple.appstored");
  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F2B90(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"AppUsageActorID", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F2BF4(uint64_t a1, int a2)
{
  self;
  double v3 = (CFPropertyListRef *)&kCFBooleanTrue;
  if (!a2) {
    double v3 = (CFPropertyListRef *)&kCFBooleanFalse;
  }
  CFPreferencesSetAppValue(@"AppUsageEnableMetricsForActorIDSession", *v3, @"com.apple.appstored");
  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F2C60(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"AppUsageFlushTargetDate", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F2CC4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"AppUsageNextPostTargetDate", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F2D28(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"AppUsageResetActorIDTargetDate", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F2D8C()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"BeagleApps", @"com.apple.appstored");
  return v0;
}

id sub_1003F2DC8()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AnalyticsClientIDOverride", @"com.apple.appstored");
  return v0;
}

id sub_1003F2E04()
{
  self;
  uint64_t v0 = (void *)sub_1003F2014((uint64_t)AppDefaultsManager, @"ArcadeRepairTimeout");
  return v0;
}

id sub_1003F2E40()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"ArcadeDefaultApp", @"com.apple.appstored");
  return v0;
}

id sub_1003F2E7C()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"ArcadeDeviceGUID", @"com.apple.appstored");
  return v0;
}

id sub_1003F2EB8()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"ArcadeDeviceID", @"com.apple.appstored");
  return v0;
}

id sub_1003F2EF4()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"ArcadeDeviceIDCreationDate", @"com.apple.appstored");
  return v0;
}

id sub_1003F2F30()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"ArcadePayoutDeviceID", @"com.apple.appstored");
  return v0;
}

id sub_1003F2F6C()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"ArcadePayoutResetDate", @"com.apple.appstored");
  return v0;
}

BOOL sub_1003F2FA8()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"ArcadeShouldRetryOptOut", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

id sub_1003F2FF8()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"ArcadeSubscriptionState", @"com.apple.appstored");
  return v0;
}

uint64_t sub_1003F3034(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  self;
  CFPreferencesSetAppValue(@"ArcadeDeviceGUID", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F309C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  self;
  CFPreferencesSetAppValue(@"ArcadeDeviceID", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F3104(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  self;
  CFPreferencesSetAppValue(@"ArcadeDeviceIDCreationDate", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F316C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"ArcadePayoutResetDate", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

void sub_1003F31D0(uint64_t a1, void *a2)
{
  id value = a2;
  self;
  CFPreferencesSetAppValue(@"ArcadePayoutDeviceID", value, @"com.apple.appstored");
  CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F3240(uint64_t a1, int a2)
{
  self;
  double v3 = (CFPropertyListRef *)&kCFBooleanTrue;
  if (!a2) {
    double v3 = (CFPropertyListRef *)&kCFBooleanFalse;
  }
  CFPreferencesSetAppValue(@"ArcadeShouldRetryOptOut", *v3, @"com.apple.appstored");
  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

void sub_1003F32AC(uint64_t a1, void *a2)
{
  id value = a2;
  self;
  CFPreferencesSetAppValue(@"ArcadeSubscriptionState", value, @"com.apple.appstored");
  CFPreferencesAppSynchronize(@"com.apple.appstored");
}

BOOL sub_1003F331C()
{
  return CFPreferencesGetAppBooleanValue(@"ShouldShowAlertWhenArcadeDeviceIDRollsOver", @"com.apple.appstored", 0) != 0;
}

id sub_1003F3354()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"OncePerBoot", @"com.apple.appstored");
  if (!v0) {
    uint64_t v0 = &__NSDictionary0__struct;
  }
  return v0;
}

void sub_1003F33A0(uint64_t a1, void *a2)
{
  id value = a2;
  self;
  CFPreferencesSetAppValue(@"OncePerBoot", value, @"com.apple.appstored");
  CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F3410()
{
  self;
  uint64_t v0 = (void *)sub_1003F2014((uint64_t)AppDefaultsManager, @"PowerPluggedInOverride");
  return v0;
}

id sub_1003F344C()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AMSMetricsCanaryIdentifier", @"com.apple.AppleMediaServices");
  objc_opt_class();
  uint64_t v1 = sub_100012D7C(v0);

  return v1;
}

BOOL sub_1003F34BC()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"RepairForceSbsync", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

id sub_1003F3514()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"AttemptedPreflightAccounts", @"com.apple.appstored");
  return v0;
}

uint64_t sub_1003F3550()
{
  self;
  CFPreferencesSetAppValue(@"HasPresentedDistributorRestoreDialog", 0, @"com.apple.appstored");
  CFPreferencesSetAppValue(@"RestoreAccountIDs", 0, @"com.apple.appstored");
  CFPreferencesSetAppValue(@"FollowUpAccounts", 0, @"com.apple.appstored");
  CFPreferencesSetAppValue(@"AttemptedPreflightAccounts", 0, @"com.apple.appstored");
  CFPreferencesSetAppValue(@"RestoreItemKinds", 0, @"com.apple.appstored");
  CFPreferencesSetAppValue(@"RestoreStoreFrontIDs", 0, @"com.apple.appstored");
  CFPreferencesSetAppValue(@"RestoreSuppressTermsAndConditions", 0, @"com.apple.appstored");
  CFPreferencesSetAppValue(@"RestoreInstallsFailedWithCodeSigError", 0, @"com.apple.appstored");
  uint64_t v0 = (void *)qword_1005B1240;
  qword_1005B1240 = 0;

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F363C()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"FollowUpAccounts", @"com.apple.appstored");
  return v0;
}

BOOL sub_1003F3678()
{
  return CFPreferencesGetAppBooleanValue(@"PerformedPostRestoreUpdate", @"com.apple.appstored", 0) != 0;
}

id sub_1003F36B0()
{
  self;
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"RestoreSoftFailureRetryDate", @"com.apple.appstored");
  return v0;
}

void sub_1003F36EC(uint64_t a1, void *a2)
{
  id value = a2;
  self;
  CFPreferencesSetAppValue(@"AttemptedPreflightAccounts", value, @"com.apple.appstored");
  CFPreferencesAppSynchronize(@"com.apple.appstored");
}

void sub_1003F375C(uint64_t a1, void *a2)
{
  id value = a2;
  self;
  CFPreferencesSetAppValue(@"FollowUpAccounts", value, @"com.apple.appstored");
  CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F37CC(uint64_t a1, int a2)
{
  self;
  double v3 = (CFPropertyListRef *)&kCFBooleanTrue;
  if (!a2) {
    double v3 = (CFPropertyListRef *)&kCFBooleanFalse;
  }
  CFPreferencesSetAppValue(@"PerformedPostRestoreUpdate", *v3, @"com.apple.appstored");
  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

void sub_1003F3838(uint64_t a1, void *a2)
{
  id value = a2;
  self;
  CFPreferencesSetAppValue(@"RestoreSoftFailureRetryDate", value, @"com.apple.appstored");
  CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F38A8()
{
  uint64_t v0 = self;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000;
  id v8 = sub_100018448;
  id v9 = sub_100017DE0;
  id v10 = 0;
  uint64_t v1 = sub_1003F39B0();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003F3A04;
  v4[3] = &unk_10052CB18;
  void v4[4] = &v5;
  v4[5] = v0;
  dispatch_sync(v1, v4);

  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

id sub_1003F39B0()
{
  if (qword_1005B1250 != -1) {
    dispatch_once(&qword_1005B1250, &stru_10052CB38);
  }
  uint64_t v0 = (void *)qword_1005B1248;
  return v0;
}

void sub_1003F3A04(uint64_t a1)
{
  uint64_t v2 = sub_1003F3A50();
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  double v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1003F3A50()
{
  self;
  if (qword_1005B1240) {
    id v0 = (id)qword_1005B1240;
  }
  else {
    id v0 = (id)CFPreferencesCopyAppValue(@"RestoreInstallsFailedWithCodeSigError", @"com.apple.appstored");
  }
  return v0;
}

void sub_1003F3AA0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  id v8 = v5;
  uint64_t v7 = +[NSArray arrayWithObjects:&v8 count:1];

  sub_1003F3B58(v6, v7, v4);
}

void sub_1003F3B58(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  if ([v4 count])
  {
    uint64_t v7 = sub_1003F39B0();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003F3C40;
    block[3] = &unk_100525408;
    uint64_t v11 = v6;
    id v9 = v4;
    id v10 = v5;
    dispatch_async(v7, block);
  }
}

void sub_1003F3C40(uint64_t a1)
{
  uint64_t v2 = sub_1003F3A50();
  uint64_t v3 = v2;
  if (!v2) {
    uint64_t v2 = &__NSDictionary0__struct;
  }
  id v4 = [v2 mutableCopy];

  id v5 = [v4 count];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = *(id *)(a1 + 32);
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend(v4, "setObject:forKeyedSubscript:", *(void *)(a1 + 40), *(void *)(*((void *)&v14 + 1) + 8 * i), (void)v14);
      }
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v8);
  }

  if (*(void *)(a1 + 40) || v5 != [v4 count])
  {
    id v11 = v4;
    self;
    id v12 = [v11 copy];

    uint64_t v13 = (void *)qword_1005B1240;
    qword_1005B1240 = (uint64_t)v12;

    CFPreferencesSetAppValue(@"RestoreInstallsFailedWithCodeSigError", (CFPropertyListRef)qword_1005B1240, @"com.apple.appstored");
    CFPreferencesAppSynchronize(@"com.apple.appstored");
  }
}

id sub_1003F3DEC()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"ManageSubsOnDeleteBlacklist", @"com.apple.appstored");
  return v0;
}

uint64_t sub_1003F3E28(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"ManageSubsOnDeleteBlacklist", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F3E8C()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"SKANWebImpressionFetchURL", @"com.apple.appstored");
  return v0;
}

BOOL sub_1003F3EC8()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"InstallAttributionIgnoreSourceAppCheck", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

id sub_1003F3F18()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"InstallAttributionShouldSendDevPingback", @"com.apple.appstored");
  return v0;
}

id sub_1003F3F54()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"InstallAttributionDeveloperPingbackOverride", @"com.apple.appstored");
  return v0;
}

BOOL sub_1003F3F90()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"developer-mode-enabled", @"com.apple.attributionkitd", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

id sub_1003F3FE0()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"skan-developer-mode-postback-delay", @"com.apple.attributionkitd");
  return v0;
}

id sub_1003F401C()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"skan-developer-mode-conversion-window-thresholds", @"com.apple.attributionkitd");
  return v0;
}

id sub_1003F4058()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"skan-developer-mode-should-use-proxy", @"com.apple.attributionkitd");
  return v0;
}

BOOL sub_1003F4094()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"ExternalPurchasesSpringBoardAppDeleteIsEnabled", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat != 1 || AppBooleanValue == 1;
}

uint64_t sub_1003F40E4(uint64_t a1, int a2)
{
  self;
  uint64_t v3 = (CFPropertyListRef *)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v3 = (CFPropertyListRef *)&kCFBooleanFalse;
  }
  CFPreferencesSetAppValue(@"ExternalPurchasesSpringBoardAppDeleteIsEnabled", *v3, @"com.apple.appstored");
  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F4150()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"UpdateCleanupTime", @"com.apple.appstored");
  return v0;
}

id sub_1003F418C()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"LastUpdatesCheck", @"com.apple.appstored");
  return v0;
}

id sub_1003F41C8()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"LastAutoUpdateCompletion", @"com.apple.appstored");
  return v0;
}

BOOL sub_1003F4204()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"DoForceDeltaUpdateFailure", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

uint64_t sub_1003F4254()
{
  self;
  CFPreferencesSetAppValue(@"UpdateCleanupTime", +[NSDate date], @"com.apple.appstored");
  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F42B0(uint64_t a1, int a2)
{
  self;
  uint64_t v3 = (CFPropertyListRef *)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v3 = (CFPropertyListRef *)&kCFBooleanFalse;
  }
  CFPreferencesSetAppValue(@"AutoUpdatesEnabled", *v3, @"com.apple.itunesstored");
  return CFPreferencesAppSynchronize(@"com.apple.itunesstored");
}

BOOL sub_1003F431C()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"HasPresentedDistributorRestoreDialog", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

uint64_t sub_1003F436C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"LastAutoUpdateCompletion", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F43D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"LastUpdatesPerform", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F4434(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"LastUpdatesCheck", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F4498(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"PreviouslyInstalledProvisionedApps", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

void sub_1003F44FC(uint64_t a1, uint64_t a2)
{
  self;
  self;
  uint64_t v3 = +[NSNumber numberWithBool:a2];
  CFPreferencesSetAppValue(@"HasPresentedDistributorRestoreDialog", v3, @"com.apple.appstored");
}

BOOL sub_1003F4558()
{
  self;
  self;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"UseFollowupsForRestoreFailures", @"com.apple.appstored", &keyExistsAndHasValidFormat);
  return keyExistsAndHasValidFormat == 1 && AppBooleanValue == 1;
}

id sub_1003F45A8()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"ForceAppDRMMode", @"com.apple.appstored");
  return v0;
}

id sub_1003F45E4()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"vppExpiredApps", @"com.apple.appstored");
  return v0;
}

id sub_1003F4620()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"vppRevokedApps", @"com.apple.appstored");
  return v0;
}

id sub_1003F465C()
{
  self;
  id v0 = +[ACAccountStore ams_sharedAccountStore];
  uint64_t v1 = objc_msgSend(v0, "ams_activeiTunesAccount");

  id v2 = [v1 accountPropertyForKey:@"automaticDownloadKinds"];
  id v3 = [v2 containsObject:@"software"];

  return v3;
}

BOOL sub_1003F46DC()
{
  return CFPreferencesGetAppBooleanValue(@"AutomationRunning", @"com.apple.appstored", 0) != 0;
}

id sub_1003F4714()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"AppClaimHistory", @"com.apple.appstored");
  return v0;
}

uint64_t sub_1003F4750()
{
  self;
  CFPreferencesSetAppValue(@"UpdateMigratorConfiguration", 0, @"com.apple.appstored");
  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

BOOL sub_1003F47A0()
{
  return CFPreferencesGetAppBooleanValue(@"ExternalDownloadSkipATSCheck", @"com.apple.appstored", 0) != 0;
}

BOOL sub_1003F47D8()
{
  return CFPreferencesGetAppBooleanValue(@"ExternalManifestSkipLocalCheck", @"com.apple.appstored", 0) != 0;
}

BOOL sub_1003F4810()
{
  return CFPreferencesGetAppBooleanValue(@"ExternalManifestSkipHTTPSCheck", @"com.apple.appstored", 0) != 0;
}

id sub_1003F4848()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"InvalidBuildToolVersions", @"com.apple.appstored");
  return v0;
}

id sub_1003F4884()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"LastOSBuildVersion", @"com.apple.appstored");
  return v0;
}

id sub_1003F48C0()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"PendingPushActionTypes", @"com.apple.appstored");
  return v0;
}

uint64_t sub_1003F48FC()
{
  self;
  CFPreferencesSetAppValue(@"LastOSInstallDate", +[NSDate date], @"com.apple.appstored");
  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F4958(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"AppClaimHistory", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F49BC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"InvalidBuildToolVersions", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

void sub_1003F4A20(uint64_t a1, void *a2)
{
  id value = a2;
  self;
  if (value)
  {
    CFPreferencesSetAppValue(@"LastOSBuildVersion", value, @"com.apple.appstored");
    CFPreferencesAppSynchronize(@"com.apple.appstored");
  }
  else
  {
    CFPreferencesSetAppValue(@"LastOSBuildVersion", 0, @"com.apple.appstored");
  }
}

uint64_t sub_1003F4AAC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"PendingPushActionTypes", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F4B10(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"TransporterConfiguration", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

uint64_t sub_1003F4B74(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  CFPreferencesSetAppValue(@"UpdateMigratorConfiguration", v2, @"com.apple.appstored");

  return CFPreferencesAppSynchronize(@"com.apple.appstored");
}

id sub_1003F4BD8()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"TestFlightFeedbackOverrides", @"com.apple.appstored");
  return v0;
}

id sub_1003F4C14()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"TransporterConfiguration", @"com.apple.appstored");
  return v0;
}

id sub_1003F4C50()
{
  self;
  id v0 = (void *)CFPreferencesCopyAppValue(@"UpdateMigratorConfiguration", @"com.apple.appstored");
  return v0;
}

void sub_1003F4C8C(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.appstored.restoreInstalls", v3);
  id v2 = (void *)qword_1005B1248;
  qword_1005B1248 = (uint64_t)v1;
}

id sub_1003F4D5C(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_opt_new();
    [v2 setAccountID:*(void *)(a1 + 304)];
    [v2 setBundleID:*(void *)(a1 + 72)];
    [v2 setBundleVersion:*(void *)(a1 + 80)];
    [v2 setCount:*(void *)(a1 + 392)];
    [v2 setCohort:*(void *)(a1 + 200)];
    [v2 setDeviceVendorID:*(void *)(a1 + 56)];
    [v2 setDuration:*(void *)(a1 + 232)];
    [v2 setEvid:*(void *)(a1 + 240)];
    objc_msgSend(v2, "setEventType:", sub_10022E700((uint64_t)AppEvent, *(unsigned __int8 *)(a1 + 24)));
    objc_msgSend(v2, "setEventSubtype:", sub_10022E744((uint64_t)AppEvent, *(unsigned __int8 *)(a1 + 28)));
    if (*(void *)(a1 + 248))
    {
      objc_msgSend(v2, "setEventTime:");
    }
    else
    {
      id v3 = [(id)a1 eventTime];
      [v2 setEventTime:v3];
    }
    [v2 setForegroundUsage:*(void *)(a1 + 384)];
    [v2 setForegroundUsageEvents:*(void *)(a1 + 256)];
    [v2 setHasBeenPosted:*(unsigned __int8 *)(a1 + 26)];
    id v4 = [(id)a1 underlyingDictionary];
    id v5 = [v4 objectForKeyedSubscript:@"appPlatform"];

    if (v5)
    {
      id v6 = [(id)a1 underlyingDictionary];
      id v7 = [v6 objectForKeyedSubscript:@"appPlatform"];
      [v2 setAppPlatform:v7];
    }
    id v8 = *(void **)(a1 + 16);
    BOOL v9 = v8 && ([v8 BOOLValue] & 1) != 0;
    [v2 setIsBeta:v9];
    id v10 = *(id *)(a1 + 96);
    if (v10) {
      id v11 = [*(id *)(a1 + 96) isEqualToString:@"clip"];
    }
    else {
      id v11 = 0;
    }
    [v2 setIsClip:v11];

    [v2 setItemName:*(void *)(a1 + 288)];
    [v2 setItemID:*(void *)(a1 + 280)];
    [v2 setStartTime:*(void *)(a1 + 352)];
    [v2 setShortVersion:*(void *)(a1 + 344)];
    [v2 setStorefront:*(void *)(a1 + 360)];
    [v2 setWeekStartDate:*(void *)(a1 + 408)];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003F5058(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"usageClientId"];
    objc_storeStrong(a1 + 6, a2);
    id v4 = v5;
  }
}

void sub_1003F50D0(uint64_t a1, int a2)
{
  if (a1)
  {
    char v2 = a2;
    id v4 = sub_1003F5134((__CFString *)a1, a2);
    [(id)a1 setProperty:v4 forBodyKey:@"eventType"];

    *(unsigned char *)(a1 + 24) = v2;
  }
}

__CFString *sub_1003F5134(__CFString *a1, int a2)
{
  if (a1)
  {
    id v3 = &off_10052A648;
    switch(a2)
    {
      case 0:
        break;
      case 1:
        id v3 = &off_10052A658;
        break;
      case 2:
        if (a1[2].isa == (void *)3) {
          id v3 = &off_10052A668;
        }
        else {
          id v3 = &off_10052A660;
        }
        break;
      case 3:
        id v3 = &off_10052A670;
        break;
      case 4:
        id v3 = &off_10052A680;
        break;
      case 5:
        id v3 = &off_10052A650;
        break;
      default:
        id v3 = &off_10052A678;
        break;
    }
    a1 = *v3;
    uint64_t v2 = vars8;
  }
  return a1;
}

void sub_1003F5210(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"app_sessionreporter_key"];
    objc_storeStrong(a1 + 7, a2);
    id v4 = v5;
  }
}

void sub_1003F5288(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = a2;
    uint64_t v4 = +[NSNumber numberWithBool:a2];
    id v5 = (void *)a1[1];
    a1[1] = v4;

    if (v2)
    {
      uint64_t v6 = a1[1];
      [a1 setProperty:v6 forBodyKey:@"app_sessionreporter_key_repaired"];
    }
  }
}

void sub_1003F5318(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = a2;
    uint64_t v4 = +[NSNumber numberWithBool:a2];
    id v5 = (void *)a1[2];
    a1[2] = v4;

    if (v2)
    {
      uint64_t v6 = a1[2];
      [a1 setProperty:v6 forBodyKey:@"isBeta"];
    }
  }
}

void sub_1003F53A8(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"bundleId"];
    objc_storeStrong(a1 + 9, a2);
    id v4 = v5;
  }
}

void sub_1003F5420(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"bundleVersion"];
    objc_storeStrong(a1 + 10, a2);
    id v4 = v5;
  }
}

void sub_1003F5498(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"clientEventId"];
    objc_storeStrong(a1 + 11, a2);
    id v4 = v5;
  }
}

void sub_1003F5510(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"campaign_at"];
    objc_storeStrong(a1 + 13, a2);
    id v4 = v5;
  }
}

void sub_1003F5588(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"appType"];
    objc_storeStrong(a1 + 12, a2);
    id v4 = v5;
  }
}

void sub_1003F5600(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"campaign"];
    objc_storeStrong(a1 + 14, a2);
    id v4 = v5;
  }
}

void sub_1003F5678(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"campaign_ct"];
    objc_storeStrong(a1 + 15, a2);
    id v4 = v5;
  }
}

void sub_1003F56F0(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    [a1 setProperty:v3 forBodyKey:@"installCampaign_at"];
    id v4 = [v3 copy];

    id v5 = (void *)a1[16];
    a1[16] = v4;
  }
}

void sub_1003F5770(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    [a1 setProperty:v3 forBodyKey:@"installCampaign_ct"];
    id v4 = [v3 copy];

    id v5 = (void *)a1[17];
    a1[17] = v4;
  }
}

void sub_1003F57F0(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    [a1 setProperty:v3 forBodyKey:@"installCampaign_pt"];
    id v4 = [v3 copy];

    id v5 = (void *)a1[18];
    a1[18] = v4;
  }
}

void sub_1003F5870(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"installRefSource"];
    objc_storeStrong(a1 + 19, a2);
    id v4 = v5;
  }
}

void sub_1003F58E8(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"installRefType"];
    objc_storeStrong(a1 + 20, a2);
    id v4 = v5;
  }
}

void sub_1003F5960(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"campaign_pt"];
    objc_storeStrong(a1 + 22, a2);
    id v4 = v5;
  }
}

void sub_1003F59D8(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"refSource"];
    objc_storeStrong(a1 + 21, a2);
    id v4 = v5;
  }
}

void sub_1003F5A50(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"refType"];
    objc_storeStrong(a1 + 23, a2);
    id v4 = v5;
  }
}

void sub_1003F5AC8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v8 = v3;
    id v5 = [v3 copy];
    id v6 = a1[24];
    a1[24] = v5;

    unsigned int v7 = [a1[24] BOOLValue];
    id v4 = v8;
    if (v7)
    {
      [a1 setProperty:a1[24] forBodyKey:@"thirdPartyWithNoAppReferrer"];
      id v4 = v8;
    }
  }
}

void sub_1003F5B5C(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"cohort"];
    objc_storeStrong(a1 + 25, a2);
    id v4 = v5;
  }
}

void sub_1003F5BD4(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithInteger:a2];
    [a1 setProperty:v4 forBodyKey:@"cumulativeUserCount"];

    a1[27] = a2;
  }
}

void sub_1003F5C44(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    [a1 setProperty:v4 forBodyKey:@"eventTime"];
    v5.receiver = a1;
    v5.super_class = (Class)AppUsageMetricsEvent;
    objc_msgSendSuper2(&v5, "setEventTime:", v4);
    objc_storeStrong(a1 + 31, a2);
  }
}

void sub_1003F5CD0(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v6 = v4;
    if (objc_opt_respondsToSelector())
    {
      objc_super v5 = [v6 stringValue];
      [a1 setProperty:v5 forBodyKey:@"externalVersionId"];
    }
    objc_storeStrong(a1 + 30, a2);
    id v4 = v6;
  }
}

void sub_1003F5D70(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"collectionTime"];
    objc_storeStrong(a1 + 26, a2);
    id v4 = v5;
  }
}

void sub_1003F5DE8(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithLongLong:a2];
    [a1 setProperty:v4 forBodyKey:@"duration"];

    a1[29] = a2;
  }
}

void sub_1003F5E58(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"foregroundEvents"];
    objc_storeStrong(a1 + 32, a2);
    id v4 = v5;
  }
}

void sub_1003F5ED0(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"hardwareFamily"];
    objc_storeStrong(a1 + 33, a2);
    id v4 = v5;
  }
}

void sub_1003F5F48(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"hardwareModel"];
    objc_storeStrong(a1 + 34, a2);
    id v4 = v5;
  }
}

unsigned char *sub_1003F5FC0(unsigned char *result, int a2)
{
  if (result)
  {
    char v2 = a2;
    id v3 = result;
    id v4 = &off_10052A6C0;
    id v5 = &off_10052A6C8;
    if (a2 != 2) {
      id v5 = &off_10052A6B8;
    }
    if (a2 != 1) {
      id v4 = v5;
    }
    uint64_t result = [result setProperty:*v4 forBodyKey:@"installationType"];
    v3[27] = v2;
  }
  return result;
}

void sub_1003F6030(unsigned char *a1, int a2)
{
  if (a1)
  {
    char v2 = a2;
    id v4 = sub_100333AF0((uint64_t)MetricsHandler, a2);
    [a1 setProperty:v4 forBodyKey:@"installType"];

    a1[28] = v2;
  }
}

void sub_1003F609C(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithBool:a2];
    [a1 setProperty:v3 forBodyKey:@"isSystemApp"];
  }
}

void sub_1003F610C(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v6 = v4;
    id v5 = [v4 stringValue];
    if ([v5 length]) {
      [a1 setProperty:v5 forBodyKey:@"itemId"];
    }
    objc_storeStrong(a1 + 35, a2);

    id v4 = v6;
  }
}

void sub_1003F61A0(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"os"];
    objc_storeStrong(a1 + 40, a2);
    id v4 = v5;
  }
}

void sub_1003F6218(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"startTime"];
    objc_storeStrong(a1 + 44, a2);
    id v4 = v5;
  }
}

void sub_1003F6290(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"clientId"];
    objc_storeStrong(a1 + 37, a2);
    id v4 = v5;
  }
}

void sub_1003F6308(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"dsId"];
    objc_storeStrong(a1 + 38, a2);
    id v4 = v5;
  }
}

void sub_1003F6380(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"osBuildNumber"];
    objc_storeStrong(a1 + 41, a2);
    id v4 = v5;
  }
}

void sub_1003F63F8(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"platform"];
    objc_storeStrong(a1 + 42, a2);
    id v4 = v5;
  }
}

void sub_1003F6470(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithLongLong:a2];
    [a1 setProperty:v4 forBodyKey:@"qualificationDuration"];

    a1[50] = a2;
  }
}

void sub_1003F64E0(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"shortAppVersion"];
    objc_storeStrong(a1 + 43, a2);
    id v4 = v5;
  }
}

void sub_1003F6558(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"storefront"];
    objc_storeStrong(a1 + 45, a2);
    id v4 = v5;
  }
}

void sub_1003F65D0(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithLongLong:a2];
    [a1 setProperty:v4 forBodyKey:@"rangeEndTime"];

    a1[46] = a2;
  }
}

void sub_1003F6640(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithLongLong:a2];
    [a1 setProperty:v4 forBodyKey:@"rangeStartTime"];

    a1[47] = a2;
  }
}

void sub_1003F66B0(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithInteger:a2];
    [a1 setProperty:v4 forBodyKey:@"count"];

    a1[49] = a2;
  }
}

void sub_1003F6720(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithLongLong:a2];
    [a1 setProperty:v4 forBodyKey:@"foregroundDuration"];

    a1[48] = a2;
  }
}

void sub_1003F6790(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = v4;
    [a1 setProperty:v4 forBodyKey:@"weekStartDate"];
    objc_storeStrong(a1 + 51, a2);
    id v4 = v5;
  }
}

void sub_1003F7B78(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1003F7B88);
  }
  _Unwind_Resume(a1);
}

void sub_1003F7B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t sub_1003F7C30(void *a1, void *a2)
{
  id v3 = a2;
  id v60 = 0;
  BOOL v4 = sub_1002788C8(v3, &v60);
  id v5 = v60;
  id v6 = +[MadBridge shared];
  unsigned int v7 = [v3 identity];
  id v8 = [v7 bundleID];
  unsigned int v9 = [v6 isThirdPartyRestore:v8];

  if (!v9)
  {
    if (!v4)
    {
      uint64_t v25 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        uint64_t v32 = (void *)a1[4];
        if (v32) {
          uint64_t v32 = (void *)v32[6];
        }
        *(_DWORD *)long long buf = 138412802;
        long long v62 = v32;
        __int16 v63 = 2114;
        id v64 = v3;
        __int16 v65 = 2114;
        id v66 = v5;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "[%@] Not responsible for coordinator: %{public}@ or error occurred: %{public}@", buf, 0x20u);
      }
      goto LABEL_22;
    }
    id v22 = (void *)a1[5];
    id v23 = [v3 uniqueIdentifier];
    id v24 = [v22 objectForKeyedSubscript:v23];

    if (v24)
    {
      uint64_t v25 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = a1[4];
        if (v26) {
          long long v27 = *(void **)(v26 + 48);
        }
        else {
          long long v27 = 0;
        }
        uint64_t v28 = (void *)a1[5];
        id v29 = v27;
        id v30 = [v3 uniqueIdentifier];
        id v31 = [v28 objectForKeyedSubscript:v30];
        *(_DWORD *)long long buf = 138412546;
        long long v62 = v27;
        __int16 v63 = 2114;
        id v64 = v31;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Skipping store item coordinator due to existing restore", buf, 0x16u);
      }
LABEL_22:

      goto LABEL_23;
    }
    uint64_t v34 = a1[6];
    id v59 = 0;
    id v35 = +[RestoreInstallCreator createRestoreFromCoordinatorWithCoordinator:v3 policy:v34 error:&v59];
    id v36 = v59;
    if (v36)
    {
      id v37 = (void *)a1[7];
      uint64_t v38 = sub_1002790EC(v3);
      [v37 setObject:v36 forKeyedSubscript:v38];

      id v39 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = a1[4];
        if (v40) {
          id v41 = *(void **)(v40 + 48);
        }
        else {
          id v41 = 0;
        }
        id v42 = v41;
        uint64_t v43 = [v3 identity];
        __int16 v44 = [v43 bundleID];
        *(_DWORD *)long long buf = 138412802;
        long long v62 = v41;
        __int16 v63 = 2114;
        id v64 = v44;
        __int16 v65 = 2114;
        id v66 = v36;
        _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] Hard failed coordinator due to placeholder error: %{public}@", buf, 0x20u);
      }
    }
    else
    {
      id v45 = (void *)a1[8];
      long long v46 = [v3 identity];
      __int16 v47 = [v46 bundleID];
      id v48 = [v45 indexOfObject:v47];

      if ((unint64_t)v48 < a1[13]) {
        [v35 setValue:&off_10054CF78 forProperty:@"priority"];
      }
      if (v48 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        [v35 setValue:&off_10054CF90 forProperty:@"order_index"];
      }
      else
      {
        id v49 = +[NSNumber numberWithUnsignedInteger:v48];
        [v35 setValue:v49 forProperty:@"order_index"];
      }
      uint64_t v50 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v51 = a1[4];
        if (v51) {
          long long v52 = *(void **)(v51 + 48);
        }
        else {
          long long v52 = 0;
        }
        id v53 = v52;
        long long v54 = sub_100424C14(v35);
        *(_DWORD *)long long buf = 138412546;
        long long v62 = v52;
        __int16 v63 = 2112;
        id v64 = v54;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "[%@] [%@] Beginning restore", buf, 0x16u);
      }
      [*(id *)(*(void *)(a1[11] + 8) + 40) addObject:v35];
      if ((unint64_t)[*(id *)(*(void *)(a1[11] + 8) + 40) count] < 0x32) {
        goto LABEL_41;
      }
      long long v55 = sub_1003E0BA4();
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_1003F835C;
      v58[3] = &unk_100523CF8;
      v58[4] = a1[11];
      [v55 modifyUsingTransaction:v58];

      *(void *)(*(void *)(a1[12] + 8) + 24) += [*(id *)(*(void *)(a1[11] + 8) + 40) count];
      id v56 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v57 = *(void *)(a1[11] + 8);
      id v39 = *(NSObject **)(v57 + 40);
      *(void *)(v57 + 40) = v56;
    }

LABEL_41:
    goto LABEL_23;
  }
  id v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = a1[4];
    if (v11) {
      id v12 = *(void **)(v11 + 48);
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;
    long long v14 = [v3 identity];
    long long v15 = [v14 bundleID];
    *(_DWORD *)long long buf = 138412546;
    long long v62 = v12;
    __int16 v63 = 2114;
    id v64 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Found marketplace app", buf, 0x16u);
  }
  *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 1;
  if (v4)
  {
    long long v16 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = a1[4];
      if (v17) {
        __int16 v18 = *(void **)(v17 + 48);
      }
      else {
        __int16 v18 = 0;
      }
      id v19 = v18;
      id v20 = [v3 identity];
      id v21 = [v20 bundleID];
      *(_DWORD *)long long buf = 138412546;
      long long v62 = v18;
      __int16 v63 = 2114;
      id v64 = v21;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Updating responsible restore responsible client", buf, 0x16u);
    }
    [*(id *)(*(void *)(a1[10] + 8) + 40) addObject:v3];
  }
LABEL_23:

  return 1;
}

uint64_t sub_1003F835C(uint64_t a1, void *a2)
{
  id v2 = objc_unsafeClaimAutoreleasedReturnValue(sub_10023845C(a2, *(void **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 40)));
  return 1;
}

void sub_1003F8394(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (v14) {
      uint64_t v14 = *(void *)(v14 + 48);
    }
    *(_DWORD *)long long buf = 138412802;
    uint64_t v20 = v14;
    __int16 v21 = 2114;
    id v22 = v5;
    __int16 v23 = 2114;
    id v24 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Failing coordinator: %{public}@ with reason: %{public}@", buf, 0x20u);
  }

  id v18 = 0;
  id v8 = sub_100278E08((uint64_t)IXAppInstallCoordinator, v5, &v18);
  id v9 = v18;
  id v10 = v9;
  if (!v8)
  {
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      if (v15) {
        uint64_t v15 = *(void *)(v15 + 48);
      }
      *(_DWORD *)long long buf = 138412802;
      uint64_t v20 = v15;
      __int16 v21 = 2114;
      id v22 = v5;
      __int16 v23 = 2114;
      id v24 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@] Could not find coordinator to cancel: %{public}@ error: %{public}@", buf, 0x20u);
    }
    goto LABEL_7;
  }
  id v17 = v9;
  char v11 = sub_100279D48(v8, v6, &v17);
  id v12 = v17;

  if ((v11 & 1) == 0)
  {
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      if (v16) {
        uint64_t v16 = *(void *)(v16 + 48);
      }
      *(_DWORD *)long long buf = 138412802;
      uint64_t v20 = v16;
      __int16 v21 = 2114;
      id v22 = v8;
      __int16 v23 = 2114;
      id v24 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@] Could not fail coordinator: %{public}@ error: %{public}@", buf, 0x20u);
    }
    id v10 = v12;
LABEL_7:

    id v12 = v10;
  }
}

uint64_t sub_1003F8608(uint64_t a1, void *a2)
{
  id v2 = objc_unsafeClaimAutoreleasedReturnValue(sub_10023845C(a2, *(void **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 40)));
  return 1;
}

void sub_1003F8640(id *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054CFA8];
  id v5 = [v3 connection];
  id v6 = sub_1002FF548((uint64_t)AppInstallEntity, v5, v4);

  unsigned int v7 = +[RestoreAppInstall defaultProperties];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003F87A0;
  v9[3] = &unk_10052CBB0;
  id v10 = v3;
  id v11 = a1[4];
  id v12 = a1[5];
  id v13 = a1[6];
  id v8 = v3;
  [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v9];
}

void sub_1003F87A0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  unsigned int v7 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:v6];
  id v8 = [(SQLiteEntity *)v6 valueForProperty:@"coordinator_id"];
  id v9 = [(SQLiteEntity *)v6 valueForProperty:@"bootstrapped"];
  if ([v9 integerValue] != (id)2)
  {
    id v10 = sub_1002C1EE8(v6);
    id v11 = *(void **)(a1 + 40);
    id v12 = [v10 description];
    [v11 addObject:v12];
  }
  id v13 = sub_100367A80(v6, @"failure_error");
  if (!v13)
  {
    if (!v8 || !v7) {
      goto LABEL_14;
    }
LABEL_13:
    id v17 = [(LogKey *)v7 description];
    [*(id *)(a1 + 48) setObject:v17 forKeyedSubscript:v8];

    goto LABEL_14;
  }
  int IsEqual = ASDErrorIsEqual();
  if (v8 && v7 && (IsEqual & 1) == 0) {
    goto LABEL_13;
  }
  if (IsEqual)
  {
    uint64_t v15 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      __int16 v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@] [%@] DB has previous device based VPP app failure", buf, 0x16u);
    }

    ASDDebugLog();
  }
LABEL_14:
}

id sub_1003F8A7C()
{
  self;
  if (qword_1005B1260 != -1) {
    dispatch_once(&qword_1005B1260, &stru_10052CBD0);
  }
  id v0 = (void *)qword_1005B1258;
  return v0;
}

void sub_1003F8AD4(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" value:&off_10054CFC0 comparisonType:5];
  id v2 = (void *)qword_1005B1258;
  qword_1005B1258 = v1;
}

id sub_1003F8B28()
{
  self;
  if (qword_1005B1270 != -1) {
    dispatch_once(&qword_1005B1270, &stru_10052CBF0);
  }
  id v0 = (void *)qword_1005B1268;
  return v0;
}

void sub_1003F8B80(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054CFD8];
  id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)", &off_10054CFF0, 5, v1 value comparisonType];
  v7[1] = v2;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_state" equalToValue:&off_10054D008];
  v7[2] = v3;
  BOOL v4 = +[NSArray arrayWithObjects:v7 count:3];
  uint64_t v5 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v4];
  id v6 = (void *)qword_1005B1268;
  qword_1005B1268 = v5;
}

id sub_1003F8CA8()
{
  self;
  if (qword_1005B1280 != -1) {
    dispatch_once(&qword_1005B1280, &stru_10052CC10);
  }
  id v0 = (void *)qword_1005B1278;
  return v0;
}

void sub_1003F8D00(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"client_type" equalToValue:&off_10054CFD8];
  id v2 = (void *)qword_1005B1278;
  qword_1005B1278 = v1;
}

id sub_1003F8D50()
{
  self;
  if (qword_1005B1290 != -1) {
    dispatch_once(&qword_1005B1290, &stru_10052CC30);
  }
  id v0 = (void *)qword_1005B1288;
  return v0;
}

void sub_1003F8DA8(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054CFD8];
  v6[0] = v1;
  id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054CFD8];
  v6[1] = v2;
  id v3 = +[NSArray arrayWithObjects:v6 count:2];
  uint64_t v4 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v3];
  uint64_t v5 = (void *)qword_1005B1288;
  qword_1005B1288 = v4;
}

id sub_1003F8E9C()
{
  self;
  if (qword_1005B12A0[0] != -1) {
    dispatch_once(qword_1005B12A0, &stru_10052CC50);
  }
  id v0 = (void *)qword_1005B1298;
  return v0;
}

void sub_1003F8EF4(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054D008];
  v6[0] = v1;
  id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054CFC0];
  v6[1] = v2;
  id v3 = +[NSArray arrayWithObjects:v6 count:2];
  uint64_t v4 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v3];
  uint64_t v5 = (void *)qword_1005B1298;
  qword_1005B1298 = v4;
}

id sub_1003F8FE8()
{
  self;
  if (qword_1005B12C0 != -1) {
    dispatch_once(&qword_1005B12C0, &stru_10052CC70);
  }
  id v0 = (void *)qword_1005B12B8;
  return v0;
}

void sub_1003F9040(id a1)
{
  id v12 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054CFD8];
  v14[0] = v12;
  id v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054D020];
  v14[1] = v11;
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054D038];
  v14[2] = v1;
  id v2 = +[NSArray arrayWithObjects:v14 count:3];
  id v3 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v2];
  v15[0] = v3;
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054D068];
  v13[0] = v4;
  uint64_t v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054D050];
  v13[1] = v5;
  id v6 = +[NSArray arrayWithObjects:v13 count:2];
  unsigned int v7 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v6];
  v15[1] = v7;
  id v8 = +[NSArray arrayWithObjects:v15 count:2];
  uint64_t v9 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v8];
  id v10 = (void *)qword_1005B12B8;
  qword_1005B12B8 = v9;
}

id sub_1003F923C()
{
  self;
  if (qword_1005B12D0 != -1) {
    dispatch_once(&qword_1005B12D0, &stru_10052CC90);
  }
  id v0 = (void *)qword_1005B12C8;
  return v0;
}

void sub_1003F9294(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054CFD8];
  id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type", &off_10054D020, v1 equalToValue];
  v10[1] = v2;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054D038];
  void v10[2] = v3;
  uint64_t v4 = +[NSArray arrayWithObjects:v10 count:3];
  uint64_t v5 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v4];
  v11[0] = v5;
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054D068];
  v11[1] = v6;
  unsigned int v7 = +[NSArray arrayWithObjects:v11 count:2];
  uint64_t v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];
  uint64_t v9 = (void *)qword_1005B12C8;
  qword_1005B12C8 = v8;
}

id sub_1003F941C()
{
  self;
  if (qword_1005B12E0 != -1) {
    dispatch_once(&qword_1005B12E0, &stru_10052CCB0);
  }
  id v0 = (void *)qword_1005B12D8;
  return v0;
}

void sub_1003F9474(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054CFD8];
  id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)", &off_10054CFD8, v1 equalToValue];
  v7[1] = v2;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_state" equalToValue:&off_10054D020];
  v7[2] = v3;
  uint64_t v4 = +[NSArray arrayWithObjects:v7 count:3];
  uint64_t v5 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v4];
  id v6 = (void *)qword_1005B12D8;
  qword_1005B12D8 = v5;
}

id sub_1003F9598()
{
  self;
  if (qword_1005B12F0 != -1) {
    dispatch_once(&qword_1005B12F0, &stru_10052CCD0);
  }
  id v0 = (void *)qword_1005B12E8;
  return v0;
}

void sub_1003F95F0(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054D068];
  v6[0] = v1;
  id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToValue:&off_10054CFD8];
  v6[1] = v2;
  id v3 = +[NSArray arrayWithObjects:v6 count:2];
  uint64_t v4 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v3];
  uint64_t v5 = (void *)qword_1005B12E8;
  qword_1005B12E8 = v4;
}

id sub_1003F96E4()
{
  self;
  if (qword_1005B1300 != -1) {
    dispatch_once(&qword_1005B1300, &stru_10052CCF0);
  }
  id v0 = (void *)qword_1005B12F8;
  return v0;
}

void sub_1003F973C(id a1)
{
  uint64_t v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054CFD8];
  v11[0] = v1;
  id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054CFF0];
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)", &off_10054D080, v2 equalToValue];
  v10[1] = v3;
  uint64_t v4 = +[NSArray arrayWithObjects:v10 count:2];
  uint64_t v5 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v4];
  v11[1] = v5;
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_state" equalToValue:&off_10054CFD8];
  void v11[2] = v6;
  unsigned int v7 = +[NSArray arrayWithObjects:v11 count:3];
  uint64_t v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];
  uint64_t v9 = (void *)qword_1005B12F8;
  qword_1005B12F8 = v8;
}

id sub_1003F98D4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v2];

  v8[0] = v3;
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" value:&off_10054CFF0 comparisonType:5];
  v8[1] = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:v8 count:2];
  id v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];

  return v6;
}

id sub_1003F99E8(uint64_t a1, uint64_t a2)
{
  self;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToLongLong:a2];
  v8[0] = v3;
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054CFD8];
  v8[1] = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:v8 count:2];
  id v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];

  return v6;
}

id sub_1003F9AF0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  self;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0)
  {
    if (v8)
    {
      id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v8];
LABEL_4:
      id v11 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"IFNULL(app_install.phase, 10)" values:&off_10054E0E8];
      v19[0] = v10;
      v19[1] = v11;
      id v12 = +[NSArray arrayWithObjects:v19 count:2];
      id v13 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v12];

      goto LABEL_14;
    }
LABEL_10:
    if (a5)
    {
      id v17 = +[NSString stringWithFormat:@"Bundle identifier is required (source = '%ld')", a2];
LABEL_12:
      ASDErrorWithDescription();
      *a5 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_13;
    }
    goto LABEL_13;
  }
  if (!v8 || ![v8 length]) {
    goto LABEL_10;
  }
  if (v9 && [v9 unsignedLongLongValue])
  {
    uint64_t v14 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v8];
    v20[0] = v14;
    uint64_t v15 = +[SQLiteComparisonPredicate predicateWithProperty:@"item_id" equalToValue:v9];
    v20[1] = v15;
    uint64_t v16 = +[NSArray arrayWithObjects:v20 count:2];
    id v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v16];

    goto LABEL_4;
  }
  if (a5)
  {
    id v17 = +[NSString stringWithFormat:@"Item identifier is required (source = '%ld')", a2];
    goto LABEL_12;
  }
LABEL_13:
  id v13 = 0;
LABEL_14:

  return v13;
}

id sub_1003F9D70()
{
  self;
  v2[0] = @"app_adam_id";
  v2[1] = @"app_bundle_id";
  v2[2] = @"ad_network_id";
  v2[3] = @"campaign_id";
  v2[4] = @"source_identifier";
  v2[5] = @"transaction_id";
  v2[6] = @"attribution_signature";
  void v2[7] = @"source_app_adam_id";
  v2[8] = @"source_domain";
  v2[9] = @"conversion_value";
  v2[10] = @"coarse_conversion_value";
  v2[11] = @"conversion_value_timestamp";
  v2[12] = @"should_send_conversion_value";
  v2[13] = @"pingback_url";
  v2[14] = @"redownload";
  v2[15] = @"registered";
  uint8_t v2[16] = @"retry_count";
  v2[17] = @"retry_timestamp";
  v2[18] = @"version";
  v2[19] = @"local_timestamp";
  v2[20] = @"maturity_timestamp";
  v2[21] = @"fidelity_type";
  v2[22] = @"is_winning_pingback";
  v2[23] = @"is_developer_pingback";
  v2[24] = @"should_send_coarse_conversion_value";
  v2[25] = @"postback_sequence_index";
  v2[26] = @"is_locked";
  v2[27] = @"environment";
  id v0 = +[NSArray arrayWithObjects:v2 count:28];
  return v0;
}

id sub_1003F9F04()
{
  self;
  if (qword_1005B1310 != -1) {
    dispatch_once(&qword_1005B1310, &stru_10052CDF0);
  }
  id v0 = (void *)qword_1005B1318;
  return v0;
}

void sub_1003F9F5C(id a1)
{
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)qword_1005B1318;
  qword_1005B1318 = v1;

  self;
  sub_1002C98A4();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [v4 stringByAppendingPathComponent:@"storeSystem.db"];
  if (qword_1005B1318) {
    objc_storeStrong((id *)(qword_1005B1318 + 16), v3);
  }
}

void sub_1003F9FF4(id a1)
{
  uint64_t v1 = +[UMUserManager sharedManager];
  unsigned int v2 = [v1 isMultiUser];
  id v3 = [v1 currentUser];
  id v4 = [v3 userType];

  uint64_t v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 67109120;
    unsigned int v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Multiuser system : %{BOOL}d", (uint8_t *)&v9, 8u);
  }

  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 67109120;
    unsigned int v10 = v4 == (id)1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ephemeral user   : %{BOOL}d", (uint8_t *)&v9, 8u);
  }

  if (v4 == (id)1) {
    char v7 = v2;
  }
  else {
    char v7 = 0;
  }
  byte_1005B1308 = v7;
  id v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 67109120;
    unsigned int v10 = byte_1005B1308;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Edu Mode Enabled : %{BOOL}d", (uint8_t *)&v9, 8u);
  }
}

void sub_1003FA1A0(id a1)
{
  uint64_t v1 = container_system_group_path_for_identifier();
  if (v1)
  {
    unsigned int v2 = (void *)v1;
    uint64_t v3 = +[NSURL fileURLWithFileSystemRepresentation:v1 isDirectory:1 relativeToURL:0];
    id v4 = (void *)qword_1005B1328;
    qword_1005B1328 = v3;

    free(v2);
  }
  else
  {
    uint64_t v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v8 = 1;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error getting system container: %llu", buf, 0xCu);
    }
  }
  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v8 = qword_1005B1328;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "System container URL : %{public}@", buf, 0xCu);
  }
}

id sub_1003FA308(id a1)
{
  if (a1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003FA3B0;
    block[3] = &unk_100521388;
    void block[4] = a1;
    if (qword_1005B1340 != -1) {
      dispatch_once(&qword_1005B1340, block);
    }
    a1 = (id)qword_1005B1338;
    uint64_t v1 = block[6];
  }
  return a1;
}

void sub_1003FA3B0(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_10;
  }
  if (qword_1005B1320 != -1) {
    dispatch_once(&qword_1005B1320, &stru_10052CE10);
  }
  if (byte_1005B1308)
  {
    if (*(void *)(a1 + 32))
    {
      if (qword_1005B1330 != -1) {
        dispatch_once(&qword_1005B1330, &stru_10052CE30);
      }
      id v2 = (id)qword_1005B1328;
    }
    else
    {
      id v2 = 0;
    }
    uint64_t v3 = [v2 URLByAppendingPathComponent:@"Library"];
    id v4 = (void *)qword_1005B1338;
    qword_1005B1338 = v3;
  }
  else
  {
LABEL_10:
    NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = [v2 firstObject];
    id v4 = [v5 stringByAppendingPathComponent:@"OnDemandResources"];

    uint64_t v6 = +[NSURL fileURLWithPath:v4];
    char v7 = (void *)qword_1005B1338;
    qword_1005B1338 = v6;
  }
  uint64_t v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 138543362;
    uint64_t v10 = qword_1005B1338;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BaseURL for ODR content : %{public}@", (uint8_t *)&v9, 0xCu);
  }
}

void *sub_1003FA57C(void *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Going to verify/create all of our library paths.", buf, 2u);
    }

    v35[0] = NSFileOwnerAccountName;
    v35[1] = NSFileGroupOwnerAccountName;
    v36[0] = @"mobile";
    v36[1] = @"mobile";
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:2];
    uint64_t v6 = +[NSFileManager defaultManager];
    char v7 = sub_1003FA308(v3);
    uint64_t v8 = v7;
    if (a2)
    {
      int v9 = [v7 path];
      *a2 = [v6 fileExistsAtPath:v9 isDirectory:0] ^ 1;
    }
    uint64_t v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Check/Creating the base library path.", buf, 2u);
    }

    id v29 = 0;
    unsigned __int8 v11 = [v6 createDirectoryAtURL:v8 withIntermediateDirectories:1 attributes:v5 error:&v29];
    id v12 = v29;
    id v13 = ASDLogHandleForCategory();
    uint64_t v14 = v13;
    if (v11)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v32 = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Base path for ODR content : %{public}@", buf, 0xCu);
      }

      uint64_t v15 = [v8 URLByAppendingPathComponent:@"Database/odr.sqlite"];
      uint64_t v16 = [v15 path];
      id v17 = (void *)v3[3];
      v3[3] = v16;

      id v18 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Check/Creating the asset packs path.", buf, 2u);
      }

      uint64_t v19 = [v8 URLByAppendingPathComponent:@"AssetPacks"];
      uint64_t v28 = v12;
      unsigned int v20 = [v6 createDirectoryAtURL:v19 withIntermediateDirectories:1 attributes:v5 error:&v28];
      __int16 v21 = v28;

      if (v20)
      {
        uint64_t v22 = [v19 path];
        __int16 v23 = (void *)v3[4];
        v3[4] = v22;

        id v24 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v25 = v3[4];
          *(_DWORD *)long long buf = 138543362;
          uint64_t v32 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "AssetPacks path is: %{public}@", buf, 0xCu);
        }
      }
      else
      {
        long long v27 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543618;
          uint64_t v32 = v19;
          __int16 v33 = 2114;
          uint64_t v34 = v21;
          _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Unable to create or find the Asset Packs path [%{public}@]. Error: %{public}@", buf, 0x16u);
        }

        id v24 = v21;
        __int16 v21 = 0;
      }

      unsigned __int8 v30 = v20;
      id v12 = v21;
    }
    else
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Unable to create hase path for ODR content.", buf, 2u);
      }

      if (v12)
      {
        uint64_t v26 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543362;
          uint64_t v32 = v12;
          _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Underlying error : %{public}@", buf, 0xCu);
        }
      }
      unsigned __int8 v30 = 0;
    }

    return (void *)v30;
  }
  return result;
}

uint64_t sub_1003FAB2C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    return 1;
  }
  id v2 = v1;
  uint64_t v3 = +[NSFileManager defaultManager];
  id v4 = [v3 contentsOfDirectoryAtPath:v2 error:0];

  id v5 = [v4 mutableCopy];
  [v5 removeObject:@"StoreKit"];
  BOOL v6 = [v5 count] != 0;

  return v6;
}

id sub_1003FABE0(id a1)
{
  if (a1)
  {
    if (qword_1005B1350 != -1) {
      dispatch_once(&qword_1005B1350, &stru_10052CE50);
    }
    a1 = (id)qword_1005B1348;
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1003FAC3C(id a1)
{
  id v1 = objc_alloc_init((Class)NSRecursiveLock);
  id v2 = (void *)qword_1005B1348;
  qword_1005B1348 = (uint64_t)v1;
}

void sub_1003FAC78(void *a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    BOOL v6 = v3;
    id v4 = sub_1003FABE0(a1);
    [v4 lock];

    v6[2]();
    id v5 = sub_1003FABE0(a1);
    [v5 unlock];

    uint64_t v3 = v6;
  }
}

void sub_1003FAD10(_Unwind_Exception *a1)
{
}

void *sub_1003FAE5C(void *a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (a1)
  {
    id v7 = [a1 init];
    a1 = v7;
    if (v7)
    {
      objc_storeStrong((id *)v7 + 1, a2);
      a1[5] = a3;
    }
  }

  return a1;
}

id *sub_1003FAEC0(id *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)AMSMutableBinaryPromise);
    uint64_t v3 = [v1[2] integerForKey:@"min-keybag-repair-interval-seconds"];
    id v4 = [v3 valuePromise];

    id v5 = [v4 thenWithBlock:&stru_10052CEE8];

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1003FB038;
    v12[3] = &unk_10052CEA8;
    v12[4] = v1;
    id v6 = v2;
    id v13 = v6;
    [v5 addSuccessBlock:v12];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1003FB5A8;
    void v10[3] = &unk_100521910;
    id v7 = v6;
    id v11 = v7;
    [v5 addErrorBlock:v10];
    uint64_t v8 = v11;
    id v1 = (id *)v7;
  }
  return v1;
}

void sub_1003FB038(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v30 = 0;
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    if (*(void *)(v2 + 40) == 2) {
      uint64_t v4 = 8;
    }
    else {
      uint64_t v4 = 1;
    }
    id v5 = sub_1002F2D98((uint64_t)AMSKeybag, *(void **)(v2 + 8), v4, &v30);
    if (v5)
    {
      [v3 setObject:v5 forKeyedSubscript:@"kbsync"];
      id v6 = [*(id *)(v2 + 32) deviceGUID];
      id v7 = [v6 uppercaseString];
      [v3 setObject:v7 forKeyedSubscript:@"guid"];

      uint64_t v8 = [*(id *)(v2 + 32) deviceName];
      [v3 setObject:v8 forKeyedSubscript:@"machineName"];

      int v9 = objc_msgSend(*(id *)(v2 + 8), "ams_DSID");
      [v3 setObject:v9 forKeyedSubscript:@"ownerDsid"];

      uint64_t v10 = *(void *)(v2 + 40);
      CFStringRef v11 = @"family";
      if (v10 != 1) {
        CFStringRef v11 = 0;
      }
      if (v10 == 2) {
        CFStringRef v12 = @"refetch";
      }
      else {
        CFStringRef v12 = v11;
      }
      [v3 setObject:v12 forKeyedSubscript:@"reason"];
      id v13 = sub_10036DD18((uint64_t)FairPlay, *(void **)(v2 + 8), 0, (uint64_t)&v30);
      [v3 setObject:v13 forKeyedSubscript:@"token"];

      id v14 = v3;
    }
    else
    {
      id v14 = 0;
    }

    id v15 = v30;
    if (v14)
    {
      id v16 = [objc_alloc((Class)AMSURLRequestEncoder) initWithBag:*(void *)(v2 + 16)];
      [v16 setUrlKnownToBeTrusted:1];
      [v16 setAccount:*(void *)(v2 + 8)];
      [v16 setAnisetteType:2];
      [v16 setClientInfo:*(void *)(v2 + 24)];
      id v17 = [*(id *)(v2 + 16) URLForKey:@"authorizeMachine"];
      id v18 = [v16 requestWithMethod:4 bagURL:v17 parameters:v14];
      uint64_t v25 = _NSConcreteStackBlock;
      uint64_t v26 = 3221225472;
      long long v27 = sub_1003FB674;
      uint64_t v28 = &unk_100524198;
      uint64_t v29 = v2;
      uint64_t v19 = [v18 thenWithBlock:&v25];
    }
    else
    {
      uint64_t v19 = +[AMSPromise promiseWithError:v15];
    }

    uint64_t v25 = _NSConcreteStackBlock;
    uint64_t v26 = 3221225472;
    long long v27 = sub_1003FB748;
    uint64_t v28 = &unk_100524198;
    uint64_t v29 = v2;
    unsigned int v20 = [v19 thenWithBlock:&v25];
  }
  else
  {
    unsigned int v20 = 0;
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1003FB41C;
  v23[3] = &unk_10052CE80;
  id v24 = *(id *)(a1 + 40);
  [v20 addSuccessBlock:v23];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1003FB59C;
  v21[3] = &unk_100521910;
  id v22 = *(id *)(a1 + 40);
  [v20 addErrorBlock:v21];
}

void sub_1003FB41C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 object];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v6 = [v3 object];
  }
  else
  {
    id v6 = 0;
  }
  id v7 = sub_1002686AC(v6, @"failureType");
  if (v7)
  {
    if (objc_opt_respondsToSelector()) {
      [v7 integerValue];
    }
    CFStringRef v11 = ASDErrorWithTitleAndMessage();
    [*(id *)(a1 + 32) finishWithError:v11];
  }
  else
  {
    uint64_t v8 = sub_100268348(v6, @"keybag");
    if (v8)
    {
      int v9 = +[AMSKeybag sharedInstance];
      id v12 = 0;
      [v9 importKeybagWithData:v8 error:&v12];
      id v10 = v12;
    }
    else
    {
      id v10 = 0;
    }
    [*(id *)(a1 + 32) finishWithSuccess];
  }
}

id sub_1003FB59C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

id sub_1003FB5A8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

void sub_1003FB5B4(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = sub_1003FAEC0(a1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003FB660;
    v5[3] = &unk_1005230F0;
    id v6 = v3;
    [v4 addFinishBlock:v5];
  }
}

uint64_t sub_1003FB660(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1003FB674(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setCachePolicy:1];
  id v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id v6 = objc_getProperty(v5, v4, 48, 1);
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = [v6 stringValue];
      [v3 setValue:v8 forHTTPHeaderField:@"X-FM-Dsid"];
    }
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9 && *(void *)(v9 + 40) == 2) {
      [v3 setTimeoutInterval:15.0];
    }
  }
  id v10 = +[AMSPromise promiseWithResult:v3];

  return v10;
}

id sub_1003FB748(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(RequestEnvironment);
  id v6 = v4;
  if (v4)
  {
    objc_setProperty_atomic_copy(v4, v5, *(id *)(*(void *)(a1 + 32) + 24), 8);
    objc_setProperty_atomic_copy(v6, v7, *(id *)(*(void *)(a1 + 32) + 56), 16);
    uint64_t v8 = objc_opt_new();
    objc_setProperty_atomic(v6, v9, v8, 32);
  }
  else
  {
    uint64_t v8 = objc_opt_new();
  }

  id v10 = sub_10027AA90();
  CFStringRef v11 = sub_10027AE28(v10, v3, v6);

  return v11;
}

AMSPromise *__cdecl sub_1003FB838(id a1, NSNumber *a2)
{
  uint64_t v2 = a2;
  NSInteger v3 = [(NSNumber *)v2 integerValue];
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B1358);
  uint64_t v4 = +[NSProcessInfo processInfo];
  [v4 systemUptime];
  uint64_t v6 = (uint64_t)v5;

  if (v6 - qword_1005B1360 >= v3)
  {
    qword_1005B1360 = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B1358);
    uint64_t v8 = +[AMSPromise promiseWithResult:&__kCFBooleanTrue];
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B1358);
    SEL v7 = ASDErrorWithUserInfoAndFormat();
    uint64_t v8 = +[AMSPromise promiseWithError:](AMSPromise, "promiseWithError:", v7, v2);
  }
  return (AMSPromise *)v8;
}

void sub_1003FBA10(id a1)
{
  id v1 = objc_alloc_init(InstallCoordinationObserver);
  uint64_t v2 = (void *)qword_1005B1370;
  qword_1005B1370 = (uint64_t)v1;
}

uint64_t sub_1003FBD3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  double v5 = [*(id *)(a1 + 32) identity];
  uint64_t v6 = [v5 bundleID];
  SEL v7 = sub_100401E3C(v3, v4, v6);

  if ([v7 existsInDatabase])
  {
    id v8 = sub_1002C20AC(v7);
    if ((unint64_t)v8 + 40 > 0x14 || ((1 << (v8 + 40)) & 0x100401) == 0)
    {
      id v13 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v7 persistentID]);
      id v10 = sub_10041E684((uint64_t)AppInstallInfo, v13);

      id v14 = ASDLogHandleForCategory();
      id v15 = v14;
      if (v10)
      {
        os_signpost_id_t isa = (os_signpost_id_t)v10[13].isa;
        if (isa - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
        {
          id v17 = sub_100369AD0(*(id *)(a1 + 40));
          *(_DWORD *)uint64_t v38 = 138543362;
          *(void *)&v38[4] = v17;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_END, isa, "Install/Install", " error=%{public, signpost.description:attribute}@ ", v38, 0xCu);
        }
      }

      id v18 = *(id *)(a1 + 40);
      self;
      if (ASDErrorIsEqual()) {
        int IsEqual = 1;
      }
      else {
        int IsEqual = ASDErrorIsEqual();
      }

      unsigned int v20 = ASDLogHandleForCategory();
      BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
      if (IsEqual)
      {
        if (v21)
        {
          __int16 v33 = sub_1002C1EE8(v7);
          uint64_t v34 = *(void *)(a1 + 40);
          *(_DWORD *)uint64_t v38 = 138412546;
          *(void *)&v38[4] = v33;
          *(_WORD *)&v38[12] = 2114;
          *(void *)&v38[14] = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[%@] Canceling installation after receiving reason: %{public}@", v38, 0x16u);
        }
        sub_100237218((id *)v3, (uint64_t)[v7 persistentID], -30);
      }
      else
      {
        if (v21)
        {
          id v35 = sub_1002C1EE8(v7);
          uint64_t v36 = *(void *)(a1 + 40);
          *(_DWORD *)uint64_t v38 = 138412546;
          *(void *)&v38[4] = v35;
          *(_WORD *)&v38[12] = 2114;
          *(void *)&v38[14] = v36;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[%@] Failing installation after receiving error: %{public}@", v38, 0x16u);
        }
        if (ASDErrorSearch())
        {
          id v22 = *(id *)(a1 + 40);
          __int16 v23 = v7;
          id v24 = v3;
          self;
          uint64_t v25 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
          {
            id v37 = sub_1002C1EE8(v23);
            *(_DWORD *)uint64_t v38 = 138412290;
            *(void *)&v38[4] = v37;
            _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "[%@] SINF mismatch error has been detected", v38, 0xCu);
          }
          if (os_variant_has_internal_content())
          {
            DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
            CFNotificationCenterPostNotification(DarwinNotifyCenter, @"SSHTTPArchiveShouldSaveToDiskDecompressedNotification", 0, 0, 1u);
            long long v27 = sub_1002F8BC0((id *)[PresentTapToRadarRequestFlow alloc], @"SINF Mismatch Error", @"An unexpected installation failure occurred.");
            *(void *)uint64_t v38 = _NSConcreteStackBlock;
            *(void *)&v38[8] = 3221225472;
            *(void *)&v38[16] = sub_1003FF27C;
            id v39 = &unk_10052CF58;
            id v40 = v22;
            id v41 = v23;
            id v42 = v24;
            if (v27) {
              objc_setProperty_atomic_copy(v27, v28, v38, 24);
            }
            sub_1002F8C78((uint64_t)v27);
          }
        }
        id v29 = [v7 persistentID];
        if (v3) {
          sub_1002357D4((id *)v3, (uint64_t)v29, *(void **)(a1 + 40), 0);
        }
      }
      CFStringRef v11 = sub_100330828();
      id v30 = [*(id *)(a1 + 32) identity];
      id v31 = [v30 bundleID];
      sub_1003327FC((uint64_t)v11, v31);

      goto LABEL_32;
    }
  }
  id v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v11 = [*(id *)(a1 + 32) uniqueIdentifier];
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t v38 = 138543618;
    *(void *)&v38[4] = v11;
    *(_WORD *)&v38[12] = 2114;
    *(void *)&v38[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Notified that coordinator %{public}@ canceled with reason: %{public}@, but we don't have an active installation for it.", v38, 0x16u);
LABEL_32:
  }
  return 1;
}

uint64_t sub_1003FC550(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  double v5 = [*(id *)(a1 + 32) identity];
  uint64_t v6 = [v5 bundleID];
  SEL v7 = sub_100401E3C(v3, v4, v6);

  if ([v7 existsInDatabase])
  {
    id v8 = sub_1002C1EE8(v7);
    SEL v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v32 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Completing installation after receiving notification", buf, 0xCu);
    }

    id v10 = [*(id *)(a1 + 32) identity];
    CFStringRef v11 = [v10 bundleID];
    sub_1003F3AA0((uint64_t)AppDefaultsManager, v11, 0);

    if (*(void *)(a1 + 40))
    {
      uint64_t v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v32 = v8;
        __int16 v33 = 2114;
        uint64_t v34 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Application was installed at: %{public}@", buf, 0x16u);
      }

      [v7 setValue:*(void *)(a1 + 40) forProperty:@"bundle_url"];
    }
    id v14 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v7 persistentID]);
    id v15 = sub_10041E684((uint64_t)AppInstallInfo, v14);

    v30[0] = @"source_type";
    v30[1] = @"metrics_install_type";
    v30[2] = @"item_id";
    id v16 = +[NSArray arrayWithObjects:v30 count:3];
    id v17 = [v7 getValuesForProperties:v16];

    id v18 = [v17 objectForKeyedSubscript:@"source_type"];
    id v19 = [v18 integerValue];

    if (!v19)
    {
      unsigned int v20 = [v17 objectForKeyedSubscript:@"item_id"];
      BOOL v21 = [v17 objectForKeyedSubscript:@"metrics_install_type"];
      unsigned int v22 = [v21 unsignedCharValue];

      __int16 v23 = sub_100330828();
      id v24 = [*(id *)(a1 + 32) identity];
      uint64_t v25 = [v24 bundleID];
      sub_1003319C0((uint64_t)v23, 4, 4, v25, v20, 1, v22);
    }
    uint64_t v26 = ASDLogHandleForCategory();
    long long v27 = v26;
    if (v15)
    {
      os_signpost_id_t v28 = v15[13];
      if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_INTERVAL_END, v28, "Install/Install", "", buf, 2u);
      }
    }

    sub_100235774((uint64_t)v3, (uint64_t)[v7 persistentID]);
  }

  return 1;
}

void sub_1003FC92C(uint64_t a1)
{
  sub_10024E080();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 32) identity];
  id v3 = [v2 bundleID];
  sub_10024EC74((uint64_t)v4, v3);
}

void sub_1003FCB30(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  double v5 = [v3 uniqueIdentifier];
  uint64_t v6 = [*(id *)(a1 + 32) identity];
  SEL v7 = [v6 bundleID];
  id v8 = sub_100401E3C(v4, v5, v7);

  if (![v8 existsInDatabase])
  {
    id v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v19 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      os_signpost_id_t v28 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Ignoring coordinatorDidInstallPlaceholder for unknown coordinator: %{public}@", buf, 0xCu);
    }
    goto LABEL_15;
  }
  if (sub_10026E7EC(v8, @"has_background_assets_extension"))
  {
    BOOL v9 = sub_1002C2334(v8) == (id)2;
    id v10 = sub_1002C1FCC(v8);
    CFStringRef v11 = +[BAAppStoreEventDescriptor descriptorWithAppBundleIdentifier:v10 appBundleURL:*(void *)(a1 + 40) event:5 client:v9];

    [v11 setUserInitiated:sub_1002C1E20(v8) ^ 1];
    [v11 setAutomaticInstall:sub_1002C1E74(v8) != 0];
    id v12 = objc_alloc_init((Class)BAAppStoreClient);
    id v26 = 0;
    unsigned int v13 = [v12 performEventWithDescriptor:v11 error:&v26];
    id v14 = v26;
    id v15 = ASDLogHandleForCategory();
    id v16 = v15;
    if (v13)
    {
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
LABEL_10:

        goto LABEL_11;
      }
      id v17 = sub_1002C1EE8(v8);
      *(_DWORD *)long long buf = 138412290;
      os_signpost_id_t v28 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] Sent placeholder-ready descriptor to Background Assets", buf, 0xCu);
    }
    else
    {
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
      id v17 = sub_1002C1EE8(v8);
      *(_DWORD *)long long buf = 138412546;
      os_signpost_id_t v28 = v17;
      __int16 v29 = 2114;
      id v30 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[%@] Failed to send placeholder-ready descriptor to Background Assets: %{public}@", buf, 0x16u);
    }

    goto LABEL_10;
  }
LABEL_11:
  if (sub_10026E7EC(v8, @"default_browser"))
  {
    unsigned int v20 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v21 = sub_1002C1EE8(v8);
      unsigned int v22 = [*(id *)(a1 + 32) identity];
      __int16 v23 = [v22 bundleID];
      *(_DWORD *)long long buf = 138412546;
      os_signpost_id_t v28 = v21;
      __int16 v29 = 2114;
      id v30 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%@] Swapping %{public}@ with Safari on the home screen as it is set to become the default", buf, 0x16u);
    }
    id v18 = objc_alloc_init((Class)SBSHomeScreenService);
    id v24 = [*(id *)(a1 + 32) identity];
    uint64_t v25 = [v24 bundleID];
    [v18 swapApplicationIconsInProminentPositionsWithBundleIdentifier:@"com.apple.mobilesafari" withApplicationIconsWithWithBundleIdentifier:v25];

LABEL_15:
  }
}

void sub_1003FD17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FD1A8(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100278F0C(a1[4]);
  double v5 = [(id)a1[4] uniqueIdentifier];
  uint64_t v6 = [(id)a1[4] identity];
  SEL v7 = [v6 bundleID];
  if (v4 == 3) {
    sub_100402268(v3, v5, v7);
  }
  else {
  id v8 = sub_100401E3C(v3, v5, v7);
  }

  if ([v8 existsInDatabase])
  {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
    [v8 setValue:&off_10054D0C8 forProperty:@"priority"];
    id v9 = sub_10026E91C(v8, @"phase");
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v11 = sub_1002C1EE8(v8);
      int v25 = 138412546;
      id v26 = v11;
      __int16 v27 = 2048;
      id v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Prioritization request found existing install with phase %ld", (uint8_t *)&v25, 0x16u);
    }
    if ((sub_1003FD5E0(a1[5], v8, v3, @"Prioritize Coordinator") & 1) == 0)
    {
      uint64_t v12 = a1[5];
      unsigned int v13 = v8;
      id v14 = v3;
      if (v12 && sub_10026E91C(v13, @"source_type") == (id)1)
      {
        id v15 = sub_10026E95C(v13, @"bundle_id");
        sub_100268C48((uint64_t)TelephonyUtility, v15);
        if (sub_10026E91C(v13, @"bootstrapped") != (id)2)
        {
          [v13 setValue:&__kCFBooleanFalse forProperty:@"supress_dialogs"];
          if (v14)
          {
            __int16 v23 = objc_getProperty(v14, v22, 24, 1);
            if (v23) {
              v23[16] |= 0x2000uLL;
            }
          }
          else
          {
            __int16 v23 = 0;
          }

          id v17 = v13;
          goto LABEL_27;
        }
      }
      if (v9 == (id)10 || v9 == (id)-15)
      {
        id v16 = sub_10026E91C(v13, @"IFNULL(app_install.bootstrapped, 2)");
        id v17 = sub_100259614();
        sub_1002C2130(v13);
        id v14 = (id)objc_claimAutoreleasedReturnValue();
        if (v16 != (id)2 || !sub_1003D5334(v17, v14)) {
          goto LABEL_28;
        }
        if (sub_10026E91C(v13, @"automatic_type"))
        {
          id v18 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            id v19 = sub_1002C1EE8(v13);
            int v25 = 138412290;
            id v26 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%@] Removing automatic flag, prioritized by user", (uint8_t *)&v25, 0xCu);
          }
          [v13 setValue:&off_10054D0E0 forProperty:@"automatic_type"];
        }
        unsigned int v20 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v21 = sub_1002C1EE8(v13);
          int v25 = 138412290;
          id v26 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%@] Reviewing network policy", (uint8_t *)&v25, 0xCu);
        }
        id v15 = sub_1003B6884(v13);
        sub_1003FD9D0(a1[5], [v13 persistentID], v15, (void *)a1[4]);
LABEL_27:

LABEL_28:
      }
    }
  }

  return 1;
}

uint64_t sub_1003FD5E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  SEL v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1 && sub_10026E91C(v7, @"restore_type"))
  {
    id v10 = sub_10026E91C(v7, @"phase");
    CFStringRef v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = sub_1002C1EE8(v7);
      int v30 = 138412802;
      id v31 = v12;
      __int16 v32 = 2048;
      id v33 = v10;
      __int16 v34 = 2114;
      id v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Prioritizing restore with phase: %ld with reason: %{public}@", (uint8_t *)&v30, 0x20u);
    }
    [v7 setValue:&off_10054D0C8 forProperty:@"priority"];
    [v7 setValue:&off_10054D140 forProperty:@"phase"];
    [v7 setValue:&__kCFBooleanFalse forProperty:@"supress_dialogs"];
    unsigned int v13 = sub_100367A80(v7, @"failure_error");
    int v14 = v13 && ((ASDErrorIsEqual() & 1) != 0 || ASDErrorIsEqual());
    id v16 = sub_10026E91C(v7, @"bootstrapped");
    id v17 = sub_10026E91C(v7, @"restore_state");
    if (v16)
    {
      uint64_t v15 = 0;
      if (((v17 != (id)2) & ~v14) != 0 || v16 != (id)1) {
        goto LABEL_27;
      }
    }
    id v18 = sub_100259614();
    unsigned int v19 = [v18 isConnected];

    unsigned int v20 = ASDLogHandleForCategory();
    BOOL v21 = v20;
    if (v19)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v22 = sub_1002C1EE8(v7);
        int v30 = 138412546;
        id v31 = v22;
        __int16 v32 = 2114;
        id v33 = v9;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@] Hydrating non-bootstrapped existing restore install with reason: %{public}@", (uint8_t *)&v30, 0x16u);
      }
      if (v8) {
        id Property = objc_getProperty(v8, v23, 24, 1);
      }
      else {
        id Property = 0;
      }
      id v25 = Property;
      +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v7 persistentID]);
      id v26 = (id)objc_claimAutoreleasedReturnValue();
      sub_100285FAC((uint64_t)v25, v26);
    }
    else
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        __int16 v29 = sub_1002C1EE8(v7);
        int v30 = 138412546;
        id v31 = v29;
        __int16 v32 = 2114;
        id v33 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[%@] Unable to promote due to no network with reason: %{public}@ due to no network", (uint8_t *)&v30, 0x16u);
      }
      __int16 v27 = sub_10026E95C(v7, @"bundle_id");
      id v25 = v27;
      if (!v27 || ![v27 length]) {
        goto LABEL_26;
      }
      id v26 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v25 allowPlaceholder:1 error:0];
      sub_1003FF794(v26);
    }

LABEL_26:
    uint64_t v15 = 1;
LABEL_27:

    goto LABEL_28;
  }
  uint64_t v15 = 0;
LABEL_28:

  return v15;
}

void sub_1003FD9D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = [*(id *)(a1 + 8) database];
    id v10 = (void *)v9;
    if (v9) {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 16));
    }

    CFStringRef v11 = (void *)qword_1005B1368;
    if (!qword_1005B1368)
    {
      id v12 = objc_alloc_init((Class)NSMutableSet);
      unsigned int v13 = (void *)qword_1005B1368;
      qword_1005B1368 = (uint64_t)v12;

      CFStringRef v11 = (void *)qword_1005B1368;
    }
    int v14 = +[NSNumber numberWithLongLong:a2];
    unsigned __int8 v15 = [v11 containsObject:v14];

    if ((v15 & 1) == 0)
    {
      id v16 = (void *)qword_1005B1368;
      id v17 = +[NSNumber numberWithLongLong:a2];
      [v16 addObject:v17];

      id v18 = sub_1003B8854((id *)[ReviewNetworkPolicyTask alloc], v7);
      objc_initWeak(&location, v18);
      unsigned int v20 = _NSConcreteStackBlock;
      uint64_t v21 = 3221225472;
      unsigned int v22 = sub_1003FFF14;
      __int16 v23 = &unk_10052CFD0;
      objc_copyWeak(v27, &location);
      uint64_t v24 = a1;
      v27[1] = a2;
      id v25 = v7;
      id v26 = v8;
      [v18 setCompletionBlock:&v20];
      uint64_t v19 = *(void *)(a1 + 24);
      if (v19) {
        objc_msgSend(*(id *)(v19 + 8), "addOperation:", v18, v20, v21, v22, v23, v24, v25);
      }

      objc_destroyWeak(v27);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1003FDBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003FDBC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_65;
  }
  id v7 = +[MadBridge shared];
  unsigned int v8 = [v7 isThirdPartyRestore:v5];

  if (!v8)
  {
    id v12 = [objc_alloc((Class)LSApplicationRecord) initForInstallMachineryWithBundleIdentifier:v5 placeholder:1 error:0];
    unsigned int v13 = v12;
    if (v12)
    {
      if ([v12 isUpdate])
      {
        id v14 = [v13 bundleIdentifier];
        if ([v14 length])
        {
          uint64_t v88 = 0;
          __int16 v89 = &v88;
          uint64_t v90 = 0x2020000000;
          LOBYTE(v91) = 0;
          unsigned __int8 v15 = *(NSObject **)(a1 + 16);
          *(void *)long long buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_1003FF680;
          *(void *)&unsigned char buf[24] = &unk_100524F38;
          id v95 = v14;
          id v96 = &v88;
          dispatch_sync(v15, buf);
          BOOL v16 = *((unsigned char *)v89 + 24) != 0;

          _Block_object_dispose(&v88, 8);
        }
        else
        {
          BOOL v16 = 0;
        }
      }
      else
      {
        BOOL v16 = 0;
      }
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = [v13 isPlaceholder];
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v18;
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v6;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Prioritize for bundleID: %{public}@ placeholder: %{BOOL}d coordinator: %{public}@", buf, 0x1Cu);
      }

      uint64_t v19 = sub_100259614();
      unsigned __int8 v20 = [v19 isConnected];

      if ((v20 & 1) == 0)
      {
        id v41 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Skipping rehydrate of %@ - no network available", buf, 0xCu);
        }

        sub_1003FF794(v13);
        goto LABEL_64;
      }
      id v21 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifierOfSystemPlaceholder:v5 error:0];

      if (v21)
      {
        id v22 = v5;
        uint64_t v88 = 0;
        __int16 v89 = &v88;
        uint64_t v90 = 0x3032000000;
        __int16 v91 = sub_100018468;
        uint64_t v92 = sub_100017DF0;
        id v93 = 0;
        int v23 = sub_1002B6864();
        if ((v23 & 1) == 0) {
          sub_100268C48((uint64_t)TelephonyUtility, v22);
        }
        id v24 = [objc_alloc((Class)ASDSystemAppMetadata) initWithBundleID:v22];
        [v24 setUserInitiated:1];
        id v25 = sub_1004248D8([AppInstall alloc], v24);
        [v25 setValue:&off_10054D0F8 forProperty:@"coordinator_intent"];
        if (v23) {
          [v25 setValue:&off_10054D110 forProperty:@"bootstrapped"];
        }
        char v70 = v22;
        long long v71 = v24;
        id v26 = (id *)(v89 + 5);
        id obj = (id)v89[5];
        long long v73 = sub_1003C0068(v25);
        objc_storeStrong(v26, obj);
        if (!v73)
        {
          __int16 v47 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            id v48 = sub_100424C14(v25);
            uint64_t v49 = v89[5];
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v48;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v49;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[%@] User initiated hydration request failed with error: %{public}@", buf, 0x16u);
          }
          goto LABEL_63;
        }
        __int16 v27 = (id *)(v89 + 5);
        id v86 = (id)v89[5];
        long long v72 = sub_1003BFC54(v73, &v86);
        objc_storeStrong(v27, v86);
        if (!v72)
        {
          long long v52 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            id v53 = sub_100424C14(v25);
            uint64_t v54 = v89[5];
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v53;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v54;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "[%@] User initiated hydration request failed with error: %{public}@", buf, 0x16u);
          }
          goto LABEL_62;
        }
        id v28 = (id *)(v89 + 5);
        id v85 = (id)v89[5];
        unsigned int v69 = sub_10032B5F0(v25, 0, &v85);
        objc_storeStrong(v28, v85);
        if (v69)
        {
          __int16 v29 = (id *)(v89 + 5);
          id v84 = (id)v89[5];
          __int16 v68 = sub_10032A12C(v69, (uint64_t)&v84);
          objc_storeStrong(v29, v84);
          if (!v68)
          {
            long long v58 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              id v59 = sub_100424C14(v25);
              uint64_t v60 = v89[5];
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v59;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v60;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "[%@] User initiated hydration request failed with error: %{public}@", buf, 0x16u);
            }
            goto LABEL_61;
          }
          int v30 = (id *)(v89 + 5);
          id v83 = (id)v89[5];
          unsigned __int8 v31 = sub_10027A504(v72, v68, &v83);
          objc_storeStrong(v30, v83);
          if (v31)
          {
            __int16 v32 = [v72 uniqueIdentifier];
            [v25 setValue:v32 forProperty:@"coordinator_id"];

            uint64_t v79 = 0;
            id v80 = &v79;
            uint64_t v81 = 0x2020000000;
            char v82 = 0;
            id v33 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v34 = sub_100424C14(v25);
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v34;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[%@] Importing user initiated hydration request", buf, 0xCu);
            }
            id v35 = *(void **)(a1 + 8);
            *(void *)long long buf = _NSConcreteStackBlock;
            *(void *)&uint8_t buf[8] = 3221225472;
            *(void *)&uint8_t buf[16] = sub_1003FFBD4;
            *(void *)&unsigned char buf[24] = &unk_10052CF80;
            uint64_t v36 = v25;
            id v95 = v36;
            id v96 = &v88;
            char v98 = v23;
            uint64_t v97 = &v79;
            [v35 modifyUsingTransaction:buf];
            if (*((unsigned char *)v80 + 24))
            {
              dispatch_semaphore_t v67 = dispatch_semaphore_create(0);
              id v37 = sub_1002B3410();
              uint64_t v38 = sub_100424C14(v36);
              id v39 = sub_100424D84(v36);
              v76[0] = _NSConcreteStackBlock;
              v76[1] = 3221225472;
              v76[2] = sub_1003FFECC;
              v76[3] = &unk_1005274D8;
              id v77 = v72;
              id v40 = v67;
              id v78 = v40;
              sub_1002B5148((uint64_t)v37, v38, v39, v76);

              dispatch_semaphore_wait(v40, 0xFFFFFFFFFFFFFFFFLL);
            }

            _Block_object_dispose(&v79, 8);
          }
          else
          {
            long long v61 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
            {
              long long v62 = sub_100424C14(v25);
              uint64_t v63 = v89[5];
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v62;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v63;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "[%@] User initiated hydration request failed with error: %{public}@", buf, 0x16u);
            }
            sub_100279D48(v72, (void *)v89[5], 0);
          }
        }
        else
        {
          long long v55 = ASDLogHandleForCategory();
          __int16 v68 = v55;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            id v56 = sub_100424C14(v25);
            uint64_t v57 = v89[5];
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v56;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v57;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "[%@] User initiated hydration request failed with error: %{public}@", buf, 0x16u);
          }
        }

LABEL_61:
        long long v52 = v69;
LABEL_62:

        __int16 v47 = v72;
LABEL_63:

        _Block_object_dispose(&v88, 8);
        goto LABEL_64;
      }
      unsigned int v42 = [v13 isUpdate] ^ 1;
      if (!v6) {
        unsigned int v42 = 1;
      }
      if (((v16 | v42) & 1) == 0)
      {
        uint64_t v50 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Canceling coordinator for orphaned app update %{public}@", buf, 0xCu);
        }

        uint64_t v51 = IXCreateUserPresentableError();
        [v6 cancelForReason:v51 client:1 error:0];

        goto LABEL_64;
      }
      unsigned __int8 v43 = [v13 isAppStoreVendable];
      __int16 v44 = ASDLogHandleForCategory();
      id v45 = v44;
      if (v43)
      {
        BOOL v46 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
        if (!v16)
        {
          if (v46)
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v5;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Attempting to cold promote %{public}@", buf, 0xCu);
          }

          id v64 = sub_1002DB0E0([RescueAbandonedPlaceholderOperation alloc], v5);
          v74[0] = _NSConcreteStackBlock;
          v74[1] = 3221225472;
          v74[2] = sub_1003FF900;
          void v74[3] = &unk_100521710;
          id v75 = v5;
          sub_1002DB15C(v64, v74);
          uint64_t v65 = sub_1002B2A3C();
          id v66 = (void *)v65;
          if (v65) {
            [*(id *)(v65 + 8) addOperation:v64];
          }

          goto LABEL_64;
        }
        if (v46)
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Could not rescue placeholder - actively updating: %{public}@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Could not rescue placeholder - not vendable: %{public}@", buf, 0xCu);
      }
    }
LABEL_64:

    goto LABEL_65;
  }
  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%{public}@] Forwarding prioritize call", buf, 0xCu);
  }

  id v10 = +[MadBridge shared];
  [v10 kickOffRestoreIfNeeded:v6];

LABEL_65:
}

void sub_1003FE83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t sub_1003FE9C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  id v5 = [*(id *)(a1 + 32) identity];
  id v6 = [v5 bundleID];
  id v7 = sub_100401E3C(v3, v4, v6);

  if ([v7 existsInDatabase])
  {
    id v8 = [v7 persistentID];
    if (v3) {
      sub_1002386A4((id *)v3, v8, -10, 2uLL);
    }
  }
  else
  {
    uint64_t v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138543362;
      uint64_t v13 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Ignoring pausing request for unknown coordinator: %{public}@", (uint8_t *)&v12, 0xCu);
    }
  }
  return 1;
}

BOOL sub_1003FEC20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  id v5 = [*(id *)(a1 + 32) identity];
  id v6 = [v5 bundleID];
  id v7 = sub_100401E3C(v3, v4, v6);

  if ([v7 existsInDatabase])
  {
    id v8 = (char *)sub_10026E91C(v7, @"IFNULL(app_install.phase, 10)");
    BOOL v9 = v8 == (char *)-10 || v8 == (char *)-15;
    if (v8 == (char *)-10 || v8 + 15 == 0)
    {
      unsigned int v18 = sub_1002C2130(v7);
      if ((sub_1003FD5E0(*(void *)(a1 + 40), v7, v3, @"Resume Coordinator") & 1) == 0)
      {
        uint64_t v11 = sub_100259614();
        int v12 = sub_1003D5334(v11, v18);

        if (v12)
        {
          if (sub_10026E91C(v7, @"automatic_type"))
          {
            uint64_t v13 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              id v14 = sub_1002C1EE8(v7);
              int v29 = 138412290;
              int v30 = v14;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@] Removing automatic flag, resumed by user", (uint8_t *)&v29, 0xCu);
            }
            [v7 setValue:&off_10054D0E0 forProperty:@"automatic_type"];
          }
          unsigned __int8 v15 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v16 = sub_1002C1EE8(v7);
            int v29 = 138412290;
            int v30 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@] Reviewing network policy before resuming by user request", (uint8_t *)&v29, 0xCu);
          }
          id v17 = sub_1003B6884(v7);
          sub_1003FD9D0(*(void *)(a1 + 40), [v7 persistentID], v17, *(void **)(a1 + 32));
        }
        else
        {
          id v21 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            id v22 = sub_1002C1EE8(v7);
            int v29 = 138412290;
            int v30 = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@] Resuming by user request", (uint8_t *)&v29, 0xCu);
          }
          int v23 = sub_100388088();
          id v24 = sub_1002C1FCC(v7);
          sub_100388D90((uint64_t)v23, v24);

          sub_100238B14(v3, 10, (uint64_t)[v7 persistentID]);
          if (v3)
          {
            id v26 = (EvaluatorDownload *)objc_getProperty(v3, v25, 24, 1);
            id v17 = v26;
            if (v26) {
              v26[2]._logKey = (LogKey *)((unint64_t)v26[2]._logKey | 0x10000);
            }
          }
          else
          {
            id v17 = 0;
          }
        }
      }
    }
    else
    {
      unsigned int v18 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v20 = sub_1002C1EE8(v7);
        int v29 = 138412290;
        int v30 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%@] Ignoring duplicate resumption request", (uint8_t *)&v29, 0xCu);
      }
    }
  }
  else
  {
    unsigned int v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v28 = *(void **)(a1 + 32);
      int v29 = 138543362;
      int v30 = v28;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Ignoring resumption request for unknown coordinator: %{public}@", (uint8_t *)&v29, 0xCu);
    }
    BOOL v9 = 1;
  }

  return v9;
}

id sub_1003FF27C(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSMutableString) initWithString:@"\n\nInstallation details:"];
  [v2 appendFormat:@"\n\nError: %@", *(void *)(a1 + 32)];
  id v3 = sub_10026E82C(*(void **)(a1 + 40), @"item_id");
  uint64_t v4 = sub_10026E82C(*(void **)(a1 + 40), @"evid");
  id v5 = sub_10026E95C(*(void **)(a1 + 40), @"bundle_id");
  id v6 = sub_10026E82C(*(void **)(a1 + 40), @"account_id");
  [v2 appendFormat:@"\n\nStore DSID: %@\nStore Item ID: %@\nStore Version ID: %@\nBundle ID: %@", v6, v3, v4, v5];
  id v7 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v5 allowPlaceholder:0 error:0];
  id v8 = v7;
  if (v7)
  {
    BOOL v9 = [v7 iTunesMetadata];
    id v10 = [v9 versionIdentifier];

    uint64_t v11 = [v8 iTunesMetadata];
    int v12 = [v11 variantID];

    [v2 appendFormat:@"\n\nInstalled Version ID: %llu\nInstalled Variant ID: %@", v10, v12];
  }
  uint64_t v13 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"parent_id", [*(id *)(a1 + 40) persistentID]);
  id v14 = [*(id *)(a1 + 48) connection];
  unsigned __int8 v15 = sub_1002FF548((uint64_t)AppPackageEntity, v14, v13);

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_1003FF4FC;
  v19[3] = &unk_100522A90;
  id v20 = *(id *)(a1 + 48);
  id v21 = v2;
  id v16 = v2;
  [v15 enumeratePersistentIDsUsingBlock:v19];
  id v17 = [v16 copy];

  return v17;
}

void sub_1003FF4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [AppPackageEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v14 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v6 = sub_10026E82C(v14, @"package_type");
  id v7 = sub_10026EA4C(v14, @"package_url");
  id v8 = sub_10026E95C(v14, @"variant_id");
  BOOL v9 = sub_10026E82C(v14, @"blocked");
  id v10 = [(SQLiteEntity *)v14 valueForProperty:@"sinf"];
  uint64_t v11 = [v10 base64EncodedStringWithOptions:0];
  int v12 = [(SQLiteEntity *)v14 valueForProperty:@"dp_info"];
  uint64_t v13 = [v12 base64EncodedStringWithOptions:0];
  [*(id *)(a1 + 40) appendFormat:@"\n\nPackageType: %@\nPackageBlocked: %@\nPackageVariant: %@\nPackageURL: %@\nSINF: %@\nDPInfo: %@", v6, v9, v8, v7, v11, v13];
}

void sub_1003FF680(uint64_t a1)
{
  id v2 = sub_1003E0BA4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003FF728;
  v5[3] = &unk_100527C20;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 readUsingSession:v5];
}

void sub_1003FF728(uint64_t a1, id a2)
{
  sub_100401CE4(a2, *(void **)(a1 + 32));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if ([v3 existsInDatabase]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_1003FF794(void *a1)
{
  id v11 = a1;
  id v1 = [v11 localizedName];

  if (v1)
  {
    id v2 = ASDLocalizedString();
    id v3 = [v11 localizedName];
    uint64_t v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v2, v3);
    id v5 = ASDLocalizedString();
    id v6 = +[AMSDialogRequest requestWithTitle:v4 message:v5];

    uint64_t v7 = ASDLocalizedString();
    id v8 = +[AMSDialogAction actionWithTitle:v7];
    [v6 addButtonAction:v8];

    id v9 = [objc_alloc((Class)AMSSystemAlertDialogTask) initWithRequest:v6];
    id v10 = [v9 present];
    [v10 waitUntilFinishedWithTimeout:60.0];
  }
}

void sub_1003FF900(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2114;
      id v11 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Could not rescue placeholder: %{public}@ due to error: %{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_1003FFA9C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) userInfo];
  id v2 = [v1 valueForKey:kCFBundleIdentifierKey];

  id v3 = ASDLogHandleForCategory();
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138543362;
      uint64_t v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received app may be uninstalled notification for bundleID: %{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v6) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received app may be uninstalled notification but no bundleID was included", (uint8_t *)&v6, 2u);
  }

  id v5 = sub_1002E1CF4();
  sub_1002E2474((uint64_t)v5, v2, 8);
}

uint64_t sub_1003FFBD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  long long v27 = 0u;
  long long v28 = 0u;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v6 + 40);
  int v8 = (id *)(v6 + 40);
  uint64_t v7 = v9;
  id v22 = v9;
  if (v3)
  {
    sub_100237D68(v3, v5, 0, &v22, (uint64_t)&v27);
    uint64_t v7 = v22;
  }
  objc_storeStrong(v8, v7);
  switch(*((void *)&v28 + 1))
  {
    case 2:
      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v15 = sub_100424C14(*(void **)(a1 + 32));
        *(_DWORD *)long long buf = 138412290;
        id v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] Duplicate exists - requesting bootstrap", buf, 0xCu);
      }
      if (v4)
      {
        id v17 = objc_getProperty(v4, v16, 24, 1);
        id v11 = v17;
        if (v17) {
          v17[16].os_signpost_id_t isa = (Class)((unint64_t)v17[16].isa | 0x20);
        }
      }
      else
      {
        id v11 = 0;
      }
      goto LABEL_22;
    case 1:
      if (*(unsigned char *)(a1 + 56))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        id v11 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
LABEL_22:

          break;
        }
        unsigned int v18 = sub_100424C14(*(void **)(a1 + 32));
        *(_DWORD *)long long buf = 138412290;
        id v24 = v18;
        uint64_t v19 = "[%@] Import succeeded - Waiting for distributor";
      }
      else
      {
        if (v4)
        {
          id v20 = objc_getProperty(v4, v10, 24, 1);
          if (v20) {
            v20[16] |= 0x20uLL;
          }
        }
        else
        {
          id v20 = 0;
        }

        id v11 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_22;
        }
        unsigned int v18 = sub_100424C14(*(void **)(a1 + 32));
        *(_DWORD *)long long buf = 138412290;
        id v24 = v18;
        uint64_t v19 = "[%@] Import succeeded - requesting bootstrap";
      }
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);

      goto LABEL_22;
    case 0:
      id v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = sub_100424C14(*(void **)(a1 + 32));
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        *(_DWORD *)long long buf = 138412546;
        id v24 = v12;
        __int16 v25 = 2114;
        uint64_t v26 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] Import failed with error: %{public}@", buf, 0x16u);
      }
      goto LABEL_22;
  }

  return 1;
}

intptr_t sub_1003FFECC(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3) {
    sub_100279D48(*(void **)(a1 + 32), a3, 0);
  }
  uint64_t v4 = *(NSObject **)(a1 + 40);
  return dispatch_semaphore_signal(v4);
}

void sub_1003FFF14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003FFFF4;
  v5[3] = &unk_10052CFA8;
  uint64_t v10 = *(void *)(a1 + 64);
  id v6 = *(id *)(a1 + 40);
  id v7 = WeakRetained;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(id *)(a1 + 48);
  id v4 = WeakRetained;
  [v3 modifyUsingTransaction:v5];
}

BOOL sub_1003FFFF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)qword_1005B1368;
  id v5 = +[NSNumber numberWithLongLong:*(void *)(a1 + 64)];
  [v4 removeObject:v5];

  if (![(id)qword_1005B1368 count])
  {
    id v6 = (void *)qword_1005B1368;
    qword_1005B1368 = 0;
  }
  id v7 = [AppInstallEntity alloc];
  uint64_t v8 = *(void *)(a1 + 64);
  id v9 = [v3 connection];
  uint64_t v10 = [(SQLiteEntity *)v7 initWithPersistentID:v8 onConnection:v9];

  uint64_t v11 = (uint64_t)sub_10026E91C(v10, @"IFNULL(app_install.phase, 10)");
  if (v11 >= 11)
  {
    int v23 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v24, 32, 1);
      }
      id v26 = Property;
      *(_DWORD *)long long buf = 138412290;
      id v39 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[%@] Stopping because the installation is no longer paused", buf, 0xCu);
    }
  }
  else
  {
    __int16 v32 = _NSConcreteStackBlock;
    uint64_t v33 = 3221225472;
    __int16 v34 = sub_1004003A8;
    id v35 = &unk_100525B50;
    uint64_t v36 = *(id *)(a1 + 40);
    sub_1002C34E0(v10, &v32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12 && (*(unsigned char *)(v12 + 48) & 1) != 0)
    {
      sub_100238B14(v3, 10, [(SQLiteEntity *)v10 persistentID]);
      if (v3)
      {
        id v28 = objc_getProperty(v3, v27, 24, 1);
        id v19 = v28;
        if (v28) {
          *((void *)v28 + 16) |= 0x10000uLL;
        }
      }
      else
      {
        id v19 = 0;
      }
    }
    else
    {
      uint64_t v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v30 = *(id *)(a1 + 32);
        if (v30) {
          id v30 = objc_getProperty(v30, v14, 32, 1);
        }
        id v31 = v30;
        *(_DWORD *)long long buf = 138412290;
        id v39 = v31;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@] Pausing after cellular network access was denied", buf, 0xCu);
      }
      [(SQLiteEntity *)v10 setValue:&off_10054D128, @"phase", v32, v33, v34, v35 forProperty];
      uint64_t v17 = *(void *)(a1 + 48);
      id v16 = *(void **)(a1 + 56);
      id v18 = *(id *)(a1 + 32);
      if (v18) {
        id v18 = objc_getProperty(v18, v15, 32, 1);
      }
      id v19 = v18;
      if (v17)
      {
        id v37 = 0;
        unsigned __int8 v20 = [v16 pauseWithError:&v37];
        id v21 = v37;
        if ((v20 & 1) == 0)
        {
          id v22 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            id v39 = v19;
            __int16 v40 = 2114;
            id v41 = v21;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[%@] Unable to re-pause after cellular access declined: %{public}@", buf, 0x16u);
          }
        }
      }
    }
    int v23 = v36;
  }

  return v11 < 11;
}

void sub_1004003A8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v9 = a2;
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 56);
  }
  else {
    uint64_t v4 = 0;
  }
  sub_1003D4C80((uint64_t)v9, v4);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v6 = 0;
  }
  sub_1003D4D3C((uint64_t)v9, v6);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 72);
  }
  else {
    uint64_t v8 = 0;
  }
  sub_1003D4B04((uint64_t)v9, v8);
}

BOOL sub_1004004CC()
{
  if (qword_1005B1388 != -1) {
    dispatch_once(&qword_1005B1388, &stru_10052CFF0);
  }
  return dword_1005B1380 != 0;
}

void sub_10040051C(id a1)
{
  size_t v3 = 4;
  if (sysctlbyname("kern.hv_vmm_present", &dword_1005B1380, &v3, 0, 0))
  {
    id v1 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
    {
      int v2 = *__error();
      *(_DWORD *)long long buf = 67109120;
      int v5 = v2;
      _os_log_fault_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "sysctlbyname for kern.hv_vmm_present failed with error: %{darwin.errno}d", buf, 8u);
    }
  }
}

BOOL sub_1004005F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  if (v6)
  {
    CFDictionaryRef v9 = (const __CFDictionary *)MobileInstallationCheckCapabilitiesMatch();
    if (v9)
    {
      CFDictionaryRef v10 = v9;
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v9, @"CapabilitiesMatch");
      if (Value) {
        BOOL v12 = CFBooleanGetValue(Value) != 0;
      }
      else {
        BOOL v12 = 0;
      }
      uint64_t v13 = (void *)CFDictionaryGetValue(v10, @"MismatchedCapabilities");
      if (v13)
      {
        id v14 = v13;
        unsigned __int8 v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          int v18 = 138412802;
          id v19 = (id)objc_opt_class();
          __int16 v20 = 2114;
          id v21 = v8;
          __int16 v22 = 2114;
          id v23 = v14;
          id v17 = v19;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%@]: [%{public}@] Mismatched capabilites: %{public}@", (uint8_t *)&v18, 0x20u);
        }
      }
      CFRelease(v10);
    }
    else
    {
      BOOL v12 = 0;
    }
  }
  else
  {
    BOOL v12 = 1;
  }

  return v12;
}

id sub_100400794()
{
  self;
  if (qword_1005B1398 != -1) {
    dispatch_once(&qword_1005B1398, &stru_10052D010);
  }
  id v0 = (void *)qword_1005B1390;
  return v0;
}

void sub_1004007EC(id a1)
{
  id v1 = objc_alloc_init(ThermalPressureMonitor);
  int v2 = (void *)qword_1005B1390;
  qword_1005B1390 = (uint64_t)v1;
}

void sub_100400930(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    *(_DWORD *)(v1 + 16) = -1;
    objc_initWeak(&location, (id)v1);
    int v2 = *(NSObject **)(v1 + 8);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100400C54;
    v5[3] = &unk_100523F28;
    objc_copyWeak(&v6, &location);
    uint32_t v3 = notify_register_dispatch(kOSThermalNotificationPressureLevelName, (int *)(v1 + 16), v2, v5);
    if (v3)
    {
      uint64_t v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        uint32_t v9 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[Thermal] Registration for thermal pressure notification failed: %u", buf, 8u);
      }
    }
    else
    {
      sub_100400D10(v1);
    }
    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }
}

void sub_100400A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_100400B20(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100400BE0;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100400BE0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 20);
  return result;
}

void sub_100400BF4(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"ThermalPressureStateDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_100400C54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    sub_100400D10((uint64_t)WeakRetained);
    id v2 = dispatch_get_global_queue(17, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100400BF4;
    block[3] = &unk_100521388;
    void block[4] = v3;
    dispatch_async(v2, block);

    id WeakRetained = v3;
  }
}

void sub_100400D10(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 != -1)
  {
    uint64_t state64 = 0;
    BOOL v3 = !notify_get_state(v2, &state64) && state64 > 0x13;
    BOOL v4 = v3;
    *(unsigned char *)(a1 + 20) = v4;
    uint64_t v5 = ASDLogHandleForCategory();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);

    if (v6)
    {
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        if (*(unsigned char *)(a1 + 20)) {
          CFStringRef v8 = @"elevated";
        }
        else {
          CFStringRef v8 = @"nominal";
        }
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v11 = v8;
        __int16 v12 = 2048;
        uint64_t v13 = state64;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[Thermal] Thermal pressure is now %@ (%llu)", buf, 0x16u);
      }
    }
  }
}

id sub_100400E4C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  self;
  id v9 = 0;
  uint64_t v5 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:&v9];

  id v6 = v9;
  uint64_t v7 = v6;
  if (a3 && !v5) {
    *a3 = v6;
  }

  return v5;
}

id sub_100400EF8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init((Class)MIStoreMetadata);
  id v4 = v2;
  id v6 = v4;
  if (v3)
  {
    if (v4)
    {
      id v7 = objc_getProperty(v4, v5, 48, 1);
      [v3 setArtistName:v7];

      id Property = objc_getProperty(v6, v8, 224, 1);
    }
    else
    {
      [v3 setArtistName:0];
      id Property = 0;
    }
    id v10 = Property;
    [v3 setKind:v10];

    if (v6)
    {
      id v12 = objc_getProperty(v6, v11, 208, 1);
      [v3 setItemID:v12];

      id v14 = objc_getProperty(v6, v13, 216, 1);
    }
    else
    {
      [v3 setItemID:0];
      id v14 = 0;
    }
    id v15 = v14;
    [v3 setItemName:v15];

    if (v6)
    {
      id v17 = objc_getProperty(v6, v16, 88, 1);
      [v3 setShortItemName:v17];

      id v19 = objc_getProperty(v6, v18, 144, 1);
    }
    else
    {
      [v3 setShortItemName:0];
      id v19 = 0;
    }
    id v20 = v19;
    [v3 setSoftwareVersionExternalIdentifier:v20];

    if (v6)
    {
      id v22 = objc_getProperty(v6, v21, 96, 1);
      [v3 setSoftwareVersionBundleID:v22];

      [v3 setIsB2BCustomApp:v6[15] & 1];
      id v24 = objc_getProperty(v6, v23, 104, 1);
    }
    else
    {
      [v3 setSoftwareVersionBundleID:0];
      [v3 setIsB2BCustomApp:0];
      id v24 = 0;
    }
    id v25 = v24;
    [v3 setBundleShortVersionString:v25];

    if (v6)
    {
      id v27 = objc_getProperty(v6, v26, 112, 1);
      [v3 setBundleVersion:v27];

      id v29 = objc_getProperty(v6, v28, 168, 1);
    }
    else
    {
      [v3 setBundleVersion:0];
      id v29 = 0;
    }
    id v30 = v29;
    [v3 setHasOrEverHasHadIAP:v30];

    if (v6)
    {
      [v3 setHasMessagesExtension:v6[11] & 1];
      [v3 setLaunchProhibited:v6[17] & 1];
      id v32 = objc_getProperty(v6, v31, 152, 1);
    }
    else
    {
      [v3 setHasMessagesExtension:0];
      [v3 setLaunchProhibited:0];
      id v32 = 0;
    }
    id v33 = v32;
    [v3 setGenre:v33];

    if (v6)
    {
      id v35 = objc_getProperty(v6, v34, 160, 1);
      [v3 setGenreID:v35];

      id v37 = objc_getProperty(v6, v36, 320, 1);
    }
    else
    {
      [v3 setGenreID:0];
      id v37 = 0;
    }
    id v38 = v37;
    id v39 = sub_1003923F8(v38, &stru_10052D058);
    [v3 setSubGenres:v39];

    if (v6)
    {
      id v41 = objc_getProperty(v6, v40, 272, 1);
      [v3 setRatingLabel:v41];

      id v43 = objc_getProperty(v6, v42, 280, 1);
    }
    else
    {
      [v3 setRatingLabel:0];
      id v43 = 0;
    }
    id v44 = v43;
    [v3 setRatingRank:v44];

    if (v6)
    {
      [v3 setGameCenterEnabled:v6[9] & 1];
      [v3 setGameCenterEverEnabled:v6[10] & 1];
      [v3 setIsAutoDownload:v6[8] & 1];
      id v46 = objc_getProperty(v6, v45, 248, 1);
    }
    else
    {
      [v3 setGameCenterEnabled:0];
      [v3 setGameCenterEverEnabled:0];
      [v3 setIsAutoDownload:0];
      id v46 = 0;
    }
    id v47 = v46;
    [v3 setPurchaseDate:v47];

    if (v6)
    {
      if (v6[18]) {
        uint64_t v48 = 1;
      }
      else {
        uint64_t v48 = v6[16] & 1;
      }
      [v3 setPurchasedRedownload:v48];
      id v50 = objc_getProperty(v6, v49, 256, 1);
    }
    else
    {
      [v3 setPurchasedRedownload:0];
      id v50 = 0;
    }
    id v51 = v50;
    [v3 setRedownloadParams:v51];

    if (v6) {
      id v53 = objc_getProperty(v6, v52, 264, 1);
    }
    else {
      id v53 = 0;
    }
    id v54 = v53;
    [v3 setReleaseDate:v54];

    if (v6) {
      id v56 = objc_getProperty(v6, v55, 296, 1);
    }
    else {
      id v56 = 0;
    }
    id v57 = v56;
    long long v58 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v57 longLongValue]);
    [v3 setStorefront:v58];

    id v59 = sub_10030B11C();
    uint64_t v60 = sub_10030C454(v59, @"countryCode");
    long long v61 = [v60 valueWithError:0];
    [v3 setStorefrontCountryCode:v61];

    if (v6)
    {
      id v63 = objc_getProperty(v6, v62, 184, 1);
      [v3 setIAdConversionDate:v63];

      id v65 = objc_getProperty(v6, v64, 192, 1);
    }
    else
    {
      [v3 setIAdConversionDate:0];
      id v65 = 0;
    }
    id v66 = v65;
    [v3 setIAdImpressionDate:v66];

    if (v6)
    {
      id v68 = objc_getProperty(v6, v67, 176, 1);
      unsigned int v69 = [v68 stringValue];
      [v3 setIAdAttribution:v69];

      id v71 = objc_getProperty(v6, v70, 312, 1);
    }
    else
    {
      id v80 = [0 stringValue];
      [v3 setIAdAttribution:v80];

      id v71 = 0;
    }
    id v72 = v71;
    [v3 setStoreCohort:v72];

    if (v6)
    {
      id v74 = objc_getProperty(v6, v73, 336, 1);
      [v3 setNameTranscriptions:v74];

      id v76 = objc_getProperty(v6, v75, 80, 1);
    }
    else
    {
      [v3 setNameTranscriptions:0];
      id v76 = 0;
    }
    id v77 = v76;
    BOOL v78 = [v77 unsignedLongLongValue] != 0;

    sub_1004016D4(v3, v78);
  }

  return v3;
}

id sub_10040163C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v7 = 0;
    id v3 = +[NSKeyedArchiver archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v7];
    id v4 = v7;
    uint64_t v5 = v4;
    if (a2 && !v3) {
      *a2 = v4;
    }
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_1004016D4(void *a1, int a2)
{
  if (a1)
  {
    id v4 = [a1 distributorInfo];
    uint64_t v5 = v4;
    if (v4) {
      id v6 = v4;
    }
    else {
      id v6 = objc_alloc_init((Class)MIStoreMetadataDistributor);
    }
    id v7 = v6;

    if (a2) {
      CFStringRef v8 = @"com.apple.TestFlight";
    }
    else {
      CFStringRef v8 = @"com.apple.AppStore";
    }
    [v7 setDistributorID:v8];
    id v9 = objc_alloc((Class)LSApplicationRecord);
    id v10 = [v7 distributorID];
    id v11 = [v9 initWithBundleIdentifier:v10 allowPlaceholder:0 error:0];

    uint64_t v12 = [v11 localizedName];
    SEL v13 = (void *)v12;
    if (v12)
    {
      CFStringRef v16 = &stru_10052E4D8;
      uint64_t v17 = v12;
      id v14 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
      [v7 setLocalizedDistributorName:v14];
    }
    id v15 = ASDLocalizedString();
    [v7 setDeveloperName:v15];

    [a1 setDistributorInfo:v7];
  }
}

void sub_100401854(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = [v3 username];
    [a1 setAppleID:v4];

    uint64_t v5 = objc_msgSend(v3, "ams_DSID");
    [a1 setDSPersonID:v5];

    objc_msgSend(v3, "ams_altDSID");
    id v6 = (id)objc_claimAutoreleasedReturnValue();

    [a1 setAltDSID:v6];
  }
}

void sub_100401904(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = [v3 clientInfo];
    uint64_t v5 = [v4 bundleIdentifier];
    [a1 setSourceApp:v5];

    id v6 = [v3 referrerName];
    [a1 setReferrerApp:v6];

    id v7 = [v3 referrerURL];

    [a1 setReferrerURL:v7];
  }
}

void sub_1004019C4(void *a1, void *a2, int a3)
{
  id v8 = a2;
  if (a1)
  {
    uint64_t v5 = sub_1002E72A0(v8);
    [a1 setDownloaderID:v5];

    id v6 = sub_1002E73FC(v8);
    [a1 setFamilyID:v6];

    id v7 = sub_1002E7480(v8);
    [a1 setPurchaserID:v7];

    if (a3) {
      [a1 setDeviceBasedVPP:sub_1002E7430(v8)];
    }
  }
}

id sub_100401A90(id a1, StoreItemSubGenre *a2)
{
  id v2 = a2;
  id v4 = objc_alloc((Class)MIStoreMetadataSubGenre);
  if (v2)
  {
    id v5 = objc_getProperty(v2, v3, 8, 1);
    id Property = objc_getProperty(v2, v6, 16, 1);
  }
  else
  {
    id v5 = 0;
    id Property = 0;
  }
  id v8 = Property;

  id v9 = [v4 initWithGenre:v5 genreID:v8];
  return v9;
}

id sub_100401B48(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  if (!a1)
  {
    id v11 = 0;
    goto LABEL_9;
  }
  id v15 = 0;
  id v7 = [a1 dictionaryRepresentation];
  id v8 = +[NSPropertyListSerialization dataWithPropertyList:v7 format:200 options:0 error:&v15];

  id v9 = v15;
  if (v8)
  {
    id v10 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleIdentifier:v6];
    id v14 = v9;
    id v11 = +[IXAppInstallCoordinator updateiTunesMetadataForAppWithIdentity:v10 plistData:v8 options:0 error:&v14];
    id v12 = v14;

    id v9 = v12;
    if (!a4) {
      goto LABEL_8;
    }
LABEL_6:
    if ((v11 & 1) == 0) {
      *a4 = v9;
    }
    goto LABEL_8;
  }
  id v11 = 0;
  if (a4) {
    goto LABEL_6;
  }
LABEL_8:

LABEL_9:
  return v11;
}

id sub_100401CE4(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"phase" values:&off_10054E100];
    v10[0] = v4;
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v3];

    v10[1] = v5;
    id v6 = +[NSArray arrayWithObjects:v10 count:2];
    id v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

    id v8 = [v2 connection];
    sub_1002FF3DC((uint64_t)AppInstallEntity, v8, v7);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_100401E3C(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v4 = a3;
    id v5 = a2;
    uint64_t v17 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"phase" values:&off_10054E118];
    v21[0] = v17;
    id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"coordinator_id" equalToValue:v5];
    v20[0] = v6;
    id v7 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"coordinator_id"];
    v19[0] = v7;
    id v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v4];

    v19[1] = v8;
    id v9 = +[NSArray arrayWithObjects:v19 count:2];
    id v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v9];
    v20[1] = v10;
    id v11 = +[NSArray arrayWithObjects:v20 count:2];
    id v12 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v11];
    v21[1] = v12;
    SEL v13 = +[NSArray arrayWithObjects:v21 count:2];
    id v14 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v13];

    id v15 = sub_100402068(a1, v14, v5);
  }
  else
  {
    id v15 = 0;
  }
  return v15;
}

id sub_100402068(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [a1 connection];
  id v8 = sub_1002FF3DC((uint64_t)AppInstallEntity, v7, v6);

  if (v8)
  {
    uint64_t v9 = sub_1002C203C(v8);
    if (v9
      && (id v10 = (void *)v9,
          sub_1002C203C(v8),
          id v11 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v12 = [v11 isEqual:v5],
          v11,
          v10,
          (v12 & 1) == 0))
    {
      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        CFStringRef v16 = sub_1002C203C(v8);
        int v17 = 138543874;
        SEL v18 = v8;
        __int16 v19 = 2114;
        id v20 = v16;
        __int16 v21 = 2114;
        id v22 = v5;
        _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Matched an installation (%{public}@) with a coordinator ID (%{public}@) that differs from the expected coordinator ID (%{public}@).", (uint8_t *)&v17, 0x20u);
      }
    }
    else
    {
      SEL v13 = sub_1002C203C(v8);

      if (v13) {
        goto LABEL_10;
      }
      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        int v17 = 138543618;
        SEL v18 = v8;
        __int16 v19 = 2114;
        id v20 = v5;
        _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Matched an installation (%{public}@) that lacks a coordinator ID despite expecting a particular coordinator ID (%{public}@).", (uint8_t *)&v17, 0x16u);
      }
    }
  }
LABEL_10:

  return v8;
}

id sub_100402268(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v4 = a3;
    id v5 = a2;
    int v17 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"phase" values:&off_10054E130];
    v21[0] = v17;
    id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"coordinator_id" equalToValue:v5];
    v20[0] = v6;
    id v7 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"coordinator_id"];
    v19[0] = v7;
    id v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v4];

    v19[1] = v8;
    uint64_t v9 = +[NSArray arrayWithObjects:v19 count:2];
    id v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v9];
    v20[1] = v10;
    id v11 = +[NSArray arrayWithObjects:v20 count:2];
    unsigned __int8 v12 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v11];
    v21[1] = v12;
    SEL v13 = +[NSArray arrayWithObjects:v21 count:2];
    id v14 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v13];

    id v15 = sub_100402068(a1, v14, v5);
  }
  else
  {
    id v15 = 0;
  }
  return v15;
}

id sub_100402494(id a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v7 = 0;
    id v8 = &v7;
    uint64_t v9 = 0x3032000000;
    id v10 = sub_100018478;
    id v11 = sub_100017DF8;
    id v12 = (id)objc_opt_new();
    id v2 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"phase" values:&off_10054E148];
    id v3 = [v1 connection];
    id v4 = sub_1002FF548((uint64_t)AppInstallEntity, v3, v2);

    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100402624;
    v6[3] = &unk_100522CD0;
    void v6[4] = v1;
    void v6[5] = &v7;
    [v4 enumeratePersistentIDsUsingBlock:v6];
    id v1 = [(id)v8[5] allObjects];

    _Block_object_dispose(&v7, 8);
  }
  return v1;
}

void sub_100402608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100402624(uint64_t a1, uint64_t a2)
{
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"parent_id" equalToLongLong:a2];
  id v5 = [*(id *)(a1 + 32) connection];
  id v6 = sub_1002FF548((uint64_t)AppPackageEntity, v5, v4);

  uint64_t v7 = [AppInstallEntity alloc];
  id v8 = [*(id *)(a1 + 32) connection];
  uint64_t v9 = [(SQLiteEntity *)v7 initWithPersistentID:a2 onConnection:v8];

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100402764;
  v12[3] = &unk_100529068;
  uint64_t v10 = *(void *)(a1 + 40);
  v12[4] = *(void *)(a1 + 32);
  SEL v13 = v9;
  uint64_t v14 = v10;
  id v11 = v9;
  [v6 enumeratePersistentIDsUsingBlock:v12];
}

void sub_100402764(uint64_t a1, uint64_t a2)
{
  id v4 = [AppPackageEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  SEL v13 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v6 = sub_10026EA4C(v13, @"package_url");
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = sub_100288DB4(v6);

    [(SQLiteEntity *)v13 setValue:v8 forProperty:@"package_url"];
    uint64_t v9 = sub_1002C1FCC(*(void **)(a1 + 40));

    if (v9)
    {
      uint64_t v10 = *(void **)(a1 + 40);
      id v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      id v12 = sub_1002C1FCC(v10);
      [v11 addObject:v12];
    }
  }
  else
  {
    id v8 = 0;
  }
}

uint64_t sub_100402870(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  id v1 = [a1 connection];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100402950;
  v4[3] = &unk_100523460;
  void v4[4] = &v5;
  sub_100009834((uint64_t)v1, @"SELECT SUM(ap.bytes_total) FROM app_install AS ai LEFT JOIN app_package AS ap ON ai.pid = ap.parent_id WHERE ai.restore_type = 1 AND ap.package_type = 0", v4);

  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100402938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100402950(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100242DA8(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

id sub_1004029D0()
{
  self;
  if (qword_1005B13A0 != -1) {
    dispatch_once(&qword_1005B13A0, &stru_10052D078);
  }
  id v0 = (void *)qword_1005B13A8;
  return v0;
}

void sub_100402A28(id a1)
{
  id v1 = objc_alloc_init(DiagnosticClock);
  uint64_t v2 = (void *)qword_1005B13A8;
  qword_1005B13A8 = (uint64_t)v1;
}

void sub_100402BDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    *(double *)(v1 + 16) = sub_1003F282C();
    uint64_t v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(v1 + 16);
      int v4 = 134217984;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Diagnostic clock offset updated: %.0f", (uint8_t *)&v4, 0xCu);
    }
  }
}

id *sub_100402D0C(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v22.receiver = a1;
    v22.super_class = (Class)TestFlightServiceHost;
    a1 = (id *)objc_msgSendSuper2(&v22, "init");
    if (a1)
    {
      uint64_t v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v6 = dispatch_queue_create("com.apple.appstored.TestFlightServiceHost.dispatch", v5);
      id v7 = a1[3];
      a1[3] = v6;

      objc_storeStrong(a1 + 2, a2);
      a1[5] = (id)0x404E000000000000;
      id v8 = objc_alloc((Class)ASDExtensionMonitor);
      v23[0] = NSExtensionPointName;
      v23[1] = NSExtensionIdentifierName;
      v24[0] = ASDTestFlightServiceExtensionPointIdentifier;
      v24[1] = @"com.apple.TestFlight.ServiceExtension";
      v23[2] = @"ENTITLEMENT:com.apple.private.appstored";
      v24[2] = &off_10054E160;
      uint64_t v9 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:3];
      id v10 = [v8 initWithAttributes:v9];
      id v11 = a1[1];
      a1[1] = v10;

      objc_initWeak(&location, a1);
      id v12 = a1[3];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100402FC8;
      v18[3] = &unk_10052D0A0;
      objc_copyWeak(&v20, &location);
      id v13 = v12;
      id v19 = v13;
      [a1[1] setUpdateHandler:v18];
      uint64_t v14 = a1[3];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100403310;
      block[3] = &unk_100521388;
      a1 = a1;
      int v17 = a1;
      dispatch_async(v14, block);

      objc_destroyWeak(&v20);
      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_100402FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100402FC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_queue_t v6 = *(NSObject **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10040308C;
    void v7[3] = &unk_1005218C0;
    id v8 = WeakRetained;
    id v9 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_10040308C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) firstObject];
  sub_1004030E0(v1, v2);
}

void sub_1004030E0(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = v4;
  if (a1 && *(id *)(a1 + 32) != v4)
  {
    objc_storeStrong((id *)(a1 + 32), a2);
    dispatch_queue_t v6 = [*(id *)(a1 + 32) testFlightServiceExtensionCustomServiceTime];
    id v7 = v6;
    if (v6)
    {
      [v6 doubleValue];
      if (v8 < 0.0) {
        double v8 = 0.0;
      }
      double v9 = fmin(v8, 300.0);
    }
    else
    {
      double v9 = 60.0;
    }
    *(double *)(a1 + 40) = v9;
    id v10 = [*(id *)(a1 + 32) identifier];
    id v11 = [v10 length];

    id v12 = ASDLogHandleForCategory();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v13)
      {
        uint64_t v14 = [*(id *)(a1 + 32) identifier];
        id v15 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
        *(_DWORD *)long long buf = 138543618;
        __int16 v21 = v14;
        __int16 v22 = 2114;
        SEL v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TestFlight service extension: %{public}@ with service time: %{public}@ seconds", buf, 0x16u);
      }
    }
    else if (v13)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TestFlight service extension: none", buf, 2u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained)
    {
      BOOL v17 = *(void *)(a1 + 32) != 0;
      SEL v18 = *(NSObject **)(a1 + 16);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_100404950;
      v19[3] = &unk_100521B80;
      void v19[4] = a1;
      v19[5] = v17;
      dispatch_async(v18, v19);
    }
  }
}

void sub_100403310(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v3 = [*(id *)(v1 + 8) extensions];
  id v2 = [v3 firstObject];
  sub_1004030E0(v1, v2);
}

uint64_t sub_100403378(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  dispatch_queue_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100403430;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_async_and_wait(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100403430(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1) {
    uint64_t v1 = *(void *)(v1 + 32) != 0;
  }
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v1;
  return result;
}

void sub_100403454(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "notifyOfReceivedPushToken", buf, 2u);
    }

    *(void *)long long buf = 0;
    BOOL v17 = buf;
    uint64_t v18 = 0x2810000000;
    id v19 = "";
    char v20 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1004035EC;
    void v11[3] = &unk_10052D0F0;
    id v12 = v5;
    id v15 = buf;
    uint64_t v13 = a1;
    id v14 = v6;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10040385C;
    void v8[3] = &unk_10052D118;
    id v10 = buf;
    void v8[4] = a1;
    id v9 = v14;
    sub_100403940(a1, v11, v8);

    _Block_object_dispose(buf, 8);
  }
}

void sub_1004035EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_initWeak(&location, v6);
  uint64_t v7 = *(void *)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100403708;
  void v10[3] = &unk_10052D0C8;
  objc_copyWeak(&v12, &location);
  long long v9 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v9;
  long long v11 = v9;
  void v10[4] = *(void *)(a1 + 40);
  [v5 didReceivePushToken:v7 reply:v10];

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_1004036EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100403708(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained endRequest];

  if ((atomic_exchange((atomic_uchar *volatile)(*(void *)(*(void *)(a1 + 48) + 8) + 32), 1u) & 1) == 0)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    if (v7)
    {
      id v8 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1004037F8;
      block[3] = &unk_100529980;
      id v11 = v7;
      char v12 = a2;
      id v10 = v5;
      dispatch_async(v8, block);
    }
  }
}

void sub_1004037F8(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  ASDErrorWithSafeUserInfo();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v1, v3);
}

void sub_10040385C(void *a1, void *a2)
{
  id v3 = a2;
  if ((atomic_exchange((atomic_uchar *volatile)(*(void *)(a1[6] + 8) + 32), 1u) & 1) == 0)
  {
    id v4 = (void *)a1[5];
    if (v4)
    {
      id v5 = *(NSObject **)(a1[4] + 16);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_100403928;
      v6[3] = &unk_100521AE0;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_100403928(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100403940(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004049B8;
  block[3] = &unk_1005216E8;
  void block[4] = a1;
  id v8 = v5;
  id v11 = v8;
  id v9 = v6;
  id v12 = v9;
  dispatch_async(v7, block);
}

void sub_100403A0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "notifyOfReceivedPushMessages", buf, 2u);
    }

    *(void *)long long buf = 0;
    BOOL v17 = buf;
    uint64_t v18 = 0x2810000000;
    id v19 = "";
    char v20 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_100403BA4;
    void v11[3] = &unk_10052D0F0;
    id v12 = v5;
    id v15 = buf;
    uint64_t v13 = a1;
    id v14 = v6;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100403E14;
    void v8[3] = &unk_10052D118;
    id v10 = buf;
    void v8[4] = a1;
    id v9 = v14;
    sub_100403940(a1, v11, v8);

    _Block_object_dispose(buf, 8);
  }
}

void sub_100403BA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_initWeak(&location, v6);
  uint64_t v7 = *(void *)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100403CC0;
  void v10[3] = &unk_10052D0C8;
  objc_copyWeak(&v12, &location);
  long long v9 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v9;
  long long v11 = v9;
  void v10[4] = *(void *)(a1 + 40);
  [v5 didReceivePushMessages:v7 reply:v10];

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_100403CA4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100403CC0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained endRequest];

  if ((atomic_exchange((atomic_uchar *volatile)(*(void *)(*(void *)(a1 + 48) + 8) + 32), 1u) & 1) == 0)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    if (v7)
    {
      id v8 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100403DB0;
      block[3] = &unk_100529980;
      id v11 = v7;
      char v12 = a2;
      id v10 = v5;
      dispatch_async(v8, block);
    }
  }
}

void sub_100403DB0(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  ASDErrorWithSafeUserInfo();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v1, v3);
}

void sub_100403E14(void *a1, void *a2)
{
  id v3 = a2;
  if ((atomic_exchange((atomic_uchar *volatile)(*(void *)(a1[6] + 8) + 32), 1u) & 1) == 0)
  {
    id v4 = (void *)a1[5];
    if (v4)
    {
      id v5 = *(NSObject **)(a1[4] + 16);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_100403EE0;
      v6[3] = &unk_100521AE0;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_100403EE0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100403EF8(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    char v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2050;
      *(void *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2114;
      id v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "notifyOfReachedTerminalPhaseWithBetaBundle: %{public}@, phase: %{public}ld, error: %{public}@", buf, 0x20u);
    }

    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2810000000;
    id v24 = "";
    char v25 = 0;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10040412C;
    v16[3] = &unk_10052D140;
    id v17 = v9;
    uint64_t v22 = a3;
    uint64_t v18 = v10;
    __int16 v21 = buf;
    uint64_t v19 = a1;
    id v20 = v11;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1004043B0;
    v13[3] = &unk_10052D118;
    id v15 = buf;
    void v13[4] = a1;
    id v14 = v20;
    sub_100403940(a1, v16, v13);

    _Block_object_dispose(buf, 8);
  }
}

void sub_10040412C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_initWeak(&location, v6);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10040425C;
  v12[3] = &unk_10052D0C8;
  objc_copyWeak(&v14, &location);
  long long v11 = *(_OWORD *)(a1 + 56);
  id v10 = (id)v11;
  long long v13 = v11;
  v12[4] = *(void *)(a1 + 48);
  [v5 didReachTerminalPhaseWithBetaBundle:v8 terminalPhase:v7 error:v9 reply:v12];

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void sub_100404240(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10040425C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained endRequest];

  if ((atomic_exchange((atomic_uchar *volatile)(*(void *)(*(void *)(a1 + 48) + 8) + 32), 1u) & 1) == 0)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    if (v7)
    {
      uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10040434C;
      block[3] = &unk_100529980;
      id v11 = v7;
      char v12 = a2;
      id v10 = v5;
      dispatch_async(v8, block);
    }
  }
}

void sub_10040434C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  ASDErrorWithSafeUserInfo();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v1, v3);
}

void sub_1004043B0(void *a1, void *a2)
{
  id v3 = a2;
  if ((atomic_exchange((atomic_uchar *volatile)(*(void *)(a1[6] + 8) + 32), 1u) & 1) == 0)
  {
    id v4 = (void *)a1[5];
    if (v4)
    {
      id v5 = *(NSObject **)(a1[4] + 16);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_10040447C;
      v6[3] = &unk_100521AE0;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_10040447C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100404494(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "reloadAppsFromServerWithCompletionHandler", buf, 2u);
    }

    *(void *)long long buf = 0;
    char v12 = buf;
    uint64_t v13 = 0x2810000000;
    id v14 = "";
    char v15 = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10040460C;
    void v8[3] = &unk_10052D168;
    id v10 = buf;
    void v8[4] = a1;
    id v9 = v3;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10040486C;
    v5[3] = &unk_10052D118;
    id v7 = buf;
    void v5[4] = a1;
    id v6 = v9;
    sub_100403940(a1, v8, v5);

    _Block_object_dispose(buf, 8);
  }
}

void sub_10040460C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_initWeak(&location, v6);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100404718;
  v9[3] = &unk_10052D0C8;
  objc_copyWeak(&v11, &location);
  long long v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  long long v10 = v8;
  void v9[4] = *(void *)(a1 + 32);
  [v5 reloadAppsFromServerWithReply:v9];

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

void sub_1004046FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100404718(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained endRequest];

  if ((atomic_exchange((atomic_uchar *volatile)(*(void *)(*(void *)(a1 + 48) + 8) + 32), 1u) & 1) == 0)
  {
    id v7 = *(void **)(a1 + 40);
    if (v7)
    {
      long long v8 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100404808;
      block[3] = &unk_100529980;
      id v11 = v7;
      char v12 = a2;
      id v10 = v5;
      dispatch_async(v8, block);
    }
  }
}

void sub_100404808(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  ASDErrorWithSafeUserInfo();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v1, v3);
}

void sub_10040486C(void *a1, void *a2)
{
  id v3 = a2;
  if ((atomic_exchange((atomic_uchar *volatile)(*(void *)(a1[6] + 8) + 32), 1u) & 1) == 0)
  {
    id v4 = (void *)a1[5];
    if (v4)
    {
      id v5 = *(NSObject **)(a1[4] + 16);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_100404938;
      v6[3] = &unk_100521AE0;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_100404938(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100404950(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 48));
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
    id WeakRetained = 0;
  }
  id v5 = WeakRetained;
  [WeakRetained testFlightServiceHost:v4 didUpdateExtensionStatus:*(void *)(a1 + 40)];
}

void sub_1004049B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  id v4 = v2;
  if (v1)
  {
    id v5 = sub_10026CA24();
    BOOL v6 = sub_10026D260((uint64_t)v5);

    if (v6)
    {
      id v7 = *(void **)(v1 + 32);
      if (v7)
      {
        id v8 = v7;
        id v9 = [objc_alloc((Class)ASDExtensionRequest) initWithExtension:v8 queue:*(void *)(v1 + 24) serviceTime:*(double *)(v1 + 40) graceTime:1.0];
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_100404C14;
        v16[3] = &unk_10052D190;
        void v16[4] = v1;
        id v17 = v4;
        [v9 setErrorBlock:v16];
        uint64_t v10 = objc_opt_class();
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        void v13[2] = sub_100404C74;
        v13[3] = &unk_10052D1B8;
        void v13[4] = v1;
        id v14 = v9;
        id v15 = v3;
        id v11 = v9;
        [v11 beginRequestForHostContext:v10 XPCInterface:&OBJC_PROTOCOL___ASDTestFlightServiceExtensionRemoteXPCInterface executionBlock:v13];

LABEL_9:
        goto LABEL_10;
      }
    }
    else
    {
      char v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13[0]) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Not calling TestFlight service extension due to security policy", (uint8_t *)v13, 2u);
      }
    }
    ASDErrorWithDescription();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id))v4 + 2))(v4, v8);
    goto LABEL_9;
  }
LABEL_10:
}

void sub_100404C14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  ASDErrorWithSafeUserInfo();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100404C74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), a2, *(void *)(a1 + 40));
}

AppInstallInstallTask *sub_100404CEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v28 = a5;
  id v9 = a4;
  self;
  uint64_t v10 = [AppInstallEntity alloc];
  id v11 = [v9 connection];
  char v12 = [(SQLiteEntity *)v10 initWithPersistentID:a2 onConnection:v11];

  uint64_t v13 = +[NSDate date];
  [(SQLiteEntity *)v12 setValue:v13 forProperty:@"timestamp"];

  v31[0] = @"alternate_icon_name";
  v31[1] = @"approved";
  v31[2] = @"arcade";
  v31[3] = @"auto_install_override";
  v31[4] = @"bundle_id";
  v31[5] = @"bundle_url";
  v31[6] = @"client_id";
  v31[7] = @"client_type";
  v31[8] = @"coordinator_id";
  v31[9] = @"download_path";
  v31[10] = @"download_volume";
  v31[11] = @"evid";
  v31[12] = @"external_id";
  v31[13] = @"install_volume";
  v31[14] = @"item_id";
  v31[15] = @"log_code";
  v31[16] = @"receipt";
  v31[17] = @"software_platform";
  v31[18] = @"source_type";
  v31[19] = @"store_cohort";
  v31[20] = @"store_metadata";
  v31[21] = @"storefront";
  v31[22] = @"update_type";
  v31[23] = @"vendor_name";
  id v14 = +[NSArray arrayWithObjects:v31 count:24];
  id v15 = [v9 connection];
  CFStringRef v16 = +[SQLiteEntity memoryEntityForPersistentID:a2 withProperties:v14 usingConnection:v15];

  v30[0] = @"archive_type";
  v30[1] = @"dp_info";
  v30[2] = @"extracted_content_size";
  void v30[3] = @"package_type";
  v30[4] = @"package_url";
  void v30[5] = @"provisioning_profiles";
  v30[6] = @"sinf";
  v30[7] = @"variant_id";
  id v17 = +[NSArray arrayWithObjects:v30 count:8];
  uint64_t v18 = [v9 connection];

  uint64_t v19 = +[SQLiteEntity memoryEntityForPersistentID:a3 withProperties:v17 usingConnection:v18];

  id v20 = [AppInstallInstallTask alloc];
  id v21 = v16;
  id v22 = v19;
  id v23 = v28;
  if (v20)
  {
    v29.receiver = v20;
    v29.super_class = (Class)AppInstallInstallTask;
    id v24 = (AppInstallInstallTask *)objc_msgSendSuper2(&v29, "init");
    id v20 = v24;
    if (v24)
    {
      objc_storeStrong((id *)&v24->_coordinator, a5);
      objc_storeStrong((id *)&v20->_install, v16);
      objc_storeStrong((id *)&v20->_package, v19);
      char v25 = [[_TtC9appstored6LogKey alloc] initWithAppInstallMemoryEntity:v21];
      logKey = v20->_logKey;
      v20->_logKey = v25;
    }
  }

  return v20;
}

void sub_1004061B4(uint64_t a1)
{
  sub_100330828();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = sub_10026E95C(*(void **)(a1 + 48), @"bundle_id");
  sub_1003327FC((uint64_t)v3, v2);
}

id *sub_100406234(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  self;
  id v5 = sub_10040638C((id *)[AppInstallInstallResponse alloc], a2, (void *)2, v4);

  return v5;
}

id sub_1004062A8(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v2 options:0];

  return v3;
}

id *sub_10040638C(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a4;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)AppInstallInstallResponse;
    id v9 = (id *)objc_msgSendSuper2(&v11, "init");
    a1 = v9;
    if (v9)
    {
      v9[1] = a2;
      v9[3] = a3;
      objc_storeStrong(v9 + 2, a4);
    }
  }

  return a1;
}

id sub_1004065A4()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100406648;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B13B8 != -1) {
    dispatch_once(&qword_1005B13B8, block);
  }
  id v0 = (void *)qword_1005B13B0;
  return v0;
}

void sub_100406648(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005B13B0;
  qword_1005B13B0 = (uint64_t)v1;
}

void sub_100406680(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v18 = a2;
    id v3 = a2;
    id v4 = +[NSArray arrayWithObjects:&v18 count:1];

    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id obj = v4;
    id v5 = [obj countByEnumeratingWithState:&v14 objects:v19 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v15;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v15 != v6) {
            objc_enumerationMutation(obj);
          }
          id v8 = (void *)sub_10032F310(*(void *)(*((void *)&v14 + 1) + 8 * (void)v7));
          objc_initWeak(&location, a1);
          id v9 = (void *)a1[1];
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472;
          void v11[2] = sub_100406B18;
          void v11[3] = &unk_100521820;
          objc_copyWeak(&v12, &location);
          [v9 addNotificationRequest:v8 withCompletionHandler:v11];
          objc_destroyWeak(&v12);
          objc_destroyWeak(&location);

          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [obj countByEnumeratingWithState:&v14 objects:v19 count:16];
      }
      while (v5);
    }
  }
}

void sub_100406864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1004069EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100406B18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      int v8 = 138543618;
      id v9 = (id)objc_opt_class();
      __int16 v10 = 2114;
      id v11 = v3;
      id v7 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}@]: Failed to post notification. Error: %{public}@", (uint8_t *)&v8, 0x16u);
LABEL_6:
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v8 = 138543362;
    id v9 = (id)objc_opt_class();
    id v7 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Notification posted successfully", (uint8_t *)&v8, 0xCu);
    goto LABEL_6;
  }
}

AppInstallPostambleTask *sub_100406F4C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  self;
  v20[0] = @"automatic_type";
  v20[1] = @"bundle_id";
  void v20[2] = @"bundle_url";
  v20[3] = @"coordinator_intent";
  v20[4] = @"client_id";
  void v20[5] = @"download_volume";
  v20[6] = @"external_id";
  v20[7] = @"has_background_assets_extension";
  v20[8] = @"metrics_install_type";
  v20[9] = @"post_processing_state";
  v20[10] = @"previous_galette_mode";
  v20[11] = @"receipt";
  v20[12] = @"redownload";
  v20[13] = @"restore_type";
  v20[14] = @"source_type";
  v20[15] = @"update_type";
  v20[16] = @"account_id";
  v20[17] = @"item_id";
  v20[18] = @"transaction_id";
  v20[19] = @"log_code";
  v20[20] = @"external_id";
  v20[21] = @"store_cohort";
  v20[22] = @"storefront";
  v20[23] = @"vendor_name";
  v20[24] = @"store_metadata";
  v20[25] = @"default_browser";
  uint64_t v6 = +[NSArray arrayWithObjects:v20 count:26];
  id v7 = [v5 connection];
  int v8 = +[SQLiteEntity memoryEntityForPersistentID:a2 withProperties:v6 usingConnection:v7];

  CFStringRef v19 = @"archive_type";
  id v9 = +[NSArray arrayWithObjects:&v19 count:1];
  __int16 v10 = [v5 connection];

  id v11 = +[SQLiteEntity memoryEntityForPersistentID:a3 withProperties:v9 usingConnection:v10];

  id v12 = [AppInstallPostambleTask alloc];
  id v13 = v8;
  id v14 = v11;
  if (v12)
  {
    v18.receiver = v12;
    v18.super_class = (Class)AppInstallPostambleTask;
    long long v15 = (AppInstallPostambleTask *)objc_msgSendSuper2(&v18, "init");
    id v12 = v15;
    if (v15)
    {
      objc_storeStrong((id *)&v15->_install, v8);
      objc_storeStrong((id *)&v12->_package, v11);
      v12->_automaticType = (int64_t)sub_10026E91C(v12->_install, @"automatic_type");
      v12->_restoreType = (int64_t)sub_10026E91C(v12->_install, @"restore_type");
      v12->_sourceType = (int64_t)sub_10026E91C(v12->_install, @"source_type");
      v12->_updateType = (int64_t)sub_10026E91C(v12->_install, @"update_type");
    }
  }

  return v12;
}

void sub_100408524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100408544(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 48);
  id v3 = a2;
  id v4 = sub_100424D84(v2);
  id v5 = [v3 setNeedsThirdPartyPurchasesConfirmationForBundleID:v4];

  return v5;
}

void sub_1004085AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Failed to notify Game Center of app install: %{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10040867C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = ASDLogHandleForCategory();
  int v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = sub_100424C14(*(void **)(*(void *)(a1 + 32) + 48));
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%@] Failed to set default browser app with error: %{public}@", buf, 0x16u);
LABEL_9:
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v8 = sub_100424C14(*(void **)(*(void *)(a1 + 32) + 48));
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Successfully configured as default web browser", buf, 0xCu);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    int v6 = *(id *)(a1 + 40);
    if (v9
      && sub_1003F1E7C((uint64_t)AppDefaultsManager, @"ShouldPostNotificationOnDefaultBrowserInstallation", 0))
    {
      uint64_t v7 = objc_opt_new();
      __int16 v10 = ASDLocalizedString();
      [v7 setTitle:v10];

      id v11 = ASDLocalizedString();
      id v12 = [v6 localizedName];
      id v13 = [v6 localizedName];
      id v14 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v11, v12, v13);
      [v7 setBody:v14];

      long long v15 = +[NSURL URLWithString:@"https://"];
      [v7 setDefaultActionURL:v15];

      long long v16 = +[NSUUID UUID];
      long long v17 = [v16 UUIDString];
      objc_super v18 = +[UNNotificationRequest requestWithIdentifier:v17 content:v7 trigger:0];

      id v19 = [objc_alloc((Class)UNUserNotificationCenter) initWithBundleIdentifier:@"com.apple.Preferences"];
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1004089A0;
      id v21 = &unk_100521910;
      uint64_t v22 = v9;
      [v19 addNotificationRequest:v18 withCompletionHandler:buf];

      goto LABEL_9;
    }
  }
}

void sub_1004089A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = sub_100424C14(*(void **)(*(void *)(a1 + 32) + 48));
      int v7 = 138412546;
      __int16 v8 = v6;
      __int16 v9 = 2114;
      id v10 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%@] Failed to post default web browser updated notification: %{public}@", (uint8_t *)&v7, 0x16u);
LABEL_6:
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = sub_100424C14(*(void **)(*(void *)(a1 + 32) + 48));
    int v7 = 138412290;
    __int16 v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] Successfully posted default web browser updated notification", (uint8_t *)&v7, 0xCu);
    goto LABEL_6;
  }
}

void sub_100408AEC(id a1, AMSUniversalLinksUpdateResult *a2, NSError *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  if (v5 || ([(AMSUniversalLinksUpdateResult *)v4 success] & 1) == 0)
  {
    int v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138543362;
      __int16 v8 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to update AMS universal links: %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    int v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Successfully updated AMS universal links", (uint8_t *)&v7, 2u);
    }
  }
}

Class sub_100408C64(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1005B13C8)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_100408DB8;
    void v4[4] = &unk_100521BF0;
    void v4[5] = v4;
    long long v5 = off_10052D288;
    uint64_t v6 = 0;
    qword_1005B13C8 = _sl_dlopen();
    id v2 = (void *)v4[0];
    if (!qword_1005B13C8)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("GKScopedIdManager");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    id v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1005B13C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100408DB8()
{
  uint64_t result = _sl_dlopen();
  qword_1005B13C8 = result;
  return result;
}

uint64_t sub_100408E2C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (sub_100282A60((uint64_t)v2) == 18007) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = sub_100282B98((uint64_t)v2, 18007, &stru_10052D2A0);
  }

  return v3;
}

void sub_100408E98(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_done", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_install", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_install_remote", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE app_package", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_done (pid INTEGER, account_id INTEGER, item_id INTEGER, machine_based INTEGER NOT NULL DEFAULT 0, request_url URL, transaction_id TEXT, PRIMARY KEY(pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_install (pid INTEGER, account_id INTEGER, apple_id TEXT, arcade INTEGER NOT NULL DEFAULT 0, alt_dsid TEXT, alternate_icon_name TEXT, approved INTEGER NOT NULL DEFAULT 0, artwork_url URL, auto_install_override INTEGER NOT NULL DEFAULT 0, automatic_type INTEGER NOT NULL DEFAULT 0, bundle_id TEXT, bundle_name TEXT, bundle_url URL, bundle_version TEXT, bootstrapped INTEGER NOT NULL DEFAULT 2, cancel_download_url URL, cancel_if_duplicate INTEGER NOT NULL DEFAULT 0, companion_bundle_id TEXT, client_id TEXT, client_type INTEGER NOT NULL DEFAULT 0, coordinator_id UUID, coordinator_intent INTEGER NOT NULL DEFAULT 1, default_browser INTEGER NOT NULL DEFAULT 0, device_based_vpp INTEGER, downloader_id INTEGER, download_path TEXT, download_volume TEXT, external_id UUID, external_order INTEGER, evid INTEGER, failure_error BLOB, gizmo_pairing_id UUID, has_background_assets_extension INTEGER NOT NULL DEFAULT 0, has_messages_extension INTEGER NOT NULL DEFAULT 0, install_finished_timestamp DATETIME, install_verification_token TEXT, install_volume TEXT, item_id INTEGER, last_start_date DATETIME, launch_prohibited INTEGER NOT NULL DEFAULT 0, log_code TEXT, messages_artwork_url URL, metrics_fields JSON, optimal_download_start INTEGER, metrics_install_type INTEGER NOT NULL DEFAULT 0, order_index INTEGER, phase INTEGER NOT NULL DEFAULT 10, policy JSON, placeholder_entitlements BLOB, placeholder_path TEXT, post_processing_state INTEGER NOT NULL DEFAULT 0, previous_galette_mode INTEGER, priority INTEGER NOT NULL DEFAULT 0, quarantine INTEGER NOT NULL DEFAULT 0, receipt BLOB, recovery_count INTEGER NOT NULL DEFAULT 0, redownload INTEGER NOT NULL DEFAULT 0, remote_install INTEGER NOT NULL DEFAULT 0, requires_rosetta INTEGER NOT NULL DEFAULT 0, restore_state INTEGER NOT NULL DEFAULT 0, restore_retry_count INTEGER NOT NULL DEFAULT 0, restore_type INTEGER NOT NULL DEFAULT 0, runs_on_apple_silicon INTEGER NOT NULL DEFAULT 1, runs_on_intel INTEGER NOT NULL DEFAULT 1,software_platform INTEGER NOT NULL DEFAULT 0, source_type INTEGER NOT NULL DEFAULT 0, storefront TEXT, store_cohort TEXT, store_metadata BLOB, supports_32bit_only INTEGER NOT NULL DEFAULT 0, supress_dialogs INTEGER NOT NULL DEFAULT 0, timestamp DATETIME DEFAULT (timestamp()), transaction_id TEXT, update_type INTEGER NOT NULL DEFAULT 0, vid UUID, vendor_name TEXT, watch_type INTEGER NOT NULL DEFAULT 0, PRIMARY KEY(pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_install_remote (pid INTEGER, destination_id TEXT, external_id UUID, metadata BLOB, PRIMARY KEY(pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_package (pid INTEGER, archive_type INTEGER NOT NULL DEFAULT 0, background_asset_metadata JSON, blocked INTEGER NOT NULL DEFAULT 0, bytes_offset INTEGER, bytes_remaining INTEGER, bytes_total INTEGER, clear_hash_array JSON, compression INTEGER NOT NULL DEFAULT 0, data_promise_id UUID, delta_algorithm TEXT, disk_usage INTEGER, dp_info BLOB, extracted_content_size INTEGER, hash_array JSON, hash_size INTEGER, hash_type INTEGER, hole_punch_size INTEGER, initial_odr_size INTEGER, locate_asset_cache INTEGER, odr_manifest_url URL, package_type INTEGER, package_url URL, parent_id UUID, provisioning_profiles JSON, ranges_not_supported INTEGER DEFAULT 0, request_count INTEGER DEFAULT 0, sinf BLOB, streaming_zip INTEGER, timestamp DATETIME DEFAULT (timestamp()), variant_id TEXT, PRIMARY KEY(pid));",
      1,
      0);
  }
}

id *sub_100408F94(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)LoadStoreQueueTask;
    id v13 = (id *)objc_msgSendSuper2(&v15, "init");
    a1 = v13;
    if (v13)
    {
      objc_storeStrong(v13 + 11, a3);
      a1[7] = a2;
      objc_storeStrong(a1 + 6, a4);
      objc_storeStrong(a1 + 5, a5);
    }
  }

  return a1;
}

id sub_100409DB0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 88);
  if (!v2)
  {
    uint64_t v3 = +[ACAccountStore ams_sharedAccountStore];
    uint64_t v4 = objc_msgSend(v3, "ams_activeiTunesAccount");
    long long v5 = *(void **)(a1 + 88);
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x220], 8) = v4;

    id v2 = *(void **)(a1 + 88);
  }
  return v2;
}

uint64_t sub_100409E30(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
  uint64_t v6 = v5 != 0;
  if (v5)
  {
    id v7 = v5;
    BOOL v18 = v5 != 0;
    char v8 = 0;
    uint64_t v9 = *(void *)v20;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v4);
        }
        uint64_t v11 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        id v12 = [AppDoneEntity alloc];
        id v13 = [v3 connection];
        id v14 = [(SQLiteEntity *)v12 initWithPropertyValues:v11 onConnection:v13];

        v8 |= v14 != 0;
      }
      id v7 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v7);

    if ((v8 & 1) == 0)
    {
      uint64_t v6 = 0;
      goto LABEL_15;
    }
    if (v3)
    {
      id v16 = objc_getProperty(v3, v15, 24, 1);
      id v4 = v16;
      if (v16) {
        *((unsigned char *)v16 + 137) = 1;
      }
    }
    else
    {
      id v4 = 0;
    }
    uint64_t v6 = v18;
  }

LABEL_15:
  return v6;
}

id *sub_10040A078(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)PurchaseHistoryHideShowRequest;
    char v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_10040A124(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = *(void **)(a1 + 16);
    if (!v5) {
      goto LABEL_27;
    }
    id v6 = objc_getProperty(v5, v3, 16, 1);
    if (!v6) {
      goto LABEL_27;
    }
    char v8 = v6;
    id Property = *(id *)(a1 + 16);
    if (Property) {
      id Property = objc_getProperty(Property, v7, 16, 1);
    }
    id v10 = Property;
    uint64_t v11 = objc_msgSend(v10, "ams_DSID");

    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 8);
      id v39 = 0;
      id v13 = sub_10030B9EC(v12, @"purchase-daap/base-url", &v39);
      id v14 = v39;
      if (v13
        && (+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"databases/%ld/items/edit", sub_10030BCBC(*(id **)(a1 + 8), @"purchase-daap/database-id", 101)), objc_super v15 = objc_claimAutoreleasedReturnValue(), [v13 URLByAppendingPathComponent:v15], v16 = objc_claimAutoreleasedReturnValue(), v15, v13, v16))
      {
        id v17 = 0;
      }
      else
      {
        BOOL v18 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          __int16 v34 = objc_opt_class();
          *(_DWORD *)long long buf = 138412546;
          id v41 = v34;
          __int16 v42 = 2114;
          id v43 = v14;
          id v35 = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%@]: Failed to construct request URL error: %{public}@", buf, 0x16u);
        }
        sub_100005B4C(2, (uint64_t)v14);
        id v17 = (id)objc_claimAutoreleasedReturnValue();
        id v16 = 0;
      }

      id v19 = v17;
      if (v16)
      {
        long long v21 = [PurchaseHistoryHideShowRequestEncoder alloc];
        id v22 = *(id *)(a1 + 16);
        if (v22) {
          id v22 = objc_getProperty(v22, v20, 8, 1);
        }
        id v23 = v22;
        id v24 = sub_1002C9D28(v21, v23);

        id v26 = sub_1003869E4((id *)[DAAPURLRequest alloc], v24, v16);
        id v27 = *(id *)(a1 + 16);
        if (v27) {
          id v27 = objc_getProperty(v27, v25, 16, 1);
        }
        id v29 = v27;
        if (v26) {
          objc_setProperty_atomic(v26, v28, v29, 24);
        }

        id v31 = *(id *)(a1 + 16);
        if (v31) {
          id v31 = objc_getProperty(v31, v30, 24, 1);
        }
        id v33 = v31;
        if (v26) {
          objc_setProperty_atomic(v26, v32, v33, 40);
        }

        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        v37[2] = sub_10040A4E4;
        v37[3] = &unk_1005241C0;
        id v38 = v4;
        sub_100386A80((uint64_t)v26, v37);
      }
      else
      {
        id v24 = sub_100005B4C(2, (uint64_t)v19);
        (*((void (**)(id, void *))v4 + 2))(v4, v24);
      }
    }
    else
    {
LABEL_27:
      SEL v36 = sub_100005B4C(4, 0);
      (*((void (**)(id, void *))v4 + 2))(v4, v36);
    }
  }
}

void sub_10040A4E4(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  uint64_t v6 = (uint64_t)v13;
  if (!v13)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = (uint64_t)v5;
    goto LABEL_5;
  }
  if ((char *)[v13 responseStatusCode] - 300 <= (char *)0xFFFFFFFFFFFFFF9BLL)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v6 = 1;
    uint64_t v8 = 0;
LABEL_5:
    uint64_t v9 = sub_100005B4C(v6, v8);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v9);
    goto LABEL_9;
  }
  uint64_t v10 = [v13 data];
  uint64_t v11 = *(void *)(a1 + 32);
  if (v10)
  {
    uint64_t v9 = (void *)v10;
    (*(void (**)(uint64_t, void))(v11 + 16))(v11, 0);
  }
  else
  {
    uint64_t v12 = sub_100005B4C(0, 0);
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

    uint64_t v9 = 0;
  }
LABEL_9:
}

void sub_10040A654(uint64_t a1)
{
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    [WeakRetained invalidate];
  }
}

BOOL sub_10040A7E4(id a1, AppInstallsDatabaseTransaction *a2)
{
  id v2 = a2;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToValue:&off_10054D1B8];
  v13[0] = v3;
  id v4 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"IFNULL(app_install.phase, 10)" values:&off_10054E178];
  v13[1] = v4;
  id v5 = +[NSArray arrayWithObjects:v13 count:2];
  uint64_t v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];

  uint64_t v7 = [(AppInstallsDatabaseSession *)v2 connection];
  uint64_t v8 = sub_1002FF548((uint64_t)AppInstallEntity, v7, v6);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10040A988;
  void v11[3] = &unk_100523780;
  uint64_t v12 = v2;
  uint64_t v9 = v2;
  [v8 enumeratePersistentIDsUsingBlock:v11];

  return 1;
}

void sub_10040A988(uint64_t a1, uint64_t a2)
{
}

id sub_10040A9EC()
{
  self;
  if (qword_1005B13D8 != -1) {
    dispatch_once(&qword_1005B13D8, &stru_10052D2E0);
  }
  id v0 = (void *)qword_1005B13D0;
  return v0;
}

void sub_10040AA44(id a1)
{
  id v1 = objc_alloc_init(PurchaseService);
  id v2 = (void *)qword_1005B13D0;
  qword_1005B13D0 = (uint64_t)v1;
}

void sub_10040AEA0(void *a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = objc_opt_class();
    id v4 = (void *)a1[5];
    id v5 = v3;
    uint64_t v6 = [v4 processInfo];
    uint64_t v7 = [v6 bundleIdentifier];
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2114;
    id v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@]: Checking server queue for clientID: %{public}@", (uint8_t *)&v11, 0x16u);
  }
  if (objc_opt_respondsToSelector())
  {
    [*(id *)(a1[4] + 32) checkStoreQueue:a1[6]];
  }
  else
  {
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = objc_opt_class();
      int v11 = 138412290;
      uint64_t v12 = v9;
      id v10 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@]: selector not implemented", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_10040B14C(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = objc_opt_class();
    uint64_t v5 = *(void *)(a1 + 40);
    id v4 = *(void **)(a1 + 48);
    id v6 = v3;
    uint64_t v7 = [v4 processInfo];
    uint64_t v8 = [v7 bundleIdentifier];
    *(_DWORD *)long long buf = 138412802;
    id v22 = v3;
    __int16 v23 = 2114;
    uint64_t v24 = v5;
    __int16 v25 = 2114;
    id v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@]: Notify dialog complete for purchaseID %{public}@ clientID: %{public}@", buf, 0x20u);
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    int v11 = *(void **)(v9 + 32);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 64);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10040B388;
    void v17[3] = &unk_10052D308;
    void v17[4] = v9;
    id v18 = *(id *)(a1 + 48);
    id v19 = *(id *)(a1 + 56);
    char v20 = *(unsigned char *)(a1 + 72);
    [v11 notifyDialogCompleteForPurchaseID:v10 result:v12 selectedButton:v13 withResultHandler:v17];
  }
  else
  {
    id v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      objc_super v15 = objc_opt_class();
      *(_DWORD *)long long buf = 138412290;
      id v22 = v15;
      id v16 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@]: selector not implemented", buf, 0xCu);
    }
  }
}

void sub_10040B388(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = ASDLogHandleForCategory();
  id v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = objc_opt_class();
      uint64_t v8 = *(void **)(a1 + 40);
      id v9 = v7;
      uint64_t v10 = [v8 processInfo];
      int v11 = [v10 bundleIdentifier];
      int v17 = 138412802;
      id v18 = v7;
      __int16 v19 = 2114;
      char v20 = v11;
      __int16 v21 = 2114;
      id v22 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%@]: Notify dialog completed for clientID: %{public}@ with error: %{public}@", (uint8_t *)&v17, 0x20u);
LABEL_6:
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = objc_opt_class();
    uint64_t v13 = *(void **)(a1 + 40);
    id v9 = v12;
    uint64_t v10 = [v13 processInfo];
    int v11 = [v10 bundleIdentifier];
    int v17 = 138412546;
    id v18 = v12;
    __int16 v19 = 2114;
    char v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@]: Notify dialog completed successfully for client: %{public}@ ", (uint8_t *)&v17, 0x16u);
    goto LABEL_6;
  }

  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 56);
  id v16 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, uint64_t, void *))(v14 + 16))(v14, v15, v16);
}

void sub_10040B65C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v3 = +[NSArray arrayWithObjects:&v8 count:1];
  id v4 = *(void **)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10040B774;
  v5[3] = &unk_10052D358;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 56);
  [v2 processPurchases:v3 failBatchOnError:0 requestToken:v6 withReplyHandler:v5];
}

void sub_10040B774(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = ASDLogHandleForCategory();
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = objc_opt_class();
      uint64_t v10 = *(void **)(a1 + 40);
      id v11 = v9;
      uint64_t v12 = [v10 processInfo];
      uint64_t v13 = [v12 bundleIdentifier];
      int v18 = 138412802;
      __int16 v19 = v9;
      __int16 v20 = 2114;
      __int16 v21 = v13;
      __int16 v22 = 2114;
      id v23 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@]: Purchase completed for clientID: %{public}@ with error: %{public}@", (uint8_t *)&v18, 0x20u);
LABEL_6:
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = objc_opt_class();
    uint64_t v15 = *(void **)(a1 + 40);
    id v11 = v14;
    uint64_t v12 = [v15 processInfo];
    uint64_t v13 = [v12 bundleIdentifier];
    int v18 = 138412546;
    __int16 v19 = v14;
    __int16 v20 = 2114;
    __int16 v21 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@]: Purchase completed successfully for client %{public}@", (uint8_t *)&v18, 0x16u);
    goto LABEL_6;
  }

  uint64_t v16 = *(void *)(a1 + 48);
  int v17 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, id, void *))(v16 + 16))(v16, v6, v17);
}

void sub_10040BA54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v2 + 32);
  id v5 = *(void **)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10040BB18;
  v6[3] = &unk_10052D358;
  void v6[4] = v2;
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [v4 processPurchases:v3 failBatchOnError:1 requestToken:v7 withReplyHandler:v6];
}

void sub_10040BB18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = objc_opt_class();
      uint64_t v10 = *(void **)(a1 + 40);
      id v11 = v9;
      uint64_t v12 = [v10 processInfo];
      uint64_t v13 = [v12 bundleIdentifier];
      int v18 = 138412802;
      __int16 v19 = v9;
      __int16 v20 = 2114;
      __int16 v21 = v13;
      __int16 v22 = 2114;
      id v23 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Purchases completed for client: %{public}@ with error: %{public}@", (uint8_t *)&v18, 0x20u);
LABEL_6:
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = objc_opt_class();
    uint64_t v15 = *(void **)(a1 + 40);
    id v11 = v14;
    uint64_t v12 = [v15 processInfo];
    uint64_t v13 = [v12 bundleIdentifier];
    int v18 = 138412546;
    __int16 v19 = v14;
    __int16 v20 = 2114;
    __int16 v21 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Purchases completed successfully for client: %{public}@", (uint8_t *)&v18, 0x16u);
    goto LABEL_6;
  }

  uint64_t v16 = *(void *)(a1 + 48);
  int v17 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, id, void *))(v16 + 16))(v16, v6, v17);
}

void sub_10040BE18(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) processInfo];
    id v5 = [v4 bundleIdentifier];
    id v6 = [*(id *)(a1 + 40) componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138412802;
    __int16 v25 = v2;
    __int16 v26 = 2114;
    id v27 = v5;
    __int16 v28 = 2114;
    id v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@] Batch purchase started client: %{public}@ itemIDs: [%{public}@]", buf, 0x20u);
  }
  id v7 = [_TtC9appstored23PurchaseArcadeBatchTask alloc];
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v10 = [*(id *)(a1 + 32) processInfo];
  id v11 = [v10 bundleIdentifier];
  uint64_t v12 = [(PurchaseArcadeBatchTask *)v7 initWithItemIDs:v9 additionalBuyParams:v8 client:v11 logKey:v2];

  sub_1002B2A3C();
  uint64_t v13 = (id *)objc_claimAutoreleasedReturnValue();
  id v23 = v12;
  uint64_t v14 = +[NSArray arrayWithObjects:&v23 count:1];
  if (v13) {
    [v13[1] addOperations:v14 waitUntilFinished:1];
  }

  if (v12
    && (id v16 = objc_getProperty(v12, v15, 32, 1)) != 0
    && (uint64_t v17 = *(void *)(a1 + 56), v16, v17))
  {
    uint64_t v19 = *(void *)(a1 + 56);
    id v20 = objc_getProperty(v12, v18, 32, 1);
    (*(void (**)(uint64_t, void, id))(v19 + 16))(v19, 0, v20);
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 56);
    if (!v21) {
      goto LABEL_12;
    }
    id v20 = [(PurchaseArcadeBatchTask *)v12 purchaseResponse];
    (*(void (**)(uint64_t, id, void))(v21 + 16))(v21, v20, 0);
  }

LABEL_12:
  __int16 v22 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    __int16 v25 = v2;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%@] Batch purchase complete", buf, 0xCu);
  }
}

void sub_10040C1F0(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v3 = [*(id *)(a1 + 32) allKeys];
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 40) processInfo];
    id v6 = [v5 bundleIdentifier];
    id v7 = [v3 componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138412802;
    __int16 v26 = v2;
    __int16 v27 = 2114;
    __int16 v28 = v6;
    __int16 v29 = 2114;
    id v30 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Batch purchase started client: %{public}@ itemIDs: [%{public}@]", buf, 0x20u);
  }
  uint64_t v8 = [_TtC9appstored23PurchaseArcadeBatchTask alloc];
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = [*(id *)(a1 + 40) processInfo];
  uint64_t v12 = [v11 bundleIdentifier];
  uint64_t v13 = [(PurchaseArcadeBatchTask *)v8 initWithItemMetadata:v10 additionalBuyParams:v9 client:v12 logKey:v2];

  sub_1002B2A3C();
  uint64_t v14 = (id *)objc_claimAutoreleasedReturnValue();
  uint64_t v24 = v13;
  uint64_t v15 = +[NSArray arrayWithObjects:&v24 count:1];
  if (v14) {
    [v14[1] addOperations:v15 waitUntilFinished:1];
  }

  if (v13
    && (id v17 = objc_getProperty(v13, v16, 32, 1)) != 0
    && (uint64_t v18 = *(void *)(a1 + 56), v17, v18))
  {
    uint64_t v20 = *(void *)(a1 + 56);
    id v21 = objc_getProperty(v13, v19, 32, 1);
    (*(void (**)(uint64_t, void, id))(v20 + 16))(v20, 0, v21);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 56);
    if (!v22) {
      goto LABEL_12;
    }
    id v21 = [(PurchaseArcadeBatchTask *)v13 purchaseResponse];
    (*(void (**)(uint64_t, id, void))(v22 + 16))(v22, v21, 0);
  }

LABEL_12:
  id v23 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    __int16 v26 = v2;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[%@] Batch purchase complete", buf, 0xCu);
  }
}

void sub_10040C5BC(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = objc_opt_class();
    uint64_t v5 = *(void *)(a1 + 40);
    id v4 = *(void **)(a1 + 48);
    id v6 = v3;
    id v7 = [v4 itemID];
    uint64_t v8 = [*(id *)(a1 + 48) bundleID];
    uint64_t v9 = [*(id *)(a1 + 40) processInfo];
    uint64_t v10 = [v9 bundleIdentifier];
    *(_DWORD *)long long buf = 138413314;
    uint64_t v19 = v3;
    __int16 v20 = 2114;
    uint64_t v21 = v5;
    __int16 v22 = 2114;
    id v23 = v7;
    __int16 v24 = 2114;
    __int16 v25 = v8;
    __int16 v26 = 2114;
    __int16 v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Starting purchase of %{public}@:%{public}@ by %{public}@", buf, 0x34u);
  }
  id v11 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v12 = +[NSArray arrayWithObjects:&v17 count:1];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10040C7CC;
  void v14[3] = &unk_10052D358;
  uint64_t v13 = *(void **)(a1 + 40);
  void v14[4] = *(void *)(a1 + 32);
  id v15 = v13;
  id v16 = *(id *)(a1 + 56);
  [v11 processPurchases:v12 failBatchOnError:0 requestToken:v15 withReplyHandler:v14];
}

void sub_10040C7CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = objc_opt_class();
      uint64_t v21 = *(void *)(a1 + 40);
      int v23 = 138412802;
      __int16 v24 = v20;
      __int16 v25 = 2114;
      uint64_t v26 = v21;
      __int16 v27 = 2114;
      id v28 = v6;
      id v22 = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@]: %{public}@ Purchase completed with error: %{public}@", (uint8_t *)&v23, 0x20u);
    }
    id v9 = [objc_alloc((Class)ASDPurchaseResult) initWithSuccess:0 error:v6];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = *(void *)(a1 + 40);
      int v23 = 138412546;
      __int16 v24 = v10;
      __int16 v25 = 2114;
      uint64_t v26 = v11;
      id v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ Purchase completed successfully", (uint8_t *)&v23, 0x16u);
    }
    uint64_t v13 = [v5 items];
    uint64_t v14 = [v13 firstObject];

    id v15 = objc_alloc((Class)ASDPurchaseResult);
    id v16 = [v14 success];
    uint64_t v17 = [v14 error];
    id v9 = [v15 initWithSuccess:v16 error:v17];
  }
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, id, void *))(v18 + 16))(v18, v9, v19);
}

id sub_10040CAD8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = [v3 propertyValues];
    id v6 = [AccountEventEntity alloc];
    id v7 = [a1 connection];
    uint64_t v8 = [(SQLiteEntity *)v6 initWithPropertyValues:v5 onConnection:v7];

    if (v8)
    {
      id v9 = +[NSNumber numberWithLongLong:[(SQLiteEntity *)v8 persistentID]];
    }
    else
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138543362;
        uint64_t v13 = v4;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to create account event entity with: %{public}@", (uint8_t *)&v12, 0xCu);
      }

      id v9 = 0;
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

id sub_10040CC40(void *a1, void *a2, objc_class *a3, void *a4)
{
  id v6 = a2;
  if (a1)
  {
    id v7 = +[NSMutableOrderedSet orderedSet];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v24 = v6;
    id obj = v6;
    id v8 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v28;
      while (2)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v28 != v10) {
            objc_enumerationMutation(obj);
          }
          int v12 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          uint64_t v14 = [v12 propertyValues];
          id v15 = [a3 alloc];
          id v16 = [a1 connection];
          id v17 = [v15 initWithPropertyValues:v14 onConnection:v16];

          if (!v17)
          {

            goto LABEL_12;
          }
          uint64_t v18 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v17 persistentID]);
          [v7 addObject:v18];
        }
        id v9 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    id v19 = [v7 count];
    id v20 = [obj count];
    if (a4) {
      *a4 = 0;
    }
    if (v19 == v20) {
      uint64_t v21 = v7;
    }
    else {
      uint64_t v21 = 0;
    }
    id v22 = v21;

    id v6 = v24;
  }
  else
  {
    id v22 = 0;
  }

  return v22;
}

id sub_10040CE60(id a1, void *a2, void *a3)
{
  id v4 = a2;
  __int16 v34 = a1;
  if (a1)
  {
    id v32 = +[NSMutableOrderedSet orderedSet];
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v29 = v4;
    id obj = v4;
    id v5 = [obj countByEnumeratingWithState:&v35 objects:v41 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v33 = *(void *)v36;
      id v7 = BaseListener;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v36 != v33) {
            objc_enumerationMutation(obj);
          }
          id v9 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          uint64_t v11 = sub_1003D18F0(v9);
          id v12 = [v11 length];

          if (v12)
          {
            uint64_t v13 = sub_1003D18F0(v9);
            uint64_t v14 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v13];

            id v15 = [v34 connection];
            id v16 = sub_1002FF3DC((uint64_t)&v7[52], v15, v14);

            if ([v16 existsInDatabase]) {
              [v16 deleteFromDatabase];
            }
            id v17 = v7;
            id v18 = objc_alloc(&v7[52]);
            id v19 = [v9 propertyValues];
            id v20 = [v34 connection];
            id v21 = [v18 initWithPropertyValues:v19 onConnection:v20];

            if (!v21)
            {
              int v23 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                long long v28 = sub_1003D18F0(v9);
                *(_DWORD *)long long buf = 138543362;
                __int16 v40 = v28;
                _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Error creating app install metadata entity for bundleID: %{public}@", buf, 0xCu);
              }
              goto LABEL_20;
            }
            id v22 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v21 persistentID]);
            [v32 addObject:v22];

            id v7 = v17;
          }
          else
          {
            uint64_t v14 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              __int16 v40 = v9;
              _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Dropping app install meatadata due to no bundleID: %@", buf, 0xCu);
            }
          }
        }
        id v6 = [obj countByEnumeratingWithState:&v35 objects:v41 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_20:

    id v24 = [v32 count];
    id v25 = [obj count];
    if (a3) {
      *a3 = 0;
    }
    if (v24 == v25) {
      uint64_t v26 = v32;
    }
    else {
      uint64_t v26 = 0;
    }
    a1 = v26;

    id v4 = v29;
  }

  return a1;
}

id sub_10040D20C(void *a1, void *a2, void *a3)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = +[NSMutableOrderedSet orderedSet];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v23 = v4;
    id v6 = v4;
    id v7 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v26;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          uint64_t v13 = [v11 propertyValues];
          uint64_t v14 = [AppMetricsEventEntity alloc];
          id v15 = [a1 connection];
          id v16 = [(SQLiteEntity *)v14 initWithPropertyValues:v13 onConnection:v15];

          if (!v16)
          {

            goto LABEL_12;
          }
          id v17 = +[NSNumber numberWithLongLong:[(SQLiteEntity *)v16 persistentID]];
          [v5 addObject:v17];
        }
        id v8 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    id v18 = [v5 count];
    id v19 = [v6 count];
    if (a3) {
      *a3 = 0;
    }
    if (v18 == v19) {
      id v20 = v5;
    }
    else {
      id v20 = 0;
    }
    id v21 = v20;

    id v4 = v23;
  }
  else
  {
    id v21 = 0;
  }

  return v21;
}

id sub_10040D428(void *a1, void *a2, objc_class *a3, void *a4)
{
  id v5 = a2;
  if (a1)
  {
    long long v30 = +[NSMutableOrderedSet orderedSet];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v25 = v5;
    id obj = v5;
    id v6 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v28 = *(void *)v32;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v32 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void **)(*((void *)&v31 + 1) + 8 * i);
          uint64_t v11 = sub_1003A3938(v9);
          id v12 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v11];

          uint64_t v13 = [a1 connection];
          uint64_t v14 = sub_1002FF3DC((uint64_t)AppMetadataEntity, v13, v12);

          if ([v14 existsInDatabase]) {
            [v14 deleteFromDatabase];
          }
          id v15 = objc_msgSend(v9, "propertyValues", v25);
          id v16 = [a3 alloc];
          id v17 = [a1 connection];
          id v18 = [v16 initWithPropertyValues:v15 onConnection:v17];

          if (!v18)
          {

            goto LABEL_14;
          }
          id v19 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v18 persistentID]);
          [v30 addObject:v19];
        }
        id v7 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_14:

    id v20 = [v30 count];
    id v21 = [obj count];
    if (a4) {
      *a4 = 0;
    }
    if (v20 == v21) {
      id v22 = v30;
    }
    else {
      id v22 = 0;
    }
    id v23 = v22;

    id v5 = v25;
  }
  else
  {
    id v23 = 0;
  }

  return v23;
}

id sub_10040D6E4(id a1, void *a2, void *a3)
{
  id v4 = a2;
  long long v34 = a1;
  if (a1)
  {
    long long v32 = +[NSMutableOrderedSet orderedSet];
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v29 = v4;
    id obj = v4;
    id v5 = [obj countByEnumeratingWithState:&v35 objects:v41 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v33 = *(void *)v36;
      p_vtable = SoftwareUpdateAppMetadata.vtable;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v36 != v33) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          uint64_t v11 = sub_10025AE1C(v9);
          id v12 = [v11 length];

          if (v12)
          {
            uint64_t v13 = sub_10025AE1C(v9);
            uint64_t v14 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v13];

            id v15 = [v34 connection];
            id v16 = sub_1002FF3DC((uint64_t)(p_vtable + 362), v15, v14);

            if ([v16 existsInDatabase]) {
              [v16 deleteFromDatabase];
            }
            id v17 = p_vtable;
            id v18 = objc_alloc((Class)(p_vtable + 362));
            id v19 = [v9 propertyValues];
            id v20 = [v34 connection];
            id v21 = [v18 initWithPropertyValues:v19 onConnection:v20];

            if (!v21)
            {
              id v23 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                uint64_t v28 = sub_10025AE1C(v9);
                *(_DWORD *)long long buf = 138543362;
                __int16 v40 = v28;
                _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Error creating app usage sessionentity for bundleID: %{public}@", buf, 0xCu);
              }
              goto LABEL_20;
            }
            id v22 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v21 persistentID]);
            [v32 addObject:v22];

            p_vtable = v17;
          }
          else
          {
            uint64_t v14 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              __int16 v40 = v9;
              _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Dropping app install meatadata due to no bundleID: %@", buf, 0xCu);
            }
          }
        }
        id v6 = [obj countByEnumeratingWithState:&v35 objects:v41 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_20:

    id v24 = [v32 count];
    id v25 = [obj count];
    if (a3) {
      *a3 = 0;
    }
    if (v24 == v25) {
      long long v26 = v32;
    }
    else {
      long long v26 = 0;
    }
    a1 = v26;

    id v4 = v29;
  }

  return a1;
}

id sub_10040DA90(void *a1, void *a2, void *a3)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = +[NSMutableOrderedSet orderedSet];
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v37 = v4;
    id v6 = v4;
    id v41 = [v6 countByEnumeratingWithState:&v42 objects:v48 count:16];
    if (v41)
    {
      uint64_t v40 = *(void *)v43;
      p_vtable = SQLiteDatabase.vtable;
      id v39 = a1;
      while (2)
      {
        for (i = 0; i != v41; i = (char *)i + 1)
        {
          if (*(void *)v43 != v40) {
            objc_enumerationMutation(v6);
          }
          uint64_t v9 = *(void **)(*((void *)&v42 + 1) + 8 * i);
          uint64_t v11 = sub_1003AC978(v9);
          id v12 = [v11 length];

          if (v12)
          {
            uint64_t v13 = sub_1003AC978(v9);
            uint64_t v14 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v13];

            id v15 = [a1 connection];
            sub_1002FF3DC((uint64_t)(p_vtable + 482), v15, v14);
            id v16 = (id)objc_claimAutoreleasedReturnValue();

            if (v16)
            {
              id v17 = +[NSNumber numberWithUnsignedChar:sub_1003ACE00(v9)];
              [v16 setValue:v17 forProperty:@"event_source"];

              id v18 = sub_1003AC9B0(v9);
              [v16 setValue:v18 forProperty:@"launch_start_time"];

              if (sub_1003ACB08(v9))
              {
                id v19 = +[NSNumber numberWithBool:sub_1003ACB08(v9)];
                [v16 setValue:v19 forProperty:@"is_extension"];
              }
              id v20 = sub_1003ACB70(v9);

              if (v20)
              {
                id v21 = sub_1003ACB70(v9);
                [v16 setValue:v21 forProperty:@"containing_bundle_id"];
              }
              id v22 = sub_1003ACE48(v9);

              if (v22)
              {
                id v23 = sub_1003ACE48(v9);
                [v16 setValue:v23 forProperty:@"payload"];
              }
            }
            else
            {
              id v24 = objc_alloc((Class)(p_vtable + 482));
              id v25 = [v9 propertyValues];
              [a1 connection];
              id v26 = v6;
              uint64_t v28 = v27 = v5;
              id v16 = [v24 initWithPropertyValues:v25 onConnection:v28];

              id v5 = v27;
              id v6 = v26;

              if (!v16)
              {
                long long v30 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                {
                  long long v36 = sub_1003AC978(v9);
                  *(_DWORD *)long long buf = 138543362;
                  id v47 = v36;
                  _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Error creating entity for bundleID: %{public}@", buf, 0xCu);
                }
                id v6 = v26;
                goto LABEL_25;
              }
            }
            id v29 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v16, "persistentID", v37));
            [v5 addObject:v29];

            a1 = v39;
            p_vtable = (void **)(SQLiteDatabase + 24);
          }
          else
          {
            uint64_t v14 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v47 = v9;
              _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Dropping event due to no bundleID: %@", buf, 0xCu);
            }
          }
        }
        id v41 = [v6 countByEnumeratingWithState:&v42 objects:v48 count:16];
        if (v41) {
          continue;
        }
        break;
      }
    }
LABEL_25:

    id v31 = [v5 count];
    id v32 = [v6 count];
    if (a3) {
      *a3 = 0;
    }
    if (v31 == v32) {
      uint64_t v33 = v5;
    }
    else {
      uint64_t v33 = 0;
    }
    id v34 = v33;

    id v4 = v37;
  }
  else
  {
    id v34 = 0;
  }

  return v34;
}

id sub_10040DF84(void *a1, void *a2)
{
  id v3 = a2;
  id v31 = v3;
  if (a1)
  {
    id v4 = v3;
    uint64_t v33 = +[NSMutableOrderedSet orderedSet];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id obj = v4;
    id v5 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v35;
      p_cache = &OBJC_METACLASS___URLRequestProperties.cache;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v35 != v7) {
            objc_enumerationMutation(obj);
          }
          uint64_t v10 = *(void **)(*((void *)&v34 + 1) + 8 * i);
          id v12 = sub_1003AC978(v10);
          id v13 = [v12 length];

          if (v13)
          {
            uint64_t v14 = sub_1003AC978(v10);
            id v15 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v14];

            id v16 = [a1 connection];
            sub_1002FF3DC((uint64_t)(p_cache + 368), v16, v15);
            id v17 = (id)objc_claimAutoreleasedReturnValue();

            if (v17)
            {
              id v18 = +[NSNumber numberWithUnsignedChar:sub_1003ACE00(v10)];
              [v17 setValue:v18 forProperty:@"event_source"];

              id v19 = sub_1003AC9B0(v10);
              [v17 setValue:v19 forProperty:@"launch_start_time"];

              id v20 = sub_1003ACA24(v10);
              [v17 setValue:v20 forProperty:@"launch_end_time"];
            }
            else
            {
              id v21 = objc_alloc((Class)(p_cache + 368));
              id v22 = [v10 propertyValues];
              id v23 = [a1 connection];
              id v17 = [v21 initWithPropertyValues:v22 onConnection:v23];

              if (!v17)
              {
                id v25 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                {
                  long long v30 = sub_1003AC978(v10);
                  *(_DWORD *)long long buf = 138543362;
                  id v39 = v30;
                  _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Error creating entity for bundleID: %{public}@", buf, 0xCu);
                }
                goto LABEL_20;
              }
            }
            id v24 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v17 persistentID]);
            [v33 addObject:v24];

            p_cache = (void **)(&OBJC_METACLASS___URLRequestProperties + 16);
          }
          else
          {
            id v15 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v39 = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Dropping event due to no bundleID: %@", buf, 0xCu);
            }
          }
        }
        id v6 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_20:

    id v26 = [v33 count];
    if (v26 == [obj count]) {
      long long v27 = v33;
    }
    else {
      long long v27 = 0;
    }
    id v28 = v27;
  }
  else
  {
    id v28 = 0;
  }

  return v28;
}

id sub_10040E3A0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = [v3 propertyValues];
    id v6 = [v4 databaseID];
    uint64_t v7 = [LaunchEventSyncMetadataEntity alloc];
    if (v6)
    {
      id v8 = [v4 databaseID];
      uint64_t v9 = [a1 connection];
      uint64_t v10 = [(SQLiteEntity *)v7 initWithPersistentID:v8 onConnection:v9];

      [(SQLiteEntity *)v10 setValuesWithDictionary:v5];
      if (v10)
      {
LABEL_4:
        uint64_t v11 = +[NSNumber numberWithLongLong:[(SQLiteEntity *)v10 persistentID]];
LABEL_9:

        goto LABEL_10;
      }
    }
    else
    {
      id v12 = [a1 connection];
      uint64_t v10 = [(SQLiteEntity *)v7 initWithPropertyValues:v5 onConnection:v12];

      if (v10) {
        goto LABEL_4;
      }
    }
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v15 = 138543362;
      id v16 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unable to launch sync metadata entity with: %{public}@", (uint8_t *)&v15, 0xCu);
    }

    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
LABEL_10:

  return v11;
}

void sub_10040E580()
{
  uint64_t v0 = self;
  id v1 = sub_1003F1EF8((uint64_t)AppDefaultsManager, @"LastWeeklyAnalyticsPostDate");
  uint64_t v2 = v1;
  if (!v1 || ([v1 timeIntervalSinceNow], v3 <= -604800.0))
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v20[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Recording weekly analytics events", (uint8_t *)v20, 2u);
    }

    id v5 = +[NSDate date];
    sub_1003F2074((uint64_t)AppDefaultsManager, v5, @"LastWeeklyAnalyticsPostDate");

    v29[0] = @"AutomaticDownloads";
    id v6 = +[NSNumber numberWithBool:sub_1003F465C()];
    v29[1] = @"AutomaticUpdates";
    v30[0] = v6;
    uint64_t v7 = +[NSNumber numberWithBool:sub_100005CF8()];
    v30[1] = v7;
    id v8 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:2];
    id v9 = [v8 mutableCopy];

    uint64_t v10 = sub_1003F1FD8((uint64_t)AppDefaultsManager, @"BackgroundAssetDownloadsEnabled");
    if (v10) {
      uint64_t v11 = (_UNKNOWN **)v10;
    }
    else {
      uint64_t v11 = &off_10054D218;
    }
    [v9 setObject:v11 forKeyedSubscript:@"BackgroundAssetsDownloads"];
    id v12 = sub_100354F64();
    id v13 = sub_1003553B0(v12);

    if (v13)
    {
      uint64_t v14 = +[ASDCellularSettings settingsForIdentity:v13];
      int v15 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v14 allowAutomaticDownloads]);
      [v9 setObject:v15 forKeyedSubscript:@"CellularAutomaticDownloads"];

      id v16 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v14 cellularDataPrompt]);
      [v9 setObject:v16 forKeyedSubscript:@"CellularDataPrompt"];
    }
    sub_10040E9A0(v0, v9, 40);
    self;
    uint64_t v25 = 0;
    id v26 = &v25;
    uint64_t v27 = 0x2020000000;
    uint64_t v28 = 0;
    uint64_t v21 = 0;
    id v22 = &v21;
    uint64_t v23 = 0x2020000000;
    uint64_t v24 = 0;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_10040EB24;
    v20[3] = &unk_10052D388;
    v20[4] = &v21;
    void v20[5] = &v25;
    +[ApplicationProxy enumerateApplicationsOfType:0 usingBlock:v20];
    v31[0] = @"appStoreAppsCount";
    id v17 = +[NSNumber numberWithUnsignedInteger:v26[3]];
    v31[1] = @"testFlightCount";
    v32[0] = v17;
    id v18 = +[NSNumber numberWithUnsignedInteger:v22[3]];
    v32[1] = v18;
    id v19 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:2];

    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&v25, 8);
    sub_10040E9A0(v0, v19, 19);
  }
}

void sub_10040E974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10040E9A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = self;
  id v6 = sub_10040EAD4(v5, a3);
  id v7 = v4;
  AnalyticsSendEventLazy();
}

void sub_10040EA60(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = self;
  sub_10040EAD4(v5, a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  AnalyticsSendEventLazy();
}

CFStringRef sub_10040EAD4(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 2) > 0x27) {
    return @"com.apple.appstored.repair";
  }
  else {
    return off_10052D3A8[a2 - 2];
  }
}

id sub_10040EB1C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10040EB24(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 isBeta])
  {
    double v3 = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    id v4 = v6;
  }
  else
  {
    unsigned int v5 = [v6 isStoreOriginated];
    id v4 = v6;
    if (!v5) {
      goto LABEL_6;
    }
    double v3 = (void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  ++*v3;
LABEL_6:
}

id sub_10040EBA8()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10040EC4C;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B13F8 != -1) {
    dispatch_once(&qword_1005B13F8, block);
  }
  uint64_t v0 = (void *)qword_1005B13F0;
  return v0;
}

void sub_10040EC4C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B13F0;
  qword_1005B13F0 = (uint64_t)v1;
}

void sub_10040ED38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    unsigned int v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_10040EDE0;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10040EDE0(uint64_t a1)
{
}

void sub_10040EDEC(void *a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_95;
  }
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (v3)
    {
      id v6 = objc_getProperty(v3, v5, 184, 1);
      id v8 = objc_getProperty(v3, v7, 104, 1);
      id Property = objc_getProperty(v3, v9, 112, 1);
      uint64_t v11 = v8;
      id v12 = v6;
    }
    else
    {
      id v8 = 0;
      uint64_t v11 = 0;
      id v6 = 0;
      id v12 = 0;
      id Property = 0;
    }
    id v13 = Property;
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2114;
    long long v119 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] ODR Download requested for %{public}@ : %{public}@", buf, 0x20u);
  }
  id v14 = v3;
  self;
  if (_os_feature_enabled_impl()) {
    unint64_t v15 = -1;
  }
  else {
    unint64_t v15 = 0x80000000;
  }
  id v16 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long v122 = 136446466;
    *(void *)&v122[4] = "-[ODRDownloadManager _hasExceededMaxPinnedResources:]";
    *(_WORD *)&v122[12] = 2048;
    *(void *)&v122[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}s ODRDownloadManager._hasExceededMaxPinnedResources maxPinnedSizeAllowed %lul", v122, 0x16u);
  }

  *(void *)long long v122 = 0;
  *(void *)&v122[8] = v122;
  *(void *)&v122[16] = 0x2020000000;
  uint64_t v123 = 0;
  id v17 = sub_1002393C4();
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = sub_100415B08;
  long long v119 = &unk_100523B10;
  long long v121 = v122;
  id v18 = v14;
  id v120 = v18;
  [v17 readUsingSession:buf];

  if (*(void *)(*(void *)&v122[8] + 24) > v15)
  {
    id v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if (v18) {
        id v85 = objc_getProperty(v18, v20, 184, 1);
      }
      else {
        id v85 = 0;
      }
      id v86 = v85;
      uint64_t v87 = *(void *)(*(void *)&v122[8] + 24);
      *(_DWORD *)uint64_t v112 = 138412802;
      id v113 = v86;
      __int16 v114 = 2048;
      uint64_t v115 = v87;
      __int16 v116 = 2048;
      unint64_t v117 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%@] Pin exceeded maximum pinned assets limit (%lu > %lu)", v112, 0x20u);
    }
    _Block_object_dispose(v122, 8);

    uint64_t v21 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      if (v18) {
        id v23 = objc_getProperty(v18, v22, 184, 1);
      }
      else {
        id v23 = 0;
      }
      id v24 = v23;
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@]: resource request exceeds maximum limit.", buf, 0xCu);
    }
    NSErrorUserInfoKey v110 = NSLocalizedDescriptionKey;
    CFStringRef v111 = @"Request for resource exceeds maximum limit.";
    uint64_t v25 = +[NSDictionary dictionaryWithObjects:&v111 forKeys:&v110 count:1];
    id v26 = +[NSError errorWithDomain:NSCocoaErrorDomain code:4993 userInfo:v25];
    sub_10030E200((uint64_t)v18, v26);

    goto LABEL_95;
  }

  _Block_object_dispose(v122, 8);
  if (!sub_100413B1C((BOOL)a1, v18))
  {
    id v31 = v18;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B13E0);
    uint64_t v33 = (unsigned char *)qword_1005B13E8;
    if (qword_1005B13E8)
    {
      if (v31) {
        id v34 = objc_getProperty(v31, v32, 240, 1);
      }
      else {
        id v34 = 0;
      }
      id v35 = v34;
      uint64_t v33 = [v33 objectForKey:v35];
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B13E0);

    if (v33)
    {
      if (v33[80] & 1) == 0 || v31 && (v31[80])
      {
        id v56 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          if (v31) {
            id v58 = objc_getProperty(v31, v57, 184, 1);
          }
          else {
            id v58 = 0;
          }
          id v59 = v58;
          id v61 = objc_getProperty(v33, v60, 184, 1);
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v59;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v61;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "[%@]: request is a duplicate of [%{public}@]", buf, 0x16u);
        }
        sub_10030E130((uint64_t)v33, v31);
        goto LABEL_94;
      }
      long long v36 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        id v38 = objc_getProperty(v33, v37, 184, 1);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[%@]: Restarting prefetch download as non-discretionary", buf, 0xCu);
      }
      id v40 = objc_getProperty(v33, v39, 96, 1);
      [v40 cancel];
    }
    id v41 = v31;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B13E0);
    long long v43 = (void *)qword_1005B13E8;
    if (!qword_1005B13E8)
    {
      uint64_t v44 = +[NSMapTable strongToStrongObjectsMapTable];
      long long v45 = (void *)qword_1005B13E8;
      qword_1005B13E8 = v44;

      long long v43 = (void *)qword_1005B13E8;
    }
    if (v41) {
      id v46 = objc_getProperty(v41, v42, 240, 1);
    }
    else {
      id v46 = 0;
    }
    id v47 = v46;
    [v43 setObject:v41 forKey:v47];

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B13E0);
    sub_100201B1C((uint64_t)ODRAssetDownload, v41);

    uint64_t v48 = sub_10024E080();
    SEL v49 = (void *)v48;
    if (v41)
    {
      char v50 = sub_10024E3CC(v48, v41[19]);

      if (v50)
      {
        id v52 = objc_getProperty(v41, v51, 216, 1);
        goto LABEL_42;
      }
    }
    else
    {
      char v96 = sub_10024E3CC(v48, 0);

      if (v96)
      {
        id v52 = 0;
LABEL_42:
        id v53 = v52;
        unsigned int v54 = [v53 isFileURL];

        if (v54)
        {
          objc_initWeak((id *)buf, a1);
          v105[0] = _NSConcreteStackBlock;
          v105[1] = 3221225472;
          v105[2] = sub_100414124;
          v105[3] = &unk_10052D568;
          objc_copyWeak(&v107, (id *)buf);
          uint64_t v106 = v41;
          sub_10030ED5C((uint64_t)v106, v105);

          objc_destroyWeak(&v107);
          objc_destroyWeak((id *)buf);
        }
        else
        {
          if (v41 && v41[18]) {
            goto LABEL_79;
          }
          long long v62 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            if (v41) {
              id v64 = objc_getProperty(v41, v63, 184, 1);
            }
            else {
              id v64 = 0;
            }
            id v65 = v64;
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v65;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "[%@] No download size, attempting to look it up", buf, 0xCu);
          }
          dispatch_semaphore_t v67 = [DetermineSizeForURLTask alloc];
          if (v41)
          {
            id v68 = objc_getProperty(v41, v66, 216, 1);
            id v70 = objc_getProperty(v41, v69, 184, 1);
          }
          else
          {
            id v68 = 0;
            id v70 = 0;
          }
          id v71 = v70;
          id v72 = sub_100313E64((id *)&v67->super.super.super.isa, v68, v71);

          if (v41) {
            uint64_t v73 = (v41[10] & 1) != 0 ? 9 : 25;
          }
          else {
            uint64_t v73 = 25;
          }
          sub_10026F2B0((uint64_t)ODRTaskQueue, v72, v73, 1);
          id v75 = v72 ? objc_getProperty(v72, v74, 32, 1) : 0;
          id v76 = v75;

          if (v76)
          {
            BOOL v78 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            {
              if (v41) {
                id v80 = objc_getProperty(v41, v79, 184, 1);
              }
              else {
                id v80 = 0;
              }
              id v82 = v80;
              if (v72) {
                id v83 = objc_getProperty(v72, v81, 32, 1);
              }
              else {
                id v83 = 0;
              }
              id v84 = v83;
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v82;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v84;
              _os_log_error_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "[%@] Error fetching size: %{public}@", buf, 0x16u);
            }
          }
          else
          {
            if (v72) {
              id v88 = objc_getProperty(v72, v77, 72, 1);
            }
            else {
              id v88 = 0;
            }
            id v89 = v88;
            id v90 = [v89 integerValue];
            if (v41) {
              v41[18] = (uint64_t)v90;
            }

            __int16 v91 = sub_1002393C4();
            v103[0] = _NSConcreteStackBlock;
            v103[1] = 3221225472;
            v103[2] = sub_100414190;
            v103[3] = &unk_100521360;
            id v104 = v41;
            [v91 modifyUsingTransaction:v103];

            BOOL v78 = v104;
          }

          if (v41) {
LABEL_79:
          }
            id v92 = objc_getProperty(v41, v55, 200, 1);
          else {
            id v92 = 0;
          }
          id v93 = v92;
          unsigned int v94 = [v93 isCancelled];

          if (v94)
          {
            id v95 = +[NSError errorWithDomain:NSCocoaErrorDomain code:3072 userInfo:0];
            sub_100413C24((uint64_t)a1, v41, v95);
          }
          else
          {
            sub_1004141A0(a1, v41);
          }
        }
LABEL_94:

        goto LABEL_95;
      }
    }
    uint64_t v97 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      if (v41) {
        id v99 = objc_getProperty(v41, v98, 184, 1);
      }
      else {
        id v99 = 0;
      }
      id v100 = v99;
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v100;
      _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "[%@]: There was not enough space available to download the requested resource.", buf, 0xCu);
    }
    NSErrorUserInfoKey v108 = NSLocalizedFailureReasonErrorKey;
    CFStringRef v109 = @"There was not enough space available to download the requested On Demand Resources.";
    long long v101 = +[NSDictionary dictionaryWithObjects:&v109 forKeys:&v108 count:1];
    id v102 = +[NSError errorWithDomain:NSCocoaErrorDomain code:4992 userInfo:v101];
    sub_100413C24((uint64_t)a1, v41, v102);

    goto LABEL_94;
  }
  uint64_t v27 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    if (v18) {
      id v29 = objc_getProperty(v18, v28, 184, 1);
    }
    else {
      id v29 = 0;
    }
    id v30 = v29;
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[%@]: Expected asset already exists.", buf, 0xCu);
  }
  sub_100413C24((uint64_t)a1, v18, 0);
LABEL_95:
}

void sub_10040FAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10040FB04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    SEL v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10040FBC8;
    block[3] = &unk_1005212D8;
    id v9 = v5;
    id v10 = v6;
    uint64_t v11 = a1;
    dispatch_async(v7, block);
  }
}

void sub_10040FBC8(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received request to cancel download requests for %{public}@ - %{public}@", buf, 0x16u);
  }

  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  id v30 = sub_100018488;
  id v31 = sub_100017E00;
  id v32 = 0;
  id v5 = sub_1002393C4();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10040FF10;
  void v23[3] = &unk_100521938;
  uint64_t v25 = buf;
  id v24 = *(id *)(a1 + 32);
  [v5 modifyUsingTransaction:v23];

  sub_10041003C(*(void *)(a1 + 48), *(void **)(*(void *)&buf[8] + 40));
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v28 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v20;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v9);
        uint64_t v11 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          if (v10) {
            id Property = objc_getProperty(v10, v12, 184, 1);
          }
          else {
            id Property = 0;
          }
          id v14 = Property;
          *(_DWORD *)id v26 = 138412290;
          id v27 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@]: Canceling download request", v26, 0xCu);
        }
        if (v10) {
          id v16 = objc_getProperty(v10, v15, 96, 1);
        }
        else {
          id v16 = 0;
        }
        id v17 = v16;
        [v17 cancel];

        sub_100410218(*(void *)(a1 + 48), v10);
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v18 = [v6 countByEnumeratingWithState:&v19 objects:v28 count:16];
      id v7 = v18;
    }
    while (v18);
  }

  _Block_object_dispose(buf, 8);
}

void sub_10040FED8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10040FF10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001F7D9C(v3, *(void **)(a1 + 32));
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        sub_1002484E0((BOOL)v3, *(void **)(*((void *)&v13 + 1) + 8 * (void)v11));
        uint64_t v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v9);
  }

  return 1;
}

id sub_10041003C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = objc_opt_new();
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B13E0);
    if (qword_1005B13E8)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v5 = v3;
      id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v19;
        do
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(void *)v19 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
            uint64_t v11 = (void *)qword_1005B13E8;
            id v12 = sub_100201A2C(v10);
            long long v13 = objc_msgSend(v11, "objectForKey:", v12, (void)v18);

            if (v13)
            {
              [v4 addObject:v13];
              long long v14 = (void *)qword_1005B13E8;
              long long v15 = sub_100201A2C(v10);
              [v14 removeObjectForKey:v15];
            }
          }
          id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v7);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B13E0);
    long long v16 = +[NSArray arrayWithArray:v4];
  }
  else
  {
    long long v16 = 0;
  }

  return v16;
}

void sub_100410218(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = +[NSFileManager defaultManager];
    id v5 = sub_10030E894(v3);
    unsigned int v6 = [v4 fileExistsAtPath:v5];

    if (v6)
    {
      id v7 = sub_10030E894(v3);
      id v18 = 0;
      [v4 removeItemAtPath:v7 error:&v18];
      uint64_t v8 = v18;

      id v9 = ASDLogHandleForCategory();
      uint64_t v10 = v9;
      if (v8)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          if (v3) {
            id Property = objc_getProperty(v3, v11, 184, 1);
          }
          else {
            id Property = 0;
          }
          long long v13 = Property;
          *(_DWORD *)long long buf = 138412546;
          long long v20 = v13;
          __int16 v21 = 2114;
          long long v22 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@]: Error removing download from scratch directory: %{public}@", buf, 0x16u);
LABEL_16:
        }
      }
      else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if (v3) {
          id v17 = objc_getProperty(v3, v16, 184, 1);
        }
        else {
          id v17 = 0;
        }
        long long v13 = v17;
        *(_DWORD *)long long buf = 138412290;
        long long v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@]: Successfully removed download from scratch directory", buf, 0xCu);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v8 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
LABEL_18:

        goto LABEL_19;
      }
      if (v3) {
        id v15 = objc_getProperty(v3, v14, 184, 1);
      }
      else {
        id v15 = 0;
      }
      uint64_t v10 = v15;
      *(_DWORD *)long long buf = 138412290;
      long long v20 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[%@]: No download files to remove, skipping.", buf, 0xCu);
    }

    goto LABEL_18;
  }
LABEL_19:
}

void sub_100410470(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100410534;
    block[3] = &unk_1005212D8;
    id v9 = v5;
    id v10 = v6;
    uint64_t v11 = a1;
    dispatch_async(v7, block);
  }
}

void sub_100410534(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received request to pause download requests for %{public}@ - %{public}@", buf, 0x16u);
  }

  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  id v30 = sub_100018488;
  id v31 = sub_100017E00;
  id v32 = 0;
  id v5 = sub_1002393C4();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100410870;
  void v23[3] = &unk_100521938;
  uint64_t v25 = buf;
  id v24 = *(id *)(a1 + 40);
  [v5 modifyUsingTransaction:v23];

  sub_10041003C(*(void *)(a1 + 48), *(void **)(*(void *)&buf[8] + 40));
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v28 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v20;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v9);
        uint64_t v11 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          if (v10) {
            id Property = objc_getProperty(v10, v12, 184, 1);
          }
          else {
            id Property = 0;
          }
          id v14 = Property;
          *(_DWORD *)id v26 = 138412290;
          id v27 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@]: Pausing download request", v26, 0xCu);
        }
        if (v10) {
          id v16 = objc_getProperty(v10, v15, 96, 1);
        }
        else {
          id v16 = 0;
        }
        id v17 = v16;
        [v17 cancel];

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v18 = [v6 countByEnumeratingWithState:&v19 objects:v28 count:16];
      id v7 = v18;
    }
    while (v18);
  }

  _Block_object_dispose(buf, 8);
}

void sub_100410838(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100410870(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001F7F80(v3, *(void *)(a1 + 32), 1);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        sub_10024972C((uint64_t)v3, 1, *(void **)(*((void *)&v13 + 1) + 8 * (void)v11));
        uint64_t v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v9);
  }

  return 1;
}

void sub_1004109A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100410A68;
    block[3] = &unk_1005212D8;
    id v9 = v5;
    id v10 = v6;
    uint64_t v11 = a1;
    dispatch_async(v7, block);
  }
}

void sub_100410A68(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 40);
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v2;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 2114;
    uint64_t v33 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@]: Received request to resume download requests for %{public}@ - %{public}@", buf, 0x20u);
  }

  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  uint64_t v33 = sub_100018488;
  id v34 = sub_100017E00;
  id v35 = (id)objc_opt_new();
  id v6 = sub_1002393C4();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100410E4C;
  v22[3] = &unk_10052D4F0;
  id v23 = *(id *)(a1 + 40);
  id v24 = *(id *)(a1 + 32);
  id v7 = v2;
  uint64_t v25 = v7;
  id v26 = buf;
  [v6 modifyUsingTransaction:v22];

  if ([*(id *)(*(void *)&buf[8] + 40) count])
  {
    id v8 = [*(id *)(*(void *)&buf[8] + 40) firstObject];
    id v10 = v8;
    if (v8) {
      id Property = objc_getProperty(v8, v9, 128, 1);
    }
    else {
      id Property = 0;
    }
    id v12 = Property;

    long long v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v28 = 138412546;
      id v29 = v7;
      __int16 v30 = 2114;
      id v31 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@]: Recreating promises on resume request for %{public}@", v28, 0x16u);
    }

    sub_100411048(*(void *)(a1 + 48), *(void **)(*(void *)&buf[8] + 40), v12, v7);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v14 = *(id *)(*(void *)&buf[8] + 40);
    id v15 = [v14 countByEnumeratingWithState:&v18 objects:v27 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v19;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v19 != v16) {
            objc_enumerationMutation(v14);
          }
          sub_10040EDEC(*(void **)(a1 + 48), *(void **)(*((void *)&v18 + 1) + 8 * i));
        }
        id v15 = [v14 countByEnumeratingWithState:&v18 objects:v27 count:16];
      }
      while (v15);
    }
  }
  else
  {
    id v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v28 = 138412290;
      id v29 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@]: No paused initial requests found", v28, 0xCu);
    }
  }

  _Block_object_dispose(buf, 8);
}

void sub_100410E14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100410E4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001F7F80(v3, *(void *)(a1 + 32), 1);
  if ([v4 count])
  {
    long long v19 = sub_1003B9318((uint64_t)ODRApplication, *(void **)(a1 + 40));
    id v5 = sub_1001F8948(v3, v19);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v18 = v4;
    id v6 = v4;
    id v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v21;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          sub_10024972C((uint64_t)v3, 0, v11);
          id v12 = sub_10020192C(v11);
          long long v13 = sub_1001F82E8(v3, (uint64_t)v12);

          if (v13) {
            BOOL v14 = v5 == 0;
          }
          else {
            BOOL v14 = 1;
          }
          if (!v14)
          {
            id v15 = sub_10030D834((uint64_t)ODRAssetDownloadRequest, v13, v5, v19, *(void **)(a1 + 48));
            id v16 = sub_1002019E4(v11);
            if (v15) {
              v15[29] = v16;
            }
            objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), "addObject:", v15, v18);
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v8);
    }

    uint64_t v4 = v18;
  }

  return 1;
}

void sub_100411048(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v37 = 0;
    id v10 = sub_100278A30((uint64_t)IXAppInstallCoordinator, v8, (uint64_t)&v37);
    id v11 = v37;
    if (v11)
    {
      id v12 = v11;
      long long v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        id v41 = v9;
        __int16 v42 = 2114;
        id v43 = v8;
        __int16 v44 = 2114;
        id v45 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@]: Error fetching coordinator with ID %{public}@: %{public}@", buf, 0x20u);
      }
    }
    else
    {
      long long v13 = objc_opt_new();
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      id v14 = v7;
      id v15 = [v14 countByEnumeratingWithState:&v33 objects:v39 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v34;
        do
        {
          long long v18 = 0;
          do
          {
            if (*(void *)v34 != v17) {
              objc_enumerationMutation(v14);
            }
            long long v19 = *(void **)(*((void *)&v33 + 1) + 8 * (void)v18);
            if (v19 && v19[29] == 1)
            {
              long long v20 = sub_10030EB08(v19);
              if (v20) {
                [v13 addObject:v20];
              }
            }
            long long v18 = (char *)v18 + 1;
          }
          while (v16 != v18);
          id v16 = [v14 countByEnumeratingWithState:&v33 objects:v39 count:16];
        }
        while (v16);
      }

      id v32 = 0;
      unsigned __int8 v21 = sub_10027A2C8(v10, v13, &v32);
      id v12 = v32;
      if (v12)
      {
        long long v22 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v41 = v9;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[%@]: Error setting initial ODR promises", buf, 0xCu);
        }
      }
      if ((v21 & 1) == 0)
      {
        long long v23 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v41 = v9;
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[%@]: Setting initial ODR promises failed, canceling promises", buf, 0xCu);
        }

        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v13 = v13;
        id v24 = [v13 countByEnumeratingWithState:&v28 objects:v38 count:16];
        if (v24)
        {
          id v25 = v24;
          uint64_t v26 = *(void *)v29;
          do
          {
            id v27 = 0;
            do
            {
              if (*(void *)v29 != v26) {
                objc_enumerationMutation(v13);
              }
              objc_msgSend(*(id *)(*((void *)&v28 + 1) + 8 * (void)v27), "setComplete:", 1, (void)v28);
              id v27 = (char *)v27 + 1;
            }
            while (v25 != v27);
            id v25 = [v13 countByEnumeratingWithState:&v28 objects:v38 count:16];
          }
          while (v25);
        }
      }
    }
  }
}

void sub_1004113C8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100411444;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100411444(uint64_t a1)
{
  uint64_t v1 = sub_100201D2C();
  uint64_t v2 = objc_opt_new();
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v106 objects:v119 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v107;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v107 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v106 + 1) + 8 * i);
        id v9 = sub_1002018F4(v8);
        id v10 = [v2 objectForKeyedSubscript:v9];

        if (!v10) {
          id v10 = objc_opt_new();
        }
        [v10 addObject:v8];
        id v11 = sub_1002018F4(v8);
        [v2 setObject:v10 forKeyedSubscript:v11];
      }
      id v5 = [v3 countByEnumeratingWithState:&v106 objects:v119 count:16];
    }
    while (v5);
  }
  id v64 = v3;

  id v71 = objc_alloc_init(_TtC9appstored6LogKey);
  id v72 = objc_opt_new();
  id v12 = objc_opt_new();
  id v74 = objc_opt_new();
  uint64_t v73 = objc_opt_new();
  id v65 = +[LSDatabaseContext sharedDatabaseContext];
  unsigned int v66 = [v65 startAccessingReturningError:0];
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  id v70 = v2;
  id obj = [v2 allKeys];
  id v13 = [obj countByEnumeratingWithState:&v102 objects:v118 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v103;
    do
    {
      for (j = 0; j != v14; j = (char *)j + 1)
      {
        if (*(void *)v103 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v102 + 1) + 8 * (void)j);
        long long v18 = sub_1003B9318((uint64_t)ODRApplication, v17);
        long long v19 = sub_1002393C4();
        v93[0] = _NSConcreteStackBlock;
        v93[1] = 3221225472;
        v93[2] = sub_100411D68;
        v93[3] = &unk_10052D518;
        id v94 = v18;
        id v95 = v70;
        char v96 = v17;
        uint64_t v97 = v71;
        id v98 = v74;
        id v99 = v72;
        id v100 = v12;
        id v101 = v73;
        id v20 = v18;
        [v19 modifyUsingTransaction:v93];
      }
      id v14 = [obj countByEnumeratingWithState:&v102 objects:v118 count:16];
    }
    while (v14);
  }

  if (v66) {
    [v65 stopAccessing];
  }
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  id v21 = v12;
  id v22 = [v21 countByEnumeratingWithState:&v89 objects:v117 count:16];
  if (v22)
  {
    id v24 = v22;
    uint64_t v25 = *(void *)v90;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v90 != v25) {
          objc_enumerationMutation(v21);
        }
        uint64_t v27 = *(void *)(*((void *)&v89 + 1) + 8 * (void)v26);
        if (v27) {
          id Property = objc_getProperty(*(id *)(*((void *)&v89 + 1) + 8 * (void)v26), v23, 104, 1);
        }
        else {
          id Property = 0;
        }
        id v29 = Property;
        long long v30 = [v74 objectForKeyedSubscript:v29];

        if (!v30) {
          [v72 addObject:v27];
        }
        uint64_t v26 = (char *)v26 + 1;
      }
      while (v24 != v26);
      id v31 = [v21 countByEnumeratingWithState:&v89 objects:v117 count:16];
      id v24 = v31;
    }
    while (v31);
  }

  [v21 removeAllObjects];
  id v63 = v21;
  if (![v72 count])
  {
    id v43 = (id)objc_opt_new();
    char v50 = sub_1002C9414();
    id v80 = 0;
    id v51 = [v43 contentsOfDirectoryAtPath:v50 error:&v80];
    id v52 = v80;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    id obja = v51;
    id v53 = [obja countByEnumeratingWithState:&v76 objects:v110 count:16];
    if (v53)
    {
      id v54 = v53;
      uint64_t v55 = *(void *)v77;
      do
      {
        for (k = 0; k != v54; k = (char *)k + 1)
        {
          id v57 = v52;
          if (*(void *)v77 != v55) {
            objc_enumerationMutation(obja);
          }
          id v58 = *(_TtC9appstored6LogKey **)(*((void *)&v76 + 1) + 8 * (void)k);
          id v59 = [v50 stringByAppendingPathComponent:v58];
          id v75 = v52;
          unsigned __int8 v60 = [v43 removeItemAtPath:v59 error:&v75];
          id v52 = v75;

          id v61 = ASDLogHandleForCategory();
          long long v62 = v61;
          if ((v60 & 1) != 0 || !v52)
          {
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              __int16 v114 = v58;
              _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Successfully removed %{public}@ from the scratch directory", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543618;
            __int16 v114 = v58;
            __int16 v115 = 2114;
            id v116 = v52;
            _os_log_error_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "Failed to remove %{public}@ from the scratch directory: %{public}@", buf, 0x16u);
          }
        }
        id v54 = [obja countByEnumeratingWithState:&v76 objects:v110 count:16];
      }
      while (v54);
    }

    goto LABEL_66;
  }
  id v32 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    id v33 = [v72 count];
    *(_DWORD *)long long buf = 138543618;
    __int16 v114 = v71;
    __int16 v115 = 2048;
    id v116 = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Found %lu download(s) to resume", buf, 0x16u);
  }

  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v34 = [v73 allKeys];
  id v35 = [v34 countByEnumeratingWithState:&v85 objects:v112 count:16];
  if (v35)
  {
    id v36 = v35;
    uint64_t v37 = *(void *)v86;
    do
    {
      for (m = 0; m != v36; m = (char *)m + 1)
      {
        if (*(void *)v86 != v37) {
          objc_enumerationMutation(v34);
        }
        SEL v39 = *(void **)(*((void *)&v85 + 1) + 8 * (void)m);
        id v40 = objc_alloc_init(_TtC9appstored6LogKey);
        id v41 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          __int16 v114 = v40;
          __int16 v115 = 2114;
          id v116 = v39;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "[%@]: Recreating promises for %{public}@", buf, 0x16u);
        }

        __int16 v42 = [v73 objectForKeyedSubscript:v39];
        sub_100411048(*(void *)(a1 + 32), v42, v39, v40);
      }
      id v36 = [v34 countByEnumeratingWithState:&v85 objects:v112 count:16];
    }
    while (v36);
  }

  long long v84 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v81 = 0u;
  id v43 = v72;
  id v44 = [v43 countByEnumeratingWithState:&v81 objects:v111 count:16];
  if (!v44)
  {
LABEL_66:
    uint64_t v48 = v63;
    id v47 = v64;
    goto LABEL_67;
  }
  id v45 = v44;
  uint64_t v46 = *(void *)v82;
  uint64_t v48 = v63;
  id v47 = v64;
  do
  {
    for (n = 0; n != v45; n = (char *)n + 1)
    {
      if (*(void *)v82 != v46) {
        objc_enumerationMutation(v43);
      }
      sub_10040EDEC(*(void **)(a1 + 32), *(void **)(*((void *)&v81 + 1) + 8 * (void)n));
    }
    id v45 = [v43 countByEnumeratingWithState:&v81 objects:v111 count:16];
  }
  while (v45);
LABEL_67:
}

uint64_t sub_100411D68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1001F8948(v3, *(void **)(a1 + 32));
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v5 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
  id v35 = [v5 countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v35)
  {
    uint64_t v7 = *(void *)v38;
    long long v34 = (id *)(a1 + 72);
    id v32 = (id *)(a1 + 80);
    *(void *)&long long v6 = 138543618;
    long long v31 = v6;
    uint64_t v33 = *(void *)v38;
    do
    {
      for (i = 0; i != v35; i = (char *)i + 1)
      {
        if (*(void *)v38 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        if (sub_10020199C(v9))
        {
          uint64_t v36 = 0;
          id v10 = objc_alloc((Class)LSApplicationRecord);
          id v11 = sub_1002018F4(v9);
          id v12 = [v10 initWithBundleIdentifier:v11 allowPlaceholder:0 error:&v36];

          if (!v12)
          {
            uint64_t v25 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              id v29 = sub_1002018F4(v9);
              *(_DWORD *)long long buf = v31;
              __int16 v42 = v29;
              __int16 v43 = 2114;
              uint64_t v44 = v36;
              _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Error retrieving application record for %{public}@: %{public}@", buf, 0x16u);
            }
            goto LABEL_34;
          }
          if ([v12 isPlaceholder]) {
            goto LABEL_34;
          }
          if (sub_1002019E4(v9) != (id)1)
          {
            sub_1002484E0((BOOL)v3, v9);
LABEL_34:

            continue;
          }
        }
        id v13 = sub_10020192C(v9);
        id v14 = sub_1001F82E8(v3, (uint64_t)v13);

        if (v14) {
          BOOL v15 = v4 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
          sub_100201E94((uint64_t)ODRAssetDownload, v9);
        }
        else
        {
          uint64_t v16 = sub_10030D834((uint64_t)ODRAssetDownloadRequest, v14, v4, *(void **)(a1 + 32), *(void **)(a1 + 56));
          uint64_t v17 = (void *)v16;
          if (v16)
          {
            *(void *)(v16 + 232) = sub_1002019E4(v9);
            if (sub_1002019E4(v9) == (id)1)
            {
              long long v18 = *(void **)(a1 + 64);
              sub_1002018F4(v9);
              long long v19 = v5;
              id v20 = v4;
              uint64_t v21 = a1;
              long long v23 = v22 = v3;
              [v18 setObject:&__kCFBooleanTrue forKeyedSubscript:v23];

              id v3 = v22;
              a1 = v21;
              id v4 = v20;
              id v5 = v19;
              uint64_t v7 = v33;
              id v24 = v34;
            }
            else
            {
              id v26 = sub_1002019E4(v9);
              id v24 = v34;
              if (v26 == (id)2) {
                id v24 = v32;
              }
            }
            objc_msgSend(*v24, "addObject:", v17, v31);
            uint64_t v27 = sub_100201964(v9);
            if (v27 && sub_1002019E4(v9) == (id)1)
            {
              long long v28 = [*(id *)(a1 + 88) objectForKeyedSubscript:v27];
              if (!v28) {
                long long v28 = objc_opt_new();
              }
              [v28 addObject:v17];
              [*(id *)(a1 + 88) setObject:v28 forKeyedSubscript:v27];
            }
          }
        }
      }
      id v35 = [v5 countByEnumeratingWithState:&v37 objects:v45 count:16];
    }
    while (v35);
  }

  return 1;
}

void sub_100412130(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = *(NSObject **)(a1 + 16);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_10041221C;
    void v11[3] = &unk_100522420;
    id v12 = v7;
    id v13 = v8;
    uint64_t v14 = a1;
    id v15 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_10041221C(void **a1)
{
  uint64_t v1 = sub_1003B9318((uint64_t)ODRApplication, a1[4]);
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = a1[4];
    id v5 = (uint64_t (*)(uint64_t, uint64_t))a1[5];
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v2;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 2114;
    long long v82 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@]: Checking for prefetch downloads for %{public}@ - %{public}@", buf, 0x20u);
  }

  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  long long v82 = sub_100018488;
  long long v83 = sub_100017E00;
  id v84 = (id)objc_opt_new();
  uint64_t v67 = 0;
  id v68 = &v67;
  uint64_t v69 = 0x2020000000;
  uint64_t v70 = 0;
  long long v6 = sub_1002393C4();
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_100412B1C;
  v61[3] = &unk_10052D540;
  id v62 = a1[5];
  id v38 = v1;
  id v63 = v38;
  newCFBooleanRef Value = v2;
  id v64 = newValue;
  id v65 = &v67;
  unsigned int v66 = buf;
  [v6 readUsingSession:v61];

  id v7 = sub_100354F64();
  uint64_t v60 = 0;
  long long v39 = sub_1003553B0(v7);
  long long v37 = (__CFString *)0;

  if (v39)
  {
    id v8 = sub_10023E9B0((uint64_t)ExpensiveNetworkEvaluator, v39);
    uint64_t v9 = objc_opt_new();
    id v11 = (void *)v9;
    if (v9)
    {
      *(unsigned char *)(v9 + _Block_object_dispose(&STACK[0x220], 8) = 1;
      *(void *)(v9 + 16) = v68[3];
      objc_setProperty_atomic((id)v9, v10, newValue, 32);
    }
    unint64_t v12 = sub_10023EAA0((uint64_t)v8, v11) & 0xFFFFFFFFFFFFFFFDLL;
    BOOL v13 = v12 == 1;
    uint64_t v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v15 = @"Not allowing";
      uint64_t v16 = (void *)v68[3];
      if (v12 == 1) {
        CFStringRef v15 = @"Allowing";
      }
      *(_DWORD *)id v72 = 138412802;
      uint64_t v73 = newValue;
      __int16 v74 = 2114;
      CFStringRef v75 = v15;
      __int16 v76 = 2048;
      long long v77 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@]: %{public}@ cellular for prefetch downloads with total size of %llu", v72, 0x20u);
    }
  }
  else
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id v72 = 138412546;
      uint64_t v73 = newValue;
      __int16 v74 = 2114;
      CFStringRef v75 = v37;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@]: Not allowing cellular for prefetch downloads because no identity was found: %{public}@", v72, 0x16u);
    }
    BOOL v13 = 0;
  }

  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v17 = *(id *)(*(void *)&buf[8] + 40);
  id v18 = [v17 countByEnumeratingWithState:&v56 objects:v80 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v57;
    do
    {
      for (i = 0; i != v18; i = (char *)i + 1)
      {
        if (*(void *)v57 != v19) {
          objc_enumerationMutation(v17);
        }
        sub_10030E6FC(*(id **)(*((void *)&v56 + 1) + 8 * i), v13);
      }
      id v18 = [v17 countByEnumeratingWithState:&v56 objects:v80 count:16];
    }
    while (v18);
  }

  uint64_t v21 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v22 = (const __CFString *)[*(id *)(*(void *)&buf[8] + 40) count];
    long long v23 = sub_1003B9E28((uint64_t)v38);
    id v24 = a1[5];
    *(_DWORD *)id v72 = 138413058;
    uint64_t v73 = newValue;
    __int16 v74 = 2048;
    CFStringRef v75 = v22;
    __int16 v76 = 2114;
    long long v77 = v23;
    __int16 v78 = 2114;
    long long v79 = v24;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@]: Starting %lu prefetch downloads for %{public}@ - %{public}@", v72, 0x2Au);
  }
  uint64_t v25 = dispatch_group_create();
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id obj = *(id *)(*(void *)&buf[8] + 40);
  id v26 = [obj countByEnumeratingWithState:&v52 objects:v71 count:16];
  if (v26)
  {
    uint64_t v42 = *(void *)v53;
    do
    {
      uint64_t v27 = 0;
      do
      {
        if (*(void *)v53 != v42) {
          objc_enumerationMutation(obj);
        }
        uint64_t v28 = *(void *)(*((void *)&v52 + 1) + 8 * (void)v27);
        dispatch_group_enter(v25);
        if (v28) {
          *(unsigned char *)(v28 + 80) = 1;
        }
        id v29 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          if (v28)
          {
            long long v31 = (_TtC9appstored6LogKey *)objc_getProperty((id)v28, v30, 184, 1);
            CFStringRef v32 = *(const __CFString **)(v28 + 176);
          }
          else
          {
            long long v31 = 0;
            CFStringRef v32 = 0;
          }
          *(_DWORD *)id v72 = 138412546;
          uint64_t v73 = v31;
          __int16 v74 = 2048;
          CFStringRef v75 = v32;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[%@]: Starting prefetch download with priority %f", v72, 0x16u);
        }
        objc_initWeak((id *)v72, (id)v28);
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472;
        v49[2] = sub_100412CDC;
        v49[3] = &unk_10052D568;
        objc_copyWeak(&v51, (id *)v72);
        uint64_t v33 = v25;
        char v50 = v33;
        if (v28) {
          [*(id *)(v28 + 256) addErrorBlock:v49];
        }
        v46[0] = _NSConcreteStackBlock;
        v46[1] = 3221225472;
        void v46[2] = sub_100412DF0;
        v46[3] = &unk_10052D590;
        objc_copyWeak(&v48, (id *)v72);
        id v47 = v33;
        if (v28) {
          [*(id *)(v28 + 256) addSuccessBlock:v46];
        }
        sub_10040EDEC(a1[6], (void *)v28);

        objc_destroyWeak(&v48);
        objc_destroyWeak(&v51);
        objc_destroyWeak((id *)v72);
        uint64_t v27 = (char *)v27 + 1;
      }
      while (v26 != v27);
      id v34 = [obj countByEnumeratingWithState:&v52 objects:v71 count:16];
      id v26 = v34;
    }
    while (v34);
  }

  id v35 = dispatch_get_global_queue(21, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100412EE0;
  block[3] = &unk_100521AE0;
  id v36 = a1[7];
  void block[4] = a1[6];
  id v45 = v36;
  dispatch_group_notify(v25, v35, block);

  _Block_object_dispose(&v67, 8);
  _Block_object_dispose(buf, 8);
}

void sub_100412A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose((const void *)(v63 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100412B1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1001F7F80(v3, *(void *)(a1 + 32), 2);
  if ([v4 count])
  {
    id v5 = sub_1001F8948(v3, *(void **)(a1 + 40));
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    CFStringRef v15 = v4;
    id v6 = v4;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = sub_10020192C(*(void **)(*((void *)&v16 + 1) + 8 * i));
          unint64_t v12 = sub_1001F82E8(v3, (uint64_t)v11);

          uint64_t v13 = sub_10030D834((uint64_t)ODRAssetDownloadRequest, v12, v5, *(void **)(a1 + 40), *(void **)(a1 + 48));
          uint64_t v14 = (void *)v13;
          if (v13)
          {
            *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += *(void *)(v13 + 144);
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v13];
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v8);
    }

    id v4 = v15;
  }
}

void sub_100412CDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (WeakRetained) {
      id Property = objc_getProperty(WeakRetained, v6, 184, 1);
    }
    else {
      id Property = 0;
    }
    id v8 = Property;
    int v9 = 138412546;
    id v10 = v8;
    __int16 v11 = 2114;
    id v12 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%@]: Failed prefetch download with error: %{public}@", (uint8_t *)&v9, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100412DF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (WeakRetained) {
      id Property = objc_getProperty(WeakRetained, v4, 184, 1);
    }
    else {
      id Property = 0;
    }
    id v6 = Property;
    int v7 = 138412290;
    id v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%@]: Successfully finished prefetch download", (uint8_t *)&v7, 0xCu);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100412EE0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100412F74;
    block[3] = &unk_100521F40;
    id v4 = v1;
    dispatch_async(v2, block);
  }
}

uint64_t sub_100412F74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100412F84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100413028;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_100413028(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v3, 64, 1);
    }
    id v6 = Property;
    id v7 = *(id *)(a1 + 32);
    if (v7) {
      id v7 = objc_getProperty(v7, v5, 24, 1);
    }
    id v9 = v7;
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 40, 1);
    }
    __int16 v11 = (uint64_t (*)(uint64_t, uint64_t))v10;
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2114;
    long long v82 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@]: Checking for initial downloads for %{public}@ - %{public}@", buf, 0x20u);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12) {
    int v13 = *(unsigned char *)(v12 + 16) & 1;
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = ASDLogHandleForCategory();
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v15)
    {
      id v17 = *(id *)(a1 + 32);
      if (v17) {
        id v17 = objc_getProperty(v17, v16, 64, 1);
      }
      id v18 = v17;
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@]: Skipping manifest fetch for App Review install", buf, 0xCu);
    }
  }
  else
  {
    if (v15)
    {
      id v19 = *(id *)(a1 + 32);
      if (v19) {
        id v19 = objc_getProperty(v19, v16, 64, 1);
      }
      id v20 = v19;
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@]: Fetching manifest", buf, 0xCu);
    }
    uint64_t v21 = *(void *)(a1 + 40);
    uint64_t v14 = *(id *)(a1 + 32);
    if (v21)
    {
      CFStringRef v22 = sub_10024E080();
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_100415BAC;
      long long v82 = (uint64_t (*)(uint64_t, uint64_t))&unk_100521388;
      long long v83 = v14;
      sub_10024F3C4((uint64_t)v22, buf);
    }
  }

  uint64_t v23 = *(void *)(a1 + 40);
  id v24 = (void **)*(id *)(a1 + 32);
  if (v23)
  {
    uint64_t v68 = 0;
    uint64_t v69 = &v68;
    uint64_t v70 = 0x3032000000;
    id v71 = sub_100018488;
    id v72 = sub_100017E00;
    id v73 = (id)objc_opt_new();
    uint64_t v25 = sub_10029FA90(v24);
    if (v24) {
      id v26 = (void **)v24[9];
    }
    else {
      id v26 = 0;
    }
    id v27 = v25;
    uint64_t v28 = 0;
    __int16 v74 = 0;
    uint64_t v75 = (uint64_t)&v74;
    uint64_t v76 = 0x3032000000;
    long long v77 = sub_100018488;
    __int16 v78 = sub_100017E00;
    long long v79 = 0;
    if ((unint64_t)v26 <= 2)
    {
      id v29 = sub_1002393C4();
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1004164A8;
      long long v82 = (uint64_t (*)(uint64_t, uint64_t))&unk_10052D630;
      id v84 = &v74;
      long long v85 = v26;
      long long v83 = (void (*)(uint64_t))v27;
      [v29 readUsingSession:buf];

      uint64_t v28 = *(void **)(v75 + 40);
    }
    id v30 = v28;
    _Block_object_dispose(&v74, 8);

    if (v24) {
      unint64_t v31 = (unint64_t)v24[9];
    }
    else {
      unint64_t v31 = 0;
    }
    id v32 = v27;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    long long v82 = sub_100018488;
    long long v83 = sub_100017E00;
    id v84 = 0;
    if ((v31 | 2) == 2)
    {
      uint64_t v33 = sub_1002393C4();
      __int16 v74 = _NSConcreteStackBlock;
      uint64_t v75 = 3221225472;
      uint64_t v76 = (uint64_t)sub_100416518;
      long long v77 = (uint64_t (*)(uint64_t, uint64_t))&unk_100523B10;
      long long v79 = buf;
      __int16 v78 = (void (*)(uint64_t))v32;
      [v33 readUsingSession:&v74];

      id v34 = *(void **)(*(void *)&buf[8] + 40);
    }
    else
    {
      id v34 = 0;
    }
    id v35 = v34;
    _Block_object_dispose(buf, 8);

    if ([v30 count] || objc_msgSend(v35, "count"))
    {
      id v36 = sub_1002393C4();
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1004157E4;
      long long v82 = (uint64_t (*)(uint64_t, uint64_t))&unk_10052D5E0;
      long long v83 = (void (*)(uint64_t))v32;
      id v84 = (void ***)v30;
      long long v85 = v24;
      long long v87 = &v68;
      id v86 = v35;
      [v36 modifyUsingTransaction:buf];
    }
    long long v37 = +[NSArray arrayWithArray:v69[5]];

    _Block_object_dispose(&v68, 8);
  }
  else
  {
    long long v37 = 0;
  }

  id v38 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    id v40 = *(id *)(a1 + 32);
    if (v40) {
      id v40 = objc_getProperty(v40, v39, 64, 1);
    }
    id v41 = v40;
    id v42 = [v37 count];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v41;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v42;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "[%@]: Found %ld initial download(s)", buf, 0x16u);
  }
  id v44 = *(id *)(a1 + 32);
  uint64_t v45 = *(void *)(a1 + 40);
  if (v44) {
    id v44 = objc_getProperty(v44, v43, 40, 1);
  }
  id v47 = v44;
  id v48 = *(id *)(a1 + 32);
  if (v48) {
    id v48 = objc_getProperty(v48, v46, 64, 1);
  }
  id v49 = v48;
  sub_100411048(v45, v37, v47, v49);

  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v50 = v37;
  id v51 = [v50 countByEnumeratingWithState:&v64 objects:v80 count:16];
  if (v51)
  {
    uint64_t v52 = *(void *)v65;
    do
    {
      long long v53 = 0;
      do
      {
        if (*(void *)v65 != v52) {
          objc_enumerationMutation(v50);
        }
        long long v54 = *(void **)(*((void *)&v64 + 1) + 8 * (void)v53);
        long long v55 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          id v57 = *(id *)(a1 + 32);
          if (v57) {
            id v57 = objc_getProperty(v57, v56, 64, 1);
          }
          id v59 = v57;
          if (v54)
          {
            id v60 = objc_getProperty(v54, v58, 184, 1);
            uint64_t v61 = a1;
          }
          else
          {
            uint64_t v61 = a1;
            id v60 = 0;
          }
          id v62 = v60;
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v59;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v62;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "[%@]: Requesting download %{public}@", buf, 0x16u);

          a1 = v61;
        }

        sub_10040EDEC(*(void **)(a1 + 40), v54);
        long long v53 = (char *)v53 + 1;
      }
      while (v51 != v53);
      id v63 = [v50 countByEnumeratingWithState:&v64 objects:v80 count:16];
      id v51 = v63;
    }
    while (v63);
  }
}

void sub_1004138A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1004138E8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = objc_opt_new();
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B13E0);
    if (qword_1005B13E8)
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      uint64_t v2 = objc_msgSend((id)qword_1005B13E8, "objectEnumerator", 0);
      id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3)
      {
        id v4 = v3;
        uint64_t v5 = *(void *)v9;
        do
        {
          for (i = 0; i != v4; i = (char *)i + 1)
          {
            if (*(void *)v9 != v5) {
              objc_enumerationMutation(v2);
            }
            [v1 addObject:*(void *)(*((void *)&v8 + 1) + 8 * i)];
          }
          id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
        }
        while (v4);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B13E0);
  }
  else
  {
    uint64_t v1 = 0;
  }
  return v1;
}

id sub_100413A2C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = a2;
    id v3 = sub_100297A88(v2);
    id v4 = sub_100297AC0(v2);

    id v5 = +[NSString stringWithFormat:@"%@-%@", v3, v4];
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B13E0);
    if (v5) {
      BOOL v6 = qword_1005B13E8 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      id v7 = 0;
    }
    else
    {
      id v7 = [(id)qword_1005B13E8 objectForKey:v5];
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B13E0);
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

BOOL sub_100413B1C(BOOL a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v9 = 0;
    long long v10 = &v9;
    uint64_t v11 = 0x2020000000;
    char v12 = 0;
    id v4 = sub_10024E080();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1004148B4;
    v6[3] = &unk_100524F38;
    id v7 = v3;
    long long v8 = &v9;
    sub_10024F3C4((uint64_t)v4, v6);

    a1 = *((unsigned char *)v10 + 24) != 0;
    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_100413C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100413C24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v8 = v6;
  if (a1)
  {
    if (v6)
    {
      sub_100410218(a1, v5);
      sub_10030E200((uint64_t)v5, v8);
    }
    else
    {
      if (v5)
      {
        id v9 = objc_getProperty(v5, v7, 200, 1);
        id Property = objc_getProperty(v5, v10, 200, 1);
      }
      else
      {
        id v9 = 0;
        id Property = 0;
      }
      id v12 = Property;
      objc_msgSend(v9, "setCompletedUnitCount:", objc_msgSend(v12, "completedUnitCount"));

      int v13 = v5;
      v44[0] = 0;
      v44[1] = v44;
      v44[2] = 0x2020000000;
      char v45 = 1;
      uint64_t v14 = sub_10024E080();
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_10041611C;
      id v47 = &unk_100524F38;
      uint64_t v15 = v13;
      id v48 = v15;
      id v49 = v44;
      sub_10024F3C4((uint64_t)v14, buf);

      _Block_object_dispose(v44, 8);
      sub_10030E34C((uint64_t)v15);
      uint64_t v16 = sub_1002C5D90();
      uint64_t v17 = v16;
      if (v16) {
        sub_1002C73F4(v16, 1, 0, 10.0);
      }
    }
    id v19 = objc_opt_new();
    if (v5) {
      id v20 = objc_getProperty(v5, v18, 104, 1);
    }
    else {
      id v20 = 0;
    }
    id v21 = v20;
    [v19 setObject:v21 forKeyedSubscript:@"bundleID"];

    if (v5) {
      uint64_t v22 = v5[29];
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = +[NSNumber numberWithInteger:v22];
    [v19 setObject:v23 forKeyedSubscript:@"odrType"];

    if (v5) {
      uint64_t v24 = v5[18];
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = +[NSNumber numberWithInteger:v24];
    [v19 setObject:v25 forKeyedSubscript:@"downloadSize"];

    if (v5) {
      BOOL v26 = (*((unsigned char *)v5 + 84) & 1) == 0;
    }
    else {
      BOOL v26 = 1;
    }
    id v27 = +[NSNumber numberWithInt:v26];
    [v19 setObject:v27 forKeyedSubscript:@"isFileBased"];

    if (v5) {
      uint64_t v28 = *((unsigned char *)v5 + 83) & 1;
    }
    else {
      uint64_t v28 = 0;
    }
    id v29 = +[NSNumber numberWithBool:v28];
    [v19 setObject:v29 forKeyedSubscript:@"isStoreBased"];

    if (v8)
    {
      id v30 = sub_1003697F0(v8);
      [v19 setObject:v30 forKeyedSubscript:@"error"];

      unint64_t v31 = &__kCFBooleanFalse;
    }
    else
    {
      unint64_t v31 = &__kCFBooleanTrue;
    }
    [v19 setObject:v31 forKeyedSubscript:@"result"];
    sub_10040E9A0((uint64_t)Analytics, v19, 20);
    id v32 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      if (v5)
      {
        id v39 = objc_getProperty(v5, v33, 184, 1);
        id v41 = objc_getProperty(v5, v40, 200, 1);
        id v42 = v39;
      }
      else
      {
        id v39 = 0;
        id v42 = 0;
        id v41 = 0;
      }
      id v43 = v41;
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v39;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v43;
      _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[%@] Download made progress: %{public}@", buf, 0x16u);
    }
    id v34 = v5;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B13E0);
    id v36 = (void *)qword_1005B13E8;
    if (qword_1005B13E8)
    {
      if (v5) {
        id v37 = objc_getProperty(v34, v35, 240, 1);
      }
      else {
        id v37 = 0;
      }
      id v38 = v37;
      [v36 removeObjectForKey:v38];
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B13E0);
    sub_100201F5C((uint64_t)ODRAssetDownload, v34);
  }
}

void sub_100414104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100414124(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  sub_100413C24((uint64_t)WeakRetained, *(void **)(a1 + 32), v4);
}

BOOL sub_100414190(uint64_t a1, void *a2)
{
  return sub_10024A000(a2, *(void **)(a1 + 32));
}

void sub_1004141A0(void *a1, void *a2)
{
  id v2 = a2;
  id v3 = sub_10030E894(v2);
  if (v3)
  {
    id v4 = objc_opt_new();
    *(void *)&long long v66 = 0;
    *((void *)&v66 + 1) = &v66;
    uint64_t v67 = 0x3032000000;
    uint64_t v68 = sub_100018488;
    uint64_t v69 = sub_100017E00;
    id v70 = 0;
    id obj = 0;
    unsigned int v5 = [v4 createDirectoryAtPath:v3 withIntermediateDirectories:1 attributes:0 error:&obj];
    objc_storeStrong(&v70, obj);
    if (!v5)
    {
      id v37 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        if (v2) {
          id Property = objc_getProperty(v2, v38, 184, 1);
        }
        else {
          id Property = 0;
        }
        id v40 = Property;
        uint64_t v41 = *(void *)(*((void *)&v66 + 1) + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v61 = (uint64_t)v40;
        __int16 v62 = 2114;
        uint64_t v63 = v41;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "[%@] Error creating path for download: %{public}@", buf, 0x16u);
      }
      sub_100413C24((uint64_t)a1, v2, *(void **)(*((void *)&v66 + 1) + 40));
      goto LABEL_36;
    }
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (v2)
      {
        id v8 = objc_getProperty(v2, v7, 184, 1);
        uint64_t v9 = v2[18];
        uint64_t v10 = v2[19];
        uint64_t v11 = (uint64_t)v8;
      }
      else
      {
        uint64_t v9 = 0;
        id v8 = 0;
        uint64_t v11 = 0;
        uint64_t v10 = 0;
      }
      *(_DWORD *)long long buf = 138412802;
      uint64_t v61 = v11;
      __int16 v62 = 2048;
      uint64_t v63 = v9;
      __int16 v64 = 2048;
      uint64_t v65 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Starting ODR Download with download size: %lu and expected disk usage: %lld", buf, 0x20u);
    }
    id v12 = sub_10030EB74((uint64_t)v2);
    int v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      id v44 = [0 unsignedLongLongValue];
      *(_DWORD *)long long buf = 134218240;
      uint64_t v61 = 8 * (void)v44;
      __int16 v62 = 1024;
      LODWORD(v63) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Rate Limit : %{bitrate}llu (Ethernet : %{BOOL}d)", buf, 0x12u);
    }

    if (v12) {
      objc_setProperty_atomic(v12, v14, 0, 40);
    }
    char v45 = sub_10030E8F4((uint64_t)v2);
    uint64_t v15 = sub_10027DFA0((id *)[ODRZipStreamDataConsumer alloc], v45);
    uint64_t v17 = v15;
    if (v15) {
      objc_storeWeak(v15 + 5, v2);
    }
    if (v12) {
      objc_setProperty_atomic(v12, v16, v17, 64);
    }
    if (v2)
    {
      uint64_t v18 = 5;
      if ((*((unsigned char *)v2 + 83) & 1) == 0) {
        uint64_t v18 = 6;
      }
      if (!v12) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v18 = 6;
      if (!v12) {
        goto LABEL_20;
      }
    }
    v12[3] = v18;
LABEL_20:
    id v20 = [AssetRequest alloc];
    if (v2) {
      id v21 = objc_getProperty(v2, v19, 216, 1);
    }
    else {
      id v21 = 0;
    }
    id v22 = v21;
    uint64_t v23 = sub_100336778(v20, (uint64_t)v22, v12);

    sub_1003930B8();
    uint64_t v24 = (_TtC9appstored12AssetPromise *)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = sub_100393804(v24, v23);

    if (v2)
    {
      objc_setProperty_atomic(v2, v26, v25, 96);
      id v28 = objc_getProperty(v2, v27, 208, 1);
    }
    else
    {
      id v28 = 0;
    }
    id v29 = v28;
    BOOL v30 = v29 == 0;

    if (v30)
    {
      id v32 = +[NSDate date];
      if (v2) {
        objc_setProperty_atomic(v2, v31, v32, 208);
      }
    }
    objc_initWeak((id *)buf, a1);
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472;
    v54[2] = sub_1004149B4;
    v54[3] = &unk_10052D568;
    objc_copyWeak(&v56, (id *)buf);
    uint64_t v33 = v2;
    id v55 = v33;
    [v25 addErrorBlock:v54];
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    void v47[2] = sub_10041522C;
    v47[3] = &unk_10052D5B8;
    objc_copyWeak(&v53, (id *)buf);
    id v48 = v33;
    id v49 = a1;
    id v50 = v3;
    uint64_t v52 = &v66;
    id v51 = v4;
    [v25 addSuccessBlock:v47];

    objc_destroyWeak(&v53);
    objc_destroyWeak(&v56);
    objc_destroyWeak((id *)buf);

LABEL_36:
    _Block_object_dispose(&v66, 8);

    goto LABEL_37;
  }
  id v34 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    if (v2) {
      id v42 = objc_getProperty(v2, v35, 184, 1);
    }
    else {
      id v42 = 0;
    }
    id v43 = v42;
    LODWORD(v66) = 138412290;
    *(void *)((char *)&v66 + 4) = v43;
    _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "[%@] Nil destination path for asset", (uint8_t *)&v66, 0xCu);
  }
  NSErrorUserInfoKey v58 = NSLocalizedRecoverySuggestionErrorKey;
  CFStringRef v59 = @"Attempted to download asset pack into nil destination.";
  id v4 = +[NSDictionary dictionaryWithObjects:&v59 forKeys:&v58 count:1];
  id v36 = +[NSError errorWithDomain:NSCocoaErrorDomain code:4 userInfo:v4];
  sub_100413C24((uint64_t)a1, v2, v36);

LABEL_37:
}

void sub_100414848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1004148B4(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 136, 1);
  }
  id v4 = Property;

  if (v4)
  {
    id v6 = *(id *)(a1 + 32);
    if (v6) {
      id v6 = objc_getProperty(v6, v5, 136, 1);
    }
    id v7 = v6;
    id v11 = +[NSURL fileURLWithPath:v7 isDirectory:1];

    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v8, 120, 1);
    }
    id v10 = v9;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_10022F824((uint64_t)ODRAssetPack, v11, v10);
  }
}

void sub_1004149B4(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  sub_100414A20((uint64_t)WeakRetained, v4, *(void **)(a1 + 32));
}

void sub_100414A20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if (v6) {
        id Property = objc_getProperty(v6, v8, 184, 1);
      }
      else {
        id Property = 0;
      }
      id v20 = Property;
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Error downloading asset: %{public}@", buf, 0x16u);
    }
    if (!v6) {
      goto LABEL_7;
    }
    id v10 = objc_getProperty(v6, v9, 208, 1);
    if (!v10) {
      goto LABEL_7;
    }
    id v12 = v10;
    id v13 = objc_getProperty(v6, v11, 208, 1);
    if (v13)
    {
      uint64_t v14 = v13;
      [v13 timeIntervalSinceNow];
      BOOL v16 = v15 < -604800.0;

      if (v16)
      {
LABEL_7:
        uint64_t v17 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          if (v6) {
            id v21 = objc_getProperty(v6, v18, 184, 1);
          }
          else {
            id v21 = 0;
          }
          id v22 = v21;
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v22;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[%@] Failing download, exceeded maximum retry time", buf, 0xCu);
        }
LABEL_8:

        sub_100413C24(a1, v6, v5);
        goto LABEL_9;
      }
    }
    else
    {
    }
    if (!ASDErrorIsEqual() || (v6[81] & 1) != 0)
    {
      if (ASDErrorIsEqual())
      {
        id v29 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          id v31 = objc_getProperty(v6, v30, 184, 1);
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[%@] Restarting download after previous attempt timed out", buf, 0xCu);
        }
      }
      else
      {
        if (!ASDErrorIsEqual())
        {
          sub_100413C24(a1, v6, v5);
          goto LABEL_9;
        }
        if ((sub_10030E4E4((uint64_t)v6) & 1) == 0)
        {
          id v32 = sub_100259614();
          unsigned int v33 = [v32 isExpensive];

          if (v33)
          {
            uint64_t v17 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              id v54 = objc_getProperty(v6, v34, 184, 1);
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v54;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[%@] Failing download after connection lost", buf, 0xCu);
            }
            goto LABEL_8;
          }
        }
        id v29 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          id v36 = objc_getProperty(v6, v35, 184, 1);
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v36;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[%@] Restarting download after connection lost", buf, 0xCu);
        }
      }

      sub_1004141A0(a1, v6);
      goto LABEL_9;
    }
    uint64_t v23 = v6;
    id v55 = v5;
    uint64_t v24 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v52 = objc_getProperty(v23, v25, 184, 1);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v52;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[%@] Handling manifest refresh for expired URL", buf, 0xCu);
    }
    BOOL v26 = v23[29] == 1;
    id v28 = objc_getProperty(v23, v27, 104, 1);
    if (v26) {
      sub_1003B9834((uint64_t)ODRApplication, v28);
    }
    else {
    id v37 = sub_1003B9318((uint64_t)ODRApplication, v28);
    }

    id v39 = objc_getProperty(v23, v38, 112, 1);
    id v40 = sub_1002991F4((uint64_t)ODRClient, v39, v37);

    if (v40)
    {
      uint64_t v41 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        id v53 = objc_getProperty(v23, v42, 184, 1);
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v53;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v40;
        _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "[%@] Refresh failed with error: %{public}@", buf, 0x16u);
      }
      sub_100413C24(a1, v23, v40);
    }
    else
    {
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000;
      uint64_t v61 = sub_100018488;
      __int16 v62 = sub_100017E00;
      id v63 = 0;
      id v43 = sub_1002393C4();
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = sub_10041656C;
      v57[3] = &unk_100523B10;
      CFStringRef v59 = buf;
      id v44 = v23;
      id v58 = v44;
      [v43 readUsingSession:v57];

      id v46 = objc_getProperty(v44, v45, 216, 1);
      id v47 = sub_100297F14(*(void **)(*(void *)&buf[8] + 40));
      unsigned int v48 = [v46 isEqual:v47];

      if (v48)
      {
        id v49 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)id v56 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to get a new URL after a manifest refresh, failing", v56, 2u);
        }

        sub_100413C24(a1, v44, v55);
      }
      else
      {
        id v50 = sub_100297F14(*(void **)(*(void *)&buf[8] + 40));
        objc_setProperty_atomic_copy(v44, v51, v50, 216);

        v6[81] = 1;
        sub_1002020C4((uint64_t)ODRAssetDownload, v44);
        sub_1004141A0(a1, v44);
      }

      _Block_object_dispose(buf, 8);
    }
  }
LABEL_9:
}

void sub_100415208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10041522C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (v3) {
    id Property = objc_getProperty(v3, v4, 32, 1);
  }
  else {
    id Property = 0;
  }
  id v7 = Property;

  if (v7)
  {
    if (v3) {
      id v9 = objc_getProperty(v3, v8, 32, 1);
    }
    else {
      id v9 = 0;
    }
    id v10 = v9;
    sub_100414A20((uint64_t)WeakRetained, v10, *(void **)(a1 + 32));

    goto LABEL_50;
  }
  id v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = *(id *)(a1 + 32);
    if (v13) {
      id v13 = objc_getProperty(v13, v12, 184, 1);
    }
    id v14 = v13;
    *(_DWORD *)long long buf = 138412290;
    id v72 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Successfully downloaded asset", buf, 0xCu);
  }
  id v16 = *(id *)(a1 + 32);
  if (v16) {
    id v16 = objc_getProperty(v16, v15, 136, 1);
  }
  id v17 = v16;

  if (v17)
  {
    uint64_t v19 = *(void *)(a1 + 40);
    id v20 = *(void **)(a1 + 48);
    id v21 = *(id *)(a1 + 32);
    if (v21) {
      id v21 = objc_getProperty(v21, v18, 136, 1);
    }
    id v22 = v21;
    uint64_t v23 = v22;
    uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8);
    SEL v27 = *(void **)(v24 + 40);
    BOOL v26 = (id *)(v24 + 40);
    uint64_t v25 = v27;
    id obj = v27;
    if (v19)
    {
      id v28 = v22;
      id v29 = v20;
      BOOL v30 = +[NSFileManager defaultManager];
      unsigned int v31 = [v30 moveItemAtPath:v29 toPath:v28 error:&obj];

      objc_storeStrong(v26, obj);
      if (v31)
      {
        id v32 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          id v34 = *(id *)(a1 + 32);
          if (v34) {
            id v34 = objc_getProperty(v34, v33, 184, 1);
          }
          id v35 = v34;
          *(_DWORD *)long long buf = 138412290;
          id v72 = v35;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%@] Successfully moved the asset into its destination path", buf, 0xCu);
        }
LABEL_23:
        id v36 = *(void **)(a1 + 32);
        uint64_t v37 = (uint64_t)WeakRetained;
        SEL v38 = 0;
LABEL_49:
        sub_100413C24(v37, v36, v38);
        goto LABEL_50;
      }
    }
    else
    {
      objc_storeStrong(v26, v25);
    }
    unsigned int v48 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) domain];
    if ([v48 isEqualToString:NSCocoaErrorDomain])
    {
      id v49 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) code];

      if (v49 == (id)516)
      {
        id v50 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          id v52 = *(id *)(a1 + 32);
          if (v52) {
            id v52 = objc_getProperty(v52, v51, 184, 1);
          }
          id v53 = v52;
          *(_DWORD *)long long buf = 138412290;
          id v72 = v53;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "[%@] Asset already exists at the destination path, validating", buf, 0xCu);
        }
        if (sub_100413B1C((BOOL)WeakRetained, *(void **)(a1 + 32))) {
          goto LABEL_23;
        }
        uint64_t v56 = *(void *)(a1 + 48);
        id v55 = *(void **)(a1 + 56);
        id v57 = *(id *)(a1 + 32);
        if (v57) {
          id v57 = objc_getProperty(v57, v54, 136, 1);
        }
        id v58 = v57;
        uint64_t v59 = *(void *)(*(void *)(a1 + 64) + 8);
        id v69 = *(id *)(v59 + 40);
        unsigned int v60 = [v55 moveItemAtPath:v56 toPath:v58 error:&v69];
        objc_storeStrong((id *)(v59 + 40), v69);

        if (v60) {
          goto LABEL_23;
        }
        uint64_t v61 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          id v63 = *(id *)(a1 + 32);
          if (v63) {
            id v63 = objc_getProperty(v63, v62, 184, 1);
          }
          id v64 = v63;
          uint64_t v65 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
          *(_DWORD *)long long buf = 138412546;
          id v72 = v64;
          __int16 v73 = 2114;
          uint64_t v74 = v65;
LABEL_54:
          _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "[%@] Failed to move the downloaded asset into place: %{public}@", buf, 0x16u);

          goto LABEL_48;
        }
        goto LABEL_48;
      }
    }
    else
    {
    }
    uint64_t v61 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      id v67 = *(id *)(a1 + 32);
      if (v67) {
        id v67 = objc_getProperty(v67, v66, 184, 1);
      }
      id v64 = v67;
      uint64_t v68 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      *(_DWORD *)long long buf = 138412546;
      id v72 = v64;
      __int16 v73 = 2114;
      uint64_t v74 = v68;
      goto LABEL_54;
    }
LABEL_48:

    id v36 = *(void **)(a1 + 32);
    SEL v38 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    uint64_t v37 = (uint64_t)WeakRetained;
    goto LABEL_49;
  }
  id v39 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    id v41 = *(id *)(a1 + 32);
    if (v41) {
      id v41 = objc_getProperty(v41, v40, 184, 1);
    }
    id v42 = v41;
    uint64_t v43 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    id v72 = v42;
    __int16 v73 = 2114;
    uint64_t v74 = v43;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "[%@] Error, no destination path for download: %{public}@", buf, 0x16u);
  }
  uint64_t v46 = a1 + 32;
  id v44 = *(void **)(a1 + 32);
  uint64_t v45 = *(void *)(v46 + 8);
  id v47 = ASDErrorWithTitleAndMessage();
  sub_100413C24(v45, v44, v47);

LABEL_50:
}

uint64_t sub_1004157E4(uint64_t a1, void *a2)
{
  id v39 = a2;
  id v3 = sub_1001F8948(v39, *(void **)(a1 + 32));
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id obj = *(id *)(a1 + 40);
  id v4 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v45;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v45 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v44 + 1) + 8 * (void)v8);
        id v10 = *(void **)(a1 + 32);
        id Property = *(id *)(a1 + 48);
        if (Property) {
          id Property = objc_getProperty(Property, v5, 64, 1);
        }
        id v12 = Property;
        id v13 = sub_10030D834((uint64_t)ODRAssetDownloadRequest, v9, v3, v10, v12);

        if (v13)
        {
          id v15 = *(id *)(a1 + 48);
          if (v15) {
            id v15 = objc_getProperty(v15, v14, 40, 1);
          }
          id v16 = v15;
          objc_setProperty_atomic_copy(v13, v17, v16, 128);

          v13[29] = 1;
          id v19 = *(id *)(a1 + 48);
          if (v19) {
            id v19 = objc_getProperty(v19, v18, 80, 1);
          }
          id v20 = v19;
          objc_setProperty_atomic_copy(v13, v21, v20, 168);

          sub_100249490((BOOL)v39, v13);
          [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v13];
        }

        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
    }
    while (v6);
  }

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v22 = *(id *)(a1 + 56);
  id v23 = [v22 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v23)
  {
    id v25 = v23;
    uint64_t v26 = *(void *)v41;
    do
    {
      SEL v27 = 0;
      do
      {
        if (*(void *)v41 != v26) {
          objc_enumerationMutation(v22);
        }
        id v28 = *(void **)(*((void *)&v40 + 1) + 8 * (void)v27);
        id v29 = *(void **)(a1 + 32);
        id v30 = *(id *)(a1 + 48);
        if (v30) {
          id v30 = objc_getProperty(v30, v24, 64, 1);
        }
        id v31 = v30;
        id v32 = sub_10030D834((uint64_t)ODRAssetDownloadRequest, v28, v3, v29, v31);

        if (v32)
        {
          id v34 = *(id *)(a1 + 48);
          if (v34) {
            id v34 = objc_getProperty(v34, v33, 40, 1);
          }
          id v35 = v34;
          objc_setProperty_atomic_copy(v32, v36, v35, 128);

          v32[29] = 2;
          sub_100249490((BOOL)v39, v32);
        }

        SEL v27 = (char *)v27 + 1;
      }
      while (v25 != v27);
      id v25 = [v22 countByEnumeratingWithState:&v40 objects:v48 count:16];
    }
    while (v25);
  }

  return 1;
}

void sub_100415B08(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  if (v3) {
    id Property = objc_getProperty(v3, v4, 104, 1);
  }
  else {
    id Property = 0;
  }
  id v8 = Property;
  uint64_t v7 = sub_1001F97DC(v5, v8);

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v7 unsignedIntegerValue];
}

void sub_100415BAC(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = sub_10029FA90(*(void ***)(a1 + 32));
  id v4 = sub_10027D7D8([ODRManifestRequestTask alloc], v3);
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  void v14[3] = sub_100018488;
  void v14[4] = sub_100017E00;
  id v15 = 0;
  objc_initWeak(&location, v4);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100415D7C;
  void v7[3] = &unk_10052D608;
  objc_copyWeak(&v12, &location);
  id v5 = v3;
  id v8 = v5;
  id v9 = *(id *)(a1 + 32);
  id v11 = v14;
  id v6 = v2;
  id v10 = v6;
  [v4 setCompletionBlock:v7];
  sub_10026F10C((uint64_t)ODRTaskQueue, v4, -1);
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
  _Block_object_dispose(v14, 8);
}

void sub_100415D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_100415D7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if (WeakRetained[24])
    {
      id v11 = sub_1002393C4();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100415F64;
      void v14[3] = &unk_10052D4F0;
      id v15 = v4;
      id v16 = *(id *)(a1 + 32);
      id v12 = *(id *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 56);
      id v17 = v12;
      uint64_t v18 = v13;
      [v11 modifyUsingTransaction:v14];

      id v6 = v15;
      goto LABEL_9;
    }
    id Property = objc_getProperty(WeakRetained, v3, 32, 1);
  }
  else
  {
    id Property = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), Property);
  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v8 = *(id *)(a1 + 40);
    if (v8) {
      id v8 = objc_getProperty(v8, v7, 64, 1);
    }
    id v9 = v8;
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    *(_DWORD *)long long buf = 138412546;
    id v20 = v9;
    __int16 v21 = 2114;
    uint64_t v22 = v10;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%@]: Failed updating manifest: %{public}@", buf, 0x16u);
  }
LABEL_9:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

BOOL sub_100415F64(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 48, 1);
  }
  id v6 = Property;
  BOOL v7 = sub_100248BE8(v4, v6, *(void **)(a1 + 40), 1);

  id v8 = ASDLogHandleForCategory();
  id v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = *(id *)(a1 + 48);
      if (v11) {
        id v11 = objc_getProperty(v11, v10, 64, 1);
      }
      id v12 = v11;
      int v18 = 138412290;
      id v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@]: Success updating manifest", (uint8_t *)&v18, 0xCu);
    }
    sub_100249B58((BOOL)v4, *(void **)(a1 + 40));
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v15 = *(id *)(a1 + 48);
      if (v15) {
        id v15 = objc_getProperty(v15, v13, 64, 1);
      }
      id v16 = v15;
      uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      int v18 = 138412546;
      id v19 = v16;
      __int16 v20 = 2114;
      uint64_t v21 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@]: Failed updating manifest: %{public}@", (uint8_t *)&v18, 0x16u);
    }
  }

  return v7;
}

void sub_10041611C(uint64_t a1)
{
  dispatch_semaphore_t v2 = sub_1002393C4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004161C4;
  v5[3] = &unk_100523970;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 modifyUsingTransaction:v5];
}

BOOL sub_1004161C4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 112, 1);
  }
  id v6 = Property;
  uint64_t v7 = sub_1001F82E8(v4, (uint64_t)v6);

  if (v7)
  {
    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v8, 216, 1);
    }
    id v10 = v9;
    sub_1002983AC(v7, v10);

    id v12 = *(id *)(a1 + 32);
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 136, 1);
    }
    id v13 = v12;
    id v14 = +[NSURL fileURLWithPath:v13 isDirectory:1];

    sub_10029805C(v7, v14);
    id v15 = +[NSDate date];
    [v7 setValue:v15 forProperty:@"last_used_date"];

    id v16 = sub_100297DCC(v7);
    uint64_t v17 = *(void *)(a1 + 32);
    if (v17)
    {
      uint64_t v18 = (uint64_t)v16;
      uint64_t v19 = *(unsigned __int8 *)(v17 + 82);
      if ((v19 & 1) == 0) {
        goto LABEL_18;
      }
      [*(id *)(v17 + 40) lock];
      uint64_t v20 = *(void *)(v17 + 48);
      [*(id *)(v17 + 40) unlock];
      if ((unint64_t)(v18 + v19 + v20) <= 1) {
        uint64_t v18 = 1;
      }
      else {
        v18 += v19 + v20;
      }
      sub_1002980C4(v7, v18);
      uint64_t v21 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = *(id *)(a1 + 32);
        if (v23) {
          id v23 = objc_getProperty(v23, v22, 184, 1);
        }
        id v24 = v23;
        int v31 = 138412546;
        id v32 = v24;
        __int16 v33 = 2048;
        uint64_t v34 = v18;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@]: Updated pin count: %lld", (uint8_t *)&v31, 0x16u);
      }
      uint64_t v17 = *(void *)(a1 + 32);
      if (v17) {
LABEL_18:
      }
        *(void *)(v17 + 192) = v18;
    }
    sub_10029833C(v7, 0);
    sub_100230044(v7);
    BOOL v25 = sub_100249F50(v4, v7);
  }
  else
  {
    uint64_t v26 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      id v29 = *(id *)(a1 + 32);
      if (v29) {
        id v29 = objc_getProperty(v29, v27, 184, 1);
      }
      id v30 = v29;
      int v31 = 138412290;
      id v32 = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[%@]: Failed to find asset pack to update", (uint8_t *)&v31, 0xCu);
    }
    BOOL v25 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }

  return v25;
}

void sub_1004164A8(void *a1, id a2)
{
  uint64_t v3 = a1[4];
  if (a1[6] == 1) {
    sub_1001F9154(a2, 4, v3);
  }
  else {
  uint64_t v4 = sub_1001F8AF8(a2, v3);
  }
  uint64_t v5 = *(void *)(a1[5] + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100416518(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1001F8C34(a2, *(void *)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10041656C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = a2;
  if (v3) {
    id Property = objc_getProperty(v3, v4, 112, 1);
  }
  else {
    id Property = 0;
  }
  id v10 = Property;
  uint64_t v7 = sub_1001F82E8(v5, (uint64_t)v10);

  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void **sub_100416650(void **a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (v5)
    {
      uint64_t v7 = [v5 processInfo];
    }
    else
    {
      if (a3) {
        sub_100295080();
      }
      else {
      uint64_t v7 = sub_1000169A4();
      }
    }
    uint64_t v8 = v7;
    id v9 = [v7 bundleIdentifier];
    a1 = sub_100416700(a1, v6, v8, v9, 0);
  }
  return a1;
}

void **sub_100416700(void **a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    v26.receiver = a1;
    v26.super_class = (Class)XPCRequestToken;
    a1 = (void **)objc_msgSendSuper2(&v26, "init");
    if (a1)
    {
      if (v12)
      {
        id v14 = v12;
      }
      else
      {
        id v14 = [v11 bundleIdentifier];
      }
      id v15 = a1[6];
      a1[6] = v14;

      uint64_t v16 = +[NSUUID UUID];
      uint64_t v17 = a1[3];
      a1[3] = (void *)v16;

      uint64_t v18 = [[_TtC9appstored6LogKey alloc] initWithBaseUUID:a1[3]];
      uint64_t v19 = a1[4];
      a1[4] = v18;

      objc_storeStrong(a1 + 9, a3);
      objc_storeStrong(a1 + 7, a5);
      objc_storeStrong(a1 + 5, a2);
      uint64_t v20 = [a1[9] bundleIdentifier];
      uint64_t v21 = +[NSString stringWithFormat:@"com.apple.appstored.XPCRequestToken.%@.%@", v20, a1[4]];
      uint64_t v22 = a1[1];
      a1[1] = (void *)v21;

      sub_100015A88((uint64_t)TransactionStore, a1[1]);
      uint64_t v23 = voucher_copy();
      id v24 = a1[8];
      a1[8] = (void *)v23;
    }
  }

  return a1;
}

void **sub_100416894(uint64_t a1, int a2)
{
  self;
  uint64_t v3 = sub_100416650((void **)[_XPCInternalRequestToken alloc], 0, a2);
  return v3;
}

void **sub_1004168E0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = [_XPCInternalRequestToken alloc];
  uint64_t v4 = [v2 bundleIdentifier];
  id v5 = sub_100416700((void **)&v3->super.super.isa, 0, v2, v4, 0);

  return v5;
}

void **sub_100416970(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  id v9 = sub_1000167FC();
  if (v9) {
    id v10 = sub_100416700((void **)[XPCRequestToken alloc], v9, v6, v7, v8);
  }
  else {
    id v10 = 0;
  }

  return v10;
}

id sub_100416A38(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  uint64_t v4 = sub_100016788();
  id v5 = [v4 processInfo];
  id v6 = [v5 bundleIdentifier];

  if (([v2 isEqualToString:@"com.apple.AppStore"] & 1) != 0
    || [v6 isEqualToString:@"com.apple.AppStore"])
  {
    id v7 = sub_100295080();
    sub_100416970(v3, v7, v6, v2);
    id v8 = (id)objc_claimAutoreleasedReturnValue();

    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    id v8 = 0;
    if (!v2) {
      goto LABEL_8;
    }
  }
  if (!v8)
  {
    id v9 = [objc_alloc((Class)AMSProcessInfo) initWithBundleIdentifier:v2];
    sub_100416970(v3, v9, v6, v2);
    id v8 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_10;
  }
LABEL_8:
  if (!v8) {
    id v8 = v4;
  }
LABEL_10:

  return v8;
}

id sub_100416B80(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 32, 1);
  }
  return result;
}

id sub_100416F64()
{
  self;
  if (qword_1005B1408 != -1) {
    dispatch_once(&qword_1005B1408, &stru_10052D650);
  }
  uint64_t v0 = (void *)qword_1005B1400;
  return v0;
}

void sub_100416FBC(id a1)
{
  uint64_t v1 = objc_alloc_init(AppInstallQueue);
  id v2 = (void *)qword_1005B1400;
  qword_1005B1400 = (uint64_t)v1;
}

void sub_100417100(uint64_t a1)
{
  if (a1)
  {
    id v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Validating active installations on daemon start", buf, 2u);
    }

    uint64_t v3 = sub_10027922C((uint64_t)IXAppInstallCoordinator, 0);
    v13[0] = @"bundle_id";
    v13[1] = @"coordinator_id";
    void v13[2] = @"external_id";
    v13[3] = @"item_id";
    void v13[4] = @"log_code";
    void v13[5] = @"policy";
    v13[6] = @"update_type";
    v13[7] = @"IFNULL(app_install.phase, 10)";
    uint64_t v4 = +[NSArray arrayWithObjects:v13 count:8];
    id v5 = *(void **)(a1 + 16);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1004172B0;
    void v8[3] = &unk_100525088;
    id v9 = v4;
    uint64_t v10 = a1;
    id v11 = v3;
    id v6 = v3;
    id v7 = v4;
    [v5 modifyUsingTransaction:v8];
  }
}

uint64_t sub_1004172B0(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 connection];
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" value:&off_10054D230 comparisonType:6];
  v22[0] = v5;
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054D248];
  v22[1] = v6;
  id v7 = +[NSArray arrayWithObjects:v22 count:2];
  id v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  id v9 = [v3 connection];
  uint64_t v10 = sub_1002FF548((uint64_t)AppInstallEntity, v9, v8);

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10041749C;
  void v17[3] = &unk_10052CBB0;
  uint64_t v12 = a1[4];
  uint64_t v11 = a1[5];
  id v13 = (void *)a1[6];
  id v18 = v3;
  uint64_t v19 = v11;
  id v20 = v13;
  id v21 = v4;
  id v14 = v4;
  id v15 = v3;
  [v10 enumeratePersistentIDsAndProperties:v12 usingBlock:v17];

  return 1;
}

void sub_10041749C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [v5 objectForKeyedSubscript:@"policy"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = (id *)sub_1003D4BC0([AppInstallPolicy alloc], v6);
    if (sub_1003D51C0(v7))
    {
      id v8 = [AppInstallEntity alloc];
      id v9 = [*(id *)(a1 + 32) connection];
      uint64_t v10 = [(SQLiteEntity *)v8 initWithPersistentID:a2 onConnection:v9];

      sub_1002C34E0(v10, &stru_10052D690);
    }
  }
  uint64_t v11 = [AppInstallInfo alloc];
  uint64_t v12 = +[NSNumber numberWithLongLong:a2];
  id v13 = sub_10041E360(v11, v12, v5);

  id v14 = [v5 objectForKeyedSubscript:@"IFNULL(app_install.phase, 10)"];
  uint64_t v15 = (uint64_t)[v14 integerValue];

  LOBYTE(v16) = v15 > 10;
  if (v15 != 50)
  {
    uint64_t v22 = [v5 objectForKeyedSubscript:@"coordinator_id"];
    if (!v22)
    {
LABEL_34:
      sub_100238B14(*(void **)(a1 + 32), v15, a2);
      if (!(_BYTE)v16)
      {
LABEL_60:

        goto LABEL_61;
      }
      long long v42 = sub_10027B328((uint64_t)AppPackageEntity, a2, *(void **)(a1 + 56));
      id v43 = [v42 persistentID];
      if (v13) {
        v13[12] = v43;
      }
      sub_10041E510((uint64_t)AppInstallInfo, v13);
      if ((unint64_t)(v15 + 40) > 0x3C) {
        goto LABEL_45;
      }
      if (((1 << (v15 + 40)) & 0x84000042100401) != 0)
      {
        ASDLogHandleForCategory();
        long long v44 = (AppInstallEntity *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(&v44->super.super, OS_LOG_TYPE_ERROR))
        {
          if (v13) {
            id Property = objc_getProperty(v13, v45, 80, 1);
          }
          else {
            id Property = 0;
          }
          id v47 = Property;
          unsigned int v48 = sub_1003A47AC(v15);
          *(_DWORD *)long long buf = 138412546;
          id v75 = v47;
          __int16 v76 = 2114;
          uint64_t v77 = (uint64_t)v48;
          _os_log_error_impl((void *)&_mh_execute_header, &v44->super.super, OS_LOG_TYPE_ERROR, "[%@] Ignoring request to resume inactive installation in phase %{public}@", buf, 0x16u);
        }
        goto LABEL_58;
      }
      if (v15 != 20)
      {
LABEL_45:
        if ((unint64_t)v15 > 0x2D || ((1 << v15) & 0x210040000000) == 0)
        {
          uint64_t v61 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            if (v13) {
              id v69 = objc_getProperty(v13, v62, 80, 1);
            }
            else {
              id v69 = 0;
            }
            id v70 = v69;
            *(_DWORD *)long long buf = 138412546;
            id v75 = v70;
            __int16 v76 = 2048;
            uint64_t v77 = v15;
          }
          long long v44 = [(SQLiteEntity *)[AppInstallEntity alloc] initWithPersistentID:a2 onConnection:*(void *)(a1 + 56)];
          id v64 = ASDErrorWithUserInfoAndFormat();
          id v65 = *(id *)(a1 + 32);
          if (v65) {
            id v65 = objc_getProperty(v65, v63, 24, 1);
          }
          id v66 = v65;
          id v67 = sub_1002C276C(v44, v64);
          sub_100286124((uint64_t)v66, v67);

          goto LABEL_58;
        }
      }
      id v49 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        if (v13) {
          id v51 = objc_getProperty(v13, v50, 80, 1);
        }
        else {
          id v51 = 0;
        }
        id v52 = v51;
        id v53 = sub_1003A47AC(v15);
        *(_DWORD *)long long buf = 138412546;
        id v75 = v52;
        __int16 v76 = 2114;
        uint64_t v77 = (uint64_t)v53;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "[%@] Discovered previously active installation (phase = '%{public}@'), resetting state to Waiting for scheduling", buf, 0x16u);
      }
      uint64_t v54 = *(void *)(a1 + 40);
      if (!v54) {
        goto LABEL_59;
      }
      id v55 = *(id *)(a1 + 32);
      uint64_t v56 = v13;
      id v57 = [AppInstallEntity alloc];
      if (v13) {
        uint64_t v58 = v56[8];
      }
      else {
        uint64_t v58 = 0;
      }

      uint64_t v59 = [v55 connection];
      long long v44 = [(SQLiteEntity *)v57 initWithPersistentID:v58 onConnection:v59];

      unsigned int v60 = sub_1003A9994([AppInstallPreambleTask alloc], v44, v55);
      sub_100419DB0(v54, v60, v55);

LABEL_58:
LABEL_59:

      goto LABEL_60;
    }
    if (v13) {
      id v23 = objc_getProperty(v13, v21, 32, 1);
    }
    else {
      id v23 = 0;
    }
    id v24 = v23;

    if (v24)
    {
      id v72 = 0;
      if (v13)
      {
LABEL_16:
        id v26 = objc_getProperty(v13, v25, 32, 1);
        goto LABEL_17;
      }
    }
    else
    {
      id v71 = v22;
      if (v13)
      {
        id v32 = objc_getProperty(v13, v25, 40, 1);
        id v34 = objc_getProperty(v13, v33, 24, 1);
      }
      else
      {
        id v32 = 0;
        id v34 = 0;
      }
      id v35 = v34;
      id v73 = 0;
      SEL v36 = sub_100278C08((uint64_t)IXAppInstallCoordinator, v32, v35, &v73);
      id v72 = v73;
      if (v13) {
        objc_setProperty_atomic(v13, v37, v36, 32);
      }

      uint64_t v22 = v71;
      if (v13) {
        goto LABEL_16;
      }
    }
    id v26 = 0;
LABEL_17:
    id v27 = v26;

    if (v27)
    {
      id v29 = sub_10028E50C();
      if (v13) {
        id v30 = objc_getProperty(v13, v28, 32, 1);
      }
      else {
        id v30 = 0;
      }
      id v31 = v30;
      sub_10028E764((uint64_t)v29, v31);
    }
    else
    {
      id v29 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      if (v13) {
        id v68 = objc_getProperty(v13, v38, 80, 1);
      }
      else {
        id v68 = 0;
      }
      id v31 = v68;
      *(_DWORD *)long long buf = 138412546;
      id v75 = v31;
      __int16 v76 = 2114;
      uint64_t v77 = (uint64_t)v72;
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "[%@] Tried to replace the coordinator, but failed: %{public}@", buf, 0x16u);
    }

LABEL_29:
    id v39 = [*(id *)(a1 + 48) objectForKeyedSubscript:v22];
    long long v40 = v39;
    if (v39)
    {
      unint64_t v41 = (unint64_t)[v39 integerValue];
      self;
      if (v41 > 5)
      {
        uint64_t v15 = 10;
      }
      else
      {
        unint64_t v16 = 0x101010000uLL >> (8 * v41);
        uint64_t v15 = qword_1004A1008[v41];
      }
    }

    goto LABEL_34;
  }
  uint64_t v17 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if (v13) {
      id v19 = objc_getProperty(v13, v18, 80, 1);
    }
    else {
      id v19 = 0;
    }
    id v20 = v19;
    *(_DWORD *)long long buf = 138412290;
    id v75 = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Restarting from postamble", buf, 0xCu);
  }
  sub_100417CD0(*(void *)(a1 + 40), v13, *(void **)(a1 + 32));
LABEL_61:
}

void sub_100417CC4(id a1, AppInstallPolicy *a2)
{
}

void sub_100417CD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = a3;
    id v7 = ASDLogHandleForCategory();
    id v8 = v7;
    if (v5)
    {
      os_signpost_id_t v9 = v5[13];
      if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
      {
        id v11 = objc_getProperty(v5, v10, 80, 1);
        *(_DWORD *)long long buf = 138543362;
        id v26 = v11;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "Install/Postamble", " uuid=%{public, signpost.description:attribute}@ ", buf, 0xCu);
      }
    }

    uint64_t v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (v5) {
        id Property = objc_getProperty(v5, v13, 80, 1);
      }
      else {
        id Property = 0;
      }
      id v15 = Property;
      *(_DWORD *)long long buf = 138412290;
      id v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Beginning final", buf, 0xCu);
    }
    if (v5)
    {
      sub_100238B14(v6, 50, v5[8]);
      uint64_t v16 = v5[8];
      uint64_t v17 = v5[12];
    }
    else
    {
      sub_100238B14(v6, 50, 0);
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    id v18 = sub_100406F4C((uint64_t)AppInstallPostambleTask, v16, v17, v6);

    id v19 = _NSConcreteStackBlock;
    uint64_t v20 = 3221225472;
    id v21 = sub_10041986C;
    uint64_t v22 = &unk_1005218C0;
    uint64_t v23 = a1;
    id v24 = v5;
    [v18 setCompletionBlock:&v19];
    objc_msgSend(*(id *)(a1 + 32), "addOperation:", v18, v19, v20, v21, v22, v23);
  }
}

void sub_10041885C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100418AD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [AppPackageEntity alloc];
  id v5 = [*(id *)(a1 + 32) longLongValue];
  id v6 = [v3 connection];

  id v7 = [(SQLiteEntity *)v4 initWithPersistentID:v5 onConnection:v6];
  [(SQLiteEntity *)v7 setValue:*(void *)(a1 + 40) forProperty:@"data_promise_id"];

  return 1;
}

void sub_100418D6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (v3) {
      uint64_t v4 = v3[3];
    }
    else {
      uint64_t v4 = 0;
    }
    id v5 = +[NSNumber numberWithLongLong:v4];
    id v6 = sub_10041E684((uint64_t)AppInstallInfo, v5);

    v41[0] = 0;
    v41[1] = v41;
    void v41[2] = 0x3032000000;
    v41[3] = sub_100018498;
    v41[4] = sub_100017E08;
    id v42 = 0;
    uint64_t v35 = 0;
    SEL v36 = &v35;
    uint64_t v37 = 0x3032000000;
    SEL v38 = sub_100018498;
    id v39 = sub_100017E08;
    id v40 = 0;
    id v7 = *(void **)(a1 + 16);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    void v29[2] = sub_10041A210;
    v29[3] = &unk_10052D6B8;
    id v8 = v6;
    id v30 = v8;
    os_signpost_id_t v9 = v3;
    id v31 = v9;
    uint64_t v32 = a1;
    SEL v33 = &v35;
    id v34 = v41;
    [v7 modifyUsingTransaction:v29];
    if (v36[5])
    {
      id v11 = +[NSProgress discreteProgressWithTotalUnitCount:1];
      if (v8) {
        id Property = objc_getProperty(v8, v10, 56, 1);
      }
      else {
        id Property = 0;
      }
      id v13 = Property;
      [v11 setUserInfoObject:v13 forKey:@"AppInstallExternalID"];

      [v11 becomeCurrentWithPendingUnitCount:1];
      id v15 = sub_100393804(*(_TtC9appstored12AssetPromise **)(a1 + 8), (void *)v36[5]);
      if (v15)
      {
        if (v8) {
          objc_setProperty_atomic(v8, v14, v15, 16);
        }
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10041A4B8;
        v28[3] = &unk_10052D6E0;
        uint8_t v28[4] = v41;
        [v15 setProgress:v28];
        if (v8)
        {
          objc_setProperty_atomic(v8, v16, v11, 48);
          id v18 = objc_getProperty(v8, v17, 80, 1);
        }
        else
        {
          id v18 = 0;
        }
        id v19 = v18;
        uint64_t v20 = [v19 description];
        unsigned int v21 = [v20 hasPrefix:@"LGY"];

        if (v21) {
          [v11 addObserver:a1 forKeyPath:@"fractionCompleted" options:5 context:0];
        }
        if (v3) {
          uint64_t v22 = v9[3];
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = +[NSNumber numberWithLongLong:v22];
        id v24 = *(void **)(a1 + 40);
        BOOL v25 = [v15 requestID];
        [v24 setObject:v23 forKeyedSubscript:v25];

        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_10041A540;
        v26[3] = &unk_10052D708;
        uint8_t v26[4] = a1;
        id v27 = v8;
        [v15 addFinishBlock:v26];
      }
      [v11 resignCurrent];
    }
    _Block_object_dispose(&v35, 8);

    _Block_object_dispose(v41, 8);
  }
}

void sub_100419148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100419178(uint64_t a1, void *a2, void *a3)
{
  id v18 = a3;
  id v5 = a2;
  id v7 = v5;
  if (v5)
  {
    id v8 = objc_getProperty(v5, v6, 24, 1);
    if (v8)
    {
      id v9 = v8;

LABEL_5:
      id Property = objc_getProperty(v7, v10, 72, 1);
      goto LABEL_6;
    }
  }
  sub_10026E95C(v18, @"bundle_id");
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v7) {
    goto LABEL_5;
  }
  id Property = 0;
LABEL_6:
  id v12 = Property;

  if (v12)
  {
    id v13 = v12;
  }
  else
  {
    sub_10026E82C(v18, @"item_id");
    id v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v14 = v13;

  id v15 = sub_10026E82C(v18, @"metrics_install_type");
  unsigned int v16 = [v15 unsignedCharValue];

  SEL v17 = sub_100330828();
  sub_1003319C0((uint64_t)v17, a1, 4, v9, v14, 1, v16);
}

void sub_1004192D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100419370;
  v6[3] = &unk_1005218C0;
  id v7 = WeakRetained;
  uint64_t v8 = v3;
  id v5 = WeakRetained;
  dispatch_async(v4, v6);
}

void sub_100419370(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id Property = *(id *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v2, 88, 1);
    }
    id v5 = Property;
    sub_100418D6C(v4, v5);
  }
}

void sub_1004193F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = ASDLogHandleForCategory();
    uint64_t v8 = v7;
    if (v5)
    {
      os_signpost_id_t v9 = v5[13];
      if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
      {
        id v11 = objc_getProperty(v5, v10, 80, 1);
        *(_DWORD *)long long buf = 138543362;
        id v29 = v11;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "Install/Install", " uuid=%{public, signpost.description:attribute}@ ", buf, 0xCu);
      }
    }

    id v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (v5) {
        id Property = objc_getProperty(v5, v13, 80, 1);
      }
      else {
        id Property = 0;
      }
      id v15 = Property;
      *(_DWORD *)long long buf = 138412290;
      id v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Beginning installation", buf, 0xCu);
    }
    if (v5)
    {
      sub_100238B14(v6, 40, v5[8]);
      uint64_t v16 = v5[8];
      uint64_t v17 = v5[12];
      id v19 = objc_getProperty(v5, v18, 32, 1);
    }
    else
    {
      sub_100238B14(v6, 40, 0);
      uint64_t v17 = 0;
      uint64_t v16 = 0;
      id v19 = 0;
    }
    id v20 = v19;
    unsigned int v21 = sub_100404CEC((uint64_t)AppInstallInstallTask, v16, v17, v6, v20);

    objc_initWeak((id *)buf, v21);
    uint64_t v22 = _NSConcreteStackBlock;
    uint64_t v23 = 3221225472;
    id v24 = sub_1004196DC;
    BOOL v25 = &unk_100527140;
    objc_copyWeak(&v27, (id *)buf);
    uint64_t v26 = a1;
    [v21 setCompletionBlock:&v22];
    objc_msgSend(*(id *)(a1 + 32), "addOperation:", v21, v22, v23, v24, v25);
    objc_destroyWeak(&v27);
    objc_destroyWeak((id *)buf);
  }
}

void sub_1004196B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004196DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10041977C;
  v6[3] = &unk_1005218C0;
  id v7 = WeakRetained;
  uint64_t v8 = v3;
  id v5 = WeakRetained;
  dispatch_async(v4, v6);
}

void sub_10041977C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id Property = *(id *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v2, 72, 1);
    }
    id v6 = Property;
    if (v4)
    {
      id v5 = *(void **)(v4 + 16);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10041AAC0;
      void v7[3] = &unk_100522AB8;
      id v8 = v6;
      uint64_t v9 = v4;
      [v5 modifyUsingTransaction:v7];
    }
  }
}

void sub_10041986C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(NSObject **)(v1 + 24);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100419900;
  v3[3] = &unk_1005218C0;
  v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_100419900(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = ASDLogHandleForCategory();
    id v4 = v3;
    if (v2)
    {
      os_signpost_id_t v5 = v2[13];
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
      {
        LOWORD(v7[0]) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "Install/Postamble", "", (uint8_t *)v7, 2u);
      }
    }

    id v6 = *(void **)(v1 + 16);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10041BE80;
    void v7[3] = &unk_1005236D0;
    id v8 = v2;
    [v6 modifyUsingTransaction:v7];
  }
}

void sub_100419A0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100419AAC;
  v6[3] = &unk_1005218C0;
  id v7 = WeakRetained;
  uint64_t v8 = v3;
  id v5 = WeakRetained;
  dispatch_async(v4, v6);
}

void sub_100419AAC(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id Property = *(id *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v2, 48, 1);
    }
    id v6 = Property;
    if (v4)
    {
      id v5 = *(void **)(v4 + 16);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10041B054;
      void v7[3] = &unk_100522AB8;
      id v8 = v6;
      uint64_t v9 = v4;
      [v5 modifyUsingTransaction:v7];
    }
  }
}

void sub_100419B9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [AppInstallInfo alloc];
  id v7 = +[NSNumber numberWithLongLong:a2];
  id v8 = sub_10041E360(v6, v7, v5);

  sub_10041E510((uint64_t)AppInstallInfo, v8);
  uint64_t v9 = ASDLogHandleForCategory();
  uint64_t v10 = v9;
  if (v8)
  {
    os_signpost_id_t v11 = v8[13];
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      id v13 = objc_getProperty(v8, v12, 80, 1);
      int v20 = 138543362;
      id v21 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v11, "Install", " uuid=%{public, signpost.description:attribute}@ ", (uint8_t *)&v20, 0xCu);
    }
  }

  id v14 = [AppInstallEntity alloc];
  id v15 = [*(id *)(a1 + 32) connection];
  uint64_t v16 = [(SQLiteEntity *)v14 initWithPersistentID:a2 onConnection:v15];

  uint64_t v17 = +[NSDate date];
  [v17 timeIntervalSinceReferenceDate];
  SEL v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [(SQLiteEntity *)v16 setValue:v18 forProperty:@"last_start_date"];

  id v19 = sub_1003A9994([AppInstallPreambleTask alloc], v16, *(void **)(a1 + 32));
  sub_100419DB0(*(void *)(a1 + 40), v19, *(void **)(a1 + 32));
}

void sub_100419DB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_20;
  }
  objc_initWeak(&location, v5);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_10041A0D0;
  v21[3] = &unk_100527140;
  objc_copyWeak(&v22, &location);
  void v21[4] = a1;
  [v5 setCompletionBlock:v21];
  if (v5) {
    id v7 = [v5[6] databaseID];
  }
  else {
    id v7 = 0;
  }
  id v8 = +[NSNumber numberWithLongLong:v7];
  uint64_t v9 = sub_10041E684((uint64_t)AppInstallInfo, v8);

  if (v9) {
    objc_storeWeak((id *)(v9 + 88), v5);
  }
  if (v5)
  {
    id v10 = [v5[8] databaseID];
    if (!v9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  id v10 = 0;
  if (v9) {
LABEL_8:
  }
    *(void *)(v9 + 96) = v10;
LABEL_9:
  os_signpost_id_t v11 = ASDLogHandleForCategory();
  id v12 = v11;
  if (v9)
  {
    os_signpost_id_t v13 = *(void *)(v9 + 104);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      id v15 = objc_getProperty((id)v9, v14, 80, 1);
      *(_DWORD *)long long buf = 138543362;
      id v25 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v13, "Install/Preamble", " uuid=%{public, signpost.description:attribute}@ ", buf, 0xCu);
    }
  }

  uint64_t v16 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (v9) {
      id Property = objc_getProperty((id)v9, v17, 80, 1);
    }
    else {
      id Property = 0;
    }
    id v19 = Property;
    *(_DWORD *)long long buf = 138412290;
    id v25 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] Queuing preamble task", buf, 0xCu);
  }
  [*(id *)(a1 + 32) addOperation:v5];
  if (v5) {
    id v20 = [v5[6] databaseID];
  }
  else {
    id v20 = 0;
  }
  sub_100238B14(v6, 20, (uint64_t)v20);

  objc_destroyWeak(&v22);
  objc_destroyWeak(&location);
LABEL_20:
}

void sub_10041A098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10041A0D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned __int8 v2 = [WeakRetained isCancelled];
  uint64_t v3 = WeakRetained;
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    sub_1003A9D50(WeakRetained);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      if (v5) {
        uint64_t v6 = v5[1];
      }
      else {
        uint64_t v6 = 0;
      }
      id v7 = +[NSNumber numberWithLongLong:v6];
      id v8 = sub_10041E684((uint64_t)AppInstallInfo, v7);

      uint64_t v9 = *(void **)(v4 + 16);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_10041B24C;
      v12[3] = &unk_100525088;
      id v13 = v8;
      id v14 = v5;
      uint64_t v15 = v4;
      id v10 = v8;
      [v9 modifyUsingTransaction:v12];
    }
    uint64_t v3 = WeakRetained;
  }
}

uint64_t sub_10041A210(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    objc_storeWeak((id *)(v4 + 88), 0);
  }
  id v5 = [AppPackageEntity alloc];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 40);
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = [v3 connection];
  uint64_t v9 = [(SQLiteEntity *)v5 initWithPersistentID:v7 onConnection:v8];

  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v10, 16, 1);
  }
  id v12 = Property;

  if (v12)
  {
    id v14 = *(id *)(a1 + 40);
    if (v14) {
      id v14 = objc_getProperty(v14, v13, 16, 1);
    }
    id v15 = v14;
    [(SQLiteEntity *)v9 setValue:v15 forProperty:@"bytes_total"];
  }
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    uint64_t v17 = *(void *)(v16 + 48);
  }
  else {
    uint64_t v17 = 0;
  }
  SEL v18 = +[NSNumber numberWithUnsignedInteger:v17];
  [(SQLiteEntity *)v9 setValue:v18 forProperty:@"request_count"];

  id v20 = *(void **)(a1 + 40);
  if (!v20)
  {
    id v22 = 0;
    goto LABEL_18;
  }
  uint64_t v21 = v20[7];
  switch(v21)
  {
    case 2:
      sub_1004193F4(*(void *)(a1 + 48), *(void **)(a1 + 32), v3);
      break;
    case 1:
      uint64_t v34 = *(void *)(a1 + 32);
      if (v34) {
        uint64_t v35 = *(void *)(v34 + 64);
      }
      else {
        uint64_t v35 = 0;
      }
      id v25 = objc_getProperty(v20, v19, 32, 1);
      if (v3) {
        sub_1002357D4((id *)v3, v35, v25, 0);
      }
      goto LABEL_30;
    case 0:
      id v22 = objc_getProperty(v20, v19, 8, 1);
LABEL_18:
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v22);
      id v24 = *(id *)(a1 + 40);
      if (v24) {
        id v24 = objc_getProperty(v24, v23, 64, 1);
      }
      id v25 = v24;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        sub_10020CAD8((uint64_t)v25, *(void **)(a1 + 48));
      }
      uint64_t v26 = [AppInstallEntity alloc];
      uint64_t v27 = *(void *)(a1 + 40);
      if (v27) {
        uint64_t v28 = *(void *)(v27 + 24);
      }
      else {
        uint64_t v28 = 0;
      }
      id v29 = [v3 connection];
      uint64_t v30 = [(SQLiteEntity *)v26 initWithPersistentID:v28 onConnection:v29];

      uint64_t v31 = sub_10026E95C(v30, @"bundle_id");
      uint64_t v32 = *(void *)(*(void *)(a1 + 64) + 8);
      SEL v33 = *(void **)(v32 + 40);
      *(void *)(v32 + 40) = v31;

LABEL_30:
      break;
  }

  return 1;
}

void sub_10041A4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100388088();
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v10 = (id)v8;
  if (a2) {
    sub_10038A2B4(v8, v9, a3);
  }
  else {
    sub_100389FF8(v8, v9, a3, a4);
  }
}

void sub_10041A540(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v53 = a2;
  id v6 = a3;
  id v7 = v4;
  uint64_t v9 = v7;
  uint64_t v52 = v5;
  if (!v5) {
    goto LABEL_44;
  }
  if (v7)
  {
    objc_setProperty_atomic(v7, v8, 0, 16);
    id v10 = v9;
    id v13 = objc_getProperty(v10, v11, 48, 1);
    if (v13)
    {
      id v14 = objc_getProperty(v10, v12, 80, 1);
      id v15 = [v14 description];
      unsigned int v16 = [v15 hasPrefix:@"LGY"];

      if (v16) {
        [v13 removeObserver:v52 forKeyPath:@"fractionCompleted"];
      }
      objc_setProperty_atomic(v10, v17, 0, 48);
    }
  }
  else
  {
    id v13 = 0;
  }

  id v54 = v53;
  id v18 = v9;
  if (os_variant_has_internal_content())
  {
    self = v18;
    if (!v9)
    {
      id v39 = 0;
      id v50 = 0;
      goto LABEL_34;
    }
    id v50 = objc_getProperty(v18, v19, 80, 1);
    id v21 = objc_getProperty(v18, v20, 24, 1);
    if (!v21)
    {
      id v39 = 0;
LABEL_34:

      id v18 = self;
      goto LABEL_35;
    }
    id v49 = v21;
    id v22 = [v50 description];
    unsigned int v23 = [v22 hasPrefix:@"UPA"];

    if (!v23)
    {
LABEL_33:
      id v39 = v49;
      goto LABEL_34;
    }
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id Property = v54;
    if (v54) {
      id Property = objc_getProperty(v54, v24, 40, 1);
    }
    id v26 = Property;
    uint64_t v27 = [v26 transactionMetrics];

    id v28 = [v27 countByEnumeratingWithState:&v59 objects:v63 count:16];
    if (v28)
    {
      id v29 = 0;
      id v30 = 0;
      uint64_t v31 = *(void *)v60;
      do
      {
        for (i = 0; i != v28; i = (char *)i + 1)
        {
          if (*(void *)v60 != v31) {
            objc_enumerationMutation(v27);
          }
          SEL v33 = *(void **)(*((void *)&v59 + 1) + 8 * i);
          if (!v29)
          {
            uint64_t v34 = [*(id *)(*((void *)&v59 + 1) + 8 * i) requestStartDate];
            BOOL v35 = v34 == 0;

            if (v35)
            {
              id v29 = 0;
            }
            else
            {
              id v29 = [v33 requestStartDate];
            }
          }
          SEL v36 = [v33 responseEndDate];

          if (v36)
          {
            uint64_t v37 = [v33 responseEndDate];

            id v30 = (id)v37;
          }
        }
        id v28 = [v27 countByEnumeratingWithState:&v59 objects:v63 count:16];
      }
      while (v28);

      if (!v29 || !v30) {
        goto LABEL_32;
      }
      SEL v38 = sub_10001A308();
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472;
      v55[2] = sub_10041CEC8;
      v55[3] = &unk_10052D7C0;
      id v29 = v29;
      id v56 = v29;
      id v30 = v30;
      id v57 = v30;
      id v58 = v49;
      [v38 modifyUsingTransaction:v55];

      uint64_t v27 = v56;
    }
    else
    {
      id v30 = 0;
      id v29 = 0;
    }

LABEL_32:
    goto LABEL_33;
  }
LABEL_35:

  if (!v6)
  {
    id v41 = v54;
    if (v54) {
      id v41 = objc_getProperty(v54, v40, 32, 1);
    }
    id v6 = v41;
  }
  *(void *)&long long v59 = 0;
  *((void *)&v59 + 1) = &v59;
  *(void *)&long long v60 = 0x2020000000;
  BYTE8(v60) = 0;
  id v42 = *(void **)(v52 + 16);
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472;
  v63[2] = sub_10041BEE8;
  v63[3] = &unk_10052D750;
  id v64 = v54;
  id v43 = v18;
  id v65 = v43;
  id v6 = v6;
  id v66 = v6;
  uint64_t v67 = v52;
  id v68 = &v59;
  [v42 modifyUsingTransaction:v63];
  if (*(unsigned char *)(*((void *)&v59 + 1) + 24))
  {
    if (v9) {
      id v45 = objc_getProperty(v43, v44, 24, 1);
    }
    else {
      id v45 = 0;
    }
    id v46 = v45;
    id v47 = sub_100330828();
    sub_1003327FC((uint64_t)v47, v46);
  }
  unsigned int v48 = sub_1002ED270();
  sub_1002EE378((uint64_t)v48);

  _Block_object_dispose(&v59, 8);
LABEL_44:
}

void sub_10041AAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10041AAC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = +[NSNumber numberWithLongLong:v5];
  id v7 = sub_10041E684((uint64_t)AppInstallInfo, v6);

  uint64_t v9 = *(void **)(a1 + 32);
  if (v9)
  {
    switch(v9[3])
    {
      case 0:
        goto LABEL_5;
      case 1:
        id v14 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          break;
        }
        if (v7) {
          id Property = objc_getProperty(v7, v19, 80, 1);
        }
        else {
          id Property = 0;
        }
        id v21 = Property;
        int v45 = 138412290;
        id v46 = v21;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] Waiting for installation to complete", (uint8_t *)&v45, 0xCu);
        goto LABEL_45;
      case 2:
        if (v7) {
          uint64_t v17 = v7[8];
        }
        else {
          uint64_t v17 = 0;
        }
        id v18 = objc_getProperty(v9, v8, 16, 1);
        if (v3) {
          sub_1002357D4(v3, v17, v18, 0);
        }

        goto LABEL_47;
      case 3:
        sub_100417CD0(*(void *)(a1 + 40), v7, v3);
        goto LABEL_47;
      case 4:
        id v22 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          if (v7) {
            id v24 = objc_getProperty(v7, v23, 80, 1);
          }
          else {
            id v24 = 0;
          }
          id v25 = v24;
          int v45 = 138412290;
          id v46 = v25;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%@] Advancing installation phase to post-processing", (uint8_t *)&v45, 0xCu);
        }
        id v26 = [AppInstallEntity alloc];
        uint64_t v27 = *(void *)(a1 + 32);
        if (v27) {
          uint64_t v28 = *(void *)(v27 + 8);
        }
        else {
          uint64_t v28 = 0;
        }
        id v29 = [v3 connection];
        id v14 = [(SQLiteEntity *)v26 initWithPersistentID:v28 onConnection:v29];

        [v14 setValue:&off_10054D278 forProperty:@"phase"];
        break;
      case 6:
        uint64_t v31 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          if (v7) {
            id v33 = objc_getProperty(v7, v32, 80, 1);
          }
          else {
            id v33 = 0;
          }
          uint64_t v34 = v33;
          int v45 = 138412290;
          id v46 = v34;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[%@] Installation has been scheduled", (uint8_t *)&v45, 0xCu);
        }
        BOOL v35 = [AppInstallEntity alloc];
        uint64_t v36 = *(void *)(a1 + 32);
        if (v36) {
          uint64_t v37 = *(void *)(v36 + 8);
        }
        else {
          uint64_t v37 = 0;
        }
        SEL v38 = [v3 connection];
        id v14 = [(SQLiteEntity *)v35 initWithPersistentID:v37 onConnection:v38];

        if (sub_10026E91C(v14, @"IFNULL(app_install.phase, 10)") == (id)40)
        {
          [v14 setValue:&off_10054D260 forProperty:@"phase"];
          if (v3)
          {
            id v40 = objc_getProperty(v3, v39, 24, 1);
            id v21 = v40;
            if (v40) {
              v40[16].os_signpost_id_t isa = (Class)((unint64_t)v40[16].isa | 0x20000);
            }
          }
          else
          {
            id v21 = 0;
          }
        }
        else
        {
          id v21 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            if (v7) {
              id v42 = objc_getProperty(v7, v41, 80, 1);
            }
            else {
              id v42 = 0;
            }
            id v43 = v42;
            int v45 = 138412290;
            id v46 = v43;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@] Installation is already complete", (uint8_t *)&v45, 0xCu);
          }
        }
LABEL_45:

        break;
      default:
        id v14 = ASDErrorWithUserInfoAndFormat();
        if (v7)
        {
          uint64_t v30 = v7[8];
          if (!v3) {
            break;
          }
          goto LABEL_30;
        }
        uint64_t v30 = 0;
        if (v3)
        {
LABEL_30:
          sub_1002357D4(v3, v30, v14, 0);
          break;
        }
        break;
    }
  }
  else
  {
LABEL_5:
    id v10 = [AppInstallEntity alloc];
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11) {
      uint64_t v12 = *(void *)(v11 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    id v13 = [v3 connection];
    id v14 = [(SQLiteEntity *)v10 initWithPersistentID:v12 onConnection:v13];

    sub_1002C34E0(v14, &stru_10052D728);
    [v14 setValue:&off_10054D230 forProperty:@"phase"];
    if (v3)
    {
      unsigned int v16 = objc_getProperty(v3, v15, 24, 1);
      if (v16) {
        v16[16] |= 0x8000uLL;
      }
    }
    else
    {
      unsigned int v16 = 0;
    }

    sub_10041E5DC((uint64_t)AppInstallInfo, v7);
  }

LABEL_47:
  return 1;
}

void sub_10041B048(id a1, AppInstallPolicy *a2)
{
}

uint64_t sub_10041B054(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = +[NSNumber numberWithLongLong:v5];
  id v7 = sub_10041E684((uint64_t)AppInstallInfo, v6);

  uint64_t v9 = *(void **)(a1 + 32);
  if (!v9)
  {
LABEL_7:
    uint64_t v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        id Property = objc_getProperty(v7, v12, 80, 1);
      }
      else {
        id Property = 0;
      }
      id v14 = Property;
      int v19 = 138412290;
      id v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Waiting for post processing to complete", (uint8_t *)&v19, 0xCu);
    }
    goto LABEL_20;
  }
  uint64_t v10 = v9[3];
  switch(v10)
  {
    case 2:
      sub_100417CD0(*(void *)(a1 + 40), v7, v3);
      break;
    case 1:
      if (v7) {
        uint64_t v15 = v7[8];
      }
      else {
        uint64_t v15 = 0;
      }
      id v16 = objc_getProperty(v9, v8, 16, 1);
      if (v3) {
        sub_1002357D4((id *)v3, v15, v16, 0);
      }

      break;
    case 0:
      goto LABEL_7;
    default:
      uint64_t v11 = ASDErrorWithUserInfoAndFormat();
      if (v7)
      {
        uint64_t v17 = v7[8];
        if (!v3)
        {
LABEL_20:

          break;
        }
      }
      else
      {
        uint64_t v17 = 0;
        if (!v3) {
          goto LABEL_20;
        }
      }
      sub_1002357D4((id *)v3, v17, v11, 0);
      goto LABEL_20;
  }

  return 1;
}

uint64_t sub_10041B24C(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    objc_storeWeak((id *)(v5 + 88), 0);
  }
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  id v7 = Property;

  if (v7)
  {
    id v9 = *(id *)(a1 + 40);
    if (v9) {
      id v9 = objc_getProperty(v9, v8, 16, 1);
    }
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11) {
      uint64_t v12 = *(void *)(v11 + 64);
    }
    else {
      uint64_t v12 = 0;
    }
    sub_1002392B0(v4, v10, v12);
  }
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    switch(*(void *)(v13 + 32))
    {
      case 0:
        goto LABEL_13;
      case 1:
        uint64_t v36 = ASDLogHandleForCategory();
        uint64_t v37 = v36;
        SEL v38 = *(void **)(a1 + 32);
        if (v38)
        {
          os_signpost_id_t v39 = v38[13];
          if (v39 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v36))
          {
            id v42 = objc_getProperty(v38, v40, 80, 1);
            id v43 = *(id *)(a1 + 40);
            if (v43) {
              id v43 = objc_getProperty(v43, v41, 24, 1);
            }
            id v44 = v43;
            int v45 = sub_100369AD0(v44);
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v42;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v45;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_INTERVAL_END, v39, "Install/Preamble", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", buf, 0x16u);
          }
        }

        id v46 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          id v48 = *(id *)(a1 + 32);
          if (v48) {
            id v48 = objc_getProperty(v48, v47, 80, 1);
          }
          id v50 = v48;
          id v51 = *(id *)(a1 + 40);
          if (v51) {
            id v51 = objc_getProperty(v51, v49, 16, 1);
          }
          id v52 = v51;
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v50;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v52;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[%@] Preflight succeeded with coordinator: %{public}@", buf, 0x16u);
        }
        id v54 = *(id *)(a1 + 40);
        if (v54) {
          id v54 = objc_getProperty(v54, v53, 16, 1);
        }
        id v56 = v54;
        id v57 = *(void **)(a1 + 32);
        if (v57) {
          objc_setProperty_atomic(v57, v55, v56, 32);
        }

        id v59 = *(id *)(a1 + 40);
        if (v59) {
          id v59 = objc_getProperty(v59, v58, 16, 1);
        }
        id v60 = v59;

        if (v60)
        {
          long long v62 = sub_10028E50C();
          id v63 = *(id *)(a1 + 40);
          if (v63) {
            id v63 = objc_getProperty(v63, v61, 16, 1);
          }
          id v64 = v63;
          sub_10028E764((uint64_t)v62, v64);
        }
        uint64_t v65 = *(void *)(a1 + 32);
        if (v65) {
          uint64_t v66 = *(void *)(v65 + 64);
        }
        else {
          uint64_t v66 = 0;
        }
        sub_100238B14(v4, 30, v66);
        uint64_t v67 = *(void *)(a1 + 48);
        id v68 = *(id *)(a1 + 32);
        id v69 = v4;
        if (!v67) {
          goto LABEL_103;
        }
        id v70 = ASDLogHandleForCategory();
        id v71 = v70;
        if (v68)
        {
          os_signpost_id_t v72 = *((void *)v68 + 13);
          if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v70))
          {
            id v74 = objc_getProperty(v68, v73, 80, 1);
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v74;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v71, OS_SIGNPOST_INTERVAL_BEGIN, v72, "Install/Download", " uuid=%{public, signpost.description:attribute}@ ", buf, 0xCu);
          }
        }

        id v75 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        {
          if (v68) {
            id v77 = objc_getProperty(v68, v76, 80, 1);
          }
          else {
            id v77 = 0;
          }
          id v78 = v77;
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v78;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "[%@] Beginning downloading", buf, 0xCu);
        }
        if (!os_variant_has_internal_content() || !sub_1003F4204()) {
          goto LABEL_92;
        }
        if (v68) {
          long long v79 = (void *)*((void *)v68 + 8);
        }
        else {
          long long v79 = 0;
        }
        id v80 = [v69 connection];
        long long v81 = sub_10027B328((uint64_t)AppPackageEntity, (uint64_t)v79, v80);
        if (sub_10026E91C(v81, @"package_type") == (id)1)
        {
          long long v82 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            if (v68) {
              id v84 = objc_getProperty(v68, v83, 80, 1);
            }
            else {
              id v84 = 0;
            }
            id v85 = v84;
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v85;
            _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "[%@] Forcing failure of delta update (expect further error messages prior to expected retry with full update)…", buf, 0xCu);
          }
          id v86 = ASDErrorWithDescription();
          long long v87 = sub_1002AC440((uint64_t)AppInstallDownloadResponse, v79, v86);
          sub_100418D6C(v67, v87);
        }
        else
        {

LABEL_92:
          uint64_t v112 = [AppInstallEntity alloc];
          if (v68) {
            uint64_t v113 = *((void *)v68 + 8);
          }
          else {
            uint64_t v113 = 0;
          }
          __int16 v114 = [v69 connection];
          id v80 = [(SQLiteEntity *)v112 initWithPersistentID:v113 onConnection:v114];

          if ([(SQLiteEntity *)v80 existsInDatabase]
            && !sub_10026E91C(v80, @"source_type"))
          {
            sub_100419178(2, v68, v80);
          }
          if (v68)
          {
            uint64_t v116 = *((void *)v68 + 8);
            id v117 = objc_getProperty(v68, v115, 32, 1);
          }
          else
          {
            uint64_t v116 = 0;
            id v117 = 0;
          }
          id v118 = v117;
          long long v81 = sub_1002AA984((uint64_t)AppInstallDownloadTask, v116, v69, v118);

          objc_initWeak(&location, v81);
          *(void *)long long buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_1004192D0;
          id v129 = &unk_100527140;
          objc_copyWeak(v131, &location);
          uint64_t v130 = v67;
          [v81 setCompletionBlock:buf];
          if (v68) {
            objc_storeWeak((id *)v68 + 11, v81);
          }
          [*(id *)(v67 + 32) addOperation:v81];
          objc_destroyWeak(v131);
          objc_destroyWeak(&location);
        }

LABEL_103:
        break;
      case 2:
        long long v88 = ASDLogHandleForCategory();
        long long v89 = v88;
        long long v90 = *(void **)(a1 + 32);
        if (v90)
        {
          os_signpost_id_t v91 = v90[13];
          if (v91 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v88))
          {
            id v94 = objc_getProperty(v90, v92, 80, 1);
            id v95 = *(id *)(a1 + 40);
            if (v95) {
              id v95 = objc_getProperty(v95, v93, 24, 1);
            }
            id v96 = v95;
            uint64_t v97 = sub_100369AD0(v96);
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v94;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v97;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v89, OS_SIGNPOST_INTERVAL_END, v91, "Install/Preamble", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", buf, 0x16u);
          }
        }

        id v98 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        {
          id v122 = *(id *)(a1 + 32);
          if (v122) {
            id v122 = objc_getProperty(v122, v99, 80, 1);
          }
          id v124 = v122;
          id v125 = *(id *)(a1 + 40);
          if (v125) {
            id v125 = objc_getProperty(v125, v123, 24, 1);
          }
          id v126 = v125;
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v124;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v126;
          _os_log_error_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "[%@] Preflight failed with error: %{public}@", buf, 0x16u);
        }
        id v101 = *(void **)(a1 + 40);
        if (v101)
        {
          uint64_t v102 = v101[1];
          id v101 = objc_getProperty(v101, v100, 24, 1);
        }
        else
        {
          uint64_t v102 = 0;
        }
        long long v103 = v101;
        if (v4) {
          sub_1002357D4((id *)v4, v102, v103, 0);
        }

        break;
      case 3:
        long long v104 = ASDLogHandleForCategory();
        long long v105 = v104;
        long long v106 = *(void **)(a1 + 32);
        if (v106)
        {
          os_signpost_id_t v107 = v106[13];
          if (v107 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v104))
          {
            id v109 = objc_getProperty(v106, v108, 80, 1);
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v109;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v105, OS_SIGNPOST_INTERVAL_END, v107, "Install/Preamble", " uuid=%{public, signpost.description:attribute}@ ", buf, 0xCu);
          }
        }

        NSErrorUserInfoKey v110 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
        {
          id v120 = *(id *)(a1 + 32);
          if (v120) {
            id v120 = objc_getProperty(v120, v111, 80, 1);
          }
          id v121 = v120;
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v121;
          _os_log_error_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "[%@] Preflight finished and will proceed to installation", buf, 0xCu);
        }
        sub_1004193F4(*(void *)(a1 + 48), *(void **)(a1 + 32), v4);
        break;
      default:
        break;
    }
  }
  else
  {
LABEL_13:
    id v14 = ASDLogHandleForCategory();
    uint64_t v15 = v14;
    id v16 = *(void **)(a1 + 32);
    if (v16)
    {
      os_signpost_id_t v17 = v16[13];
      if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
      {
        id v20 = objc_getProperty(v16, v18, 80, 1);
        id v21 = *(id *)(a1 + 40);
        if (v21) {
          id v21 = objc_getProperty(v21, v19, 24, 1);
        }
        id v22 = v21;
        unsigned int v23 = sub_100369AD0(v22);
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v23;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_END, v17, "Install/Preamble", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", buf, 0x16u);
      }
    }

    id v24 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      id v26 = *(id *)(a1 + 32);
      if (v26) {
        id v26 = objc_getProperty(v26, v25, 80, 1);
      }
      id v28 = v26;
      id v29 = *(id *)(a1 + 40);
      if (v29) {
        id v29 = objc_getProperty(v29, v27, 16, 1);
      }
      id v31 = v29;
      id v32 = *(id *)(a1 + 40);
      if (v32) {
        id v32 = objc_getProperty(v32, v30, 24, 1);
      }
      id v33 = v32;
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v31;
      *(_WORD *)&buf[22] = 2114;
      id v129 = v33;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] Preflight canceled with coordinator: %{public}@ error: %{public}@", buf, 0x20u);
    }
    uint64_t v34 = *(void *)(a1 + 40);
    if (v34) {
      uint64_t v35 = *(void *)(v34 + 8);
    }
    else {
      uint64_t v35 = 0;
    }
    sub_100237218((id *)v4, v35, -30);
  }

  return 1;
}

void sub_10041BE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10041BE80(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  if (v3) {
    uint64_t v6 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v6 = 0;
  }
  sub_100237218(v4, v6, -40);

  sub_10041E5DC((uint64_t)AppInstallInfo, *(void **)(a1 + 32));
  return 1;
}

uint64_t sub_10041BEE8(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id v6 = objc_getProperty(v5, v3, 48, 1);
    if (v6)
    {
      id v7 = [AppInstallEntity alloc];
      uint64_t v8 = *(void *)(a1 + 40);
      if (v8) {
        uint64_t v9 = *(void *)(v8 + 64);
      }
      else {
        uint64_t v9 = 0;
      }
      id v10 = [v4 connection];
      uint64_t v11 = [(SQLiteEntity *)v7 initWithPersistentID:v9 onConnection:v10];

      [(SQLiteEntity *)v11 setValue:v6 forProperty:@"metrics_fields"];
    }
  }
  else
  {
    id v6 = 0;
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v12 = ASDLogHandleForCategory();
    uint64_t v13 = v12;
    id v14 = *(void **)(a1 + 40);
    if (v14)
    {
      os_signpost_id_t v15 = v14[13];
      if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
      {
        id v17 = objc_getProperty(v14, v16, 80, 1);
        id v18 = sub_100369AD0(*(id *)(a1 + 48));
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, v15, "Install/Download", " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ", buf, 0x16u);
      }
    }

    if (ASDErrorIsEqual())
    {
      int v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        id Property = *(id *)(a1 + 40);
        if (Property) {
          id Property = objc_getProperty(Property, v20, 80, 1);
        }
        id v22 = Property;
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%@] Download canceled", buf, 0xCu);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      goto LABEL_118;
    }
    uint64_t v36 = *(void *)(a1 + 56);
    SEL v38 = *(void **)(a1 + 32);
    uint64_t v37 = *(void **)(a1 + 40);
    self = *(unsigned char **)(*(void *)(a1 + 64) + 8);
    id v118 = *(id *)(a1 + 48);
    os_signpost_id_t v39 = v37;
    id v117 = v38;
    id v119 = v4;
    if (!v36)
    {
LABEL_117:

LABEL_118:
      sub_10041E5DC((uint64_t)AppInstallInfo, *(void **)(a1 + 40));
      goto LABEL_119;
    }
    id v40 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      if (v39) {
        id v42 = objc_getProperty(v39, v41, 80, 1);
      }
      else {
        id v42 = 0;
      }
      id v43 = v42;
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v43;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v118;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "[%@] Download failed with error: %{public}@", buf, 0x16u);
    }
    id v44 = [AppInstallEntity alloc];
    if (v39) {
      uint64_t v45 = v39[8];
    }
    else {
      uint64_t v45 = 0;
    }
    id v46 = [v119 connection];
    id v47 = [(SQLiteEntity *)v44 initWithPersistentID:v45 onConnection:v46];

    if (!sub_10026E91C(v47, @"source_type") && ASDErrorIsEqual())
    {
      id v48 = v47;
      selfa = v39;
      id v113 = v119;
      uint64_t v49 = (uint64_t)sub_10026E91C(v48, @"recovery_count");
      unsigned __int8 v50 = sub_1002C1E20(v48);
      if (v49 < 1) {
        char v51 = 1;
      }
      else {
        char v51 = v50;
      }
      char v111 = v51;
      if (v51)
      {
        if (v49 >= 2)
        {

          goto LABEL_110;
        }
        oslog = ASDLogHandleForCategory();
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          if (v39) {
            id v53 = objc_getProperty(selfa, v52, 80, 1);
          }
          else {
            id v53 = 0;
          }
          id v54 = v53;
          *(_DWORD *)id v125 = 138412290;
          *(void *)&v125[4] = v54;
          _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "[%@] Attempting expired download recovery for update", v125, 0xCu);
        }
        if (v49 >= 1) {
          uint64_t v55 = v49 + 1;
        }
        else {
          uint64_t v55 = 1;
        }
        id v56 = +[NSNumber numberWithInteger:v55];
        [(SQLiteEntity *)v48 setValue:v56 forProperty:@"recovery_count"];

        id v57 = sub_100260DE0((uint64_t)ExpiredUpdateRecoveryTask, v48);
        objc_initWeak((id *)v125, v57);
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_10041CDA8;
        id v121 = &unk_10052D798;
        objc_copyWeak(v124, (id *)v125);
        uint64_t v122 = v36;
        uint64_t v123 = selfa;
        [v57 setCompletionBlock:buf];
        uint64_t v58 = sub_1002B2A3C();
        id v59 = (void *)v58;
        if (v58) {
          [*(id *)(v58 + 8) addOperation:v57];
        }

        objc_destroyWeak(v124);
        objc_destroyWeak((id *)v125);
      }
      else
      {
        id v57 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          if (v39) {
            id v95 = objc_getProperty(selfa, v94, 80, 1);
          }
          else {
            id v95 = 0;
          }
          id v96 = v95;
          *(_DWORD *)id v125 = 138412290;
          *(void *)&v125[4] = v96;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "[%@] Expired download recovery for user-initiated update has already been attempted", v125, 0xCu);
        }
      }

      if (v111) {
        goto LABEL_116;
      }
LABEL_110:
      id v99 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
      {
        if (v39) {
          id v106 = objc_getProperty(selfa, v100, 80, 1);
        }
        else {
          id v106 = 0;
        }
        id v107 = v106;
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v107;
        _os_log_error_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_ERROR, "[%@] Cannot recover from expired download for this installation", buf, 0xCu);
      }
      if (v39) {
        uint64_t v101 = selfa[8];
      }
      else {
        uint64_t v101 = 0;
      }
      if (v117) {
        char v102 = v117[8] & 1;
      }
      else {
        char v102 = 0;
      }
      sub_1002357D4((id *)v113, v101, v118, v102);
      goto LABEL_116;
    }
    id v60 = v118;
    long long v61 = [v60 domain];
    unsigned int v62 = [v61 isEqualToString:NSURLErrorDomain];

    if (v62)
    {
      id v63 = [v60 code];
      if ((unint64_t)v63 + 1009 <= 8 && ((1 << (v63 - 15)) & 0x111) != 0)
      {

        id v64 = v39;
        uint64_t v65 = v119;
        uint64_t v66 = v47;
        __int16 v114 = sub_100259614();
        uint64_t v112 = sub_1002C2130(v66);

        if ([v114 isExpensive]
          && (uint64_t v67 = sub_1003D4CF0((id *)v112), (unint64_t)v67 <= 4)
          && ((1 << (char)v67) & 0x15) != 0)
        {
          id v68 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
          {
            if (v39) {
              id v70 = objc_getProperty(v64, v69, 80, 1);
            }
            else {
              id v70 = 0;
            }
            id v71 = v70;
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v71;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "[%@] Pausing download - policy prevents expensive networks", buf, 0xCu);
          }
        }
        else
        {
          if (![v114 isConstrained]
            || (long long v79 = sub_1003D4C34((id *)v112), (unint64_t)v79 > 4)
            || ((1 << (char)v79) & 0x15) == 0)
          {
            if (v39) {
              uint64_t v93 = (uint64_t)v64[8];
            }
            else {
              uint64_t v93 = 0;
            }
            sub_100236968(v65, v93);
LABEL_96:

LABEL_116:
            goto LABEL_117;
          }
          id v68 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
          {
            if (v39) {
              id v81 = objc_getProperty(v64, v80, 80, 1);
            }
            else {
              id v81 = 0;
            }
            id v82 = v81;
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v82;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "[%@] Pausing download - policy prevents constrained networks", buf, 0xCu);
          }
        }

        if (v39)
        {
          sub_1002386A4((id *)v65, v64[8], -15, 3uLL);
          id v84 = objc_getProperty(v64, v83, 32, 1);
        }
        else
        {
          sub_1002386A4((id *)v65, 0, -15, 3uLL);
          id v84 = 0;
        }
        id v85 = v84;
        *(void *)id v125 = 0;
        unsigned __int8 v86 = [v85 pauseWithError:v125];
        id v87 = *(id *)v125;

        if ((v86 & 1) == 0)
        {
          long long v88 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          {
            if (v39) {
              id v108 = objc_getProperty(v64, v89, 80, 1);
            }
            else {
              id v108 = 0;
            }
            id v109 = v108;
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v109;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v87;
            _os_log_error_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "[%@] Failed to pause for policy error: %{public}@", buf, 0x16u);
          }
        }
        self[24] = 1;

        goto LABEL_96;
      }
    }

    os_signpost_id_t v72 = [v60 domain];
    unsigned int v73 = [v72 isEqualToString:SZExtractorErrorDomain];

    if (!v73)
    {
      if (v39) {
        uint64_t v77 = v39[8];
      }
      else {
        uint64_t v77 = 0;
      }
      if (v117) {
        char v78 = v117[8] & 1;
      }
      else {
        char v78 = 0;
      }
      sub_1002357D4((id *)v119, v77, v60, v78);
      self[24] = 1;
      goto LABEL_116;
    }
    id v74 = sub_1002C23B8(v47);
    if (sub_10026E91C(v74, @"package_type") == (id)1)
    {
      id v75 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        if (v39) {
          id v104 = objc_getProperty(v39, v76, 80, 1);
        }
        else {
          id v104 = 0;
        }
        id v105 = v104;
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v105;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v60;
        _os_log_error_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "[%@] Ignoring data promise failure to wait for delta recovery error: %{public}@", buf, 0x16u);
      }
    }
    else
    {
      if ([v60 code] != (id)4 && objc_msgSend(v60, "code") != (id)2 || v117 && (v117[8] & 1) != 0)
      {
        if (v39) {
          uint64_t v97 = v39[8];
        }
        else {
          uint64_t v97 = 0;
        }
        if (v117) {
          char v98 = v117[8] & 1;
        }
        else {
          char v98 = 0;
        }
        sub_1002357D4((id *)v119, v97, v60, v98);
        goto LABEL_108;
      }
      id v75 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        if (v39) {
          id v91 = objc_getProperty(v39, v90, 80, 1);
        }
        else {
          id v91 = 0;
        }
        id v92 = v91;
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v92;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v60;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "[%@] Ignoring data promise failure to wait for corrupt asset cache recovery error: %{public}@", buf, 0x16u);
      }
    }

LABEL_108:
    self[24] = 1;

    goto LABEL_116;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  id v24 = *(id *)(a1 + 40);
  id v25 = v4;
  if (v23)
  {
    id v26 = ASDLogHandleForCategory();
    uint64_t v27 = v26;
    if (v24)
    {
      os_signpost_id_t v28 = v24[13];
      if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
      {
        id v30 = objc_getProperty(v24, v29, 80, 1);
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v30;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_INTERVAL_END, v28, "Install/Download", " uuid=%{public, signpost.description:attribute}@ ", buf, 0xCu);
      }
    }

    id v31 = [AppInstallEntity alloc];
    if (v24) {
      uint64_t v32 = v24[8];
    }
    else {
      uint64_t v32 = 0;
    }
    id v33 = [v25 connection];
    uint64_t v34 = [(SQLiteEntity *)v31 initWithPersistentID:v32 onConnection:v33];

    if (!sub_10026E91C(v34, @"source_type")) {
      sub_100419178(3, v24, v34);
    }
    sub_1002C34E0(v34, &stru_10052D770);
    uint64_t v35 = +[NSNull null];
    [(SQLiteEntity *)v34 setValue:v35 forProperty:@"optimal_download_start"];

    sub_1004193F4(v23, v24, v25);
  }

LABEL_119:
  return 1;
}

void sub_10041CD28(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_10041CD50(id a1, AppInstallPolicy *a2)
{
  uint64_t v2 = a2;
  sub_1003D4ECC((uint64_t)v2, 0);
  sub_1003D5150((uint64_t)v2, 0);
  sub_1003D4A94((uint64_t)v2, 0);
}

void sub_10041CDA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 32);
  id v12 = WeakRetained;
  if (WeakRetained)
  {
    char v5 = WeakRetained[24] & 1;
    id WeakRetained = objc_getProperty(WeakRetained, v3, 32, 1);
  }
  else
  {
    char v5 = 0;
  }
  id v6 = WeakRetained;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = v6;
  id v9 = v7;
  id v10 = v9;
  if (v4)
  {
    uint64_t v11 = *(void **)(v4 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_10041CEDC;
    v13[3] = &unk_10052D7E8;
    char v16 = v5;
    id v14 = v9;
    os_signpost_id_t v15 = v8;
    [v11 modifyUsingTransaction:v13];
  }
}

uint64_t sub_10041CEC8(void **a1, void *a2)
{
  return sub_100375BB4(a2, a1[4], a1[5], a1[6]);
}

uint64_t sub_10041CEDC(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = a2;
  char v5 = ASDLogHandleForCategory();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v6)
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v7, 80, 1);
      }
      id v13 = Property;
      uint64_t v14 = *(void *)(a1 + 40);
      int v18 = 138412546;
      id v19 = v13;
      __int16 v20 = 2114;
      uint64_t v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] Failing after unsuccessful recovery error %{public}@", (uint8_t *)&v18, 0x16u);
    }
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 64);
      if (!v4) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (!v4) {
        goto LABEL_16;
      }
    }
    sub_1002357D4(v4, v16, *(void **)(a1 + 40), 0);
    goto LABEL_16;
  }
  if (v6)
  {
    id v8 = *(id *)(a1 + 32);
    if (v8) {
      id v8 = objc_getProperty(v8, v7, 80, 1);
    }
    id v9 = v8;
    int v18 = 138412290;
    id v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] Restarting after successful recovery", (uint8_t *)&v18, 0xCu);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v11 = 0;
  }
  sub_100236968(v4, v11);
LABEL_16:

  return 1;
}

id sub_10041D0E4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  int v3 = +[NSUUID UUID];
  uint64_t v4 = [v3 UUIDString];

  char v5 = +[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:v4];
  sub_10041D184(v5);
  sub_10041D228(v5, v2);

  return v5;
}

void sub_10041D184(void *a1)
{
  if (a1)
  {
    [a1 setHTTPCookieAcceptPolicy:1];
    [a1 setHTTPShouldSetCookies:0];
    [a1 setHTTPShouldUsePipelining:1];
    [a1 setRequestCachePolicy:1];
    objc_msgSend(a1, "set_timingDataOptions:", 69);
    id v2 = +[NSSet setWithObject:@"Accept-Language"];
    objc_msgSend(a1, "set_suppressedAutoAddedHTTPHeaders:", v2);
  }
}

void sub_10041D228(void *a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!a1) {
    goto LABEL_29;
  }
  if (v3)
  {
    id v6 = objc_getProperty(v3, v4, 144, 1);
    objc_msgSend(a1, "set_sourceApplicationBundleIdentifier:", v6);

    id Property = objc_getProperty(v5, v7, 80, 1);
  }
  else
  {
    objc_msgSend(a1, "set_sourceApplicationBundleIdentifier:", 0);
    id Property = 0;
  }
  id v9 = Property;
  objc_msgSend(a1, "set_sourceApplicationSecondaryIdentifier:", v9);

  if (v5)
  {
    if (*((unsigned char *)v5 + 13))
    {
      CFStringRef v31 = @"NSAllowsArbitraryLoads";
      uint64_t v32 = &__kCFBooleanFalse;
      uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      id v26 = 0;
      uint64_t v11 = +[NSPropertyListSerialization dataWithPropertyList:v10 format:200 options:0 error:&v26];
      id v12 = v26;

      if (v11)
      {
        objc_msgSend(a1, "set_atsContext:", v11);
      }
      else
      {
        id v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          id v25 = objc_getProperty(v5, v14, 128, 1);
          *(_DWORD *)long long buf = 138412546;
          id v28 = v25;
          __int16 v29 = 2114;
          id v30 = v12;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@] Failed to encode ATS data error: %{public}@", buf, 0x16u);
        }
      }
    }
    objc_msgSend(a1, "set_requiresPowerPluggedIn:", *((unsigned char *)v5 + 15) & 1);
    [a1 setAllowsCellularAccess:*((unsigned char *)v5 + 9) & 1];
    [a1 setAllowsConstrainedNetworkAccess:*((unsigned char *)v5 + 10) & 1];
    [a1 setAllowsExpensiveNetworkAccess:*((unsigned char *)v5 + 11) & 1];
    if (*((void *)v5 + 9) > 2uLL) {
      goto LABEL_15;
    }
    BOOL v16 = (*((void *)v5 + 9) & 7) == 2;
    uint64_t v17 = *((void *)v5 + 9) & 1;
  }
  else
  {
    objc_msgSend(a1, "set_requiresPowerPluggedIn:", 0);
    [a1 setAllowsCellularAccess:0];
    [a1 setAllowsConstrainedNetworkAccess:0];
    [a1 setAllowsExpensiveNetworkAccess:0];
    BOOL v16 = 0;
    uint64_t v17 = 0;
  }
  [a1 setDiscretionary:v16];
  objc_msgSend(a1, "set_infersDiscretionaryFromOriginatingClient:", v17);
  if (v5)
  {
LABEL_15:
    id v18 = objc_getProperty(v5, v15, 152, 1);
    goto LABEL_16;
  }
  id v18 = 0;
LABEL_16:
  id v19 = v18;

  if (v19)
  {
    if (v5) {
      id v21 = objc_getProperty(v5, v20, 152, 1);
    }
    else {
      id v21 = 0;
    }
    id v22 = v21;
    [a1 setProtocolClasses:v22];
  }
  if (v5 && *((void *)v5 + 7))
  {
    self;
    if (qword_1005B1410 != -1) {
      dispatch_once(&qword_1005B1410, &stru_10052D808);
    }
    uint64_t v23 = *((void *)v5 + 7);
    if (v23 == 1)
    {
      CFStringRef v24 = @"com.apple.appstored.connectionPool.apps";
      goto LABEL_28;
    }
    if (v23 == 2)
    {
      CFStringRef v24 = @"com.apple.appstored.connectionPool.odr";
LABEL_28:
      objc_msgSend(a1, "set_connectionPoolName:", v24);
    }
  }
LABEL_29:
}

id sub_10041D5A4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[NSURLSessionConfiguration ephemeralSessionConfiguration];
  sub_10041D184(v3);
  sub_10041D228(v3, v2);

  objc_msgSend(v3, "set_connectionCachePurgeTimeout:", 1.0);
  objc_msgSend(v3, "set_longLivedConnectionCachePurgeTimeout:", 1.0);
  objc_msgSend(v3, "set_preventsIdleSleepOnceConnected:", 1);
  return v3;
}

id sub_10041D634(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  uint64_t v4 = sub_10041D68C(v3, v2);

  return v4;
}

id sub_10041D68C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v4 = +[NSMutableArray arrayWithObject:@"com.apple.appstored"];
  if (v2) {
    id Property = objc_getProperty(v2, v3, 144, 1);
  }
  else {
    id Property = 0;
  }
  id v6 = Property;

  if (v6)
  {
    if (v2) {
      id v8 = objc_getProperty(v2, v7, 144, 1);
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;
    [v4 addObject:v9];
  }
  if (v2) {
    id v10 = objc_getProperty(v2, v7, 80, 1);
  }
  else {
    id v10 = 0;
  }
  id v11 = v10;

  if (v11)
  {
    if (v2) {
      id v13 = objc_getProperty(v2, v12, 80, 1);
    }
    else {
      id v13 = 0;
    }
    id v14 = v13;
    [v4 addObject:v14];
  }
  if (!v2)
  {
    [v4 addObject:@"inexpensive"];
    [v4 addObject:@"wifi"];
    [v4 addObject:@"nolowdata"];
LABEL_33:
    [v4 addObject:@"utility"];
    goto LABEL_34;
  }
  if (*((unsigned char *)v2 + 13)) {
    [v4 addObject:@"ats"];
  }
  uint64_t v15 = *((void *)v2 + 9);
  if (v15 == 2)
  {
    CFStringRef v16 = @"discretionary-always";
  }
  else
  {
    if (v15 != 1) {
      goto LABEL_21;
    }
    CFStringRef v16 = @"discretionary-inferred";
  }
  [v4 addObject:v16];
LABEL_21:
  if ((*((unsigned char *)v2 + 11) & 1) == 0) {
    [v4 addObject:@"inexpensive"];
  }
  if (*((unsigned char *)v2 + 9))
  {
    if (*((unsigned char *)v2 + 12)) {
      goto LABEL_28;
    }
    CFStringRef v17 = @"phone";
  }
  else
  {
    CFStringRef v17 = @"wifi";
  }
  [v4 addObject:v17];
LABEL_28:
  if ((*((unsigned char *)v2 + 10) & 1) == 0) {
    [v4 addObject:@"nolowdata"];
  }
  if (*((unsigned char *)v2 + 15)) {
    [v4 addObject:@"power"];
  }
  if (*((_DWORD *)v2 + 4) <= 0x11u) {
    goto LABEL_33;
  }
LABEL_34:
  id v18 = [v4 componentsJoinedByString:@"."];

  return v18;
}

void sub_10041D8E4(id a1)
{
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2050000000;
  uint64_t v1 = (void *)qword_1005B1418;
  uint64_t v10 = qword_1005B1418;
  if (!qword_1005B1418)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_10041DB04;
    v6[3] = &unk_1005243D0;
    void v6[4] = &v7;
    sub_10041DB04((uint64_t)v6);
    uint64_t v1 = (void *)v8[3];
  }
  id v2 = v1;
  _Block_object_dispose(&v7, 8);
  uint64_t v3 = [v2 sharedScheduler];
  uint64_t v4 = [sub_10041DA20() groupWithName:@"com.apple.appstored.connectionPool.apps" maxConcurrent:4];
  [v3 createActivityGroup:v4];

  id v5 = [sub_10041DA20() groupWithName:@"com.apple.appstored.connectionPool.odr" maxConcurrent:3];
  [v3 createActivityGroup:v5];
}

void sub_10041DA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10041DA20()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1005B1428;
  uint64_t v7 = qword_1005B1428;
  if (!qword_1005B1428)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10041DCF4;
    v3[3] = &unk_1005243D0;
    v3[4] = &v4;
    sub_10041DCF4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10041DAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10041DB04(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("_DASScheduler");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B1418 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    sub_10041DB74();
  }
}

void sub_10041DB74()
{
  v1[0] = 0;
  if (!qword_1005B1420)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_10041DC80;
    v1[4] = &unk_100521BF0;
    v1[5] = v1;
    long long v2 = off_10052D828;
    uint64_t v3 = 0;
    qword_1005B1420 = _sl_dlopen();
    uint64_t v0 = (void *)v1[0];
    if (qword_1005B1420)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      uint64_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t sub_10041DC80()
{
  uint64_t result = _sl_dlopen();
  qword_1005B1420 = result;
  return result;
}

Class sub_10041DCF4(uint64_t a1)
{
  sub_10041DB74();
  Class result = objc_getClass("_DASActivityGroup");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B1428 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (ConcatenateEnumerator *)abort_report_np();
    return (Class)[(ConcatenateEnumerator *)v3 nextObject];
  }
  return result;
}

void sub_10041DE14(void *a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    char v15 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = a1;
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v16 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
LABEL_4:
      uint64_t v8 = 0;
      while (1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * v8);
        v3[2](v3, v9, &v15);
        if (v15) {
          break;
        }
        if (v6 == (id)++v8)
        {
          id v6 = [v4 countByEnumeratingWithState:&v11 objects:v16 count:16];
          if (v6) {
            goto LABEL_4;
          }
          break;
        }
      }
    }
  }
}

id sub_10041DF50(id a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    id v4 = +[NSMutableArray array];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id obj = a1;
    id v5 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v21;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v21 != v7) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = v3[2](v3, *(void *)(*((void *)&v20 + 1) + 8 * i));
          long long v16 = 0u;
          long long v17 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          id v10 = [v9 countByEnumeratingWithState:&v16 objects:v24 count:16];
          if (v10)
          {
            id v11 = v10;
            uint64_t v12 = *(void *)v17;
            do
            {
              for (j = 0; j != v11; j = (char *)j + 1)
              {
                if (*(void *)v17 != v12) {
                  objc_enumerationMutation(v9);
                }
                [v4 addObject:*(void *)(*((void *)&v16 + 1) + 8 * (void)j)];
              }
              id v11 = [v9 countByEnumeratingWithState:&v16 objects:v24 count:16];
            }
            while (v11);
          }
        }
        id v6 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
      }
      while (v6);
    }

    a1 = [v4 copy];
  }

  return a1;
}

id sub_10041E130(id a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    id v4 = +[NSMutableArray array];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = a1;
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = v3[2](v3, *(void *)(*((void *)&v12 + 1) + 8 * i));
          if (v10) {
            objc_msgSend(v4, "addObject:", v10, (void)v12);
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v7);
    }

    a1 = [v4 copy];
  }

  return a1;
}

id sub_10041E29C()
{
  self;
  v2[0] = @"bundle_id";
  v2[1] = @"coordinator_id";
  v2[2] = @"external_id";
  v2[3] = @"item_id";
  v2[4] = @"log_code";
  v2[5] = @"IFNULL(app_install.priority, 0)";
  uint64_t v0 = +[NSArray arrayWithObjects:v2 count:6];
  return v0;
}

id sub_10041E360(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)AppInstallInfo;
    a1 = objc_msgSendSuper2(&v20, "init");
    if (a1)
    {
      *((void *)a1 + _Block_object_dispose(&a9, 8) = [v5 longLongValue];
      uint64_t v7 = [v6 objectForKeyedSubscript:@"bundle_id"];
      uint64_t v8 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v7;

      uint64_t v9 = [v6 objectForKeyedSubscript:@"coordinator_id"];
      id v10 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v9;

      uint64_t v11 = [v6 objectForKeyedSubscript:@"external_id"];
      long long v12 = (void *)*((void *)a1 + 7);
      *((void *)a1 + 7) = v11;

      long long v13 = (void *)*((void *)a1 + 7);
      if (v13)
      {
        v21[0] = 0;
        v21[1] = 0;
        [v13 getUUIDBytes:v21];
        uint64_t v14 = v21[0];
      }
      else
      {
        uint64_t v14 = 0;
      }
      *((void *)a1 + 13) = v14;
      uint64_t v15 = [v6 objectForKeyedSubscript:@"item_id"];
      long long v16 = (void *)*((void *)a1 + 9);
      *((void *)a1 + 9) = v15;

      long long v17 = [[_TtC9appstored6LogKey alloc] initWithAppInstallDictionary:v6];
      long long v18 = (void *)*((void *)a1 + 10);
      *((void *)a1 + 10) = v17;

      *((_DWORD *)a1 + 2) = 0;
    }
  }

  return a1;
}

void sub_10041E510(uint64_t a1, void *a2)
{
  uint64_t v7 = a2;
  self;
  os_unfair_lock_lock(&stru_1005B1FA8);
  long long v2 = (void *)qword_1005B1FA0;
  if (!qword_1005B1FA0)
  {
    uint64_t v3 = +[NSMapTable strongToStrongObjectsMapTable];
    id v4 = (void *)qword_1005B1FA0;
    qword_1005B1FA0 = v3;

    long long v2 = (void *)qword_1005B1FA0;
  }
  if (v7) {
    uint64_t v5 = v7[8];
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = +[NSNumber numberWithLongLong:v5];
  [v2 setObject:v7 forKey:v6];

  os_unfair_lock_unlock(&stru_1005B1FA8);
}

void sub_10041E5DC(uint64_t a1, void *a2)
{
  uint64_t v5 = a2;
  self;
  os_unfair_lock_lock(&stru_1005B1FA8);
  long long v2 = (void *)qword_1005B1FA0;
  if (qword_1005B1FA0)
  {
    if (v5) {
      uint64_t v3 = v5[8];
    }
    else {
      uint64_t v3 = 0;
    }
    id v4 = +[NSNumber numberWithLongLong:v3];
    [v2 removeObjectForKey:v4];
  }
  os_unfair_lock_unlock(&stru_1005B1FA8);
}

id sub_10041E684(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  os_unfair_lock_lock(&stru_1005B1FA8);
  if (qword_1005B1FA0)
  {
    uint64_t v3 = [(id)qword_1005B1FA0 objectForKey:v2];
  }
  else
  {
    uint64_t v3 = 0;
  }
  os_unfair_lock_unlock(&stru_1005B1FA8);

  return v3;
}

void sub_10041E7A8(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindArray:v5 atPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindDictionary:v5 atPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindString:v5 atPosition:a2];
    goto LABEL_10;
  }
  if (!v5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    [v9 bindNullAtPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v5 timeIntervalSinceReferenceDate];
LABEL_15:
    objc_msgSend(v9, "bindDouble:atPosition:", a2);
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindData:v5 atPosition:a2];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v9 bindUUID:v5 atPosition:a2];
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v6 = [v5 absoluteString];
        [v9 bindString:v6 atPosition:a2];
      }
      else
      {
        id v7 = v5;
        uint64_t v8 = (const char *)[v7 objCType];
        if (!strcmp(v8, "d") || !strcmp(v8, "f"))
        {
          [v7 doubleValue];
          goto LABEL_15;
        }
        objc_msgSend(v9, "bindInt64:atPosition:", objc_msgSend(v7, "longLongValue"), a2);
      }
    }
  }
LABEL_10:
}

__CFString *sub_10041E9F8(uint64_t a1)
{
  if (a1)
  {
    id v2 = [objc_alloc((Class)NSMutableString) initWithCapacity:3 * a1 + 1];
    [v2 appendString:@"?"];
    uint64_t v3 = a1 - 1;
    if (a1 != 1)
    {
      do
      {
        [v2 appendString:@", ?"];
        --v3;
      }
      while (v3);
    }
    id v4 = (__CFString *)[v2 copy];
  }
  else
  {
    id v4 = &stru_10052E4D8;
  }
  return v4;
}

void *sub_10041EAA0(void *a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    id v4 = 0;
    goto LABEL_9;
  }
  if ((sub_10041EB90() & 1) == 0)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Dropping anonymous pings - DNU submission disabled", buf, 2u);
    }

    id v4 = 0;
    goto LABEL_8;
  }
  v8.receiver = a1;
  v8.super_class = (Class)AnonymousPingTask;
  id v4 = objc_msgSendSuper2(&v8, "init");
  if (v4)
  {
    id v5 = [v3 copy];
    a1 = (void *)v4[5];
    void v4[5] = v5;
LABEL_8:
  }
LABEL_9:

  return v4;
}

uint64_t sub_10041EB90()
{
  self;
  if (!sub_1003363D8()) {
    return 0;
  }
  uint64_t v0 = sub_1003DA6D4();
  uint64_t v1 = [v0 isHRNMode] ^ 1;

  return v1;
}

id sub_10041F030()
{
  self;
  uint64_t v0 = [@"com.apple.itunes.extended-media-kind" stringByReplacingOccurrencesOfString:@"-" withString:@"\\-"];
  id v1 = objc_alloc_init((Class)NSMutableArray);
  [v1 addObject:&off_10054D2A8];
  [v1 addObject:&off_10054D2C0];
  id v2 = objc_alloc_init((Class)NSMutableString);
  if ([v1 count])
  {
    unint64_t v3 = 0;
    do
    {
      if (v3) {
        [v2 appendString:@","];
      }
      id v4 = [v1 objectAtIndexedSubscript:v3];
      [v2 appendFormat:@"'%@:%llu'", v0, objc_msgSend(v4, "unsignedLongLongValue")];

      ++v3;
    }
    while (v3 < (unint64_t)[v1 count]);
  }
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    id v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Query string for DAAP call is: %{public}@", buf, 0xCu);
  }

  id v6 = +[NSString stringWithString:v2];

  return v6;
}

id *sub_10041F328(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  objc_super v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v24.receiver = a1;
    v24.super_class = (Class)ProgressInfo;
    id v10 = (id *)objc_msgSendSuper2(&v24, "init");
    a1 = v10;
    if (v10)
    {
      v10[12] = v7;
      objc_storeStrong(v10 + 13, a4);
      if (v8) {
        uint64_t v11 = v8;
      }
      else {
        sub_100336518([ProgressPortions alloc], 0, 0);
      }
      id v12 = a1[17];
      a1[17] = v11;

      a1[16] = 0;
      uint64_t v13 = +[NSMutableArray arrayWithCapacity:50];
      id v14 = a1[5];
      a1[5] = (id)v13;

      uint64_t v15 = +[NSMutableArray arrayWithCapacity:30];
      id v16 = a1[7];
      a1[7] = (id)v15;

      +[NSDate timeIntervalSinceReferenceDate];
      a1[1] = v17;
      +[NSDate timeIntervalSinceReferenceDate];
      a1[2] = v18;
      +[NSDate timeIntervalSinceReferenceDate];
      a1[3] = v19;
      id v20 = objc_alloc_init((Class)ASDProgress);
      id v21 = a1[9];
      a1[9] = v20;

      [a1[9] setBundleID:v7];
      [a1[9] setCompletedUnitCount:-1];
      [a1[9] setTotalUnitCount:1000];
      [a1[9] setInstallTotalUnitCount:1000];
      [a1[9] setPhase:1];
      if (v8)
      {
        [a1[9] setHasPostProcessing:v8[4] > 0];
        uint64_t v22 = v8[4];
      }
      else
      {
        [a1[9] setHasPostProcessing:0];
        uint64_t v22 = 0;
      }
      [a1[9] setEssentialBackgroundAssetDownloadEstimate:v22];
    }
  }

  return a1;
}

id *sub_10041F4EC(id *result)
{
  if (result)
  {
    id v1 = result;
    [result[5] removeAllObjects];
    [v1[7] removeAllObjects];
    +[NSDate timeIntervalSinceReferenceDate];
    v1[1] = v2;
    +[NSDate timeIntervalSinceReferenceDate];
    v1[2] = v3;
    Class result = (id *)+[NSDate timeIntervalSinceReferenceDate];
    v1[3] = v4;
  }
  return result;
}

id *sub_10041F54C(id *result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = (uint64_t)result;
  if ([result[9] phase] == (id)2)
  {
    +[NSDate timeIntervalSinceReferenceDate];
    double v3 = sub_10041F87C(v1, *(void *)(v1 + 112), v2);
    double v4 = v3;
    if (v3 > 0.0)
    {
      id v5 = *(void **)(v1 + 56);
      id v6 = +[NSNumber numberWithDouble:v3];
      [v5 addObject:v6];

      if ((unint64_t)[*(id *)(v1 + 56) count] >= 0x1F) {
        [*(id *)(v1 + 56) removeObjectAtIndex:0];
      }
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      id v7 = *(id *)(v1 + 56);
      id v8 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
      double v9 = 0.0;
      double v10 = 0.0;
      if (v8)
      {
        id v11 = v8;
        uint64_t v12 = *(void *)v25;
        do
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(void *)v25 != v12) {
              objc_enumerationMutation(v7);
            }
            objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * i), "doubleValue", (void)v24);
            double v10 = v10 + v14;
          }
          id v11 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
        }
        while (v11);
      }

      if ([*(id *)(v1 + 56) count]) {
        double v9 = (double)(uint64_t)ceil((double)(unint64_t)(*(void *)(v1 + 120) - *(void *)(v1 + 112))/ (double)(uint64_t)ceil(v10/ (double)(unint64_t)[*(id *)(v1 + 56) count]));
      }
      double v15 = *(double *)(v1 + 24);
      +[NSDate timeIntervalSinceReferenceDate];
      double v17 = v15 - (double)(uint64_t)ceil(v16 - *(double *)(v1 + 16));
      if (vabdd_f64(v17, v9) / v17 > 0.25)
      {
        +[NSDate timeIntervalSinceReferenceDate];
        *(void *)(v1 + 16) = v18;
        *(double *)(v1 + 24) = v9;
        +[NSDate timeIntervalSinceReferenceDate];
        double v17 = v9 - (double)(uint64_t)ceil(v19 - *(double *)(v1 + 16));
      }
      uint64_t v20 = (uint64_t)v17;
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v20 = -1;
    goto LABEL_23;
  }
  if ([*(id *)(v1 + 72) phase] == (id)5)
  {
    +[NSDate timeIntervalSinceReferenceDate];
    double v22 = sub_10041F87C(v1, *(void *)(v1 + 80), v21);
    double v4 = v22;
    if (v22 > 0.0)
    {
      uint64_t v20 = vcvtpd_s64_f64((double)(unint64_t)(*(void *)(v1 + 88) - *(void *)(v1 + 80)) / v22);
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  sub_10041F4EC((id *)v1);
  uint64_t v20 = -1;
  double v4 = 0.0;
LABEL_23:
  Class result = (id *)objc_msgSend(*(id *)(v1 + 72), "setCompletedUnitCount:", (uint64_t)(*(double *)(v1 + 128) * (double)(uint64_t)objc_msgSend(*(id *)(v1 + 72), "totalUnitCount")));
  if (v4 > 0.0)
  {
    [*(id *)(v1 + 72) setThroughput:v4];
    long long v23 = *(void **)(v1 + 72);
    return (id *)_[v23 setSecondsRemaining:v20];
  }
  return result;
}

double sub_10041F87C(uint64_t a1, unint64_t a2, double a3)
{
  id v6 = objc_alloc_init(ProgressSample);
  id v7 = v6;
  if (v6)
  {
    v6->_time = a3;
    v6->_bytes = a2;
  }
  [*(id *)(a1 + 40) addObject:v6];
  double v8 = 0.0;
  if ((unint64_t)[*(id *)(a1 + 40) count] >= 5)
  {
    double v9 = (double)(unint64_t)[*(id *)(a1 + 40) count];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v10 = *(id *)(a1 + 40);
    id v11 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v25;
      double v14 = 0.0;
      double v15 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v25 != v13) {
            objc_enumerationMutation(v10);
          }
          unint64_t v19 = *(void *)(*((void *)&v24 + 1) + 8 * (void)v18);
          if (v19)
          {
            double v20 = *(double *)(v19 + 16) - *(double *)(a1 + 8);
            unint64_t v19 = *(void *)(v19 + 8);
          }
          else
          {
            double v20 = 0.0 - *(double *)(a1 + 8);
          }
          double v14 = v14 + v20;
          double v15 = v15 + v20 * v20;
          double v16 = v16 + v20 * (double)v19;
          double v17 = v17 + (double)v19;
          uint64_t v18 = (char *)v18 + 1;
        }
        while (v12 != v18);
        id v21 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
        id v12 = v21;
      }
      while (v21);
    }
    else
    {
      double v14 = 0.0;
      double v15 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
    }

    double v8 = (v9 * v16 - v14 * v17) / (v9 * v15 - v14 * v14);
  }
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "count", (void)v24) >= 0x32)
  {
    unint64_t v22 = 0;
    do
      [*(id *)(a1 + 40) removeObjectAtIndex:v22++];
    while (v22 < (unint64_t)[*(id *)(a1 + 40) count]);
  }

  return v8;
}

void *sub_10041FA88(void *result, unint64_t a2)
{
  if (result)
  {
    double v2 = result;
    result[14] = a2;
    uint64_t v3 = result[17];
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 32);
      if (v4 < 1) {
        double v5 = (double)(unint64_t)result[15];
      }
      else {
        double v5 = (double)(v4 + result[15]);
      }
      double v6 = (double)a2 / v5;
      double v7 = *(double *)(v3 + 16);
    }
    else
    {
      double v6 = (double)a2 / (double)(unint64_t)result[15];
      double v7 = 0.0;
    }
    *((double *)result + 16) = v6 * (1.0 - v7);
    double v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = v2[16];
      uint64_t v10 = v2[13];
      uint64_t v11 = v2[14];
      int v13 = 138412802;
      uint64_t v14 = v10;
      __int16 v15 = 2048;
      uint64_t v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%@]: Received download update: %.2f (%lld)", (uint8_t *)&v13, 0x20u);
    }

    [(id)v2[9] setDownloadCompletedUnitCount:v2[14]];
    [(id)v2[9] setDownloadTotalUnitCount:v2[15]];
    if (v2[14] < v2[15]) {
      uint64_t v12 = 2;
    }
    else {
      uint64_t v12 = 3;
    }
    return [(id)v2[9] setPhase:v12];
  }
  return result;
}

void sub_10041FDC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      double v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;

      uint64_t v4 = *(void **)(a1 + 8);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

void sub_1004203C0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_11;
  }
  unsigned int v7 = +[UpdatesManager shouldUseModernUpdates];
  if (v7)
  {
    double v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_state" value:&off_10054D320 comparisonType:2];
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_state" value:&off_10054D320 comparisonType:2];
  v24[0] = v9;
  uint64_t v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_offloaded" equalToValue:&__kCFBooleanFalse];
  v24[1] = v10;
  uint64_t v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"is_per_device" equalToValue:&__kCFBooleanFalse];
  v24[2] = v11;
  uint64_t v12 = +[NSArray arrayWithObjects:v24 count:3];
  double v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v12];

  if (v5)
  {
LABEL_6:
    v23[0] = v8;
    v23[1] = v5;
    int v13 = +[NSArray arrayWithObjects:v23 count:2];
    uint64_t v14 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v13];

    double v8 = (void *)v14;
  }
LABEL_7:
  __int16 v15 = [a1 connection];
  if (v7)
  {
    uint64_t v16 = sub_100300254((uint64_t)_TtC9appstored14MediaAPIUpdate, v15, v8);

    uint64_t v17 = +[MediaAPIUpdate defaultProperties];
  }
  else
  {
    uint64_t v16 = sub_100300254((uint64_t)AppUpdateMemoryEntity, v15, v8);

    v22[0] = @"bundle_id";
    v22[1] = @"store_item_data";
    uint64_t v17 = +[NSArray arrayWithObjects:v22 count:2];
  }
  uint64_t v18 = (void *)v17;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_100420A94;
  v19[3] = &unk_10052D8D8;
  char v21 = v7;
  id v20 = v6;
  [v16 enumerateMemoryEntitiesWithProperties:v18 usingBlock:v19];

LABEL_11:
}

id sub_1004206C4(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"update_state" values:&off_10054E190];
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v3];

    v12[0] = v4;
    v12[1] = v5;
    id v6 = +[NSArray arrayWithObjects:v12 count:2];
    unsigned int v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

    if (+[UpdatesManager shouldUseModernUpdates]) {
      double v8 = _TtC9appstored14MediaAPIUpdate;
    }
    else {
      double v8 = AppUpdateMemoryEntity;
    }
    uint64_t v9 = [v2 connection];
    uint64_t v10 = sub_10030010C((uint64_t)v8, v9, v7);

    id v2 = [v10 buyParams];
  }
  return v2;
}

id sub_100420848(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v7 = 0;
    double v8 = &v7;
    uint64_t v9 = 0x3032000000;
    uint64_t v10 = sub_1000184A8;
    uint64_t v11 = sub_100017E10;
    id v12 = 0;
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v3];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100420990;
    v6[3] = &unk_10052D8B0;
    void v6[4] = &v7;
    sub_1004203C0(a1, v4, v6);
    a1 = (id)v8[5];

    _Block_object_dispose(&v7, 8);
  }

  return a1;
}

void sub_100420978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100420990(uint64_t a1, void *a2)
{
}

id sub_1004209A0(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = +[MediaAPIUpdateEntity bundleIDPropertyKey];
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:v4 equalToValue:v3];

    id v6 = [v2 connection];
    uint64_t v7 = sub_10030010C((uint64_t)_TtC9appstored14MediaAPIUpdate, v6, v5);

    double v8 = +[MediaAPIUpdateEntity metadataPropertyKey];
    id v2 = [v7 valueForProperty:v8];
  }
  return v2;
}

void sub_100420A94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!*(unsigned char *)(a1 + 40))
  {
    sub_10026E95C(v3, @"bundle_id");
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = [v4 valueForProperty:@"store_item_data"];
    uint64_t v7 = (void *)v6;
    if (v5) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      if (isKindOfClass)
      {
        uint64_t v14 = [[AppUpdateMemoryEntity alloc] initWithUpdateDictionary:v7];
        if (v14)
        {
          __int16 v15 = v14;
          (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        }
      }
      goto LABEL_18;
    }
    uint64_t v9 = ASDLogHandleForCategory();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v10)
      {
        __int16 v16 = 0;
        uint64_t v11 = "No bundleID";
        id v12 = (uint8_t *)&v16;
LABEL_21:
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v11, v12, 2u);
      }
    }
    else if (v10)
    {
      *(_WORD *)long long buf = 0;
      uint64_t v11 = "Bad item data";
      id v12 = buf;
      goto LABEL_21;
    }

LABEL_18:
    goto LABEL_19;
  }
  id v5 = v3;
  if (([v5 isOffloaded] & 1) == 0
    && ([v5 isPerDevice] & 1) == 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
LABEL_19:
}

id sub_100420D50()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100420DF4;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B1438 != -1) {
    dispatch_once(&qword_1005B1438, block);
  }
  uint64_t v0 = (void *)qword_1005B1430;
  return v0;
}

void sub_100420DF4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005B1430;
  qword_1005B1430 = (uint64_t)v1;
}

uint64_t sub_100420E2C(uint64_t a1, void *a2, int a3, int a4, BOOL *a5, void *a6)
{
  id v11 = a2;
  uint64_t v54 = a1;
  if (!a1) {
    goto LABEL_44;
  }
  id v12 = +[ACAccountStore ams_sharedAccountStore];
  int v13 = objc_msgSend(v12, "ams_activeiTunesAccount");

  uint64_t v55 = v13;
  uint64_t v14 = objc_msgSend(v13, "ams_DSID");
  uint64_t v15 = sub_10039B764((uint64_t)FamilyInfoLookupTask, v11);
  uint64_t v16 = v15;
  BOOL v17 = v15 != 0;
  if (v15)
  {
    uint64_t v18 = (uint64_t)*(id *)(v15 + 16);
    if (a3)
    {
LABEL_4:
      id v60 = 0;
      sub_100421234(v54, a4 ^ 1, v11, &v60);
      uint64_t v18 = v19 = (void *)v18;
      id v20 = v60;

      BOOL v21 = (v16 | v18) != 0;
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v22 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      long long v23 = objc_opt_class();
      id v52 = v23;
      objc_msgSend(v55, "ams_DSID");
      id v48 = a6;
      long long v25 = v24 = a5;
      *(_DWORD *)long long buf = 138543874;
      id v63 = v23;
      __int16 v64 = 2114;
      id v65 = v11;
      __int16 v66 = 2114;
      uint64_t v67 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Did not find cached FamilyInfo for account: %{public}@", buf, 0x20u);

      a5 = v24;
      a6 = v48;
    }
    uint64_t v18 = 0;
    if (a3) {
      goto LABEL_4;
    }
  }
  id v20 = 0;
  BOOL v21 = v17;
LABEL_9:
  if (v18) {
    BOOL v26 = v20 == 0;
  }
  else {
    BOOL v26 = 0;
  }
  if (!v26 || v14 == 0)
  {
    BOOL v28 = 0;
    if (!a6) {
      goto LABEL_41;
    }
  }
  else
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    unsigned __int8 v50 = a5;
    id v51 = v11;
    uint64_t v53 = v18;
    if (v16) {
      __int16 v29 = *(void **)(v16 + 16);
    }
    else {
      __int16 v29 = 0;
    }
    id v30 = v29;
    id v31 = [v30 countByEnumeratingWithState:&v56 objects:v70 count:16];
    if (v31)
    {
      id v32 = v31;
      id v46 = v20;
      BOOL v47 = v21;
      uint64_t v49 = a6;
      uint64_t v33 = *(void *)v57;
LABEL_23:
      uint64_t v34 = 0;
      while (1)
      {
        if (*(void *)v57 != v33) {
          objc_enumerationMutation(v30);
        }
        uint64_t v35 = *(void *)(*((void *)&v56 + 1) + 8 * v34);
        if (v35)
        {
          id v36 = *(id *)(v35 + 40);
          if (v36)
          {
            uint64_t v37 = v36;
            id v38 = *(id *)(v35 + 40);
            unsigned int v39 = [v38 isEqualToNumber:v14];

            if (v39) {
              break;
            }
          }
        }
        if (v32 == (id)++v34)
        {
          id v40 = [v30 countByEnumeratingWithState:&v56 objects:v70 count:16];
          id v32 = v40;
          if (!v40)
          {
            BOOL v28 = 0;
            id v11 = v51;
            goto LABEL_37;
          }
          goto LABEL_23;
        }
      }
      int v41 = *(unsigned __int8 *)(v35 + 9);
      BOOL v28 = *(unsigned char *)(v35 + 9) != 0;
      id v42 = ASDLogHandleForCategory();
      id v11 = v51;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        id v43 = objc_opt_class();
        *(_DWORD *)long long buf = 138544130;
        id v63 = v43;
        __int16 v64 = 2114;
        id v65 = v51;
        __int16 v66 = 2114;
        uint64_t v67 = v14;
        __int16 v68 = 1024;
        int v69 = v41;
        id v44 = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Family member found for account: %{public}@ askToBuyEnabled: %d", buf, 0x26u);
      }
LABEL_37:
      a6 = v49;
      a5 = v50;
      BOOL v21 = v47;
      id v20 = v46;
    }
    else
    {
      BOOL v28 = 0;
    }

    uint64_t v18 = v53;
    if (!a6) {
      goto LABEL_41;
    }
  }
  *a6 = v20;
LABEL_41:
  if (a5) {
    *a5 = v21;
  }
  BOOL v61 = v28;

  a1 = v61;
LABEL_44:

  return a1;
}

id sub_100421234(uint64_t a1, int a2, void *a3, void *a4)
{
  if (a1)
  {
    sub_100421358(a1, a2, a3, a4);
    [*(id *)(a1 + 48) lock];
    id v5 = [*(id *)(a1 + 32) copy];
    [*(id *)(a1 + 48) unlock];
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_100421294(void *a1)
{
  if (a1)
  {
    a1 = sub_1004212C8((uint64_t)a1, 0);
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1004212C8(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = objc_alloc_init(_TtC9appstored6LogKey);
    sub_100421358(a1, a2, v4, 0);
    [*(id *)(a1 + 48) lock];
    id v5 = [*(id *)(a1 + 24) copy];
    [*(id *)(a1 + 48) unlock];
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

void sub_100421358(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  if (*(double *)(a1 + 40) > 0.0)
  {
    BOOL v8 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
    [v8 timeIntervalSinceNow];
    double v10 = v9;

    if (v10 >= -10800.0)
    {
      id v19 = 0;
      goto LABEL_51;
    }
  }
  id v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543874;
    id v64 = (id)objc_opt_class();
    __int16 v65 = 2114;
    id v66 = v7;
    __int16 v67 = 1024;
    LODWORD(v6_Block_object_dispose(&a9, 8) = 1;
    id v12 = v64;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Bootstrapping family : refresh from server: %d", buf, 0x1Cu);
  }
  int v13 = [FamilyInfoLookupTask alloc];
  uint64_t v14 = sub_10030B11C();
  uint64_t v15 = sub_10039B6E4((id *)v13, v14);

  if (v15)
  {
    objc_setProperty_nonatomic_copy(v15, v16, v7, 16);
    *((unsigned char *)v15 + _Block_object_dispose(&a9, 8) = a2;
  }
  BOOL v17 = sub_10039BDA8(v15);
  id v61 = 0;
  uint64_t v18 = [v17 resultWithError:&v61];
  id v19 = v61;

  if (!v19)
  {
    +[NSDate timeIntervalSinceReferenceDate];
    *(void *)(a1 + 40) = v23;
    if (v18) {
      long long v24 = (void *)v18[2];
    }
    else {
      long long v24 = 0;
    }
    id v25 = v24;

    if (!v25) {
      goto LABEL_47;
    }
    [*(id *)(a1 + 48) lock];
    uint64_t v54 = a4;
    id v55 = v7;
    id v52 = v15;
    id v51 = v18;
    if (v18) {
      BOOL v26 = (void *)v18[2];
    }
    else {
      BOOL v26 = 0;
    }
    id v27 = v26;
    id v28 = [v27 copy];
    __int16 v29 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v28;

    id v30 = +[ActiveAccountObserver activeAccount];
    id v20 = objc_msgSend(v30, "ams_DSID");

    long long v56 = objc_opt_new();
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v53 = a1;
    id v31 = *(id *)(a1 + 32);
    id v32 = [v31 countByEnumeratingWithState:&v57 objects:v62 count:16];
    if (!v32)
    {
LABEL_41:

      id v44 = [v56 copy];
      uint64_t v45 = *(void **)(v53 + 24);
      *(void *)(v53 + 24) = v44;

      [*(id *)(v53 + 48) unlock];
      a4 = v54;
      id v7 = v55;
      uint64_t v15 = v52;
      uint64_t v18 = v51;
      if ([*(id *)(v53 + 24) count])
      {
        id v46 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v47 = objc_opt_class();
          id v48 = *(void **)(v53 + 24);
          id v49 = v47;
          unsigned __int8 v50 = [v48 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138543874;
          id v64 = v47;
          __int16 v65 = 2114;
          id v66 = v55;
          __int16 v67 = 2114;
          id v68 = v50;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Set family accounts to: [%{public}@]", buf, 0x20u);
        }
      }

      id v19 = 0;
      goto LABEL_46;
    }
    id v33 = v32;
    uint64_t v34 = *(void *)v58;
LABEL_17:
    uint64_t v35 = 0;
    while (1)
    {
      if (*(void *)v58 != v34) {
        objc_enumerationMutation(v31);
      }
      uint64_t v36 = *(void *)(*((void *)&v57 + 1) + 8 * v35);
      if (v20)
      {
        if (!v36) {
          goto LABEL_39;
        }
      }
      else
      {
        if (!v36)
        {
          id v19 = 0;
LABEL_39:
          id v37 = 0;
          goto LABEL_27;
        }
        id v42 = *(id *)(v36 + 40);
        id v19 = v42;
        if (v42)
        {

LABEL_34:
          id v39 = v19;
          id v19 = *(id *)(v36 + 40);
          [v56 addObject:v19];
LABEL_35:

          id v19 = v39;
          goto LABEL_36;
        }
      }
      id v37 = *(id *)(v36 + 40);
      if (v37) {
        BOOL v38 = v20 == 0;
      }
      else {
        BOOL v38 = 1;
      }
      if (!v38)
      {
        id v40 = *(id *)(v36 + 40);
        unsigned __int8 v41 = [v40 isEqualToNumber:v20];

        if (v41) {
          goto LABEL_36;
        }
        goto LABEL_34;
      }
LABEL_27:

      id v39 = v19;
      if (!v20) {
        goto LABEL_35;
      }
LABEL_36:
      if (v33 == (id)++v35)
      {
        id v43 = [v31 countByEnumeratingWithState:&v57 objects:v62 count:16];
        id v33 = v43;
        if (!v43) {
          goto LABEL_41;
        }
        goto LABEL_17;
      }
    }
  }
  id v20 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    BOOL v21 = objc_opt_class();
    *(_DWORD *)long long buf = 138544130;
    id v64 = v21;
    __int16 v65 = 2114;
    id v66 = v7;
    __int16 v67 = 2114;
    id v68 = v19;
    __int16 v69 = 1024;
    int v70 = a2;
    id v22 = v21;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Family circle request resulted in error: [%{public}@] isBackground: %{BOOL}d", buf, 0x26u);
  }
LABEL_46:

LABEL_47:
  if (a4 && v19)
  {
    id v19 = v19;
    *a4 = v19;
  }
LABEL_51:
}

void sub_1004218B4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100421930;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100421930(uint64_t a1)
{
  id v2 = objc_alloc_init(_TtC9appstored6LogKey);
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    id v24 = (id)objc_opt_class();
    __int16 v25 = 2112;
    BOOL v26 = v2;
    id v4 = v24;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Performing migration of FamilyInfo", buf, 0x16u);
  }
  id v5 = +[ACAccountStore ams_sharedAccountStore];
  uint64_t v6 = objc_msgSend(v5, "ams_activeiTunesAccount");

  if (v6)
  {
    id v7 = sub_10039B764((uint64_t)FamilyInfoLookupTask, v2);
    if (v7) {
      goto LABEL_8;
    }
    BOOL v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      double v9 = objc_opt_class();
      id v10 = v9;
      id v11 = objc_msgSend(v6, "ams_DSID");
      *(_DWORD *)long long buf = 138543874;
      id v24 = v9;
      __int16 v25 = 2114;
      BOOL v26 = v2;
      __int16 v27 = 2114;
      id v28 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Attempting to update cached FamilyInfo for account: %{public}@", buf, 0x20u);
    }
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v22 = 0;
    int v13 = sub_100421234(v12, 1, v2, &v22);

    if (v13)
    {
LABEL_8:
      uint64_t v14 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
LABEL_11:

        goto LABEL_14;
      }
      uint64_t v15 = objc_opt_class();
      id v16 = v15;
      BOOL v17 = objc_msgSend(v6, "ams_DSID");
      *(_DWORD *)long long buf = 138543874;
      id v24 = v15;
      __int16 v25 = 2114;
      BOOL v26 = v2;
      __int16 v27 = 2114;
      id v28 = v17;
      uint64_t v18 = "[%{public}@] [%{public}@] FamilyInfo cached for account: %{public}@";
    }
    else
    {
      uint64_t v14 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_11;
      }
      BOOL v21 = objc_opt_class();
      id v16 = v21;
      BOOL v17 = objc_msgSend(v6, "ams_DSID");
      *(_DWORD *)long long buf = 138543874;
      id v24 = v21;
      __int16 v25 = 2114;
      BOOL v26 = v2;
      __int16 v27 = 2114;
      id v28 = v17;
      uint64_t v18 = "[%{public}@] [%{public}@] FamilyInfo not cached following migration for account: %{public}@";
    }
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v18, buf, 0x20u);

    goto LABEL_11;
  }
  id v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = objc_opt_class();
    *(_DWORD *)long long buf = 138543618;
    id v24 = v19;
    __int16 v25 = 2112;
    BOOL v26 = v2;
    id v20 = v19;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Not updating FamilyInfo due to no active account", buf, 0x16u);
  }
LABEL_14:
}

void sub_100421D20(uint64_t a1)
{
  id v55 = +[ActiveAccountObserver activeAccount];
  id v2 = objc_msgSend(v55, "ams_DSID");
  id v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v2)
  {
    if (!v5) {
      goto LABEL_7;
    }
  }
  else if (v5)
  {
    goto LABEL_7;
  }
  if (objc_msgSend(v2, "isEqualToNumber:")) {
    goto LABEL_49;
  }
  uint64_t v4 = *(void *)(a1 + 32);
LABEL_7:
  objc_storeStrong((id *)(v4 + 8), v3);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (*(void *)(v6 + 32))
    {
      id v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v71 = (id)objc_opt_class();
        id v8 = v71;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@] Cleared family", buf, 0xCu);
      }
    }
    [*(id *)(v6 + 48) lock];
    double v9 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 40) = 0;

    id v10 = *(void **)(v6 + 24);
    *(void *)(v6 + 24) = 0;

    [*(id *)(v6 + 48) unlock];
  }
  if (v55)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = v55;
    int v13 = v12;
    if (!v11)
    {
LABEL_48:

      goto LABEL_49;
    }
    long long v56 = v12;
    uint64_t v14 = objc_alloc_init(_TtC9appstored6LogKey);
    uint64_t v15 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = objc_opt_class();
      id v17 = v16;
      uint64_t v18 = objc_msgSend(v56, "ams_DSID");
      *(_DWORD *)long long buf = 138543874;
      id v71 = v16;
      __int16 v72 = 2114;
      unsigned int v73 = v14;
      __int16 v74 = 2114;
      id v75 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Checking if account: %{public}@ has FamilyInfo following account change", buf, 0x20u);
    }
    uint64_t v53 = v11;

    sub_10039B764((uint64_t)FamilyInfoLookupTask, v14);
    int v13 = v56;
    uint64_t v54 = (id *)objc_claimAutoreleasedReturnValue();
    if (v54)
    {
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      id v19 = v54[2];
      id v20 = [v19 countByEnumeratingWithState:&v58 objects:buf count:16];
      if (v20)
      {
        id v21 = v20;
        id v51 = v14;
        id v52 = v3;
        char v22 = 0;
        uint64_t v23 = *(void *)v59;
        do
        {
          id v24 = 0;
          do
          {
            if (*(void *)v59 != v23) {
              objc_enumerationMutation(v19);
            }
            uint64_t v25 = *(void *)(*((void *)&v58 + 1) + 8 * (void)v24);
            if (v25)
            {
              id v26 = *(id *)(v25 + 40);
              if (v26)
              {
                __int16 v27 = v26;
                uint64_t v28 = objc_msgSend(v13, "ams_DSID");
                if (v28)
                {
                  __int16 v29 = (void *)v28;
                  id v30 = *(id *)(v25 + 40);
                  id v31 = objc_msgSend(v13, "ams_DSID");
                  unsigned int v32 = [v30 isEqualToNumber:v31];

                  int v13 = v56;
                  if (v32) {
                    char v22 = 1;
                  }
                }
                else
                {
                }
              }
            }
            id v24 = (char *)v24 + 1;
          }
          while (v21 != v24);
          id v33 = [v19 countByEnumeratingWithState:&v58 objects:buf count:16];
          id v21 = v33;
        }
        while (v33);

        uint64_t v14 = v51;
        id v3 = v52;
        if (v22)
        {
          uint64_t v34 = ASDLogHandleForCategory();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
LABEL_47:

            goto LABEL_48;
          }
          uint64_t v35 = objc_opt_class();
          id v36 = v35;
          id v37 = objc_msgSend(v56, "ams_DSID");
          *(_DWORD *)unsigned int v62 = 138543874;
          id v63 = v35;
          __int16 v64 = 2114;
          __int16 v65 = v51;
          __int16 v66 = 2114;
          __int16 v67 = v37;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] FamilyInfo found for account: %{public}@", v62, 0x20u);

LABEL_46:
          int v13 = v56;
          goto LABEL_47;
        }
      }
      else
      {
      }
    }
    BOOL v38 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      id v39 = objc_opt_class();
      id v40 = v39;
      unsigned __int8 v41 = objc_msgSend(v56, "ams_DSID");
      *(_DWORD *)unsigned int v62 = 138543874;
      id v63 = v39;
      __int16 v64 = 2114;
      __int16 v65 = v14;
      __int16 v66 = 2114;
      __int16 v67 = v41;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] FamilyInfo not found account: %{public}@. Attempting to reload silently.", v62, 0x20u);
    }
    id v57 = 0;
    sub_100421358(v53, 1, v14, &v57);
    uint64_t v34 = v57;
    id v42 = ASDLogHandleForCategory();
    BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    if (v34)
    {
      if (v43)
      {
        id v44 = objc_opt_class();
        id v45 = v44;
        id v46 = objc_msgSend(v56, "ams_DSID");
        *(_DWORD *)unsigned int v62 = 138544130;
        id v63 = v44;
        __int16 v64 = 2114;
        __int16 v65 = v14;
        __int16 v66 = 2114;
        __int16 v67 = v46;
        __int16 v68 = 2114;
        __int16 v69 = v34;
        BOOL v47 = "[%{public}@] [%{public}@] Error looking up FamilyInfo for account: %{public}@ error: %{public}@";
        id v48 = v42;
        uint32_t v49 = 42;
LABEL_44:
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v47, v62, v49);
      }
    }
    else if (v43)
    {
      unsigned __int8 v50 = objc_opt_class();
      id v45 = v50;
      id v46 = objc_msgSend(v56, "ams_DSID");
      *(_DWORD *)unsigned int v62 = 138543874;
      id v63 = v50;
      __int16 v64 = 2114;
      __int16 v65 = v14;
      __int16 v66 = 2114;
      __int16 v67 = v46;
      BOOL v47 = "[%{public}@] [%{public}@] FamilyInfo reloaded for account: %{public}@";
      id v48 = v42;
      uint32_t v49 = 32;
      goto LABEL_44;
    }

    goto LABEL_46;
  }
LABEL_49:
}

void sub_100422394(void *a1, void *a2)
{
  id v10 = a2;
  if (a1)
  {
    id v3 = sub_10025F104(a1);
    id v4 = [v3 mutableCopy];

    if (!v4) {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
    }
    id v5 = [v10 copy];
    [v4 setObject:v5 forKeyedSubscript:@"AnalyticsDialogName"];

    id v6 = v4;
    id v7 = [a1 userInfo];
    id v8 = [v7 mutableCopy];

    if (!v8) {
      id v8 = objc_alloc_init((Class)NSMutableDictionary);
    }
    id v9 = [v6 copy];
    [v8 setObject:v9 forKeyedSubscript:@"com.apple.appstored.AnalyticsEvent"];

    [a1 setUserInfo:v8];
  }
}

BOOL sub_1004224AC(id a1, NSString *a2, id a3)
{
  return AnalyticsSendEventLazy();
}

void sub_1004224B8(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = sub_10025F104(a1);
    uint64_t v11 = v10;
    if (v10)
    {
      id v12 = [v10 objectForKeyedSubscript:@"AnalyticsDialogName"];
      int v13 = v12;
      if (v12 && [v12 length])
      {
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_100422604;
        void v14[3] = &unk_10052D940;
        id v15 = v11;
        id v16 = v7;
        id v17 = a1;
        id v18 = v8;
        id v19 = v13;
        v9[2](v9, @"com.apple.appstored.dialog", v14);
      }
    }
  }
}

id sub_100422604(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"AnalyticsEventInfo"];
  id v3 = [v2 mutableCopy];

  if (!v3) {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
  }
  id v4 = [*(id *)(a1 + 40) selectedActionIdentifier];
  if (v4)
  {
    id v5 = [*(id *)(a1 + 48) locateActionWithIdentifier:v4];
    id v6 = v5;
    if (v5)
    {
      sub_10025F0A4(v5);
      id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (!v7)
      {
        unint64_t v8 = (unint64_t)[v6 style];
        if (v8 > 2) {
          id v7 = @"uknown";
        }
        else {
          id v7 = off_10052D960[v8];
        }
      }
      [v3 setObject:v7 forKeyedSubscript:@"actionName"];
    }
  }
  id v9 = *(void **)(a1 + 56);
  if (v9)
  {
    id v10 = sub_1003697F0(v9);
    [v3 setObject:v10 forKeyedSubscript:@"errorDescription"];
  }
  [v3 setObject:*(void *)(a1 + 64) forKeyedSubscript:@"dialogName"];

  return v3;
}

id sub_100422748(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  self;
  id v5 = v4;
  self;
  id v6 = [AppMetadataLoader alloc];
  id v7 = [v5 bundleContainerURL];

  id v8 = v7;
  if (v6)
  {
    v15.receiver = v6;
    v15.super_class = (Class)AppMetadataLoader;
    id v9 = (AppMetadataLoader *)objc_msgSendSuper2(&v15, "init");
    id v6 = v9;
    if (v9)
    {
      v9->_targetIsContainer = 1;
      objc_storeStrong((id *)&v9->_targetURL, v7);
    }
  }

  if (!v6) {
    goto LABEL_11;
  }
  if (!v6->_targetIsContainer)
  {
    if (a3)
    {
      sub_10042290C(v6->_targetURL, 0, @"Extended attribute is not available on this platform");
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_11:
    id v12 = 0;
    goto LABEL_16;
  }
  id v10 = [(NSURL *)v6->_targetURL URLByAppendingPathComponent:@"iTunesMetadata"];
  uint64_t v11 = [v10 URLByAppendingPathExtension:@"plist"];

  if (v11)
  {
    v15.receiver = 0;
    id v12 = +[MIStoreMetadata metadataFromPlistAtURL:v11 error:&v15];
    id v13 = v15.receiver;
    if (!a3) {
      goto LABEL_15;
    }
LABEL_13:
    if (!v12)
    {
      sub_10042290C(v6->_targetURL, v13, @"Loading failed");
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_15;
  }
  id v13 = 0;
  id v12 = 0;
  if (a3) {
    goto LABEL_13;
  }
LABEL_15:

LABEL_16:
  return v12;
}

id sub_10042290C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [a1 path];
  id v8 = +[NSString stringWithFormat:@"%@ for '%@'", v5, v7];

  id v9 = ASDErrorWithUnderlyingErrorAndDescription();

  return v9;
}

id *sub_1004229FC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)CodeSignatureVersionRepair;
    a1 = (id *)objc_msgSendSuper2(&v10, "init");
    if (a1)
    {
      id v7 = [v5 copy];
      id v8 = a1[1];
      a1[1] = v7;

      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_100422E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100422E64(uint64_t a1)
{
  id v2 = +[UpdatesManager sharedManager];
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  id v3 = +[NSArray arrayWithObjects:&v9 count:1];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100422F84;
  void v7[3] = &unk_10052D980;
  long long v6 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v6;
  long long v8 = v6;
  [v2 updateAllWithOrder:v3 requestToken:v4 replyHandler:v7];
}

void sub_100422F84(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v12 = v6;
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    id v8 = v6;
    uint64_t v9 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v8;
LABEL_3:

    goto LABEL_5;
  }
  if (![a3 count])
  {
    uint64_t v10 = ASDErrorWithDescription();
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v9 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
    goto LABEL_3;
  }
LABEL_5:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100423034(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100420848(a2, *(void **)(*(void *)(a1 + 32) + 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10042308C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1004231D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a2;
  self;
  id v6 = +[NSString stringWithFormat:@"itms-apps://?action=lookup&ids=%@", v5];

  uint64_t v7 = +[NSURL URLWithString:v6];

  id v8 = +[LSApplicationWorkspace defaultWorkspace];
  id v11 = 0;
  LODWORD(v6) = [v8 openURL:v7 withOptions:0 error:&v11];
  id v9 = v11;

  if (v6) {
    id v10 = 0;
  }
  else {
    id v10 = v9;
  }
  ((void (**)(id, id))v4)[2](v4, v10);
}

void sub_1004232CC(uint64_t a1, void *a2)
{
  id v5 = a2;
  self;
  id v2 = +[LSApplicationWorkspace defaultWorkspace];
  unsigned int v3 = [v2 openApplicationWithBundleID:@"com.apple.AppStore"];

  if (v3)
  {
    v5[2](v5, 0);
  }
  else
  {
    uint64_t v4 = ASDErrorWithDescription();
    ((void (**)(id, void *))v5)[2](v5, v4);
  }
}

void *sub_1004234FC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)DownloadSinf;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

void sub_100423670(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      id v3 = [*(id *)(v2 + 8) copy];
      if (v3)
      {
        uint64_t v28 = v3;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        uint64_t v4 = *(void *)(a1 + 16);
        if (v4) {
          id v5 = [*(id *)(v4 + 8) copy];
        }
        else {
          id v5 = 0;
        }
        id v6 = [v5 countByEnumeratingWithState:&v33 objects:v40 count:16];
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = *(void *)v34;
          do
          {
            for (i = 0; i != v7; i = (char *)i + 1)
            {
              if (*(void *)v34 != v8) {
                objc_enumerationMutation(v5);
              }
              id v10 = *(void **)(*((void *)&v33 + 1) + 8 * i);
              id v11 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543362;
                id v39 = v10;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Deleting asset pack at URL: %{public}@", buf, 0xCu);
              }

              sub_10022F080((uint64_t)ODRAssetPack, v10);
            }
            id v7 = [v5 countByEnumeratingWithState:&v33 objects:v40 count:16];
          }
          while (v7);
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    id v12 = *(id **)(a1 + 16);
    if (v12)
    {
      id v13 = (id *)[v12[2] copy];
      if (v13)
      {
        __int16 v27 = v13;
        uint64_t v14 = sub_1003F9F04();
        objc_super v15 = (void *)v14;
        if (v14) {
          id v16 = *(void **)(v14 + 32);
        }
        else {
          id v16 = 0;
        }
        id v17 = v16;

        id v18 = +[NSFileManager defaultManager];
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19) {
          id v20 = [*(id *)(v19 + 16) copy];
        }
        else {
          id v20 = 0;
        }
        id v21 = [v20 countByEnumeratingWithState:&v29 objects:v37 count:16];
        if (v21)
        {
          id v22 = v21;
          uint64_t v23 = *(void *)v30;
          do
          {
            for (j = 0; j != v22; j = (char *)j + 1)
            {
              if (*(void *)v30 != v23) {
                objc_enumerationMutation(v20);
              }
              uint64_t v25 = +[NSString stringWithFormat:@"%@/%@", v17, *(void *)(*((void *)&v29 + 1) + 8 * (void)j)];
              if ([v18 fileExistsAtPath:v25])
              {
                id v26 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  id v39 = v25;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Deleting storage at path: %{public}@", buf, 0xCu);
                }

                [v18 removeItemAtPath:v25 error:0];
              }
            }
            id v22 = [v20 countByEnumeratingWithState:&v29 objects:v37 count:16];
          }
          while (v22);
        }

        id v12 = v27;
      }
      else
      {
        id v12 = 0;
      }
    }
  }
}

IAPInfoUpdateRequestContext *sub_100423A14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  self;
  id v9 = [IAPInfoUpdateRequestContext alloc];
  id v11 = [v6 processInfo];
  if (v6) {
    id Property = objc_getProperty(v6, v10, 32, 1);
  }
  else {
    id Property = 0;
  }
  id v13 = Property;

  id v14 = v8;
  id v15 = v7;
  id v16 = v11;
  id v17 = v13;
  if (v9)
  {
    v20.receiver = v9;
    v20.super_class = (Class)IAPInfoUpdateRequestContext;
    id v18 = (IAPInfoUpdateRequestContext *)objc_msgSendSuper2(&v20, "init");
    id v9 = v18;
    if (v18)
    {
      objc_storeStrong((id *)&v18->_revision, a2);
      objc_storeStrong((id *)&v9->_account, a3);
      objc_storeStrong((id *)&v9->_clientInfo, v11);
      objc_storeStrong((id *)&v9->_logKey, Property);
    }
  }

  return v9;
}

void *sub_100424068(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)AppInstall;
    id v7 = objc_msgSendSuper2(&v10, "init");
    a1 = v7;
    if (v7)
    {
      sub_10042411C(v7, v5, v6);
      id v8 = +[NSUUID UUID];
      [a1 setValue:v8 forProperty:@"external_id"];
    }
  }

  return a1;
}

void sub_10042411C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (!a1) {
    goto LABEL_51;
  }
  id v6 = a2;
  self;
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  [v7 setObject:&off_10054D338 forKeyedSubscript:@"source_type"];
  if (v6)
  {
    id v9 = objc_getProperty(v6, v8, 24, 1);
    [v7 setObject:v9 forKeyedSubscript:@"alternate_icon_name"];

    id Property = objc_getProperty(v6, v10, 96, 1);
  }
  else
  {
    [v7 setObject:0 forKeyedSubscript:@"alternate_icon_name"];
    id Property = 0;
  }
  id v12 = Property;
  [v7 setObject:v12 forKeyedSubscript:@"bundle_id"];

  if (v6)
  {
    id v14 = objc_getProperty(v6, v13, 88, 1);
    if (v14)
    {
      id v16 = v14;
      [v7 setObject:v14 forKeyedSubscript:@"bundle_name"];

      goto LABEL_9;
    }
    id v18 = objc_getProperty(v6, v15, 216, 1);
  }
  else
  {
    id v18 = 0;
  }
  id v19 = v18;
  [v7 setObject:v19 forKeyedSubscript:@"bundle_name"];

  if (!v6)
  {
    [v7 setObject:0 forKeyedSubscript:@"bundle_version"];
    id v22 = 0;
    goto LABEL_10;
  }
LABEL_9:
  id v20 = objc_getProperty(v6, v17, 112, 1);
  [v7 setObject:v20 forKeyedSubscript:@"bundle_version"];

  id v22 = objc_getProperty(v6, v21, 208, 1);
LABEL_10:
  id v23 = v22;
  [v7 setObject:v23 forKeyedSubscript:@"item_id"];

  if (v6)
  {
    id v25 = objc_getProperty(v6, v24, 144, 1);
    [v7 setObject:v25 forKeyedSubscript:@"evid"];

    id v27 = objc_getProperty(v6, v26, 56, 1);
  }
  else
  {
    [v7 setObject:0 forKeyedSubscript:@"evid"];
    id v27 = 0;
  }
  id v28 = v27;
  if ([v28 length])
  {
    long long v30 = +[NSURL URLWithString:v28];
    [v7 setObject:v30 forKeyedSubscript:@"artwork_url"];
  }
  if (v6) {
    id v31 = objc_getProperty(v6, v29, 232, 1);
  }
  else {
    id v31 = 0;
  }
  id v32 = v31;
  if ([v32 length])
  {
    long long v34 = +[NSURL URLWithString:v32];
    [v7 setObject:v34 forKeyedSubscript:@"messages_artwork_url"];
  }
  if (v6)
  {
    if (v6[1]) {
      [v7 setObject:&off_10054D3B0 forKeyedSubscript:@"automatic_type"];
    }
    id v35 = objc_getProperty(v6, v33, 40, 1);
  }
  else
  {
    id v35 = 0;
  }
  id v36 = v35;
  [v7 setObject:v36 forKeyedSubscript:@"receipt"];

  if (v6) {
    uint64_t v37 = *((unsigned char *)v6 + 17) & 1;
  }
  else {
    uint64_t v37 = 0;
  }
  BOOL v38 = +[NSNumber numberWithBool:v37];
  [v7 setObject:v38 forKeyedSubscript:@"launch_prohibited"];

  if (v6)
  {
    id v39 = +[NSNumber numberWithBool:*((unsigned char *)v6 + 11) & 1];
    [v7 setObject:v39 forKeyedSubscript:@"has_messages_extension"];

    id v41 = objc_getProperty(v6, v40, 304, 1);
  }
  else
  {
    __int16 v68 = +[NSNumber numberWithBool:0];
    [v7 setObject:v68 forKeyedSubscript:@"has_messages_extension"];

    id v41 = 0;
  }
  id v42 = v41;
  [v7 setObject:v42 forKeyedSubscript:@"transaction_id"];

  if (v6)
  {
    id v44 = objc_getProperty(v6, v43, 120, 1);
    [v7 setObject:v44 forKeyedSubscript:@"cancel_download_url"];

    if (*((unsigned char *)v6 + 12))
    {
      if (*((unsigned char *)v6 + 14))
      {
        id v45 = &off_10054D3E0;
      }
      else if (*((unsigned char *)v6 + 13))
      {
        id v45 = &off_10054D3F8;
      }
      else
      {
        id v45 = &off_10054D3B0;
      }
    }
    else
    {
      id v45 = &off_10054D338;
    }
    [v7 setObject:v45 forKeyedSubscript:@"watch_type"];
    uint64_t v46 = *((unsigned char *)v6 + 19) & 1;
  }
  else
  {
    [v7 setObject:0 forKeyedSubscript:@"cancel_download_url"];
    [v7 setObject:&off_10054D338 forKeyedSubscript:@"watch_type"];
    uint64_t v46 = 0;
  }
  BOOL v47 = +[NSNumber numberWithBool:v46];
  [v7 setObject:v47 forKeyedSubscript:@"supports_32bit_only"];

  if (v6)
  {
    id v48 = +[NSNumber numberWithBool:*((unsigned char *)v6 + 18) & 1];
    [v7 setObject:v48 forKeyedSubscript:@"redownload"];

    id v50 = objc_getProperty(v6, v49, 312, 1);
  }
  else
  {
    __int16 v69 = +[NSNumber numberWithBool:0];
    [v7 setObject:v69 forKeyedSubscript:@"redownload"];

    id v50 = 0;
  }
  id v51 = v50;
  [v7 setObject:v51 forKeyedSubscript:@"store_cohort"];

  if (v6)
  {
    id v53 = objc_getProperty(v6, v52, 296, 1);
    [v7 setObject:v53 forKeyedSubscript:@"storefront"];

    id v55 = objc_getProperty(v6, v54, 48, 1);
  }
  else
  {
    [v7 setObject:0 forKeyedSubscript:@"storefront"];
    id v55 = 0;
  }
  id v56 = v55;
  [v7 setObject:v56 forKeyedSubscript:@"vendor_name"];

  if (v6) {
    uint64_t v57 = v6[36];
  }
  else {
    uint64_t v57 = 0;
  }
  long long v58 = +[NSNumber numberWithInteger:v57];
  [v7 setObject:v58 forKeyedSubscript:@"software_platform"];

  [a1 setValuesWithDictionary:v7];
  id v59 = [objc_alloc((Class)NSMutableArray) initWithCapacity:2];
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id v60 = v5;
  id v61 = [v60 countByEnumeratingWithState:&v70 objects:v74 count:16];
  if (v61)
  {
    id v62 = v61;
    uint64_t v63 = *(void *)v71;
    do
    {
      for (i = 0; i != v62; i = (char *)i + 1)
      {
        if (*(void *)v71 != v63) {
          objc_enumerationMutation(v60);
        }
        id v65 = sub_100208E70([AppPackage alloc], *(void **)(*((void *)&v70 + 1) + 8 * i));
        if (v65) {
          objc_msgSend(v59, "addObject:", v65, (void)v70);
        }
      }
      id v62 = [v60 countByEnumeratingWithState:&v70 objects:v74 count:16];
    }
    while (v62);
  }

  id v66 = [v59 copy];
  __int16 v67 = (void *)a1[5];
  a1[5] = v66;

LABEL_51:
}

id sub_1004248D8(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)AppInstall;
    a1 = objc_msgSendSuper2(&v20, "init");
    if (a1)
    {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
      id v5 = [v3 bundleID];
      [v4 setObject:v5 forKeyedSubscript:@"bundle_id"];

      id v6 = +[NSUUID UUID];
      [v4 setObject:v6 forKeyedSubscript:@"external_id"];

      unsigned int v7 = [v3 isUserInitiated];
      CFStringRef v8 = @"priority";
      if (v7)
      {
        id v9 = &off_10054D338;
      }
      else
      {
        [v4 setObject:&off_10054D350 forKeyedSubscript:@"priority"];
        CFStringRef v8 = @"supress_dialogs";
        id v9 = (_UNKNOWN **)&__kCFBooleanTrue;
      }
      [v4 setObject:v9 forKeyedSubscript:v8];
      id v11 = objc_alloc((Class)LSApplicationRecord);
      id v12 = [v3 bundleID];
      id v13 = [v11 initWithBundleIdentifierOfSystemPlaceholder:v12 error:0];

      id v14 = [v13 localizedName];
      [v4 setObject:v14 forKeyedSubscript:@"bundle_name"];

      id v15 = objc_alloc((Class)LSApplicationRecord);
      id v16 = [v3 bundleID];
      id v17 = [v15 initWithBundleIdentifier:v16 allowPlaceholder:1 error:0];

      if (v17)
      {
        if ([v17 isPlaceholder]) {
          id v18 = &off_10054D380;
        }
        else {
          id v18 = &off_10054D368;
        }
      }
      else
      {
        id v18 = &off_10054D398;
      }
      [v4 setObject:v18 forKeyedSubscript:@"coordinator_intent"];

      [v4 setObject:&off_10054D3B0 forKeyedSubscript:@"source_type"];
      [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:@"approved"];
      [v4 setObject:&off_10054D338 forKeyedSubscript:@"bootstrapped"];
      [v4 setObject:@"SYS" forKeyedSubscript:@"log_code"];
      [v4 setObject:&off_10054D3C8 forKeyedSubscript:@"metrics_install_type"];
      [a1 setValuesWithDictionary:v4];
    }
  }

  return a1;
}

id sub_100424B7C(id result)
{
  if (result)
  {
    uint64_t v1 = result;
    Class result = sub_10026E91C(result, @"update_type");
    if (result != (id)1) {
      return (id)(sub_10026E91C(v1, @"automatic_type") != 0);
    }
  }
  return result;
}

id sub_100424BD0(id result)
{
  if (result) {
    return sub_10026E91C(result, @"update_type");
  }
  return result;
}

void *sub_100424BE4(void *result)
{
  if (result) {
    return (void *)(sub_10026E91C(result, @"update_type") != 0);
  }
  return result;
}

void *sub_100424C14(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    id v3 = (void *)a1[4];
    if (!v3)
    {
      id v4 = [[_TtC9appstored6LogKey alloc] initWithAppInstallMemoryEntity:a1];
      id v5 = (void *)v2[4];
      v2[4] = v4;

      id v3 = (void *)v2[4];
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

void *sub_100424C88(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"policy"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v2 = sub_1003D4BC0([AppInstallPolicy alloc], v1);
    }
    else {
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

void sub_100424D18(void *a1, id *a2)
{
  if (a1)
  {
    if (a2) {
      a2 = (id *)[a2[1] copy];
    }
    id v3 = a2;
    [a1 setValue:a2 forProperty:@"policy"];
  }
}

id sub_100424D84(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"bundle_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100424DBC(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"bundle_name");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100424DF4(void *a1)
{
  if (a1)
  {
    a1 = sub_10026EA4C(a1, @"bundle_url");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100424E2C(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E9D4(a1, @"external_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100424E64(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E82C(a1, @"item_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100424E9C(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = sub_10026E82C(a1, @"priority");
  uint64_t v2 = v1;
  if (v1) {
    id v3 = [v1 integerValue];
  }
  else {
    id v3 = 0;
  }

  return v3;
}

id sub_100424EF8(id result)
{
  if (result) {
    return sub_10026E91C(result, @"source_type");
  }
  return result;
}

id sub_100424F0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v16 = v3;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v5)
    {
      id v6 = v5;
      id v7 = 0;
      uint64_t v8 = *(void *)v18;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v4);
          }
          SEL v10 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          id v11 = [v10 valueForProperty:@"blocked"];
          unsigned __int8 v12 = [v11 BOOLValue];

          if ((v12 & 1) == 0)
          {
            id v13 = sub_10026E91C(v10, @"package_type");
            id v14 = v10;
            if (v13 == (id)1)
            {

              goto LABEL_16;
            }

            id v7 = v14;
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
    else
    {
      id v7 = 0;
    }

    id v7 = v7;
    id v14 = v7;
LABEL_16:

    id v3 = v16;
  }
  else
  {
    id v14 = 0;
  }

  return v14;
}

AppPackage *sub_1004250B4(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    id v7 = sub_10027B328((uint64_t)AppPackageEntity, (uint64_t)[a1 databaseID], v6);

    if (v7) {
      uint64_t v8 = [(SQLiteMemoryEntity *)[AppPackage alloc] initWithDatabaseEntity:v7 properties:v5];
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

EvaluatorDownload *sub_10042516C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(EvaluatorDownload);
    id v6 = sub_10026E95C(a1, @"client_id");
    if (v4) {
      objc_setProperty_atomic(v4, v5, v6, 24);
    }

    id v7 = sub_10026E82C(v3, @"bytes_total");
    uint64_t v8 = v7;
    if (v7)
    {
      id v9 = [v7 unsignedLongLongValue];
      if (v4) {
        v4->_bytes += (unint64_t)v9;
      }
    }
    SEL v10 = sub_10026E82C(v3, @"initial_odr_size");
    id v11 = v10;
    if (v10)
    {
      id v12 = [v10 unsignedLongLongValue];
      if (v4) {
        v4->_bytes += (unint64_t)v12;
      }
    }
    id v13 = sub_10026EAC4(v3, @"background_asset_metadata");
    id v14 = v13;
    if (v13)
    {
      id v15 = sub_1001F51E0(v13);
      if (v4)
      {
        v4->_bytes += (unint64_t)v15;
        unsigned __int8 v16 = sub_100424B7C(a1);
LABEL_14:
        v4->_automatic = v16;
        long long v17 = sub_100424C14(a1);
        objc_setProperty_atomic(v4, v18, v17, 32);
LABEL_15:

        goto LABEL_16;
      }
      sub_100424B7C(a1);
    }
    else
    {
      unsigned __int8 v16 = sub_100424B7C(a1);
      if (v4) {
        goto LABEL_14;
      }
    }
    long long v17 = sub_100424C14(a1);
    goto LABEL_15;
  }
  id v4 = 0;
LABEL_16:

  return v4;
}

uint64_t sub_10042530C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (sub_10026E91C((id)result, @"source_type"))
    {
      return 0;
    }
    else if (sub_10026E91C(v1, @"automatic_type") == (id)1)
    {
      return 2;
    }
    else
    {
      id v2 = sub_10026E91C(v1, @"update_type");
      if (v2)
      {
        if (v2 == (id)1) {
          return 3;
        }
        else {
          return 6;
        }
      }
      else if (sub_10026E91C(v1, @"restore_type"))
      {
        return 9;
      }
      else if (sub_10026E7EC(v1, @"redownload"))
      {
        return 8;
      }
      else
      {
        return 4;
      }
    }
  }
  return result;
}

id sub_1004253D0(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v10 = 0;
    id v4 = [a1 valueForProperty:@"store_metadata"];
    if (!v4
      || (sub_100400E4C((uint64_t)MIStoreMetadata, v4, &v10),
          (id v5 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      id v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = sub_100424C14(a1);
        id v9 = [v4 length];
        *(_DWORD *)long long buf = 138412802;
        id v12 = v8;
        __int16 v13 = 2048;
        id v14 = v9;
        __int16 v15 = 2114;
        uint64_t v16 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%@] Store metadata (%{iec-bytes}ld) could not be decoded with error: %{public}@", buf, 0x20u);
      }
      if (v4) {
        [v4 length];
      }
      if (a2)
      {
        ASDErrorWithUnderlyingErrorAndDescription();
        id v5 = 0;
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v5 = 0;
      }
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_1004256AC(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 40, 1);
  }
  return result;
}

BOOL sub_100425A24(uint64_t a1, void *a2)
{
  [a2 insertApp:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v6 = sub_100286AF0((unint64_t)[*(id *)(a1 + 32) mode]);
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 138543618;
      id v9 = v6;
      __int16 v10 = 2114;
      uint64_t v11 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to persist %{public}@ for %{public}@", (uint8_t *)&v8, 0x16u);
    }
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return v3 != 0;
}

void sub_100425D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_100425D98(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 appForBundleID:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_100425DE8(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    return _[v3 _showUninstallAlertForApp:v5 bundleID:v4];
  }
  else
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_100286AF0((unint64_t)[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) mode]);
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138543618;
      uint64_t v11 = v7;
      __int16 v12 = 2114;
      uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Skipping uninstall alert for %{public}@ for %{public}@", (uint8_t *)&v10, 0x16u);
    }
    return [*(id *)(a1 + 48) _cleanupAfterUninstallingBundleID:*(void *)(a1 + 32)];
  }
}

void sub_1004261BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 138543362;
    id v12 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "System alert task did finish with result: %{public}@", (uint8_t *)&v11, 0xCu);
  }

  if (!v5 || v6)
  {
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100286AF0((unint64_t)[*(id *)(a1 + 32) mode]);
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 138543874;
      id v12 = v9;
      __int16 v13 = 2114;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      id v16 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to show uninstall %{public}@ alert for %{public}@: %{public}@", (uint8_t *)&v11, 0x20u);
    }
  }
  [*(id *)(a1 + 48) _cleanupAfterUninstallingBundleID:*(void *)(a1 + 40)];
}

id sub_1004264AC(uint64_t a1, void *a2)
{
  id v3 = [a2 removeAppForBundleID:*(void *)(a1 + 32)];
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to remove persisted record for %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
  return v3;
}

void sub_100426868(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    id v7 = (id)sub_1003F4094();
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 67240450;
      int v14 = (int)v7;
      __int16 v15 = 2114;
      id v16 = v6;
      id v9 = "Failed to check bag for showing app delete alert, will defaut to %{public}d: %{public}@";
      uint64_t v10 = v8;
      uint32_t v11 = 18;
      goto LABEL_8;
    }
  }
  else
  {
    id v7 = [a2 BOOLValue];
    sub_1003F40E4((uint64_t)AppDefaultsManager, (int)v7);
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 67240192;
      int v14 = (int)v7;
      id v9 = "Got bag value for showing app delete alert: %{public}d";
      uint64_t v10 = v8;
      uint32_t v11 = 8;
LABEL_8:
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)&v13, v11);
    }
  }

  (*(void (**)(void, id, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v7, v12);
}

AppInstall *sub_1004269D0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  self;
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v6 = [v4 persistentID];
  id v7 = v6;
  if (v6) {
    sub_100263D1C((uint64_t)NSUUID, (uint64_t)[v6 unsignedLongLongValue]);
  }
  else {
  uint64_t v8 = +[NSUUID UUID];
  }
  [v5 setObject:v8 forKeyedSubscript:@"external_id"];

  [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:@"approved"];
  [v5 setObject:@"LGY" forKeyedSubscript:@"log_code"];
  id v9 = [v4 bundleID];
  [v5 setObject:v9 forKeyedSubscript:@"bundle_id"];

  uint64_t v10 = [v4 cancelDownloadURL];
  [v5 setObject:v10 forKeyedSubscript:@"cancel_download_url"];

  uint32_t v11 = [v4 clientID];
  [v5 setObject:v11 forKeyedSubscript:@"client_id"];

  uint64_t v12 = [v4 itemID];
  [v5 setObject:v12 forKeyedSubscript:@"item_id"];

  int v13 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 is32BitOnly]);
  [v5 setObject:v13 forKeyedSubscript:@"supports_32bit_only"];

  int v14 = [v4 storeAccountName];
  [v5 setObject:v14 forKeyedSubscript:@"apple_id"];

  __int16 v15 = [v4 storeAccountID];
  [v5 setObject:v15 forKeyedSubscript:@"account_id"];

  id v16 = [v4 storeTransactionID];
  [v5 setObject:v16 forKeyedSubscript:@"transaction_id"];

  long long v17 = [v4 betaExternalVersionIdentifier];
  if (v17)
  {
    SEL v18 = [v4 betaExternalVersionIdentifier];
    long long v19 = &off_10054D428;
    long long v20 = &off_10054D410;
  }
  else
  {
    SEL v18 = [v4 softwareVersionExternalIdentifier];
    long long v19 = &off_10054D458;
    long long v20 = &off_10054D440;
  }
  [v5 setObject:v18 forKeyedSubscript:@"evid"];

  [v5 setObject:v20 forKeyedSubscript:@"source_type"];
  [v5 setObject:v19 forKeyedSubscript:@"metrics_install_type"];
  SEL v21 = [v4 title];
  [v5 setObject:v21 forKeyedSubscript:@"bundle_name"];

  id v22 = [v4 bundleVersion];
  [v5 setObject:v22 forKeyedSubscript:@"bundle_version"];

  id v23 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 cancelIfDuplicate]);
  [v5 setObject:v23 forKeyedSubscript:@"cancel_if_duplicate"];

  id v24 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 hasMessagesExtension]);
  [v5 setObject:v24 forKeyedSubscript:@"has_messages_extension"];

  id v25 = [v4 messagesArtworkURL];
  SEL v26 = sub_10029598C(v25);
  [v5 setObject:v26 forKeyedSubscript:@"messages_artwork_url"];

  id v27 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 launchProhibited]);
  [v5 setObject:v27 forKeyedSubscript:@"launch_prohibited"];

  id v28 = [v4 appReceiptData];
  [v5 setObject:v28 forKeyedSubscript:@"receipt"];

  long long v29 = [v4 storefront];
  [v5 setObject:v29 forKeyedSubscript:@"storefront"];

  long long v30 = [v4 storeCohort];
  [v5 setObject:v30 forKeyedSubscript:@"store_cohort"];

  id v31 = [v4 thumbnailURL];
  id v32 = sub_10029598C(v31);
  [v5 setObject:v32 forKeyedSubscript:@"artwork_url"];

  long long v33 = sub_1003B8F18((uint64_t)MIStoreMetadata, v4);
  long long v34 = [v4 storeAccountID];

  if (v34)
  {
    id v35 = +[ACAccountStore ams_sharedAccountStore];
    id v36 = [v4 storeAccountID];
    uint64_t v37 = objc_msgSend(v35, "ams_iTunesAccountWithDSID:", v36);
  }
  else
  {
    BOOL v38 = [v4 storeAccountName];

    if (!v38) {
      goto LABEL_13;
    }
    id v35 = +[ACAccountStore ams_sharedAccountStore];
    id v36 = [v4 storeAccountName];
    uint64_t v37 = objc_msgSend(v35, "ams_iTunesAccountWithUsername:", v36);
  }
  id v39 = (void *)v37;

  if (v39)
  {
    sub_100401854(v33, v39);
  }
LABEL_13:
  id v50 = 0;
  SEL v40 = sub_10040163C((uint64_t)v33, &v50);
  id v41 = v50;
  if (v40)
  {
    [v5 setObject:v40 forKeyedSubscript:@"store_metadata"];
    if (v41) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v43 = ASDErrorWithUnderlyingErrorAndDescription();

    id v41 = (id)v43;
    if (v43)
    {
LABEL_15:
      id v42 = 0;
      if (a3) {
        *a3 = v41;
      }
      goto LABEL_21;
    }
  }
  id v42 = [(SQLiteMemoryEntity *)[AppInstall alloc] initWithPropertyValues:v5];
  id v44 = [v4 assets];
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_1004270E0;
  v48[3] = &unk_10052DA20;
  id v49 = v4;
  uint64_t v46 = sub_1003923F8(v44, v48);
  if (v42) {
    objc_setProperty_atomic_copy(v42, v45, v46, 40);
  }

LABEL_21:
  return v42;
}

id sub_1004270E0(uint64_t a1, void *a2)
{
  id v3 = sub_1002F1960((uint64_t)AppPackage, a2);
  id v4 = sub_10026E95C(v3, @"variant_id");
  if (!v4)
  {
    id v5 = [*(id *)(a1 + 32) variantID];

    if (v5)
    {
      uint64_t v6 = [*(id *)(a1 + 32) variantID];
      [v3 setValue:v6 forProperty:@"variant_id"];
    }
  }

  return v3;
}

uint64_t sub_10042745C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_55;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            uint64_t v14 = 0;
            goto LABEL_57;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_55:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0;
        }
LABEL_57:
        uint64_t v35 = 8;
        goto LABEL_62;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
        goto LABEL_46;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 32;
        goto LABEL_46;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 40;
        goto LABEL_46;
      case 5u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 72) |= 2u;
        while (2)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v14 |= (unint64_t)(v23 & 0x7F) << v20;
            if (v23 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v14 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0;
        }
LABEL_61:
        uint64_t v35 = 16;
LABEL_62:
        *(void *)(a1 + v35) = v14;
        continue;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_46;
      case 7u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 72) |= 8u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v9 = v25++ >= 9;
              if (v9)
              {
                uint64_t v26 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v26 = 0;
        }
LABEL_66:
        *(unsigned char *)(a1 + 6_Block_object_dispose(&a9, 8) = v26 != 0;
        continue;
      case 8u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 48;
LABEL_46:
        long long v29 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      case 9u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 72) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
      v32 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0) {
        goto LABEL_68;
      }
      v30 += 7;
      BOOL v9 = v31++ >= 9;
      if (v9)
      {
        LODWORD(v32) = 0;
        goto LABEL_70;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_68:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v32) = 0;
    }
LABEL_70:
    *(_DWORD *)(a1 + 64) = v32;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100427A88(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_100427AA0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void sub_100427AB8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void sub_100427AD0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

id sub_10042802C(id result)
{
  if (result) {
    return +[ASDUpdatesService isAutomaticUpdateAuthorizationRequiredWhenEnabledForAppWithRecord:result];
  }
  return result;
}

void *sub_100428044(void *result)
{
  if (result)
  {
    uint64_t v1 = [result executableURL];
    id v2 = [v1 path];

    uint64_t v3 = sub_10036E10C((uint64_t)FairPlay, v2);
    return (void *)v3;
  }
  return result;
}

id sub_1004280A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v4 = [self enumeratorWithOptions:a3];
  unsigned int v5 = v4;
  if (a2 <= 2) {
    [v4 setFilter:*(&off_10052DAC0 + a2)];
  }
  return v5;
}

BOOL sub_100428108(id a1, LSApplicationRecord *a2)
{
  id v2 = [(LSApplicationRecord *)a2 typeForInstallMachinery];
  unsigned __int8 v3 = [v2 isEqualToString:LSUserApplicationType];

  return v3;
}

BOOL sub_100428150(id a1, LSApplicationRecord *a2)
{
  id v2 = [(LSApplicationRecord *)a2 typeForInstallMachinery];
  unsigned __int8 v3 = [v2 isEqualToString:LSInternalApplicationType];

  return v3;
}

BOOL sub_100428198(id a1, LSApplicationRecord *a2)
{
  id v2 = [(LSApplicationRecord *)a2 typeForInstallMachinery];
  unsigned __int8 v3 = [v2 isEqualToString:LSSystemApplicationType];

  return v3;
}

id sub_1004281E0(void *a1, uint64_t a2)
{
  if (a1)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    unsigned __int8 v3 = objc_msgSend(a1, "applicationExtensionRecords", 0);
    id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v14;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          char v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          BOOL v9 = [v8 extensionPointRecord];
          int v10 = [v9 name];

          if (a2 == 1
            && ([v10 isEqualToString:@"com.apple.message-payload-provider"] & 1) != 0)
          {
            id v11 = v8;

            goto LABEL_13;
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
    id v11 = 0;
LABEL_13:
  }
  else
  {
    id v11 = 0;
  }
  return v11;
}

id sub_100428354(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = [a1 URL];
    id v13 = 0;
    id v12 = 0;
    unsigned __int8 v3 = [v2 getResourceValue:&v13 forKey:NSURLAttributeModificationDateKey error:&v12];
    id v4 = v13;
    id v5 = v12;
    uint64_t v6 = ASDLogHandleForCategory();
    unint64_t v7 = v6;
    if (v3)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        id v11 = [v1 bundleIdentifier];
        *(_DWORD *)long long buf = 138412546;
        long long v15 = v11;
        __int16 v16 = 2112;
        id v17 = v4;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%@] Returning the last modified date: %@", buf, 0x16u);
      }
      id v8 = v4;
    }
    else
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        BOOL v9 = [v1 bundleIdentifier];
        *(_DWORD *)long long buf = 138543618;
        long long v15 = v9;
        __int16 v16 = 2114;
        id v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%{public}@] Unable to find modified date due to error: %{public}@", buf, 0x16u);
      }
      id v8 = [v1 registrationDate];
    }
    id v1 = v8;
  }
  return v1;
}

id sub_100428520(id a1)
{
  id v1 = a1;
  if (a1)
  {
    if (([a1 isPlaceholder] & 1) == 0
      && ([v1 applicationHasMIDBasedSINF] & 1) != 0
      || ([v1 iTunesMetadata],
          id v2 = objc_claimAutoreleasedReturnValue(),
          unsigned int v3 = [v2 isDeviceBasedVPP],
          v2,
          v3))
    {
      uint64_t v4 = sub_10029680C();
LABEL_12:
      id v1 = (id)v4;
      goto LABEL_13;
    }
    if (([v1 isPlaceholder] & 1) == 0
      && ([v1 isProfileValidated] & 1) != 0
      || ([v1 isAppStoreVendable] & 1) == 0)
    {
      uint64_t v4 = sub_100296768();
      goto LABEL_12;
    }
    if ([v1 applicationDownloaderDSID])
    {
      id v5 = [v1 applicationDownloaderDSID];
LABEL_18:
      unint64_t v7 = +[NSNumber numberWithUnsignedLongLong:v5];
      goto LABEL_19;
    }
    if ([v1 applicationDSID])
    {
      id v5 = [v1 applicationDSID];
      goto LABEL_18;
    }
    char v20 = sub_10042889C(v1);
    unsigned int v21 = [v20 altDSID];
    if (v21)
    {
      unint64_t v22 = +[ACAccountStore ams_sharedAccountStore];
      char v23 = objc_msgSend(v22, "ams_iTunesAccountWithAltDSID:", v21);

      char v24 = objc_msgSend(v23, "ams_DSID");
      char v25 = sub_100428A3C(v24);

      if (v25)
      {
        unint64_t v7 = objc_msgSend(v23, "ams_DSID");

        if (v7) {
          goto LABEL_41;
        }
      }
      else
      {
      }
    }
    uint64_t v26 = [v20 downloaderID];
    int v27 = sub_100428A3C(v26);

    if (v27)
    {
      uint64_t v28 = [v20 downloaderID];
    }
    else
    {
      long long v29 = [v20 purchaserID];
      int v30 = sub_100428A3C(v29);

      if (!v30)
      {
        unint64_t v7 = 0;
        goto LABEL_41;
      }
      uint64_t v28 = [v20 purchaserID];
    }
    unint64_t v7 = (void *)v28;
LABEL_41:

LABEL_19:
    id v8 = +[ACAccountStore ams_sharedAccountStore];
    BOOL v9 = objc_msgSend(v8, "ams_activeiTunesAccount");

    if (!v7)
    {
      sub_1002968B0();
      id v1 = (id)objc_claimAutoreleasedReturnValue();
LABEL_29:

      goto LABEL_13;
    }
    int v10 = objc_msgSend(v9, "ams_DSID");
    unsigned int v11 = [v7 isEqual:v10];

    if (v11)
    {
      id v12 = objc_msgSend(v9, "ams_DSID");
      uint64_t v13 = sub_10029684C((uint64_t)PurchaseOwner, v12);
    }
    else
    {
      long long v14 = sub_100420D50();
      id v12 = sub_100421294(v14);

      if ([v12 containsObject:v7])
      {
        long long v15 = [v1 iTunesMetadata];
        id v16 = [v15 storeFront];
        id v17 = objc_msgSend(v9, "ams_storefront");
        id v18 = [v17 integerValue];

        if (v16 == v18)
        {
          uint64_t v19 = objc_msgSend(v9, "ams_DSID");
          sub_1002967A8((uint64_t)PurchaseOwner, v19);
          id v1 = (id)objc_claimAutoreleasedReturnValue();

LABEL_28:
          goto LABEL_29;
        }
      }
      uint64_t v13 = sub_100296684((uint64_t)PurchaseOwner, v7);
    }
    id v1 = (id)v13;
    goto LABEL_28;
  }
LABEL_13:
  return v1;
}

id sub_10042889C(void *a1)
{
  if (a1)
  {
    id v9 = 0;
    id v2 = sub_100422748((uint64_t)AppMetadataLoader, a1, &v9);
    id v3 = v9;
    if (v3)
    {
      uint64_t v4 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_4;
      }
      unint64_t v7 = [a1 bundleIdentifier];
      *(_DWORD *)long long buf = 138543618;
      unsigned int v11 = v7;
      __int16 v12 = 2114;
      id v13 = v3;
      id v8 = "Error loading metadata for %{public}@: %{public}@";
    }
    else
    {
      uint64_t v6 = [v2 protectedMetadata];
      if (!v6) {
        goto LABEL_5;
      }

      if (v2) {
        goto LABEL_5;
      }
      uint64_t v4 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_4:

LABEL_5:
        goto LABEL_6;
      }
      unint64_t v7 = [a1 bundleIdentifier];
      *(_DWORD *)long long buf = 138543618;
      unsigned int v11 = v7;
      __int16 v12 = 2114;
      id v13 = 0;
      id v8 = "Error decrypting protected metadata for %{public}@: %{public}@";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v8, buf, 0x16u);

    goto LABEL_4;
  }
  id v2 = 0;
LABEL_6:
  return v2;
}

uint64_t sub_100428A3C(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v2 = [v1 isEqualToNumber:&off_10054D470] ^ 1;
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t static CocoaError.fileReadNoSuchFile.getter()
{
  return static CocoaError.fileReadNoSuchFile.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t static URLRequest._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URLRequest.url.getter()
{
  return URLRequest.url.getter();
}

Swift::String_optional __swiftcall URLRequest.value(forHTTPHeaderField:)(Swift::String forHTTPHeaderField)
{
  uint64_t v1 = URLRequest.value(forHTTPHeaderField:)(forHTTPHeaderField._countAndFlagsBits, forHTTPHeaderField._object);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t type metadata accessor for URLRequest()
{
  return type metadata accessor for URLRequest();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t type metadata accessor for JSONEncoder.KeyEncodingStrategy()
{
  return type metadata accessor for JSONEncoder.KeyEncodingStrategy();
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.setter()
{
  return dispatch thunk of JSONEncoder.keyEncodingStrategy.setter();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  return (NSDateInterval)DateInterval._bridgeToObjectiveC()();
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t DateInterval.end.getter()
{
  return DateInterval.end.getter();
}

uint64_t DateInterval.init(start:end:)()
{
  return DateInterval.init(start:end:)();
}

uint64_t DateInterval.init(start:duration:)()
{
  return DateInterval.init(start:duration:)();
}

uint64_t DateInterval.start.getter()
{
  return DateInterval.start.getter();
}

uint64_t DateInterval.contains(_:)()
{
  return DateInterval.contains(_:)();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t URLQueryItem.name.getter()
{
  return URLQueryItem.name.getter();
}

uint64_t URLQueryItem.value.getter()
{
  return URLQueryItem.value.getter();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t static CustomNSError.errorDomain.getter()
{
  return static CustomNSError.errorDomain.getter();
}

uint64_t URLComponents.queryItems.getter()
{
  return URLComponents.queryItems.getter();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)()
{
  return URLComponents.init(url:resolvingAgainstBaseURL:)();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.path.setter()
{
  return URLComponents.path.setter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t URLResourceValues.volumeAvailableCapacityForImportantUsage.getter()
{
  return URLResourceValues.volumeAvailableCapacityForImportantUsage.getter();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.userInfo.getter()
{
  return _BridgedStoredNSError.userInfo.getter();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return NSFastEnumerationIterator.next()();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return URL.resourceValues(forKeys:)();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return URL.init(fileURLWithPath:isDirectory:)();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return URL.appending<A>(component:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Data.Deallocator._deallocator.getter()
{
  return Data.Deallocator._deallocator.getter();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return type metadata accessor for Data.Deallocator();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return Data.init(base64Encoded:options:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Data._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t static Date.distantFuture.getter()
{
  return static Date.distantFuture.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.init(timeIntervalSinceNow:)()
{
  return Date.init(timeIntervalSinceNow:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.uuid.getter()
{
  return UUID.uuid.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.init(identifier:)()
{
  return Locale.init(identifier:)();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t Calendar.init(identifier:)()
{
  return Calendar.init(identifier:)();
}

uint64_t Calendar.startOfDay(for:)()
{
  return Calendar.startOfDay(for:)();
}

uint64_t Calendar.dateInterval(of:start:interval:for:)()
{
  return Calendar.dateInterval(of:start:interval:for:)();
}

uint64_t type metadata accessor for Calendar.MatchingPolicy()
{
  return type metadata accessor for Calendar.MatchingPolicy();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

uint64_t type metadata accessor for Calendar.SearchDirection()
{
  return type metadata accessor for Calendar.SearchDirection();
}

uint64_t type metadata accessor for Calendar.RepeatedTimePolicy()
{
  return type metadata accessor for Calendar.RepeatedTimePolicy();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t Calendar.date(_:matchesComponents:)()
{
  return Calendar.date(_:matchesComponents:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)()
{
  return Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
}

uint64_t static Calendar.Component.== infix(_:_:)()
{
  return static Calendar.Component.== infix(_:_:)();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return TimeZone.init(secondsFromGMT:)();
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  return (NSTimeZone)TimeZone._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t type metadata accessor for FeatureFlag()
{
  return type metadata accessor for FeatureFlag();
}

uint64_t asd_isFeatureEnabled(_:)()
{
  return asd_isFeatureEnabled(_:)();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t static AppLibrary.current.getter()
{
  return static AppLibrary.current.getter();
}

uint64_t type metadata accessor for AppLibrary()
{
  return type metadata accessor for AppLibrary();
}

uint64_t RepairRequest.init(bundleID:isBackground:reason:)()
{
  return RepairRequest.init(bundleID:isBackground:reason:)();
}

uint64_t type metadata accessor for RepairRequest()
{
  return type metadata accessor for RepairRequest();
}

uint64_t type metadata accessor for InstallSheetContext.InstallType()
{
  return type metadata accessor for InstallSheetContext.InstallType();
}

uint64_t InstallSheetContext.Source.AppStoreSheetContext.init(showBiometrics:installType:metricsFieldData:)()
{
  return InstallSheetContext.Source.AppStoreSheetContext.init(showBiometrics:installType:metricsFieldData:)();
}

uint64_t type metadata accessor for InstallSheetContext.Source()
{
  return type metadata accessor for InstallSheetContext.Source();
}

uint64_t InstallSheetContext.init(itemID:versionID:source:type:logKey:learnMoreURL:authenticationContextData:showBiometricsForAppStoreInstall:)()
{
  return InstallSheetContext.init(itemID:versionID:source:type:logKey:learnMoreURL:authenticationContextData:showBiometricsForAppStoreInstall:)();
}

uint64_t type metadata accessor for InstallSheetContext()
{
  return type metadata accessor for InstallSheetContext();
}

uint64_t LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)()
{
  return LocalizedStringsRequest.LocalizedString.init(key:replacementTokens:)();
}

uint64_t type metadata accessor for LocalizedStringsRequest.LocalizedString()
{
  return type metadata accessor for LocalizedStringsRequest.LocalizedString();
}

uint64_t LocalizedStringsRequest.init(strings:)()
{
  return LocalizedStringsRequest.init(strings:)();
}

uint64_t type metadata accessor for LocalizedStringsRequest()
{
  return type metadata accessor for LocalizedStringsRequest();
}

uint64_t LocalizedStringsResponse.localizedStrings.getter()
{
  return LocalizedStringsResponse.localizedStrings.getter();
}

uint64_t type metadata accessor for LocalizedStringsResponse()
{
  return type metadata accessor for LocalizedStringsResponse();
}

uint64_t InstallConfirmationRequest.init(context:)()
{
  return InstallConfirmationRequest.init(context:)();
}

uint64_t type metadata accessor for InstallConfirmationRequest()
{
  return type metadata accessor for InstallConfirmationRequest();
}

uint64_t TypeMetadata.descriptor.getter()
{
  return TypeMetadata.descriptor.getter();
}

uint64_t TupleMetadata.Elements.endIndex.getter()
{
  return TupleMetadata.Elements.endIndex.getter();
}

uint64_t TupleMetadata.init(_:)()
{
  return TupleMetadata.init(_:)();
}

uint64_t EnumValueWitnessTable.getEnumTag(_:)()
{
  return EnumValueWitnessTable.getEnumTag(_:)();
}

uint64_t static Metadata.Kind.tuple.getter()
{
  return static Metadata.Kind.tuple.getter();
}

uint64_t type metadata accessor for TokenHandoff.SKAdNetworkEnvironment()
{
  return type metadata accessor for TokenHandoff.SKAdNetworkEnvironment();
}

uint64_t SKANUTClient.init(privateInput:)()
{
  return SKANUTClient.init(privateInput:)();
}

uint64_t SKANUTClient.blindedElement()()
{
  return SKANUTClient.blindedElement()();
}

uint64_t SKANUTClient.finalize(publicInput:evaluatedElement:proof:publicKey:)()
{
  return SKANUTClient.finalize(publicInput:evaluatedElement:proof:publicKey:)();
}

uint64_t type metadata accessor for SKANUTClient()
{
  return type metadata accessor for SKANUTClient();
}

uint64_t static RegexComponent<>.localizedInteger(locale:)()
{
  return static RegexComponent<>.localizedInteger(locale:)();
}

uint64_t Regex.Match.output.getter()
{
  return Regex.Match.output.getter();
}

uint64_t AccountIdentity.init(amsAccountID:)()
{
  return AccountIdentity.init(amsAccountID:)();
}

uint64_t type metadata accessor for AccountIdentity()
{
  return type metadata accessor for AccountIdentity();
}

uint64_t AsyncValueSequence.makeAsyncIterator()()
{
  return AsyncValueSequence.makeAsyncIterator()();
}

uint64_t AccountCachedServerData.CachedValue.value.getter()
{
  return AccountCachedServerData.CachedValue.value.getter();
}

uint64_t AccountCachedServerData.CachedValue.isStale.getter()
{
  return AccountCachedServerData.CachedValue.isStale.getter();
}

uint64_t AccountCachedServerData.intSequence(forKey:accountID:)()
{
  return AccountCachedServerData.intSequence(forKey:accountID:)();
}

uint64_t AccountCachedServerData.stringSequence(forKey:accountID:)()
{
  return AccountCachedServerData.stringSequence(forKey:accountID:)();
}

uint64_t type metadata accessor for AccountCachedServerData.Error()
{
  return type metadata accessor for AccountCachedServerData.Error();
}

uint64_t AccountCachedServerData.IntKey.init(rawValue:)()
{
  return AccountCachedServerData.IntKey.init(rawValue:)();
}

uint64_t static AccountCachedServerData.shared.getter()
{
  return static AccountCachedServerData.shared.getter();
}

uint64_t type metadata accessor for AccountCachedServerData()
{
  return type metadata accessor for AccountCachedServerData();
}

uint64_t Case.hasPayload.getter()
{
  return Case.hasPayload.getter();
}

uint64_t Case.get(from:)()
{
  return Case.get(from:)();
}

uint64_t Field.name.getter()
{
  return Field.name.getter();
}

uint64_t Field.type.getter()
{
  return Field.type.getter();
}

Swift::Int __swiftcall Deque._Storage._growCapacity(to:linearly:)(Swift::Int to, Swift::Bool linearly)
{
  return Deque._Storage._growCapacity(to:linearly:)(to, linearly);
}

uint64_t type metadata accessor for AppInstallType()
{
  return type metadata accessor for AppInstallType();
}

uint64_t AppInstallationEligibility.billingCountryCode.setter()
{
  return AppInstallationEligibility.billingCountryCode.setter();
}

uint64_t AppInstallationEligibility.init(accountID:accountIdentifier:billingStorefront:storefront:eligible:)()
{
  return AppInstallationEligibility.init(accountID:accountIdentifier:billingStorefront:storefront:eligible:)();
}

uint64_t type metadata accessor for AppInstallationEligibility()
{
  return type metadata accessor for AppInstallationEligibility();
}

uint64_t AppInstallationEvent.init(bundleID:eligibility:externalVersionID:installDate:installType:isBeta:itemID:osVersion:platform:source:token:webDomain:)()
{
  return AppInstallationEvent.init(bundleID:eligibility:externalVersionID:installDate:installType:isBeta:itemID:osVersion:platform:source:token:webDomain:)();
}

uint64_t type metadata accessor for AppInstallationMetricsClient()
{
  return type metadata accessor for AppInstallationMetricsClient();
}

uint64_t static Logger.appInstall.getter()
{
  return static Logger.appInstall.getter();
}

uint64_t static Logger.skAdNetwork.getter()
{
  return static Logger.skAdNetwork.getter();
}

uint64_t static Logger.appCapabilities.getter()
{
  return static Logger.appCapabilities.getter();
}

uint64_t static Logger.testFlightExtension.getter()
{
  return static Logger.testFlightExtension.getter();
}

uint64_t static Logger.qa.getter()
{
  return static Logger.qa.getter();
}

uint64_t static Logger.odr.getter()
{
  return static Logger.odr.getter();
}

uint64_t static Logger.arcade.getter()
{
  return static Logger.arcade.getter();
}

uint64_t static Logger.daemon.getter()
{
  return static Logger.daemon.getter();
}

uint64_t static Logger.repair.getter()
{
  return static Logger.repair.getter();
}

uint64_t static Logger.general.getter()
{
  return static Logger.general.getter();
}

uint64_t static Logger.metrics.getter()
{
  return static Logger.metrics.getter();
}

uint64_t static Logger.migrate.getter()
{
  return static Logger.migrate.getter();
}

uint64_t static Logger.restore.getter()
{
  return static Logger.restore.getter();
}

uint64_t static Logger.skanner.getter()
{
  return static Logger.skanner.getter();
}

uint64_t static Logger.updates.getter()
{
  return static Logger.updates.getter();
}

uint64_t static Logger.activity.getter()
{
  return static Logger.activity.getter();
}

uint64_t static Logger.appUsage.getter()
{
  return static Logger.appUsage.getter();
}

uint64_t static Logger.download.getter()
{
  return static Logger.download.getter();
}

uint64_t static Logger.purchase.getter()
{
  return static Logger.purchase.getter();
}

uint64_t static Logger.storeKit.getter()
{
  return static Logger.storeKit.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)()
{
  return XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)();
}

uint64_t XPCDictionary.init()()
{
  return XPCDictionary.init()();
}

uint64_t type metadata accessor for XPCDictionary()
{
  return type metadata accessor for XPCDictionary();
}

uint64_t XPCDictionary.subscript.setter()
{
  return XPCDictionary.subscript.setter();
}

{
  return XPCDictionary.subscript.setter();
}

{
  return XPCDictionary.subscript.setter();
}

uint64_t noErr.getter()
{
  return noErr.getter();
}

uint64_t NWEndpoint.nw.getter()
{
  return NWEndpoint.nw.getter();
}

uint64_t type metadata accessor for NWEndpoint()
{
  return type metadata accessor for NWEndpoint();
}

uint64_t NWEndpoint.init(_:)()
{
  return NWEndpoint.init(_:)();
}

uint64_t type metadata accessor for NWInterface.InterfaceType()
{
  return type metadata accessor for NWInterface.InterfaceType();
}

uint64_t NWInterface.type.getter()
{
  return NWInterface.type.getter();
}

uint64_t type metadata accessor for NWInterface()
{
  return type metadata accessor for NWInterface();
}

uint64_t NWInterface.init(_:)()
{
  return NWInterface.init(_:)();
}

uint64_t NWParameters.nw.getter()
{
  return NWParameters.nw.getter();
}

uint64_t type metadata accessor for NWParameters()
{
  return type metadata accessor for NWParameters();
}

uint64_t NWParameters.__allocating_init(_:)()
{
  return NWParameters.__allocating_init(_:)();
}

uint64_t static DispatchWorkItemFlags.assignCurrentContext.getter()
{
  return static DispatchWorkItemFlags.assignCurrentContext.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t CancellationError.init()()
{
  return CancellationError.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.Keys.description.getter()
{
  return Dictionary.Keys.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::String __swiftcall Character.lowercased()()
{
  uint64_t v0 = Character.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Character._isLowercased.getter()
{
  return Character._isLowercased.getter();
}

uint64_t Character._isUppercased.getter()
{
  return Character._isUppercased.getter();
}

uint64_t Character._isSingleScalar.getter()
{
  return Character._isSingleScalar.getter();
}

uint64_t Character.isNumber.getter()
{
  return Character.isNumber.getter();
}

uint64_t BidirectionalCollection<>.firstMatch<A, B>(of:)()
{
  return BidirectionalCollection<>.firstMatch<A, B>(of:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t String.LocalizationValue.init(stringInterpolation:)()
{
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t String.init(appStoreDaemonLocalized:comment:)()
{
  return String.init(appStoreDaemonLocalized:comment:)();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(before:)()
{
  return String.index(before:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.insert(_:at:)()
{
  return String.insert(_:at:)();
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

uint64_t String.hashValue.getter()
{
  return String.hashValue.getter();
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t static Bool._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Bool._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return type metadata accessor for CheckedContinuation();
}

uint64_t type metadata accessor for CancellationError()
{
  return type metadata accessor for CancellationError();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall ThrowingTaskGroup.cancelAll()()
{
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Int.init(truncating:)()
{
  return Int.init(truncating:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t type metadata accessor for OS_dispatch_queue_serial.Attributes()
{
  return type metadata accessor for OS_dispatch_queue_serial.Attributes();
}

uint64_t OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t NSArray.makeIterator()()
{
  return NSArray.makeIterator()();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return NSCoder.decodeObject<A>(of:forKey:)();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t NSString.init(stringLiteral:)()
{
  return NSString.init(stringLiteral:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

Swift::String __swiftcall Substring.uppercased()()
{
  uint64_t v0 = Substring.uppercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  return (NSNumber)UInt._bridgeToObjectiveC()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger.description.getter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of AnyKeyPath._storedInlineOffset.getter()
{
  return dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t static ContinuousClock.now.getter()
{
  return static ContinuousClock.now.getter();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t dispatch thunk of InstantProtocol.duration(to:)()
{
  return dispatch thunk of InstantProtocol.duration(to:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t static Clock<>.continuous.getter()
{
  return static Clock<>.continuous.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  return (NSNumber)Int64._bridgeToObjectiveC()();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return dispatch thunk of Encoder.unkeyedContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t static KeyPath.create(for:)()
{
  return static KeyPath.create(for:)();
}

uint64_t type metadata accessor for KeyPath()
{
  return type metadata accessor for KeyPath();
}

uint64_t Unicode.Scalar.Properties.isLowercase.getter()
{
  return Unicode.Scalar.Properties.isLowercase.getter();
}

uint64_t Unicode.Scalar.Properties.isUppercase.getter()
{
  return Unicode.Scalar.Properties.isUppercase.getter();
}

uint64_t Unicode.Scalar.Properties.isCased.getter()
{
  return Unicode.Scalar.Properties.isCased.getter();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return type metadata accessor for Unicode.Scalar.Properties();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return Unicode.Scalar.properties.getter();
}

uint64_t Duration.components.getter()
{
  return Duration.components.getter();
}

uint64_t static Duration.< infix(_:_:)()
{
  return static Duration.< infix(_:_:)();
}

uint64_t static Duration.* infix<A>(_:_:)()
{
  return static Duration.* infix<A>(_:_:)();
}

uint64_t static Duration.zero.getter()
{
  return static Duration.zero.getter();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t ACSLocateCachingServer()
{
  return _ACSLocateCachingServer();
}

uint64_t AMSHashIfNeeded()
{
  return _AMSHashIfNeeded();
}

uint64_t AMSLogableError()
{
  return _AMSLogableError();
}

uint64_t ASDDebugLog()
{
  return _ASDDebugLog();
}

uint64_t ASDDebugSetFileLoggingOptions()
{
  return _ASDDebugSetFileLoggingOptions();
}

uint64_t ASDErrorBySettingUserInfoValue()
{
  return _ASDErrorBySettingUserInfoValue();
}

uint64_t ASDErrorIsEqual()
{
  return _ASDErrorIsEqual();
}

uint64_t ASDErrorSearch()
{
  return _ASDErrorSearch();
}

uint64_t ASDErrorWithDescription()
{
  return _ASDErrorWithDescription();
}

uint64_t ASDErrorWithSafeUserInfo()
{
  return _ASDErrorWithSafeUserInfo();
}

uint64_t ASDErrorWithTitleAndMessage()
{
  return _ASDErrorWithTitleAndMessage();
}

uint64_t ASDErrorWithUnderlyingError()
{
  return _ASDErrorWithUnderlyingError();
}

uint64_t ASDErrorWithUnderlyingErrorAndDescription()
{
  return _ASDErrorWithUnderlyingErrorAndDescription();
}

uint64_t ASDErrorWithUserInfoAndFormat()
{
  return _ASDErrorWithUserInfoAndFormat();
}

uint64_t ASDInstallAttributionVersionCreateFromString()
{
  return _ASDInstallAttributionVersionCreateFromString();
}

uint64_t ASDLocalizedString()
{
  return _ASDLocalizedString();
}

uint64_t ASDLogHandleForCategory()
{
  return _ASDLogHandleForCategory();
}

uint64_t ASDSetIsDaemon()
{
  return _ASDSetIsDaemon();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t BYSetupAssistantNeedsToRun()
{
  return _BYSetupAssistantNeedsToRun();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return _CCRandomGenerateBytes(bytes, count);
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return _CC_MD5_Final(md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return _CC_MD5_Init(c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return _CC_MD5_Update(c, data, len);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return _CC_SHA1_Final(md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return _CC_SHA1_Init(c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA1_Update(c, data, len);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return _CFAllocatorGetDefault();
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return _CFBundleCopyBundleURL(bundle);
}

CFDictionaryRef CFBundleCopyInfoDictionaryForURL(CFURLRef url)
{
  return _CFBundleCopyInfoDictionaryForURL(url);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return _CFBundleCreate(allocator, bundleURL);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return _CFBundleGetIdentifier(bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return _CFBundleGetInfoDictionary(bundle);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return _CFBundleGetValueForInfoDictionaryKey(bundle, key);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return _CFNumberGetType(number);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

void CFRunLoopRun(void)
{
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return _CFStringGetCharactersPtr(theString);
}

CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString)
{
  return _CFStringGetFastestEncoding(theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return _CFURLCreateWithFileSystemPath(allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return _CFUUIDCreate(alloc);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  CFUUIDBytes v3 = _CFUUIDGetUUIDBytes(uuid);
  uint64_t v2 = *(void *)&v3.byte8;
  uint64_t v1 = *(void *)&v3.byte0;
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

uint64_t CPCopyBundleIdentifierAndTeamFromApplicationIdentifier()
{
  return _CPCopyBundleIdentifierAndTeamFromApplicationIdentifier();
}

uint64_t CPSharedResourcesDirectory()
{
  return _CPSharedResourcesDirectory();
}

uint64_t CacheDeletePurgeSpaceWithInfo()
{
  return _CacheDeletePurgeSpaceWithInfo();
}

uint64_t CacheDeleteRegisterInfoCallbacks()
{
  return _CacheDeleteRegisterInfoCallbacks();
}

uint64_t CacheDeleteUpdatePurgeable()
{
  return _CacheDeleteUpdatePurgeable();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithProperties(AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

IOReturn IOPMAssertionSetProperty(IOPMAssertionID theAssertion, CFStringRef theProperty, CFTypeRef theValue)
{
  return _IOPMAssertionSetProperty(theAssertion, theProperty, theValue);
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return _IOPSDrawingUnlimitedPower();
}

uint64_t IXCreateUserPresentableError()
{
  return _IXCreateUserPresentableError();
}

uint64_t IXDisplayUserPresentableErrorForApp()
{
  return _IXDisplayUserPresentableErrorForApp();
}

uint64_t IXDisplayUserPresentableErrorForAppWithLocalizedName()
{
  return _IXDisplayUserPresentableErrorForAppWithLocalizedName();
}

uint64_t IXStringForCoordinatorImportance()
{
  return _IXStringForCoordinatorImportance();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t MobileGestalt_copy_productType_obj()
{
  return _MobileGestalt_copy_productType_obj();
}

uint64_t MobileGestalt_copy_uniqueDeviceID_obj()
{
  return _MobileGestalt_copy_uniqueDeviceID_obj();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

uint64_t MobileInstallationCheckCapabilitiesMatch()
{
  return _MobileInstallationCheckCapabilitiesMatch();
}

void *__cdecl NSHashGet(NSHashTable *table, const void *pointer)
{
  return _NSHashGet(table, pointer);
}

void NSHashInsert(NSHashTable *table, const void *pointer)
{
}

NSString *NSHomeDirectory(void)
{
  return _NSHomeDirectory();
}

BOOL NSMapMember(NSMapTable *table, const void *key, void **originalKey, void **value)
{
  return _NSMapMember(table, key, originalKey, value);
}

void NSResetHashTable(NSHashTable *table)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t OSAWriteLogForSubmission()
{
  return _OSAWriteLogForSubmission();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteDataField()
{
  return _PBDataWriterWriteDataField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return _PBDataWriterWriteInt64Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return _PBDataWriterWriteUint32Field();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return _PBDataWriterWriteUint64Field();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

uint64_t SBGetFlattenedIconState()
{
  return _SBGetFlattenedIconState();
}

uint64_t SBSGetScreenLockStatus()
{
  return _SBSGetScreenLockStatus();
}

uint64_t SBSSpringBoardBlockableServerPort()
{
  return _SBSSpringBoardBlockableServerPort();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithName(CFAllocatorRef allocator, const char *nodename)
{
  return _SCNetworkReachabilityCreateWithName(allocator, nodename);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return _SCNetworkReachabilityGetFlags(target, flags);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return _SecCertificateCopyKey(certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return _SecCertificateCreateWithData(allocator, data);
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return _SecCopyErrorMessageString(status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return _SecKeyCopyExternalRepresentation(key, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return _SecRandomCopyBytes(rnd, count, bytes);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return _SecTrustEvaluateWithError(trust, error);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return __CFBundleCopyBundleURLForExecutableURL();
}

uint64_t _CFHostIsDomainTopLevel()
{
  return __CFHostIsDomainTopLevel();
}

uint64_t _CFPropertyListCreateFiltered()
{
  return __CFPropertyListCreateFiltered();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

uint64_t _NSBundleResourceRequestClientInterface()
{
  return __NSBundleResourceRequestClientInterface();
}

uint64_t _NSBundleResourceRequestServerInterface()
{
  return __NSBundleResourceRequestServerInterface();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

{
}

{
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return _class_copyPropertyList(cls, outCount);
}

const char *__cdecl class_getName(Class cls)
{
  return _class_getName(cls);
}

int close(int a1)
{
  return _close(a1);
}

uint64_t container_system_group_path_for_identifier()
{
  return _container_system_group_path_for_identifier();
}

uint64_t container_system_path_for_identifier()
{
  return _container_system_path_for_identifier();
}

int deflate(z_streamp strm, int flush)
{
  return _deflate(strm, flush);
}

int deflateEnd(z_streamp strm)
{
  return _deflateEnd(strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return _deflateInit2_(strm, level, method, windowBits, memLevel, strategy, version, stream_size);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

uint64_t dispatch_block_create_with_voucher_and_qos_class()
{
  return _dispatch_block_create_with_voucher_and_qos_class();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return _dispatch_get_specific(key);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return _dispatch_source_get_data(source);
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

double drand48(void)
{
  return _drand48();
}

void exit(int a1)
{
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return _ffsctl(a1, a2, a3, a4);
}

void free(void *a1)
{
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return _fsctl(a1, a2, a3, a4);
}

int ftruncate(int a1, off_t a2)
{
  return _ftruncate(a1, a2);
}

pid_t getpid(void)
{
  return _getpid();
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

uint64_t lzma_code()
{
  return _lzma_code();
}

uint64_t lzma_end()
{
  return _lzma_end();
}

uint64_t lzma_stream_decoder()
{
  return _lzma_stream_decoder();
}

uint64_t lzma_stream_header_decode()
{
  return _lzma_stream_header_decode();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return _mach_error_string(error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

mach_port_t mig_get_reply_port(void)
{
  return _mig_get_reply_port();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return _mmap(a1, a2, a3, a4, a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

uint64_t network_usage_policy_create_client()
{
  return _network_usage_policy_create_client();
}

uint64_t network_usage_policy_destroy_client()
{
  return _network_usage_policy_destroy_client();
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint64_t nw_activity_activate()
{
  return _nw_activity_activate();
}

uint64_t nw_activity_complete_with_reason()
{
  return _nw_activity_complete_with_reason();
}

uint64_t nw_activity_create()
{
  return _nw_activity_create();
}

uint64_t nw_endpoint_copy_dictionary()
{
  return _nw_endpoint_copy_dictionary();
}

uint64_t nw_parameters_copy_dictionary()
{
  return _nw_parameters_copy_dictionary();
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

uint64_t os_eligibility_get_domain_answer()
{
  return _os_eligibility_get_domain_answer();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return _os_signpost_id_generate(log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return _os_signpost_id_make_with_pointer(log, ptr);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_state_remove_handler()
{
  return _os_state_remove_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_lock_lock_with_options()
{
  return _os_unfair_lock_lock_with_options();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t perform_first_network_use_flow()
{
  return _perform_first_network_use_flow();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_pidpath(pid, buffer, buffersize);
}

char *__cdecl property_copyAttributeValue(objc_property_t property, const char *attributeName)
{
  return _property_copyAttributeValue(property, attributeName);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return _property_getName(property);
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

uint64_t sandbox_extension_issue_file_to_process()
{
  return _sandbox_extension_issue_file_to_process();
}

int sem_close(sem_t *a1)
{
  return _sem_close(a1);
}

sem_t *sem_open(const char *a1, int a2, ...)
{
  return _sem_open(a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob(a1, a2, a3, n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_bind_null(a1, a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text16(a1, a2, a3, a4, a5);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return _sqlite3_clear_bindings(a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return _sqlite3_close_v2(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return _sqlite3_column_count(pStmt);
}

const char *__cdecl sqlite3_column_decltype(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_column_decltype(a1, a2);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return _sqlite3_column_name(a1, N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_type(a1, iCol);
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return _sqlite3_create_function(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return _sqlite3_errstr(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return _sqlite3_extended_result_codes(a1, onoff);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

uint64_t sqlite3_key()
{
  return _sqlite3_key();
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  return _sqlite3_next_stmt(pDb, pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return _sqlite3_reset(pStmt);
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  return _sqlite3_stmt_readonly(pStmt);
}

void srand48(uint64_t a1)
{
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_resume()
{
  return _swift_continuation_resume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return _swift_dynamicCastClassUnconditional();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtAnyKeyPath()
{
  return _swift_getAtAnyKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStaticObject()
{
  return _swift_initStaticObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return _swift_isUniquelyReferenced_nonNull();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return _task_info(target_task, flavor, task_info_out, task_info_outCnt);
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return _vm_deallocate(target_task, address, size);
}

uint64_t voucher_copy()
{
  return _voucher_copy();
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

uint64_t xpc_activity_set_completion_status()
{
  return _xpc_activity_set_completion_status();
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

void xpc_activity_unregister(const char *identifier)
{
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return _xpc_copy(object);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return _xpc_copy_description(object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return _xpc_dictionary_create_empty();
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

id objc_msgSend_App(void *a1, const char *a2, ...)
{
  return _[a1 App];
}

id objc_msgSend_Clip(void *a1, const char *a2, ...)
{
  return _[a1 Clip];
}

id objc_msgSend_DSPersonID(void *a1, const char *a2, ...)
{
  return _[a1 DSPersonID];
}

id objc_msgSend_HTTPUserAgent(void *a1, const char *a2, ...)
{
  return _[a1 HTTPUserAgent];
}

id objc_msgSend_InFocus(void *a1, const char *a2, ...)
{
  return _[a1 InFocus];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_SQLForEntityClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SQLForEntityClass:");
}

id objc_msgSend_SQLJoinClausesForEntityClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SQLJoinClausesForEntityClass:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_URLByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingPathExtension];
}

id objc_msgSend_URLByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return _[a1 URLByResolvingSymlinksInPath];
}

id objc_msgSend_URLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForKey:");
}

id objc_msgSend_URLQueryAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 URLQueryAllowedCharacterSet];
}

id objc_msgSend_URLResponse(void *a1, const char *a2, ...)
{
  return _[a1 URLResponse];
}

id objc_msgSend_URLWithSize_cropStyle_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithSize:cropStyle:format:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_VPNPlugins(void *a1, const char *a2, ...)
{
  return _[a1 VPNPlugins];
}

id objc_msgSend__CFURLRequest(void *a1, const char *a2, ...)
{
  return _[a1 _CFURLRequest];
}

id objc_msgSend__activeAccountIDForAppEvent_withAccountEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeAccountIDForAppEvent:withAccountEvents:");
}

id objc_msgSend__adoptEffectiveConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adoptEffectiveConfiguration:");
}

id objc_msgSend__appDeleteAlertIsEnabledWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appDeleteAlertIsEnabledWithReply:");
}

id objc_msgSend__arcadeAppCount(void *a1, const char *a2, ...)
{
  return _[a1 _arcadeAppCount];
}

id objc_msgSend__bootstrapWhenReadyWithInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bootstrapWhenReadyWithInfo:");
}

id objc_msgSend__calculatePurgeableSpace(void *a1, const char *a2, ...)
{
  return _[a1 _calculatePurgeableSpace];
}

id objc_msgSend__cleanupAfterUninstallingBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupAfterUninstallingBundleID:");
}

id objc_msgSend__effectiveConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 _effectiveConfiguration];
}

id objc_msgSend__fullInfoPlistDictionary(void *a1, const char *a2, ...)
{
  return _[a1 _fullInfoPlistDictionary];
}

id objc_msgSend__galetteAppForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_galetteAppForBundleID:");
}

id objc_msgSend__getActiveSessionIdentifiersWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getActiveSessionIdentifiersWithCompletionHandler:");
}

id objc_msgSend__handleMonitorStateDidChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMonitorStateDidChangeNotification:");
}

id objc_msgSend__incompleteTaskMetrics(void *a1, const char *a2, ...)
{
  return _[a1 _incompleteTaskMetrics];
}

id objc_msgSend__infoPlistURL(void *a1, const char *a2, ...)
{
  return _[a1 _infoPlistURL];
}

id objc_msgSend__initWithCFURLRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithCFURLRequest:");
}

id objc_msgSend__initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithConfiguration:");
}

id objc_msgSend__internalManager(void *a1, const char *a2, ...)
{
  return _[a1 _internalManager];
}

id objc_msgSend__lp_userVisibleHost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lp_userVisibleHost");
}

id objc_msgSend__manifestWithBundle_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_manifestWithBundle:error:");
}

id objc_msgSend__newSelectSQLWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newSelectSQLWithProperties:");
}

id objc_msgSend__newSelectSQLWithProperties_columns_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newSelectSQLWithProperties:columns:");
}

id objc_msgSend__purgeForDesiredSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeForDesiredSpace:");
}

id objc_msgSend__qualifiedEventsForWeekStartingWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_qualifiedEventsForWeekStartingWithDate:");
}

id objc_msgSend__recordCrashEventsSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordCrashEventsSinceDate:");
}

id objc_msgSend__removeAppUsageSessionForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAppUsageSessionForBundleID:");
}

id objc_msgSend__removeBundleIDFromPendingConfirmation_outError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBundleIDFromPendingConfirmation:outError:");
}

id objc_msgSend__sessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 _sessionConfiguration];
}

id objc_msgSend__setBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBundleID:");
}

id objc_msgSend__setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setError:");
}

id objc_msgSend__setItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setItemID:");
}

id objc_msgSend__setPrivacyProxyFailClosed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPrivacyProxyFailClosed:");
}

id objc_msgSend__setPurchase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPurchase:");
}

id objc_msgSend__setRequiresShortConnectionTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRequiresShortConnectionTimeout:");
}

id objc_msgSend__setSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSuccess:");
}

id objc_msgSend__shouldUseModernUpdates(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseModernUpdates];
}

id objc_msgSend__tcr_associateWithReader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tcr_associateWithReader:");
}

id objc_msgSend__tcr_associatedReader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tcr_associatedReader");
}

id objc_msgSend__unboostingRemoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 _unboostingRemoteObjectProxy];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 absoluteTimestamp];
}

id objc_msgSend_acceptHeaderValue(void *a1, const char *a2, ...)
{
  return _[a1 acceptHeaderValue];
}

id objc_msgSend_acceptVisitor_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptVisitor:flags:");
}

id objc_msgSend_accessUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessUsingBlock:");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _[a1 account];
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _[a1 accountID];
}

id objc_msgSend_accountIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accountIdentifier];
}

id objc_msgSend_accountMediaType(void *a1, const char *a2, ...)
{
  return _[a1 accountMediaType];
}

id objc_msgSend_accountName(void *a1, const char *a2, ...)
{
  return _[a1 accountName];
}

id objc_msgSend_accountPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPropertyForKey:");
}

id objc_msgSend_accountTypeWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeWithAccountTypeIdentifier:");
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithError:");
}

id objc_msgSend_actionButtonTitle(void *a1, const char *a2, ...)
{
  return _[a1 actionButtonTitle];
}

id objc_msgSend_actionButtonURL(void *a1, const char *a2, ...)
{
  return _[a1 actionButtonURL];
}

id objc_msgSend_actionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 actionIdentifier];
}

id objc_msgSend_actionMetricsEvent(void *a1, const char *a2, ...)
{
  return _[a1 actionMetricsEvent];
}

id objc_msgSend_actionType(void *a1, const char *a2, ...)
{
  return _[a1 actionType];
}

id objc_msgSend_actionWithLabel_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithLabel:url:");
}

id objc_msgSend_actionWithTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:");
}

id objc_msgSend_actionWithTitle_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:identifier:");
}

id objc_msgSend_actionWithTitle_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:");
}

id objc_msgSend_activateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithContext:");
}

id objc_msgSend_activeAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeAccount];
}

id objc_msgSend_activeRestoreSupportEnabled(void *a1, const char *a2, ...)
{
  return _[a1 activeRestoreSupportEnabled];
}

id objc_msgSend_activeSandboxAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeSandboxAccount];
}

id objc_msgSend_activeSubscriptionsDidChange(void *a1, const char *a2, ...)
{
  return _[a1 activeSubscriptionsDidChange];
}

id objc_msgSend_adNetworkId(void *a1, const char *a2, ...)
{
  return _[a1 adNetworkId];
}

id objc_msgSend_adNetworkRegistrableDomain(void *a1, const char *a2, ...)
{
  return _[a1 adNetworkRegistrableDomain];
}

id objc_msgSend_adTypeApp(void *a1, const char *a2, ...)
{
  return _[a1 adTypeApp];
}

id objc_msgSend_adTypeWeb(void *a1, const char *a2, ...)
{
  return _[a1 adTypeWeb];
}

id objc_msgSend_adamId(void *a1, const char *a2, ...)
{
  return _[a1 adamId];
}

id objc_msgSend_adamIds(void *a1, const char *a2, ...)
{
  return _[a1 adamIds];
}

id objc_msgSend_addBarrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBarrierBlock:");
}

id objc_msgSend_addButtonAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButtonAction:");
}

id objc_msgSend_addChild_withPendingUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChild:withPendingUnitCount:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addErrorBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addErrorBlock:");
}

id objc_msgSend_addFinishBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFinishBlock:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addInstall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInstall:");
}

id objc_msgSend_addKeyValuePair_with_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeyValuePair:with:");
}

id objc_msgSend_addNotificationRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNotificationRequest:withCompletionHandler:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperations_waitUntilFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperations:waitUntilFinished:");
}

id objc_msgSend_addPoll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPoll:");
}

id objc_msgSend_addPropertiesWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPropertiesWithDictionary:");
}

id objc_msgSend_addSuccessBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSuccessBlock:");
}

id objc_msgSend_addTextField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTextField:");
}

id objc_msgSend_additionalHeaders(void *a1, const char *a2, ...)
{
  return _[a1 additionalHeaders];
}

id objc_msgSend_additionalMetricsWithRestoreInstalls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalMetricsWithRestoreInstalls:");
}

id objc_msgSend_affiliateIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 affiliateIdentifier];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allPurgeablesForVolume_reason_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allPurgeablesForVolume:reason:client:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowAutomaticDownloads(void *a1, const char *a2, ...)
{
  return _[a1 allowAutomaticDownloads];
}

id objc_msgSend_allowEvaluation(void *a1, const char *a2, ...)
{
  return _[a1 allowEvaluation];
}

id objc_msgSend_allowsCellularAccess(void *a1, const char *a2, ...)
{
  return _[a1 allowsCellularAccess];
}

id objc_msgSend_allowsConstrainedNetworkAccess(void *a1, const char *a2, ...)
{
  return _[a1 allowsConstrainedNetworkAccess];
}

id objc_msgSend_allowsExpensiveNetworkAccess(void *a1, const char *a2, ...)
{
  return _[a1 allowsExpensiveNetworkAccess];
}

id objc_msgSend_alphanumericCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 alphanumericCharacterSet];
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return _[a1 altDSID];
}

id objc_msgSend_ams_DSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_DSID");
}

id objc_msgSend_ams_accountFlagValueForAccountFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_accountFlagValueForAccountFlag:");
}

id objc_msgSend_ams_activeiCloudAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_activeiCloudAccount");
}

id objc_msgSend_ams_activeiTunesAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_activeiTunesAccount");
}

id objc_msgSend_ams_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_altDSID");
}

id objc_msgSend_ams_configurationWithProcessInfo_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_configurationWithProcessInfo:bag:");
}

id objc_msgSend_ams_configureWithProcessInfo_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_configureWithProcessInfo:bag:");
}

id objc_msgSend_ams_iTunesAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountWithAltDSID:");
}

id objc_msgSend_ams_iTunesAccountWithDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountWithDSID:");
}

id objc_msgSend_ams_iTunesAccountWithUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountWithUsername:");
}

id objc_msgSend_ams_iTunesAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccounts");
}

id objc_msgSend_ams_isDemoAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isDemoAccount");
}

id objc_msgSend_ams_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isManagedAppleID");
}

id objc_msgSend_ams_isSandboxAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isSandboxAccount");
}

id objc_msgSend_ams_mapWithTransformIgnoresNil_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_mapWithTransformIgnoresNil:");
}

id objc_msgSend_ams_secureTokenForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_secureTokenForAccount:");
}

id objc_msgSend_ams_setAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setAltDSID:");
}

id objc_msgSend_ams_setDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setDSID:");
}

id objc_msgSend_ams_setNullableObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_setNullableObject:forKey:");
}

id objc_msgSend_ams_sharedAccountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_sharedAccountStore");
}

id objc_msgSend_ams_sharedAccountStoreForMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_sharedAccountStoreForMediaType:");
}

id objc_msgSend_ams_storefront(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_storefront");
}

id objc_msgSend_appAdamID(void *a1, const char *a2, ...)
{
  return _[a1 appAdamID];
}

id objc_msgSend_appAdamId(void *a1, const char *a2, ...)
{
  return _[a1 appAdamId];
}

id objc_msgSend_appAssetPromiseResponsibleClientWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appAssetPromiseResponsibleClientWithError:");
}

id objc_msgSend_appAssetPromiseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appAssetPromiseWithError:");
}

id objc_msgSend_appBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 appBundleIdentifier];
}

id objc_msgSend_appCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 appCapabilities];
}

id objc_msgSend_appClipMetadata(void *a1, const char *a2, ...)
{
  return _[a1 appClipMetadata];
}

id objc_msgSend_appEventEntityClass(void *a1, const char *a2, ...)
{
  return _[a1 appEventEntityClass];
}

id objc_msgSend_appForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appForBundleID:");
}

id objc_msgSend_appPlatform(void *a1, const char *a2, ...)
{
  return _[a1 appPlatform];
}

id objc_msgSend_appReceiptData(void *a1, const char *a2, ...)
{
  return _[a1 appReceiptData];
}

id objc_msgSend_appState(void *a1, const char *a2, ...)
{
  return _[a1 appState];
}

id objc_msgSend_appStoreToolsBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 appStoreToolsBuildVersion];
}

id objc_msgSend_appType(void *a1, const char *a2, ...)
{
  return _[a1 appType];
}

id objc_msgSend_appUptime(void *a1, const char *a2, ...)
{
  return _[a1 appUptime];
}

id objc_msgSend_appUsageType(void *a1, const char *a2, ...)
{
  return _[a1 appUsageType];
}

id objc_msgSend_appVersion(void *a1, const char *a2, ...)
{
  return _[a1 appVersion];
}

id objc_msgSend_appWithBundleID_mode_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appWithBundleID:mode:name:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleID(void *a1, const char *a2, ...)
{
  return _[a1 appleID];
}

id objc_msgSend_applicationDSID(void *a1, const char *a2, ...)
{
  return _[a1 applicationDSID];
}

id objc_msgSend_applicationDownloaderDSID(void *a1, const char *a2, ...)
{
  return _[a1 applicationDownloaderDSID];
}

id objc_msgSend_applicationExtensionRecords(void *a1, const char *a2, ...)
{
  return _[a1 applicationExtensionRecords];
}

id objc_msgSend_applicationFamilyID(void *a1, const char *a2, ...)
{
  return _[a1 applicationFamilyID];
}

id objc_msgSend_applicationHasMIDBasedSINF(void *a1, const char *a2, ...)
{
  return _[a1 applicationHasMIDBasedSINF];
}

id objc_msgSend_applicationIdentity(void *a1, const char *a2, ...)
{
  return _[a1 applicationIdentity];
}

id objc_msgSend_applicationIsInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationIsInstalled:");
}

id objc_msgSend_applicationMissingRequiredSINF(void *a1, const char *a2, ...)
{
  return _[a1 applicationMissingRequiredSINF];
}

id objc_msgSend_applicationMode(void *a1, const char *a2, ...)
{
  return _[a1 applicationMode];
}

id objc_msgSend_applicationName(void *a1, const char *a2, ...)
{
  return _[a1 applicationName];
}

id objc_msgSend_applicationType(void *a1, const char *a2, ...)
{
  return _[a1 applicationType];
}

id objc_msgSend_applyBinding_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyBinding:atIndex:");
}

id objc_msgSend_apps(void *a1, const char *a2, ...)
{
  return _[a1 apps];
}

id objc_msgSend_architecture(void *a1, const char *a2, ...)
{
  return _[a1 architecture];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_artistName(void *a1, const char *a2, ...)
{
  return _[a1 artistName];
}

id objc_msgSend_artworkURL(void *a1, const char *a2, ...)
{
  return _[a1 artworkURL];
}

id objc_msgSend_ascending(void *a1, const char *a2, ...)
{
  return _[a1 ascending];
}

id objc_msgSend_asd_canMakeExternalPurchasesForAnyCountryCodeInCountryCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asd_canMakeExternalPurchasesForAnyCountryCodeInCountryCodes:");
}

id objc_msgSend_asd_firstExternalLinkURLForCountryCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asd_firstExternalLinkURLForCountryCodes:");
}

id objc_msgSend_asd_galetteMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asd_galetteMode");
}

id objc_msgSend_asd_overriddenDictionaryForBundleIdentifier_startingDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asd_overriddenDictionaryForBundleIdentifier:startingDictionary:");
}

id objc_msgSend_assetServerUrl(void *a1, const char *a2, ...)
{
  return _[a1 assetServerUrl];
}

id objc_msgSend_assetToken(void *a1, const char *a2, ...)
{
  return _[a1 assetToken];
}

id objc_msgSend_assetType(void *a1, const char *a2, ...)
{
  return _[a1 assetType];
}

id objc_msgSend_assetURL(void *a1, const char *a2, ...)
{
  return _[a1 assetURL];
}

id objc_msgSend_assetWithUrl_variant_isDelta_isParallel_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetWithUrl:variant:isDelta:isParallel:logKey:");
}

id objc_msgSend_assets(void *a1, const char *a2, ...)
{
  return _[a1 assets];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_attributesOfFileSystemForPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfFileSystemForPath:error:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_attributionContext(void *a1, const char *a2, ...)
{
  return _[a1 attributionContext];
}

id objc_msgSend_attributionSignature(void *a1, const char *a2, ...)
{
  return _[a1 attributionSignature];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_authIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 authIfNeeded];
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMethod];
}

id objc_msgSend_authenticationType(void *a1, const char *a2, ...)
{
  return _[a1 authenticationType];
}

id objc_msgSend_autoInstallOverride(void *a1, const char *a2, ...)
{
  return _[a1 autoInstallOverride];
}

id objc_msgSend_autoRenewEnabled(void *a1, const char *a2, ...)
{
  return _[a1 autoRenewEnabled];
}

id objc_msgSend_autoRenewStatus(void *a1, const char *a2, ...)
{
  return _[a1 autoRenewStatus];
}

id objc_msgSend_autoUpdateEnabled(void *a1, const char *a2, ...)
{
  return _[a1 autoUpdateEnabled];
}

id objc_msgSend_autoUpdateEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoUpdateEnabled:");
}

id objc_msgSend_averagePollTime(void *a1, const char *a2, ...)
{
  return _[a1 averagePollTime];
}

id objc_msgSend_backgroundAssetMetadata(void *a1, const char *a2, ...)
{
  return _[a1 backgroundAssetMetadata];
}

id objc_msgSend_backgroundSessionConfigurationWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundSessionConfigurationWithIdentifier:");
}

id objc_msgSend_badgeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 badgeIdentifier];
}

id objc_msgSend_badgeValue(void *a1, const char *a2, ...)
{
  return _[a1 badgeValue];
}

id objc_msgSend_bagForProfile_profileVersion_processInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagForProfile:profileVersion:processInfo:");
}

id objc_msgSend_bagKey(void *a1, const char *a2, ...)
{
  return _[a1 bagKey];
}

id objc_msgSend_bagValueWithKey_valueType_valuePromise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagValueWithKey:valueType:valuePromise:");
}

id objc_msgSend_base64EncodedDataWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedDataWithOptions:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_batchLogKey(void *a1, const char *a2, ...)
{
  return _[a1 batchLogKey];
}

id objc_msgSend_batteryPercentage(void *a1, const char *a2, ...)
{
  return _[a1 batteryPercentage];
}

id objc_msgSend_becomeCurrentWithPendingUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeCurrentWithPendingUnitCount:");
}

id objc_msgSend_becomeCurrentWithPendingUnitCount_inBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeCurrentWithPendingUnitCount:inBlock:");
}

id objc_msgSend_beginIndexBatch(void *a1, const char *a2, ...)
{
  return _[a1 beginIndexBatch];
}

id objc_msgSend_beginRequestForHostContext_XPCInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginRequestForHostContext:XPCInterface:");
}

id objc_msgSend_beginRequestForHostContext_XPCInterface_executionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginRequestForHostContext:XPCInterface:executionBlock:");
}

id objc_msgSend_betaBuildGroupID(void *a1, const char *a2, ...)
{
  return _[a1 betaBuildGroupID];
}

id objc_msgSend_betaExternalVersionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 betaExternalVersionIdentifier];
}

id objc_msgSend_betaVersionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 betaVersionIdentifier];
}

id objc_msgSend_binaryPromiseAdapter(void *a1, const char *a2, ...)
{
  return _[a1 binaryPromiseAdapter];
}

id objc_msgSend_bindArray_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindArray:atPosition:");
}

id objc_msgSend_bindData_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindData:atPosition:");
}

id objc_msgSend_bindDictionary_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindDictionary:atPosition:");
}

id objc_msgSend_bindDouble_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindDouble:atPosition:");
}

id objc_msgSend_bindInt64_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindInt64:atPosition:");
}

id objc_msgSend_bindInt_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindInt:atPosition:");
}

id objc_msgSend_bindNullAtPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindNullAtPosition:");
}

id objc_msgSend_bindNumber_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindNumber:atPosition:");
}

id objc_msgSend_bindString_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindString:atPosition:");
}

id objc_msgSend_bindUUID_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindUUID:atPosition:");
}

id objc_msgSend_blindedData(void *a1, const char *a2, ...)
{
  return _[a1 blindedData];
}

id objc_msgSend_blindedElement(void *a1, const char *a2, ...)
{
  return _[a1 blindedElement];
}

id objc_msgSend_bodyData(void *a1, const char *a2, ...)
{
  return _[a1 bodyData];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLeanPropertyMaskKey(void *a1, const char *a2, ...)
{
  return _[a1 BOOLeanPropertyMaskKey];
}

id objc_msgSend_bootstrapWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bootstrapWithCompletionHandler:");
}

id objc_msgSend_bridgedTargetedItemID(void *a1, const char *a2, ...)
{
  return _[a1 bridgedTargetedItemID];
}

id objc_msgSend_buildVersion(void *a1, const char *a2, ...)
{
  return _[a1 buildVersion];
}

id objc_msgSend_bundleContainerURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleContainerURL];
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _[a1 bundleID];
}

id objc_msgSend_bundleIDPropertyKey(void *a1, const char *a2, ...)
{
  return _[a1 bundleIDPropertyKey];
}

id objc_msgSend_bundleIDs(void *a1, const char *a2, ...)
{
  return _[a1 bundleIDs];
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return _[a1 bundleId];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return _[a1 bundlePath];
}

id objc_msgSend_bundleRecordWithApplicationIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleRecordWithApplicationIdentifier:error:");
}

id objc_msgSend_bundleRecordWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_bundleShortVersion(void *a1, const char *a2, ...)
{
  return _[a1 bundleShortVersion];
}

id objc_msgSend_bundleShortVersionString(void *a1, const char *a2, ...)
{
  return _[a1 bundleShortVersionString];
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleURL];
}

id objc_msgSend_bundleVersion(void *a1, const char *a2, ...)
{
  return _[a1 bundleVersion];
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithURL:");
}

id objc_msgSend_buttonActions(void *a1, const char *a2, ...)
{
  return _[a1 buttonActions];
}

id objc_msgSend_buyParameters(void *a1, const char *a2, ...)
{
  return _[a1 buyParameters];
}

id objc_msgSend_buyParams(void *a1, const char *a2, ...)
{
  return _[a1 buyParams];
}

id objc_msgSend_buyParamsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buyParamsWithString:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_bytesTotal(void *a1, const char *a2, ...)
{
  return _[a1 bytesTotal];
}

id objc_msgSend_cacheInvalidated(void *a1, const char *a2, ...)
{
  return _[a1 cacheInvalidated];
}

id objc_msgSend_callbackHandler(void *a1, const char *a2, ...)
{
  return _[a1 callbackHandler];
}

id objc_msgSend_campaignId(void *a1, const char *a2, ...)
{
  return _[a1 campaignId];
}

id objc_msgSend_canUpdateWithRestrictedConversionValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canUpdateWithRestrictedConversionValue:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelApp_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelApp:withCompletionHandler:");
}

id objc_msgSend_cancelDownloadURL(void *a1, const char *a2, ...)
{
  return _[a1 cancelDownloadURL];
}

id objc_msgSend_cancelForReason_client_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelForReason:client:error:");
}

id objc_msgSend_cancelIfDuplicate(void *a1, const char *a2, ...)
{
  return _[a1 cancelIfDuplicate];
}

id objc_msgSend_cancelPurge(void *a1, const char *a2, ...)
{
  return _[a1 cancelPurge];
}

id objc_msgSend_cancelUsingProxy_withErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelUsingProxy:withErrorHandler:");
}

id objc_msgSend_canonicalExecutablePath(void *a1, const char *a2, ...)
{
  return _[a1 canonicalExecutablePath];
}

id objc_msgSend_carrier(void *a1, const char *a2, ...)
{
  return _[a1 carrier];
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_catalogRefreshedBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "catalogRefreshedBundleIDs:");
}

id objc_msgSend_catalogRegisteredApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "catalogRegisteredApps:");
}

id objc_msgSend_catalogUnregisteredBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "catalogUnregisteredBundleIDs:");
}

id objc_msgSend_categoryWithIdentifier_actions_intentIdentifiers_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoryWithIdentifier:actions:intentIdentifiers:options:");
}

id objc_msgSend_cellularDataPrompt(void *a1, const char *a2, ...)
{
  return _[a1 cellularDataPrompt];
}

id objc_msgSend_cellularNetworkType(void *a1, const char *a2, ...)
{
  return _[a1 cellularNetworkType];
}

id objc_msgSend_certificate(void *a1, const char *a2, ...)
{
  return _[a1 certificate];
}

id objc_msgSend_channelNotifyDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 channelNotifyDidComplete];
}

id objc_msgSend_channelNotifyDidFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelNotifyDidFailWithError:");
}

id objc_msgSend_channelNotifyDidInstallPlaceholder(void *a1, const char *a2, ...)
{
  return _[a1 channelNotifyDidInstallPlaceholder];
}

id objc_msgSend_channelNotifyDidProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelNotifyDidProgress:");
}

id objc_msgSend_channelStateDidOpen(void *a1, const char *a2, ...)
{
  return _[a1 channelStateDidOpen];
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_checkStoreQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkStoreQueue:");
}

id objc_msgSend_circularIconURLString(void *a1, const char *a2, ...)
{
  return _[a1 circularIconURLString];
}

id objc_msgSend_cleanupAfterUninstalledAppsWithBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupAfterUninstalledAppsWithBundleIDs:");
}

id objc_msgSend_clearLaunchHistoryWithBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLaunchHistoryWithBundleIDs:");
}

id objc_msgSend_clearPendingFollowUpItemsWithUniqueIdentifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingFollowUpItemsWithUniqueIdentifiers:error:");
}

id objc_msgSend_clearStatusCondition_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearStatusCondition:completionHandler:");
}

id objc_msgSend_clientID(void *a1, const char *a2, ...)
{
  return _[a1 clientID];
}

id objc_msgSend_clientIDForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientIDForConnection:");
}

id objc_msgSend_clientInfo(void *a1, const char *a2, ...)
{
  return _[a1 clientInfo];
}

id objc_msgSend_clientType(void *a1, const char *a2, ...)
{
  return _[a1 clientType];
}

id objc_msgSend_clipBundleID(void *a1, const char *a2, ...)
{
  return _[a1 clipBundleID];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeAndReturnError:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_codeSignatureVersion(void *a1, const char *a2, ...)
{
  return _[a1 codeSignatureVersion];
}

id objc_msgSend_comments(void *a1, const char *a2, ...)
{
  return _[a1 comments];
}

id objc_msgSend_companionAppBundleID(void *a1, const char *a2, ...)
{
  return _[a1 companionAppBundleID];
}

id objc_msgSend_companionBundleID(void *a1, const char *a2, ...)
{
  return _[a1 companionBundleID];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compareObject_toObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compareObject:toObject:");
}

id objc_msgSend_comparisonType(void *a1, const char *a2, ...)
{
  return _[a1 comparisonType];
}

id objc_msgSend_completeDataPromise(void *a1, const char *a2, ...)
{
  return _[a1 completeDataPromise];
}

id objc_msgSend_completeStoryForAdvertisedAppAdamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeStoryForAdvertisedAppAdamID:");
}

id objc_msgSend_completeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeWithError:");
}

id objc_msgSend_completeWithSuccess(void *a1, const char *a2, ...)
{
  return _[a1 completeWithSuccess];
}

id objc_msgSend_completedUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 completedUnitCount];
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_completionHandlerAdapter(void *a1, const char *a2, ...)
{
  return _[a1 completionHandlerAdapter];
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:toDate:options:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_compoundPredicateType(void *a1, const char *a2, ...)
{
  return _[a1 compoundPredicateType];
}

id objc_msgSend_condition(void *a1, const char *a2, ...)
{
  return _[a1 condition];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configureClientWithConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureClientWithConnection:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connectionNeedsResetForCorruption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionNeedsResetForCorruption:");
}

id objc_msgSend_connectionNeedsResetForReopen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionNeedsResetForReopen:");
}

id objc_msgSend_constantValue(void *a1, const char *a2, ...)
{
  return _[a1 constantValue];
}

id objc_msgSend_consumeData_andWaitWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consumeData:andWaitWithCompletionHandler:");
}

id objc_msgSend_consumeData_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consumeData:withCompletionHandler:");
}

id objc_msgSend_containingBundleRecord(void *a1, const char *a2, ...)
{
  return _[a1 containingBundleRecord];
}

id objc_msgSend_containsIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsIndex:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsPredicateWithProperty_values_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsPredicateWithProperty:values:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _[a1 content];
}

id objc_msgSend_contentRatingFlags(void *a1, const char *a2, ...)
{
  return _[a1 contentRatingFlags];
}

id objc_msgSend_contentType(void *a1, const char *a2, ...)
{
  return _[a1 contentType];
}

id objc_msgSend_contentTypeHeaderValue(void *a1, const char *a2, ...)
{
  return _[a1 contentTypeHeaderValue];
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_contextWithBundleId_onChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithBundleId:onChange:");
}

id objc_msgSend_conversionWithResult_postbackType_postbackSequenceIndex_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conversionWithResult:postbackType:postbackSequenceIndex:error:");
}

id objc_msgSend_coordinator(void *a1, const char *a2, ...)
{
  return _[a1 coordinator];
}

id objc_msgSend_coordinatorForAppWithIdentity_withClientID_createIfNotExisting_created_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinatorForAppWithIdentity:withClientID:createIfNotExisting:created:error:");
}

id objc_msgSend_coordinatorImportance(void *a1, const char *a2, ...)
{
  return _[a1 coordinatorImportance];
}

id objc_msgSend_coordinatorIntent(void *a1, const char *a2, ...)
{
  return _[a1 coordinatorIntent];
}

id objc_msgSend_coordinatorPromiseDataConsumer_willBeginUsingPromise_forReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinatorPromiseDataConsumer:willBeginUsingPromise:forReference:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 copyConfiguration];
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copySelectSQLWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySelectSQLWithProperties:");
}

id objc_msgSend_copyThinningHeadersForPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyThinningHeadersForPlatform:");
}

id objc_msgSend_copyWithRoaming_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithRoaming:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_correlationID(void *a1, const char *a2, ...)
{
  return _[a1 correlationID];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countOfBytesExpectedToReceive(void *a1, const char *a2, ...)
{
  return _[a1 countOfBytesExpectedToReceive];
}

id objc_msgSend_countOfBytesReceived(void *a1, const char *a2, ...)
{
  return _[a1 countOfBytesReceived];
}

id objc_msgSend_countOfEntities(void *a1, const char *a2, ...)
{
  return _[a1 countOfEntities];
}

id objc_msgSend_countOfResponseBodyBytesReceived(void *a1, const char *a2, ...)
{
  return _[a1 countOfResponseBodyBytesReceived];
}

id objc_msgSend_counterpartIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 counterpartIdentifiers];
}

id objc_msgSend_createActivityGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createActivityGroup:");
}

id objc_msgSend_createAppEventsForBundleIDs_eventType_installType_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAppEventsForBundleIDs:eventType:installType:connection:");
}

id objc_msgSend_createAppEventsWithLaunchEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAppEventsWithLaunchEvents:");
}

id objc_msgSend_createAsMobileBackup(void *a1, const char *a2, ...)
{
  return _[a1 createAsMobileBackup];
}

id objc_msgSend_createBagForSubProfile(void *a1, const char *a2, ...)
{
  return _[a1 createBagForSubProfile];
}

id objc_msgSend_createDeviceIdentifierWithVendorName_bundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDeviceIdentifierWithVendorName:bundleIdentifier:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createMetricsEventsForEventType_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMetricsEventsForEventType:context:");
}

id objc_msgSend_createOrMigrateStoreUsingSchema_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createOrMigrateStoreUsingSchema:");
}

id objc_msgSend_createRestoreFromCoordinatorWithCoordinator_policy_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRestoreFromCoordinatorWithCoordinator:policy:error:");
}

id objc_msgSend_createSnapshotWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSnapshotWithCompletion:");
}

id objc_msgSend_createsJobs(void *a1, const char *a2, ...)
{
  return _[a1 createsJobs];
}

id objc_msgSend_createsPlaceholders(void *a1, const char *a2, ...)
{
  return _[a1 createsPlaceholders];
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _[a1 creationDate];
}

id objc_msgSend_creatorIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 creatorIdentifier];
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialForTrust:");
}

id objc_msgSend_credentialWithUser_password_persistence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialWithUser:password:persistence:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentProcess(void *a1, const char *a2, ...)
{
  return _[a1 currentProcess];
}

id objc_msgSend_currentRequest(void *a1, const char *a2, ...)
{
  return _[a1 currentRequest];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_currentStatsString(void *a1, const char *a2, ...)
{
  return _[a1 currentStatsString];
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _[a1 currentUser];
}

id objc_msgSend_currentVersionReleaseDate(void *a1, const char *a2, ...)
{
  return _[a1 currentVersionReleaseDate];
}

id objc_msgSend_currentlyOptedInForMacOSEligibility(void *a1, const char *a2, ...)
{
  return _[a1 currentlyOptedInForMacOSEligibility];
}

id objc_msgSend_currentlyOptedInForXROSEligibility(void *a1, const char *a2, ...)
{
  return _[a1 currentlyOptedInForXROSEligibility];
}

id objc_msgSend_dPInfo(void *a1, const char *a2, ...)
{
  return _[a1 dPInfo];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataContainerURL(void *a1, const char *a2, ...)
{
  return _[a1 dataContainerURL];
}

id objc_msgSend_dataDetectorWithTypes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataDetectorWithTypes:error:");
}

id objc_msgSend_dataForRequestWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataForRequestWithError:");
}

id objc_msgSend_dataTaskPromiseWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskPromiseWithRequest:");
}

id objc_msgSend_dataTaskWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataUsingEncoding_allowLossyConversion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:allowLossyConversion:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return _[a1 database];
}

id objc_msgSend_databaseEntityClass(void *a1, const char *a2, ...)
{
  return _[a1 databaseEntityClass];
}

id objc_msgSend_databaseID(void *a1, const char *a2, ...)
{
  return _[a1 databaseID];
}

id objc_msgSend_databaseTable(void *a1, const char *a2, ...)
{
  return _[a1 databaseTable];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateInterval(void *a1, const char *a2, ...)
{
  return _[a1 dateInterval];
}

id objc_msgSend_datePurchased(void *a1, const char *a2, ...)
{
  return _[a1 datePurchased];
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return _[a1 day];
}

id objc_msgSend_deadline(void *a1, const char *a2, ...)
{
  return _[a1 deadline];
}

id objc_msgSend_debugReason(void *a1, const char *a2, ...)
{
  return _[a1 debugReason];
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decorateMetricsEvent_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decorateMetricsEvent:context:");
}

id objc_msgSend_defaultApplicationForCategory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultApplicationForCategory:error:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultPlatform(void *a1, const char *a2, ...)
{
  return _[a1 defaultPlatform];
}

id objc_msgSend_defaultProperties(void *a1, const char *a2, ...)
{
  return _[a1 defaultProperties];
}

id objc_msgSend_defaultService(void *a1, const char *a2, ...)
{
  return _[a1 defaultService];
}

id objc_msgSend_defaultSession(void *a1, const char *a2, ...)
{
  return _[a1 defaultSession];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_defaultsKey(void *a1, const char *a2, ...)
{
  return _[a1 defaultsKey];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteAllEntities(void *a1, const char *a2, ...)
{
  return _[a1 deleteAllEntities];
}

id objc_msgSend_deleteAllSearchableItemsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllSearchableItemsWithCompletionHandler:");
}

id objc_msgSend_deleteFromDatabase(void *a1, const char *a2, ...)
{
  return _[a1 deleteFromDatabase];
}

id objc_msgSend_deliverAlertPresentationRequest_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverAlertPresentationRequest:resultHandler:");
}

id objc_msgSend_deliverAuthenticateRequest_withResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverAuthenticateRequest:withResultHandler:");
}

id objc_msgSend_deliverDialogRequest_withResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverDialogRequest:withResultHandler:");
}

id objc_msgSend_deliverEngagementRequest_withResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverEngagementRequest:withResultHandler:");
}

id objc_msgSend_deliverNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverNotifications:");
}

id objc_msgSend_deliverNotifications_withBarrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverNotifications:withBarrierBlock:");
}

id objc_msgSend_deliverProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverProgress:");
}

id objc_msgSend_deliverProgress_withBarrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverProgress:withBarrierBlock:");
}

id objc_msgSend_deliverViewPresentationRequest_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverViewPresentationRequest:resultHandler:");
}

id objc_msgSend_demoteAppToPlaceholderWithApplicationIdentity_forReason_waitForDeletion_ignoreRemovability_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "demoteAppToPlaceholderWithApplicationIdentity:forReason:waitForDeletion:ignoreRemovability:error:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptiveName(void *a1, const char *a2, ...)
{
  return _[a1 descriptiveName];
}

id objc_msgSend_descriptorWithAppBundleIdentifier_appBundleURL_event_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptorWithAppBundleIdentifier:appBundleURL:event:client:");
}

id objc_msgSend_descriptorWithAppBundleIdentifier_appStoreMetadata_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptorWithAppBundleIdentifier:appStoreMetadata:client:");
}

id objc_msgSend_desiredPurgeAmount(void *a1, const char *a2, ...)
{
  return _[a1 desiredPurgeAmount];
}

id objc_msgSend_destinationAdNetwork(void *a1, const char *a2, ...)
{
  return _[a1 destinationAdNetwork];
}

id objc_msgSend_destinationCommerce(void *a1, const char *a2, ...)
{
  return _[a1 destinationCommerce];
}

id objc_msgSend_destinationDeveloper(void *a1, const char *a2, ...)
{
  return _[a1 destinationDeveloper];
}

id objc_msgSend_developerName(void *a1, const char *a2, ...)
{
  return _[a1 developerName];
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return _[a1 device];
}

id objc_msgSend_deviceBasedVPP(void *a1, const char *a2, ...)
{
  return _[a1 deviceBasedVPP];
}

id objc_msgSend_deviceForFromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForFromID:");
}

id objc_msgSend_deviceForIDSDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForIDSDevice:");
}

id objc_msgSend_deviceForPairingID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForPairingID:");
}

id objc_msgSend_deviceGUID(void *a1, const char *a2, ...)
{
  return _[a1 deviceGUID];
}

id objc_msgSend_deviceID(void *a1, const char *a2, ...)
{
  return _[a1 deviceID];
}

id objc_msgSend_deviceIdentifierForVendor(void *a1, const char *a2, ...)
{
  return _[a1 deviceIdentifierForVendor];
}

id objc_msgSend_deviceIsAppleTV(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsAppleTV];
}

id objc_msgSend_deviceIsAppleWatch(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsAppleWatch];
}

id objc_msgSend_deviceIsMac(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsMac];
}

id objc_msgSend_deviceIsiPad(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsiPad];
}

id objc_msgSend_deviceIsiPhone(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsiPhone];
}

id objc_msgSend_deviceIsiPod(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsiPod];
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _[a1 deviceName];
}

id objc_msgSend_deviceSecurityPromiseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceSecurityPromiseWithError:");
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _[a1 deviceType];
}

id objc_msgSend_deviceUnpairedWithPairingID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceUnpairedWithPairingID:");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_diagnosticDescription(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticDescription];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryRepresentationForRequest(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentationForRequest];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:");
}

id objc_msgSend_dictionaryWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:error:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_dictionaryWithSharedKeySet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithSharedKeySet:");
}

id objc_msgSend_didChangeJobs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeJobs:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didCompleteJobs_finalPhases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteJobs:finalPhases:");
}

id objc_msgSend_didReachTerminalPhaseWithBetaBundle_terminalPhase_error_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReachTerminalPhaseWithBetaBundle:terminalPhase:error:reply:");
}

id objc_msgSend_didReceiveInstallationEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveInstallationEvent:");
}

id objc_msgSend_didReceivePushMessages_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceivePushMessages:reply:");
}

id objc_msgSend_didReceivePushToken_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceivePushToken:reply:");
}

id objc_msgSend_didShowPaymentSheet(void *a1, const char *a2, ...)
{
  return _[a1 didShowPaymentSheet];
}

id objc_msgSend_didUpdateProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateProgress:");
}

id objc_msgSend_didUpdateStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateStates:");
}

id objc_msgSend_disableBoosting(void *a1, const char *a2, ...)
{
  return _[a1 disableBoosting];
}

id objc_msgSend_disambiguatedSQLForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disambiguatedSQLForProperty:");
}

id objc_msgSend_discoveredUpdate(void *a1, const char *a2, ...)
{
  return _[a1 discoveredUpdate];
}

id objc_msgSend_discreteProgressWithTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discreteProgressWithTotalUnitCount:");
}

id objc_msgSend_diskAvailable(void *a1, const char *a2, ...)
{
  return _[a1 diskAvailable];
}

id objc_msgSend_diskTotal(void *a1, const char *a2, ...)
{
  return _[a1 diskTotal];
}

id objc_msgSend_diskUsage(void *a1, const char *a2, ...)
{
  return _[a1 diskUsage];
}

id objc_msgSend_displayDeleteActiveRestoreDialogWithBundleID_logKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDeleteActiveRestoreDialogWithBundleID:logKey:completion:");
}

id objc_msgSend_displayNameWithLocalizedNames_andPrimaryLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayNameWithLocalizedNames:andPrimaryLocale:");
}

id objc_msgSend_displayNames(void *a1, const char *a2, ...)
{
  return _[a1 displayNames];
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_distributorID(void *a1, const char *a2, ...)
{
  return _[a1 distributorID];
}

id objc_msgSend_distributorInfo(void *a1, const char *a2, ...)
{
  return _[a1 distributorInfo];
}

id objc_msgSend_distributorIsFirstPartyApple(void *a1, const char *a2, ...)
{
  return _[a1 distributorIsFirstPartyApple];
}

id objc_msgSend_distributorIsThirdParty(void *a1, const char *a2, ...)
{
  return _[a1 distributorIsThirdParty];
}

id objc_msgSend_doesNotContainPredicateWithProperty_values_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotContainPredicateWithProperty:values:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_domainAllowlist(void *a1, const char *a2, ...)
{
  return _[a1 domainAllowlist];
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadAllowance(void *a1, const char *a2, ...)
{
  return _[a1 downloadAllowance];
}

id objc_msgSend_downloadLoadURLEventMetricsOverlayWithInstall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadLoadURLEventMetricsOverlayWithInstall:");
}

id objc_msgSend_downloadTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadTaskWithRequest:completionHandler:");
}

id objc_msgSend_downloaderDSID(void *a1, const char *a2, ...)
{
  return _[a1 downloaderDSID];
}

id objc_msgSend_downloaderID(void *a1, const char *a2, ...)
{
  return _[a1 downloaderID];
}

id objc_msgSend_driverExtensionPaths(void *a1, const char *a2, ...)
{
  return _[a1 driverExtensionPaths];
}

id objc_msgSend_dropAllUpdatesIncludingVPP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropAllUpdatesIncludingVPP:");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_effectiveBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveBoolValueForSetting:");
}

id objc_msgSend_effectiveValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveValueForSetting:");
}

id objc_msgSend_email(void *a1, const char *a2, ...)
{
  return _[a1 email];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_endContainerWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endContainerWithCode:");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endIndexBatchWithClientState_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endIndexBatchWithClientState:completionHandler:");
}

id objc_msgSend_endRequest(void *a1, const char *a2, ...)
{
  return _[a1 endRequest];
}

id objc_msgSend_endowmentNamespaces(void *a1, const char *a2, ...)
{
  return _[a1 endowmentNamespaces];
}

id objc_msgSend_endpointWithHostname_port_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endpointWithHostname:port:");
}

id objc_msgSend_engagementData(void *a1, const char *a2, ...)
{
  return _[a1 engagementData];
}

id objc_msgSend_engagementRequest(void *a1, const char *a2, ...)
{
  return _[a1 engagementRequest];
}

id objc_msgSend_enquePurchases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enquePurchases:");
}

id objc_msgSend_enqueueAppInstallationEventWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueAppInstallationEventWithEvent:");
}

id objc_msgSend_enqueueData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueData:");
}

id objc_msgSend_enqueueEvent_flushEvents_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueEvent:flushEvents:completionHandler:");
}

id objc_msgSend_enqueueEvents_flushEvents_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueEvents:flushEvents:completionHandler:");
}

id objc_msgSend_enqueueIdentityProviderAppsQueryWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueIdentityProviderAppsQueryWithCompletion:");
}

id objc_msgSend_enqueueMessageEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueMessageEvent:");
}

id objc_msgSend_entitlement(void *a1, const char *a2, ...)
{
  return _[a1 entitlement];
}

id objc_msgSend_entitlements(void *a1, const char *a2, ...)
{
  return _[a1 entitlements];
}

id objc_msgSend_enumerateActivitiesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateActivitiesUsingBlock:");
}

id objc_msgSend_enumerateApplicationsOfType_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateApplicationsOfType:usingBlock:");
}

id objc_msgSend_enumerateByteRangesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateByteRangesUsingBlock:");
}

id objc_msgSend_enumerateCoordinatorsWithError_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateCoordinatorsWithError:usingBlock:");
}

id objc_msgSend_enumerateInstalledApplicationsOnPairedDevice_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateInstalledApplicationsOnPairedDevice:withBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateMemoryEntitiesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateMemoryEntitiesUsingBlock:");
}

id objc_msgSend_enumerateMemoryEntitiesWithProperties_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateMemoryEntitiesWithProperties:usingBlock:");
}

id objc_msgSend_enumerateObjectsAtIndexes_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsAtIndexes:options:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumeratePersistentIDsAndProperties_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePersistentIDsAndProperties:usingBlock:");
}

id objc_msgSend_enumeratePersistentIDsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePersistentIDsUsingBlock:");
}

id objc_msgSend_enumeratorWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorWithOptions:");
}

id objc_msgSend_environmentForParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environmentForParams:");
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 ephemeralSessionConfiguration];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_essentialAssetPromisesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "essentialAssetPromisesWithError:");
}

id objc_msgSend_essentialDownloadAllowance(void *a1, const char *a2, ...)
{
  return _[a1 essentialDownloadAllowance];
}

id objc_msgSend_essentialMaxInstallSize(void *a1, const char *a2, ...)
{
  return _[a1 essentialMaxInstallSize];
}

id objc_msgSend_evaluateWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateWithObject:");
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return _[a1 eventBody];
}

id objc_msgSend_eventSubtype(void *a1, const char *a2, ...)
{
  return _[a1 eventSubtype];
}

id objc_msgSend_eventTime(void *a1, const char *a2, ...)
{
  return _[a1 eventTime];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _[a1 eventType];
}

id objc_msgSend_evid(void *a1, const char *a2, ...)
{
  return _[a1 evid];
}

id objc_msgSend_exactBundleVersion(void *a1, const char *a2, ...)
{
  return _[a1 exactBundleVersion];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executableURL(void *a1, const char *a2, ...)
{
  return _[a1 executableURL];
}

id objc_msgSend_executeQuery_excludingBundleIDs_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQuery:excludingBundleIDs:usingBlock:");
}

id objc_msgSend_executeQueryForUpdatesReloadingFromServer_logKey_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQueryForUpdatesReloadingFromServer:logKey:usingBlock:");
}

id objc_msgSend_existingCoordinatorForAppWithIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingCoordinatorForAppWithIdentity:error:");
}

id objc_msgSend_existsInDatabase(void *a1, const char *a2, ...)
{
  return _[a1 existsInDatabase];
}

id objc_msgSend_exitReason(void *a1, const char *a2, ...)
{
  return _[a1 exitReason];
}

id objc_msgSend_expectedContentLength(void *a1, const char *a2, ...)
{
  return _[a1 expectedContentLength];
}

id objc_msgSend_expectedContentLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectedContentLength:");
}

id objc_msgSend_expectedSoftwarePlatform(void *a1, const char *a2, ...)
{
  return _[a1 expectedSoftwarePlatform];
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _[a1 expirationDate];
}

id objc_msgSend_expiryDate(void *a1, const char *a2, ...)
{
  return _[a1 expiryDate];
}

id objc_msgSend_expressionType(void *a1, const char *a2, ...)
{
  return _[a1 expressionType];
}

id objc_msgSend_extensionPointRecord(void *a1, const char *a2, ...)
{
  return _[a1 extensionPointRecord];
}

id objc_msgSend_extensionReceiptURLs(void *a1, const char *a2, ...)
{
  return _[a1 extensionReceiptURLs];
}

id objc_msgSend_extensions(void *a1, const char *a2, ...)
{
  return _[a1 extensions];
}

id objc_msgSend_extensionsWithMatchingAttributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extensionsWithMatchingAttributes:error:");
}

id objc_msgSend_externalID(void *a1, const char *a2, ...)
{
  return _[a1 externalID];
}

id objc_msgSend_externalPropertyValues(void *a1, const char *a2, ...)
{
  return _[a1 externalPropertyValues];
}

id objc_msgSend_externalVersionID(void *a1, const char *a2, ...)
{
  return _[a1 externalVersionID];
}

id objc_msgSend_externalVersionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 externalVersionIdentifier];
}

id objc_msgSend_extractionPath(void *a1, const char *a2, ...)
{
  return _[a1 extractionPath];
}

id objc_msgSend_fairPlayStatus(void *a1, const char *a2, ...)
{
  return _[a1 fairPlayStatus];
}

id objc_msgSend_fairplayContextWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fairplayContextWithError:");
}

id objc_msgSend_fairplayStatus(void *a1, const char *a2, ...)
{
  return _[a1 fairplayStatus];
}

id objc_msgSend_familyID(void *a1, const char *a2, ...)
{
  return _[a1 familyID];
}

id objc_msgSend_fetchApplicationOnPairedDevice_withBundleID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchApplicationOnPairedDevice:withBundleID:completion:");
}

id objc_msgSend_fetchBackgroundRestoreCellularAccessWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBackgroundRestoreCellularAccessWithCompletion:");
}

id objc_msgSend_fetchInstalledApplicationsForPairedDevice_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchInstalledApplicationsForPairedDevice:completion:");
}

id objc_msgSend_fetchLastClientStateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLastClientStateWithCompletionHandler:");
}

id objc_msgSend_fidelityType(void *a1, const char *a2, ...)
{
  return _[a1 fidelityType];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileHandleForUpdatingAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForUpdatingAtPath:");
}

id objc_msgSend_fileModificationDate(void *a1, const char *a2, ...)
{
  return _[a1 fileModificationDate];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_filterUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterUsingPredicate:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_finalizedToken(void *a1, const char *a2, ...)
{
  return _[a1 finalizedToken];
}

id objc_msgSend_finishInstallID_transaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishInstallID:transaction:");
}

id objc_msgSend_finishStreamWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishStreamWithCompletionBlock:");
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return _[a1 finishTasksAndInvalidate];
}

id objc_msgSend_finishWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithCompletionHandler:");
}

id objc_msgSend_finishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithError:");
}

id objc_msgSend_finishWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithResult:");
}

id objc_msgSend_finishWithSuccess(void *a1, const char *a2, ...)
{
  return _[a1 finishWithSuccess];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_flushWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushWithCompletionHandler:");
}

id objc_msgSend_forceWatchInstall(void *a1, const char *a2, ...)
{
  return _[a1 forceWatchInstall];
}

id objc_msgSend_foreignDatabaseColumnForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foreignDatabaseColumnForProperty:");
}

id objc_msgSend_foreignDatabaseTableForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foreignDatabaseTableForProperty:");
}

id objc_msgSend_foreignDatabaseTablesToDelete(void *a1, const char *a2, ...)
{
  return _[a1 foreignDatabaseTablesToDelete];
}

id objc_msgSend_foreignKeyColumnForTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foreignKeyColumnForTable:");
}

id objc_msgSend_formUnionWithCharacterSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formUnionWithCharacterSet:");
}

id objc_msgSend_fractionCompleted(void *a1, const char *a2, ...)
{
  return _[a1 fractionCompleted];
}

id objc_msgSend_fullURL(void *a1, const char *a2, ...)
{
  return _[a1 fullURL];
}

id objc_msgSend_gameCenterEnabledGameInstalled_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gameCenterEnabledGameInstalled:withCompletionHandler:");
}

id objc_msgSend_generateEventFieldsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateEventFieldsForKeys:");
}

id objc_msgSend_generateRandomPrivateInput(void *a1, const char *a2, ...)
{
  return _[a1 generateRandomPrivateInput];
}

id objc_msgSend_generatedVendorID(void *a1, const char *a2, ...)
{
  return _[a1 generatedVendorID];
}

id objc_msgSend_genre(void *a1, const char *a2, ...)
{
  return _[a1 genre];
}

id objc_msgSend_genreID(void *a1, const char *a2, ...)
{
  return _[a1 genreID];
}

id objc_msgSend_genreName(void *a1, const char *a2, ...)
{
  return _[a1 genreName];
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 getActivePairedDevice];
}

id objc_msgSend_getAppEventsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppEventsWithError:");
}

id objc_msgSend_getAppUsageSessionForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppUsageSessionForBundleID:");
}

id objc_msgSend_getBiomeCrashesWithLogKey_startDate_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBiomeCrashesWithLogKey:startDate:completionHandler:");
}

id objc_msgSend_getBiomeLaunchesWithLogKey_dateInterval_latestLaunchOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBiomeLaunchesWithLogKey:dateInterval:latestLaunchOnly:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:range:");
}

id objc_msgSend_getCrashEventsSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCrashEventsSinceDate:");
}

id objc_msgSend_getCredentialStateForClientID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCredentialStateForClientID:completion:");
}

id objc_msgSend_getCurrentDataSubscriptionContextSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentDataSubscriptionContextSync:");
}

id objc_msgSend_getDataStatus_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDataStatus:completion:");
}

id objc_msgSend_getDefaultNFCApplication(void *a1, const char *a2, ...)
{
  return _[a1 getDefaultNFCApplication];
}

id objc_msgSend_getHasDeviceSecurityPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHasDeviceSecurityPromise:error:");
}

id objc_msgSend_getLaunchesWithLogKey_dateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLaunchesWithLogKey:dateInterval:");
}

id objc_msgSend_getManagedUpdatesWithRequestToken_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getManagedUpdatesWithRequestToken:replyHandler:");
}

id objc_msgSend_getPairedDevices(void *a1, const char *a2, ...)
{
  return _[a1 getPairedDevices];
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getUpdateMetadataForBundleID_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUpdateMetadataForBundleID:replyHandler:");
}

id objc_msgSend_getUpdatesWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUpdatesWithContext:");
}

id objc_msgSend_getUpdatesWithRequestToken_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUpdatesWithRequestToken:replyHandler:");
}

id objc_msgSend_getValuesForProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValuesForProperties:");
}

id objc_msgSend_globallyUniqueString(void *a1, const char *a2, ...)
{
  return _[a1 globallyUniqueString];
}

id objc_msgSend_groupWithName_maxConcurrent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupWithName:maxConcurrent:");
}

id objc_msgSend_handleActiveRestoreWithCoordinator_userInitiated_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleActiveRestoreWithCoordinator:userInitiated:logKey:");
}

id objc_msgSend_handleAuthenticateRequest_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAuthenticateRequest:resultHandler:");
}

id objc_msgSend_handleDialogRequest_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDialogRequest:resultHandler:");
}

id objc_msgSend_handleEngagementRequest_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEngagementRequest:resultHandler:");
}

id objc_msgSend_handleExternalPurchaseTokenInfoDictionary_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleExternalPurchaseTokenInfoDictionary:bundleID:");
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleForIdentifier:error:");
}

id objc_msgSend_handleInstalledAppsWithBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInstalledAppsWithBundleIDs:");
}

id objc_msgSend_handleNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotification:");
}

id objc_msgSend_handleNotificationResponse_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotificationResponse:bag:");
}

id objc_msgSend_handleUninstalledAppsWithBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUninstalledAppsWithBundleIDs:");
}

id objc_msgSend_handlesAuthentication(void *a1, const char *a2, ...)
{
  return _[a1 handlesAuthentication];
}

id objc_msgSend_handoffTokenWithTokenData_advertisedItemID_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handoffTokenWithTokenData:advertisedItemID:environment:");
}

id objc_msgSend_hasAppAssetPromise(void *a1, const char *a2, ...)
{
  return _[a1 hasAppAssetPromise];
}

id objc_msgSend_hasBytesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 hasBytesAvailable];
}

id objc_msgSend_hasInitialODRAssetPromises(void *a1, const char *a2, ...)
{
  return _[a1 hasInitialODRAssetPromises];
}

id objc_msgSend_hasInstallOptions(void *a1, const char *a2, ...)
{
  return _[a1 hasInstallOptions];
}

id objc_msgSend_hasMIDBasedSINF(void *a1, const char *a2, ...)
{
  return _[a1 hasMIDBasedSINF];
}

id objc_msgSend_hasMessagesExtension(void *a1, const char *a2, ...)
{
  return _[a1 hasMessagesExtension];
}

id objc_msgSend_hasP3(void *a1, const char *a2, ...)
{
  return _[a1 hasP3];
}

id objc_msgSend_hasPlaceholderPromise(void *a1, const char *a2, ...)
{
  return _[a1 hasPlaceholderPromise];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasRestoringCoordinatorForBundleID_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRestoringCoordinatorForBundleID:logKey:");
}

id objc_msgSend_hasSharedFeedback(void *a1, const char *a2, ...)
{
  return _[a1 hasSharedFeedback];
}

id objc_msgSend_hasUnknownDistributor(void *a1, const char *a2, ...)
{
  return _[a1 hasUnknownDistributor];
}

id objc_msgSend_hasUsedFreeOffer(void *a1, const char *a2, ...)
{
  return _[a1 hasUsedFreeOffer];
}

id objc_msgSend_hasUsedIntroPricingOffer(void *a1, const char *a2, ...)
{
  return _[a1 hasUsedIntroPricingOffer];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashArrayData(void *a1, const char *a2, ...)
{
  return _[a1 hashArrayData];
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashTableWithOptions:");
}

id objc_msgSend_hashType(void *a1, const char *a2, ...)
{
  return _[a1 hashType];
}

id objc_msgSend_hashedDescription(void *a1, const char *a2, ...)
{
  return _[a1 hashedDescription];
}

id objc_msgSend_headboardProvisionedApps(void *a1, const char *a2, ...)
{
  return _[a1 headboardProvisionedApps];
}

id objc_msgSend_hidePendingUpdatesBadge(void *a1, const char *a2, ...)
{
  return _[a1 hidePendingUpdatesBadge];
}

id objc_msgSend_hideUserPrompts(void *a1, const char *a2, ...)
{
  return _[a1 hideUserPrompts];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_humanReadableReason(void *a1, const char *a2, ...)
{
  return _[a1 humanReadableReason];
}

id objc_msgSend_iAdAttribution(void *a1, const char *a2, ...)
{
  return _[a1 iAdAttribution];
}

id objc_msgSend_iAdConversionDate(void *a1, const char *a2, ...)
{
  return _[a1 iAdConversionDate];
}

id objc_msgSend_iAdImpressionDate(void *a1, const char *a2, ...)
{
  return _[a1 iAdImpressionDate];
}

id objc_msgSend_iOSSupportVersion(void *a1, const char *a2, ...)
{
  return _[a1 iOSSupportVersion];
}

id objc_msgSend_iTunesMetadata(void *a1, const char *a2, ...)
{
  return _[a1 iTunesMetadata];
}

id objc_msgSend_iconForApplicationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconForApplicationIdentifier:");
}

id objc_msgSend_iconURLString(void *a1, const char *a2, ...)
{
  return _[a1 iconURLString];
}

id objc_msgSend_iconURLTemplate(void *a1, const char *a2, ...)
{
  return _[a1 iconURLTemplate];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identity(void *a1, const char *a2, ...)
{
  return _[a1 identity];
}

id objc_msgSend_identityForSubscription_usingClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityForSubscription:usingClient:error:");
}

id objc_msgSend_ignoreRequirePasswordRestriction(void *a1, const char *a2, ...)
{
  return _[a1 ignoreRequirePasswordRestriction];
}

id objc_msgSend_imagesData(void *a1, const char *a2, ...)
{
  return _[a1 imagesData];
}

id objc_msgSend_importKeybagWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importKeybagWithData:error:");
}

id objc_msgSend_importanceWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importanceWithError:");
}

id objc_msgSend_impressionId(void *a1, const char *a2, ...)
{
  return _[a1 impressionId];
}

id objc_msgSend_impressionWithResult_adNetworkID_adType_interactionType_version_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "impressionWithResult:adNetworkID:adType:interactionType:version:error:");
}

id objc_msgSend_inHomeCountry(void *a1, const char *a2, ...)
{
  return _[a1 inHomeCountry];
}

id objc_msgSend_incidentID(void *a1, const char *a2, ...)
{
  return _[a1 incidentID];
}

id objc_msgSend_includeArcade(void *a1, const char *a2, ...)
{
  return _[a1 includeArcade];
}

id objc_msgSend_includeClipDetails(void *a1, const char *a2, ...)
{
  return _[a1 includeClipDetails];
}

id objc_msgSend_includeMetrics(void *a1, const char *a2, ...)
{
  return _[a1 includeMetrics];
}

id objc_msgSend_incomingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 incomingResponseIdentifier];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexSearchableItems_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSearchableItems:completionHandler:");
}

id objc_msgSend_indexesOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexesOfObjectsPassingTest:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initAppPlaceholderWithBundleName_bundleID_installType_client_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initAppPlaceholderWithBundleName:bundleID:installType:client:error:");
}

id objc_msgSend_initForClient_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForClient:withOptions:");
}

id objc_msgSend_initForInstallMachineryWithBundleIdentifier_placeholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForInstallMachineryWithBundleIdentifier:placeholder:error:");
}

id objc_msgSend_initForInternalClient(void *a1, const char *a2, ...)
{
  return _[a1 initForInternalClient];
}

id objc_msgSend_initOnConnection_descriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initOnConnection:descriptor:");
}

id objc_msgSend_initOnScheduler_withExecutor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initOnScheduler:withExecutor:");
}

id objc_msgSend_initPlugInPlaceholderWithBundleName_bundleID_parentPlaceholder_client_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initPlugInPlaceholderWithBundleName:bundleID:parentPlaceholder:client:error:");
}

id objc_msgSend_initToMemory(void *a1, const char *a2, ...)
{
  return _[a1 initToMemory];
}

id objc_msgSend_initWithAccount_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:options:");
}

id objc_msgSend_initWithAccount_options_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:options:bag:");
}

id objc_msgSend_initWithAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountID:");
}

id objc_msgSend_initWithAccountID_askToBuyEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountID:askToBuyEnabled:");
}

id objc_msgSend_initWithAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountType:");
}

id objc_msgSend_initWithAppInstall_metadata_requestToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppInstall:metadata:requestToken:");
}

id objc_msgSend_initWithAppInstallDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppInstallDictionary:");
}

id objc_msgSend_initWithAppInstallEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppInstallEntity:");
}

id objc_msgSend_initWithAppInstallMemoryEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppInstallMemoryEntity:");
}

id objc_msgSend_initWithAppMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppMetadata:");
}

id objc_msgSend_initWithApplicationMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationMetadata:");
}

id objc_msgSend_initWithArray_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:copyItems:");
}

id objc_msgSend_initWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributes:");
}

id objc_msgSend_initWithAvailableUpdateCount_shouldNotifyOfChanges_bundleIDs_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAvailableUpdateCount:shouldNotifyOfChanges:bundleIDs:result:");
}

id objc_msgSend_initWithBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBag:");
}

id objc_msgSend_initWithBase64EncodedData_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedData:options:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase:");
}

id objc_msgSend_initWithBase_IDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase:IDs:");
}

id objc_msgSend_initWithBaseUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseUUID:");
}

id objc_msgSend_initWithBaseUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseUUIDString:");
}

id objc_msgSend_initWithBatchLogKey_logCode_externalID_bundleID_itemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBatchLogKey:logCode:externalID:bundleID:itemID:");
}

id objc_msgSend_initWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBlock:");
}

id objc_msgSend_initWithBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundle:");
}

id objc_msgSend_initWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleID:");
}

id objc_msgSend_initWithBundleID_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleID:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleID_itemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleID:itemID:");
}

id objc_msgSend_initWithBundleID_logKey_processHandle_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleID:logKey:processHandle:completion:");
}

id objc_msgSend_initWithBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIDs:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:error:");
}

id objc_msgSend_initWithBundleIdentifierOfSystemPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifierOfSystemPlaceholder:error:");
}

id objc_msgSend_initWithBundlePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundlePath:");
}

id objc_msgSend_initWithBundleURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleURL:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_deallocator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:deallocator:");
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:encoding:freeWhenDone:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCategory:");
}

id objc_msgSend_initWithCategory_base_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCategory:base:");
}

id objc_msgSend_initWithCategory_baseUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCategory:baseUUID:");
}

id objc_msgSend_initWithClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientIdentifier:");
}

id objc_msgSend_initWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCode:");
}

id objc_msgSend_initWithCode_IDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCode:IDs:");
}

id objc_msgSend_initWithCode_base_ID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCode:base:ID:");
}

id objc_msgSend_initWithCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCondition:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithConfiguration_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:bag:");
}

id objc_msgSend_initWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_initWithConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:");
}

id objc_msgSend_initWithContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentType:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithDSID_altDSID_username_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDSID:altDSID:username:options:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabase:");
}

id objc_msgSend_initWithDatabaseEntity_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseEntity:properties:");
}

id objc_msgSend_initWithDatabaseID_propertyValues_externalPropertyValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:propertyValues:externalPropertyValues:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDictionary_forAppAdamID_segment_hasFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:forAppAdamID:segment:hasFamily:");
}

id objc_msgSend_initWithDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDouble:");
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEndpoint:parameters:");
}

id objc_msgSend_initWithEntity_package_finalPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntity:package:finalPhase:");
}

id objc_msgSend_initWithEntityClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntityClass:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithError:");
}

id objc_msgSend_initWithError_params_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithError:params:");
}

id objc_msgSend_initWithExplanation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExplanation:");
}

id objc_msgSend_initWithExtension_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExtension:queue:");
}

id objc_msgSend_initWithExtension_queue_serviceTime_graceTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExtension:queue:serviceTime:graceTime:");
}

id objc_msgSend_initWithFairPlayStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFairPlayStatus:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithFormat_locale_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:locale:arguments:");
}

id objc_msgSend_initWithGenre_genreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGenre:genreID:");
}

id objc_msgSend_initWithIAPs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIAPs:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentity:");
}

id objc_msgSend_initWithIndexesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIndexesInRange:");
}

id objc_msgSend_initWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInteger:");
}

id objc_msgSend_initWithItemID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemID:error:");
}

id objc_msgSend_initWithItemID_versionID_purchaseInfo_isRedownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemID:versionID:purchaseInfo:isRedownload:");
}

id objc_msgSend_initWithItemIDs_additionalBuyParams_client_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemIDs:additionalBuyParams:client:logKey:");
}

id objc_msgSend_initWithItemIdentifer_externalVersionIdentifier_bundleIdentifier_bundleVersion_skipDownloads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemIdentifer:externalVersionIdentifier:bundleIdentifier:bundleVersion:skipDownloads:");
}

id objc_msgSend_initWithItemMetadata_additionalBuyParams_client_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemMetadata:additionalBuyParams:client:logKey:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithKey_ascending_comparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:ascending:comparator:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithListenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithListenerEndpoint:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLongLong:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_forClients_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:forClients:delegate:");
}

id objc_msgSend_initWithManifestURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManifestURL:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_bundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:bundleIdentifier:");
}

id objc_msgSend_initWithName_client_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:client:data:");
}

id objc_msgSend_initWithName_client_dictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:client:dictionary:");
}

id objc_msgSend_initWithName_client_diskSpaceNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:client:diskSpaceNeeded:");
}

id objc_msgSend_initWithName_client_streamingZipOptions_archiveSize_diskSpaceNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:client:streamingZipOptions:archiveSize:diskSpaceNeeded:");
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:value:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithPath_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:options:");
}

id objc_msgSend_initWithPersistentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentID:");
}

id objc_msgSend_initWithPersistentID_onConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentID:onConnection:");
}

id objc_msgSend_initWithPhase_terminalPhase_bundleID_itemID_appType_installType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPhase:terminalPhase:bundleID:itemID:appType:installType:");
}

id objc_msgSend_initWithPlacement_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlacement:context:");
}

id objc_msgSend_initWithPredicate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredicate:context:");
}

id objc_msgSend_initWithPropertyValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPropertyValues:");
}

id objc_msgSend_initWithPropertyValues_onConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPropertyValues:onConnection:");
}

id objc_msgSend_initWithPurchaseResponseItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPurchaseResponseItems:");
}

id objc_msgSend_initWithPurchaseType_buyParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPurchaseType:buyParams:");
}

id objc_msgSend_initWithPurgeableSize_purgeableApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPurgeableSize:purgeableApps:");
}

id objc_msgSend_initWithPurgedSize_purgedApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPurgedSize:purgedApps:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithRandomPrivateInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRandomPrivateInput:");
}

id objc_msgSend_initWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReason:");
}

id objc_msgSend_initWithReason_requestToken_logKey_callbackHandler_includeMetrics_isVPPLookup_userInitiated_targetedItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:");
}

id objc_msgSend_initWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:");
}

id objc_msgSend_initWithRequest_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:bag:");
}

id objc_msgSend_initWithRequestID_promiseBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestID:promiseBlock:");
}

id objc_msgSend_initWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResult:");
}

id objc_msgSend_initWithResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResults:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithServiceName_viewControllerClassName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:viewControllerClassName:");
}

id objc_msgSend_initWithServiceType_placementInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceType:placementInfo:");
}

id objc_msgSend_initWithStartDate_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:duration:");
}

id objc_msgSend_initWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:");
}

id objc_msgSend_initWithStartDate_endDate_maxEvents_lastN_reversed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:maxEvents:lastN:reversed:");
}

id objc_msgSend_initWithStoreItemIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreItemIdentifier:error:");
}

id objc_msgSend_initWithStoreRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreRequestContext:");
}

id objc_msgSend_initWithStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStream:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSuccess_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuccess:error:");
}

id objc_msgSend_initWithTask_metrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTask:metrics:");
}

id objc_msgSend_initWithTestFlightServiceHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestFlightServiceHost:");
}

id objc_msgSend_initWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceNow:");
}

id objc_msgSend_initWithTimestamp_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:userInfo:");
}

id objc_msgSend_initWithTitle_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:message:");
}

id objc_msgSend_initWithTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopic:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithType_clientIdentifier_clientVersion_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:clientIdentifier:clientVersion:bag:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:allowPlaceholder:error:");
}

id objc_msgSend_initWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_initWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:error:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUniqueIdentifier_domainIdentifier_attributeSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniqueIdentifier:domainIdentifier:attributeSet:");
}

id objc_msgSend_initWithUpdateDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUpdateDictionary:");
}

id objc_msgSend_initWithVolume_urgency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVolume:urgency:");
}

id objc_msgSend_initWithWebParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWebParams:");
}

id objc_msgSend_initialODRSize(void *a1, const char *a2, ...)
{
  return _[a1 initialODRSize];
}

id objc_msgSend_insertApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertApp:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertString_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertString:atIndex:");
}

id objc_msgSend_installDate(void *a1, const char *a2, ...)
{
  return _[a1 installDate];
}

id objc_msgSend_installDatePropertyKey(void *a1, const char *a2, ...)
{
  return _[a1 installDatePropertyKey];
}

id objc_msgSend_installEnterpriseApps_onPairedDevice_withReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installEnterpriseApps:onPairedDevice:withReplyHandler:");
}

id objc_msgSend_installFailureReason(void *a1, const char *a2, ...)
{
  return _[a1 installFailureReason];
}

id objc_msgSend_installForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installForBundleID:");
}

id objc_msgSend_installRequestFailedForApp_onDeviceWithPairingID_failureReason_wasUserInitiated_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installRequestFailedForApp:onDeviceWithPairingID:failureReason:wasUserInitiated:error:");
}

id objc_msgSend_installSourceBundleID(void *a1, const char *a2, ...)
{
  return _[a1 installSourceBundleID];
}

id objc_msgSend_installSystemApps_onPairedDevice_withReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installSystemApps:onPairedDevice:withReplyHandler:");
}

id objc_msgSend_installTotalUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 installTotalUnitCount];
}

id objc_msgSend_installType(void *a1, const char *a2, ...)
{
  return _[a1 installType];
}

id objc_msgSend_installUniversalVariant(void *a1, const char *a2, ...)
{
  return _[a1 installUniversalVariant];
}

id objc_msgSend_installWatchApps_onPairedDevice_withReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installWatchApps:onPairedDevice:withReplyHandler:");
}

id objc_msgSend_installWithDuration_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installWithDuration:logKey:");
}

id objc_msgSend_installedExternalVersionID(void *a1, const char *a2, ...)
{
  return _[a1 installedExternalVersionID];
}

id objc_msgSend_installedVariantID(void *a1, const char *a2, ...)
{
  return _[a1 installedVariantID];
}

id objc_msgSend_installs(void *a1, const char *a2, ...)
{
  return _[a1 installs];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_intentUsageWithDateInterval_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intentUsageWithDateInterval:logKey:");
}

id objc_msgSend_interactionType(void *a1, const char *a2, ...)
{
  return _[a1 interactionType];
}

id objc_msgSend_interactionTypeView(void *a1, const char *a2, ...)
{
  return _[a1 interactionTypeView];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interfaceType(void *a1, const char *a2, ...)
{
  return _[a1 interfaceType];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndCancel];
}

id objc_msgSend_invalidateTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateTokenForTopic:identifier:");
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _[a1 invertedSet];
}

id objc_msgSend_invocationWithMethodSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invocationWithMethodSignature:");
}

id objc_msgSend_invokeWithTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invokeWithTarget:");
}

id objc_msgSend_is32BitOnly(void *a1, const char *a2, ...)
{
  return _[a1 is32BitOnly];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAppAnalyticsAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isAppAnalyticsAllowed];
}

id objc_msgSend_isAppClip(void *a1, const char *a2, ...)
{
  return _[a1 isAppClip];
}

id objc_msgSend_isAppStoreVendable(void *a1, const char *a2, ...)
{
  return _[a1 isAppStoreVendable];
}

id objc_msgSend_isAppleSigned(void *a1, const char *a2, ...)
{
  return _[a1 isAppleSigned];
}

id objc_msgSend_isArcade(void *a1, const char *a2, ...)
{
  return _[a1 isArcade];
}

id objc_msgSend_isArcadeApp(void *a1, const char *a2, ...)
{
  return _[a1 isArcadeApp];
}

id objc_msgSend_isAsynchronous(void *a1, const char *a2, ...)
{
  return _[a1 isAsynchronous];
}

id objc_msgSend_isAtEnd(void *a1, const char *a2, ...)
{
  return _[a1 isAtEnd];
}

id objc_msgSend_isAutomatic(void *a1, const char *a2, ...)
{
  return _[a1 isAutomatic];
}

id objc_msgSend_isAutomaticAppDownloadsAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isAutomaticAppDownloadsAllowed];
}

id objc_msgSend_isAutomaticUpdateAuthorizationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAutomaticUpdateAuthorizationEnabled];
}

id objc_msgSend_isB2BCustomApp(void *a1, const char *a2, ...)
{
  return _[a1 isB2BCustomApp];
}

id objc_msgSend_isBackground(void *a1, const char *a2, ...)
{
  return _[a1 isBackground];
}

id objc_msgSend_isBackgroundRequest(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundRequest];
}

id objc_msgSend_isBackgroundUpdate(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundUpdate];
}

id objc_msgSend_isBeta(void *a1, const char *a2, ...)
{
  return _[a1 isBeta];
}

id objc_msgSend_isBetaApp(void *a1, const char *a2, ...)
{
  return _[a1 isBetaApp];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isCandidateAppMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCandidateAppMetadata:");
}

id objc_msgSend_isCandidateAppProxy_isMetadataLookup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCandidateAppProxy:isMetadataLookup:");
}

id objc_msgSend_isCatalogFetchedWithinThePastFewDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCatalogFetchedWithinThePastFewDays:");
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _[a1 isComplete];
}

id objc_msgSend_isConfiguratorInstall(void *a1, const char *a2, ...)
{
  return _[a1 isConfiguratorInstall];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isConstrained(void *a1, const char *a2, ...)
{
  return _[a1 isConstrained];
}

id objc_msgSend_isDSIDLess(void *a1, const char *a2, ...)
{
  return _[a1 isDSIDLess];
}

id objc_msgSend_isDefaultBrowser(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultBrowser];
}

id objc_msgSend_isDeletable(void *a1, const char *a2, ...)
{
  return _[a1 isDeletable];
}

id objc_msgSend_isDeletableSystemApplication(void *a1, const char *a2, ...)
{
  return _[a1 isDeletableSystemApplication];
}

id objc_msgSend_isDeviceBasedVPP(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceBasedVPP];
}

id objc_msgSend_isDiagnosticSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isDiagnosticSubmissionAllowed];
}

id objc_msgSend_isDiscretionary(void *a1, const char *a2, ...)
{
  return _[a1 isDiscretionary];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnabled];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExecuting(void *a1, const char *a2, ...)
{
  return _[a1 isExecuting];
}

id objc_msgSend_isExpensive(void *a1, const char *a2, ...)
{
  return _[a1 isExpensive];
}

id objc_msgSend_isExpensiveOrCellular(void *a1, const char *a2, ...)
{
  return _[a1 isExpensiveOrCellular];
}

id objc_msgSend_isExpired(void *a1, const char *a2, ...)
{
  return _[a1 isExpired];
}

id objc_msgSend_isFactoryInstall(void *a1, const char *a2, ...)
{
  return _[a1 isFactoryInstall];
}

id objc_msgSend_isFamilyShared(void *a1, const char *a2, ...)
{
  return _[a1 isFamilyShared];
}

id objc_msgSend_isFeedbackEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isFeedbackEnabled];
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isFirstParty(void *a1, const char *a2, ...)
{
  return _[a1 isFirstParty];
}

id objc_msgSend_isGameCenterEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isGameCenterEnabled];
}

id objc_msgSend_isHRNMode(void *a1, const char *a2, ...)
{
  return _[a1 isHRNMode];
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _[a1 isHidden];
}

id objc_msgSend_isHiddenFromSpringboard(void *a1, const char *a2, ...)
{
  return _[a1 isHiddenFromSpringboard];
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return _[a1 isInstalled];
}

id objc_msgSend_isInternal(void *a1, const char *a2, ...)
{
  return _[a1 isInternal];
}

id objc_msgSend_isLaunchProhibited(void *a1, const char *a2, ...)
{
  return _[a1 isLaunchProhibited];
}

id objc_msgSend_isLaunchScreenEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isLaunchScreenEnabled];
}

id objc_msgSend_isLocal(void *a1, const char *a2, ...)
{
  return _[a1 isLocal];
}

id objc_msgSend_isLocallyCacheable(void *a1, const char *a2, ...)
{
  return _[a1 isLocallyCacheable];
}

id objc_msgSend_isLocallyPaired(void *a1, const char *a2, ...)
{
  return _[a1 isLocallyPaired];
}

id objc_msgSend_isMachineBased(void *a1, const char *a2, ...)
{
  return _[a1 isMachineBased];
}

id objc_msgSend_isManagedAppDistributor(void *a1, const char *a2, ...)
{
  return _[a1 isManagedAppDistributor];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMultiUser(void *a1, const char *a2, ...)
{
  return _[a1 isMultiUser];
}

id objc_msgSend_isNegative(void *a1, const char *a2, ...)
{
  return _[a1 isNegative];
}

id objc_msgSend_isNotNullPredicateWithProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNotNullPredicateWithProperty:");
}

id objc_msgSend_isNullPredicateWithProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNullPredicateWithProperty:");
}

id objc_msgSend_isOffloaded(void *a1, const char *a2, ...)
{
  return _[a1 isOffloaded];
}

id objc_msgSend_isPerDevice(void *a1, const char *a2, ...)
{
  return _[a1 isPerDevice];
}

id objc_msgSend_isPlaceholder(void *a1, const char *a2, ...)
{
  return _[a1 isPlaceholder];
}

id objc_msgSend_isPreorder(void *a1, const char *a2, ...)
{
  return _[a1 isPreorder];
}

id objc_msgSend_isProfileValidated(void *a1, const char *a2, ...)
{
  return _[a1 isProfileValidated];
}

id objc_msgSend_isProxy(void *a1, const char *a2, ...)
{
  return _[a1 isProxy];
}

id objc_msgSend_isPurchasedRedownload(void *a1, const char *a2, ...)
{
  return _[a1 isPurchasedRedownload];
}

id objc_msgSend_isRemoteInstall(void *a1, const char *a2, ...)
{
  return _[a1 isRemoteInstall];
}

id objc_msgSend_isResponse(void *a1, const char *a2, ...)
{
  return _[a1 isResponse];
}

id objc_msgSend_isRevoked(void *a1, const char *a2, ...)
{
  return _[a1 isRevoked];
}

id objc_msgSend_isRoaming(void *a1, const char *a2, ...)
{
  return _[a1 isRoaming];
}

id objc_msgSend_isStoreOriginated(void *a1, const char *a2, ...)
{
  return _[a1 isStoreOriginated];
}

id objc_msgSend_isSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 isSystemApp];
}

id objc_msgSend_isTVProviderApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTVProviderApp:");
}

id objc_msgSend_isTVProviderApp_withReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTVProviderApp:withReplyHandler:");
}

id objc_msgSend_isThirdPartyRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isThirdPartyRestore:");
}

id objc_msgSend_isTrialPeriod(void *a1, const char *a2, ...)
{
  return _[a1 isTrialPeriod];
}

id objc_msgSend_isUnrepairableAppWithItemID_externalVersionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUnrepairableAppWithItemID:externalVersionID:");
}

id objc_msgSend_isUpdate(void *a1, const char *a2, ...)
{
  return _[a1 isUpdate];
}

id objc_msgSend_isUserInitiated(void *a1, const char *a2, ...)
{
  return _[a1 isUserInitiated];
}

id objc_msgSend_isVPPLicensed(void *a1, const char *a2, ...)
{
  return _[a1 isVPPLicensed];
}

id objc_msgSend_isVPPLookup(void *a1, const char *a2, ...)
{
  return _[a1 isVPPLookup];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isValidEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidEnvironment:");
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_isZipStreamable(void *a1, const char *a2, ...)
{
  return _[a1 isZipStreamable];
}

id objc_msgSend_itemID(void *a1, const char *a2, ...)
{
  return _[a1 itemID];
}

id objc_msgSend_itemIDPropertyKey(void *a1, const char *a2, ...)
{
  return _[a1 itemIDPropertyKey];
}

id objc_msgSend_itemIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 itemIdentifier];
}

id objc_msgSend_itemName(void *a1, const char *a2, ...)
{
  return _[a1 itemName];
}

id objc_msgSend_itemResponse(void *a1, const char *a2, ...)
{
  return _[a1 itemResponse];
}

id objc_msgSend_items(void *a1, const char *a2, ...)
{
  return _[a1 items];
}

id objc_msgSend_jobResults(void *a1, const char *a2, ...)
{
  return _[a1 jobResults];
}

id objc_msgSend_joinClauseForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "joinClauseForProperty:");
}

id objc_msgSend_joinWithPromise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "joinWithPromise:");
}

id objc_msgSend_keepAliveWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keepAliveWithFormat:");
}

id objc_msgSend_keepAliveWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keepAliveWithName:");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyPath(void *a1, const char *a2, ...)
{
  return _[a1 keyPath];
}

id objc_msgSend_keyWithName_crossDeviceSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyWithName:crossDeviceSync:");
}

id objc_msgSend_keybagSyncDataWithAccountID_transactionType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagSyncDataWithAccountID:transactionType:error:");
}

id objc_msgSend_keysSortedByValueUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysSortedByValueUsingComparator:");
}

id objc_msgSend_kickOffRestoreIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kickOffRestoreIfNeeded:");
}

id objc_msgSend_kind(void *a1, const char *a2, ...)
{
  return _[a1 kind];
}

id objc_msgSend_lastAutoPollDate(void *a1, const char *a2, ...)
{
  return _[a1 lastAutoPollDate];
}

id objc_msgSend_lastModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastModifiedDate];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastUserInitiatedInstall(void *a1, const char *a2, ...)
{
  return _[a1 lastUserInitiatedInstall];
}

id objc_msgSend_lastWelcomeScreenViewDate(void *a1, const char *a2, ...)
{
  return _[a1 lastWelcomeScreenViewDate];
}

id objc_msgSend_launchApp_extensionType_withResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchApp:extensionType:withResultHandler:");
}

id objc_msgSend_launchApp_onPairedDevice_withResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchApp:onPairedDevice:withResultHandler:");
}

id objc_msgSend_launchApp_withResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchApp:withResultHandler:");
}

id objc_msgSend_launchApplicationWithOptions_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchApplicationWithOptions:completionHandler:");
}

id objc_msgSend_launchProhibited(void *a1, const char *a2, ...)
{
  return _[a1 launchProhibited];
}

id objc_msgSend_launchReason(void *a1, const char *a2, ...)
{
  return _[a1 launchReason];
}

id objc_msgSend_launchURL(void *a1, const char *a2, ...)
{
  return _[a1 launchURL];
}

id objc_msgSend_leftExpression(void *a1, const char *a2, ...)
{
  return _[a1 leftExpression];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_linearDownloadWithLogKey_metrics_throughputMin_throughputMax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linearDownloadWithLogKey:metrics:throughputMin:throughputMax:");
}

id objc_msgSend_loadURLEventPromiseWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadURLEventPromiseWithContext:");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 localTimeZone];
}

id objc_msgSend_locale(void *a1, const char *a2, ...)
{
  return _[a1 locale];
}

id objc_msgSend_localizations(void *a1, const char *a2, ...)
{
  return _[a1 localizations];
}

id objc_msgSend_localizedCaseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCaseInsensitiveCompare:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _[a1 localizedFailureReason];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedNames(void *a1, const char *a2, ...)
{
  return _[a1 localizedNames];
}

id objc_msgSend_localizedStringForKey_value_table_localization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:localization:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_localizedTestNotes(void *a1, const char *a2, ...)
{
  return _[a1 localizedTestNotes];
}

id objc_msgSend_locateActionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locateActionWithIdentifier:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockWhenCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockWhenCondition:");
}

id objc_msgSend_lockWhenCondition_beforeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockWhenCondition:beforeDate:");
}

id objc_msgSend_lockerItemID(void *a1, const char *a2, ...)
{
  return _[a1 lockerItemID];
}

id objc_msgSend_logCode(void *a1, const char *a2, ...)
{
  return _[a1 logCode];
}

id objc_msgSend_logEvent_forAdvertisedAppAdamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logEvent:forAdvertisedAppAdamID:");
}

id objc_msgSend_logEvent_forAdvertisedAppAdamID_synchronizeWithSnout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logEvent:forAdvertisedAppAdamID:synchronizeWithSnout:");
}

id objc_msgSend_logEvents_forAdvertisedAppAdamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logEvents:forAdvertisedAppAdamID:");
}

id objc_msgSend_logKey(void *a1, const char *a2, ...)
{
  return _[a1 logKey];
}

id objc_msgSend_logStep_byParty_phase_success_forBundleID_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logStep:byParty:phase:success:forBundleID:description:");
}

id objc_msgSend_logUUID(void *a1, const char *a2, ...)
{
  return _[a1 logUUID];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longTitle(void *a1, const char *a2, ...)
{
  return _[a1 longTitle];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _[a1 longValue];
}

id objc_msgSend_lookupFamilyInfoIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 lookupFamilyInfoIfNecessary];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_main(void *a1, const char *a2, ...)
{
  return _[a1 main];
}

id objc_msgSend_mainWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainWithCompletionHandler:");
}

id objc_msgSend_makeActivity(void *a1, const char *a2, ...)
{
  return _[a1 makeActivity];
}

id objc_msgSend_makeObjectsPerformSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:withObject:");
}

id objc_msgSend_managedAppBundleIDs(void *a1, const char *a2, ...)
{
  return _[a1 managedAppBundleIDs];
}

id objc_msgSend_manifest(void *a1, const char *a2, ...)
{
  return _[a1 manifest];
}

id objc_msgSend_manifestType(void *a1, const char *a2, ...)
{
  return _[a1 manifestType];
}

id objc_msgSend_manifestURL(void *a1, const char *a2, ...)
{
  return _[a1 manifestURL];
}

id objc_msgSend_matchesNull(void *a1, const char *a2, ...)
{
  return _[a1 matchesNull];
}

id objc_msgSend_maxInstallSize(void *a1, const char *a2, ...)
{
  return _[a1 maxInstallSize];
}

id objc_msgSend_md5(void *a1, const char *a2, ...)
{
  return _[a1 md5];
}

id objc_msgSend_mediaKind(void *a1, const char *a2, ...)
{
  return _[a1 mediaKind];
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "member:");
}

id objc_msgSend_memoryEntityClass(void *a1, const char *a2, ...)
{
  return _[a1 memoryEntityClass];
}

id objc_msgSend_memoryEntityForPersistentID_withProperties_usingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "memoryEntityForPersistentID:withProperties:usingConnection:");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _[a1 message];
}

id objc_msgSend_messageActions(void *a1, const char *a2, ...)
{
  return _[a1 messageActions];
}

id objc_msgSend_messagesArtworkURL(void *a1, const char *a2, ...)
{
  return _[a1 messagesArtworkURL];
}

id objc_msgSend_metadataFromPlistAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataFromPlistAtURL:error:");
}

id objc_msgSend_metadataFromStoreMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataFromStoreMetadata:");
}

id objc_msgSend_metadataPropertyKey(void *a1, const char *a2, ...)
{
  return _[a1 metadataPropertyKey];
}

id objc_msgSend_methodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "methodSignatureForSelector:");
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return _[a1 metrics];
}

id objc_msgSend_metricsFieldsFromResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsFieldsFromResult:");
}

id objc_msgSend_metricsOverlay(void *a1, const char *a2, ...)
{
  return _[a1 metricsOverlay];
}

id objc_msgSend_metricsOverlayWithPurchaseInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsOverlayWithPurchaseInfo:");
}

id objc_msgSend_metricsType(void *a1, const char *a2, ...)
{
  return _[a1 metricsType];
}

id objc_msgSend_migrateSubscriptionStateWithAccount_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateSubscriptionStateWithAccount:logKey:");
}

id objc_msgSend_migrationType(void *a1, const char *a2, ...)
{
  return _[a1 migrationType];
}

id objc_msgSend_migratorType(void *a1, const char *a2, ...)
{
  return _[a1 migratorType];
}

id objc_msgSend_missingRequiredSINF(void *a1, const char *a2, ...)
{
  return _[a1 missingRequiredSINF];
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _[a1 mode];
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 modelIdentifier];
}

id objc_msgSend_modifyUsingTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyUsingTransaction:");
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_mutableCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopyWithZone:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_needsThirdPartyPurchaseConfirmationWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsThirdPartyPurchaseConfirmationWithBundleID:");
}

id objc_msgSend_networkConnectionType(void *a1, const char *a2, ...)
{
  return _[a1 networkConnectionType];
}

id objc_msgSend_networkConstraintsForMediaType_withBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkConstraintsForMediaType:withBag:");
}

id objc_msgSend_newHandleWithDefinition_configurationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newHandleWithDefinition:configurationContext:");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nextOptimalDownloadWindowWithHour_minute_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextOptimalDownloadWindowWithHour:minute:duration:");
}

id objc_msgSend_noteUpdatesStateChanged_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteUpdatesStateChanged:logKey:");
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return _[a1 notification];
}

id objc_msgSend_notificationCenter_didChangeSettings_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationCenter:didChangeSettings:bag:");
}

id objc_msgSend_notificationClient(void *a1, const char *a2, ...)
{
  return _[a1 notificationClient];
}

id objc_msgSend_notificationWithName_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationWithName:userInfo:");
}

id objc_msgSend_notifyDialogCompleteForPurchaseID_result_selectedButton_withResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDialogCompleteForPurchaseID:result:selectedButton:withResultHandler:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_nullIdentity(void *a1, const char *a2, ...)
{
  return _[a1 nullIdentity];
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberOfBytesToHash(void *a1, const char *a2, ...)
{
  return _[a1 numberOfBytesToHash];
}

id objc_msgSend_numberOfMatchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfMatchesInString:options:range:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objCType(void *a1, const char *a2, ...)
{
  return _[a1 objCType];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_ofClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:ofClass:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_odrEntitlementName(void *a1, const char *a2, ...)
{
  return _[a1 odrEntitlementName];
}

id objc_msgSend_odrServiceName(void *a1, const char *a2, ...)
{
  return _[a1 odrServiceName];
}

id objc_msgSend_offerID(void *a1, const char *a2, ...)
{
  return _[a1 offerID];
}

id objc_msgSend_offloadOnly(void *a1, const char *a2, ...)
{
  return _[a1 offloadOnly];
}

id objc_msgSend_onDemandResourceManifest(void *a1, const char *a2, ...)
{
  return _[a1 onDemandResourceManifest];
}

id objc_msgSend_onDeviceDiagnosticsAllowed(void *a1, const char *a2, ...)
{
  return _[a1 onDeviceDiagnosticsAllowed];
}

id objc_msgSend_oneAccountDSID_logKey_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "oneAccountDSID:logKey:completionHandler:");
}

id objc_msgSend_oneAccountDSIDWithLogKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "oneAccountDSIDWithLogKey:");
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplication:withOptions:completion:");
}

id objc_msgSend_openApplicationWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleID:");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_openSensitiveURL_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:error:");
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_openURL_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:withOptions:error:");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _[a1 operations];
}

id objc_msgSend_optedInForMacOSEligibility(void *a1, const char *a2, ...)
{
  return _[a1 optedInForMacOSEligibility];
}

id objc_msgSend_optedInForXROSEligibility(void *a1, const char *a2, ...)
{
  return _[a1 optedInForXROSEligibility];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionsWithDictionary:");
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return _[a1 orderedSet];
}

id objc_msgSend_orderedSetWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithArray:");
}

id objc_msgSend_orderedSetWithOrderedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithOrderedSet:");
}

id objc_msgSend_orderedSetWithOrderedSet_range_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithOrderedSet:range:copyItems:");
}

id objc_msgSend_originalPurchaserDSID(void *a1, const char *a2, ...)
{
  return _[a1 originalPurchaserDSID];
}

id objc_msgSend_originalRequest(void *a1, const char *a2, ...)
{
  return _[a1 originalRequest];
}

id objc_msgSend_osVersion(void *a1, const char *a2, ...)
{
  return _[a1 osVersion];
}

id objc_msgSend_outgoingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 outgoingResponseIdentifier];
}

id objc_msgSend_outputStreamToFileAtPath_append_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputStreamToFileAtPath:append:");
}

id objc_msgSend_ovalIconURLString(void *a1, const char *a2, ...)
{
  return _[a1 ovalIconURLString];
}

id objc_msgSend_overrideCampaignLimit(void *a1, const char *a2, ...)
{
  return _[a1 overrideCampaignLimit];
}

id objc_msgSend_overridesForAppBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overridesForAppBundleIdentifier:");
}

id objc_msgSend_packageCompression(void *a1, const char *a2, ...)
{
  return _[a1 packageCompression];
}

id objc_msgSend_packageDPInfo(void *a1, const char *a2, ...)
{
  return _[a1 packageDPInfo];
}

id objc_msgSend_packageSINF(void *a1, const char *a2, ...)
{
  return _[a1 packageSINF];
}

id objc_msgSend_packageSize(void *a1, const char *a2, ...)
{
  return _[a1 packageSize];
}

id objc_msgSend_packageURL(void *a1, const char *a2, ...)
{
  return _[a1 packageURL];
}

id objc_msgSend_pairedWatchModel(void *a1, const char *a2, ...)
{
  return _[a1 pairedWatchModel];
}

id objc_msgSend_pairedWatchOSVersion(void *a1, const char *a2, ...)
{
  return _[a1 pairedWatchOSVersion];
}

id objc_msgSend_pairingID(void *a1, const char *a2, ...)
{
  return _[a1 pairingID];
}

id objc_msgSend_parameterForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parameterForKey:");
}

id objc_msgSend_paramsFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paramsFromDictionary:");
}

id objc_msgSend_parentalControlsName(void *a1, const char *a2, ...)
{
  return _[a1 parentalControlsName];
}

id objc_msgSend_parentalControlsRank(void *a1, const char *a2, ...)
{
  return _[a1 parentalControlsRank];
}

id objc_msgSend_parse(void *a1, const char *a2, ...)
{
  return _[a1 parse];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathInfoWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathInfoWithURL:");
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_pauseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseWithError:");
}

id objc_msgSend_perform(void *a1, const char *a2, ...)
{
  return _[a1 perform];
}

id objc_msgSend_performAuthentication(void *a1, const char *a2, ...)
{
  return _[a1 performAuthentication];
}

id objc_msgSend_performBackgroundSoftwareUpdateCheck(void *a1, const char *a2, ...)
{
  return _[a1 performBackgroundSoftwareUpdateCheck];
}

id objc_msgSend_performEventWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performEventWithDescriptor:error:");
}

id objc_msgSend_performPostRestoreUpdatesCheck(void *a1, const char *a2, ...)
{
  return _[a1 performPostRestoreUpdatesCheck];
}

id objc_msgSend_performSubscriptionStatusRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSubscriptionStatusRequest:withCompletionHandler:");
}

id objc_msgSend_performTaskWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTaskWithBlock:");
}

id objc_msgSend_persistenceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 persistenceIdentifier];
}

id objc_msgSend_persistentID(void *a1, const char *a2, ...)
{
  return _[a1 persistentID];
}

id objc_msgSend_phase(void *a1, const char *a2, ...)
{
  return _[a1 phase];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_pingbackDelayOverrideForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pingbackDelayOverrideForEnvironment:");
}

id objc_msgSend_placeholderArtwork(void *a1, const char *a2, ...)
{
  return _[a1 placeholderArtwork];
}

id objc_msgSend_placeholderEntitlements(void *a1, const char *a2, ...)
{
  return _[a1 placeholderEntitlements];
}

id objc_msgSend_placeholderFailureReason(void *a1, const char *a2, ...)
{
  return _[a1 placeholderFailureReason];
}

id objc_msgSend_placeholderForRemovableSystemAppWithBundleID_client_installType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderForRemovableSystemAppWithBundleID:client:installType:error:");
}

id objc_msgSend_placeholderPromiseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderPromiseWithError:");
}

id objc_msgSend_placementsMap(void *a1, const char *a2, ...)
{
  return _[a1 placementsMap];
}

id objc_msgSend_platform(void *a1, const char *a2, ...)
{
  return _[a1 platform];
}

id objc_msgSend_platformForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "platformForRecord:");
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return _[a1 port];
}

id objc_msgSend_postFollowUpItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpItem:error:");
}

id objc_msgSend_postHashMismatchWithTaskInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postHashMismatchWithTaskInfo:");
}

id objc_msgSend_postMetrics(void *a1, const char *a2, ...)
{
  return _[a1 postMetrics];
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_postProcessBackgroundUpdateMetrics(void *a1, const char *a2, ...)
{
  return _[a1 postProcessBackgroundUpdateMetrics];
}

id objc_msgSend_postbackTypePending(void *a1, const char *a2, ...)
{
  return _[a1 postbackTypePending];
}

id objc_msgSend_postbackTypeRealized(void *a1, const char *a2, ...)
{
  return _[a1 postbackTypeRealized];
}

id objc_msgSend_predicateFormat(void *a1, const char *a2, ...)
{
  return _[a1 predicateFormat];
}

id objc_msgSend_predicateMatchingAllPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingAllPredicates:");
}

id objc_msgSend_predicateMatchingAnyPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingAnyPredicates:");
}

id objc_msgSend_predicateMatchingBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingBundleIdentifier:");
}

id objc_msgSend_predicateOperatorType(void *a1, const char *a2, ...)
{
  return _[a1 predicateOperatorType];
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predicateWithProperty_equalToLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:equalToLongLong:");
}

id objc_msgSend_predicateWithProperty_equalToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:equalToValue:");
}

id objc_msgSend_predicateWithProperty_value_comparisonType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:value:comparisonType:");
}

id objc_msgSend_predicates(void *a1, const char *a2, ...)
{
  return _[a1 predicates];
}

id objc_msgSend_predictedOptimalStartDate(void *a1, const char *a2, ...)
{
  return _[a1 predictedOptimalStartDate];
}

id objc_msgSend_preferredLocaleKeyFromAvailableKeys_primaryLocaleKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLocaleKeyFromAvailableKeys:primaryLocaleKey:");
}

id objc_msgSend_preferredLocalizationsFromArray_forPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLocalizationsFromArray:forPreferences:");
}

id objc_msgSend_prefetchDecryption(void *a1, const char *a2, ...)
{
  return _[a1 prefetchDecryption];
}

id objc_msgSend_preflightPackageURL(void *a1, const char *a2, ...)
{
  return _[a1 preflightPackageURL];
}

id objc_msgSend_preflightWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preflightWithCompletion:");
}

id objc_msgSend_prepareForAppInstallWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForAppInstallWithDescriptor:error:");
}

id objc_msgSend_prepareForExtraction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForExtraction:");
}

id objc_msgSend_prepareForExtractionToPath_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForExtractionToPath:completionBlock:");
}

id objc_msgSend_prepareWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithCompletionHandler:");
}

id objc_msgSend_prependingCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prependingCategory:");
}

id objc_msgSend_present(void *a1, const char *a2, ...)
{
  return _[a1 present];
}

id objc_msgSend_presentAuthenticateRequest_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentAuthenticateRequest:resultHandler:");
}

id objc_msgSend_presentDialogRequest_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentDialogRequest:resultHandler:");
}

id objc_msgSend_presentEngagementRequest_withClientInfo_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentEngagementRequest:withClientInfo:resultHandler:");
}

id objc_msgSend_presentFeedbackViewController(void *a1, const char *a2, ...)
{
  return _[a1 presentFeedbackViewController];
}

id objc_msgSend_presentingSceneBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 presentingSceneBundleIdentifier];
}

id objc_msgSend_presentingSceneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 presentingSceneIdentifier];
}

id objc_msgSend_previousExternalVersionID(void *a1, const char *a2, ...)
{
  return _[a1 previousExternalVersionID];
}

id objc_msgSend_previousVariantID(void *a1, const char *a2, ...)
{
  return _[a1 previousVariantID];
}

id objc_msgSend_primaryLocale(void *a1, const char *a2, ...)
{
  return _[a1 primaryLocale];
}

id objc_msgSend_prioritize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prioritize:");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateInput(void *a1, const char *a2, ...)
{
  return _[a1 privateInput];
}

id objc_msgSend_processExists(void *a1, const char *a2, ...)
{
  return _[a1 processExists];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processMessageActions_with_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMessageActions:with:completionHandler:");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processPurchases_failBatchOnError_requestToken_withReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPurchases:failBatchOnError:requestToken:withReplyHandler:");
}

id objc_msgSend_productType(void *a1, const char *a2, ...)
{
  return _[a1 productType];
}

id objc_msgSend_productURL(void *a1, const char *a2, ...)
{
  return _[a1 productURL];
}

id objc_msgSend_productVariants(void *a1, const char *a2, ...)
{
  return _[a1 productVariants];
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return _[a1 productVersion];
}

id objc_msgSend_profile(void *a1, const char *a2, ...)
{
  return _[a1 profile];
}

id objc_msgSend_profileVersion(void *a1, const char *a2, ...)
{
  return _[a1 profileVersion];
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _[a1 progress];
}

id objc_msgSend_progressObserverWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressObserverWithConfiguration:");
}

id objc_msgSend_progressState(void *a1, const char *a2, ...)
{
  return _[a1 progressState];
}

id objc_msgSend_progressWithTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressWithTotalUnitCount:");
}

id objc_msgSend_promiseAdapter(void *a1, const char *a2, ...)
{
  return _[a1 promiseAdapter];
}

id objc_msgSend_promiseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithError:");
}

id objc_msgSend_promiseWithFlattenedPromises_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithFlattenedPromises:");
}

id objc_msgSend_promiseWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithResult:");
}

id objc_msgSend_promiseWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithTimeout:");
}

id objc_msgSend_promoteApplicationWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promoteApplicationWithBundleIdentifier:");
}

id objc_msgSend_property(void *a1, const char *a2, ...)
{
  return _[a1 property];
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:");
}

id objc_msgSend_propertyForKey_inRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:inRequest:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_propertyValues(void *a1, const char *a2, ...)
{
  return _[a1 propertyValues];
}

id objc_msgSend_proposedCredential(void *a1, const char *a2, ...)
{
  return _[a1 proposedCredential];
}

id objc_msgSend_protectedMetadata(void *a1, const char *a2, ...)
{
  return _[a1 protectedMetadata];
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return _[a1 protectionSpace];
}

id objc_msgSend_protocol(void *a1, const char *a2, ...)
{
  return _[a1 protocol];
}

id objc_msgSend_provisioningProfiles(void *a1, const char *a2, ...)
{
  return _[a1 provisioningProfiles];
}

id objc_msgSend_proxyAppBundleID(void *a1, const char *a2, ...)
{
  return _[a1 proxyAppBundleID];
}

id objc_msgSend_proxyAppName(void *a1, const char *a2, ...)
{
  return _[a1 proxyAppName];
}

id objc_msgSend_proxyForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyForBundleID:");
}

id objc_msgSend_proxyForItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyForItemID:");
}

id objc_msgSend_publicErrorForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publicErrorForError:");
}

id objc_msgSend_publicToken(void *a1, const char *a2, ...)
{
  return _[a1 publicToken];
}

id objc_msgSend_publisherWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publisherWithOptions:");
}

id objc_msgSend_purchase(void *a1, const char *a2, ...)
{
  return _[a1 purchase];
}

id objc_msgSend_purchaseDate(void *a1, const char *a2, ...)
{
  return _[a1 purchaseDate];
}

id objc_msgSend_purchaseID(void *a1, const char *a2, ...)
{
  return _[a1 purchaseID];
}

id objc_msgSend_purchaseInfoForUpdateUserInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseInfoForUpdateUserInitiated:");
}

id objc_msgSend_purchaseOnly(void *a1, const char *a2, ...)
{
  return _[a1 purchaseOnly];
}

id objc_msgSend_purchaseResponse(void *a1, const char *a2, ...)
{
  return _[a1 purchaseResponse];
}

id objc_msgSend_purchaseState(void *a1, const char *a2, ...)
{
  return _[a1 purchaseState];
}

id objc_msgSend_purchaseToken(void *a1, const char *a2, ...)
{
  return _[a1 purchaseToken];
}

id objc_msgSend_purchaseType(void *a1, const char *a2, ...)
{
  return _[a1 purchaseType];
}

id objc_msgSend_purchaserDSID(void *a1, const char *a2, ...)
{
  return _[a1 purchaserDSID];
}

id objc_msgSend_purchaserID(void *a1, const char *a2, ...)
{
  return _[a1 purchaserID];
}

id objc_msgSend_purchases(void *a1, const char *a2, ...)
{
  return _[a1 purchases];
}

id objc_msgSend_purgeForVolume_urgency_desiredPurge_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeForVolume:urgency:desiredPurge:client:");
}

id objc_msgSend_purgeableApps(void *a1, const char *a2, ...)
{
  return _[a1 purgeableApps];
}

id objc_msgSend_purgeableSize(void *a1, const char *a2, ...)
{
  return _[a1 purgeableSize];
}

id objc_msgSend_purgedApps(void *a1, const char *a2, ...)
{
  return _[a1 purgedApps];
}

id objc_msgSend_purgedSize(void *a1, const char *a2, ...)
{
  return _[a1 purgedSize];
}

id objc_msgSend_pushConnection_didReceiveRawMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushConnection:didReceiveRawMessage:");
}

id objc_msgSend_pushConnection_didReceiveToken_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushConnection:didReceiveToken:forTopic:");
}

id objc_msgSend_pushService_didReceiveMessage_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushService:didReceiveMessage:completionHandler:");
}

id objc_msgSend_pushService_recoverFromDroppedMessagesOfActionType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushService:recoverFromDroppedMessagesOfActionType:completionHandler:");
}

id objc_msgSend_qosMetricsFields(void *a1, const char *a2, ...)
{
  return _[a1 qosMetricsFields];
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _[a1 query];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _[a1 queryItems];
}

id objc_msgSend_queryMetaDataSync(void *a1, const char *a2, ...)
{
  return _[a1 queryMetaDataSync];
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rangeOfUnit_startDate_interval_forDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfUnit:startDate:interval:forDate:");
}

id objc_msgSend_ratingLabel(void *a1, const char *a2, ...)
{
  return _[a1 ratingLabel];
}

id objc_msgSend_ratingRank(void *a1, const char *a2, ...)
{
  return _[a1 ratingRank];
}

id objc_msgSend_rawCriteria(void *a1, const char *a2, ...)
{
  return _[a1 rawCriteria];
}

id objc_msgSend_rawRegisteredName(void *a1, const char *a2, ...)
{
  return _[a1 rawRegisteredName];
}

id objc_msgSend_rawUpdateDictionary(void *a1, const char *a2, ...)
{
  return _[a1 rawUpdateDictionary];
}

id objc_msgSend_readBytes_length_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readBytes:length:error:");
}

id objc_msgSend_readDataUpToLength_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataUpToLength:error:");
}

id objc_msgSend_readUsingSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readUsingSession:");
}

id objc_msgSend_realToken(void *a1, const char *a2, ...)
{
  return _[a1 realToken];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_receipt(void *a1, const char *a2, ...)
{
  return _[a1 receipt];
}

id objc_msgSend_receiptFromBundleAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiptFromBundleAtPath:");
}

id objc_msgSend_receiptFromBundleAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiptFromBundleAtURL:");
}

id objc_msgSend_receiptURL(void *a1, const char *a2, ...)
{
  return _[a1 receiptURL];
}

id objc_msgSend_receiptWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiptWithData:");
}

id objc_msgSend_receiveMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveMessage:");
}

id objc_msgSend_receiveResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveResponse:");
}

id objc_msgSend_receivesCredentialSecurely(void *a1, const char *a2, ...)
{
  return _[a1 receivesCredentialSecurely];
}

id objc_msgSend_record(void *a1, const char *a2, ...)
{
  return _[a1 record];
}

id objc_msgSend_recordAppEventsForBundleIDs_eventType_installType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordAppEventsForBundleIDs:eventType:installType:");
}

id objc_msgSend_recordDeletedBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordDeletedBundleIDs:");
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _[a1 recordID];
}

id objc_msgSend_recordInstallEventsForBundleIDs_installType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordInstallEventsForBundleIDs:installType:");
}

id objc_msgSend_recordInstallWithBundleID_appInstallType_token_logKey_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordInstallWithBundleID:appInstallType:token:logKey:completionHandler:");
}

id objc_msgSend_recordLaunches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordLaunches:");
}

id objc_msgSend_recordSupplementalAppMetricsEvents(void *a1, const char *a2, ...)
{
  return _[a1 recordSupplementalAppMetricsEvents];
}

id objc_msgSend_recoveryCount(void *a1, const char *a2, ...)
{
  return _[a1 recoveryCount];
}

id objc_msgSend_redownloadParams(void *a1, const char *a2, ...)
{
  return _[a1 redownloadParams];
}

id objc_msgSend_referralSourceBundleID(void *a1, const char *a2, ...)
{
  return _[a1 referralSourceBundleID];
}

id objc_msgSend_referrerBundleID(void *a1, const char *a2, ...)
{
  return _[a1 referrerBundleID];
}

id objc_msgSend_referrerName(void *a1, const char *a2, ...)
{
  return _[a1 referrerName];
}

id objc_msgSend_referrerType(void *a1, const char *a2, ...)
{
  return _[a1 referrerType];
}

id objc_msgSend_referrerURL(void *a1, const char *a2, ...)
{
  return _[a1 referrerURL];
}

id objc_msgSend_refreshContainerTypes_forBundleID_reason_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshContainerTypes:forBundleID:reason:error:");
}

id objc_msgSend_refreshInstallID(void *a1, const char *a2, ...)
{
  return _[a1 refreshInstallID];
}

id objc_msgSend_refreshUpdateCountWithRequestToken_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshUpdateCountWithRequestToken:replyHandler:");
}

id objc_msgSend_refreshUpdateForApp_token_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshUpdateForApp:token:replyHandler:");
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDefaults:");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_registerPaths_forBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerPaths:forBundleID:completionHandler:");
}

id objc_msgSend_registrationDate(void *a1, const char *a2, ...)
{
  return _[a1 registrationDate];
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_relativeMetricsKeys(void *a1, const char *a2, ...)
{
  return _[a1 relativeMetricsKeys];
}

id objc_msgSend_relaunchOptions(void *a1, const char *a2, ...)
{
  return _[a1 relaunchOptions];
}

id objc_msgSend_releaseDate(void *a1, const char *a2, ...)
{
  return _[a1 releaseDate];
}

id objc_msgSend_reloadApplicationBadgeWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadApplicationBadgeWithReason:");
}

id objc_msgSend_reloadAppsFromServerWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadAppsFromServerWithReply:");
}

id objc_msgSend_reloadFromDatabaseEntity_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadFromDatabaseEntity:properties:");
}

id objc_msgSend_reloadFromServerInBackgroundWithToken_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadFromServerInBackgroundWithToken:completionBlock:");
}

id objc_msgSend_reloadFromServerWithRequestToken_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadFromServerWithRequestToken:replyHandler:");
}

id objc_msgSend_reloadManagedUpdatesWithRequestToken_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadManagedUpdatesWithRequestToken:replyHandler:");
}

id objc_msgSend_reloadUpdatesWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadUpdatesWithContext:");
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectProxy];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_removabilityForAppWithIdentity_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removabilityForAppWithIdentity:completion:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAppForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAppForBundleID:");
}

id objc_msgSend_removeCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCharactersInString:");
}

id objc_msgSend_removeDeviceIdentifierForVendorName_bundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeviceIdentifierForVendorName:bundleIdentifier:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removePersistentDomainForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePersistentDomainForName:");
}

id objc_msgSend_removePropertiesForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePropertiesForKeys:");
}

id objc_msgSend_removePropertyForKey_inRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePropertyForKey:inRequest:");
}

id objc_msgSend_removeStaleSubscriptionInfoWithLogKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeStaleSubscriptionInfoWithLogKey:");
}

id objc_msgSend_repair_needsToReleaseBlockingCallerWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repair:needsToReleaseBlockingCallerWithReason:");
}

id objc_msgSend_repair_wantsToRelaunchApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repair:wantsToRelaunchApplication:");
}

id objc_msgSend_repairApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repairApplication:error:");
}

id objc_msgSend_repairType(void *a1, const char *a2, ...)
{
  return _[a1 repairType];
}

id objc_msgSend_repairedBundleIDs(void *a1, const char *a2, ...)
{
  return _[a1 repairedBundleIDs];
}

id objc_msgSend_reportRemotely(void *a1, const char *a2, ...)
{
  return _[a1 reportRemotely];
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestEnded(void *a1, const char *a2, ...)
{
  return _[a1 requestEnded];
}

id objc_msgSend_requestID(void *a1, const char *a2, ...)
{
  return _[a1 requestID];
}

id objc_msgSend_requestIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 requestIdentifier];
}

id objc_msgSend_requestPresenter(void *a1, const char *a2, ...)
{
  return _[a1 requestPresenter];
}

id objc_msgSend_requestStartDate(void *a1, const char *a2, ...)
{
  return _[a1 requestStartDate];
}

id objc_msgSend_requestToken(void *a1, const char *a2, ...)
{
  return _[a1 requestToken];
}

id objc_msgSend_requestTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTokenForTopic:identifier:");
}

id objc_msgSend_requestType(void *a1, const char *a2, ...)
{
  return _[a1 requestType];
}

id objc_msgSend_requestWithIdentifier_content_trigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithIdentifier:content:trigger:");
}

id objc_msgSend_requestWithMethod_URL_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithMethod:URL:parameters:");
}

id objc_msgSend_requestWithMethod_bagURL_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithMethod:bagURL:parameters:");
}

id objc_msgSend_requestWithResult_destination_responseCode_postback_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithResult:destination:responseCode:postback:error:");
}

id objc_msgSend_requestWithTitle_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithTitle:message:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requestWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_requireUniversal(void *a1, const char *a2, ...)
{
  return _[a1 requireUniversal];
}

id objc_msgSend_requiredCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 requiredCapabilities];
}

id objc_msgSend_requiresPowerPluggedIn(void *a1, const char *a2, ...)
{
  return _[a1 requiresPowerPluggedIn];
}

id objc_msgSend_resetMetrics(void *a1, const char *a2, ...)
{
  return _[a1 resetMetrics];
}

id objc_msgSend_resetWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetWithCompletionHandler:");
}

id objc_msgSend_resignCurrent(void *a1, const char *a2, ...)
{
  return _[a1 resignCurrent];
}

id objc_msgSend_resourceURL(void *a1, const char *a2, ...)
{
  return _[a1 resourceURL];
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return _[a1 response];
}

id objc_msgSend_responseCorrelationId(void *a1, const char *a2, ...)
{
  return _[a1 responseCorrelationId];
}

id objc_msgSend_responseDataItems(void *a1, const char *a2, ...)
{
  return _[a1 responseDataItems];
}

id objc_msgSend_responseDecoder(void *a1, const char *a2, ...)
{
  return _[a1 responseDecoder];
}

id objc_msgSend_responseDictionary(void *a1, const char *a2, ...)
{
  return _[a1 responseDictionary];
}

id objc_msgSend_responseEndDate(void *a1, const char *a2, ...)
{
  return _[a1 responseEndDate];
}

id objc_msgSend_responseStartDate(void *a1, const char *a2, ...)
{
  return _[a1 responseStartDate];
}

id objc_msgSend_responseStatusCode(void *a1, const char *a2, ...)
{
  return _[a1 responseStatusCode];
}

id objc_msgSend_restoringCoordinatorForBundleID_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoringCoordinatorForBundleID:logKey:");
}

id objc_msgSend_resultTypeFailure(void *a1, const char *a2, ...)
{
  return _[a1 resultTypeFailure];
}

id objc_msgSend_resultTypeFinalized(void *a1, const char *a2, ...)
{
  return _[a1 resultTypeFinalized];
}

id objc_msgSend_resultTypeRegister(void *a1, const char *a2, ...)
{
  return _[a1 resultTypeRegister];
}

id objc_msgSend_resultTypeTokenReceived(void *a1, const char *a2, ...)
{
  return _[a1 resultTypeTokenReceived];
}

id objc_msgSend_resultTypeTransmission(void *a1, const char *a2, ...)
{
  return _[a1 resultTypeTransmission];
}

id objc_msgSend_resultTypeUpdate(void *a1, const char *a2, ...)
{
  return _[a1 resultTypeUpdate];
}

id objc_msgSend_resultWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithCompletion:");
}

id objc_msgSend_resultWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithError:");
}

id objc_msgSend_resultWithExistingActivity_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithExistingActivity:bundleID:");
}

id objc_msgSend_resultWithInvalidActivity_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithInvalidActivity:bundleID:");
}

id objc_msgSend_resultWithPersistentID_bundleID_status_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithPersistentID:bundleID:status:error:");
}

id objc_msgSend_resultWithRestrictedActivity_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithRestrictedActivity:bundleID:");
}

id objc_msgSend_resultWithTimeout_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithTimeout:error:");
}

id objc_msgSend_resultWithValidActivity_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithValidActivity:bundleID:");
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _[a1 results];
}

id objc_msgSend_resultsMatchingPredicate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultsMatchingPredicate:error:");
}

id objc_msgSend_resultsWithBundleIDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultsWithBundleIDs:error:");
}

id objc_msgSend_resultsWithItemIDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultsWithItemIDs:error:");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resumeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeWithError:");
}

id objc_msgSend_retainArguments(void *a1, const char *a2, ...)
{
  return _[a1 retainArguments];
}

id objc_msgSend_returnTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "returnTypes:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_rightExpression(void *a1, const char *a2, ...)
{
  return _[a1 rightExpression];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runSubTask_returningError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runSubTask:returningError:");
}

id objc_msgSend_runTaskReturningError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runTaskReturningError:");
}

id objc_msgSend_scanInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanInteger:");
}

id objc_msgSend_scanString_intoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanString:intoString:");
}

id objc_msgSend_scanUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanUnsignedLongLong:");
}

id objc_msgSend_scanUpToCharactersFromSet_intoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanUpToCharactersFromSet:intoString:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scheduleBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleBlock:");
}

id objc_msgSend_scheduleWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleWithEndpoint:parameters:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_screenHeight(void *a1, const char *a2, ...)
{
  return _[a1 screenHeight];
}

id objc_msgSend_screenWidth(void *a1, const char *a2, ...)
{
  return _[a1 screenWidth];
}

id objc_msgSend_searchTerm(void *a1, const char *a2, ...)
{
  return _[a1 searchTerm];
}

id objc_msgSend_secondsFromGMT(void *a1, const char *a2, ...)
{
  return _[a1 secondsFromGMT];
}

id objc_msgSend_secondsFromGMTForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondsFromGMTForDate:");
}

id objc_msgSend_secondsRemaining(void *a1, const char *a2, ...)
{
  return _[a1 secondsRemaining];
}

id objc_msgSend_segment(void *a1, const char *a2, ...)
{
  return _[a1 segment];
}

id objc_msgSend_selectedActionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 selectedActionIdentifier];
}

id objc_msgSend_sendDiscoverEvent(void *a1, const char *a2, ...)
{
  return _[a1 sendDiscoverEvent];
}

id objc_msgSend_sendLowDiskSpaceNotification(void *a1, const char *a2, ...)
{
  return _[a1 sendLowDiskSpaceNotification];
}

id objc_msgSend_sendProtobuf_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProtobuf:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _[a1 serialNumber];
}

id objc_msgSend_serializeLedger(void *a1, const char *a2, ...)
{
  return _[a1 serializeLedger];
}

id objc_msgSend_serverTimeFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverTimeFromDate:");
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return _[a1 serverTrust];
}

id objc_msgSend_serviceMinCompatibilityVersion(void *a1, const char *a2, ...)
{
  return _[a1 serviceMinCompatibilityVersion];
}

id objc_msgSend_serviceWithDefaultShellEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 serviceWithDefaultShellEndpoint];
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountID:");
}

id objc_msgSend_setAccountMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountMediaType:");
}

id objc_msgSend_setAccountStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountStatus:");
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActions:");
}

id objc_msgSend_setAdamId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdamId:");
}

id objc_msgSend_setAdditionalHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalHeaders:");
}

id objc_msgSend_setAdditionalMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalMetrics:");
}

id objc_msgSend_setAdditionalQueryParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalQueryParams:");
}

id objc_msgSend_setAllowServerDialogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowServerDialogs:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAllowsConstrainedNetworkAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsConstrainedNetworkAccess:");
}

id objc_msgSend_setAllowsExpensiveAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsExpensiveAccess:");
}

id objc_msgSend_setAllowsExpensiveNetworkAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsExpensiveNetworkAccess:");
}

id objc_msgSend_setAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltDSID:");
}

id objc_msgSend_setAlternateIconName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateIconName:");
}

id objc_msgSend_setAlwaysPreserved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysPreserved:");
}

id objc_msgSend_setAnisetteType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnisetteType:");
}

id objc_msgSend_setAnonymous_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnonymous:");
}

id objc_msgSend_setAppAdamId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppAdamId:");
}

id objc_msgSend_setAppAssetPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppAssetPromise:error:");
}

id objc_msgSend_setAppAssetPromiseResponsibleClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppAssetPromiseResponsibleClient:error:");
}

id objc_msgSend_setAppBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppBundleIdentifiers:");
}

id objc_msgSend_setAppCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppCapabilities:");
}

id objc_msgSend_setAppExtensionPlaceholderPromises_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppExtensionPlaceholderPromises:error:");
}

id objc_msgSend_setAppPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppPlatform:");
}

id objc_msgSend_setAppVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppVersion:");
}

id objc_msgSend_setAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleID:");
}

id objc_msgSend_setApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApps:");
}

id objc_msgSend_setArcade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArcade:");
}

id objc_msgSend_setArcadeApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArcadeApp:");
}

id objc_msgSend_setArgument_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArgument:atIndex:");
}

id objc_msgSend_setArtistName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArtistName:");
}

id objc_msgSend_setAssetToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetToken:");
}

id objc_msgSend_setAuditTokenData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuditTokenData:");
}

id objc_msgSend_setAuthenticationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationType:");
}

id objc_msgSend_setAutoInstallOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoInstallOverride:");
}

id objc_msgSend_setAutoRenewStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoRenewStatus:");
}

id objc_msgSend_setAutoUpdateEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoUpdateEnabled:");
}

id objc_msgSend_setAutoUpdateEnabled_withReplyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoUpdateEnabled:withReplyHandler:");
}

id objc_msgSend_setAutomaticInstall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticInstall:");
}

id objc_msgSend_setBadgeValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBadgeValue:");
}

id objc_msgSend_setBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBag:");
}

id objc_msgSend_setBatchLogKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchLogKey:");
}

id objc_msgSend_setBetaBuildGroupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBetaBuildGroupID:");
}

id objc_msgSend_setBetaExternalVersionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBetaExternalVersionIdentifier:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIDs:");
}

id objc_msgSend_setBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifier:");
}

id objc_msgSend_setBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifiers:");
}

id objc_msgSend_setBundlePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundlePath:");
}

id objc_msgSend_setBundleShortVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleShortVersion:");
}

id objc_msgSend_setBundleShortVersionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleShortVersionString:");
}

id objc_msgSend_setBundleURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleURL:");
}

id objc_msgSend_setBundleVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleVersion:");
}

id objc_msgSend_setButtonActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonActions:");
}

id objc_msgSend_setBuyParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuyParams:");
}

id objc_msgSend_setCachePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachePolicy:");
}

id objc_msgSend_setCachedSubscriptionEntitlements_forAccountID_segment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedSubscriptionEntitlements:forAccountID:segment:");
}

id objc_msgSend_setCanMakeAccountActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanMakeAccountActive:");
}

id objc_msgSend_setCanUseLocalCacheServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanUseLocalCacheServer:");
}

id objc_msgSend_setCancellationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancellationHandler:");
}

id objc_msgSend_setCategoryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryIdentifier:");
}

id objc_msgSend_setCellularPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellularPolicy:");
}

id objc_msgSend_setCheckDiagnosticsAndUsageSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckDiagnosticsAndUsageSetting:");
}

id objc_msgSend_setCircularIconURLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCircularIconURLString:");
}

id objc_msgSend_setClientInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientInfo:");
}

id objc_msgSend_setClientType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientType:");
}

id objc_msgSend_setClientVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientVersion:");
}

id objc_msgSend_setCohort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCohort:");
}

id objc_msgSend_setCompanionBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompanionBundleID:");
}

id objc_msgSend_setCompanionBundleIdentifierForWatchApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompanionBundleIdentifierForWatchApp:");
}

id objc_msgSend_setComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComplete:");
}

id objc_msgSend_setCompleteDataPromise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompleteDataPromise:");
}

id objc_msgSend_setCompletedUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletedUnitCount:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setCompressRequestBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompressRequestBody:");
}

id objc_msgSend_setConfigurationCompleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationCompleteWithError:");
}

id objc_msgSend_setConnectionProxyDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionProxyDictionary:");
}

id objc_msgSend_setContentDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentDescription:");
}

id objc_msgSend_setContentRatingFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentRatingFlags:");
}

id objc_msgSend_setCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoordinator:");
}

id objc_msgSend_setCoordinatorImportance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoordinatorImportance:");
}

id objc_msgSend_setCoordinatorIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoordinatorIntent:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCreateAsMobileBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreateAsMobileBackup:");
}

id objc_msgSend_setCurrentlyOptedInForMacOSEligibility_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentlyOptedInForMacOSEligibility:");
}

id objc_msgSend_setCurrentlyOptedInForXROSEligibility_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentlyOptedInForXROSEligibility:");
}

id objc_msgSend_setCustomBrowserEngineApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomBrowserEngineApp:");
}

id objc_msgSend_setDSPersonID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDSPersonID:");
}

id objc_msgSend_setDatabaseID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatabaseID:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDatePurchased_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatePurchased:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDebugReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebugReason:");
}

id objc_msgSend_setDefaultAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultAction:");
}

id objc_msgSend_setDefaultActionURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultActionURL:");
}

id objc_msgSend_setDefaultButtonString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultButtonString:");
}

id objc_msgSend_setDefaultValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultValue:forKey:");
}

id objc_msgSend_setDefaultWebBrowserToApplicationRecord_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultWebBrowserToApplicationRecord:completionHandler:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDesiredPurgeAmount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredPurgeAmount:");
}

id objc_msgSend_setDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinations:");
}

id objc_msgSend_setDeveloperName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeveloperName:");
}

id objc_msgSend_setDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevice:");
}

id objc_msgSend_setDeviceBasedVPP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceBasedVPP:");
}

id objc_msgSend_setDeviceSecurityPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceSecurityPromise:error:");
}

id objc_msgSend_setDeviceVendorID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceVendorID:");
}

id objc_msgSend_setDialogOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDialogOptions:");
}

id objc_msgSend_setDidShowPaymentSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidShowPaymentSheet:");
}

id objc_msgSend_setDisableBoosting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableBoosting:");
}

id objc_msgSend_setDiscoveredUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveredUpdate:");
}

id objc_msgSend_setDiscretionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscretionary:");
}

id objc_msgSend_setDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayName:");
}

id objc_msgSend_setDisplayNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayNames:");
}

id objc_msgSend_setDisplayStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayStyle:");
}

id objc_msgSend_setDistributorID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistributorID:");
}

id objc_msgSend_setDistributorInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistributorInfo:");
}

id objc_msgSend_setDoNotBlockBeforeFirstUnlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoNotBlockBeforeFirstUnlock:");
}

id objc_msgSend_setDoNotBlockOnNetworkStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoNotBlockOnNetworkStatus:");
}

id objc_msgSend_setDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomain:");
}

id objc_msgSend_setDownloadCompletedUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadCompletedUnitCount:");
}

id objc_msgSend_setDownloadTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadTotalUnitCount:");
}

id objc_msgSend_setDownloaderDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloaderDSID:");
}

id objc_msgSend_setDownloaderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloaderID:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmail:");
}

id objc_msgSend_setEnabledActionTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledActionTypes:");
}

id objc_msgSend_setEnabledTopics_ignoredTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledTopics:ignoredTopics:");
}

id objc_msgSend_setEngagementPushTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngagementPushTopic:");
}

id objc_msgSend_setEnterpriseInstallURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnterpriseInstallURL:");
}

id objc_msgSend_setEntitlementsPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntitlementsPromise:error:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorBlock:");
}

id objc_msgSend_setEssentialAssetPromises_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEssentialAssetPromises:error:");
}

id objc_msgSend_setEssentialBackgroundAssetDownloadEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEssentialBackgroundAssetDownloadEstimate:");
}

id objc_msgSend_setEventSubtype_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventSubtype:");
}

id objc_msgSend_setEventTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventTime:");
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventType:");
}

id objc_msgSend_setEvid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvid:");
}

id objc_msgSend_setExecutablePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExecutablePath:");
}

id objc_msgSend_setExitReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitReason:");
}

id objc_msgSend_setExpectedSoftwarePlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedSoftwarePlatform:");
}

id objc_msgSend_setExpirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationDate:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExtensionDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtensionDictionary:");
}

id objc_msgSend_setExtensionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtensionIdentifier:");
}

id objc_msgSend_setExtensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtensions:");
}

id objc_msgSend_setExternalID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExternalID:");
}

id objc_msgSend_setExtractorDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtractorDelegate:");
}

id objc_msgSend_setFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailureError:");
}

id objc_msgSend_setFairplayStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFairplayStatus:");
}

id objc_msgSend_setFamilyID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyID:");
}

id objc_msgSend_setFamilyShared_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyShared:");
}

id objc_msgSend_setFeedbackEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedbackEnabled:");
}

id objc_msgSend_setFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilter:");
}

id objc_msgSend_setFirstNotificationDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstNotificationDelay:");
}

id objc_msgSend_setFirstParty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstParty:");
}

id objc_msgSend_setFlushDelayEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlushDelayEnabled:");
}

id objc_msgSend_setForceRevoke_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceRevoke:");
}

id objc_msgSend_setForceUpsell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceUpsell:");
}

id objc_msgSend_setForegroundUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundUsage:");
}

id objc_msgSend_setForegroundUsageEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundUsageEvents:");
}

id objc_msgSend_setGameCenterEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGameCenterEnabled:");
}

id objc_msgSend_setGameCenterEverEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGameCenterEverEnabled:");
}

id objc_msgSend_setGeneratedVendorID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneratedVendorID:");
}

id objc_msgSend_setGenre_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenre:");
}

id objc_msgSend_setGenreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenreID:");
}

id objc_msgSend_setGenreName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenreName:");
}

id objc_msgSend_setGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupIdentifier:");
}

id objc_msgSend_setHARLoggingItemLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHARLoggingItemLimit:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPContentType:");
}

id objc_msgSend_setHTTPCookieAcceptPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPCookieAcceptPolicy:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHTTPShouldHandleCookies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPShouldHandleCookies:");
}

id objc_msgSend_setHTTPShouldSetCookies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPShouldSetCookies:");
}

id objc_msgSend_setHTTPShouldUsePipelining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPShouldUsePipelining:");
}

id objc_msgSend_setHTTPUserAgent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPUserAgent:");
}

id objc_msgSend_setHasBeenPosted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasBeenPosted:");
}

id objc_msgSend_setHasCachedFamilyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCachedFamilyInfo:");
}

id objc_msgSend_setHasMessagesExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasMessagesExtension:");
}

id objc_msgSend_setHasOrEverHasHadIAP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasOrEverHasHadIAP:");
}

id objc_msgSend_setHasP3_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasP3:");
}

id objc_msgSend_setHasPostProcessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasPostProcessing:");
}

id objc_msgSend_setHasUsedFreeOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasUsedFreeOffer:");
}

id objc_msgSend_setHasUsedIntroPricingOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasUsedIntroPricingOffer:");
}

id objc_msgSend_setHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeader:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHiddenFromSpringboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHiddenFromSpringboard:");
}

id objc_msgSend_setHideUserPrompts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHideUserPrompts:");
}

id objc_msgSend_setHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHost:");
}

id objc_msgSend_setIAdAttribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIAdAttribution:");
}

id objc_msgSend_setIAdConversionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIAdConversionDate:");
}

id objc_msgSend_setIAdImpressionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIAdImpressionDate:");
}

id objc_msgSend_setITunesMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setITunesMetadata:");
}

id objc_msgSend_setIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIcon:");
}

id objc_msgSend_setIconPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconPromise:error:");
}

id objc_msgSend_setIconURLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconURLString:");
}

id objc_msgSend_setIconURLTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconURLTemplate:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIgnoreRequirePasswordRestriction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreRequirePasswordRestriction:");
}

id objc_msgSend_setImportance_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportance:error:");
}

id objc_msgSend_setIncidentId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncidentId:");
}

id objc_msgSend_setIncludeAccountMatchStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeAccountMatchStatus:");
}

id objc_msgSend_setIndexDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIndexDelegate:");
}

id objc_msgSend_setInformativeText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInformativeText:");
}

id objc_msgSend_setInitialODRAssetPromises_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialODRAssetPromises:error:");
}

id objc_msgSend_setInitialODRSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialODRSize:");
}

id objc_msgSend_setInstallCompletedUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstallCompletedUnitCount:");
}

id objc_msgSend_setInstallDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstallDate:");
}

id objc_msgSend_setInstallError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstallError:");
}

id objc_msgSend_setInstallOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstallOptions:error:");
}

id objc_msgSend_setInstallTargetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstallTargetType:");
}

id objc_msgSend_setInstallTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstallTotalUnitCount:");
}

id objc_msgSend_setInstalledExternalVersionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstalledExternalVersionID:");
}

id objc_msgSend_setInstalledVariantID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstalledVariantID:");
}

id objc_msgSend_setInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInteger:forKey:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInterruptionLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionLevel:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIs32BitOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIs32BitOnly:");
}

id objc_msgSend_setIsArcade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsArcade:");
}

id objc_msgSend_setIsAutoDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAutoDownload:");
}

id objc_msgSend_setIsB2BCustomApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsB2BCustomApp:");
}

id objc_msgSend_setIsBeta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsBeta:");
}

id objc_msgSend_setIsClip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsClip:");
}

id objc_msgSend_setIsFirstParty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstParty:");
}

id objc_msgSend_setIsHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsHidden:");
}

id objc_msgSend_setIsPreorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPreorder:");
}

id objc_msgSend_setIsRedownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsRedownload:");
}

id objc_msgSend_setItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemID:");
}

id objc_msgSend_setItemIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemIdentifiers:");
}

id objc_msgSend_setItemName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemName:");
}

id objc_msgSend_setItemResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemResponse:");
}

id objc_msgSend_setKeyboardType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardType:");
}

id objc_msgSend_setKeywords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeywords:");
}

id objc_msgSend_setKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKind:");
}

id objc_msgSend_setLastModifiedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastModifiedDate:");
}

id objc_msgSend_setLastUpdateCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUpdateCheck:");
}

id objc_msgSend_setLastWelcomeScreenViewDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastWelcomeScreenViewDate:");
}

id objc_msgSend_setLaunchProhibited_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchProhibited:");
}

id objc_msgSend_setLaunchScreenEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchScreenEnabled:");
}

id objc_msgSend_setLaunchURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchURL:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setLenient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLenient:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocalizedDistributorName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedDistributorName:");
}

id objc_msgSend_setLocalizedName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedName:");
}

id objc_msgSend_setLocalizedTestNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedTestNotes:");
}

id objc_msgSend_setLockerItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockerItemID:");
}

id objc_msgSend_setLogCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogCode:");
}

id objc_msgSend_setLogDirectoryPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogDirectoryPath:");
}

id objc_msgSend_setLogFileBaseName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogFileBaseName:");
}

id objc_msgSend_setLogKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogKey:");
}

id objc_msgSend_setLogUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogUUID:");
}

id objc_msgSend_setLongTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongTitle:");
}

id objc_msgSend_setLsRequiresPostProcessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLsRequiresPostProcessing:");
}

id objc_msgSend_setMachineBased_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMachineBased:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaximumFractionDigits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumFractionDigits:");
}

id objc_msgSend_setMaximumTerminationResistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumTerminationResistance:");
}

id objc_msgSend_setMediaKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaKind:");
}

id objc_msgSend_setMescalType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMescalType:");
}

id objc_msgSend_setMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessage:");
}

id objc_msgSend_setMetadata_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadata:error:");
}

id objc_msgSend_setMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetrics:");
}

id objc_msgSend_setMetricsOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetricsOverlay:");
}

id objc_msgSend_setMetricsType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetricsType:");
}

id objc_msgSend_setMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMultiplier:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNameTranscriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameTranscriptions:");
}

id objc_msgSend_setNeedsThirdPartyPurchasesConfirmationForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsThirdPartyPurchasesConfirmationForBundleID:");
}

id objc_msgSend_setNextUpdateCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextUpdateCheck:");
}

id objc_msgSend_setNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotification:");
}

id objc_msgSend_setNotificationCategories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationCategories:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObserver:");
}

id objc_msgSend_setOffloadOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOffloadOnly:");
}

id objc_msgSend_setOptedInForMacOSEligibility_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptedInForMacOSEligibility:");
}

id objc_msgSend_setOptedInForXROSEligibility_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptedInForXROSEligibility:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOrderedBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrderedBundleIDs:");
}

id objc_msgSend_setOriginalPurchaserDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalPurchaserDSID:");
}

id objc_msgSend_setOvalIconURLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOvalIconURLString:");
}

id objc_msgSend_setOwnerAccountId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwnerAccountId:");
}

id objc_msgSend_setPackageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPackageType:");
}

id objc_msgSend_setPairedWatchModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedWatchModel:");
}

id objc_msgSend_setPairedWatchOSVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedWatchOSVersion:");
}

id objc_msgSend_setParameter_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParameter:forKey:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPercentComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPercentComplete:");
}

id objc_msgSend_setPerformAvailablityCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerformAvailablityCheck:");
}

id objc_msgSend_setPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhase:");
}

id objc_msgSend_setPhaseProportionsForLoadingPhase_installingPhase_postProcessingPhase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhaseProportionsForLoadingPhase:installingPhase:postProcessingPhase:error:");
}

id objc_msgSend_setPlaceholderAttributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderAttributes:error:");
}

id objc_msgSend_setPlaceholderPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderPromise:error:");
}

id objc_msgSend_setPollTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPollTime:");
}

id objc_msgSend_setPostProcessCompletedUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPostProcessCompletedUnitCount:");
}

id objc_msgSend_setPostProcessTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPostProcessTotalUnitCount:");
}

id objc_msgSend_setPosted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPosted:");
}

id objc_msgSend_setPreflightPackageURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreflightPackageURL:");
}

id objc_msgSend_setPreparationPromise_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreparationPromise:withError:");
}

id objc_msgSend_setPresentingSceneBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentingSceneBundleIdentifier:");
}

id objc_msgSend_setPresentingSceneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentingSceneIdentifier:");
}

id objc_msgSend_setPreservationPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreservationPriority:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivateDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateDelegate:");
}

id objc_msgSend_setProductURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductURL:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProgressHint_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressHint:withError:");
}

id objc_msgSend_setPromptTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromptTitle:");
}

id objc_msgSend_setProperty_forBodyKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperty:forBodyKey:");
}

id objc_msgSend_setProperty_forKey_inRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperty:forKey:inRequest:");
}

id objc_msgSend_setProtocolClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtocolClasses:");
}

id objc_msgSend_setProtocolHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtocolHandler:");
}

id objc_msgSend_setProvisioningProfiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProvisioningProfiles:");
}

id objc_msgSend_setProxyAppBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxyAppBundleID:");
}

id objc_msgSend_setProxyAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxyAppName:");
}

id objc_msgSend_setPurchase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchase:");
}

id objc_msgSend_setPurchaseAccountFallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseAccountFallback:");
}

id objc_msgSend_setPurchaseDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseDate:");
}

id objc_msgSend_setPurchaseOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseOnly:");
}

id objc_msgSend_setPurchaseState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseState:");
}

id objc_msgSend_setPurchaseToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseToken:");
}

id objc_msgSend_setPurchaseType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseType:");
}

id objc_msgSend_setPurchasedRedownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchasedRedownload:");
}

id objc_msgSend_setPurchaserDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaserDSID:");
}

id objc_msgSend_setPurchaserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaserID:");
}

id objc_msgSend_setPurgeableReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurgeableReason:");
}

id objc_msgSend_setPurgeableType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurgeableType:");
}

id objc_msgSend_setQosMetricsFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQosMetricsFields:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setRatingLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRatingLabel:");
}

id objc_msgSend_setRatingRank_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRatingRank:");
}

id objc_msgSend_setRawUpdateData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawUpdateData:");
}

id objc_msgSend_setRawUpdateState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawUpdateState:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setRecoveryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecoveryCount:");
}

id objc_msgSend_setRedownloadParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRedownloadParams:");
}

id objc_msgSend_setReferrerApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferrerApp:");
}

id objc_msgSend_setReferrerURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferrerURL:");
}

id objc_msgSend_setRefreshInstallID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefreshInstallID:");
}

id objc_msgSend_setReleaseDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReleaseDate:");
}

id objc_msgSend_setRemoteInstall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteInstall:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemoteProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteProgress:");
}

id objc_msgSend_setReportRemotely_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReportRemotely:");
}

id objc_msgSend_setRequestCachePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestCachePolicy:");
}

id objc_msgSend_setRequestCancellationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestCancellationBlock:");
}

id objc_msgSend_setRequestCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestCompletionBlock:");
}

id objc_msgSend_setRequestEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestEncoding:");
}

id objc_msgSend_setRequestIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestIdentifier:");
}

id objc_msgSend_setRequestInterruptionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestInterruptionBlock:");
}

id objc_msgSend_setRequestToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestToken:");
}

id objc_msgSend_setRequestUserConfirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestUserConfirmation:");
}

id objc_msgSend_setRequireUniversal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequireUniversal:");
}

id objc_msgSend_setRequiredCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiredCapabilities:");
}

id objc_msgSend_setRequiresPowerPluggedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresPowerPluggedIn:");
}

id objc_msgSend_setResourceValues_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceValues:error:");
}

id objc_msgSend_setResponseDecoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseDecoder:");
}

id objc_msgSend_setResponseStatusCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseStatusCode:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelector:");
}

id objc_msgSend_setSendBlindedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendBlindedData:");
}

id objc_msgSend_setSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSession:");
}

id objc_msgSend_setSharedFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedFeedback:");
}

id objc_msgSend_setShortItemName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShortItemName:");
}

id objc_msgSend_setShortVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShortVersion:");
}

id objc_msgSend_setShouldBackgroundDefaultAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldBackgroundDefaultAction:");
}

id objc_msgSend_setShouldCollectMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCollectMetrics:");
}

id objc_msgSend_setShouldCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCopy:");
}

id objc_msgSend_setShouldPendInSetupIfNotAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPendInSetupIfNotAllowed:");
}

id objc_msgSend_setShouldReturnLastKnownStatusOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldReturnLastKnownStatusOnly:");
}

id objc_msgSend_setShouldSkipTransparencySheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSkipTransparencySheet:");
}

id objc_msgSend_setSinfData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSinfData:");
}

id objc_msgSend_setSkipIfInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSkipIfInstalled:");
}

id objc_msgSend_setSkipLaunchCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSkipLaunchCheck:");
}

id objc_msgSend_setSoftwareVersionBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoftwareVersionBundleID:");
}

id objc_msgSend_setSoftwareVersionExternalIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoftwareVersionExternalIdentifier:");
}

id objc_msgSend_setSourceApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceApp:");
}

id objc_msgSend_setSourceAppBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceAppBundleId:");
}

id objc_msgSend_setSourceApplicationWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceApplicationWithBundleID:");
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartTime:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStaticDiskUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStaticDiskUsage:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStatusCondition_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusCondition:completionHandler:");
}

id objc_msgSend_setStoreCohort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreCohort:");
}

id objc_msgSend_setStoreExternalVersionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreExternalVersionID:");
}

id objc_msgSend_setStoreFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreFront:");
}

id objc_msgSend_setStoreIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreIDs:");
}

id objc_msgSend_setStoreItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreItemID:");
}

id objc_msgSend_setStorefront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStorefront:");
}

id objc_msgSend_setStorefrontCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStorefrontCountryCode:");
}

id objc_msgSend_setStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStyle:");
}

id objc_msgSend_setSubGenres_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubGenres:");
}

id objc_msgSend_setSubscriptionFamilyId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionFamilyId:");
}

id objc_msgSend_setSupportsIPad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsIPad:");
}

id objc_msgSend_setSupportsIPhone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsIPhone:");
}

id objc_msgSend_setSupportsLayeredImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsLayeredImage:");
}

id objc_msgSend_setSupportsMac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsMac:");
}

id objc_msgSend_setSupportsRealityDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsRealityDevice:");
}

id objc_msgSend_setSuppressDialogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressDialogs:");
}

id objc_msgSend_setSuppressEvaluatorDialogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressEvaluatorDialogs:");
}

id objc_msgSend_setSyncGracePeriodMinutes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncGracePeriodMinutes:");
}

id objc_msgSend_setSyncIntervalMinutes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncIntervalMinutes:");
}

id objc_msgSend_setSystemAppInstall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemAppInstall:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTargetGizmoPairingID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetGizmoPairingID:error:");
}

id objc_msgSend_setTemporaryBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemporaryBundleID:");
}

id objc_msgSend_setTesterEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTesterEmail:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setThroughput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThroughput:");
}

id objc_msgSend_setThumbnailURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThumbnailURL:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutInterval:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalUnitCount:");
}

id objc_msgSend_setTransferPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransferPath:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURL:");
}

id objc_msgSend_setUiDeviceFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUiDeviceFamily:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUniqueIdentifier:");
}

id objc_msgSend_setUpdateAvailabilityForApplicationsWithBundleIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateAvailabilityForApplicationsWithBundleIdentifiers:completionHandler:");
}

id objc_msgSend_setUpdateBuyParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateBuyParams:");
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateHandler:");
}

id objc_msgSend_setUpdateInstallDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateInstallDate:");
}

id objc_msgSend_setUpdateState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateState:");
}

id objc_msgSend_setUpdateType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateType:");
}

id objc_msgSend_setUrlKnownToBeTrusted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrlKnownToBeTrusted:");
}

id objc_msgSend_setUseJSONContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseJSONContentType:");
}

id objc_msgSend_setUseLocalAuthAndInteractiveDialogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseLocalAuthAndInteractiveDialogs:");
}

id objc_msgSend_setUseLocalAuthAndSystemDialogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseLocalAuthAndSystemDialogs:");
}

id objc_msgSend_setUserDataPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDataPromise:error:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserInfoObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfoObject:forKey:");
}

id objc_msgSend_setUserInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInitiated:");
}

id objc_msgSend_setUserNotificationExtensionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserNotificationExtensionId:");
}

id objc_msgSend_setUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsername:");
}

id objc_msgSend_setUsingModernUpdatesCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsingModernUpdatesCheck:");
}

id objc_msgSend_setValue_forExternalProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forExternalProperty:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forProperty:");
}

id objc_msgSend_setValues_forExternalProperties_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:forExternalProperties:count:");
}

id objc_msgSend_setValues_forProperties_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:forProperties:count:");
}

id objc_msgSend_setValuesWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValuesWithDictionary:");
}

id objc_msgSend_setVariantID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVariantID:");
}

id objc_msgSend_setVendorName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVendorName:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setWaitForDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitForDeletion:");
}

id objc_msgSend_setWantsNotificationResponsesDelivered(void *a1, const char *a2, ...)
{
  return _[a1 setWantsNotificationResponsesDelivered];
}

id objc_msgSend_setWatchAppDeliveredIniOSApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchAppDeliveredIniOSApp:");
}

id objc_msgSend_setWatchAppRunsIndependently_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchAppRunsIndependently:");
}

id objc_msgSend_setWatchApplicationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchApplicationMode:");
}

id objc_msgSend_setWatchOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchOnly:");
}

id objc_msgSend_setWeekOfYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekOfYear:");
}

id objc_msgSend_setWeekStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekStartDate:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_set_atsContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_atsContext:");
}

id objc_msgSend_set_bytesPerSecondLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_bytesPerSecondLimit:");
}

id objc_msgSend_set_connectionCachePurgeTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_connectionCachePurgeTimeout:");
}

id objc_msgSend_set_connectionPoolName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_connectionPoolName:");
}

id objc_msgSend_set_infersDiscretionaryFromOriginatingClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_infersDiscretionaryFromOriginatingClient:");
}

id objc_msgSend_set_loadingPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_loadingPriority:");
}

id objc_msgSend_set_longLivedConnectionCachePurgeTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_longLivedConnectionCachePurgeTimeout:");
}

id objc_msgSend_set_nw_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_nw_activity:");
}

id objc_msgSend_set_preventsIdleSleepOnceConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_preventsIdleSleepOnceConnected:");
}

id objc_msgSend_set_preventsSystemHTTPProxyAuthentication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_preventsSystemHTTPProxyAuthentication:");
}

id objc_msgSend_set_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_priority:");
}

id objc_msgSend_set_requiresPowerPluggedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_requiresPowerPluggedIn:");
}

id objc_msgSend_set_requiresSecureHTTPSProxyConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_requiresSecureHTTPSProxyConnection:");
}

id objc_msgSend_set_sourceApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_sourceApplicationBundleIdentifier:");
}

id objc_msgSend_set_sourceApplicationSecondaryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_sourceApplicationSecondaryIdentifier:");
}

id objc_msgSend_set_suppressedAutoAddedHTTPHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_suppressedAutoAddedHTTPHeaders:");
}

id objc_msgSend_set_timingDataOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_timingDataOptions:");
}

id objc_msgSend_settingsForIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settingsForIdentity:");
}

id objc_msgSend_setupFollowingMigration(void *a1, const char *a2, ...)
{
  return _[a1 setupFollowingMigration];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedActivity(void *a1, const char *a2, ...)
{
  return _[a1 sharedActivity];
}

id objc_msgSend_sharedCenter(void *a1, const char *a2, ...)
{
  return _[a1 sharedCenter];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedDatabaseContext(void *a1, const char *a2, ...)
{
  return _[a1 sharedDatabaseContext];
}

id objc_msgSend_sharedDefaultEvaluator(void *a1, const char *a2, ...)
{
  return _[a1 sharedDefaultEvaluator];
}

id objc_msgSend_sharedDeviceConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedDeviceConnection];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedKeySetForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedKeySetForKeys:");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedScheduler(void *a1, const char *a2, ...)
{
  return _[a1 sharedScheduler];
}

id objc_msgSend_sharedService(void *a1, const char *a2, ...)
{
  return _[a1 sharedService];
}

id objc_msgSend_sharedStatusController(void *a1, const char *a2, ...)
{
  return _[a1 sharedStatusController];
}

id objc_msgSend_shortVersion(void *a1, const char *a2, ...)
{
  return _[a1 shortVersion];
}

id objc_msgSend_shortVersionString(void *a1, const char *a2, ...)
{
  return _[a1 shortVersionString];
}

id objc_msgSend_shouldAttemptToRepairApplication_options_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAttemptToRepairApplication:options:logKey:");
}

id objc_msgSend_shouldCollectMetrics(void *a1, const char *a2, ...)
{
  return _[a1 shouldCollectMetrics];
}

id objc_msgSend_shouldCollectMetricsPromiseForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCollectMetricsPromiseForContext:");
}

id objc_msgSend_shouldEnableSystemAppsForAppUsageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEnableSystemAppsForAppUsageType:");
}

id objc_msgSend_shouldFilterExternalOriginatedDownloads(void *a1, const char *a2, ...)
{
  return _[a1 shouldFilterExternalOriginatedDownloads];
}

id objc_msgSend_shouldHandleNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleNotification:");
}

id objc_msgSend_shouldHandleNotificationResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleNotificationResponse:");
}

id objc_msgSend_shouldHideUserPrompts(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideUserPrompts];
}

id objc_msgSend_shouldPerformUpdates(void *a1, const char *a2, ...)
{
  return _[a1 shouldPerformUpdates];
}

id objc_msgSend_shouldReportDownloadProgress(void *a1, const char *a2, ...)
{
  return _[a1 shouldReportDownloadProgress];
}

id objc_msgSend_shouldUseDevelopmentSettingsForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseDevelopmentSettingsForEnvironment:");
}

id objc_msgSend_shouldUseModernUpdates(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseModernUpdates];
}

id objc_msgSend_shouldUseProxyOverrideForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseProxyOverrideForEnvironment:");
}

id objc_msgSend_showDialogForAlreadyInstalledApp_presenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDialogForAlreadyInstalledApp:presenter:");
}

id objc_msgSend_showIneligibleAlert(void *a1, const char *a2, ...)
{
  return _[a1 showIneligibleAlert];
}

id objc_msgSend_showPendingUpdatesBadge(void *a1, const char *a2, ...)
{
  return _[a1 showPendingUpdatesBadge];
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_sideLoadedDeviceBasedVPP(void *a1, const char *a2, ...)
{
  return _[a1 sideLoadedDeviceBasedVPP];
}

id objc_msgSend_signatureFromData_type_bag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureFromData:type:bag:error:");
}

id objc_msgSend_signerOrganization(void *a1, const char *a2, ...)
{
  return _[a1 signerOrganization];
}

id objc_msgSend_signpostID(void *a1, const char *a2, ...)
{
  return _[a1 signpostID];
}

id objc_msgSend_simIdentity(void *a1, const char *a2, ...)
{
  return _[a1 simIdentity];
}

id objc_msgSend_sinf(void *a1, const char *a2, ...)
{
  return _[a1 sinf];
}

id objc_msgSend_sinfPath(void *a1, const char *a2, ...)
{
  return _[a1 sinfPath];
}

id objc_msgSend_sinfs(void *a1, const char *a2, ...)
{
  return _[a1 sinfs];
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sinkWithCompletion:receiveInput:");
}

id objc_msgSend_sizeLimitForNetworkType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeLimitForNetworkType:");
}

id objc_msgSend_skipCoordinatorCompletion(void *a1, const char *a2, ...)
{
  return _[a1 skipCoordinatorCompletion];
}

id objc_msgSend_skipDownloads(void *a1, const char *a2, ...)
{
  return _[a1 skipDownloads];
}

id objc_msgSend_skipIfInstalled(void *a1, const char *a2, ...)
{
  return _[a1 skipIfInstalled];
}

id objc_msgSend_skipLaunchCheck(void *a1, const char *a2, ...)
{
  return _[a1 skipLaunchCheck];
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_softwarePlatform(void *a1, const char *a2, ...)
{
  return _[a1 softwarePlatform];
}

id objc_msgSend_softwareVersionBundleID(void *a1, const char *a2, ...)
{
  return _[a1 softwareVersionBundleID];
}

id objc_msgSend_softwareVersionExternalIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 softwareVersionExternalIdentifier];
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortOptions(void *a1, const char *a2, ...)
{
  return _[a1 sortOptions];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _[a1 source];
}

id objc_msgSend_sourceApp(void *a1, const char *a2, ...)
{
  return _[a1 sourceApp];
}

id objc_msgSend_sourceAppAdamId(void *a1, const char *a2, ...)
{
  return _[a1 sourceAppAdamId];
}

id objc_msgSend_sourceAppBundleId(void *a1, const char *a2, ...)
{
  return _[a1 sourceAppBundleId];
}

id objc_msgSend_sourceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sourceIdentifier];
}

id objc_msgSend_sourceURL(void *a1, const char *a2, ...)
{
  return _[a1 sourceURL];
}

id objc_msgSend_sourceWebRegistrableDomain(void *a1, const char *a2, ...)
{
  return _[a1 sourceWebRegistrableDomain];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_startAccessingReturningError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAccessingReturningError:");
}

id objc_msgSend_startCatalogDownload_options_completionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startCatalogDownload:options:completionWithError:");
}

id objc_msgSend_startContainerWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startContainerWithCode:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startInstallIDs_transaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startInstallIDs:transaction:");
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startPostProcessingForID_transaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPostProcessingForID:transaction:");
}

id objc_msgSend_startStoryIfNeededWith_forAdvertisedAppAdamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startStoryIfNeededWith:forAdvertisedAppAdamID:");
}

id objc_msgSend_startUsingProxy_withErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUsingProxy:withErrorHandler:");
}

id objc_msgSend_starting(void *a1, const char *a2, ...)
{
  return _[a1 starting];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_staticUsage(void *a1, const char *a2, ...)
{
  return _[a1 staticUsage];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_statusType(void *a1, const char *a2, ...)
{
  return _[a1 statusType];
}

id objc_msgSend_stopAccessing(void *a1, const char *a2, ...)
{
  return _[a1 stopAccessing];
}

id objc_msgSend_stopInstallID_withReason_transaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopInstallID:withReason:transaction:");
}

id objc_msgSend_storeAccountID(void *a1, const char *a2, ...)
{
  return _[a1 storeAccountID];
}

id objc_msgSend_storeAccountName(void *a1, const char *a2, ...)
{
  return _[a1 storeAccountName];
}

id objc_msgSend_storeCohort(void *a1, const char *a2, ...)
{
  return _[a1 storeCohort];
}

id objc_msgSend_storeDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 storeDescriptor];
}

id objc_msgSend_storeExternalVersionID(void *a1, const char *a2, ...)
{
  return _[a1 storeExternalVersionID];
}

id objc_msgSend_storeFront(void *a1, const char *a2, ...)
{
  return _[a1 storeFront];
}

id objc_msgSend_storeIDs(void *a1, const char *a2, ...)
{
  return _[a1 storeIDs];
}

id objc_msgSend_storeItemID(void *a1, const char *a2, ...)
{
  return _[a1 storeItemID];
}

id objc_msgSend_storeItemIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 storeItemIdentifier];
}

id objc_msgSend_storeMetadata(void *a1, const char *a2, ...)
{
  return _[a1 storeMetadata];
}

id objc_msgSend_storeTransactionID(void *a1, const char *a2, ...)
{
  return _[a1 storeTransactionID];
}

id objc_msgSend_storefront(void *a1, const char *a2, ...)
{
  return _[a1 storefront];
}

id objc_msgSend_storefrontID(void *a1, const char *a2, ...)
{
  return _[a1 storefrontID];
}

id objc_msgSend_stream_handleEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stream:handleEvent:");
}

id objc_msgSend_streamError(void *a1, const char *a2, ...)
{
  return _[a1 streamError];
}

id objc_msgSend_streamStatus(void *a1, const char *a2, ...)
{
  return _[a1 streamStatus];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByExpandingTildeInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByExpandingTildeInPath];
}

id objc_msgSend_stringByRemovingPercentEncoding(void *a1, const char *a2, ...)
{
  return _[a1 stringByRemovingPercentEncoding];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromByteCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromByteCount:");
}

id objc_msgSend_stringFromByteCount_countStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromByteCount:countStyle:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCapacity:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToWeakObjectsMapTable];
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _[a1 style];
}

id objc_msgSend_subGenres(void *a1, const char *a2, ...)
{
  return _[a1 subGenres];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_submittedActivities(void *a1, const char *a2, ...)
{
  return _[a1 submittedActivities];
}

id objc_msgSend_subpredicates(void *a1, const char *a2, ...)
{
  return _[a1 subpredicates];
}

id objc_msgSend_subscriptionFamilyId(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionFamilyId];
}

id objc_msgSend_subscriptionInfoDictionaryWithAccount_onlyReturnForPreviouslySubscribedAccount_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionInfoDictionaryWithAccount:onlyReturnForPreviouslySubscribedAccount:logKey:");
}

id objc_msgSend_subscriptionStatus(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionStatus];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_success(void *a1, const char *a2, ...)
{
  return _[a1 success];
}

id objc_msgSend_supplyBytes_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supplyBytes:withCompletionBlock:");
}

id objc_msgSend_supportedDialogHandlers(void *a1, const char *a2, ...)
{
  return _[a1 supportedDialogHandlers];
}

id objc_msgSend_supportsIPad(void *a1, const char *a2, ...)
{
  return _[a1 supportsIPad];
}

id objc_msgSend_supportsIPhone(void *a1, const char *a2, ...)
{
  return _[a1 supportsIPhone];
}

id objc_msgSend_supportsLayeredImage(void *a1, const char *a2, ...)
{
  return _[a1 supportsLayeredImage];
}

id objc_msgSend_supportsMac(void *a1, const char *a2, ...)
{
  return _[a1 supportsMac];
}

id objc_msgSend_supportsPairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 supportsPairedDevice];
}

id objc_msgSend_supportsRealityDevice(void *a1, const char *a2, ...)
{
  return _[a1 supportsRealityDevice];
}

id objc_msgSend_suppressDialogs(void *a1, const char *a2, ...)
{
  return _[a1 suppressDialogs];
}

id objc_msgSend_suppressEvaluatorDialogs(void *a1, const char *a2, ...)
{
  return _[a1 suppressEvaluatorDialogs];
}

id objc_msgSend_suspendStreamWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspendStreamWithCompletionBlock:");
}

id objc_msgSend_suspendWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspendWithCompletionHandler:");
}

id objc_msgSend_swapApplicationIconsInProminentPositionsWithBundleIdentifier_withApplicationIconsWithWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "swapApplicationIconsInProminentPositionsWithBundleIdentifier:withApplicationIconsWithWithBundleIdentifier:");
}

id objc_msgSend_syncGracePeriodMinutes(void *a1, const char *a2, ...)
{
  return _[a1 syncGracePeriodMinutes];
}

id objc_msgSend_syncIfNeededWithLogKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncIfNeededWithLogKey:");
}

id objc_msgSend_syncIntervalMinutes(void *a1, const char *a2, ...)
{
  return _[a1 syncIntervalMinutes];
}

id objc_msgSend_syncLaunchesWithLogKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncLaunchesWithLogKey:");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synchronizeUserDefaultsDomain_keys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeUserDefaultsDomain:keys:");
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 systemTimeZone];
}

id objc_msgSend_systemUptime(void *a1, const char *a2, ...)
{
  return _[a1 systemUptime];
}

id objc_msgSend_takeSample(void *a1, const char *a2, ...)
{
  return _[a1 takeSample];
}

id objc_msgSend_task(void *a1, const char *a2, ...)
{
  return _[a1 task];
}

id objc_msgSend_taskIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 taskIdentifier];
}

id objc_msgSend_taskQueue(void *a1, const char *a2, ...)
{
  return _[a1 taskQueue];
}

id objc_msgSend_temporaryBundleID(void *a1, const char *a2, ...)
{
  return _[a1 temporaryBundleID];
}

id objc_msgSend_terminalPhase(void *a1, const char *a2, ...)
{
  return _[a1 terminalPhase];
}

id objc_msgSend_terminateApplication_forReason_andReport_withDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateApplication:forReason:andReport:withDescription:");
}

id objc_msgSend_testFlightConsumer_didChangeStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testFlightConsumer:didChangeStatus:");
}

id objc_msgSend_testFlightServiceExtensionCustomServiceTime(void *a1, const char *a2, ...)
{
  return _[a1 testFlightServiceExtensionCustomServiceTime];
}

id objc_msgSend_testFlightServiceHost_didUpdateExtensionStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testFlightServiceHost:didUpdateExtensionStatus:");
}

id objc_msgSend_testerEmail(void *a1, const char *a2, ...)
{
  return _[a1 testerEmail];
}

id objc_msgSend_textFieldWithPlaceholder_secure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textFieldWithPlaceholder:secure:");
}

id objc_msgSend_textfieldValues(void *a1, const char *a2, ...)
{
  return _[a1 textfieldValues];
}

id objc_msgSend_thenPerform_orCatchError_onScheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thenPerform:orCatchError:onScheduler:");
}

id objc_msgSend_thenWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thenWithBlock:");
}

id objc_msgSend_thinningVariantID(void *a1, const char *a2, ...)
{
  return _[a1 thinningVariantID];
}

id objc_msgSend_thirdPartyWithNoAppReferrer(void *a1, const char *a2, ...)
{
  return _[a1 thirdPartyWithNoAppReferrer];
}

id objc_msgSend_throughput(void *a1, const char *a2, ...)
{
  return _[a1 throughput];
}

id objc_msgSend_thumbnailURL(void *a1, const char *a2, ...)
{
  return _[a1 thumbnailURL];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeZone(void *a1, const char *a2, ...)
{
  return _[a1 timeZone];
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_timeZoneWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneWithName:");
}

id objc_msgSend_timeoutInterval(void *a1, const char *a2, ...)
{
  return _[a1 timeoutInterval];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_totalUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 totalUnitCount];
}

id objc_msgSend_transactionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 transactionMetrics];
}

id objc_msgSend_transferAppAssetPromisesForCoordinators_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferAppAssetPromisesForCoordinators:logKey:");
}

id objc_msgSend_truncateAtOffset_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "truncateAtOffset:error:");
}

id objc_msgSend_truncateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "truncateWithCompletionHandler:");
}

id objc_msgSend_tryFinalizeWithPublicData_finalizationDict_pubCertString_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryFinalizeWithPublicData:finalizationDict:pubCertString:error:");
}

id objc_msgSend_tryGenerateBlindedElement(void *a1, const char *a2, ...)
{
  return _[a1 tryGenerateBlindedElement];
}

id objc_msgSend_tryLockWhenCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryLockWhenCondition:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeForInstallMachinery(void *a1, const char *a2, ...)
{
  return _[a1 typeForInstallMachinery];
}

id objc_msgSend_typeForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeForURL:");
}

id objc_msgSend_typeWithMIMEType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeWithMIMEType:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_underlyingDictionary(void *a1, const char *a2, ...)
{
  return _[a1 underlyingDictionary];
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return _[a1 underlyingErrors];
}

id objc_msgSend_uninstallApp_requestUserConfirmation_withResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallApp:requestUserConfirmation:withResultHandler:");
}

id objc_msgSend_uninstallAppWithBundleID_requestUserConfirmation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallAppWithBundleID:requestUserConfirmation:completion:");
}

id objc_msgSend_uninstallAppWithIdentity_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallAppWithIdentity:options:completion:");
}

id objc_msgSend_unionOrderedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionOrderedSet:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _[a1 uniqueID];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unlockWithCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockWithCondition:");
}

id objc_msgSend_unregisterObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterObserver:");
}

id objc_msgSend_unregisterURLs_forBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterURLs:forBundleID:completionHandler:");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongValue];
}

id objc_msgSend_updateAllWithOrder_requestToken_replyHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAllWithOrder:requestToken:replyHandler:");
}

id objc_msgSend_updateConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateConfiguration:");
}

id objc_msgSend_updateCount(void *a1, const char *a2, ...)
{
  return _[a1 updateCount];
}

id objc_msgSend_updateGeneratedProperties(void *a1, const char *a2, ...)
{
  return _[a1 updateGeneratedProperties];
}

id objc_msgSend_updateLogKey(void *a1, const char *a2, ...)
{
  return _[a1 updateLogKey];
}

id objc_msgSend_updateSINFForAppWithIdentity_sinfData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSINFForAppWithIdentity:sinfData:options:error:");
}

id objc_msgSend_updateState(void *a1, const char *a2, ...)
{
  return _[a1 updateState];
}

id objc_msgSend_updateStatePropertyKey(void *a1, const char *a2, ...)
{
  return _[a1 updateStatePropertyKey];
}

id objc_msgSend_updateSubscriptionInfoWithEntitlement_account_logKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSubscriptionInfoWithEntitlement:account:logKey:");
}

id objc_msgSend_updateType(void *a1, const char *a2, ...)
{
  return _[a1 updateType];
}

id objc_msgSend_updateUniversalLinks(void *a1, const char *a2, ...)
{
  return _[a1 updateUniversalLinks];
}

id objc_msgSend_updateiTunesMetadataForAppWithIdentity_plistData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateiTunesMetadataForAppWithIdentity:plistData:options:error:");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_urgency(void *a1, const char *a2, ...)
{
  return _[a1 urgency];
}

id objc_msgSend_useJSONContentType(void *a1, const char *a2, ...)
{
  return _[a1 useJSONContentType];
}

id objc_msgSend_useLocalAuthAndInteractiveDialogs(void *a1, const char *a2, ...)
{
  return _[a1 useLocalAuthAndInteractiveDialogs];
}

id objc_msgSend_useLocalAuthAndSystemDialogs(void *a1, const char *a2, ...)
{
  return _[a1 useLocalAuthAndSystemDialogs];
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return _[a1 user];
}

id objc_msgSend_userAgentForProcessInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userAgentForProcessInfo:");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userInitiated(void *a1, const char *a2, ...)
{
  return _[a1 userInitiated];
}

id objc_msgSend_userType(void *a1, const char *a2, ...)
{
  return _[a1 userType];
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _[a1 username];
}

id objc_msgSend_usesInterfaceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usesInterfaceType:");
}

id objc_msgSend_validLocationProxy(void *a1, const char *a2, ...)
{
  return _[a1 validLocationProxy];
}

id objc_msgSend_validateAction_bundleID_capabilities_logKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAction:bundleID:capabilities:logKey:error:");
}

id objc_msgSend_validateEligibilityForUpdatesWithLogKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateEligibilityForUpdatesWithLogKey:");
}

id objc_msgSend_validateImpression_withFidelityType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateImpression:withFidelityType:completionHandler:");
}

id objc_msgSend_validateWebAdImpressionResponseProperties_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateWebAdImpressionResponseProperties:completionHandler:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForExternalProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForExternalProperty:");
}

id objc_msgSend_valueForHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForHTTPHeaderField:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_valuePromise(void *a1, const char *a2, ...)
{
  return _[a1 valuePromise];
}

id objc_msgSend_valueWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCompletion:");
}

id objc_msgSend_valueWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithError:");
}

id objc_msgSend_values(void *a1, const char *a2, ...)
{
  return _[a1 values];
}

id objc_msgSend_variantID(void *a1, const char *a2, ...)
{
  return _[a1 variantID];
}

id objc_msgSend_vendorName(void *a1, const char *a2, ...)
{
  return _[a1 vendorName];
}

id objc_msgSend_verifyAllPendingUpdates(void *a1, const char *a2, ...)
{
  return _[a1 verifyAllPendingUpdates];
}

id objc_msgSend_verifyPendingUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyPendingUpdates:");
}

id objc_msgSend_verifyUpdatesFollowingExternalAppInstall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyUpdatesFollowingExternalAppInstall:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_versionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 versionIdentifier];
}

id objc_msgSend_versionWithBundleID_bundleVersion_platform_andShortVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionWithBundleID:bundleVersion:platform:andShortVersion:");
}

id objc_msgSend_volume(void *a1, const char *a2, ...)
{
  return _[a1 volume];
}

id objc_msgSend_waitUntilAllOperationsAreFinished(void *a1, const char *a2, ...)
{
  return _[a1 waitUntilAllOperationsAreFinished];
}

id objc_msgSend_waitUntilFinishedWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitUntilFinishedWithTimeout:");
}

id objc_msgSend_watchAppDeliveredIniOSApp(void *a1, const char *a2, ...)
{
  return _[a1 watchAppDeliveredIniOSApp];
}

id objc_msgSend_watchAppRunsIndependently(void *a1, const char *a2, ...)
{
  return _[a1 watchAppRunsIndependently];
}

id objc_msgSend_watchApplicationMode(void *a1, const char *a2, ...)
{
  return _[a1 watchApplicationMode];
}

id objc_msgSend_watchOnly(void *a1, const char *a2, ...)
{
  return _[a1 watchOnly];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_webAppBundleID(void *a1, const char *a2, ...)
{
  return _[a1 webAppBundleID];
}

id objc_msgSend_webImpression(void *a1, const char *a2, ...)
{
  return _[a1 webImpression];
}

id objc_msgSend_webImpressionWithResult_adNetworkRegistrableDomain_version_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webImpressionWithResult:adNetworkRegistrableDomain:version:error:");
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceAndNewlineCharacterSet];
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeValueForKey:");
}

id objc_msgSend_windowDurationOverrideForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowDurationOverrideForEnvironment:");
}

id objc_msgSend_write_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "write:maxLength:");
}

id objc_msgSend_writeBytes_length_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeBytes:length:error:");
}

id objc_msgSend_writeString_withCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeString:withCode:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_writeUInt32_withCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUInt32:withCode:");
}

id objc_msgSend_writeUInt64_withCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUInt64:withCode:");
}

id objc_msgSend_writeUInt8_withCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUInt8:withCode:");
}