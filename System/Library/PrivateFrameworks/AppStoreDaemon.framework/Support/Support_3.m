BOOL sub_100249490(BOOL a1, void *a2)
{
  BOOL v2;
  void *v3;
  void *v4;
  const char *v5;
  void *v6;
  id v7;
  SEL v8;
  id Property;
  id v10;
  const char *v11;
  id v12;
  id v13;
  void *v14;
  SEL v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  SEL v20;
  id v21;
  id v22;
  ODRAssetDownloadEntity *v23;
  void *v24;
  ODRAssetDownloadEntity *v25;
  void *v27;
  void *v28;

  v2 = a1;
  if (a1)
  {
    v3 = a2;
    v4 = objc_opt_new();
    v6 = v4;
    if (v3)
    {
      v7 = objc_getProperty(v3, v5, 104, 1);
      [v6 setObject:v7 forKeyedSubscript:@"bundle_id"];

      Property = objc_getProperty(v3, v8, 112, 1);
    }
    else
    {
      [v4 setObject:0 forKeyedSubscript:@"bundle_id"];
      Property = 0;
    }
    v10 = Property;
    [v6 setObject:v10 forKeyedSubscript:@"bundle_key"];

    if (v3) {
      v12 = objc_getProperty(v3, v11, 128, 1);
    }
    else {
      v12 = 0;
    }
    v13 = v12;
    [v6 setObject:v13 forKeyedSubscript:@"coordinator_id"];

    if (v3)
    {
      v14 = +[NSNumber numberWithInteger:v3[18]];
      [v6 setObject:v14 forKeyedSubscript:@"download_size"];

      v16 = objc_getProperty(v3, v15, 216, 1);
    }
    else
    {
      v27 = +[NSNumber numberWithInteger:0];
      [v6 setObject:v27 forKeyedSubscript:@"download_size"];

      v16 = 0;
    }
    v17 = v16;
    v18 = [v17 absoluteString];
    [v6 setObject:v18 forKeyedSubscript:@"source_url"];

    if (v3)
    {
      v19 = +[NSNumber numberWithInteger:v3[29]];
      [v6 setObject:v19 forKeyedSubscript:@"type"];

      v21 = objc_getProperty(v3, v20, 240, 1);
    }
    else
    {
      v28 = +[NSNumber numberWithInteger:0];
      [v6 setObject:v28 forKeyedSubscript:@"type"];

      v21 = 0;
    }
    v22 = v21;

    [v6 setObject:v22 forKeyedSubscript:@"unique_key"];
    v23 = [ODRAssetDownloadEntity alloc];
    v24 = [(id)v2 connection];
    v25 = [(SQLiteEntity *)v23 initWithPropertyValues:v6 onConnection:v24];

    v2 = [(SQLiteEntity *)v25 persistentID] != 0;
  }
  return v2;
}

uint64_t sub_10024972C(uint64_t result, uint64_t a2, void *a3)
{
  if (result)
  {
    uint64_t v4 = result;
    id v5 = a3;
    v6 = +[NSNumber numberWithBool:a2];
    [v5 setValue:v6 forProperty:@"is_paused"];

    uint64_t v7 = sub_1002497B4(v4, v5);
    return v7;
  }
  return result;
}

uint64_t sub_1002497B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if ([v3 databaseID])
    {
      id v5 = objc_alloc((Class)[(id)objc_opt_class() databaseEntityClass]);
      id v6 = [v4 databaseID];
      uint64_t v7 = [(id)a1 connection];
      id v8 = [v5 initWithPersistentID:v6 onConnection:v7];

      v9 = [v4 propertyValues];
      [v8 setValuesWithDictionary:v9];

      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

BOOL sub_100249874(uint64_t *a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    id v5 = a2;
    id v6 = objc_opt_new();
    uint64_t v7 = sub_1003B9E28((uint64_t)v5);

    id v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v7];

    v9 = [a1 connection];
    v10 = sub_1002FF548((uint64_t)ODRAssetPackEntity, v9, v8);

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1002499DC;
    v13[3] = &unk_100523758;
    v13[4] = a1;
    id v14 = v6;
    uint64_t v15 = a3;
    id v11 = v6;
    [v10 enumeratePersistentIDsUsingBlock:v13];
    sub_100360F8C(a1[2], v11);
  }
  return a1 != 0;
}

void sub_1002499DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [ODRAssetPackEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  v12 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v6 = [(SQLiteEntity *)v12 objectForKeyedSubscript:@"local_url"];
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = +[NSURL URLWithString:v6];
    sub_100360E84(v7, v8);

    [(SQLiteEntity *)v12 setObject:0 forKeyedSubscript:@"local_url"];
    [(SQLiteEntity *)v12 setObject:&off_10054BBC8 forKeyedSubscript:@"pin_count"];
    v9 = [(SQLiteEntity *)v12 objectForKeyedSubscript:@"purgeable"];
    LODWORD(v7) = [v9 BOOLValue];

    uint64_t v10 = *(void *)(a1 + 48);
    if (v7 && v10 == 4)
    {
      [(SQLiteEntity *)v12 setObject:&off_10054BBE0 forKeyedSubscript:@"purge_reason"];
    }
    else
    {
      id v11 = +[NSNumber numberWithInteger:v10];
      [(SQLiteEntity *)v12 setObject:v11 forKeyedSubscript:@"purge_reason"];
    }
  }
}

BOOL sub_100249B58(BOOL a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = [(id)a1 connection];
    id v12 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100249CEC;
    v10[3] = &unk_1005214E0;
    id v5 = v3;
    id v11 = v5;
    sub_100012004((uint64_t)v4, @"DELETE FROM odr_tag WHERE bundle_id = ?", &v12, v10);
    id v6 = v12;

    a1 = v6 == 0;
    if (v6)
    {
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v9 = sub_1003B9E28((uint64_t)v5);
        *(_DWORD *)buf = 138543618;
        id v14 = v9;
        __int16 v15 = 2114;
        id v16 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error removing tags for %{public}@: %{public}@", buf, 0x16u);
      }
    }
  }
  return a1;
}

void sub_100249CEC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  sub_1003B9E28(v2);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v3 bindString:v4 atPosition:1];
}

BOOL sub_100249D54(BOOL a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [(id)a1 connection];
    id v12 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100249EE8;
    v10[3] = &unk_1005214E0;
    id v5 = v3;
    id v11 = v5;
    sub_100012004((uint64_t)v4, @"UPDATE odr_asset_pack SET pin_count = 0, purgeable = 1 WHERE bundle_id = ?", &v12, v10);
    id v6 = v12;

    a1 = v6 == 0;
    if (v6)
    {
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v9 = sub_1003B9E28((uint64_t)v5);
        *(_DWORD *)buf = 138543618;
        id v14 = v9;
        __int16 v15 = 2114;
        id v16 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error resetting state for %{public}@: %{public}@", buf, 0x16u);
      }
    }
  }
  return a1;
}

void sub_100249EE8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  sub_1003B9E28(v2);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v3 bindString:v4 atPosition:1];
}

BOOL sub_100249F50(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && [v3 databaseID])
  {
    id v5 = [ODRAssetPackEntity alloc];
    id v6 = [v4 databaseID];
    uint64_t v7 = [a1 connection];
    id v8 = [(SQLiteEntity *)v5 initWithPersistentID:v6 onConnection:v7];

    sub_100284B04(v8, v4, 0);
  }

  return a1 != 0;
}

BOOL sub_10024A000(void *a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (a1)
  {
    if (v3)
    {
      id v6 = objc_getProperty(v3, v4, 104, 1);
      id Property = objc_getProperty(v5, v7, 112, 1);
    }
    else
    {
      id v6 = 0;
      id Property = 0;
    }
    id v9 = Property;
    uint64_t v10 = sub_10024A0F4(a1, v6, v9);

    BOOL v11 = v10 != 0;
    if (v10)
    {
      if (v5) {
        uint64_t v12 = v5[18];
      }
      else {
        uint64_t v12 = 0;
      }
      v13 = +[NSNumber numberWithInteger:v12];
      [v10 setObject:v13 forKeyedSubscript:@"file_size"];
    }
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

id sub_10024A0F4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  SEL v7 = v6;
  if (v5 && v6)
  {
    id v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v5];
    id v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_key" equalToValue:v7];
    v19[0] = v8;
    v19[1] = v9;
    uint64_t v10 = +[NSArray arrayWithObjects:v19 count:2];
    BOOL v11 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v10];

    uint64_t v12 = [a1 connection];
    v13 = sub_1002FF3DC((uint64_t)ODRAssetPackEntity, v12, v11);
  }
  else
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v15 = 138543618;
      id v16 = v5;
      __int16 v17 = 2114;
      v18 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unable to lookup asset pack with bundleID: %{public}@ and bundleKey: %{public}@", (uint8_t *)&v15, 0x16u);
    }
    v13 = 0;
  }

  return v13;
}

BOOL sub_10024A2BC(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v38 = a1;
  if (a1)
  {
    id v26 = v6;
    v34 = sub_1003B9E28((uint64_t)v6);
    v36 = +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:](SQLiteComparisonPredicate, "predicateWithProperty:equalToValue:");
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    sub_1003E0AA0(v5);
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v30 = [obj countByEnumeratingWithState:&v43 objects:v55 count:16];
    if (v30)
    {
      uint64_t v28 = *(void *)v44;
      v29 = v5;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v44 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v32 = v7;
          uint64_t v8 = *(void *)(*((void *)&v43 + 1) + 8 * v7);
          v37 = +[SQLiteComparisonPredicate predicateWithProperty:@"name" equalToValue:v8];
          uint64_t v33 = v8;
          id v9 = sub_100316A18(v5, v8);
          long long v39 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          id v35 = v9;
          id v10 = [v9 countByEnumeratingWithState:&v39 objects:v54 count:16];
          if (v10)
          {
            id v11 = v10;
            uint64_t v12 = *(void *)v40;
            do
            {
              for (i = 0; i != v11; i = (char *)i + 1)
              {
                if (*(void *)v40 != v12) {
                  objc_enumerationMutation(v35);
                }
                uint64_t v14 = *(void *)(*((void *)&v39 + 1) + 8 * i);
                int v15 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_key" equalToValue:v14];
                v53[0] = v36;
                v53[1] = v15;
                v53[2] = v37;
                id v16 = +[NSArray arrayWithObjects:v53 count:3];
                __int16 v17 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v16];

                v18 = [v38 connection];
                v19 = sub_1002FF3DC((uint64_t)ODRTagEntity, v18, v17);

                if (!v19)
                {
                  v51[0] = @"bundle_id";
                  v51[1] = @"bundle_key";
                  v52[0] = v34;
                  v52[1] = v14;
                  v51[2] = @"name";
                  v52[2] = v33;
                  v20 = +[NSDictionary dictionaryWithObjects:v52 forKeys:v51 count:3];
                  v21 = [ODRTagEntity alloc];
                  v22 = [v38 connection];
                  v23 = [(SQLiteEntity *)v21 initWithPropertyValues:v20 onConnection:v22];

                  if (!v23)
                  {
                    v24 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138543618;
                      v48 = v20;
                      __int16 v49 = 2114;
                      v50 = v34;
                      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Error importing tag with properites %{public}@ for %{public}@", buf, 0x16u);
                    }
                  }
                }
              }
              id v11 = [v35 countByEnumeratingWithState:&v39 objects:v54 count:16];
            }
            while (v11);
          }

          uint64_t v7 = v32 + 1;
          id v5 = v29;
        }
        while ((id)(v32 + 1) != v30);
        id v30 = [obj countByEnumeratingWithState:&v43 objects:v55 count:16];
      }
      while (v30);
    }

    id v6 = v26;
  }

  return v38 != 0;
}

BOOL sub_10024A6D8(uint64_t *a1, void *a2, void *a3, void *a4, int a5)
{
  if (a1)
  {
    id v9 = a4;
    id v10 = a3;
    id v11 = a2;
    sub_100248BE8(a1, v11, v9, a5);
    sub_10024A2BC(a1, v10, v9);
    uint64_t v12 = sub_1003B9E28((uint64_t)v9);

    v13 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v12];

    uint64_t v14 = sub_1003E0AA0((id *)v10);

    int v15 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"name" values:v14];

    v26[0] = v13;
    v26[1] = v15;
    id v16 = +[NSArray arrayWithObjects:v26 count:2];
    __int16 v17 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v16];

    sub_100248950(a1, v17);
    v18 = sub_1002AEC58((id *)v11);

    v19 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"bundle_key" values:v18];

    v25[0] = v13;
    v25[1] = v19;
    v20 = +[NSArray arrayWithObjects:v25 count:2];
    v21 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v20];

    sub_100248840(a1, v21);
    v22 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v24 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Finished updating manifest.", v24, 2u);
    }
  }
  return a1 != 0;
}

void sub_10024A94C(uint64_t a1, uint64_t a2)
{
  id v4 = [ODRAssetPackEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v9 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v6 = [(SQLiteEntity *)v9 objectForKeyedSubscript:@"local_url"];
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = +[NSURL URLWithString:v6];
    sub_100360E84(v7, v8);
  }
  [(SQLiteEntity *)v9 deleteFromDatabase];
}

void sub_10024AA20(uint64_t a1, uint64_t a2)
{
  id v4 = [ODRTagEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  [(SQLiteEntity *)v6 deleteFromDatabase];
}

id *sub_10024AABC(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)ODRTagsRequest;
    a1 = (id *)objc_msgSendSuper2(&v12, "init");
    if (a1)
    {
      id v5 = objc_alloc_init(_TtC9appstored6LogKey);
      id v6 = a1[4];
      a1[4] = v5;

      objc_storeStrong(a1 + 5, a2);
      uint64_t v7 = +[NSDate date];
      [v7 timeIntervalSinceReferenceDate];
      a1[2] = v8;

      id v9 = objc_alloc_init((Class)NSMutableDictionary);
      id v10 = a1[3];
      a1[3] = v9;
    }
  }

  return a1;
}

void sub_10024AE00(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B0BA8;
  qword_1005B0BA8 = (uint64_t)v1;
}

id sub_10024B0C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v21 = 0;
    v22 = &v21;
    uint64_t v23 = 0x3032000000;
    v24 = sub_100017F38;
    v25 = sub_100017B58;
    id v26 = 0;
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x3032000000;
    v18 = sub_100017F38;
    v19 = sub_100017B58;
    id v20 = 0;
    uint64_t v7 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10024B260;
    v11[3] = &unk_1005237A8;
    v11[4] = a1;
    id v12 = v5;
    v13 = &v15;
    uint64_t v14 = &v21;
    dispatch_sync(v7, v11);
    uint64_t v8 = (void *)v16[5];
    if (a3 && !v8)
    {
      *a3 = (id) v22[5];
      uint64_t v8 = (void *)v16[5];
    }
    id v9 = v8;

    _Block_object_dispose(&v15, 8);
    _Block_object_dispose(&v21, 8);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_10024B260(void *a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = objc_opt_class();
    id v4 = (void *)a1[5];
    id v5 = v3;
    id v6 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v4 accountID]);
    uint64_t v7 = AMSHashIfNeeded();
    *(_DWORD *)buf = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 2114;
    uint64_t v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@]: Querying purchase history for account: %{public}@", buf, 0x16u);
  }
  uint64_t v8 = *(void **)(a1[4] + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10024B3F8;
  v11[3] = &unk_100523920;
  long long v10 = *(_OWORD *)(a1 + 5);
  id v9 = (id)v10;
  long long v12 = v10;
  uint64_t v13 = a1[7];
  [v8 readUsingSession:v11];
}

void sub_10024B3F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = sub_1003DF1F0(a2, *(void **)(a1 + 32));
  objc_storeStrong((id *)(v3 + 40), obj);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10024B474(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = +[KeepAlive keepAliveWithName:@"com.apple.appstoredaemon.PurchaseHistoryManager.query"];
    uint64_t v8 = *(void **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10024B574;
    v10[3] = &unk_100522448;
    void v10[4] = a1;
    id v11 = v5;
    id v12 = v7;
    id v13 = v6;
    id v9 = v7;
    sub_100010948(v8, v10);
  }
}

void sub_10024B574(uint64_t a1)
{
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x3032000000;
  v23[3] = sub_100017F38;
  v23[4] = sub_100017B58;
  id v24 = 0;
  uint64_t v17 = 0;
  v18 = &v17;
  uint64_t v19 = 0x3032000000;
  id v20 = sub_100017F38;
  uint64_t v21 = sub_100017B58;
  id v22 = 0;
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (id)objc_opt_class();
    uint64_t v4 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 40) accountID]);
    id v5 = AMSHashIfNeeded();
    *(_DWORD *)buf = 138412546;
    id v26 = v3;
    __int16 v27 = 2114;
    id v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@]: Querying purchase history for account: %{public}@", buf, 0x16u);
  }
  id v6 = *(void **)(*(void *)(a1 + 32) + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10024B8DC;
  v13[3] = &unk_100523920;
  uint64_t v15 = &v17;
  id v14 = *(id *)(a1 + 40);
  __int16 v16 = v23;
  [v6 readUsingSession:v13];
  uint64_t v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (id)objc_opt_class();
    id v9 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 40) accountID]);
    AMSHashIfNeeded();
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    id v11 = [(id)v18[5] count];
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138413058;
    id v26 = v8;
    __int16 v27 = 2114;
    id v28 = v10;
    __int16 v29 = 2048;
    id v30 = v11;
    __int16 v31 = 2112;
    uint64_t v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Purchase History query for account: %{public}@ completed with %lu results from query: %@", buf, 0x2Au);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v23, 8);
}

void sub_10024B8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10024B8DC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = sub_1003DF1F0(a2, *(void **)(a1 + 32));
  objc_storeStrong((id *)(v3 + 40), obj);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10024B958(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a4;
  uint64_t v10 = a5;
  if (a1)
  {
    id v11 = +[ActiveAccountObserver activeAccount];
    uint64_t v12 = v11;
    if (v11)
    {
      id v27 = 0;
      id v13 = v11;
      uint64_t v33 = 0;
      v34 = &v33;
      uint64_t v35 = 0x3032000000;
      v36 = sub_100017F38;
      v37 = sub_100017B58;
      id v38 = 0;
      uint64_t v14 = *(void **)(a1 + 32);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_10024CDBC;
      v28[3] = &unk_1005238F8;
      id v15 = v13;
      id v29 = v15;
      id v30 = &v33;
      uint64_t v31 = a3;
      uint64_t v32 = &v27;
      [v14 readUsingSession:v28];
      if ([(id)v34[5] count])
      {
        uint64_t v16 = (unsigned char *)objc_opt_new();
        uint64_t v17 = [(id)v34[5] firstObject];
        sub_100263BE8((uint64_t)v16, v17);

        if (v16) {
          v16[8] = a2 ^ 1;
        }
        long long v39 = v16;
        v18 = +[NSArray arrayWithObjects:&v39 count:1];
        uint64_t v19 = sub_1000169A4();
        id v20 = sub_10026EC0C((uint64_t)PurchaseHistoryHideShowRequestContext, v18, v15, v19);
      }
      else if (v27)
      {
        id v20 = 0;
      }
      else
      {
        sub_100266358(1, 0);
        id v20 = 0;
        id v27 = (id)objc_claimAutoreleasedReturnValue();
      }

      _Block_object_dispose(&v33, 8);
      id v22 = v27;
      if (v22)
      {
        v10[2](v10, v22);
      }
      else
      {
        uint64_t v23 = sub_10040A078((id *)[PurchaseHistoryHideShowRequest alloc], *(void **)(a1 + 8), v20);
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_10024BCDC;
        v24[3] = &unk_100523810;
        id v26 = v10;
        v24[4] = a1;
        id v25 = v9;
        sub_10040A124((uint64_t)v23, v24);
      }
    }
    else
    {
      uint64_t v21 = sub_100266358(4, 0);
      v10[2](v10, v21);
    }
  }
}

void sub_10024BCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10024BCDC(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(void))(a1[6] + 16);
  if (a2)
  {
    v3();
  }
  else
  {
    v3();
    uint64_t v4 = a1[4];
    uint64_t v5 = (void *)a1[5];
    sub_10000833C(v4, 2, v5, &stru_1005237E8);
  }
}

void sub_10024BD50(uint64_t a1, void *a2, void *a3)
{
  id v24 = a2;
  id v25 = a3;
  uint64_t v23 = a1;
  if (a1)
  {
    uint64_t v5 = +[ActiveAccountObserver activeAccount];
    id v6 = v5;
    if (v5)
    {
      id v29 = 0;
      id v7 = v5;
      uint64_t v38 = 0;
      long long v39 = &v38;
      uint64_t v40 = 0x3032000000;
      long long v41 = sub_100017F38;
      long long v42 = sub_100017B58;
      id v43 = 0;
      id v8 = *(void **)(a1 + 32);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_10024CF04;
      v34[3] = &unk_1005238D0;
      id v22 = v7;
      id v35 = v22;
      v36 = &v38;
      v37 = &v29;
      [v8 readUsingSession:v34];
      id v9 = objc_opt_new();
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v10 = (id)v39[5];
      id v11 = [v10 countByEnumeratingWithState:&v30 objects:v44 count:16];
      if (v11)
      {
        uint64_t v12 = *(void *)v31;
        do
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(void *)v31 != v12) {
              objc_enumerationMutation(v10);
            }
            uint64_t v14 = v6;
            id v15 = *(void **)(*((void *)&v30 + 1) + 8 * i);
            uint64_t v16 = (unsigned char *)objc_opt_new();
            sub_100263BE8((uint64_t)v16, v15);
            if (v16) {
              v16[8] = 1;
            }
            [v9 addObject:v16];

            id v6 = v14;
          }
          id v11 = [v10 countByEnumeratingWithState:&v30 objects:v44 count:16];
        }
        while (v11);
      }

      uint64_t v17 = sub_1000169A4();
      v18 = sub_10026EC0C((uint64_t)PurchaseHistoryHideShowRequestContext, v9, v22, v17);

      _Block_object_dispose(&v38, 8);
      id v19 = v29;
      if (v19)
      {
        v25[2](v25, v19);
      }
      else
      {
        uint64_t v21 = sub_10040A078((id *)[PurchaseHistoryHideShowRequest alloc], *(void **)(v23 + 8), v18);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        void v26[2] = sub_10024C134;
        v26[3] = &unk_100523810;
        id v28 = v25;
        v26[4] = v23;
        id v27 = v24;
        sub_10040A124((uint64_t)v21, v26);
      }
    }
    else
    {
      id v20 = sub_100266358(4, 0);
      v25[2](v25, v20);
    }
  }
}

void sub_10024C100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_10024C134(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(void))(a1[6] + 16);
  if (a2)
  {
    v3();
  }
  else
  {
    v3();
    uint64_t v4 = a1[4];
    uint64_t v5 = (void *)a1[5];
    sub_10000833C(v4, 2, v5, &stru_100523830);
  }
}

void sub_10024C1A8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  uint64_t v12 = v11;
  if (a1)
  {
    id v13 = *(void **)(a1 + 40);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10024C2A0;
    v14[3] = &unk_100523858;
    v14[4] = a1;
    id v17 = v11;
    id v15 = v9;
    uint64_t v18 = a4;
    id v16 = v10;
    sub_100010948(v13, v14);
  }
}

void sub_10024C2A0(uint64_t a1)
{
  uint64_t v2 = +[ActiveAccountObserver activeAccount];
  if (v2)
  {
    uint64_t v3 = sub_1002A39AC((id *)[PurchaseHistoryUpdateCommand alloc], *(void **)(a1 + 40), *(void **)(a1 + 64));
    uint64_t v5 = v3;
    if (v3)
    {
      objc_setProperty_atomic(v3, v4, *(id *)(a1 + 48), 48);
      objc_setProperty_atomic_copy(v5, v6, *(id *)(a1 + 56), 72);
    }
    sub_10024C404(*(void *)(a1 + 32), v5);
  }
  else
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 138412290;
      id v11 = (id)objc_opt_class();
      id v9 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@]: Ignoring update request - there is no active account", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v5 = sub_100005B4C(4, 0);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v5);
  }
}

void sub_10024C404(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3) {
      [v3 addObject:v4];
    }
    if (!*(unsigned char *)(a1 + 16)) {
      sub_10024D33C(a1);
    }
  }
}

void sub_10024C474(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a5;
  if (a1)
  {
    id v11 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10024C550;
    v12[3] = &unk_100523880;
    v12[4] = a1;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    id v13 = v9;
    id v14 = v10;
    sub_100010948(v11, v12);
  }
}

void sub_10024C550(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:*(void *)(a1 + 56)];
  sub_10024C5BC(v2, v3, *(void **)(a1 + 64), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

void sub_10024C5BC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
    if (v9)
    {
      uint64_t v12 = sub_1002A3944((uint64_t)PurchaseHistoryUpdateCommand, a3, v9);
      id v14 = v12;
      if (v12)
      {
        objc_setProperty_atomic(v12, v13, v10, 64);
        objc_setProperty_atomic_copy(v14, v15, v11, 72);
      }
      sub_10024C404(a1, v14);
    }
    else
    {
      uint64_t v16 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[PurchaseHistoryManager] Refusing to perform update without an accountID!", v18, 2u);
      }

      if (v11)
      {
        id v17 = sub_100005B4C(4, 0);
        (*((void (**)(id, void *))v11 + 2))(v11, v17);
      }
    }
  }
}

void sub_10024C7C8(uint64_t a1)
{
  sub_10031695C(*(void ***)(a1 + 32));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = +[ActiveAccountObserver activeAccount];
  id v4 = v3;
  if (v3)
  {
    if (v2
      && (objc_msgSend(v3, "ams_DSID"),
          uint64_t v5 = objc_claimAutoreleasedReturnValue(),
          unsigned int v6 = [v5 isEqualToNumber:v2],
          v5,
          v6))
    {
      id v7 = sub_1003169E4(*(void ***)(a1 + 32), @"2");
      uint64_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = AMSHashIfNeeded();
        *(_DWORD *)buf = 138543618;
        id v21 = v9;
        __int16 v22 = 2114;
        uint64_t v23 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[PurchaseHistoryManager] Checking for update after receiving notification for accountID: %{public}@ server revision: %{public}@", buf, 0x16u);
      }
      if (v7)
      {
        id v10 = sub_1002A3A7C((uint64_t)PurchaseHistoryUpdateCommand, v2, v7);
LABEL_14:
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_10024CB3C;
        v17[3] = &unk_100521C18;
        id v2 = v2;
        id v18 = v2;
        id v19 = *(id *)(a1 + 48);
        if (v10) {
          objc_setProperty_atomic_copy(v10, v14, v17, 72);
        }
        sub_10024C404(*(void *)(a1 + 40), v10);

        goto LABEL_20;
      }
    }
    else
    {
      id v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        id v21 = v2;
        __int16 v22 = 2114;
        uint64_t v23 = v4;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[PurchaseHistoryManager] Received check for accountID: %{public}@ but falling back to active account: %{public}@", buf, 0x16u);
      }

      uint64_t v12 = objc_msgSend(v4, "ams_DSID");

      id v2 = (id)v12;
    }
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v21 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[PurchaseHistoryManager] Unable to reference server revision from message, performing default check for: %{public}@", buf, 0xCu);
    }

    id v10 = sub_1002A3944((uint64_t)PurchaseHistoryUpdateCommand, 0, v2);
    id v7 = 0;
    goto LABEL_14;
  }
  SEL v15 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = AMSHashIfNeeded();
    *(_DWORD *)buf = 138543362;
    id v21 = v16;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[PurchaseHistoryManager] Ignoring push notification for accountID: %{public}@ as there isn't any account active", buf, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_20:
}

void sub_10024CB3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v6;
      __int16 v10 = 2114;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[PurchaseHistoryManager] Failed to complete update for accountID: %{public}@ error: %{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138543362;
    uint64_t v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[PurchaseHistoryManager] Sucessfully completed update after notification for accountID: %{public}@", (uint8_t *)&v8, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10024CD00(uint64_t a1)
{
  id v2 = +[ActiveAccountObserver activeAccount];
  objc_msgSend(v2, "ams_DSID");
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    id v3 = sub_1002A3944((uint64_t)PurchaseHistoryUpdateCommand, 0, v6);
    uint64_t v5 = v3;
    if (v3) {
      objc_setProperty_atomic_copy(v3, v4, *(id *)(a1 + 40), 72);
    }
    sub_10024C404(*(void *)(a1 + 32), v5);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10024CDBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)ASDPurchaseHistoryQuery);
  uint64_t v5 = objc_msgSend(*(id *)(a1 + 32), "ams_DSID");
  objc_msgSend(v4, "setAccountID:", objc_msgSend(v5, "longLongValue"));

  id v6 = +[NSNumber numberWithLongLong:*(void *)(a1 + 48)];
  id v11 = v6;
  uint64_t v7 = +[NSArray arrayWithObjects:&v11 count:1];
  [v4 setStoreIDs:v7];

  [v4 setIsFirstParty:0];
  [v4 setIsHidden:0];
  [v4 setIsPreorder:0];
  uint64_t v8 = sub_1003DF1F0(v3, v4);

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  __int16 v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_10024CF04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = objc_alloc_init((Class)ASDPurchaseHistoryQuery);
  id v4 = objc_msgSend(*(id *)(a1 + 32), "ams_DSID");
  objc_msgSend(v8, "setAccountID:", objc_msgSend(v4, "longLongValue"));

  [v8 setIsFirstParty:0];
  [v8 setIsHidden:0];
  [v8 setIsPreorder:0];
  uint64_t v5 = sub_1003DF1F0(v3, v8);

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10024D0F4(uint64_t a1)
{
  id v2 = +[ActiveAccountObserver activeAccount];
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = objc_msgSend(v2, "ams_DSID");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10024D258;
    v8[3] = &unk_100521910;
    v8[4] = *(void *)(a1 + 32);
    sub_10024C5BC(v4, v5, (void *)3, 0, v8);
  }
  else
  {
    uint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = (id)objc_opt_class();
      id v7 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%@]: Ignoring update request - there is no active account", buf, 0xCu);
    }
  }
}

void sub_10024D258(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412546;
      id v6 = (id)objc_opt_class();
      __int16 v7 = 2114;
      id v8 = v2;
      id v4 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[%@]: Failed to refresh after active account changed error: %{public}@", (uint8_t *)&v5, 0x16u);
    }
  }
}

void sub_10024D33C(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
    if (*(unsigned char *)(a1 + 16))
    {
      id v2 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        id v3 = "[PurchaseHistoryManager] Update is already running, waiting for it to finish";
LABEL_5:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 2u);
      }
    }
    else
    {
      if ([*(id *)(a1 + 24) count])
      {
        id v2 = +[ActiveAccountObserver activeAccount];
        if (v2)
        {
          id v4 = sub_1002A81CC(*(void **)(a1 + 24));
          if (v4)
          {
            while ((sub_1002A4D48((uint64_t)v4, *(void **)(a1 + 32)) & 1) == 0)
            {
              sub_1002A3B04(v4, 0);
              uint64_t v5 = sub_1002A81CC(*(void **)(a1 + 24));

              id v4 = (void *)v5;
              if (!v5) {
                goto LABEL_11;
              }
            }
            *(unsigned char *)(a1 + 16) = 1;
            uint64_t v12 = sub_1002A3E68(v4, v2, *(void **)(a1 + 32));
            v14[4] = a1;
            v15[0] = _NSConcreteStackBlock;
            v15[1] = 3221225472;
            v15[2] = sub_10024D688;
            v15[3] = &unk_100521A68;
            v15[4] = a1;
            v14[0] = _NSConcreteStackBlock;
            v14[1] = 3221225472;
            v14[2] = sub_10024D708;
            v14[3] = &unk_100521910;
            id v13 = sub_100307190((id *)[DispatchQueue alloc], *(void **)(a1 + 40));
            [v12 thenPerform:v15 orCatchError:v14 onScheduler:v13];
          }
          else
          {
LABEL_11:
            id v6 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[PurchaseHistoryManager] No qualifying update requests remaining", buf, 2u);
            }

            id v4 = 0;
          }
        }
        else
        {
          id v4 = sub_100266358(4, 0);
          long long v16 = 0u;
          long long v17 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          id v7 = *(id *)(a1 + 24);
          id v8 = [v7 countByEnumeratingWithState:&v16 objects:v21 count:16];
          if (v8)
          {
            id v9 = v8;
            uint64_t v10 = *(void *)v17;
            do
            {
              for (i = 0; i != v9; i = (char *)i + 1)
              {
                if (*(void *)v17 != v10) {
                  objc_enumerationMutation(v7);
                }
                sub_1002A3B04(*(void **)(*((void *)&v16 + 1) + 8 * i), v4);
              }
              id v9 = [v7 countByEnumeratingWithState:&v16 objects:v21 count:16];
            }
            while (v9);
          }

          [*(id *)(a1 + 24) removeAllObjects];
        }

        goto LABEL_26;
      }
      id v2 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        id v3 = "[PurchaseHistoryManager] No queued updates pending";
        goto LABEL_5;
      }
    }
LABEL_26:
  }
}

uint64_t sub_10024D688(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[PurchaseHistoryManager] Update command completed, checking for next command", v4, 2u);
  }

  return sub_10024D33C(*(void *)(a1 + 32));
}

void sub_10024D708(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[PurchaseHistoryManager] Update command failed: %{public}@, checking for next command", (uint8_t *)&v5, 0xCu);
  }

  sub_10024D33C(*(void *)(a1 + 32));
}

id *sub_10024D88C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)PurchaseHistoryItemsDAAPRequestEncoder;
    id v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

uint64_t sub_10024DD0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (unint64_t *)v3;
  if (!a1)
  {
    uint64_t v12 = 0;
    goto LABEL_34;
  }
  if (v3) {
    int v5 = v3[8] & 1;
  }
  else {
    int v5 = 0;
  }
  id v6 = ASDLogHandleForCategory();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (!v5)
  {
    if (v7)
    {
      if (v4)
      {
        id v13 = objc_getProperty(v4, v8, 32, 1);
        unint64_t v14 = v4[2];
        int v15 = v4[1] & 1;
        id v16 = v13;
      }
      else
      {
        unint64_t v14 = 0;
        id v13 = 0;
        id v16 = 0;
        int v15 = 0;
      }
      int v29 = 138412802;
      id v30 = v16;
      __int16 v31 = 2048;
      unint64_t v32 = v14;
      __int16 v33 = 1024;
      int v34 = v15;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@]: Evaluating download, size = %{iec-bytes}llu automatic = %d", (uint8_t *)&v29, 0x1Cu);
    }
    sub_10030B11C();
    long long v17 = (id *)objc_claimAutoreleasedReturnValue();
    long long v18 = sub_10030BCBC(v17, @"lowDataPromptThreshold", 0);

    if (((unint64_t)v18 & 0x8000000000000000) != 0)
    {
      id v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        if (v4) {
          id Property = objc_getProperty(v4, v22, 32, 1);
        }
        else {
          id Property = 0;
        }
        id v24 = Property;
        int v29 = 138412290;
        id v30 = v24;
        id v25 = "[%@]: Implicitly allowed low data - threshold disabled";
        goto LABEL_31;
      }
    }
    else
    {
      if (!v4 || (unint64_t v19 = v4[2]) == 0)
      {
        id v6 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_10;
        }
        if (v4) {
          id v27 = objc_getProperty(v4, v26, 32, 1);
        }
        else {
          id v27 = 0;
        }
        id v10 = v27;
        int v29 = 138412290;
        id v30 = v10;
        id v11 = "[%@]: Implicitly denied low data - download size is unavailable";
        goto LABEL_9;
      }
      id v6 = ASDLogHandleForCategory();
      BOOL v20 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      if (v19 > (unint64_t)v18)
      {
        if (!v20) {
          goto LABEL_10;
        }
        id v10 = objc_getProperty(v4, v21, 32, 1);
        int v29 = 138412290;
        id v30 = v10;
        id v11 = "[%@]: Implicitly denied low data - over threshold, or threshold unavailable";
        goto LABEL_9;
      }
      if (v20)
      {
        id v24 = objc_getProperty(v4, v21, 32, 1);
        int v29 = 138412290;
        id v30 = v24;
        id v25 = "[%@]: Implicitly allowed low data - threshold applies";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v29, 0xCu);
      }
    }
    uint64_t v12 = 3;
    goto LABEL_33;
  }
  if (v7)
  {
    if (v4) {
      id v9 = objc_getProperty(v4, v8, 32, 1);
    }
    else {
      id v9 = 0;
    }
    id v10 = v9;
    int v29 = 138412290;
    id v30 = v10;
    id v11 = "[%@]: Implicitly denied low data - automatic downloads are disabled";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v29, 0xCu);
  }
LABEL_10:
  uint64_t v12 = 4;
LABEL_33:

LABEL_34:
  return v12;
}

id sub_10024E080()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024E124;
  block[3] = &unk_100521BF0;
  block[4] = self;
  if (qword_1005B0BC0 != -1) {
    dispatch_once(&qword_1005B0BC0, block);
  }
  v0 = (void *)qword_1005B0BB8;
  return v0;
}

void sub_10024E124()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  id v1 = (void *)qword_1005B0BB8;
  qword_1005B0BB8 = (uint64_t)v0;
}

id sub_10024E2FC()
{
  self;
  id v0 = +[NSFileManager defaultManager];
  id v1 = [v0 attributesOfFileSystemForPath:@"/private/var" error:0];
  id v2 = [v1 objectForKey:NSFileSystemFreeSize];
  id v3 = [v2 longLongValue];

  return v3;
}

id sub_10024E380()
{
  self;
  id v0 = +[NSUserDefaults standardUserDefaults];
  id v1 = [v0 integerForKey:@"ODRDeviceSpaceCushion"];

  return v1;
}

uint64_t sub_10024E3CC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    id v3 = (id *)result;
    id v4 = sub_10024E2FC();
    int64_t v5 = v4 - ((unsigned char *)sub_10024E380() + a2);
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136447234;
      BOOL v20 = "-[ODRManager checkAndRequestRequiredSpaceForRequest:]";
      __int16 v21 = 2048;
      id v22 = sub_10024E2FC();
      __int16 v23 = 2048;
      id v24 = sub_10024E380();
      __int16 v25 = 2048;
      uint64_t v26 = a2;
      __int16 v27 = 2048;
      int64_t v28 = v5;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%{public}s avail: %lld cushion: %lld required: %lld delta: %lld", buf, 0x34u);
    }

    if (v5 < 0 && (uint64_t)sub_10024E5D4(v3, -v5, 0, 3) < -v5)
    {
      BOOL v7 = sub_100298FD0();
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v15;
        do
        {
          id v11 = 0;
          do
          {
            if (*(void *)v15 != v10) {
              objc_enumerationMutation(v7);
            }
            uint64_t v12 = *(void **)(*((void *)&v14 + 1) + 8 * (void)v11);
            if (v12) {
              uint64_t v12 = (void *)v12[8];
            }
            id v13 = v12;
            [v13 sendLowDiskSpaceNotification];

            id v11 = (char *)v11 + 1;
          }
          while (v9 != v11);
          id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
        }
        while (v9);
      }

      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

id *sub_10024E5D4(id *a1, uint64_t a2, int a3, int a4)
{
  id v4 = a1;
  if (a1)
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PURGING SYSTEM : Requested %{iec-bytes}lld be purged at urgency %d", buf, 0x12u);
    }

    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v22 = 0;
    if (a3)
    {
      id v4 = (id *)sub_10024F9CC(v4, a2, a4);
      *(void *)(*(void *)&buf[8] + 24) = v4;
    }
    else
    {
      dispatch_semaphore_t v9 = dispatch_semaphore_create(0);
      uint64_t v10 = +[NSNumber numberWithLongLong:a2];
      id v11 = +[NSDictionary dictionaryWithObjectsAndKeys:@"/private/var", @"CACHE_DELETE_VOLUME", v10, @"CACHE_DELETE_AMOUNT", 0];

      uint64_t v12 = v9;
      CacheDeletePurgeSpaceWithInfo();
      dispatch_time_t v13 = dispatch_time(0, 10000000000);
      if (dispatch_semaphore_wait(v12, v13) >= 1)
      {
        long long v14 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v19 = 136446210;
          BOOL v20 = "-[ODRManager purgeBytes:odrOnly:urgency:]";
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s cache-delete semaphore timed out.", v19, 0xCu);
        }
      }
      if (a4 == 3)
      {
        uint64_t v15 = *(void *)(*(void *)&buf[8] + 24);
        if (a2 > v15)
        {
          long long v16 = sub_10024F9CC(v4, a2 - v15, 3);
          *(void *)(*(void *)&buf[8] + 24) += v16;
          if ((uint64_t)v16 >= 1)
          {
            long long v17 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unint64_t v19 = 134217984;
              BOOL v20 = v16;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Secondary purging pass due to CacheDelete shortfall.  Additional bytes purged (%{iec-bytes}lld).", v19, 0xCu);
            }
          }
        }
      }

      id v4 = *(id **)(*(void *)&buf[8] + 24);
    }
    _Block_object_dispose(buf, 8);
  }
  return v4;
}

void sub_10024E8F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10024E920(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v12 = 0;
    dispatch_time_t v13 = &v12;
    uint64_t v14 = 0x2020000000;
    char v15 = 0;
    [*(id *)(a1 + 24) lock];
    id v4 = sub_1002393C4();
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    id v8 = sub_10024EA3C;
    dispatch_semaphore_t v9 = &unk_100523970;
    id v10 = v3;
    id v11 = &v12;
    [v4 modifyUsingTransaction:&v6];

    objc_msgSend(*(id *)(a1 + 24), "unlock", v6, v7, v8, v9);
    a1 = *((unsigned char *)v13 + 24) != 0;

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_10024EA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10024EA3C(uint64_t a1, void *a2)
{
  id v16 = a2;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = *(id *)(a1 + 32);
  id v17 = [obj countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v17)
  {
    uint64_t v15 = *(void *)v24;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v24 != v15) {
          objc_enumerationMutation(obj);
        }
        long long v18 = sub_1003B9318((uint64_t)ODRApplication, *(void **)(*((void *)&v23 + 1) + 8 * i));
        id v4 = sub_1001F7D38(v16, (uint64_t)v18);
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        id v5 = [v4 countByEnumeratingWithState:&v19 objects:v27 count:16];
        if (v5)
        {
          id v6 = v5;
          uint64_t v7 = *(void *)v20;
          do
          {
            for (j = 0; j != v6; j = (char *)j + 1)
            {
              if (*(void *)v20 != v7) {
                objc_enumerationMutation(v4);
              }
              dispatch_semaphore_t v9 = *(void **)(*((void *)&v19 + 1) + 8 * (void)j);
              id v10 = sub_100297F14(v9);
              if (v10)
              {
                if (sub_100298654(v9)) {
                  sub_10022FB44(v9, 2);
                }
                id v11 = sub_100288DB4(v10);
                sub_1002983AC(v9, v11);

                *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
              }
            }
            id v6 = [v4 countByEnumeratingWithState:&v19 objects:v27 count:16];
          }
          while (v6);
        }
      }
      id v17 = [obj countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v17);
  }

  uint64_t v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return v12;
}

void sub_10024EC74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = sub_1003B9318((uint64_t)ODRApplication, v3);
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Handling application installation: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 1;
    id v6 = sub_1002393C4();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10024F0C8;
    v12[3] = &unk_100523B10;
    p_long long buf = &buf;
    id v7 = v4;
    id v13 = v7;
    [v6 readUsingSession:v12];

    uint64_t v8 = *(void *)(*((void *)&buf + 1) + 24);
    switch(v8)
    {
      case 0:
        dispatch_semaphore_t v9 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        *(_DWORD *)uint64_t v15 = 138543362;
        id v16 = v7;
        id v10 = "Cleaning up after installation for %{public}@ as ODR is no longer supported";
        break;
      case 1:
        dispatch_semaphore_t v9 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        *(_DWORD *)uint64_t v15 = 138543362;
        id v16 = v7;
        id v10 = "Ignoring installation for %{public}@ but it does not appear to support ODR";
        break;
      case 2:
        dispatch_semaphore_t v9 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        *(_DWORD *)uint64_t v15 = 138543362;
        id v16 = v7;
        id v10 = "Handling installation for %{public}@ as a new ODR application";
        break;
      case 3:
        dispatch_semaphore_t v9 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        *(_DWORD *)uint64_t v15 = 138543362;
        id v16 = v7;
        id v10 = "Handling installation for %{public}@ as an updated ODR application";
        break;
      case 4:
        dispatch_semaphore_t v9 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        *(_DWORD *)uint64_t v15 = 138543362;
        id v16 = v7;
        id v10 = "Handling installation for %{public}@ as an ODR application needing repair";
        break;
      case 5:
        dispatch_semaphore_t v9 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        *(_DWORD *)uint64_t v15 = 138543362;
        id v16 = v7;
        id v10 = "Ignoring installation for %{public}@ as it already up to date";
        break;
      default:
        goto LABEL_19;
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, v15, 0xCu);
LABEL_18:

    uint64_t v8 = *(void *)(*((void *)&buf + 1) + 24);
LABEL_19:
    if ((unint64_t)(v8 - 2) < 2)
    {
      id v11 = sub_10035FE84([ODRApplicationImportTask alloc], v7);
      sub_10026F10C((uint64_t)ODRTaskQueue, v11, 17);
    }
    else if (v8 == 4)
    {
      id v11 = sub_100283AA0([ODRApplicationRepairTask alloc], v7);
      sub_10026F10C((uint64_t)ODRTaskQueue, v11, 17);
    }
    else
    {
      if (v8)
      {
LABEL_26:

        _Block_object_dispose(&buf, 8);
        goto LABEL_27;
      }
      id v11 = sub_10038D37C([ODRApplicationCleanTask alloc], v7);
      sub_10026F10C((uint64_t)ODRTaskQueue, v11, 17);
    }

    goto LABEL_26;
  }
LABEL_27:
}

void sub_10024F06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10024F0C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1001F8DDC(a2, *(void **)(a1 + 32));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10024F104(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    [*(id *)(a1 + 24) lock];
    self;
    if (_os_feature_enabled_impl()) {
      unint64_t v7 = -1;
    }
    else {
      unint64_t v7 = 0x80000000;
    }
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[ODRManager performResourceAccessBlock:forApplicationBundleID:]";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s ODRManager.performResourceAccessBlock maxPinnedSizeAllowed %lul", buf, 0x16u);
    }

    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v21 = 0;
    dispatch_semaphore_t v9 = sub_1002393C4();
    uint64_t v14 = _NSConcreteStackBlock;
    uint64_t v15 = 3221225472;
    id v16 = sub_10024F360;
    id v17 = &unk_100523B10;
    uint64_t v19 = buf;
    id v18 = v6;
    [v9 readUsingSession:&v14];

    unint64_t v10 = *(void *)(*(void *)&buf[8] + 24);
    BOOL v11 = v7 >= v10;
    unint64_t v12 = v7 - v10;
    if (v11) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = 0;
    }
    v5[2](v5, v13);

    _Block_object_dispose(buf, 8);
    objc_msgSend(*(id *)(a1 + 24), "unlock", v14, v15, v16, v17);
  }
}

void sub_10024F2FC(_Unwind_Exception *a1)
{
}

void sub_10024F360(uint64_t a1, void **a2)
{
  sub_1001F97DC(a2, *(void **)(a1 + 32));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 unsignedIntegerValue];
}

void sub_10024F3C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    [*(id *)(a1 + 24) lock];
    v3[2]();
    [*(id *)(a1 + 24) unlock];
  }
}

void sub_10024F43C(_Unwind_Exception *a1)
{
}

void sub_10024F45C(void *a1)
{
}

void sub_10024F468(uint64_t a1)
{
  uintptr_t data = dispatch_source_get_data(*(dispatch_source_t *)(*(void *)(a1 + 32) + 32));
  if ((data & 0x200) != 0)
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136446210;
      unint64_t v10 = "-[ODRManager _setupPurgingSupport]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s received very low disk notification. Purging 2GB at urgency 3.", (uint8_t *)&v9, 0xCu);
    }

    id v6 = *(id **)(a1 + 32);
    uint64_t v7 = 2000000000;
    int v8 = 3;
    goto LABEL_12;
  }
  id v3 = ASDLogHandleForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if ((data & 4) != 0)
  {
    if (v4)
    {
      int v9 = 136446210;
      unint64_t v10 = "-[ODRManager _setupPurgingSupport]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s received low disk notification. Purging 1GB at urgency 2.", (uint8_t *)&v9, 0xCu);
    }

    id v6 = *(id **)(a1 + 32);
    uint64_t v7 = 1000000000;
    int v8 = 2;
LABEL_12:
    sub_10024E5D4(v6, v7, 1, v8);
    return;
  }
  if (v4)
  {
    int v9 = 136446466;
    unint64_t v10 = "-[ODRManager _setupPurgingSupport]_block_invoke";
    __int16 v11 = 2048;
    uintptr_t v12 = data;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s received unknown notification-- flags %lu -- doing nothing.", (uint8_t *)&v9, 0x16u);
  }
}

uint64_t sub_10024F7F0(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  *(void *)uint64_t v7 = 0;
  id v3 = sub_100250214(a1, a2, 0x7FFFFFFFFFFFFFFFLL, v7, 0);
  uint64_t v4 = *(void *)v7;
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)&v7[4] = v4;
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PURGING : %{iec-bytes}lld available for purging urgency %d", v7, 0x12u);
  }

  return v4;
}

const char *sub_10024F9CC(id *a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v71 = 0;
  [a1[3] lock];
  v54 = +[NSMutableArray array];
  uint64_t v55 = +[NSMutableSet set];
  uint64_t v7 = sub_1002501D0(a1, a3, a2, &v71);
  v51 = v6;
  v52 = a1;
  int v50 = a3;
  uint64_t v49 = a2;
  if (a3 >= 2 && v71 < a2)
  {
    __int16 v8 = sub_100298FD0();
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v9 = [v8 countByEnumeratingWithState:&v67 objects:v82 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v68;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v68 != v11) {
            objc_enumerationMutation(v8);
          }
          unint64_t v13 = *(void **)(*((void *)&v67 + 1) + 8 * i);
          if (v13) {
            unint64_t v13 = (void *)v13[8];
          }
          uint64_t v14 = v13;
          [v14 sendLowDiskSpaceNotification];
        }
        id v10 = [v8 countByEnumeratingWithState:&v67 objects:v82 count:16];
      }
      while (v10);
    }
    uint64_t v15 = sub_1002501D0(a1, a3, a2, &v71);

    uint64_t v7 = (void *)v15;
  }
  id v53 = [objc_alloc((Class)RBSTerminateContext) initWithExplanation:@"On-Demand Resource purge request from CacheDelete"];
  [v53 setMaximumTerminationResistance:30];
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id obj = v7;
  id v16 = [obj countByEnumeratingWithState:&v63 objects:v81 count:16];
  id v17 = (void *)v55;
  if (!v16)
  {
    uint64_t v19 = 0;
    goto LABEL_42;
  }
  id v18 = v16;
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)v64;
  do
  {
    uint64_t v21 = 0;
    do
    {
      if (*(void *)v64 != v20) {
        objc_enumerationMutation(obj);
      }
      long long v22 = *(void **)(*((void *)&v63 + 1) + 8 * (void)v21);
      sub_100297A88(v22);
      long long v23 = (char *)objc_claimAutoreleasedReturnValue();
      if (uint64_t)sub_100297DCC(v22) < 1 || ([v17 containsObject:v23])
      {
        long long v24 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          long long v25 = sub_100297AC0(v22);
          id v26 = sub_100297DCC(v22);
          *(_DWORD *)long long buf = 136446978;
          v74 = "-[ODRManager _purgeBytes:forUrgency:]";
          __int16 v75 = 2114;
          v76 = v23;
          __int16 v77 = 2114;
          v78 = v25;
          __int16 v79 = 2048;
          id v80 = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}s No need to assert %{public}@ for asset %{public}@ with pin count %lld", buf, 0x2Au);
        }
        goto LABEL_29;
      }
      __int16 v27 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        int64_t v28 = sub_100297AC0(v22);
        id v29 = sub_100297DCC(v22);
        *(_DWORD *)long long buf = 136446978;
        v74 = "-[ODRManager _purgeBytes:forUrgency:]";
        __int16 v75 = 2114;
        v76 = v23;
        __int16 v77 = 2114;
        v78 = v28;
        __int16 v79 = 2048;
        id v80 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}s Attempting to assert %{public}@ for asset %{public}@ with pin count %lld.", buf, 0x2Au);
      }
      [v17 addObject:v23];
      id v30 = objc_alloc((Class)RBSTerminationAssertion);
      __int16 v31 = +[RBSProcessPredicate predicateMatchingBundleIdentifier:v23];
      long long v24 = [v30 initWithPredicate:v31 context:v53];

      [v54 addObject:v24];
      if (![v24 processExists]) {
        goto LABEL_28;
      }
      id v62 = 0;
      unsigned __int8 v32 = [v24 acquireWithError:&v62];
      __int16 v33 = (char *)v62;
      int v34 = v33;
      if (v32)
      {

LABEL_28:
        id v17 = (void *)v55;
LABEL_29:

        if (sub_10022FB44(v22, 2))
        {
          id v35 = sub_100297EDC(v22);
          uint64_t v19 = &v19[(void)[v35 integerValue]];

          v36 = sub_1002393C4();
          v61[0] = _NSConcreteStackBlock;
          v61[1] = 3221225472;
          v61[2] = sub_100250204;
          v61[3] = &unk_100521360;
          v61[4] = v22;
          [v36 modifyUsingTransaction:v61];
        }
        else
        {
          v37 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            sub_100297AC0(v22);
            long long v39 = (char *)objc_claimAutoreleasedReturnValue();
            sub_100297D1C(v22);
            uint64_t v40 = (char *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)long long buf = 138543618;
            v74 = v39;
            __int16 v75 = 2114;
            v76 = v40;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "PURGING ERROR : Attempting to delete asset %{public}@ at url %{public}@ failed.", buf, 0x16u);
          }
        }
        goto LABEL_34;
      }
      uint64_t v38 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543618;
        v74 = v23;
        __int16 v75 = 2114;
        v76 = v34;
        _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Error acquiring assertion for %{public}@: %{public}@", buf, 0x16u);
      }

      id v17 = (void *)v55;
LABEL_34:

      uint64_t v21 = (char *)v21 + 1;
    }
    while (v18 != v21);
    id v41 = [obj countByEnumeratingWithState:&v63 objects:v81 count:16];
    id v18 = v41;
  }
  while (v41);
LABEL_42:

  long long v42 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218496;
    v74 = v19;
    __int16 v75 = 2048;
    v76 = (char *)v49;
    __int16 v77 = 1024;
    LODWORD(v78) = v50;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "PURGING : %{iec-bytes}lld purged (%lld requested) for purging urgency %d", buf, 0x1Cu);
  }

  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id v43 = v54;
  id v44 = [v43 countByEnumeratingWithState:&v57 objects:v72 count:16];
  if (v44)
  {
    id v45 = v44;
    uint64_t v46 = *(void *)v58;
    do
    {
      for (j = 0; j != v45; j = (char *)j + 1)
      {
        if (*(void *)v58 != v46) {
          objc_enumerationMutation(v43);
        }
        objc_msgSend(*(id *)(*((void *)&v57 + 1) + 8 * (void)j), "invalidate", v49);
      }
      id v45 = [v43 countByEnumeratingWithState:&v57 objects:v72 count:16];
    }
    while (v45);
  }

  [v52[3] unlock];
  return v19;
}

id sub_1002501D0(void *a1, int a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    a1 = sub_100250214((uint64_t)a1, a2, a3, a4, 1);
    uint64_t v4 = vars8;
  }
  return a1;
}

BOOL sub_100250204(uint64_t a1, void *a2)
{
  return sub_100249F50(a2, *(void **)(a1 + 32));
}

id sub_100250214(uint64_t a1, int a2, uint64_t a3, void *a4, char a5)
{
  if (a1)
  {
    uint64_t v30 = 0;
    __int16 v31 = &v30;
    uint64_t v32 = 0x3032000000;
    __int16 v33 = sub_100017F48;
    int v34 = sub_100017B60;
    id v35 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v26 = 0;
    __int16 v27 = &v26;
    uint64_t v28 = 0x2020000000;
    uint64_t v29 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100250554;
    v24[3] = &unk_100523998;
    char v25 = a5;
    v24[4] = &v26;
    void v24[5] = &v30;
    v24[6] = a3;
    id v9 = objc_retainBlock(v24);
    id v10 = v9;
    switch(a2)
    {
      case 3:
        sub_100250618(0, v9);
        if (![(id)v31[5] count])
        {
          uint64_t v14 = sub_100298FD0();
          id v15 = [v14 count];

          if (!v15)
          {
            id v16 = sub_1003F9F04();
            uint64_t v17 = sub_1003FAB2C((uint64_t)v16);

            if ((v17 & 1) == 0)
            {
              id v18 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "ODR Purging requesting with high priority, kicking off maintenance operations.", buf, 2u);
              }

              uint64_t v19 = dispatch_get_global_queue(21, 0);
              dispatch_async(v19, &stru_1005239B8);
            }
          }
        }
        break;
      case 2:
        uint64_t v20 = +[NSUserDefaults standardUserDefaults];
        id v21 = [v20 integerForKey:@"ODRPurgeAssetMediumUrgencyCutoff"];

        sub_100250618((uint64_t)v21, v10);
        break;
      case 1:
        uint64_t v11 = v9;
        uintptr_t v12 = sub_1002393C4();
        *(void *)long long buf = _NSConcreteStackBlock;
        uint64_t v37 = 3221225472;
        uint64_t v38 = sub_100251738;
        long long v39 = &unk_100523AE8;
        unint64_t v13 = v11;
        id v40 = v13;
        [v12 readUsingSession:buf];

        break;
    }
    if (a4) {
      *a4 = v27[3];
    }
    id v22 = (id)v31[5];

    _Block_object_dispose(&v26, 8);
    _Block_object_dispose(&v30, 8);
  }
  else
  {
    id v22 = 0;
  }
  return v22;
}

void sub_100250528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100250554(uint64_t a1, void *a2, unsigned char *a3)
{
  id v8 = a2;
  unsigned int v5 = sub_100298654(v8);
  id v6 = v8;
  if (v5)
  {
    uint64_t v7 = sub_100297EDC(v8);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += [v7 unsignedLongLongValue];

    if (*(unsigned char *)(a1 + 56)) {
      [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v8];
    }
    id v6 = v8;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >= *(void *)(a1 + 48)) {
      *a3 = 1;
    }
  }
}

void sub_100250618(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSDate dateWithTimeIntervalSinceNow:(double)-a1];
  unsigned int v5 = sub_100298FD0();
  id v6 = sub_1003923F8(v5, &stru_100523A48);
  uint64_t v7 = sub_1002393C4();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002514B4;
  v11[3] = &unk_100523AC0;
  id v8 = v3;
  id v13 = v6;
  id v14 = v8;
  id v12 = v4;
  id v9 = v6;
  id v10 = v4;
  [v7 readUsingSession:v11];
}

void sub_10025074C(id a1)
{
  uint64_t v1 = sub_1001F5C30();
  sub_1001F5D40(v1);

  sub_1001F5C30();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1001F5E50((uint64_t)v2);
}

void sub_1002507B4(uint64_t a1, void *a2)
{
  uint64_t v4 = [a2 objectForKeyedSubscript:@"CACHE_DELETE_AMOUNT"];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 longLongValue];

  unsigned int v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v8 = 134218240;
    uint64_t v9 = v7;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PURGING SYSTEM : %{iec-bytes}lld purged (requested %lld)", (uint8_t *)&v8, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1002508B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    [*(id *)(a1 + 24) lock];
    uint64_t v6 = sub_1002393C4();
    uint64_t v7 = _NSConcreteStackBlock;
    uint64_t v8 = 3221225472;
    uint64_t v9 = sub_100250988;
    __int16 v10 = &unk_100523A08;
    uint64_t v12 = a3;
    id v11 = v5;
    [v6 modifyUsingTransaction:&v7];

    objc_msgSend(*(id *)(a1 + 24), "unlock", v7, v8, v9, v10);
  }
}

uint64_t sub_100250988(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  id v5 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) == 1)
  {
    uint64_t v6 = +[NSDate date];
    uint64_t v7 = sub_1001F81D8(v4, v5, 1, v6);
  }
  else
  {
    uint64_t v7 = sub_1001F8780(v3, *(void **)(a1 + 32));
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        sub_10022FB44(v13, *(void *)(a1 + 40));
        sub_100249F50(v4, v13);
      }
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v10);
  }

  return 1;
}

void sub_100250AFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    [*(id *)(a1 + 24) lock];
    uint64_t v6 = sub_1002393C4();
    uint64_t v7 = _NSConcreteStackBlock;
    uint64_t v8 = 3221225472;
    id v9 = sub_100250BC8;
    id v10 = &unk_100523A08;
    id v11 = v5;
    uint64_t v12 = a3;
    [v6 modifyUsingTransaction:&v7];

    objc_msgSend(*(id *)(a1 + 24), "unlock", v7, v8, v9, v10);
  }
}

uint64_t sub_100250BC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001F82E8(v3, *(void *)(a1 + 32));
  id v5 = v4;
  if (!v4) {
    goto LABEL_14;
  }
  if (*(void *)(a1 + 40) != 1) {
    goto LABEL_13;
  }
  id v6 = [v4 valueForProperty:@"bundle_id"];
  self;
  uint64_t v7 = sub_100299044((uint64_t)ODRClient, v6);
  uint64_t v8 = ASDLogHandleForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (!v7)
  {
    if (v9)
    {
      int v15 = 136446466;
      long long v16 = "+[ODRManager isAppRunning:]";
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ is not being monitored; not running or connected.",
        (uint8_t *)&v15,
        0x16u);
    }

    goto LABEL_13;
  }
  if (v9)
  {
    int v15 = 136446466;
    long long v16 = "+[ODRManager isAppRunning:]";
    __int16 v17 = 2114;
    id v18 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%{public}s App %{public}@ is running: YES", (uint8_t *)&v15, 0x16u);
  }

  unsigned __int8 v10 = sub_100297E4C(v5);
  if (v10)
  {
LABEL_13:
    sub_10022FB44(v5, *(void *)(a1 + 40));
    sub_100249F50(v3, v5);
    goto LABEL_14;
  }
  id v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(const char **)(a1 + 32);
    id v13 = [v5 valueForProperty:@"bundle_id"];
    int v15 = 138543618;
    long long v16 = v12;
    __int16 v17 = 2114;
    id v18 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Not removing asset pack with id %{public}@ because the app %{public}@ is running and the asset is not purgeable", (uint8_t *)&v15, 0x16u);
  }
LABEL_14:

  return 1;
}

id sub_100250E30(uint64_t a1)
{
  if (a1)
  {
    id v1 = objc_alloc_init((Class)NSMutableString);
    id v2 = +[NSByteCountFormatter stringFromByteCount:sub_10024E2FC() countStyle:0];
    id v3 = +[NSString stringWithFormat:@"Available Space : %@\n\n", v2];
    [v1 appendString:v3];

    id v4 = objc_alloc_init((Class)NSMutableString);
    id v5 = sub_1003F9F04();
    id v6 = sub_1003FA308(v5);
    uint64_t v7 = +[NSString stringWithFormat:@"ODR Library : %@\n", v6];
    [v4 appendString:v7];

    uint64_t v8 = sub_1003F9F04();
    BOOL v9 = (void *)v8;
    if (v8) {
      unsigned __int8 v10 = *(void **)(v8 + 32);
    }
    else {
      unsigned __int8 v10 = 0;
    }
    id v11 = v10;
    uint64_t v12 = +[NSString stringWithFormat:@"Asset Packs : %@\n", v11];
    [v4 appendString:v12];

    uint64_t v13 = sub_1003F9F04();
    id v14 = (void *)v13;
    if (v13) {
      int v15 = *(void **)(v13 + 16);
    }
    else {
      int v15 = 0;
    }
    id v16 = v15;
    __int16 v17 = +[NSString stringWithFormat:@"Database    : %@\n", v16];
    [v4 appendString:v17];

    id v18 = sub_10040EBA8();
    uint64_t v19 = sub_1004138E8((uint64_t)v18);

    if ([v19 count])
    {
      id v50 = v1;
      id v20 = objc_alloc_init((Class)NSNumberFormatter);
      [v20 setNumberStyle:3];
      [v20 setMaximumFractionDigits:0];
      v52 = v20;
      [v20 setMultiplier:&off_10054BC88];
      [v4 appendString:@"Active Download Requests\n"];
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      id obj = v19;
      id v21 = [obj countByEnumeratingWithState:&v53 objects:v57 count:16];
      if (v21)
      {
        id v23 = v21;
        uint64_t v24 = *(void *)v54;
        do
        {
          char v25 = 0;
          do
          {
            if (*(void *)v54 != v24) {
              objc_enumerationMutation(obj);
            }
            uint64_t v26 = *(void *)(*((void *)&v53 + 1) + 8 * (void)v25);
            if (v26)
            {
              id v27 = objc_getProperty(*(id *)(*((void *)&v53 + 1) + 8 * (void)v25), v22, 112, 1);
              [v4 appendFormat:@"\nDownload: %@\n", v27];

              id Property = objc_getProperty((id)v26, v28, 184, 1);
            }
            else
            {
              [v4 appendFormat:@"\nDownload: %@\n", 0];
              id Property = 0;
            }
            id v30 = Property;
            [v4 appendFormat:@"\tLog Key : %@\n", v30];

            if (v26)
            {
              id v32 = objc_getProperty((id)v26, v31, 104, 1);
              [v4 appendFormat:@"\tBundle ID : %@\n", v32];

              id v34 = objc_getProperty((id)v26, v33, 216, 1);
            }
            else
            {
              [v4 appendFormat:@"\tBundle ID : %@\n", 0];
              id v34 = 0;
            }
            id v35 = v34;
            [v4 appendFormat:@"\tSource URL : %@\n", v35];

            v36 = sub_10030E894((void *)v26);
            [v4 appendFormat:@"\tDownload Path : %@\n", v36];

            if (v26)
            {
              id v38 = objc_getProperty((id)v26, v37, 136, 1);
              [v4 appendFormat:@"\tDestination Path : %@\n", v38];

              if (*(unsigned char *)(v26 + 84)) {
                CFStringRef v39 = @"YES";
              }
              else {
                CFStringRef v39 = @"NO";
              }
              [v4 appendFormat:@"\tIs Streamable: %@\n", v39];
              objc_msgSend(v4, "appendFormat:", @"\tPriority : %f\n", *(void *)(v26 + 176));
              if (*(unsigned char *)(v26 + 80)) {
                CFStringRef v40 = @"YES";
              }
              else {
                CFStringRef v40 = @"NO";
              }
              [v4 appendFormat:@"\tIs Discretionary : %@\n", v40];
              [*(id *)(v26 + 40) lock];
              id v41 = [*(id *)(v26 + 16) count];
              [*(id *)(v26 + 40) unlock];
              objc_msgSend(v4, "appendFormat:", @"\tDuplicate count : %ld\n", v41);
              id v43 = objc_getProperty((id)v26, v42, 200, 1);
            }
            else
            {
              [v4 appendFormat:@"\tDestination Path : %@\n", 0];
              [v4 appendFormat:@"\tIs Streamable: %@\n", @"NO"];
              objc_msgSend(v4, "appendFormat:", @"\tPriority : %f\n", 0);
              [v4 appendFormat:@"\tIs Discretionary : %@\n", @"NO"];
              objc_msgSend(v4, "appendFormat:", @"\tDuplicate count : %ld\n", 0);
              id v43 = 0;
            }
            id v44 = v43;
            [v44 fractionCompleted];
            id v45 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            uint64_t v46 = [v52 stringFromNumber:v45];
            v47 = +[NSString stringWithFormat:@"%@ completed", v46];

            [v4 appendFormat:@"\tProgress: %@\n\n", v47];
            char v25 = (char *)v25 + 1;
          }
          while (v23 != v25);
          id v48 = [obj countByEnumeratingWithState:&v53 objects:v57 count:16];
          id v23 = v48;
        }
        while (v48);
      }

      id v1 = v50;
    }
    else
    {
      [v4 appendString:@"No Download Requests Active\n"];
    }

    [v1 appendString:v4];
  }
  else
  {
    id v1 = 0;
  }
  return v1;
}

id sub_100251498(id a1, ODRClient *a2)
{
  if (a2) {
    return objc_getProperty(a2, (SEL)a2, 72, 1);
  }
  else {
    return 0;
  }
}

void sub_1002514B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100251634;
  v10[3] = &unk_100523A70;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = &v13;
  if (!v3 || (sub_1001F87B4(v3, 0, 1, 0, v10), !*((unsigned char *)v14 + 24)))
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10025168C;
    v6[3] = &unk_100523A98;
    id v4 = *(void **)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    id v5 = *(id *)(a1 + 48);
    id v8 = v5;
    BOOL v9 = &v13;
    if (v3)
    {
      sub_1001F87B4(v3, 0, 0, v4, v6);
      id v5 = v8;
    }
  }
  _Block_object_dispose(&v13, 8);
}

void sub_10025161C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100251634(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a3 = 1;
  }
  return result;
}

void sub_10025168C(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  id v6 = (void *)a1[4];
  id v8 = v5;
  id v7 = sub_100297A88(v5);
  LOBYTE(v6) = [v6 containsObject:v7];

  if ((v6 & 1) == 0) {
    (*(void (**)(void))(a1[5] + 16))();
  }
  if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24)) {
    *a3 = 1;
  }
}

void sub_100251738(uint64_t a1, void *a2)
{
  if (a2) {
    sub_1001F87B4(a2, 0, 1, 0, *(void **)(a1 + 32));
  }
}

id *sub_1002517FC(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    a1 = [a1 init];
    if (a1)
    {
      id v10 = [v7 copy];
      id v11 = a1[8];
      a1[8] = v10;

      objc_storeStrong(a1 + 7, a3);
      objc_storeStrong(a1 + 6, a4);
      uint64_t v12 = ASDLogHandleForCategory();
      uint64_t v13 = (char *)[v8 signpostID];
      if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v14 = (os_signpost_id_t)v13;
        if (os_signpost_enabled(v12))
        {
          uint64_t v15 = [v8 logKey];
          int v17 = 138543362;
          id v18 = v15;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v14, "Purchase/Import", " uuid=%{public, signpost.description:attribute}@ ", (uint8_t *)&v17, 0xCu);
        }
      }
    }
  }

  return a1;
}

void sub_100251978(uint64_t a1, char a2)
{
  if (a1)
  {
    os_unfair_lock_lock_with_options();
    *(unsigned char *)(a1 + 72) = a2;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  }
}

void sub_100251BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100251BE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)NSMutableArray) initWithCapacity:2];
  id v5 = [*(id *)(*(void *)(a1 + 32) + 56) installedExternalVersionID];

  if (v5)
  {
    if (v3) {
      id Property = objc_getProperty(v3, v6, 64, 1);
    }
    else {
      id Property = 0;
    }
    id v8 = Property;
    id v9 = [*(id *)(*(void *)(a1 + 32) + 56) installedExternalVersionID];
    id v10 = [*(id *)(*(void *)(a1 + 32) + 56) installedVariantID];
    id v11 = sub_10030FDA4((uint64_t)StoreAsset, v8, v9, v10);

    if (v11) {
      [v4 addObject:v11];
    }
  }
  if (v3) {
    id v12 = objc_getProperty(v3, v6, 72, 1);
  }
  else {
    id v12 = 0;
  }
  id v13 = v12;

  if (v13)
  {
    if (v3) {
      id v15 = objc_getProperty(v3, v14, 72, 1);
    }
    else {
      id v15 = 0;
    }
    id v16 = v15;
    [v4 addObject:v16];
  }
  if (*(unsigned char *)(a1 + 56)) {
    +[NSUUID UUID];
  }
  else {
  int v17 = [*(id *)(*(void *)(a1 + 32) + 56) externalID];
  }
  unsigned int v18 = [*(id *)(*(void *)(a1 + 32) + 56) suppressDialogs];
  uint64_t v19 = *(id **)(a1 + 32);
  id v20 = v3;
  id v21 = v20;
  id v282 = v4;
  id v288 = v3;
  self = v20;
  if (v3 && v19 && (v20[14] & 1) != 0)
  {
    id v48 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = [v19[7] logKey];
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[%@]: Requesting installation of watch only app on active paired watch", buf, 0xCu);
    }
    id v50 = v21;
    v51 = sub_1002DC980();
    uint64_t v52 = sub_1002DCAAC((uint64_t)v51);

    if (v52)
    {
      if ((*(unsigned char *)(v52 + 18) & 1) != 0 || (v50[12] & 1) == 0)
      {
        long long v53 = sub_100400EF8((uint64_t)MIStoreMetadata, v50);
        long long v54 = [v19[7] account];
        sub_100401854(v53, v54);

        id v56 = objc_getProperty(v50, v55, 72, 1);
        long long v58 = v56;
        if (v56) {
          id v56 = objc_getProperty(v56, v57, 144, 1);
        }
        v286 = v17;
        id v59 = v56;
        if (v53) {
          sub_1004019C4(v53, v59, 0);
        }

        long long v60 = +[ASDWatchAppMetadata metadataFromStoreMetadata:v53];
        [v60 setBundleID:0];
        [v60 setSkipIfInstalled:1];
        v61 = [v60 redownloadParams];

        if (v61
          && ([v60 redownloadParams],
              id v62 = objc_claimAutoreleasedReturnValue(),
              +[AMSBuyParams buyParamsWithString:v62],
              id v63 = (id)objc_claimAutoreleasedReturnValue(),
              v62,
              v63))
        {
          uint64_t v64 = AMSBuyParamPropertyPricingParameters;
          long long v65 = [v63 parameterForKey:AMSBuyParamPropertyPricingParameters];
          unsigned int v66 = [v65 isEqualToString:@"SWUPD"];

          if (v66)
          {
            long long v67 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              v277 = [v19[7] logKey];
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v277;
              _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "[%@] Using workaround for incorrect pricing parameters", buf, 0xCu);
            }
            [v63 setParameter:@"STDRDL" forKey:v64];
          }
        }
        else
        {
          v76 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            v265 = [v19[7] logKey];
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v265;
            _os_log_error_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "[%@] Using workaround for missing buy parameters", buf, 0xCu);
          }
          id v63 = objc_alloc_init((Class)AMSBuyParams);
          [v63 setParameter:@"C" forKey:@"productType"];
          [v63 setParameter:@"0" forKey:@"price"];
          id v78 = objc_getProperty(v50, v77, 208, 1);
          [v63 setParameter:v78 forKey:AMSBuyParamPropertyItemId];

          [v63 setParameter:@"STDRDL" forKey:AMSBuyParamPropertyPricingParameters];
        }
        __int16 v79 = [v63 stringValue];
        [v60 setRedownloadParams:v79];

        id v80 = sub_10022889C();
        id v304 = v60;
        v81 = +[NSArray arrayWithObjects:&v304 count:1];
        v82 = [*(id *)(v52 + 8) pairingID];
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&buf[16] = sub_10025415C;
        v306 = (id *)&unk_1005233E8;
        v307 = v19;
        [v80 installWatchApps:v81 onPairedDevice:v82 withReplyHandler:buf];

        id v4 = v282;
        int v17 = v286;
        goto LABEL_60;
      }
      long long v53 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
LABEL_60:

        IXCreateUserPresentableError();
        id v84 = (id)objc_claimAutoreleasedReturnValue();

        id v284 = v84;
        long long v70 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          v85 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v85;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "[%@]: Suppressing further dialogs and handling purchase on Watch", buf, 0xCu);
        }
        uint64_t v71 = 0;
        LOBYTE(v280) = 1;
        id v3 = v288;
        id v21 = self;
        goto LABEL_63;
      }
      v72 = [v19[7] logKey];
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v72;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v52;
      v73 = "[%@] Paired device: %{public}@ does not support WKWatchOnly!";
      v74 = v53;
      uint32_t v75 = 22;
    }
    else
    {
      long long v53 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      v72 = [v19[7] logKey];
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v72;
      v73 = "[%@] There's no paired device to install this app on!";
      v74 = v53;
      uint32_t v75 = 12;
    }
    _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, v73, buf, v75);

    goto LABEL_60;
  }
  unsigned int v280 = v18;

  uint64_t v22 = *(void *)(a1 + 32);
  if (!v22)
  {
    long long v68 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      long long v69 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v69;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "[%{public}@] App is ineligible for watch app install", buf, 0xCu);
    }
    ASDErrorWithDescription();
    id v284 = (id)objc_claimAutoreleasedReturnValue();
    long long v70 = 0;
    uint64_t v71 = 0;
    goto LABEL_63;
  }
  id v23 = [v4 firstObject];
  uint64_t v24 = v17;
  char v25 = v21;
  id v26 = v23;
  v285 = v24;
  id v279 = v24;
  if (v3) {
    id v28 = objc_getProperty(v25, v27, 32, 1);
  }
  else {
    id v28 = 0;
  }
  id v29 = v28;

  if (v29)
  {
    BOOL v31 = [*(id *)(v22 + 56) updateType] != 0;
    SEL v33 = +[AppCapabilitiesService defaultService];
    if (v3)
    {
      id v34 = objc_getProperty(v25, v32, 96, 1);
      id v36 = objc_getProperty(v25, v35, 32, 1);
    }
    else
    {
      id v34 = 0;
      id v36 = 0;
    }
    id v37 = v36;
    id v38 = [*(id *)(v22 + 56) logKey];
    id v304 = 0;
    unsigned __int8 v39 = [v33 validateAction:v31 bundleID:v34 capabilities:v37 logKey:v38 error:&v304];
    id v40 = v304;

    if ((v39 & 1) == 0)
    {
      v83 = ASDLogHandleForCategory();
      id v4 = v282;
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        v269 = [*(id *)(v22 + 56) logKey];
        if (v288) {
          id v270 = objc_getProperty(v25, v268, 32, 1);
        }
        else {
          id v270 = 0;
        }
        id v271 = v270;
        v272 = [v271 componentsJoinedByString:@", "];
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v269;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v272;
        _os_log_error_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "[%@] Skipping incompatible purchase for app binary traits: %{public}@", buf, 0x16u);
      }
      id v46 = v40;
      int v47 = 0;
      id v42 = v46;
      id v3 = v288;
      id v21 = self;
      goto LABEL_134;
    }

    id v4 = v282;
    id v3 = v288;
    id v21 = self;
  }
  if (!v3)
  {
    id v46 = 0;
    id v42 = 0;
    goto LABEL_32;
  }
  id v42 = objc_getProperty(v25, v30, 128, 1);
  if (v42
    && (id v43 = objc_getProperty(v25, v41, 136, 1),
        [*(id *)(v22 + 56) logKey],
        id v44 = objc_claimAutoreleasedReturnValue(),
        BOOL v45 = sub_1004005F8((uint64_t)AMSDevice, v42, v43, v44),
        v44,
        id v21 = self,
        v43,
        !v45))
  {
    v155 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
    {
      v274 = [*(id *)(v22 + 56) logKey];
      v276 = (id *)objc_getProperty(v25, v275, 136, 1);
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v274;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v42;
      *(_WORD *)&buf[22] = 2114;
      v306 = v276;
      _os_log_error_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_ERROR, "[%@] Skipping incompatible purchase for required capabilities: %{public}@ options: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    if ((v25[19] & 1) == 0)
    {
      id v46 = 0;
LABEL_32:
      int v47 = 1;
      goto LABEL_134;
    }
    v155 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
    {
      v273 = [*(id *)(v22 + 56) logKey];
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v273;
      _os_log_error_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_ERROR, "[%@] Unsupported 32-Bit application", buf, 0xCu);
    }
  }

  [*(id *)(v22 + 56) isDiscretionary];
  IXCreateUserPresentableError();
  id v46 = (id)objc_claimAutoreleasedReturnValue();
  int v47 = 0;
  id v21 = self;
LABEL_134:

  id v284 = v46;
  if (v47)
  {
    if (v3) {
      id v157 = objc_getProperty(v25, v156, 208, 1);
    }
    else {
      id v157 = 0;
    }
    long long v70 = v157;
    if (![*(id *)(*(void *)(a1 + 32) + 56) clientType] && v70)
    {
      v158 = [_TtC9appstored28PostPurchaseInstallSheetTask alloc];
      v160 = [v70 stringValue];
      if (v3) {
        id v161 = objc_getProperty(v25, v159, 144, 1);
      }
      else {
        id v161 = 0;
      }
      id v162 = v161;
      v163 = [v162 stringValue];
      if (v3)
      {
        if (v25[16]) {
          uint64_t v164 = 1;
        }
        else {
          uint64_t v164 = v25[18] & 1;
        }
      }
      else
      {
        uint64_t v164 = 0;
      }
      v168 = [(PostPurchaseInstallSheetTask *)v158 initWithItemID:v160 versionID:v163 purchaseInfo:*(void *)(*(void *)(a1 + 32) + 56) isRedownload:v164];

      v169 = objc_alloc_init(TaskQueue);
      v303 = v168;
      v170 = +[NSArray arrayWithObjects:&v303 count:1];
      if (v169) {
        [(NSOperationQueue *)v169->_operationQueue addOperations:v170 waitUntilFinished:1];
      }

      id v4 = v282;
      id v21 = self;
      if (v168) {
        id v172 = objc_getProperty(v168, v171, 32, 1);
      }
      else {
        id v172 = 0;
      }
      id v173 = v172;

      if (v173)
      {
        if (v168) {
          id v175 = objc_getProperty(v168, v174, 32, 1);
        }
        else {
          id v175 = 0;
        }
        id v176 = v175;

        v280 |= ASDErrorIsEqual();
        id v284 = v176;
      }
    }
    if (v284)
    {
      uint64_t v71 = 0;
      int v17 = v285;
    }
    else
    {
      v177 = *(void **)(*(void *)(a1 + 32) + 56);
      id v301 = 0;
      sub_1003D1C04((uint64_t)AppInstall, v25, v4, v177, &v301);
      uint64_t v71 = (id *)objc_claimAutoreleasedReturnValue();
      id v284 = v301;
      if (*(unsigned char *)(a1 + 56)) {
        [v71 setValue:v279 forProperty:@"external_id"];
      }
      v178 = [*(id *)(*(void *)(a1 + 32) + 56) metricsType];

      int v17 = v285;
      if (!v178)
      {
        v179 = sub_10026E82C(v71, @"metrics_install_type");
        [*(id *)(*(void *)(a1 + 32) + 56) setMetricsType:v179];
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  uint64_t v71 = 0;
  int v17 = v285;
LABEL_64:
  self;
  if (!os_variant_has_internal_content()) {
    goto LABEL_77;
  }
  long long v299 = 0u;
  long long v300 = 0u;
  long long v297 = 0u;
  long long v298 = 0u;
  if (v71) {
    id v87 = objc_getProperty(v71, v86, 40, 1);
  }
  else {
    id v87 = 0;
  }
  id v88 = v87;
  id v89 = [v88 countByEnumeratingWithState:&v297 objects:v302 count:16];
  if (!v89)
  {
LABEL_76:

    id v4 = v282;
    id v3 = v288;
    id v21 = self;
LABEL_77:
    if (!v71) {
      goto LABEL_108;
    }
LABEL_78:
    uint64_t v95 = *(void *)(a1 + 32);
    if (v95)
    {
      os_unfair_lock_lock_with_options();
      int v96 = *(unsigned __int8 *)(v95 + 72);
      os_unfair_lock_unlock((os_unfair_lock_t)(v95 + 40));
      if (v96)
      {
        v97 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          v98 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v98;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "[%@] Overriding automatic installation flag", buf, 0xCu);
        }
        [v71 setValue:&off_10054BCA0 forProperty:@"automatic_type"];
      }
    }
    if (v3) {
      id v99 = objc_getProperty(v21, v86, 200, 1);
    }
    else {
      id v99 = 0;
    }
    id v100 = v99;

    if (v100)
    {
      if (v3) {
        id v102 = objc_getProperty(v21, v101, 200, 1);
      }
      else {
        id v102 = 0;
      }
      id v103 = v102;
      [v71 setValue:v103 forProperty:@"install_verification_token"];
    }
    if (!v17)
    {
      int v17 = +[NSUUID UUID];
    }
    [v71 setValue:v17 forProperty:@"external_id"];
    if (v3)
    {
      id v105 = objc_getProperty(v21, v104, 72, 1);
      v107 = v105;
      if (v105) {
        id v105 = objc_getProperty(v105, v106, 40, 1);
      }
    }
    else
    {
      v107 = 0;
      id v105 = 0;
    }
    id v108 = v105;
    objc_setProperty_nonatomic_copy(v71, v109, v108, 48);

    id v110 = v71[6];
    v287 = v17;
    if (!v110)
    {
      v150 = 0;
      goto LABEL_194;
    }
    if (v3)
    {
      id v112 = objc_getProperty(v21, v111, 72, 1);
      v114 = v112;
      if (v112) {
        id v112 = objc_getProperty(v112, v113, 40, 1);
      }
    }
    else
    {
      v114 = 0;
      id v112 = 0;
    }
    id v115 = v112;
    v116 = sub_10026811C(v115, BAInitialRestrictionsEssentialDownloadAllowance);

    if (!v116) {
      goto LABEL_187;
    }
    id v117 = sub_10026E91C(v71, @"client_type");
    id v118 = sub_10026E91C(v71, @"restore_type");
    if (sub_1003F1E7C((uint64_t)AppDefaultsManager, @"BackgroundAssetDownloadsEnabled", (id)1))
    {
      if (v117 == (id)1)
      {
        v119 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        {
          v120 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v120;
          v121 = "[%@] Not configuring progress for post-processing because the client is MDM";
LABEL_185:
          _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, v121, buf, 0xCu);
        }
      }
      else
      {
        if (!sub_10026E91C(v71, @"automatic_type"))
        {
          if (!v118)
          {
            id v188 = [v116 longLongValue];
            goto LABEL_188;
          }
          v119 = ASDLogHandleForCategory();
          if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_186;
          }
          v120 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v120;
          v121 = "[%@] Not configuring progress for post-processing because it is a restore";
          goto LABEL_185;
        }
        v119 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        {
          v120 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v120;
          v121 = "[%@] Not configuring progress for post-processing because it is an automatic install";
          goto LABEL_185;
        }
      }
    }
    else
    {
      v119 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
      {
        v120 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v120;
        v121 = "[%@] Not configuring progress for post-processing because the BA feature is disabled";
        goto LABEL_185;
      }
    }
LABEL_186:

LABEL_187:
    id v188 = 0;
LABEL_188:
    v190 = [ProgressPortions alloc];
    if (v288)
    {
      id v191 = objc_getProperty(v21, v189, 72, 1);
      v193 = v191;
      if (v191) {
        id v191 = objc_getProperty(v191, v192, 48, 1);
      }
    }
    else
    {
      v193 = 0;
      id v191 = 0;
    }
    id v194 = v191;
    sub_100336518(v190, (uint64_t)[v194 longLongValue], (uint64_t)v188);
    v196 = v195;

    v150 = v196;
    v197 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
    {
      v198 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v198;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v150;
      _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_DEFAULT, "[%@] ProgressPortions have been created: %{public}@", buf, 0x16u);
    }
    id v21 = self;
LABEL_194:
    v154 = sub_1003147E0([AppInstallImportAndPolicyTask alloc], v71);
    v200 = [*(id *)(*(void *)(a1 + 32) + 56) coordinator];
    if (v154) {
      objc_setProperty_atomic(v154, v199, v200, 64);
    }

    v202 = [*(id *)(*(void *)(a1 + 32) + 56) requestToken];
    if (v154) {
      objc_setProperty_atomic(v154, v201, v202, 88);
    }

    if ([*(id *)(*(void *)(a1 + 32) + 56) suppressEvaluatorDialogs]) {
      unsigned __int8 v203 = 1;
    }
    else {
      unsigned __int8 v203 = [*(id *)(*(void *)(a1 + 32) + 56) suppressDialogs];
    }
    if (v154)
    {
      v154[48] = v203;
      v154[49] = [*(id *)(*(void *)(a1 + 32) + 56) isDiscretionary] ^ 1;
    }
    else
    {
      [*(id *)(*(void *)(a1 + 32) + 56) isDiscretionary];
    }
    newValue[0] = _NSConcreteStackBlock;
    newValue[1] = 3221225472;
    newValue[2] = sub_100253FC0;
    newValue[3] = &unk_100523B38;
    v205 = v71;
    uint64_t v206 = *(void *)(a1 + 48);
    v207 = *(void **)(a1 + 32);
    v291 = v205;
    v292 = v207;
    uint64_t v293 = v206;
    v281 = v150;
    if (v154)
    {
      objc_setProperty_atomic_copy(v154, v204, newValue, 80);
      objc_setProperty_atomic(v154, v208, v150, 96);
      [*(id *)(a1 + 32) runSubTask:v154 returningError:0];
      int v209 = 1;
      id v211 = objc_getProperty(v154, v210, 104, 1);
      id v212 = v211;
      if (v211)
      {
        uint64_t v213 = *((void *)v211 + 4);
        if (v213)
        {
          if (v213 != 1)
          {
            if (v213 == 2)
            {
              v214 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
              {
                v262 = sub_100424C14(v205);
                id v264 = objc_getProperty(v212, v263, 16, 1);
                *(_DWORD *)long long buf = 138412546;
                *(void *)&uint8_t buf[4] = v262;
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v264;
                _os_log_error_impl((void *)&_mh_execute_header, v214, OS_LOG_TYPE_ERROR, "[%@] Purchase import failed: %{public}@", buf, 0x16u);
              }
              v215 = *(void **)(a1 + 40);
              v217 = (id *)objc_getProperty(v212, v216, 24, 1);
              v219 = v217;
              if (v217)
              {
                *(void *)long long buf = 0;
                *(void *)&uint8_t buf[8] = 0;
                [v217 getUUIDBytes:buf];
                uint64_t v220 = *(void *)buf;
              }
              else
              {
                uint64_t v220 = 0;
              }
              if (v288) {
                id v221 = objc_getProperty(self, v218, 96, 1);
              }
              else {
                id v221 = 0;
              }
              id v222 = v221;
              v223 = +[ASDJobResult resultWithInvalidActivity:v220 bundleID:v222];
              [v215 addObject:v223];

              id v21 = self;
              goto LABEL_255;
            }
LABEL_245:
            if ([*(id *)(*(void *)(a1 + 32) + 56) isDiscretionary])
            {
LABEL_256:

              v186 = v291;
              v153 = v284;
LABEL_257:

              int v17 = v287;
              goto LABEL_258;
            }
            v252 = [ProgressInfo alloc];
            if (v288) {
              id v253 = objc_getProperty(v21, v251, 96, 1);
            }
            else {
              id v253 = 0;
            }
            id v254 = v253;
            v255 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
            v219 = sub_10041F328((id *)&v252->super.isa, v254, v281, v255);

            unsigned __int8 v256 = [*(id *)(*(void *)(a1 + 32) + 56) isRemoteInstall];
            if (v219) {
              *((unsigned char *)v219 + 64) = v256;
            }
            if (v288) {
              id v258 = objc_getProperty(v21, v257, 208, 1);
            }
            else {
              id v258 = 0;
            }
            id v259 = v258;
            v261 = v259;
            if (v219)
            {
              objc_setProperty_atomic(v219, v260, v259, 152);

              v219[18] = (id)384;
            }
            else
            {
            }
            sub_100388088();
            id v222 = (id)objc_claimAutoreleasedReturnValue();
            sub_100388208((uint64_t)v222, v219, @"Purchase");
LABEL_255:

            v150 = v281;
            goto LABEL_256;
          }
          v231 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
          {
            v232 = sub_100424C14(v205);
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v232;
            _os_log_impl((void *)&_mh_execute_header, v231, OS_LOG_TYPE_DEFAULT, "[%@] Purchase import succeeded (duplicate)", buf, 0xCu);
          }
          v233 = *(void **)(a1 + 40);
          id v235 = objc_getProperty(v212, v234, 24, 1);
          v237 = v235;
          if (v235)
          {
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = 0;
            [v235 getUUIDBytes:buf];
            uint64_t v238 = *(void *)buf;
          }
          else
          {
            uint64_t v238 = 0;
          }
          if (v288) {
            id v239 = objc_getProperty(self, v236, 96, 1);
          }
          else {
            id v239 = 0;
          }
          id v240 = v239;
          v241 = +[ASDJobResult resultWithExistingActivity:v238 bundleID:v240];
          [v233 addObject:v241];
          id v4 = v282;
LABEL_244:

          id v21 = self;
          v150 = v281;
          goto LABEL_245;
        }
        int v209 = 0;
      }
    }
    else
    {
      [v207 runSubTask:0 returningError:0];
      id v212 = 0;
      int v209 = 1;
    }
    v224 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
    {
      v225 = sub_100424C14(v205);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v225;
      _os_log_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_DEFAULT, "[%@] Purchase import succeeded", buf, 0xCu);
    }
    uint64_t v226 = *(void *)(a1 + 32);
    v227 = v205;
    id v212 = v212;
    if (!v226)
    {
LABEL_238:

      v283 = *(void **)(a1 + 40);
      if (v209)
      {
        v237 = 0;
      }
      else
      {
        id v248 = objc_getProperty(v212, v247, 24, 1);
        v237 = v248;
        if (v248)
        {
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          [v248 getUUIDBytes:buf];
          uint64_t v249 = *(void *)buf;
LABEL_241:
          if (v288) {
            id v250 = objc_getProperty(self, v247, 96, 1);
          }
          else {
            id v250 = 0;
          }
          id v240 = v250;
          v241 = +[ASDJobResult resultWithValidActivity:v249 bundleID:v240];
          [v283 addObject:v241];
          goto LABEL_244;
        }
      }
      uint64_t v249 = 0;
      goto LABEL_241;
    }
    if ([*(id *)(v226 + 56) disableBoosting])
    {
      v229 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
      {
LABEL_237:

        goto LABEL_238;
      }
      sub_100424C14(v227);
      id v230 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v230;
      _os_log_debug_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_DEBUG, "[%@] Blocking voucher for purchase - boosting disabled", buf, 0xCu);
    }
    else
    {
      if (v209) {
        id v242 = 0;
      }
      else {
        id v242 = objc_getProperty(v212, v228, 24, 1);
      }
      v229 = v242;
      v243 = [*(id *)(v226 + 56) requestToken];
      v245 = v243;
      if (v243) {
        v243 = objc_getProperty(v243, v244, 64, 1);
      }
      id v230 = v243;

      if (v229 && v230)
      {
        v246 = sub_10025910C();
        sub_100259204(v246, v230, v229);
      }
    }

    goto LABEL_237;
  }
  id v90 = v89;
  uint64_t v91 = *(void *)v298;
LABEL_69:
  uint64_t v92 = 0;
  while (1)
  {
    if (*(void *)v298 != v91) {
      objc_enumerationMutation(v88);
    }
    v93 = [*(id *)(*((void *)&v297 + 1) + 8 * v92) valueForProperty:@"sinf"];
    v94 = v93;
    if (!v93 || ![v93 length]) {
      break;
    }

    if (v90 == (id)++v92)
    {
      id v90 = [v88 countByEnumeratingWithState:&v297 objects:v302 count:16];
      if (v90) {
        goto LABEL_69;
      }
      goto LABEL_76;
    }
  }

  uint64_t v122 = *(void *)(a1 + 32);
  id v21 = self;
  id v123 = self;
  id v4 = v282;
  id v3 = v288;
  if (v122)
  {
    v124 = sub_1002F8BC0((id *)[PresentTapToRadarRequestFlow alloc], @"Missing Required SINF", @"An unexpected installation failure occurred.");
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&buf[16] = sub_100254090;
    v306 = (id *)&unk_100523B88;
    v307 = (id *)v123;
    if (v124) {
      objc_setProperty_atomic_copy(v124, v125, buf, 24);
    }
    sub_1002F8C78((uint64_t)v124);
  }
  if (v71) {
    goto LABEL_78;
  }
LABEL_108:
  v126 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
  {
    v127 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v127;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v284;
    _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "[%@]: Dropping invalid purchase: %{public}@", buf, 0x16u);
  }
  v129 = *(void **)(a1 + 40);
  if (v17)
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    [v17 getUUIDBytes:buf];
    uint64_t v130 = *(void *)buf;
    if (v3)
    {
LABEL_112:
      id v131 = objc_getProperty(v21, v128, 96, 1);
      v132 = +[ASDJobResult resultWithInvalidActivity:v130 bundleID:v131];
      [v129 addObject:v132];

      id v21 = self;
      id v134 = objc_getProperty(self, v133, 120, 1);
      goto LABEL_113;
    }
  }
  else
  {
    uint64_t v130 = 0;
    if (v3) {
      goto LABEL_112;
    }
  }
  v278 = +[ASDJobResult resultWithInvalidActivity:v130 bundleID:0];
  [v129 addObject:v278];

  id v134 = 0;
LABEL_113:
  id v135 = v134;

  if (v135)
  {
    v136 = objc_opt_new();
    v137 = [*(id *)(*(void *)(a1 + 32) + 56) account];
    v138 = objc_msgSend(v137, "ams_DSID");
    [v136 setObject:v138 forKeyedSubscript:@"account_id"];

    if (v3)
    {
      id v140 = objc_getProperty(v21, v139, 208, 1);
      [v136 setObject:v140 forKeyedSubscript:@"item_id"];

      id v142 = objc_getProperty(v21, v141, 120, 1);
    }
    else
    {
      [v136 setObject:0 forKeyedSubscript:@"item_id"];
      id v142 = 0;
    }
    id v143 = v142;
    [v136 setObject:v143 forKeyedSubscript:@"request_url"];

    if (v3) {
      id v145 = objc_getProperty(v21, v144, 304, 1);
    }
    else {
      id v145 = 0;
    }
    id v146 = v145;
    [v136 setObject:v146 forKeyedSubscript:@"transaction_id"];

    v147 = sub_1003E0BA4();
    v295[0] = _NSConcreteStackBlock;
    v295[1] = 3221225472;
    v295[2] = sub_100253F04;
    v295[3] = &unk_1005236D0;
    id v296 = v136;
    id v148 = v136;
    [v147 modifyUsingTransaction:v295];
  }
  uint64_t v149 = [*(id *)(*(void *)(a1 + 32) + 56) coordinator];
  v150 = (void *)v149;
  if (v149)
  {
    v287 = v17;
    if (sub_100278F0C(v149) != 1)
    {
      v153 = v284;
      v154 = v284;
LABEL_178:
      id v294 = 0;
      unsigned __int8 v185 = [v150 cancelForReason:v154 client:1 error:&v294];
      v186 = (id *)v294;
      if ((v185 & 1) == 0)
      {
        v187 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
        {
          [*(id *)(*(void *)(a1 + 32) + 56) logKey];
          v267 = v266 = v150;
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v267;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v266;
          *(_WORD *)&buf[22] = 2114;
          v306 = v186;
          _os_log_error_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_ERROR, "[%@]: Canceling redundant coordinator: %{public}@ failed with error: %{public}@", buf, 0x20u);

          v150 = v266;
        }
      }
      goto LABEL_257;
    }
    v151 = [v284 domain];
    unsigned int v152 = [v151 isEqualToString:IXUserPresentableErrorDomain];

    if (v152) {
      [v284 code];
    }
    IXCreateUserPresentableError();
    v154 = (unsigned char *)objc_claimAutoreleasedReturnValue();
    if ((v280 & 1) == 0)
    {
      if (!ASDErrorIsEqual())
      {
        char v167 = 0;
        goto LABEL_169;
      }
      v166 = +[AppCapabilitiesService defaultService];
      [v166 showIneligibleAlert];
    }
    char v167 = 1;
LABEL_169:
    if (v3) {
      id v180 = objc_getProperty(v21, v165, 216, 1);
    }
    else {
      id v180 = 0;
    }
    id v181 = v180;
    if (!v181) {
      char v167 = 1;
    }

    if (v167)
    {
      v153 = v284;
    }
    else
    {
      if (v3) {
        id v183 = objc_getProperty(v21, v182, 216, 1);
      }
      else {
        id v183 = 0;
      }
      v153 = v284;
      id v184 = v183;
      [v154 code];
      IXDisplayUserPresentableErrorForAppWithLocalizedName();
    }
    goto LABEL_178;
  }
  v153 = v284;
LABEL_258:
}

BOOL sub_100253F04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [AppDoneEntity alloc];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [v3 connection];
  id v7 = [(SQLiteEntity *)v4 initWithPropertyValues:v5 onConnection:v6];

  if (v7)
  {
    if (v3)
    {
      id v9 = objc_getProperty(v3, v8, 24, 1);
      if (v9) {
        v9[137] = 1;
      }
    }
    else
    {
      id v9 = 0;
    }
  }
  return v7 != 0;
}

id sub_100253FC0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = sub_100424C88(*(void **)(a1 + 32));
    id v7 = sub_1003D4DF8((uint64_t)v6);

    if (v7)
    {
      sub_1003D4ECC((uint64_t)v5, v7);
      if (!sub_1003DA2A4((uint64_t)v7)) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      }
    }
  }
  if ([*(id *)(*(void *)(a1 + 40) + 56) discoveredUpdate]
    && [*(id *)(*(void *)(a1 + 40) + 56) isDiscretionary])
  {
    sub_1003D5150((uint64_t)v5, 1);
  }
  return v5;
}

id sub_100254090(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 96, 1);
  }
  id v5 = Property;
  id v6 = *(id *)(a1 + 32);
  if (v6) {
    id v6 = objc_getProperty(v6, v4, 208, 1);
  }
  id v8 = v6;
  id v9 = *(id *)(a1 + 32);
  if (v9) {
    id v9 = objc_getProperty(v9, v7, 144, 1);
  }
  id v10 = v9;
  id v11 = +[NSString stringWithFormat:@"\n\nBundle ID: %@\nItem ID: %@\nExternal Version: %@\n", v5, v8, v10];

  return v11;
}

void sub_10025415C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      id v9 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
      int v11 = 138412546;
      id v12 = v9;
      __int16 v13 = 2114;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@]: Failed to queue remote installation to paired device: %{public}@", (uint8_t *)&v11, 0x16u);
LABEL_6:
    }
  }
  else if (v8)
  {
    id v9 = [*(id *)(*(void *)(a1 + 32) + 56) logKey];
    id v10 = [v5 firstObject];
    int v11 = 138412546;
    id v12 = v9;
    __int16 v13 = 2114;
    id v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@]: Queued remote installation on paired device: %{public}@", (uint8_t *)&v11, 0x16u);

    goto LABEL_6;
  }
}

id *sub_10025433C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)IAPInfoItemsRequest;
    BOOL v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_1002543E8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!a1) {
    goto LABEL_35;
  }
  id Property = *(id *)(a1 + 16);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 8, 1);
  }
  id v6 = Property;
  id v7 = objc_msgSend(v6, "ams_DSID");

  if (!v7)
  {
    unsigned int v18 = sub_1001F5FCC(4, 0);
    v4[2](v4, 0, v18);

    goto LABEL_35;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  id v47 = 0;
  id v9 = sub_10030B9EC(v8, @"iap-daap/base-url", &v47);
  id v10 = v47;
  int v11 = v10;
  if (!v9)
  {
    id v14 = v10;
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  id v46 = v11;
  __int16 v13 = sub_10030BE3C(v12, @"iap-daap/database-id", &off_10054BCB8, &v46);
  id v14 = v46;

  if (!v13)
  {

    goto LABEL_12;
  }
  id v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"databases/%ld/items", [v13 integerValue]);
  id v16 = [v9 URLByAppendingPathComponent:v15];

  if (!v16)
  {
LABEL_12:
    uint64_t v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v42 = objc_opt_class();
      *(_DWORD *)long long buf = 138412546;
      uint64_t v49 = v42;
      __int16 v50 = 2114;
      id v51 = v14;
      id v43 = v42;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%@]: Failed to construct request URL error: %{public}@", buf, 0x16u);
    }
    sub_1001F5FCC(2, (uint64_t)v14);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    id v16 = 0;
    goto LABEL_15;
  }
  id v17 = 0;
LABEL_15:

  id v20 = v17;
  if (v16)
  {
    uint64_t v22 = [IAPInfoDAAPRequestEncoder alloc];
    id v23 = *(id *)(a1 + 16);
    if (v23) {
      id v23 = objc_getProperty(v23, v21, 32, 1);
    }
    id v25 = v23;
    id v26 = *(id *)(a1 + 16);
    if (v26) {
      id v26 = objc_getProperty(v26, v24, 40, 1);
    }
    id v27 = v26;
    id v28 = sub_100308CB4((id *)&v22->super.isa, v25, v27);

    id v30 = sub_1003869E4((id *)[DAAPURLRequest alloc], v28, v16);
    id v31 = *(id *)(a1 + 16);
    if (v31) {
      id v31 = objc_getProperty(v31, v29, 8, 1);
    }
    id v33 = v31;
    if (v30) {
      objc_setProperty_atomic(v30, v32, v33, 24);
    }

    id v35 = *(id *)(a1 + 16);
    if (v35) {
      id v35 = objc_getProperty(v35, v34, 16, 1);
    }
    id v37 = v35;
    if (v30) {
      objc_setProperty_atomic(v30, v36, v37, 40);
    }

    id v39 = *(id *)(a1 + 16);
    if (v39) {
      id v39 = objc_getProperty(v39, v38, 24, 1);
    }
    id v41 = v39;
    if (v30) {
      objc_setProperty_atomic(v30, v40, v41, 48);
    }

    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_100254824;
    v44[3] = &unk_100523BB0;
    v44[4] = a1;
    BOOL v45 = v4;
    sub_100386A80((uint64_t)v30, v44);
  }
  else
  {
    id v28 = sub_1001F5FCC(2, (uint64_t)v20);
    v4[2](v4, 0, v28);
  }

LABEL_35:
}

void sub_100254824(uint64_t a1, void *a2, void *a3)
{
  id v30 = a2;
  id v5 = a3;
  uint64_t v6 = (uint64_t)v30;
  if (!v30)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = (uint64_t)v5;
    goto LABEL_5;
  }
  if ((char *)[v30 responseStatusCode] - 300 <= (char *)0xFFFFFFFFFFFFFF9BLL)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = 1;
    uint64_t v8 = 0;
LABEL_5:
    id v9 = sub_1001F5FCC(v6, v8);
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v9);
    goto LABEL_24;
  }
  id v10 = [v30 data];
  id v9 = v10;
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if (!v11)
    {
LABEL_11:
      uint64_t v15 = *(void *)(a1 + 40);
LABEL_22:
      id v29 = sub_1001F5FCC(0, 0);
      (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v29);

      id v17 = 0;
      goto LABEL_23;
    }
    id v12 = v10;
    __int16 v13 = sub_100369BF0([IAPInfoDAAPResponseDecoder alloc], v12);

    if (!v13 || (v13[49] & 1) == 0)
    {

      goto LABEL_11;
    }
    char v18 = v13[50];
    id v20 = objc_getProperty(v13, v14, 64, 1);
    if (v18)
    {
      id v22 = objc_getProperty(v13, v19, 72, 1);
      id v24 = objc_getProperty(v13, v25, 56, 1);
      id Property = *(id *)(v11 + 16);
      if (Property) {
        id Property = objc_getProperty(Property, v26, 8, 1);
      }
      id v28 = Property;
      id v17 = sub_100222F18((uint64_t)IAPInfoItemsRequestResponse, v20, v22, v24, v28);
    }
    else
    {
      id v22 = objc_getProperty(v13, v19, 56, 1);
      id v23 = *(id *)(v11 + 16);
      if (v23) {
        id v23 = objc_getProperty(v23, v21, 8, 1);
      }
      id v24 = v23;
      id v17 = sub_100222D98((uint64_t)IAPInfoItemsRequestResponse, v20, v22, v24);
    }

    uint64_t v15 = *(void *)(a1 + 40);
    if (!v17) {
      goto LABEL_22;
    }
    (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v17, 0);
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 40);
    id v17 = sub_1001F5FCC(0, 0);
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v17);
  }
LABEL_23:

LABEL_24:
}

void sub_100254BF0(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (a2)
  {
    if (a2 == 13001)
    {
      id v4 = &stru_100523C30;
      int64_t v5 = 13002;
    }
    else
    {
      if (a2 != 13000) {
        return;
      }
      id v4 = &stru_100523C10;
      int64_t v5 = 13001;
    }
  }
  else
  {
    id v4 = &stru_100523BF0;
    int64_t v5 = 13003;
  }
  *a3 = v5;
  id v6 = *a4;
  *a4 = v4;
}

void sub_100254C4C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS iap_info_iaps (adam_id INTEGER, app_adam_id INTEGER, purchase_date DATETIME, last_modified_date DATETIME, expiration_date DATETIME, type INTEGER, dsid INTEGER, pid INTEGER PRIMARY KEY, intro_offer_status INTEGER, sub_family_id TEXT, auto_renew_status INTEGER, UNIQUE(dsid, adam_id) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS iap_info_db_properties (key TEXT PRIMARY KEY, value TEXT)", 1, 0);
  }
}

void sub_100254CBC(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE iap_info_iaps ADD COLUMN auto_renew_status INTEGER;", 1, 0);
  }
}

uint64_t sub_100254DF0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v9 = a2;
  id v10 = a3;
  id v34 = a4;
  id v32 = a5;
  uint64_t v31 = self;
  uint64_t v11 = objc_opt_new();
  id v12 = objc_opt_new();
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v13 = v9;
  id v14 = [v13 countByEnumeratingWithState:&v53 objects:v57 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v54;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v54 != v15) {
          objc_enumerationMutation(v13);
        }
        id v17 = *(void **)(*((void *)&v53 + 1) + 8 * i);
        char v18 = [v17 bundleID];

        if (v18)
        {
          uint64_t v19 = [v17 bundleID];
          [v11 addObject:v19];

          id v20 = [v17 itemID];
          id v21 = [v17 bundleID];
          [v12 setObject:v20 forKeyedSubscript:v21];
        }
        [v17 setBatchLogKey:v10];
        [v17 updateGeneratedProperties];
      }
      id v14 = [v13 countByEnumeratingWithState:&v53 objects:v57 count:16];
    }
    while (v14);
  }

  id v22 = sub_10001A308();
  sub_1002E8858((BOOL)v22, 3, v11, v10);

  uint64_t v47 = 0;
  id v48 = &v47;
  uint64_t v49 = 0x3032000000;
  __int16 v50 = sub_100017F58;
  id v51 = sub_100017B68;
  id v52 = 0;
  uint64_t v43 = 0;
  id v44 = &v43;
  uint64_t v45 = 0x2020000000;
  uint64_t v46 = 0;
  dispatch_semaphore_t v23 = dispatch_semaphore_create(0);
  id v24 = sub_100213454();
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_1002551C8;
  v35[3] = &unk_100523C58;
  id v40 = &v43;
  id v25 = v10;
  id v36 = v25;
  uint64_t v42 = v31;
  id v26 = v12;
  id v37 = v26;
  id v27 = v32;
  id v38 = v27;
  id v41 = &v47;
  id v28 = v23;
  id v39 = v28;
  sub_100213C58((uint64_t)v24, v13, v34, v35);

  dispatch_semaphore_wait(v28, 0xFFFFFFFFFFFFFFFFLL);
  if (a6) {
    *a6 = (id) v48[5];
  }
  uint64_t v29 = v44[3];

  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);

  return v29;
}

void sub_10025519C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1002551C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v41 = v5;
  id obj = [v5 items];
  id v44 = [obj countByEnumeratingWithState:&v54 objects:v59 count:16];
  if (v44)
  {
    uint64_t v43 = *(void *)v55;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v55 != v43) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v54 + 1) + 8 * (void)v7);
        id v9 = [v8 results];
        if ([v9 count])
        {
          uint64_t v46 = v7;
          uint64_t v47 = v6;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          uint64_t v45 = v9;
          id v10 = v9;
          id v11 = [v10 countByEnumeratingWithState:&v50 objects:v58 count:16];
          if (!v11) {
            goto LABEL_39;
          }
          id v12 = v11;
          uint64_t v13 = *(void *)v51;
          id v49 = v10;
          while (1)
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(void *)v51 != v13) {
                objc_enumerationMutation(v10);
              }
              uint64_t v15 = *(void **)(*((void *)&v50 + 1) + 8 * i);
              id v16 = [v15 status];
              if (v16)
              {
                if (v16 == (id)1)
                {
                  id v17 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v29 = *(void *)(a1 + 32);
                    id v30 = [v15 bundleID];
                    uint64_t v31 = [v15 error];
                    *(_DWORD *)long long buf = 138412802;
                    *(void *)&uint8_t buf[4] = v29;
                    __int16 v61 = 2114;
                    id v62 = v30;
                    __int16 v63 = 2114;
                    uint64_t v64 = v31;
                    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[%@] Import failed for bundleID: %{public}@ error: %{public}@", buf, 0x20u);
LABEL_27:
                  }
                }
                else
                {
                  if (v16 != (id)2) {
                    continue;
                  }
                  ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
                  id v17 = [v15 bundleID];
                  char v18 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v19 = *(void *)(a1 + 32);
                    id v20 = [v15 persistentID];
                    *(_DWORD *)long long buf = 138412802;
                    *(void *)&uint8_t buf[4] = v19;
                    __int16 v61 = 2114;
                    id v62 = v20;
                    __int16 v63 = 2114;
                    uint64_t v64 = v17;
                    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%@] Import success for job: %{public}@ / %{public}@", buf, 0x20u);
                  }
                  if (v17)
                  {
                    id v21 = [*(id *)(a1 + 40) objectForKeyedSubscript:v17];
                    id v22 = *(void **)(a1 + 32);
                    id v17 = v17;
                    id v23 = v21;
                    id v24 = v22;
                    self;
                    if (v23
                      && +[UpdatesManager isTVProviderApp:](UpdatesManager, "isTVProviderApp:", [v23 integerValue]))
                    {
                      id v25 = sub_100005660();
                      id v26 = v23;
                      id v27 = v25;
                      self;
                      if (v27)
                      {
                        if ([v27 containsObject:v26])
                        {
                          id v28 = v27;
                        }
                        else
                        {
                          id v28 = [v27 arrayByAddingObject:v26];
                        }
                      }
                      else
                      {
                        *(void *)long long buf = v26;
                        id v28 = +[NSArray arrayWithObjects:buf count:1];
                      }
                      id v33 = v28;

                      id v34 = [v27 count];
                      if (v34 != [v33 count])
                      {
                        id v35 = ASDLogHandleForCategory();
                        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                        {
                          id v48 = [v33 componentsJoinedByString:@", "];
                          *(_DWORD *)long long buf = 138412802;
                          *(void *)&uint8_t buf[4] = v24;
                          __int16 v61 = 2114;
                          id v62 = v17;
                          __int16 v63 = 2114;
                          uint64_t v64 = v48;
                          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "[%@] Added : %{public}@ to previously provisioned apps: [%{public}@]", buf, 0x20u);
                        }
                        sub_1003F4498((uint64_t)AppDefaultsManager, v33);
                      }
                    }
                    id v10 = v49;
                  }
                }
              }
              else
              {
                ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
                id v17 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v32 = *(void *)(a1 + 32);
                  id v30 = [v15 persistentID];
                  uint64_t v31 = [v15 bundleID];
                  *(_DWORD *)long long buf = 138412802;
                  *(void *)&uint8_t buf[4] = v32;
                  __int16 v61 = 2114;
                  id v62 = v30;
                  __int16 v63 = 2114;
                  uint64_t v64 = v31;
                  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Skipped duplicate job: %{public}@ / %{public}@", buf, 0x20u);
                  goto LABEL_27;
                }
              }
            }
            id v12 = [v10 countByEnumeratingWithState:&v50 objects:v58 count:16];
            if (!v12)
            {
LABEL_39:

              id v36 = *(void **)(a1 + 48);
              if (v36) {
                [v36 addObjectsFromArray:v10];
              }
              uint64_t v7 = v46;
              id v6 = v47;
              id v9 = v45;
              if (v47) {
                goto LABEL_42;
              }
              goto LABEL_43;
            }
          }
        }
        if (!v6)
        {
          id v6 = [v8 error];
        }
        id v37 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = *(void *)(a1 + 32);
          id v39 = [v8 bundleID];
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v38;
          __int16 v61 = 2114;
          id v62 = v39;
          __int16 v63 = 2114;
          uint64_t v64 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "[%@] Purchase failed for bundleID: %{public}@ error: %{public}@", buf, 0x20u);
        }
        if (v6) {
LABEL_42:
        }
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v6);
LABEL_43:

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v7 != v44);
      id v40 = [obj countByEnumeratingWithState:&v54 objects:v59 count:16];
      id v44 = v40;
    }
    while (v40);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

uint64_t sub_100255884(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 56))
    {
      id v2 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        id v3 = [*(id *)(v1 + 64) logKey];
        int v4 = *(_DWORD *)(v1 + 56);
        int v5 = 138412546;
        id v6 = v3;
        __int16 v7 = 1024;
        int v8 = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%@] Releasing power assertion: %d", (uint8_t *)&v5, 0x12u);
      }
      uint64_t result = IOPMAssertionRelease(*(_DWORD *)(v1 + 56));
      *(_DWORD *)(v1 + 56) = 0;
    }
  }
  return result;
}

void sub_100256A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_100256A90(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100256B3C;
  v5[3] = &unk_100523C80;
  id v6 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v7 = v4;
  if (a2)
  {
    sub_1004203C0(a2, 0, v5);
    id v4 = v7;
  }
}

void sub_100256B3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 bundleID];
  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:v4];

  [*(id *)(a1 + 40) addObject:v4];
}

void sub_100256BAC(uint64_t a1, id a2)
{
  id v3 = sub_100401CE4(a2, *(void **)(a1 + 32));
  if (v3)
  {
    id v7 = v3;
    uint64_t v4 = sub_1002C1EE8(v3);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v7 persistentID];
    id v3 = v7;
  }
}

uint64_t sub_100256C44(uint64_t a1, uint64_t a2)
{
  return 1;
}

void sub_100256C74(uint64_t a1, void *a2, void *a3)
{
  id v69 = a2;
  id v60 = a3;
  sub_100392748(v60, 5uLL);
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v66 = [obj countByEnumeratingWithState:&v82 objects:v92 count:16];
  if (!v66)
  {

    id v4 = 0;
    goto LABEL_54;
  }
  id v4 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = *(void *)v83;
  do
  {
    uint64_t v5 = 0;
    do
    {
      if (*(void *)v83 != v64)
      {
        uint64_t v6 = v5;
        objc_enumerationMutation(obj);
        uint64_t v5 = v6;
      }
      id v7 = *(void **)(*((void *)&v82 + 1) + 8 * v5);
      uint64_t v68 = v5;
      if (!v4)
      {
        uint64_t v16 = *(void *)(a1 + 32);
        id v67 = v7;
        id v17 = v69;
        id v62 = v17;
        if (v16)
        {
          if ([v17 isEqualToNumber:&off_10054BCD0])
          {
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            long long v70 = v67;
            uint64_t v18 = 0;
            id v19 = [v70 countByEnumeratingWithState:&v87 objects:location count:16];
            if (v19)
            {
              uint64_t v71 = *(void *)v88;
              do
              {
                for (i = 0; i != v19; i = (char *)i + 1)
                {
                  if (*(void *)v88 != v71) {
                    objc_enumerationMutation(v70);
                  }
                  uint64_t v93 = *(void *)(*((void *)&v87 + 1) + 8 * i);
                  id v21 = +[NSArray arrayWithObjects:&v93 count:1];
                  id v22 = [(id)v16 context];
                  id v23 = [v22 logKey];
                  [*(id *)(v16 + 64) isBackgroundRequest];
                  id v24 = [*(id *)(v16 + 64) requestToken];
                  id v25 = *(void **)(v16 + 48);
                  id v86 = 0;
                  uint64_t v26 = sub_100254DF0((uint64_t)PerformUpdatesTask, v21, v23, v24, v25, &v86);
                  id v27 = v86;

                  if (v27)
                  {
                    id v28 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v29 = [(id)v16 context];
                      id v30 = [v29 logKey];
                      *(_DWORD *)long long buf = 138412802;
                      *(void *)&uint8_t buf[4] = v30;
                      *(_WORD *)&unsigned char buf[12] = 2114;
                      *(void *)&buf[14] = v69;
                      *(_WORD *)&buf[22] = 2114;
                      id v101 = v27;
                      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "[%@] Error performing purchase for account: %{public}@ error: %{public}@", buf, 0x20u);
                    }
                  }
                  sub_100257A08((id *)v16);

                  v18 += v26;
                }
                id v19 = [v70 countByEnumeratingWithState:&v87 objects:location count:16];
              }
              while (v19);
            }
            id v31 = 0;
            goto LABEL_36;
          }
          uint64_t v32 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            id v33 = [(id)v16 context];
            id v34 = [v33 logKey];
            id v35 = [v67 count];
            *(_DWORD *)location = 138412802;
            *(void *)&location[4] = v34;
            *(_WORD *)&location[12] = 2048;
            *(void *)&location[14] = v35;
            *(_WORD *)&location[22] = 2114;
            uint64_t v95 = v69;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[%@] Performing %lu purchase(s) for account: %{public}@", location, 0x20u);
          }
          id v36 = [(id)v16 context];
          id v37 = [v36 logKey];
          [*(id *)(v16 + 64) isBackgroundRequest];
          uint64_t v38 = [*(id *)(v16 + 64) requestToken];
          id v39 = *(void **)(v16 + 48);
          *(void *)&long long v87 = 0;
          uint64_t v18 = sub_100254DF0((uint64_t)PerformUpdatesTask, v67, v37, v38, v39, &v87);
          id v31 = (id)v87;

          if (v31)
          {
            long long v70 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              id v41 = [(id)v16 context];
              uint64_t v42 = [v41 logKey];
              *(_DWORD *)location = 138412802;
              *(void *)&location[4] = v42;
              *(_WORD *)&location[12] = 2114;
              *(void *)&location[14] = v69;
              *(_WORD *)&location[22] = 2114;
              uint64_t v95 = v31;
              _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "[%@] Error performing purchases for account: %{public}@ error: %{public}@", location, 0x20u);
            }
LABEL_36:
          }
          id v40 = v31;
          sub_100257A08((id *)v16);
        }
        else
        {
          id v40 = 0;
          uint64_t v18 = 0;
        }

        id v4 = v40;
        v63 += v18;
        goto LABEL_39;
      }
      int v8 = sub_1002AFCAC((id *)[PurchaseBatch alloc], v7, 0);
      objc_initWeak((id *)location, *(id *)(a1 + 32));
      newValue[0] = _NSConcreteStackBlock;
      newValue[1] = 3221225472;
      newValue[2] = sub_100257914;
      newValue[3] = &unk_100523D20;
      objc_copyWeak(&v81, (id *)location);
      if (v8) {
        objc_setProperty_atomic_copy(v8, v9, newValue, 32);
      }
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      id v10 = v7;
      id v11 = [v10 countByEnumeratingWithState:&v76 objects:v91 count:16];
      if (v11)
      {
        uint64_t v12 = *(void *)v77;
        do
        {
          for (j = 0; j != v11; j = (char *)j + 1)
          {
            if (*(void *)v77 != v12) {
              objc_enumerationMutation(v10);
            }
            id v14 = *(void **)(*((void *)&v76 + 1) + 8 * (void)j);
            uint64_t v15 = sub_100213454();
            v72[0] = _NSConcreteStackBlock;
            v72[1] = 3221225472;
            v72[2] = sub_1002579F8;
            v72[3] = &unk_1005212D8;
            v73 = v8;
            id v74 = v4;
            uint32_t v75 = v14;
            sub_1002149D8((uint64_t)v15, v74, v14, v72);
          }
          id v11 = [v10 countByEnumeratingWithState:&v76 objects:v91 count:16];
        }
        while (v11);
      }

      objc_destroyWeak(&v81);
      objc_destroyWeak((id *)location);

LABEL_39:
      uint64_t v5 = v68 + 1;
    }
    while ((id)(v68 + 1) != v66);
    id v43 = [obj countByEnumeratingWithState:&v82 objects:v92 count:16];
    id v66 = v43;
  }
  while (v43);

  if (v63)
  {
    id v44 = *(id **)(a1 + 32);
    if (v44)
    {
      if (([v44[8] isBackgroundRequest] & 1) == 0)
      {
        uint64_t v45 = sub_100259888((uint64_t)NetworkMonitor, @"com.apple.AppStore");
        if ([v45 isExpensiveOrCellular])
        {
          id v46 = +[NSMutableArray array];
          uint64_t v47 = sub_100354F64();
          id v48 = sub_1003553B0(v47);

          if (v48)
          {
            id v49 = +[ASDCellularSettings settingsForIdentity:v48];
            if ([v49 cellularDataPrompt] == (id)1 || objc_msgSend(v48, "isRoaming"))
            {
              *(void *)&long long v87 = 0;
              *((void *)&v87 + 1) = &v87;
              long long v88 = 0x2020000000uLL;
              long long v50 = sub_1003E0BA4();
              *(void *)location = _NSConcreteStackBlock;
              *(void *)&location[8] = 3221225472;
              *(void *)&location[16] = sub_100257A80;
              uint64_t v95 = &unk_100523D98;
              v98 = &v87;
              int v96 = v44;
              v97 = v46;
              [v50 readUsingSession:location];

              long long v51 = sub_1003DE26C((uint64_t)CellularDataPromptDialogRequest, *(void *)(*((void *)&v87 + 1) + 24), 0, (int)[v48 isRoaming]);

              goto LABEL_51;
            }
            if (![v49 cellularDataPrompt])
            {
              *(void *)&long long v87 = 0;
              *((void *)&v87 + 1) = &v87;
              *(void *)&long long v88 = 0x2020000000;
              BYTE8(v88) = 0;
              long long v55 = sub_10030B11C();
              long long v56 = +[AMSNetworkConstraints networkConstraintsForMediaType:@"software" withBag:v55];
              long long v57 = [v56 resultWithError:0];

              id v58 = [v57 sizeLimitForNetworkType:AMSNetworkTypeCellular];
              id v59 = sub_1003E0BA4();
              *(void *)location = _NSConcreteStackBlock;
              *(void *)&location[8] = 3221225472;
              *(void *)&location[16] = sub_100257E2C;
              uint64_t v95 = &unk_100523DE8;
              id v99 = v58;
              v98 = &v87;
              int v96 = v44;
              v97 = v46;
              [v59 readUsingSession:location];

              if (*(unsigned char *)(*((void *)&v87 + 1) + 24))
              {
                long long v51 = sub_1003DE26C((uint64_t)CellularDataPromptDialogRequest, (unint64_t)v58, 1, (int)[v48 isRoaming]);
              }
              else
              {
                long long v51 = 0;
              }

LABEL_51:
              _Block_object_dispose(&v87, 8);
              if (v51)
              {
                *(void *)&long long v87 = _NSConcreteStackBlock;
                *((void *)&v87 + 1) = 3221225472;
                *(void *)&long long v88 = sub_1002581E8;
                *((void *)&v88 + 1) = &unk_1005236A8;
                *(void *)&long long v89 = v46;
                sub_10033CE18((uint64_t)InteractiveRequestPresenter, v51, &v87);
              }
            }
          }
LABEL_60:
        }
        else if ([v45 isConstrained])
        {
          long long v52 = +[NSMutableArray array];
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000;
          id v101 = 0;
          long long v53 = sub_1003E0BA4();
          *(void *)location = _NSConcreteStackBlock;
          *(void *)&location[8] = 3221225472;
          *(void *)&location[16] = sub_100258530;
          uint64_t v95 = &unk_100523E38;
          v97 = buf;
          id v46 = v52;
          int v96 = (id *)v46;
          [v53 readUsingSession:location];

          long long v54 = sub_1003A69F4((uint64_t)LowDataModePromptDialogRequest, *(void *)(*(void *)&buf[8] + 24));
          *(void *)&long long v87 = _NSConcreteStackBlock;
          *((void *)&v87 + 1) = 3221225472;
          *(void *)&long long v88 = sub_1002588A0;
          *((void *)&v88 + 1) = &unk_1005236A8;
          *(void *)&long long v89 = v44;
          sub_10033CE18((uint64_t)InteractiveRequestPresenter, v54, &v87);

          _Block_object_dispose(buf, 8);
          goto LABEL_60;
        }
      }
    }
  }
LABEL_54:
}

void sub_1002578B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_100257914(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v4 = [WeakRetained context];
    uint64_t v5 = [v4 logKey];
    int v6 = 138412290;
    id v7 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[%@] Finished failing purchase batch", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1002579F8(uint64_t a1)
{
}

id *sub_100257A08(id *result)
{
  if (*((_DWORD *)result + 14))
  {
    uint64_t v1 = result;
    uint64_t result = (id *)[result[8] isBackgroundRequest];
    if ((result & 1) == 0)
    {
      IOPMAssertionID v2 = *((_DWORD *)v1 + 14);
      return (id *)IOPMAssertionSetProperty(v2, @"TimeoutSeconds", &off_10054BCE8);
    }
  }
  return result;
}

void sub_100257A80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054BD00];
  v19[0] = v4;
  uint64_t v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToValue:&off_10054BD18];
  v19[1] = v5;
  int v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_type" equalToValue:&off_10054BD30];
  void v19[2] = v6;
  id v7 = +[NSArray arrayWithObjects:v19 count:3];
  int v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  id v9 = [v3 connection];
  id v10 = sub_1002FF548((uint64_t)AppInstallEntity, v9, v8);

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100257C74;
  v15[3] = &unk_100523D70;
  uint64_t v11 = *(void *)(a1 + 32);
  id v16 = v3;
  uint64_t v17 = v11;
  long long v14 = *(_OWORD *)(a1 + 40);
  id v12 = (id)v14;
  long long v18 = v14;
  id v13 = v3;
  [v10 enumeratePersistentIDsUsingBlock:v15];
}

void sub_100257C74(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  int v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v7 = sub_1003B6884(v6);
  int v8 = v7;
  if (v7) {
    unint64_t bytes = v7->_bytes;
  }
  else {
    unint64_t bytes = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += bytes;
  id v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = [*(id *)(a1 + 40) context];
    id v13 = [v11 logKey];
    if (v8) {
      id Property = objc_getProperty(v8, v12, 32, 1);
    }
    else {
      id Property = 0;
    }
    id v15 = Property;
    int v18 = 138412546;
    id v19 = v13;
    __int16 v20 = 2114;
    id v21 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Showing cellular prompt for 'update all'", (uint8_t *)&v18, 0x16u);
  }
  id v16 = *(void **)(a1 + 48);
  uint64_t v17 = +[NSNumber numberWithLongLong:a2];
  [v16 addObject:v17];
}

void sub_100257E2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054BD00];
  v20[0] = v4;
  uint64_t v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToValue:&off_10054BD18];
  v20[1] = v5;
  int v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_type" equalToValue:&off_10054BD30];
  v20[2] = v6;
  id v7 = +[NSArray arrayWithObjects:v20 count:3];
  int v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  id v9 = [v3 connection];
  id v10 = sub_1002FF548((uint64_t)AppInstallEntity, v9, v8);

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100258028;
  v15[3] = &unk_100523DC0;
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 32);
  id v16 = v3;
  uint64_t v17 = v11;
  long long v14 = *(_OWORD *)(a1 + 40);
  id v12 = (id)v14;
  long long v18 = v14;
  id v13 = v3;
  [v10 enumeratePersistentIDsUsingBlock:v15];
}

void sub_100258028(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  int v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v7 = sub_1003B6884(v6);
  int v8 = v7;
  if (v7) {
    unint64_t bytes = v7->_bytes;
  }
  else {
    unint64_t bytes = 0;
  }
  if (bytes >= *(void *)(a1 + 64))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = [*(id *)(a1 + 40) context];
      id v13 = [v11 logKey];
      if (v8) {
        id Property = objc_getProperty(v8, v12, 32, 1);
      }
      else {
        id Property = 0;
      }
      id v15 = Property;
      int v18 = 138412546;
      uint64_t v19 = v13;
      __int16 v20 = 2114;
      id v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Showing cellular prompt for 'update all'", (uint8_t *)&v18, 0x16u);
    }
    id v16 = *(void **)(a1 + 48);
    uint64_t v17 = +[NSNumber numberWithLongLong:a2];
    [v16 addObject:v17];
  }
}

void sub_1002581E8(uint64_t a1, void *a2)
{
  id v3 = [a2 selectedActionIdentifier];
  unsigned int v4 = [v3 isEqualToString:@"CelularDataPromptActionDownloadNow"];

  if (v4)
  {
    uint64_t v5 = sub_1003E0BA4();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002582BC;
    v6[3] = &unk_1005236D0;
    id v7 = *(id *)(a1 + 32);
    [v5 modifyUsingTransaction:v6];
  }
}

uint64_t sub_1002582BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"ROWID" values:*(void *)(a1 + 32)];
  uint64_t v5 = [v3 connection];
  int v6 = sub_1002FF548((uint64_t)AppInstallEntity, v5, v4);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002583F8;
  v11[3] = &unk_100523780;
  id v12 = v3;
  id v7 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v11];
  if (v7)
  {
    id v9 = objc_getProperty(v7, v8, 24, 1);
    if (v9) {
      v9[16] |= 0x1000uLL;
    }
  }
  else
  {
    id v9 = 0;
  }

  return 1;
}

void sub_1002583F8(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  int v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  sub_1002C2130(v6);
  id v7 = (id *)objc_claimAutoreleasedReturnValue();
  sub_1003D4D3C((uint64_t)v7, 1);
  sub_1003D4B04((uint64_t)v7, 62);
  sub_1002C21C0(v6, v7);
  int v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = sub_1002C1EE8(v6);
    int v10 = 138412290;
    uint64_t v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Allowing download over cellular for 'update all'", (uint8_t *)&v10, 0xCu);
  }
}

void sub_100258530(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054BD00];
  v17[0] = v4;
  uint64_t v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToValue:&off_10054BD18];
  v17[1] = v5;
  int v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_type" equalToValue:&off_10054BD30];
  v17[2] = v6;
  id v7 = +[NSArray arrayWithObjects:v17 count:3];
  int v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  id v9 = [v3 connection];
  int v10 = sub_1002FF548((uint64_t)AppInstallEntity, v9, v8);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100258720;
  v14[3] = &unk_100523E10;
  id v15 = v3;
  long long v13 = *(_OWORD *)(a1 + 32);
  id v11 = (id)v13;
  long long v16 = v13;
  id v12 = v3;
  [v10 enumeratePersistentIDsUsingBlock:v14];
}

void sub_100258720(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  int v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v7 = sub_1003B6884(v6);
  int v8 = v7;
  if (v7) {
    unint64_t bytes = v7->_bytes;
  }
  else {
    unint64_t bytes = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += bytes;
  int v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (v8) {
      id Property = objc_getProperty(v8, v11, 32, 1);
    }
    else {
      id Property = 0;
    }
    id v13 = Property;
    int v16 = 138412290;
    id v17 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Showing low data prompt for 'update all'", (uint8_t *)&v16, 0xCu);
  }
  long long v14 = *(void **)(a1 + 40);
  id v15 = +[NSNumber numberWithLongLong:a2];
  [v14 addObject:v15];
}

void sub_1002588A0(uint64_t a1, void *a2)
{
  id v3 = [a2 selectedActionIdentifier];
  unsigned int v4 = [v3 isEqualToString:@"LowDataModePromptActionDownload"];

  uint64_t v5 = sub_1003E0BA4();
  id v6 = v5;
  if (v4)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10025899C;
    v7[3] = &unk_1005236D0;
    v7[4] = *(void *)(a1 + 32);
    [v5 modifyUsingTransaction:v7];
  }
  else
  {
    [v5 modifyUsingTransaction:&stru_100523E78];
  }
}

uint64_t sub_10025899C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054BD00];
  v19[0] = v4;
  uint64_t v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToValue:&off_10054BD18];
  v19[1] = v5;
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_type" equalToValue:&off_10054BD30];
  void v19[2] = v6;
  id v7 = +[NSArray arrayWithObjects:v19 count:3];
  int v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  id v9 = [v3 connection];
  int v10 = sub_1002FF548((uint64_t)AppInstallEntity, v9, v8);

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100258BB0;
  v16[3] = &unk_100522A90;
  uint64_t v11 = *(void *)(a1 + 32);
  id v17 = v3;
  uint64_t v18 = v11;
  id v12 = v3;
  [v10 enumeratePersistentIDsUsingBlock:v16];
  if (v12)
  {
    long long v14 = objc_getProperty(v12, v13, 24, 1);
    if (v14) {
      v14[16] |= 0x1000uLL;
    }
  }
  else
  {
    long long v14 = 0;
  }

  return 1;
}

void sub_100258BB0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  sub_1002C2130(v6);
  id v7 = (id *)objc_claimAutoreleasedReturnValue();
  sub_1003D4C80((uint64_t)v7, 1);
  sub_1002C21C0(v6, v7);
  int v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = [*(id *)(a1 + 40) context];
    int v10 = [v9 logKey];
    uint64_t v11 = sub_1002C1EE8(v6);
    int v12 = 138412546;
    id v13 = v10;
    __int16 v14 = 2114;
    id v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Allowing download over low data for 'update all'", (uint8_t *)&v12, 0x16u);
  }
}

BOOL sub_100258D14(id a1, AppInstallsDatabaseTransaction *a2)
{
  IOPMAssertionID v2 = a2;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054BD00];
  v13[0] = v3;
  unsigned int v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_type" equalToValue:&off_10054BD30];
  v13[1] = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:v13 count:2];
  id v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];

  id v7 = [(AppInstallsDatabaseSession *)v2 connection];
  int v8 = sub_1002FF548((uint64_t)AppInstallEntity, v7, v6);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100258EB4;
  v11[3] = &unk_100523780;
  int v12 = v2;
  id v9 = v2;
  [v8 enumeratePersistentIDsUsingBlock:v11];

  return 1;
}

void sub_100258EB4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  int v10 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 24, 1);
  }
  id v8 = Property;
  id v9 = sub_1002C2FA4(v10, -30);
  sub_100286124((uint64_t)v8, v9);
}

id sub_10025910C()
{
  self;
  if (qword_1005B0BC8 != -1) {
    dispatch_once(&qword_1005B0BC8, &stru_100523EE0);
  }
  id v0 = (void *)qword_1005B0BD0;
  return v0;
}

void sub_100259164(id a1)
{
  uint64_t v1 = objc_alloc_init(VoucherStore);
  IOPMAssertionID v2 = (void *)qword_1005B0BD0;
  qword_1005B0BD0 = (uint64_t)v1;
}

void sub_100259204(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 138412546;
      id v10 = v6;
      __int16 v11 = 2112;
      id v12 = v5;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "(VoucherStore) Inserting voucher externalID: %@, Voucher %@", (uint8_t *)&v9, 0x16u);
    }

    id v8 = a1;
    objc_sync_enter(v8);
    [v8[1] setObject:v5 forKeyedSubscript:v6];
    objc_sync_exit(v8);
  }
}

void sub_10025930C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100259328(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    unsigned int v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "(VoucherStore) Removing voucher for externalID: %@", (uint8_t *)&v6, 0xCu);
    }

    id v5 = a1;
    objc_sync_enter(v5);
    [v5[1] setObject:0 forKeyedSubscript:v3];
    objc_sync_exit(v5);
  }
}

void sub_100259414(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100259430(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    int v9 = a1;
    objc_sync_enter(v9);
    id v10 = [v9[1] objectForKeyedSubscript:v7];
    objc_sync_exit(v9);

    __int16 v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412802;
      id v15 = v7;
      __int16 v16 = 1024;
      int v17 = a3;
      __int16 v18 = 2112;
      uint64_t v19 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "(VoucherStore) Executing block for externalID: %@, QOS(0x%x) Voucher %@", buf, 0x1Cu);
    }

    id v13 = v8;
    id v12 = (void (**)(void))dispatch_block_create_with_voucher_and_qos_class();
    v12[2]();
  }
}

void sub_1002595DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002595F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100259614()
{
  self;
  if (qword_1005B0BE0 != -1) {
    dispatch_once(&qword_1005B0BE0, &stru_100523F00);
  }
  id v0 = (void *)qword_1005B0BD8;
  return v0;
}

void sub_10025966C(id a1)
{
  uint64_t v1 = [NetworkMonitor alloc];
  IOPMAssertionID v2 = +[NWPathEvaluator sharedDefaultEvaluator];
  id v10 = v2;
  if (v1)
  {
    v14.receiver = v1;
    v14.super_class = (Class)NetworkMonitor;
    uint64_t v1 = objc_msgSendSuper2(&v14, "init");
    if (v1)
    {
      id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      unsigned int v4 = dispatch_get_global_queue(17, 0);
      dispatch_queue_t v5 = dispatch_queue_create_with_target_V2("com.apple.appstored.NetworkMonitor", v3, v4);
      dispatchQueue = v1->_dispatchQueue;
      v1->_dispatchQueue = (OS_dispatch_queue *)v5;

      objc_storeStrong((id *)&v1->_pathEvaluator, v2);
      [(NWPathEvaluator *)v1->_pathEvaluator addObserver:v1 forKeyPath:@"path" options:5 context:0];
      if (os_variant_has_internal_content())
      {
        objc_initWeak(&location, v1);
        id v7 = dispatch_get_global_queue(21, 0);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_10025990C;
        handler[3] = &unk_100523F28;
        objc_copyWeak(&v12, &location);
        notify_register_dispatch("com.apple.appstored.emulatenetwork", &v1->_emulationToken, v7, handler);

        id v8 = sub_1002C4494();
        sub_100259974((uint64_t)v1, v8);

        objc_destroyWeak(&v12);
        objc_destroyWeak(&location);
      }
    }
  }

  int v9 = (void *)qword_1005B0BD8;
  qword_1005B0BD8 = (uint64_t)v1;
}

void sub_100259868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100259888(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2 && [v2 length])
  {
    uint64_t v3 = (uint64_t)sub_100316C44((unint64_t *)[AppNetworkMonitor alloc], v2);
  }
  else
  {
    uint64_t v3 = sub_100259614();
  }
  unsigned int v4 = (void *)v3;

  return v4;
}

void sub_10025990C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = sub_1002C4494();
  sub_100259974((uint64_t)WeakRetained, v1);
}

void sub_100259974(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (a1)
  {
    dispatch_queue_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10025A32C;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_100259B30(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 36);
  return result;
}

uint64_t sub_100259BF0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 37);
  if (*(void *)(*(void *)(result + 32) + 24))
  {
    uint64_t v1 = result;
    uint64_t result = os_variant_has_internal_content();
    if (result)
    {
      uint64_t v2 = *(void *)(*(void *)(v1 + 32) + 24);
      if (v2) {
        LOBYTE(v2) = *(unsigned char *)(v2 + 8) & 1;
      }
      *(unsigned char *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = v2;
    }
  }
  return result;
}

uint64_t sub_100259D08(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 38);
  if (*(void *)(*(void *)(result + 32) + 24))
  {
    uint64_t v1 = result;
    uint64_t result = os_variant_has_internal_content();
    if (result)
    {
      uint64_t v2 = *(void *)(*(void *)(v1 + 32) + 24);
      if (v2) {
        LOBYTE(v2) = *(unsigned char *)(v2 + 9) & 1;
      }
      *(unsigned char *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = v2;
    }
  }
  return result;
}

uint64_t sub_100259E20(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (*(unsigned char *)(v2 + 38)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(void *)(v2 + 40) == 2;
  }
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v3;
  if (*(void *)(*(void *)(result + 32) + 24))
  {
    uint64_t result = os_variant_has_internal_content();
    if (result)
    {
      uint64_t v4 = *(void *)(*(void *)(v1 + 32) + 24);
      if (v4) {
        LOBYTE(v4) = (*(unsigned char *)(v4 + 9) & 1) != 0 || *(void *)(v4 + 16) == 2;
      }
      *(unsigned char *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = v4;
    }
  }
  return result;
}

uint64_t sub_100259F68(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 40);
  if (*(void *)(*(void *)(result + 32) + 24))
  {
    uint64_t v1 = result;
    uint64_t result = os_variant_has_internal_content();
    if (result)
    {
      uint64_t v2 = *(void *)(*(void *)(v1 + 32) + 24);
      if (v2) {
        uint64_t v2 = *(void *)(v2 + 16);
      }
      *(void *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = v2;
    }
  }
  return result;
}

void sub_10025A0AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v15 = [*(id *)(v1 + 16) path];
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 8));
    uint64_t v2 = sub_10025A550((unsigned __int8 *)v1);
    if (((unint64_t)[v15 status] | 2) == 3)
    {
      *(unsigned char *)(v1 + 36) = 1;
      *(unsigned char *)(v1 + 38) = [v15 isExpensive];
      *(unsigned char *)(v1 + 37) = [v15 isConstrained];
      uint64_t v3 = sub_1002DEA74(v15);
    }
    else
    {
      uint64_t v3 = 0;
      *(_WORD *)(v1 + 36) = 0;
      *(unsigned char *)(v1 + 38) = 0;
    }
    *(void *)(v1 + 40) = v3;
    uint64_t v4 = sub_10025A550((unsigned __int8 *)v1);
    unsigned int v5 = [v2 isEqual:v4];
    char v6 = v5;
    int v7 = v5 ^ 1;
    int v8 = *(unsigned __int8 *)(v1 + 36);
    int v9 = ASDLogHandleForCategory();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        int v11 = *(unsigned __int8 *)(v1 + 38);
        int v12 = *(unsigned __int8 *)(v1 + 37);
        unint64_t v13 = *(void *)(v1 + 40);
        if (v13 >= 5) {
          objc_super v14 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"unknown (%ld)", v13);
        }
        else {
          objc_super v14 = off_100523F50[v13];
        }
        *(_DWORD *)long long buf = 67109890;
        int v17 = v11;
        __int16 v18 = 1024;
        int v19 = v12;
        __int16 v20 = 2114;
        id v21 = v14;
        __int16 v22 = 1024;
        int v23 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[Network] Network available (expensive = %{BOOL}d, constrained = %{BOOL}d, interface = %{public}@, significant = %{BOOL}d)", buf, 0x1Eu);
      }
    }
    else if (v10)
    {
      *(_DWORD *)long long buf = 67109120;
      int v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[Network] Network unavailable (significant = %{BOOL}d)", buf, 8u);
    }

    if ((v6 & 1) == 0) {
      sub_10025A458(v1);
    }
  }
}

void sub_10025A32C(uint64_t a1)
{
  if (os_variant_has_internal_content())
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(id *)(a1 + 40);
    uint64_t v4 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = 0;
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 24);
  int v7 = ASDLogHandleForCategory();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 24);
      int v13 = 138543362;
      uint64_t v14 = v9;
      BOOL v10 = "[Network] Applying emulated network configuration: %{public}@";
      int v11 = v7;
      uint32_t v12 = 12;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v13, v12);
    }
  }
  else if (v8)
  {
    LOWORD(v13) = 0;
    BOOL v10 = "[Network] Clearing emulated network configuration";
    int v11 = v7;
    uint32_t v12 = 2;
    goto LABEL_9;
  }

  sub_10025A458(*(void *)(a1 + 32));
}

void sub_10025A458(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = dispatch_get_global_queue(17, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025A4F0;
    block[3] = &unk_100521388;
    block[4] = a1;
    dispatch_async(v2, block);
  }
}

void sub_10025A4F0(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"NetworkStateDidChangeNotification" object:*(void *)(a1 + 32)];
}

id sub_10025A550(unsigned __int8 *a1)
{
  uint64_t v1 = a1[36];
  id v2 = a1;
  id v3 = +[NSNumber numberWithBool:v1];
  v10[0] = v3;
  uint64_t v4 = +[NSNumber numberWithBool:v2[38]];
  v10[1] = v4;
  uint64_t v5 = +[NSNumber numberWithBool:v2[37]];
  v10[2] = v5;
  uint64_t v6 = *((void *)v2 + 5);

  int v7 = +[NSNumber numberWithInteger:v6];
  v10[3] = v7;
  BOOL v8 = +[NSArray arrayWithObjects:v10 count:4];

  return v8;
}

BOOL sub_10025A6C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  if (a1)
  {
    unsigned int v7 = [v5 processIdentifier];
    long long v21 = 0u;
    long long v22 = 0u;
    if (v5) {
      [v5 auditToken];
    }
    *(_OWORD *)token = v21;
    *(_OWORD *)&token[16] = v22;
    BOOL v8 = SecTaskCreateWithAuditToken(0, (audit_token_t *)token);
    if (v8)
    {
      uint64_t v9 = v8;
      CFErrorRef error = 0;
      CFTypeRef v10 = SecTaskCopyValueForEntitlement(v8, v6, &error);
      if (error && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        id v15 = objc_opt_class();
        *(_DWORD *)token = 138413058;
        *(void *)&token[4] = v15;
        *(_WORD *)&token[12] = 2112;
        *(void *)&token[14] = v6;
        *(_WORD *)&token[22] = 1024;
        *(_DWORD *)&token[24] = v7;
        *(_WORD *)&token[28] = 2112;
        *(void *)&token[30] = error;
        id v16 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "[%@]: Unable to get entitlements: %@ for pid: %i error: %@", token, 0x26u);

        if (v10) {
          goto LABEL_8;
        }
      }
      else if (v10)
      {
LABEL_8:
        CFTypeID TypeID = CFBooleanGetTypeID();
        BOOL v12 = TypeID == CFGetTypeID(v10) && CFBooleanGetValue((CFBooleanRef)v10) != 0;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = objc_opt_class();
          *(_DWORD *)token = 138413058;
          *(void *)&token[4] = v13;
          *(_WORD *)&token[12] = 2112;
          *(void *)&token[14] = v6;
          *(_WORD *)&token[22] = 1024;
          *(_DWORD *)&token[24] = v7;
          *(_WORD *)&token[28] = 1024;
          *(_DWORD *)&token[30] = v12;
          id v14 = v13;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[%@]: We have the entitlement: %@ for pid: %i result: %d", token, 0x22u);
        }
        CFRelease(v10);
        goto LABEL_19;
      }
      BOOL v12 = 0;
LABEL_19:
      CFRelease(v9);
      goto LABEL_20;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = objc_opt_class();
      *(_DWORD *)token = 138412802;
      *(void *)&token[4] = v18;
      *(_WORD *)&token[12] = 2112;
      *(void *)&token[14] = v6;
      *(_WORD *)&token[22] = 1024;
      *(_DWORD *)&token[24] = v7;
      id v19 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "[%@]: No task for entitlement: %@ pid: %i", token, 0x1Cu);
    }
  }
  BOOL v12 = 0;
LABEL_20:

  return v12;
}

BOOL sub_10025A984(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    unsigned int v7 = [v5 processIdentifier];
    long long v22 = 0u;
    long long v23 = 0u;
    if (v5) {
      [v5 auditToken];
    }
    *(_OWORD *)token = v22;
    *(_OWORD *)&token[16] = v23;
    BOOL v8 = SecTaskCreateWithAuditToken(0, (audit_token_t *)token);
    if (v8)
    {
      uint64_t v9 = v8;
      CFErrorRef error = 0;
      CFTypeRef v10 = (void *)SecTaskCopyValueForEntitlement(v8, @"com.apple.private.appstored", &error);
      if (error && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        id v16 = objc_opt_class();
        *(_DWORD *)token = 138413058;
        *(void *)&token[4] = v16;
        *(_WORD *)&token[12] = 2112;
        *(void *)&token[14] = v6;
        *(_WORD *)&token[22] = 1024;
        *(_DWORD *)&token[24] = v7;
        *(_WORD *)&token[28] = 2112;
        *(void *)&token[30] = error;
        id v17 = v16;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "[%@]: Unable to get entitlements: %@ for pid: %i error: %@", token, 0x26u);

        if (v10) {
          goto LABEL_8;
        }
      }
      else if (v10)
      {
LABEL_8:
        CFTypeID TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v10)) {
          unsigned int v12 = [v10 containsObject:v6];
        }
        else {
          unsigned int v12 = 0;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          id v14 = objc_opt_class();
          *(_DWORD *)token = 138413058;
          *(void *)&token[4] = v14;
          *(_WORD *)&token[12] = 2112;
          *(void *)&token[14] = v6;
          *(_WORD *)&token[22] = 1024;
          *(_DWORD *)&token[24] = v7;
          *(_WORD *)&token[28] = 1024;
          *(_DWORD *)&token[30] = v12;
          id v15 = v14;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "[%@]: Results for entitlement: %@ for pid: %i result: %d", token, 0x22u);
        }
        CFRelease(v10);
        goto LABEL_19;
      }
      unsigned int v12 = 0;
LABEL_19:
      CFRelease(v9);
      BOOL v13 = v12 != 0;
      goto LABEL_20;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      id v19 = objc_opt_class();
      *(_DWORD *)token = 138412802;
      *(void *)&token[4] = v19;
      *(_WORD *)&token[12] = 2112;
      *(void *)&token[14] = v6;
      *(_WORD *)&token[22] = 1024;
      *(_DWORD *)&token[24] = v7;
      id v20 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "[%@]: No task for entitlement: %@ pid: %i", token, 0x1Cu);
    }
  }
  BOOL v13 = 0;
LABEL_20:

  return v13;
}

void *sub_10025AC8C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [a1 init];
    a1 = v4;
    if (v4)
    {
      [v4 setValue:v3 forProperty:@"bundle_id"];
      id v5 = +[NSUUID UUID];
      id v6 = [v5 UUIDString];
      [a1 setValue:v6 forProperty:@"session_reporter_key"];

      unsigned int v7 = +[NSDate date];
      [a1 setValue:v7 forProperty:@"last_refresh"];
    }
  }

  return a1;
}

id sub_10025AE1C(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"bundle_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10025AE54(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"session_reporter_key");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10025AE8C(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"last_refresh"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v2 = v1;
    }
    else {
      id v2 = 0;
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

uint64_t sub_10025AF0C(void *a1)
{
  BOOL v1 = (BOOL)a1;
  if (a1)
  {
    id v2 = sub_10025AE8C(a1);

    if (v2)
    {
      id v3 = +[NSDate date];
      id v4 = [v3 dateByAddingTimeInterval:-2592000.0];

      id v5 = sub_10025AE8C((void *)v1);
      BOOL v1 = [v4 compare:v5] != (id)-1;
    }
    else
    {
      return 1;
    }
  }
  return v1;
}

PurchaseHistoryItemsRequestContext *sub_10025AFF8(uint64_t a1, void *a2, void *a3, int64_t a4, void *a5, void *a6, unint64_t a7)
{
  id v12 = a6;
  id v13 = a5;
  id v14 = a3;
  id v15 = a2;
  self;
  id v16 = [PurchaseHistoryItemsRequestContext alloc];
  id v17 = v15;
  id v18 = v14;
  id v19 = v13;
  id v20 = v12;
  if (v16)
  {
    v25.receiver = v16;
    v25.super_class = (Class)PurchaseHistoryItemsRequestContext;
    id v16 = (PurchaseHistoryItemsRequestContext *)objc_msgSendSuper2(&v25, "init");
    if (v16)
    {
      long long v21 = (NSArray *)[v17 copy];
      knownApps = v16->_knownApps;
      v16->_knownApps = v21;

      objc_storeStrong((id *)&v16->_revision, a3);
      v16->_accountID = a4;
      objc_storeStrong((id *)&v16->_requestingAccount, a5);
      objc_storeStrong((id *)&v16->_clientInfo, a6);
      v16->_purchaseHistoryContext = a7;
    }
  }

  return v16;
}

id sub_10025B19C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  self;
  id v40 = +[NSMutableArray array];
  if ([v4 count] != (id)2) {
    goto LABEL_43;
  }
  if (!a3)
  {
    sub_1002689B4(v4, @"os-version");
    id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  if (a3 != 1) {
    goto LABEL_43;
  }
  sub_1002689B4(v4, @"osVersion");
  id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!sub_100268934((BOOL)v4, @"osVersion"))
  {
LABEL_7:
    if (!v5) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }

  id v5 = &stru_10052E4D8;
LABEL_8:
  if (![(__CFString *)v5 length])
  {

    id v5 = 0;
  }
  id v6 = sub_100267F88(v4, @"devices");
  if (!v6)
  {
    id v6 = sub_100267F88(v4, @"targets");
    if (!v6)
    {
      uint64_t v7 = sub_1002689B4(v4, @"device");
      BOOL v8 = (void *)v7;
      if (v7)
      {
        uint64_t v49 = v7;
        id v6 = +[NSArray arrayWithObjects:&v49 count:1];
      }
      else
      {
        id v6 = 0;
      }
    }
  }
  uint64_t v38 = v6;
  id v39 = v4;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v9 = sub_1003B6494(v6);
  id v10 = [v9 countByEnumeratingWithState:&v43 objects:v48 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v44;
    id v13 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
    id v14 = BaseListener;
    id v15 = &off_10054A000;
    uint64_t v41 = *(void *)v44;
    do
    {
      id v16 = 0;
      id v42 = v11;
      do
      {
        if (*(void *)v44 != v12) {
          objc_enumerationMutation(v9);
        }
        id v17 = objc_msgSend(v13[464], "arrayWithObjects:", *(void *)(*((void *)&v43 + 1) + 8 * (void)v16), v5, 0, v38);
        id v18 = objc_alloc(&v14[5]);
        id v19 = v17;
        if (!v18) {
          goto LABEL_32;
        }
        id v20 = (objc_class *)v15[373];
        v47.receiver = v18;
        v47.super_class = v20;
        id v21 = objc_msgSendSuper2(&v47, "init");
        if (!v21) {
          goto LABEL_32;
        }
        id v22 = v21;
        if ([v19 count] == (id)1)
        {
          *((void *)v22 + 3) = 0;
        }
        else
        {
          if ([v19 count] != (id)2) {
            goto LABEL_28;
          }
          *((void *)v22 + 3) = 1;
        }
        id v23 = [v19 copy];
        id v24 = (void *)*((void *)v22 + 1);
        *((void *)v22 + 1) = v23;

LABEL_28:
        id v25 = [*((id *)v22 + 1) count];
        uint64_t v26 = *((void *)v22 + 3);
        if (v26 == 1)
        {
          if (v25 != (id)2) {
            goto LABEL_31;
          }
        }
        else if (v26 || v25 != (id)1)
        {
LABEL_31:

LABEL_32:
          id v22 = 0;
          goto LABEL_40;
        }
        id v27 = v5;
        id v28 = v14;
        uint64_t v29 = v13;
        id v30 = v27;
        id v31 = v9;
        uint64_t v32 = [*((id *)v22 + 1) objectAtIndexedSubscript:0];
        id v33 = [v32 lowercaseString];
        unsigned __int8 v34 = [v33 isEqualToString:@"universal"];

        if (v34)
        {
          id v14 = v28;
          uint64_t v35 = sub_10025B5F8();

          id v22 = (id)v35;
          id v13 = v29;
          if (!v35) {
            goto LABEL_39;
          }
        }
        else
        {

          id v13 = v29;
          id v14 = v28;
        }
        [v40 addObject:v22];
LABEL_39:
        uint64_t v9 = v31;
        id v5 = v30;
        uint64_t v12 = v41;
        id v11 = v42;
        id v15 = &off_10054A000;
LABEL_40:

        id v16 = (char *)v16 + 1;
      }
      while (v11 != v16);
      id v11 = [v9 countByEnumeratingWithState:&v43 objects:v48 count:16];
    }
    while (v11);
  }

  id v4 = v39;
LABEL_43:
  id v36 = [v40 copy];

  return v36;
}

id *sub_10025B598(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_10025B634((id *)[VariantDescriptor alloc], v2);

  return v3;
}

VariantDescriptor *sub_10025B5F8()
{
  self;
  id v0 = objc_alloc_init(VariantDescriptor);
  v0->_universal = 1;
  return v0;
}

id *sub_10025B634(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)VariantDescriptor;
    a1 = (id *)objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      id v4 = [v3 componentsSeparatedByString:@":"];
      if ([v4 count] == (id)1)
      {
        a1[3] = 0;
        id v5 = v4;
      }
      else
      {
        if ((unint64_t)[v4 count] < 2
          || ([v4 objectAtIndexedSubscript:0],
              id v6 = objc_claimAutoreleasedReturnValue(),
              a1[3] = [v6 integerValue],
              v6,
              a1[3] != (id)1))
        {
LABEL_9:
          id v8 = [a1[1] count];
          id v9 = a1[3];
          if (v9 == (id)1)
          {
            if (v8 != (id)2)
            {
LABEL_12:
              uint64_t v10 = 0;
              goto LABEL_13;
            }
          }
          else if (v9 || v8 != (id)1)
          {
            goto LABEL_12;
          }
          uint64_t v12 = [a1[1] objectAtIndexedSubscript:0];
          id v13 = [v12 lowercaseString];
          unsigned int v14 = [v13 isEqualToString:@"universal"];

          if (!v14) {
            goto LABEL_14;
          }
          uint64_t v10 = sub_10025B5F8();
LABEL_13:

          a1 = (id *)v10;
LABEL_14:

          goto LABEL_15;
        }
        objc_msgSend(v4, "subarrayWithRange:", 1, (char *)objc_msgSend(v4, "count") - 1);
        id v5 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v7 = a1[1];
      a1[1] = v5;

      goto LABEL_9;
    }
  }
LABEL_15:

  return a1;
}

void *sub_10025B7C4(id *a1)
{
  BOOL v1 = a1;
  if (a1)
  {
    id v2 = [a1[1] count];
    uint64_t v3 = v1[3];
    if (v3 != 1)
    {
      if (!v3 && v2 == (id)1) {
        goto LABEL_5;
      }
      goto LABEL_12;
    }
    if (v2 != (id)2)
    {
LABEL_12:
      BOOL v1 = 0;
      goto LABEL_13;
    }
    id v4 = sub_10025B900((uint64_t)v1);
    if (!v4 || v4[1] || v4[2])
    {
    }
    else
    {
      uint64_t v10 = v4[3];

      if (!v10)
      {
LABEL_5:
        BOOL v1 = sub_10025B984((uint64_t)v1, 0, 0);
        goto LABEL_13;
      }
    }
    uint64_t v5 = v1[3];
    id v6 = sub_10025B984((uint64_t)v1, 0, 0);
    id v7 = sub_10025B900((uint64_t)v1);
    id v8 = -[OSVersion description]_0(v7);
    BOOL v1 = +[NSString stringWithFormat:@"%ld:%@:%@", v5, v6, v8];
  }
LABEL_13:
  return v1;
}

id sub_10025B900(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    id v2 = sub_10025B984(a1, 1uLL, 1uLL);
    if (v2)
    {
      uint64_t v3 = (uint64_t)sub_10023F180((char *)[OSVersion alloc], (uint64_t)v2);
    }
    else
    {
      uint64_t v3 = sub_10023F118();
    }
    BOOL v1 = (void *)v3;
  }
  else
  {
    BOOL v1 = 0;
  }
  return v1;
}

id sub_10025B984(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 24) < a3 || (unint64_t)[*(id *)(a1 + 8) count] <= a2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = [*(id *)(a1 + 8) objectAtIndexedSubscript:a2];
  }
  return v5;
}

__CFString *sub_10025B9EC(__CFString *a1)
{
  if (a1)
  {
    if (LOBYTE(a1->data))
    {
      a1 = @"Universal";
    }
    else
    {
      sub_10025B984((uint64_t)a1, 0, 0);
      a1 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10025BA38(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = v2;
  uint64_t v4 = self;
  uint64_t v5 = sub_1003DA6D4();
  id v6 = sub_10025BB54(v4, v5, v3);

  return v6;
}

id sub_10025BAD8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  id v6 = sub_10025BB54((uint64_t)VariantDescriptor, v5, v4);

  return v6;
}

__CFString *sub_10025BB54(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  if (v5)
  {
    id v6 = [v5 count];
    id v7 = 0;
    if (v4 && v6)
    {
      id v37 = v5;
      id v8 = v5;
      id v38 = v4;
      id v9 = v4;
      self;
      uint64_t v10 = [OSVersion alloc];
      id v11 = [v9 productVersion];
      uint64_t v12 = sub_10023F180((char *)v10, (uint64_t)v11);

      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472;
      v51[2] = sub_10025C0BC;
      void v51[3] = &unk_100523F80;
      id v13 = v9;
      id v52 = v13;
      long long v53 = v12;
      unsigned int v14 = v12;
      objc_super v15 = sub_1003923F8(v8, v51);
      id v16 = [v15 sortedArrayUsingComparator:&stru_100523FC0];

      unsigned __int8 v34 = v8;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      id v17 = [v13 productVariants];
      id v35 = [v17 countByEnumeratingWithState:&v47 objects:v56 count:16];
      if (v35)
      {
        uint64_t v18 = *(void *)v48;
        id v36 = v16;
        uint64_t v33 = *(void *)v48;
        do
        {
          for (i = 0; i != v35; i = (char *)i + 1)
          {
            if (*(void *)v48 != v18) {
              objc_enumerationMutation(v17);
            }
            uint64_t v20 = *(void *)(*((void *)&v47 + 1) + 8 * i);
            long long v43 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            id v21 = objc_msgSend(v16, "reverseObjectEnumerator", v33, v34);
            id v22 = [v21 countByEnumeratingWithState:&v43 objects:v55 count:16];
            if (v22)
            {
              id v23 = v22;
              uint64_t v24 = *(void *)v44;
              while (2)
              {
                for (j = 0; j != v23; j = (char *)j + 1)
                {
                  if (*(void *)v44 != v24) {
                    objc_enumerationMutation(v21);
                  }
                  uint64_t v26 = *(__CFString **)(*((void *)&v43 + 1) + 8 * (void)j);
                  id v27 = sub_10025B9EC(v26);
                  unsigned __int8 v28 = [v27 isEqualToString:v20];

                  if (v28)
                  {
                    id v7 = v26;

                    id v16 = v36;
                    goto LABEL_32;
                  }
                }
                id v23 = [v21 countByEnumeratingWithState:&v43 objects:v55 count:16];
                if (v23) {
                  continue;
                }
                break;
              }
            }

            id v16 = v36;
            uint64_t v18 = v33;
          }
          id v35 = [v17 countByEnumeratingWithState:&v47 objects:v56 count:16];
        }
        while (v35);
      }

      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      id v17 = v34;
      id v7 = (__CFString *)[v17 countByEnumeratingWithState:&v39 objects:v54 count:16];
      if (v7)
      {
        uint64_t v29 = *(void *)v40;
        while (2)
        {
          for (k = 0; k != v7; k = (__CFString *)((char *)k + 1))
          {
            if (*(void *)v40 != v29) {
              objc_enumerationMutation(v17);
            }
            id v31 = *(unsigned char **)(*((void *)&v39 + 1) + 8 * (void)k);
            if (v31 && (v31[16] & 1) != 0)
            {
              id v7 = v31;
              goto LABEL_32;
            }
          }
          id v7 = (__CFString *)[v17 countByEnumeratingWithState:&v39 objects:v54 count:16];
          if (v7) {
            continue;
          }
          break;
        }
      }
LABEL_32:

      id v5 = v37;
      id v4 = v38;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

uint64_t sub_10025BF24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3[16] == *(unsigned __int8 *)(a1 + 16) && *((void *)v3 + 3) == *(void *)(a1 + 24))
    {
      id v5 = (void *)*((void *)v3 + 1);
      if (v5 == *(void **)(a1 + 8)) {
        a1 = 1;
      }
      else {
        a1 = (uint64_t)objc_msgSend(v5, "isEqual:");
      }
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

__CFString *sub_10025C0BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) productVariants];
  id v5 = sub_10025B9EC(v3);
  unsigned int v6 = [v4 containsObject:v5];

  if (v6)
  {
    id v7 = sub_10025B900((uint64_t)v3);
    uint64_t v8 = sub_10023F360((uint64_t)v7, *(void **)(a1 + 40));

    if (v8 == 1) {
      id v9 = 0;
    }
    else {
      id v9 = v3;
    }
  }
  else
  {
    id v9 = 0;
  }
  uint64_t v10 = v9;

  return v10;
}

int64_t sub_10025C170(id a1, VariantDescriptor *a2, VariantDescriptor *a3)
{
  id v4 = a3;
  id v5 = sub_10025B900((uint64_t)a2);
  unsigned int v6 = sub_10025B900((uint64_t)v4);

  int64_t v7 = sub_10023F360((uint64_t)v5, v6);
  return v7;
}

id sub_10025C1EC(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    CC_SHA256([v1 bytes], (CC_LONG)objc_msgSend(v1, "length"), md);
    id v2 = +[NSMutableString stringWithCapacity:64];
    for (uint64_t i = 0; i != 32; ++i)
      objc_msgSend(v2, "appendFormat:", @"%02x", md[i]);
    id v4 = [v2 copy];
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_10025C2E4(void *a1)
{
  if (a1)
  {
    id v1 = sub_10025C1EC(a1);
    if ((unint64_t)[v1 length] <= 8)
    {
      id v2 = v1;
    }
    else
    {
      id v2 = [v1 substringToIndex:8];
    }
    id v3 = v2;
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id sub_10025C358(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = (Bytef *)[v1 bytes];
    id v3 = [v1 length];
    id v4 = 0;
    if (v2)
    {
      id v5 = v3;
      if (v3)
      {
        memset(&v10.avail_in, 0, 104);
        v10.avail_in = v3;
        v10.avail_out = v3;
        v10.next_in = v2;
        id v6 = [objc_alloc((Class)NSMutableData) initWithLength:v3];
        v10.next_out = (Bytef *)objc_msgSend(v6, "mutableBytes", v10.next_in, *(void *)&v10.avail_in);
        if (v6
          && !deflateInit2_(&v10, -1, 8, 31, 8, 0, "1.2.12", 112)
          && (int v7 = deflate(&v10, 4), v8 = deflateEnd(&v10), v7 == 1))
        {
          id v4 = 0;
          if (!v8 && v5 == (id)v10.total_in)
          {
            [v6 setLength:v10.total_out];
            id v4 = v6;
          }
        }
        else
        {
          id v4 = 0;
        }
      }
    }
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id *sub_10025C4E0(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    int v8 = [a1 init];
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 4, a3);
      id v9 = objc_alloc_init(TaskQueue);
      id v10 = a1[5];
      a1[5] = v9;
    }
  }

  return a1;
}

void sub_10025C6EC(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 16);
    id v4 = a2;
    os_unfair_lock_lock_with_options();
    id v5 = [v4 copy];

    id v6 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v5;

    os_unfair_lock_unlock(v3);
  }
}

id *sub_10025D64C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)ContentRestoreTask;
    int v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 5, a3);
      objc_storeStrong(a1 + 6, a2);
    }
  }

  return a1;
}

void *sub_10025E59C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)SQLiteConnection;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[7];
      a1[7] = v4;

      uint64_t v6 = +[NSMapTable strongToStrongObjectsMapTable];
      id v7 = (void *)a1[4];
      a1[4] = v6;
    }
  }

  return a1;
}

uint64_t sub_10025E72C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 16))
    {
      sub_10025EB9C((sqlite3_stmt *)result);
      if (sqlite3_close(*(sqlite3 **)(v1 + 16)))
      {
        return 0;
      }
      else
      {
        id v2 = *(void **)(v1 + 8);
        *(void *)(v1 + 8) = 0;

        *(void *)(v1 + 16) = 0;
        *(void *)(v1 + 40) = 0;
        uint64_t result = 1;
        *(unsigned char *)(v1 + 48) = 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_10025E79C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v9 = v3;
    if (*(void *)(a1 + 40))
    {
      if (!*(void *)(a1 + 8))
      {
        id v4 = objc_alloc_init((Class)NSMutableArray);
        id v5 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v4;
      }
      id v6 = [v9 copy];
      id v7 = *(void **)(a1 + 8);
      id v8 = objc_retainBlock(v6);
      [v7 addObject:v8];
    }
    else
    {
      v3[2](v3);
    }
    id v3 = (void (**)(void))v9;
  }
}

uint64_t sub_10025E854(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = +[NSUUID UUID];
    id v5 = [v4 UUIDString];
    id v6 = [v5 stringByReplacingOccurrencesOfString:@"-" withString:&stru_10052E4D8];
    id v7 = +[NSString stringWithFormat:@"SP_%@", v6];

    id v8 = +[NSString stringWithFormat:@"SAVEPOINT %@", v7];
    LODWORD(v5) = sub_100012004(a1, v8, 0, 0);

    if (v5)
    {
      if (v3[2](v3))
      {
        id v9 = +[NSString stringWithFormat:@"RELEASE SAVEPOINT %@", v7];
        a1 = sub_100012004(a1, v9, 0, 0);

LABEL_7:
        goto LABEL_8;
      }
      objc_super v10 = +[NSString stringWithFormat:@"ROLLBACK TRANSACTION TO SAVEPOINT %@", v7];
      sub_100012004(a1, v10, 0, 0);
    }
    a1 = 0;
    goto LABEL_7;
  }
LABEL_8:

  return a1;
}

void sub_10025E9EC(_Unwind_Exception *a1)
{
}

BOOL sub_10025EA18(BOOL a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v9 = 0;
    objc_super v10 = &v9;
    uint64_t v11 = 0x2020000000;
    char v12 = 0;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10025EB10;
    v6[3] = &unk_100523FE8;
    id v7 = v3;
    id v8 = &v9;
    sub_100009834(a1, @"SELECT name FROM sqlite_master where name = ?", v6);
    a1 = *((unsigned char *)v10 + 24) != 0;

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_10025EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10025EB10(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = sub_100242EB8((uint64_t)v4);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

sqlite3_stmt *sub_10025EB9C(sqlite3_stmt *result)
{
  if (result)
  {
    uint64_t v1 = result;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v2 = objc_msgSend(*((id *)result + 4), "objectEnumerator", 0);
    id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v9;
      do
      {
        id v6 = 0;
        do
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v2);
          }
          sub_1000121D0(*(void *)(*((void *)&v8 + 1) + 8 * (void)v6));
          id v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v4);
    }

    [*((id *)v1 + 4) removeAllObjects];
    uint64_t result = sqlite3_next_stmt(*((sqlite3 **)v1 + 2), 0);
    if (result)
    {
      id v7 = result;
      do
      {
        sqlite3_finalize(v7);
        uint64_t result = sqlite3_next_stmt(*((sqlite3 **)v1 + 2), v7);
        id v7 = result;
      }
      while (result);
    }
  }
  return result;
}

id sub_10025ECCC(uint64_t a1)
{
  id v2 = (id *)(a1 + 24);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    uint64_t v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unsigned int v14 = objc_opt_class();
      objc_super v15 = *(void **)(a1 + 56);
      id v17 = v14;
      if (v15) {
        id Property = objc_getProperty(v15, v16, 24, 1);
      }
      else {
        id Property = 0;
      }
      id v19 = Property;
      int v26 = 138412546;
      id v27 = v14;
      __int16 v28 = 2114;
      id v29 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%@]: Asking delegate to reset database after corruption: %{public}@", (uint8_t *)&v26, 0x16u);
    }
    id v6 = objc_loadWeakRetained(v2);
    id v7 = [v6 connectionNeedsResetForCorruption:a1];
LABEL_11:
    id v9 = v7;

    return v9;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  if (!v8 || !*(unsigned char *)(v8 + 8))
  {
    long long v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = objc_opt_class();
      id v21 = *(void **)(a1 + 56);
      id v23 = v20;
      if (v21) {
        id v24 = objc_getProperty(v21, v22, 24, 1);
      }
      else {
        id v24 = 0;
      }
      id v25 = v24;
      int v26 = 138412546;
      id v27 = v20;
      __int16 v28 = 2114;
      id v29 = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@]: Deleting database after corruption: %{public}@", (uint8_t *)&v26, 0x16u);
    }
    id v12 = *(id *)(a1 + 56);
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 24, 1);
    }
    id v6 = v12;
    sub_10025E72C(a1);
    id v7 = sub_100307880(v6, 0);
    goto LABEL_11;
  }
  return 0;
}

void sub_10025EF14(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_10025F008(sqlite3_context *a1)
{
  +[NSDate timeIntervalSinceReferenceDate];
  sqlite3_result_int64(a1, (uint64_t)v2);
}

id sub_10025F0A4(void *a1)
{
  if (a1)
  {
    id v1 = sub_10025F104(a1);
    double v2 = [v1 objectForKeyedSubscript:@"AnalyticsEventAction"];
  }
  else
  {
    double v2 = 0;
  }
  return v2;
}

id sub_10025F104(void *a1)
{
  id v1 = [a1 userInfo];
  double v2 = [v1 objectForKeyedSubscript:@"com.apple.appstored.AnalyticsEvent"];

  return v2;
}

void sub_10025F158(void *a1, void *a2)
{
  id v10 = a2;
  if (a1)
  {
    id v3 = sub_10025F104(a1);
    id v4 = [v3 mutableCopy];

    if (!v4) {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
    }
    id v5 = [v10 copy];
    [v4 setObject:v5 forKeyedSubscript:@"AnalyticsEventAction"];

    id v6 = v4;
    long long v7 = [a1 userInfo];
    id v8 = [v7 mutableCopy];

    if (!v8) {
      id v8 = objc_alloc_init((Class)NSMutableDictionary);
    }
    id v9 = [v6 copy];
    [v8 setObject:v9 forKeyedSubscript:@"com.apple.appstored.AnalyticsEvent"];

    [a1 setUserInfo:v8];
  }
}

uint64_t sub_10025F270(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if ([v7 count])
    {
      id v9 = sub_10041E9F8((uint64_t)[v7 count]);
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"DELETE FROM purchase_history_apps WHERE purchaser_dsid = ? AND locker_item_id IN (%@);",
      id v10 = v9);

      uint64_t v11 = *(void *)(a1 + 8);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10025F3AC;
      v14[3] = &unk_1005214B8;
      id v15 = v8;
      id v16 = v7;
      uint64_t v12 = sub_100012004(v11, v10, a4, v14);
    }
    else
    {
      uint64_t v12 = 1;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_10025F3AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindNumber:*(void *)(a1 + 32) atPosition:1];
  id v4 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10025F454;
  v6[3] = &unk_100521490;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

id sub_10025F454(uint64_t a1, uint64_t a2, int a3)
{
  return [*(id *)(a1 + 32) bindNumber:a2 atPosition:(a3 + 2)];
}

uint64_t sub_10025F464(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v58 = a1;
  id v59 = a3;
  if (a1)
  {
    if ([v5 count])
    {
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      id obj = v5;
      id v6 = [obj countByEnumeratingWithState:&v60 objects:v64 count:16];
      if (v6)
      {
        id v7 = v6;
        id v55 = v5;
        uint64_t v57 = *(void *)v61;
        while (2)
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v61 != v57) {
              objc_enumerationMutation(obj);
            }
            id v9 = *(void **)(*((void *)&v60 + 1) + 8 * i);
            id v10 = objc_alloc_init((Class)NSMutableDictionary);
            uint64_t v11 = [v9 bundleID];
            [v10 setObject:v11 forKeyedSubscript:@"bundle_id"];

            uint64_t v12 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v9 contentRatingFlags]);
            [v10 setObject:v12 forKeyedSubscript:@"content_rating_flags"];

            id v13 = [v9 circularIconURLString];
            [v10 setObject:v13 forKeyedSubscript:@"circular_icon_url"];

            unsigned int v14 = [v9 datePurchased];
            [v10 setObject:v14 forKeyedSubscript:@"date_purchased"];

            id v15 = [v9 developerName];
            [v10 setObject:v15 forKeyedSubscript:@"developer_name"];

            id v16 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 isFamilyShared]);
            [v10 setObject:v16 forKeyedSubscript:@"family_shared"];

            id v17 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 isFirstParty]);
            [v10 setObject:v17 forKeyedSubscript:@"first_party"];

            uint64_t v18 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 currentlyOptedInForMacOSEligibility]);
            [v10 setObject:v18 forKeyedSubscript:@"is_ios_binary_macos_available"];

            id v19 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 currentlyOptedInForXROSEligibility]);
            [v10 setObject:v19 forKeyedSubscript:@"currently_opted_in_for_ros_eligibility"];

            uint64_t v20 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 optedInForMacOSEligibility]);
            [v10 setObject:v20 forKeyedSubscript:@"is_ios_binary_macos_compatible"];

            id v21 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 optedInForXROSEligibility]);
            [v10 setObject:v21 forKeyedSubscript:@"opted_in_for_ros_eligibility"];

            id v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 hasMessagesExtension]);
            [v10 setObject:v22 forKeyedSubscript:@"has_messages_extension"];

            id v23 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 isHidden]);
            [v10 setObject:v23 forKeyedSubscript:@"hidden"];

            id v24 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 isHiddenFromSpringboard]);
            [v10 setObject:v24 forKeyedSubscript:@"hidden_from_springboard"];

            id v25 = [v9 iconURLString];
            [v10 setObject:v25 forKeyedSubscript:@"icon_url_template"];

            int v26 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 is32BitOnly]);
            [v10 setObject:v26 forKeyedSubscript:@"is_32_bit_only"];

            id v27 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 isPreorder]);
            [v10 setObject:v27 forKeyedSubscript:@"is_preorder"];

            __int16 v28 = [v9 longTitle];
            [v10 setObject:v28 forKeyedSubscript:@"long_title"];

            id v29 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v9 mediaKind]);
            [v10 setObject:v29 forKeyedSubscript:@"media_kind"];

            id v30 = [v9 ovalIconURLString];
            [v10 setObject:v30 forKeyedSubscript:@"oval_icon_url_template"];

            id v31 = [v9 preflightPackageURL];
            [v10 setObject:v31 forKeyedSubscript:@"preflight_package_url"];

            uint64_t v32 = [v9 productURL];
            [v10 setObject:v32 forKeyedSubscript:@"product_url"];

            [v10 setObject:v59 forKeyedSubscript:@"purchaser_dsid"];
            uint64_t v33 = [v9 redownloadParams];
            [v10 setObject:v33 forKeyedSubscript:@"redownload_params"];

            unsigned __int8 v34 = [v9 requiredCapabilities];
            [v10 setObject:v34 forKeyedSubscript:@"required_capabilities"];

            id v35 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v9 storeItemID]);
            [v10 setObject:v35 forKeyedSubscript:@"store_item_id"];

            id v36 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 supportsIPad]);
            [v10 setObject:v36 forKeyedSubscript:@"supports_ipad"];

            id v37 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 supportsIPhone]);
            [v10 setObject:v37 forKeyedSubscript:@"supports_iphone"];

            id v38 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 supportsMac]);
            [v10 setObject:v38 forKeyedSubscript:@"supports_mac"];

            long long v39 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 supportsRealityDevice]);
            [v10 setObject:v39 forKeyedSubscript:@"supports_reality_device"];

            long long v40 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v9 purchaseToken]);
            [v10 setObject:v40 forKeyedSubscript:@"purchase_token"];

            long long v41 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v9 lockerItemID]);
            [v10 setObject:v41 forKeyedSubscript:@"locker_item_id"];

            long long v42 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v9 genreID]);
            [v10 setObject:v42 forKeyedSubscript:@"genre_id"];

            long long v43 = [v9 genreName];
            [v10 setObject:v43 forKeyedSubscript:@"genre_name"];

            long long v44 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 watchAppDeliveredIniOSApp]);
            [v10 setObject:v44 forKeyedSubscript:@"watch_app_delivered_in_ios_app"];

            long long v45 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 watchAppRunsIndependently]);
            [v10 setObject:v45 forKeyedSubscript:@"watch_app_runs_independently"];

            long long v46 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 watchOnly]);
            [v10 setObject:v46 forKeyedSubscript:@"watch_app_watch_only"];

            long long v47 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 supportsLayeredImage]);
            [v10 setObject:v47 forKeyedSubscript:@"supports_layered_image"];

            long long v48 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v9 hasP3]);
            [v10 setObject:v48 forKeyedSubscript:@"has_p3"];

            long long v49 = [v9 title];
            [v10 setObject:v49 forKeyedSubscript:@"title"];

            long long v50 = [PurchaseHistoryAppEntity alloc];
            long long v51 = [v58 connection];
            id v52 = [(SQLiteEntity *)v50 initWithPropertyValues:v10 onConnection:v51];

            LODWORD(v51) = [(SQLiteEntity *)v52 existsInDatabase];
            if (!v51)
            {
              uint64_t v53 = 0;
              goto LABEL_13;
            }
          }
          id v7 = [obj countByEnumeratingWithState:&v60 objects:v64 count:16];
          if (v7) {
            continue;
          }
          break;
        }
        uint64_t v53 = 1;
LABEL_13:
        id v5 = v55;
      }
      else
      {
        uint64_t v53 = 1;
      }
    }
    else
    {
      uint64_t v53 = 1;
    }
  }
  else
  {
    uint64_t v53 = 0;
  }

  return v53;
}

uint64_t sub_10025FEE0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = [a1 connection];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10025FFB4;
    v9[3] = &unk_1005214E0;
    id v10 = v5;
    uint64_t v7 = sub_100012004((uint64_t)v6, @"DELETE FROM purchase_history_apps WHERE purchaser_dsid = ?;", a3, v9);
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id sub_10025FFB4(uint64_t a1, void *a2)
{
  return [a2 bindNumber:*(void *)(a1 + 32) atPosition:1];
}

void *sub_10025FFC4(void *result, void *a2, void *a3, void *a4)
{
  if (result)
  {
    id v6 = result;
    id v7 = a3;
    id v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%i", [a2 intValue]);
    id v9 = sub_10032CE18((uint64_t)PurchaseHistoryDatabaseSession, v7);

    uint64_t v10 = sub_100260080(v6, v8, v9, a4);
    return (void *)v10;
  }
  return result;
}

uint64_t sub_100260080(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [a1 connection];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002602C0;
  v14[3] = &unk_1005214B8;
  id v10 = v7;
  id v15 = v10;
  id v11 = v8;
  id v16 = v11;
  uint64_t v12 = sub_100012004((uint64_t)v9, @"INSERT OR REPLACE INTO purchase_history_db_properties (value, key) VALUES (?, ?);",
          a4,
          v14);

  return v12;
}

void *sub_100260170(void *result, void *a2, void *a3, void *a4)
{
  if (result)
  {
    id v6 = result;
    id v7 = a3;
    [a2 timeIntervalSince1970];
    id v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    id v9 = sub_1003E01B4((uint64_t)PurchaseHistoryDatabaseSession, v7);

    uint64_t v10 = sub_100260080(v6, v8, v9, a4);
    return (void *)v10;
  }
  return result;
}

void *sub_100260218(void *result, void *a2, void *a3, void *a4)
{
  if (result)
  {
    id v6 = result;
    id v7 = a3;
    [a2 timeIntervalSince1970];
    id v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    id v9 = sub_10032CBCC((uint64_t)PurchaseHistoryDatabaseSession, v7);

    uint64_t v10 = sub_100260080(v6, v8, v9, a4);
    return (void *)v10;
  }
  return result;
}

void sub_1002602C0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  sub_10041E7A8(v4, 1, v3);
  [v4 bindString:*(void *)(a1 + 40) atPosition:2];
}

ExpiredUpdateRecoveryTask *sub_100260DE0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init(ExpiredUpdateRecoveryTask);
  v3->_installID = (int64_t)[v2 persistentID];
  uint64_t v4 = sub_10026E95C(v2, @"bundle_id");
  bundleID = v3->_bundleID;
  v3->_bundleID = (NSString *)v4;

  v3->_userInitiated = sub_10026E91C(v2, @"update_type") != (id)1;
  uint64_t v6 = sub_10026E82C(v2, @"item_id");
  itemID = v3->_itemID;
  v3->_itemID = (NSNumber *)v6;

  uint64_t v8 = sub_10026E9D4(v2, @"external_id");
  externalID = v3->_externalID;
  v3->_externalID = (NSUUID *)v8;

  uint64_t v10 = sub_10026E95C(v2, @"log_code");

  logCode = v3->_logCode;
  v3->_logCode = (NSString *)v10;

  return v3;
}

void sub_1002613E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_100261440(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100420848(a2, *(void **)(*(void *)(a1 + 32) + 40));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1002614A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 items];
  id v7 = [v6 firstObject];

  unsigned int v8 = [v7 success];
  id v9 = ASDLogHandleForCategory();
  uint64_t v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [*(id *)(a1 + 32) logKey];
      *(_DWORD *)id v17 = 138412290;
      *(void *)&void v17[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Successfully re-purchased expired update", v17, 0xCu);
    }
    uint64_t v12 = *(void *)(a1 + 40);
    id v13 = [*(id *)(a1 + 32) logKey];
    if (v12)
    {
      unsigned int v14 = sub_1003E0BA4();
      *(void *)id v17 = _NSConcreteStackBlock;
      *(void *)&v17[8] = 3221225472;
      *(void *)&v17[16] = sub_1002616E8;
      uint64_t v18 = &unk_100522AB8;
      uint64_t v19 = v12;
      id v20 = v13;
      [v14 modifyUsingTransaction:v17];
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    [WeakRetained completeWithSuccess];
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v16 = [*(id *)(a1 + 32) logKey];
      *(_DWORD *)id v17 = 138412546;
      *(void *)&void v17[4] = v16;
      *(_WORD *)&v17[12] = 2114;
      *(void *)&v17[14] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@] Failed to re-purchase expired update error: %{public}@", v17, 0x16u);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    [WeakRetained completeWithError:v5];
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t sub_1002616E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [AppInstallEntity alloc];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 64);
  uint64_t v6 = [v3 connection];

  id v7 = [(SQLiteEntity *)v4 initWithPersistentID:v5 onConnection:v6];
  sub_1002C2130(v7);
  unsigned int v8 = (id *)objc_claimAutoreleasedReturnValue();
  id v9 = sub_1003D4DF8((uint64_t)v8);

  if (v9)
  {
    sub_1003D4ECC((uint64_t)v8, 0);
    sub_1002C21C0(v7, v8);
    uint64_t v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      int v13 = 138412290;
      uint64_t v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Successfully cleared the optimal download window", (uint8_t *)&v13, 0xCu);
    }
  }
  return 1;
}

void sub_100261B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100261B68(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = +[ApplicationProxy proxyForBundleID:](ApplicationProxy, "proxyForBundleID:", *(void *)(*((void *)&v8 + 1) + 8 * (void)v6), (void)v8);
        if ([*(id *)(a1 + 40) isCandidateAppProxy:v7 isMetadataLookup:0]) {
          ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        }

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100261F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100261F20(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) isCandidateAppProxy:a2 isMetadataLookup:0];
  if (result) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return result;
}

void sub_100261F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 32);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v6 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v5;

      id v4 = *(void **)(a1 + 32);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

BOOL sub_10026229C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 16;
        goto LABEL_26;
      case 2u:
        uint64_t v14 = objc_alloc_init(TFImageUpload);
        sub_100261F7C(a1, v14);
        if (PBReaderPlaceMark() && sub_100209800((uint64_t)v14, a2))
        {
          PBReaderRecallMark();
LABEL_27:

LABEL_28:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
        goto LABEL_26;
      case 4u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 24;
LABEL_26:
        uint64_t v14 = *(TFImageUpload **)(a1 + v13);
        *(void *)(a1 + v13) = v12;
        goto LABEL_27;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_28;
    }
  }
}

void sub_100262660(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_100262678(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_100262690(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

uint64_t sub_100262B6C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

BOOL sub_100262CF0(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a1[1];
  BOOL v3 = v2 != 0;
  if (!v2)
  {
    char v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Impression is missing advertised app id", v13, 2u);
    }
  }
  if (!a1[2])
  {
    unsigned int v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Impression is missing ad network id", v13, 2u);
    }

    BOOL v3 = 0;
  }
  if (!a1[5])
  {
    unint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Impression is missing impression id", v13, 2u);
    }

    BOOL v3 = 0;
  }
  if (!a1[6])
  {
    unint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Impression is missing source app adam id", v13, 2u);
    }

    BOOL v3 = 0;
  }
  if (!a1[7])
  {
    char v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Impression is missing timestamp", v13, 2u);
    }

    BOOL v3 = 0;
  }
  if (!a1[9])
  {
    long long v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Impression is missing signature", v13, 2u);
    }

    BOOL v3 = 0;
  }
  if (!a1[10])
  {
    int v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Impression is missing SKAdNetwork version", v13, 2u);
    }

    BOOL v3 = 0;
  }
  if (!a1[11])
  {
    long long v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Impression is missing source app bundle id", v13, 2u);
    }

    return 0;
  }
  return v3;
}

unint64_t *sub_100262FEC(unint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    if (sub_1002F3620(a1[1]))
    {
      if (sub_1002F3620(v2[6]))
      {
        a1 = (unint64_t *)(id)v2[10];
        if (!a1)
        {
LABEL_14:
          uint64_t v1 = vars8;
          goto LABEL_15;
        }
        BOOL v3 = a1;
        uint64_t v4 = ASDInstallAttributionVersionCreateFromString();

        if (v4)
        {
          a1 = 0;
          goto LABEL_14;
        }
        char v8 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long v9 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Version is not a valid SKAN version.", v9, 2u);
        }
      }
      else
      {
        unint64_t v6 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v10 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Source app ID is not a valid integer value.", v10, 2u);
        }
      }
    }
    else
    {
      unsigned int v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Advertised app ID is not a valid integer value.", buf, 2u);
      }
    }
    ASDErrorWithDescription();
    a1 = (unint64_t *)objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
LABEL_15:
  return a1;
}

id sub_1002631A8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  self;
  if (!v8) {
    goto LABEL_45;
  }
  long long v46 = 0;
  id v11 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v8 allowPlaceholder:0 error:&v46];
  uint64_t v12 = v11;
  if (!v11)
  {
    uint64_t v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      id v49 = v8;
      __int16 v50 = 2114;
      id v51 = v46;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "SKAdNetwork: Did not find installed app %{public}@: %{public}@", buf, 0x16u);
    }
    goto LABEL_9;
  }
  uint64_t v13 = [v11 appClipMetadata];

  if (v13)
  {
    uint64_t v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v49 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "SKAdNetwork: API not available for App Clips: %{public}@", buf, 0xCu);
    }
LABEL_9:

    ASDErrorWithDescription();
    id v15 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_46;
  }
  id v16 = [v12 URL];
  id v17 = [v16 URLByAppendingPathComponent:@"Info.plist"];

  id v18 = [objc_alloc((Class)NSDictionary) initWithContentsOfURL:v17 error:&v46];
  uint64_t v19 = v18;
  if (v18)
  {
    id v20 = [v18 objectForKeyedSubscript:@"SKAdNetworkItems"];
    objc_opt_class();
    long long v41 = v20;
    if (objc_opt_isKindOfClass())
    {
      uint64_t v38 = a4;
      long long v39 = v9;
      long long v40 = v19;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v21 = v20;
      id v22 = [v21 countByEnumeratingWithState:&v42 objects:v47 count:16];
      if (v22)
      {
        id v15 = v22;
        uint64_t v23 = *(void *)v43;
LABEL_14:
        uint64_t v24 = 0;
        while (1)
        {
          if (*(void *)v43 != v23) {
            objc_enumerationMutation(v21);
          }
          id v25 = *(void **)(*((void *)&v42 + 1) + 8 * v24);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            int v26 = sub_1002689B4(v25, @"SKAdNetworkIdentifier");
            if (v26)
            {
              id v27 = v26;
              if ([v26 isEqualToString:v10])
              {

                BOOL v33 = sub_1003F3EC8();
                int v30 = 0;
                if (!v38) {
                  goto LABEL_41;
                }
                id v9 = v39;
                uint64_t v19 = v40;
                if (v33) {
                  goto LABEL_43;
                }
                id v34 = [v39 longLongValue];
                id v15 = [v12 iTunesMetadata];
                id v35 = [v15 storeItemIdentifier];

                if (v34 == v35)
                {
                  int v30 = 0;
                }
                else
                {
                  id v37 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 138543618;
                    id v49 = v8;
                    __int16 v50 = 2114;
                    id v51 = v39;
                    _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "SKAdNetwork: App: %{public}@ did not match source app adam id: %{public}@", buf, 0x16u);
                  }

                  ASDErrorWithDescription();
                  id v15 = (id)objc_claimAutoreleasedReturnValue();
                  int v30 = 1;
                }
                goto LABEL_42;
              }
            }
            else
            {
              __int16 v28 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138543362;
                id v49 = v8;
                _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "SKAdNetwork: Found non-string SKAdNetworkIdentifier in Info.plist for app: %{public}@", buf, 0xCu);
              }

              id v27 = 0;
            }
          }
          else
          {
            id v27 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              id v49 = v8;
              _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "SKAdNetwork: Found non-dictionary SKAdNetworkItem in Info.plist for app: %{public}@", buf, 0xCu);
            }
          }

          if (v15 == (id)++v24)
          {
            id v15 = [v21 countByEnumeratingWithState:&v42 objects:v47 count:16];
            if (v15) {
              goto LABEL_14;
            }
            break;
          }
        }
      }

      id v29 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543618;
        id v49 = v8;
        __int16 v50 = 2112;
        id v51 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "SKAdNetwork: App: %{public}@ did not have ad network: %@ in Info.plist", buf, 0x16u);
      }

      ASDErrorWithDescription();
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      int v30 = 1;
LABEL_41:
      id v9 = v39;
LABEL_42:
      uint64_t v19 = v40;
    }
    else
    {
      uint64_t v32 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v49 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "SKAdNetwork: Did not find ad network items array in Info.plist for app: %{public}@", buf, 0xCu);
      }

      ASDErrorWithDescription();
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      int v30 = 1;
    }
LABEL_43:
  }
  else
  {
    id v31 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v49 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "SKAdNetwork: Did not find Info.plist for app: %{public}@", buf, 0xCu);
    }

    ASDErrorWithDescription();
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    int v30 = 1;
  }

  if (!v30) {
LABEL_45:
  }
    id v15 = 0;
LABEL_46:

  return v15;
}

void sub_100263888(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v15 = a2;
  id v8 = a4;
  id v9 = a5;
  self;
  if (v9)
  {
    id v10 = objc_opt_new();
    [v10 setObject:v15 forKeyedSubscript:@"adNetworkID"];
    [v10 setObject:v8 forKeyedSubscript:@"skanVersion"];
    id v11 = +[NSNumber numberWithInteger:a3];
    [v10 setObject:v11 forKeyedSubscript:@"boundedImpressionType"];

    unint64_t v12 = (unint64_t)[v9 code] - 1200;
    if (v12 > 0x1E) {
      uint64_t v13 = 12;
    }
    else {
      uint64_t v13 = qword_1004A0D08[v12];
    }
    uint64_t v14 = +[NSNumber numberWithInteger:v13];
    [v10 setObject:v14 forKeyedSubscript:@"boundedFailureType"];

    sub_10040E9A0((uint64_t)Analytics, v10, 14);
  }
}

void sub_1002639D8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  self;
  id v9 = (id)objc_opt_new();
  [v9 setObject:v7 forKeyedSubscript:@"adNetworkID"];

  [v9 setObject:v6 forKeyedSubscript:@"skanVersion"];
  id v8 = +[NSNumber numberWithInteger:a3];
  [v9 setObject:v8 forKeyedSubscript:@"boundedImpressionType"];

  sub_10040E9A0((uint64_t)Analytics, v9, 2);
}

void sub_100263ABC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v8 = a4;
  id v9 = a2;
  self;
  id v12 = (id)objc_opt_new();
  [v12 setObject:v9 forKeyedSubscript:@"adNetworkID"];

  [v12 setObject:v8 forKeyedSubscript:@"skanVersion"];
  id v10 = +[NSNumber numberWithInteger:a3];
  [v12 setObject:v10 forKeyedSubscript:@"boundedImpressionType"];

  id v11 = +[NSNumber numberWithInteger:a5];
  [v12 setObject:v11 forKeyedSubscript:@"boundedFailureType"];

  sub_10040E9A0((uint64_t)Analytics, v12, 3);
}

void sub_100263BD8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_100263BE8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_100263BF8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void sub_100263C08(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

void sub_100263C18(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

void sub_100263C28(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 64), a2);
  }
}

void sub_100263C38(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_100263C48(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

void sub_100263C58(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 88), a2);
  }
}

void sub_100263C68(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 104), a2);
  }
}

id sub_100263D1C(uint64_t a1, uint64_t a2)
{
  self;
  v5[0] = a2;
  v5[1] = 0;
  id v3 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v5];
  return v3;
}

void *sub_100263D9C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v75.receiver = a1;
    v75.super_class = (Class)ClipDownloadData;
    id v7 = objc_msgSendSuper2(&v75, "init");
    if (v7)
    {
      id v8 = sub_100268568(v5, @"attributes");
      if (v8)
      {
        v83[0] = @"appContentRatingsBySystem";
        v83[1] = @"appsApple";
        id v9 = +[NSArray arrayWithObjects:v83 count:2];
        id v10 = sub_1003B6384(v9);
        id v11 = sub_1002685DC(v8, v10);

        if (v11)
        {
          uint64_t v12 = sub_1002689B4(v11, @"name");
          uint64_t v13 = (void *)v7[7];
          v7[7] = v12;

          uint64_t v14 = sub_10026811C(v11, @"rank");
          id v15 = (void *)v7[8];
          v7[8] = v14;
        }
        uint64_t v16 = sub_1002689B4(v8, @"appName");
        id v17 = (void *)v7[2];
        v7[2] = v16;

        uint64_t v18 = sub_1002689B4(v8, @"artistName");
        uint64_t v19 = (void *)v7[3];
        v7[3] = v18;

        v82[0] = @"platformAttributes";
        v82[1] = @"ios";
        id v20 = +[NSArray arrayWithObjects:v82 count:2];
        id v21 = sub_1003B6384(v20);
        id v22 = sub_1002685DC(v8, v21);

        if (v22)
        {
          uint64_t v23 = sub_1002689B4(v22, @"bundleId");
          uint64_t v24 = (void *)v7[4];
          v7[4] = v23;

          uint64_t v25 = sub_10026811C(v22, @"externalVersionId");
          int v26 = (void *)v7[5];
          void v7[5] = v25;

          uint64_t v27 = sub_1002689B4(v22, @"appBundleId");
          __int16 v28 = (void *)v7[6];
          v7[6] = v27;

          id v29 = sub_100267F88(v22, @"variantsInfo");
          if (v29)
          {
            long long v65 = v22;
            id v66 = v11;
            id v67 = v5;
            uint64_t v68 = v8;
            id v30 = v6;
            uint64_t v64 = v29;
            id v31 = v29;
            self;
            id v70 = objc_alloc_init((Class)NSMutableDictionary);
            long long v76 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v63 = v31;
            uint64_t v32 = sub_1003B63BC(v31);
            id v33 = [v32 countByEnumeratingWithState:&v76 objects:v84 count:16];
            if (v33)
            {
              id v34 = v33;
              uint64_t v35 = *(void *)v77;
              do
              {
                id v36 = 0;
                do
                {
                  if (*(void *)v77 != v35) {
                    objc_enumerationMutation(v32);
                  }
                  id v37 = sub_1001F7080([ClipDownloadVariant alloc], *(void **)(*((void *)&v76 + 1) + 8 * (void)v36));
                  long long v39 = v37;
                  if (v37)
                  {
                    id v40 = objc_getProperty(v37, v38, 40, 1);
                    long long v41 = v40;
                    if (v40 && objc_msgSend(v40, "count", v63))
                    {
                      long long v42 = sub_10025BAD8((uint64_t)VariantDescriptor, v30, v41);
                      if (v42) {
                        [v70 setObject:v39 forKeyedSubscript:v42];
                      }
                    }
                  }
                  else
                  {
                    long long v41 = 0;
                  }

                  id v36 = (char *)v36 + 1;
                }
                while (v34 != v36);
                id v43 = [v32 countByEnumeratingWithState:&v76 objects:v84 count:16];
                id v34 = v43;
              }
              while (v43);
            }

            long long v44 = [v70 allKeys];
            long long v45 = sub_10025BAD8((uint64_t)VariantDescriptor, v30, v44);

            id v46 = v45;
            if (v46)
            {
              uint64_t v47 = [v70 objectForKeyedSubscript:v46];
            }
            else
            {
              uint64_t v47 = 0;
            }
            id v5 = v67;
            id v8 = v68;
            id v11 = v66;

            id v48 = v46;
            id v49 = (void *)v7[9];
            v7[9] = v47;

            __int16 v50 = (void *)v7[10];
            v7[10] = v48;

            id v29 = v64;
            id v22 = v65;
          }
        }
      }
      id v51 = sub_100268568(v5, @"relationships");
      if (v51)
      {
        id v69 = v8;
        v81[0] = @"app";
        v81[1] = @"data";
        id v52 = +[NSArray arrayWithObjects:v81 count:2];
        uint64_t v53 = sub_1003B6384(v52);
        long long v54 = sub_100268048(v51, v53);

        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        id v55 = sub_1003B63BC(v54);
        id v56 = [v55 countByEnumeratingWithState:&v71 objects:v80 count:16];
        if (v56)
        {
          id v57 = v56;
          uint64_t v58 = *(void *)v72;
          do
          {
            for (uint64_t i = 0; i != v57; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v72 != v58) {
                objc_enumerationMutation(v55);
              }
              uint64_t v60 = sub_1002689B4(*(id *)(*((void *)&v71 + 1) + 8 * i), @"id");
              long long v61 = (void *)v7[1];
              v7[1] = v60;
            }
            id v57 = [v55 countByEnumeratingWithState:&v71 objects:v80 count:16];
          }
          while (v57);
        }

        id v8 = v69;
      }
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void *sub_100264374(void *a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = [a2 dictionary];
    id v7 = sub_100263D9C(v3, v6, v5);

    id v3 = v7;
  }
  return v3;
}

void sub_100264674(id a1)
{
  uint64_t v1 = objc_alloc_init(AppStoreService);
  uint64_t v2 = (void *)qword_1005B0BE8;
  qword_1005B0BE8 = (uint64_t)v1;
}

uint64_t sub_100264924(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id *sub_100265344(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)PurchaseHistoryUpdateRequest;
    id v11 = (id *)objc_msgSendSuper2(&v13, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      objc_storeStrong(a1 + 2, a4);
      objc_storeWeak(a1 + 5, v9);
    }
  }

  return a1;
}

void sub_1002653FC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = a1[2];
    if (v4 && *(void *)(v4 + 8))
    {
      uint64_t v5 = a1[1];
      id v38 = 0;
      id v6 = sub_10030B9EC(v5, @"purchase-daap/base-url", &v38);
      id v7 = v38;
      id v8 = v7;
      if (v6)
      {
        uint64_t v9 = a1[1];
        id v37 = v8;
        id v10 = sub_10030BE3C(v9, @"purchase-daap/database-id", &off_10054BD90, &v37);
        id v11 = v37;

        if (v10)
        {
          uint64_t v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"databases/%ld/update", [v10 integerValue]);
          objc_super v13 = [v6 URLByAppendingPathComponent:v12];

          if (v13)
          {
            id v14 = 0;
            goto LABEL_14;
          }
        }
        else
        {
        }
      }
      else
      {
        id v11 = v7;
      }
      uint64_t v16 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v33 = objc_opt_class();
        *(_DWORD *)long long buf = 138412546;
        id v40 = v33;
        __int16 v41 = 2114;
        id v42 = v11;
        id v34 = v33;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[%@]: Failed to construct request URL error: %{public}@", buf, 0x16u);
      }
      sub_100005B4C(2, (uint64_t)v11);
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      objc_super v13 = 0;
LABEL_14:

      id v17 = v14;
      if (!v13)
      {
        id v22 = sub_100005B4C(2, (uint64_t)v17);
        v3[2](v3, 0, v22);
LABEL_30:

        goto LABEL_31;
      }
      uint64_t v19 = [PurchaseHistoryUpdateDAAPRequestEncoder alloc];
      id Property = (id)a1[2];
      if (Property) {
        id Property = objc_getProperty(Property, v18, 32, 1);
      }
      id v21 = Property;
      id v22 = sub_10022D1AC((id *)&v19->super.isa, v21);

      uint64_t v24 = sub_1003869E4((id *)[DAAPURLRequest alloc], v22, v13);
      id v25 = (id)a1[2];
      if (v25) {
        id v25 = objc_getProperty(v25, v23, 16, 1);
      }
      id v27 = v25;
      if (v24) {
        objc_setProperty_atomic(v24, v26, v27, 24);
      }

      id v29 = (void *)a1[2];
      if (v29)
      {
        id v30 = (void *)v29[1];
        if (!v24)
        {
LABEL_24:
          if (v29) {
            id v29 = objc_getProperty(v29, v28, 24, 1);
          }
          uint64_t v32 = v29;
          if (v24) {
            objc_setProperty_atomic(v24, v31, v32, 40);
          }

          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472;
          v35[2] = sub_1002657B8;
          v35[3] = &unk_100523BB0;
          void v35[4] = a1;
          id v36 = v3;
          sub_100386D94((uint64_t)v24, a1, v35);

          goto LABEL_30;
        }
      }
      else
      {
        id v30 = 0;
        if (!v24) {
          goto LABEL_24;
        }
      }
      v24[4] = v30;
      id v29 = (void *)a1[2];
      goto LABEL_24;
    }
    id v15 = sub_100005B4C(4, 0);
    v3[2](v3, 0, v15);
  }
LABEL_31:
}

void sub_1002657B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5)
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 36)
      || [v6 code] != (id)301
      || ([v7 userInfo],
          id v10 = objc_claimAutoreleasedReturnValue(),
          [v10 objectForKey:AMSErrorUserInfoKeyStatusCode],
          id v11 = objc_claimAutoreleasedReturnValue(),
          id v12 = [v11 integerValue],
          v11,
          v10,
          v12 != (id)401))
    {
      uint64_t v20 = *(void *)(a1 + 40);
      sub_100005B4C(0, (uint64_t)v7);
      id v8 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void, id))(v20 + 16))(v20, 0, v8);
      goto LABEL_16;
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 36) = 1;
    id v8 = objc_alloc_init((Class)AMSAuthenticateOptions);
    [v8 setAuthenticationType:0];
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16);
    if (!v13 || *(void *)(v13 + 40) != 1) {
      [v8 setAuthenticationType:1];
    }
    id v15 = objc_alloc((Class)AMSAuthenticateRequest);
    id Property = *(id *)(*(void *)(a1 + 32) + 16);
    if (Property) {
      id Property = objc_getProperty(Property, v14, 16, 1);
    }
    id v17 = Property;
    id v18 = [v15 initWithAccount:v17 options:v8];

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100265A08;
    v21[3] = &unk_100524148;
    uint64_t v19 = *(void **)(a1 + 40);
    v21[4] = *(void *)(a1 + 32);
    id v22 = v19;
    sub_10033CF54((uint64_t)InteractiveRequestPresenter, v18, v21);

LABEL_15:
    goto LABEL_16;
  }
  id v8 = [v5 data];
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v8)
  {
    sub_100005B4C(0, 0);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0, v18);
    goto LABEL_15;
  }
  (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v8, 0);
LABEL_16:
}

void sub_100265A08(uint64_t a1, void *a2, void *a3)
{
  id v22 = a3;
  id v5 = [a2 account];
  id v6 = v5;
  if (v5 && (objc_msgSend(v5, "ams_DSID"), id v7 = objc_claimAutoreleasedReturnValue(), v7, v7))
  {
    id Property = *(id *)(*(void *)(a1 + 32) + 16);
    if (Property) {
      id Property = objc_getProperty(Property, v8, 32, 1);
    }
    id v11 = Property;
    id v12 = *(void **)(*(void *)(a1 + 32) + 16);
    if (v12)
    {
      int64_t v13 = v12[1];
      id v12 = objc_getProperty(v12, v10, 24, 1);
    }
    else
    {
      int64_t v13 = 0;
    }
    id v14 = v12;
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v15) {
      unint64_t v16 = *(void *)(v15 + 40);
    }
    else {
      unint64_t v16 = 0;
    }
    id v17 = sub_1003A4648((uint64_t)PurchaseHistoryUpdateRequestContext, v11, v13, v6, v14, v16);

    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = *(void **)(v18 + 16);
    *(void *)(v18 + 16) = v17;
    uint64_t v20 = v17;

    sub_1002653FC(*(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 40);
    sub_100005B4C(4, (uint64_t)v22);
    uint64_t v20 = (PurchaseHistoryUpdateRequestContext *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, PurchaseHistoryUpdateRequestContext *))(v21 + 16))(v21, 0, v20);
  }
}

void sub_100265EE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(*(void *)(a1 + 32) + 16);
      if (Property) {
        id Property = objc_getProperty(Property, v8, 16, 1);
      }
      id v15 = Property;
      unint64_t v16 = [v15 hashedDescription];
      int v17 = 138543618;
      uint64_t v18 = v16;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Errored out for auth challenge to:%{public}@ with error:%@", (uint8_t *)&v17, 0x16u);
    }
  }
  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v11 = *(id *)(*(void *)(a1 + 32) + 16);
    if (v11) {
      id v11 = objc_getProperty(v11, v10, 16, 1);
    }
    id v12 = v11;
    int64_t v13 = [v12 hashedDescription];
    int v17 = 138543362;
    uint64_t v18 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Received response to authentication challenge for %{public}@", (uint8_t *)&v17, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100266204(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Error in dialog task: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100266358(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSErrorUserInfoKey v7 = NSUnderlyingErrorKey;
    id v3 = ASDErrorWithSafeUserInfo();
    uint64_t v8 = v3;
    uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  }
  else
  {
    uint64_t v4 = 0;
  }
  id v5 = +[NSError errorWithDomain:@"PurchaseHistoryErrorDomain" code:a1 userInfo:v4];

  return v5;
}

id sub_1002665E4(id a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = [a1 valueForProperty:@"localized_display_names"];
    id v3 = [v1 valueForProperty:@"primary_locale"];
    id v1 = +[ASDBetaAppDisplayNames displayNameWithLocalizedNames:v2 andPrimaryLocale:v3];
  }
  return v1;
}

id sub_100266678(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [a1 valueForProperty:@"bundle_id"];
    id v3 = [a1 valueForProperty:@"bundle_version"];
    uint64_t v4 = [a1 valueForProperty:@"expiration_date"];
    id v5 = sub_10026E91C(a1, @"platform");
    uint64_t v6 = [a1 valueForProperty:@"bundle_short_version"];
    NSErrorUserInfoKey v7 = (void *)v6;
    if (v2) {
      BOOL v8 = v3 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8 || v4 == 0 || v6 == 0)
    {
      __int16 v11 = 0;
    }
    else
    {
      __int16 v11 = objc_opt_new();
      uint64_t v24 = +[ASDBetaAppVersion versionWithBundleID:v2 bundleVersion:v3 platform:v5 andShortVersion:v7];
      [v11 setVersion:v24];
      [v11 setExpirationDate:v4];
      uint64_t v23 = [a1 valueForProperty:@"email"];
      [v11 setTesterEmail:v23];
      id v12 = [a1 valueForProperty:@"has_shared_screenshot_feedback"];
      id v13 = [v12 BOOLValue];

      [v11 setSharedFeedback:v13];
      id v14 = [a1 valueForProperty:@"feedback_enabled"];
      id v15 = [v14 BOOLValue];

      [v11 setFeedbackEnabled:v15];
      unint64_t v16 = [a1 valueForProperty:@"icon_url_template"];
      [v11 setIconURLTemplate:v16];
      int v17 = [a1 valueForProperty:@"last_seen_date"];
      [v11 setLastWelcomeScreenViewDate:v17];
      uint64_t v18 = [a1 valueForProperty:@"launch_screen_enabled"];
      id v19 = [v18 BOOLValue];

      [v11 setLaunchScreenEnabled:v19];
      id v20 = sub_1002665E4(a1);
      [v11 setDisplayNames:v20];

      uint64_t v21 = [a1 valueForProperty:@"what_to_test"];
      [v11 setLocalizedTestNotes:v21];
    }
  }
  else
  {
    __int16 v11 = 0;
  }
  return v11;
}

void *sub_100266924(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)URLRequest;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      uint64_t v4 = sub_10030B11C();
      id v5 = (void *)a1[1];
      a1[1] = v4;

      id v6 = [v3 copy];
      NSErrorUserInfoKey v7 = (void *)a1[2];
      a1[2] = v6;
    }
  }

  return a1;
}

void sub_1002669B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v5 = sub_100266CD0((uint64_t *)[URLRequestEncoder alloc], *(void **)(a1 + 16));
    id v6 = *(void **)(a1 + 16);
    if (!v6 || (id v7 = objc_getProperty(v6, v4, 112, 1)) == 0)
    {
      sub_100364B04(*(void *)(a1 + 16));
      id v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    BOOL v8 = sub_100364288(*(void *)(a1 + 16));

    uint64_t v9 = sub_100364D38(*(void *)(a1 + 16));
    uint64_t v10 = *(void *)(a1 + 16);
    if (v8)
    {
      __int16 v11 = sub_100364288(v10);
      [v5 requestWithMethod:v9 bagURL:v11 parameters:v7];
    }
    else
    {
      __int16 v11 = sub_100364F64(v10);
      [v5 requestWithMethod:v9 URL:v11 parameters:v7];
    id v12 = };

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100266B94;
    v16[3] = &unk_100524198;
    void v16[4] = a1;
    id v13 = [v12 thenWithBlock:v16];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100266C10;
    v14[3] = &unk_1005241C0;
    id v15 = v3;
    [v13 addFinishBlock:v14];
  }
}

id sub_100266B94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001FBB54();
  id v5 = sub_1001FBC68(v4, *(void **)(*(void *)(a1 + 32) + 16), v3);

  return v5;
}

void sub_100266C10(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  ASDErrorWithSafeUserInfo();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, v4);
}

uint64_t *sub_100266CD0(uint64_t *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = sub_10030B11C();
    v17.receiver = a1;
    v17.super_class = (Class)URLRequestEncoder;
    a1 = (uint64_t *)objc_msgSendSuper2(&v17, "initWithBag:", v4);

    if (a1)
    {
      id v5 = [v3 copy];
      id v6 = (void *)a1[1];
      a1[1] = (uint64_t)v5;

      [a1 setMescalType:1];
      id v7 = sub_1003640C4(a1[1]);
      [a1 setAccount:v7];

      BOOL v8 = sub_100364488(a1[1]);
      if (!v8)
      {
        BOOL v8 = sub_1000169A4();
      }
      [a1 setClientInfo:v8];
      uint64_t v9 = sub_100364F64(a1[1]);

      if (v9) {
        [a1 setUrlKnownToBeTrusted:sub_100365198(a1[1])];
      }
      [a1 setCompressRequestBody:sub_10036464C(a1[1])];
      uint64_t v10 = sub_100364B04(a1[1]);

      if (v10)
      {
        unint64_t v11 = a1[1];
        if (v11) {
          unint64_t v11 = *(void *)(v11 + 96);
        }
        if (v11 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v11;
        }
        [a1 setRequestEncoding:v12];
      }
      id v13 = sub_1003647EC(a1[1]);
      id v14 = v13;
      if (v13)
      {
        id v15 = [v13 description];
        [a1 setLogUUID:v15];
      }
    }
  }

  return a1;
}

id sub_100267204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:a3 forHTTPHeaderField:a2];
}

RedownloadRecoveryTask *sub_100267224(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init(RedownloadRecoveryTask);
  v3->_installID = (int64_t)[v2 persistentID];
  uint64_t v4 = sub_10026E95C(v2, @"bundle_id");
  bundleID = v3->_bundleID;
  v3->_bundleID = (NSString *)v4;

  uint64_t v6 = sub_10026E95C(v2, @"vendor_name");
  vendorName = v3->_vendorName;
  v3->_vendorName = (NSString *)v6;

  v3->_userInitiated = sub_1002C1E20(v2) ^ 1;
  uint64_t v8 = sub_10026E82C(v2, @"item_id");
  itemID = v3->_itemID;
  v3->_itemID = (NSNumber *)v8;

  uint64_t v10 = sub_10026E9D4(v2, @"external_id");
  externalID = v3->_externalID;
  v3->_externalID = (NSUUID *)v10;

  uint64_t v12 = sub_10026E95C(v2, @"log_code");
  logCode = v3->_logCode;
  v3->_logCode = (NSString *)v12;

  v3->_accountID = (int64_t)sub_10026E91C(v2, @"account_id");
  v3->_softwarePlatform = (int64_t)sub_10026E91C(v2, @"software_platform");
  uint64_t v14 = sub_10026E95C(v2, @"client_id");
  clientID = v3->_clientID;
  v3->_clientID = (NSString *)v14;

  uint64_t v16 = (uint64_t)sub_10026E91C(v2, @"recovery_count");
  v3->_recoveryCount = (v16 & ~(v16 >> 63)) + 1;
  return v3;
}

void sub_100267908(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 items];
  id v7 = [v6 firstObject];

  unsigned int v8 = [v7 success];
  uint64_t v9 = ASDLogHandleForCategory();
  uint64_t v10 = v9;
  if (!v8)
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    unint64_t v11 = [*(id *)(a1 + 32) logKey];
    int v12 = 138412546;
    id v13 = v11;
    __int16 v14 = 2114;
    id v15 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@] Failed to re-purchase failed install error: %{public}@", (uint8_t *)&v12, 0x16u);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v11 = [*(id *)(a1 + 32) logKey];
    int v12 = 138412290;
    id v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Successfully to re-purchased failed install", (uint8_t *)&v12, 0xCu);
LABEL_4:
  }
LABEL_6:
}

id sub_100267B2C()
{
  self;
  v2[0] = @"bundle_id";
  v2[1] = @"clip_affiliate_token";
  v2[2] = @"clip_campaign";
  v2[3] = @"clip_campaign_token";
  v2[4] = @"clip_provider_token";
  v2[5] = @"clip_ref_source";
  v2[6] = @"clip_ref_type";
  v2[7] = @"clip_third_party_with_no_app_referrer";
  id v0 = +[NSArray arrayWithObjects:v2 count:8];
  return v0;
}

id sub_100267BFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (a1)
  {
    uint64_t v6 = (char *)[v4 rangeOfString:@"." options:4];
    if (v6 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      id v7 = (id *)(a1 + 8);
      id v8 = v5;
      id WeakRetained = objc_loadWeakRetained(v7);
      uint64_t v10 = [WeakRetained objectForKeyedSubscript:v8];

      if (objc_opt_isKindOfClass()) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = 0;
      }
      id v12 = v11;
LABEL_24:

      goto LABEL_25;
    }
    id v13 = v6;
    uint64_t v10 = [v5 substringToIndex:v6];
    __int16 v14 = &OBJC_IVAR___XPCClient__clientVersion;
    id v15 = [*(id *)(a1 + 16) objectForKeyedSubscript:v10];
    if (v15)
    {
LABEL_8:
      uint64_t v16 = [v5 substringFromIndex:v13 + 1];
      id v17 = [v15 objectForKeyedSubscript:v16];

      if (objc_opt_isKindOfClass()) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      id v12 = v18;
LABEL_23:

      goto LABEL_24;
    }
    id v15 = objc_loadWeakRetained((id *)(a1 + 8));
    [v10 componentsSeparatedByString:@"."];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    id v19 = [v17 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v32 = v13;
      uint64_t v33 = a1;
      uint64_t v21 = *(void *)v35;
      char v22 = 1;
      while (2)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v15;
        do
        {
          if (*(void *)v35 != v21) {
            objc_enumerationMutation(v17);
          }
          uint64_t v25 = *(void *)(*((void *)&v34 + 1) + 8 * (void)v23);
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          id v15 = [v24 objectForKeyedSubscript:v25];

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {

            id v12 = 0;
            goto LABEL_23;
          }
          v22 &= isKindOfClass ^ 1;
          uint64_t v23 = (char *)v23 + 1;
          uint64_t v24 = v15;
        }
        while (v20 != v23);
        id v20 = [v17 countByEnumeratingWithState:&v34 objects:v38 count:16];
        if (v20) {
          continue;
        }
        break;
      }

      a1 = v33;
      id v13 = v32;
      __int16 v14 = &OBJC_IVAR___XPCClient__clientVersion;
      if ((v22 & 1) == 0) {
        goto LABEL_32;
      }
    }
    else
    {
    }
    __int16 v28 = *(void **)(a1 + v14[168]);
    if (!v28)
    {
      id v29 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:5];
      uint64_t v30 = v14[168];
      id v31 = *(void **)(a1 + v30);
      *(void *)(a1 + v30) = v29;

      __int16 v28 = *(void **)(a1 + v14[168]);
    }
    [v28 setObject:v15 forKeyedSubscript:v10];
LABEL_32:

    goto LABEL_8;
  }
  id v12 = 0;
LABEL_25:

  return v12;
}

id sub_100267F88(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    objc_opt_class();
    sub_100267FFC(v2);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_100267FFC(void *a1)
{
  id v1 = objc_msgSend(a1, "objectForKeyedSubscript:");
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }
  id v3 = v2;

  return v3;
}

id sub_100268048(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_msgSend(v2, "_tcr_associatedReader");
    uint64_t v5 = objc_opt_class();
    sub_100267BFC((uint64_t)v4, v5, v3);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_1002680CC(void *a1, void *a2, id a3)
{
  if (!a1) {
    return 0;
  }
  id v4 = sub_10026811C(a1, a2);
  uint64_t v5 = v4;
  if (v4) {
    a3 = [v4 BOOLValue];
  }

  return a3;
}

id sub_10026811C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    objc_opt_class();
    id v4 = sub_100267FFC(a1);
    if (!v4)
    {
      objc_opt_class();
      uint64_t v5 = sub_100267FFC(a1);
      if (v5)
      {
        id v6 = objc_alloc_init((Class)NSNumberFormatter);
        [v6 setNumberStyle:1];
        id v4 = [v6 numberFromString:v5];
      }
      else
      {
        id v4 = 0;
      }
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_1002681FC(void *a1, void *a2, id a3)
{
  if (!a1) {
    return 0;
  }
  id v4 = sub_10026824C(a1, a2);
  uint64_t v5 = v4;
  if (v4) {
    a3 = [v4 BOOLValue];
  }

  return a3;
}

id sub_10026824C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_msgSend(a1, "_tcr_associatedReader");
    uint64_t v5 = objc_opt_class();
    id v6 = sub_100267BFC((uint64_t)v4, v5, v3);
    if (!v6)
    {
      uint64_t v7 = objc_opt_class();
      id v8 = sub_100267BFC((uint64_t)v4, v7, v3);
      if (v8)
      {
        id v9 = objc_alloc_init((Class)NSNumberFormatter);
        [v9 setNumberStyle:1];
        id v6 = [v9 numberFromString:v8];
      }
      else
      {
        id v6 = 0;
      }
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id sub_100268348(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    objc_opt_class();
    sub_100267FFC(a1);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    if (!v4)
    {
      objc_opt_class();
      uint64_t v5 = sub_100267FFC(a1);
      if (v5) {
        id v4 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v5 options:0];
      }
      else {
        id v4 = 0;
      }
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_100268410(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_msgSend(a1, "_tcr_associatedReader");
    uint64_t v5 = objc_opt_class();
    sub_100267BFC((uint64_t)v4, v5, v3);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      uint64_t v7 = objc_opt_class();
      id v8 = sub_100267BFC((uint64_t)v4, v7, v3);
      if (v8) {
        id v6 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v8 options:0];
      }
      else {
        id v6 = 0;
      }
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id sub_1002684F4(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    objc_opt_class();
    sub_100267FFC(v2);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_100268568(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    objc_opt_class();
    sub_100267FFC(v2);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_1002685DC(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_msgSend(v2, "_tcr_associatedReader");
    uint64_t v5 = objc_opt_class();
    sub_100267BFC((uint64_t)v4, v5, v3);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

double sub_100268660(void *a1, void *a2)
{
  if (!a1) {
    return 0.0;
  }
  id v2 = sub_10026811C(a1, a2);
  [v2 floatValue];
  int v4 = v3;

  LODWORD(result) = v4;
  return result;
}

id sub_1002686AC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    objc_opt_class();
    int v4 = sub_100267FFC(a1);
    if (!v4)
    {
      objc_opt_class();
      uint64_t v5 = sub_100267FFC(a1);
      if (v5)
      {
        uint64_t v8 = 0;
        id v6 = +[NSScanner scannerWithString:v5];
        int v4 = 0;
        if ([v6 scanInteger:&v8])
        {
          int v4 = +[NSNumber numberWithInteger:v8];
        }
      }
      else
      {
        int v4 = 0;
      }
    }
  }
  else
  {
    int v4 = 0;
  }

  return v4;
}

id sub_1002687B0(void *a1, void *a2, id a3)
{
  id v5 = a2;
  if (a1)
  {
    objc_opt_class();
    id v6 = sub_100267FFC(a1);
    if (!v6)
    {
      objc_opt_class();
      id v6 = sub_100267FFC(a1);
    }
    if (objc_opt_respondsToSelector()) {
      a3 = [v6 integerValue];
    }
  }
  else
  {
    a3 = 0;
  }

  return a3;
}

id sub_100268868(void *a1, void *a2, id a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = objc_msgSend(a1, "_tcr_associatedReader");
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = sub_100267BFC((uint64_t)v6, v7, v5);
    if (!v8)
    {
      uint64_t v9 = objc_opt_class();
      uint64_t v8 = sub_100267BFC((uint64_t)v6, v9, v5);
    }
    if (objc_opt_respondsToSelector()) {
      a3 = [v8 integerValue];
    }
  }
  else
  {
    a3 = 0;
  }

  return a3;
}

BOOL sub_100268934(BOOL a1, void *a2)
{
  BOOL v2 = a1;
  if (a1)
  {
    id v3 = a2;
    objc_opt_class();
    int v4 = sub_100267FFC((void *)v2);

    id v5 = +[NSNull null];
    BOOL v2 = v4 == v5;
  }
  return v2;
}

id sub_1002689B4(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    objc_opt_class();
    sub_100267FFC(v2);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_100268A28(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    int v4 = objc_msgSend(v2, "_tcr_associatedReader");
    uint64_t v5 = objc_opt_class();
    sub_100267BFC((uint64_t)v4, v5, v3);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id sub_100268AAC(id result, void *a2)
{
  if (result)
  {
    id v2 = sub_10026811C(result, a2);
    id v3 = [v2 unsignedLongLongValue];

    return v3;
  }
  return result;
}

id sub_100268AEC(void *a1, void *a2)
{
  if (a1)
  {
    id v2 = sub_1002689B4(a1, a2);
    if (v2)
    {
      id v3 = +[NSURL URLWithString:v2];
    }
    else
    {
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_100268C48(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  network_usage_policy_create_client();
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
  [@"com.apple.AppStore" UTF8String];
  id v4 = v2;
  uint64_t v5 = v3;
  int network_use_flow = perform_first_network_use_flow();
  if (network_use_flow)
  {
    int v7 = network_use_flow;
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543874;
      id v12 = (id)objc_opt_class();
      __int16 v13 = 2114;
      id v14 = v4;
      __int16 v15 = 1024;
      int v16 = v7;
      id v10 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@]: Failed to present first usage dialog for: %{public}@ error: %d", buf, 0x1Cu);
    }
  }
  else
  {
    dispatch_time_t v9 = dispatch_time(0, 60000000000);
    dispatch_semaphore_wait(v5, v9);
  }
  network_usage_policy_destroy_client();
}

intptr_t sub_100268E28(uint64_t a1, int a2)
{
  if (a2)
  {
    dispatch_semaphore_t v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = objc_opt_class();
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = 138543618;
      dispatch_time_t v9 = v4;
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      id v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Presenting first usage dialog for: %{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

PurchaseInfo *sub_100268F08(void *a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    id v4 = 0;
    goto LABEL_33;
  }
  id v4 = objc_alloc_init(PurchaseInfo);
  [(PurchaseInfo *)v4 setRequestToken:v3];
  [(PurchaseInfo *)v4 setPurchase:a1];
  uint64_t v5 = [a1 presentingSceneBundleIdentifier];
  [(PurchaseInfo *)v4 setPresentingSceneBundleIdentifier:v5];

  id v6 = [a1 presentingSceneIdentifier];
  [(PurchaseInfo *)v4 setPresentingSceneIdentifier:v6];

  id v7 = objc_alloc((Class)AMSBuyParams);
  int v8 = [a1 buyParameters];
  id v9 = [v7 initWithString:v8];
  [(PurchaseInfo *)v4 setBuyParams:v9];

  __int16 v10 = [a1 metricsOverlay];
  [(PurchaseInfo *)v4 setMetricsOverlay:v10];

  if ([a1 isDSIDLess])
  {
    unsigned int v11 = 1;
  }
  else
  {
    id v12 = [a1 bagKey];
    if (v12)
    {
      __int16 v13 = [a1 bagKey];
      unsigned int v11 = [v13 isEqualToString:@"downloadProduct"];
    }
    else
    {
      unsigned int v11 = 0;
    }
  }
  -[PurchaseInfo setRequireUniversal:](v4, "setRequireUniversal:", [a1 installUniversalVariant]);
  id v14 = [a1 bundleID];
  [(PurchaseInfo *)v4 setBundleID:v14];

  __int16 v15 = [a1 vendorName];
  [(PurchaseInfo *)v4 setVendorName:v15];

  int v16 = [a1 itemName];
  [(PurchaseInfo *)v4 setItemName:v16];

  if ([a1 isUpdate])
  {
    [(PurchaseInfo *)v4 setPurchaseType:4];
    [(PurchaseInfo *)v4 setLogCode:@"UPD"];
    if ([a1 isBackgroundUpdate])
    {
      [(PurchaseInfo *)v4 setDiscretionary:1];
      [(PurchaseInfo *)v4 setUpdateType:1];
      id v17 = &off_10054BDC0;
    }
    else
    {
      [(PurchaseInfo *)v4 setUpdateType:2];
      id v17 = &off_10054BDD8;
    }
  }
  else
  {
    if (!v11)
    {
      [(PurchaseInfo *)v4 setPurchaseType:0];
      long long v45 = [(PurchaseInfo *)v4 buyParams];
      id v46 = [v45 parameterForKey:AMSBuyParamPropertyPricingParameters];
      unsigned int v47 = [v46 isEqualToString:@"GAME"];

      if (v47)
      {
        [(PurchaseInfo *)v4 setArcade:1];
        CFStringRef v48 = @"ABY";
      }
      else
      {
        CFStringRef v48 = @"BUY";
      }
      [(PurchaseInfo *)v4 setLogCode:v48];
      if (v3) {
        goto LABEL_15;
      }
LABEL_42:
      id Property = 0;
      goto LABEL_16;
    }
    [(PurchaseInfo *)v4 setPurchaseType:2];
    [(PurchaseInfo *)v4 setLogCode:@"DIS"];
    id v17 = &off_10054BDF0;
  }
  [(PurchaseInfo *)v4 setMetricsType:v17];
  if (!v3) {
    goto LABEL_42;
  }
LABEL_15:
  id Property = objc_getProperty(v3, v18, 24, 1);
LABEL_16:
  id v20 = Property;
  [(PurchaseInfo *)v4 setExternalID:v20];

  uint64_t v21 = [a1 accountIdentifier];
  char v22 = v21;
  if (v21 && ([v21 isEqualToNumber:&off_10054BE08] & 1) == 0)
  {
    uint64_t v23 = +[ACAccountStore ams_sharedAccountStore];
    uint64_t v24 = objc_msgSend(v23, "ams_iTunesAccountWithDSID:", v22);
    [(PurchaseInfo *)v4 setAccount:v24];
  }
  uint64_t v25 = [a1 affiliateIdentifier];

  if (v25)
  {
    int v26 = [(PurchaseInfo *)v4 buyParams];
    [v26 setParameter:AMSBuyParamPropertyAffiliateId forKey:AMSBuyParamPropertyAffiliateId];
  }
  id v27 = [a1 itemID];
  [(PurchaseInfo *)v4 setItemID:v27];

  __int16 v28 = [(PurchaseInfo *)v4 itemID];

  if (!v28)
  {
    id v29 = [(PurchaseInfo *)v4 buyParams];
    uint64_t v30 = sub_1003D1AC4(v29, AMSBuyParamPropertyItemId);
    [(PurchaseInfo *)v4 setItemID:v30];
  }
  id v31 = v3;
  uint64_t v32 = [a1 clientID];

  if (!v32)
  {
    id v35 = [v31 processInfo];
    if (v35) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  id v33 = objc_alloc((Class)AMSProcessInfo);
  long long v34 = [a1 clientID];
  id v35 = [v33 initWithBundleIdentifier:v34];

  if (!v35)
  {
LABEL_25:
    sub_1000169A4();
    id v35 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_26:

  [(PurchaseInfo *)v4 setClientInfo:v35];
  long long v36 = [(PurchaseInfo *)v4 clientInfo];
  long long v37 = [v36 bundleIdentifier];
  unsigned int v38 = [v37 isEqual:@"com.apple.AppStoreDaemon.ASDAskPermissionExtension"];

  if (v38)
  {
    long long v39 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Updating to use interactive dialogs", v49, 2u);
    }

    [(PurchaseInfo *)v4 setUseLocalAuthAndInteractiveDialogs:1];
  }
  id v40 = [a1 additionalHeaders];
  id v41 = [v40 copy];
  [(PurchaseInfo *)v4 setAdditionalHeaders:v41];

  if ([a1 forceWatchInstall]) {
    [(PurchaseInfo *)v4 setAutoInstallOverride:2];
  }
  [a1 softwarePlatform];
  [(PurchaseInfo *)v4 setExpectedSoftwarePlatform:1];
  -[PurchaseInfo setPurchaseOnly:](v4, "setPurchaseOnly:", [a1 createsJobs] ^ 1);
  id v42 = [a1 appCapabilities];
  id v43 = [v42 copy];
  [(PurchaseInfo *)v4 setAppCapabilities:v43];

  [(PurchaseInfo *)v4 updateGeneratedProperties];
LABEL_33:

  return v4;
}

id sub_100269BC8(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 completeWithError:a2];
  }
  else {
    return [v2 completeWithSuccess];
  }
}

unsigned char *sub_100269C38(unsigned char *result)
{
  if (result)
  {
    id v1 = result;
    [result willChangeValueForKey:@"isFinished"];
    [v1 willChangeValueForKey:@"isExecuting"];
    [v1 lock];
    v1[40] = 0;
    v1[41] = 1;
    [v1 unlock];
    [v1 didChangeValueForKey:@"isExecuting"];
    return [v1 didChangeValueForKey:@"isFinished"];
  }
  return result;
}

void sub_100269DC8(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (a2 > 13999)
  {
    if (a2 == 14000)
    {
      id v4 = &stru_1005242F8;
      int64_t v5 = 15000;
      goto LABEL_12;
    }
    if (a2 != 15000) {
      return;
    }
    id v4 = &stru_100524318;
LABEL_10:
    int64_t v5 = 15001;
    goto LABEL_12;
  }
  if (!a2)
  {
    id v4 = &stru_1005242B8;
    goto LABEL_10;
  }
  if (a2 == 13005)
  {
    id v4 = &stru_1005242D8;
    int64_t v5 = 14000;
LABEL_12:
    *a3 = v5;
    id v6 = *a4;
    *a4 = v4;
  }
}

void sub_100269E48(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS beta_app_info (pid INTEGER PRIMARY KEY, bundle_id TEXT, bundle_version TEXT, bundle_short_version TEXT, email TEXT, expiration_date DATETIME,feedback_enabled INTEGER, has_shared_screenshot_feedback INTEGER, icon_url_template TEXT, last_seen_date DATETIME, launch_screen_enabled INTEGER, localized_display_names JSON, platform INTEGER DEFAULT 0, primary_locale TEXT, seen_count INTEGER, what_to_test JSON);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS beta_app_feedback (pid INTEGER PRIMARY KEY, account_dsid INTEGER NOT NULL, attempt_count INTEGER DEFAULT 0, app_version BLOB, beta_build_group_id TEXT, feedback BLOB, is_app_clip INTEGER DEFAULT 0, log_key TEXT, next_retry_date DATETIME, pending_image_uploads BLOB, state INTEGER, successful_image_uploads BLOB, item_id INTEGER DEFAULT 0);",
      1,
      0);
  }
}

void sub_100269EB4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE beta_app_feedback ADD COLUMN is_app_clip INTEGER;", 1, 0);
  }
}

void sub_100269ED8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE beta_app_info ADD COLUMN platform INTEGER;", 1, 0);
  }
}

void sub_100269EFC(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE beta_app_feedback ADD COLUMN beta_build_group_id TEXT;", 1, 0);
  }
}

void *sub_100269F20(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)PushConnectionMessageHistory;
    a1 = objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      objc_initWeak(&location, a1);
      id v6 = objc_alloc_init(UnfairLock);
      id v7 = (void *)a1[2];
      a1[2] = v6;

      uint64_t v8 = +[NSMutableArray arrayWithCapacity:11];
      id v9 = (void *)a1[3];
      a1[3] = v8;

      __int16 v10 = dispatch_get_global_queue(21, 0);
      objc_copyWeak(v13, &location);
      id v12 = v5;
      v13[1] = a3;
      a1[1] = os_state_add_handler();

      objc_destroyWeak(v13);
      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_10026A078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

_DWORD *sub_10026A08C(uint64_t a1)
{
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = sub_1002AF030((uint64_t)LogPushConnection, *(void **)(a1 + 32), WeakRetained[4]);
    id v4 = WeakRetained[2];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10026A1B0;
    v9[3] = &unk_1005218C0;
    __int16 v10 = WeakRetained;
    id v5 = v3;
    id v11 = v5;
    sub_100010468(v4, v9);
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6 == 2 || v6 == 1) {
      id v7 = sub_1003B5E44(v5);
    }
    else {
      id v7 = 0;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_10026A1B0(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(a1 + 40);
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v6), "description", (void)v9);
        sub_1002B2BFC(v7, v8);

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

void sub_10026A314(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10026A3BC;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    sub_100010468(v5, v6);
  }
}

id sub_10026A3BC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) insertObject:*(void *)(a1 + 40) atIndex:0];
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  if ((unint64_t)result >= 0xB)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 24);
    return [v3 removeLastObject];
  }
  return result;
}

id sub_10026A474(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  id v7 = sub_100316F94(v6, v4);

  sub_10026A4F0((uint64_t)v7, v5);
  return v7;
}

void sub_10026A4F0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

void sub_10026A9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_10026A9F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;
  id v13 = v6;

  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v12 = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_10026AAF8()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026AB9C;
  block[3] = &unk_100521BF0;
  block[4] = self;
  if (qword_1005B0C00 != -1) {
    dispatch_once(&qword_1005B0C00, block);
  }
  id v0 = (void *)qword_1005B0BF8;
  return v0;
}

void sub_10026AB9C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005B0BF8;
  qword_1005B0BF8 = (uint64_t)v1;
}

void sub_10026AE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10026AED8(uint64_t a1)
{
  if (a1)
  {
    id v1 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138543362;
      uint64_t v5 = objc_opt_class();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Synchronizing shared defaults to watch.", (uint8_t *)&v4, 0xCu);
    }

    id v2 = objc_opt_new();
    id v3 = sub_10026AFCC();
    [v2 synchronizeUserDefaultsDomain:@"com.apple.appstored" keys:v3];
  }
}

id sub_10026AFCC()
{
  self;
  v3[0] = @"ForceAppDRMMode";
  v3[1] = @"CellularSettings";
  v3[2] = @"ActiveCompanionSim";
  id v0 = +[NSArray arrayWithObjects:v3 count:3];
  id v1 = +[NSSet setWithArray:v0];

  return v1;
}

void sub_10026B090(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"WatchSettingsManagerSettingsChangedExternallyNotification" object:0];
}

void sub_10026B0E4(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received a notification that preferences have changed externally.", (uint8_t *)&v6, 2u);
  }

  id WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = objc_opt_class();
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Received notification that settings changed externally.", (uint8_t *)&v6, 0xCu);
    }

    dispatch_async(WeakRetained[2], &stru_100524360);
  }
}

id sub_10026B340()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026B3E4;
  block[3] = &unk_100521BF0;
  block[4] = self;
  if (qword_1005B0C08 != -1) {
    dispatch_once(&qword_1005B0C08, block);
  }
  id v0 = (void *)qword_1005B0C10;
  return v0;
}

void sub_10026B3E4()
{
  if (os_variant_has_internal_content() && (self, sub_1003F27DC()))
  {
    uint64_t v0 = sub_1004029D0();
  }
  else
  {
    uint64_t v0 = sub_100291B48();
  }
  id v1 = (void *)qword_1005B0C10;
  qword_1005B0C10 = v0;
}

void sub_10026B46C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;

  uint64_t v6 = a2[1];
  a2[1] = 0;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
}

void sub_10026B4C4(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 200), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026B538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026B554(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 216), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026B5A0(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 216), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026B614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026B630(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 232), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026B67C(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 232), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026B6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026B70C(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 248), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026B758(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 248), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026B7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026B7E8(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 264), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026B834(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 264), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026B8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026B8C4(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 280), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026B910(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 280), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026B984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10026B9A0(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 296), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026BA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026BA30(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 312), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026BA7C(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 312), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026BAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026BB0C(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 328), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026BB58(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 328), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026BBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026BBE8(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 344), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026BC34(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 344), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026BCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026BCC4(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 360), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026BD10(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 360), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026BD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10026BDA0(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 376), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026BE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026BE30(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 392), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026BE7C(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 392), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026BEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026BF0C(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 408), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

uint64_t sub_10026BF58(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 424), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026BFA4(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 424), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026C034(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 440), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026C080(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 440), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10026C110(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 456), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026C1A0(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 472), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026C1EC(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 472), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026C27C(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 488), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026C2C8(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 488), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026C358(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 504), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026C3A4(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 504), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026C434(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 520), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026C480(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 520), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026C510(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 536), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026C55C(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 536), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026C5EC(uint64_t result)
{
  if (result)
  {
    objc_copyCppObjectAtomic(&v1, (const void *)(result + 552), (void (__cdecl *)(void *, const void *))sub_10000CF18);
    return v1;
  }
  return result;
}

void sub_10026C638(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 552), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10026C6C8(uint64_t a1, void *a2, void *a3)
{
  src[0] = a2;
  src[1] = a3;
  if (a1)
  {
    objc_copyCppObjectAtomic((void *)(a1 + 568), src, (void (__cdecl *)(void *, const void *))sub_10026B46C);
  }
  else
  {
  }
}

void sub_10026C73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_10026CA24()
{
  self;
  if (qword_1005B0C20 != -1) {
    dispatch_once(&qword_1005B0C20, &stru_100524380);
  }
  uint64_t v0 = (void *)qword_1005B0C18;
  return v0;
}

void sub_10026CA7C(id a1)
{
  uint64_t v1 = objc_alloc_init(DeviceStateMonitor);
  id v2 = (void *)qword_1005B0C18;
  qword_1005B0C18 = (uint64_t)v1;
}

void sub_10026CD3C(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (v1)
  {
    unsigned int v3 = sub_10026D430(*(id *)(a1 + 32), @"Migration");
    uint64_t v4 = ASDLogHandleForCategory();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Device] Data migration already completed", (uint8_t *)buf, 2u);
      }

      v1[20] = 1;
    }
    else
    {
      if (v5)
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Device] Waiting for data migration to complete", (uint8_t *)buf, 2u);
      }

      uint64_t v6 = dispatch_get_global_queue(21, 0);
      id v17 = _NSConcreteStackBlock;
      uint64_t v18 = 3221225472;
      id v19 = sub_10026DAAC;
      id v20 = &unk_100521388;
      v21[0] = v1;
      dispatch_async(v6, &v17);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7)
    {
      *(_DWORD *)(v7 + 16) = -1;
      objc_initWeak(buf, (id)v7);
      uint64_t v8 = *(NSObject **)(v7 + 8);
      id v17 = _NSConcreteStackBlock;
      uint64_t v18 = 3221225472;
      id v19 = sub_10026DCCC;
      id v20 = &unk_100523F28;
      objc_copyWeak(v21, buf);
      uint32_t v9 = notify_register_dispatch("com.apple.mobile.keybagd.lock_status", (int *)(v7 + 16), v8, &v17);
      if (v9)
      {
        uint64_t v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v23 = 67109120;
          uint32_t v24 = v9;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[Device] Registration for device lock status notification failed: %u", v23, 8u);
        }
      }
      else
      {
        sub_10026DD18(v7);
      }
      objc_destroyWeak(v21);
      objc_destroyWeak(buf);
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11)
      {
        id v12 = +[NSNotificationCenter defaultCenter];
        uint64_t v13 = BYSetupAssistantFinishedDarwinNotification;
        [v12 addObserver:v11 selector:"_handleSetupAssistantNotification:" name:BYSetupAssistantFinishedDarwinNotification object:0];
        if ((BYSetupAssistantNeedsToRun() & 1) == 0)
        {
          [v12 removeObserver:v11 name:v13 object:0];
          *(unsigned char *)(v11 + 23) = 1;
          id v14 = ASDLogHandleForCategory();
          BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);

          if (v15)
          {
            int v16 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(v17) = 0;
              _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[Device] Setup assistant is already completed", (uint8_t *)&v17, 2u);
            }
          }
        }
      }
    }
  }
}

void sub_10026D08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_10026D0B8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10026D178;
  v4[3] = &unk_100521988;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10026D178(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 20);
  return result;
}

BOOL sub_10026D18C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10026D24C;
  v4[3] = &unk_100521988;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10026D24C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 21);
  return result;
}

BOOL sub_10026D260(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10026D320;
  v4[3] = &unk_100521988;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10026D320(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 22);
  return result;
}

BOOL sub_10026D334(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10026D3F4;
  v4[3] = &unk_100521988;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

id sub_10026D3F4(uint64_t a1)
{
  id result = sub_10026D430(*(id *)(a1 + 32), @"restoreFailures");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_10026D430(id result, void *a2)
{
  if (result)
  {
    id v2 = a2;
    unsigned int v3 = sub_1003F3354();
    uint64_t v4 = [v3 objectForKeyedSubscript:v2];

    id v5 = [v4 BOOLValue];
    return v5;
  }
  return result;
}

void sub_10026D4A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10026D54C;
    v6[3] = &unk_100521AE0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_10026D54C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = sub_10026D430(*(id *)(a1 + 32), @"fsEntitlements");
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);
  return v3(v1, v2);
}

BOOL sub_10026D598(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10026D658;
  v4[3] = &unk_100521988;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10026D658(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 23);
  return result;
}

void sub_10026D66C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10026D6E8;
    block[3] = &unk_100521388;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10026D6E8(uint64_t a1)
{
  if ((sub_10026D430(*(id *)(a1 + 32), @"fsEntitlements") & 1) == 0)
  {
    sub_10026D7B8(*(void *)(a1 + 32), @"fsEntitlements");
    BOOL v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 138543362;
      CFStringRef v4 = @"fsEntitlements";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Device] Marked once per boot complete for: %{public}@", (uint8_t *)&v3, 0xCu);
    }
  }
}

void sub_10026D7B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v7 = v3;
    CFStringRef v4 = sub_1003F3354();
    id v5 = [v4 mutableCopy];

    uint64_t v6 = [v5 objectForKeyedSubscript:v7];

    if (!v6) {
      [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:v7];
    }
    sub_1003F33A0((uint64_t)AppDefaultsManager, v5);

    id v3 = v7;
  }
}

void sub_10026D868(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10026D8E4;
    block[3] = &unk_100521388;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10026D8E4(uint64_t a1)
{
  if ((sub_10026D430(*(id *)(a1 + 32), @"restoreFailures") & 1) == 0)
  {
    sub_10026D7B8(*(void *)(a1 + 32), @"restoreFailures");
    BOOL v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = 138543362;
      CFStringRef v4 = @"restoreFailures";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[Device] Marked once per boot complete for: %{public}@", (uint8_t *)&v3, 0xCu);
    }
  }
}

void sub_10026D9B4(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = dispatch_get_global_queue(17, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10026DA4C;
    block[3] = &unk_100521388;
    block[4] = a1;
    dispatch_async(v2, block);
  }
}

void sub_10026DA4C(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"DeviceStateDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_10026DAAC(uint64_t a1)
{
  uint64_t v8 = 0;
  uint32_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  id v2 = (void (*)(void))off_1005B0C28;
  uint64_t v11 = off_1005B0C28;
  if (!off_1005B0C28)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10026DFF4;
    v7[3] = &unk_1005243D0;
    v7[4] = &v8;
    sub_10026DFF4((uint64_t)v7);
    id v2 = (void (*)(void))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v2)
  {
    dlerror();
    id v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v5);
  }
  v2();
  uint64_t v3 = *(void *)(a1 + 32);
  CFStringRef v4 = *(NSObject **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026DBF0;
  block[3] = &unk_100521388;
  block[4] = v3;
  dispatch_async(v4, block);
}

void sub_10026DBF0(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Device] Data migration has now completed", v3, 2u);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 20) = 1;
  sub_10026D7B8(*(void *)(a1 + 32), @"Migration");
  sub_10026D9B4(*(void *)(a1 + 32));
}

void sub_10026DC84(id a1)
{
  sub_10035E2CC();
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  sub_10035ED60((uint64_t)v1);
}

void sub_10026DCCC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    sub_10026DD18((uint64_t)WeakRetained);
    sub_10026D9B4((uint64_t)v2);
    id WeakRetained = v2;
  }
}

void sub_10026DD18(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) != -1)
  {
    if (!*(unsigned char *)(a1 + 22))
    {
      int v2 = MKBDeviceUnlockedSinceBoot();
      *(unsigned char *)(a1 + 22) = v2 == 1;
      if (v2 == 1)
      {
        uint64_t v3 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[Device] Device has been unlocked since boot", buf, 2u);
        }

        CFStringRef v4 = dispatch_get_global_queue(21, 0);
        dispatch_async(v4, &stru_1005243A8);
      }
    }
    int v5 = MKBGetDeviceLockState();
    BOOL v6 = !v5 || v5 == 3;
    BOOL v7 = !v6;
    *(unsigned char *)(a1 + 21) = v7;
    uint64_t v8 = ASDLogHandleForCategory();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);

    if (v9)
    {
      int v10 = *(unsigned __int8 *)(a1 + 21);
      uint64_t v11 = ASDLogHandleForCategory();
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
      if (v10)
      {
        if (v12)
        {
          __int16 v16 = 0;
          uint64_t v13 = "[Device] Device has been locked";
          id v14 = (uint8_t *)&v16;
LABEL_21:
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, v13, v14, 2u);
        }
      }
      else if (v12)
      {
        __int16 v15 = 0;
        uint64_t v13 = "[Device] Device has been unlocked";
        id v14 = (uint8_t *)&v15;
        goto LABEL_21;
      }
    }
  }
}

void sub_10026DF04(uint64_t a1)
{
  int v2 = +[NSNotificationCenter defaultCenter];
  [v2 removeObserver:*(void *)(a1 + 32) name:BYSetupAssistantFinishedDarwinNotification object:0];
  *(unsigned char *)(*(void *)(a1 + 32) + 23) = 1;
  uint64_t v3 = ASDLogHandleForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);

  if (v4)
  {
    int v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[Device] Setup assistant has been completed", v6, 2u);
    }
  }
  sub_10026D9B4(*(void *)(a1 + 32));
}

void *sub_10026DFF4(uint64_t a1)
{
  v5[0] = 0;
  if (!qword_1005B0C30)
  {
    v5[1] = _NSConcreteStackBlock;
    void v5[2] = 3221225472;
    v5[3] = sub_10026E134;
    void v5[4] = &unk_100521BF0;
    v5[5] = v5;
    long long v6 = off_1005243F0;
    uint64_t v7 = 0;
    qword_1005B0C30 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1005B0C30;
    if (qword_1005B0C30)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1005B0C30;
LABEL_5:
  id result = dlsym(v2, "DMPerformMigrationIfNeeded");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1005B0C28 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10026E134()
{
  uint64_t result = _sl_dlopen();
  qword_1005B0C30 = result;
  return result;
}

id sub_10026E3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16);
  if (a3) {
    return [v3 setObject:a3 forKey:a2];
  }
  else {
    return [v3 removeObjectForKey:a2];
  }
}

id sub_10026E7EC(id result, uint64_t a2)
{
  if (result)
  {
    int v2 = sub_10026E82C(result, a2);
    id v3 = [v2 BOOLValue];

    return v3;
  }
  return result;
}

id sub_10026E82C(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_10026E8A4(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_10026E91C(id result, uint64_t a2)
{
  if (result)
  {
    int v2 = sub_10026E82C(result, a2);
    id v3 = [v2 integerValue];

    return v3;
  }
  return result;
}

id sub_10026E95C(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_10026E9D4(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_10026EA4C(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_10026EAC4(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

PurchaseHistoryHideShowRequestContext *sub_10026EC0C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  self;
  int v10 = [PurchaseHistoryHideShowRequestContext alloc];
  id v11 = v9;
  id v12 = v8;
  id v13 = v7;
  if (v10)
  {
    v17.receiver = v10;
    v17.super_class = (Class)PurchaseHistoryHideShowRequestContext;
    int v10 = (PurchaseHistoryHideShowRequestContext *)objc_msgSendSuper2(&v17, "init");
    if (v10)
    {
      id v14 = (NSArray *)[v11 copy];
      items = v10->_items;
      v10->_items = v14;

      objc_storeStrong((id *)&v10->_account, a3);
      objc_storeStrong((id *)&v10->_clientInfo, a4);
    }
  }

  return v10;
}

id *sub_10026ED60(id *a1, void *a2)
{
  int v2 = a1;
  if (a1)
  {
    id v4 = NSTemporaryDirectory();
    int v5 = +[NSProcessInfo processInfo];
    long long v6 = [v5 globallyUniqueString];

    id v7 = +[NSString stringWithFormat:@"%@%@", v4, v6];
    id v8 = v7;
    v15.receiver = v2;
    v15.super_class = (Class)ODRPreallocatedFile;
    id v9 = (id *)objc_msgSendSuper2(&v15, "init");
    int v10 = v9;
    if (v9)
    {
      objc_storeStrong(v9 + 6, v7);
      *(_OWORD *)(v10 + 1) = 0u;
      *(_OWORD *)(v10 + 3) = 0u;
      v10[1] = (id)0x300000002;
      v10[2] = 0;
      v10[3] = a2;
      int v11 = open((const char *)[v8 UTF8String], 514, 0);
      *((_DWORD *)v10 + 10) = v11;
      if (!v11)
      {
        uint64_t v14 = *__error();
        CFStringRef v12 = @"Failed to create preallocation file with error %d.";
        goto LABEL_7;
      }
      if (fcntl(v11, 42, v10 + 1) == -1)
      {
        close(*((_DWORD *)v10 + 10));
        CFStringRef v12 = @"Failed to preallocate file.";
LABEL_7:
        +[NSException raise:@"ODRPreallocatedFileException", v12, v14 format];
      }
    }

    int v2 = v10;
  }
  return v2;
}

uint64_t start()
{
  _set_user_dir_suffix();
  uint64_t v0 = dispatch_get_global_queue(25, 0);
  id v1 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, v0);

  dispatch_source_set_event_handler(v1, &stru_100524408);
  dispatch_activate(v1);
  int v2 = dispatch_get_global_queue(21, 0);
  dispatch_async(v2, &stru_100524428);

  CFRunLoopRun();
  return 0;
}

void sub_10026EFF0(id a1)
{
  id v1 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v2 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Received SIGTERM, stopping appstored", v2, 2u);
  }

  exit(0);
}

void sub_10026F054(id a1)
{
  int v2 = sub_1003A0B6C();
  sub_1003A0D94((uint64_t)v2);
}

void sub_10026F10C(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  uint64_t v4 = self;
  uint64_t v5 = sub_10026F188(v4, a3);
  long long v6 = (void *)v5;
  if (v5)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    if (v7) {
      [*(id *)(v7 + 8) addOperation:v8];
    }
  }
}

id sub_10026F188(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  if (qword_1005B0C48 != -1) {
    dispatch_once(&qword_1005B0C48, &stru_100524448);
  }
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x3032000000;
  int v10 = sub_100017F98;
  int v11 = sub_100017B88;
  id v12 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026F45C;
  block[3] = &unk_100524470;
  block[4] = &v7;
  void block[5] = a2;
  block[6] = v3;
  dispatch_sync((dispatch_queue_t)qword_1005B0C38, block);
  id v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_10026F2B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  uint64_t v7 = self;
  sub_10026F188(v7, a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  sub_10026F32C((uint64_t)v8, v6, a4);
}

void sub_10026F32C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v7 = a2;
    id v5 = a2;
    id v6 = +[NSArray arrayWithObjects:&v7 count:1];
    if (v4) {
      objc_msgSend(*(id *)(v4 + 8), "addOperations:waitUntilFinished:", v6, a3, v7);
    }
  }
}

void sub_10026F3D8(id a1)
{
  id v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.ondemandresources.ODRTaskQueue.managementQueue", v1);
  uint64_t v3 = (void *)qword_1005B0C38;
  qword_1005B0C38 = (uint64_t)v2;

  id v4 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:5];
  id v5 = (void *)qword_1005B0C40;
  qword_1005B0C40 = (uint64_t)v4;
}

void sub_10026F45C(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)qword_1005B0C40;
  uint64_t v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    uint64_t v7 = objc_alloc_init(ODRTaskQueue);
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    self;
    unint64_t v12 = __ROR8__(v10 - 9, 3);
    if (v12 > 3) {
      id v13 = "default";
    }
    else {
      id v13 = off_100524490[v12];
    }
    uint64_t v14 = +[NSString stringWithFormat:@"com.apple.ondemandresources.ODRTaskQueue.%sQueue", v13];
    if (v11)
    {
      uint64_t v15 = *(void *)(v11 + 8);
      if (v15) {
        [*(id *)(v15 + 8) setName:v14];
      }
    }

    uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 8);
      if (v17)
      {
        [*(id *)(v17 + 8) setQualityOfService:*(void *)(a1 + 40)];
        uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      }
    }
    uint64_t v18 = (void *)qword_1005B0C40;
    id v19 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
    [v18 setObject:v16 forKeyedSubscript:v19];
  }
}

XPCServiceBroker *sub_10026F618(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  id v6 = [XPCServiceBroker alloc];
  id v7 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:v4];

  id v8 = v5;
  id v9 = v7;
  if (v6)
  {
    v16.receiver = v6;
    v16.super_class = (Class)XPCServiceBroker;
    id v6 = (XPCServiceBroker *)objc_msgSendSuper2(&v16, "init");
    if (v6)
    {
      uint64_t v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v11 = dispatch_queue_create("com.apple.appstored.XPCServiceBroker", v10);
      dispatchQueue = v6->_dispatchQueue;
      v6->_dispatchQueue = (OS_dispatch_queue *)v11;

      uint64_t v13 = objc_opt_new();
      activeClients = v6->_activeClients;
      v6->_activeClients = (NSMutableSet *)v13;

      objc_storeStrong((id *)&v6->_catalog, a2);
      objc_storeStrong((id *)&v6->_listener, v7);
      [(NSXPCListener *)v6->_listener setDelegate:v6];
      [(NSXPCListener *)v6->_listener resume];
      notify_post(ASDServiceBrokerAvailableNotification);
    }
  }

  return v6;
}

void sub_10026F76C(uint64_t a1)
{
  sub_1002D5888(*(void **)(a1 + 32));
  dispatch_queue_t v2 = sub_10001A0C8();
  sub_1003D69C4((uint64_t)v2, *(void **)(a1 + 32));

  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(NSObject **)(v3 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10026F82C;
  v5[3] = &unk_1005218C0;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 32);
  dispatch_async(v4, v5);
}

id sub_10026F82C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
}

id sub_10026F8A0()
{
  self;
  v2[0] = @"app_adam_id";
  v2[1] = @"ad_network_id";
  v2[2] = @"campaign_id";
  v2[3] = @"source_identifier";
  v2[4] = @"impression_id";
  v2[5] = @"web_impression_id";
  v2[6] = @"timestamp";
  v2[7] = @"attribution_signature";
  void v2[8] = @"source_app_adam_id";
  v2[9] = @"source_domain";
  v2[10] = @"fidelity_type";
  v2[11] = @"version";
  v2[12] = @"local_timestamp";
  v2[13] = @"interaction_type";
  uint64_t v0 = +[NSArray arrayWithObjects:v2 count:14];
  return v0;
}

void sub_10026FB40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ASDErrorWithSafeUserInfo();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id *sub_10026FBA0(id *a1)
{
  if (a1)
  {
    a1 = [a1[5] lowercaseString];
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_10026FBD4(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 88)) {
      return ASDInstallAttributionVersionCreateFromString();
    }
    else {
      return 100;
    }
  }
  return result;
}

id sub_10026FBEC(void *a1)
{
  if (a1)
  {
    a1 = sub_10026FC20((uint64_t)a1, 0);
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10026FC20(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_opt_new();
    [v4 setObject:v3 forKeyedSubscript:@"id"];

    [v4 setObject:*(void *)(a1 + 16) forKeyedSubscript:@"ad-network-id"];
    if (*(void *)(a1 + 88) && ASDInstallAttributionVersionCreateFromString() >= 400)
    {
      id v5 = +[NSNumber numberWithInteger:*(void *)(a1 + 32)];
      CFStringRef v6 = @"source-identifier";
    }
    else
    {
      id v5 = +[NSNumber numberWithInteger:*(void *)(a1 + 24)];
      CFStringRef v6 = @"campaign-id";
    }
    [v4 setObject:v5 forKeyedSubscript:v6];

    [v4 setObject:*(void *)(a1 + 8) forKeyedSubscript:@"adam-id"];
    id v7 = [*(id *)(a1 + 40) lowercaseString];
    [v4 setObject:v7 forKeyedSubscript:@"impression-id"];

    [v4 setObject:*(void *)(a1 + 48) forKeyedSubscript:@"web-impression-id"];
    [v4 setObject:*(void *)(a1 + 80) forKeyedSubscript:@"signature"];
    [v4 setObject:*(void *)(a1 + 56) forKeyedSubscript:@"origin-adam-id"];
    [v4 setObject:*(void *)(a1 + 64) forKeyedSubscript:@"source-domain"];
    [v4 setObject:*(void *)(a1 + 72) forKeyedSubscript:@"timestamp"];
    [v4 setObject:*(void *)(a1 + 88) forKeyedSubscript:@"version"];
    id v8 = +[NSNumber numberWithInteger:*(void *)(a1 + 104)];
    [v4 setObject:v8 forKeyedSubscript:@"fidelity-type"];

    [v4 setObject:*(void *)(a1 + 112) forKeyedSubscript:@"interaction-type"];
    [v4 setObject:*(void *)(a1 + 120) forKeyedSubscript:@"environment"];
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

uint64_t sub_10026FE1C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_10026FE28(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t sub_10026FE34(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

id sub_10026FE40(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_opt_new();
    [v2 setObject:*(void *)(a1 + 16) forKeyedSubscript:@"ad-network-id"];
    if (*(void *)(a1 + 88) && ASDInstallAttributionVersionCreateFromString() >= 400)
    {
      id v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 32)];
      CFStringRef v4 = @"source-identifier";
    }
    else
    {
      id v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 24)];
      CFStringRef v4 = @"campaign-id";
    }
    [v2 setObject:v3 forKeyedSubscript:v4];

    [v2 setObject:*(void *)(a1 + 8) forKeyedSubscript:@"adam-id"];
    id v5 = [*(id *)(a1 + 40) lowercaseString];
    [v2 setObject:v5 forKeyedSubscript:@"impression-id"];

    [v2 setObject:*(void *)(a1 + 48) forKeyedSubscript:@"web-impression-id"];
    [v2 setObject:*(void *)(a1 + 80) forKeyedSubscript:@"signature"];
    [v2 setObject:*(void *)(a1 + 56) forKeyedSubscript:@"origin-adam-id"];
    [v2 setObject:*(void *)(a1 + 64) forKeyedSubscript:@"source-domain"];
    [v2 setObject:*(void *)(a1 + 72) forKeyedSubscript:@"timestamp"];
    [v2 setObject:*(void *)(a1 + 88) forKeyedSubscript:@"version"];
    CFStringRef v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 104)];
    [v2 setObject:v6 forKeyedSubscript:@"fidelity-type"];

    [v2 setObject:*(void *)(a1 + 112) forKeyedSubscript:@"interaction-type"];
    [v2 setObject:*(void *)(a1 + 120) forKeyedSubscript:@"environment"];
    [v2 setObject:*(void *)(a1 + 96) forKeyedSubscript:@"local-timestamp"];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void *sub_10027002C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_opt_new();
  CFStringRef v4 = [v2 objectForKeyedSubscript:@"signature"];
  sub_100263C48((uint64_t)v3, v4);

  id v5 = sub_1002686AC(v2, @"source_identifier");
  id v6 = [v5 integerValue];
  if (v3) {
    v3[4] = v6;
  }

  id v7 = sub_1002686AC(v2, @"itunes_item_id");
  sub_100263BD8((uint64_t)v3, v7);

  id v8 = [v2 objectForKeyedSubscript:@"ad_network_id"];
  sub_100263BE8((uint64_t)v3, v8);

  id v9 = [v2 objectForKeyedSubscript:@"nonce"];
  sub_100263BF8((uint64_t)v3, v9);

  uint64_t v10 = [v2 objectForKeyedSubscript:@"timestamp"];
  sub_100263C38((uint64_t)v3, v10);

  dispatch_queue_t v11 = [v2 objectForKeyedSubscript:@"source_domain"];
  sub_100263C28((uint64_t)v3, v11);

  unint64_t v12 = [v2 objectForKeyedSubscript:@"version"];
  sub_100263C58((uint64_t)v3, v12);

  if (v3) {
    v3[13] = 1;
  }
  sub_100270214((uint64_t)v3, ASDInstallAttributionInteractionTypeClick);
  uint64_t v13 = +[SKANEnvironmentHelper environmentForParams:v3];
  sub_100270224((uint64_t)v3, v13);

  return v3;
}

void sub_100270214(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 112), a2);
  }
}

void sub_100270224(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 120), a2);
  }
}

uint64_t sub_100270234(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = *(id *)(a1 + 80);
    if (v2)
    {
      id v3 = *(id *)(v1 + 16);
      if (v3)
      {
        CFStringRef v4 = [*(id *)(v1 + 40) lowercaseString];
        if (v4)
        {
          id v5 = *(id *)(v1 + 48);
          if (v5)
          {
            id v6 = *(id *)(v1 + 72);
            uint64_t v1 = v6 && *(void *)(v1 + 64) && *(void *)(v1 + 88) != 0;
          }
          else
          {
            uint64_t v1 = 0;
          }
        }
        else
        {
          uint64_t v1 = 0;
        }
      }
      else
      {
        uint64_t v1 = 0;
      }
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  return v1;
}

void sub_10027030C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 96), a2);
  }
}

ODRContentHash *sub_1002703D8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [v2 objectForKeyedSubscript:@"strategy"];
  CFStringRef v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v5 = [v2 objectForKeyedSubscript:@"label"];
  }
  id v6 = v5;

  id v7 = [v2 objectForKeyedSubscript:@"hash"];
  if ([v6 length] && objc_msgSend(v7, "length"))
  {
    id v8 = objc_alloc_init(ODRContentHash);
    uint64_t v10 = v8;
    if (v8)
    {
      objc_setProperty_atomic_copy(v8, v9, v6, 16);
      objc_setProperty_atomic_copy(v10, v11, v7, 8);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void *sub_1002704DC(void *a1)
{
  if (a1)
  {
    v3[0] = @"strategy";
    v3[1] = @"digest";
    uint64_t v1 = a1[1];
    v4[0] = a1[2];
    v4[1] = v1;
    a1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
  }
  return a1;
}

id sub_1002705B4()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100270658;
  block[3] = &unk_100521BF0;
  block[4] = self;
  if (qword_1005B0C68 != -1) {
    dispatch_once(&qword_1005B0C68, block);
  }
  uint64_t v0 = (void *)qword_1005B0C60;
  return v0;
}

void sub_100270658(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005B0C60;
  qword_1005B0C60 = (uint64_t)v1;
}

void *sub_1002707CC(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x3032000000;
    objc_super v16 = sub_100017FA8;
    uint64_t v17 = sub_100017B90;
    id v18 = 0;
    id v7 = a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100270910;
    v9[3] = &unk_100523220;
    void v9[4] = a1;
    id v10 = v5;
    id v11 = v6;
    unint64_t v12 = &v13;
    dispatch_sync(v7, v9);
    a1 = (id)v14[5];

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_100270910(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id v12 = 0;
  CFStringRef v4 = sub_100270A3C(v2, v3, &v12);
  id v5 = v12;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      uint64_t v16 = v11;
      __int16 v17 = 2114;
      id v18 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error getting display names for bundleID %{public}@: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v7 = sub_100270B08(*(void **)(a1 + 32), v4, *(void **)(a1 + 48));
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

id sub_100270A3C(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v4 = a2;
    id v9 = 0;
    id v5 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v4 allowPlaceholder:0 error:&v9];

    id v6 = v9;
    if (v6)
    {
      ASDErrorWithSafeUserInfo();
      uint64_t v7 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v7 = sub_1002766D8(v5, a3);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7;
}

void *sub_100270B08(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x3032000000;
    __int16 v15 = sub_100017FA8;
    uint64_t v16 = sub_100017B90;
    id v17 = 0;
    uint64_t v7 = (void *)a1[4];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100276138;
    v9[3] = &unk_100524538;
    uint64_t v11 = &v12;
    id v10 = v5;
    [v7 readUsingSession:v9];
    a1 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_100270C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100270C4C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x3032000000;
    uint64_t v16 = sub_100017FA8;
    id v17 = sub_100017B90;
    id v18 = 0;
    uint64_t v7 = a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100270D90;
    v9[3] = &unk_100523220;
    void v9[4] = a1;
    id v10 = v5;
    id v11 = v6;
    uint64_t v12 = &v13;
    dispatch_sync(v7, v9);
    a1 = (id)v14[5];

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_100270D90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id v12 = 0;
  id v4 = sub_100270EBC(v2, v3, &v12);
  id v5 = v12;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      uint64_t v16 = v11;
      __int16 v17 = 2114;
      id v18 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error getting display names for bundleURL %{public}@: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v7 = sub_100270B08(*(void **)(a1 + 32), v4, *(void **)(a1 + 48));
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

id sub_100270EBC(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v4 = a2;
    id v9 = 0;
    id v5 = [objc_alloc((Class)LSApplicationRecord) initWithURL:v4 allowPlaceholder:0 error:&v9];

    id v6 = v9;
    if (v6)
    {
      ASDErrorWithSafeUserInfo();
      uint64_t v7 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v7 = sub_1002766D8(v5, a3);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7;
}

void *sub_100270F88(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x3032000000;
    uint64_t v16 = sub_100017FA8;
    __int16 v17 = sub_100017B90;
    id v18 = 0;
    uint64_t v7 = a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002710CC;
    v9[3] = &unk_100523220;
    void v9[4] = a1;
    id v10 = v5;
    id v11 = v6;
    id v12 = &v13;
    dispatch_sync(v7, v9);
    a1 = (id)v14[5];

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_1002710CC(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = (void *)a1[5];
  id v13 = 0;
  id v4 = sub_100270A3C(v2, v3, &v13);
  id v5 = v13;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[5];
      uint64_t v7 = a1[6];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error getting email address for bundleID %{public}@: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    id v9 = *(void **)(a1[4] + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100271238;
    v10[3] = &unk_100524538;
    uint64_t v12 = a1[7];
    id v11 = v4;
    [v9 readUsingSession:v10];
    id v6 = v11;
  }
}

void sub_100271238(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003B5B60(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void *sub_10027128C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x3032000000;
    __int16 v16 = sub_100017FA8;
    uint64_t v17 = sub_100017B90;
    id v18 = 0;
    uint64_t v7 = a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002713D0;
    v9[3] = &unk_100523220;
    void v9[4] = a1;
    id v10 = v5;
    id v11 = v6;
    uint64_t v12 = &v13;
    dispatch_sync(v7, v9);
    a1 = (id)v14[5];

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_1002713D0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (void *)a1[5];
  id v13 = 0;
  uint64_t v4 = sub_100270EBC(v2, v3, &v13);
  id v5 = v13;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[5];
      uint64_t v7 = a1[6];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error getting email address for bundleURL %{public}@: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    id v9 = *(void **)(a1[4] + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10027153C;
    v10[3] = &unk_100524538;
    uint64_t v12 = a1[7];
    id v11 = v4;
    [v9 readUsingSession:v10];
    id v6 = v11;
  }
}

void sub_10027153C(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003B5B60(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100271590(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100271680;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v7;
    id v13 = v8;
    id v14 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_100271680(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v17 = 0;
  uint64_t v4 = sub_100270A3C(v2, v3, &v17);
  id v5 = (uint64_t (*)(uint64_t, uint64_t))v17;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2114;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error getting feedback metadata for bundleID %{public}@: %{public}@", buf, 0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    id v19 = sub_100017FA8;
    id v20 = sub_100017B90;
    id v21 = 0;
    id v7 = *(void **)(*(void *)(a1 + 32) + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1002718EC;
    v14[3] = &unk_100524538;
    __int16 v16 = buf;
    id v15 = v4;
    [v7 readUsingSession:v14];
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100271940;
    block[3] = &unk_100524560;
    id v12 = *(id *)(a1 + 56);
    id v13 = buf;
    dispatch_async(v8, block);

    _Block_object_dispose(buf, 8);
  }
}

void sub_1002718CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002718EC(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003B540C(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_100271940(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

void sub_100271960(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100271A50;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v7;
    id v13 = v8;
    id v14 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_100271A50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v17 = 0;
  uint64_t v4 = sub_100270EBC(v2, v3, &v17);
  id v5 = (uint64_t (*)(uint64_t, uint64_t))v17;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2114;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error getting feedback metadata for bundleURL %{public}@: %{public}@", buf, 0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    id v19 = sub_100017FA8;
    id v20 = sub_100017B90;
    id v21 = 0;
    id v7 = *(void **)(*(void *)(a1 + 32) + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100271CBC;
    v14[3] = &unk_100524538;
    __int16 v16 = buf;
    id v15 = v4;
    [v7 readUsingSession:v14];
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100271D10;
    block[3] = &unk_100524560;
    id v12 = *(id *)(a1 + 56);
    id v13 = buf;
    dispatch_async(v8, block);

    _Block_object_dispose(buf, 8);
  }
}

void sub_100271C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100271CBC(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003B540C(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_100271D10(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

void sub_100271D30(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100271E20;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v7;
    id v13 = v8;
    id v14 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_100271E20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v21 = 0;
  uint64_t v4 = sub_100270A3C(v2, v3, &v21);
  id v5 = (uint64_t (*)(uint64_t, uint64_t))v21;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2114;
      uint64_t v23 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error getting launch info for bundleID %{public}@: %{public}@", buf, 0x20u);
    }

    id v7 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002720F8;
    block[3] = &unk_100521AE0;
    id v20 = *(id *)(a1 + 56);
    id v19 = v5;
    dispatch_async(v7, block);
  }
  else
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    uint64_t v23 = sub_100017FA8;
    uint32_t v24 = sub_100017B90;
    id v25 = 0;
    id v8 = *(void **)(*(void *)(a1 + 32) + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100272110;
    v15[3] = &unk_100524538;
    id v17 = buf;
    id v16 = v4;
    [v8 readUsingSession:v15];
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100272164;
    v12[3] = &unk_100524560;
    id v13 = *(id *)(a1 + 56);
    id v14 = buf;
    dispatch_async(v9, v12);

    _Block_object_dispose(buf, 8);
  }
}

void sub_1002720D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002720F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100272110(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003B566C(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_100272164(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

void sub_100272184(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100272274;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v7;
    id v13 = v8;
    id v14 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_100272274(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v21 = 0;
  uint64_t v4 = sub_100270EBC(v2, v3, &v21);
  id v5 = (uint64_t (*)(uint64_t, uint64_t))v21;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2114;
      uint64_t v23 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error getting launch info for bundleURL %{public}@: %{public}@", buf, 0x20u);
    }

    id v7 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10027254C;
    block[3] = &unk_100521AE0;
    id v20 = *(id *)(a1 + 56);
    id v19 = v5;
    dispatch_async(v7, block);
  }
  else
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    uint64_t v23 = sub_100017FA8;
    uint32_t v24 = sub_100017B90;
    id v25 = 0;
    id v8 = *(void **)(*(void *)(a1 + 32) + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100272564;
    v15[3] = &unk_100524538;
    id v17 = buf;
    id v16 = v4;
    [v8 readUsingSession:v15];
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1002725B8;
    v12[3] = &unk_100524560;
    id v13 = *(id *)(a1 + 56);
    id v14 = buf;
    dispatch_async(v9, v12);

    _Block_object_dispose(buf, 8);
  }
}

void sub_10027252C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10027254C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100272564(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003B566C(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_1002725B8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

void sub_1002725D8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (a1)
  {
    id v8 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002726A0;
    block[3] = &unk_1005221F0;
    void block[4] = a1;
    id v10 = v6;
    id v11 = v7;
    dispatch_async(v8, block);
  }
}

void sub_1002726A0(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3032000000;
  v10[3] = sub_100017FA8;
  void v10[4] = sub_100017B90;
  id v11 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100272814;
  v7[3] = &unk_100524538;
  id v9 = v10;
  id v8 = *(id *)(a1 + 40);
  [v2 readUsingSession:v7];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100272868;
  v4[3] = &unk_100524560;
  id v5 = *(id *)(a1 + 48);
  id v6 = v10;
  dispatch_async(v3, v4);

  _Block_object_dispose(v10, 8);
}

void sub_1002727FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100272814(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1003B5748(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_100272868(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

uint64_t sub_100272888(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    id v14 = &v13;
    uint64_t v15 = 0x2020000000;
    char v16 = 0;
    id v7 = *(NSObject **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100272990;
    v9[3] = &unk_100523220;
    void v9[4] = a1;
    id v10 = v5;
    id v11 = v6;
    id v12 = &v13;
    dispatch_sync(v7, v9);
    a1 = *((unsigned char *)v14 + 24) != 0;

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_100272990(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v9 = 0;
  uint64_t v4 = sub_100270A3C(v2, v3, &v9);
  id v5 = v9;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v11 = v7;
      __int16 v12 = 2114;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      id v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error checking feedback enabled state for bundleID %{public}@: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = sub_100272AB0(*(void *)(a1 + 32), v4, *(void **)(a1 + 48));
  }
}

uint64_t sub_100272AB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000;
    char v15 = 0;
    uint64_t v7 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10027669C;
    v9[3] = &unk_100524538;
    uint64_t v11 = &v12;
    id v10 = v5;
    [v7 readUsingSession:v9];
    a1 = *((unsigned char *)v13 + 24) != 0;

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_100272BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100272BB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2020000000;
    char v16 = 0;
    uint64_t v7 = *(NSObject **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100272CC0;
    v9[3] = &unk_100523220;
    void v9[4] = a1;
    id v10 = v5;
    id v11 = v6;
    uint64_t v12 = &v13;
    dispatch_sync(v7, v9);
    a1 = *((unsigned char *)v14 + 24) != 0;

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_100272CC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v9 = 0;
  uint64_t v4 = sub_100270EBC(v2, v3, &v9);
  id v5 = v9;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v11 = v7;
      __int16 v12 = 2114;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      id v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error checking feedback enabled state for bundleURL %{public}@: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = sub_100272AB0(*(void *)(a1 + 32), v4, *(void **)(a1 + 48));
  }
}

uint64_t sub_100272DE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    __int16 v14 = &v13;
    uint64_t v15 = 0x2020000000;
    char v16 = 0;
    uint64_t v7 = *(NSObject **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100272EE8;
    v9[3] = &unk_100523220;
    void v9[4] = a1;
    id v10 = v5;
    id v11 = v6;
    __int16 v12 = &v13;
    dispatch_sync(v7, v9);
    a1 = *((unsigned char *)v14 + 24) != 0;

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_100272EE8(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (void *)a1[5];
  id v13 = 0;
  uint64_t v4 = sub_100270A3C(v2, v3, &v13);
  id v5 = v13;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[5];
      uint64_t v7 = a1[6];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error checking launch screen enabled state for bundleID %{public}@: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    id v9 = *(void **)(a1[4] + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100273054;
    v10[3] = &unk_100524538;
    uint64_t v12 = a1[7];
    id v11 = v4;
    [v9 readUsingSession:v10];
    id v6 = v11;
  }
}

id sub_100273054(uint64_t a1, void *a2)
{
  id result = sub_1003B5D7C(a2, *(void **)(a1 + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

uint64_t sub_100273090(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    __int16 v14 = &v13;
    uint64_t v15 = 0x2020000000;
    char v16 = 0;
    uint64_t v7 = *(NSObject **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100273198;
    v9[3] = &unk_100523220;
    void v9[4] = a1;
    id v10 = v5;
    id v11 = v6;
    uint64_t v12 = &v13;
    dispatch_sync(v7, v9);
    a1 = *((unsigned char *)v14 + 24) != 0;

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_100273198(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (void *)a1[5];
  id v13 = 0;
  uint64_t v4 = sub_100270EBC(v2, v3, &v13);
  id v5 = v13;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[5];
      uint64_t v7 = a1[6];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ error checking launch screen enabled state for bundleURL %{public}@: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    id v9 = *(void **)(a1[4] + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100273304;
    v10[3] = &unk_100524538;
    uint64_t v12 = a1[7];
    id v11 = v4;
    [v9 readUsingSession:v10];
    id v6 = v11;
  }
}

id sub_100273304(uint64_t a1, void *a2)
{
  id result = sub_1003B5D7C(a2, *(void **)(a1 + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100273340(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100273408;
    block[3] = &unk_1005212D8;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_100273408(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v45 = 0;
  uint64_t v4 = sub_100270A3C(v2, v3, &v45);
  id v5 = v45;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v5;
      uint64_t v8 = "Error getting proxy for beta app with bundleID %{public}@: %{public}@";
      id v9 = v6;
      uint32_t v10 = 22;
LABEL_12:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
    }
  }
  else if (v4 {
         && (uint64_t v11 = *(void *)(a1 + 32),
  }
             sub_100416894((uint64_t)XPCRequestToken, 1),
             uint64_t v12 = objc_claimAutoreleasedReturnValue(),
             LODWORD(v11) = sub_100272AB0(v11, v4, v12),
             v12,
             v11))
  {
    id v13 = *(void **)(a1 + 32);
    __int16 v14 = sub_100416894((uint64_t)XPCRequestToken, 1);
    id v6 = sub_100270B08(v13, v4, v14);

    uint64_t v46 = 0;
    unsigned int v47 = &v46;
    uint64_t v48 = 0x2050000000;
    uint64_t v15 = (void *)qword_1005B0C50;
    uint64_t v49 = qword_1005B0C50;
    if (!qword_1005B0C50)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_100277AD4;
      id v52 = &unk_1005243D0;
      uint64_t v53 = &v46;
      sub_100277AD4((uint64_t)buf);
      uint64_t v15 = (void *)v47[3];
    }
    id v16 = v15;
    _Block_object_dispose(&v46, 8);
    uint64_t v17 = [v6 localizedNames];
    __int16 v18 = [v17 allKeys];
    id v19 = [v6 primaryLocale];
    long long v39 = [v16 preferredLocaleKeyFromAvailableKeys:v18 primaryLocaleKey:v19];

    id v20 = [v6 localizedNames];
    id v21 = [v20 objectForKeyedSubscript:v39];
    char v22 = v21;
    if (v21)
    {
      id v38 = v21;
    }
    else
    {
      uint32_t v24 = [v4 iTunesMetadata];
      id v38 = [v24 itemName];
    }
    id v25 = objc_alloc((Class)AMSDialogRequest);
    int v26 = ASDLocalizedString();
    id v27 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v26, v38);
    __int16 v28 = ASDLocalizedString();
    id v29 = [v25 initWithTitle:v27 message:v28];

    uint64_t v30 = ASDLocalizedString();
    id v31 = +[AMSDialogAction actionWithTitle:v30 style:2];

    uint64_t v32 = ASDLocalizedString();
    id v33 = +[AMSDialogAction actionWithTitle:v32 style:0];

    v50[0] = v31;
    v50[1] = v33;
    long long v34 = +[NSArray arrayWithObjects:v50 count:2];
    [v29 setButtonActions:v34];

    [v29 setDefaultAction:v33];
    id v35 = +[KeepAlive keepAliveWithName:@"com.apple.appstored.BetaAppCrashed"];
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_100273950;
    v40[3] = &unk_1005230C8;
    id v41 = v33;
    id v42 = *(id *)(a1 + 40);
    id v43 = *(id *)(a1 + 48);
    id v44 = v35;
    id v36 = v35;
    id v37 = v33;
    sub_10033CE18((uint64_t)InteractiveRequestPresenter, v29, v40);
  }
  else
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v23;
      uint64_t v8 = "Failed to find a beta app with bundleID: %{public}@";
      id v9 = v6;
      uint32_t v10 = 12;
      goto LABEL_12;
    }
  }
}

void sub_100273930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100273950(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 selectedActionIdentifier];
  uint64_t v8 = [*(id *)(a1 + 32) identifier];
  unsigned int v9 = [v7 isEqualToString:v8];

  uint32_t v10 = ASDLogHandleForCategory();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 40);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "User pressed share on dialog for crash of beta app with bundleID: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v21 = 0;
    char v22 = &v21;
    uint64_t v23 = 0x2050000000;
    id v13 = (void *)qword_1005B0C70;
    uint64_t v24 = qword_1005B0C70;
    if (!qword_1005B0C70)
    {
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      int v26 = sub_100277CC4;
      id v27 = &unk_1005243D0;
      __int16 v28 = &v21;
      sub_100277CC4((uint64_t)&buf);
      id v13 = (void *)v22[3];
    }
    __int16 v14 = v13;
    _Block_object_dispose(&v21, 8);
    id v15 = [v14 alloc];
    uint32_t v10 = objc_msgSend(v15, "initWithBundleIdentifier:", *(void *)(a1 + 40), v21);
    [v10 setIncidentId:*(void *)(a1 + 48)];
    uint64_t v21 = 0;
    char v22 = &v21;
    uint64_t v23 = 0x2050000000;
    id v16 = (void *)qword_1005B0C78;
    uint64_t v24 = qword_1005B0C78;
    if (!qword_1005B0C78)
    {
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      int v26 = sub_100277D34;
      id v27 = &unk_1005243D0;
      __int16 v28 = &v21;
      sub_100277D34((uint64_t)&buf);
      id v16 = (void *)v22[3];
    }
    uint64_t v17 = v16;
    _Block_object_dispose(&v21, 8);
    id v18 = [v17 alloc];
    id v19 = objc_msgSend(v18, "initWithConfiguration:", v10, v21);
    [v19 presentFeedbackViewController];
  }
  else if (v11)
  {
    uint64_t v20 = *(void *)(a1 + 40);
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v20;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "User pressed cancel on dialog for crash of beta app with bundleID: %{public}@", (uint8_t *)&buf, 0xCu);
  }
}

void sub_100273C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100273C2C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100273CA8;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100273CA8(uint64_t a1)
{
}

void sub_100273CB4(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = sub_100275FB8(a1, a2);
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          sub_1002767FC((uint64_t)a1, *(void **)(*((void *)&v8 + 1) + 8 * (void)v7));
          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }
  }
}

void sub_100273DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100273E48;
    v6[3] = &unk_100524700;
    id v7 = v3;
    [v5 modifyUsingTransaction:v6];
  }
}

BOOL sub_100273E48(uint64_t a1, BOOL a2)
{
  return sub_1003EA5F8(a2, *(void *)(a1 + 32));
}

void sub_100273E58(uint64_t a1, char a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    uint64_t v12 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100273F50;
    block[3] = &unk_1005245B0;
    void block[4] = a1;
    char v17 = a2;
    id v14 = v9;
    id v15 = v10;
    id v16 = v11;
    dispatch_async(v12, block);
  }
}

void sub_100273F50(uint64_t a1)
{
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x3032000000;
  id v18 = sub_100017FA8;
  id v19 = sub_100017B90;
  id v20 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10027418C;
  v11[3] = &unk_100524588;
  char v14 = *(unsigned char *)(a1 + 64);
  id v12 = *(id *)(a1 + 40);
  id v13 = &v15;
  [v2 modifyUsingTransaction:v11];
  if (v16[5])
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v7 = v16[5];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v22 = v5;
      __int16 v23 = 2114;
      uint64_t v24 = v6;
      __int16 v25 = 2114;
      uint64_t v26 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}@ error updating feedback enabled state for version %{public}@: %{public}@", buf, 0x20u);
    }
  }
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100274238;
  block[3] = &unk_100524560;
  id v9 = *(id *)(a1 + 56);
  id v10 = &v15;
  dispatch_async(v4, block);

  _Block_object_dispose(&v15, 8);
}

void sub_100274168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10027418C(uint64_t a1, BOOL a2)
{
  BOOL v3 = sub_1003E9EF8(a2, *(unsigned __int8 *)(a1 + 48), *(void **)(a1 + 32));
  if (!v3)
  {
    id v4 = +[NSString stringWithFormat:@"Failed to find a beta app with version %@", *(void *)(a1 + 32)];
    uint64_t v5 = ASDErrorWithDescription();
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  return v3;
}

uint64_t sub_100274238(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100274254(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100274344;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v7;
    id v13 = v8;
    id v14 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_100274344(uint64_t a1)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x3032000000;
  uint64_t v17 = sub_100017FA8;
  id v18 = sub_100017B90;
  id v19 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100274594;
  v11[3] = &unk_100524620;
  id v12 = *(id *)(a1 + 40);
  id v13 = &v14;
  [v2 modifyUsingTransaction:v11];
  if (v15[5])
  {
    BOOL v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v6 = [*(id *)(a1 + 40) version];
      uint64_t v7 = v15[5];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v21 = v5;
      __int16 v22 = 2114;
      __int16 v23 = v6;
      __int16 v24 = 2114;
      uint64_t v25 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}@ error updating launch info for version %{public}@: %{public}@", buf, 0x20u);
    }
  }
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10027463C;
  v8[3] = &unk_100524560;
  id v9 = *(id *)(a1 + 56);
  id v10 = &v14;
  dispatch_async(v4, v8);

  _Block_object_dispose(&v14, 8);
}

void sub_10027456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100274594(uint64_t a1, void *a2)
{
  BOOL v3 = sub_1003EA03C(a2, *(void **)(a1 + 32));
  if (!v3)
  {
    id v4 = +[NSString stringWithFormat:@"Failed to save launch info %@", *(void *)(a1 + 32)];
    uint64_t v5 = ASDErrorWithDescription();
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  return v3;
}

uint64_t sub_10027463C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100274658(uint64_t a1, char a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    id v12 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100274750;
    block[3] = &unk_1005245B0;
    void block[4] = a1;
    char v17 = a2;
    id v14 = v9;
    id v15 = v10;
    id v16 = v11;
    dispatch_async(v12, block);
  }
}

void sub_100274750(uint64_t a1)
{
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x3032000000;
  id v18 = sub_100017FA8;
  id v19 = sub_100017B90;
  id v20 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10027498C;
  v11[3] = &unk_100524588;
  char v14 = *(unsigned char *)(a1 + 64);
  id v12 = *(id *)(a1 + 40);
  id v13 = &v15;
  [v2 modifyUsingTransaction:v11];
  if (v16[5])
  {
    BOOL v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v7 = v16[5];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v22 = v5;
      __int16 v23 = 2114;
      uint64_t v24 = v6;
      __int16 v25 = 2114;
      uint64_t v26 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}@ error updating launch screen enabled state for version %{public}@: %{public}@", buf, 0x20u);
    }
  }
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100274A38;
  block[3] = &unk_100524560;
  id v9 = *(id *)(a1 + 56);
  id v10 = &v15;
  dispatch_async(v4, block);

  _Block_object_dispose(&v15, 8);
}

void sub_100274968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10027498C(uint64_t a1, BOOL a2)
{
  BOOL v3 = sub_1003EA4F0(a2, *(unsigned __int8 *)(a1 + 48), *(void **)(a1 + 32));
  if (!v3)
  {
    id v4 = +[NSString stringWithFormat:@"Failed to find a beta app with version %@", *(void *)(a1 + 32)];
    uint64_t v5 = ASDErrorWithDescription();
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  return v3;
}

uint64_t sub_100274A38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100274A54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100274B44;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v7;
    id v13 = v8;
    id v14 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_100274B44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = [*(id *)(a1 + 40) bundleID];
  id v17 = 0;
  id v4 = sub_100270A3C(v2, v3, &v17);
  id v5 = v17;

  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    id v8 = [v4 URL];
    sub_100274D38(v6, v7, v8, *(void **)(a1 + 48), *(void **)(a1 + 56));
  }
  else
  {
    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      id v12 = [*(id *)(a1 + 40) bundleID];
      id v13 = [v5 localizedDescription];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v19 = v11;
      __int16 v20 = 2114;
      uint64_t v21 = v12;
      __int16 v22 = 2114;
      __int16 v23 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@ error submitting feedback for %{public}@: %{public}@", buf, 0x20u);
    }
    id v10 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100275330;
    block[3] = &unk_100521AE0;
    id v16 = *(id *)(a1 + 56);
    id v15 = v5;
    dispatch_async(v10, block);
  }
}

void sub_100274D38(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    id v13 = +[ACAccountStore ams_sharedAccountStore];
    id v14 = objc_msgSend(v13, "ams_activeiTunesAccount");

    if (v14)
    {
      id v15 = objc_msgSend(v14, "ams_DSID");

      if (v15)
      {
        id v16 = v14;
LABEL_12:
        uint64_t v21 = objc_msgSend(v16, "ams_DSID");
        BOOL v22 = v21 == 0;

        if (!v22)
        {
          uint64_t v50 = 0;
          id v51 = &v50;
          uint64_t v52 = 0x2020000000;
          uint64_t v53 = 0;
          __int16 v23 = *(void **)(a1 + 32);
          v45[0] = _NSConcreteStackBlock;
          v45[1] = 3221225472;
          v45[2] = sub_1002775E4;
          v45[3] = &unk_100524670;
          uint64_t v49 = &v50;
          id v24 = v9;
          id v46 = v24;
          id v47 = v10;
          id v16 = v16;
          id v48 = v16;
          [v23 modifyUsingTransaction:v45];
          if (v51[3])
          {
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x3032000000;
            id v56 = sub_100017FA8;
            id v57 = sub_100017B90;
            id v58 = 0;
            __int16 v25 = *(void **)(a1 + 32);
            v44[0] = _NSConcreteStackBlock;
            v44[1] = 3221225472;
            v44[2] = sub_100277674;
            v44[3] = &unk_100524698;
            v44[4] = buf;
            void v44[5] = &v50;
            [v25 readUsingSession:v44];
            uint64_t v26 = *(void **)(*(void *)&buf[8] + 40);
            if (v26) {
              sub_100276B0C(a1, v26);
            }
            id v27 = *(NSObject **)(a1 + 24);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1002776D0;
            block[3] = &unk_100521F40;
            id v43 = v12;
            dispatch_async(v27, block);

            _Block_object_dispose(buf, 8);
          }
          else
          {
            uint64_t v30 = [v24 appVersion];
            id v31 = +[NSString stringWithFormat:@"Failed to save feedback for app version %@", v30];

            uint64_t v32 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              id v36 = [v24 appVersion];
              *(_DWORD *)long long buf = 138543874;
              *(void *)&uint8_t buf[4] = v11;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v36;
              *(_WORD *)&buf[22] = 2114;
              id v56 = v31;
              _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%{public}@ error submitting feedback for version %{public}@: %{public}@", buf, 0x20u);
            }
            id v33 = *(NSObject **)(a1 + 24);
            v39[0] = _NSConcreteStackBlock;
            v39[1] = 3221225472;
            v39[2] = sub_1002776E4;
            v39[3] = &unk_100521AE0;
            id v40 = v31;
            id v41 = v12;
            long long v34 = v31;
            dispatch_async(v33, v39);
          }
          _Block_object_dispose(&v50, 8);
LABEL_24:

          goto LABEL_25;
        }
LABEL_17:
        __int16 v28 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          id v35 = [v9 appVersion];
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v35;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Unable to submit feedback for version %{public}@ because there is no active account", buf, 0xCu);
        }
        id v29 = *(NSObject **)(a1 + 24);
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        v37[2] = sub_100277754;
        v37[3] = &unk_100521F40;
        id v38 = v12;
        dispatch_async(v29, v37);

        goto LABEL_24;
      }
    }
    id v54 = 0;
    sub_100275D44(a1, v14, &v54);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    id v17 = v54;

    id v18 = ASDLogHandleForCategory();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      if (!v19) {
        goto LABEL_11;
      }
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v20 = "Attempt to establish primary account resulted in error: %{public}@";
    }
    else
    {
      if (!v19) {
        goto LABEL_11;
      }
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v20 = "Logged into account: %{public}@";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
LABEL_11:

    if (!v16) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
LABEL_25:
}

void sub_1002752F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_100275330(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) localizedDescription];
  uint64_t v2 = ASDErrorWithDescription();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_1002753B4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    id v13 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002754C4;
    block[3] = &unk_100522A68;
    void block[4] = a1;
    id v15 = v9;
    id v16 = v10;
    id v17 = v11;
    id v18 = v12;
    dispatch_async(v13, block);
  }
}

void sub_1002754C4(uint64_t a1)
{
}

void sub_1002754D8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    id v13 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002755E8;
    block[3] = &unk_100522A68;
    void block[4] = a1;
    id v15 = v9;
    id v16 = v10;
    id v17 = v11;
    id v18 = v12;
    dispatch_async(v13, block);
  }
}

void sub_1002755E8(uint64_t a1)
{
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x3032000000;
  id v18 = sub_100017FA8;
  BOOL v19 = sub_100017B90;
  id v20 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100275830;
  v11[3] = &unk_1005245D8;
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v14 = &v15;
  [v2 modifyUsingTransaction:v11];
  if (v16[5])
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v7 = v16[5];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v22 = v5;
      __int16 v23 = 2114;
      uint64_t v24 = v6;
      __int16 v25 = 2114;
      uint64_t v26 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}@ error updating test notes for version %{public}@: %{public}@", buf, 0x20u);
    }
  }
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002758E8;
  block[3] = &unk_100524560;
  id v9 = *(id *)(a1 + 64);
  id v10 = &v15;
  dispatch_async(v4, block);

  _Block_object_dispose(&v15, 8);
}

void sub_10027580C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100275830(uint64_t a1, BOOL a2)
{
  if (a2 && sub_1003E9F78(a2, *(void **)(a1 + 32), @"what_to_test", *(void **)(a1 + 40))) {
    return 1;
  }
  id v4 = +[NSString stringWithFormat:@"Failed to find a beta app with version %@", *(void *)(a1 + 40)];
  uint64_t v5 = ASDErrorWithDescription();
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return 0;
}

uint64_t sub_1002758E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100275904(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100275980;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100275980(uint64_t a1)
{
}

void sub_100275988(uint64_t a1)
{
  if (a1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x3032000000;
    __int16 v23 = sub_100017FA8;
    uint64_t v24 = sub_100017B90;
    id v25 = 0;
    uint64_t v2 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1002777C4;
    void v19[3] = &unk_1005246C0;
    uint8_t v19[4] = &v20;
    [v2 readUsingSession:v19];
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [(id)v21[5] count];
      *(_DWORD *)long long buf = 134217984;
      id v28 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %lu pending TestFlight feedback submissions", buf, 0xCu);
    }

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = (id)v21[5];
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v26 count:16];
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          id v11 = sub_1002337F8(v10);
          id v12 = v11;
          if (v11 && (objc_msgSend(v11, "timeIntervalSinceNow", (void)v15), v13 >= 0.0))
          {
            if (!v7 || [v12 compare:v7] == (id)-1)
            {
              id v14 = v12;

              uint64_t v7 = v14;
            }
          }
          else
          {
            sub_100276B0C(a1, v10);
          }
        }
        id v6 = [v5 countByEnumeratingWithState:&v15 objects:v26 count:16];
      }
      while (v6);

      if (v7) {
        sub_100276470(v7);
      }
    }
    else
    {

      uint64_t v7 = 0;
    }

    _Block_object_dispose(&v20, 8);
  }
}

void sub_100275C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100275C4C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          sub_100273CB4(a1, *(void **)(*((void *)&v9 + 1) + 8 * (void)v8));
          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }
  }
}

id sub_100275D44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = objc_opt_new();
  [v6 setAuthenticationType:1];
  [v6 setDebugReason:@"TestFlight Feedback"];
  uint64_t v7 = [v5 username];

  ASDLocalizedString();
  if (v7) {
    uint64_t v8 = {;
  }
    long long v9 = [v5 username];
    long long v10 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v8, v9);
    [v6 setReason:v10];
  }
  else {
    uint64_t v8 = {;
  }
    [v6 setReason:v8];
  }

  id v11 = objc_alloc((Class)AMSAuthenticateTask);
  long long v12 = sub_10030B11C();
  id v13 = [v11 initWithAccount:v5 options:v6 bag:v12];

  [v13 setDelegate:a1];
  id v14 = [v13 performAuthentication];
  id v19 = 0;
  long long v15 = [v14 resultWithError:&v19];
  id v16 = v19;

  if (v15)
  {
    long long v17 = [v15 account];
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  long long v17 = 0;
  if (a3)
  {
LABEL_6:
    ASDErrorWithSafeUserInfo();
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_7:

  return v17;
}

BOOL sub_100275F30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [BetaAppFeedbackEntity alloc];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [v3 connection];

  uint64_t v7 = [(SQLiteEntity *)v4 initWithPersistentID:v5 onConnection:v6];
  BOOL v8 = [(SQLiteEntity *)v7 deleteFromDatabase];

  return v8;
}

void *sub_100275FB8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x3032000000;
    id v13 = sub_100017FA8;
    id v14 = sub_100017B90;
    id v15 = 0;
    uint64_t v5 = (void *)a1[4];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002760E4;
    v7[3] = &unk_100524538;
    long long v9 = &v10;
    id v8 = v3;
    [v5 readUsingSession:v7];
    a1 = (id)v11[5];

    _Block_object_dispose(&v10, 8);
  }

  return a1;
}

void sub_1002760CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002760E4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003B5134(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100276138(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003B5AB8(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10027618C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = *(void **)(a2 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3;
  unsigned int v5 = sub_10023342C(v4);
  uint64_t v6 = v5 + 1;
  uint64_t v7 = sub_10030B11C();
  id v8 = sub_10030BA90((uint64_t)v7, @"testflight-visual-feedback/backoff-delays", &off_10054DDD0);

  if ((int)v6 > 1) {
    int v9 = v5 + 1;
  }
  else {
    int v9 = 1;
  }
  unint64_t v10 = (v9 - 1);
  if ((unint64_t)[v8 count] <= v10)
  {
  }
  else
  {
    id v11 = [v8 objectAtIndexedSubscript:v10];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v12 = v11;
    }
    else {
      id v12 = 0;
    }

    if (v12)
    {
      id v13 = [v12 integerValue];
      sub_10030B11C();
      id v14 = (id *)objc_claimAutoreleasedReturnValue();
      unsigned int v15 = sub_10030BCBC(v14, @"testflight-visual-feedback/backoff-random-range", 10);

      id v16 = +[NSDate dateWithTimeIntervalSinceNow:(double)(60 * ((uint64_t)v13 + (int)arc4random_uniform(v15 + 1)))];
      sub_100233B24(v4, v6);
      if (v4) {
        [(LogKey *)v4 setValue:v16 forProperty:@"next_retry_date"];
      }
      long long v17 = [v16 dateByAddingTimeInterval:10.0];
      sub_100276470(v17);

      sub_100276554(a1, v4);
      goto LABEL_18;
    }
  }
  long long v18 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = sub_100233690(v4);
    uint64_t v20 = [v19 appVersion];
    LODWORD(v23) = 67109378;
    HIDWORD(v23) = v6;
    LOWORD(v24) = 2114;
    *(void *)((char *)&v24 + 2) = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No delay specified for attempt %d for %{public}@, deleting it", (uint8_t *)&v23, 0x12u);
  }
  id v21 = [(LogKey *)v4 databaseID];
  uint64_t v22 = *(void **)(a1 + 32);
  __int16 v23 = _NSConcreteStackBlock;
  *(void *)&long long v24 = 3221225472;
  *((void *)&v24 + 1) = sub_100275F30;
  id v25 = &unk_1005245F8;
  id v26 = v21;
  [v22 modifyUsingTransaction:&v23];
  id v12 = 0;
LABEL_18:
}

void sub_100276470(void *a1)
{
  id v1 = a1;
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138543362;
    id v5 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scheduling next submission attempt for %{public}@", (uint8_t *)&v4, 0xCu);
  }

  uint64_t v3 = sub_10020E0BC();
  sub_10020F30C(v3, 8, @"com.apple.appstored.submitTestFlightFeedback", (uint64_t)v1, @"Next TestFlightFeedback Retry Date");
}

void sub_100276554(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002775D4;
  v6[3] = &unk_100524700;
  id v5 = v3;
  id v7 = v5;
  [v4 modifyUsingTransaction:v6];
}

void sub_100276694(uint64_t a1)
{
}

id sub_10027669C(uint64_t a1, void *a2)
{
  id result = sub_1003B5CCC(a2, *(void **)(a1 + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_1002766D8(void *a1, void *a2)
{
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    if ([v3 isBeta])
    {
      id v5 = v4;
      goto LABEL_7;
    }
    uint64_t v6 = [v4 URL];
    id v7 = +[NSString stringWithFormat:@"Failed to find a beta app: %@", v6];
  }
  else
  {
    uint64_t v6 = [0 bundleIdentifier];
    id v7 = +[NSString stringWithFormat:@"Failed to find a valid app: %@", v6];
  }
  ASDErrorWithDescription();
  *a2 = (id)objc_claimAutoreleasedReturnValue();

  id v5 = 0;
LABEL_7:

  return v5;
}

void sub_1002767FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v17 = v3;
    int v4 = [v3 bundleID];
    uint64_t v18 = 0;
    id v5 = sub_100270A3C(a1, v4, &v18);
    uint64_t v6 = v18;

    if (v5)
    {
      id v7 = [v17 bundleID];
      id v8 = [v5 bundleIdentifier];
      if ([v7 isEqualToString:v8])
      {
        int v9 = [v17 bundleVersion];
        unint64_t v10 = [v5 exactBundleVersion];
        if ([v9 isEqualToString:v10])
        {
          id v11 = [v17 shortVersion];
          id v12 = [v5 shortVersionString];
          unsigned __int8 v13 = [v11 isEqualToString:v12];
        }
        else
        {
          unsigned __int8 v13 = 0;
        }

        if (!v6 && (v13 & 1) != 0) {
          goto LABEL_8;
        }
      }
      else
      {
      }
    }
    id v14 = v17;
    v22[0] = 0;
    v22[1] = v22;
    v22[2] = 0x2020000000;
    char v23 = 0;
    unsigned int v15 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100276A14;
    void v19[3] = &unk_100524620;
    id v21 = v22;
    id v16 = v14;
    id v20 = v16;
    [v15 modifyUsingTransaction:v19];

    _Block_object_dispose(v22, 8);
LABEL_8:

    id v3 = v17;
  }
}

void sub_1002769FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100276A14(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1003EA570(a2, *(void **)(a1 + 32));
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    return 1;
  }
  int v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to find a beta app with version %{public}@", (uint8_t *)&v6, 0xCu);
  }

  return *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 0;
}

void sub_100276B0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 8);
  uint64_t v5 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 databaseID]);
  LOBYTE(v4) = [v4 containsObject:v5];

  if ((v4 & 1) == 0)
  {
    [*(id *)(a1 + 16) lock];
    int v6 = *(void **)(a1 + 8);
    uint64_t v7 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 databaseID]);
    [v6 addObject:v7];

    [*(id *)(a1 + 16) unlock];
    id v8 = sub_1002C4DB4((uint64_t)TestFlightFeedbackUploadTask, *(void **)(a1 + 32), v3);
    objc_initWeak(&location, v8);
    objc_initWeak(&from, (id)a1);
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    unsigned __int8 v13 = sub_100276CF0;
    id v14 = &unk_100524648;
    objc_copyWeak(&v15, &from);
    objc_copyWeak(&v16, &location);
    [v8 setCompletionBlock:&v11];
    uint64_t v9 = sub_1002B2A3C();
    unint64_t v10 = (void *)v9;
    if (v9) {
      objc_msgSend(*(id *)(v9 + 8), "addOperation:", v8, v11, v12, v13, v14);
    }

    objc_destroyWeak(&v16);
    objc_destroyWeak(&v15);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);
  }
}

void sub_100276CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_100276CF0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained) {
    goto LABEL_39;
  }
  [WeakRetained[2] lock];
  id v3 = WeakRetained[1];
  if (v2)
  {
    id v4 = v2[6];
    uint64_t v5 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v4 databaseID]);
    [v3 removeObject:v5];

    [WeakRetained[2] unlock];
    id Property = objc_getProperty(v2, v6, 32, 1);
  }
  else
  {
    id v69 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [0 databaseID]);
    [v3 removeObject:v69];

    [WeakRetained[2] unlock];
    id Property = 0;
  }
  id v8 = Property;

  if (!v8) {
    goto LABEL_39;
  }
  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    if (v2) {
      id v52 = v2[6];
    }
    else {
      id v52 = 0;
    }
    uint64_t v53 = (_TtC9appstored6LogKey *)v52;
    id v54 = sub_100233614(v53);
    if (v2) {
      id v55 = v2[6];
    }
    else {
      id v55 = 0;
    }
    id v56 = v55;
    unsigned int v58 = sub_10023342C(v56);
    if (v2) {
      id v59 = objc_getProperty(v2, v57, 32, 1);
    }
    else {
      id v59 = 0;
    }
    id v60 = v59;
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v54;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v58;
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v60;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@]: Error uploading TestFlightFeedback (attempt %d): %{public}@", buf, 0x1Cu);
  }
  if (v2) {
    id v11 = objc_getProperty(v2, v10, 32, 1);
  }
  else {
    id v11 = 0;
  }
  id v12 = v11;
  uint64_t v13 = (uint64_t)[v12 code];

  if (v13 <= 400)
  {
    uint64_t v14 = (uint64_t)WeakRetained;
    if (v13 == -1009)
    {
      long long v34 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        if (v2) {
          id v63 = v2[6];
        }
        else {
          id v63 = 0;
        }
        uint64_t v64 = (_TtC9appstored6LogKey *)v63;
        long long v65 = sub_100233614(v64);
        if (v2) {
          id v66 = v2[6];
        }
        else {
          id v66 = 0;
        }
        id v67 = v66;
        id v68 = sub_100233A48(v67);
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v65;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v68;
        _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "[%@]: Failed to connect to the internet to upload feedback, waiting for connectivity at state: %lu", buf, 0x16u);
      }
      id v19 = +[NSNotificationCenter defaultCenter];
      id v35 = sub_100259614();
      [v19 addObserver:WeakRetained selector:"_handleNetworkStateDidChangeNotification:" name:@"NetworkStateDidChangeNotification" object:v35];

      goto LABEL_38;
    }
    if (v13 != 400)
    {
LABEL_42:
      sub_10027618C(v14, (uint64_t)v2);
      goto LABEL_39;
    }
    uint64_t v22 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    if (v2) {
      id v23 = v2[6];
    }
    else {
      id v23 = 0;
    }
    long long v24 = (_TtC9appstored6LogKey *)v23;
    id v25 = sub_100233614(v24);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v25;
    id v26 = "[%@]: We were told by the server the the payload is malformed.  We're dropping this feedback";
    goto LABEL_70;
  }
  uint64_t v14 = (uint64_t)WeakRetained;
  if (v13 != 401)
  {
    if (v13 != 413)
    {
      if (v13 == 429)
      {
        id v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          if (v2) {
            id v16 = v2[6];
          }
          else {
            id v16 = 0;
          }
          id v17 = (_TtC9appstored6LogKey *)v16;
          uint64_t v18 = sub_100233614(v17);
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%@]: The server asked us to throttle our requests, rescheduling to try again later", buf, 0xCu);
        }
        id v19 = +[NSDate dateWithTimeIntervalSinceNow:600.0];
        if (v2)
        {
          id v20 = v2[6];
          id v21 = v20;
          if (v20) {
            [v20 setValue:v19 forProperty:@"next_retry_date"];
          }
        }
        else
        {
          id v21 = 0;
        }
        sub_100276554((uint64_t)WeakRetained, v21);
        sub_100276470(v19);

        goto LABEL_38;
      }
      goto LABEL_42;
    }
    uint64_t v22 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    if (v2) {
      id v62 = v2[6];
    }
    else {
      id v62 = 0;
    }
    long long v24 = (_TtC9appstored6LogKey *)v62;
    id v25 = sub_100233614(v24);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v25;
    id v26 = "[%@]: We were told by the server the the payload is too large.  We're dropping this feedback";
LABEL_70:
    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v26, buf, 0xCu);

LABEL_33:
    if (v2) {
      id v31 = v2[6];
    }
    else {
      id v31 = 0;
    }
    id v19 = v31;
    id v32 = [v19 databaseID];
    id v33 = WeakRetained[4];
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100275F30;
    *(void *)&unsigned char buf[24] = &unk_1005245F8;
    id v73 = v32;
    [v33 modifyUsingTransaction:buf];
LABEL_38:

    goto LABEL_39;
  }
  if (v2) {
    id v27 = v2[6];
  }
  else {
    id v27 = 0;
  }
  id v28 = v27;
  id v29 = sub_100233A48(v28);

  if (v29 == (id)1)
  {
    if (v2) {
      id v30 = v2[6];
    }
    else {
      id v30 = 0;
    }
    id v19 = v30;
    sub_100233CC0(v19, 0);
    sub_100276554((uint64_t)WeakRetained, v19);
    sub_10027618C((uint64_t)WeakRetained, (uint64_t)v2);
    goto LABEL_38;
  }
  id v36 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      id v37 = v2[6];
    }
    else {
      id v37 = 0;
    }
    id v38 = (_TtC9appstored6LogKey *)v37;
    long long v39 = sub_100233614(v38);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v39;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[%@]: We need to authenticate before we can submit feedback", buf, 0xCu);
  }
  if (v2) {
    id v40 = v2[6];
  }
  else {
    id v40 = 0;
  }
  id v41 = v40;
  id v42 = sub_1002333F4(v41);

  id v43 = +[ACAccountStore ams_sharedAccountStore];
  id v44 = objc_msgSend(v43, "ams_iTunesAccountWithDSID:", v42);

  id v71 = 0;
  id v45 = sub_100275D44((uint64_t)WeakRetained, v44, &v71);
  id v46 = v71;
  id v47 = ASDLogHandleForCategory();
  id v48 = v47;
  if (v46)
  {
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      if (v2) {
        id v49 = v2[6];
      }
      else {
        id v49 = 0;
      }
      uint64_t v50 = (_TtC9appstored6LogKey *)v49;
      id v51 = sub_100233614(v50);
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v51;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v46;
      _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "[%@]: Error authenticating account: %{public}@", buf, 0x16u);
LABEL_65:
    }
  }
  else if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      id v61 = v2[6];
    }
    else {
      id v61 = 0;
    }
    uint64_t v50 = (_TtC9appstored6LogKey *)v61;
    id v51 = sub_100233614(v50);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v51;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[%@]: Successfully authenticated", buf, 0xCu);
    goto LABEL_65;
  }

  sub_10027618C((uint64_t)WeakRetained, (uint64_t)v2);
LABEL_39:
}

uint64_t sub_1002775D4(uint64_t a1, uint64_t a2)
{
  return sub_1003E9E3C(a2, *(void **)(a1 + 32));
}

BOOL sub_1002775E4(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = (void *)a1[5];
  uint64_t v5 = (void *)a1[6];
  id v6 = a2;
  uint64_t v7 = objc_msgSend(v5, "ams_DSID");
  id v8 = sub_1003E980C(v6, v3, v4, v7);

  *(void *)(*(void *)(a1[7] + 8) + 24) = v8;
  return *(void *)(*(void *)(a1[7] + 8) + 24) != 0;
}

void sub_100277674(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003B5C10(a2, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_1002776D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002776E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  ASDErrorWithDescription();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100277754(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ASDErrorWithDescription();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1002777C4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003B59A0(a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100277970(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Error in dialog task: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100277AD4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TFLocale");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B0C50 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    sub_100277B44();
  }
}

void sub_100277B44()
{
  v1[0] = 0;
  if (!qword_1005B0C58)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_100277C50;
    v1[4] = &unk_100521BF0;
    v1[5] = v1;
    long long v2 = off_1005246E0;
    uint64_t v3 = 0;
    qword_1005B0C58 = _sl_dlopen();
    uint64_t v0 = (void *)v1[0];
    if (qword_1005B0C58)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      uint64_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t sub_100277C50()
{
  uint64_t result = _sl_dlopen();
  qword_1005B0C58 = result;
  return result;
}

Class sub_100277CC4(uint64_t a1)
{
  sub_100277B44();
  Class result = objc_getClass("TFFeedbackHandleConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B0C70 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)sub_100277D34(v3);
  }
  return result;
}

Class sub_100277D34(uint64_t a1)
{
  sub_100277B44();
  Class result = objc_getClass("TFFeedbackHandle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B0C78 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (RequestEnvironment *)abort_report_np();
    return (Class)[(RequestEnvironment *)v3 copyWithZone:v5];
  }
  return result;
}

id sub_100277E8C(void *a1)
{
  if (a1)
  {
    a1 = +[NSURLProtocol propertyForKey:@"com.apple.appstored.RequestTag" inRequest:a1];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100277ED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    SEL v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 138412546;
      id v6 = v3;
      __int16 v7 = 2112;
      uint64_t v8 = a1;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Attached tag: %@ to request: %@", (uint8_t *)&v5, 0x16u);
    }

    +[NSURLProtocol setProperty:v3 forKey:@"com.apple.appstored.RequestTag" inRequest:a1];
  }
}

void sub_100277FBC(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_100278020(a1, a2);
    if (v3)
    {
      SEL v4 = v3;
      [a1 _adoptEffectiveConfiguration:v3];
      id v3 = v4;
    }
  }
}

id sub_100278020(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    SEL v4 = [a1 _effectiveConfiguration];
    int v5 = [v4 _sessionConfiguration];

    id v7 = [objc_alloc((Class)NSURLSessionConfiguration) _initWithConfiguration:v5];
    if (v3)
    {
      id v8 = objc_getProperty(v3, v6, 8, 1);
      if (v8)
      {
        int v9 = v8;
        uint64_t v10 = [v8 bundleIdentifier];
        objc_msgSend(v7, "set_sourceApplicationBundleIdentifier:", v10);
      }
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id sub_1002780FC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  id v10 = a2;
  uint64_t v11 = self;
  id v12 = sub_100278188(v11, v10, a3, a4, (id)1, a5, a6);

  return v12;
}

id sub_100278188(uint64_t a1, void *a2, uint64_t a3, void *a4, id a5, uint64_t a6, void *a7)
{
  id v12 = a2;
  uint64_t v13 = self;
  char v26 = 0;
  id v25 = 0;
  id v15 = sub_100278334(v13, v12, a3, v14, a6, (uint64_t)&v26, (uint64_t)&v25);
  id v16 = v25;
  id v17 = v16;
  if (a6 && !v15)
  {
    id v24 = v16;
    BOOL v18 = sub_100278530(v13, v12, &v24);
    id v19 = v24;

    if (!v18) {
      goto LABEL_9;
    }
    id v23 = v19;
    id v15 = sub_100278674(v13, v12, a3, 1, (uint64_t)&v26, (uint64_t)&v23);
    id v17 = v23;
  }
  if (!v15)
  {
    id v19 = v17;
LABEL_9:
    if (!a7) {
      goto LABEL_13;
    }
LABEL_10:
    id v17 = v19;
    id v15 = 0;
    *a7 = v17;
    goto LABEL_15;
  }
  if ([v15 creatorIdentifier] == a5)
  {
    sub_1002786FC(v15, a4, 0);
    goto LABEL_15;
  }
  id v22 = v17;
  BOOL v20 = sub_1002788C8(v15, &v22);
  id v19 = v22;

  if (v20) {
    goto LABEL_14;
  }

  if (a7) {
    goto LABEL_10;
  }
LABEL_13:
  id v15 = 0;
LABEL_14:
  id v17 = v19;
LABEL_15:

  return v15;
}

id sub_100278334(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v11 = a2;
  self;
  switch(a3)
  {
    case 0:
      NSExceptionName v12 = NSInvalidArgumentException;
      CFStringRef v13 = @"Passing an intent of 'lib_IXCoordinatorIntentAny' is not supported.";
      goto LABEL_4;
    case 1:
      id v15 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleID:v11];
      id v16 = IXInitiatingAppInstallCoordinator;
      goto LABEL_11;
    case 2:
      id v15 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleID:v11];
      id v16 = IXUpdatingAppInstallCoordinator;
      goto LABEL_11;
    case 3:
      id v15 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleID:v11];
      id v16 = IXRestoringAppInstallCoordinator;
      goto LABEL_11;
    case 4:
      id v15 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleID:v11];
      id v16 = IXRestoringDemotedAppInstallCoordinator;
      goto LABEL_11;
    case 5:
      id v15 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleID:v11];
      id v16 = IXPromotingAppInstallCoordinator;
      goto LABEL_11;
    case 6:
      id v15 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleID:v11];
      id v16 = IXGizmoInstallingAppInstallCoordinator;
LABEL_11:
      uint64_t v14 = [v16 coordinatorForAppWithIdentity:v15 withClientID:1 createIfNotExisting:a5 created:a6 error:a7];

      break;
    default:
      NSExceptionName v12 = NSInvalidArgumentException;
      id v18 = v11;
      uint64_t v19 = a3;
      CFStringRef v13 = @"Don't know how to find coordinator for bundle ID: %@ with intent: %lu";
LABEL_4:
      +[NSException raise:format:](NSException, "raise:format:", v12, v13, v18, v19);
      uint64_t v14 = 0;
      break;
  }

  return v14;
}

BOOL sub_100278530(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  self;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 1;
  id v14 = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10027951C;
  v11[3] = &unk_100524728;
  id v5 = v4;
  id v12 = v5;
  CFStringRef v13 = &v15;
  +[IXAppInstallCoordinator enumerateCoordinatorsWithError:&v14 usingBlock:v11];
  id v6 = v14;
  id v7 = v6;
  int v8 = *((unsigned __int8 *)v16 + 24);
  if (a3 && !*((unsigned char *)v16 + 24))
  {
    *a3 = v6;
    int v8 = *((unsigned __int8 *)v16 + 24);
  }
  BOOL v9 = v8 != 0;

  _Block_object_dispose(&v15, 8);
  return v9;
}

void sub_10027865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100278674(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = a2;
  uint64_t v11 = self;
  CFStringRef v13 = sub_100278334(v11, v10, a3, v12, a4, a5, a6);

  return v13;
}

uint64_t sub_1002786FC(void *a1, id a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithImportance])
  {
    if (!a3) {
    BOOL v9 = return a3;
    }
    ASDErrorWithDescription();
    *(void *)a3 = (id)objc_claimAutoreleasedReturnValue();

    return 0;
  }
  id v6 = a1;
  id v7 = [v6 importanceWithError:a3];
  if (v7 == (id)4) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = (unint64_t)v7;
  }
  if (v8 >= (unint64_t)a2)
  {
    if (v7 != a2)
    {
      id v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = IXStringForCoordinatorImportance();
        CFStringRef v13 = IXStringForCoordinatorImportance();
        id v14 = [v6 uniqueIdentifier];
        *(_DWORD *)long long buf = 138543874;
        id v16 = v12;
        __int16 v17 = 2114;
        char v18 = v13;
        __int16 v19 = 2114;
        BOOL v20 = v14;
      }
    }
    a3 = 1;
  }
  else
  {
    a3 = (uint64_t)[v6 setImportance:a2 error:a3];
  }

  return a3;
}

BOOL sub_1002788C8(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  if ([a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise])
  {
    id v11 = 0;
    id v4 = [a1 appAssetPromiseResponsibleClientWithError:&v11];
    id v5 = v11;
  }
  else
  {
    id v4 = 0;
    id v5 = 0;
  }
  BOOL v6 = v4 == (id)1;
  if (a2 && v4 != (id)1)
  {
    v8 = id v7 = +[NSMutableDictionary dictionaryWithCapacity:2];
    [v7 setObject:v8 forKeyedSubscript:NSDebugDescriptionErrorKey];

    [v7 setObject:v5 forKeyedSubscript:NSUnderlyingErrorKey];
    BOOL v9 = +[NSNumber numberWithUnsignedInteger:v4];
    [v7 setObject:v9 forKeyedSubscript:@"coordinatorOwnerID"];

    *a2 = +[NSError errorWithDomain:ASDErrorDomain code:803 userInfo:v7];
  }
  return v6;
}

id sub_100278A30(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  self;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x3032000000;
  id v14 = sub_100017FB8;
  uint64_t v15 = sub_100017B98;
  id v16 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100278B7C;
  v8[3] = &unk_100524728;
  id v5 = v4;
  id v9 = v5;
  id v10 = &v11;
  +[IXAppInstallCoordinator enumerateCoordinatorsWithError:a3 usingBlock:v8];
  id v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_100278B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100278B7C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = [v4 uniqueIdentifier];
  unsigned int v6 = [v5 isEqual:*(void *)(a1 + 32)];

  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  BOOL v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;

  return v7;
}

id sub_100278C08(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = self;
  if (v6)
  {
    if (v7)
    {
      id v9 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleID:v7];
      id v10 = +[IXAppInstallCoordinator existingCoordinatorForAppWithIdentity:v9 error:a4];
      uint64_t v11 = v10;
      if (v10)
      {
        uint64_t v12 = [v10 uniqueIdentifier];
        unsigned __int8 v13 = [v12 isEqual:v6];

        if ((v13 & 1) == 0)
        {
          if (a4)
          {
            __int16 v17 = [v11 uniqueIdentifier];
            ASDErrorWithUserInfoAndFormat();
            *a4 = (id)objc_claimAutoreleasedReturnValue();
          }
          uint64_t v11 = 0;
        }
      }
    }
    else
    {
      uint64_t v14 = v8;
      uint64_t v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v19 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Using the slow path to locate coordinator: %{public}@", buf, 0xCu);
      }

      uint64_t v11 = sub_100278A30(v14, v6, (uint64_t)a4);
    }
  }
  else if (a4)
  {
    ASDErrorWithUserInfoAndFormat();
    uint64_t v11 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

id sub_100278E08(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  uint64_t v6 = self;
  if (v4)
  {
    id v7 = objc_getProperty(v4, v5, 16, 1);
    id Property = objc_getProperty(v4, v8, 8, 1);
  }
  else
  {
    id v7 = 0;
    id Property = 0;
  }
  id v10 = sub_100278C08(v6, v7, Property, a3);

  return v10;
}

id sub_100278EBC(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 16, 1);
  }
  return result;
}

id sub_100278ED0(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 8, 1);
  }
  return result;
}

void *sub_100278EE4(void *result)
{
  if (result) {
    return (void *)([result creatorIdentifier] == (id)1);
  }
  return result;
}

uint64_t sub_100278F0C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return 2;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return 1;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return 3;
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        return 5;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          return 4;
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            long long v2 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
            {
              int v3 = 138543362;
              uint64_t v4 = v1;
              _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Unable to determine intent for coordinator: %{public}@", (uint8_t *)&v3, 0xCu);
            }

            return 1;
          }
          return 6;
        }
      }
    }
  }
  return result;
}

id sub_100279094(void *a1)
{
  if (!a1 || ![a1 hasPlaceholderPromise]) {
    return 0;
  }
  long long v2 = [a1 placeholderPromiseWithError:0];
  id v3 = [v2 isComplete];

  return v3;
}

id sub_1002790EC(id a1)
{
  id v1 = a1;
  if (a1)
  {
    long long v2 = [a1 uniqueIdentifier];
    id v3 = [v1 identity];
    uint64_t v4 = [v3 bundleID];
    sub_10027918C((uint64_t)lib_IXAppInstallCoordinatorTag, v2, v4);
    id v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

lib_IXAppInstallCoordinatorTag *sub_10027918C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  uint64_t v6 = objc_alloc_init(lib_IXAppInstallCoordinatorTag);
  id v7 = (NSString *)[v4 copy];

  bundleID = v6->_bundleID;
  v6->_bundleID = v7;

  id v9 = (NSUUID *)[v5 copy];
  coordinatorID = v6->_coordinatorID;
  v6->_coordinatorID = v9;

  return v6;
}

id sub_10027922C(uint64_t a1, void *a2)
{
  self;
  id v10 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10027931C;
  v8[3] = &unk_100524750;
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  id v9 = v3;
  unsigned __int8 v4 = +[IXAppInstallCoordinator enumerateCoordinatorsWithError:&v10 usingBlock:v8];
  id v5 = v10;
  uint64_t v6 = v5;
  if (a2 && (v4 & 1) == 0) {
    *a2 = v5;
  }

  return v3;
}

uint64_t sub_10027931C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (sub_1002788C8(v3, 0))
  {
    if (!v3
      || [v3 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithPlaceholderPromise]
      && !sub_100279094(v3)
      || [v3 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithInitialODRAssetPromises]&& (!objc_msgSend(v3, "conformsToProtocol:", &OBJC_PROTOCOL___IXCoordinatorWithInitialODRAssetPromises)|| !objc_msgSend(v3, "hasInitialODRAssetPromises")))
    {
      uint64_t v10 = 0;
      goto LABEL_25;
    }
    if ([v3 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise])
    {
      if (![v3 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise]
        || ![v3 hasAppAssetPromise]
        || ([v3 appAssetPromiseWithError:0], (unsigned __int8 v4 = objc_claimAutoreleasedReturnValue()) == 0)
        || (id v5 = v4, v6 = [v4 isComplete], v5, !v6))
      {
        uint64_t v10 = 1;
        goto LABEL_25;
      }
    }
    if ([v3 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithInstallOptions]
      && [v3 hasInstallOptions])
    {
      if (![v3 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithDeviceSecurityPromise])
      {
LABEL_21:
        uint64_t v10 = 5;
LABEL_25:
        uint64_t v11 = +[NSNumber numberWithUnsignedInteger:v10];
        uint64_t v12 = *(void **)(a1 + 32);
        unsigned __int8 v13 = [v3 uniqueIdentifier];
        [v12 setObject:v11 forKeyedSubscript:v13];

        goto LABEL_26;
      }
      char v15 = 0;
      if ([v3 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithDeviceSecurityPromise])
      {
        [v3 getHasDeviceSecurityPromise:&v15 error:0];
        if (v15)
        {
          if (![v3 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithDeviceSecurityPromise]|| (objc_msgSend(v3, "deviceSecurityPromiseWithError:", 0), (id v7 = objc_claimAutoreleasedReturnValue()) == 0)|| (v8 = v7, v9 = objc_msgSend(v7, "isComplete"), v8, !v9))
          {
            uint64_t v10 = 3;
            goto LABEL_25;
          }
          goto LABEL_21;
        }
      }
    }
    uint64_t v10 = 2;
    goto LABEL_25;
  }
LABEL_26:

  return 1;
}

uint64_t sub_10027951C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [v3 identity];
  id v5 = [v4 bundleID];
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  if (v6)
  {
    if (v3 && [v3 creatorIdentifier] == (id)1)
    {
      id v7 = +[NSError errorWithDomain:ASDErrorDomain code:506 userInfo:0];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 cancelForReason:v7 client:1 error:0];
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
  }
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return v8;
}

id sub_100279608(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v7 = a4;
  id v8 = a2;
  self;
  id v9 = +[IXAppInstallCoordinator updateSINFForAppWithIdentity:v8 sinfData:v7 options:0 error:a5];

  return v9;
}

id sub_10027967C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  uint64_t v7 = self;
  id v8 = sub_1002796F0(v7, v6, a3, a4, v6);

  return v8;
}

id sub_1002796F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a5;
  uint64_t v10 = self;
  uint64_t v11 = [v9 domain];
  unsigned int v12 = [v11 isEqualToString:ASDErrorDomain];

  if (!v12)
  {
    uint64_t v14 = [v9 domain];
    unsigned int v15 = [v14 isEqualToString:ASDServerErrorDomain];

    if (v15)
    {
      id v16 = [v9 code];
      if (v16 != (id)3903 && v16 != (id)3604 && v16 != (id)3603) {
        goto LABEL_16;
      }
    }
    else
    {
      __int16 v17 = [v9 domain];
      unsigned int v18 = [v17 isEqualToString:AKAppleIDAuthenticationErrorDomain];

      if (!v18 || [v9 code] != (id)-7003) {
        goto LABEL_16;
      }
    }
    goto LABEL_19;
  }
  uint64_t v13 = (uint64_t)[v9 code];
  if (v13 > 744)
  {
    if (v13 != 745 && v13 != 751) {
      goto LABEL_16;
    }
LABEL_19:
    id v21 = IXCreateUserPresentableError();
    goto LABEL_20;
  }
  if (v13 == 530 || v13 == 744) {
    goto LABEL_19;
  }
LABEL_16:
  id v19 = [v9 userInfo];
  uint64_t v20 = [v19 objectForKeyedSubscript:NSUnderlyingErrorKey];

  if (!v20)
  {
    id v21 = 0;
    goto LABEL_21;
  }
  id v21 = sub_1002796F0(v10, v8, a3, a4, v20);
  id v9 = (id)v20;
LABEL_20:

LABEL_21:
  return v21;
}

id sub_100279904(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    if (objc_opt_respondsToSelector())
    {
      id v4 = [objc_alloc((Class)IXPromisedOutOfBandTransfer) initWithName:@"Feedback" client:1 diskSpaceNeeded:0];
      [v4 setPercentComplete:1.0];
      [v4 setComplete:1];
      id v2 = [v2 setPreparationPromise:v4 withError:a2];
    }
    else
    {
      if (!a2) {
        return 0;
      }
      id v4 = (id)objc_claimAutoreleasedReturnValue();
      ASDErrorWithDescription();
      id v2 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  return v2;
}

BOOL sub_1002799FC(BOOL result)
{
  if (result)
  {
    id v1 = (void *)result;
    objc_opt_class();
    return (objc_opt_isKindOfClass() & 1) == 0
        || ![v1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise]
        || [v1 appAssetPromiseResponsibleClientWithError:0] != (id)1;
  }
  return result;
}

id sub_100279A74(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithInitialODRAssetPromises])
  {
    if (a2) {
      id v5 = {;
    }
      ASDErrorWithDescription();
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    return 0;
  }
  return [a1 setInitialODRAssetPromises:&__NSArray0__struct error:a2];
}

id sub_100279B34(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    if ([a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithUserDataPromise])
    {
      id v4 = [objc_alloc((Class)IXPromisedOutOfBandTransfer) initWithName:@"fake-promise" client:1 diskSpaceNeeded:0];
      [v4 setPercentComplete:1.0];
      [v4 setComplete:1];
      id v2 = [v2 setUserDataPromise:v4 error:a2];
    }
    else
    {
      if (!a2) {
        return 0;
      }
      id v4 = (id)objc_claimAutoreleasedReturnValue();
      ASDErrorWithDescription();
      id v2 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  return v2;
}

id sub_100279C2C(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    if ([a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithDeviceSecurityPromise])
    {
      id v4 = [objc_alloc((Class)IXPromisedOutOfBandTransfer) initWithName:@"security-promise" client:1 diskSpaceNeeded:0];
      id v8 = 0;
      id v2 = [v2 setDeviceSecurityPromise:v4 error:&v8];
      id v5 = v8;
      if ((v2 & 1) == 0)
      {
        [v4 cancelForReason:v5 client:1 error:0];
        if (a2) {
          *a2 = v5;
        }
      }
    }
    else
    {
      if (a2) {
        id v6 = {;
      }
        ASDErrorWithDescription();
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      return 0;
    }
  }
  return v2;
}

uint64_t sub_100279D48(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (!a1)
  {
    unsigned __int8 v17 = 0;
    goto LABEL_17;
  }
  if (!v5)
  {
    id v6 = ASDErrorWithDescription();
  }
  if ([a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithUserDataPromise]
    && (!+[AMSDevice deviceIsAppleTV]
     || sub_100278F0C((uint64_t)a1) != 3)
    && [a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise])
  {
    id v16 = 0;
    id v7 = [a1 appAssetPromiseWithError:&v16];
    id v8 = v16;
    id v9 = v8;
    if (!v7)
    {

      id v7 = [objc_alloc((Class)IXPromisedStreamingZipTransfer) initWithName:@"fake-promise" client:1 streamingZipOptions:&__NSDictionary0__struct archiveSize:0 diskSpaceNeeded:0];
      id v15 = 0;
      unsigned __int8 v10 = [a1 setAppAssetPromise:v7 error:&v15];
      id v9 = v15;
      if ((v10 & 1) == 0) {
        [v7 cancelForReason:v9 client:1 error:0];
      }
    }
    if ([v7 isComplete])
    {
      unsigned __int8 v11 = 0;
    }
    else
    {
      id v14 = v9;
      unsigned __int8 v11 = [v7 cancelForReason:v6 client:1 error:&v14];
      id v13 = v14;

      id v9 = v13;
    }

    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  unsigned __int8 v11 = [a1 cancelForReason:v6 client:1 error:a3];
  id v9 = 0;
  if (a3)
  {
LABEL_14:
    if ((v11 & 1) == 0) {
      *a3 = v9;
    }
  }
LABEL_16:
  unsigned __int8 v17 = v11;

LABEL_17:
  return v17;
}

void *sub_100279F30(void *result, void *a2)
{
  if (result)
  {
    id v3 = result;
    if ([result conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithDeviceSecurityPromise])
    {
      id v7 = 0;
      id v4 = [v3 deviceSecurityPromiseWithError:&v7];
      id v5 = v7;
      if (v4)
      {
        [v4 setPercentComplete:1.0];
        [v4 setComplete:1];
        unsigned __int8 v8 = 1;
LABEL_12:

        goto LABEL_13;
      }
      if (ASDErrorIsEqual() || ASDErrorIsEqual())
      {
        unsigned __int8 v8 = 1;
        goto LABEL_12;
      }
      if (a2)
      {
        *a2 = v5;
        unsigned __int8 v8 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      if (a2) {
        id v6 = {;
      }
        ASDErrorWithDescription();
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v5 = 0;
    }
    unsigned __int8 v8 = 0;
LABEL_13:

    return (void *)v8;
  }
  return result;
}

void *sub_10027A080(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (!a3) {
    id v6 = goto LABEL_7;
    }
    ASDErrorWithDescription();
    *a3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_6:
    a3 = 0;
    goto LABEL_7;
  }
  a3 = [a1 setTargetGizmoPairingID:v5 error:a3];
LABEL_7:

  return a3;
}

id sub_10027A14C(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithImportance])
  {
    if (a2) {
      id v5 = {;
    }
      ASDErrorWithDescription();
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    return 0;
  }
  return [a1 importanceWithError:a2];
}

void *sub_10027A204(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_6;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise])
  {
    if (!a3) {
    id v6 = goto LABEL_7;
    }
    ASDErrorWithDescription();
    *a3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_6:
    a3 = 0;
    goto LABEL_7;
  }
  a3 = [a1 setAppAssetPromise:v5 error:a3];
LABEL_7:

  return a3;
}

void *sub_10027A2C8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_6;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithInitialODRAssetPromises])
  {
    if (!a3) {
    id v6 = goto LABEL_7;
    }
    NSErrorUserInfoKey v9 = NSDebugDescriptionErrorKey;
    unsigned __int8 v10 = v6;
    id v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    *a3 = +[NSError errorWithDomain:ASDErrorDomain code:807 userInfo:v7];

LABEL_6:
    a3 = 0;
    goto LABEL_7;
  }
  a3 = [a1 setInitialODRAssetPromises:v5 error:a3];
LABEL_7:

  return a3;
}

void *sub_10027A3F4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_6;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithInstallOptions])
  {
    if (!a3) {
      goto LABEL_7;
    }
    NSErrorUserInfoKey v8 = NSDebugDescriptionErrorKey;
    id v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    *a3 = +[NSError errorWithDomain:ASDErrorDomain code:807 userInfo:v6];

LABEL_6:
    a3 = 0;
    goto LABEL_7;
  }
  a3 = [a1 setInstallOptions:v5 error:a3];
LABEL_7:

  return a3;
}

void *sub_10027A504(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_6;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithPlaceholderPromise])
  {
    if (!a3) {
      goto LABEL_7;
    }
    NSErrorUserInfoKey v8 = NSDebugDescriptionErrorKey;
    id v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    *a3 = +[NSError errorWithDomain:ASDErrorDomain code:807 userInfo:v6];

LABEL_6:
    a3 = 0;
    goto LABEL_7;
  }
  a3 = [a1 setPlaceholderPromise:v5 error:a3];
LABEL_7:

  return a3;
}

id sub_10027A614(void *a1, void *a2)
{
  if (a1)
  {
    id v4 = a1;
    if ([a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithEssentialAssetPromises])
    {
      a1 = [v4 essentialAssetPromisesWithError:a2];
    }
    else
    {
      if (a2) {
        id v5 = {;
      }
        ASDErrorWithDescription();
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      a1 = 0;
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

void *sub_10027A6C8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_6;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithEssentialAssetPromises])
  {
    if (!a3) {
    id v6 = goto LABEL_7;
    }
    ASDErrorWithDescription();
    *a3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_6:
    a3 = 0;
    goto LABEL_7;
  }
  a3 = [a1 setEssentialAssetPromises:v5 error:a3];
LABEL_7:

  return a3;
}

id sub_10027A78C(void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  if (![a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithPostProcessingPromises])
  {
    if (a3) {
      id v6 = {;
    }
      ASDErrorWithDescription();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    return 0;
  }
  return _[a1 setNeedsPostProcessing:a2 error:a3];
}

id sub_10027AA2C(unint64_t a1)
{
  if (a1 >= 7)
  {
    id v1 = +[NSString stringWithFormat:@"Unknown (%lu)", a1];
  }
  else
  {
    id v1 = *(&off_100524770 + a1);
  }
  return v1;
}

id sub_10027AA90()
{
  self;
  if (qword_1005B0C88 != -1) {
    dispatch_once(&qword_1005B0C88, &stru_1005247A8);
  }
  uint64_t v0 = (void *)qword_1005B0C90;
  return v0;
}

void sub_10027AAE8(id a1)
{
  id v1 = +[AMSProcessInfo currentProcess];
  uint64_t v2 = sub_10030B11C();
  id v7 = +[NSURLSessionConfiguration ams_configurationWithProcessInfo:v1 bag:v2];

  id v3 = [objc_alloc((Class)AMSURLSession) initWithConfiguration:v7];
  id v4 = (void *)qword_1005B0C90;
  qword_1005B0C90 = (uint64_t)v3;

  id v5 = sub_10027ABE4((void *)qword_1005B0C90);
  [(id)qword_1005B0C90 setDelegate:v5];
  id v6 = sub_1001F9DE4((id *)[_ProtocolHandler alloc], v5);
  [(id)qword_1005B0C90 setProtocolHandler:v6];
}

_ProtocolDelegate *sub_10027ABE4(void *a1)
{
  if (a1)
  {
    os_unfair_lock_lock_with_options();
    objc_getAssociatedObject(a1, &unk_1004A0E20);
    uint64_t v2 = (_ProtocolDelegate *)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      uint64_t v2 = objc_alloc_init(_ProtocolDelegate);
      objc_setAssociatedObject(a1, &unk_1004A0E20, v2, (void *)0x301);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B0C80);
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

id sub_10027AC84(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[AMSProcessInfo currentProcess];
  id v4 = sub_10030B11C();
  id v5 = +[NSURLSessionConfiguration ams_configurationWithProcessInfo:v3 bag:v4];

  id v6 = [objc_alloc((Class)AMSURLSession) initWithConfiguration:v5 delegate:v2 delegateQueue:0];
  return v6;
}

id sub_10027AD48(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  id v6 = +[NSURLSessionConfiguration ephemeralSessionConfiguration];
  id v7 = sub_10030B11C();
  objc_msgSend(v6, "ams_configureWithProcessInfo:bag:", v5, v7);

  NSErrorUserInfoKey v8 = [v5 bundleIdentifier];

  objc_msgSend(v6, "set_sourceApplicationBundleIdentifier:", v8);
  id v9 = [objc_alloc((Class)AMSURLSession) initWithConfiguration:v6 delegate:v4 delegateQueue:0];

  return v9;
}

id sub_10027AE28(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    id v8 = [v6 copy];
    objc_initWeak(&location, a1);
    id v9 = objc_alloc((Class)AMSMutableLazyPromise);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10027AF80;
    v12[3] = &unk_100524820;
    objc_copyWeak(&v15, &location);
    void v12[4] = a1;
    id v13 = v5;
    id v10 = v8;
    id v14 = v10;
    a1 = [v9 initWithBlock:v12];

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
  return a1;
}

void sub_10027AF5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10027AF80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = sub_10027ABE4(*(void **)(a1 + 32));
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v7 = *(void **)(a1 + 40);
  if (isKindOfClass) {
    id v8 = v7;
  }
  else {
    id v8 = [v7 mutableCopy];
  }
  id v9 = v8;
  id v10 = +[NSUUID UUID];
  unsigned __int8 v11 = [v10 UUIDString];

  sub_100277ED0((uint64_t)v9, v11);
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x3032000000;
  id v29 = sub_100017FC8;
  id v30 = sub_100017BA0;
  uint64_t v12 = *(void *)(a1 + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10027B20C;
  void v22[3] = &unk_1005247D0;
  id v13 = v5;
  id v23 = v13;
  id v14 = v11;
  id v24 = v14;
  id v15 = v3;
  id v25 = v15;
  id v31 = [WeakRetained dataTaskWithRequest:v12 completionHandler:v22];
  if (v13 && v14) {
    sub_1001F54CC(v13[1], *(void **)(a1 + 48), v14);
  }
  [(id)v27[5] resume];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10027B298;
  v18[3] = &unk_1005247F8;
  id v16 = v13;
  id v19 = v16;
  id v17 = v14;
  id v20 = v17;
  id v21 = &v26;
  [v15 addErrorBlock:v18];

  _Block_object_dispose(&v26, 8);
}

void sub_10027B1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10027B20C(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v7 = a1[4];
  id v6 = (void *)a1[5];
  if (v7) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    sub_1001F54CC(*(void *)(v7 + 8), 0, v6);
  }
  id v9 = (void *)a1[6];
  if (v5) {
    [v9 finishWithError:v5];
  }
  else {
    [v9 finishWithResult:v10];
  }
}

void sub_10027B298(void *a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = a1[4];
  id v3 = (void *)a1[5];
  if (v4) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    sub_1001F54CC(*(void *)(v4 + 8), 0, v3);
  }
  if ([v6 code] == (id)1 || objc_msgSend(v6, "code") == (id)3072) {
    [*(id *)(*(void *)(a1[6] + 8) + 40) cancel];
  }
}

id sub_10027B328(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  self;
  uint64_t v17 = 0;
  unsigned int v18 = &v17;
  uint64_t v19 = 0x3032000000;
  id v20 = sub_100017FD8;
  id v21 = sub_100017BA8;
  id v22 = 0;
  BOOL v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"parent_id" equalToLongLong:a2];
  v24[0] = v5;
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"blocked" equalToValue:&__kCFBooleanFalse];
  v24[1] = v6;
  uint64_t v7 = +[NSArray arrayWithObjects:v24 count:2];
  BOOL v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  id v9 = sub_1002FF548((uint64_t)AppPackageEntity, v4, v8);
  CFStringRef v23 = @"package_type";
  id v10 = +[NSArray arrayWithObjects:&v23 count:1];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10027B584;
  v14[3] = &unk_100524860;
  id v16 = &v17;
  id v11 = v4;
  id v15 = v11;
  [v9 enumeratePersistentIDsAndProperties:v10 usingBlock:v14];

  id v12 = (id)v18[5];
  _Block_object_dispose(&v17, 8);

  return v12;
}

void sub_10027B560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10027B584(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  id v8 = a3;
  id v9 = [(SQLiteEntity *)[AppPackageEntity alloc] initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  id v12 = sub_100268AAC(v8, @"package_type");
  if (v12 == (id)1) {
    *a5 = 1;
  }
}

id sub_10027B634(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = objc_opt_new();
  unsigned __int8 v4 = sub_10027BD64((uint64_t)InstallAttributionPingback, @"redownload", v2);
  if (v3) {
    *(unsigned char *)(v3 + 11) = v4;
  }
  BOOL v5 = sub_1002689B4(v2, @"signature");
  sub_100263C18(v3, v5);

  uint64_t v6 = sub_1002689B4(v2, @"version");
  uint64_t v7 = (void *)v6;
  if (v6) {
    id v8 = (__CFString *)v6;
  }
  else {
    id v8 = @"1.0";
  }
  sub_10027BE20(v3, v8);
  id v9 = sub_1002689B4(v2, @"url");
  sub_100270214(v3, v9);

  uint64_t v10 = sub_1002689B4(v2, @"transaction-id");
  sub_100263C08(v3, v10);

  id v11 = sub_10026811C(v2, @"adam-id");
  sub_100263BE8(v3, v11);

  if (v3)
  {
    if (!*(void *)(v3 + 136))
    {
      unsigned __int8 v15 = 1;
      uint64_t v14 = 1;
LABEL_18:
      *(void *)(v3 + 160) = v14;
      *(unsigned char *)(v3 + 13) = v15;
      unsigned int v18 = sub_1002689B4(v2, @"ad-network-id");
      objc_storeStrong((id *)(v3 + 32), v18);

      *(void *)(v3 + 120) = 0;
      goto LABEL_19;
    }
    if (ASDInstallAttributionVersionCreateFromString() < 202)
    {
      uint64_t v14 = 1;
    }
    else
    {
      id v12 = sub_1002686AC(v2, @"fidelity-type");
      if (!v12)
      {
        id v31 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v50 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "SKAdNetwork: No fidelity type found in postback", v50, 2u);
        }

        uint64_t v30 = 2;
        goto LABEL_36;
      }
      id v13 = v12;
      uint64_t v14 = (uint64_t)[v12 integerValue];
    }
    if (!*(void *)(v3 + 136) || ASDInstallAttributionVersionCreateFromString() < 300)
    {
      unsigned __int8 v15 = 1;
      goto LABEL_18;
    }
    id v16 = [v2 allKeys];
    unsigned __int8 v17 = [v16 containsObject:@"did-win"];

    if (v17)
    {
      unsigned __int8 v15 = sub_10027BD64((uint64_t)InstallAttributionPingback, @"did-win", v2);
      goto LABEL_18;
    }
    uint64_t v30 = 3;
LABEL_36:
    sub_10027BE3C((uint64_t)InstallAttributionPingback, v30, v2);
    id v32 = 0;
    goto LABEL_65;
  }
  sub_1002689B4(v2, @"ad-network-id");

LABEL_19:
  uint64_t v19 = +[NSDate date];
  [v19 timeIntervalSince1970];
  id v21 = +[NSNumber numberWithDouble:v20 * 1000.0];

  sub_10027BF44(v3, v21);
  if (!v3)
  {
    sub_10027BD64((uint64_t)InstallAttributionPingback, @"send-conversion-value", v2);
LABEL_54:
    id v40 = sub_1002686AC(v2, @"campaign-id");
    if (!v40)
    {
      id v43 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v45 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "SKAdNetwork: No campaign id found in postback", v45, 2u);
      }

      uint64_t v25 = 1;
      goto LABEL_62;
    }
    id v27 = v40;
    id v41 = [v40 integerValue];
    if (v3) {
      *(void *)(v3 + 40) = v41;
    }
    id v42 = sub_10026811C(v2, @"origin-adam-id");
    sub_100263C28(v3, v42);

    sub_100263C68(v3, v21);
    goto LABEL_58;
  }
  *(unsigned char *)(v3 + 12) = 0;
  objc_storeStrong((id *)(v3 + 144), v21);
  *(void *)(v3 + 8_Block_object_dispose(&a9, 8) = 0;
  objc_storeStrong((id *)(v3 + 152), 0);
  if (!*(void *)(v3 + 136) || ASDInstallAttributionVersionCreateFromString() < 400)
  {
    *(unsigned char *)(v3 + _Block_object_dispose(&a9, 8) = sub_10027BD64((uint64_t)InstallAttributionPingback, @"send-conversion-value", v2);
    goto LABEL_54;
  }
  unsigned int v22 = sub_10027BD64((uint64_t)InstallAttributionPingback, @"send-fine-conversion-value", v2);
  unsigned int v23 = sub_10027BD64((uint64_t)InstallAttributionPingback, @"send-coarse-conversion-value", v2);
  *(unsigned char *)(v3 + 9) = v22;
  *(unsigned char *)(v3 + 10) = v23;
  if (v22 && v23)
  {
    id v24 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "SKAdNetwork: Hierarchical conversion value inconsistency. Aborting.", buf, 2u);
    }

    uint64_t v25 = 8;
LABEL_62:
    sub_10027BE3C((uint64_t)InstallAttributionPingback, v25, v2);
    goto LABEL_63;
  }
  uint64_t v26 = sub_1002686AC(v2, @"postback-sequence-index");
  id v27 = v26;
  if (!v26)
  {
    uint64_t v28 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v48 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "SKAdNetwork: No sequence index found in postback", v48, 2u);
    }
    uint64_t v29 = 7;
    goto LABEL_40;
  }
  if ((unint64_t)[v26 integerValue] >= 3)
  {
    uint64_t v28 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v47 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "SKAdNetwork: Postback sequence index is invalid", v47, 2u);
    }
    uint64_t v29 = 9;
LABEL_40:

    uint64_t v33 = v29;
LABEL_41:
    sub_10027BE3C((uint64_t)InstallAttributionPingback, v33, v2);

LABEL_63:
    id v32 = 0;
    goto LABEL_64;
  }
  *(void *)(v3 + 16_Block_object_dispose(&a9, 8) = [v27 integerValue];
  uint64_t v34 = sub_1002689B4(v2, @"source-identifier");
  uint64_t v35 = sub_10026811C(v2, @"source-identifier");
  if (!(v34 | v35))
  {
    long long v39 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v46 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "SKAdNetwork: No source identifier found in postback", v46, 2u);
    }

    uint64_t v33 = 6;
    goto LABEL_41;
  }
  id v36 = (void *)v35;
  if (!v34)
  {
    uint64_t v34 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%d", [(id)v35 intValue]);
  }
  sub_100263C38(v3, (void *)v34);
  id v37 = sub_10026811C(v2, @"origin-adam-id");
  sub_100263C28(v3, v37);

  if (!*(void *)(v3 + 64))
  {
    id v38 = sub_1002689B4(v2, @"source-domain");
    sub_100263C48(v3, v38);
  }
  sub_10027030C(v3, @"none");
  sub_100263C68(v3, 0);
  *(unsigned char *)(v3 + 15) = 0;

LABEL_58:
  id v32 = (id)v3;
LABEL_64:

LABEL_65:
  return v32;
}

id sub_10027BD64(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  uint64_t v6 = sub_1002689B4(v5, v4);
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = [v6 lowercaseString];
    id v9 = [v8 isEqualToString:@"true"];
  }
  else if (v5)
  {
    id v9 = sub_1002680CC(v5, v4, 0);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_10027BE20(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 136), a2);
  }
}

uint64_t sub_10027BE30(uint64_t result)
{
  if (result) {
    return *(void *)(result + 136);
  }
  return result;
}

void sub_10027BE3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  self;
  id v7 = (id)objc_opt_new();
  id v5 = sub_1002689B4(v4, @"ad-network-id");

  [v7 setObject:v5 forKeyedSubscript:@"adNetworkID"];
  uint64_t v6 = +[NSNumber numberWithInteger:a2];
  [v7 setObject:v6 forKeyedSubscript:@"boundedIssueType"];

  [v7 setObject:&off_10054BE98 forKeyedSubscript:@"boundedPostbackType"];
  sub_10040E9A0((uint64_t)Analytics, v7, 5);
}

void sub_10027BF34(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void sub_10027BF44(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 128), a2);
  }
}

void sub_10027BF54(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 144), a2);
  }
}

void sub_10027BF64(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 152), a2);
  }
}

BOOL sub_10027BF74(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 9) != 0;
  }
  return result;
}

BOOL sub_10027BF88(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 10) != 0;
  }
  return result;
}

id sub_10027BF9C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = sub_1002689B4(v2, @"version");
  id v5 = (void *)v4;
  if (v4) {
    uint64_t v6 = (__CFString *)v4;
  }
  else {
    uint64_t v6 = @"1.0";
  }
  sub_10027BE20(v3, v6);
  unsigned __int8 v7 = sub_10027BD64((uint64_t)InstallAttributionPingback, @"redownload", v2);
  if (v3) {
    *(unsigned char *)(v3 + 11) = v7;
  }
  id v8 = sub_1002689B4(v2, @"signature");
  sub_100263C18(v3, v8);

  id v9 = sub_1002689B4(v2, @"url");
  sub_100270214(v3, v9);

  uint64_t v10 = sub_1002689B4(v2, @"transactionId");
  sub_100263C08(v3, v10);

  id v11 = sub_10026811C(v2, @"appId");
  sub_100263BE8(v3, v11);

  if (v3)
  {
    if (*(void *)(v3 + 136))
    {
      if (ASDInstallAttributionVersionCreateFromString() < 202)
      {
        id v12 = &off_10054BEB0;
      }
      else
      {
        sub_10026811C(v2, @"fidelityType");
        id v12 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
      }
      if (*(void *)(v3 + 136) && ASDInstallAttributionVersionCreateFromString() >= 300)
      {
        unsigned __int8 v13 = sub_10027BD64((uint64_t)InstallAttributionPingback, @"didWin", v2);
LABEL_16:
        *(void *)(v3 + 160) = [v12 integerValue];
        *(unsigned char *)(v3 + 13) = v13;
        goto LABEL_17;
      }
    }
    else
    {
      id v12 = &off_10054BEB0;
    }
    unsigned __int8 v13 = 1;
    goto LABEL_16;
  }
  id v12 = &off_10054BEB0;
  [&off_10054BEB0 integerValue];
LABEL_17:
  uint64_t v14 = sub_1002689B4(v2, @"adNetwork");
  sub_10027BF34(v3, v14);

  unsigned __int8 v15 = +[NSDate date];
  [v15 timeIntervalSince1970];
  unsigned __int8 v17 = +[NSNumber numberWithDouble:v16 * 1000.0];

  if (v3)
  {
    *(void *)(v3 + 8_Block_object_dispose(&a9, 8) = 0;
    *(void *)(v3 + 120) = 0;
    objc_storeStrong((id *)(v3 + 128), v17);
    *(unsigned char *)(v3 + 12) = 0;
    objc_storeStrong((id *)(v3 + 144), v17);
    if (*(void *)(v3 + 136) && ASDInstallAttributionVersionCreateFromString() >= 400)
    {
      unsigned int v18 = sub_10026811C(v2, @"sourceAppId");
      sub_100263C28(v3, v18);

      uint64_t v19 = sub_1002689B4(v2, @"sourceDomain");
      sub_100263C48(v3, v19);

      double v20 = sub_1002689B4(v2, @"sourceIdentifier");
      sub_100263C38(v3, v20);

      id v21 = sub_10026811C(v2, @"postbackSequenceIndex");
      *(void *)(v3 + 16_Block_object_dispose(&a9, 8) = [v21 integerValue];

      unsigned int v22 = sub_10027C388();
      objc_storeStrong((id *)(v3 + 96), v22);

      unsigned int v23 = 0;
      BOOL v24 = *(void *)(v3 + 168) == 0;
      *(unsigned char *)(v3 + 9) = v24;
      char v25 = !v24;
      *(unsigned char *)(v3 + 10) = v25;
      goto LABEL_28;
    }
    *(unsigned char *)(v3 + _Block_object_dispose(&a9, 8) = 1;
  }
  uint64_t v26 = sub_10026811C(v2, @"campaignId");
  id v27 = [v26 integerValue];
  if (v3) {
    *(void *)(v3 + 40) = v27;
  }

  uint64_t v28 = sub_10026811C(v2, @"sourceAppId");
  sub_100263C28(v3, v28);

  unsigned int v23 = v17;
LABEL_28:
  sub_100263C68(v3, v23);

  return (id)v3;
}

CFStringRef sub_10027C388()
{
  uint64_t v0 = @"none";
  self;
  CFStringRef v1 = @"low";
  if (([@"none" isEqualToString:@"low"] & 1) == 0)
  {
    CFStringRef v1 = @"medium";
    if (([@"none" isEqualToString:@"medium"] & 1) == 0)
    {
      CFStringRef v1 = @"high";
      if (![@"none" isEqualToString:@"high"]) {
        CFStringRef v1 = @"none";
      }
    }
  }

  return v1;
}

uint64_t sub_10027C418(uint64_t result)
{
  if (result) {
    return *(void *)(result + 168);
  }
  return result;
}

id sub_10027C424(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = v3;
  if (v2)
  {
    if (*((unsigned char *)v2 + 11)) {
      CFStringRef v5 = @"true";
    }
    else {
      CFStringRef v5 = @"false";
    }
    [v3 setObject:v5 forKeyedSubscript:@"redownload"];
    [v4 setObject:*((void *)v2 + 6) forKeyedSubscript:@"transactionId"];
    [v4 setObject:*((void *)v2 + 17) forKeyedSubscript:@"version"];
    [v4 setObject:*((void *)v2 + 14) forKeyedSubscript:@"url"];
    uint64_t v6 = *((void *)v2 + 2);
  }
  else
  {
    [v3 setObject:@"false" forKeyedSubscript:@"redownload"];
    [v4 setObject:0 forKeyedSubscript:@"transactionId"];
    [v4 setObject:0 forKeyedSubscript:@"version"];
    [v4 setObject:0 forKeyedSubscript:@"url"];
    uint64_t v6 = 0;
  }
  [v4 setObject:v6 forKeyedSubscript:@"appId"];
  if (!v2)
  {
    unsigned int v18 = +[NSNumber numberWithInteger:0];
    [v4 setObject:v18 forKeyedSubscript:@"fidelityType"];

    [v4 setObject:@"false" forKeyedSubscript:@"didWin"];
    [v4 setObject:&off_10054BEC8 forKeyedSubscript:@"isRegistered"];
    [v4 setObject:0 forKeyedSubscript:@"adNetwork"];
    uint64_t v10 = 0;
    goto LABEL_20;
  }
  unsigned __int8 v7 = +[NSNumber numberWithInteger:*((void *)v2 + 20)];
  [v4 setObject:v7 forKeyedSubscript:@"fidelityType"];

  if (*((unsigned char *)v2 + 13)) {
    CFStringRef v8 = @"true";
  }
  else {
    CFStringRef v8 = @"false";
  }
  [v4 setObject:v8 forKeyedSubscript:@"didWin"];
  if (*((unsigned char *)v2 + 12)) {
    id v9 = &off_10054BEB0;
  }
  else {
    id v9 = &off_10054BEC8;
  }
  [v4 setObject:v9 forKeyedSubscript:@"isRegistered"];
  [v4 setObject:*((void *)v2 + 4) forKeyedSubscript:@"adNetwork"];
  if (!*((void *)v2 + 17) || ASDInstallAttributionVersionCreateFromString() < 400)
  {
    uint64_t v10 = *((void *)v2 + 8);
LABEL_20:
    [v4 setObject:v10 forKeyedSubscript:@"sourceAppId"];
    if (v2) {
      uint64_t v11 = *((void *)v2 + 11);
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = +[NSNumber numberWithInteger:v11];
    [v4 setObject:v12 forKeyedSubscript:@"conversionValue"];

    if (v2) {
      uint64_t v13 = *((void *)v2 + 5);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = +[NSNumber numberWithInteger:v13];
    CFStringRef v15 = @"campaignId";
    goto LABEL_28;
  }
  [v4 setObject:*((void *)v2 + 9) forKeyedSubscript:@"sourceIdentifier"];
  [v4 setObject:*((void *)v2 + 8) forKeyedSubscript:@"sourceAppId"];
  [v4 setObject:*((void *)v2 + 10) forKeyedSubscript:@"sourceDomain"];
  if (*((void *)v2 + 21) || !*((unsigned char *)v2 + 9))
  {
    if (*((unsigned char *)v2 + 10)
      && ([*((id *)v2 + 12) isEqualToString:@"none"] & 1) == 0)
    {
      [v4 setObject:*((void *)v2 + 12) forKeyedSubscript:@"coarseConversionValue"];
    }
  }
  else
  {
    double v16 = +[NSNumber numberWithInteger:*((void *)v2 + 11)];
    [v4 setObject:v16 forKeyedSubscript:@"fineConversionValue"];
  }
  uint64_t v14 = +[NSNumber numberWithInteger:*((void *)v2 + 21)];
  CFStringRef v15 = @"postbackSequenceIndex";
LABEL_28:
  [v4 setObject:v14 forKeyedSubscript:v15];

  return v4;
}

uint64_t sub_10027C7D0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

uint64_t sub_10027C7DC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 80);
  }
  return result;
}

id sub_10027C7E8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[NSMutableString string];
  [v3 appendString:@"https://"];
  [v3 appendString:v2];

  [v3 appendString:@"/.well-known/skadnetwork/report-attribution/"];
  return v3;
}

uint64_t sub_10027C86C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = +[NSDate dateWithTimeIntervalSinceNow:-86400.0];
    [v2 timeIntervalSince1970];
    uint64_t v4 = +[NSNumber numberWithDouble:v3 * 1000.0];
    uint64_t v1 = [*(id *)(v1 + 128) compare:v4] == (id)-1;
  }
  return v1;
}

uint64_t sub_10027C8FC(uint64_t result)
{
  if (result) {
    return [&off_10054DDE8 containsObject:*(void *)(result + 32)] ^ 1;
  }
  return result;
}

id sub_10027C92C(uint64_t a1)
{
  if (!a1)
  {
    id v2 = 0;
    goto LABEL_22;
  }
  id v2 = objc_opt_new();
  [v2 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"ad-network-id"];
  [v2 setObject:*(void *)(a1 + 16) forKeyedSubscript:@"app-id"];
  [v2 setObject:*(void *)(a1 + 48) forKeyedSubscript:@"transaction-id"];
  [v2 setObject:*(void *)(a1 + 56) forKeyedSubscript:@"attribution-signature"];
  [v2 setObject:*(void *)(a1 + 136) forKeyedSubscript:@"version"];
  if (*(void *)(a1 + 136))
  {
    if (ASDInstallAttributionVersionCreateFromString() >= 202)
    {
      double v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 160)];
      [v2 setObject:v3 forKeyedSubscript:@"fidelity-type"];
    }
    if (*(void *)(a1 + 136) && ASDInstallAttributionVersionCreateFromString() >= 300)
    {
      uint64_t v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 13)];
      [v2 setObject:v4 forKeyedSubscript:@"did-win"];
    }
  }
  CFStringRef v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 11)];
  [v2 setObject:v5 forKeyedSubscript:@"redownload"];

  if (!*(void *)(a1 + 136))
  {
    unsigned __int8 v7 = (id *)(a1 + 64);
    id v25 = *(id *)(a1 + 64);
    if (v25)
    {
      id v9 = v25;
LABEL_16:
      id v17 = *v7;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0) {
        [v2 setObject:*v7 forKeyedSubscript:@"source-app-id"];
      }
    }
LABEL_18:
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v19 = +[NSNumber numberWithInteger:*(void *)(a1 + 88)];
      [v2 setObject:v19 forKeyedSubscript:@"conversion-value"];
    }
    double v20 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
    CFStringRef v21 = @"campaign-id";
    goto LABEL_21;
  }
  uint64_t v6 = ASDInstallAttributionVersionCreateFromString();
  unsigned __int8 v7 = (id *)(a1 + 64);
  id v8 = *(id *)(a1 + 64);
  id v9 = v8;
  if (v6 < 400)
  {
    if (v8) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  if (v8
    && (id v10 = *v7,
        objc_opt_class(),
        char v11 = objc_opt_isKindOfClass(),
        v10,
        v9,
        (v11 & 1) == 0))
  {
    CFStringRef v16 = @"source-app-id";
  }
  else
  {
    unsigned __int8 v7 = (id *)(a1 + 80);
    id v12 = *(id *)(a1 + 80);
    if (!v12) {
      goto LABEL_27;
    }
    uint64_t v13 = v12;
    id v14 = *v7;
    objc_opt_class();
    char v15 = objc_opt_isKindOfClass();

    if (v15) {
      goto LABEL_27;
    }
    CFStringRef v16 = @"source-domain";
  }
  [v2 setObject:*v7 forKeyedSubscript:v16];
LABEL_27:
  uint64_t v23 = *(void *)(a1 + 72);
  if (v23) {
    [v2 setObject:v23 forKeyedSubscript:@"source-identifier"];
  }
  BOOL v24 = +[NSNumber numberWithInteger:*(void *)(a1 + 168)];
  [v2 setObject:v24 forKeyedSubscript:@"postback-sequence-index"];

  if (!*(void *)(a1 + 168) && *(unsigned char *)(a1 + 9))
  {
    double v20 = +[NSNumber numberWithInteger:*(void *)(a1 + 88)];
    CFStringRef v21 = @"conversion-value";
LABEL_21:
    [v2 setObject:v20 forKeyedSubscript:v21];

    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 10) && ([*(id *)(a1 + 96) isEqualToString:@"none"] & 1) == 0) {
    [v2 setObject:*(void *)(a1 + 96) forKeyedSubscript:@"coarse-conversion-value"];
  }
LABEL_22:
  return v2;
}

BOOL sub_10027CCE0(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 8) != 0;
  }
  return result;
}

void sub_10027CCF4(uint64_t a1)
{
  if (!a1) {
    return;
  }
  id v2 = objc_opt_new();
  double v3 = objc_opt_new();
  [v3 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"adNetworkID"];
  [v3 setObject:*(void *)(a1 + 16) forKeyedSubscript:@"advertisedAppAdamID"];
  uint64_t v4 = +[NSNumber numberWithInteger:*(void *)(a1 + 160) != 0];
  [v3 setObject:v4 forKeyedSubscript:@"boundedImpressionType"];

  CFStringRef v5 = +[NSNumber numberWithInteger:*(unsigned __int8 *)(a1 + 14)];
  [v3 setObject:v5 forKeyedSubscript:@"boundedPostbackType"];

  [v3 setObject:*(void *)(a1 + 136) forKeyedSubscript:@"skanVersion"];
  if (*(void *)(a1 + 136))
  {
    if (ASDInstallAttributionVersionCreateFromString() >= 202)
    {
      uint64_t v6 = sub_10027C92C(a1);
      unsigned __int8 v7 = [v6 allKeys];
      unsigned __int8 v8 = [v7 containsObject:@"fidelity-type"];

      if ((v8 & 1) == 0)
      {
        id v9 = +[NSMutableDictionary dictionaryWithDictionary:v3];
        [v9 setObject:&off_10054BEE0 forKeyedSubscript:@"boundedMismatchType"];
        [v2 addObject:v9];
      }
    }
  }
  id v10 = sub_10027C92C(a1);
  char v11 = [v10 allKeys];
  unsigned __int8 v12 = [v11 containsObject:@"campaign-id"];

  if ((v12 & 1) == 0)
  {
    uint64_t v13 = +[NSMutableDictionary dictionaryWithDictionary:v3];
    [v13 setObject:&off_10054BEF8 forKeyedSubscript:@"boundedMismatchType"];
    [v2 addObject:v13];
  }
  if (*(void *)(a1 + 136))
  {
    if (ASDInstallAttributionVersionCreateFromString() >= 200)
    {
      if (*(unsigned char *)(a1 + 8))
      {
        id v14 = sub_10027C92C(a1);
        char v15 = [v14 allKeys];
        unsigned __int8 v16 = [v15 containsObject:@"conversion-value"];

        if ((v16 & 1) == 0)
        {
          id v17 = +[NSMutableDictionary dictionaryWithDictionary:v3];
          [v17 setObject:&off_10054BF10 forKeyedSubscript:@"boundedMismatchType"];
          [v2 addObject:v17];
        }
      }
    }
    if (*(void *)(a1 + 136))
    {
      if (ASDInstallAttributionVersionCreateFromString() >= 300)
      {
        unsigned int v18 = sub_10027C92C(a1);
        uint64_t v19 = [v18 allKeys];
        unsigned __int8 v20 = [v19 containsObject:@"did-win"];

        if ((v20 & 1) == 0)
        {
          CFStringRef v21 = +[NSMutableDictionary dictionaryWithDictionary:v3];
          [v21 setObject:&off_10054BF28 forKeyedSubscript:@"boundedMismatchType"];
          [v2 addObject:v21];
        }
      }
      if (*(void *)(a1 + 136) && ASDInstallAttributionVersionCreateFromString() >= 400)
      {
        if (*(void *)(a1 + 72))
        {
          if (!*(unsigned char *)(a1 + 9) || !*(unsigned char *)(a1 + 10)) {
            goto LABEL_25;
          }
          uint64_t v22 = 8;
        }
        else
        {
          uint64_t v22 = 6;
        }
        uint64_t v23 = +[NSMutableDictionary dictionaryWithDictionary:v3];
        BOOL v24 = +[NSNumber numberWithInteger:v22];
        [v23 setObject:v24 forKeyedSubscript:@"boundedMismatchType"];

        [v2 addObject:v23];
      }
    }
  }
LABEL_25:

  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v25 = [v2 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v27) {
          objc_enumerationMutation(v2);
        }
        sub_10040E9A0((uint64_t)Analytics, *(void **)(*((void *)&v29 + 1) + 8 * i), 13);
      }
      id v26 = [v2 countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v26);
  }
}

void sub_10027D148(uint64_t a1, int a2, void *a3)
{
  id v13 = a3;
  if (a1)
  {
    if (a2) {
      uint64_t v5 = 9;
    }
    else {
      uint64_t v5 = 10;
    }
    uint64_t v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 120)];
    id v7 = *(id *)(a1 + 32);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 136);

      if (v13)
      {
        if (v8)
        {
          id v9 = objc_opt_new();
          [v9 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"adNetworkName"];
          [v9 setObject:*(void *)(a1 + 136) forKeyedSubscript:@"skadVersion"];
          id v10 = +[NSNumber numberWithInteger:*(void *)(a1 + 160) != 0];
          [v9 setObject:v10 forKeyedSubscript:@"boundedImpressionType"];

          char v11 = +[NSNumber numberWithInteger:*(unsigned __int8 *)(a1 + 14)];
          [v9 setObject:v11 forKeyedSubscript:@"boundedPostbackType"];

          [v9 setObject:v6 forKeyedSubscript:@"retryCount"];
          [v9 setObject:v13 forKeyedSubscript:@"delayTime"];
          unsigned __int8 v12 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 13)];
          [v9 setObject:v12 forKeyedSubscript:@"isWinner"];

          sub_10040E9A0((uint64_t)Analytics, v9, v5);
        }
      }
    }
  }
}

void sub_10027D2EC(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
    BOOL v4 = *(void *)(a1 + 64) != 0;
    if (a2) {
      uint64_t v5 = 7;
    }
    else {
      uint64_t v5 = 8;
    }
    id v9 = (id)objc_opt_new();
    [v9 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"adNetworkName"];
    [v9 setObject:*(void *)(a1 + 136) forKeyedSubscript:@"skadVersion"];
    uint64_t v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 160) != 0];
    [v9 setObject:v6 forKeyedSubscript:@"boundedImpressionType"];

    id v7 = +[NSNumber numberWithBool:v3];
    [v9 setObject:v7 forKeyedSubscript:@"hasConversionValue"];

    uint64_t v8 = +[NSNumber numberWithBool:v4];
    [v9 setObject:v8 forKeyedSubscript:@"hasSourceAppId"];

    sub_10040E9A0((uint64_t)Analytics, v9, v5);
  }
}

id sub_10027D434(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  self;
  id v13 = sub_10030B11C();
  uint64_t v38 = 0;
  sub_10030B948((uint64_t)v13, @"install-attribution-conversion-window-lengths", &v38);
  id v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = v38;

  if (v15)
  {
    unsigned __int8 v16 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[SKAdNetwork: Could not load bag keys for conversion windows", buf, 2u);
    }
  }
  if (!v14) {
    id v14 = @"0:2-3:7-8:35";
  }
  id v17 = +[SKANEnvironmentHelper windowDurationOverrideForEnvironment:v12];
  unsigned int v18 = v17;
  if (v17)
  {
    uint64_t v19 = v17;

    id v14 = v19;
  }
  if (a5)
  {
    double v20 = 60.0;
    if (!v18) {
      double v20 = 86400.0;
    }
    CFStringRef v21 = [v11 dateByAddingTimeInterval:v20];
    if (a2 <= 0) {
      uint32_t v22 = 86400;
    }
    else {
      uint32_t v22 = 432000;
    }
    uint32_t v23 = arc4random_uniform(v22);
    if (v18)
    {
      id v24 = v21;
      CFStringRef v21 = v24;
    }
    else
    {
      id v24 = [v21 dateByAddingTimeInterval:(double)v23];
    }
    uint64_t v35 = v24;
  }
  else
  {
    CFStringRef v21 = sub_1002F2628(v14);
    id v25 = [v21 objectAtIndexedSubscript:1];
    id v26 = [v25 objectAtIndexedSubscript:a2];
    uint64_t v27 = v10;
    uint64_t v28 = (uint64_t)[v26 integerValue];

    uint64_t v29 = 86400 * v28;
    if (v18) {
      uint64_t v29 = v28;
    }
    id v10 = v27;
    double v30 = (double)v29;
    if (!v18) {
      double v30 = v30 + 86400.0;
    }
    long long v31 = [v27 dateByAddingTimeInterval:v30];
    if (a2 <= 0) {
      uint32_t v32 = 86400;
    }
    else {
      uint32_t v32 = 432000;
    }
    uint32_t v33 = arc4random_uniform(v32);
    if (v18)
    {
      id v34 = v31;
    }
    else
    {
      id v34 = [v31 dateByAddingTimeInterval:(double)v33];
    }
    uint64_t v35 = v34;
  }
  return v35;
}

void sub_10027D6CC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_10027D6DC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 176), a2);
  }
}

void *sub_10027D7D8(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)ODRManifestRequestTask;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      uint64_t v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

id *sub_10027DFA0(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)ODRZipStreamDataConsumer;
    uint64_t v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 2, a2);
    }
  }

  return a1;
}

uint64_t sub_10027E140(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + _Block_object_dispose(&a9, 8) = a3;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10027E240(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (ASDErrorIsEqual())
  {

    id v3 = 0;
  }
  else
  {
    id v3 = v4;
  }
  id v5 = v3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10027E404(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    *(void *)(*(void *)(a1 + 32) + 32) = a2;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 16);
  uint64_t v6 = (id *)(v4 + 40);
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained(v6);
  [v5 setExtractorDelegate:WeakRetained];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10027E588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    *(void *)(*(void *)(a1 + 32) + 32) = a2;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10027EB6C(id result, void *a2)
{
  if (result)
  {
    id v2 = a2;
    id v3 = +[NSXPCConnection currentConnection];
    uint64_t v4 = [v3 valueForEntitlement:v2];

    id v5 = [v4 BOOLValue];
    return v5;
  }
  return result;
}

uint64_t sub_10027F1EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10027F700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10027F744(uint64_t a1, void *a2)
{
}

void sub_10027F754(uint64_t a1, void *a2)
{
}

void sub_10027FB30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    objc_super v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Failed authentication request with error %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10027FEB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    objc_super v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@] Error in dialog task: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10028004C(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (a2 > 14999)
  {
    if (a2 <= 16002)
    {
      if (a2 > 16000)
      {
        if (a2 == 16001)
        {
          uint64_t v4 = &stru_100524A88;
          int64_t v5 = 16002;
        }
        else
        {
          uint64_t v4 = &stru_100524AA8;
          int64_t v5 = 16003;
        }
      }
      else if (a2 == 15000)
      {
        uint64_t v4 = &stru_100524A48;
        int64_t v5 = 15001;
      }
      else
      {
        if (a2 != 15001) {
          return;
        }
        uint64_t v4 = &stru_100524A68;
        int64_t v5 = 16001;
      }
      goto LABEL_28;
    }
    if (a2 <= 17000)
    {
      if (a2 == 16003)
      {
        uint64_t v4 = &stru_100524AC8;
        int64_t v5 = 17000;
      }
      else
      {
        if (a2 != 17000) {
          return;
        }
        uint64_t v4 = &stru_100524AE8;
        int64_t v5 = 17001;
      }
      goto LABEL_28;
    }
    if (a2 == 17001)
    {
      uint64_t v4 = &stru_100524B08;
      int64_t v5 = 17400;
      goto LABEL_28;
    }
    if (a2 != 17400) {
      return;
    }
    uint64_t v4 = &stru_100524B28;
  }
  else
  {
    switch(a2)
    {
      case 14000:
      case 14001:
      case 14002:
      case 14003:
      case 14004:
        uint64_t v4 = &stru_1005249E0;
        int64_t v5 = 14005;
        goto LABEL_28;
      case 14005:
        uint64_t v4 = &stru_100524A00;
        int64_t v5 = 14006;
        goto LABEL_28;
      case 14006:
      case 14007:
        uint64_t v4 = &stru_100524A48;
        int64_t v5 = 14008;
        goto LABEL_28;
      case 14008:
      case 14009:
        uint64_t v4 = &stru_100524A00;
        int64_t v5 = 15000;
        goto LABEL_28;
      default:
        if (a2) {
          return;
        }
        uint64_t v4 = &stru_1005249C0;
        break;
    }
  }
  int64_t v5 = 18000;
LABEL_28:
  *a3 = v5;
  id v6 = *a4;
  *a4 = v4;
}

void sub_100280214(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_params (app_adam_id INTEGER, ad_network_id TEXT, campaign_id INTEGER, source_identifier INTEGER, impression_id TEXT, web_impression_id TEXT, timestamp INTEGER, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, version TEXT, local_timestamp INTEGER, fidelity_type INTEGER, interaction_type TEXT, environment TEXT, UNIQUE(app_adam_id, ad_network_id) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_pingbacks (app_adam_id INTEGER, app_bundle_id TEXT, ad_network_id TEXT, campaign_id INTEGER, source_identifier TEXT, transaction_id TEXT, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, conversion_value INTEGER, coarse_conversion_value TEXT, conversion_value_timestamp INTEGER, should_send_conversion_value INTEGER DEFAULT 0, should_send_coarse_conversion_value INTEGER DEFAULT 0, pingback_url TEXT, redownload INTEGER, registered INTEGER, retry_count INTEGER, retry_timestamp INTEGER, version TEXT, local_timestamp INTEGER, maturity_timestamp INTEGER, fidelity_type INTEGER, postback_sequence_index INTEGER DEFAULT 0, is_winning_pingback INTEGER DEFAULT 1, is_developer_pingback INTEGER DEFAULT 0, is_locked INTEGER DEFAULT 0, environment TEXT, UNIQUE(transaction_id, is_developer_pingback) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_impression (app_adam_id INTEGER, ad_network_id TEXT, campaign_id INTEGER, source_identifier INTEGER, impression_id TEXT, source_app_adam_id INTEGER, timestamp INTEGER, attribution_signature TEXT, version TEXT, local_timestamp INTEGER, fidelity_type INTEGER, source_app_bundle_id INTEGER, process_name TEXT, UNIQUE(app_adam_id, source_app_adam_id) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_pingback_fetch_info (app_adam_id INTEGER, fetch_pingback_url TEXT, retry_count INTEGER, UNIQUE(app_adam_id) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_web_params (app_adam_id INTEGER, ad_network_registrable_domain TEXT, source_web_registrable_domain TEXT, impression_id TEXT, version TEXT, timestamp INTEGER, attribution_context INTEGER DEFAULT 0, UNIQUE(app_adam_id, source_web_registrable_domain) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS skan_ghostbacks (app_adam_id INTEGER, app_bundle_id TEXT, restricted_conversion_value INTEGER DEFAULT 0, free_conversion_value INTEGER DEFAULT 0, coarse_conversion_value TEXT, is_registered INTEGER, origin_timestamp INTEGER, update_timestamp INTEGER, restricted_update_timestamp INTEGER, fetch_timestamp INTEGER, is_locked INTEGER DEFAULT 0, environment TEXT, UNIQUE(app_adam_id) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS skan_tokens (app_adam_id INTEGER, blinded_element TEXT, private_input TEXT, finalized_token TEXT, is_redownload INTEGER DEFAULT 0, timestamp INTEGER, certificate TEXT, UNIQUE(app_adam_id) ON CONFLICT REPLACE);",
      1,
      0);
  }
}

void sub_1002802F8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE install_attribution_params;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE install_attribution_pingbacks;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_params (app_adam_id INTEGER, ad_network_id TEXT, campaign_id INTEGER, source_identifier INTEGER, impression_id TEXT, web_impression_id TEXT, timestamp INTEGER, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, version TEXT, local_timestamp INTEGER, fidelity_type INTEGER, interaction_type TEXT, environment TEXT, UNIQUE(app_adam_id, ad_network_id) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_pingbacks (app_adam_id INTEGER, app_bundle_id TEXT, ad_network_id TEXT, campaign_id INTEGER, source_identifier TEXT, transaction_id TEXT, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, conversion_value INTEGER, coarse_conversion_value TEXT, conversion_value_timestamp INTEGER, should_send_conversion_value INTEGER DEFAULT 0, should_send_coarse_conversion_value INTEGER DEFAULT 0, pingback_url TEXT, redownload INTEGER, registered INTEGER, retry_count INTEGER, retry_timestamp INTEGER, version TEXT, local_timestamp INTEGER, maturity_timestamp INTEGER, fidelity_type INTEGER, postback_sequence_index INTEGER DEFAULT 0, is_winning_pingback INTEGER DEFAULT 1, is_developer_pingback INTEGER DEFAULT 0, is_locked INTEGER DEFAULT 0, environment TEXT, UNIQUE(transaction_id, is_developer_pingback) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE install_attribution_impression;", 0, 0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_impression (app_adam_id INTEGER, ad_network_id TEXT, campaign_id INTEGER, source_identifier INTEGER, impression_id TEXT, source_app_adam_id INTEGER, timestamp INTEGER, attribution_signature TEXT, version TEXT, local_timestamp INTEGER, fidelity_type INTEGER, source_app_bundle_id INTEGER, process_name TEXT, UNIQUE(app_adam_id, source_app_adam_id) ON CONFLICT REPLACE);",
      1,
      0);
  }
}

void sub_1002803C4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x3032000000;
  long long v31 = sub_100017FF8;
  uint32_t v32 = sub_100017BB8;
  id v33 = (id)objc_opt_new();
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100280810;
  v27[3] = &unk_100523460;
  v27[4] = &v28;
  if (v2)
  {
    sub_1003D83A8((uint64_t)v2, @"SELECT * from install_attribution_params;", 1, v27);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE install_attribution_params;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_params (app_adam_id INTEGER, ad_network_id TEXT, campaign_id INTEGER, source_identifier INTEGER, impression_id TEXT, web_impression_id TEXT, timestamp INTEGER, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, version TEXT, local_timestamp INTEGER, fidelity_type INTEGER, interaction_type TEXT, environment TEXT, UNIQUE(app_adam_id, ad_network_id) ON CONFLICT REPLACE);",
      1,
      0);
  }
  uint64_t v23 = 0;
  id v24 = &v23;
  uint64_t v25 = 0x2020000000;
  char v26 = 1;
  id v3 = (void *)v29[5];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100280AA0;
  void v20[3] = &unk_100524A28;
  uint64_t v4 = v2;
  CFStringRef v21 = v4;
  uint32_t v22 = &v23;
  [v3 enumerateObjectsUsingBlock:v20];
  if ([(id)v29[5] count] && !*((unsigned char *)v24 + 24))
  {
    int64_t v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Params migration failure.", buf, 2u);
    }
  }
  *(void *)long long buf = 0;
  uint64_t v15 = buf;
  uint64_t v16 = 0x3032000000;
  id v17 = sub_100017FF8;
  unsigned int v18 = sub_100017BB8;
  id v19 = (id)objc_opt_new();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_100280B58;
  v13[3] = &unk_100523460;
  void v13[4] = buf;
  if (v2)
  {
    sub_1003D83A8((uint64_t)v4, @"SELECT * from install_attribution_pingbacks;", 1, v13);
    sub_1003D82F4((uint64_t)v4, @"DROP TABLE install_attribution_pingbacks;", 1, 0);
    sub_1003D82F4((uint64_t)v4, @"CREATE TABLE IF NOT EXISTS install_attribution_pingbacks (app_adam_id INTEGER, app_bundle_id TEXT, ad_network_id TEXT, campaign_id INTEGER, source_identifier TEXT, transaction_id TEXT, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, conversion_value INTEGER, coarse_conversion_value TEXT, conversion_value_timestamp INTEGER, should_send_conversion_value INTEGER DEFAULT 0, should_send_coarse_conversion_value INTEGER DEFAULT 0, pingback_url TEXT, redownload INTEGER, registered INTEGER, retry_count INTEGER, retry_timestamp INTEGER, version TEXT, local_timestamp INTEGER, maturity_timestamp INTEGER, fidelity_type INTEGER, postback_sequence_index INTEGER DEFAULT 0, is_winning_pingback INTEGER DEFAULT 1, is_developer_pingback INTEGER DEFAULT 0, is_locked INTEGER DEFAULT 0, environment TEXT, UNIQUE(transaction_id, is_developer_pingback) ON CONFLICT REPLACE);",
      1,
      0);
  }
  *((unsigned char *)v24 + 24) = 1;
  id v6 = (void *)*((void *)v15 + 5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100280DE8;
  v10[3] = &unk_100524A28;
  objc_super v7 = v4;
  __int16 v11 = v7;
  id v12 = &v23;
  [v6 enumerateObjectsUsingBlock:v10];
  if ([*((id *)v15 + 5) count] && !*((unsigned char *)v24 + 24))
  {
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      __int16 v9 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Pingbacks migration failure.", (uint8_t *)&v9, 2u);
    }
  }
  if (v2) {
    sub_1003D82F4((uint64_t)v7, @"CREATE TABLE IF NOT EXISTS install_attribution_pingback_fetch_info (app_adam_id INTEGER, fetch_pingback_url TEXT, retry_count INTEGER, UNIQUE(app_adam_id) ON CONFLICT REPLACE);",
  }
      1,
      0);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v28, 8);
}

void sub_1002807C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100280810(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    objc_super v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v6;
      uint64_t v8 = "Error fetching rows from parameters table %@";
      __int16 v9 = v7;
      uint32_t v10 = 12;
LABEL_8:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if (!sub_100242EB8((uint64_t)v5))
  {
    objc_super v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v8 = "No rows found in parameters table.";
      __int16 v9 = v7;
      uint32_t v10 = 2;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_10;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10028098C;
  v11[3] = &unk_100523438;
  void v11[4] = *(void *)(a1 + 32);
  sub_1000096CC((uint64_t)v5, v11);
LABEL_10:
}

void sub_10028098C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  objc_super v7 = a2;
  id v8 = a3;
  if (!v7)
  {
    __int16 v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error getting cursor to transfer parameters over. Error:%@", (uint8_t *)&v12, 0xCu);
    }

    *a4 = 1;
  }
  uint32_t v10 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  __int16 v11 = sub_1003D5EB0(v7);
  [v10 addObject:v11];
}

void sub_100280AA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [InstallAttributionParamsDatabaseEntity alloc];
  id v5 = sub_1003169B4(*(id **)(a1 + 32));
  id v8 = [(SQLiteEntity *)v4 initWithPropertyValues:v3 onConnection:v5];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v6 + 24))
  {
    unsigned __int8 v7 = [(SQLiteEntity *)v8 existsInDatabase];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  *(unsigned char *)(v6 + 24) = v7;
}

void sub_100280B58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v6;
      id v8 = "Error fetching rows from pingbacks table %@";
      __int16 v9 = v7;
      uint32_t v10 = 12;
LABEL_8:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if (!sub_100242EB8((uint64_t)v5))
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      id v8 = "No rows found in pingbacks table.";
      __int16 v9 = v7;
      uint32_t v10 = 2;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_10;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100280CD4;
  v11[3] = &unk_100523438;
  void v11[4] = *(void *)(a1 + 32);
  sub_1000096CC((uint64_t)v5, v11);
LABEL_10:
}

void sub_100280CD4(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  unsigned __int8 v7 = a2;
  id v8 = a3;
  if (!v7)
  {
    __int16 v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error getting cursor to transfer pingbacks over. Error:%@", (uint8_t *)&v12, 0xCu);
    }

    *a4 = 1;
  }
  uint32_t v10 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  __int16 v11 = sub_1003D5EB0(v7);
  [v10 addObject:v11];
}

void sub_100280DE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [InstallAttributionPingbackDatabaseEntity alloc];
  id v5 = sub_1003169B4(*(id **)(a1 + 32));
  id v8 = [(SQLiteEntity *)v4 initWithPropertyValues:v3 onConnection:v5];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v6 + 24))
  {
    unsigned __int8 v7 = [(SQLiteEntity *)v8 existsInDatabase];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  *(unsigned char *)(v6 + 24) = v7;
}

void sub_100280EA0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  uint64_t v17 = 0;
  unsigned int v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 1;
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x3032000000;
  id v14 = sub_100017FF8;
  uint64_t v15 = sub_100017BB8;
  id v16 = (id)objc_opt_new();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002810F4;
  v10[3] = &unk_100523460;
  void v10[4] = &v11;
  if (v2)
  {
    sub_1003D83A8((uint64_t)v2, @"SELECT * from install_attribution_pingbacks;", 1, v10);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE install_attribution_pingbacks;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_pingbacks (app_adam_id INTEGER, app_bundle_id TEXT, ad_network_id TEXT, campaign_id INTEGER, source_identifier TEXT, transaction_id TEXT, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, conversion_value INTEGER, coarse_conversion_value TEXT, conversion_value_timestamp INTEGER, should_send_conversion_value INTEGER DEFAULT 0, should_send_coarse_conversion_value INTEGER DEFAULT 0, pingback_url TEXT, redownload INTEGER, registered INTEGER, retry_count INTEGER, retry_timestamp INTEGER, version TEXT, local_timestamp INTEGER, maturity_timestamp INTEGER, fidelity_type INTEGER, postback_sequence_index INTEGER DEFAULT 0, is_winning_pingback INTEGER DEFAULT 1, is_developer_pingback INTEGER DEFAULT 0, is_locked INTEGER DEFAULT 0, environment TEXT, UNIQUE(transaction_id, is_developer_pingback) ON CONFLICT REPLACE);",
      1,
      0);
  }
  id v3 = (void *)v12[5];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100281384;
  v7[3] = &unk_100524A28;
  uint64_t v4 = v2;
  id v8 = v4;
  __int16 v9 = &v17;
  [v3 enumerateObjectsUsingBlock:v7];
  if ([(id)v12[5] count] && !*((unsigned char *)v18 + 24))
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      __int16 v6 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Pingbacks migration failure", (uint8_t *)&v6, 2u);
    }
  }
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
}

void sub_1002810C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1002810F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v6;
      id v8 = "Error fetching rows from pingbacks table %@";
      __int16 v9 = v7;
      uint32_t v10 = 12;
LABEL_8:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if (!sub_100242EB8((uint64_t)v5))
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      id v8 = "No rows found in pingbacks table.";
      __int16 v9 = v7;
      uint32_t v10 = 2;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_10;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100281270;
  v11[3] = &unk_100523438;
  void v11[4] = *(void *)(a1 + 32);
  sub_1000096CC((uint64_t)v5, v11);
LABEL_10:
}

void sub_100281270(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  unsigned __int8 v7 = a2;
  id v8 = a3;
  if (!v7)
  {
    __int16 v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error getting cursor to transfer pingbacks over. Error: %@", (uint8_t *)&v12, 0xCu);
    }

    *a4 = 1;
  }
  uint32_t v10 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v11 = sub_1003D5EB0(v7);
  [v10 addObject:v11];
}

void sub_100281384(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [InstallAttributionPingbackDatabaseEntity alloc];
  id v5 = sub_1003169B4(*(id **)(a1 + 32));
  id v8 = [(SQLiteEntity *)v4 initWithPropertyValues:v3 onConnection:v5];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v6 + 24))
  {
    unsigned __int8 v7 = [(SQLiteEntity *)v8 existsInDatabase];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  *(unsigned char *)(v6 + 24) = v7;
}

void sub_10028143C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  uint64_t v41 = 0;
  id v42 = &v41;
  uint64_t v43 = 0x3032000000;
  id v44 = sub_100017FF8;
  id v45 = sub_100017BB8;
  id v46 = (id)objc_opt_new();
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_100281A50;
  v40[3] = &unk_100523460;
  void v40[4] = &v41;
  if (v2)
  {
    sub_1003D83A8((uint64_t)v2, @"SELECT * from install_attribution_impression;", 1, v40);
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE install_attribution_impression;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS install_attribution_impression (app_adam_id INTEGER, ad_network_id TEXT, campaign_id INTEGER, source_identifier INTEGER, impression_id TEXT, source_app_adam_id INTEGER, timestamp INTEGER, attribution_signature TEXT, version TEXT, local_timestamp INTEGER, fidelity_type INTEGER, source_app_bundle_id INTEGER, process_name TEXT, UNIQUE(app_adam_id, source_app_adam_id) ON CONFLICT REPLACE);",
      1,
      0);
  }
  uint64_t v36 = 0;
  id v37 = &v36;
  uint64_t v38 = 0x2020000000;
  char v39 = 1;
  id v3 = (void *)v42[5];
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_100281CE0;
  v33[3] = &unk_100524A28;
  uint64_t v4 = v2;
  uint64_t v34 = v4;
  uint64_t v35 = &v36;
  [v3 enumerateObjectsUsingBlock:v33];
  if ([(id)v42[5] count] && !*((unsigned char *)v37 + 24))
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Impression migration failure.", buf, 2u);
    }
  }
  *(void *)long long buf = 0;
  uint64_t v28 = buf;
  uint64_t v29 = 0x3032000000;
  uint64_t v30 = sub_100017FF8;
  long long v31 = sub_100017BB8;
  id v32 = (id)objc_opt_new();
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  void v26[2] = sub_100281D98;
  v26[3] = &unk_100523460;
  v26[4] = buf;
  if (v2)
  {
    sub_1003D83A8((uint64_t)v4, @"SELECT * from install_attribution_params;", 1, v26);
    sub_1003D82F4((uint64_t)v4, @"DROP TABLE install_attribution_params;", 1, 0);
    sub_1003D82F4((uint64_t)v4, @"CREATE TABLE IF NOT EXISTS install_attribution_params (app_adam_id INTEGER, ad_network_id TEXT, campaign_id INTEGER, source_identifier INTEGER, impression_id TEXT, web_impression_id TEXT, timestamp INTEGER, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, version TEXT, local_timestamp INTEGER, fidelity_type INTEGER, interaction_type TEXT, environment TEXT, UNIQUE(app_adam_id, ad_network_id) ON CONFLICT REPLACE);",
      1,
      0);
  }
  *((unsigned char *)v37 + 24) = 1;
  uint64_t v6 = (void *)*((void *)v28 + 5);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100282028;
  v23[3] = &unk_100524A28;
  unsigned __int8 v7 = v4;
  id v24 = v7;
  uint64_t v25 = &v36;
  [v6 enumerateObjectsUsingBlock:v23];
  if ([*((id *)v28 + 5) count] && !*((unsigned char *)v37 + 24))
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Params migration failure.", v17, 2u);
    }
  }
  *(void *)uint64_t v17 = 0;
  unsigned int v18 = v17;
  uint64_t v19 = 0x3032000000;
  char v20 = sub_100017FF8;
  CFStringRef v21 = sub_100017BB8;
  id v22 = (id)objc_opt_new();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1002820E0;
  v16[3] = &unk_100523460;
  void v16[4] = v17;
  if (v2)
  {
    sub_1003D83A8((uint64_t)v7, @"SELECT * from install_attribution_pingbacks;", 1, v16);
    sub_1003D82F4((uint64_t)v7, @"DROP TABLE install_attribution_pingbacks;", 1, 0);
    sub_1003D82F4((uint64_t)v7, @"CREATE TABLE IF NOT EXISTS install_attribution_pingbacks (app_adam_id INTEGER, app_bundle_id TEXT, ad_network_id TEXT, campaign_id INTEGER, source_identifier TEXT, transaction_id TEXT, attribution_signature TEXT, source_app_adam_id INTEGER, source_domain TEXT, conversion_value INTEGER, coarse_conversion_value TEXT, conversion_value_timestamp INTEGER, should_send_conversion_value INTEGER DEFAULT 0, should_send_coarse_conversion_value INTEGER DEFAULT 0, pingback_url TEXT, redownload INTEGER, registered INTEGER, retry_count INTEGER, retry_timestamp INTEGER, version TEXT, local_timestamp INTEGER, maturity_timestamp INTEGER, fidelity_type INTEGER, postback_sequence_index INTEGER DEFAULT 0, is_winning_pingback INTEGER DEFAULT 1, is_developer_pingback INTEGER DEFAULT 0, is_locked INTEGER DEFAULT 0, environment TEXT, UNIQUE(transaction_id, is_developer_pingback) ON CONFLICT REPLACE);",
      1,
      0);
  }
  *((unsigned char *)v37 + 24) = 1;
  __int16 v9 = (void *)*((void *)v18 + 5);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_100282370;
  v13[3] = &unk_100524A28;
  uint32_t v10 = v7;
  id v14 = v10;
  uint64_t v15 = &v36;
  [v9 enumerateObjectsUsingBlock:v13];
  if ([*((id *)v18 + 5) count] && !*((unsigned char *)v37 + 24))
  {
    uint64_t v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Pingbacks migration failure.", (uint8_t *)&v12, 2u);
    }
  }
  if (v2) {
    sub_1003D82F4((uint64_t)v10, @"CREATE TABLE IF NOT EXISTS install_attribution_web_params (app_adam_id INTEGER, ad_network_registrable_domain TEXT, source_web_registrable_domain TEXT, impression_id TEXT, version TEXT, timestamp INTEGER, attribution_context INTEGER DEFAULT 0, UNIQUE(app_adam_id, source_web_registrable_domain) ON CONFLICT REPLACE);",
  }
      1,
      0);

  _Block_object_dispose(v17, 8);
  _Block_object_dispose(buf, 8);

  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v41, 8);
}

void sub_1002819E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 200), 8);
  _Block_object_dispose((const void *)(v39 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100281A50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v6;
      id v8 = "Error fetching rows from impressions table %@";
      __int16 v9 = v7;
      uint32_t v10 = 12;
LABEL_8:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if (!sub_100242EB8((uint64_t)v5))
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      id v8 = "No rows found in impressions table.";
      __int16 v9 = v7;
      uint32_t v10 = 2;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_10;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100281BCC;
  v11[3] = &unk_100523438;
  void v11[4] = *(void *)(a1 + 32);
  sub_1000096CC((uint64_t)v5, v11);
LABEL_10:
}

void sub_100281BCC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  unsigned __int8 v7 = a2;
  id v8 = a3;
  if (!v7)
  {
    __int16 v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error getting cursor to transfer impressions over. Error:%@", (uint8_t *)&v12, 0xCu);
    }

    *a4 = 1;
  }
  uint32_t v10 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v11 = sub_1003D5EB0(v7);
  [v10 addObject:v11];
}

void sub_100281CE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [InstallAttributionImpressionDatabaseEntity alloc];
  id v5 = sub_1003169B4(*(id **)(a1 + 32));
  id v8 = [(SQLiteEntity *)v4 initWithPropertyValues:v3 onConnection:v5];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v6 + 24))
  {
    unsigned __int8 v7 = [(SQLiteEntity *)v8 existsInDatabase];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  *(unsigned char *)(v6 + 24) = v7;
}

void sub_100281D98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v6;
      id v8 = "Error fetching rows from parameters table %@";
      __int16 v9 = v7;
      uint32_t v10 = 12;
LABEL_8:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if (!sub_100242EB8((uint64_t)v5))
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      id v8 = "No rows found in parameters table.";
      __int16 v9 = v7;
      uint32_t v10 = 2;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_10;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100281F14;
  v11[3] = &unk_100523438;
  void v11[4] = *(void *)(a1 + 32);
  sub_1000096CC((uint64_t)v5, v11);
LABEL_10:
}

void sub_100281F14(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  unsigned __int8 v7 = a2;
  id v8 = a3;
  if (!v7)
  {
    __int16 v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error getting cursor to transfer parameters over. Error:%@", (uint8_t *)&v12, 0xCu);
    }

    *a4 = 1;
  }
  uint32_t v10 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v11 = sub_1003D5EB0(v7);
  [v10 addObject:v11];
}

void sub_100282028(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [InstallAttributionParamsDatabaseEntity alloc];
  id v5 = sub_1003169B4(*(id **)(a1 + 32));
  id v8 = [(SQLiteEntity *)v4 initWithPropertyValues:v3 onConnection:v5];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v6 + 24))
  {
    unsigned __int8 v7 = [(SQLiteEntity *)v8 existsInDatabase];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  *(unsigned char *)(v6 + 24) = v7;
}

void sub_1002820E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v6;
      id v8 = "Error fetching rows from pingbacks table %@";
      __int16 v9 = v7;
      uint32_t v10 = 12;
LABEL_8:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if (!sub_100242EB8((uint64_t)v5))
  {
    unsigned __int8 v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      id v8 = "No rows found in pingbacks table.";
      __int16 v9 = v7;
      uint32_t v10 = 2;
      goto LABEL_8;
    }
LABEL_9:

    goto LABEL_10;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10028225C;
  v11[3] = &unk_100523438;
  void v11[4] = *(void *)(a1 + 32);
  sub_1000096CC((uint64_t)v5, v11);
LABEL_10:
}

void sub_10028225C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  unsigned __int8 v7 = a2;
  id v8 = a3;
  if (!v7)
  {
    __int16 v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error getting cursor to transfer pingbacks over. Error:%@", (uint8_t *)&v12, 0xCu);
    }

    *a4 = 1;
  }
  uint32_t v10 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v11 = sub_1003D5EB0(v7);
  [v10 addObject:v11];
}

void sub_100282370(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [InstallAttributionPingbackDatabaseEntity alloc];
  id v5 = sub_1003169B4(*(id **)(a1 + 32));
  id v8 = [(SQLiteEntity *)v4 initWithPropertyValues:v3 onConnection:v5];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v6 + 24))
  {
    unsigned __int8 v7 = [(SQLiteEntity *)v8 existsInDatabase];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  *(unsigned char *)(v6 + 24) = v7;
}

void sub_100282428(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE install_attribution_pingbacks ADD COLUMN is_locked INTEGER DEFAULT 0;",
  }
      0,
      0);
}

void sub_10028244C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE install_attribution_params ADD COLUMN web_impression_id TEXT;",
  }
      0,
      0);
}

void sub_100282470(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS skan_ghostbacks (app_adam_id INTEGER, app_bundle_id TEXT, restricted_conversion_value INTEGER DEFAULT 0, free_conversion_value INTEGER DEFAULT 0, coarse_conversion_value TEXT, is_registered INTEGER, origin_timestamp INTEGER, update_timestamp INTEGER, restricted_update_timestamp INTEGER, fetch_timestamp INTEGER, is_locked INTEGER DEFAULT 0, environment TEXT, UNIQUE(app_adam_id) ON CONFLICT REPLACE);",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS skan_tokens (app_adam_id INTEGER, blinded_element TEXT, private_input TEXT, finalized_token TEXT, is_redownload INTEGER DEFAULT 0, timestamp INTEGER, certificate TEXT, UNIQUE(app_adam_id) ON CONFLICT REPLACE);",
      1,
      0);
  }
}

void sub_1002824DC(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE skan_tokens ADD COLUMN certificate TEXT;", 0, 0);
  }
}

void sub_100282500(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE install_attribution_params ADD COLUMN interaction_type TEXT;",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"UPDATE install_attribution_params SET interaction_type = 'view';", 0, 0);
  }
}

void sub_10028256C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE install_attribution_params ADD COLUMN environment TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE skan_ghostbacks ADD COLUMN environment TEXT;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE install_attribution_pingbacks ADD COLUMN environment TEXT;", 1, 0);
  }
}

id sub_1002825F0(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if (qword_1005B0CA0 != -1) {
      dispatch_once(&qword_1005B0CA0, &stru_100524B48);
    }
    a1 = [(id)qword_1005B0C98 stringFromDate:v2];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100282660(id a1)
{
  id v1 = objc_alloc_init((Class)NSISO8601DateFormatter);
  id v2 = (void *)qword_1005B0C98;
  qword_1005B0C98 = (uint64_t)v1;
}

void *sub_10028269C(void *result, double a2)
{
  if (result)
  {
    [result timeIntervalSinceNow];
    return (void *)(-v3 >= a2);
  }
  return result;
}

id sub_1002826D4(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if (qword_1005B0CB0 != -1) {
      dispatch_once(&qword_1005B0CB0, &stru_100524B68);
    }
    a1 = [(id)qword_1005B0CA8 stringFromDate:v2];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100282744(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_1005B0CA8;
  qword_1005B0CA8 = (uint64_t)v1;

  id v3 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US_POSIX"];
  [(id)qword_1005B0CA8 setLocale:v3];
  [(id)qword_1005B0CA8 setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
}

id sub_1002827D0(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if (qword_1005B0CC0 != -1) {
      dispatch_once(&qword_1005B0CC0, &stru_100524B88);
    }
    a1 = [(id)qword_1005B0CB8 stringFromDate:v2];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100282840(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_1005B0CB8;
  qword_1005B0CB8 = (uint64_t)v1;

  id v3 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US_POSIX"];
  [(id)qword_1005B0CB8 setLocale:v3];
  [(id)qword_1005B0CB8 setDateFormat:@"yyyy-MM-dd"];
}

id *sub_1002828CC(void *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1
    && (v20.receiver = a1,
        v20.super_class = (Class)SQLiteDatabaseStoreSchema,
        (uint64_t v11 = (id *)objc_msgSendSuper2(&v20, "init")) != 0))
  {
    int v12 = v11;
    objc_storeStrong(v11 + 1, a2);
    objc_storeStrong(v12 + 2, a3);
    id v13 = [v10 copy];
    id v14 = v12[3];
    v12[3] = v13;

    uint64_t v15 = (uint64_t)v12[1];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1002829FC;
    v18[3] = &unk_100524BB0;
    id v16 = v12;
    uint64_t v19 = v16;
    sub_100011D9C(v15, v18);
  }
  else
  {
    id v16 = 0;
  }

  return v16;
}

uint64_t sub_1002829FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v2)
  {
    sub_100012004(v2, @"PRAGMA user_version = 1;", 0, 0);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v3) {
      sub_100012004(v3, @"CREATE TABLE IF NOT EXISTS schema_version (schema_name TEXT, schema_version INTEGER DEFAULT 0, PRIMARY KEY(schema_name));",
    }
        0,
        0);
  }
  return 1;
}

uint64_t sub_100282A60(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100282B38;
  v4[3] = &unk_100523FE8;
  void v4[4] = a1;
  v4[5] = &v5;
  sub_100009834(v1, @"SELECT schema_version FROM schema_version WHERE schema_name = ?", v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100282B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100282B38(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  uint64_t v5 = sub_100242DA8((uint64_t)v4);

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v5;
}

uint64_t sub_100282B98(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100282C54;
    v10[3] = &unk_100524C00;
    void v10[4] = a1;
    id v11 = v5;
    uint64_t v12 = a2;
    uint64_t v8 = sub_10025E854(v7, v10);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t sub_100282C54(void *a1)
{
  uint64_t v2 = sub_1003D8250((id *)[SQLiteDatabaseStoreMigrator alloc], *(void **)(a1[4] + 8), *(void **)(a1[4] + 24));
  (*(void (**)(void))(a1[5] + 16))();
  if (v2 && ((_BYTE)v2[3] & 1) != 0)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = *(void *)(v4 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100282D38;
    v8[3] = &unk_100524BD8;
    uint64_t v6 = a1[6];
    void v8[4] = v4;
    void v8[5] = v6;
    uint64_t v3 = sub_100012004(v5, @"INSERT OR REPLACE INTO schema_version (schema_name, schema_version) VALUES (?, ?)", 0, v8);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_100282D38(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  [v4 bindInt64:*(void *)(a1 + 40) atPosition:2];
}

uint64_t sub_100282DA0(uint64_t result, uint64_t a2, void *a3)
{
  if (result) {
    return sub_100282DB0(result, a2, a3, 0);
  }
  return result;
}

uint64_t sub_100282DB0(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = a3;
  if (a1)
  {
    int v19 = a4;
    uint64_t v8 = sub_100282A60(a1);
    if (v8 < a2)
    {
      while (1)
      {
        uint64_t v23 = 0;
        *(void *)id v24 = -1;
        v7[2](v7, v8, v24, &v23);
        if (*(uint64_t *)v24 <= v8 || *(void *)v24 > a2) {
          break;
        }
        if (!v23)
        {
          uint64_t v12 = ASDLogHandleForCategory();
          if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            goto LABEL_20;
          }
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = v8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = *(void *)v24;
          uint64_t v15 = "No migration block provided to migrate schema version %lli -> %lli";
          goto LABEL_32;
        }
        char v10 = sub_100282B98(a1, *(uint64_t *)v24, v23);
        id v11 = ASDLogHandleForCategory();
        uint64_t v12 = v11;
        if ((v10 & 1) == 0)
        {
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
            goto LABEL_20;
          }
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = v8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = *(void *)v24;
          uint64_t v15 = "Database migration function failed for %lli => %lli";
          goto LABEL_32;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = v8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = *(void *)v24;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Database migration function succeeded for %lli => %lli", buf, 0x16u);
        }

        uint64_t v8 = *(void *)v24;
        if (v8 >= a2) {
          goto LABEL_21;
        }
      }
      BOOL v13 = *(void *)v24 == -1;
      id v14 = ASDLogHandleForCategory();
      uint64_t v12 = v14;
      if (!v13)
      {
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          goto LABEL_20;
        }
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = *(void *)v24;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v8;
        uint64_t v15 = "Invalid version %lli provided; currentVersion: %lli";
LABEL_32:
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v15, buf, 0x16u);
        goto LABEL_20;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = *(void *)v24;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Version mapping not provided for %lli", buf, 0xCu);
      }
LABEL_20:
    }
LABEL_21:
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    BOOL v26 = v8 == a2;
    if (v8 != a2)
    {
      if (v19)
      {
        id v16 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v24 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Not reattempting to reset schema", v24, 2u);
        }
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 8);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_10028319C;
        void v20[3] = &unk_100524C48;
        void v20[4] = a1;
        id v22 = buf;
        CFStringRef v21 = v7;
        sub_100011D9C(v17, v20);
      }
    }
    a1 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
  }

  return a1;
}

void sub_100283178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10028319C(uint64_t *a1)
{
  if (sub_100282B98(a1[4], 0, &stru_100524C20))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v2 = *(id *)(a1[4] + 24);
    id v3 = [v2 countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v16;
      while (2)
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v7 = *(void *)(*((void *)&v15 + 1) + 8 * (void)v6);
          uint64_t v14 = 0;
          uint64_t v8 = [@"DROP TABLE IF EXISTS " stringByAppendingString:v7];
          uint64_t v9 = *(void *)(a1[4] + 8);
          if (!v9 || (sub_100012004(v9, v8, &v14, 0) & 1) == 0)
          {
            BOOL v13 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              uint64_t v20 = v14;
              _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to drop table: %{public}@", buf, 0xCu);
            }

            *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
            return 0;
          }

          uint64_t v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v15 objects:v21 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }

    char v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Successfully reset schema; requesting migration from version 0",
        buf,
        2u);
    }

    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = sub_100282DB0(a1[4], 0, a1[5], 1);
    return *(unsigned char *)(*(void *)(a1[6] + 8) + 24) != 0;
  }
  else
  {
    uint64_t v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to set schema version back to 0; rolling back transaction",
        buf,
        2u);
    }

    BOOL result = 0;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
  }
  return result;
}

id sub_100283508(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  self;
  uint64_t v5 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.appstored.encryption", v4];

  id v6 = v5;
  uint64_t v7 = self;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, 0, 0);
  CFDictionaryAddValue(Mutable, kSecAttrAccount, v6);

  CFDictionaryAddValue(Mutable, kSecAttrNoLegacy, kCFBooleanTrue);
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(Mutable, kSecReturnData, kCFBooleanTrue);
  CFTypeRef result = 0;
  OSStatus v9 = SecItemCopyMatching(Mutable, &result);
  if (v9) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = result == 0;
  }
  if (v10)
  {
    if (v9 == -25300 || v9 == 0)
    {
      uint64_t v15 = ASDErrorWithUserInfoAndFormat();
    }
    else
    {
      uint64_t v15 = sub_1002838D0(v7, v9);
    }
    uint64_t v14 = (void *)v15;
    id v13 = 0;
    if (!a3) {
      goto LABEL_17;
    }
  }
  else
  {
    id v12 = objc_alloc((Class)NSData);
    id v13 = [v12 initWithBase64EncodedData:result options:0];
    CFRelease(result);
    uint64_t v14 = 0;
    if (!a3) {
      goto LABEL_17;
    }
  }
  if (!v13) {
    *a3 = v14;
  }
LABEL_17:
  CFRelease(Mutable);

  return v13;
}

BOOL sub_1002836F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a2;
  self;
  uint64_t v8 = +[NSString stringWithFormat:@"%@.%@", @"com.apple.appstored.encryption", v6];

  id v9 = v8;
  id v10 = v7;
  uint64_t v11 = self;
  id v12 = [v10 base64EncodedDataWithOptions:0];

  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 7, 0, 0);
  CFDictionaryAddValue(Mutable, kSecAttrAccount, v9);

  CFDictionaryAddValue(Mutable, kSecAttrLabel, @"App Store User Data Encryption");
  CFDictionaryAddValue(Mutable, kSecAttrNoLegacy, kCFBooleanTrue);
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(Mutable, kSecValueData, v12);
  SecItemDelete(Mutable);
  OSStatus v14 = SecItemAdd(Mutable, 0);
  CFRelease(Mutable);
  if (v14)
  {
    uint64_t v15 = (void *)sub_1002838D0(v11, v14);
    id v16 = v15;
    if (a4)
    {
      id v16 = v15;
      *a4 = v16;
    }
  }
  else
  {
    id v16 = 0;
  }

  return v14 == 0;
}

uint64_t sub_1002838D0(uint64_t a1, OSStatus a2)
{
  self;
  id v3 = (__CFString *)SecCopyErrorMessageString(a2, 0);
  uint64_t v4 = ASDErrorWithUserInfoAndFormat();

  return v4;
}

void *sub_100283AA0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)ODRApplicationRepairTask;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      uint64_t v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

void sub_100283BAC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = &v4;
    uint64_t v6 = 0x3032000000;
    objc_super v7 = sub_100018008;
    uint64_t v8 = sub_100017BC0;
    id v9 = 0;
    id v2 = sub_1002393C4();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_100283CD0;
    void v3[3] = &unk_100523970;
    v3[4] = v1;
    v3[5] = &v4;
    [v2 modifyUsingTransaction:v3];

    if (v5[5]) {
      objc_msgSend(v1, "completeWithError:");
    }
    else {
      [v1 completeWithSuccess];
    }
    _Block_object_dispose(&v4, 8);
  }
}

void sub_100283CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100283CD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = sub_1001F7BB0(v3, v4);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    unsigned int v43 = v6;
    objc_super v7 = +[NSFileManager defaultManager];
    uint64_t v8 = sub_10022FA6C((uint64_t)ODRAssetPack, *(void **)(*(void *)(a1 + 32) + 40));
    uint64_t v44 = a1;
    id v46 = v3;
    sub_1001F8948(v3, *(void **)(*(void *)(a1 + 32) + 40));
    id v48 = (id *)objc_claimAutoreleasedReturnValue();
    sub_1002AEDB4(v48);
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    id v49 = (id)objc_claimAutoreleasedReturnValue();
    id v9 = [v49 countByEnumeratingWithState:&v51 objects:v62 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v52;
      id v45 = v7;
      id v47 = v8;
      while (2)
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v52 != v11) {
            objc_enumerationMutation(v49);
          }
          id v13 = *(void **)(*((void *)&v51 + 1) + 8 * i);
          OSStatus v14 = sub_100297D1C(v13);
          uint64_t v15 = [v14 absoluteString];

          if (v15 && [v15 hasPrefix:v8])
          {
            id v16 = sub_1002AEBB0(v48);
            long long v17 = sub_10022FD2C(v13, v16);
            long long v18 = +[NSURL fileURLWithPath:v17 isDirectory:1];

            int v19 = sub_100297D1C(v13);
            if (![v19 isFileURL]
              || [v18 isEqual:v19])
            {
              uint64_t v36 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
              {
                uint64_t v39 = sub_100297AC0(v13);
                uint64_t v40 = *(void *)(*(void *)(v44 + 32) + 40);
                *(_DWORD *)long long buf = 138543874;
                id v57 = v39;
                __int16 v58 = 2114;
                uint64_t v59 = v40;
                __int16 v60 = 2114;
                id v61 = v19;
                _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Asset %{public}@ for application %{public}@ does not need repair: %{public}@", buf, 0x20u);
              }
              goto LABEL_35;
            }
            uint64_t v20 = [v19 path];
            unsigned __int8 v21 = [v7 fileExistsAtPath:v20];

            if ((v21 & 1) == 0)
            {
              id v37 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                uint64_t v41 = sub_100297AC0(v13);
                uint64_t v42 = *(void *)(*(void *)(v44 + 32) + 40);
                *(_DWORD *)long long buf = 138543874;
                id v57 = v41;
                __int16 v58 = 2114;
                uint64_t v59 = v42;
                __int16 v60 = 2114;
                id v61 = v19;
                _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Asset %{public}@ for application %{public}@ has gone: %{public}@", buf, 0x20u);
              }
              sub_10029805C(v13, 0);
              sub_100249F50(v46, v13);
LABEL_35:

              uint64_t v8 = v47;
              goto LABEL_36;
            }
            id v22 = [v18 path];
            unsigned __int8 v23 = [v7 fileExistsAtPath:v22];

            if (v23)
            {
              id v24 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                uint64_t v25 = sub_100297AC0(v13);
                uint64_t v26 = *(void *)(*(void *)(v44 + 32) + 40);
                *(_DWORD *)long long buf = 138543618;
                id v57 = v25;
                __int16 v58 = 2114;
                uint64_t v59 = v26;
                _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Asset %{public}@ for application %{public}@ already repaired", buf, 0x16u);
              }
            }
            else
            {
              id v50 = 0;
              unsigned int v27 = [v7 moveItemAtURL:v19 toURL:v18 error:&v50];
              id v24 = v50;
              uint64_t v28 = ASDLogHandleForCategory();
              uint64_t v29 = v28;
              if (v27)
              {
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v30 = sub_100297AC0(v13);
                  uint64_t v31 = *(void *)(*(void *)(v44 + 32) + 40);
                  *(_DWORD *)long long buf = 138543618;
                  id v57 = v30;
                  __int16 v58 = 2114;
                  uint64_t v59 = v31;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Asset %{public}@ for application %{public}@ moved successfully", buf, 0x16u);
                }
                sub_10029805C(v13, v18);
                sub_100249F50(v46, v13);
              }
              else
              {
                if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                {
                  id v32 = sub_100297AC0(v13);
                  uint64_t v33 = *(void *)(*(void *)(v44 + 32) + 40);
                  *(_DWORD *)long long buf = 138543874;
                  id v57 = v32;
                  __int16 v58 = 2114;
                  uint64_t v59 = v33;
                  __int16 v60 = 2114;
                  id v61 = v24;
                  _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Asset %{public}@ for application %{public}@ could not be moved error: %{public}@", buf, 0x20u);
                }
              }
              objc_super v7 = v45;
            }
            uint64_t v8 = v47;
          }
        }
        id v10 = [v49 countByEnumeratingWithState:&v51 objects:v62 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
LABEL_36:

    id v3 = v46;
    uint64_t v6 = v43;
  }
  else
  {
    objc_super v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void **)(*(void *)(a1 + 32) + 40);
      uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      *(_DWORD *)long long buf = 138543618;
      id v57 = v34;
      __int16 v58 = 2114;
      uint64_t v59 = v35;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Application %{public}@ did not need repair error: %{public}@", buf, 0x16u);
    }
  }

  return v6;
}

uint64_t sub_100284544(uint64_t result)
{
  if (result) {
    return sub_1003F4750();
  }
  return result;
}

void sub_100284558(id *a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        id v4 = [a1[1] count];
        uint64_t v5 = sub_100284824(a1);
        uint64_t v6 = [v5 componentsJoinedByString:@", "];
        *(_DWORD *)id v10 = 134218242;
        *(void *)&void v10[4] = v4;
        *(_WORD *)&v10[12] = 2114;
        *(void *)&v10[14] = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Persisting %ld configuration(s): [%{public}@]", v10, 0x16u);
      }
    }
    if ([a1[1] count])
    {
      id v7 = a1[1];
      uint64_t v8 = objc_opt_new();
      *(void *)id v10 = _NSConcreteStackBlock;
      *(void *)&v10[8] = 3221225472;
      *(void *)&uint8_t v10[16] = sub_100284A7C;
      uint64_t v11 = &unk_100524CC0;
      id v9 = v8;
      id v12 = v9;
      [v7 enumerateKeysAndObjectsUsingBlock:v10];

      sub_1003F4B74((uint64_t)AppDefaultsManager, v9);
    }
    else
    {
      sub_1003F4750();
    }
  }
}

void sub_100284710(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [*(id *)(a1 + 8) allValues];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1002847BC;
    v5[3] = &unk_100524C70;
    id v6 = v3;
    [v4 enumerateObjectsUsingBlock:v5];
  }
}

void sub_1002847BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3 || *((void *)v3 + 3) <= 2uLL)
  {
    id v5 = v3;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    id v4 = v5;
  }
}

id *sub_100284824(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    id v3 = [v1[1] allValues];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002848FC;
    v6[3] = &unk_100524C98;
    id v7 = v2;
    id v4 = v2;
    [v3 enumerateObjectsUsingBlock:v6];

    uint64_t v1 = (id *)[v4 copy];
  }
  return v1;
}

void sub_1002848FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (v3) {
    id v4 = (void *)v3[1];
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if (v5)
  {
    id v6 = *(void **)(a1 + 32);
    if (v9) {
      id v7 = (void *)v9[1];
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;
    [v6 addObject:v8];
  }
}

void sub_100284990(id *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = [a1[1] objectForKey:a2];
    if (v3) {
      ++*(void *)(v3 + 24);
    }
    id v4 = (id)v3;
    sub_100284558(a1, 0);
  }
}

void sub_100284A04(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = *(void **)(a1 + 8);
    id v3 = a2;
    id v4 = v3;
    if (v3) {
      id v5 = (void *)*((void *)v3 + 1);
    }
    else {
      id v5 = 0;
    }
    id v6 = v5;
    [v2 setObject:v4 forKey:v6];
  }
}

void sub_100284A7C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!v4 || v4[3] <= 2uLL)
  {
    id v6 = v4;
    id v5 = sub_1002ED088(v4);
    if (v5) {
      [*(id *)(a1 + 32) addObject:v5];
    }

    id v4 = v6;
  }
}

void sub_100284B04(void *a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (!a1) {
    goto LABEL_79;
  }
  id v86 = sub_100297CAC(v5);
  id v7 = sub_100297E14(v6);
  id v8 = [v7 valueForKey:@"label"];
  id v9 = v8;
  if (v8)
  {
    id v10 = v8;
  }
  else
  {
    id v10 = [v7 valueForKey:@"strategy"];
  }
  id v11 = v10;

  uint64_t v12 = [v7 valueForKey:@"hash"];
  long long v83 = (void *)v12;
  long long v84 = v11;
  long long v85 = v7;
  if (!a3) {
    goto LABEL_53;
  }
  uint64_t v13 = v12;
  if (!sub_1003A4204(a1)) {
    goto LABEL_53;
  }
  OSStatus v14 = sub_1003A4198(a1);
  id v16 = v14;
  if (!v14)
  {
    BOOL v23 = 0;
    goto LABEL_43;
  }
  id v17 = objc_getProperty(v14, v15, 16, 1);
  id v19 = objc_getProperty(v16, v18, 8, 1);
  uint64_t v20 = v19;
  if (!v17)
  {
    unsigned int v21 = 0;
    if (v19) {
      goto LABEL_10;
    }
LABEL_13:
    unsigned int v22 = 0;
    goto LABEL_14;
  }
  unsigned int v21 = [v17 isEqualToString:v11];
  if (!v20) {
    goto LABEL_13;
  }
LABEL_10:
  unsigned int v22 = [v20 isEqualToString:v13];
LABEL_14:
  int v24 = v21 & v22;
  uint64_t v25 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v92) = v24;
    _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Primary content hash matched new primary content hash: %{BOOL}d", buf, 8u);
  }

  if (v24)
  {
    int v26 = 1;
    goto LABEL_42;
  }
  unsigned int v27 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Primary hash wasn't a match.  Checking the known hashes.", buf, 2u);
  }

  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  id obj = v86;
  id v28 = [obj countByEnumeratingWithState:&v87 objects:v97 count:16];
  if (!v28)
  {
    int v26 = 0;
    goto LABEL_41;
  }
  id v29 = v28;
  long long v78 = v16;
  uint64_t v30 = *(void *)v88;
  while (2)
  {
    for (uint64_t i = 0; i != v29; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v88 != v30) {
        objc_enumerationMutation(obj);
      }
      id v32 = *(void **)(*((void *)&v87 + 1) + 8 * i);
      uint64_t v33 = [v32 objectForKey:@"label"];
      uint64_t v34 = v33;
      if (v33)
      {
        id v35 = v33;
      }
      else
      {
        id v35 = [v32 objectForKey:@"strategy"];
      }
      uint64_t v36 = v35;

      id v37 = [v32 objectForKey:@"hash"];
      if (v17)
      {
        unsigned int v38 = [v17 isEqualToString:v36];
        if (!v20) {
          goto LABEL_33;
        }
      }
      else
      {
        unsigned int v38 = 0;
        if (!v20) {
          goto LABEL_33;
        }
      }
      if ((v38 & [v20 isEqualToString:v37]) == 1)
      {
        uint64_t v39 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543874;
          uint64_t v92 = (uint64_t)v36;
          __int16 v93 = 2114;
          v94 = v37;
          __int16 v95 = 1024;
          int v96 = 1;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Primary content hash matched known hash [%{public}@, %{public}@]: %{BOOL}d", buf, 0x1Cu);
        }

        int v26 = 1;
        goto LABEL_39;
      }
LABEL_33:
    }
    id v29 = [obj countByEnumeratingWithState:&v87 objects:v97 count:16];
    if (v29) {
      continue;
    }
    break;
  }
  int v26 = 0;
LABEL_39:
  id v16 = v78;
LABEL_41:

LABEL_42:
  BOOL v23 = v26 != 0;
LABEL_43:
  uint64_t v40 = [a1 valueForProperty:@"bundle_id"];
  if (v40)
  {
    uint64_t v41 = sub_100299044((uint64_t)ODRClient, v40);
    BOOL v42 = v41 != 0;
  }
  else
  {
    BOOL v42 = 0;
  }
  if (!v23 && !v42)
  {
    unsigned int v43 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "No hash matched, and this client is not currently connected, removing assets from device and resetting the localURL.", buf, 2u);
    }

    uint64_t v44 = [a1 valueForProperty:@"local_url"];
    if (v44)
    {
      id v45 = +[NSURL URLWithString:v44];
      sub_10022F080((uint64_t)ODRAssetPack, v45);
    }
    [a1 setObject:0 forKeyedSubscript:@"local_url"];
  }
LABEL_53:
  uint64_t v46 = sub_100297EDC(v6);
  id v47 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = v46;
    _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Setting the fileSize : %{public}@", buf, 0xCu);
  }

  uint64_t v48 = sub_100297C3C(v6);
  id v49 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = v48;
    _os_log_debug_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "Setting the downloadSize : %{public}@", buf, 0xCu);
  }

  uint64_t v50 = sub_100297AF8(v6);
  long long v51 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = v50;
    _os_log_debug_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Setting the chunk size : %{public}@", buf, 0xCu);
  }
  id obja = (id)v46;

  uint64_t v52 = sub_100297C74(v6);
  long long v53 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = v52;
    _os_log_debug_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Setting the hashes : %{public}@", buf, 0xCu);
  }
  long long v79 = (void *)v52;
  id v80 = (void *)v48;

  long long v54 = sub_100297D94(v6);
  id v55 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = (uint64_t)v54;
    _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "Setting the MD5 : %{public}@", buf, 0xCu);
  }

  uint64_t v56 = sub_100297B68(v6);
  id v57 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = v56;
    _os_log_debug_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "Setting Download Priority: %{public}@", buf, 0xCu);
  }

  __int16 v58 = sub_100297CE4(v6);
  uint64_t v59 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v75 = [v58 BOOLValue];
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v92) = v75;
    _os_log_debug_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "Setting isStreamable: %{BOOL}d", buf, 8u);
  }
  long long v77 = (void *)v56;

  __int16 v60 = sub_100297AC0(v6);
  id v61 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = (uint64_t)v60;
    _os_log_debug_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "Setting bundleID: %{public}@", buf, 0xCu);
  }
  long long v76 = (void *)v50;

  id v62 = [v6 propertyValues];
  [a1 setValuesWithDictionary:v62];

  id v63 = sub_100297D1C(v6);
  uint64_t v64 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = (uint64_t)v63;
    _os_log_debug_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "Setting local URL: %{public}@", buf, 0xCu);
  }

  long long v65 = [v63 absoluteString];
  [a1 setObject:v65 forKeyedSubscript:@"local_url"];

  id v66 = sub_100297F14(v6);
  id v67 = [v66 absoluteString];

  if ([v58 BOOLValue])
  {
    id v68 = a1;
    id v69 = +[NSURL URLWithString:v67];
  }
  else
  {
    id v68 = a1;
    id v70 = [a1 valueForProperty:@"bundle_id"];
    id v71 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v92 = (uint64_t)v70;
      _os_log_debug_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "BundleID: %{public}@", buf, 0xCu);
    }

    long long v72 = sub_1003B9318((uint64_t)ODRApplication, v70);
    id v69 = sub_1003B99F0((uint64_t)v72, v67, 0);
  }
  id v73 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v92 = (uint64_t)v69;
    _os_log_debug_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "Setting SourceURL: %{public}@", buf, 0xCu);
  }

  long long v74 = [v69 absoluteString];
  [v68 setObject:v74 forKeyedSubscript:@"source_url"];

LABEL_79:
}

void sub_100285600(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v4 = a3;
  self;
  if ((sub_100424B7C(v19) & 1) == 0)
  {
    id v5 = [ProgressInfo alloc];
    id v6 = sub_100424D84(v19);
    id v7 = sub_100424C14(v19);
    id v8 = sub_10041F328((id *)&v5->super.isa, v6, 0, v7);

    id v9 = sub_100424E64(v19);
    id v11 = v9;
    if (v8)
    {
      objc_setProperty_atomic(v8, v10, v9, 152);

      id Property = objc_getProperty(v8, v12, 152, 1);
    }
    else
    {

      id Property = 0;
    }
    id v14 = Property;

    if (v14) {
      uint64_t v15 = 384;
    }
    else {
      uint64_t v15 = 128;
    }
    if (!v19) {
      goto LABEL_16;
    }
    id v16 = sub_10026E91C(v19, @"source_type");
    uint64_t v17 = v15 | 1;
    if (v16 != (id)2) {
      uint64_t v17 = v15;
    }
    uint64_t v15 = v16 == (id)1 ? v15 | 0x200 : v17;
    if (sub_10026E91C(v19, @"coordinator_intent") == (id)6)
    {
      if (v8)
      {
        uint64_t v15 = 0;
        *((unsigned char *)v8 + 64) = 1;
LABEL_17:
        v8[18] = (id)v15;
      }
    }
    else
    {
LABEL_16:
      if (v8) {
        goto LABEL_17;
      }
    }
    SEL v18 = sub_100388088();
    sub_100388208((uint64_t)v18, v8, v4);
  }
}

void sub_1002859C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (v5)
    {
      id v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        id v8 = objc_alloc_init((Class)NSMutableDictionary);
        id v9 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v8;

        id v7 = *(void **)(a1 + 8);
      }
      id v10 = +[NSNumber numberWithInteger:a3];
      [v7 setValue:v10 forKey:v6];
    }
    else
    {
      id v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v11 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Dropping update to finshing due to no bundleID", v11, 2u);
      }
    }
  }
}

void sub_100285AA4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1 && v5)
  {
    id v10 = v5;
    id v6 = *(void **)(a1 + 16);
    if (!v6)
    {
      id v7 = objc_alloc_init((Class)NSMutableDictionary);
      id v8 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v7;

      id v6 = *(void **)(a1 + 16);
    }
    id v9 = +[NSNumber numberWithInteger:a3];
    [v6 setValue:v9 forKey:v10];

    id v5 = v10;
  }
}

void sub_100285B4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 24);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      id v6 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v5;

      id v4 = *(void **)(a1 + 24);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

void sub_100285BC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (a1)
  {
    if (v7)
    {
      if (v9)
      {
        if (v8)
        {
          id v11 = *(void **)(a1 + 64);
          if (!v11)
          {
            uint64_t v12 = objc_opt_new();
            uint64_t v13 = *(void **)(a1 + 64);
            *(void *)(a1 + 64) = v12;

            id v11 = *(void **)(a1 + 64);
          }
          v18[0] = @"bundle_id";
          v18[1] = @"gizmo_pairing_id";
          v19[0] = v7;
          v19[1] = v8;
          v18[2] = @"failure_error";
          void v19[2] = v10;
          id v14 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:3];
          [v11 addObject:v14];
          goto LABEL_16;
        }
        id v14 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          uint64_t v15 = "Dropping failed TestFlight install due to no devicePairingID";
          goto LABEL_14;
        }
      }
      else
      {
        id v14 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543362;
          id v21 = v7;
          uint64_t v15 = "Dropping failed TestFlight install for %{public}@ due to no error provided";
          id v16 = v14;
          uint32_t v17 = 12;
LABEL_15:
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
        }
      }
    }
    else
    {
      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v15 = "Dropping failed TestFlight install due to no bundleID";
LABEL_14:
        id v16 = v14;
        uint32_t v17 = 2;
        goto LABEL_15;
      }
    }
LABEL_16:
  }
}

void sub_100285DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 80);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      uint64_t v5 = +[NSMutableSet setWithObject:v3];
      id v6 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v5;
    }
    id v3 = v7;
  }
}

void sub_100285E2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 88);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      uint64_t v5 = +[NSMutableSet setWithObject:v3];
      id v6 = *(void **)(a1 + 88);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v5;
    }
    id v3 = v7;
  }
}

void sub_100285EAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 96);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      uint64_t v5 = +[NSMutableSet setWithObject:v3];
      id v6 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v5;
    }
    id v3 = v7;
  }
}

void sub_100285F2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 104);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      uint64_t v5 = +[NSMutableSet setWithObject:v3];
      id v6 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v5;
    }
    id v3 = v7;
  }
}

void sub_100285FAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 112);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableSet);
      id v6 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v5;

      id v4 = *(void **)(a1 + 112);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

void sub_100286024(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 32);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      uint64_t v5 = +[NSMutableSet setWithObject:v3];
      id v6 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v5;
    }
    id v3 = v7;
  }
}

void sub_1002860A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 72);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      uint64_t v5 = +[NSMutableSet setWithObject:v3];
      id v6 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v5;
    }
    id v3 = v7;
  }
}

void sub_100286124(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v71 = v3;
    if (v3)
    {
      id v4 = [v3[1] copy];
      if (v4)
      {
        uint64_t v5 = *(void **)(a1 + 8);
        if (v5)
        {
          [v5 addEntriesFromDictionary:v4];
        }
        else
        {
          id v6 = [v4 mutableCopy];
          id v7 = *(void **)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v6;
        }
      }
      id v8 = [v71[2] copy];
      if (v8)
      {
        id v9 = *(void **)(a1 + 16);
        if (v9)
        {
          [v9 addEntriesFromDictionary:v8];
        }
        else
        {
          id v10 = [v8 mutableCopy];
          id v11 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v10;
        }
      }
      id v12 = [v71[3] copy];
      if (v12)
      {
        uint64_t v13 = *(void **)(a1 + 24);
        if (v13)
        {
          [v13 addObjectsFromArray:v12];
        }
        else
        {
          id v14 = [v12 mutableCopy];
          uint64_t v15 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v14;
        }
      }
      id v70 = [v71[4] copy];
      if (v70)
      {
        id v16 = *(void **)(a1 + 32);
        if (v16)
        {
          uint32_t v17 = [v70 allObjects];
          [v16 addObjectsFromArray:v17];
        }
        else
        {
          id v18 = [v70 mutableCopy];
          uint32_t v17 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v18;
        }
      }
      id v69 = [v71[5] copy];
      if (v69)
      {
        id v19 = *(void **)(a1 + 40);
        if (v19)
        {
          uint64_t v20 = [v69 allObjects];
          [v19 addObjectsFromArray:v20];
        }
        else
        {
          id v21 = [v69 mutableCopy];
          uint64_t v20 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v21;
        }
      }
      id v68 = [v71[6] copy];
      if (v68)
      {
        unsigned int v22 = *(void **)(a1 + 48);
        if (v22)
        {
          [v22 addEntriesFromDictionary:v68];
        }
        else
        {
          id v23 = [v68 mutableCopy];
          int v24 = *(void **)(a1 + 48);
          *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v23;
        }
      }
      id v67 = [v71[7] copy];
      if (v67)
      {
        uint64_t v25 = *(void **)(a1 + 56);
        if (v25)
        {
          int v26 = [v67 allObjects];
          [v25 addObjectsFromArray:v26];
        }
        else
        {
          id v27 = [v67 mutableCopy];
          int v26 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v27;
        }
      }
      id v66 = [v71[8] copy];
      if (v66)
      {
        id v28 = *(void **)(a1 + 64);
        if (v28)
        {
          id v29 = [v66 allObjects];
          [v28 addObjectsFromArray:v29];
        }
        else
        {
          id v30 = [v66 mutableCopy];
          id v29 = *(void **)(a1 + 64);
          *(void *)(a1 + 64) = v30;
        }
      }
      id v31 = [v71[9] copy];
      id v32 = v31;
      id v63 = v31;
      if (v31)
      {
        uint64_t v33 = *(void **)(a1 + 72);
        if (v33)
        {
          uint64_t v34 = [v31 allObjects];
          [v33 addObjectsFromArray:v34];
        }
        else
        {
          id v35 = [v31 mutableCopy];
          uint64_t v34 = *(void **)(a1 + 72);
          *(void *)(a1 + 72) = v35;
        }

        id v32 = v63;
      }
      id v65 = objc_msgSend(v71[10], "copy", v63);
      if (v65)
      {
        uint64_t v36 = *(void **)(a1 + 80);
        if (v36)
        {
          id v37 = [v65 allObjects];
          [v36 addObjectsFromArray:v37];
        }
        else
        {
          id v38 = [v65 mutableCopy];
          id v37 = *(void **)(a1 + 80);
          *(void *)(a1 + 80) = v38;
        }
      }
      id v39 = [v71[11] copy];
      uint64_t v40 = v39;
      if (v39)
      {
        uint64_t v41 = *(void **)(a1 + 88);
        if (v41)
        {
          BOOL v42 = [v39 allObjects];
          [v41 addObjectsFromArray:v42];
        }
        else
        {
          id v43 = [v39 mutableCopy];
          BOOL v42 = *(void **)(a1 + 88);
          *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v43;
        }
      }
      id v44 = [v71[12] copy];
      id v45 = v44;
      if (v44)
      {
        uint64_t v46 = *(void **)(a1 + 96);
        if (v46)
        {
          id v47 = [v44 allObjects];
          [v46 addObjectsFromArray:v47];
        }
        else
        {
          id v48 = [v44 mutableCopy];
          id v47 = *(void **)(a1 + 96);
          *(void *)(a1 + 96) = v48;
        }
      }
      id v49 = [v71[13] copy];
      uint64_t v50 = v49;
      if (v49)
      {
        long long v51 = *(void **)(a1 + 104);
        if (v51)
        {
          uint64_t v52 = [v49 allObjects];
          [v51 addObjectsFromArray:v52];
        }
        else
        {
          id v53 = [v49 mutableCopy];
          uint64_t v52 = *(void **)(a1 + 104);
          *(void *)(a1 + 104) = v53;
        }
      }
      id v54 = [v71[14] copy];
      id v55 = v54;
      if (v54)
      {
        id v56 = v12;
        id v57 = v8;
        id v58 = v4;
        uint64_t v59 = *(void **)(a1 + 112);
        if (v59)
        {
          __int16 v60 = [v54 allObjects];
          [v59 addObjectsFromArray:v60];
        }
        else
        {
          id v61 = [v54 mutableCopy];
          __int16 v60 = *(void **)(a1 + 112);
          *(void *)(a1 + 112) = v61;
        }

        id v4 = v58;
        id v8 = v57;
        id v12 = v56;
        id v32 = v64;
      }
      *(unsigned char *)(a1 + 136) |= *((unsigned char *)v71 + 136);
      *(void *)(a1 + 128) |= (unint64_t)v71[16];
      *(unsigned char *)(a1 + 137) |= *((unsigned char *)v71 + 137);
      *(unsigned char *)(a1 + 138) |= *((unsigned char *)v71 + 138);
      *(unsigned char *)(a1 + 139) |= *((unsigned char *)v71 + 139);
      BOOL v62 = *((unsigned char *)v71 + 140) != 0;
    }
    else
    {
      BOOL v62 = 0;
    }
    *(unsigned char *)(a1 + 140) |= v62;
    id v3 = v71;
  }
}

void sub_100286684(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 48);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100286720;
    v6[3] = &unk_100524D98;
    id v7 = v3;
    [v5 enumerateKeysAndObjectsUsingBlock:v6];
  }
}

uint64_t sub_100286720(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100286730(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002867CC;
    v6[3] = &unk_100524DC0;
    id v7 = v3;
    [v5 enumerateObjectsUsingBlock:v6];
  }
}

uint64_t sub_1002867CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002867DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100286878;
    v6[3] = &unk_100524DC0;
    id v7 = v3;
    [v5 enumerateObjectsUsingBlock:v6];
  }
}

uint64_t sub_100286878(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100286888(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = *(void **)(a1 + 48);
    if (!v6)
    {
      id v7 = objc_alloc_init((Class)NSMutableDictionary);
      id v8 = *(void **)(a1 + 48);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v7;

      id v6 = *(void **)(a1 + 48);
    }
    [v6 setObject:v5 forKeyedSubscript:v9];
  }
}

void sub_100286910(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 40);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      uint64_t v5 = +[NSMutableSet setWithObject:v3];
      id v6 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v5;
    }
    id v3 = v7;
  }
}

void sub_100286990(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 56);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }
    else
    {
      uint64_t v5 = +[NSMutableSet setWithObject:v3];
      id v6 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v5;
    }
    id v3 = v7;
  }
}

__CFString *sub_100286AF0(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_100524DE0[a1];
  }
}

void sub_10028740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_100287464(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003E43AC(a2, *(void **)(*(void *)(a1 + 32) + 90));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1002874C4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1003E6F2C(a2, *(void **)(*(void *)(a1 + 32) + 90));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100287524(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v58 = a2;
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_71;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v28 = *(void *)(a1 + 48);
    id v29 = sub_100288018(*(void **)(a1 + 32));
    (*(void (**)(uint64_t, void *))(v28 + 16))(v28, v29);

    goto LABEL_71;
  }
  id v8 = [v7 statusCode];
  id v9 = +[NSNumber numberWithInteger:v8];
  [*(id *)(a1 + 32) setResponseStatusCode:v9];

  if (v8 != (id)200)
  {
    uint64_t v30 = *(void *)(a1 + 48);
    uint64_t v31 = sub_100288018(*(void **)(a1 + 32));
    id v32 = *(void (**)(uint64_t, uint64_t))(v30 + 16);
    uint64_t v33 = v30;
    uint64_t v34 = (void *)v31;
    v32(v33, v31);
    goto LABEL_70;
  }
  id v11 = *(char **)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v12 = v58;
  id v57 = v10;
  id v54 = v11;
  uint64_t v52 = v12;
  if (!v11)
  {
    id v56 = 0;
    goto LABEL_68;
  }
  if (!v12)
  {
    id v35 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v63) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Fetch postback response data is nil", (uint8_t *)&v63, 2u);
    }

    id v56 = sub_100288018(v11);
    goto LABEL_68;
  }
  *(void *)id v69 = 0;
  id v53 = +[NSJSONSerialization JSONObjectWithData:v12 options:4 error:v69];
  id v55 = *(id *)v69;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (!v55)
    {
      sub_100288018(v11);
      id v55 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v36 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v63) = 138543362;
      *(void *)((char *)&v63 + 4) = v55;
      _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Could not deserialize data into dictionary %{public}@", (uint8_t *)&v63, 0xCu);
    }

    id v55 = v55;
    id v56 = v55;
    goto LABEL_67;
  }
  id v45 = v53;
  id v49 = [v45 objectForKeyedSubscript:@"ad-networks"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v37 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v63) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Fetch postback response contains invalid ad networks array", (uint8_t *)&v63, 2u);
    }

    id v56 = sub_100288018(v11);
    goto LABEL_66;
  }
  id v13 = v49;
  id v46 = (id)objc_opt_new();
  id v48 = objc_opt_new();
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id obj = v13;
  id v51 = [obj countByEnumeratingWithState:&v59 objects:&v63 count:16];
  if (!v51)
  {

LABEL_64:
    objc_storeStrong((id *)(v54 + 74), v46);
    id v40 = v48;
    id v56 = 0;
    id v39 = *(NSObject **)(v54 + 82);
    *(void *)(v54 + 82) = v40;
    goto LABEL_65;
  }
  id v56 = 0;
  uint64_t v50 = *(void *)v60;
  do
  {
    id v14 = 0;
    do
    {
      if (*(void *)v60 != v50) {
        objc_enumerationMutation(obj);
      }
      uint64_t v15 = *(void **)(*((void *)&v59 + 1) + 8 * (void)v14);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v38 = sub_100288018(v54);
        id v16 = v56;
LABEL_60:

        id v56 = (void *)v38;
        goto LABEL_61;
      }
      id v16 = v15;
      if (![v16 count])
      {
        uint64_t v38 = sub_100288018(v54);

        goto LABEL_60;
      }
      uint32_t v17 = sub_1002689B4(v16, @"status");
      sub_1002689B4(v16, @"error");
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      id v19 = [v17 lowercaseString];
      uint64_t v20 = [v18 lowercaseString];

      if (([v19 isEqualToString:@"ok"] & 1) != 0
        || ![v19 isEqualToString:@"error"])
      {
        id v21 = 0;
      }
      else
      {
        if ([v20 isEqualToString:@"register error"]
          || [v20 isEqualToString:@"validation error"]
          || [v20 isEqualToString:@"token error"]
          || [v20 isEqualToString:@"unsupported_redownload_version"]
          || [v20 isEqualToString:@"unsupported_multi_pingback_version"]
          || [v20 isEqualToString:@"unsupported_reengagement_version"])
        {
          uint64_t v22 = sub_100288018(v54);
        }
        else
        {
          if ([v20 isEqualToString:@"max_multi_pingback_limit_exceeded"]) {
            sub_100288018(v54);
          }
          else {
          uint64_t v22 = ASDErrorWithDescription();
          }
        }
        id v21 = (void *)v22;
      }

      if (v21)
      {
        id v23 = sub_10026811C(v16, @"id");
        int v24 = [v57 objectForKeyedSubscript:v23];
        uint64_t v25 = [[_TtC9appstored31SKANFetchPostbackRejectedParams alloc] initWithError:v21 params:v24];
        [v48 addObject:v25];

LABEL_37:
        int v26 = 1;
        goto LABEL_38;
      }
      id v23 = sub_10027B634((uint64_t)InstallAttributionPingback, v16);
      if (v23)
      {
        [v46 addObject:v23];
        goto LABEL_37;
      }
      sub_100288018(v54);
      int v26 = 0;
      v56 = id v23 = v56;
LABEL_38:

      if (!v26) {
        goto LABEL_61;
      }
      id v14 = (char *)v14 + 1;
    }
    while (v51 != v14);
    id v27 = [obj countByEnumeratingWithState:&v59 objects:&v63 count:16];
    id v51 = v27;
  }
  while (v27);
LABEL_61:

  if (!v56) {
    goto LABEL_64;
  }
  id v39 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v56;
    _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Fetch postback encountered error while processing response: %{public}@", (uint8_t *)&buf, 0xCu);
  }
LABEL_65:

LABEL_66:
LABEL_67:

LABEL_68:
  uint64_t v34 = v56;
  if (v56)
  {
    (*(void (**)(void, void *))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v56);
  }
  else
  {
    uint64_t v41 = *(void *)(a1 + 32);
    if (v41)
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v71 = 0x2020000000;
      char v72 = 0;
      *(void *)&long long v59 = 0;
      *((void *)&v59 + 1) = &v59;
      *(void *)&long long v60 = 0x3032000000;
      *((void *)&v60 + 1) = sub_100018018;
      *(void *)&long long v61 = sub_100017BC8;
      *((void *)&v61 + 1) = 0;
      BOOL v42 = *(void **)(v41 + 106);
      *(void *)&long long v63 = _NSConcreteStackBlock;
      *((void *)&v63 + 1) = 3221225472;
      uint64_t v64 = sub_100288054;
      id v65 = &unk_100524E50;
      uint64_t v66 = v41;
      p_long long buf = &buf;
      id v68 = &v59;
      [v42 modifyUsingTransaction:&v63];
      if (*(unsigned char *)(*((void *)&buf + 1) + 24))
      {
        id v43 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v69 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Removed parameters after fetching postbacks", v69, 2u);
        }
      }
      else
      {
        id v43 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          uint64_t v44 = *(void *)(*((void *)&v59 + 1) + 40);
          *(_DWORD *)id v69 = 138543362;
          *(void *)&v69[4] = v44;
          _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Could not remove parameters %{public}@", v69, 0xCu);
        }
      }

      _Block_object_dispose(&v59, 8);
      _Block_object_dispose(&buf, 8);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    uint64_t v34 = 0;
  }
LABEL_70:

LABEL_71:
}

void sub_100287FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

id sub_100288018(void *a1)
{
  if (a1)
  {
    a1 = ASDErrorWithDescription();
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_100288054(void *a1, void *a2)
{
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = sub_100344D90(a2, *(void **)(a1[4] + 90));
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v4;
  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

void sub_100288940(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

id sub_100288C18(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[NSMutableDictionary dictionary];
    id v3 = [objc_alloc((Class)NSURLComponents) initWithURL:a1 resolvingAgainstBaseURL:0];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    unsigned __int8 v4 = objc_msgSend(v3, "queryItems", 0);
    id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          id v10 = [v9 name];
          id v11 = [v9 value];
          if (v10) {
            [v2 setObject:v11 forKeyedSubscript:v10];
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v6);
    }

    id v12 = [v2 copy];
  }
  else
  {
    id v12 = 0;
  }
  return v12;
}

id sub_100288DB4(void *a1)
{
  if (a1)
  {
    id v2 = +[NSURLComponents componentsWithURL:a1 resolvingAgainstBaseURL:1];
    id v3 = [v2 queryItems];
    unsigned __int8 v4 = sub_1003921D4(v3, &stru_100524EC8);

    if (v4)
    {
      id v23 = v4;
      id v5 = [v4 value];
      id v6 = [v5 componentsSeparatedByString:@"/"];
      id v7 = [v6 mutableCopy];

      if ([v7 count]) {
        [v7 setObject:@"12345_54321" atIndexedSubscript:0];
      }
      uint64_t v22 = v7;
      id v8 = [v7 componentsJoinedByString:@"/"];
      id v9 = +[NSURLQueryItem queryItemWithName:@"accessKey" value:v8];

      id v10 = objc_opt_new();
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      int v24 = v2;
      id v11 = [v2 queryItems];
      id v12 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v26;
        do
        {
          for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v26 != v14) {
              objc_enumerationMutation(v11);
            }
            long long v16 = *(void **)(*((void *)&v25 + 1) + 8 * i);
            long long v17 = [v16 name];
            unsigned int v18 = [v17 isEqualToString:@"accessKey"];

            if (v18) {
              id v19 = v9;
            }
            else {
              id v19 = v16;
            }
            [v10 addObject:v19];
          }
          id v13 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
        }
        while (v13);
      }

      id v2 = v24;
      [v24 setQueryItems:v10];
      id v20 = [v24 URL];

      unsigned __int8 v4 = v23;
    }
    else
    {
      id v20 = a1;
    }
  }
  else
  {
    id v20 = 0;
  }
  return v20;
}

BOOL sub_100289048(id a1, NSURLQueryItem *a2)
{
  id v2 = [(NSURLQueryItem *)a2 name];
  unsigned __int8 v3 = [v2 isEqualToString:@"accessKey"];

  return v3;
}

id sub_10028908C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = a1;
    if ([v3 count])
    {
      id v5 = +[NSMutableString string];
      id v28 = v4;
      id v6 = [v4 absoluteString];
      id v7 = [v6 componentsSeparatedByString:@"?"];

      long long v26 = [v7 objectAtIndexedSubscript:0];
      if ((unint64_t)[v7 count] >= 2)
      {
        id v8 = [v7 objectAtIndexedSubscript:1];
        [v5 appendString:v8];
      }
      long long v27 = v7;
      id v9 = +[NSCharacterSet URLQueryAllowedCharacterSet];
      id v10 = [v9 mutableCopy];

      [v10 removeCharactersInString:@"?&%+=;"];
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v11 = v3;
      id obj = [v3 allKeys];
      id v12 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v31;
        do
        {
          for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v31 != v14) {
              objc_enumerationMutation(obj);
            }
            long long v16 = *(void **)(*((void *)&v30 + 1) + 8 * i);
            long long v17 = [v16 stringByAddingPercentEncodingWithAllowedCharacters:v10];
            unsigned int v18 = [v11 objectForKeyedSubscript:v16];
            id v19 = [v18 stringByAddingPercentEncodingWithAllowedCharacters:v10];

            if ([v5 length]) {
              CFStringRef v20 = @"&%@=%@";
            }
            else {
              CFStringRef v20 = @"%@=%@";
            }
            objc_msgSend(v5, "appendFormat:", v20, v17, v19);
          }
          id v13 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
        }
        while (v13);
      }

      if (v5)
      {
        uint64_t v22 = v27;
        id v21 = v28;
        id v23 = v26;
        if ([v5 length])
        {
          uint64_t v24 = [v26 stringByAppendingFormat:@"?%@", v5];

          id v23 = (void *)v24;
        }
        id v3 = v11;
      }
      else
      {
        id v3 = v11;
        uint64_t v22 = v27;
        id v21 = v28;
        id v23 = v26;
      }
      id v4 = +[NSURL URLWithString:v23];
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_10028937C(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = [objc_alloc((Class)NSURLComponents) initWithURL:a1 resolvingAgainstBaseURL:0];
    [v2 setQueryItems:0];
    id v1 = [v2 URL];
  }
  return v1;
}

void sub_100289440(id a1)
{
  id v1 = objc_alloc_init(ActiveAccountObserver);
  id v2 = (void *)qword_1005B0CD0;
  qword_1005B0CD0 = (uint64_t)v1;
}

void sub_1002899E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100289A04(uint64_t a1)
{
}

void sub_100289A18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] oneAccountDSID returned: %@", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v3;
  id v8 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100289B08(uint64_t a1)
{
}

void sub_100289C54(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) userInfo];
  uint64_t v1 = [v4 objectForKeyedSubscript:@"AccountDidChangePreviousActiveDSID"];
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  if (v1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v2 setObject:v1 forKeyedSubscript:@"AccountDidChangePreviousActiveDSID"];
    }
  }
  id v3 = +[NSNotificationCenter defaultCenter];
  [v3 postNotificationName:@"AccountStoreSandboxAccountDidChange" object:0 userInfo:v2];
}

void sub_100289DC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:@"DSID"];

  if (v3)
  {
    id v4 = [v2 objectForKeyedSubscript:@"DSID"];
  }
  else
  {
    id v4 = 0;
  }
  uint64_t v5 = [v2 objectForKeyedSubscript:@"active"];

  if (v5)
  {
    uint64_t v6 = [v2 objectForKeyedSubscript:@"active"];
    LODWORD(v5) = [v6 BOOLValue];
  }
  id v7 = [v2 objectForKeyedSubscript:@"signout"];

  if (v7)
  {
    id v8 = [v2 objectForKeyedSubscript:@"signout"];
    unsigned int v9 = [v8 BOOLValue];
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = +[ACAccountStore ams_sharedAccountStore];
  __int16 v11 = objc_msgSend(v10, "ams_activeiTunesAccount");

  if (v11)
  {
    id v12 = objc_msgSend(v11, "ams_DSID");

    if (!v12)
    {
      id v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v52 = objc_opt_class();
        id v53 = v52;
        [v11 hashedDescription];
        id v55 = v54 = v4;
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v52;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v55;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%{public}@] Current iTunes account has no DSID: %{public}@", buf, 0x16u);

        id v4 = v54;
      }

      __int16 v11 = 0;
    }
  }
  uint64_t v14 = ASDLogHandleForCategory();
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (!v15) {
      goto LABEL_20;
    }
    long long v16 = objc_opt_class();
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v61) = v5;
    id v17 = v16;
    unsigned int v18 = "[%{public}@] Account signout notification accountID: %{public}@ active: %{BOOL}d";
  }
  else
  {
    if (!v15) {
      goto LABEL_20;
    }
    id v19 = objc_opt_class();
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v61) = v5;
    id v17 = v19;
    unsigned int v18 = "[%{public}@] Account account changed notification accountID: %{public}@ active: %{BOOL}d";
  }
  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v18, buf, 0x1Cu);

LABEL_20:
  unint64_t v20 = (unint64_t)*(id *)(*(void *)(a1 + 40) + 8);
  unint64_t v21 = v11;
  self;
  if (!(v21 | v20)) {
    goto LABEL_21;
  }
  if (!v21 || v20)
  {
    if (v21 || !v20)
    {
      uint64_t v43 = objc_msgSend((id)v21, "ams_DSID");
      if (v43)
      {
        uint64_t v44 = (void *)v43;
        uint64_t v45 = objc_msgSend((id)v20, "ams_DSID");
        if (v45)
        {
          id v46 = (void *)v45;
          objc_msgSend((id)v21, "ams_DSID");
          v47 = id v58 = v4;
          id v48 = objc_msgSend((id)v20, "ams_DSID");
          unsigned __int8 v57 = [v47 isEqualToNumber:v48];

          id v4 = v58;
          if ((v57 & 1) == 0)
          {
            long long v25 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              id v49 = objc_opt_class();
              id v50 = v49;
              id v51 = [(id)v21 hashedDescription];
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v49;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v51;
              _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "[%@]: Should notify after iTunes account changed: %{public}@", buf, 0x16u);
            }
            goto LABEL_30;
          }
        }
        else
        {
        }
      }
LABEL_21:

      uint64_t v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = objc_opt_class();
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v23;
        id v24 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%{public}@] Received account change notification but nothing has changed", buf, 0xCu);
      }
      goto LABEL_33;
    }
    long long v25 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      id v56 = objc_opt_class();
      id v27 = v56;
      [(id)v20 hashedDescription];
      v29 = id v28 = v4;
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v56;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v29;
      long long v30 = "[%@]: Should notify after iTunes account became inactive: %{public}@";
      goto LABEL_41;
    }
  }
  else
  {
    long long v25 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      long long v26 = objc_opt_class();
      id v27 = v26;
      [(id)v21 hashedDescription];
      v29 = id v28 = v4;
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v29;
      long long v30 = "[%@]: Should notify after iTunes account became active: %{public}@";
LABEL_41:
      _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, v30, buf, 0x16u);

      id v4 = v28;
    }
  }
LABEL_30:

  id v31 = *(id *)(*(void *)(a1 + 40) + 8);
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 8), v11);
  uint64_t v32 = *(void *)(a1 + 40);
  long long v33 = *(void **)(v32 + 40);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_10028A584;
  v59[3] = &unk_100521388;
  v59[4] = v32;
  sub_100010468(v33, v59);
  uint64_t v34 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    id v35 = objc_opt_class();
    id v36 = v35;
    id v37 = [(id)v21 hashedDescription];
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v35;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v37;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[%{public}@] Posting notification after active iTunes account changed: %{public}@", buf, 0x16u);
  }
  uint64_t v38 = *(void **)(a1 + 40);
  id v39 = v31;
  id v40 = v38;
  self;
  uint64_t v41 = dispatch_get_global_queue(21, 0);
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = sub_10028A8A0;
  long long v61 = &unk_1005218C0;
  id v62 = v39;
  id v63 = v40;
  id v42 = v40;
  uint64_t v22 = v39;
  dispatch_async(v41, buf);

  sub_10028A594(*(void *)(a1 + 40), @"account");
LABEL_33:
}

void sub_10028A584(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
}

void sub_10028A594(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10028A88C;
    block[3] = &unk_100521388;
    id v6 = v3;
    dispatch_async(v4, block);
  }
}

void sub_10028A6B8(uint64_t a1)
{
  id v2 = +[ACAccountStore ams_sharedAccountStore];
  id v3 = objc_msgSend(v2, "ams_activeiTunesAccount");

  id v4 = *(id *)(*(void *)(a1 + 32) + 16);
  uint64_t v5 = objc_msgSend(v3, "ams_storefront");
  if (v4 && ([v4 isEqualToString:v5] & 1) != 0)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138543618;
      id v11 = (id)objc_opt_class();
      __int16 v12 = 2114;
      id v13 = v4;
      id v7 = v11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%{public}@] Storefront is the same as %{public}@", (uint8_t *)&v10, 0x16u);
    }
  }
  else
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138543618;
      id v11 = (id)objc_opt_class();
      __int16 v12 = 2114;
      id v13 = v5;
      id v9 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Storefront changed to %{public}@", (uint8_t *)&v10, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), v5);
    sub_10028A594(*(void *)(a1 + 32), @"storefront");
  }
}

id sub_10028A88C(uint64_t a1)
{
  return +[_AppStoreWidget invalidateAllWidgetsWithReason:*(void *)(a1 + 32)];
}

void sub_10028A8A0(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  id v3 = objc_msgSend(*(id *)(a1 + 32), "ams_DSID");

  if (v3)
  {
    id v4 = objc_msgSend(*(id *)(a1 + 32), "ams_DSID");
    [v2 setObject:v4 forKeyedSubscript:@"AccountDidChangePreviousActiveDSID"];
  }
  else
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = [*(id *)(a1 + 32) hashedDescription];
      int v7 = 138543362;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Not posting account change due to no DSID on account: %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }

  id v6 = +[NSNotificationCenter defaultCenter];
  [v6 postNotificationName:@"AccountStorePrimaryAccountDidChange" object:*(void *)(a1 + 40) userInfo:v2];
}

id sub_10028B078(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleAppDeletion:a2];
}

void sub_10028B084(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v48 = 0;
    id v49 = &v48;
    uint64_t v50 = 0x3032000000;
    id v51 = sub_100018038;
    uint64_t v52 = sub_100017BD8;
    id v53 = 0;
    if (sub_1003363D8())
    {
      id v4 = [v3 bundleID];
      BOOL v5 = [v4 length] == 0;

      if (!v5)
      {
        id v6 = [v3 itemID];
        if (v6)
        {
          int v7 = [v3 itemID];
          if (!v7)
          {
LABEL_8:

LABEL_9:
            if (v49[5])
            {
              id v11 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v12 = [a1 logKey];
                id v13 = (void *)v49[5];
                *(_DWORD *)long long buf = 138412546;
                id v55 = v12;
                __int16 v56 = 2114;
                id v57 = v13;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Skipping clip card view event because error: %{public}@", buf, 0x16u);
              }
LABEL_37:

              _Block_object_dispose(&v48, 8);
              goto LABEL_38;
            }
            uint64_t v14 = [v3 bundleID];
            id v11 = [a1 getAppUsageSessionForBundleID:v14];

            BOOL v15 = objc_alloc_init(AppEvent);
            long long v16 = [v3 bundleID];
            [(SQLiteMemoryEntity *)v15 setValue:v16 forProperty:@"bundle_id"];

            [(SQLiteMemoryEntity *)v15 setValue:&__kCFBooleanTrue forProperty:@"is_clip"];
            id v17 = [v3 itemID];
            [(SQLiteMemoryEntity *)v15 setValue:v17 forProperty:@"item_id"];

            [(SQLiteMemoryEntity *)v15 setValue:@"clip" forProperty:@"clip_app_type"];
            [(SQLiteMemoryEntity *)v15 setValue:&off_10054BF40 forProperty:@"event_type"];
            [(SQLiteMemoryEntity *)v15 setValue:&off_10054BF58 forProperty:@"count"];
            unsigned int v18 = sub_10025AE54(v11);

            if (v18)
            {
              id v19 = sub_10025AE54(v11);
              [(SQLiteMemoryEntity *)v15 setValue:v19 forProperty:@"device_vendor_id"];

              unint64_t v20 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v21 = [a1 logKey];
                uint64_t v22 = [v3 bundleID];
                id v23 = sub_10025AE54(v11);
                *(_DWORD *)long long buf = 138412802;
                id v55 = v21;
                __int16 v56 = 2114;
                id v57 = v22;
                __int16 v58 = 2114;
                long long v59 = v23;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Using deviceVendorID: %{public}@ for clip card view", buf, 0x20u);
              }
            }
            id v24 = [v3 sourceURL];

            if (v24)
            {
              long long v25 = [CampaignTokens alloc];
              long long v26 = [v3 sourceURL];
              id v27 = sub_1003A3128(v25, v26);

              if (v27) {
                sub_10022EBC0(v15, v27);
              }
            }
            id v28 = [v3 referrerType];
            if (!v28) {
              goto LABEL_23;
            }
            id v29 = [v3 referrerType];
            if (v29)
            {
              long long v30 = [v3 referrerType];
              unsigned __int8 v31 = [v30 isEqualToString:@"Web Referral"];

              if ((v31 & 1) == 0)
              {
LABEL_23:
                uint64_t v32 = [v3 referralSourceBundleID];
                if (v32) {
                  [(SQLiteMemoryEntity *)v15 setValue:v32 forProperty:@"clip_ref_source"];
                }
                goto LABEL_27;
              }
            }
            else
            {
            }
            uint64_t v32 = 0;
LABEL_27:
            long long v33 = [v3 referrerType];

            if (v33)
            {
              uint64_t v34 = [v3 referrerType];
              [(SQLiteMemoryEntity *)v15 setValue:v34 forProperty:@"clip_ref_type"];
            }
            if ([v3 thirdPartyWithNoAppReferrer]) {
              [(SQLiteMemoryEntity *)v15 setValue:&__kCFBooleanTrue forProperty:@"clip_third_party_with_no_app_referrer"];
            }
            id v35 = sub_10038F000();
            v44[0] = _NSConcreteStackBlock;
            v44[1] = 3221225472;
            v44[2] = sub_10028B83C;
            v44[3] = &unk_100524FA0;
            id v36 = v15;
            uint64_t v45 = v36;
            id v46 = a1;
            id v47 = &v48;
            [v35 modifyUsingTransaction:v44];

            if (v49[5])
            {
              id v37 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v38 = [a1 logKey];
                id v39 = [v3 bundleID];
                id v40 = (void *)v49[5];
                *(_DWORD *)long long buf = 138412802;
                id v55 = v38;
                __int16 v56 = 2114;
                id v57 = v39;
                __int16 v58 = 2114;
                long long v59 = v40;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Error creating clip card view. Error: %{public}@", buf, 0x20u);
              }
            }
            else
            {
              id v37 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v41 = [a1 logKey];
                sub_10022DD24((uint64_t)AppEvent, 5u);
                id v42 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v43 = [v3 bundleID];
                *(_DWORD *)long long buf = 138412802;
                id v55 = v41;
                __int16 v56 = 2114;
                id v57 = v42;
                __int16 v58 = 2114;
                long long v59 = v43;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] [%{public}@] Created app event", buf, 0x20u);
              }
            }

            goto LABEL_37;
          }
          id v8 = [v3 itemID];
          BOOL v9 = [v8 longLongValue] == 0;

          if (!v9) {
            goto LABEL_9;
          }
        }
      }
    }
    uint64_t v10 = ASDErrorWithTitleAndMessage();
    id v6 = (void *)v49[5];
    v49[5] = v10;
    goto LABEL_8;
  }
LABEL_38:
}

void sub_10028B7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10028B83C(uint64_t a1, void *a2)
{
  uint64_t v11 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = +[NSArray arrayWithObjects:&v11 count:1];
  BOOL v5 = (objc_class *)[*(id *)(a1 + 40) appEventEntityClass];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = sub_10040CC40(v3, v4, v5, &obj);

  objc_storeStrong((id *)(v6 + 40), obj);
  BOOL v8 = [v7 count] != 0;

  return v8;
}

void sub_10028B928(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a7;
  if (a1)
  {
    if (v16) {
      unsigned int v18 = sub_1003A3128([CampaignTokens alloc], v16);
    }
    else {
      unsigned int v18 = 0;
    }
    id v19 = sub_10038F000();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    id v21[2] = sub_10028BA9C;
    v21[3] = &unk_100524FC8;
    v21[4] = a1;
    id v22 = v13;
    id v23 = v14;
    char v26 = a6;
    id v24 = v15;
    id v25 = v18;
    unint64_t v20 = v18;
    [v19 modifyUsingTransaction:v21];
  }
}

uint64_t sub_10028BA9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v59 = *(void *)(a1 + 40);
  BOOL v5 = +[NSArray arrayWithObjects:&v59 count:1];
  uint64_t v6 = [v3 connection];
  int v7 = [v4 createAppEventsForBundleIDs:v5 eventType:1 installType:1 connection:v6];

  BOOL v8 = [v7 firstObject];
  if (v8)
  {
    BOOL v9 = *(void **)(a1 + 48);
    if (v9 && ([v9 isEqualToString:@"Web Referral"] & 1) != 0) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *(id *)(a1 + 56);
    }
    uint64_t v11 = [*(id *)(a1 + 32) getAppUsageSessionForBundleID:*(void *)(a1 + 40)];
    __int16 v12 = sub_10025AE54(v11);

    id v46 = v11;
    if (v12)
    {
      id v13 = sub_10025AE54(v11);
      objc_msgSend(v8, "setValue:forProperty:", v13, @"device_vendor_id", v11);

      id v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = [*(id *)(a1 + 32) logKey];
        uint64_t v16 = *(void *)(a1 + 40);
        id v17 = sub_10025AE54(v11);
        *(_DWORD *)long long buf = 138412802;
        id v54 = v15;
        __int16 v55 = 2114;
        uint64_t v56 = v16;
        __int16 v57 = 2114;
        id v58 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Using deviceVendorID: %{public}@ for clip install", buf, 0x20u);
      }
    }
    uint64_t v48 = v7;
    unsigned int v18 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72), v46);
    [v8 setValue:v18 forProperty:@"clip_third_party_with_no_app_referrer"];

    if (v10) {
      [v8 setValue:v10 forProperty:@"clip_ref_source"];
    }
    uint64_t v19 = *(void *)(a1 + 48);
    if (v19) {
      [v8 setValue:v19 forProperty:@"clip_ref_type"];
    }
    unint64_t v20 = *(void **)(a1 + 64);
    if (v20) {
      sub_10022EBC0(v8, v20);
    }
    [v8 setValue:@"clip" forProperty:@"clip_app_type"];
    uint64_t v52 = v8;
    unint64_t v21 = +[NSArray arrayWithObjects:&v52 count:1];
    id v22 = (objc_class *)[*(id *)(a1 + 32) appEventEntityClass];
    id v50 = 0;
    id v23 = sub_10040CC40(v3, v21, v22, &v50);
    id v24 = v50;
    [v23 count];

    id v25 = ASDLogHandleForCategory();
    char v26 = v25;
    if (v24)
    {
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
      id v27 = [*(id *)(a1 + 32) logKey];
      uint64_t v28 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      id v54 = v27;
      __int16 v55 = 2114;
      uint64_t v56 = v28;
      __int16 v57 = 2114;
      id v58 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] Error creating entity. Error: %{public}@", buf, 0x20u);
    }
    else
    {
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO)) {
        goto LABEL_24;
      }
      id v27 = [*(id *)(a1 + 32) logKey];
      uint64_t v31 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      id v54 = v27;
      __int16 v55 = 2114;
      uint64_t v56 = v31;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "[%@] [%{public}@] Created clip app event", buf, 0x16u);
    }

LABEL_24:
    uint64_t v32 = sub_10022E3AC(v8);
    long long v33 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 72)];
    [v32 setValue:v33 forProperty:@"clip_third_party_with_no_app_referrer"];

    if (v10) {
      [v32 setValue:v10 forProperty:@"clip_ref_source"];
    }
    uint64_t v34 = *(void *)(a1 + 48);
    if (v34) {
      [v32 setValue:v34 forProperty:@"clip_ref_type"];
    }
    id v51 = v32;
    id v35 = +[NSArray arrayWithObjects:&v51 count:1];
    id v49 = 0;
    id v36 = sub_10040CE60(v3, v35, &v49);
    id v37 = v49;
    id v38 = [v36 count];

    id v39 = ASDLogHandleForCategory();
    id v40 = v39;
    if (v37)
    {
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = [*(id *)(a1 + 32) logKey];
        uint64_t v42 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412802;
        id v54 = v41;
        __int16 v55 = 2114;
        uint64_t v56 = v42;
        __int16 v57 = 2114;
        id v58 = v37;
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] Error creating install metadata entity. Error: %{public}@", buf, 0x20u);
LABEL_33:
      }
    }
    else if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      BOOL v43 = v38 != 0;
      uint64_t v41 = [*(id *)(a1 + 32) logKey];
      uint64_t v44 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      id v54 = v41;
      __int16 v55 = 2114;
      uint64_t v56 = v44;
      __int16 v57 = 1024;
      LODWORD(v5_Block_object_dispose(&a9, 8) = v43;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "[%@] [%{public}@] Created install metadata with result: %d", buf, 0x1Cu);
      goto LABEL_33;
    }

    int v7 = v48;
    goto LABEL_35;
  }
  uint64_t v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v29 = [*(id *)(a1 + 32) logKey];
    uint64_t v30 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    id v54 = v29;
    __int16 v55 = 2114;
    uint64_t v56 = v30;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[%@] [%{public}@] No install events.", buf, 0x16u);
  }
LABEL_35:

  return 1;
}

void sub_10028C54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10028C574(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"event_type" equalToValue:&off_10054BF40];
  v21[0] = v4;
  BOOL v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:*(void *)(a1 + 32)];
  v21[1] = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:v21 count:2];
  int v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

  BOOL v8 = [v3 connection];
  BOOL v9 = sub_1002FF548((uint64_t)AppEventEntityCrossfire, v8, v7);

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10028C750;
  v16[3] = &unk_100524FF0;
  id v17 = v3;
  int8x16_t v15 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v15.i64[0];
  int8x16_t v18 = vextq_s8(v15, v15, 8uLL);
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  id v19 = v11;
  uint64_t v20 = v12;
  id v13 = v3;
  [v9 enumeratePersistentIDsUsingBlock:v16];

  return 1;
}

void sub_10028C750(uint64_t a1, uint64_t a2)
{
  id v4 = [AppEventEntityCrossfire alloc];
  BOOL v5 = [*(id *)(a1 + 32) connection];
  uint64_t v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  int v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = [*(id *)(a1 + 40) logKey];
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    *(_DWORD *)long long buf = 138413058;
    uint64_t v16 = v8;
    __int16 v17 = 2114;
    uint64_t v18 = v9;
    __int16 v19 = 2114;
    uint64_t v20 = v10;
    __int16 v21 = 2114;
    id v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%@] [%{public}@] Transferring metadata properties: %{public}@ to clip card view event %{public}@", buf, 0x2Au);
  }
  id v11 = *(void **)(a1 + 56);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_10028C8F0;
  v13[3] = &unk_100523298;
  id v14 = v6;
  uint64_t v12 = v6;
  [v11 enumerateKeysAndObjectsUsingBlock:v13];
  ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
}

id sub_10028C8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:a3 forProperty:a2];
}

id sub_10028C9B4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  BOOL v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v3];
  uint64_t v6 = [v4 connection];

  int v7 = sub_1002FF3DC((uint64_t)AppUsageSessionEntity, v6, v5);

  id v8 = [v7 existsInDatabase];
  if (v8)
  {
    uint64_t v9 = [v7 valueForProperty:@"session_reporter_key"];
    [v7 deleteFromDatabase];
    uint64_t v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [*(id *)(a1 + 40) logKey];
      uint64_t v12 = *(void *)(a1 + 32);
      int v14 = 138412802;
      int8x16_t v15 = v11;
      __int16 v16 = 2114;
      uint64_t v17 = v12;
      __int16 v18 = 2114;
      __int16 v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Cleaned up app usage session: %{public}@", (uint8_t *)&v14, 0x20u);
    }
  }

  return v8;
}

uint64_t sub_10028CBCC(void *a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    uint64_t v17 = 0;
    goto LABEL_14;
  }
  id v4 = objc_alloc((Class)ASDManagedApplicationRequestOptions);
  BOOL v5 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 storeItemID]);
  uint64_t v6 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 storeExternalVersionID]);
  int v7 = [v3 bundleID];
  id v8 = [v3 bundleVersion];
  id v9 = [v4 initWithItemIdentifer:v5 externalVersionIdentifier:v6 bundleIdentifier:v7 bundleVersion:v8 skipDownloads:0];

  uint64_t v10 = sub_1002F3C98((id *)[ManagedApplicationTask alloc], v9, 0);
  id v22 = 0;
  [a1 runSubTask:v10 returningError:&v22];
  id v11 = v22;
  uint64_t v12 = v11;
  if (v10 && ((_BYTE)v10[3] & 1) != 0 && v10[21])
  {
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = a1[5];
      int8x16_t v15 = [v3 bundleID];
      id v16 = v10[21];
      *(_DWORD *)long long buf = 138412802;
      uint64_t v24 = v14;
      __int16 v25 = 2114;
      char v26 = v15;
      __int16 v27 = 2048;
      uint64_t v28 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Managed application was refreshed with result: %ld", buf, 0x20u);
    }
    uint64_t v17 = 1;
    if (!v12) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  uint64_t v17 = 0;
  if (v11)
  {
LABEL_10:
    __int16 v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = a1[5];
      __int16 v21 = [v3 bundleID];
      *(_DWORD *)long long buf = 138412802;
      uint64_t v24 = v20;
      __int16 v25 = 2114;
      char v26 = v21;
      __int16 v27 = 2114;
      uint64_t v28 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%@] [%{public}@] Managed application failed with error: %{public}@", buf, 0x20u);
    }
  }
LABEL_13:

LABEL_14:
  return v17;
}

void sub_10028CF58(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[10];
  }
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v15;
    *(void *)&long long v5 = 138412546;
    long long v13 = v5;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = +[ApplicationProxy proxyForBundleID:](ApplicationProxy, "proxyForBundleID:", *(void *)(*((void *)&v14 + 1) + 8 * (void)v8), v13, (void)v14);
        if ([v9 isInstalled]
          && [v9 isStoreOriginated]
          && ([v9 hasMIDBasedSINF] & 1) == 0
          && [v9 missingRequiredSINF]
          && [v9 isConfiguratorInstall])
        {
          uint64_t v10 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 40);
            uint64_t v12 = [v9 bundleID];
            *(_DWORD *)long long buf = v13;
            uint64_t v19 = v11;
            __int16 v20 = 2114;
            __int16 v21 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Attempting to migrate Configurator app SINF", buf, 0x16u);
          }
          sub_10028CBCC(*(void **)(a1 + 32), v9);
        }

        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v3 countByEnumeratingWithState:&v14 objects:v22 count:16];
    }
    while (v6);
  }
}

uint64_t sub_10028DB88(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) count])
  {
    id v4 = *(void **)(a1 + 32);
    long long v5 = (objc_class *)[*(id *)(a1 + 40) appEventEntityClass];
    id v11 = 0;
    id v6 = sub_10040CC40(v3, v4, v5, &v11);
    id v7 = v11;

    if (v7)
    {
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = [*(id *)(a1 + 40) logKey];
        *(_DWORD *)long long buf = 138412546;
        long long v13 = v10;
        __int16 v14 = 2114;
        id v15 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Importing crash events error: %{public}@", buf, 0x16u);
      }
    }
  }

  return 1;
}

void sub_10028DCCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 16);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      id v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v5;

      id v4 = *(void **)(a1 + 16);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

id sub_10028E50C()
{
  self;
  if (qword_1005B0CE0 != -1) {
    dispatch_once(&qword_1005B0CE0, &stru_100525038);
  }
  uint64_t v0 = (void *)qword_1005B0CD8;
  return v0;
}

void sub_10028E564(id a1)
{
  uint64_t v1 = objc_alloc_init(AppInstallObserver);
  id v2 = (void *)qword_1005B0CD8;
  qword_1005B0CD8 = (uint64_t)v1;
}

void sub_10028E764(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v5 = *(void **)(a1 + 40);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10028E854;
      v7[3] = &unk_1005218C0;
      id v8 = v3;
      uint64_t v9 = a1;
      sub_100010468(v5, v7);
      id v6 = v8;
    }
    else
    {
      id v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Ignoring attempt to begin observing a nil coordinator", buf, 2u);
      }
    }
  }
}

void sub_10028E854(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) bundleID];
  if (v2)
  {
    [*(id *)(*(void *)(a1 + 40) + 48) setObject:*(void *)(a1 + 32) forKeyedSubscript:v2];
    [*(id *)(a1 + 32) setObserver:*(void *)(a1 + 40)];
  }
  else
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138543362;
      uint64_t v6 = v4;
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Coordinator had no bundle identifier set so was not able to begin observing: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10028E940(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
      int v5 = *(void **)(a1 + 40);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10028EA34;
      v7[3] = &unk_1005218C0;
      id v8 = v3;
      uint64_t v9 = a1;
      sub_100010468(v5, v7);
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Ignoring attempt to end observing a nil coordinator!", buf, 2u);
      }
    }
  }
}

void sub_10028EA34(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) bundleID];
  if (v2)
  {
    [*(id *)(*(void *)(a1 + 40) + 48) setObject:0 forKeyedSubscript:v2];
    [*(id *)(a1 + 32) setObserver:0];
  }
  else
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138543362;
      uint64_t v6 = v4;
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Coordinator had no bundle identifier set so was not able to end observing: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t sub_10028ECAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  int v5 = [*(id *)(a1 + 32) bundleID];
  uint64_t v6 = sub_100401E3C(v3, v4, v5);

  if ([v6 existsInDatabase])
  {
    id v7 = sub_1002C1EE8(v6);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = ASDLogHandleForCategory();
    uint64_t v10 = v9;
    if (v8)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        int v13 = 138412546;
        __int16 v14 = v7;
        __int16 v15 = 2114;
        uint64_t v16 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] App is ready to proceed with post processing: %{public}@", (uint8_t *)&v13, 0x16u);
      }

      [v6 setValue:*(void *)(a1 + 40) forProperty:@"bundle_url"];
    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v13 = 138412290;
        __int16 v14 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@] Received post processing callback but appURL is nil.", (uint8_t *)&v13, 0xCu);
      }
    }
    sub_100238AB4((uint64_t)v3, (uint64_t)[v6 persistentID]);
  }
  return 1;
}

void sub_10028F004(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = objc_alloc_init((Class)BAAppStoreClient);
    id v12 = 0;
    unsigned int v8 = [v7 performEventWithDescriptor:v5 error:&v12];
    id v9 = v12;
    uint64_t v10 = ASDLogHandleForCategory();
    uint64_t v11 = v10;
    if (v8)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Sent Resume event to Background Assets", buf, 0xCu);
      }

      uint64_t v11 = [v5 appBundleIdentifier];
      sub_10028F198(a1, v11, v6);
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      id v14 = v6;
      __int16 v15 = 2114;
      id v16 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] Failed to send Resume event to Background Assets: %{public}@", buf, 0x16u);
    }
  }
}

void sub_10028F198(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    unsigned int v8 = *(void **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10028F764;
    v9[3] = &unk_1005212D8;
    id v10 = v6;
    uint64_t v11 = a1;
    id v12 = v5;
    sub_100010468(v8, v9);
  }
}

void sub_10028F25C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v37 = 0;
    id v38 = &v37;
    uint64_t v39 = 0x3032000000;
    id v40 = sub_100018048;
    uint64_t v41 = sub_100017BE0;
    id v42 = 0;
    id v5 = *(void **)(a1 + 40);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10028F6F0;
    v34[3] = &unk_100521288;
    id v36 = &v37;
    void v34[4] = a1;
    id v6 = v3;
    id v35 = v6;
    sub_100010468(v5, v34);
    if (v38[5])
    {
      unsigned int v8 = dispatch_semaphore_create(0);
      id v9 = (void *)v38[5];
      if (v9) {
        objc_setProperty_atomic(v9, v7, v8, 24);
      }
    }
    else
    {
      unsigned int v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = [v6 appBundleIdentifier];
        *(_DWORD *)long long buf = 138412290;
        id v44 = v31;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Failed to find baInfo in sendBackgroundAssetEvent", buf, 0xCu);
      }
    }

    id v10 = objc_alloc_init((Class)BAAppStoreClient);
    if ([v6 eventType] == (id)20)
    {
      uint64_t v11 = @"Paused";
    }
    else
    {
      id v12 = [v6 eventType];
      uint64_t v11 = @"Unknown";
      if (v12 == (id)22) {
        uint64_t v11 = @"Canceled";
      }
    }
    int v13 = v11;
    id v33 = 0;
    unsigned int v14 = [v10 performEventWithDescriptor:v6 error:&v33];
    id v15 = v33;
    if (v14)
    {
      id v16 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        id Property = (id)v38[5];
        if (Property) {
          id Property = objc_getProperty(Property, v17, 16, 1);
        }
        *(_DWORD *)long long buf = 138412546;
        id v44 = Property;
        __int16 v45 = 2114;
        id v46 = v13;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] Sent %{public}@ event to Background Assets", buf, 0x16u);
      }

      __int16 v20 = (void *)v38[5];
      if (!v20) {
        goto LABEL_25;
      }
      __int16 v21 = objc_getProperty(v20, v19, 24, 1);
      dispatch_time_t v22 = dispatch_time(0, 5000000000);
      intptr_t v23 = dispatch_semaphore_wait(v21, v22);

      if (v23)
      {
        __int16 v25 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          id v32 = (id)v38[5];
          if (v32) {
            id v32 = objc_getProperty(v32, v26, 16, 1);
          }
          *(_DWORD *)long long buf = 138412290;
          id v44 = v32;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "[%@] Timeout waiting for Background Assets to respond to event", buf, 0xCu);
        }
      }
      __int16 v27 = (void *)v38[5];
      if (!v27) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v28 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        id v30 = (id)v38[5];
        if (v30) {
          id v30 = objc_getProperty(v30, v29, 16, 1);
        }
        *(_DWORD *)long long buf = 138412802;
        id v44 = v30;
        __int16 v45 = 2114;
        id v46 = v13;
        __int16 v47 = 2114;
        id v48 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "[%@] Failed to send %{public}@ event to Background Assets: %{public}@", buf, 0x20u);
      }

      __int16 v27 = (void *)v38[5];
      if (!v27) {
        goto LABEL_25;
      }
    }
    objc_setProperty_atomic(v27, v24, 0, 24);
LABEL_25:

    _Block_object_dispose(&v37, 8);
  }
}

void sub_10028F6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10028F6F0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72);
  id v6 = [*(id *)(a1 + 40) appBundleIdentifier];
  uint64_t v3 = [v2 objectForKeyedSubscript:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10028F764(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%{public}@] Starting background asset observation", buf, 0xCu);
  }

  uint64_t v4 = objc_alloc_init(BackgroundAssetInfo);
  id v6 = v4;
  if (v4) {
    objc_setProperty_atomic(v4, v5, *(id *)(a1 + 32), 16);
  }
  [*(id *)(*(void *)(a1 + 40) + 72) setObject:v6 forKeyedSubscript:*(void *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 40) + 64) addObject:*(void *)(a1 + 48)];
  uint64_t v7 = *(void *)(a1 + 40);
  unsigned int v8 = *(void **)(v7 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10028F8AC;
  v9[3] = &unk_100525060;
  void v9[4] = v7;
  [v8 updateConfiguration:v9];
}

id sub_10028F8AC(uint64_t a1, void *a2)
{
  return [a2 setAppBundleIdentifiers:*(void *)(*(void *)(a1 + 32) + 64)];
}

id sub_10028F8BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  unsigned int v14 = sub_100018048;
  id v15 = sub_100017BE0;
  id v16 = 0;
  uint64_t v4 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10028F9E8;
  v8[3] = &unk_100521288;
  id v10 = &v11;
  void v8[4] = a1;
  id v5 = v3;
  id v9 = v5;
  sub_100010468(v4, v8);
  id v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_10028F9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10028F9E8(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 72) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id Property = *(id *)(*(void *)(a1[6] + 8) + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 16, 1);
    }
    *(_DWORD *)long long buf = 138543362;
    id v13 = Property;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}@] Stopping background asset observation", buf, 0xCu);
  }

  [*(id *)(a1[4] + 72) setObject:0 forKeyedSubscript:a1[5]];
  [*(id *)(a1[4] + 64) removeObject:a1[5]];
  uint64_t v8 = a1[4];
  id v9 = *(void **)(v8 + 56);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10028FB44;
  v11[3] = &unk_100525060;
  void v11[4] = v8;
  return [v9 updateConfiguration:v11];
}

id sub_10028FB44(uint64_t a1, void *a2)
{
  return [a2 setAppBundleIdentifiers:*(void *)(*(void *)(a1 + 32) + 64)];
}

uint64_t sub_10028FB54(uint64_t a1, id a2)
{
  uint64_t v3 = sub_100401CE4(a2, *(void **)(a1 + 32));
  if ([v3 existsInDatabase])
  {
    uint64_t v4 = sub_1002C1EE8(v3);
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      unint64_t v7 = (unint64_t)[*(id *)(a1 + 48) progressState];
      if (v6)
      {
        if (v7 > 6) {
          CFStringRef v8 = @"UnknownState";
        }
        else {
          CFStringRef v8 = off_1005250E8[v7];
        }
      }
      else
      {
        CFStringRef v8 = 0;
      }
      int v10 = 138412546;
      uint64_t v11 = v4;
      __int16 v12 = 2114;
      CFStringRef v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] Background asset download has ended with state: %{public}@", (uint8_t *)&v10, 0x16u);
    }
  }
  return 1;
}

void sub_10028FC88(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 64);
  id v4 = a2;
  [v4 setAppBundleIdentifiers:v3];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10028FD2C;
  v5[3] = &unk_1005250B0;
  void v5[4] = *(void *)(a1 + 32);
  [v4 setUpdateHandler:v5];
}

void sub_10028FD2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v112 = 0;
  v113 = &v112;
  uint64_t v114 = 0x3032000000;
  id v115 = sub_100018048;
  v116 = sub_100017BE0;
  id v117 = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  CFStringRef v8 = *(void **)(v7 + 40);
  v109[0] = _NSConcreteStackBlock;
  v109[1] = 3221225472;
  v109[2] = sub_100290B1C;
  v109[3] = &unk_100521288;
  v111 = &v112;
  v109[4] = v7;
  id v9 = v5;
  id v110 = v9;
  sub_100010468(v8, v109);
  switch((unint64_t)[v6 progressState])
  {
    case 0uLL:
    case 1uLL:
      int v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id Property = (id)v113[5];
        if (Property) {
          id Property = objc_getProperty(Property, v11, 16, 1);
        }
        id v13 = Property;
        uint64_t v14 = *(void *)(a1 + 32);
        unint64_t v15 = (unint64_t)[v6 progressState];
        if (v14)
        {
          if (v15 > 6) {
            CFStringRef v16 = @"UnknownState";
          }
          else {
            CFStringRef v16 = off_1005250E8[v15];
          }
        }
        else
        {
          CFStringRef v16 = 0;
        }
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v16;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Background assets reported state: %{public}@", buf, 0x16u);
      }
      uint64_t v50 = *(void *)(a1 + 32);
      id v51 = v6;
      id v52 = v9;
      if (!v50) {
        goto LABEL_91;
      }
      id v53 = sub_10028F8BC(v50, v52);
      __int16 v55 = v53;
      if (v53)
      {
        if (objc_getProperty(v53, v54, 24, 1))
        {
          uint64_t v56 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            id v58 = objc_getProperty(v55, v57, 16, 1);
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v58;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "[%@]: Status update in response to our Background Asset event has been received", buf, 0xCu);
          }

          long long v60 = objc_getProperty(v55, v59, 24, 1);
          dispatch_semaphore_signal(v60);
          goto LABEL_90;
        }
      }
      else
      {
        long long v61 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v52;
          _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "[%@] Failed to find baInfo in _backgroundAssetDownloadHasCompleted", buf, 0xCu);
        }
      }
      id v63 = [*(id *)(v50 + 48) objectForKeyedSubscript:v52];
      if (v63)
      {
        if (v55 && (id v64 = objc_getProperty(v55, v62, 8, 1)) != 0)
        {
          id v65 = v64;
          [v64 setComplete:1];
          objc_setProperty_atomic(v55, v66, 0, 8);
        }
        else
        {
          id v65 = [objc_alloc((Class)IXPromisedOutOfBandTransfer) initWithName:@"essential-asset" client:1 diskSpaceNeeded:0];
          [v65 setComplete:1];
          id v124 = v65;
          id v69 = +[NSArray arrayWithObjects:&v124 count:1];
          id v118 = 0;
          unsigned int v70 = sub_10027A6C8(v63, v69, &v118);
          id v107 = v118;

          uint64_t v71 = ASDLogHandleForCategory();
          char v72 = v71;
          if (v70)
          {
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
            {
              if (v55) {
                id v74 = objc_getProperty(v55, v73, 16, 1);
              }
              else {
                id v74 = 0;
              }
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v74;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v65;
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "[%@]: Set already-complete essential asset promises on the coordinator: %{public}@", buf, 0x16u);
            }
          }
          else if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
            if (v55) {
              id v105 = objc_getProperty(v55, v102, 16, 1);
            }
            else {
              id v105 = 0;
            }
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v105;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v107;
            _os_log_error_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "[%@]: Failed to set already-complete essential asset promises on the coordinator: %{public}@", buf, 0x16u);
          }
        }
      }
      id v103 = *(void **)(v50 + 8);
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_10028FB54;
      v121 = &unk_100525088;
      *(void *)&long long v122 = v52;
      *((void *)&v122 + 1) = v50;
      id v123 = v51;
      [v103 modifyUsingTransaction:buf];

LABEL_90:
LABEL_91:

LABEL_96:
      _Block_object_dispose(&v112, 8);

      return;
    case 2uLL:
      long long v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = (id)v113[5];
        if (v31) {
          id v31 = objc_getProperty(v31, v30, 16, 1);
        }
        id v32 = v31;
        uint64_t v33 = *(void *)(a1 + 32);
        unint64_t v34 = (unint64_t)[v6 progressState];
        if (v33)
        {
          if (v34 > 6) {
            CFStringRef v35 = @"UnknownState";
          }
          else {
            CFStringRef v35 = off_1005250E8[v34];
          }
        }
        else
        {
          CFStringRef v35 = 0;
        }
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v32;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v35;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Background assets reported state: %{public}@", buf, 0x16u);
      }
      goto LABEL_95;
    case 3uLL:
    case 4uLL:
      long long v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v19 = (id)v113[5];
        if (v19) {
          id v19 = objc_getProperty(v19, v18, 16, 1);
        }
        id v20 = v19;
        uint64_t v21 = *(void *)(a1 + 32);
        unint64_t v22 = (unint64_t)[v6 progressState];
        if (v21)
        {
          if (v22 > 6) {
            CFStringRef v23 = @"UnknownState";
          }
          else {
            CFStringRef v23 = off_1005250E8[v22];
          }
        }
        else
        {
          CFStringRef v23 = 0;
        }
        id v67 = [v6 countOfBytesReceived];
        id v68 = [v6 countOfBytesExpectedToReceive];
        *(_DWORD *)long long buf = 138413058;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v23;
        *(_WORD *)&buf[22] = 2048;
        v121 = v67;
        LOWORD(v122) = 2048;
        *(void *)((char *)&v122 + 2) = v68;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Background assets reported state: %{public}@ : progress: %lld : %lld", buf, 0x2Au);
      }
      goto LABEL_95;
    case 5uLL:
      id v36 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        id v38 = (id)v113[5];
        if (v38) {
          id v38 = objc_getProperty(v38, v37, 16, 1);
        }
        id v39 = v38;
        uint64_t v40 = *(void *)(a1 + 32);
        unint64_t v41 = (unint64_t)[v6 progressState];
        if (v40)
        {
          if (v41 > 6) {
            CFStringRef v42 = @"UnknownState";
          }
          else {
            CFStringRef v42 = off_1005250E8[v41];
          }
        }
        else
        {
          CFStringRef v42 = 0;
        }
        id v75 = [v6 countOfBytesReceived];
        id v76 = [v6 countOfBytesExpectedToReceive];
        *(_DWORD *)long long buf = 138413058;
        *(void *)&uint8_t buf[4] = v39;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v42;
        *(_WORD *)&buf[22] = 2048;
        v121 = v75;
        LOWORD(v122) = 2048;
        *(void *)((char *)&v122 + 2) = v76;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[%@] Background assets reported state: %{public}@ : progress: %lld : %lld", buf, 0x2Au);
      }
      long long v77 = sub_100388088();
      sub_10038A85C((uint64_t)v77, v9, (uint64_t)[v6 countOfBytesReceived], (uint64_t)objc_msgSend(v6, "countOfBytesExpectedToReceive"));

      long long v17 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:v9];
      if (v17)
      {
        long long v79 = (void *)v113[5];
        if (v79 && (id v80 = objc_getProperty(v79, v78, 8, 1)) != 0)
        {
          id v81 = v80;
          objc_msgSend(v80, "setPercentComplete:", (double)(uint64_t)objc_msgSend(v6, "countOfBytesReceived")/ (double)(uint64_t)objc_msgSend(v6, "countOfBytesExpectedToReceive"));
        }
        else
        {
          id v93 = objc_msgSend(objc_alloc((Class)IXPromisedOutOfBandTransfer), "initWithName:client:diskSpaceNeeded:", @"essential-asset", 1, objc_msgSend(v6, "countOfBytesExpectedToReceive"));
          objc_msgSend(v93, "setPercentComplete:", (double)(uint64_t)objc_msgSend(v6, "countOfBytesReceived")/ (double)(uint64_t)objc_msgSend(v6, "countOfBytesExpectedToReceive"));
          __int16 v95 = (void *)v113[5];
          if (v95) {
            objc_setProperty_atomic(v95, v94, v93, 8);
          }
          id v119 = v93;
          int v96 = +[NSArray arrayWithObjects:&v119 count:1];
          id v108 = 0;
          unsigned int v97 = sub_10027A6C8(v17, v96, &v108);
          id v98 = v108;

          if (v97)
          {
            id v99 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
            {
              id v101 = (id)v113[5];
              if (v101) {
                id v101 = objc_getProperty(v101, v100, 16, 1);
              }
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v101;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v93;
              _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "[%@]: Set essential asset promises on the coordinator: %{public}@", buf, 0x16u);
            }
          }
          else
          {
            id v99 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
            {
              id v106 = (id)v113[5];
              if (v106) {
                id v106 = objc_getProperty(v106, v104, 16, 1);
              }
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v106;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v98;
              _os_log_error_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_ERROR, "[%@]: Failed to set essential asset promises on the coordinator: %{public}@", buf, 0x16u);
            }
          }

          id v81 = 0;
        }
      }
      goto LABEL_95;
    case 6uLL:
      BOOL v43 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        id v45 = (id)v113[5];
        if (v45) {
          id v45 = objc_getProperty(v45, v44, 16, 1);
        }
        id v46 = v45;
        uint64_t v47 = *(void *)(a1 + 32);
        unint64_t v48 = (unint64_t)[v6 progressState];
        if (v47)
        {
          if (v48 > 6) {
            CFStringRef v49 = @"UnknownState";
          }
          else {
            CFStringRef v49 = off_1005250E8[v48];
          }
        }
        else
        {
          CFStringRef v49 = 0;
        }
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v46;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v49;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "[%@] Background assets reported state: %{public}@", buf, 0x16u);
      }
      uint64_t v82 = *(void *)(a1 + 32);
      id v83 = v9;
      if (v82)
      {
        long long v84 = sub_10028F8BC(v82, v83);
        id v86 = v84;
        if (v84)
        {
          if (objc_getProperty(v84, v85, 24, 1))
          {
            long long v87 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
            {
              id v89 = objc_getProperty(v86, v88, 16, 1);
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v89;
              _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "[%@]: Status update in response to our Background Asset event has been received", buf, 0xCu);
            }

            uint64_t v91 = objc_getProperty(v86, v90, 24, 1);
            dispatch_semaphore_signal(v91);
          }
        }
        else
        {
          uint64_t v92 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v83;
            _os_log_error_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "[%@] Failed to find baInfo in _backgroundAssetDownloadHasPaused", buf, 0xCu);
          }
        }
      }

      goto LABEL_96;
    default:
      long long v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v25 = (id)v113[5];
        if (v25) {
          id v25 = objc_getProperty(v25, v24, 16, 1);
        }
        id v26 = v25;
        id v27 = [v6 progressState];
        id v28 = [v6 countOfBytesReceived];
        id v29 = [v6 countOfBytesExpectedToReceive];
        *(_DWORD *)long long buf = 138413058;
        *(void *)&uint8_t buf[4] = v26;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v27;
        *(_WORD *)&buf[22] = 2048;
        v121 = v28;
        LOWORD(v122) = 2048;
        *(void *)((char *)&v122 + 2) = v29;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Background assets reported unknown state: %ld : progress: %lld : %lld", buf, 0x2Au);
      }
LABEL_95:

      goto LABEL_96;
  }
}

void sub_100290A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100290B1C(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 72) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id *sub_100290C04(id *a1, void *a2, void *a3, char a4)
{
  id v8 = a2;
  id v9 = a3;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)LZMAStreamReader;
    int v10 = (id *)objc_msgSendSuper2(&v17, "init");
    a1 = v10;
    if (v10)
    {
      objc_storeStrong(v10 + 8, a2);
      [a1[8] setDelegate:a1];
      id v11 = sub_100239938([LZMADecoder alloc], v9);
      id v12 = a1[9];
      a1[9] = v11;

      id v13 = a1[9];
      if (v13) {
        v13[168] = a4;
      }
      uint64_t v14 = objc_alloc_init(UnfairLock);
      id v15 = a1[7];
      a1[7] = v14;
    }
  }

  return a1;
}

void sub_100290E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100290E9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 184);
    if (v4 == 2)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(v2 + 64) hasBytesAvailable];
      id v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        int v10 = 67109120;
        int v11 = v6;
        uint64_t v7 = "(LZMAStreamReader) Upstream has bytes available = %{BOOL}d";
LABEL_9:
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v10, 8u);
        goto LABEL_7;
      }
      goto LABEL_7;
    }
    BOOL v8 = v4 != 3;
  }
  else
  {
    BOOL v8 = 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v10 = 67109120;
    int v11 = v9;
    uint64_t v7 = "(LZMAStreamReader) Decoder state finished = %{BOOL}d";
    goto LABEL_9;
  }
LABEL_7:
}

void sub_1002912A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002912C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 72);
  if ((!v2 || *(void *)(v2 + 184) != 2) && (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) & 0x10) != 0)
  {
    uint64_t v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "(LZMAStreamReader) Filtering stream end event", v4, 2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) &= ~0x10uLL;
  }
}

void sub_1002914B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1002914D4(uint64_t *a1)
{
  if ([(id)a1[4] streamStatus] != (id)7)
  {
    id v5 = [objc_alloc((Class)NSMutableData) initWithLength:a1[7]];
    if ([v5 length])
    {
      int v6 = *(void **)(a1[4] + 64);
      id v7 = v5;
      id v8 = [v7 mutableBytes];
      id v9 = [v7 length];
      uint64_t v10 = *(void *)(a1[5] + 8);
      id obj = *(id *)(v10 + 40);
      unint64_t v11 = (unint64_t)[v6 readBytes:v8 length:v9 error:&obj];
      objc_storeStrong((id *)(v10 + 40), obj);
      if ((v11 & 0x8000000000000000) != 0)
      {
        uint64_t v12 = a1[4];
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v21 = a1[7];
    uint64_t v13 = *(void *)(a1[4] + 72);
    uint64_t v14 = (char *)[v5 bytes];
    uint64_t v15 = a1[8];
    uint64_t v16 = *(void *)(a1[5] + 8);
    id v20 = *(id *)(v16 + 40);
    int v17 = sub_100239B50(v13, v14, v11, v15, (id *)&v21, &v20);
    objc_storeStrong((id *)(v16 + 40), v20);
    uint64_t v12 = a1[4];
    if (v17)
    {
      uint64_t v18 = *(void *)(v12 + 72);
      if (v18)
      {
        if (*(void *)(v18 + 184) == 3)
        {
          sub_1002E7B3C(v12, 5);
          uint64_t v19 = a1[4];
          if (v19) {
            dispatch_source_merge_data(*(dispatch_source_t *)(v19 + 16), 0x10uLL);
          }
        }
      }
      *(void *)(*(void *)(a1[6] + 8) + 24) = v21;
      goto LABEL_16;
    }
LABEL_15:
    sub_1002E7B3C(v12, 7);
    sub_1002E79B0(a1[4], *(void **)(*(void *)(a1[5] + 8) + 40));
LABEL_16:

    return;
  }
  uint64_t v2 = [(id)a1[4] streamError];
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void *sub_100291778(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)BackgroundTaskRequest;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      xpc_object_t v4 = xpc_copy(v3);
      id v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

id sub_1002917EC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_100291778([BackgroundTaskRequest alloc], XPC_ACTIVITY_CHECK_IN);
  id v5 = v3;
  if (v3) {
    objc_setProperty_nonatomic_copy(v3, v4, v2, 16);
  }

  return v5;
}

id sub_100291868()
{
  self;
  xpc_object_t empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_string(empty, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(empty, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_7_DAYS);
  return empty;
}

id sub_1002918F8(uint64_t a1, void *a2, int64_t a3)
{
  id v4 = a2;
  self;
  xpc_object_t empty = xpc_dictionary_create_empty();
  [v4 timeIntervalSinceNow];
  double v7 = v6;

  xpc_dictionary_set_int64(empty, XPC_ACTIVITY_DELAY, (uint64_t)v7);
  xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_string(empty, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(empty, XPC_ACTIVITY_GRACE_PERIOD, a3);
  return empty;
}

id sub_1002919D0(uint64_t a1, void *a2, char a3, int a4)
{
  id v6 = a2;
  self;
  xpc_object_t empty = xpc_dictionary_create_empty();
  [v6 timeIntervalSinceNow];
  double v9 = v8;

  xpc_dictionary_set_int64(empty, XPC_ACTIVITY_DELAY, (uint64_t)v9);
  xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_string(empty, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_int64(empty, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
  if ((a3 & 1) == 0) {
    xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
  }
  if (a4) {
    xpc_dictionary_set_BOOL(empty, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  }
  return empty;
}

id sub_100291B48()
{
  self;
  if (qword_1005B0CE8 != -1) {
    dispatch_once(&qword_1005B0CE8, &stru_100525148);
  }
  uint64_t v0 = (void *)qword_1005B0CF0;
  return v0;
}

void sub_100291BA0(id a1)
{
  uint64_t v1 = objc_alloc_init(WallClock);
  id v2 = (void *)qword_1005B0CF0;
  qword_1005B0CF0 = (uint64_t)v1;
}

id *sub_100291C70(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    double v8 = [a1 init];
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

uint64_t sub_100291CF0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 48);
  return result;
}

uint64_t sub_100291D04(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 49);
  return result;
}

void sub_100291E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100291E20(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = WeakRetained;
}

id sub_100291F04(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 56), *(id *)(a1 + 40));
}

void sub_100292008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100292020(uint64_t a1)
{
}

void sub_1002920CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) prependingCategory:@"Claim"];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10029220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100292224(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100292270(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100292318;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    sub_100010468(v5, v6);
  }
}

void sub_100292318(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;
}

uint64_t sub_10029241C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  id v6 = sub_10042889C(v4);
  unsigned __int8 v7 = [v6 isFactoryInstall];

  if ((v7 & 1) == 0)
  {
    double v9 = [v4 bundleIdentifier];
    id v10 = [v9 rangeOfString:@"com.apple"];

    if (v10)
    {
      unint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = [v4 bundleIdentifier];
        int v27 = 138412546;
        id v28 = v5;
        __int16 v29 = 2114;
        id v30 = v12;
        uint64_t v13 = "[%@] Skipping claim for %{public}@: Bundle ID not eligible";
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v27, 0x16u);

        goto LABEL_23;
      }
      goto LABEL_23;
    }
    if ([v4 isPlaceholder])
    {
      unint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = [v4 bundleIdentifier];
        int v27 = 138412546;
        id v28 = v5;
        __int16 v29 = 2114;
        id v30 = v12;
        uint64_t v13 = "[%@] Skipping claim for %{public}@: Not installed";
        goto LABEL_22;
      }
LABEL_23:
      uint64_t v8 = 0;
LABEL_24:

      goto LABEL_25;
    }
    if ([v4 isProfileValidated])
    {
      unint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = [v4 bundleIdentifier];
        int v27 = 138412546;
        id v28 = v5;
        __int16 v29 = 2114;
        id v30 = v12;
        uint64_t v13 = "[%@] Skipping claim for %{public}@: Not store vended";
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (([v4 applicationMissingRequiredSINF] & 1) == 0)
    {
      unint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = [v4 bundleIdentifier];
        int v27 = 138412546;
        id v28 = v5;
        __int16 v29 = 2114;
        id v30 = v12;
        uint64_t v13 = "[%@] Skipping claim for %{public}@: Not missing SINF";
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    uint64_t v14 = [v4 iTunesMetadata];
    id v15 = [v14 storeItemIdentifier];

    uint64_t v16 = [v4 iTunesMetadata];
    id v17 = [v16 versionIdentifier];

    if (!v15 || !v17)
    {
      unint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = [v4 bundleIdentifier];
        int v27 = 138412546;
        id v28 = v5;
        __int16 v29 = 2114;
        id v30 = v12;
        uint64_t v13 = "[%@] Skipping claim for %{public}@: Missing store identifiers";
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    uint64_t v18 = [v4 iTunesMetadata];
    id v19 = [v18 storeFront];

    if (v19)
    {
      unint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = [v4 bundleIdentifier];
        int v27 = 138412546;
        id v28 = v5;
        __int16 v29 = 2114;
        id v30 = v12;
        uint64_t v13 = "[%@] Skipping claim for %{public}@: Not missing storeFront";
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    uint64_t v21 = sub_100428520(v4);
    unint64_t v11 = v21;
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + 8);
      CFStringRef v23 = ASDLogHandleForCategory();
      uint64_t v24 = v23;
      if (v22 == 5)
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          id v25 = [v4 bundleIdentifier];
          int v27 = 138412546;
          id v28 = v5;
          __int16 v29 = 2114;
          id v30 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] Attempting claim for %{public}@: Passes eligible for corrupted metadata", (uint8_t *)&v27, 0x16u);
        }
        uint64_t v8 = 1;
LABEL_35:

        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v24 = ASDLogHandleForCategory();
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      id v26 = [v4 bundleIdentifier];
      int v27 = 138412546;
      id v28 = v5;
      __int16 v29 = 2114;
      id v30 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "[%@] Skipping claim for %{public}@: Not missing account", (uint8_t *)&v27, 0x16u);
    }
    uint64_t v8 = 0;
    goto LABEL_35;
  }
  uint64_t v8 = 1;
LABEL_25:

  return v8;
}

void sub_100294340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

id sub_100294364(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v33 = v5;
  if (a1)
  {
    id v6 = v5;
    id v7 = objc_alloc((Class)AMSDialogRequest);
    uint64_t v8 = ASDLocalizedString();
    id v9 = [v7 initWithTitle:v8 message:0];

    id v10 = [v6 account];

    ASDLocalizedString();
    if (v10) {
      unint64_t v11 = {;
    }
      uint64_t v12 = [v6 account];
      uint64_t v13 = [v12 username];
      uint64_t v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v11, v13);
      [v9 setMessage:v14];
    }
    else {
      unint64_t v11 = {;
    }
      [v9 setMessage:v11];
    }

    id v15 = ASDLocalizedString();
    uint64_t v16 = +[AMSDialogAction actionWithTitle:v15];

    [v16 setStyle:2];
    [v9 addButtonAction:v16];
    id v17 = ASDLocalizedString();
    uint64_t v18 = +[AMSDialogAction actionWithTitle:v17];

    [v9 addButtonAction:v18];
    id v19 = [objc_alloc((Class)AMSSystemAlertDialogTask) initWithRequest:v9];
    id v20 = [v19 present];
    uint64_t v21 = [v20 resultWithError:a3];

    uint64_t v22 = [v21 selectedActionIdentifier];
    [v18 identifier];
    v24 = CFStringRef v23 = a3;
    unsigned int v25 = [v22 isEqualToString:v24];

    if (v25)
    {
      id v26 = ASDErrorWithDescription();
      int v27 = [a1 delegate];
      [v27 repair:a1 needsToReleaseBlockingCallerWithReason:v26];

      id v28 = objc_alloc((Class)AMSAuthenticateTask);
      __int16 v29 = sub_10030B11C();
      id v30 = [v28 initWithRequest:v33 bag:v29];

      [v30 setDelegate:a1];
      id v31 = [v30 performAuthentication];
      a1 = [v31 resultWithError:v23];
    }
    else if (v23)
    {
      ASDErrorWithDescription();
      a1 = 0;
      void *v23 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      a1 = 0;
    }
  }
  return a1;
}

void sub_100294DE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Error in dialog task: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100295038(id a1)
{
  id v1 = [objc_alloc((Class)AMSProcessInfo) initWithBundleIdentifier:@"com.apple.AppStore"];
  id v2 = (void *)qword_1005B0CF8;
  qword_1005B0CF8 = (uint64_t)v1;
}

id sub_100295080()
{
  self;
  id v0 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:@"com.apple.AppStore" allowPlaceholder:0 error:0];
  if (v0) {
    sub_1000169A4();
  }
  else {
  id v1 = sub_100295100();
  }

  return v1;
}

id sub_100295100()
{
  self;
  if (qword_1005B0D10 != -1) {
    dispatch_once(&qword_1005B0D10, &stru_100525188);
  }
  id v0 = (void *)qword_1005B0D08;
  return v0;
}

void sub_100295158(id a1)
{
  id v1 = [objc_alloc((Class)AMSProcessInfo) initWithBundleIdentifier:@"com.apple.appstored"];
  id v2 = (void *)qword_1005B0D08;
  qword_1005B0D08 = (uint64_t)v1;
}

id sub_1002951A0(id a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
    id v11 = 0;
    goto LABEL_33;
  }
  id v5 = [v3 objectForKeyedSubscript:@"ITunesPreferredDsid"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    goto LABEL_8;
  }
  id v6 = v5;

  if (!v6)
  {
LABEL_8:
    uint64_t v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v32 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "FamilyMember: Received an invalid server response for FamilyMember. serverResponse = %@", buf, 0xCu);
    }

    id v6 = 0;
    id v11 = 0;
    goto LABEL_32;
  }
  v30.receiver = a1;
  v30.super_class = (Class)FamilyMember;
  id v7 = objc_msgSendSuper2(&v30, "init");
  if (v7)
  {
    uint64_t v8 = [v4 objectForKeyedSubscript:@"askToBuy"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v9 = v8;
    }
    else {
      id v9 = 0;
    }

    *((unsigned char *)v7 + 9) = [v9 BOOLValue];
    id v12 = [v4 objectForKeyedSubscript:@"firstName"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v13 = v12;
    }
    else {
      id v13 = 0;
    }

    uint64_t v14 = (void *)*((void *)v7 + 2);
    *((void *)v7 + 2) = v13;

    id v15 = [v4 objectForKeyedSubscript:@"ICloudDsid"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v16 = v15;
    }
    else {
      id v16 = 0;
    }

    id v17 = (void *)*((void *)v7 + 3);
    *((void *)v7 + 3) = v16;

    uint64_t v18 = [v4 objectForKeyedSubscript:@"accountName"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v19 = v18;
    }
    else {
      id v19 = 0;
    }

    id v20 = (void *)*((void *)v7 + 4);
    *((void *)v7 + 4) = v19;

    objc_storeStrong((id *)v7 + 5, v5);
    uint64_t v21 = [v4 objectForKeyedSubscript:@"ITunesPreferredAccountName"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v22 = v21;
    }
    else {
      id v22 = 0;
    }

    CFStringRef v23 = (void *)*((void *)v7 + 6);
    *((void *)v7 + 6) = v22;

    uint64_t v24 = [v4 objectForKeyedSubscript:@"lastName"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v25 = v24;
    }
    else {
      id v25 = 0;
    }

    id v26 = (void *)*((void *)v7 + 7);
    *((void *)v7 + 7) = v25;

    int v27 = [v4 objectForKeyedSubscript:@"sharingPurchases"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v28 = v27;
    }
    else {
      id v28 = 0;
    }

    *((unsigned char *)v7 + 10) = [v28 BOOLValue];
  }
  a1 = v7;
  id v11 = a1;
LABEL_32:

LABEL_33:
  return v11;
}

void *sub_100295554(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    id v3 = +[NSNumber numberWithBool:*((unsigned __int8 *)v1 + 9)];
    [v2 setObject:v3 forKeyedSubscript:@"askToBuy"];

    [v2 setObject:v1[5] forKeyedSubscript:@"ITunesPreferredDsid"];
    id v4 = +[NSNumber numberWithBool:*((unsigned __int8 *)v1 + 10)];
    [v2 setObject:v4 forKeyedSubscript:@"sharingPurchases"];

    objc_msgSend(v2, "ams_setNullableObject:forKey:", v1[2], @"firstName");
    objc_msgSend(v2, "ams_setNullableObject:forKey:", v1[3], @"ICloudDsid");
    objc_msgSend(v2, "ams_setNullableObject:forKey:", v1[4], @"accountName");
    objc_msgSend(v2, "ams_setNullableObject:forKey:", v1[6], @"ITunesPreferredAccountName");
    objc_msgSend(v2, "ams_setNullableObject:forKey:", v1[7], @"lastName");
    id v1 = [v2 copy];
  }
  return v1;
}

uint64_t sub_100295930(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = 0;
    id v1 = [objc_alloc((Class)NSScanner) initWithString:result];
    [v1 scanUnsignedLongLong:&v2];

    return v2;
  }
  return result;
}

id sub_10029598C(void *a1)
{
  if (a1)
  {
    a1 = +[NSURL URLWithString:a1];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100295D74(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_100295DA0(id a1)
{
  uint64_t v1 = objc_alloc_init(IAPHistoryService);
  uint64_t v2 = (void *)qword_1005B0D18;
  qword_1005B0D18 = (uint64_t)v1;
}

id *sub_100296684(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_1002966E8((id *)[PurchaseOwner alloc], 0, v2);

  return v3;
}

id *sub_1002966E8(id *a1, void *a2, void *a3)
{
  id v6 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)PurchaseOwner;
    id v7 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v7;
    if (v7)
    {
      v7[1] = a2;
      objc_storeStrong(v7 + 2, a3);
    }
  }

  return a1;
}

id *sub_100296768()
{
  self;
  id v0 = sub_1002966E8((id *)[PurchaseOwner alloc], (void *)1, 0);
  return v0;
}

id *sub_1002967A8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_1002966E8((id *)[PurchaseOwner alloc], (void *)2, v2);

  return v3;
}

id *sub_10029680C()
{
  self;
  id v0 = sub_1002966E8((id *)[PurchaseOwner alloc], (void *)3, 0);
  return v0;
}

id *sub_10029684C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_1002966E8((id *)[PurchaseOwner alloc], (void *)4, v2);

  return v3;
}

id *sub_1002968B0()
{
  self;
  id v0 = sub_1002966E8((id *)[PurchaseOwner alloc], (void *)5, 0);
  return v0;
}

id *sub_100296A94(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)PurchaseHistoryUpdateDAAPResponseDecoder;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

void sub_100296B0C(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    id v2 = [objc_alloc((Class)DKDAAPParser) initWithData:*(void *)(a1 + 8)];
    [v2 setDelegate:a1];
    [v2 parse];
  }
}

NSObject *sub_100296F10(NSObject *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = [a1 URL];
    id v3 = [v2 URLByAppendingPathComponent:@"Info.plist"];

    id v14 = 0;
    id v4 = [objc_alloc((Class)NSDictionary) initWithContentsOfURL:v3 error:&v14];
    id v5 = v14;
    if (v4)
    {
      uint64_t v6 = [v4 objectForKeyedSubscript:@"NSAdvertisingAttributionReportEndpoint"];
      if (!v6)
      {
        id v12 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[SKAdNetwork: Did not find developer pingback domain in Info.plist", buf, 2u);
        }

        objc_super v7 = 0;
        goto LABEL_13;
      }
      objc_super v7 = v6;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        objc_super v7 = v7;
        uint64_t v1 = v7;
LABEL_14:

        goto LABEL_15;
      }
      uint64_t v8 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      *(_WORD *)long long buf = 0;
      objc_super v9 = "[SKAdNetwork: Developer pingback domain is of unexpected type in Info.plist";
      uint64_t v10 = v8;
      uint32_t v11 = 2;
    }
    else
    {
      objc_super v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_13:
        uint64_t v1 = 0;
        goto LABEL_14;
      }
      uint64_t v8 = [v1 bundleIdentifier];
      *(_DWORD *)long long buf = 138543362;
      id v16 = v8;
      objc_super v9 = "[SKAdNetwork: Did not find Info.plist for app: %{public}@";
      uint64_t v10 = v7;
      uint32_t v11 = 12;
    }
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
LABEL_12:

    goto LABEL_13;
  }
LABEL_15:
  return v1;
}

void sub_1002974E0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void *sub_100297664(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v28.receiver = a1;
    v28.super_class = (Class)ODRAssetPack;
    id v7 = objc_msgSendSuper2(&v28, "init");
    a1 = v7;
    if (v7)
    {
      [v7 setValue:v6 forProperty:@"bundle_id"];
      uint64_t v8 = [v5 objectForKeyedSubscript:@"bundleKey"];
      [a1 setValue:v8 forProperty:@"bundle_key"];

      objc_super v9 = [v5 objectForKeyedSubscript:@"chunkSize"];
      [a1 setValue:v9 forProperty:@"chunk_size"];

      uint64_t v10 = [v5 objectForKeyedSubscript:@"downloadPriority"];
      [a1 setValue:v10 forProperty:@"download_priority"];

      uint32_t v11 = [v5 objectForKeyedSubscript:@"fileSize"];
      [a1 setValue:v11 forProperty:@"file_size"];

      id v12 = [v5 objectForKeyedSubscript:@"hashes"];
      [a1 setValue:v12 forProperty:@"hash_array"];

      id v13 = [v5 objectForKeyedSubscript:@"knownContentHashes"];
      [a1 setValue:v13 forProperty:@"known_content_hashes"];

      id v14 = [v5 objectForKeyedSubscript:@"md5"];
      [a1 setValue:v14 forProperty:@"md5"];

      id v15 = [v5 objectForKeyedSubscript:@"primaryContentHash"];
      [a1 setValue:v15 forProperty:@"primary_content_hash"];

      id v16 = [v5 objectForKeyedSubscript:@"sha"];
      [a1 setValue:v16 forProperty:@"sha"];

      id v17 = [v5 objectForKeyedSubscript:@"isStreamable"];
      [a1 setValue:v17 forProperty:@"streamable"];

      uint64_t v18 = [v5 objectForKeyedSubscript:@"URL"];
      [a1 setValue:v18 forProperty:@"source_url"];

      id v19 = [v5 objectForKeyedSubscript:@"uncompressedSize"];
      [a1 setValue:v19 forProperty:@"uncompressed_size"];

      id v20 = [v5 objectForKeyedSubscript:@"local_url"];
      [a1 setValue:v20 forProperty:@"local_url"];

      uint64_t v21 = [v5 objectForKeyedSubscript:@"pin_count"];
      [a1 setValue:v21 forProperty:@"pin_count"];

      id v22 = [v5 objectForKeyedSubscript:@"purgeable"];
      [a1 setValue:v22 forProperty:@"purgeable"];

      CFStringRef v23 = [v5 objectForKeyedSubscript:@"purge_reason"];
      [a1 setValue:v23 forProperty:@"purge_reason"];

      uint64_t v24 = [v5 objectForKeyedSubscript:@"effective_always_preserve"];
      [a1 setValue:v24 forProperty:@"effective_always_preserve"];

      id v25 = [v5 objectForKeyedSubscript:@"effective_preservation_priority"];
      [a1 setValue:v25 forProperty:@"effective_preservation_priority"];

      id v26 = [v5 objectForKeyedSubscript:@"last_used_date"];
      [a1 setValue:v26 forProperty:@"last_used_date"];
    }
  }

  return a1;
}

id sub_100297A88(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"bundle_id"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297AC0(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"bundle_key"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297AF8(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"chunk_size"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297B30(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"download_identifier"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297B68(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"download_priority"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297BA0(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"effective_always_preserve"];
    id v2 = [v1 BOOLValue];

    return v2;
  }
  return result;
}

double sub_100297BE8(void *a1)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v1 = [a1 valueForProperty:@"effective_preservation_priority"];
  [v1 doubleValue];
  double v3 = v2;

  return v3;
}

id sub_100297C3C(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"file_size"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297C74(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"hash_array"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297CAC(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"known_content_hashes"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297CE4(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"streamable"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297D1C(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"local_url"];
    if (v1)
    {
      double v2 = +[NSURL URLWithString:v1];
    }
    else
    {
      double v2 = 0;
    }
  }
  else
  {
    double v2 = 0;
  }
  return v2;
}

id sub_100297D94(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"md5"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297DCC(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"pin_count"];
    id v2 = [v1 longLongValue];

    return v2;
  }
  return result;
}

id sub_100297E14(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"primary_content_hash"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297E4C(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"purgeable"];
    id v2 = [v1 BOOLValue];

    return v2;
  }
  return result;
}

id sub_100297E94(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"purge_reason"];
    id v2 = [v1 integerValue];

    return v2;
  }
  return result;
}

id sub_100297EDC(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"uncompressed_size"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100297F14(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"source_url"];
    id v2 = +[NSURL URLWithString:v1];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_100297F80(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithBool:a2];
    [a1 setValue:v3 forProperty:@"effective_always_preserve"];
  }
}

void sub_100297FF0(void *a1)
{
  if (a1)
  {
    +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    [a1 setValue:v2 forProperty:@"effective_preservation_priority"];
  }
}

void sub_10029805C(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 absoluteString];
    [a1 setValue:v3 forProperty:@"local_url"];
  }
}

void sub_1002980C4(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithLongLong:a2 & ~(a2 >> 63)];
    [a1 setValue:v4 forProperty:@"pin_count"];

    if (a2 <= 0)
    {
      id v5 = +[NSDate date];
      [a1 setValue:v5 forProperty:@"last_used_date"];
    }
    sub_100298178(a1, a2 < 1);
  }
}

void sub_100298178(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = a2;
    id v4 = +[NSNumber numberWithBool:a2];
    [a1 setValue:v4 forProperty:@"purgeable"];

    id v5 = sub_100297D1C(a1);
    id v6 = [v5 path];

    if (!v6) {
      goto LABEL_11;
    }
    uint64_t v7 = sub_1002C5D90();
    uint64_t v8 = v7;
    if (v2)
    {
      if (v7)
      {
        uint64_t v9 = 98308;
        int v10 = 1;
        goto LABEL_8;
      }
    }
    else if (v7)
    {
      uint64_t v9 = 0;
      int v10 = 0;
LABEL_8:
      int v11 = sub_1002C72A0(v7, v9, v10, v6);

      if (v11)
      {
        uint64_t v8 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          id v12 = [a1 valueForProperty:@"bundle_key"];
          if (v2) {
            CFStringRef v13 = @"purgeable";
          }
          else {
            CFStringRef v13 = @"not purgeable";
          }
          int v14 = 138412802;
          id v15 = v12;
          __int16 v16 = 2114;
          CFStringRef v17 = v13;
          __int16 v18 = 2082;
          id v19 = strerror(v11);
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@]: Failed to mark asset as %{public}@: %{public}s", (uint8_t *)&v14, 0x20u);
        }
        goto LABEL_10;
      }
LABEL_11:

      return;
    }
LABEL_10:

    goto LABEL_11;
  }
}

void sub_10029833C(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithInteger:a2];
    [a1 setValue:v3 forProperty:@"purge_reason"];
  }
}

void sub_1002983AC(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 absoluteString];
    [a1 setValue:v3 forProperty:@"source_url"];
  }
}

id sub_1002984A0(void *a1)
{
  if (a1)
  {
    int v2 = [a1 valueForProperty:@"sha"];

    if (v2)
    {
      id v3 = &off_10054BF70;
      BOOL v4 = 1;
    }
    else
    {
      id v5 = [a1 valueForProperty:@"md5"];

      BOOL v4 = v5 != 0;
      if (v5) {
        id v3 = &off_10054BF88;
      }
      else {
        id v3 = 0;
      }
    }
    id v6 = [a1 valueForProperty:@"hash_array"];
    id v13 = 0;
    uint64_t v7 = +[NSPropertyListSerialization dataWithPropertyList:v6 format:200 options:0 error:&v13];
    id v8 = v13;
    uint64_t v9 = [a1 valueForProperty:@"chunk_size"];
    int v10 = (void *)v9;
    int v11 = 0;
    if (v4 && v9 && v7)
    {
      v14[0] = @"hash_type";
      v14[1] = @"bytes_to_hash";
      v15[0] = v3;
      v15[1] = v9;
      v14[2] = @"hash_array";
      v15[2] = v7;
      int v11 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:3];
    }
  }
  else
  {
    int v11 = 0;
  }
  return v11;
}

void *sub_100298654(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    int v2 = sub_100297D1C(a1);
    if (v2)
    {
      id v3 = sub_10022F014(v1);
      BOOL v4 = sub_1002704DC(v3);
      uint64_t v1 = (void *)sub_10022F824((uint64_t)ODRAssetPack, v2, v4);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  return v1;
}

void sub_100298714(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableArray);
  int v2 = (void *)qword_1005B1F88;
  qword_1005B1F88 = (uint64_t)v1;
}

char *sub_100298750(void *a1, void *a2)
{
  id v3 = a2;
  if (a1
    && (v55.receiver = a1,
        v55.super_class = (Class)ODRClient,
        (BOOL v4 = objc_msgSendSuper2(&v55, "init")) != 0))
  {
    uint64_t v5 = objc_opt_new();
    id v6 = (void *)v4[1];
    v4[1] = v5;

    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    id v8 = (void *)v4[10];
    v4[10] = v7;

    id v9 = objc_alloc_init((Class)NSLock);
    int v10 = (void *)v4[11];
    v4[11] = v9;

    int v11 = _NSBundleResourceRequestServerInterface();
    [v3 setExportedInterface:v11];

    id v12 = _NSBundleResourceRequestClientInterface();
    [v3 setRemoteObjectInterface:v12];

    [v3 setExportedObject:v4];
    uint64_t v13 = [v3 remoteObjectProxy];
    int v14 = (void *)v4[8];
    v4[8] = v13;

    memset(&error[1], 0, 32);
    if (v3) {
      [v3 auditToken];
    }
    CFAllocatorRef Default = CFAllocatorGetDefault();
    audit_token_t token = *(audit_token_t *)&error[1];
    __int16 v16 = SecTaskCreateWithAuditToken(Default, &token);
    CFStringRef v17 = v16;
    if (v16)
    {
      error[0] = 0;
      __int16 v18 = (void *)SecTaskCopyValueForEntitlement(v16, @"application-identifier", error);
      id v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        token.val[0] = 138543362;
        *(void *)&token.val[1] = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Application Identifier is: %{public}@", (uint8_t *)&token, 0xCu);
      }

      CFRelease(v17);
      *(void *)token.val = 0;
      CPCopyBundleIdentifierAndTeamFromApplicationIdentifier();
      if (*(void *)token.val)
      {
        id v20 = (void *)v4[9];
        v4[9] = *(void *)token.val;
      }
    }
    uint64_t v21 = (void *)v4[9];
    if (v21
      || (+[XPCClient clientIDForConnection:v3],
          uint64_t v22 = objc_claimAutoreleasedReturnValue(),
          CFStringRef v23 = (void *)v4[9],
          v4[9] = v22,
          v23,
          (uint64_t v21 = (void *)v4[9]) != 0))
    {
      uint64_t v24 = sub_1003B9318((uint64_t)ODRApplication, v21);
      id v25 = (void *)v4[2];
      void v4[2] = v24;
    }
    id v26 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = v4[9];
      token.val[0] = 138543362;
      *(void *)&token.val[1] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Connected with [%{public}@]", (uint8_t *)&token, 0xCu);
    }

    objc_super v28 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = v4[2];
      objc_super v30 = sub_1003BAF4C(v29);
      token.val[0] = 138543618;
      *(void *)&token.val[1] = v29;
      LOWORD(token.val[3]) = 2114;
      *(void *)((char *)&token.val[3] + 2) = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Application: %{public}@ Version: %{public}@", (uint8_t *)&token, 0x16u);
    }
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_100298DE8;
    void v52[3] = &unk_100521388;
    id v31 = v4;
    id v53 = v31;
    [v3 setInvalidationHandler:v52];
    id v32 = sub_1001F5C30();
    sub_1001F5D40(v32);

    if (v3) {
      [v3 auditToken];
    }
    else {
      memset(&token, 0, sizeof(token));
    }
    long long v33 = *(_OWORD *)&token.val[4];
    *(_OWORD *)(v31 + 2_Block_object_dispose(&a9, 8) = *(_OWORD *)token.val;
    *(_OWORD *)(v31 + 44) = v33;
    [v3 resume];
    id v34 = (id)qword_1005B1F88;
    objc_sync_enter(v34);
    [(id)qword_1005B1F88 addObject:v31];
    objc_sync_exit(v34);

    CFStringRef v35 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      id v49 = objc_getProperty(v31, v36, 72, 1);
      token.val[0] = 138543362;
      *(void *)&token.val[1] = v49;
      _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Created ODRClient from %{public}@", (uint8_t *)&token, 0xCu);
    }
    if (v4[9])
    {
      id v38 = objc_alloc((Class)LSApplicationRecord);
      uint64_t v39 = v4[9];
      id v51 = 0;
      id v40 = [v38 initWithBundleIdentifier:v39 allowPlaceholder:0 error:&v51];
      id v41 = v51;
      if (v41)
      {
        CFStringRef v42 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          uint64_t v50 = v4[9];
          token.val[0] = 138543618;
          *(void *)&token.val[1] = v50;
          LOWORD(token.val[3]) = 2114;
          *(void *)((char *)&token.val[3] + 2) = v41;
          _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to get an application record for %{public}@: %{public}@", (uint8_t *)&token, 0x16u);
        }
      }
      else
      {
        id v44 = [v40 appClipMetadata];
        BOOL v45 = v44 == 0;

        if (!v45)
        {
          id v46 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(token.val[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Received ODR connection from an App Clip", (uint8_t *)&token, 2u);
          }

          v31[24] = 1;
        }
        if (sub_1000173A0(v40))
        {
          uint64_t v47 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(token.val[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Received ODR connection from an unsupported distribution", (uint8_t *)&token, 2u);
          }

          v31[24] = 1;
        }
      }
    }
    else
    {
      BOOL v43 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(token.val[0]) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "No bundle ID, unable to determine if this is an App Clip.", (uint8_t *)&token, 2u);
      }
    }
  }
  else
  {
    id v31 = 0;
  }

  return v31;
}

void sub_100298DCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100298DE8(uint64_t a1)
{
  int v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    id Property = *(__CFString **)(a1 + 32);
    if (Property) {
      id Property = (__CFString *)objc_getProperty(Property, v3, 72, 1);
    }
    CFStringRef v11 = @"Unknown Client";
    if (Property) {
      CFStringRef v11 = Property;
    }
    LODWORD(v12) = 138543362;
    *(void *)((char *)&v12 + 4) = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Lost connection to '%{public}@'.", (uint8_t *)&v12, 0xCu);
  }

  BOOL v4 = *(id *)(a1 + 32);
  self;
  if (v4[2])
  {
    uint64_t v5 = sub_1002393C4();
    *(void *)&long long v12 = _NSConcreteStackBlock;
    *((void *)&v12 + 1) = 3221225472;
    uint64_t v13 = sub_10029F4E8;
    int v14 = &unk_100521360;
    id v15 = v4;
    [v5 modifyUsingTransaction:&v12];
  }
  id v6 = (id)qword_1005B1F88;
  objc_sync_enter(v6);
  [(id)qword_1005B1F88 removeObject:v4];
  objc_sync_exit(v6);

  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 96);
  *(void *)(v7 + 96) = 0;

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    objc_storeStrong((id *)(v9 + 64), 0);
  }
}

void sub_100298FB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100298FD0()
{
  self;
  id v0 = (id)qword_1005B1F88;
  objc_sync_enter(v0);
  id v1 = [(id)qword_1005B1F88 copy];
  objc_sync_exit(v0);

  return v1;
}

void sub_100299030(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100299044(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = (id)qword_1005B1F88;
  objc_sync_enter(v3);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = (id)qword_1005B1F88;
  id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v8);
        if (v9) {
          id Property = objc_getProperty(*(id *)(*((void *)&v15 + 1) + 8 * (void)v8), v5, 72, 1);
        }
        else {
          id Property = 0;
        }
        id v11 = Property;
        unsigned int v12 = objc_msgSend(v11, "isEqualToString:", v2, (void)v15);

        if (v12)
        {
          id v6 = v9;
          goto LABEL_15;
        }
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v13 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      id v6 = v13;
    }
    while (v13);
  }
LABEL_15:

  objc_sync_exit(v3);
  return v6;
}

void sub_1002991D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1002991F4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = self;
  objc_sync_enter(v6);
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x3032000000;
  id v26 = sub_100018078;
  uint64_t v27 = sub_100017BF8;
  id v28 = 0;
  uint64_t v7 = sub_1002393C4();
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100299684;
  void v20[3] = &unk_100523B10;
  uint64_t v22 = &v23;
  id v8 = v4;
  id v21 = v8;
  [v7 readUsingSession:v20];

  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Asset Pack : %{public}@ has no localURLString.", (uint8_t *)&buf, 0xCu);
  }

  int v10 = sub_100297F14((void *)v24[5]);
  if (sub_10023D548(v10))
  {
    id v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "This URL is invalid, we need to refresh the manifest. [%{public}@]", (uint8_t *)&buf, 0xCu);
    }

    id v12 = v5;
    self;
    uint64_t v30 = 0;
    id v31 = &v30;
    uint64_t v32 = 0x3032000000;
    long long v33 = sub_100018078;
    id v34 = sub_100017BF8;
    id v35 = 0;
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Refreshing manifest for application: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    dispatch_semaphore_t v14 = dispatch_semaphore_create(0);
    long long v15 = sub_10027D7D8([ODRManifestRequestTask alloc], v12);
    objc_initWeak(&location, v15);
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    uint64_t v37 = sub_1002996D8;
    id v38 = &unk_100525228;
    objc_copyWeak(v42, &location);
    id v16 = v12;
    id v39 = v16;
    id v41 = &v30;
    long long v17 = v14;
    id v40 = v17;
    [v15 setCompletionBlock:&buf];
    sub_10026F10C((uint64_t)ODRTaskQueue, v15, -1);
    dispatch_semaphore_wait(v17, 0xFFFFFFFFFFFFFFFFLL);
    id v18 = (id)v31[5];

    objc_destroyWeak(v42);
    objc_destroyWeak(&location);

    _Block_object_dispose(&v30, 8);
  }
  else
  {
    id v18 = 0;
  }

  _Block_object_dispose(&v23, 8);
  objc_sync_exit(v6);

  return v18;
}

void sub_100299618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a16, 8);
  objc_sync_exit(v23);
  _Unwind_Resume(a1);
}

void sub_100299684(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1001F82E8(a2, *(void *)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1002996D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = WeakRetained;
  if (!WeakRetained) {
    goto LABEL_4;
  }
  if ((WeakRetained[24] & 1) == 0)
  {
    id WeakRetained = objc_getProperty(WeakRetained, v3, 32, 1);
LABEL_4:
    id v5 = WeakRetained;
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v17 = v12;
      __int16 v18 = 2114;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Manifest refresh failed for application: %{public}@ error: %{public}@", buf, 0x16u);
    }

    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v5;
    goto LABEL_10;
  }
  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Completed manifest refresh for application: %{public}@", buf, 0xCu);
  }

  id v11 = sub_1002393C4();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_1002998DC;
  v13[3] = &unk_100525200;
  id v14 = v4;
  id v15 = *(id *)(a1 + 32);
  [v11 modifyUsingTransaction:v13];

  id v8 = v14;
LABEL_10:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

BOOL sub_1002998DC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = a2;
  if (v3) {
    id Property = objc_getProperty(v3, v4, 48, 1);
  }
  else {
    id Property = 0;
  }
  id v7 = Property;
  BOOL v8 = sub_100248BE8(v5, v7, *(void **)(a1 + 40), 1);

  return v8;
}

void sub_100299CE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100299D14(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1001F8DDC(a2, *(void **)(*(void *)(a1 + 32) + 16));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100299D54(uint64_t a1)
{
  if (a1)
  {
    sub_1003B9E28(*(void *)(a1 + 16));
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    self;
    id v3 = (id)qword_1005B1F88;
    objc_sync_enter(v3);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v4 = (id)qword_1005B1F88;
    id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      int v7 = 0;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v4);
          }
          id Property = *(id *)(*((void *)&v15 + 1) + 8 * i);
          if (Property) {
            id Property = objc_getProperty(Property, v5, 72, 1);
          }
          id v11 = Property;
          unsigned int v12 = [v11 isEqualToString:v2];

          v7 += v12;
        }
        id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v6);

      objc_sync_exit(v3);
      if (v7 == 1)
      {
        id v13 = sub_1002393C4();
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_10029F6B4;
        void v14[3] = &unk_100521360;
        void v14[4] = a1;
        [v13 modifyUsingTransaction:v14];
      }
    }
    else
    {

      objc_sync_exit(v3);
    }
    sub_100299F9C(a1);
  }
}

void sub_100299F68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100299F8C(uint64_t a1)
{
}

void sub_100299F94(uint64_t a1)
{
}

void sub_100299F9C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void **)(a1 + 88);
    *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
    id v2 = v1;

    [v2 unlock];
  }
}

void sub_10029A3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10029A408(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1001F8948(a2, *(void **)(*(void *)(a1 + 32) + 16));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10029A460(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = v3;
    [v5 UTF8String];
    uint64_t v6 = sub_10029D528(a1);
    int v7 = (void *)v6;
    if (v6)
    {
      v10[0] = _NSODRSandboxExtensionKey;
      v10[1] = _NSODRSandboxRootPathKey;
      v11[0] = v6;
      v11[1] = v5;
      uint64_t v8 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:2];
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_10029AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10029AB90(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1001F8948(a2, *(void **)(*(void *)(a1 + 32) + 16));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10029B164(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    _Block_object_dispose((const void *)(v2 - 192), 8);
    objc_begin_catch(exception_object);
    JUMPOUT(0x10029B03CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029B1DC(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1001F9084(a2, *(void *)(*(void *)(a1 + 32) + 16));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10029B49C(uint64_t a1)
{
  if (sub_10029BF20(*(void *)(a1 + 32), *(void **)(a1 + 40)))
  {
    uint64_t v50 = +[NSProgress progressWithTotalUnitCount:-1];
    id v49 = sub_10024AABC((id *)[ODRTagsRequest alloc], v50);
    id v46 = sub_10029C2F0(*(id *)(a1 + 32), *(void **)(a1 + 40));
    uint64_t v47 = objc_opt_new();
    uint64_t v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = [v46 count];
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Going to pin asset %lu pack ids.", buf, 0xCu);
    }

    uint64_t v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v46;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Going to pin asset packs: %{public}@", buf, 0xCu);
    }

    if ([v50 isCancelled])
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else if ([v46 count])
    {
      objc_msgSend(v50, "setTotalUnitCount:", objc_msgSend(v46, "count"));
      v70[0] = 0;
      v70[1] = v70;
      v70[2] = 0x3032000000;
      v70[3] = sub_100018078;
      v70[4] = sub_100017BF8;
      id v71 = (id)objc_opt_new();
      v69[0] = 0;
      v69[1] = v69;
      v69[2] = 0x2020000000;
      v69[3] = 0;
      v67[0] = 0;
      v67[1] = v67;
      v67[2] = 0x2020000000;
      char v68 = 0;
      objc_msgSend(v50, "becomeCurrentWithPendingUnitCount:", objc_msgSend(v46, "count"));
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      id obj = v46;
      id v6 = [obj countByEnumeratingWithState:&v63 objects:v83 count:16];
      if (v6)
      {
        uint64_t v45 = *(void *)v64;
        do
        {
          id v44 = v6;
          for (uint64_t i = 0; i != v44; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v64 != v45) {
              objc_enumerationMutation(obj);
            }
            uint64_t v8 = *(void **)(*((void *)&v63 + 1) + 8 * i);
            uint64_t v9 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
            {
              id v39 = sub_100297AC0(v8);
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v39;
              _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Trying to pin asset pack with ID: %{public}@", buf, 0xCu);
            }
            uint64_t v10 = sub_100297D1C(v8);
            if (!v10) {
              goto LABEL_21;
            }
            id v11 = sub_100297D1C(v8);
            unsigned int v12 = [v11 absoluteString];
            BOOL v13 = [v12 length] == 0;

            if (v13)
            {
LABEL_21:
              id v14 = sub_100297AC0(v8);
              id v15 = sub_1002991F4((uint64_t)ODRClient, v14, *(void **)(*(void *)(a1 + 32) + 16));
            }
            if ([v50 isCancelled])
            {
              (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

              _Block_object_dispose(v67, 8);
              _Block_object_dispose(v69, 8);
              _Block_object_dispose(v70, 8);

              goto LABEL_45;
            }
            long long v16 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              long long v17 = sub_100297AC0(v8);
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v17;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Pinning asset pack [%{public}@]", buf, 0xCu);
            }
            uint64_t v18 = *(void *)(a1 + 32);
            id v19 = sub_100297AC0(v8);
            uint64_t v20 = *(void *)(a1 + 64);
            v51[0] = _NSConcreteStackBlock;
            v51[1] = 3221225472;
            id v52 = sub_10029C438;
            id v53 = &unk_100525250;
            id v54 = v47;
            long long v60 = v67;
            id v55 = v50;
            id v59 = *(id *)(a1 + 56);
            long long v61 = v69;
            uint64_t v56 = *(void *)(a1 + 32);
            __int16 v57 = v8;
            id v62 = v70;
            id v21 = obj;
            id v58 = v21;
            id v22 = v19;
            id v23 = v49;
            uint64_t v24 = v51;
            if (v18)
            {
              uint64_t v77 = 0;
              long long v78 = &v77;
              uint64_t v79 = 0x3032000000;
              id v80 = sub_100018078;
              id v81 = sub_100017BF8;
              id v82 = 0;
              uint64_t v25 = sub_1002393C4();
              *(void *)long long buf = _NSConcreteStackBlock;
              *(void *)&uint8_t buf[8] = 3221225472;
              *(void *)&uint8_t buf[16] = sub_10029F25C;
              long long v87 = &unk_100525390;
              id v26 = v22;
              id v88 = v26;
              uint64_t v89 = v18;
              uint64_t v91 = &v77;
              id v27 = v23;
              id v90 = v27;
              [v25 readUsingSession:buf];

              uint64_t v29 = v78;
              uint64_t v30 = v78[5];
              if (v30)
              {
                *(void *)(v30 + 176) = v20;
                uint64_t v31 = v29[5];
                if (v31
                  && (*(unsigned char *)(v31 + 82) = 1, (uint64_t v32 = (void *)v29[5]) != 0)
                  && (objc_setProperty_atomic(v32, v28, v27, 224), v29 = v78, (uint64_t v33 = v78[5]) != 0))
                {
                  *(_DWORD *)(v33 + 8_Block_object_dispose(&a9, 8) = 25;
                  uint64_t v34 = v29[5];
                }
                else
                {
                  uint64_t v34 = 0;
                }
                v74[0] = _NSConcreteStackBlock;
                v74[1] = 3221225472;
                v74[2] = sub_10029F348;
                v74[3] = &unk_100521C18;
                id v75 = v26;
                id v35 = v24;
                id v76 = v35;
                if (v34)
                {
                  [*(id *)(v34 + 256) addErrorBlock:v74];
                  uint64_t v29 = v78;
                }
                uint64_t v36 = v29[5];
                v72[0] = _NSConcreteStackBlock;
                v72[1] = 3221225472;
                v72[2] = sub_10029F454;
                v72[3] = &unk_1005253B8;
                id v73 = v35;
                if (v36) {
                  [*(id *)(v36 + 256) addSuccessBlock:v72];
                }
                uint64_t v37 = sub_10040EBA8();
                sub_10040ED38((uint64_t)v37, (void *)v78[5]);

                id v38 = v75;
              }
              else
              {
                id v38 = +[ODRPublicErrorMapping publicErrorForError:0];
                v52((uint64_t)v24, -1, 0, v38);
              }

              _Block_object_dispose(&v77, 8);
            }
          }
          id v6 = [v21 countByEnumeratingWithState:&v63 objects:v83 count:16];
        }
        while (v6);
      }

      [v50 resignCurrent];
      _Block_object_dispose(v67, 8);
      _Block_object_dispose(v69, 8);
      _Block_object_dispose(v70, 8);
    }
    else
    {
      uint64_t v40 = *(void *)(a1 + 56);
      id v41 = +[NSDictionary dictionary];
      (*(void (**)(uint64_t, void *, void))(v40 + 16))(v40, v41, 0);
    }
LABEL_45:
  }
  else
  {
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = *(void *)(a1 + 40);
      uint64_t v43 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v42;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v43;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Pin tags failed for invalid tag in set [%{public}@], bundleURL: %{public}@", buf, 0x16u);
    }

    uint64_t v50 = +[NSString stringWithFormat:@"Request could not be completed.  Invalid tag in set '%@.'", *(void *)(a1 + 40)];
    NSErrorUserInfoKey v84 = NSLocalizedFailureReasonErrorKey;
    long long v85 = v50;
    id v49 = +[NSDictionary dictionaryWithObjects:&v85 forKeys:&v84 count:1];
    uint64_t v5 = *(void *)(a1 + 56);
    id v46 = +[NSError errorWithDomain:NSCocoaErrorDomain code:4994 userInfo:v49];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v46);
  }
}

void sub_10029BEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

uint64_t sub_10029BF20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v31 = 0;
    uint64_t v32 = &v31;
    uint64_t v33 = 0x3032000000;
    uint64_t v34 = sub_100018078;
    id v35 = sub_100017BF8;
    id v36 = 0;
    uint64_t v4 = sub_1002393C4();
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10029F6C8;
    v30[3] = &unk_100523B10;
    v30[4] = a1;
    v30[5] = &v31;
    [v4 readUsingSession:v30];

    uint64_t v5 = objc_opt_new();
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v6 = (id)v32[5];
    id v7 = [v6 countByEnumeratingWithState:&v26 objects:v42 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v8) {
            objc_enumerationMutation(v6);
          }
          uint64_t v10 = sub_1002EC448(*(void **)(*((void *)&v26 + 1) + 8 * i));
          [v5 addObject:v10];
        }
        id v7 = [v6 countByEnumeratingWithState:&v26 objects:v42 count:16];
      }
      while (v7);
    }

    id v11 = [v5 count];
    if (v11 >= [v3 count])
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      unsigned int v12 = v3;
      id v14 = [v12 countByEnumeratingWithState:&v22 objects:v41 count:16];
      if (v14)
      {
        uint64_t v15 = *(void *)v23;
        while (2)
        {
          for (j = 0; j != v14; j = (char *)j + 1)
          {
            if (*(void *)v23 != v15) {
              objc_enumerationMutation(v12);
            }
            uint64_t v17 = *(void *)(*((void *)&v22 + 1) + 8 * (void)j);
            if ((objc_msgSend(v5, "containsObject:", v17, (void)v22) & 1) == 0)
            {
              id v19 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                uint64_t v21 = *(void *)(a1 + 72);
                *(_DWORD *)long long buf = 138543618;
                uint64_t v38 = v17;
                __int16 v39 = 2114;
                uint64_t v40 = v21;
                _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Tag %{public}@ isn't valid for [%{public}@].", buf, 0x16u);
              }

              goto LABEL_24;
            }
          }
          id v14 = [v12 countByEnumeratingWithState:&v22 objects:v41 count:16];
          uint64_t v18 = 1;
          if (v14) {
            continue;
          }
          break;
        }
      }
      else
      {
        uint64_t v18 = 1;
      }
    }
    else
    {
      unsigned int v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(a1 + 72);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v38 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Tags aren't valid for [%{public}@].", buf, 0xCu);
      }
LABEL_24:
      uint64_t v18 = 0;
    }

    _Block_object_dispose(&v31, 8);
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

void sub_10029C2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

id sub_10029C2F0(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x3032000000;
    uint64_t v13 = sub_100018078;
    id v14 = sub_100017BF8;
    id v15 = 0;
    uint64_t v4 = sub_1002393C4();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10029F0E0;
    v6[3] = &unk_100525368;
    uint64_t v9 = &v10;
    id v7 = v3;
    id v8 = a1;
    [v4 readUsingSession:v6];

    a1 = (id)v11[5];
    _Block_object_dispose(&v10, 8);
  }
  return a1;
}

void sub_10029C420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10029C438(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  [*(id *)(a1 + 32) lock];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)) {
    goto LABEL_21;
  }
  if ([*(id *)(a1 + 40) isCancelled])
  {
    uint64_t v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Progress was cancelled...", buf, 2u);
    }

    if (v8) {
      goto LABEL_8;
    }
    NSErrorUserInfoKey v30 = NSLocalizedRecoverySuggestionErrorKey;
    CFStringRef v31 = @"Request for resources was cancelled.";
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    id v8 = +[NSError errorWithDomain:NSCocoaErrorDomain code:3072 userInfo:v10];
  }
  if (v8)
  {
LABEL_8:
    id v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v27 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Error pinning asset pack: %{public}@", buf, 0xCu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v13 = +[ODRPublicErrorMapping publicErrorForError:v8];
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v13);

    goto LABEL_21;
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
  if (a2 >= 1)
  {
    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = sub_100297AC0(*(void **)(a1 + 56));
    sub_10029C80C(v14, v15);

    long long v16 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      long long v23 = sub_100297AC0(*(void **)(a1 + 56));
      *(_DWORD *)long long buf = 138543618;
      id v27 = v7;
      __int16 v28 = 2114;
      long long v29 = v23;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Creating Result [%{public}@] [%{public}@]", buf, 0x16u);
    }
    if (v7)
    {
      uint64_t v24 = _NSODRURLKey;
      id v25 = v7;
      uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
      uint64_t v18 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
      id v19 = sub_100297AC0(*(void **)(a1 + 56));
      [v18 setObject:v17 forKey:v19];
    }
  }
  id v20 = *(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
  if (v20 == [*(id *)(a1 + 64) count])
  {
    uint64_t v21 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      long long v22 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
      *(_DWORD *)long long buf = 138543618;
      id v27 = v22;
      __int16 v28 = 2114;
      long long v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Calling the completion handler. Result [%{public}@] Error [%{public}@]", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  id v8 = 0;
LABEL_21:
  [*(id *)(a1 + 32) unlock];
}

void sub_10029C80C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = *(void **)(a1 + 8);
    id v4 = a2;
    uint64_t v5 = [v3 objectForKeyedSubscript:v4];
    if (v5) {
      id v6 = (_UNKNOWN **)v5;
    }
    else {
      id v6 = &off_10054BFA0;
    }
    +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 intValue] + 1);
    id v7 = (id)objc_claimAutoreleasedReturnValue();

    [*(id *)(a1 + 8) setObject:v7 forKeyedSubscript:v4];
  }
}

void sub_10029CC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10029CC4C(uint64_t a1, unint64_t a2)
{
  id v54 = objc_opt_new();
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v58 = (uint64_t *)a1;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v68 objects:v86 count:16];
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)v69;
  while (2)
  {
    for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v69 != v6) {
        objc_enumerationMutation(v4);
      }
      id v8 = *(void **)(*((void *)&v68 + 1) + 8 * i);
      uint64_t v9 = sub_100297EDC(v8);
      uint64_t v10 = (uint64_t)[v9 integerValue];

      if (v10 > a2)
      {
        uint64_t v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = sub_100297AC0(v8);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Asset Pack [%{public}@] is on the device but due to space constraint it can not be pinned, not doing any conditional pinning.", buf, 0xCu);
        }
        goto LABEL_17;
      }
      unsigned __int8 v11 = sub_100298654(v8);
      uint64_t v12 = ASDLogHandleForCategory();
      uint64_t v13 = v12;
      if ((v11 & 1) == 0)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = sub_100297AC0(v8);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Asset Pack [%{public}@] is NOT on the device, not doing any conditional pinning.", buf, 0xCu);
        }
LABEL_17:

        *(unsigned char *)(*(void *)(v58[6] + 8) + 24) = 1;
        goto LABEL_18;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = sub_100297AC0(v8);
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Asset Pack [%{public}@] is on the device.", buf, 0xCu);
      }
      [v54 addObject:v8];
      a2 -= v10 & ~(v10 >> 63);
    }
    id v5 = [v4 countByEnumeratingWithState:&v68 objects:v86 count:16];
    if (v5) {
      continue;
    }
    break;
  }
LABEL_18:

  uint64_t v17 = v58;
  if (*(unsigned char *)(*(void *)(v58[6] + 8) + 24))
  {
    uint64_t v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "A required asset pack is not available locally. Not continuing with the conditionally pin.", buf, 2u);
    }

    uint64_t v17 = v58;
    char v19 = *(unsigned char *)(*(void *)(v58[6] + 8) + 24) ^ 1;
  }
  else
  {
    char v19 = 1;
  }
  *(unsigned char *)(*(void *)(v17[7] + 8) + 24) = v19;
  uint64_t v20 = objc_opt_new();
  uint64_t v21 = *(void *)(v58[8] + 8);
  long long v22 = *(void **)(v21 + 40);
  *(void *)(v21 + 40) = v20;

  if (!*(unsigned char *)(*(void *)(v17[7] + 8) + 24)) {
    goto LABEL_57;
  }
  long long v66 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  id obj = v54;
  id v23 = [obj countByEnumeratingWithState:&v64 objects:v85 count:16];
  if (!v23) {
    goto LABEL_45;
  }
  uint64_t v24 = *(void *)v65;
  uint64_t v56 = _NSODRURLKey;
  uint64_t v53 = _NSODRSandboxExtensionKey;
  while (2)
  {
    uint64_t v25 = 0;
    while (2)
    {
      if (*(void *)v65 != v24) {
        objc_enumerationMutation(obj);
      }
      long long v26 = *(void **)(*((void *)&v64 + 1) + 8 * v25);
      uint64_t v27 = (uint64_t)sub_100297DCC(v26);
      __int16 v28 = sub_100297D1C(v26);
      long long v29 = v28;
      if (v27)
      {
        if (v27 >= 1)
        {
          uint64_t v81 = v56;
          id v82 = v28;
          NSErrorUserInfoKey v30 = +[NSDictionary dictionaryWithObjects:&v82 forKeys:&v81 count:1];
          CFStringRef v31 = *(void **)(*(void *)(v58[8] + 8) + 40);
          uint64_t v32 = sub_100297AC0(v26);
          [v31 setObject:v30 forKey:v32];
          goto LABEL_38;
        }
      }
      else
      {
        id v33 = v28;
        id v34 = [v33 fileSystemRepresentation];
        id v35 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v40 = sub_100297AC0(v26);
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v40;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v34;
          _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "AssetPack will be newly pinned, attempting to get sandbox extension. [BundleID: %{public}@ Path: %{public}s]", buf, 0x16u);
        }
        NSErrorUserInfoKey v30 = sub_10029D528(v58[5]);
        id v36 = ASDLogHandleForCategory();
        uint64_t v37 = v36;
        if (!v30)
        {
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v34;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Unable to get sandbox token for path [%{public}s]", buf, 0xCu);
          }

          *(unsigned char *)(*(void *)(v58[6] + 8) + 24) = 1;
          uint64_t v41 = *(void *)(v58[8] + 8);
          uint64_t v42 = *(void **)(v41 + 40);
          *(void *)(v41 + 40) = 0;

          goto LABEL_45;
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v34;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Got a sandbox token for url [%{public}s]", buf, 0xCu);
        }

        v83[0] = v56;
        v83[1] = v53;
        v84[0] = v33;
        v84[1] = v30;
        uint64_t v32 = +[NSDictionary dictionaryWithObjects:v84 forKeys:v83 count:2];
        uint64_t v38 = *(void **)(*(void *)(v58[8] + 8) + 40);
        __int16 v39 = sub_100297AC0(v26);
        [v38 setObject:v32 forKey:v39];

LABEL_38:
      }

      if (v23 != (id)++v25) {
        continue;
      }
      break;
    }
    id v23 = [obj countByEnumeratingWithState:&v64 objects:v85 count:16];
    if (v23) {
      continue;
    }
    break;
  }
LABEL_45:

  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v57 = obj;
  id v43 = [v57 countByEnumeratingWithState:&v60 objects:v80 count:16];
  if (v43)
  {
    uint64_t v44 = *(void *)v61;
    do
    {
      for (j = 0; j != v43; j = (char *)j + 1)
      {
        if (*(void *)v61 != v44) {
          objc_enumerationMutation(v57);
        }
        id v46 = *(void **)(*((void *)&v60 + 1) + 8 * (void)j);
        uint64_t v47 = (char *)sub_100297DCC(v46);
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x2020000000;
        char v79 = 0;
        unint64_t v48 = sub_1002393C4();
        v59[0] = _NSConcreteStackBlock;
        v59[1] = 3221225472;
        v59[2] = sub_10029D5BC;
        v59[3] = &unk_1005252A0;
        void v59[5] = buf;
        v59[6] = v47 + 1;
        v59[4] = v46;
        [v48 modifyUsingTransaction:v59];

        id v49 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          id v52 = sub_100297AC0(v46);
          *(_DWORD *)char v72 = 138543874;
          id v73 = v52;
          __int16 v74 = 2048;
          id v75 = v47;
          __int16 v76 = 2048;
          uint64_t v77 = v47 + 1;
          _os_log_debug_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "AssetPack [%{public}@] pin count is going from [%lld] to [%lld]", v72, 0x20u);
        }
        if (*(unsigned char *)(*(void *)&buf[8] + 24))
        {
          uint64_t v50 = v58[5];
          id v51 = sub_100297AC0(v46);
          sub_10029C80C(v50, v51);
        }
        _Block_object_dispose(buf, 8);
      }
      id v43 = [v57 countByEnumeratingWithState:&v60 objects:v80 count:16];
    }
    while (v43);
  }

LABEL_57:
}

void sub_10029D500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

id sub_10029D528(uint64_t a1)
{
  if (a1)
  {
    long long v4 = *(_OWORD *)(a1 + 28);
    long long v5 = *(_OWORD *)(a1 + 44);
    uint64_t v1 = (void *)sandbox_extension_issue_file_to_process();
    if (v1)
    {
      uint64_t v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1, v4, v5);
    }
    else
    {
      uint64_t v2 = 0;
    }
    free(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

uint64_t sub_10029D5BC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = a2;
  sub_1002980C4(v3, v4);
  LOBYTE(v3) = sub_100249F50(v5, *(void **)(a1 + 32));

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)v3;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_10029D7A0(uint64_t a1)
{
  uint64_t v2 = sub_10029C2F0(*(id *)(a1 + 32), *(void **)(a1 + 40));
  id v3 = [v2 count];
  uint64_t v4 = ASDLogHandleForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      id v6 = [v2 count];
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 134218498;
      id v24 = v6;
      __int16 v25 = 2114;
      uint64_t v26 = v7;
      __int16 v27 = 2048;
      uint64_t v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lu asset packs for tags %{public}@, set the loading priority to %f", buf, 0x20u);
    }

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v4 = v2;
    id v9 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v4);
          }
          uint64_t v13 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v14 = sub_10040EBA8();
          uint64_t v15 = sub_100413A2C((uint64_t)v14, v13);

          if (v15) {
            v15[22] = *(void *)(a1 + 48);
          }
        }
        id v10 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v10);
    }
  }
  else if (v5)
  {
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138543618;
    id v24 = v16;
    __int16 v25 = 2048;
    uint64_t v26 = v17;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No asset packs found for tags %{public}@ when asked to set the loading priority to %f", buf, 0x16u);
  }
}

void sub_10029DC14(uint64_t a1)
{
  if (sub_10029BF20(*(void *)(a1 + 32), *(void **)(a1 + 40)))
  {
    v44[0] = 0;
    v44[1] = v44;
    v44[2] = 0x3032000000;
    v44[3] = sub_100018078;
    void v44[4] = sub_100017BF8;
    id v45 = (id)objc_opt_new();
    sub_10029C2F0(*(id *)(a1 + 32), *(void **)(a1 + 40));
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v1 = [obj countByEnumeratingWithState:&v40 objects:v46 count:16];
    if (!v1) {
      goto LABEL_32;
    }
    uint64_t v33 = *(void *)v41;
    while (1)
    {
      id v34 = v1;
      for (uint64_t i = 0; i != v34; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v41 != v33) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        if ((uint64_t)sub_100297DCC(v3) >= 1)
        {
          uint64_t v4 = *(void *)(a1 + 32);
          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472;
          id v36 = sub_10029E328;
          uint64_t v37 = &unk_1005252F0;
          uint64_t v38 = v3;
          __int16 v39 = v44;
          id v5 = v3;
          id v6 = v35;
          if (v4)
          {
            if (*(void *)(v4 + 72))
            {
              uint64_t v7 = (uint64_t)sub_100297DCC(v5);
              if (v7 >= 1)
              {
                *(void *)long long buf = 0;
                *(void *)&uint8_t buf[8] = buf;
                *(void *)&uint8_t buf[16] = 0x2020000000;
                char v61 = 0;
                uint64_t v8 = sub_1002393C4();
                *(void *)id v55 = _NSConcreteStackBlock;
                *(void *)&v55[8] = 3221225472;
                *(void *)&v55[16] = sub_10029F720;
                uint64_t v56 = &unk_1005252A0;
                id v9 = v5;
                id v57 = v9;
                id v58 = buf;
                uint64_t v59 = v7;
                [v8 modifyUsingTransaction:v55];

                if (*(unsigned char *)(*(void *)&buf[8] + 24))
                {
                  sub_100297AC0(v9);
                  id v10 = (id)objc_claimAutoreleasedReturnValue();
                  uint64_t v11 = [*(id *)(v4 + 8) objectForKeyedSubscript:v10];
                  uint64_t v12 = v11;
                  if (v11)
                  {
                    int v13 = [v11 intValue];
                    if (v13 <= 1) {
                      int v14 = 1;
                    }
                    else {
                      int v14 = v13;
                    }
                    uint64_t v15 = +[NSNumber numberWithInt:(v14 - 1)];

                    [*(id *)(v4 + 8) setObject:v15 forKeyedSubscript:v10];
                  }
                }
                id v16 = sub_100297DCC(v9);
                uint64_t v17 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                {
                  long long v22 = sub_100297AC0(v9);
                  *(_DWORD *)id v49 = 134218498;
                  uint64_t v50 = v7;
                  __int16 v51 = 2048;
                  id v52 = v16;
                  __int16 v53 = 2114;
                  id v54 = v22;
                  _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Changed Pin Count from %lld to %lld for asset pack %{public}@", v49, 0x20u);
                }
                v36((uint64_t)v6, (uint64_t)v16);

                _Block_object_dispose(buf, 8);
                goto LABEL_29;
              }
              long long v19 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                id v23 = sub_100297AC0(v5);
                *(_DWORD *)long long buf = 138543618;
                *(void *)&uint8_t buf[4] = v23;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v7;
                _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Pin count for asset pack with ID: %{public}@ was %lld when trying to unpin", buf, 0x16u);
              }
            }
            else
            {
              long long v19 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Unable to unpin asset pack.  We cannot determine the calling app's bundleID.", buf, 2u);
              }
            }

            v36((uint64_t)v6, -1);
          }
LABEL_29:

          continue;
        }
        long long v18 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          long long v20 = sub_100297AC0(v3);
          uint64_t v21 = *(void *)(a1 + 40);
          *(_DWORD *)id v55 = 138543618;
          *(void *)&v55[4] = v20;
          *(_WORD *)&v55[12] = 2114;
          *(void *)&v55[14] = v21;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Asset pack %{public}@ was not pinned when unpinning tags %{public}@", v55, 0x16u);
        }
      }
      id v1 = [obj countByEnumeratingWithState:&v40 objects:v46 count:16];
      if (!v1)
      {
LABEL_32:

        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        _Block_object_dispose(v44, 8);

        return;
      }
    }
  }
  id v24 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    uint64_t v29 = *(void *)(a1 + 40);
    uint64_t v30 = *(void *)(a1 + 48);
    *(_DWORD *)id v55 = 138543618;
    *(void *)&v55[4] = v29;
    *(_WORD *)&v55[12] = 2114;
    *(void *)&v55[14] = v30;
    _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Unpin tags failed for invalid tag in set [%{public}@], bundleURL: %{public}@", v55, 0x16u);
  }

  __int16 v25 = +[NSString stringWithFormat:@"Request could not be completed.  Invalid tag in set '%@.'", *(void *)(a1 + 40)];
  NSErrorUserInfoKey v47 = NSLocalizedFailureReasonErrorKey;
  unint64_t v48 = v25;
  uint64_t v26 = +[NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v28 = +[NSError errorWithDomain:NSCocoaErrorDomain code:4994 userInfo:v26];
  (*(void (**)(uint64_t, void, void *))(v27 + 16))(v27, 0, v28);
}

void sub_10029E2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_10029E328(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = sub_100297D1C(*(void **)(a1 + 32));
    uint64_t v4 = (void *)v3;
    if (v3)
    {
      uint64_t v9 = _NSODRURLKey;
      uint64_t v10 = v3;
      id v5 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
      id v6 = *(void **)(a1 + 32);
      uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      uint64_t v8 = sub_100297AC0(v6);
      [v7 setObject:v5 forKeyedSubscript:v8];
    }
  }
}

void sub_10029E560(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v11;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(a1 + 40);
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * (void)v5);
        if (v6)
        {
          uint64_t v8 = sub_1002393C4();
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3221225472;
          v14[2] = sub_10029F138;
          void v14[3] = &unk_100521360;
          id v15 = v7;
          [v8 modifyUsingTransaction:v14];
        }
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v3);
  }
}

uint64_t sub_10029E864(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = *(id *)(a1 + 32);
  id v34 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
  if (v34)
  {
    uint64_t v33 = *(void *)v48;
    *(void *)&long long v4 = 138543618;
    long long v31 = v4;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v48 != v33) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v47 + 1) + 8 * v5);
        id v7 = sub_1001F9544(v3, v6, *(void *)(*(void *)(a1 + 40) + 72));
        id v35 = v7;
        uint64_t v36 = v5;
        if (v7)
        {
          uint64_t v8 = v7;
          sub_1002EC544(v7);
          sub_1002497B4((uint64_t)v3, v8);
        }
        else
        {
          uint64_t v9 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 72);
            *(_DWORD *)long long buf = v31;
            id v54 = v6;
            __int16 v55 = 2114;
            uint64_t v56 = v29;
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "No tag found in database for \"%{public}@\" for bundle ID \"%{public}@\".", buf, 0x16u);
          }
        }
        long long v10 = +[NSSet setWithObject:](NSSet, "setWithObject:", v6, v31);
        long long v11 = sub_1001F8468(v3, v10, *(void *)(*(void *)(a1 + 40) + 16));

        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        id v38 = v11;
        id v12 = [v38 countByEnumeratingWithState:&v43 objects:v52 count:16];
        if (v12)
        {
          id v13 = v12;
          uint64_t v14 = *(void *)v44;
          do
          {
            id v15 = 0;
            id v37 = v13;
            do
            {
              if (*(void *)v44 != v14) {
                objc_enumerationMutation(v38);
              }
              id v16 = *(void **)(*((void *)&v43 + 1) + 8 * (void)v15);
              double v17 = *(double *)(a1 + 48);
              if (v17 <= sub_100297BE8(v16))
              {
                long long v18 = sub_100297AC0(v16);
                id v19 = v3;
                long long v20 = sub_1001F94D4(v3, (uint64_t)v18);

                uint64_t v21 = a1;
                double v22 = *(double *)(a1 + 48);
                long long v39 = 0u;
                long long v40 = 0u;
                long long v41 = 0u;
                long long v42 = 0u;
                id v23 = v20;
                id v24 = [v23 countByEnumeratingWithState:&v39 objects:v51 count:16];
                if (v24)
                {
                  id v25 = v24;
                  uint64_t v26 = *(void *)v40;
                  do
                  {
                    for (uint64_t i = 0; i != v25; uint64_t i = (char *)i + 1)
                    {
                      if (*(void *)v40 != v26) {
                        objc_enumerationMutation(v23);
                      }
                      uint64_t v28 = *(void **)(*((void *)&v39 + 1) + 8 * i);
                      if (sub_1002EC480(v28) > v22) {
                        double v22 = sub_1002EC480(v28);
                      }
                    }
                    id v25 = [v23 countByEnumeratingWithState:&v39 objects:v51 count:16];
                  }
                  while (v25);
                }

                sub_100297FF0(v16);
                id v3 = v19;
                a1 = v21;
                id v13 = v37;
              }
              else
              {
                sub_100297FF0(v16);
              }
              sub_100249F50(v3, v16);
              id v15 = (char *)v15 + 1;
            }
            while (v15 != v13);
            id v13 = [v38 countByEnumeratingWithState:&v43 objects:v52 count:16];
          }
          while (v13);
        }

        uint64_t v5 = v36 + 1;
      }
      while ((id)(v36 + 1) != v34);
      id v34 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
    }
    while (v34);
  }

  return 1;
}

uint64_t sub_10029EDA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = *(id *)(a1 + 32);
  id v27 = [obj countByEnumeratingWithState:&v39 objects:v45 count:16];
  if (v27)
  {
    uint64_t v26 = *(void *)v40;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v40 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v29 = v4;
        uint64_t v5 = sub_1001F9544(v3, *(void **)(*((void *)&v39 + 1) + 8 * v4), *(void *)(*(void *)(a1 + 40) + 72));
        sub_1002EC4D4(v5, *(unsigned __int8 *)(a1 + 48));
        sub_1002497B4((uint64_t)v3, v5);
        uint64_t v28 = v5;
        uint64_t v6 = sub_1002EC448(v5);
        id v7 = +[NSSet setWithObject:v6];
        uint64_t v8 = sub_1001F8468(v3, v7, *(void *)(*(void *)(a1 + 40) + 16));

        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        id v9 = v8;
        id v10 = [v9 countByEnumeratingWithState:&v35 objects:v44 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v36;
          uint64_t v30 = *(void *)v36;
          do
          {
            for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v36 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void **)(*((void *)&v35 + 1) + 8 * i);
              if (*(unsigned char *)(a1 + 48))
              {
                uint64_t v15 = 1;
              }
              else
              {
                id v16 = sub_100297AC0(*(void **)(*((void *)&v35 + 1) + 8 * i));
                double v17 = sub_1001F94D4(v3, (uint64_t)v16);

                long long v33 = 0u;
                long long v34 = 0u;
                long long v31 = 0u;
                long long v32 = 0u;
                id v18 = v17;
                uint64_t v15 = (uint64_t)[v18 countByEnumeratingWithState:&v31 objects:v43 count:16];
                if (v15)
                {
                  id v19 = v3;
                  uint64_t v20 = a1;
                  id v21 = v9;
                  uint64_t v22 = *(void *)v32;
                  while (2)
                  {
                    for (uint64_t j = 0; j != v15; ++j)
                    {
                      if (*(void *)v32 != v22) {
                        objc_enumerationMutation(v18);
                      }
                      if (sub_1002EC400(*(id *)(*((void *)&v31 + 1) + 8 * j)))
                      {
                        uint64_t v15 = 1;
                        goto LABEL_23;
                      }
                    }
                    uint64_t v15 = (uint64_t)[v18 countByEnumeratingWithState:&v31 objects:v43 count:16];
                    if (v15) {
                      continue;
                    }
                    break;
                  }
LABEL_23:
                  id v9 = v21;
                  a1 = v20;
                  id v3 = v19;
                  uint64_t v12 = v30;
                }
              }
              sub_100297F80(v14, v15);
              sub_100249F50(v3, v14);
            }
            id v11 = [v9 countByEnumeratingWithState:&v35 objects:v44 count:16];
          }
          while (v11);
        }

        uint64_t v4 = v29 + 1;
      }
      while ((id)(v29 + 1) != v27);
      id v27 = [obj countByEnumeratingWithState:&v39 objects:v45 count:16];
    }
    while (v27);
  }

  return 1;
}

void sub_10029F0E0(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1001F8468(a2, *(void **)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 16));
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

BOOL sub_10029F138(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001F82E8(v3, *(void *)(a1 + 32));
  id v5 = sub_100297DCC(v4);
  if (v5)
  {
    id v6 = v5;
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v11 = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 2048;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "The asset pack we were cleared to purge [%{public}@] has a pin count [%lld]. AssetPack will not be marked as purgeable.", (uint8_t *)&v11, 0x16u);
    }
  }
  else if ((sub_100297E4C(v4) & 1) == 0)
  {
    sub_100298178(v4, 1);
  }
  BOOL v9 = sub_100249F50(v3, v4);

  return v9;
}

void sub_10029F25C(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  sub_1001F82E8(v4, v3);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = sub_1001F8948(v4, *(void **)(a1[5] + 16));

  if (v13)
  {
    id Property = (id)a1[6];
    uint64_t v8 = *(void **)(a1[5] + 16);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 32, 1);
    }
    id v9 = Property;
    uint64_t v10 = sub_10030D834((uint64_t)ODRAssetDownloadRequest, v13, v5, v8, v9);
    uint64_t v11 = *(void *)(a1[7] + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
}

void sub_10029F348(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2114;
    id v11 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error downloading asset %{public}@: %{public}@", (uint8_t *)&v8, 0x16u);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = +[ODRPublicErrorMapping publicErrorForError:v3];
  (*(void (**)(uint64_t, uint64_t, void, void *))(v5 + 16))(v5, -1, 0, v6);
}

void sub_10029F454(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id Property = a2;
  uint64_t v5 = Property;
  if (Property)
  {
    uint64_t v6 = Property[2];
    id Property = objc_getProperty(Property, v4, 8, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = Property;

  (*(void (**)(uint64_t, uint64_t, void *, void))(v2 + 16))(v2, v6, v7, 0);
}

uint64_t sub_10029F4E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10029F5D4;
  v8[3] = &unk_1005253E0;
  id v5 = v3;
  id v9 = v5;
  __int16 v10 = &v11;
  [v4 enumerateKeysAndObjectsUsingBlock:v8];
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_10029F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10029F5D4(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  if (v5 && (int)[v5 intValue] >= 1)
  {
    uint64_t v7 = sub_1001F82E8(*(id *)(a1 + 32), (uint64_t)v14);
    int v8 = v7;
    if (v7)
    {
      id v9 = sub_100297DCC(v7);
      signed int v10 = [v6 intValue];
      sub_1002980C4(v8, ((uint64_t)v9 - v10) & ~(((uint64_t)v9 - v10) >> 63));
      BOOL v11 = sub_100249F50(*(void **)(a1 + 32), v8);
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
      BOOL v13 = v11 || *(unsigned char *)(v12 + 24) != 0;
      *(unsigned char *)(v12 + 24) = v13;
    }
  }
}

BOOL sub_10029F6B4(uint64_t a1, BOOL a2)
{
  return sub_100249D54(a2, *(void **)(*(void *)(a1 + 32) + 16));
}

void sub_10029F6C8(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1001F9084(a2, *(void *)(*(void *)(a1 + 32) + 16));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_10029F720(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48) - 1;
  id v5 = a2;
  sub_1002980C4(v3, v4);
  LOBYTE(v3) = sub_100249F50(v5, *(void **)(a1 + 32));

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)v3;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

id sub_10029F878(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = objc_opt_new();
  id v5 = [v2 softwareVersionBundleID];
  if (v3) {
    objc_setProperty_atomic_copy((id)v3, v4, v5, 24);
  }

  uint64_t v6 = [v2 bundleVersion];
  int v8 = v6;
  if (v3)
  {
    objc_setProperty_atomic_copy((id)v3, v7, v6, 32);

    *(unsigned char *)(v3 + 1_Block_object_dispose(&a9, 8) = [v2 deviceBasedVPP];
    id v9 = [v2 itemID];
    objc_setProperty_atomic_copy((id)v3, v10, v9, 56);
  }
  else
  {

    [v2 deviceBasedVPP];
    id v9 = [v2 itemID];
  }

  uint64_t v12 = [v2 bundleShortVersionString];
  if (v3) {
    objc_setProperty_atomic_copy((id)v3, v11, v12, 88);
  }

  id v14 = [v2 variantID];
  if (v3) {
    objc_setProperty_atomic_copy((id)v3, v13, v14, 96);
  }

  uint64_t v15 = [v2 betaExternalVersionIdentifier];
  id v16 = v15;
  if (v15 && [v15 integerValue])
  {
    if (!v3) {
      goto LABEL_23;
    }
    *(unsigned char *)(v3 + 17) = 1;
  }
  else
  {
    uint64_t v18 = [v2 softwareVersionExternalIdentifier];

    id v16 = (void *)v18;
    if (!v3) {
      goto LABEL_23;
    }
  }
  objc_setProperty_atomic_copy((id)v3, v17, v16, 48);
  id v19 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:*(void *)(v3 + 24) allowPlaceholder:1 error:0];
  uint64_t v20 = v19;
  if (v19)
  {
    if (*(unsigned char *)(v3 + 19))
    {
      id v21 = [v19 installType];
      uint64_t v22 = 3;
      if (v21 != (id)2) {
        uint64_t v22 = 1;
      }
    }
    else
    {
      unsigned int v23 = [v19 isPlaceholder];
      uint64_t v22 = 2;
      if (v23) {
        uint64_t v22 = 0;
      }
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)(v3 + 72) = v22;

LABEL_23:
  return (id)v3;
}

void **sub_10029FA90(void **a1)
{
  if (a1)
  {
    id v2 = a1;
    uint64_t v3 = a1[1];
    if (!v3)
    {
      uint64_t v4 = sub_1003B9478([ODRMutableApplication alloc], a1[3]);
      id v5 = v2[1];
      v2[1] = v4;

      uint64_t v6 = [v2[7] stringValue];
      sub_1003BBC48((uint64_t)v2[1], v6);

      sub_1003BBD6C((uint64_t)v2[1], *((unsigned char *)v2 + 17));
      sub_1003BBB00((uint64_t)v2[1], v2[4]);
      sub_1003BBA5C((uint64_t)v2[1], v2[11]);
      uint64_t v7 = [v2[6] stringValue];
      sub_1003BBDEC((uint64_t)v2[1], v7);

      sub_1003BBCEC((uint64_t)v2[1], *((unsigned char *)v2 + 18));
      sub_1003BBBA4((uint64_t)v2[1], v2[12]);
      uint64_t v3 = v2[1];
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

void *sub_10029FC14(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)SQLiteConnectionOptions;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[3];
      a1[3] = v4;

      a1[2] = -64;
    }
  }

  return a1;
}

id sub_10029FD74()
{
  self;
  v2[0] = @"account_id";
  v2[1] = @"alt_dsid";
  v2[2] = @"apple_id";
  v2[3] = @"active_end_time";
  v2[4] = @"active_start_time";
  v2[5] = @"event_type";
  v2[6] = @"timestamp";
  id v0 = +[NSArray arrayWithObjects:v2 count:7];
  return v0;
}

id sub_10029FE3C(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      a1 = [v2 valueForHTTPHeaderField:@"Content-Type"];
    }
    else
    {
      a1 = 0;
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_10029FEA8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return (uint64_t)[v1 statusCode];
    }
    else
    {
      return -1;
    }
  }
  return result;
}

id *sub_10029FF0C(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)RestoreBatchTask;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 6, a2);
    }
  }

  return a1;
}

void sub_1002A108C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id obj = a2;
  id v30 = a3;
  id v7 = a4;
  if (a1)
  {
    uint64_t v8 = a1;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v9 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v32;
      uint64_t v28 = AMSErrorDomain;
      uint64_t v24 = AMSErrorUserInfoKeyServerErrorCode;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v11) {
            objc_enumerationMutation(obj);
          }
          BOOL v13 = *(void **)(*((void *)&v31 + 1) + 8 * i);
          if (*(unsigned char *)(v8 + 57)) {
            goto LABEL_27;
          }
          id v14 = v30;
          uint64_t v15 = [v14 userInfo];
          id v16 = [v15 objectForKeyedSubscript:NSUnderlyingErrorKey];

          double v17 = [v16 domain];
          uint64_t v18 = [v14 domain];
          if (([v17 isEqualToString:NSURLErrorDomain] & 1) != 0
            || ([v17 isEqualToString:kCFErrorDomainCFNetwork] & 1) != 0
            || ([v18 isEqualToString:NSURLErrorDomain] & 1) != 0
            || ([v18 isEqualToString:kCFErrorDomainCFNetwork] & 1) != 0
            || [v18 isEqualToString:v28] && objc_msgSend(v14, "code") == (id)203)
          {
          }
          else
          {
            if (!ASDErrorIsEqual())
            {

LABEL_27:
              sub_1002A22FC((uint64_t)v7, v13, v30);
              continue;
            }
            uint64_t v26 = [v14 userInfo];
            id v25 = [v26 objectForKeyedSubscript:v24];
            id v27 = [v25 integerValue];

            if (v27 != (id)3004) {
              goto LABEL_27;
            }
          }
          id v19 = [[_TtC9appstored6LogKey alloc] initWithAppInstallMemoryEntity:v13];
          uint64_t v20 = [v13 valueForProperty:@"restore_retry_count"];
          uint64_t v21 = (uint64_t)[v20 integerValue];

          if (v21 < 5)
          {
            sub_1002A238C((uint64_t)v7, v13, v14);
            unsigned int v23 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412546;
              long long v36 = v19;
              __int16 v37 = 2048;
              uint64_t v38 = v21;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[%@] Soft failing with %ld attempts", buf, 0x16u);
            }
          }
          else
          {
            uint64_t v22 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412546;
              long long v36 = v19;
              __int16 v37 = 2048;
              uint64_t v38 = v21;
              _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[%@] Hard failing after %ld attempts", buf, 0x16u);
            }

            sub_1002A22FC((uint64_t)v7, v13, v14);
          }
        }
        id v10 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
      }
      while (v10);
    }
  }
}

id sub_1002A14A4(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  self = v5;
  if (!a1) {
    goto LABEL_132;
  }
  v127 = sub_1003F38A8();
  id v126 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v127, "count"));
  long long v140 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  if (v5) {
    id Property = objc_getProperty(v5, v7, 56, 1);
  }
  else {
    id Property = 0;
  }
  id obj = Property;
  id v9 = [obj countByEnumeratingWithState:&v140 objects:v146 count:16];
  if (!v9)
  {
    v129 = 0;
    goto LABEL_108;
  }
  id v11 = v9;
  v129 = 0;
  uint64_t v133 = *(void *)v141;
  uint64_t v132 = (uint64_t)v6;
  do
  {
    uint64_t v12 = 0;
    id v130 = v11;
    do
    {
      if (*(void *)v141 != v133) {
        objc_enumerationMutation(obj);
      }
      BOOL v13 = *(unsigned char **)(*((void *)&v140 + 1) + 8 * (void)v12);
      if (v13) {
        id v14 = objc_getProperty(*(id *)(*((void *)&v140 + 1) + 8 * (void)v12), v10, 208, 1);
      }
      else {
        id v14 = 0;
      }
      id v15 = v14;

      if (v15)
      {
        if (v6) {
          id v17 = objc_getProperty(v6, v16, 24, 1);
        }
        else {
          id v17 = 0;
        }
        id v19 = v17;
        if (v13) {
          id v20 = objc_getProperty(v13, v18, 208, 1);
        }
        else {
          id v20 = 0;
        }
        id v21 = v20;
        uint64_t v22 = [v19 objectForKeyedSubscript:v21];

        if (v13) {
          id v24 = objc_getProperty(v13, v23, 128, 1);
        }
        else {
          id v24 = 0;
        }
        id v25 = v24;
        id v27 = [[_TtC9appstored6LogKey alloc] initWithBase:@"Restore Batch"];
        if (v25)
        {
          if (v13) {
            id v28 = objc_getProperty(v13, v26, 136, 1);
          }
          else {
            id v28 = 0;
          }
          id v29 = v28;
          BOOL v30 = sub_1004005F8((uint64_t)AMSDevice, v25, v29, v27);

          if (v13)
          {
LABEL_22:
            id v31 = objc_getProperty(v13, v26, 32, 1);
            goto LABEL_23;
          }
        }
        else
        {
          BOOL v30 = 1;
          if (v13) {
            goto LABEL_22;
          }
        }
        id v31 = 0;
LABEL_23:
        id v32 = v31;

        id v134 = v25;
        if (v32)
        {
          long long v34 = v27;
          long long v36 = +[AppCapabilitiesService defaultService];
          if (v13)
          {
            id v37 = objc_getProperty(v13, v35, 96, 1);
            id v39 = objc_getProperty(v13, v38, 32, 1);
          }
          else
          {
            id v37 = 0;
            id v39 = 0;
          }
          id v40 = v39;
          id v139 = 0;
          unsigned __int8 v41 = [v36 validateAction:2 bundleID:v37 capabilities:v40 logKey:v34 error:&v139];
          id v42 = v139;

          if (v41)
          {
            id v11 = v130;
            id v27 = v34;
            goto LABEL_33;
          }
          sub_1002A22FC(v132, (void *)v22, v42);
          id v11 = v130;
          id v27 = v34;
          id v6 = (id)v132;
          if (!v22)
          {
LABEL_95:
            v104 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
            {
              if (v13) {
                id v106 = objc_getProperty(v13, v105, 208, 1);
              }
              else {
                id v106 = 0;
              }
              id v107 = v106;
              LODWORD(buf) = 138543362;
              *(void *)((char *)&buf + 4) = v107;
              _os_log_error_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "Skipping post processing of failed itemID: %{public}@ due to missing mapped item", (uint8_t *)&buf, 0xCu);
            }
          }
          goto LABEL_97;
        }
        id v42 = 0;
LABEL_33:
        id v6 = (id)v132;
        if (v30)
        {
          if (v13)
          {
            if (v13[19])
            {
              if (v22 && (*(unsigned char *)(v22 + 56) & 1) != 0)
              {
                id v90 = ASDErrorWithTitleAndMessage();
                sub_1002A22FC(v132, (void *)v22, v90);
              }
              else
              {
                uint64_t v89 = v129;
                if (!v129) {
                  uint64_t v89 = objc_opt_new();
                }
                v129 = v89;
                if (v22) {
                  *(unsigned char *)(v22 + 56) = 1;
                }
                [v89 addObject:v22];
                if (!v22) {
                  goto LABEL_95;
                }
              }
LABEL_97:

              goto LABEL_98;
            }
            id v43 = objc_getProperty(v13, v33, 72, 1);
          }
          else
          {
            id v43 = 0;
          }
          id v44 = v43;

          if (v44)
          {
            long long v46 = v27;
            if (v13 && (id v47 = objc_getProperty(v13, v45, 72, 1)) != 0)
            {
              long long v49 = v47;
              id v50 = objc_getProperty(v47, v48, 144, 1);
              if (v50)
              {
                id v52 = v50;
                id v53 = objc_getProperty(v13, v51, 72, 1);
                __int16 v55 = v53;
                if (v53) {
                  id v53 = objc_getProperty(v53, v54, 144, 1);
                }
                id v56 = v53;
                id v57 = [v56 length];

                id v27 = v46;
                if (v57)
                {
                  if (!v22)
                  {
                    id v11 = v130;
                    id v6 = (id)v132;
                    goto LABEL_95;
                  }
                  if (*(unsigned char *)(v22 + 56))
                  {
                    id v59 = objc_getProperty(v13, v58, 96, 1);
                    long long v60 = [v127 objectForKeyedSubscript:v59];
                    id v61 = [v60 longLongValue];
                    id v63 = objc_getProperty(v13, v62, 144, 1);
                    id v64 = [v63 longLongValue];

                    BOOL v65 = (uint64_t)v61 < (uint64_t)v64;
                    id v27 = v46;
                    if (!v65)
                    {
                      __int16 v95 = ASDErrorWithTitleAndMessage();
                      id v6 = (id)v132;
                      sub_1002A22FC(v132, (void *)v22, v95);

                      id v97 = objc_getProperty(v13, v96, 96, 1);
                      [v126 addObject:v97];

                      id v11 = v130;
                      goto LABEL_97;
                    }
                  }
                  long long v66 = (id)v22;
                  long long v67 = v13;
                  id v11 = v130;
                  if (v132)
                  {
                    long long v68 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                    {
                      long long v69 = sub_100424C14(v66);
                      LODWORD(buf) = 138412290;
                      *(void *)((char *)&buf + 4) = v69;
                      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "[%@] Content lookup succeeded", (uint8_t *)&buf, 0xCu);
                    }
                    [v66 setValue:&off_10054C000 forProperty:@"bootstrapped"];
                    [v66 setValue:&off_10054C018 forProperty:@"restore_state"];
                    [v66 setValue:&off_10054C030 forProperty:@"phase"];
                    v128 = v67;
                    if (v66[7])
                    {
                      unsigned __int8 v71 = sub_10026E91C(v66, @"metrics_install_type");
                      char v72 = sub_10026E82C(v66, @"evid");
                      id v73 = v72;
                      if (v71 != 15)
                      {
                        id v74 = [v72 longLongValue];
                        id v76 = objc_getProperty(v67, v75, 144, 1);
                        id v77 = [v76 longLongValue];

                        long long v67 = v128;
                        if ((uint64_t)v74 < (uint64_t)v77) {
                          [v66 setValue:&off_10054C048 forProperty:@"metrics_install_type"];
                        }
                      }
                    }
                    id v78 = objc_getProperty(v67, v70, 72, 1);
                    *(void *)&long long buf = v78;
                    char v79 = +[NSArray arrayWithObjects:&buf count:1];
                    sub_10042411C(v66, v67, v79);

                    id v81 = objc_getProperty(v67, v80, 200, 1);
                    if (v81)
                    {
                      id v83 = objc_getProperty(v67, v82, 200, 1);
                      [v66 setValue:v83 forProperty:@"install_verification_token"];
                    }
                    NSErrorUserInfoKey v84 = sub_100400EF8((uint64_t)MIStoreMetadata, v67);
                    sub_100401854(v84, *(void **)(v132 + 8));
                    id v144 = 0;
                    long long v85 = sub_10040163C((uint64_t)v84, &v144);
                    id v86 = v144;
                    if (v86)
                    {
                      sub_1003B8168(v66, v86);
                      uint64_t v87 = 16;
                      goto LABEL_77;
                    }
                    uint64_t v91 = v132;
                    if (v85)
                    {
                      [v66 setValue:v85 forProperty:@"store_metadata"];
                      uint64_t v92 = +[NSNull null];
                      [v66 setValue:v92 forProperty:@"failure_error"];

                      uint64_t v87 = 48;
LABEL_77:
                      uint64_t v91 = v132;
                      [*(id *)(v132 + v87) addObject:v66];
                    }
                    id v93 = *(void **)(v91 + 32);
                    v94 = sub_100424E64(v66);
                    [v93 removeObject:v94];

                    id v11 = v130;
                    id v27 = v46;
                    long long v67 = v128;
                  }

                  id v6 = (id)v132;
                  goto LABEL_97;
                }
LABEL_89:
                id v98 = ASDErrorWithTitleAndMessage();
                id v6 = (id)v132;
                sub_1002A238C(v132, (void *)v22, v98);

                self;
                if (os_variant_has_internal_content())
                {
                  id v99 = v27;
                  id v100 = v13;
                  id v101 = sub_1002F8BC0((id *)[PresentTapToRadarRequestFlow alloc], @"Missing Required SINF", @"An unexpected installation failure occurred.");
                  *(void *)&long long buf = _NSConcreteStackBlock;
                  *((void *)&buf + 1) = 3221225472;
                  id v148 = sub_1002A241C;
                  uint64_t v149 = &unk_100523B88;
                  id v103 = v100;
                  id v150 = v103;
                  id v11 = v130;
                  if (v101) {
                    objc_setProperty_atomic_copy(v101, v102, &buf, 24);
                  }
                  sub_1002F8C78((uint64_t)v101);

                  id v27 = v99;
                  id v6 = (id)v132;
                  if (!v22) {
                    goto LABEL_95;
                  }
                }
                else
                {
                  id v11 = v130;
                  if (!v22) {
                    goto LABEL_95;
                  }
                }
                goto LABEL_97;
              }
            }
            else
            {
              long long v49 = 0;
            }

            goto LABEL_89;
          }
          id v88 = ASDErrorWithUserInfoAndFormat();
          sub_1002A238C(v132, (void *)v22, v88);
        }
        else
        {
          id v88 = ASDErrorWithTitleAndMessage();
          sub_1002A22FC(v132, (void *)v22, v88);
        }

        if (!v22) {
          goto LABEL_95;
        }
        goto LABEL_97;
      }
      uint64_t v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v22, OS_LOG_TYPE_ERROR, "Skipping post processing to server item missing missing itemID for item: %{public}@", (uint8_t *)&buf, 0xCu);
      }
LABEL_98:

      uint64_t v12 = (char *)v12 + 1;
    }
    while (v11 != v12);
    id v108 = [obj countByEnumeratingWithState:&v140 objects:v146 count:16];
    id v11 = v108;
  }
  while (v108);
LABEL_108:

  sub_1003F3B58((uint64_t)AppDefaultsManager, v126, 0);
  if (self)
  {
    id v110 = objc_getProperty(self, v109, 64, 1);
    v111 = v110;
    if (v110)
    {
      long long v137 = 0u;
      long long v138 = 0u;
      long long v135 = 0u;
      long long v136 = 0u;
      uint64_t v112 = [v110 keyEnumerator];
      id v113 = [v112 countByEnumeratingWithState:&v135 objects:v145 count:16];
      if (v113)
      {
        id v115 = v113;
        uint64_t v116 = *(void *)v136;
        do
        {
          id v117 = 0;
          do
          {
            if (*(void *)v136 != v116) {
              objc_enumerationMutation(v112);
            }
            uint64_t v118 = *(void *)(*((void *)&v135 + 1) + 8 * (void)v117);
            if (v6) {
              id v119 = objc_getProperty(v6, v114, 24, 1);
            }
            else {
              id v119 = 0;
            }
            v120 = [v119 objectForKeyedSubscript:v118];
            if (v120)
            {
              v121 = [v111 objectForKeyedSubscript:v118];
              if ([v121 code] != (id)3604 || (v120[56] & 1) != 0)
              {
                sub_1002A22FC((uint64_t)v6, v120, v121);
              }
              else
              {
                v120[56] = 1;
                long long v122 = v129;
                if (!v129) {
                  long long v122 = objc_opt_new();
                }
                v129 = v122;
                [v122 addObject:v120];
              }
            }
            else
            {
              v121 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf) = 138543362;
                *(void *)((char *)&buf + 4) = v118;
                _os_log_error_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "Skipping post processing of failed itemID: %{public}@ due to missing mapped install item", (uint8_t *)&buf, 0xCu);
              }
            }

            id v117 = (char *)v117 + 1;
          }
          while (v115 != v117);
          id v123 = [v112 countByEnumeratingWithState:&v135 objects:v145 count:16];
          id v115 = v123;
        }
        while (v123);
      }
    }
  }
  else
  {
    v111 = 0;
  }
  a1 = [v129 copy];

LABEL_132:
  return a1;
}

void sub_1002A22FC(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a2;
    sub_1003B8168(v5, a3);
    [*(id *)(a1 + 16) addObject:v5];
    id v6 = *(void **)(a1 + 32);
    sub_100424E64(v5);
    id v7 = (id)objc_claimAutoreleasedReturnValue();

    [v6 removeObject:v7];
  }
}

void sub_1002A238C(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v7 = a2;
    sub_1003B837C(v7, a3);
    id v5 = *(void **)(a1 + 32);
    id v6 = sub_100424E64(v7);
    [v5 removeObject:v6];

    [*(id *)(a1 + 40) addObject:v7];
  }
}

id sub_1002A241C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 96, 1);
  }
  id v5 = Property;
  id v6 = *(id *)(a1 + 32);
  if (v6) {
    id v6 = objc_getProperty(v6, v4, 208, 1);
  }
  id v8 = v6;
  id v9 = *(id *)(a1 + 32);
  if (v9) {
    id v9 = objc_getProperty(v9, v7, 144, 1);
  }
  id v10 = v9;
  id v11 = +[NSString stringWithFormat:@"\n\nBundle ID: %@\nItem ID: %@\nExternal Version: %@\n", v5, v8, v10];

  return v11;
}

id sub_1002A3068()
{
  self;
  if (qword_1005B0D38 != -1) {
    dispatch_once(&qword_1005B0D38, &stru_100525458);
  }
  id v0 = (void *)qword_1005B0D30;
  return v0;
}

void sub_1002A30C0(id a1)
{
  uint64_t v1 = objc_alloc_init(AppMetricsService);
  id v2 = (void *)qword_1005B0D30;
  qword_1005B0D30 = (uint64_t)v1;
}

void sub_1002A32A0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }
  id v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    int v11 = 138412546;
    uint64_t v12 = v9;
    __int16 v13 = 2114;
    uint64_t v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] getMetricsEventsForType complete for client: %{public}@", (uint8_t *)&v11, 0x16u);
  }
}

uint64_t sub_1002A3518(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A36B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A3848(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002A386C(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = sub_1003923F8(a2, &stru_1005254A8);
    id v4 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v3;
  }
}

id sub_1002A38C4(id a1, NSString *a2)
{
  return [(NSString *)a2 lowercaseString];
}

id *sub_1002A3944(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = (id *)objc_alloc((Class)self);
  id v6 = sub_1002A39AC(v5, v4, a2);

  return v6;
}

id *sub_1002A39AC(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v7 = v6;
  if (a1)
  {
    if (v6)
    {
      v13.receiver = a1;
      v13.super_class = (Class)PurchaseHistoryUpdateCommand;
      a1 = (id *)objc_msgSendSuper2(&v13, "init");
      if (a1)
      {
        uint64_t v8 = +[KeepAlive keepAliveWithName:@"com.apple.appstoredaemon.PurchaseHistoryManager.update"];
        id v9 = a1[3];
        a1[3] = (id)v8;

        uint64_t v10 = sub_10030B11C();
        id v11 = a1[1];
        a1[1] = (id)v10;

        objc_storeStrong(a1 + 5, a2);
        a1[4] = a3;
      }
    }
    else
    {

      a1 = 0;
    }
  }

  return a1;
}

id sub_1002A3A7C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  uint64_t v7 = sub_1002A3944(v6, (void *)4, v5);

  if (v7) {
    objc_setProperty_atomic(v7, v8, v4, 56);
  }

  return v7;
}

void sub_1002A3B04(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (!a1[2])
    {
      uint64_t v4 = sub_1002A3CB4((uint64_t)a1);
      id v5 = (void *)a1[2];
      a1[2] = v4;
    }
    uint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[2];
      uint64_t v8 = a1[5];
      unint64_t v9 = a1[4] - 1;
      if (v9 > 6) {
        CFStringRef v10 = @"default";
      }
      else {
        CFStringRef v10 = off_100525658[v9];
      }
      *(_DWORD *)long long buf = 138413058;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      CFStringRef v19 = v10;
      __int16 v20 = 2114;
      id v21 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Cancelling purchase history reload for accountID: %{public}@ context: %{public}@ error: %{public}@", buf, 0x2Au);
    }

    if (a1[9])
    {
      sub_100307208();
      id v11 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1002A3E54;
      v12[3] = &unk_1005218C0;
      void v12[4] = a1;
      id v13 = v3;
      if (v11) {
        dispatch_async(v11[1], v12);
      }
    }
  }
}

_TtC9appstored6LogKey *sub_1002A3CB4(uint64_t a1)
{
  CFStringRef v1 = @"PC";
  uint64_t v2 = 48;
  switch(*(void *)(a1 + 32))
  {
    case 0:
      id v3 = 0;
      CFStringRef v1 = @"DE";
      goto LABEL_12;
    case 1:
      id v3 = 0;
      CFStringRef v1 = @"PP";
      goto LABEL_12;
    case 2:
      id v3 = 0;
      CFStringRef v1 = @"HS";
      goto LABEL_12;
    case 3:
      id v3 = 0;
      CFStringRef v1 = @"AC";
      goto LABEL_12;
    case 4:
      CFStringRef v1 = @"PN";
      uint64_t v2 = 56;
      goto LABEL_8;
    case 5:
      id v3 = 0;
      CFStringRef v1 = @"PR";
      goto LABEL_12;
    case 6:
LABEL_8:
      uint64_t v4 = [*(id *)(a1 + v2) stringValue];
      id v3 = (void *)v4;
      if (!v4) {
        goto LABEL_12;
      }
      uint64_t v8 = v4;
      id v5 = +[NSArray arrayWithObjects:&v8 count:1];
      break;
    case 7:
      id v3 = 0;
      CFStringRef v1 = @"RD";
      goto LABEL_12;
    default:
      id v3 = 0;
      CFStringRef v1 = &stru_10052E4D8;
LABEL_12:
      id v5 = &__NSArray0__struct;
      break;
  }
  uint64_t v6 = [[_TtC9appstored6LogKey alloc] initWithCode:v1 IDs:v5];

  return v6;
}

uint64_t sub_1002A3E54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 72) + 16))();
}

id sub_1002A3E68(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if (!a1[2])
    {
      uint64_t v7 = sub_1002A3CB4((uint64_t)a1);
      uint64_t v8 = (void *)a1[2];
      a1[2] = v7;
    }
    uint64_t v9 = a1[4];
    CFStringRef v10 = &unk_1004A0000;
    if (v9 == 5)
    {
      sub_1002022EC((uint64_t)Promise, &off_10054C060);
      uint64_t v12 = (Promise *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v9 == 4 && (id v11 = (void *)a1[7]) != 0)
      {
        sub_1002022EC((uint64_t)Promise, v11);
        uint64_t v12 = (Promise *)objc_claimAutoreleasedReturnValue();
        ASDLogHandleForCategory();
        id v13 = (Promise *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(&v13->super, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = a1[2];
          uint64_t v15 = a1[7];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v15;
          _os_log_impl((void *)&_mh_execute_header, &v13->super, OS_LOG_TYPE_DEFAULT, "[%@] Push notification provided server revision: %@", buf, 0x16u);
        }
      }
      else
      {
        id v16 = v5;
        id v17 = v6;
        __int16 v18 = sub_10023B3FC();
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_1002A705C;
        long long v36 = &unk_100525638;
        id v37 = a1;
        id v19 = v16;
        id v38 = v19;
        id v20 = v17;
        id v39 = v20;
        sub_100202278((uint64_t)Promise, v18, buf);
        id v13 = (Promise *)objc_claimAutoreleasedReturnValue();

        CFStringRef v10 = (void *)&unk_1004A0000;
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_1002A688C;
        long long v36 = &unk_1005255E8;
        id v37 = a1;
        id v21 = sub_10023B3FC();
        sub_100202A78(v13, buf, v21);
        uint64_t v12 = (Promise *)objc_claimAutoreleasedReturnValue();
      }
    }
    id v28 = _NSConcreteStackBlock;
    uint64_t v29 = v10[347];
    uint64_t v22 = v29;
    BOOL v30 = sub_1002A4224;
    id v31 = &unk_1005254D0;
    id v32 = a1;
    id v33 = v5;
    id v34 = v6;
    unsigned int v23 = sub_10023B3FC();
    id v24 = sub_100202A78(v12, &v28, v23);

    v27[0] = _NSConcreteStackBlock;
    v27[1] = v22;
    v27[2] = sub_1002A4B5C;
    v27[3] = &unk_1005254F8;
    v27[4] = a1;
    id v25 = sub_100307208();
    sub_10020261C(v24, v27, (uint64_t)v25);
  }
  else
  {
    id v24 = 0;
  }

  return v24;
}

id sub_1002A4224(void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  if (v4[4] != 5)
  {
    CFStringRef v10 = (void *)v4[5];
    id v11 = a1[6];
    id v35 = 0;
    uint64_t v12 = sub_1002A48E4((uint64_t)PurchaseHistoryUpdateCommand, v10, v11, &v35);
    id v13 = v35;
    if (v12)
    {
      id v14 = v12;
      id v15 = v3;
      self;
      if (v15)
      {
        id v16 = [v14 compare:v15];
        id v17 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v15;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v49) = v16 == (id)-1;
          _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "(PurchaseHistory) Local: %@ < Server: %@ => Needs update: %{BOOL}d", buf, 0x1Cu);
        }

        if (v16 == (id)-1) {
          goto LABEL_10;
        }
      }
      else
      {
      }
      unsigned int v23 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        id v24 = a1[4];
        uint64_t v25 = v24[2];
        uint64_t v26 = v24[5];
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v26;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[%@] Setting last reload timestamp for accountID: %{public}@", buf, 0x16u);
      }

      id v27 = (void *)*((void *)a1[4] + 5);
      id v28 = a1[6];
      id v29 = v27;
      id v30 = v28;
      self;
      v42[0] = 0;
      v42[1] = v42;
      id v42[2] = 0x2020000000;
      char v43 = 1;
      uint64_t v36 = 0;
      id v37 = &v36;
      uint64_t v38 = 0x3032000000;
      id v39 = sub_100018088;
      id v40 = sub_100017C00;
      id v41 = 0;
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1002A5948;
      long long v49 = &unk_100525570;
      __int16 v51 = v42;
      id v31 = v29;
      id v50 = v31;
      id v52 = &v36;
      [v30 modifyUsingTransaction:buf];
      if (v37[5])
      {
        id v32 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = v37[5];
          *(_DWORD *)id v44 = 138543618;
          id v45 = v31;
          __int16 v46 = 2114;
          uint64_t v47 = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "(PurchaseHistory) Failed to set last update timestamp for accountID: %{public}@ error: %{public}@", v44, 0x16u);
        }
      }
      _Block_object_dispose(&v36, 8);

      _Block_object_dispose(v42, 8);
      uint64_t v22 = sub_1002022EC((uint64_t)Promise, &__kCFBooleanTrue);
      goto LABEL_21;
    }
LABEL_10:
    __int16 v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = a1[4];
      uint64_t v20 = v19[2];
      uint64_t v21 = v19[5];
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%@] Starting fetch items for accountID: %{public}@", buf, 0x16u);
    }

    uint64_t v22 = sub_1002A4710(a1[4], a1[5], a1[6]);
LABEL_21:
    uint64_t v9 = (void *)v22;

    goto LABEL_22;
  }
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = a1[4];
    uint64_t v7 = v6[2];
    uint64_t v8 = v6[5];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] Starting force refresh to fetch items for accountID: %{public}@", buf, 0x16u);
  }

  uint64_t v9 = sub_1002A4710(a1[4], a1[5], a1[6]);
LABEL_22:

  return v9;
}

void sub_1002A46E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_1002A4710(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = v5;
    id v8 = v6;
    uint64_t v9 = sub_10023B3FC();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1002A6A64;
    void v18[3] = &unk_100525638;
    void v18[4] = a1;
    id v10 = v7;
    id v19 = v10;
    id v11 = v8;
    id v20 = v11;
    sub_100202278((uint64_t)Promise, v9, v18);
    uint64_t v12 = (Promise *)objc_claimAutoreleasedReturnValue();

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1002A5DD4;
    void v15[3] = &unk_1005255C0;
    void v15[4] = a1;
    id v16 = v11;
    id v17 = v10;
    id v13 = sub_10023B3FC();
    a1 = sub_100202A78(v12, v15, v13);
  }
  return a1;
}

id sub_1002A48E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  self;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000;
  id v27 = sub_100018088;
  id v28 = sub_100017C00;
  id v29 = 0;
  uint64_t v18 = 0;
  id v19 = &v18;
  uint64_t v20 = 0x3032000000;
  uint64_t v21 = sub_100018088;
  uint64_t v22 = sub_100017C00;
  id v23 = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002A5A00;
  void v14[3] = &unk_100523920;
  id v16 = &v18;
  id v8 = v6;
  id v15 = v8;
  id v17 = &v24;
  [v7 readUsingSession:v14];
  if (a4 && !v19[5]) {
    *a4 = (id) v25[5];
  }
  uint64_t v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = v19[5];
    uint64_t v11 = v25[5];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v31 = v10;
    __int16 v32 = 2114;
    id v33 = v8;
    __int16 v34 = 2114;
    uint64_t v35 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "(PurchaseHistory) Local revision is %{public}@ for accountID: %{public}@ error: %{public}@", buf, 0x20u);
  }

  id v12 = (id)v19[5];
  _Block_object_dispose(&v18, 8);

  _Block_object_dispose(&v24, 8);
  return v12;
}

void sub_1002A4B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1002A4B5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = [a2 BOOLValue];
  id v7 = ASDLogHandleForCategory();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5 || !v6)
  {
    if (v8)
    {
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = v14[2];
      uint64_t v16 = v14[5];
      unint64_t v17 = v14[4] - 1;
      if (v17 > 6) {
        CFStringRef v18 = @"default";
      }
      else {
        CFStringRef v18 = off_100525658[v17];
      }
      int v21 = 138413058;
      uint64_t v22 = v15;
      __int16 v23 = 2114;
      uint64_t v24 = v16;
      __int16 v25 = 2114;
      CFStringRef v26 = v18;
      __int16 v27 = 2114;
      id v28 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Failed purchase history reload for accountID: %{public}@ context: %{public}@ error: %{public}@", (uint8_t *)&v21, 0x2Au);
    }

    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 72);
    uint64_t v20 = ASDErrorWithSafeUserInfo();
    (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v20);
  }
  else
  {
    if (v8)
    {
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = v9[2];
      uint64_t v11 = v9[5];
      unint64_t v12 = v9[4] - 1;
      if (v12 > 6) {
        CFStringRef v13 = @"default";
      }
      else {
        CFStringRef v13 = off_100525658[v12];
      }
      int v21 = 138412802;
      uint64_t v22 = v10;
      __int16 v23 = 2114;
      uint64_t v24 = v11;
      __int16 v25 = 2114;
      CFStringRef v26 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Completed purchase history reload for accountID: %{public}@ context: %{public}@", (uint8_t *)&v21, 0x20u);
    }

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 72) + 16))();
  }
}

uint64_t sub_1002A4D48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    uint64_t v27 = 0;
    goto LABEL_58;
  }
  if (!*(void *)(a1 + 16))
  {
    uint64_t v4 = sub_1002A3CB4(a1);
    id v5 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v4;
  }
  id v59 = 0;
  id v60 = 0;
  id v6 = *(id *)(a1 + 40);
  id v7 = v3;
  self;
  id v61 = 0;
  uint64_t v62 = (uint64_t)&v61;
  uint64_t v63 = 0x3032000000;
  id v64 = sub_100018088;
  BOOL v65 = sub_100017C00;
  long long v66 = 0;
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = sub_1002A588C;
  long long v69 = (uint64_t (*)(uint64_t, uint64_t))&unk_1005238F8;
  *(void *)&v70[16] = &v60;
  id v8 = v6;
  *(void *)long long v70 = v8;
  *(void *)&v70[8] = &v61;
  unsigned __int8 v71 = &v59;
  [v7 readUsingSession:buf];
  if (*(void *)(v62 + 40))
  {
    uint64_t v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = *(void *)(v62 + 40);
      *(_DWORD *)long long v67 = 138543362;
      *(void *)&v67[4] = v49;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "(PurchaseHistory) Error getting last updated date: %{public}@", v67, 0xCu);
    }
  }
  _Block_object_dispose(&v61, 8);

  if (v60)
  {
    [v60 timeIntervalSinceNow];
    double v11 = -v10;
    switch(*(void *)(a1 + 32))
    {
      case 0:
      case 1:
      case 2:
      case 3:
        goto LABEL_10;
      case 4:
      case 7:
        goto LABEL_11;
      case 5:
        if (!v59) {
          goto LABEL_11;
        }
        [v59 timeIntervalSinceNow];
        if (!v59) {
          goto LABEL_11;
        }
        double v30 = v29;
        self;
        uint64_t v31 = sub_10030B11C();
        double v32 = sub_10030BC30((uint64_t)v31, @"purchase-daap/forced-refresh-frequency-minutes", 10080.0);

        id v33 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 134217984;
          *(double *)&uint8_t buf[4] = v32;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "(PurchaseHistory) Force refresh interval: %.0f", buf, 0xCu);
        }

        if (v32 * 60.0 < -v30) {
          goto LABEL_11;
        }
        CFStringRef v23 = @"time since last update is less than forced refresh interval";
        goto LABEL_49;
      case 6:
        self;
        __int16 v34 = sub_10030B11C();
        id v61 = 0;
        uint64_t v35 = sub_10030BD44((uint64_t)v34, @"purchase-daap/purchase-refresh-enabled", &__kCFBooleanTrue, &v61);
        uint64_t v36 = v61;

        id v37 = ASDLogHandleForCategory();
        uint64_t v38 = v37;
        if (v35)
        {
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v35;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "(PurchaseHistory) Purchase refresh enabled: %{public}@", buf, 0xCu);
          }

          unsigned int v39 = [v35 BOOLValue];
          if (v39)
          {
            id v40 = *(void **)(a1 + 48);
            if (v40)
            {
              id v41 = *(id *)(a1 + 40);
              id v42 = v40;
              id v43 = v7;
              self;
              *(void *)long long buf = 0;
              *(void *)&uint8_t buf[8] = buf;
              *(void *)&uint8_t buf[16] = 0x3032000000;
              long long v69 = sub_100018088;
              *(void *)long long v70 = sub_100017C00;
              *(void *)&v70[8] = 0;
              id v44 = objc_alloc_init((Class)ASDPurchaseHistoryQuery);
              objc_msgSend(v44, "setAccountID:", objc_msgSend(v41, "longLongValue"));
              *(void *)long long v67 = v42;
              id v45 = +[NSArray arrayWithObjects:v67 count:1];
              [v44 setStoreIDs:v45];

              [v44 setIsFirstParty:0];
              [v44 setIsHidden:0];
              [v44 setIsPreorder:0];
              id v61 = _NSConcreteStackBlock;
              uint64_t v62 = 3221225472;
              uint64_t v63 = (uint64_t)sub_1002A5838;
              id v64 = (uint64_t (*)(uint64_t, uint64_t))&unk_100525548;
              long long v66 = buf;
              __int16 v46 = (void (*)(uint64_t))v44;
              BOOL v65 = v46;
              [v43 readUsingSession:&v61];
              uint64_t v47 = *(void **)(*(void *)&buf[8] + 40);
              char v48 = v47 ? [v47 isEqualToNumber:&off_10054C060] : 1;

              _Block_object_dispose(buf, 8);
              if ((v48 & 1) == 0)
              {
                CFStringRef v23 = @"history for account already contains expected item";
                goto LABEL_49;
              }
            }
            goto LABEL_11;
          }
        }
        else
        {
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v36;
            _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "(PurchaseHistory) Failed to receive purchase refresh enabled error: %{public}@", buf, 0xCu);
          }
        }
LABEL_10:
        if (sub_1002A5628() >= v11)
        {
          CFStringRef v23 = @"time since last update is less than polling interval";
LABEL_49:
          unint64_t v12 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v50 = *(void *)(a1 + 16);
            uint64_t v51 = *(void *)(a1 + 40);
            if (v60)
            {
              [v60 timeIntervalSince1970];
              uint64_t v53 = (uint64_t)v52;
            }
            else
            {
              uint64_t v53 = 0;
            }
            unint64_t v54 = *(void *)(a1 + 32) - 1;
            if (v54 > 6) {
              CFStringRef v55 = @"default";
            }
            else {
              CFStringRef v55 = off_100525658[v54];
            }
            *(_DWORD *)long long buf = 138413314;
            *(void *)&uint8_t buf[4] = v50;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v51;
            *(_WORD *)&buf[22] = 2048;
            long long v69 = (uint64_t (*)(uint64_t, uint64_t))v53;
            *(_WORD *)long long v70 = 2114;
            *(void *)&v70[2] = v55;
            *(_WORD *)&v70[10] = 2114;
            *(void *)&v70[12] = v23;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Blocking purchase history reload for accountID: %{public}@ last update: %{time_t}ld context: %{public}@ reason: %{public}@", buf, 0x34u);
          }
          uint64_t v27 = 0;
          goto LABEL_57;
        }
LABEL_11:
        unint64_t v12 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_25;
        }
        uint64_t v13 = *(void *)(a1 + 16);
        uint64_t v14 = *(void *)(a1 + 40);
        if (v60)
        {
          [v60 timeIntervalSince1970];
          uint64_t v16 = (uint64_t)v15;
        }
        else
        {
          uint64_t v16 = 0;
        }
        unint64_t v17 = *(void *)(a1 + 32) - 1;
        if (v17 > 6) {
          CFStringRef v18 = @"default";
        }
        else {
          CFStringRef v18 = off_100525658[v17];
        }
        *(_DWORD *)long long buf = 138413058;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v14;
        *(_WORD *)&buf[22] = 2048;
        long long v69 = (uint64_t (*)(uint64_t, uint64_t))v16;
        *(_WORD *)long long v70 = 2114;
        *(void *)&v70[2] = v18;
        uint64_t v24 = "[%@] Allowing purchase history reload for accountID: %{public}@ last update: %{time_t}ld context: %{public}@";
        __int16 v25 = v12;
        uint32_t v26 = 42;
        break;
      default:
        id v28 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
        {
          uint64_t v57 = *(void *)(a1 + 16);
          uint64_t v58 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v57;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v58;
          _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "[%@] Unhandled update context value: %lu", buf, 0x16u);
        }

        CFStringRef v23 = 0;
        goto LABEL_49;
    }
  }
  else
  {
    unint64_t v12 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = *(void *)(a1 + 40);
    unint64_t v21 = *(void *)(a1 + 32) - 1;
    if (v21 > 6) {
      CFStringRef v22 = @"default";
    }
    else {
      CFStringRef v22 = off_100525658[v21];
    }
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v20;
    *(_WORD *)&buf[22] = 2114;
    long long v69 = (uint64_t (*)(uint64_t, uint64_t))v22;
    uint64_t v24 = "[%@] Proceeding with purchase history reload, no previous reload time recorded for accountID: %{public}@ context: %{public}@";
    __int16 v25 = v12;
    uint32_t v26 = 32;
  }
  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v24, buf, v26);
LABEL_25:
  uint64_t v27 = 1;
LABEL_57:

LABEL_58:
  return v27;
}

void sub_1002A55D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_1002A5628()
{
  self;
  id v0 = sub_10030B11C();
  double v1 = sub_10030BC30((uint64_t)v0, @"purchase-daap/update-polling-frequency-secs", 3600.0);

  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 134217984;
    double v5 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "(PurchaseHistory) Update polling frequency interval: %.0f", (uint8_t *)&v4, 0xCu);
  }

  return v1;
}

void sub_1002A570C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)ASDPurchaseHistoryQuery);
  objc_msgSend(v4, "setAccountID:", objc_msgSend(*(id *)(a1[4] + 40), "longLongValue"));
  [v4 setIsFirstParty:0];
  [v4 setIsHidden:0];
  [v4 setIsPreorder:0];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = sub_1003DF1F0(v3, v4);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(a1[5] + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = *(void *)(a1[6] + 8);
  id v13 = *(id *)(v9 + 40);
  uint64_t v10 = sub_1003DF91C((uint64_t)v3, *(void **)(a1[4] + 40));

  objc_storeStrong((id *)(v9 + 40), v13);
  uint64_t v11 = *(void *)(a1[7] + 8);
  unint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_1002A5838(uint64_t a1, id a2)
{
  uint64_t v3 = sub_1003DEA54(a2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1002A588C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = a2;
  uint64_t v6 = sub_1003E0360((uint64_t)v5, v3);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v7 = *(void ***)(a1 + 48);
  id v8 = *v7;
  *uint64_t v7 = (void *)v6;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v13 = *(id *)(v9 + 40);
  uint64_t v10 = sub_1003E0108((uint64_t)v5, *(void **)(a1 + 32));

  objc_storeStrong((id *)(v9 + 40), v13);
  uint64_t v11 = *(void ***)(a1 + 56);
  unint64_t v12 = *v11;
  *uint64_t v11 = (void *)v10;
}

uint64_t sub_1002A5948(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSDate date];
  id v5 = (void *)a1[4];
  uint64_t v6 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v6 + 40);
  unsigned __int8 v7 = sub_100260218(v3, v4, v5, &obj);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(a1[5] + 8);
  if (*(unsigned char *)(v8 + 24)) {
    unsigned __int8 v9 = v7;
  }
  else {
    unsigned __int8 v9 = 0;
  }
  *(unsigned char *)(v8 + 24) = v9;

  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

void sub_1002A5A00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = sub_1003DF91C(a2, *(void **)(a1 + 32));
  objc_storeStrong((id *)(v3 + 40), obj);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

uint64_t sub_1002A5A7C(void *a1, void *a2)
{
  id v4 = a2;
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, v3, 104, 1);
  }
  id v6 = Property;
  unsigned __int8 v7 = [v6 BOOLValue];

  if ((v7 & 1) == 0)
  {
    unsigned __int8 v9 = *(void **)(a1[5] + 40);
    uint64_t v10 = *(void *)(a1[7] + 8);
    id obj = *(id *)(v10 + 40);
    char v11 = sub_10025FEE0(v4, v9, &obj);
    objc_storeStrong((id *)(v10 + 40), obj);
    uint64_t v12 = *(void *)(a1[6] + 8);
    if (*(unsigned char *)(v12 + 24)) {
      char v13 = v11;
    }
    else {
      char v13 = 0;
    }
    *(unsigned char *)(v12 + 24) = v13;
  }
  id v14 = (id)a1[4];
  if (v14) {
    id v14 = objc_getProperty(v14, v8, 112, 1);
  }
  id v15 = v14;
  uint64_t v16 = *(void **)(a1[5] + 40);
  uint64_t v17 = *(void *)(a1[7] + 8);
  id v23 = *(id *)(v17 + 40);
  unsigned __int8 v18 = sub_10025FFC4(v4, v15, v16, &v23);
  objc_storeStrong((id *)(v17 + 40), v23);
  uint64_t v19 = *(void *)(a1[6] + 8);
  if (*(unsigned char *)(v19 + 24)) {
    unsigned __int8 v20 = v18;
  }
  else {
    unsigned __int8 v20 = 0;
  }
  *(unsigned char *)(v19 + 24) = v20;

  uint64_t v21 = *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24);
  return v21;
}

BOOL sub_1002A5BB8(void *a1, void *a2)
{
  id v4 = a2;
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  id v6 = Property;
  unsigned __int8 v7 = v6;
  if (v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = &__NSArray0__struct;
  }
  unsigned __int8 v9 = *(void **)(a1[5] + 40);
  uint64_t v10 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v10 + 40);
  char v11 = sub_10025F464(v4, v8, v9);
  objc_storeStrong((id *)(v10 + 40), obj);
  uint64_t v12 = *(void *)(a1[6] + 8);
  if (*(unsigned char *)(v12 + 24)) {
    char v13 = v11;
  }
  else {
    char v13 = 0;
  }
  *(unsigned char *)(v12 + 24) = v13;

  id v15 = (id)a1[4];
  if (v15) {
    id v15 = objc_getProperty(v15, v14, 24, 1);
  }
  id v16 = v15;
  uint64_t v17 = v16;
  if (v16) {
    unsigned __int8 v18 = v16;
  }
  else {
    unsigned __int8 v18 = &__NSArray0__struct;
  }
  uint64_t v19 = *(void **)(a1[5] + 40);
  uint64_t v20 = *(void *)(a1[7] + 8);
  id v39 = *(id *)(v20 + 40);
  char v21 = sub_10025F270((uint64_t)v4, v18, v19, &v39);
  objc_storeStrong((id *)(v20 + 40), v39);
  uint64_t v22 = *(void *)(a1[6] + 8);
  if (*(unsigned char *)(v22 + 24)) {
    char v23 = v21;
  }
  else {
    char v23 = 0;
  }
  *(unsigned char *)(v22 + 24) = v23;

  if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24))
  {
    uint64_t v24 = +[NSDate now];
    __int16 v25 = *(void **)(a1[5] + 40);
    uint64_t v26 = *(void *)(a1[7] + 8);
    id v38 = *(id *)(v26 + 40);
    unsigned __int8 v27 = sub_100260218(v4, v24, v25, &v38);
    objc_storeStrong((id *)(v26 + 40), v38);
    uint64_t v28 = *(void *)(a1[6] + 8);
    if (*(unsigned char *)(v28 + 24)) {
      unsigned __int8 v29 = v27;
    }
    else {
      unsigned __int8 v29 = 0;
    }
    *(unsigned char *)(v28 + 24) = v29;
    double v30 = *(void **)(a1[5] + 40);
    uint64_t v31 = *(void *)(a1[7] + 8);
    id v37 = *(id *)(v31 + 40);
    unsigned __int8 v32 = sub_100260170(v4, v24, v30, &v37);
    objc_storeStrong((id *)(v31 + 40), v37);
    uint64_t v33 = *(void *)(a1[6] + 8);
    if (*(unsigned char *)(v33 + 24)) {
      unsigned __int8 v34 = v32;
    }
    else {
      unsigned __int8 v34 = 0;
    }
    *(unsigned char *)(v33 + 24) = v34;

    BOOL v35 = *(unsigned char *)(*(void *)(a1[6] + 8) + 24) != 0;
  }
  else
  {
    BOOL v35 = 0;
  }

  return v35;
}

id sub_1002A5DD4(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  id v82 = a2;
  id v86 = v2;
  uint64_t v84 = v3;
  if (!v3)
  {
    id v50 = 0;
    BOOL v51 = 0;
    goto LABEL_70;
  }
  uint64_t v111 = 0;
  uint64_t v112 = &v111;
  uint64_t v113 = 0x2020000000;
  char v114 = 1;
  uint64_t v105 = 0;
  id v106 = &v105;
  uint64_t v107 = 0x3032000000;
  id v108 = sub_100018088;
  SEL v109 = sub_100017C00;
  id v110 = 0;
  id v4 = sub_10038BADC((id *)[PurchaseHistoryItemsDAAPResponseDecoder alloc], v82);
  sub_10038BBB4(v4);
  self = v4;
  if (v4) {
    id Property = objc_getProperty(v4, v5, 104, 1);
  }
  else {
    id Property = 0;
  }
  id v7 = Property;
  BOOL v8 = v7 == 0;

  if (v8)
  {
    id v40 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
LABEL_55:
      id v50 = 0;
      BOOL v51 = 0;
      goto LABEL_69;
    }
    uint64_t v41 = *(void *)(v84 + 16);
    *(_DWORD *)id v126 = 138412290;
    uint64_t v127 = v41;
    id v42 = "[%@] Error decoding response metadata, isUpdate not parsed";
LABEL_81:
    _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, v42, v126, 0xCu);
    goto LABEL_55;
  }
  id v10 = self;
  if (self) {
    id v10 = objc_getProperty(self, v9, 112, 1);
  }
  id v11 = v10;
  BOOL v12 = v11 == 0;

  if (v12)
  {
    id v40 = ASDLogHandleForCategory();
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
      goto LABEL_55;
    }
    uint64_t v76 = *(void *)(v84 + 16);
    *(_DWORD *)id v126 = 138412290;
    uint64_t v127 = v76;
    id v42 = "[%@] Error decoding response metadata, revision not parsed";
    goto LABEL_81;
  }
  v100[0] = _NSConcreteStackBlock;
  v100[1] = 3221225472;
  v100[2] = sub_1002A5A7C;
  v100[3] = &unk_100525598;
  long long v85 = self;
  id v101 = v85;
  uint64_t v102 = v3;
  id v103 = &v111;
  v104 = &v105;
  [v86 modifyUsingTransaction:v100];
  char v13 = objc_opt_new();
  id v14 = objc_opt_new();
  do
  {
    id v16 = sub_10038BC94((uint64_t)v85);
    unsigned __int8 v18 = v16;
    if (v16) {
      id v19 = objc_getProperty(v16, v17, 16, 1);
    }
    else {
      id v19 = 0;
    }
    id v20 = v19;
    if ([v20 count])
    {
    }
    else
    {
      if (v18) {
        id v23 = objc_getProperty(v18, v21, 24, 1);
      }
      else {
        id v23 = 0;
      }
      id v24 = v23;
      BOOL v25 = [v24 count] == 0;

      if (v25)
      {
        int v39 = 1;
        goto LABEL_37;
      }
    }
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    if (v18) {
      id v26 = objc_getProperty(v18, v22, 16, 1);
    }
    else {
      id v26 = 0;
    }
    id v27 = v26;
    id v28 = [v27 countByEnumeratingWithState:&v96 objects:v126 count:16];
    if (v28)
    {
      uint64_t v29 = *(void *)v97;
      do
      {
        for (uint64_t i = 0; i != v28; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v97 != v29) {
            objc_enumerationMutation(v27);
          }
          uint64_t v31 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(*((void *)&v96 + 1) + 8 * i) storeItemID]);
          [v13 addObject:v31];
        }
        id v28 = [v27 countByEnumeratingWithState:&v96 objects:v126 count:16];
      }
      while (v28);
    }

    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    if (v18) {
      id v33 = objc_getProperty(v18, v32, 24, 1);
    }
    else {
      id v33 = 0;
    }
    id v34 = v33;
    id v35 = [v34 countByEnumeratingWithState:&v92 objects:v125 count:16];
    if (v35)
    {
      uint64_t v36 = *(void *)v93;
      do
      {
        for (uint64_t j = 0; j != v35; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v93 != v36) {
            objc_enumerationMutation(v34);
          }
          [v14 addObject:*(void *)(*((void *)&v92 + 1) + 8 * (void)j)];
        }
        id v35 = [v34 countByEnumeratingWithState:&v92 objects:v125 count:16];
      }
      while (v35);
    }

    v87[0] = _NSConcreteStackBlock;
    v87[1] = 3221225472;
    v87[2] = sub_1002A5BB8;
    v87[3] = &unk_100525598;
    id v90 = &v111;
    id v38 = v18;
    id v88 = v38;
    uint64_t v89 = v84;
    uint64_t v91 = &v105;
    [v86 modifyUsingTransaction:v87];
    if (v18) {
      int v39 = v38[8] & 1;
    }
    else {
      int v39 = 0;
    }

LABEL_37:
  }
  while (!v39);
  if (!*((unsigned char *)v112 + 24)) {
    goto LABEL_66;
  }
  id v43 = [v13 count];
  uint64_t v44 = (uint64_t)v43 + (void)[v14 count];
  if (v44 < 1)
  {
    id v45 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v53 = *(void *)(v84 + 16);
      if (self) {
        id v54 = objc_getProperty(v85, v52, 112, 1);
      }
      else {
        id v54 = 0;
      }
      id v55 = v54;
      *(_DWORD *)long long buf = 138543618;
      uint64_t v116 = v53;
      __int16 v117 = 2112;
      id v118 = v55;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purchase History updated from server (revision %@) with 0 changes", buf, 0x16u);
    }
  }
  else
  {
    notify_post("com.apple.appstored.PurchaseHistoryDatabaseUpdated");
    if ((unint64_t)v44 > 0xA)
    {
      id v45 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v57 = *(void *)(v84 + 16);
        if (self) {
          id v58 = objc_getProperty(v85, v56, 112, 1);
        }
        else {
          id v58 = 0;
        }
        id v59 = v58;
        *(_DWORD *)long long buf = 138543874;
        uint64_t v116 = v57;
        __int16 v117 = 2112;
        id v118 = v59;
        __int16 v119 = 2048;
        uint64_t v120 = v44;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purchase History updated from server (revision %@) with %ld changes", buf, 0x20u);
      }
    }
    else
    {
      id v45 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v47 = *(void *)(v84 + 16);
        if (self) {
          id v48 = objc_getProperty(v85, v46, 112, 1);
        }
        else {
          id v48 = 0;
        }
        id v49 = v48;
        *(_DWORD *)long long buf = 138544386;
        uint64_t v116 = v47;
        __int16 v117 = 2112;
        id v118 = v49;
        __int16 v119 = 2048;
        uint64_t v120 = v44;
        __int16 v121 = 2112;
        long long v122 = v13;
        __int16 v123 = 2112;
        id v124 = v14;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purchase History updated from server (revision %@) with %ld changes: added {%@}; removed {%@}",
          buf,
          0x34u);
      }
    }
  }

  if (*((unsigned char *)v112 + 24))
  {
    id v50 = 0;
    BOOL v51 = 1;
  }
  else
  {
LABEL_66:
    id v50 = (id) v106[5];
    id v60 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      uint64_t v77 = *(void *)(v84 + 16);
      if (self) {
        id v78 = objc_getProperty(v85, v61, 112, 1);
      }
      else {
        id v78 = 0;
      }
      id v79 = v78;
      uint64_t v80 = v106[5];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v116 = v77;
      __int16 v117 = 2112;
      id v118 = v79;
      __int16 v119 = 2112;
      uint64_t v120 = v80;
      _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "[%{public}@] Purchase History updated from server (revision %@) with error %@", buf, 0x20u);
    }
    BOOL v51 = *((unsigned char *)v112 + 24) != 0;
  }

  id v40 = v101;
LABEL_69:

  _Block_object_dispose(&v105, 8);
  _Block_object_dispose(&v111, 8);
LABEL_70:

  id v62 = v50;
  uint64_t v63 = ASDLogHandleForCategory();
  id v64 = v63;
  if (v51)
  {
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v65 = a1[4];
      uint64_t v66 = *(void *)(v65 + 16);
      uint64_t v67 = *(void *)(v65 + 40);
      uint64_t v68 = a1[6];
      *(_DWORD *)id v126 = 138412802;
      uint64_t v127 = v66;
      __int16 v128 = 2114;
      uint64_t v129 = v67;
      __int16 v130 = 2114;
      uint64_t v131 = v68;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "[%@] Updated DB for account: %{public}@ authenticated account: %{public}@", v126, 0x20u);
    }

    long long v69 = sub_1002022EC((uint64_t)Promise, &__kCFBooleanTrue);
  }
  else
  {
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      uint64_t v72 = a1[4];
      uint64_t v73 = *(void *)(v72 + 16);
      uint64_t v74 = *(void *)(v72 + 40);
      uint64_t v75 = a1[6];
      *(_DWORD *)id v126 = 138413058;
      uint64_t v127 = v73;
      __int16 v128 = 2114;
      uint64_t v129 = v74;
      __int16 v130 = 2114;
      uint64_t v131 = v75;
      __int16 v132 = 2114;
      id v133 = v62;
      _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "[%@] Error updating DB for account: %{public}@ authenticated account: %{public}@ error: %{public}@", v126, 0x2Au);
    }

    long long v70 = sub_100005B4C(0, (uint64_t)v62);
    long long v69 = sub_1002023A0((uint64_t)Promise, v70);
  }
  return v69;
}

void sub_1002A680C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

id sub_1002A688C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100296A94((id *)[PurchaseHistoryUpdateDAAPResponseDecoder alloc], v3);

  sub_100296B0C((uint64_t)v4);
  if (v4) {
    id Property = objc_getProperty(v4, v5, 24, 1);
  }
  else {
    id Property = 0;
  }
  id v7 = Property;
  BOOL v8 = ASDLogHandleForCategory();
  unsigned __int8 v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 16);
      int v15 = 138412546;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Decoded server revision: %@", (uint8_t *)&v15, 0x16u);
    }

    id v11 = sub_1002022EC((uint64_t)Promise, v7);
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 16);
      int v15 = 138412290;
      uint64_t v16 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@] Decoding server revision failed", (uint8_t *)&v15, 0xCu);
    }

    BOOL v12 = sub_100266358(0, 0);
    id v11 = sub_1002023A0((uint64_t)Promise, v12);
  }
  return v11;
}

void sub_1002A6A64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  BOOL v8 = *(void **)(a1 + 48);
  id v25 = *(id *)(a1 + 40);
  id v9 = v8;
  uint64_t v10 = v9;
  if (v7)
  {
    id v11 = v6;
    id v12 = v5;
    uint64_t v41 = 0;
    id v42 = &v41;
    uint64_t v43 = 0x3032000000;
    uint64_t v44 = sub_100018088;
    id v45 = sub_100017C00;
    id v46 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x3032000000;
    id v38 = sub_100018088;
    int v39 = sub_100017C00;
    id v40 = 0;
    uint64_t v29 = 0;
    double v30 = &v29;
    uint64_t v31 = 0x3032000000;
    unsigned __int8 v32 = sub_100018088;
    id v33 = sub_100017C00;
    id v34 = 0;
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1002A570C;
    id v48 = &unk_100525520;
    uint64_t v49 = v7;
    id v50 = &v35;
    BOOL v51 = &v41;
    double v52 = &v29;
    [v9 readUsingSession:buf];
    char v13 = (void *)v36[5];
    uint64_t v14 = (void *)v30[5];
    id v15 = [*(id *)(v7 + 40) longLongValue];
    uint64_t v16 = sub_1000169A4();
    __int16 v17 = sub_10025AFF8((uint64_t)PurchaseHistoryItemsRequestContext, v13, v14, (int64_t)v15, v25, v16, *(void *)(v7 + 32));

    id v5 = v12;
    id v6 = v11;
    if (v17) {
      id v18 = 0;
    }
    else {
      id v18 = (id) v42[5];
    }
    _Block_object_dispose(&v29, 8);

    _Block_object_dispose(&v35, 8);
    _Block_object_dispose(&v41, 8);
  }
  else
  {
    id v18 = 0;
    __int16 v17 = 0;
  }

  id v19 = v18;
  id v20 = ASDLogHandleForCategory();
  char v21 = v20;
  if (v17)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 16);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[%@] Server items request started", buf, 0xCu);
    }

    uint64_t v22 = sub_1003534EC((id *)[PurchaseHistoryItemsRequest alloc], *(void **)(*(void *)(a1 + 32) + 8), *(void **)(*(void *)(a1 + 32) + 64), v17);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    void v26[2] = sub_1002A6EC0;
    v26[3] = &unk_100525610;
    v26[4] = *(void *)(a1 + 32);
    id v27 = v5;
    id v28 = v6;
    sub_1003535A4(v22, v26);
  }
  else
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 16);
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[%@] Server items request failed, no request context: %@", buf, 0x16u);
    }

    (*((void (**)(id, id))v6 + 2))(v6, v19);
  }
}

void sub_1002A6E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1002A6EC0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    if (!v6)
    {
      uint64_t v7 = sub_100266358(0, 0);
    }
    uint64_t v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1[4] + 16);
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[%@] Server items request failed (%@)", (uint8_t *)&v12, 0x16u);
    }

    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    BOOL v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1[4] + 16);
      int v12 = 138412546;
      uint64_t v13 = v9;
      __int16 v14 = 2048;
      id v15 = [v5 length];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%@] Server items request completed (%{iec-bytes}lu)", (uint8_t *)&v12, 0x16u);
    }

    (*(void (**)(void))(a1[5] + 16))();
  }
}

void sub_1002A705C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  if (v7)
  {
    BOOL v8 = (void *)a1[5];
    uint64_t v9 = (void *)a1[6];
    uint64_t v10 = *(void **)(v7 + 40);
    *(void *)long long buf = 0;
    id v11 = v8;
    int v12 = sub_1002A48E4((uint64_t)PurchaseHistoryUpdateCommand, v10, v9, buf);
    id v13 = *(id *)buf;
    id v14 = [*(id *)(v7 + 40) longLongValue];
    id v15 = sub_1000169A4();
    uint64_t v16 = sub_1003A4648((uint64_t)PurchaseHistoryUpdateRequestContext, v12, (int64_t)v14, v11, v15, *(void *)(v7 + 32));

    id v17 = 0;
    if (!v16) {
      id v17 = v13;
    }
  }
  else
  {
    id v17 = 0;
    uint64_t v16 = 0;
  }
  id v18 = v17;
  id v19 = ASDLogHandleForCategory();
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
  if (v16)
  {
    if (v20)
    {
      uint64_t v22 = *(void *)(a1[4] + 16);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[%@] Server revision request started", buf, 0xCu);
    }

    char v21 = sub_100265344((id *)[PurchaseHistoryUpdateRequest alloc], *(void **)(a1[4] + 8), *(void **)(a1[4] + 64), v16);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_1002A7330;
    v24[3] = &unk_100525610;
    v24[4] = a1[4];
    id v25 = v5;
    id v26 = v6;
    sub_1002653FC(v21, v24);
  }
  else
  {
    if (v20)
    {
      uint64_t v23 = *(void *)(a1[4] + 16);
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v23;
      __int16 v28 = 2112;
      id v29 = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[%@] Server revision request failed, no request context: %@", buf, 0x16u);
    }

    (*((void (**)(id, id))v6 + 2))(v6, v18);
  }
}

void sub_1002A7330(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    if (!v6)
    {
      uint64_t v7 = sub_100266358(0, 0);
    }
    uint64_t v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1[4] + 16);
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[%@] Server revision request failed (%@)", (uint8_t *)&v12, 0x16u);
    }

    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    BOOL v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1[4] + 16);
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2048;
      id v15 = [v5 length];
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[%@] Server revision request completed (%{iec-bytes}lu)", (uint8_t *)&v12, 0x16u);
    }

    (*(void (**)(void))(a1[5] + 16))();
  }
}

id sub_1002A756C()
{
  self;
  v2[0] = @"app_adam_id";
  v2[1] = @"ad_network_registrable_domain";
  v2[2] = @"impression_id";
  v2[3] = @"source_web_registrable_domain";
  v2[4] = @"version";
  v2[5] = @"timestamp";
  v2[6] = @"attribution_context";
  id v0 = +[NSArray arrayWithObjects:v2 count:7];
  return v0;
}

id *sub_1002A7628(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)RepairApplicationTask;
    BOOL v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 6, a2);
      objc_storeStrong(a1 + 7, a3);
    }
  }

  return a1;
}

id sub_1002A7E70(uint64_t a1)
{
  return [*(id *)(a1 + 32) repair:*(void *)(*(void *)(a1 + 32) + 40) needsToReleaseBlockingCallerWithReason:0];
}

void sub_1002A7F58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v6 = [*(id *)(*(void *)(a1 + 32) + 40) logKey];
      int v7 = 138412546;
      BOOL v8 = v6;
      __int16 v9 = 2114;
      id v10 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%@] Unable to relaunch due to error: %{public}@", (uint8_t *)&v7, 0x16u);
LABEL_6:
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(*(void *)(a1 + 32) + 40) logKey];
    int v7 = 138412290;
    BOOL v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] Relaunched application after repair completed", (uint8_t *)&v7, 0xCu);
    goto LABEL_6;
  }
}

id sub_1002A81CC(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [a1 firstObject];
    if (v2) {
      [a1 removeObjectAtIndex:0];
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

id sub_1002A8228(id a1)
{
  if (a1)
  {
    id v2 = a1;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1002A8330(double *a1, double a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [a1 setProperty:v4 forBodyKey:@"averageTimeBetweenPolls"];

    a1[1] = a2;
  }
}

void sub_1002A839C(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v7 = v4;
    [v4 timeIntervalSince1970];
    id v6 = +[NSNumber numberWithInteger:(uint64_t)(v5 * 1000.0)];
    [a1 setProperty:v6 forBodyKey:@"lastPollDate"];

    objc_storeStrong(a1 + 2, a2);
    id v4 = v7;
  }
}

void sub_1002A8448(double *a1, double a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [a1 setProperty:v4 forBodyKey:@"meanTimeToDiscovery"];

    a1[3] = a2;
  }
}

void sub_1002A84B4(double *a1, double a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [a1 setProperty:v4 forBodyKey:@"meanTimeToDownload"];

    a1[4] = a2;
  }
}

void sub_1002A8520(double *a1, double a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [a1 setProperty:v4 forBodyKey:@"meanTimeToInstall"];

    a1[5] = a2;
  }
}

void sub_1002A858C(double *a1, double a2)
{
  if (a1)
  {
    id v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [a1 setProperty:v4 forBodyKey:@"meanTimeToTransaction"];

    a1[6] = a2;
  }
}

void sub_1002A867C(id a1)
{
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  [v7 setObject:&off_10054C078 forKeyedSubscript:@"clientId"];
  if (sub_1003F46DC()) {
    [v7 setObject:&__kCFBooleanTrue forKeyedSubscript:@"automationRunning"];
  }
  uint64_t v1 = +[AMSDevice productType];
  if ([v1 length]) {
    [v7 setObject:v1 forKeyedSubscript:@"deviceModel"];
  }
  id v2 = (void *)MGCopyAnswer();
  if ([v2 length]) {
    [v7 setObject:v2 forKeyedSubscript:@"buildNumber"];
  }
  if (os_variant_has_internal_content())
  {
    [v7 setObject:&off_10054C090 forKeyedSubscript:@"updatesVersion"];
    id v3 = v7;
    CFStringRef v4 = @"internal";
  }
  else
  {
    CFStringRef v4 = @"gold";
    id v3 = v7;
  }
  [v3 setObject:v4 forKeyedSubscript:@"buildType"];
  id v5 = [v7 copy];
  id v6 = (void *)qword_1005B0D48;
  qword_1005B0D48 = (uint64_t)v5;
}

id sub_1002A87E4()
{
  self;
  if (qword_1005B0D50 != -1) {
    dispatch_once(&qword_1005B0D50, &stru_100525710);
  }
  id v0 = (void *)qword_1005B0D58;
  return v0;
}

void sub_1002A883C(id a1)
{
  uint64_t v1 = objc_alloc_init(ArtworkLoader);
  id v2 = (void *)qword_1005B0D58;
  qword_1005B0D58 = (uint64_t)v1;
}

void sub_1002A8878(void *a1, void *a2, int a3, void *a4)
{
  id v31 = a2;
  id v7 = a4;
  if (a1)
  {
    if (v31)
    {
      if ([v31 isFileURL])
      {
        (*((void (**)(id, id, void, void))v7 + 2))(v7, v31, 0, 0);
      }
      else
      {
        id v9 = v31;
        unsigned __int8 v32 = _NSConcreteStackBlock;
        uint64_t v33 = 3221225472;
        id v34 = sub_1002A8E14;
        uint64_t v35 = &unk_100525738;
        id v10 = v7;
        id v36 = v10;
        uint64_t v11 = objc_retainBlock(&v32);
        if (os_variant_has_internal_content()) {
          a3 &= ~sub_1003F47A0();
        }
        int v12 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", v9, v31, v32, v33, v34, v35);
        [v12 setCachePolicy:0];
        [v12 setTimeoutInterval:30.0];
        [v12 setHTTPShouldHandleCookies:0];
        uint64_t v13 = sub_100301DF0();
        [v12 setHTTPUserAgent:v13];

        __int16 v14 = a1;
        objc_sync_enter(v14);
        uint64_t v15 = 2;
        if (a3) {
          uint64_t v15 = 1;
        }
        uint64_t v16 = (id *)&v14[v15];
        id v17 = v14[v15];
        if (v17)
        {
          id v18 = v17;
          id v19 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = a3;
            _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[ArtworkLoader] Cache hit, existing session (ATS = %{BOOL}d)", buf, 8u);
          }
        }
        else
        {
          BOOL v20 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = a3;
            _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "[ArtworkLoader] Cache miss, creating session (ATS = %{BOOL}d)", buf, 8u);
          }

          id v19 = +[NSURLSessionConfiguration ephemeralSessionConfiguration];
          if (a3)
          {
            CFStringRef v42 = @"NSAllowsArbitraryLoads";
            uint64_t v43 = &__kCFBooleanFalse;
            char v21 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
            uint64_t v22 = +[NSPropertyListSerialization dataWithPropertyList:v21 format:200 options:0 error:0];

            if (v22) {
              [v19 set_atsContext:v22];
            }
          }
          id v18 = +[NSURLSession sessionWithConfiguration:v19 delegate:v14 delegateQueue:0];
          objc_storeStrong(v16, v18);
        }

        uint64_t v23 = [v18 downloadTaskWithRequest:v12 completionHandler:v11];
        [v23 resume];

        uint64_t v24 = v14[3];
        if (v24) {
          dispatch_source_cancel(v24);
        }
        id v25 = dispatch_get_global_queue(21, 0);
        dispatch_source_t v26 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v25);
        dispatch_object_t v27 = v14[3];
        void v14[3] = v26;

        __int16 v28 = v14[3];
        dispatch_time_t v29 = dispatch_time(0, 60000000000);
        dispatch_source_set_timer(v28, v29, 0xFFFFFFFFFFFFFFFFLL, 0);
        double v30 = v14[3];
        *(void *)long long buf = _NSConcreteStackBlock;
        uint64_t v38 = 3221225472;
        int v39 = sub_1002A8F38;
        id v40 = &unk_100521388;
        uint64_t v41 = v14;
        dispatch_source_set_event_handler(v30, buf);
        dispatch_resume(v14[3]);

        objc_sync_exit(v14);
      }
    }
    else
    {
      BOOL v8 = ASDErrorWithUserInfoAndFormat();
      (*((void (**)(id, void, void, void *))v7 + 2))(v7, 0, 0, v8);
    }
  }
}

void sub_1002A8D30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002A8E00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002A8E14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  if ((unint64_t)(sub_10029FEA8((uint64_t)v7) - 200) > 0x63)
  {
    if (!v8)
    {
      ASDErrorWithUserInfoAndFormat();
      id v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
  }
  else
  {
    id v9 = sub_10029FE3C(v7);
    if (v9)
    {
      id v10 = +[UTType typeWithMIMEType:v9];
    }
    else
    {
      id v10 = 0;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1002A8F38(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v8 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[ArtworkLoader] Invalidating session cache", v8, 2u);
  }

  [*(id *)(*(void *)(a1 + 32) + 8) finishTasksAndInvalidate];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 8);
  *(void *)(v4 + _Block_object_dispose(&a9, 8) = 0;

  [*(id *)(*(void *)(a1 + 32) + 16) finishTasksAndInvalidate];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 16);
  *(void *)(v6 + 16) = 0;

  objc_sync_exit(v2);
}

void sub_1002A9008(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1002A91E4(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    id v3 = [v1 clientID];
    unsigned __int8 v4 = [v3 isEqualToString:@"asclient"];

    if ((v4 & 1) == 0)
    {
      id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.priority, 0)" value:&off_10054C0A8 comparisonType:6];
      [v2 addObject:v5];
    }
    uint64_t v6 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"IFNULL(app_install.phase, 10)" values:&off_10054DE18];
    [v2 addObject:v6];

    id v1 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v2];
  }
  return v1;
}

void sub_1002A92E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 72);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002A9394;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A9394(uint64_t a1)
{
}

void sub_1002A93A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = v3;
  if (a1 && [v3 count])
  {
    id v5 = *(void **)(a1 + 88);
    if (v5)
    {
      [v5 addObjectsFromArray:v4];
    }
    else
    {
      uint64_t v6 = objc_opt_new();
      id v7 = *(void **)(a1 + 88);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v6;

      id v8 = [*(id *)(a1 + 64) remoteObjectProxy];
      [v8 didChangeJobs:v4];

      objc_initWeak(&location, (id)a1);
      id v9 = *(void **)(a1 + 64);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1002A9F44;
      v10[3] = &unk_100525760;
      objc_copyWeak(&v11, &location);
      [v9 addBarrierBlock:v10];
      objc_destroyWeak(&v11);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1002A94D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002A94EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002A95BC;
    block[3] = &unk_1005212D8;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1002A95BC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    id v2 = objc_opt_class();
    id v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v5 = [v3 clientID];
    id v6 = [*(id *)(a1 + 40) componentsJoinedByString:@", "];
    uint64_t v7 = *(void *)(a1 + 48);
    int v8 = 138413058;
    id v9 = v2;
    __int16 v10 = 2112;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "[%@]: sendJobsCompleted to client: %@ for jobs: [%@] with finalPhases: %@ ", (uint8_t *)&v8, 0x2Au);
  }
  sub_1002A96E4(*(void *)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

void sub_1002A96E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1 && [v5 count])
  {
    uint64_t v7 = *(void **)(a1 + 96);
    if (v7)
    {
      [v7 addObjectsFromArray:v5];
      [*(id *)(a1 + 104) addEntriesFromDictionary:v6];
    }
    else
    {
      uint64_t v8 = objc_opt_new();
      id v9 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v8;

      uint64_t v10 = objc_opt_new();
      id v11 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v10;

      __int16 v12 = [*(id *)(a1 + 64) remoteObjectProxy];
      [v12 didCompleteJobs:v5 finalPhases:v6];

      objc_initWeak(&location, (id)a1);
      uint64_t v13 = *(void **)(a1 + 64);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1002A9FE4;
      void v14[3] = &unk_100525760;
      objc_copyWeak(&v15, &location);
      [v13 addBarrierBlock:v14];
      objc_destroyWeak(&v15);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1002A9860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002A987C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 72);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002A992C;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A992C(uint64_t a1)
{
}

void sub_1002A9938(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && [v3 count])
  {
    id v5 = *(void **)(a1 + 120);
    if (v5)
    {
      [v5 addEntriesFromDictionary:v4];
    }
    else
    {
      uint64_t v6 = objc_opt_new();
      id v7 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v6;

      uint64_t v8 = [*(id *)(a1 + 64) remoteObjectProxy];
      [v8 didUpdateStates:v4];

      objc_initWeak(&location, (id)a1);
      id v9 = *(void **)(a1 + 64);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1002AA084;
      v10[3] = &unk_100525760;
      objc_copyWeak(&v11, &location);
      [v9 addBarrierBlock:v10];
      objc_destroyWeak(&v11);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1002A9A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002A9A84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 72);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002A9B34;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A9B34(uint64_t a1)
{
}

void sub_1002A9B40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && [v3 count])
  {
    id v5 = *(void **)(a1 + 112);
    if (v5)
    {
      [v5 addEntriesFromDictionary:v4];
    }
    else
    {
      uint64_t v6 = objc_opt_new();
      id v7 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v6;

      uint64_t v8 = [*(id *)(a1 + 64) remoteObjectProxy];
      [v8 didUpdateProgress:v4];

      objc_initWeak(&location, (id)a1);
      id v9 = *(void **)(a1 + 64);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1002AA124;
      v10[3] = &unk_100525760;
      objc_copyWeak(&v11, &location);
      [v9 addBarrierBlock:v10];
      objc_destroyWeak(&v11);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1002A9C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002A9C8C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = [v3 persistenceIdentifier];
    id v5 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v4;

    *(unsigned char *)(a1 + 12_Block_object_dispose(&a9, 8) = [v3 shouldFilterExternalOriginatedDownloads];
    unsigned __int8 v6 = [v3 shouldReportDownloadProgress];

    *(unsigned char *)(a1 + 129) = v6;
  }
}

void sub_1002A9D10(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 88) array];
  id v5 = [v2 copy];

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 8_Block_object_dispose(&a9, 8) = 0;

  sub_1002A93A0(*(void *)(a1 + 32), v5);
}

void sub_1002A9D9C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) array];
  id v8 = [v2 copy];

  id v3 = [*(id *)(*(void *)(a1 + 32) + 104) copy];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 96);
  *(void *)(v4 + 96) = 0;

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = 0;

  sub_1002A96E4(*(void *)(a1 + 32), v8, v3);
}

void sub_1002A9E5C(uint64_t a1)
{
  id v4 = [*(id *)(*(void *)(a1 + 32) + 112) copy];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = 0;

  sub_1002A9B40(*(void *)(a1 + 32), v4);
}

void sub_1002A9ED0(uint64_t a1)
{
  id v4 = [*(id *)(*(void *)(a1 + 32) + 120) copy];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = 0;

  sub_1002A9938(*(void *)(a1 + 32), v4);
}

void sub_1002A9F44(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002A9D10;
    block[3] = &unk_100521388;
    void block[4] = v2;
    id v4 = v2;
    dispatch_async(v3, block);
    uint64_t v2 = v4;
  }
}

void sub_1002A9FE4(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002A9D9C;
    block[3] = &unk_100521388;
    void block[4] = v2;
    id v4 = v2;
    dispatch_async(v3, block);
    uint64_t v2 = v4;
  }
}

void sub_1002AA084(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002A9ED0;
    block[3] = &unk_100521388;
    void block[4] = v2;
    id v4 = v2;
    dispatch_async(v3, block);
    uint64_t v2 = v4;
  }
}

void sub_1002AA124(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002A9E5C;
    block[3] = &unk_100521388;
    void block[4] = v2;
    id v4 = v2;
    dispatch_async(v3, block);
    uint64_t v2 = v4;
  }
}

id sub_1002AA280(void *a1)
{
  if (a1)
  {
    uint64_t v2 = objc_opt_new();
    id v3 = sub_10026E95C(a1, @"bundle_id");
    sub_100329204(v2, v3);

    id v4 = sub_10026E95C(a1, @"bundle_version");
    sub_100329324(v2, v4);

    id v5 = sub_10026E82C(a1, @"downloader_id");
    id v6 = [v5 unsignedLongLongValue];
    if (v2)
    {
      *(_WORD *)(v2 + 208) |= 1u;
      *(void *)(v2 + _Block_object_dispose(&a9, 8) = v6;
    }

    id v7 = sub_10026E82C(a1, @"item_id");
    id v8 = [v7 unsignedLongLongValue];
    if (v2)
    {
      *(_WORD *)(v2 + 208) |= 4u;
      *(void *)(v2 + 24) = v8;
    }

    id v9 = sub_10026E95C(a1, @"store_cohort");
    sub_1003292C4(v2, v9);

    uint64_t v10 = sub_10026E95C(a1, @"storefront");
    sub_1003292DC(v2, v10);

    id v11 = sub_10026E82C(a1, @"source_type");
    id v12 = [v11 integerValue];

    if (v2)
    {
      *(_WORD *)(v2 + 208) |= 0x40u;
      *(unsigned char *)(v2 + 201) = v12 == (id)2;
      *(_WORD *)(v2 + 208) |= 0x100u;
      *(unsigned char *)(v2 + 203) = v12 == (id)1;
      *(_WORD *)(v2 + 208) |= 0x80u;
      *(unsigned char *)(v2 + 202) = v12 == 0;
      if (*(unsigned char *)(v2 + 201) || *(unsigned char *)(v2 + 202))
      {
        uint64_t v13 = sub_1004253D0(a1, 0);
        __int16 v14 = v13;
        if (v13)
        {
          if (*(unsigned char *)(v2 + 201)) {
            [v13 betaExternalVersionIdentifier];
          }
          else {
          id v15 = [v13 softwareVersionExternalIdentifier];
          }
          id v16 = [v15 unsignedLongLongValue];
          *(_WORD *)(v2 + 208) |= 2u;
          *(void *)(v2 + 16) = v16;
        }
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  return (id)v2;
}

void *sub_1002AA51C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)StoreItemSubGenre;
    a1 = objc_msgSendSuper2(&v10, "init");
    if (a1)
    {
      id v4 = v3;
      uint64_t v5 = sub_1002689B4(v4, @"genre");
      id v6 = (void *)a1[1];
      a1[1] = v5;

      uint64_t v7 = sub_10026811C(v4, @"genreId");

      id v8 = (void *)a1[2];
      a1[2] = v7;
    }
  }

  return a1;
}

id *sub_1002AA6E8(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)UPPManifest;
    uint64_t v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

id sub_1002AA760(uint64_t a1)
{
  if (a1)
  {
    id v1 = sub_100267F88(*(id *)(a1 + 8), @"items");
    uint64_t v2 = sub_1003B63BC(v1);
    id v3 = sub_10041E130(v2, &stru_100525780);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id sub_1002AA7E4(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = sub_10023E33C((id *)[UPPManifestItem alloc], v2);

  return v3;
}

uint64_t sub_1002AA83C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v4 = sub_1002AA760(a1);
    uint64_t v5 = (uint64_t)[v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v4);
          }
          id v8 = sub_10023E5F4(*(id **)(*((void *)&v11 + 1) + 8 * i));
          unsigned __int8 v9 = objc_msgSend(v8, "isEqualToString:", v3, (void)v11);

          if (v9)
          {
            uint64_t v5 = 1;
            goto LABEL_12;
          }
        }
        uint64_t v5 = (uint64_t)[v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

AppInstallDownloadTask *sub_1002AA984(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  self;
  v26[0] = @"automatic_type";
  v26[1] = @"bundle_id";
  void v26[2] = @"client_id";
  v26[3] = @"download_path";
  v26[4] = @"download_volume";
  void v26[5] = @"evid";
  v26[6] = @"external_id";
  v26[7] = @"item_id";
  v26[8] = @"log_code";
  v26[9] = @"metrics_fields";
  v26[10] = @"order_index";
  v26[11] = @"policy";
  v26[12] = @"priority";
  v26[13] = @"quarantine";
  v26[14] = @"redownload";
  v26[15] = @"restore_type";
  v26[16] = @"software_platform";
  v26[17] = @"source_type";
  v26[18] = @"update_type";
  unsigned __int8 v9 = +[NSArray arrayWithObjects:v26 count:19];
  objc_super v10 = [v8 connection];
  long long v11 = +[SQLiteEntity memoryEntityForPersistentID:a2 withProperties:v9 usingConnection:v10];

  v25[0] = @"bytes_offset";
  v25[1] = @"bytes_total";
  void v25[2] = @"clear_hash_array";
  v25[3] = @"compression";
  v25[4] = @"data_promise_id";
  v25[5] = @"disk_usage";
  v25[6] = @"dp_info";
  v25[7] = @"hash_array";
  v25[8] = @"hash_size";
  v25[9] = @"hash_type";
  v25[10] = @"locate_asset_cache";
  v25[11] = @"package_type";
  v25[12] = @"package_url";
  v25[13] = @"ranges_not_supported";
  v25[14] = @"request_count";
  v25[15] = @"variant_id";
  long long v12 = +[NSArray arrayWithObjects:v25 count:16];
  long long v13 = [v8 connection];

  long long v14 = sub_1004250B4(v11, v13, v12);

  id v15 = [AppInstallDownloadTask alloc];
  id v16 = v11;
  id v17 = v14;
  id v18 = v7;
  if (v15)
  {
    v24.receiver = v15;
    v24.super_class = (Class)AppInstallDownloadTask;
    id v15 = (AppInstallDownloadTask *)objc_msgSendSuper2(&v24, "init");
    if (v15)
    {
      id v19 = [v16 databaseID];
      v15->_installID = (int64_t)v19;
      BOOL v20 = +[NSNumber numberWithLongLong:v19];
      uint64_t v21 = sub_10041E684((uint64_t)AppInstallInfo, v20);
      installInfo = v15->_installInfo;
      v15->_installInfo = (AppInstallInfo *)v21;

      objc_storeStrong((id *)&v15->_install, v11);
      objc_storeStrong((id *)&v15->_package, v14);
      objc_storeStrong((id *)&v15->_coordinator, a4);
    }
  }

  return v15;
}

__CFString *sub_1002AAD2C(uint64_t a1, void *a2, __CFString **a3)
{
  uint64_t v6 = &OBJC_IVAR___XPCClient__clientVersion;
  id v7 = [*(id *)(a1 + 80) valueForProperty:@"package_url"];
  if (v7)
  {
    v195 = a3;
    v200 = a2;
    id v8 = objc_alloc_init(AssetRequestProperties);
    uint64_t v9 = (uint64_t)v8;
    if (v8) {
      v8->_connectionPool = 1;
    }
    long long v11 = sub_100424C14(*(void **)(a1 + 64));
    if (v9) {
      objc_setProperty_atomic((id)v9, v10, v11, 128);
    }

    id Property = *(id *)(a1 + 72);
    if (Property) {
      id Property = objc_getProperty(Property, v12, 24, 1);
    }
    id v15 = Property;
    if (v9) {
      objc_setProperty_atomic((id)v9, v14, v15, 32);
    }

    id v17 = sub_10026E9D4(*(void **)(a1 + 64), @"external_id");
    if (v9) {
      objc_setProperty_atomic((id)v9, v16, v17, 104);
    }

    id v18 = [*(id *)(a1 + 80) valueForProperty:@"dp_info"];
    v199 = v18;
    if (v18) {
      BOOL v198 = [v18 length] != 0;
    }
    else {
      BOOL v198 = 0;
    }
    uint64_t v22 = sub_10026E82C(*(void **)(a1 + 80), @"bytes_total");
    uint64_t v23 = v22;
    if (!v22 || [v22 isEqualToNumber:&off_10054C180])
    {
      objc_super v24 = sub_10026EA4C(*(void **)(a1 + 80), @"package_url");
      if (v24)
      {
        id v25 = [DetermineSizeForURLTask alloc];
        dispatch_source_t v26 = sub_100424C14(*(void **)(a1 + 64));
        dispatch_object_t v27 = sub_100313E64((id *)&v25->super.super.super.isa, v24, v26);

        if ([(id)a1 runSubTask:v27 returningError:0])
        {
          dispatch_time_t v29 = *(void **)(a1 + 80);
          if (v27) {
            id v30 = objc_getProperty(v27, v28, 72, 1);
          }
          else {
            id v30 = 0;
          }
          id v31 = v30;
          [v29 setValue:v31 forProperty:@"bytes_total"];

          *(unsigned char *)(a1 + 4_Block_object_dispose(&a9, 8) = 1;
        }

        uint64_t v6 = &OBJC_IVAR___XPCClient__clientVersion;
      }
    }
    id v197 = sub_10026E91C(*(id *)(a1 + 80), @"compression");
    unsigned __int8 v32 = sub_10026E82C(*(void **)(a1 + 80), @"hash_type");
    v196 = v32;
    if (v32)
    {
      id v33 = [v32 integerValue];
      if (v33 == (id)2) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = 2 * (v33 == (id)3);
      }
      uint64_t v35 = [*(id *)(a1 + 80) valueForProperty:@"hash_size"];
      unsigned int v36 = [v35 unsignedIntValue];

      uint64_t v37 = objc_alloc_init(ChunkedDigest);
      uint64_t v38 = v37;
      int v39 = v200;
      if (v37)
      {
        v37->_chunkSize = v36;
        v37->_unint64_t chunkType = v34;
      }
      id v40 = objc_alloc_init(ChunkedDigest);
      uint64_t v41 = v40;
      if (v40)
      {
        v40->_chunkSize = v36;
        v40->_unint64_t chunkType = v34;
      }
      CFStringRef v42 = [*(id *)(a1 + 80) valueForProperty:@"hash_array"];
      if (v198)
      {
        sub_1002A386C((uint64_t)v38, v42);

        uint64_t v43 = [*(id *)(a1 + 80) valueForProperty:@"clear_hash_array"];
        sub_1002A386C((uint64_t)v41, v43);

        if (v41) {
          chunkDigests = v41->_chunkDigests;
        }
        else {
          chunkDigests = 0;
        }
        id v45 = chunkDigests;
        NSUInteger v46 = [(NSArray *)v45 count];

        if (!v46)
        {
          uint64_t v47 = sub_10026E95C(*(void **)(a1 + 64), @"log_code");
          id v48 = v47;
          if (v47 && [v47 isEqualToString:@"LGY"])
          {
            uint64_t v49 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              id v192 = *(id *)(a1 + 72);
              if (v192) {
                id v192 = objc_getProperty(v192, v50, 80, 1);
              }
              id v193 = v192;
              *(_DWORD *)long long buf = 138412290;
              id v203 = v193;
              _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "[%@] Skipping cleartext validation for legacy purchase path", buf, 0xCu);
            }
            p_super = &v41->super;
            uint64_t v41 = 0;
          }
          else
          {
            p_super = ASDLogHandleForCategory();
            if (os_log_type_enabled(p_super, OS_LOG_TYPE_FAULT))
            {
              id v190 = *(id *)(a1 + 72);
              if (v190) {
                id v190 = objc_getProperty(v190, v52, 80, 1);
              }
              id v191 = v190;
              *(_DWORD *)long long buf = 138412290;
              id v203 = v191;
              _os_log_fault_impl((void *)&_mh_execute_header, p_super, OS_LOG_TYPE_FAULT, "[%@] Cleartext hashes are missing, download will likely fail", buf, 0xCu);
            }
          }
        }
      }
      else
      {
        sub_1002A386C((uint64_t)v41, v42);

        uint64_t v38 = 0;
      }
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v38 = 0;
      int v39 = v200;
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t v53 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        id v55 = *(id *)(a1 + 72);
        if (v55) {
          id v55 = objc_getProperty(v55, v54, 80, 1);
        }
        id v56 = v55;
        *(_DWORD *)long long buf = 138412290;
        id v203 = v56;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "[%@] Establishing coordinator based data consumer", buf, 0xCu);
      }
      if (v197 == (id)1) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = v41;
      }
      id v58 = v57;
      id v59 = objc_alloc_init(CoordinatorPromiseSpecification);
      id v60 = v59;
      if (v59) {
        v59->_promiseType = 0;
      }
      id v61 = sub_10026E82C(*(void **)(a1 + 80), @"bytes_total");
      id v62 = [v61 unsignedLongLongValue];
      if (v60) {
        v60->_archiveSize = (unint64_t)v62;
      }

      uint64_t v63 = [*(id *)(a1 + 80) valueForProperty:@"disk_usage"];
      id v64 = [v63 unsignedLongLongValue];
      if (v60) {
        v60->_diskSpaceNeeded = (unint64_t)v64;
      }

      uint64_t v66 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 80) databaseID]);
      if (v60) {
        objc_setProperty_atomic(v60, v65, v66, 48);
      }

      uint64_t v67 = v58;
      self;
      id v68 = objc_alloc_init((Class)NSMutableDictionary);
      [v68 setObject:&__kCFBooleanTrue forKeyedSubscript:SZExtractorOptionsDenyInvalidSymlinks];
      if (v67)
      {
        long long v69 = v67->_chunkDigests;
        [v68 setObject:v69 forKeyedSubscript:SZExtractorOptionsHashesArray];

        long long v70 = +[NSNumber numberWithUnsignedInt:v67->_chunkSize];
        [v68 setObject:v70 forKeyedSubscript:SZExtractorOptionsHashedChunkSize];

        unint64_t chunkType = v67->_chunkType;
        if (chunkType <= 2) {
          [v68 setObject:*(void *)*(&off_1005257A0 + chunkType) forKeyedSubscript:SZExtractorOptionsHashType];
        }
      }
      id v72 = [v68 copy];

      if (v60) {
        objc_setProperty_atomic_copy(v60, v73, v72, 56);
      }

      int v39 = v200;
      if ((uint64_t)sub_10026E91C(*(id *)(a1 + 64), @"priority") >= 1)
      {
        uint64_t v74 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          id v76 = *(id *)(a1 + 72);
          if (v76) {
            id v76 = objc_getProperty(v76, v75, 80, 1);
          }
          id v77 = v76;
          *(_DWORD *)long long buf = 138543362;
          id v203 = v77;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "[%{public}@] Fast extraction enabled", buf, 0xCu);
        }
        if (v60) {
          v60->_fastExtraction = 1;
        }
      }
      id v78 = sub_100424C14(*(void **)(a1 + 64));
      uint64_t v80 = [v78 description];
      if (v60) {
        objc_setProperty_atomic_copy(v60, v79, v80, 32);
      }

      id v81 = sub_1002C8A7C([CoordinatorPromiseProvider alloc], *(void **)(a1 + 40), v195);
      if (v81)
      {
        id v82 = [*(id *)(a1 + 80) valueForProperty:@"data_promise_id"];
        id v83 = sub_10020C7A4([CoordinatorPromiseDataConsumer alloc], v81, v82, v60, v195);
        uint64_t v84 = v83;
        if (v83)
        {
          long long v85 = v83;
        }
        else
        {
          uint64_t v87 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            id v185 = *(id *)(a1 + 72);
            if (v185) {
              id v185 = objc_getProperty(v185, v88, 80, 1);
            }
            id v194 = v185;
            v186 = *v195;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v194;
            __int16 v204 = 2114;
            v205 = v186;
            _os_log_error_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "[%@] Failed to establish promise error: %{public}@", buf, 0x16u);
          }
          int v39 = v200;
        }
      }
      else
      {
        id v82 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          id v182 = *(id *)(a1 + 72);
          if (v182) {
            id v182 = objc_getProperty(v182, v86, 80, 1);
          }
          id v183 = v182;
          id v184 = *v195;
          *(_DWORD *)long long buf = 138412546;
          id v203 = v183;
          __int16 v204 = 2114;
          v205 = v184;
          _os_log_error_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "[%@] Failed to establish promise provider error: %{public}@", buf, 0x16u);
        }
        uint64_t v84 = 0;
      }

      if (v39) {
        *int v39 = v84;
      }
      uint64_t v6 = &OBJC_IVAR___XPCClient__clientVersion;
      if (v84 && v197 == (id)1)
      {
        uint64_t v89 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        {
          id v91 = *(id *)(a1 + 72);
          if (v91) {
            id v91 = objc_getProperty(v91, v90, 80, 1);
          }
          id v92 = v91;
          *(_DWORD *)long long buf = 138412290;
          id v203 = v92;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "[%@] Chaining LZMA decoding", buf, 0xCu);
        }
        long long v93 = v41;
        long long v94 = v84;
        uint64_t v84 = sub_100367B88((id *)[LZMADataConsumer alloc], v93);

        if (v84)
        {
          v84[32] = 1;
          objc_setProperty_atomic(v84, v95, v94, 40);
        }

        uint64_t v6 = &OBJC_IVAR___XPCClient__clientVersion;
      }
      char v96 = !v198;
      if (!v84) {
        char v96 = 1;
      }
      if ((v96 & 1) == 0)
      {
        long long v97 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          id v99 = *(id *)(a1 + 72);
          if (v99) {
            id v99 = objc_getProperty(v99, v98, 80, 1);
          }
          id v100 = v99;
          *(_DWORD *)long long buf = 138412290;
          id v203 = v100;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "[%@] Chaining FairPlay decryption", buf, 0xCu);
        }
        id v101 = v84;
        id v102 = v199;
        uint64_t v84 = sub_1002340E8([DecryptDataConsumer alloc], v102, v195);

        if (v84)
        {
          objc_setProperty_atomic(v84, v103, v101, 72);
          v104 = v84;
        }
        else
        {
          uint64_t v105 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
          {
            id v187 = *(id *)(a1 + 72);
            if (v187) {
              id v187 = objc_getProperty(v187, v106, 80, 1);
            }
            id v188 = v187;
            v189 = *v195;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v188;
            __int16 v204 = 2114;
            v205 = v189;
            _os_log_error_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_ERROR, "[%@] Failed to establish decryption consumer error: %{public}@", buf, 0x16u);

            uint64_t v6 = &OBJC_IVAR___XPCClient__clientVersion;
          }
        }
      }
    }
    else
    {
      uint64_t v84 = 0;
    }

    if (v9)
    {
      objc_setProperty_atomic((id)v9, v107, v84, 64);

      id v109 = objc_getProperty((id)v9, v108, 64, 1);
    }
    else
    {

      id v109 = 0;
    }
    uint64_t v21 = (__CFString *)v109;

    if (v21)
    {
      if (!*v39)
      {
        if (v9) {
          id v111 = objc_getProperty((id)v9, v110, 64, 1);
        }
        else {
          id v111 = 0;
        }
        *int v39 = v111;
      }
      uint64_t v112 = [*(id *)(a1 + v6[520]) valueForProperty:@"bytes_offset"];
      uint64_t v113 = v112;
      if (v112)
      {
        id v114 = [v112 unsignedLongLongValue];
        if (v9) {
          *(void *)(v9 + 160) = v114;
        }
      }
      id v115 = [*(id *)(a1 + v6[520]) valueForProperty:@"bytes_total"];
      id v116 = [v115 unsignedLongLongValue];
      if (v9) {
        *(void *)(v9 + 8_Block_object_dispose(&a9, 8) = v116;
      }

      id v118 = [*(id *)(a1 + 64) valueForProperty:@"client_id"];
      if (!v118)
      {
        __int16 v119 = sub_1000169A4();
        id v118 = [v119 bundleIdentifier];
      }
      if (v9) {
        objc_setProperty_atomic((id)v9, v117, v118, 144);
      }
      unsigned __int8 v120 = sub_10026E7EC(*(id *)(a1 + v6[520]), @"locate_asset_cache");
      if (v9) {
        *(unsigned char *)(v9 + 14) = v120;
      }
      switch((unint64_t)sub_10026E91C(*(id *)(a1 + 64), @"priority"))
      {
        case 0xFFFFFFFFFFFFFFFELL:
          if (v9)
          {
            objc_setProperty_atomic((id)v9, v121, &off_10054C168, 184);
            *(_DWORD *)(v9 + 16) = 17;
            *(void *)(v9 + 72) = 2;
            *(unsigned char *)(v9 + 15) = 1;
          }
          break;
        case 0xFFFFFFFFFFFFFFFFLL:
          if (v9)
          {
            long long v122 = &off_10054C150;
            goto LABEL_135;
          }
          break;
        case 0uLL:
          if (v9)
          {
            long long v122 = &off_10054C138;
LABEL_135:
            objc_setProperty_atomic((id)v9, v121, v122, 184);
            int v123 = 17;
            goto LABEL_141;
          }
          break;
        case 1uLL:
          if (v9)
          {
            id v124 = &off_10054C120;
            goto LABEL_140;
          }
          break;
        case 2uLL:
          if (v9)
          {
            id v124 = &off_10054C108;
LABEL_140:
            objc_setProperty_atomic((id)v9, v121, v124, 184);
            int v123 = 25;
LABEL_141:
            *(_DWORD *)(v9 + 16) = v123;
          }
          break;
        default:
          break;
      }
      if (sub_10026E91C(*(id *)(a1 + 64), @"update_type") == (id)1)
      {
        v125 = [*(id *)(a1 + 64) valueForProperty:@"bundle_id"];
        uint64_t v127 = v125;
        if (v9 && v125) {
          objc_setProperty_atomic((id)v9, v126, v125, 80);
        }
      }
      id v128 = sub_10026E91C(*(id *)(a1 + 64), @"source_type");
      uint64_t v129 = 1;
      switch((unint64_t)v128)
      {
        case 0uLL:
          goto LABEL_152;
        case 1uLL:
          uint64_t v129 = 2;
          goto LABEL_152;
        case 2uLL:
          uint64_t v129 = 3;
LABEL_152:
          if (!v9) {
            goto LABEL_241;
          }
          goto LABEL_162;
        case 3uLL:
          if (v9) {
            *(unsigned char *)(v9 + _Block_object_dispose(&a9, 8) = 1;
          }
          BOOL v131 = !os_variant_has_internal_content() || !sub_1003F47A0();
          if (v9)
          {
            *(unsigned char *)(v9 + 13) = v131;
            uint64_t v129 = 4;
LABEL_162:
            *(void *)(v9 + 24) = v129;
            uint64_t v130 = sub_10042530C(*(void *)(a1 + 64));
LABEL_163:
            *(void *)(v9 + 16_Block_object_dispose(&a9, 8) = v130;
          }
          else
          {
LABEL_241:
            sub_10042530C(*(void *)(a1 + 64));
          }
LABEL_164:
          sub_100424C88(*(void **)(a1 + 64));
          __int16 v132 = (id *)objc_claimAutoreleasedReturnValue();
          id v133 = (__CFString *)sub_1003D4CF0(v132);

          id v134 = ASDLogHandleForCategory();
          BOOL v135 = os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT);
          if (((unint64_t)v133 & 0xFFFFFFFFFFFFFFFDLL) == 1)
          {
            if (!v135) {
              goto LABEL_174;
            }
            id v137 = *(id *)(a1 + 72);
            if (v137) {
              id v137 = objc_getProperty(v137, v136, 80, 1);
            }
            id v138 = v137;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v138;
            __int16 v204 = 2048;
            v205 = v133;
            v139 = "[%@]: Allowing access to expensive network (uint64_t result = %ld)";
          }
          else
          {
            if (!v135) {
              goto LABEL_174;
            }
            id v140 = *(id *)(a1 + 72);
            if (v140) {
              id v140 = objc_getProperty(v140, v136, 80, 1);
            }
            id v138 = v140;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v138;
            __int16 v204 = 2048;
            v205 = v133;
            v139 = "[%@]: Denying access to expensive network (uint64_t result = %ld)";
          }
          _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, v139, buf, 0x16u);

LABEL_174:
          if (v9) {
            *(unsigned char *)(v9 + 11) = ((unint64_t)v133 & 0xFFFFFFFFFFFFFFFDLL) == 1;
          }
          sub_100424C88(*(void **)(a1 + 64));
          long long v141 = (id *)objc_claimAutoreleasedReturnValue();
          long long v142 = (__CFString *)sub_1003D4C34(v141);

          long long v143 = ASDLogHandleForCategory();
          BOOL v144 = os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT);
          if (((unint64_t)v142 & 0xFFFFFFFFFFFFFFFDLL) == 1)
          {
            if (!v144) {
              goto LABEL_186;
            }
            id v146 = *(id *)(a1 + 72);
            if (v146) {
              id v146 = objc_getProperty(v146, v145, 80, 1);
            }
            id v147 = v146;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v147;
            __int16 v204 = 2048;
            v205 = v142;
            v148 = "[%@]: Allowing access to low data network (uint64_t result = %ld)";
          }
          else
          {
            if (!v144) {
              goto LABEL_186;
            }
            id v149 = *(id *)(a1 + 72);
            if (v149) {
              id v149 = objc_getProperty(v149, v145, 80, 1);
            }
            id v147 = v149;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v147;
            __int16 v204 = 2048;
            v205 = v142;
            v148 = "[%@]: Denying access to low data network (uint64_t result = %ld)";
          }
          _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, v148, buf, 0x16u);

LABEL_186:
          if (v9) {
            *(unsigned char *)(v9 + 10) = ((unint64_t)v142 & 0xFFFFFFFFFFFFFFFDLL) == 1;
          }
          sub_100424C88(*(void **)(a1 + 64));
          id v150 = (id *)objc_claimAutoreleasedReturnValue();
          v151 = (__CFString *)sub_1003D4DAC(v150);

          unsigned int v152 = ASDLogHandleForCategory();
          BOOL v153 = os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT);
          if ((v151 & 2) != 0)
          {
            if (!v153) {
              goto LABEL_198;
            }
            id v158 = *(id *)(a1 + 72);
            if (v158) {
              id v158 = objc_getProperty(v158, v154, 80, 1);
            }
            id v156 = v158;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v156;
            __int16 v204 = 2048;
            v205 = v151;
            id v157 = "[%@]: Allowing access to cellular (mask = %lx)";
          }
          else
          {
            if (!v153) {
              goto LABEL_198;
            }
            id v155 = *(id *)(a1 + 72);
            if (v155) {
              id v155 = objc_getProperty(v155, v154, 80, 1);
            }
            id v156 = v155;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v156;
            __int16 v204 = 2048;
            v205 = v151;
            id v157 = "[%@]: Denying access to cellular (mask = %lx)";
          }
          _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, v157, buf, 0x16u);

LABEL_198:
          if (v9) {
            *(unsigned char *)(v9 + 9) = (v151 & 2) >> 1;
          }
          v160 = +[AppInstallationEvent downloadLoadURLEventMetricsOverlayWithInstall:*(void *)(a1 + 64)];
          if (v9) {
            objc_setProperty_atomic((id)v9, v159, v160, 120);
          }

          v201 = v7;
          uint64_t v21 = (__CFString *)sub_100336778([AssetRequest alloc], (uint64_t)v7, (void *)v9);
          [(__CFString *)v21 setCachePolicy:1];
          uint64_t v161 = sub_10026E95C(*(void **)(a1 + 80), @"variant_id");
          id v162 = (void *)v161;
          v163 = @"Universal";
          if (v161) {
            v163 = (__CFString *)v161;
          }
          uint64_t v164 = v163;

          id v165 = sub_10026E91C(*(id *)(a1 + 80), @"package_type");
          v166 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
          {
            id v168 = *(id *)(a1 + 72);
            if (v168) {
              id v168 = objc_getProperty(v168, v167, 80, 1);
            }
            id v169 = v168;
            *(_DWORD *)long long buf = 138412802;
            id v203 = v169;
            __int16 v204 = 2114;
            v205 = v164;
            __int16 v206 = 1024;
            BOOL v207 = v165 == (id)1;
            _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEFAULT, "[%@] Downloading package with variant: %{public}@, isDelta: %{BOOL}d", buf, 0x1Cu);
          }
          v170 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
          {
            id v172 = *(id *)(a1 + 72);
            if (v172) {
              id v172 = objc_getProperty(v172, v171, 80, 1);
            }
            id v173 = v172;
            *(_DWORD *)long long buf = 138412546;
            id v203 = v173;
            __int16 v204 = 2114;
            v205 = v21;
            _os_log_impl((void *)&_mh_execute_header, v170, OS_LOG_TYPE_DEFAULT, "[%@] Will download package using request: %{public}@", buf, 0x16u);
          }
          id v175 = *(id *)(a1 + 72);
          if (v175) {
            id v175 = objc_getProperty(v175, v174, 80, 1);
          }
          BOOL v176 = v165 == (id)1;
          id v177 = v175;
          id v7 = v201;
          +[QALogger assetWithUrl:v201 variant:v164 isDelta:v176 isParallel:0 logKey:v177];

          break;
        default:
          uint64_t v130 = sub_10042530C(*(void *)(a1 + 64));
          if (!v9) {
            goto LABEL_164;
          }
          goto LABEL_163;
      }
    }
  }
  else
  {
    id v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v179 = *(id *)(a1 + 72);
      if (v179) {
        id v179 = objc_getProperty(v179, v20, 80, 1);
      }
      id v180 = v179;
      id v181 = (__CFString *)[*(id *)(a1 + 80) databaseID];
      *(_DWORD *)long long buf = 138412546;
      id v203 = v180;
      __int16 v204 = 2048;
      v205 = v181;

    uint64_t v9 = };
    if (a3)
    {
      ASDErrorWithDescription();
      uint64_t v21 = 0;
      *a3 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v21 = 0;
    }
  }

  return v21;
}

id *sub_1002AC440(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  self;
  uint64_t v5 = sub_1002AC770((id *)[AppInstallDownloadResponse alloc], a2, (void *)1, 0, 0, v4);

  return v5;
}

id *sub_1002AC770(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)AppInstallDownloadResponse;
    id v15 = (id *)objc_msgSendSuper2(&v17, "init");
    a1 = v15;
    if (v15)
    {
      objc_storeStrong(v15 + 1, a5);
      a1[3] = a2;
      a1[7] = a3;
      objc_storeStrong(a1 + 8, a4);
      objc_storeStrong(a1 + 4, a6);
    }
  }

  return a1;
}

id sub_1002AC8A4(id a1, void *a2, char a3)
{
  id v5 = a2;
  if (a1)
  {
    v26.receiver = a1;
    v26.super_class = (Class)RestoreInfo;
    a1 = objc_msgSendSuper2(&v26, "init");
    if (a1)
    {
      uint64_t v6 = objc_opt_new();
      id v7 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v6;

      uint64_t v8 = objc_opt_new();
      uint64_t v9 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v8;

      *((void *)a1 + 5) = 0;
      *((void *)a1 + 6) = 0;
      *((unsigned char *)a1 + _Block_object_dispose(&a9, 8) = a3;
      sub_10030B11C();
      objc_super v10 = (id *)objc_claimAutoreleasedReturnValue();
      *((void *)a1 + 2) = sub_10030BCBC(v10, @"p2-content-restore/max-item-count", 5);

      id v11 = v5;
      char v12 = sub_1002B6864();
      id v13 = objc_alloc_init(_TtC9appstored6LogKey);
      id v14 = +[ActiveAccountObserver sharedInstance];
      id v15 = [v14 oneAccountDSIDWithLogKey:v13];
      id v16 = objc_opt_new();
      objc_super v17 = objc_opt_new();
      id v18 = sub_1003E0BA4();
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_1002ACB8C;
      v27[3] = &unk_1005257E8;
      v27[4] = a1;
      id v19 = v15;
      id v28 = v19;
      id v20 = v11;
      id v29 = v20;
      char v32 = v12;
      id v21 = v17;
      id v30 = v21;
      id v22 = v16;
      id v31 = v22;
      [v18 modifyUsingTransaction:v27];

      if ([v22 count])
      {
        uint64_t v23 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          id v25 = [v22 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138543362;
          uint64_t v34 = v25;
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Hard failing coordinators for apps: [%{public}@]", buf, 0xCu);
        }
        sub_1002BA214((uint64_t)RestoreManager, v22, @"Restore preflight accounts");
      }
    }
  }

  return a1;
}

uint64_t sub_1002ACB8C(uint64_t a1, void *a2)
{
  id v27 = a2;
  id v28 = objc_opt_new();
  objc_super v26 = +[RestoreAppInstall defaultProperties];
  id v25 = sub_1003F8D50();
  v41[0] = v25;
  id v3 = sub_1003F8E9C();
  v41[1] = v3;
  id v4 = +[NSArray arrayWithObjects:v41 count:2];
  id v5 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v4];
  v42[0] = v5;
  uint64_t v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054C198];
  v40[0] = v6;
  id v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054C1B0];
  v40[1] = v7;
  uint64_t v8 = +[NSArray arrayWithObjects:v40 count:2];
  uint64_t v9 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v8];
  v42[1] = v9;
  objc_super v10 = +[NSArray arrayWithObjects:v42 count:2];
  id v11 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v10];

  char v12 = [v27 connection];
  id v13 = sub_1002FF548((uint64_t)AppInstallEntity, v12, v11);

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1002ACFA4;
  v29[3] = &unk_1005257C0;
  id v14 = v27;
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = *(void **)(a1 + 40);
  id v30 = v14;
  uint64_t v31 = v15;
  id v32 = v16;
  id v33 = *(id *)(a1 + 48);
  char v37 = *(unsigned char *)(a1 + 72);
  id v34 = *(id *)(a1 + 56);
  id v35 = *(id *)(a1 + 64);
  id v17 = v28;
  id v36 = v17;
  [v13 enumeratePersistentIDsAndProperties:v26 usingBlock:v29];
  if ([v17 count])
  {
    id v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v24 = [v17 count];
      *(_DWORD *)long long buf = 134217984;
      id v39 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failing %ld restores due to account failures", buf, 0xCu);
    }

    id v19 = sub_10023845C(v14, v17);
    if (*(void *)(a1 + 48)) {
      [*(id *)(a1 + 64) addObjectsFromArray:v17];
    }
  }
  if (objc_msgSend(*(id *)(a1 + 56), "count", v25))
  {
    id v20 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = [*(id *)(a1 + 56) count];
      *(_DWORD *)long long buf = 134217984;
      id v39 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Importing %ld restores that are waiting to bootstrap later", buf, 0xCu);
    }

    id v22 = sub_10023845C(v14, *(void **)(a1 + 56));
  }

  return 1;
}

void sub_1002ACFA4(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  uint64_t v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v7 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:v6];
  uint64_t v8 = [(SQLiteEntity *)v6 valueForProperty:@"bootstrapped"];
  id v9 = [v8 integerValue];
  id v10 = sub_10026E91C(v6, @"priority");
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v38 = v7;
  id v36 = v9;
  if (v10 || v11 && (*(unsigned char *)(v11 + 8) & 1) != 0)
  {
    uint64_t v12 = 40;
    uint64_t v13 = 24;
  }
  else
  {
    uint64_t v12 = 48;
    uint64_t v13 = 32;
  }
  char v37 = v8;
  id v39 = *(id *)(v11 + v13);
  id v14 = [RestoreAppInstall alloc];
  uint64_t v15 = +[RestoreAppInstall defaultProperties];
  id v16 = [(SQLiteMemoryEntity *)v14 initWithDatabaseEntity:v6 properties:v15];

  id v17 = *(void **)(a1 + 48);
  id v40 = 0;
  id v18 = sub_1002B418C((uint64_t)RestoreManager, v16, v17, &v40);
  id v19 = v40;
  if (*(void *)(a1 + 56)) {
    BOOL v20 = v18 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  char v21 = !v20;
  if (v20)
  {
    if (!v18) {
      goto LABEL_30;
    }
LABEL_18:
    id v27 = objc_msgSend(v18, "ams_DSID");
    id v28 = [v39 objectForKeyedSubscript:v27];
    if (!v28)
    {
      id v28 = objc_opt_new();
      [v39 setObject:v28 forKeyedSubscript:v27];
    }
    uint64_t v29 = *(void *)(a1 + 40);
    if (v29) {
      ++*(void *)(v29 + v12);
    }
    id v30 = v28;
    if (*(unsigned char *)(a1 + 88)) {
      id v30 = *(void **)(a1 + 64);
    }
    [v30 addObject:v16];

    char v21 = 0;
    id v32 = v37;
    uint64_t v31 = v38;
    goto LABEL_25;
  }
  id v22 = objc_msgSend(v18, "ams_DSID");
  unsigned __int8 v23 = [v22 isEqualToNumber:*(void *)(a1 + 56)];

  if (v23) {
    goto LABEL_18;
  }
  id v24 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    id v25 = objc_msgSend(v18, "ams_DSID");
    uint64_t v26 = *(void *)(a1 + 56);
    *(_DWORD *)long long buf = 138412802;
    CFStringRef v42 = v38;
    __int16 v43 = 2114;
    uint64_t v44 = v25;
    __int16 v45 = 2114;
    uint64_t v46 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] Skipping restore accountID: %{public}@ not matching accountID: %{public}@", buf, 0x20u);
  }
LABEL_30:
  if (ASDErrorIsEqual())
  {
    sub_1003B8168(v16, v19);
    [*(id *)(a1 + 72) addObject:v16];
    [*(id *)(a1 + 80) addObject:v16];
    id v32 = v37;
    uint64_t v31 = v38;
    goto LABEL_42;
  }
  if (v19) {
    char v35 = v21;
  }
  else {
    char v35 = 1;
  }
  id v32 = v37;
  uint64_t v31 = v38;
  if (v35)
  {
LABEL_25:
    if ((v21 & 1) != 0 || v36 == (id)2) {
      goto LABEL_42;
    }
    if (*(unsigned char *)(a1 + 88))
    {
      [(SQLiteMemoryEntity *)v16 setValue:&off_10054C1C8 forProperty:@"bootstrapped"];
      [(SQLiteEntity *)v6 setValue:&off_10054C1C8 forProperty:@"bootstrapped"];
      id v33 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v42 = v31;
        id v34 = "[%@] Bootstrap has been set as needing distributor";
LABEL_40:
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 0xCu);
      }
    }
    else
    {
      [(SQLiteMemoryEntity *)v16 setValue:&off_10054C198 forProperty:@"bootstrapped"];
      [(SQLiteEntity *)v6 setValue:&off_10054C198 forProperty:@"bootstrapped"];
      id v33 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v42 = v31;
        id v34 = "[%@] Bootstrap has been started";
        goto LABEL_40;
      }
    }

    goto LABEL_42;
  }
  sub_1003B8168(v16, v19);
  [*(id *)(a1 + 80) addObject:v16];
  if (ASDErrorIsEqual()) {
    [*(id *)(a1 + 72) addObject:v16];
  }
LABEL_42:
}

id sub_1002AD490(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)ImportJobsForDemotedAppsTask;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v4;

      *((unsigned char *)a1 + 4_Block_object_dispose(&a9, 8) = 1;
    }
  }

  return a1;
}

void sub_1002AD868(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)LSApplicationRecord);
  id v5 = [v3 bundleIdentifier];
  id v6 = [v4 initWithBundleIdentifierOfSystemPlaceholder:v5 error:0];

  if (v6)
  {
    objc_super v7 = *(unsigned __int8 **)(a1 + 32);
    id v8 = [v3 bundleIdentifier];
    if (v7)
    {
      id v9 = [objc_alloc((Class)ASDSystemAppMetadata) initWithBundleID:v8];
      [v9 setUserInitiated:v7[48]];
      id v10 = sub_10022889C();
      id v31 = v9;
      uint64_t v11 = +[NSArray arrayWithObjects:&v31 count:1];
      *(void *)&long long v25 = _NSConcreteStackBlock;
      *((void *)&v25 + 1) = 3221225472;
      uint64_t v26 = sub_1002AE320;
      id v27 = &unk_1005258B0;
      id v28 = v7;
      uint64_t v29 = (id *)v8;
      [v10 installSystemApps:v11 onPairedDevice:0 withReplyHandler:&v25];
    }
  }
  else
  {
    uint64_t v12 = sub_10035B760((id *)[DemotedApplication alloc], v3);
    uint64_t v13 = v12;
    if (!v12) {
      goto LABEL_9;
    }
    if (v12[10] != (id)4) {
      goto LABEL_9;
    }
    if (!*(void *)(a1 + 32)) {
      goto LABEL_19;
    }
    id v14 = v12;
    id v31 = 0;
    id v32 = &v31;
    uint64_t v33 = 0x2020000000;
    uint64_t v34 = 0;
    uint64_t v15 = sub_10001A308();
    *(void *)&long long v25 = _NSConcreteStackBlock;
    *((void *)&v25 + 1) = 3221225472;
    uint64_t v26 = sub_1002AE0D8;
    id v27 = &unk_100525888;
    id v16 = v14;
    uint64_t v29 = &v31;
    uint64_t v30 = 0;
    id v28 = (unsigned __int8 *)v16;
    [v15 readUsingSession:&v25];

    id v17 = v32[3];
    _Block_object_dispose(&v31, 8);

    if (!v17)
    {
LABEL_19:
      id v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v23 = [v3 bundleIdentifier];
        LODWORD(v25) = 138543362;
        *(void *)((char *)&v25 + 4) = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "No update available for 32-bit app: %{public}@", (uint8_t *)&v25, 0xCu);
      }
      if (*(unsigned char *)(*(void *)(a1 + 32) + 48))
      {
        id v24 = v13[1];
        IXDisplayUserPresentableErrorForApp();
      }
    }
    else
    {
LABEL_9:
      id v18 = sub_10035B8FC((uint64_t)v13);
      id v19 = v18;
      if (*(unsigned char *)(*(void *)(a1 + 32) + 48)) {
        BOOL v20 = &off_10054C1E0;
      }
      else {
        BOOL v20 = (_UNKNOWN **)&__kCFBooleanTrue;
      }
      char v21 = &off_100525F40;
      if (*(unsigned char *)(*(void *)(a1 + 32) + 48)) {
        char v21 = &off_100525EF8;
      }
      objc_msgSend(v18, "setValue:forProperty:", v20, *v21, v25, v26, v27);
      if (v19) {
        [*(id *)(a1 + 40) addObject:v19];
      }
    }
  }
}

void sub_1002ADC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002ADC38(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([*(id *)(*(void *)(a1 + 32) + 40) count])
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = objc_opt_class();
      objc_super v7 = *(void **)(*(void *)(a1 + 32) + 40);
      id v8 = v6;
      id v9 = [v7 componentsJoinedByString:@", "];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v38 = v6;
      __int16 v39 = 2114;
      id v40 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Checking if we can re-hydrate bundleIDs: [%{public}@]", buf, 0x16u);
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v10 = *(id *)(*(void *)(a1 + 32) + 40);
    id v11 = [v10 countByEnumeratingWithState:&v31 objects:v36 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v32;
      do
      {
        for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void *)(*((void *)&v31 + 1) + 8 * i);
          id v17 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v15 allowPlaceholder:1 error:0];
          id v18 = v17;
          if (v17
            && (([v17 isPlaceholder] & 1) != 0
             || [v18 installType] == (id)7
             || [v18 installType] == (id)9))
          {
            (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v31 objects:v36 count:16];
      }
      while (v12);
    }
  }
  else
  {
    BOOL v20 = +[LSApplicationRecord enumeratorWithOptions:64];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1002ADFA4;
    v30[3] = &unk_100525838;
    v30[4] = *(void *)(a1 + 32);
    [v20 setFilter:v30];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v10 = v20;
    char v21 = (char *)[v10 countByEnumeratingWithState:&v26 objects:v35 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v27;
      do
      {
        for (uint64_t j = 0; j != v22; ++j)
        {
          if (*(void *)v27 != v23) {
            objc_enumerationMutation(v10);
          }
          (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        }
        id v22 = (char *)[v10 countByEnumeratingWithState:&v26 objects:v35 count:16];
      }
      while (v22);
    }
  }
}

BOOL sub_1002ADFA4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 installType] == (id)10 && objc_msgSend(v2, "placeholderFailureReason") == (id)11)
  {
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = objc_opt_class();
      id v5 = v4;
      id v6 = [v2 bundleIdentifier];
      int v9 = 138543618;
      id v10 = v4;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}@] Promoting previously failed upgrade with bundleID: %{public}@", (uint8_t *)&v9, 0x16u);
    }
    BOOL v7 = 1;
  }
  else
  {
    BOOL v7 = [v2 installType] == (id)9;
  }

  return v7;
}

void sub_1002AE0D8(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  if (v3) {
    id v5 = *(void **)(v3 + 8);
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;
  BOOL v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v6];
  v20[0] = v7;
  id v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_state" equalToValue:&off_10054C1E0];
  v20[1] = v8;
  int v9 = +[NSNumber numberWithUnsignedLongLong:a1[6]];
  id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"store_software_version_id" value:v9 comparisonType:5];
  v20[2] = v10;
  __int16 v11 = +[NSArray arrayWithObjects:v20 count:3];
  id v12 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v11];

  uint64_t v13 = [v4 connection];

  id v14 = sub_1002FF3DC((uint64_t)AppUpdateEntity, v13, v12);

  if (a1[6])
  {
    uint64_t v15 = [AppUpdateMemoryEntity alloc];
    CFStringRef v19 = @"store_software_version_id";
    id v16 = +[NSArray arrayWithObjects:&v19 count:1];
    id v17 = [(SQLiteMemoryEntity *)v15 initWithDatabaseEntity:v14 properties:v16];
    id v18 = [(AppUpdateMemoryEntity *)v17 evid];
    *(void *)(*(void *)(a1[5] + 8) + 24) = [v18 unsignedLongLongValue];
  }
  else
  {
    *(void *)(*(void *)(a1[5] + 8) + 24) = v14 != 0;
  }
}

void sub_1002AE320(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = ASDLogHandleForCategory();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v9 = objc_opt_class();
      uint64_t v10 = *(void *)(a1 + 40);
      int v15 = 138543874;
      id v16 = v9;
      __int16 v17 = 2114;
      uint64_t v18 = v10;
      __int16 v19 = 2114;
      id v20 = v6;
      id v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Promoting system app %{public}@ failed: %{public}@", (uint8_t *)&v15, 0x20u);
LABEL_6:
    }
  }
  else if (v8)
  {
    id v12 = objc_opt_class();
    uint64_t v13 = *(void *)(a1 + 40);
    id v11 = v12;
    id v14 = [v5 firstObject];
    int v15 = 138543874;
    id v16 = v12;
    __int16 v17 = 2114;
    uint64_t v18 = v13;
    __int16 v19 = 2114;
    id v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@]: Promoting system app %{public}@ (%{public}@)", (uint8_t *)&v15, 0x20u);

    goto LABEL_6;
  }
}

void *sub_1002AE594(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = a2;
    id v9 = [objc_alloc((Class)NSDictionary) initWithContentsOfURL:v8 error:a4];

    if (v9)
    {
      uint64_t v10 = sub_1002AE640(a1, v9, v7, 0);
    }
    else
    {

      uint64_t v10 = 0;
    }
    a1 = v10;
  }
  return a1;
}

void *sub_1002AE640(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    v38.receiver = a1;
    v38.super_class = (Class)ODRManifest;
    a1 = objc_msgSendSuper2(&v38, "initWithDatabaseID:propertyValues:externalPropertyValues:", 0, &__NSDictionary0__struct, &__NSDictionary0__struct);
    if (a1)
    {
      uint64_t v9 = [v7 objectForKeyedSubscript:@"softwareVersionExternalIdentifier"];
      if (!v9)
      {
        uint64_t v9 = [v7 objectForKeyedSubscript:@"betaExternalVersionId"];
      }
      [a1 setValue:v9 forProperty:@"evid"];
      [a1 setValue:v8 forProperty:@"bundle_id"];
      uint64_t v10 = +[NSNumber numberWithInt:a4 == 1];
      [a1 setValue:v10 forProperty:@"is_store_based"];

      id v11 = [v7 objectForKeyedSubscript:@"itemId"];
      [a1 setValue:v11 forProperty:@"item_id"];

      id v12 = [v7 objectForKeyedSubscript:@"last_modification_date"];
      uint64_t v13 = v12;
      long long v33 = (void *)v9;
      if (v12)
      {
        id v14 = v12;
      }
      else
      {
        id v14 = +[NSDate date];
      }
      id v15 = v14;

      [a1 setValue:v15 forProperty:@"local_cache_allowed"];
      id v16 = [v7 objectForKeyedSubscript:@"local-cache-allowed"];
      [a1 setValue:v16 forProperty:@"local_cache_allowed"];

      __int16 v17 = [v7 objectForKeyedSubscript:@"storage_id"];
      uint64_t v18 = v17;
      long long v32 = v15;
      if (v17)
      {
        id v19 = v17;
      }
      else
      {
        id v20 = +[NSUUID UUID];
        id v19 = [v20 UUIDString];
      }
      [a1 setValue:v19 forProperty:@"storage_id"];
      char v21 = [v7 objectForKeyedSubscript:@"thinningVariant"];
      [a1 setValue:v21 forProperty:@"thinning_variant"];

      id v22 = objc_opt_new();
      uint64_t v23 = [v7 objectForKeyedSubscript:@"resources"];
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v24 = [v23 countByEnumeratingWithState:&v34 objects:v39 count:16];
      if (v24)
      {
        id v25 = v24;
        uint64_t v26 = *(void *)v35;
        do
        {
          for (uint64_t i = 0; i != v25; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v35 != v26) {
              objc_enumerationMutation(v23);
            }
            long long v28 = sub_100297664([ODRAssetPack alloc], *(void **)(*((void *)&v34 + 1) + 8 * i), v8);
            [v22 addObject:v28];
          }
          id v25 = [v23 countByEnumeratingWithState:&v34 objects:v39 count:16];
        }
        while (v25);
      }
      uint64_t v29 = +[NSArray arrayWithArray:v22];
      uint64_t v30 = (void *)a1[4];
      a1[4] = v29;
    }
  }

  return a1;
}

void *sub_1002AEA04(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = +[NSPropertyListSerialization propertyListWithData:a2 options:0 format:0 error:0];
    if (v8)
    {
      uint64_t v9 = sub_1002AE640(a1, v8, v7, a4);
    }
    else
    {

      uint64_t v9 = 0;
    }
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id sub_1002AEAA8(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"bundle_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002AEAE0(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E82C(a1, @"evid");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002AEB18(void *a1)
{
  if (!a1 || !sub_10026E7EC(a1, @"is_store_based")) {
    return 0;
  }
  return sub_10026E7EC(a1, @"local_cache_allowed");
}

id sub_1002AEB78(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"item_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002AEBB0(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"storage_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002AEBE8(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"thinning_variant");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002AEC20(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"version");
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_1002AEC58(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = objc_opt_new();
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v3 = v1[4];
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = sub_100297AC0(*(void **)(*((void *)&v10 + 1) + 8 * i));
          objc_msgSend(v2, "addObject:", v8, (void)v10);
        }
        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }

    uint64_t v1 = +[NSArray arrayWithArray:v2];
  }
  return v1;
}

id *sub_1002AEDB4(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[4];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002AEDEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v4 = *(id *)(a1 + 32);
    id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v13;
      while (2)
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v6) {
            objc_enumerationMutation(v4);
          }
          id v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          uint64_t v9 = sub_100297AC0(v8);
          unsigned __int8 v10 = objc_msgSend(v9, "isEqualToString:", v3, (void)v12);

          if (v10)
          {
            id v5 = v8;
            goto LABEL_12;
          }
        }
        id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

uint64_t sub_1002AEF4C(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = [a1 propertyValues];
  uint64_t v4 = +[NSPropertyListSerialization dataWithPropertyList:v3 format:100 options:0 error:a2];

  return v4;
}

void sub_1002AEFBC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

LogPushConnection *sub_1002AF030(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  uint64_t v6 = objc_alloc_init(LogPushConnection);
  sub_1002B3378((uint64_t)v6, v5);

  id v7 = sub_10025C1EC(v4);

  sub_1002B3390((uint64_t)v6, v7);
  return v6;
}

id *sub_1002AF2C4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_29;
  }
  v35.receiver = a1;
  v35.super_class = (Class)SystemAppLookupItem;
  a1 = (id *)objc_msgSendSuper2(&v35, "init");
  if (!a1) {
    goto LABEL_29;
  }
  id v7 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = [v7 copy];
    id v9 = a1[9];
    a1[9] = v8;
  }
  unsigned __int8 v10 = [v6 objectForKeyedSubscript:@"_IsZipStreamable"];

  if (objc_opt_respondsToSelector()) {
    *((unsigned char *)a1 + _Block_object_dispose(&a9, 8) = [v10 BOOLValue];
  }
  long long v11 = [v6 objectForKeyedSubscript:@"_DownloadSize"];

  long long v12 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v13 = [v11 copy];
    id v14 = a1[4];
    a1[4] = v13;
  }
  long long v15 = [v6 objectForKeyedSubscript:@"_MeasurementAlgorithm"];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v15 isEqualToString:@"SHA-256"])
  {
    id v16 = a1[6];
    __int16 v17 = &off_10054C1F8;
  }
  else
  {
    id v16 = a1[6];
    __int16 v17 = &off_10054C210;
  }
  a1[6] = v17;

  id v18 = [v6 objectForKeyedSubscript:@"_Measurement"];
  self;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v19 = v18;
    id v20 = sub_1003A4450((uint64_t)HashDigest, (unsigned __int8 *)[v19 bytes], (uint64_t)objc_msgSend(v19, "length"));
    long long v36 = v20;
    char v21 = +[NSArray arrayWithObjects:&v36 count:1];

    long long v12 = &_s7Network11NWInterfaceV13InterfaceTypeO8loopbackyA2EmFWC_ptr;
  }
  else
  {
    char v21 = 0;
  }

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v22 = [v21 copy];
    id v23 = a1[7];
    a1[7] = v22;
  }
  id v24 = [v6 objectForKeyedSubscript:@"_StartOfDataRange"];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v25 = [v24 copy];
    id v26 = a1[3];
    a1[3] = v25;
LABEL_23:

    goto LABEL_24;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v26 = +[NSScanner scannerWithString:v24];
    long long v36 = 0;
    if ([v26 scanUnsignedLongLong:&v36])
    {
      uint64_t v27 = [v12[508] numberWithUnsignedLongLong:v36];
      id v28 = a1[3];
      a1[3] = (id)v27;
    }
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v29 = [v6 objectForKeyedSubscript:@"AppBundleID"];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_storeStrong(a1 + 2, v29);
    id v30 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifierOfSystemPlaceholder:v29 error:0];
    long long v31 = [v30 localizedName];

    if (v31)
    {
      id v32 = [v31 copy];
      id v33 = a1[8];
      a1[8] = v32;
    }
  }

LABEL_29:
  return a1;
}

id sub_1002AF774(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)ODRAppReviewClient;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      id v4 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ODRAppReviewProtocol];
      [v3 setExportedInterface:v4];

      id v5 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ODRAppReviewProtocol];
      [v3 setRemoteObjectInterface:v5];

      [v3 setExportedObject:a1];
      [v3 resume];
      id v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id v8 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Created the app review client.", v8, 2u);
      }
    }
  }

  return a1;
}

BOOL sub_1002AFBBC(void *a1, uint64_t *a2)
{
  id v4 = (void *)a1[4];
  id v3 = (void *)a1[5];
  id v5 = (void *)a1[6];
  if (v4) {
    return sub_10024A6D8(a2, v3, v4, v5, 0);
  }
  else {
    return sub_100248BE8(a2, v3, v5, 0);
  }
}

id *sub_1002AFBE4(id *a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    unsigned __int8 v10 = a2;
    id v5 = a3;
    id v6 = a2;
    id v7 = +[NSArray arrayWithObjects:&v10 count:1];

    id v8 = sub_1002AFCAC(v3, v7, v5);
    id v3 = v8;
  }
  return v3;
}

id *sub_1002AFCAC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v30.receiver = a1;
    v30.super_class = (Class)PurchaseBatch;
    id v7 = (id *)objc_msgSendSuper2(&v30, "init");
    a1 = v7;
    if (v7)
    {
      objc_storeStrong(v7 + 5, a3);
      id v8 = [v5 copy];
      id v9 = a1[1];
      a1[1] = v8;

      id v10 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(a1[1], "count"));
      id v11 = a1[2];
      a1[2] = v10;

      long long v12 = [v5 firstObject];
      unsigned int v13 = [v12 isMachineBased];
      if (v13)
      {
        id v14 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          long long v15 = [v12 logKey];
          *(_DWORD *)long long buf = 138412290;
          id v33 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] Created batch for machine based purchases", buf, 0xCu);
        }
      }
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v16 = a1[1];
      id v17 = [v16 countByEnumeratingWithState:&v26 objects:v31 count:16];
      if (v17)
      {
        id v18 = v17;
        uint64_t v19 = *(void *)v27;
        do
        {
          for (uint64_t i = 0; i != v18; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v27 != v19) {
              objc_enumerationMutation(v16);
            }
            char v21 = *(void **)(*((void *)&v26 + 1) + 8 * i);
            if (v13 != objc_msgSend(v21, "isMachineBased", (void)v26))
            {
              id v23 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
              {
                id v24 = [v21 logKey];
                *(_DWORD *)long long buf = 138412290;
                id v33 = v24;
                _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "[%@] Cannot mix machine based and non-machine based purchases", buf, 0xCu);
              }
              id v25 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:@"Cannot mix machine based and non-machine based purchases" userInfo:0];
              objc_exception_throw(v25);
            }
          }
          id v18 = [v16 countByEnumeratingWithState:&v26 objects:v31 count:16];
        }
        while (v18);
      }
    }
  }

  return a1;
}

id *sub_1002AFF78(id *a1)
{
  if (a1)
  {
    a1 = [a1[1] objectEnumerator];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1002AFFAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (!v3)
    {
      id v4 = ASDErrorWithDescription();
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = [*(id *)(a1 + 8) objectEnumerator];
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v23 count:16];
    if (v6)
    {
      uint64_t v8 = *(void *)v16;
      *(void *)&long long v7 = 138412546;
      long long v14 = v7;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          if (objc_msgSend(v10, "purchaseState", v14) != (id)2)
          {
            id v11 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              long long v12 = [v10 logKey];
              *(_DWORD *)long long buf = v14;
              id v20 = v12;
              __int16 v21 = 2114;
              id v22 = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@] Canceling purchase due to error: %{public}@", buf, 0x16u);
            }
            sub_1002B01CC(a1, v4, v10);
          }
        }
        id v6 = [v5 countByEnumeratingWithState:&v15 objects:v23 count:16];
      }
      while (v6);
    }

    id v13 = *(id *)(a1 + 16);
    objc_sync_enter(v13);
    sub_1002B07C8(a1);
    objc_sync_exit(v13);
  }
}

void sub_1002B01B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002B01CC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  [v5 setPurchaseState:2];
  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    long long v7 = [v5 logKey];
    *(_DWORD *)long long buf = 138412290;
    double v52 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Canceling the install coordinator for the failed purchase…", buf, 0xCu);
  }
  uint64_t v8 = [v5 coordinator];
  __int16 v43 = v8;
  if (v8 && ([v8 isComplete] & 1) == 0)
  {
    id v9 = [v4 domain];
    id v10 = [v4 code];
    id v11 = ASDErrorWithSafeUserInfo();
    long long v12 = [v11 userInfo];
    id v13 = +[NSError errorWithDomain:v9 code:v10 userInfo:v12];
    id v48 = 0;
    LOBYTE(v10) = [v43 cancelForReason:v13 client:1 error:&v48];
    id v42 = v48;
    if ((v10 & 1) == 0)
    {
      long long v14 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v40 = [v5 logKey];
        *(_DWORD *)long long buf = 138412546;
        double v52 = v40;
        __int16 v53 = 2114;
        id v54 = v42;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%@] Failed to cancel the install coordinator for the failed purchase: %{public}@", buf, 0x16u);
      }
    }
  }
  else
  {
    id v42 = 0;
  }
  long long v15 = objc_opt_new();
  long long v16 = sub_1003697F0(v4);
  [v15 setObject:v16 forKeyedSubscript:@"error"];

  [v15 setObject:&off_10054C228 forKeyedSubscript:@"finalPhase"];
  long long v17 = [v5 logCode];
  [v15 setObject:v17 forKeyedSubscript:@"installCode"];

  long long v18 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v5 isUserInitiated]);
  [v15 setObject:v18 forKeyedSubscript:@"isUserInitiated"];

  uint64_t v19 = [v5 itemID];
  [v15 setObject:v19 forKeyedSubscript:@"itemID"];

  id v20 = [v5 clientInfo];
  uint64_t v21 = [v20 bundleIdentifier];
  id v22 = (void *)v21;
  if (v21) {
    CFStringRef v23 = (const __CFString *)v21;
  }
  else {
    CFStringRef v23 = &stru_10052E4D8;
  }
  [v15 setObject:v23 forKeyedSubscript:@"responsibleClientID"];

  id v24 = sub_100369B58(v4);
  [v15 setObject:v24 forKeyedSubscript:@"serverDialogID"];

  id v25 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v5 expectedSoftwarePlatform]);
  [v15 setObject:v25 forKeyedSubscript:@"softwarePlatform"];

  long long v26 = [v5 account];
  long long v27 = objc_msgSend(v26, "ams_storefront");
  [v15 setObject:v27 forKeyedSubscript:@"storefront"];

  long long v28 = [v5 buyParams];
  v50[0] = AMSBuyParamPropertyExternalVersionId;
  v50[1] = AMSBuyParamPropertyAppExtVrsId;
  void v50[2] = AMSBuyParamPropertySoftwareExternalVersionId;
  +[NSArray arrayWithObjects:v50 count:3];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v29 = (id)objc_claimAutoreleasedReturnValue();
  id v30 = [v29 countByEnumeratingWithState:&v44 objects:v49 count:16];
  if (v30)
  {
    uint64_t v31 = *(void *)v45;
    while (2)
    {
      for (uint64_t i = 0; i != v30; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v45 != v31) {
          objc_enumerationMutation(v29);
        }
        uint64_t v33 = *(void *)(*((void *)&v44 + 1) + 8 * i);
        long long v34 = [v28 parameterForKey:v33];

        if (v34)
        {
          objc_super v35 = [v28 parameterForKey:v33];
          [v15 setObject:v35 forKeyedSubscript:@"externalVersionID"];

          goto LABEL_24;
        }
      }
      id v30 = [v29 countByEnumeratingWithState:&v44 objects:v49 count:16];
      if (v30) {
        continue;
      }
      break;
    }
  }
LABEL_24:

  sub_10040E9A0((uint64_t)Analytics, v15, 16);
  id v36 = objc_alloc_init((Class)ASDPurchaseResponseItem);
  long long v37 = [v5 bundleID];
  [v36 _setBundleID:v37];

  objc_super v38 = [v5 purchase];
  [v36 _setPurchase:v38];

  [v36 _setError:v4];
  [v36 _setSuccess:0];
  id v39 = *(id *)(a1 + 16);
  objc_sync_enter(v39);
  [*(id *)(a1 + 16) addObject:v36];
  objc_sync_exit(v39);
}

void sub_1002B07AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002B07C8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)ASDPurchaseResponse) initWithPurchaseResponseItems:*(void *)(a1 + 16)];
  id v3 = dispatch_get_global_queue(21, 0);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1002B0E48;
  v5[3] = &unk_1005218C0;
  void v5[4] = a1;
  id v6 = v2;
  id v4 = v2;
  dispatch_async(v3, v5);
}

void sub_1002B0890(uint64_t a1, void *a2, void *a3)
{
  id v28 = a2;
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v29 = v5;
    if ([v5 purchaseState] == (id)2)
    {
      long long v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = [v6 logKey];
        *(_DWORD *)long long buf = 138412290;
        objc_super v35 = v8;
        _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "[%@] Refusing to re-complete purchase", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v27 = a1;
      [v6 setPurchaseState:2];
      long long v7 = [v6 metricsType];
      id v9 = [v28 firstObject];
      id v10 = [v9 status];

      if (v10 != (id)1)
      {
        id v11 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "PurchaseInfo.metricsType wasn't set", buf, 2u);
        }
      }
      long long v32 = 0u;
      long long v33 = 0u;
      if ([v6 purchaseOnly]) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = 4;
      }
      long long v30 = 0uLL;
      long long v31 = 0uLL;
      id v13 = v28;
      id v14 = [v13 countByEnumeratingWithState:&v30 objects:v36 count:16];
      if (v14)
      {
        uint64_t v15 = *(void *)v31;
        do
        {
          for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v31 != v15) {
              objc_enumerationMutation(v13);
            }
            long long v17 = *(void **)(*((void *)&v30 + 1) + 8 * i);
            long long v18 = sub_100330828();
            uint64_t v19 = [v17 bundleID];
            id v20 = [v29 itemID];
            sub_1003319C0((uint64_t)v18, 1, v12, v19, v20, 1, [v7 unsignedCharValue]);
          }
          id v14 = [v13 countByEnumeratingWithState:&v30 objects:v36 count:16];
        }
        while (v14);
      }

      id v21 = [objc_alloc((Class)ASDPurchaseResponseItem) initWithResults:v13];
      id v22 = [v29 bundleID];
      [v21 _setBundleID:v22];

      CFStringRef v23 = [v29 itemID];
      [v21 _setItemID:v23];

      id v24 = [v29 purchase];
      [v21 _setPurchase:v24];

      [v21 _setSuccess:1];
      id v25 = *(id *)(v27 + 16);
      objc_sync_enter(v25);
      [*(id *)(v27 + 16) addObject:v21];
      id v26 = [*(id *)(v27 + 8) count];
      if (v26 == [*(id *)(v27 + 16) count]) {
        sub_1002B07C8(v27);
      }
      objc_sync_exit(v25);
    }
    id v6 = v29;
  }
}

void sub_1002B0C18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002B0C34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = v6;
  if (a1)
  {
    if ([v6 purchaseState] == (id)2)
    {
      uint64_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        id v9 = [v7 logKey];
        int v13 = 138412546;
        id v14 = v9;
        __int16 v15 = 2114;
        id v16 = v5;
        _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "[%@] Refusing to fail completed purchase (error was: %{public}@)", (uint8_t *)&v13, 0x16u);
      }
    }
    else
    {
      if (!v5)
      {
        ASDErrorWithDescription();
        id v5 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = [v7 logKey];
        int v13 = 138412546;
        id v14 = v12;
        __int16 v15 = 2114;
        id v16 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%@] Failing purchase with error: %{public}@", (uint8_t *)&v13, 0x16u);
      }
      sub_1002B01CC(a1, v5, v7);
      uint64_t v8 = *(id *)(a1 + 16);
      objc_sync_enter(v8);
      id v11 = [*(id *)(a1 + 8) count];
      if (v11 == [*(id *)(a1 + 16) count]) {
        sub_1002B07C8(a1);
      }
      objc_sync_exit(v8);
    }
  }
}

void sub_1002B0E2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B0E48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 32) + 16))();
}

void sub_1002B0E5C(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic_copy(a1, newValue, newValue, 32);
  }
}

id sub_1002B0ECC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init(XDCAppMetadata);
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    *(_WORD *)&v3->_has |= 0x10u;
    v3->_type = 0;
    unsigned __int8 v5 = [v2 hideUserPrompts];
    *(_WORD *)(v4 + 208) |= 0x800u;
    *(unsigned char *)(v4 + 206) = v5;
  }
  else
  {
    [v2 hideUserPrompts];
  }
  id v6 = [v2 manifestURL];

  if (v6)
  {
    long long v7 = [v6 absoluteString];
    sub_10032933C(v4, v7);
  }
  return (id)v4;
}

XDCAppMetadata *sub_1002B0FB8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init(XDCAppMetadata);
  uint64_t v4 = v3;
  if (v3)
  {
    *(_WORD *)&v3->_has |= 0x10u;
    v3->_type = 2;
  }
  unsigned __int8 v5 = [v2 bundleID];

  if (v5) {
    sub_100329204((uint64_t)v4, v5);
  }

  return v4;
}

id sub_1002B1064(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init(XDCAppMetadata);
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    *(_WORD *)&v3->_has |= 0x10u;
    v3->_type = 3;
  }
  unsigned __int8 v5 = [v2 account];
  id v6 = objc_msgSend(v5, "ams_DSID");

  if (v6)
  {
    id v7 = [v6 unsignedLongLongValue];
    if (v4)
    {
      *(_WORD *)(v4 + 208) |= 8u;
      *(void *)(v4 + 32) = v7;
    }
  }
  uint64_t v8 = [v2 account];
  id v9 = objc_msgSend(v8, "ams_altDSID");

  if (v9) {
    sub_1003291D4(v4, v9);
  }
  id v10 = [v2 account];
  id v11 = [v10 username];

  if (v11) {
    sub_1003291EC(v4, v11);
  }
  uint64_t v12 = [v2 artworkURL];

  if (v12)
  {
    int v13 = [v12 absoluteString];
    sub_100329234(v4, v13);
  }
  id v14 = [v2 betaBuildGroupID];

  if (v14) {
    sub_100329354(v4, v14);
  }
  __int16 v15 = [v2 bundleID];

  if (v15) {
    sub_100329204(v4, v15);
  }
  id v16 = [v2 externalVersionIdentifier];

  if (v16)
  {
    id v17 = [v16 unsignedLongLongValue];
    if (v4)
    {
      *(_WORD *)(v4 + 208) |= 2u;
      *(void *)(v4 + 16) = v17;
    }
  }
  long long v18 = [v2 itemID];

  if (v18)
  {
    id v19 = [v18 unsignedLongLongValue];
    if (v4)
    {
      *(_WORD *)(v4 + 208) |= 4u;
      *(void *)(v4 + 24) = v19;
    }
  }
  id v20 = [v2 itemName];

  if (v20) {
    sub_10032924C(v4, v20);
  }
  id v21 = [v2 messagesArtworkURL];

  if (v21)
  {
    id v22 = [v21 absoluteString];
    sub_100329264(v4, v22);
  }
  CFStringRef v23 = [v2 packageDPInfo];

  if (v23) {
    sub_10032927C(v4, v23);
  }
  id v24 = [v2 packageSINF];

  if (v24) {
    sub_100329294(v4, v24);
  }
  id v25 = [v2 packageURL];

  if (v25)
  {
    id v26 = [v25 absoluteString];
    sub_1003292AC(v4, v26);
  }
  uint64_t v27 = [v2 storeCohort];

  if (v27) {
    sub_1003292C4(v4, v27);
  }
  id v28 = [v2 storeFront];

  if (v28) {
    sub_1003292DC(v4, v28);
  }
  id v29 = [v2 variantID];

  if (v29) {
    sub_10032930C(v4, v29);
  }
  long long v30 = [v2 vendorName];

  if (v30) {
    sub_1003292F4(v4, v30);
  }
  if (![v2 hasMessagesExtension])
  {
    unsigned __int8 v31 = [v2 isLaunchProhibited];
    if (!v4 || (v31 & 1) == 0) {
      goto LABEL_47;
    }
LABEL_46:
    *(_WORD *)(v4 + 208) |= 0x200u;
    *(unsigned char *)(v4 + 204) = 1;
    goto LABEL_47;
  }
  if (!v4)
  {
    [v2 isLaunchProhibited];
    goto LABEL_47;
  }
  *(_WORD *)(v4 + 208) |= 0x20u;
  *(unsigned char *)(v4 + 200) = 1;
  if ([v2 isLaunchProhibited]) {
    goto LABEL_46;
  }
LABEL_47:
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v32 = objc_msgSend(v2, "provisioningProfiles", 0);
  id v33 = [v32 countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (v33)
  {
    id v34 = v33;
    uint64_t v35 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v34; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v35) {
          objc_enumerationMutation(v32);
        }
        sub_100326BA8(v4, *(void **)(*((void *)&v38 + 1) + 8 * i));
      }
      id v34 = [v32 countByEnumeratingWithState:&v38 objects:v42 count:16];
    }
    while (v34);
  }

  return (id)v4;
}

id sub_1002B1564(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init(XDCAppMetadata);
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    *(_WORD *)&v3->_has |= 0x10u;
    v3->_type = 4;
  }
  unsigned __int8 v5 = [v2 altDSID];
  if (v5) {
    sub_1003291D4(v4, v5);
  }
  id v6 = [v2 appleID];

  if (v6) {
    sub_1003291EC(v4, v6);
  }
  id v7 = [v2 bundleID];

  if (v7) {
    sub_100329204(v4, v7);
  }
  uint64_t v8 = [v2 redownloadParams];

  if (v8) {
    sub_10032921C(v4, v8);
  }
  id v9 = [v2 downloaderID];

  if (v9)
  {
    id v10 = [v9 unsignedLongLongValue];
    if (v4)
    {
      *(_WORD *)(v4 + 208) |= 1u;
      *(void *)(v4 + _Block_object_dispose(&a9, 8) = v10;
    }
  }
  id v11 = [v2 externalVersionID];

  if (v11)
  {
    id v12 = [v11 unsignedLongLongValue];
    if (v4)
    {
      *(_WORD *)(v4 + 208) |= 2u;
      *(void *)(v4 + 16) = v12;
    }
  }
  int v13 = [v2 itemID];

  if (v13)
  {
    id v14 = [v13 unsignedLongLongValue];
    if (v4)
    {
      *(_WORD *)(v4 + 208) |= 4u;
      *(void *)(v4 + 24) = v14;
    }
  }
  __int16 v15 = [v2 purchaserID];

  if (!v15)
  {
    unsigned __int8 v17 = [v2 skipIfInstalled];
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  id v16 = [v15 unsignedLongLongValue];
  if (v4)
  {
    *(_WORD *)(v4 + 208) |= 8u;
    *(void *)(v4 + 32) = v16;
    unsigned __int8 v17 = [v2 skipIfInstalled];
LABEL_24:
    *(_WORD *)(v4 + 208) |= 0x400u;
    *(unsigned char *)(v4 + 205) = v17;
    goto LABEL_25;
  }
  [v2 skipIfInstalled];
LABEL_25:

  return (id)v4;
}

id *sub_1002B17C4(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (a1[11])
    {
      id v2 = objc_alloc((Class)NSUUID);
      id v3 = v1[11];
      uint64_t v1 = (id *)[v2 initWithUUIDString:v3];
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  return v1;
}

void sub_1002B1850(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 UUIDString];
    objc_storeStrong((id *)(a1 + 88), v3);
  }
}

_TtC9appstored6LogKey *sub_1002B18B8(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(id *)(a1 + 88);
    if (v1) {
      id v2 = [[_TtC9appstored6LogKey alloc] initWithBaseUUIDString:v1];
    }
    else {
      id v2 = 0;
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_1002B1930(uint64_t a1)
{
  if (!a1)
  {
    id v4 = 0;
    goto LABEL_23;
  }
  id v2 = objc_alloc((Class)ASDApp);
  id v3 = *(id *)(a1 + 72);
  id v4 = [v2 initWithBundleID:v3];

  unsigned __int8 v5 = *(void **)(a1 + 80);
  if (v5)
  {
    id v6 = v5;
    [v4 setBundleVersion:v6];
  }
  __int16 v7 = *(_WORD *)(a1 + 208);
  if ((v7 & 1) == 0)
  {
    if ((v7 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_17:
    [v4 setStoreExternalVersionID:*(void *)(a1 + 16)];
    if ((*(_WORD *)(a1 + 208) & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  [v4 setDownloaderDSID:*(void *)(a1 + 8)];
  __int16 v7 = *(_WORD *)(a1 + 208);
  if ((v7 & 2) != 0) {
    goto LABEL_17;
  }
LABEL_6:
  if ((v7 & 4) != 0) {
LABEL_7:
  }
    [v4 setStoreItemID:*(void *)(a1 + 24)];
LABEL_8:
  uint64_t v8 = *(void **)(a1 + 160);
  if (v8)
  {
    id v9 = v8;
    [v4 setStoreCohort:v9];
  }
  __int16 v10 = *(_WORD *)(a1 + 208);
  if ((v10 & 0x40) != 0 && *(unsigned char *)(a1 + 201))
  {
    unint64_t v11 = 1;
  }
  else if ((*(_WORD *)(a1 + 208) & 0x100) != 0 && *(unsigned char *)(a1 + 203))
  {
    unint64_t v11 = 512;
  }
  else if ((v10 & 0x80) != 0)
  {
    unint64_t v11 = (unint64_t)*(unsigned __int8 *)(a1 + 202) << 8;
  }
  else
  {
    unint64_t v11 = 0;
  }
  [v4 setStatus:v11];
LABEL_23:
  return v4;
}

id sub_1002B1AD4()
{
  self;
  if (qword_1005B0D60 != -1) {
    dispatch_once(&qword_1005B0D60, &stru_100525910);
  }
  id v0 = (void *)qword_1005B0D68;
  return v0;
}

void sub_1002B1B2C(id a1)
{
  id v1 = objc_alloc_init(RestoreService);
  id v2 = (void *)qword_1005B0D68;
  qword_1005B0D68 = (uint64_t)v1;
}

dispatch_queue_t *sub_1002B1C90(dispatch_queue_t *result)
{
  if (result)
  {
    id v1 = result;
    dispatch_assert_queue_V2(result[2]);
    uint64_t v2 = sub_1002B2470((uint64_t)RestoreService, v1[1]);
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v15 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "(RestoreService) Releasing parked download estimate requests: %lu", buf, 0xCu);
    }

    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v4 = v1[4];
    id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8) + 16))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8));
          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }

    return (dispatch_queue_t *)[v1[4] removeAllObjects];
  }
  return result;
}

void sub_1002B1E14(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002B1E90;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

dispatch_queue_t *sub_1002B1E90(dispatch_queue_t *result)
{
  dispatch_queue_t v1 = result[4];
  if (!LOBYTE(v1[3].isa))
  {
    uint64_t v2 = result;
    LOBYTE(v1[3].isa) = 1;
    id v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v4 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "(RestoreService) Restore state -> NONE", v4, 2u);
    }

    return sub_1002B1C90((dispatch_queue_t *)v2[4]);
  }
  return result;
}

void sub_1002B1F20(uint64_t a1)
{
  if (a1)
  {
    dispatch_queue_t v1 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002B1F9C;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002B1F9C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 2;
  dispatch_queue_t v1 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "(RestoreService) Restore state -> PREPARING", v2, 2u);
  }
}

void sub_1002B2018(uint64_t a1)
{
  if (a1)
  {
    dispatch_queue_t v1 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002B2094;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

dispatch_queue_t *sub_1002B2094(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 3;
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v4 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "(RestoreService) Restore state -> RUNNING", v4, 2u);
  }

  return sub_1002B1C90(*(dispatch_queue_t **)(a1 + 32));
}

uint64_t sub_1002B21DC(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "(RestoreService) clearFollowupsForAccountID: %@", (uint8_t *)&v6, 0xCu);
  }

  id v4 = sub_1002B3410();
  sub_1002B4EB0((uint64_t)v4, *(void **)(a1 + 32));

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

void sub_1002B235C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  switch(*(unsigned char *)(v2 + 24))
  {
    case 0:
    case 2:
      uint64_t v3 = *(void **)(v2 + 32);
      id v5 = objc_retainBlock(*(id *)(a1 + 40));
      [v3 addObject:v5];
      goto LABEL_7;
    case 1:
    case 3:
      sub_1002B2470((uint64_t)RestoreService, *(void **)(v2 + 8));
      id v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
      v4();
      break;
    default:
      ASDErrorWithUserInfoAndFormat();
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_7:

      break;
  }
}

uint64_t sub_1002B2470(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1002B27D4;
  v5[3] = &unk_100522CF8;
  void v5[4] = &v6;
  [v2 readUsingSession:v5];
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_1002B2530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002B2610(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) componentsJoinedByString:@", "];
    int v4 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)long long buf = 138412546;
    id v16 = v3;
    __int16 v17 = 1024;
    int v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "(RestoreService) prioritizeBundleIDs: [%@] userInitiated: %d", buf, 0x12u);
  }
  id v5 = sub_1002AD490([ImportJobsForDemotedAppsTask alloc], *(void **)(a1 + 32));
  uint64_t v6 = v5;
  if (v5) {
    v5[48] = *(unsigned char *)(a1 + 48);
  }
  sub_1002B2A3C();
  uint64_t v7 = (id *)objc_claimAutoreleasedReturnValue();
  id v14 = v6;
  uint64_t v8 = +[NSArray arrayWithObjects:&v14 count:1];
  if (v7) {
    [v7[1] addOperations:v8 waitUntilFinished:1];
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    if (v6)
    {
      uint64_t v11 = v6[24] & 1;
      id Property = objc_getProperty(v6, v9, 32, 1);
    }
    else
    {
      uint64_t v11 = 0;
      id Property = 0;
    }
    id v13 = Property;
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, v11, v13);
  }
}

uint64_t sub_1002B27D4(uint64_t a1, void *a2)
{
  uint64_t result = sub_100402870(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

id sub_1002B29C4(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      a1 = [v2 valueForHTTPHeaderField:@"CDNUUID"];
    }
    else
    {
      a1 = 0;
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002B2A3C()
{
  self;
  if (qword_1005B0D78 != -1) {
    dispatch_once(&qword_1005B0D78, &stru_1005259D0);
  }
  id v0 = (void *)qword_1005B0D70;
  return v0;
}

void sub_1002B2A94(id a1)
{
  uint64_t v1 = sub_1002B2ADC((id *)[TaskQueue alloc], @"com.apple.appstored.TaskQueue.networkQueue");
  id v2 = (void *)qword_1005B0D70;
  qword_1005B0D70 = (uint64_t)v1;
}

id *sub_1002B2ADC(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)TaskQueue;
    a1 = (id *)objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = objc_alloc_init((Class)NSOperationQueue);
      id v5 = a1[1];
      a1[1] = v4;

      [a1[1] setMaxConcurrentOperationCount:1];
      [a1[1] setName:v3];
    }
  }

  return a1;
}

id *sub_1002B2B6C(id *result, uint64_t a2)
{
  if (result) {
    return (id *)[result[1] setName:a2];
  }
  return result;
}

id *sub_1002B2B80(id *a1)
{
  if (a1)
  {
    a1 = [a1[1] operations];
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_1002B2BB4(id *result, uint64_t a2)
{
  if (result) {
    return (id *)[result[1] setQualityOfService:a2];
  }
  return result;
}

id *sub_1002B2BC8(id *result, uint64_t a2)
{
  if (result) {
    return (id *)[result[1] addOperation:a2];
  }
  return result;
}

id *sub_1002B2BDC(id *result, uint64_t a2)
{
  if (result) {
    return (id *)[result[1] addBarrierBlock:a2];
  }
  return result;
}

void sub_1002B2BFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 16);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v5;

      id v4 = *(void **)(a1 + 16);
    }
    [v4 addObject:v7];
    id v3 = v7;
  }
}

void sub_1002B3378(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_1002B3390(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

id sub_1002B3410()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002B34B4;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0DA0 != -1) {
    dispatch_once(&qword_1005B0DA0, block);
  }
  id v0 = (void *)qword_1005B0D98;
  return v0;
}

void sub_1002B34B4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005B0D98;
  qword_1005B0D98 = (uint64_t)v1;
}

void sub_1002B36D8(uint64_t a1)
{
  if (sub_1002B38A4(*(void *)(a1 + 32)) >= 1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    sub_1002B3984(v2, 1);
    return;
  }
  sub_1003F3838((uint64_t)AppDefaultsManager, 0);
  uint64_t v3 = sub_1002B3C04(*(void *)(a1 + 32));
  if (sub_1002B3CE4(*(void *)(a1 + 32)) < 1)
  {
    if (v3 < 1) {
      return;
    }
    goto LABEL_14;
  }
  id v4 = sub_10026CA24();
  if (sub_10026D334((uint64_t)v4))
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Startup with hard failures. Preflight already attempted for this boot.", buf, 2u);
    }

    if (v3 <= 0) {
      return;
    }
LABEL_14:
    uint64_t v6 = objc_alloc_init(RestoreBootstrapInfo);
    uint64_t v8 = v6;
    if (v6) {
      objc_setProperty_atomic_copy(v6, v7, @"Startup with Active Restores", 16);
    }
    [*(id *)(a1 + 32) _bootstrapWhenReadyWithInfo:v8];

    return;
  }
  sub_10026D868((uint64_t)v4);

  if (v3 > 0) {
    goto LABEL_14;
  }
  self = objc_alloc_init(RestoreBootstrapInfo);
  if (self)
  {
    objc_setProperty_atomic_copy(self, v9, @"Startup with hard failures that may need preflight", 16);
    self->_preflightOnly = 1;
  }
  [*(id *)(a1 + 32) _bootstrapWhenReadyWithInfo:self];
}

uint64_t sub_1002B38A4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  id v1 = sub_1003E0BA4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1002B7E90;
  v4[3] = &unk_100522CF8;
  void v4[4] = &v5;
  [v1 readUsingSession:v4];

  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1002B396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002B3984(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = sub_1003F36B0();
    id v4 = +[NSDate date];
    uint64_t v5 = sub_10020E198((uint64_t)ActivityManager, 6uLL);
    if ([v3 compare:v4] == (id)1)
    {
      id v6 = v3;
      uint64_t v7 = ASDLogHandleForCategory();
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (a2)
      {
        if (v8)
        {
          if (v6)
          {
            [v6 timeIntervalSince1970];
            uint64_t v10 = (uint64_t)v9;
          }
          else
          {
            uint64_t v10 = 0;
          }
          int v17 = 134218498;
          uint64_t v18 = v10;
          __int16 v19 = 2114;
          id v20 = v5;
          __int16 v21 = 2048;
          uint64_t v22 = 300;
          uint64_t v11 = "Using previously soft fail scheduled date: %{time_t}ld for activity: %{public}@ interval: %lld";
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v17, 0x20u);
        }
      }
      else if (v8)
      {
        if (v6)
        {
          [v6 timeIntervalSince1970];
          uint64_t v15 = (uint64_t)v14;
        }
        else
        {
          uint64_t v15 = 0;
        }
        int v17 = 134218498;
        uint64_t v18 = v15;
        __int16 v19 = 2114;
        id v20 = v5;
        __int16 v21 = 2048;
        uint64_t v22 = 300;
        uint64_t v11 = "Keeping previously soft fail scheduled date: %{time_t}ld for activity: %{public}@ interval: %lld";
        goto LABEL_16;
      }
    }
    else
    {
      id v6 = [v4 dateByAddingTimeInterval:300.0];
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (v6)
        {
          [v6 timeIntervalSince1970];
          uint64_t v13 = (uint64_t)v12;
        }
        else
        {
          uint64_t v13 = 0;
        }
        int v17 = 134218498;
        uint64_t v18 = v13;
        __int16 v19 = 2114;
        id v20 = v5;
        __int16 v21 = 2048;
        uint64_t v22 = 300;
        uint64_t v11 = "Using new date: %{time_t}ld for activity: %{public}@ interval: %lld";
        goto LABEL_16;
      }
    }

    id v16 = sub_10020E0BC();
    sub_10020F30C(v16, 6, @"Restore", (uint64_t)v6, @"Soft Failure");
  }
}

uint64_t sub_1002B3C04(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  id v1 = sub_1003E0BA4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1002B7F34;
  v4[3] = &unk_100522CF8;
  void v4[4] = &v5;
  [v1 readUsingSession:v4];

  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1002B3CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B3CE4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  id v1 = sub_1003E0BA4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1002B7DEC;
  v4[3] = &unk_100522CF8;
  void v4[4] = &v5;
  [v1 readUsingSession:v4];

  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1002B3DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002B3DC4(uint64_t a1)
{
}

void sub_1002B3DCC(uint64_t a1)
{
  if (a1)
  {
    uint64_t state64 = 0;
    uint32_t state = notify_get_state(*(_DWORD *)(a1 + 40), &state64);
    uint64_t v3 = ASDLogHandleForCategory();
    id v4 = v3;
    if (state)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v10) = state;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "(RestoreManager) Received restore state change, but reading the state failed: %u", buf, 8u);
      }
LABEL_5:

      return;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v10 = state64;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "(RestoreManager) Observed restore state change: %llu", buf, 0xCu);
    }

    if (!*(void *)(a1 + 32) && state64 - 1 <= 1)
    {
      uint64_t v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "(RestoreManager) Restore is starting, or already running - updating cellular policy", buf, 2u);
      }

      id v6 = objc_alloc_init((Class)MBManager);
      uint64_t v7 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v6;

      id v4 = +[NSNotificationCenter defaultCenter];
      [v4 addObserver:a1 selector:"_restoreCellularAccessChangedNotification:" name:@"com.apple.private.restrict-post.MobileBackup.backgroundCellularAccessChanged" object:0];
      sub_1002C041C((void *)a1);
      goto LABEL_5;
    }
  }
}

void sub_1002B3FA0(uint64_t a1)
{
}

id sub_1002B3FA8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x3032000000;
    uint64_t v8 = sub_100018098;
    double v9 = sub_100017C08;
    id v10 = 0;
    id v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1002B40A4;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1002B40A4(uint64_t a1)
{
  uint64_t v2 = sub_1003D4A3C();
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  sub_1003D4C80(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 3);
  sub_1003D4D3C(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 4);
  sub_1003D4B04(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 60);
  if (*(void *)(*(void *)(a1 + 32) + 24))
  {
    uint64_t v5 = *(id **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v6 = sub_1003D4DAC(v5);
    sub_1003D4B04((uint64_t)v5, (unint64_t)v6 | 2);
    if ([*(id *)(*(void *)(a1 + 32) + 24) allowsExpensiveNetworkAccess])
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      sub_1003D4D3C(v7, 3);
    }
  }
}

id sub_1002B418C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  self;
  uint64_t v8 = [[_TtC9appstored6LogKey alloc] initWithAppInstallMemoryEntity:v6];
  if (!v6 || !sub_10026E7EC(v6, @"device_based_vpp"))
  {
    uint64_t v10 = [v6 valueForProperty:@"account_id"];
    uint64_t v11 = [v6 valueForProperty:@"downloader_id"];
    double v12 = [v6 valueForProperty:@"alt_dsid"];
    if (v7 && v10 && [(id)v10 isEqualToNumber:v7])
    {
      uint64_t v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [v7 unsignedLongLongValue];
        uint64_t v15 = +[ActiveAccountObserver activeAccount];
        id v16 = objc_msgSend(v15, "ams_DSID");
        *(_DWORD *)long long buf = 138412802;
        id v29 = v8;
        __int16 v30 = 2048;
        id v31 = v14;
        __int16 v32 = 2114;
        id v33 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@] Migrating from accountID: %lld to active accountID: %{public}@", buf, 0x20u);
      }
      double v9 = +[ActiveAccountObserver activeAccount];
      goto LABEL_27;
    }
    if ((uint64_t)[(id)v11 longLongValue] < 1)
    {
      if ((uint64_t)[(id)v10 longLongValue] < 1)
      {
        if ([v12 length])
        {
          CFStringRef v23 = +[ACAccountStore ams_sharedAccountStore];
          double v9 = objc_msgSend(v23, "ams_iTunesAccountWithAltDSID:", v12);

          if (v9)
          {
            id v24 = objc_msgSend(v9, "ams_DSID");

            if (!v24) {
              goto LABEL_27;
            }
            id v25 = objc_msgSend(v9, "ams_DSID");
            [v6 setValue:v25 forProperty:@"account_id"];

            __int16 v21 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              id v26 = objc_msgSend(v9, "ams_DSID");
              *(_DWORD *)long long buf = 138412802;
              id v29 = v8;
              __int16 v30 = 2114;
              id v31 = v26;
              __int16 v32 = 2114;
              id v33 = v12;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[%@] Setting accountID: %{public}@ discovered using alt-dsid: %{public}@", buf, 0x20u);
            }
            goto LABEL_26;
          }
        }
LABEL_20:
        if (v11 | v10) {
          +[NSString stringWithFormat:@"Unable to find account with downloader: %@ purchaser: %@", v11, v10, v27];
        }
        else {
        __int16 v21 = +[NSString stringWithFormat:@"Unable to find account with downloader: %@ purchaser: %@ alt-dsid: %@", 0, 0, v12];
        }
        if (a4)
        {
          ASDErrorWithTitleAndMessage();
          double v9 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          double v9 = 0;
        }
LABEL_26:

        goto LABEL_27;
      }
      id v20 = +[ACAccountStore ams_sharedAccountStore];
      double v9 = objc_msgSend(v20, "ams_iTunesAccountWithDSID:", v10);

      uint64_t v18 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
LABEL_19:

        if (v9)
        {
LABEL_27:

          goto LABEL_28;
        }
        goto LABEL_20;
      }
      *(_DWORD *)long long buf = 138412290;
      id v29 = v8;
      __int16 v19 = "[%@] Using purchaser-dsid";
    }
    else
    {
      int v17 = +[ACAccountStore ams_sharedAccountStore];
      double v9 = objc_msgSend(v17, "ams_iTunesAccountWithDSID:", v11);

      uint64_t v18 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
        goto LABEL_19;
      }
      *(_DWORD *)long long buf = 138412290;
      id v29 = v8;
      __int16 v19 = "[%@] Using downloader-dsid";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, v19, buf, 0xCu);
    goto LABEL_19;
  }
  if (a4)
  {
    ASDErrorWithTitleAndMessage();
    double v9 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    double v9 = 0;
  }
LABEL_28:

  return v9;
}

id sub_1002B4648(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (v5)
    {
      id v7 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
      uint64_t v8 = [v6 stringByTrimmingCharactersInSet:v7];

      id v6 = (void *)v8;
    }
    if ([v6 length])
    {
      double v9 = objc_opt_new();
      [v9 setAuthenticationType:0];
      [v9 setDebugReason:@"Restore"];
      [v9 setCanMakeAccountActive:0];
      uint64_t v10 = ASDLocalizedString();
      uint64_t v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v10, v6);
      [v9 setReason:v11];

      id v12 = objc_alloc((Class)AMSAuthenticateTask);
      uint64_t v13 = sub_10030B11C();
      id v14 = [v12 initWithAccount:0 options:v9 bag:v13];

      [v14 setDelegate:a1];
      [v14 setUsername:v6];
      uint64_t v15 = [v14 performAuthentication];
      id v21 = 0;
      id v16 = [v15 resultWithError:&v21];
      id v17 = v21;

      if (v16)
      {
        a1 = [v16 account];
        uint64_t v18 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v19 = objc_msgSend(a1, "ams_DSID");
          *(_DWORD *)long long buf = 138543619;
          CFStringRef v23 = v19;
          __int16 v24 = 2113;
          id v25 = v6;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Logged into accountID: %{public}@ appleID: %{private}@", buf, 0x16u);
        }
      }
      else
      {
        a1 = 0;
      }

      if (!a3) {
        goto LABEL_15;
      }
    }
    else
    {
      ASDErrorWithTitleAndMessage();
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      a1 = 0;
      if (!a3)
      {
LABEL_15:

        goto LABEL_16;
      }
    }
    if (v17) {
      *a3 = v17;
    }
    goto LABEL_15;
  }
LABEL_16:

  return a1;
}

void sub_1002B4918(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    double v9 = *(NSObject **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002B49F0;
    v10[3] = &unk_100525A20;
    char v13 = a4;
    void v10[4] = a1;
    id v11 = v7;
    id v12 = v8;
    dispatch_async(v9, v10);
  }
}

void sub_1002B49F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void **)(a1 + 40);
    id v4 = *(void **)(a1 + 48);
    sub_1002B4AAC(v2, v3, v4, 1);
  }
  else
  {
    self = objc_alloc_init(RestoreBootstrapInfo);
    if (self)
    {
      objc_setProperty_atomic_copy(self, v5, *(id *)(a1 + 40), 16);
      objc_setProperty_atomic_copy(self, v6, *(id *)(a1 + 48), 24);
      self->_userInitiated = *(unsigned char *)(a1 + 56);
    }
    [*(id *)(a1 + 32) _bootstrapWhenReadyWithInfo:self];
  }
}

void sub_1002B4AAC(void *a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    double v9 = [[KeepAlive alloc] initWithName:@"com.apple.RestoreManager.bootstrap"];
    uint64_t v10 = ASDLogHandleForCategory();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (!v11) {
        goto LABEL_8;
      }
      int v32 = 138543874;
      uint64_t v33 = (uint64_t)v8;
      __int16 v34 = 2114;
      uint64_t v35 = (uint64_t)v7;
      __int16 v36 = 1024;
      LODWORD(v37) = a4;
      id v12 = "Bootstrapping restores for accountID: %{public}@ with reason: %{public}@ userInitiated: %d";
      char v13 = v10;
      uint32_t v14 = 28;
    }
    else
    {
      if (!v11) {
        goto LABEL_8;
      }
      int v32 = 138543362;
      uint64_t v33 = (uint64_t)v7;
      id v12 = "Bootstrapping all restores with reason: %{public}@";
      char v13 = v10;
      uint32_t v14 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v32, v14);
LABEL_8:

    uint64_t v15 = sub_1002AC8A4([RestoreInfo alloc], v8, a4);
    id v16 = ASDLogHandleForCategory();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (!v17) {
        goto LABEL_18;
      }
      if (v15)
      {
        uint64_t v19 = v15[5];
        uint64_t v18 = v15[6];
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
      }
      int v32 = 134218498;
      uint64_t v33 = v18;
      __int16 v34 = 2048;
      uint64_t v35 = v19;
      __int16 v36 = 2114;
      uint64_t v37 = (uint64_t)v8;
      id v20 = "Bootstrapped %ld ordered / %ld non-ordered restores for accountID: %{public}@";
      id v21 = v16;
      uint32_t v22 = 32;
    }
    else
    {
      if (!v17) {
        goto LABEL_18;
      }
      if (v15)
      {
        uint64_t v24 = v15[5];
        uint64_t v23 = v15[6];
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
      int v32 = 134218240;
      uint64_t v33 = v23;
      __int16 v34 = 2048;
      uint64_t v35 = v24;
      id v20 = "Bootstrapped %ld ordered / %ld non-ordered restores";
      id v21 = v16;
      uint32_t v22 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v32, v22);
LABEL_18:

    sub_1002B815C((uint64_t)a1, 1, v15, v8);
    sub_1002B815C((uint64_t)a1, 0, v15, v8);
    uint64_t v25 = sub_1002B9730();
    uint64_t v26 = sub_1002B38A4((uint64_t)a1);
    uint64_t v27 = sub_1002B3CE4((uint64_t)a1);
    id v28 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      int v32 = 134218496;
      uint64_t v33 = v25;
      __int16 v34 = 2048;
      uint64_t v35 = v27;
      __int16 v36 = 2048;
      uint64_t v37 = v26;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Bootstrap completed. Pending lookup: %ld hard failures: %ld soft failures: %ld", (uint8_t *)&v32, 0x20u);
    }

    if (v26 < 1)
    {
      sub_1003F3838((uint64_t)AppDefaultsManager, 0);
      if (a4) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_1002B3984((uint64_t)a1, 0);
      if (a4) {
        goto LABEL_26;
      }
    }
    if (!v25 || v27 >= 1)
    {
      __int16 v30 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v32) = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Bootstrap completed. Will attempt to process failures if needed", (uint8_t *)&v32, 2u);
      }

      sub_1002B9804(a1, 0);
      goto LABEL_32;
    }
LABEL_26:
    id v29 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v32) = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Bootstrap completed. Will not attempt to process failures if needed", (uint8_t *)&v32, 2u);
    }

LABEL_32:
    id v31 = sub_1002B1AD4();
    sub_1002B2018((uint64_t)v31);
  }
}

void sub_1002B4EB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002B4F58;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002B4F58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  if (v1)
  {
    if (!*(void *)(v1 + 56))
    {
      id v3 = [objc_alloc((Class)sub_1002BBADC()) initWithClientIdentifier:@"com.apple.AppleMediaServices"];
      id v4 = *(void **)(v1 + 56);
      *(void *)(v1 + 56) = v3;
    }
    id v5 = sub_1003F363C();
    if ([v5 count])
    {
      SEL v6 = sub_1003F363C();
      id v7 = +[NSMutableDictionary dictionaryWithDictionary:v6];

      id v8 = [v2 stringValue];
      [v7 removeObjectForKey:v8];

      if ([v7 count])
      {
        sub_1003F375C((uint64_t)AppDefaultsManager, v7);
        id v9 = [v7 copy];
        sub_1002BBBC0(v1, v9);
      }
      else
      {
        sub_1003F375C((uint64_t)AppDefaultsManager, 0);
        uint64_t v10 = *(void **)(v1 + 56);
        id v14 = 0;
        id v11 = v10;
        [v11 clearPendingFollowUpItemsWithUniqueIdentifiers:&off_10054DE30 error:&v14];
        id v12 = v14;

        if (v12)
        {
          char v13 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543618;
            id v16 = v2;
            __int16 v17 = 2114;
            id v18 = v12;
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Error posting follow up for accountID: %{public}@ error: %{public}@", buf, 0x16u);
          }
        }
      }
    }
  }
}

void sub_1002B5148(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(NSObject **)(a1 + 8);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1002B5238;
    v11[3] = &unk_100522420;
    void v11[4] = a1;
    id v12 = v7;
    id v13 = v8;
    id v14 = v9;
    dispatch_async(v10, v11);
  }
}

uint64_t sub_1002B5238(uint64_t a1)
{
  sub_1002B5298(*(void *)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1002B5298(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v10 = 0;
    int v6 = sub_1002BD05C(a1, v5, a3, 1, &v10);
    id v7 = v10;
    id v8 = ASDLogHandleForCategory();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v9)
      {
        *(_DWORD *)long long buf = 138412290;
        id v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Dialog presentation completed successfully", buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        *(_DWORD *)long long buf = 138412290;
        id v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Hard failing all apps that require distributor following dialog cancellation", buf, 0xCu);
      }

      id v8 = sub_1003F8FE8();
      sub_1002BCDD4(v8);
    }
  }
}

void sub_1002B53E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002B548C;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_1002B548C(uint64_t a1)
{
  int v92 = sub_1002B6864();
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  uint64_t v95 = a1;
  id obj = *(id *)(a1 + 32);
  id v96 = [obj countByEnumeratingWithState:&v104 objects:v123 count:16];
  if (v96)
  {
    uint64_t v94 = *(void *)v105;
    do
    {
      id v2 = 0;
      do
      {
        if (*(void *)v105 != v94) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(v95 + 40);
        id v4 = *(id *)(*((void *)&v104 + 1) + 8 * (void)v2);
        id v5 = v4;
        if (v3)
        {
          if (!v4)
          {
            id v13 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Restore attempted without metadata", buf, 2u);
            }
            goto LABEL_103;
          }
          long long v97 = v3;
          int v6 = [v4 valueForProperty:@"restore_type"];
          id v7 = [v6 integerValue];

          uint64_t v8 = [v5 valueForProperty:@"priority"];
          id v9 = [v8 integerValue];

          BOOL v10 = v7 == (id)2 || v9 == (id)2;
          unsigned int v99 = v10;
          CFStringRef v100 = @"Promotion";
          if ((unint64_t)v7 <= 3) {
            CFStringRef v100 = *(&off_100525D38 + (void)v7);
          }
          id v11 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            id v12 = sub_100424C14(v5);
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v12;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v100;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] %{public}@ start", buf, 0x16u);
          }
          id v102 = [v5 valueForProperty:@"coordinator_id"];
          if (!v102)
          {
            id v13 = sub_100424D84(v5);
            id v14 = +[MadBridge shared];
            unsigned int v15 = [v14 isThirdPartyRestore:v13];

            if (v15)
            {
              id v16 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543362;
                *(void *)&uint8_t buf[4] = v13;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%{public}@] Handing off restoration to managedappdistributiond…", buf, 0xCu);
              }

              id v103 = +[MadBridge shared];
              [v103 promoteApplicationWithBundleIdentifier:v13];

              goto LABEL_103;
            }
            sub_1002BC600(v5, v99);
            id v102 = [v5 valueForProperty:@"coordinator_id"];
          }
          if (v92)
          {
            if (v99) {
              uint64_t v17 = -1;
            }
            else {
              uint64_t v17 = -2;
            }
            id v18 = +[NSNumber numberWithInteger:v17];
            [v5 setValue:v18 forProperty:@"bootstrapped"];
          }
          else
          {
            [v5 setValue:&off_10054C258 forProperty:@"bootstrapped"];
          }
          uint64_t v19 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            id v20 = sub_100424C14(v5);
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v20;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v102;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%@] Importing restore with coordinatorID: %{public}@", buf, 0x16u);
          }
          [v5 setValue:&off_10054C2A0 forProperty:@"restore_state"];
          id v101 = +[ActiveAccountObserver sharedInstance];
          id v21 = sub_100424C14(v5);
          long long v98 = [v101 oneAccountDSIDWithLogKey:v21];

          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x4010000000;
          __int16 v132 = "";
          long long v133 = 0u;
          long long v134 = 0u;
          uint32_t v22 = sub_1003E0BA4();
          v120[0] = _NSConcreteStackBlock;
          v120[1] = 3221225472;
          v120[2] = sub_1002BE61C;
          v120[3] = &unk_100522938;
          long long v122 = buf;
          uint64_t v23 = v5;
          id v121 = v23;
          [v22 modifyUsingTransaction:v120];

          if (v9 != (id)2 && v7 == (id)2 && *(void *)(*(void *)&buf[8] + 56) == 2)
          {
            uint64_t v24 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              uint64_t v25 = sub_100424C14(v23);
              *(_DWORD *)uint64_t v129 = 138412290;
              *(void *)&v129[4] = v25;
              _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[%@] Restore import failed - already exists", v129, 0xCu);
            }
            goto LABEL_57;
          }
          if (v92)
          {
            uint64_t v26 = sub_100424C14(v23);
            uint64_t v27 = sub_100424D84(v23);
            int v28 = sub_1002BD05C((uint64_t)v97, v26, v27, 0, 0);

            if (v28)
            {
              uint64_t v24 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                id v29 = sub_100424C14(v23);
                *(_DWORD *)uint64_t v129 = 138412290;
                *(void *)&v129[4] = v29;
                _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[%@] Restore stopped due to needed missing distributor", v129, 0xCu);
              }
            }
            else
            {
              uint64_t v37 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                id v77 = sub_100424C14(v23);
                *(_DWORD *)uint64_t v129 = 138412290;
                *(void *)&v129[4] = v77;
                _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "[%@] Restore stopped due to needed missing distributor", v129, 0xCu);
              }
              long long v38 = sub_100424D84(v23);
              uint64_t v24 = sub_1003F98D4((uint64_t)AppInstallPredicates, v38);

              long long v39 = sub_100424C14(v23);
              sub_1002BCDD4(v24);
            }
LABEL_57:
            id v13 = 0;
LABEL_102:

            _Block_object_dispose(buf, 8);
LABEL_103:

            goto LABEL_104;
          }
          id v119 = 0;
          uint64_t v24 = sub_1002B418C((uint64_t)RestoreManager, v23, v98, &v119);
          __int16 v30 = v119;
          id v91 = [v23 valueForProperty:@"apple_id"];
          if (v99 && !v24 && v91)
          {
            id v118 = v30;
            long long v93 = sub_1002B4648(v97, v91, &v118);
            id v13 = v118;

            if (v93)
            {

              id v31 = [v93 ams_DSID];
              [v23 setValue:v31 forProperty:@"account_id"];

              int v32 = [v93 username];
              [v23 setValue:v32 forProperty:@"apple_id"];
              __int16 v30 = 0;
              goto LABEL_46;
            }
            long long v93 = 0;
LABEL_97:
            if (v13)
            {
              uint64_t v73 = +[NSString stringWithFormat:@"%@ Failure", v100];
              uint64_t v74 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
              {
                id v76 = sub_100424C14(v23);
                *(_DWORD *)uint64_t v129 = 138412802;
                *(void *)&v129[4] = v76;
                *(_WORD *)&v129[12] = 2114;
                *(void *)&v129[14] = v100;
                *(_WORD *)&v129[22] = 2114;
                *(void *)uint64_t v130 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "[%@][%{public}@] complete with error: %{public}@", v129, 0x20u);
              }
              sub_1003B8168(v23, v13);
              *(void *)uint64_t v129 = v23;
              uint64_t v75 = +[NSArray arrayWithObjects:v129 count:1];
              sub_1002BA214((uint64_t)RestoreManager, v75, v73);
            }
            goto LABEL_102;
          }
          if (!v24)
          {
            long long v93 = 0;
            id v13 = v30;
            goto LABEL_97;
          }
          uint64_t v33 = [v24 ams_DSID];
          [v23 setValue:v33 forProperty:@"account_id"];

          int v32 = [v24 username];
          [v23 setValue:v32 forProperty:@"apple_id"];
          long long v93 = 0;
LABEL_46:

          if (v24) {
            __int16 v34 = v24;
          }
          else {
            __int16 v34 = v93;
          }
          id v117 = 0;
          int v35 = sub_1002BE760((uint64_t)v97, v23, v34, v99, &v117);
          id v36 = v117;
          uint64_t v89 = v36;
          if (v93 && v36)
          {
            id v13 = v36;

            goto LABEL_52;
          }
          if (!v36 || !sub_1002BEA34(v36))
          {
            if ((v35 & 1) == 0)
            {
              id v13 = v89;

              goto LABEL_93;
            }
            id v13 = v30;
            goto LABEL_77;
          }
          long long v40 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            uint64_t v80 = sub_100424C14(v23);
            id v81 = [v24 ams_DSID];
            *(_DWORD *)uint64_t v129 = 138413058;
            *(void *)&v129[4] = v80;
            *(_WORD *)&v129[12] = 2114;
            *(void *)&v129[14] = v100;
            *(_WORD *)&v129[22] = 2114;
            *(void *)uint64_t v130 = v89;
            *(_WORD *)&v130[8] = 2114;
            *(void *)&v130[10] = v81;
            _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "[%@][%{public}@] Encountered a token error: %{public}@ for account: %{public}@", v129, 0x2Au);
          }
          if (!v99
            || ([v24 username],
                long long v41 = objc_claimAutoreleasedReturnValue(),
                BOOL v42 = v41 == 0,
                v41,
                v42))
          {
            uint64_t v49 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              id v82 = sub_100424C14(v23);
              id v83 = [v24 username];
              *(_DWORD *)uint64_t v129 = 138413059;
              *(void *)&v129[4] = v82;
              *(_WORD *)&v129[12] = 2114;
              *(void *)&v129[14] = v100;
              *(_WORD *)&v129[22] = 1024;
              *(_DWORD *)uint64_t v130 = v99;
              *(_WORD *)&v130[4] = 2113;
              *(void *)&v130[6] = v83;
              _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "[%@][%{public}@] Not prompting do to userInitiated: %d appleID: %{private}@", v129, 0x26u);
            }
            id v13 = v30;
            if (v35) {
              goto LABEL_77;
            }
          }
          else
          {
            __int16 v43 = [v24 username];
            id v116 = v30;
            long long v44 = sub_1002B4648(v97, v43, &v116);
            id v13 = v116;

            if (v44)
            {

              long long v45 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                long long v46 = sub_100424C14(v23);
                long long v47 = [v24 ams_DSID];
                *(_DWORD *)uint64_t v129 = 138412802;
                *(void *)&v129[4] = v46;
                *(_WORD *)&v129[12] = 2114;
                *(void *)&v129[14] = v100;
                *(_WORD *)&v129[22] = 2114;
                *(void *)uint64_t v130 = v47;
                _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[%@][%{public}@] Retrying restore with account: %{public}@", v129, 0x20u);
              }
              id v115 = 0;
              char v48 = sub_1002BE760((uint64_t)v97, v23, v44, 1, &v115);
              id v13 = v115;
              long long v93 = v44;
              if ((v48 & 1) == 0) {
                goto LABEL_93;
              }
LABEL_77:
              id v50 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                BOOL v51 = sub_100424C14(v23);
                *(_DWORD *)uint64_t v129 = 138412546;
                *(void *)&v129[4] = v51;
                *(_WORD *)&v129[12] = 2114;
                *(void *)&v129[14] = v100;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "[%@][%{public}@] metadata lookup succeeded", v129, 0x16u);
              }
              [v23 setValue:&off_10054C240 forProperty:@"bootstrapped"];
              *(void *)uint64_t v129 = 0;
              *(void *)&v129[8] = v129;
              *(void *)&v129[16] = 0x3032000000;
              *(void *)uint64_t v130 = sub_100018098;
              *(void *)&v130[8] = sub_100017C08;
              *(void *)&v130[16] = 0;
              double v52 = sub_1003E0BA4();
              v111[0] = _NSConcreteStackBlock;
              v111[1] = 3221225472;
              v111[2] = sub_1002BEAC0;
              v111[3] = &unk_100525B28;
              __int16 v53 = v23;
              char v114 = v99;
              id v88 = v53;
              id v112 = v53;
              uint64_t v113 = v129;
              [v52 modifyUsingTransaction:v111];

              if (*(void *)(*(void *)&v129[8] + 40))
              {
                id v54 = [v88 databaseID];
                uint64_t v87 = sub_10026E9D4(v88, @"coordinator_id");
                id v55 = sub_10026E95C(v88, @"bundle_id");
                id v56 = sub_10027918C((uint64_t)lib_IXAppInstallCoordinatorTag, v87, v55);
                uint64_t v57 = [ReviewNetworkPolicyTask alloc];
                id v58 = sub_1003B8854((id *)&v57->super.super.super.isa, *(void **)(*(void *)&v129[8] + 40));
                objc_initWeak((id *)location, v58);
                v108[0] = _NSConcreteStackBlock;
                v108[1] = 3221225472;
                v108[2] = sub_1002BEBC8;
                v108[3] = &unk_100525B78;
                objc_copyWeak(v110, (id *)location);
                v110[1] = v54;
                id v59 = v56;
                id v109 = v59;
                [v58 setCompletionBlock:v108];
                uint64_t v60 = v97[2];
                if (v60) {
                  [*(id *)(v60 + 8) addOperation:v58];
                }

                objc_destroyWeak(v110);
                objc_destroyWeak((id *)location);
              }
              id v61 = v93;
              if (!v93) {
                id v61 = v24;
              }
              id v62 = v61;
              uint64_t v63 = sub_1002B3410();
              id v64 = [v62 ams_DSID];
              sub_1002B4918(v63, v100, v64, v99);

              uint64_t v65 = sub_1002ED270();
              uint64_t v66 = (void *)v65;
              BOOL v67 = v7 == (id)2;
              if (v67) {
                uint64_t v68 = 32;
              }
              else {
                uint64_t v68 = 0x2000;
              }
              sub_1002EDDA0(v65, v68);

              if (v67 && (v93 != 0 || v24 != 0))
              {
                long long v69 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                {
                  long long v70 = sub_100424C14(v88);
                  unsigned __int8 v71 = [v62 ams_DSID];
                  *(_DWORD *)id location = 138412802;
                  *(void *)&location[4] = v70;
                  __int16 v125 = 2114;
                  CFStringRef v126 = v100;
                  __int16 v127 = 2114;
                  id v128 = v71;
                  _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "[%@][%{public}@] Promoting all other apps for account: %{public}@ following successful hydration", location, 0x20u);
                }
                sub_1002B71C8((uint64_t)v97, v62, 0);
              }

              _Block_object_dispose(v129, 8);
LABEL_96:

              goto LABEL_97;
            }
            id v79 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
            {
              uint64_t v84 = sub_100424C14(v23);
              long long v85 = [v24 username];
              *(_DWORD *)uint64_t v129 = 138543875;
              *(void *)&v129[4] = v100;
              *(_WORD *)&v129[12] = 2114;
              *(void *)&v129[14] = v84;
              *(_WORD *)&v129[22] = 2113;
              *(void *)uint64_t v130 = v85;
              _os_log_error_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "[%{public}@][%{public}@] Failed to obtain fresh account for appleID: %{private}@", v129, 0x20u);
            }
            long long v93 = 0;
LABEL_52:
            if (v35) {
              goto LABEL_77;
            }
          }
LABEL_93:
          id v72 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
          {
            id v78 = sub_100424C14(v23);
            *(_DWORD *)uint64_t v129 = 138412546;
            *(void *)&v129[4] = v78;
            *(_WORD *)&v129[12] = 2114;
            *(void *)&v129[14] = v100;
            _os_log_error_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "[%@][%{public}@] failed metadata lookup", v129, 0x16u);
          }
          goto LABEL_96;
        }
LABEL_104:

        id v2 = (char *)v2 + 1;
      }
      while (v96 != v2);
      id v86 = [obj countByEnumeratingWithState:&v104 objects:v123 count:16];
      id v96 = v86;
    }
    while (v86);
  }
}

void sub_1002B678C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B6864()
{
  self;
  id v0 = +[LSApplicationWorkspace defaultWorkspace];
  uint64_t v1 = [v0 applicationIsInstalled:@"com.apple.AppStore"] ^ 1;

  return v1;
}

void sub_1002B68B0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002B692C;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002B692C(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "(RestoreManager) Forcing a refresh for the current cellular access policy", v3, 2u);
  }

  sub_1002B69B0((uint64_t)RestoreManager, *(void **)(*(void *)(a1 + 32) + 24));
}

void sub_1002B69B0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v2 != 0;
    LOWORD(v9) = 1024;
    *(_DWORD *)((char *)&v9 + 2) = [v2 allowsExpensiveNetworkAccess];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "(RestoreManager) Applying new restore cellular policy (cellular = %d, expensive = %d)", buf, 0xEu);
  }

  if (v2)
  {
    if ([v2 allowsExpensiveNetworkAccess]) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = 4;
    }
    uint64_t v5 = 62;
  }
  else
  {
    uint64_t v5 = 60;
    uint64_t v4 = 4;
  }
  *(void *)long long buf = 0;
  id v9 = buf;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  int v6 = sub_1003E0BA4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002C0044;
  v7[3] = &unk_100525CD8;
  void v7[5] = v4;
  v7[6] = v5;
  void v7[4] = buf;
  [v6 modifyUsingTransaction:v7];

  _Block_object_dispose(buf, 8);
}

void sub_1002B6B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002B6B70(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    int v6 = &v5;
    uint64_t v7 = 0x3032000000;
    uint64_t v8 = sub_100018098;
    id v9 = sub_100017C08;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1002B6C6C;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1002B6C6C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v32 = *(void *)(a1 + 32);
    uint64_t v1 = objc_opt_new();
    id v2 = sub_1003E0BA4();
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_1002BDDC4;
    v44[3] = &unk_100522C00;
    id v3 = v1;
    id v45 = v3;
    [v2 readUsingSession:v44];

    id v4 = [objc_alloc((Class)NSSortDescriptor) initWithKey:0 ascending:0 comparator:&stru_100525B00];
    int v35 = v3;
    uint64_t v5 = [v3 keyEnumerator];
    int v6 = [v5 allObjects];
    id v31 = v4;
    id v48 = v4;
    uint64_t v7 = +[NSArray arrayWithObjects:&v48 count:1];
    uint64_t v8 = [v6 sortedArrayUsingDescriptors:v7];

    id v9 = objc_alloc_init((Class)NSMutableArray);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id obj = v8;
    id v10 = [obj countByEnumeratingWithState:&v40 objects:v47 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v41 != v12) {
            objc_enumerationMutation(obj);
          }
          id v14 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          unsigned int v15 = [v35 objectForKeyedSubscript:v14];
          id v16 = sub_1003A47AC((uint64_t)[v14 integerValue]);
          uint64_t v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (%ld) ----------------------", v16, [v15 count]);
          [v9 addObject:v17];

          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          id v18 = v15;
          id v19 = [v18 countByEnumeratingWithState:&v36 objects:v46 count:16];
          if (v19)
          {
            id v20 = v19;
            uint64_t v21 = *(void *)v37;
            do
            {
              for (uint64_t j = 0; j != v20; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v37 != v21) {
                  objc_enumerationMutation(v18);
                }
                [v9 addObject:*(void *)(*((void *)&v36 + 1) + 8 * (void)j)];
              }
              id v20 = [v18 countByEnumeratingWithState:&v36 objects:v46 count:16];
            }
            while (v20);
          }
        }
        id v11 = [obj countByEnumeratingWithState:&v40 objects:v47 count:16];
      }
      while (v11);
    }

    id v23 = objc_alloc_init((Class)NSMutableDictionary);
    [v23 setObject:v9 forKeyedSubscript:@"items"];
    uint64_t v24 = +[NSNumber numberWithInteger:sub_1002B9730()];
    [v23 setObject:v24 forKeyedSubscript:@"totalRemaining"];

    uint64_t v25 = +[NSNumber numberWithInteger:sub_1002B3C04(v32)];
    [v23 setObject:v25 forKeyedSubscript:@"activeRestoreCount"];

    uint64_t v26 = +[NSNumber numberWithInteger:sub_1002B38A4(v32)];
    [v23 setObject:v26 forKeyedSubscript:@"totalSoftFailureCount"];

    uint64_t v27 = +[NSNumber numberWithInteger:sub_1002B3CE4(v32)];
    [v23 setObject:v27 forKeyedSubscript:@"totalHardFailureCount"];

    int v28 = sub_1003F36B0();
    [v23 setObject:v28 forKeyedSubscript:@"softFailureRetryDate"];
  }
  else
  {
    id v23 = 0;
  }
  uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8);
  __int16 v30 = *(void **)(v29 + 40);
  *(void *)(v29 + 40) = v23;
}

void sub_1002B7108(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  int v6 = v5;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002B71B8;
    block[3] = &unk_100522080;
    void block[4] = a1;
    id v9 = v5;
    char v10 = a3;
    dispatch_async(v7, block);
  }
}

void sub_1002B71B8(uint64_t a1)
{
}

void sub_1002B71C8(uint64_t a1, void *a2, unsigned int a3)
{
  id v4 = a2;
  if (a1)
  {
    id v26 = v4;
    id v5 = objc_msgSend(v4, "ams_DSID");
    int v6 = [v26 username];
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Retrying restore of apps for account: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v52 = 0x3032000000;
    __int16 v53 = sub_100018098;
    id v54 = sub_100017C08;
    id v55 = (id)objc_opt_new();
    uint64_t v38 = 0;
    long long v39 = &v38;
    uint64_t v40 = 0x3032000000;
    long long v41 = sub_100018098;
    long long v42 = sub_100017C08;
    id v43 = (id)objc_opt_new();
    uint64_t v8 = sub_1003E0BA4();
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_1002BFB28;
    v33[3] = &unk_100525C68;
    void v33[4] = a1;
    uint64_t v27 = v6;
    __int16 v34 = v27;
    int v28 = v5;
    int v35 = v28;
    p_long long buf = &buf;
    long long v37 = &v38;
    [v8 modifyUsingTransaction:v33];

    if ([*(id *)(*((void *)&buf + 1) + 40) count])
    {
      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        char v10 = [*(id *)(*((void *)&buf + 1) + 40) allObjects];
        id v11 = [v10 componentsJoinedByString:@", "];
        *(_DWORD *)id v45 = 138543874;
        long long v46 = v28;
        __int16 v47 = 2114;
        id v48 = v27;
        __int16 v49 = 2114;
        id v50 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Re-bootstrapping account: %{public}@/%{public}@ apps: [%{public}@]", v45, 0x20u);
      }
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      id v12 = *(id *)(*((void *)&buf + 1) + 40);
      id v13 = [v12 countByEnumeratingWithState:&v29 objects:v44 count:16];
      if (v13)
      {
        uint64_t v14 = *(void *)v30;
        do
        {
          for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v30 != v14) {
              objc_enumerationMutation(v12);
            }
            id v16 = *(void **)(*((void *)&v29 + 1) + 8 * i);
            uint64_t v17 = [[_TtC9appstored6LogKey alloc] initWithAppInstallMemoryEntity:v16];
            id v18 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id v45 = 138412802;
              long long v46 = v17;
              __int16 v47 = 2114;
              id v48 = v28;
              __int16 v49 = 2114;
              id v50 = v27;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%@] Retrying following authentication of account: %{public}@/%{public}@", v45, 0x20u);
            }

            sub_1002BC600(v16, 0);
          }
          id v13 = [v12 countByEnumeratingWithState:&v29 objects:v44 count:16];
        }
        while (v13);
      }

      id v19 = sub_1002B3410();
      id v20 = +[NSString stringWithFormat:@"Retry for account: %@/%@", v27, v28];
      uint64_t v21 = objc_msgSend(v26, "ams_DSID");
      sub_1002B4918(v19, v20, v21, a3);
    }
    if ([(id)v39[5] count])
    {
      uint32_t v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        id v23 = [(id)v39[5] allObjects];
        uint64_t v24 = [v23 componentsJoinedByString:@", "];
        *(_DWORD *)id v45 = 138543362;
        long long v46 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Non-matched failed restore apps are: [%{public}@]", v45, 0xCu);
      }
    }

    _Block_object_dispose(&v38, 8);
    _Block_object_dispose(&buf, 8);

    id v4 = v26;
  }
}

void sub_1002B771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1002B7774(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002B77F0;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002B77F0(uint64_t a1)
{
  id v2 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v3 = *(void *)(a1 + 32);
  long long v39 = v2;
  if (v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      BOOL v51 = v39;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] Retrying restore of apps that need a distributor", buf, 0xCu);
    }

    id v5 = sub_1003F9598();
    int v6 = sub_1002BD978(0, v5);
    if ([v6 count])
    {
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = [v6 array];
        id v9 = [v8 componentsJoinedByString:@", "];
        *(_DWORD *)long long buf = 138412546;
        BOOL v51 = v39;
        __int16 v52 = 2114;
        __int16 v53 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Updated the bootstrap state of system apps: [%{public}@]", buf, 0x16u);
      }
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      id v10 = v6;
      id v11 = [v10 countByEnumeratingWithState:&v40 objects:buf count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v41;
        do
        {
          for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v41 != v13) {
              objc_enumerationMutation(v10);
            }
            sub_100268C48((uint64_t)TelephonyUtility, *(void **)(*((void *)&v40 + 1) + 8 * i));
          }
          id v12 = [v10 countByEnumeratingWithState:&v40 objects:buf count:16];
        }
        while (v12);
      }
    }
    unsigned int v15 = sub_1003F923C();
    id v16 = sub_1002BD978(0, v15);
    if ([v16 count] == (id)1)
    {
      uint64_t v17 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_24;
      }
      id v18 = [v16 firstObject];
      *(_DWORD *)long long v44 = 138412546;
      id v45 = v39;
      __int16 v46 = 2114;
      __int16 v47 = v18;
      id v19 = "[%@] Updated the bootstrap state of %{public}@ to user initiated";
      id v20 = v17;
      uint32_t v21 = 22;
    }
    else
    {
      id v22 = [v16 count];
      uint64_t v17 = ASDLogHandleForCategory();
      BOOL v23 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if ((unint64_t)v22 < 2)
      {
        if (v23)
        {
          *(_DWORD *)long long v44 = 138412290;
          id v45 = v39;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] No user initiated distributor dependent apps in found", v44, 0xCu);
        }
LABEL_24:

        uint64_t v25 = sub_1002B3410();
        id v26 = +[NSString stringWithFormat:@"Retry user-initiated following distributor installation"];
        sub_1002B4918((uint64_t)v25, v26, 0, 1);

        uint64_t v27 = sub_1003F8FE8();
        int v28 = sub_1002BD978(0, v27);
        if ([v28 count] == (id)1)
        {
          long long v29 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            long long v30 = [v16 firstObject];
            *(_DWORD *)long long v44 = 138412546;
            id v45 = v39;
            __int16 v46 = 2114;
            __int16 v47 = v30;
            long long v31 = "[%@] Updated the bootstrap state of %{public}@ to user initiated";
            long long v32 = v29;
            uint32_t v33 = 22;
LABEL_30:
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, v44, v33);
          }
        }
        else
        {
          id v34 = [v28 count];
          long long v29 = ASDLogHandleForCategory();
          BOOL v35 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          if ((unint64_t)v34 < 2)
          {
            if (v35)
            {
              *(_DWORD *)long long v44 = 138412290;
              id v45 = v39;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[%@] No distributor dependent background apps in found", v44, 0xCu);
            }
            goto LABEL_33;
          }
          if (v35)
          {
            long long v30 = [v16 firstObject];
            id v36 = [v16 count];
            *(_DWORD *)long long v44 = 138412802;
            id v45 = v39;
            __int16 v46 = 2114;
            __int16 v47 = v30;
            __int16 v48 = 2048;
            id v49 = v36;
            long long v31 = "[%@] Updated the bootstrap state of %{public}@ and %ld background app(s)";
            long long v32 = v29;
            uint32_t v33 = 32;
            goto LABEL_30;
          }
        }
LABEL_33:

        long long v37 = sub_1002B3410();
        uint64_t v38 = +[NSString stringWithFormat:@"Retry background following distributor installation"];
        sub_1002B4918((uint64_t)v37, v38, 0, 0);

        goto LABEL_34;
      }
      if (!v23) {
        goto LABEL_24;
      }
      id v18 = [v16 firstObject];
      id v24 = [v16 count];
      *(_DWORD *)long long v44 = 138412802;
      id v45 = v39;
      __int16 v46 = 2114;
      __int16 v47 = v18;
      __int16 v48 = 2048;
      id v49 = v24;
      id v19 = "[%@] Updated the bootstrap state of %{public}@ and %ld other user initiated app(s)";
      id v20 = v17;
      uint32_t v21 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, v44, v21);

    goto LABEL_24;
  }
LABEL_34:
}

void sub_1002B7DEC(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 connection];
  id v4 = sub_1003F96E4();
  sub_1002FF548((uint64_t)AppInstallEntity, v3, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 countOfEntities];
}

void sub_1002B7E90(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 connection];
  id v4 = sub_1003F941C();
  sub_1002FF548((uint64_t)AppInstallEntity, v3, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 countOfEntities];
}

void sub_1002B7F34(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 connection];
  id v4 = sub_1003F8B28();
  sub_1002FF548((uint64_t)AppInstallEntity, v3, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 countOfEntities];
}

uint64_t sub_1002B7FD8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = sub_1003E0BA4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1002B80B8;
  v4[3] = &unk_100522CF8;
  void v4[4] = &v5;
  [v1 readUsingSession:v4];

  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1002B80A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002B80B8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 connection];
  id v4 = sub_1003F8FE8();
  sub_1002FF548((uint64_t)AppInstallEntity, v3, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 countOfEntities];
}

void sub_1002B815C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  self = a3;
  id v205 = a4;
  uint64_t v213 = a2;
  if (a2 == 1)
  {
    id v11 = [[_TtC9appstored6LogKey alloc] initWithCategory:@"Ordered" base:&stru_10052E4D8];
    uint64_t v7 = [(LogKey *)v11 makeActivity];

    id Property = self;
    if (self)
    {
      ptrdiff_t v10 = 32;
      goto LABEL_7;
    }
LABEL_8:
    SEL v210 = (void *)v7;
    id v12 = Property;
    goto LABEL_10;
  }
  if (!a2)
  {
    int v6 = [[_TtC9appstored6LogKey alloc] initWithCategory:@"NonOrdered" base:&stru_10052E4D8];
    uint64_t v7 = [(LogKey *)v6 makeActivity];

    id Property = self;
    if (self)
    {
      ptrdiff_t v10 = 24;
LABEL_7:
      id Property = objc_getProperty(Property, v8, v10, 1);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  id v12 = 0;
  SEL v210 = 0;
LABEL_10:
  SEL v208 = v12;
  id v13 = [v12 count];
  uint64_t v14 = ASDLogHandleForCategory();
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    id v16 = v210;
    if (v15)
    {
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v210;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = [v208 count];
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%@] Attempting metadata lookup for %ld apps", buf, 0x16u);
    }

    long long v236 = 0u;
    long long v237 = 0u;
    long long v234 = 0u;
    long long v235 = 0u;
    uint64_t v17 = [v208 keyEnumerator];
    id v209 = [v17 countByEnumeratingWithState:&v234 objects:v255 count:16];
    if (!v209)
    {

      uint64_t v214 = 0;
      uint64_t v200 = 0;
      goto LABEL_251;
    }
    id v212 = 0;
    uint64_t v214 = 0;
    uint64_t v206 = *(void *)v235;
    p_info = InstallAttributionWebParamsDatabaseEntity.info;
    BOOL v207 = v17;
    while (1)
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v235 != v206) {
          objc_enumerationMutation(v17);
        }
        uint64_t v211 = v19;
        uint64_t v20 = *(void *)(*((void *)&v234 + 1) + 8 * v19);
        uint32_t v21 = +[ACAccountStore ams_sharedAccountStore];
        uint64_t v217 = v20;
        id v22 = objc_msgSend(v21, "ams_iTunesAccountWithDSID:", v20);

        BOOL v23 = [RestoreBatchInfo alloc];
        if (self) {
          int64_t v24 = self[2];
        }
        else {
          int64_t v24 = 0;
        }
        id v215 = v22;
        if (v23)
        {
          *(void *)long long buf = v23;
          *(void *)&uint8_t buf[8] = RestoreBatchInfo;
          uint64_t v25 = (RestoreBatchInfo *)objc_msgSendSuper2((objc_super *)buf, "init");
          BOOL v23 = v25;
          if (v25)
          {
            objc_storeStrong((id *)&v25->_account, v22);
            v23->_batchSize = v24;
            uint64_t v26 = +[NSMutableArray array];
            hardFailures = v23->_hardFailures;
            v23->_hardFailures = (NSMutableArray *)v26;

            uint64_t v28 = +[NSMutableArray array];
            softFailures = v23->_softFailures;
            v23->_softFailures = (NSMutableArray *)v28;

            uint64_t v30 = +[NSMutableArray array];
            successes = v23->_successes;
            v23->_successes = (NSMutableArray *)v30;

            uint64_t v32 = +[NSMutableArray array];
            tokenFailures = v23->_tokenFailures;
            v23->_tokenFailures = (NSMutableArray *)v32;
          }
        }

        if (!v213)
        {
          id v34 = self;
          if (!v23) {
            goto LABEL_235;
          }
          v23->_autoFinish = 1;
          if (!self)
          {
            BOOL v35 = 0;
            goto LABEL_30;
          }
          goto LABEL_29;
        }
        id v34 = self;
        if (self)
        {
          if (!v23) {
            goto LABEL_235;
          }
          v23->_autoFinish = self[1] & 1;
LABEL_29:
          BOOL v35 = v34[1] & 1;
          goto LABEL_30;
        }
        if (!v23)
        {
LABEL_235:
          int v37 = 1;
          id v36 = v208;
          goto LABEL_31;
        }
        BOOL v35 = 0;
        v23->_autoFinish = 0;
LABEL_30:
        id v36 = v208;
        int v37 = 0;
        v23->_userInitiated = v35;
        v23->_int failCoordinators = v205 != 0;
LABEL_31:
        id v38 = [v36 objectForKeyedSubscript:v217];
        long long v39 = v23;
        id v219 = v38;
        v224 = v39;
        int v226 = v37;
        if (![v38 count])
        {
          id v41 = 0;
          goto LABEL_184;
        }
        uint64_t v221 = 0;
        unint64_t v40 = 0;
        id v41 = 0;
        do
        {
          if (v37)
          {
            if (v40 < (unint64_t)[v38 count])
            {
              batchSize = 0;
              goto LABEL_39;
            }
          }
          else
          {
            unint64_t v42 = v39->_batchSize + v40;
            if (v42 < (unint64_t)[v38 count])
            {
              batchSize = (char *)v39->_batchSize;
              goto LABEL_39;
            }
          }
          batchSize = (char *)[v38 count] - v40;
LABEL_39:
          v223 = batchSize;
          long long v44 = [v38 subarrayWithRange:v40];
          id obj = v44;
          if (v41)
          {
            long long v252 = 0u;
            long long v253 = 0u;
            long long v250 = 0u;
            long long v251 = 0u;
            id v45 = [v44 countByEnumeratingWithState:&v250 objects:buf count:16];
            if (v45)
            {
              id v46 = v45;
              unint64_t v47 = v40;
              uint64_t v48 = *(void *)v251;
              do
              {
                id v49 = 0;
                do
                {
                  if (*(void *)v251 != v48) {
                    objc_enumerationMutation(obj);
                  }
                  id v50 = *(void **)(*((void *)&v250 + 1) + 8 * (void)v49);
                  sub_1003B8168(v50, v41);
                  if (v37) {
                    id v52 = 0;
                  }
                  else {
                    id v52 = objc_getProperty(v39, v51, 56, 1);
                  }
                  [v52 addObject:v50];
                  id v49 = (char *)v49 + 1;
                }
                while (v46 != v49);
                id v53 = [obj countByEnumeratingWithState:&v250 objects:buf count:16];
                id v46 = v53;
              }
              while (v53);
              unint64_t v40 = v47;
            }
            goto LABEL_151;
          }
          id v54 = v44;
          id v55 = v39;
          id v56 = v54;
          uint64_t v57 = sub_10029FF0C((id *)[RestoreBatchTask alloc], v56);

          if (v37) {
            id v59 = 0;
          }
          else {
            id v59 = objc_getProperty(v55, v58, 16, 1);
          }
          unint64_t v222 = v40;
          if (v57) {
            objc_setProperty_atomic_copy(v57, v58, v59, 40);
          }
          uint64_t v60 = *(void *)(a1 + 16);
          v268 = v57;
          id v61 = +[NSArray arrayWithObjects:&v268 count:1];
          if (v60) {
            [*(id *)(v60 + 8) addOperations:v61 waitUntilFinished:1];
          }

          if (v57) {
            id v63 = objc_getProperty(v57, v62, 32, 1);
          }
          else {
            id v63 = 0;
          }
          id v64 = v63;

          if (v64)
          {
            if (v57) {
              id v66 = objc_getProperty(v57, v65, 32, 1);
            }
            else {
              id v66 = 0;
            }
            id v67 = v66;
          }
          else
          {
            id v67 = 0;
          }
          uint64_t v68 = sub_1003E0BA4();
          *(void *)id v259 = _NSConcreteStackBlock;
          *(void *)&v259[8] = 3221225472;
          *(void *)&v259[16] = sub_1002BEFB8;
          v260 = &unk_1005236D0;
          long long v69 = v57;
          v261[0] = v69;
          [v68 modifyUsingTransaction:v259];

          if (v57) {
            id v71 = objc_getProperty(v69, v70, 64, 1);
          }
          else {
            id v71 = 0;
          }
          id v72 = v71;

          if (v72)
          {
            if (v37) {
              id v74 = 0;
            }
            else {
              id v74 = objc_getProperty(v55, v73, 32, 1);
            }
            id v76 = v74;
            if (v57) {
              id v77 = objc_getProperty(v69, v75, 64, 1);
            }
            else {
              id v77 = 0;
            }
            id v78 = v77;
            [v76 addObjectsFromArray:v78];

            int v37 = v226;
          }
          if (v57) {
            id v79 = objc_getProperty(v69, v73, 72, 1);
          }
          else {
            id v79 = 0;
          }
          id v80 = v79;

          if (v80)
          {
            if (v37) {
              id v82 = 0;
            }
            else {
              id v82 = objc_getProperty(v55, v81, 40, 1);
            }
            id v84 = v82;
            if (v57) {
              id v85 = objc_getProperty(v69, v83, 72, 1);
            }
            else {
              id v85 = 0;
            }
            id v86 = v85;
            [v84 addObjectsFromArray:v86];

            int v37 = v226;
          }
          if (v57) {
            id v87 = objc_getProperty(v69, v81, 80, 1);
          }
          else {
            id v87 = 0;
          }
          id v88 = v87;

          if (v88)
          {
            if (v37) {
              id v90 = 0;
            }
            else {
              id v90 = objc_getProperty(v55, v89, 48, 1);
            }
            id v92 = v90;
            if (v57) {
              id v93 = objc_getProperty(v69, v91, 80, 1);
            }
            else {
              id v93 = 0;
            }
            id v94 = v93;
            [v92 addObjectsFromArray:v94];

            int v37 = v226;
          }

          id v41 = v67;
          uint64_t v220 = v41;
          if (!v41) {
            goto LABEL_107;
          }
          if (!ASDErrorIsEqual())
          {
            id v41 = 0;
LABEL_107:
            unint64_t v40 = v222;
            goto LABEL_108;
          }
          id v41 = [v41 copy];
          long long v246 = 0u;
          long long v247 = 0u;
          long long v248 = 0u;
          long long v249 = 0u;
          id v95 = v56;
          id v96 = [v95 countByEnumeratingWithState:&v246 objects:v262 count:16];
          if (v96)
          {
            id v97 = v96;
            uint64_t v98 = *(void *)v247;
            do
            {
              unsigned int v99 = 0;
              do
              {
                if (*(void *)v247 != v98) {
                  objc_enumerationMutation(v95);
                }
                CFStringRef v100 = *(void **)(*((void *)&v246 + 1) + 8 * (void)v99);
                sub_1003B8168(v100, v41);
                if (v226) {
                  id v102 = 0;
                }
                else {
                  id v102 = objc_getProperty(v55, v101, 56, 1);
                }
                [v102 addObject:v100];
                unsigned int v99 = (char *)v99 + 1;
              }
              while (v97 != v99);
              id v103 = [v95 countByEnumeratingWithState:&v246 objects:v262 count:16];
              id v97 = v103;
            }
            while (v103);
          }

          long long v104 = ASDLogHandleForCategory();
          int v37 = v226;
          if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
          {
            id v151 = [v95 count];
            if (v226) {
              id v152 = 0;
            }
            else {
              id v152 = objc_getProperty(v55, v150, 16, 1);
            }
            BOOL v153 = objc_msgSend(v152, "ams_DSID");
            *(_DWORD *)id v259 = 134218242;
            *(void *)&v259[4] = v151;
            *(_WORD *)&v259[12] = 2114;
            *(void *)&v259[14] = v153;
            _os_log_error_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "Failed %ld items for accountID: %{public}@ due to token error", v259, 0x16u);
          }
          unint64_t v40 = v222;
          uint64_t v105 = (unsigned char *)[v38 count] - &v223[v222];
          if (v105 >= 1)
          {
            long long v106 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
            {
              if (v226) {
                id v154 = 0;
              }
              else {
                id v154 = objc_getProperty(v55, v107, 16, 1);
              }
              id v155 = objc_msgSend(v154, "ams_DSID");
              *(_DWORD *)id v259 = 134218242;
              *(void *)&v259[4] = v105;
              *(_WORD *)&v259[12] = 2114;
              *(void *)&v259[14] = v155;
              _os_log_error_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "Failing out remaining %ld items for accountID: %{public}@ due to token error", v259, 0x16u);

              unint64_t v40 = v222;
            }
          }
LABEL_108:
          SEL v108 = (char *)[v38 count];
          id v109 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
          {
            if (v37) {
              id v111 = 0;
            }
            else {
              id v111 = objc_getProperty(v55, v110, 16, 1);
            }
            uint64_t v113 = objc_msgSend(v111, "ams_DSID");
            if (v226) {
              id v114 = 0;
            }
            else {
              id v114 = objc_getProperty(v55, v112, 32, 1);
            }
            id v115 = [v114 count];
            *(_DWORD *)id v259 = 138544130;
            *(void *)&v259[4] = v113;
            *(_WORD *)&v259[12] = 2048;
            *(void *)&v259[14] = v221;
            *(_WORD *)&v259[22] = 2048;
            v260 = v115;
            LOWORD(v261[0]) = 2048;
            *(id *)((char *)v261 + 2) = &v108[-v40];
            _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "Batch complete for accountID: %{public}@ batch successes: %ld batch failures: %ld batch remaining: %ld", v259, 0x2Au);

            int v37 = v226;
          }

          if (v37) {
            id v117 = 0;
          }
          else {
            id v117 = objc_getProperty(v55, v116, 48, 1);
          }
          long long v39 = v224;
          v225 = v55;
          if ([v117 count])
          {
            long long v244 = 0u;
            long long v245 = 0u;
            long long v242 = 0u;
            long long v243 = 0u;
            if (v37) {
              id v119 = 0;
            }
            else {
              id v119 = objc_getProperty(v55, v118, 48, 1);
            }
            id v120 = v119;
            id v121 = [v120 countByEnumeratingWithState:&v242 objects:v258 count:16];
            if (v121)
            {
              id v122 = v121;
              uint64_t v123 = *(void *)v243;
              do
              {
                id v124 = 0;
                do
                {
                  if (*(void *)v243 != v123) {
                    objc_enumerationMutation(v120);
                  }
                  __int16 v125 = *(void **)(*((void *)&v242 + 1) + 8 * (void)v124);
                  CFStringRef v126 = [ProgressInfo alloc];
                  __int16 v127 = sub_100424D84(v125);
                  id v128 = sub_100424C14(v125);
                  uint64_t v129 = sub_10041F328((id *)&v126->super.isa, v127, 0, v128);

                  uint64_t v130 = sub_100424E64(v125);
                  __int16 v132 = v130;
                  if (v129)
                  {
                    objc_setProperty_atomic(v129, v131, v130, 152);

                    v129[18] = (id)384;
                  }
                  else
                  {
                  }
                  long long v133 = sub_100388088();
                  sub_100388208((uint64_t)v133, v129, @"Restore bootstrap complete");

                  long long v134 = sub_100388088();
                  BOOL v135 = sub_100424D84(v125);
                  long long v136 = sub_100424E64(v125);
                  sub_100389CD8((uint64_t)v134, v135, 0.0);

                  id v124 = (char *)v124 + 1;
                }
                while (v122 != v124);
                id v137 = [v120 countByEnumeratingWithState:&v242 objects:v258 count:16];
                id v122 = v137;
              }
              while (v137);
            }

            int v37 = v226;
            if (v226)
            {
              id v138 = 0;
              p_info = (__objc2_class_ro **)(InstallAttributionWebParamsDatabaseEntity + 32);
              id v38 = v219;
              long long v39 = v224;
              id v55 = v225;
              unint64_t v40 = v222;
              goto LABEL_135;
            }
            long long v39 = v224;
            id v55 = v225;
            p_info = (__objc2_class_ro **)(InstallAttributionWebParamsDatabaseEntity + 32);
            id v38 = v219;
            unint64_t v40 = v222;
            if (v224->_autoFinish) {
              sub_1002BAC18(v224->_userInitiated, 0);
            }
          }
          else if (v37)
          {
            id v138 = 0;
            goto LABEL_135;
          }
          id v138 = objc_getProperty(v55, v118, 32, 1);
LABEL_135:
          if ([v138 count])
          {
            long long v240 = 0u;
            long long v241 = 0u;
            long long v238 = 0u;
            long long v239 = 0u;
            if (v37) {
              id v140 = 0;
            }
            else {
              id v140 = objc_getProperty(v55, v139, 32, 1);
            }
            id v141 = v140;
            id v142 = [v141 countByEnumeratingWithState:&v238 objects:v257 count:16];
            if (v142)
            {
              id v143 = v142;
              uint64_t v144 = *(void *)v239;
              do
              {
                for (uint64_t i = 0; i != v143; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v239 != v144) {
                    objc_enumerationMutation(v141);
                  }
                  id v146 = *(void **)(*((void *)&v238 + 1) + 8 * i);
                  id v147 = sub_1003B80BC(v146);
                  if (!sub_1002BEA34(v147))
                  {
                    unsigned __int8 v256 = v146;
                    id v148 = +[NSArray arrayWithObjects:&v256 count:1];
                    id v55 = v225;
                    sub_1002BA214((uint64_t)(p_info + 246), v148, @"Metadata lookup failure");
                  }
                }
                id v143 = [v141 countByEnumeratingWithState:&v238 objects:v257 count:16];
              }
              while (v143);
            }

            id v38 = v219;
            long long v39 = v224;
            int v37 = v226;
            unint64_t v40 = v222;
          }
          if (v37) {
            id v149 = 0;
          }
          else {
            id v149 = objc_getProperty(v55, v139, 48, 1);
          }
          v221 += (uint64_t)[v149 count];

LABEL_151:
          v40 += (unint64_t)v223;
        }
        while (v40 < (unint64_t)[v38 count]);
        if (v41) {
          id v41 = v41;
        }
LABEL_184:

        id v157 = v41;
        if (v37) {
          id v158 = 0;
        }
        else {
          id v158 = objc_getProperty(v39, v156, 48, 1);
        }
        id v160 = [v158 count];
        if (v37) {
          id v161 = 0;
        }
        else {
          id v161 = objc_getProperty(v224, v159, 32, 1);
        }
        id v163 = [v161 count];
        if (v213 == 1 && v157)
        {
          id v164 = self;
          if (self) {
            id v164 = objc_getProperty(self, v162, 24, 1);
          }
          id v165 = v164;
          v166 = [v165 objectForKeyedSubscript:v217];

          long long v232 = 0u;
          long long v233 = 0u;
          long long v230 = 0u;
          long long v231 = 0u;
          id v167 = v166;
          id v168 = [v167 countByEnumeratingWithState:&v230 objects:v254 count:16];
          if (v168)
          {
            id v169 = v168;
            uint64_t v170 = *(void *)v231;
            do
            {
              v171 = 0;
              do
              {
                if (*(void *)v231 != v170) {
                  objc_enumerationMutation(v167);
                }
                id v172 = *(void **)(*((void *)&v230 + 1) + 8 * (void)v171);
                sub_1003B8168(v172, v157);
                if (v226) {
                  id v174 = 0;
                }
                else {
                  id v174 = objc_getProperty(v224, v173, 56, 1);
                }
                [v174 addObject:v172];
                v171 = (char *)v171 + 1;
              }
              while (v169 != v171);
              id v175 = [v167 countByEnumeratingWithState:&v230 objects:v254 count:16];
              id v169 = v175;
            }
            while (v175);
          }

          BOOL v176 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
          {
            id v198 = [v167 count];
            *(_DWORD *)long long buf = 138412802;
            *(void *)&uint8_t buf[4] = v210;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v217;
            __int16 v264 = 2048;
            uint64_t v265 = (uint64_t)v198;
            _os_log_error_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_ERROR, "[%@][%{public}@] Hard failing %ld non ordered restores due to token failure", buf, 0x20u);
          }

          id v178 = self;
          p_info = (__objc2_class_ro **)(InstallAttributionWebParamsDatabaseEntity + 32);
          if (self) {
            id v178 = objc_getProperty(self, v177, 24, 1);
          }
          id v179 = v178;
          id v180 = [v179 objectForKeyedSubscript:v217];

          if (v180)
          {
            id v182 = self;
            if (self) {
              id v182 = objc_getProperty(self, v181, 24, 1);
            }
            id v183 = v182;
            [v183 removeObjectForKey:v217];
          }
          id v38 = v219;
          if (v226)
          {
LABEL_212:
            id v184 = 0;
            int v185 = 1;
            goto LABEL_215;
          }
        }
        else if (v37)
        {
          goto LABEL_212;
        }
        id v184 = objc_getProperty(v224, v162, 56, 1);
        int v185 = 0;
LABEL_215:
        if ([v184 count])
        {
          v186 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
          {
            if (v185)
            {
              id v196 = [0 count];
              int failCoordinators = 0;
            }
            else
            {
              id v196 = objc_msgSend(objc_getProperty(v224, v187, 56, 1), "count");
              int failCoordinators = v224->_failCoordinators;
            }
            *(_DWORD *)long long buf = 138413058;
            *(void *)&uint8_t buf[4] = v210;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v217;
            __int16 v264 = 2048;
            uint64_t v265 = (uint64_t)v196;
            __int16 v266 = 1024;
            LODWORD(v267) = failCoordinators;
            _os_log_error_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_ERROR, "[%@][%{public}@] Failing %ld token failures. Failing coordinators: %d", buf, 0x26u);
          }

          id v188 = sub_1003E0BA4();
          v228[0] = _NSConcreteStackBlock;
          v228[1] = 3221225472;
          v228[2] = sub_1002B9F24;
          v228[3] = &unk_1005236D0;
          v189 = v224;
          v229 = v189;
          [v188 modifyUsingTransaction:v228];

          if ((v185 & 1) == 0 && v189->_failCoordinators)
          {
            id v191 = objc_getProperty(v189, v190, 56, 1);
            sub_1002BA214((uint64_t)(p_info + 246), v191, @"Batch Token failure");
          }
        }
        v214 += (uint64_t)v160;
        id v192 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
        {
          if (v185) {
            id v194 = 0;
          }
          else {
            id v194 = objc_getProperty(v224, v193, 32, 1);
          }
          id v195 = [v194 count];
          *(_DWORD *)long long buf = 138413058;
          *(void *)&uint8_t buf[4] = v210;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v217;
          __int16 v264 = 2048;
          uint64_t v265 = v214;
          __int16 v266 = 2048;
          id v267 = v195;
          _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_DEFAULT, "[%@][%{public}@] Lookup complete with %ld successful lookups and %ld failures", buf, 0x2Au);
        }
        id v212 = &v212[(void)v163];

        uint64_t v19 = v211 + 1;
        uint64_t v17 = v207;
      }
      while ((id)(v211 + 1) != v209);
      id v199 = [v207 countByEnumeratingWithState:&v234 objects:v255 count:16];
      id v209 = v199;
      if (!v199)
      {

        if (v213 == 1)
        {
          id v16 = v210;
          if (v214 >= 1)
          {
            uint64_t v200 = (uint64_t)v212;
            if (self) {
              int v201 = self[1] & 1;
            }
            else {
              int v201 = 0;
            }
            sub_1002BAC18(v201, 1);
LABEL_251:
            uint64_t v14 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412802;
              *(void *)&uint8_t buf[4] = v16;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v214;
              __int16 v264 = 2048;
              uint64_t v265 = v200;
              v202 = "[%@] Bootstrap completed with successful lookups: %ld hard failures: %ld";
              id v203 = v14;
              uint32_t v204 = 32;
LABEL_253:
              _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_DEFAULT, v202, buf, v204);
            }
            goto LABEL_254;
          }
        }
        else
        {
          id v16 = v210;
        }
        uint64_t v200 = (uint64_t)v212;
        goto LABEL_251;
      }
    }
  }
  if (v15)
  {
    *(_DWORD *)long long buf = 138412290;
    id v16 = v210;
    *(void *)&uint8_t buf[4] = v210;
    v202 = "[%@] No restores to bootstrap";
    id v203 = v14;
    uint32_t v204 = 12;
    goto LABEL_253;
  }
  id v16 = v210;
LABEL_254:
}

uint64_t sub_1002B9730()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  id v0 = sub_1003E0BA4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1002BEF14;
  void v3[3] = &unk_100522CF8;
  v3[4] = &v4;
  [v0 readUsingSession:v3];

  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1002B97EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002B9804(void *a1, unsigned int a2)
{
  if (a1)
  {
    if (+[AMSDevice deviceIsAppleTV])
    {
      uint64_t v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Screen sync not preflighting", buf, 2u);
      }
    }
    else
    {
      unsigned int v38 = a2;
      id v5 = objc_opt_new();
      uint64_t v6 = sub_1003E0BA4();
      v52[0] = _NSConcreteStackBlock;
      v52[1] = 3221225472;
      v52[2] = sub_1002BF208;
      void v52[3] = &unk_100525BC8;
      void v52[4] = a1;
      uint64_t v4 = v5;
      id v53 = v4;
      [v6 readUsingSession:v52];

      uint64_t v7 = sub_1003F3514();
      int v37 = v4;
      if ([v7 count])
      {
        uint64_t v8 = +[NSMutableArray array];
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        id v9 = v4;
        id v10 = [v9 countByEnumeratingWithState:&v48 objects:v59 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v49;
          do
          {
            for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v49 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void **)(*((void *)&v48 + 1) + 8 * i);
              BOOL v15 = [v9 objectForKeyedSubscript:v14];
              if ([v7 containsObject:v14])
              {
                id v16 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543618;
                  id v56 = v15;
                  __int16 v57 = 2114;
                  id v58 = v14;
                  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Skipping previously attempted preflight of account: %{public}@/%{public}@", buf, 0x16u);
                }

                [v8 addObject:v14];
                sub_1002BF5E0((uint64_t)a1, v15, @"Preflight already attempted", 0);
              }
            }
            id v11 = [v9 countByEnumeratingWithState:&v48 objects:v59 count:16];
          }
          while (v11);
        }

        if ([v8 count]) {
          [v9 removeObjectsForKeys:v8];
        }

        uint64_t v4 = v37;
      }
      if ([v4 count])
      {
        if (sub_1003F4558())
        {
          sub_1002BBBC0((uint64_t)a1, v4);
        }
        else
        {
          id v36 = v7;
          uint64_t v17 = +[NSMutableArray array];
          long long v44 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          id v18 = v4;
          unsigned int v19 = v38;
          id v42 = [v18 countByEnumeratingWithState:&v44 objects:v54 count:16];
          if (v42)
          {
            uint64_t v41 = *(void *)v45;
            long long v39 = (void *)AKAppleIDAuthenticationErrorDomain;
            unint64_t v40 = v18;
            do
            {
              for (uint64_t j = 0; j != v42; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v45 != v41) {
                  objc_enumerationMutation(v18);
                }
                uint32_t v21 = *(void **)(*((void *)&v44 + 1) + 8 * (void)j);
                id v22 = [v18 objectForKeyedSubscript:v21];
                BOOL v23 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543618;
                  id v56 = v22;
                  __int16 v57 = 2114;
                  id v58 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Preflighting account: %{public}@/%{public}@", buf, 0x16u);
                }

                id v43 = 0;
                int64_t v24 = sub_1002B4648(a1, v22, &v43);
                id v25 = v43;
                uint64_t v26 = v25;
                if (v25)
                {
                  uint64_t v27 = v17;
                  uint64_t v28 = sub_1002BC894(v25, v39);
                  if (v28)
                  {
                    long long v29 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)long long buf = 138543618;
                      id v56 = v22;
                      __int16 v57 = 2114;
                      id v58 = v26;
                      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Cancel error authenticating for appleID: %{public}@ error: %{public}@", buf, 0x16u);
                    }

                    sub_1002BF5E0((uint64_t)a1, v22, @"User canceled auth dialog", v28);
                    uint64_t v17 = v27;
                    [v27 addObject:v21];
                  }
                  else
                  {
                    int v30 = sub_1002BB908(v26);
                    long long v31 = ASDLogHandleForCategory();
                    uint64_t v32 = v31;
                    if (v30)
                    {
                      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)long long buf = 138543618;
                        id v56 = v22;
                        __int16 v57 = 2114;
                        id v58 = v26;
                        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Recoverable error authenticating for appleID: %{public}@ error: %{public}@", buf, 0x16u);
                      }

                      unsigned int v19 = v38;
                      uint64_t v17 = v27;
                    }
                    else
                    {
                      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)long long buf = 138543618;
                        id v56 = v22;
                        __int16 v57 = 2114;
                        id v58 = v26;
                        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Error authenticating for appleID: %{public}@ error: %{public}@", buf, 0x16u);
                      }

                      uint64_t v17 = v27;
                      [v27 addObject:v21];
                      unsigned int v19 = v38;
                    }
                  }

                  id v18 = v40;
                }
                if (v24)
                {
                  [v17 addObject:v21];
                  sub_1002B71C8((uint64_t)a1, v24, v19);
                }
              }
              id v42 = [v18 countByEnumeratingWithState:&v44 objects:v54 count:16];
            }
            while (v42);
          }

          uint64_t v7 = v36;
          uint64_t v4 = v37;
          if ([v17 count])
          {
            if (!v36) {
              uint64_t v7 = &__NSArray0__struct;
            }
            uint32_t v33 = [v7 arrayByAddingObjectsFromArray:v17];
            sub_1003F36EC((uint64_t)AppDefaultsManager, v33);
            id v34 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              BOOL v35 = [v17 componentsJoinedByString:@","];
              *(_DWORD *)long long buf = 138543362;
              id v56 = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Updated attempted preflight accountIDs to: [%{public}@]", buf, 0xCu);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1002B9F24(uint64_t a1, void *a2)
{
  id v4 = a2;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 56, 1);
  }
  id v6 = Property;
  id v7 = [v6 countByEnumeratingWithState:&v38 objects:v50 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v39;
    p_info = InstallAttributionWebParamsDatabaseEntity.info;
    *(void *)&long long v8 = 138413058;
    long long v35 = v8;
    id v36 = v4;
    do
    {
      uint64_t v12 = 0;
      id v37 = v9;
      do
      {
        if (*(void *)v39 != v10) {
          objc_enumerationMutation(v6);
        }
        id v13 = *(void **)(*((void *)&v38 + 1) + 8 * (void)v12);
        if (objc_msgSend(v13, "databaseID", v35))
        {
          id v14 = objc_alloc((Class)(p_info + 281));
          id v15 = [v13 databaseID];
          id v16 = [v4 connection];
          uint64_t v17 = [v14 initWithPersistentID:v15 onConnection:v16];

          if (v17 && sub_1002C20AC(v17) != (id)-20)
          {
            id v18 = sub_10026E9D4(v17, @"coordinator_id");
            unsigned int v19 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v20 = sub_1002C1EE8(v17);
              uint64_t v21 = v10;
              id v22 = v18;
              id v23 = v6;
              id v24 = [v17 persistentID];
              id v25 = sub_1002C20AC(v17);
              uint64_t v26 = sub_1003A47AC((uint64_t)v25);
              *(_DWORD *)long long buf = v35;
              id v43 = v20;
              __int16 v44 = 2048;
              id v45 = v24;
              id v6 = v23;
              id v18 = v22;
              uint64_t v10 = v21;
              id v9 = v37;
              __int16 v46 = 2114;
              long long v47 = v26;
              __int16 v48 = 2114;
              long long v49 = v18;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%@] Refreshing non-failed installation (pid = '%lld', phase = '%{public}@', coordinatorID = '%{public}@')", buf, 0x2Au);

              id v4 = v36;
            }

            uint64_t v27 = [v13 propertyValues];
            [v17 setValuesWithDictionary:v27];

            if (v13) {
              id v29 = objc_getProperty(v13, v28, 40, 1);
            }
            else {
              id v29 = 0;
            }
            id v30 = v29;
            long long v31 = v30;
            if (v30) {
              uint64_t v32 = v30;
            }
            else {
              uint64_t v32 = &__NSArray0__struct;
            }
            sub_1002C35B4(v17, v32);

            p_info = (__objc2_class_ro **)(InstallAttributionWebParamsDatabaseEntity + 32);
          }
        }
        uint64_t v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      id v33 = [v6 countByEnumeratingWithState:&v38 objects:v50 count:16];
      id v9 = v33;
    }
    while (v33);
  }

  return 1;
}

void sub_1002BA214(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v61 = a3;
  self;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id obj = v4;
  id v5 = [obj countByEnumeratingWithState:&v70 objects:v74 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v71;
    uint64_t v62 = *(void *)v71;
    do
    {
      long long v8 = 0;
      id v63 = v6;
      do
      {
        if (*(void *)v71 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v70 + 1) + 8 * (void)v8);
        uint64_t v10 = objc_msgSend(v9, "valueForProperty:", @"restore_type", v49, v50, v51, v52, v53);
        id v11 = (char *)[v10 integerValue];

        if ((unint64_t)(v11 - 1) <= 2)
        {
          uint64_t v12 = sub_1003B80BC(v9);
          if (!v12)
          {
            uint64_t v12 = ASDErrorWithTitleAndMessage();
          }
          if (v11 == (char *)1) {
            uint64_t v13 = 3;
          }
          else {
            uint64_t v13 = 5;
          }
          id v14 = [v9 valueForProperty:@"coordinator_id"];
          if (v14)
          {
            id v69 = 0;
            sub_100278A30((uint64_t)IXAppInstallCoordinator, v14, (uint64_t)&v69);
            id v15 = (char *)objc_claimAutoreleasedReturnValue();
            id v16 = v69;
            uint64_t v17 = v16;
            if (v15)
            {
              if (v16)
              {
LABEL_15:
                id v18 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                {
                  id v43 = sub_100424C14(v9);
                  *(_DWORD *)long long buf = 138413058;
                  *(void *)&uint8_t buf[4] = v43;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v11;
                  *(_WORD *)&unsigned char buf[22] = 2114;
                  id v76 = v61;
                  *(_WORD *)id v77 = 2114;
                  *(void *)&v77[2] = v17;
                  _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%@] Coordinator lookup with restoreType: %ld reason: '%{public}@' resulted in error: %{public}@", buf, 0x2Au);
                }
                goto LABEL_57;
              }
LABEL_23:
              if (v15 && v11 == (char *)1)
              {
                if (sub_1002799FC((BOOL)v15))
                {
                  uint64_t v17 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                  {
                    id v22 = sub_100424C14(v9);
                    *(_DWORD *)long long buf = 138412802;
                    *(void *)&uint8_t buf[4] = v22;
                    *(_WORD *)&unsigned char buf[12] = 2114;
                    *(void *)&buf[14] = v61;
                    *(_WORD *)&unsigned char buf[22] = 2114;
                    id v76 = v15;
                    id v23 = v17;
                    id v24 = "[%@] Skipping fail with reason: %{public}@ of completed restore coordinator: %{public}@";
                    goto LABEL_47;
                  }
                  goto LABEL_57;
                }
              }
              else if (!v15)
              {
                uint64_t v17 = ASDLogHandleForCategory();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  id v22 = sub_100424C14(v9);
                  *(_DWORD *)long long buf = 138412802;
                  *(void *)&uint8_t buf[4] = v22;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v11;
                  *(_WORD *)&unsigned char buf[22] = 2114;
                  id v76 = v61;
                  id v23 = v17;
                  id v24 = "[%@] No coordinator with restoreType: %ld reason: '%{public}@' to fail";
LABEL_47:
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, buf, 0x20u);
                }
LABEL_57:

                goto LABEL_58;
              }
              if (sub_10026E7EC(v9, @"supress_dialogs"))
              {
LABEL_30:
                int v59 = 0;
                int v56 = 0;
                goto LABEL_33;
              }
              if (ASDErrorIsEqual())
              {
                int v56 = 0;
                int v59 = 1;
LABEL_33:
                int IsEqual = 1;
              }
              else
              {
                if (ASDErrorIsEqual()) {
                  goto LABEL_30;
                }
                int IsEqual = ASDErrorIsEqual();
                int v59 = 0;
                int v56 = IsEqual;
              }
              uint64_t v26 = sub_10027967C((uint64_t)IXAppInstallCoordinator, v12, IsEqual ^ 1u, 0);
              if (!v26)
              {
                uint64_t v26 = IXCreateUserPresentableError();
              }
              id v67 = 0;
              char v27 = sub_100279D48(v15, v26, &v67);
              uint64_t v17 = v67;
              uint64_t v28 = ASDLogHandleForCategory();
              id v29 = v28;
              if (v27)
              {
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                {
                  id v30 = sub_100424C14(v9);
                  *(_DWORD *)long long buf = 138413314;
                  *(void *)&uint8_t buf[4] = v30;
                  *(_WORD *)&unsigned char buf[12] = 2114;
                  *(void *)&buf[14] = v15;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  id v76 = v11;
                  *(_WORD *)id v77 = 2114;
                  *(void *)&v77[2] = v61;
                  *(_WORD *)&v77[10] = 2114;
                  *(void *)&v77[12] = v12;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[%@] Failed coordinator %{public}@ with restoreType: %ld reason: '%{public}@' error: %{public}@", buf, 0x34u);
                }
                sub_100424C14(v9);
                long long v51 = v61;
                long long v49 = v52 = (char *)v12;
                long long v50 = v11;
                ASDDebugLog();

                if (v59)
                {
                  long long v31 = sub_100424E64(v9);
                  uint64_t v32 = sub_100424C14(v9);
                  id v57 = v31;
                  id v60 = v32;
                  self;
                  id v33 = objc_alloc((Class)AMSDialogRequest);
                  id v34 = ASDLocalizedString();
                  long long v35 = ASDLocalizedString();
                  id v36 = objc_msgSend(v33, "initWithTitle:message:", v34, v35, v49, v11, v61, v12);

                  id v37 = ASDLocalizedString();
                  long long v38 = +[AMSDialogAction actionWithTitle:v37 style:2];

                  id v78 = v38;
                  long long v39 = +[NSArray arrayWithObjects:&v78 count:1];
                  [v36 setButtonActions:v39];

                  sub_100422394(v36, @"restoreAppNeedsPurchasing");
                  id v55 = v38;
                  sub_10025F158(v38, @"cancel");
                  id v54 = v36;
                  if (sub_100009458())
                  {
                    long long v40 = ASDLocalizedString();
                    long long v41 = +[AMSDialogAction actionWithTitle:v40];

                    [v36 addButtonAction:v41];
                  }
                  else
                  {
                    long long v41 = 0;
                  }
                  __int16 v44 = objc_alloc_init(InteractiveRequestPresenter);
                  *(void *)long long buf = _NSConcreteStackBlock;
                  *(void *)&uint8_t buf[8] = 3221225472;
                  *(void *)&uint8_t buf[16] = sub_1002BCA14;
                  id v76 = (char *)&unk_100521DA0;
                  *(void *)id v77 = v60;
                  *(void *)&v77[8] = v41;
                  *(void *)&v77[16] = v57;
                  id v42 = v57;
                  id v58 = v41;
                  id v45 = v60;
                  [(InteractiveRequestPresenter *)v44 presentDialogRequest:v54 resultHandler:buf];

                  goto LABEL_54;
                }
                id v6 = v63;
                if (v56)
                {
                  id v42 = +[AppCapabilitiesService defaultService];
                  [v42 showIneligibleAlert];
                  goto LABEL_55;
                }
              }
              else
              {
                if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                {
                  __int16 v46 = sub_100424C14(v9);
                  *(_DWORD *)long long buf = 138413314;
                  *(void *)&uint8_t buf[4] = v46;
                  *(_WORD *)&unsigned char buf[12] = 2114;
                  *(void *)&buf[14] = v15;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  id v76 = v11;
                  *(_WORD *)id v77 = 2114;
                  *(void *)&v77[2] = v61;
                  *(_WORD *)&v77[10] = 2114;
                  *(void *)&v77[12] = v17;
                  _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "[%@] Fail of coordinator: %{public}@ with restoreType: %ld reason: '%{public}@' resulted in error: %{public}@", buf, 0x34u);
                }
                sub_100424C14(v9);
                id v42 = (id)objc_claimAutoreleasedReturnValue();
                id v52 = v61;
                id v53 = v17;
                long long v50 = v15;
                long long v51 = v11;
                long long v49 = v42;
                ASDDebugLog();
LABEL_54:
                id v6 = v63;
LABEL_55:
              }
              uint64_t v7 = v62;
              goto LABEL_57;
            }
          }
          else
          {
            uint64_t v17 = 0;
          }
          if (((v11 == (char *)1) & ~+[AMSDevice deviceIsAppleTV]) != 0)uint64_t v19 = 2; {
          else
          }
            uint64_t v19 = 1;
          uint64_t v20 = sub_100424D84(v9);
          uint64_t v68 = v17;
          uint64_t v7 = v62;
          sub_100278334((uint64_t)IXAppInstallCoordinator, v20, v13, v19, 0, 0, (uint64_t)&v68);
          id v15 = (char *)objc_claimAutoreleasedReturnValue();
          uint64_t v21 = v68;

          id v6 = v63;
          uint64_t v17 = v21;
          if (v21) {
            goto LABEL_15;
          }
          goto LABEL_23;
        }
LABEL_58:
        long long v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v70 objects:v74 count:16];
    }
    while (v6);
  }

  long long v47 = sub_1003E0BA4();
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472;
  v65[2] = sub_1002BC5D8;
  v65[3] = &unk_1005236D0;
  id v66 = obj;
  id v48 = obj;
  [v47 modifyUsingTransaction:v65];
}

void sub_1002BAC18(int a1, int a2)
{
  id v4 = ASDLogHandleForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a1)
  {
    if (!v5) {
      goto LABEL_10;
    }
    __int16 v13 = 0;
    id v6 = "Hydrate: Finishing completed content restore items";
    uint64_t v7 = (uint8_t *)&v13;
  }
  else if (a2)
  {
    if (!v5) {
      goto LABEL_10;
    }
    __int16 v12 = 0;
    id v6 = "Ordered: Finishing completed content restore items";
    uint64_t v7 = (uint8_t *)&v12;
  }
  else
  {
    if (!v5) {
      goto LABEL_10;
    }
    __int16 v11 = 0;
    id v6 = "Non Ordered: Finishing completed content restore items";
    uint64_t v7 = (uint8_t *)&v11;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
LABEL_10:

  uint64_t v8 = sub_1002ED270();
  id v9 = (void *)v8;
  if (a2) {
    uint64_t v10 = 512;
  }
  else {
    uint64_t v10 = 256;
  }
  sub_1002EDDA0(v8, v10);
}

uint64_t sub_1002BAD08(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = sub_10030B11C();
  uint64_t v2 = sub_10030C564(v1, @"p2-content-restore/url");

  id v11 = 0;
  uint64_t v3 = [v2 valueWithError:&v11];
  id v4 = v11;
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0;
  }
  uint64_t v6 = !v5;
  if (v5)
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      __int16 v13 = v9;
      __int16 v14 = 2114;
      id v15 = v4;
      id v10 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Failed to get bag URL for contentRestore due to error: %{public}@", buf, 0x16u);
    }
  }

  return v6;
}

void sub_1002BB774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002BB7A0(uint64_t a1, void *a2)
{
  id v13 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = [v13 userInfo];
    BOOL v5 = [v4 objectForKeyedSubscript:AMSBagChangedNotificationUserInfoProfile];
    uint64_t v6 = sub_10030B11C();
    uint64_t v7 = [v6 profile];
    if ([v5 isEqualToString:v7])
    {
      uint64_t v8 = [v13 userInfo];
      id v9 = [v8 objectForKeyedSubscript:AMSBagChangedNotificationUserInfoProfileVersion];
      id v10 = sub_10030B11C();
      id v11 = [v10 profileVersion];
      unsigned int v12 = [v9 isEqualToString:v11];

      if (v12) {
        [WeakRetained _handleMonitorStateDidChangeNotification:v13];
      }
    }
    else
    {
    }
  }
}

uint64_t sub_1002BB908(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 domain];
  if (([v2 isEqualToString:kCFErrorDomainCFNetwork] & 1) != 0
    || ([v2 isEqualToString:NSURLErrorDomain] & 1) != 0
    || (ASDErrorIsEqual() & 1) != 0
    || (ASDErrorIsEqual() & 1) != 0
    || (ASDErrorIsEqual() & 1) != 0
    || (ASDErrorIsEqual() & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    BOOL v5 = [v1 underlyingErrors];

    if (v5)
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      uint64_t v6 = objc_msgSend(v1, "underlyingErrors", 0);
      uint64_t v3 = (uint64_t)[v6 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3)
      {
        uint64_t v7 = *(void *)v10;
        while (2)
        {
          for (uint64_t i = 0; i != v3; ++i)
          {
            if (*(void *)v10 != v7) {
              objc_enumerationMutation(v6);
            }
            if (sub_1002BB908(*(void *)(*((void *)&v9 + 1) + 8 * i)))
            {
              uint64_t v3 = 1;
              goto LABEL_20;
            }
          }
          uint64_t v3 = (uint64_t)[v6 countByEnumeratingWithState:&v9 objects:v13 count:16];
          if (v3) {
            continue;
          }
          break;
        }
      }
LABEL_20:
    }
    else
    {
      uint64_t v3 = 0;
    }
  }

  return v3;
}

id sub_1002BBADC()
{
  uint64_t v4 = 0;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1005B0D80;
  uint64_t v7 = qword_1005B0D80;
  if (!qword_1005B0D80)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1002C0A7C;
    void v3[3] = &unk_1005243D0;
    v3[4] = &v4;
    sub_1002C0A7C((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1002BBBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002BBBC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    sub_1003F375C((uint64_t)AppDefaultsManager, v3);
    if (!*(void *)(a1 + 56))
    {
      id v4 = [objc_alloc((Class)sub_1002BBADC()) initWithClientIdentifier:@"com.apple.AppleMediaServices"];
      BOOL v5 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v4;
    }
    uint64_t v48 = 0;
    long long v49 = &v48;
    uint64_t v50 = 0x2050000000;
    uint64_t v6 = (void *)qword_1005B0DA8;
    uint64_t v51 = qword_1005B0DA8;
    if (!qword_1005B0DA8)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1002C0C70;
      id v58 = &unk_1005243D0;
      int v59 = &v48;
      sub_1002C0C70((uint64_t)buf);
      uint64_t v6 = (void *)v49[3];
    }
    uint64_t v39 = a1;
    long long v40 = v3;
    uint64_t v7 = v6;
    _Block_object_dispose(&v48, 8);
    id v41 = objc_alloc_init(v7);
    [v41 setDisplayStyle:0];
    [v41 setExtensionIdentifier:@"com.apple.AppStoreDaemon.ASDFollowUpExtension"];
    [v41 setGroupIdentifier:@"com.apple.appstoreDaemon.Restores"];
    [v41 setInformativeText:@"Some app restores require that you sign in to complete."];
    [v41 setTitle:@"Sign in to complete App Restores"];
    [v41 setUniqueIdentifier:@"ASD_RESTORES_FOLLOWUP"];
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Posting notification for accountID: %{public}@", buf, 0xCu);
    }

    uint64_t v48 = 0;
    long long v49 = &v48;
    uint64_t v50 = 0x2050000000;
    long long v9 = (void *)qword_1005B0DB0;
    uint64_t v51 = qword_1005B0DB0;
    if (!qword_1005B0DB0)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1002C0CE0;
      id v58 = &unk_1005243D0;
      int v59 = &v48;
      sub_1002C0CE0((uint64_t)buf);
      long long v9 = (void *)v49[3];
    }
    long long v10 = v9;
    _Block_object_dispose(&v48, 8);
    id v11 = objc_alloc_init(v10);
    [v11 setTitle:@"Sign in to complete App Restores"];
    [v11 setInformativeText:@"Some app restores require that you sign in to complete."];
    uint64_t v48 = 0;
    long long v49 = &v48;
    uint64_t v50 = 0x2020000000;
    long long v12 = (id *)qword_1005B0DB8;
    uint64_t v51 = qword_1005B0DB8;
    if (!qword_1005B0DB8)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1002C0D50;
      id v58 = &unk_1005243D0;
      int v59 = &v48;
      id v13 = (void *)sub_1002C0AEC();
      __int16 v14 = dlsym(v13, "FLNotificationOptionLockscreen");
      *(void *)(v59[1] + 24) = v14;
      qword_1005B0DB8 = *(void *)(v59[1] + 24);
      long long v12 = (id *)v49[3];
    }
    _Block_object_dispose(&v48, 8);
    if (!v12) {
      goto LABEL_38;
    }
    id v15 = *v12;
    id v55 = v15;
    uint64_t v48 = 0;
    long long v49 = &v48;
    uint64_t v50 = 0x2020000000;
    id v16 = (id *)qword_1005B0DC0;
    uint64_t v51 = qword_1005B0DC0;
    if (!qword_1005B0DC0)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1002C0DA0;
      id v58 = &unk_1005243D0;
      int v59 = &v48;
      uint64_t v17 = (void *)sub_1002C0AEC();
      id v18 = dlsym(v17, "FLNotificationOptionNotificationCenter");
      *(void *)(v59[1] + 24) = v18;
      qword_1005B0DC0 = *(void *)(v59[1] + 24);
      id v16 = (id *)v49[3];
    }
    _Block_object_dispose(&v48, 8);
    if (!v16)
    {
LABEL_38:
      dlerror();
      abort_report_np();
      __break(1u);
    }
    id v56 = *v16;
    id v19 = v56;
    uint64_t v20 = +[NSArray arrayWithObjects:&v55 count:2];

    uint64_t v21 = +[NSSet setWithArray:v20];
    [v11 setOptions:v21];

    [v11 setFirstNotificationDelay:0.0];
    [v41 setNotification:v11];

    id v42 = objc_opt_new();
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v22 = v40;
    id v23 = [v22 countByEnumeratingWithState:&v44 objects:v54 count:16];
    if (v23)
    {
      uint64_t v24 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v23; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v45 != v24) {
            objc_enumerationMutation(v22);
          }
          uint64_t v26 = *(void **)(*((void *)&v44 + 1) + 8 * i);
          char v27 = objc_opt_new();
          uint64_t v28 = [v22 objectForKeyedSubscript:v26];
          if (v28)
          {
            id v29 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v26 longLongValue]);
            [v27 setObject:v29 forKeyedSubscript:@"ASDAccountID"];
            [v27 setObject:v28 forKeyedSubscript:@"ASDAppleID"];
            id v30 = +[NSString stringWithFormat:@"%@", v28];
            long long v31 = [sub_1002BF124() actionWithLabel:v30 url:0];
            [v31 setIdentifier:@"auth"];
            [v31 setUserInfo:v27];
            [v42 addObject:v31];
          }
          else
          {
            id v29 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v26;
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Could not find an appleID for accountID: %{public}@ ", buf, 0xCu);
            }
          }
        }
        id v23 = [v22 countByEnumeratingWithState:&v44 objects:v54 count:16];
      }
      while (v23);
    }

    if ([v42 count])
    {
      uint64_t v32 = [sub_1002BF124() actionWithLabel:@"Clear" url:0];
      [v32 setIdentifier:@"clear"];
      CFStringRef v52 = @"ASDRestore_FOLLOWUP_ID";
      CFStringRef v53 = @"ASD_RESTORES_FOLLOWUP";
      id v33 = +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
      [v32 setUserInfo:v33];

      [v42 addObject:v32];
      [v41 setActions:v42];
      id v34 = *(void **)(v39 + 56);
      id v43 = 0;
      id v35 = v34;
      [v35 postFollowUpItem:v41 error:&v43];
      id v36 = v43;

      id v37 = ASDLogHandleForCategory();
      long long v38 = v37;
      if (v36)
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v22;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v36;
          _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Error posting followup for actionMap: %{public}@ error: %{public}@", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Posted followup for actionMap: %{public}@", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v32 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v22;
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Error posting followup for actionMap: %{public}@ no actions created", buf, 0xCu);
      }
    }

    id v3 = v40;
  }
}

void sub_1002BC48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002BC4B8(uint64_t a1)
{
  if (a1)
  {
    if (!*(void *)(a1 + 56))
    {
      id v2 = [objc_alloc((Class)sub_1002BBADC()) initWithClientIdentifier:@"com.apple.AppleMediaServices"];
      id v3 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v2;
    }
    sub_1003F375C((uint64_t)AppDefaultsManager, 0);
    id v4 = *(void **)(a1 + 56);
    id v8 = 0;
    id v5 = v4;
    [v5 clearPendingFollowUpItemsWithUniqueIdentifiers:&off_10054DE48 error:&v8];
    id v6 = v8;

    if (v6)
    {
      uint64_t v7 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v10 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error posting follow up for accountID: %{public}@", buf, 0xCu);
      }
    }
  }
}

uint64_t sub_1002BC5D8(uint64_t a1, id *a2)
{
  return 1;
}

void sub_1002BC600(void *a1, int a2)
{
  id v3 = a1;
  id v4 = sub_100424C14(v3);
  v16[1] = 0;
  id v5 = sub_1003C0068(v3);
  id v6 = 0;
  uint64_t v7 = v6;
  if (v5)
  {
    v16[0] = v6;
    id v8 = sub_1003BFC54(v5, v16);
    id v9 = v16[0];

    if (v8)
    {
      if (a2)
      {
        id v15 = v9;
        sub_100279904(v8, &v15);
        id v10 = v15;

        id v9 = v10;
      }
      id v11 = [v8 uniqueIdentifier];
      [v3 setValue:v11 forProperty:@"coordinator_id"];

      long long v12 = ASDLogHandleForCategory();
      id v13 = v12;
      if (!v9)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v18 = v4;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%@] Added initial progress", buf, 0xCu);
        }
        id v9 = 0;
        goto LABEL_16;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        id v18 = v4;
        __int16 v19 = 2114;
        id v20 = v9;
        __int16 v14 = "[%@] Error adding initial progress. Error: %{public}@";
LABEL_12:
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x16u);
      }
    }
    else
    {
      id v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        id v18 = v4;
        __int16 v19 = 2114;
        id v20 = v9;
        __int16 v14 = "[%@] Failed to create coordinator with error: %{public}@";
        goto LABEL_12;
      }
    }
LABEL_16:

    uint64_t v7 = v9;
    goto LABEL_17;
  }
  id v8 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412546;
    id v18 = v4;
    __int16 v19 = 2114;
    id v20 = v7;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Failed to create coordinator builder with error: %{public}@", buf, 0x16u);
  }
LABEL_17:
}

id sub_1002BC894(void *a1, void *a2)
{
  id v3 = a2;
  [a1 underlyingErrors];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (!v5) {
    goto LABEL_13;
  }
  id v6 = v5;
  uint64_t v7 = *(void *)v16;
  do
  {
    for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v16 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
      if (ASDErrorIsEqual())
      {
        id v10 = v9;
      }
      else
      {
        id v11 = objc_msgSend(v9, "underlyingErrors", (void)v15);
        id v12 = [v11 count];

        if (!v12) {
          continue;
        }
        sub_1002BC894(v9, v3);
        id v10 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v13 = v10;
      if (v10) {
        goto LABEL_14;
      }
    }
    id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  }
  while (v6);
LABEL_13:
  id v13 = 0;
LABEL_14:

  return v13;
}

void sub_1002BCA14(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v12 = a1[4];
      *(_DWORD *)long long buf = 138412546;
      id v18 = v12;
      __int16 v19 = 2114;
      id v20 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Wasn't able to display restore must purchase dialog: %{public}@", buf, 0x16u);
    }
    goto LABEL_4;
  }
  if (a1[5])
  {
    id v8 = [v5 selectedActionIdentifier];
    id v9 = [a1[5] identifier];
    unsigned int v10 = [v8 isEqualToString:v9];

    if (v10)
    {
      if ((uint64_t)[a1[6] longLongValue] < 1)
      {
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        id v13[2] = sub_1002BCD00;
        v13[3] = &unk_100521910;
        __int16 v14 = a1[4];
        sub_1004232CC((uint64_t)AppStore, v13);
        uint64_t v7 = v14;
      }
      else
      {
        id v11 = a1[6];
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_1002BCC2C;
        void v15[3] = &unk_100521910;
        long long v16 = a1[4];
        sub_1004231D4((uint64_t)AppStore, v11, v15);
        uint64_t v7 = v16;
      }
LABEL_4:
    }
  }
}

void sub_1002BCC2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@] Encountered error opening store. Error: %{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1002BCD00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@] Encountered error opening store. Error: %{public}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1002BCDD4(void *a1)
{
  id v1 = a1;
  id v2 = ASDErrorWithTitleAndMessage();
  id v3 = +[NSMutableArray array];
  id v4 = sub_1003E0BA4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002BCF1C;
  v8[3] = &unk_100525088;
  id v5 = v1;
  id v9 = v5;
  id v6 = v2;
  id v10 = v6;
  id v7 = v3;
  id v11 = v7;
  [v4 modifyUsingTransaction:v8];

  if ([v7 count]) {
    sub_1002BA214((uint64_t)RestoreManager, v7, @"Distributor needs to be installed");
  }
}

uint64_t sub_1002BCF1C(void **a1, void *a2)
{
  id v3 = [a2 connection];
  id v4 = sub_1002FF548((uint64_t)AppInstallEntity, v3, a1[4]);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002BD000;
  v6[3] = &unk_100525A48;
  id v7 = a1[5];
  id v8 = a1[6];
  [v4 enumerateMemoryEntitiesUsingBlock:v6];

  return 1;
}

void sub_1002BD000(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  sub_1003B8168(v4, v3);
  [*(id *)(a1 + 40) addObject:v4];
}

uint64_t sub_1002BD05C(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = sub_1002B7FD8(a1);
  id v12 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Found %ld app(s) needing to install a distributor", buf, 0x16u);
  }

  if (!v11 && !a4)
  {
    uint64_t v13 = 1;
    goto LABEL_26;
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  char v62 = 0;
  __int16 v14 = [0 localizedName];
  if (!v10)
  {
    id v41 = 0;
LABEL_13:
    long long v16 = ASDLocalizedString();
    id v42 = +[NSString localizedStringWithFormat:v16];
    id v43 = v14;
    goto LABEL_14;
  }
  long long v15 = +[ApplicationProxy proxyForBundleID:v10];
  id v43 = [v15 localizedName];
  id v41 = v15;

  if (!v15)
  {
    id v41 = 0;
    goto LABEL_12;
  }
  if (![v43 length])
  {
LABEL_12:
    __int16 v14 = v43;
    goto LABEL_13;
  }
  long long v16 = ASDLocalizedString();
  id v42 = +[NSString localizedStringWithFormat:v16];
LABEL_14:

  long long v17 = ASDLocalizedString();
  long long v44 = +[AMSDialogRequest requestWithTitle:v17 message:v42];

  id v18 = ASDLocalizedString();
  __int16 v19 = +[AMSDialogAction actionWithTitle:v18 style:2];

  id v20 = ASDLocalizedString();
  uint64_t v21 = +[AMSDialogAction actionWithTitle:v20];

  v60[0] = v19;
  v60[1] = v21;
  id v22 = +[NSArray arrayWithObjects:v60 count:2];
  [v44 setButtonActions:v22];

  dispatch_semaphore_t v23 = dispatch_semaphore_create(0);
  uint64_t v24 = objc_alloc_init(InteractiveRequestPresenter);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  void v50[2] = sub_1002BD710;
  void v50[3] = &unk_100525A70;
  id v25 = v9;
  id v51 = v25;
  id v26 = v21;
  id v52 = v26;
  id v55 = buf;
  id v27 = v19;
  id v53 = v27;
  uint64_t v28 = v23;
  id v54 = v28;
  sub_10033D494((uint64_t)v24, v44, 1, v50);
  long long v40 = v24;
  dispatch_semaphore_wait(v28, 0xFFFFFFFFFFFFFFFFLL);
  if (*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    if (v10)
    {
      id v29 = sub_1003F98D4((uint64_t)AppInstallPredicates, v10);
      id v30 = sub_1002BD978(-1, v29);
      if ([v30 count])
      {
        long long v31 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = [v30 array];
          uint64_t v32 = [v39 componentsJoinedByString:@", "];
          *(_DWORD *)id v58 = 138412546;
          *(void *)&v58[4] = v25;
          *(_WORD *)&v58[12] = 2114;
          *(void *)&v58[14] = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[%@] User selected to install distributor [%{public}@]", v58, 0x16u);
        }
      }
    }
    id v33 = [objc_alloc((Class)ASDSystemAppMetadata) initWithBundleID:@"com.apple.AppStore"];
    [v33 setUserInitiated:1];
    *(void *)id v58 = 0;
    *(void *)&v58[8] = v58;
    *(void *)&v58[16] = 0x2020000000;
    char v59 = 0;
    dispatch_semaphore_t v34 = dispatch_semaphore_create(0);
    id v35 = sub_10022889C();
    id v57 = v33;
    id v36 = +[NSArray arrayWithObjects:&v57 count:1];
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v45[2] = sub_1002BDA7C;
    v45[3] = &unk_100525A98;
    id v46 = v25;
    id v47 = v10;
    long long v49 = v58;
    id v37 = v34;
    uint64_t v48 = v37;
    [v35 installSystemApps:v36 onPairedDevice:0 withReplyHandler:v45];

    dispatch_semaphore_wait(v37, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v56 = *(unsigned char *)(*(void *)&v58[8] + 24) != 0;

    _Block_object_dispose(v58, 8);
  }
  else
  {
    if (a5)
    {
      ASDErrorWithTitleAndMessage();
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    BOOL v56 = 0;
  }

  _Block_object_dispose(buf, 8);
  uint64_t v13 = v56;
LABEL_26:

  return v13;
}

void sub_1002BD6B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1002BD710(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    if (*(void *)(a1 + 40)
      && ([v5 selectedActionIdentifier],
          id v9 = objc_claimAutoreleasedReturnValue(),
          [*(id *)(a1 + 40) identifier],
          id v10 = objc_claimAutoreleasedReturnValue(),
          unsigned int v11 = [v9 isEqualToString:v10],
          v10,
          v9,
          v11))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v12 = *(void *)(a1 + 32);
      int v19 = 138412290;
      uint64_t v20 = v12;
      uint64_t v13 = "[%@] User selected to install distributor";
    }
    else if (*(void *)(a1 + 48) {
           && ([v5 selectedActionIdentifier],
    }
               __int16 v14 = objc_claimAutoreleasedReturnValue(),
               [*(id *)(a1 + 48) identifier],
               long long v15 = objc_claimAutoreleasedReturnValue(),
               unsigned int v16 = [v14 isEqualToString:v15],
               v15,
               v14,
               v16))
    {
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v17 = *(void *)(a1 + 32);
      int v19 = 138412290;
      uint64_t v20 = v17;
      uint64_t v13 = "[%@] User selected to not install distributor";
    }
    else
    {
      id v7 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138412290;
      uint64_t v20 = v18;
      uint64_t v13 = "[%@] No user selection was made";
    }
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v19, 0xCu);
    goto LABEL_15;
  }
  id v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v19 = 138412546;
    uint64_t v20 = v8;
    __int16 v21 = 2114;
    id v22 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@] Wasn't able to display restore distributor dialog: %{public}@", (uint8_t *)&v19, 0x16u);
  }
LABEL_15:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

id sub_1002BD978(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableOrderedSet orderedSet];
  id v5 = sub_1003E0BA4();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1002BDBF8;
  v10[3] = &unk_100525AC0;
  id v6 = v3;
  id v12 = v4;
  uint64_t v13 = a1;
  id v11 = v6;
  id v7 = v4;
  [v5 modifyUsingTransaction:v10];

  id v8 = [v7 copy];
  return v8;
}

void sub_1002BDA7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v14 = 138412802;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v10;
      __int16 v18 = 2114;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Promoting distributor app %{public}@ failed: %{public}@", (uint8_t *)&v14, 0x20u);
    }
  }
  else
  {
    if (v8)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = [v5 firstObject];
      int v14 = 138412802;
      uint64_t v15 = v11;
      __int16 v16 = 2114;
      uint64_t v17 = v12;
      __int16 v18 = 2114;
      id v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Promoting distributor app %{public}@ (%{public}@)", (uint8_t *)&v14, 0x20u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t sub_1002BDBF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 connection];
  id v5 = sub_1002FF548((uint64_t)AppInstallEntity, v4, *(void **)(a1 + 32));

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1002BDCE8;
  v10[3] = &unk_100523758;
  id v7 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v11 = v3;
  uint64_t v13 = v6;
  id v12 = v7;
  id v8 = v3;
  [v5 enumeratePersistentIDsUsingBlock:v10];

  return 1;
}

void sub_1002BDCE8(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v8 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  uint64_t v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
  [(SQLiteEntity *)v8 setValue:v6 forProperty:@"bootstrapped"];

  id v7 = sub_10026E95C(v8, @"bundle_id");
  if (v7) {
    [*(id *)(a1 + 40) addObject:v7];
  }
}

void sub_1002BDDC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054C240];
  v15[0] = v4;
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054C258];
  v15[1] = v5;
  uint64_t v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054C270];
  v15[2] = v6;
  id v7 = +[NSArray arrayWithObjects:v15 count:3];
  id v8 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v7];

  uint64_t v9 = [v3 connection];
  uint64_t v10 = sub_1002FF548((uint64_t)AppInstallEntity, v9, v8);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002BDFA4;
  v12[3] = &unk_100522A90;
  id v13 = v3;
  id v14 = *(id *)(a1 + 32);
  id v11 = v3;
  [v10 enumeratePersistentIDsUsingBlock:v12];
}

void sub_1002BDFA4(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v27 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  uint64_t v6 = [(SQLiteEntity *)v27 valueForProperty:@"restore_state"];
  id v7 = [v6 integerValue];

  id v8 = sub_10026E91C(v27, @"bootstrapped");
  uint64_t v9 = [(SQLiteEntity *)v27 valueForProperty:@"order_index"];
  uint64_t v10 = [(SQLiteEntity *)v27 valueForProperty:@"phase"];
  id v11 = [(SQLiteEntity *)v27 valueForProperty:@"coordinator_id"];
  if (v10) {
    id v12 = (_UNKNOWN **)v10;
  }
  else {
    id v12 = &off_10054C288;
  }
  id v13 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:v27];
  uint64_t v14 = [*(id *)(a1 + 40) objectForKeyedSubscript:v12];
  if (!v14)
  {
    uint64_t v14 = objc_opt_new();
    [*(id *)(a1 + 40) setObject:v14 forKeyedSubscript:v12];
  }
  uint64_t v15 = sub_100367A80(v27, @"failure_error");
  if (v9)
  {
    CFStringRef v16 = +[NSString stringWithFormat:@"order: %@ ", v9];
  }
  else
  {
    CFStringRef v16 = &stru_10052E4D8;
  }
  id v26 = (void *)v14;
  uint64_t v17 = (__CFString *)v16;
  if (v15)
  {
    [v15 domain];
    uint64_t v24 = v12;
    id v25 = v9;
    id v19 = v18 = v11;
    id v20 = v7;
    id v21 = [v15 code];
    id v22 = [v15 localizedDescription];
    dispatch_semaphore_t v23 = +[NSString stringWithFormat:@"[%@] cid: %@ restoreState: %ld bootstrapPhase: %ld %@error: %@ %ld %@", v13, v18, v20, v8, v17, v19, v21, v22];

    id v11 = v18;
    id v12 = v24;
    uint64_t v9 = v25;
  }
  else
  {
    dispatch_semaphore_t v23 = +[NSString stringWithFormat:@"[%@] cid: %@ restoreState: %ld bootstrapPhase: %ld %@", v13, v11, v7, v8, v16];
  }
  [v26 addObject:v23];
}

int64_t sub_1002BE23C(id a1, NSString *a2, NSString *a3)
{
  id v4 = a3;
  NSInteger v5 = [(NSString *)a2 integerValue];
  NSInteger v6 = [(NSString *)v4 integerValue];

  if (v5 < v6) {
    return -1;
  }
  else {
    return v5 > v6;
  }
}

void sub_1002BE308(uint64_t a1)
{
  id v2 = sub_10026CA24();
  int v3 = sub_1002BAD08(*(void *)(a1 + 32));
  if (sub_10026D598((uint64_t)v2)
    && sub_10026D0B8((uint64_t)v2)
    && (sub_100259614(),
        id v4 = objc_claimAutoreleasedReturnValue(),
        unsigned int v5 = [v4 isConnected] & v3,
        v4,
        v5 == 1))
  {
    NSInteger v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v27[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device state changed and ready to restore", (uint8_t *)v27, 2u);
    }

    id v7 = *(void **)(a1 + 32);
    if (v7) {
      uint64_t v8 = v7[6];
    }
    else {
      uint64_t v8 = 0;
    }
    [v7 _bootstrapWhenReadyWithInfo:v8];
    uint64_t v9 = *(unsigned char **)(a1 + 32);
    if (v9)
    {
      if (!v9[44]) {
        goto LABEL_27;
      }
      uint64_t v10 = +[NSNotificationCenter defaultCenter];
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = sub_10026CA24();
      [v10 removeObserver:v11 name:@"DeviceStateDidChangeNotification" object:v12];

      uint64_t v9 = *(unsigned char **)(a1 + 32);
      if (v9)
      {
LABEL_27:
        if (!v9[45]) {
          goto LABEL_26;
        }
        id v13 = +[NSNotificationCenter defaultCenter];
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = sub_100259614();
        [v13 removeObserver:v14 name:@"NetworkStateDidChangeNotification" object:v15];

        uint64_t v9 = *(unsigned char **)(a1 + 32);
        if (v9)
        {
LABEL_26:
          if (v9[46])
          {
            CFStringRef v16 = +[NSNotificationCenter defaultCenter];
            uint64_t v17 = *(void *)(a1 + 32);
            uint64_t v18 = AMSBagChangedNotification;
            id v19 = sub_100259614();
            [v16 removeObserver:v17 name:v18 object:v19];

            uint64_t v9 = *(unsigned char **)(a1 + 32);
          }
        }
      }
    }
    sub_100263C08((uint64_t)v9, 0);
    uint64_t v20 = *(void *)(a1 + 32);
    if (v20)
    {
      *(unsigned char *)(v20 + 44) = 0;
      uint64_t v21 = *(void *)(a1 + 32);
      if (v21)
      {
        *(unsigned char *)(v21 + 45) = 0;
        uint64_t v22 = *(void *)(a1 + 32);
        if (v22) {
          *(unsigned char *)(v22 + 46) = 0;
        }
      }
    }
  }
  else
  {
    dispatch_semaphore_t v23 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v24 = sub_10026D598((uint64_t)v2);
      BOOL v25 = sub_10026D0B8((uint64_t)v2);
      id v26 = sub_100259614();
      v27[0] = 67109888;
      v27[1] = v24;
      __int16 v28 = 1024;
      BOOL v29 = v25;
      __int16 v30 = 1024;
      unsigned int v31 = [v26 isConnected];
      __int16 v32 = 1024;
      int v33 = v3;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Device state changed setup not ready for restore. Setup complete: %d migrator complete: %d network connected: %d bag loaded: %d", (uint8_t *)v27, 0x1Au);
    }
  }
}

uint64_t sub_1002BE61C(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  uint64_t v11 = 0;
  if (a2)
  {
    sub_100237D68(a2, v3, 0, &v11, (uint64_t)&v16);
    id v4 = v11;
  }
  else
  {
    id v4 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
  }
  id v5 = v4;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v7 = v17;
  *(_OWORD *)(v6 + 32) = v16;
  *(_OWORD *)(v6 + 4_Block_object_dispose(&a9, 8) = v7;
  if (v5)
  {
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = sub_100424C14(*(void **)(a1 + 32));
      *(_DWORD *)long long buf = 138412546;
      id v13 = v10;
      __int16 v14 = 2114;
      id v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Restore import failed with error: %{public}@", buf, 0x16u);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setDatabaseID:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 32)];
  }

  return 1;
}

uint64_t sub_1002BE760(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = [RestoreBatchTask alloc];
  id v39 = v9;
  id v12 = +[NSArray arrayWithObjects:&v39 count:1];
  id v13 = sub_10029FF0C((id *)&v11->super.super.super.isa, v12);

  __int16 v14 = [v9 valueForProperty:@"restore_type"];
  id v15 = [v14 integerValue];

  if (v15 == (id)3)
  {
    char v17 = 1;
    if (!v13) {
      goto LABEL_6;
    }
    *((unsigned char *)v13 + 56) = 1;
    goto LABEL_5;
  }
  if (v13)
  {
LABEL_5:
    objc_setProperty_atomic_copy(v13, v16, v10, 40);
    char v17 = 0;
    *((unsigned char *)v13 + 57) = a4;
    goto LABEL_6;
  }
  char v17 = 1;
LABEL_6:
  uint64_t v18 = *(void *)(a1 + 16);
  long long v38 = v13;
  id v19 = +[NSArray arrayWithObjects:&v38 count:1];
  if (v18) {
    [*(id *)(v18 + 8) addOperations:v19 waitUntilFinished:1];
  }

  if (v17) {
    id Property = 0;
  }
  else {
    id Property = objc_getProperty(v13, v20, 80, 1);
  }
  id v22 = Property;
  id v23 = [v22 count];

  if (v23)
  {
    BOOL v25 = sub_1003E0BA4();
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_1002BFAC0;
    v36[3] = &unk_1005236D0;
    id v37 = v13;
    [v25 modifyUsingTransaction:v36];
  }
  if (v17) {
    id v26 = 0;
  }
  else {
    id v26 = objc_getProperty(v13, v24, 32, 1);
  }
  id v27 = v26;

  if (a5 && v27)
  {
    if (v17) {
      id v29 = 0;
    }
    else {
      id v29 = objc_getProperty(v13, v28, 32, 1);
    }
    uint64_t v30 = 0;
    *a5 = v29;
  }
  else
  {
    unsigned int v31 = sub_1003B80BC(v9);
    __int16 v32 = v31;
    if (a5) {
      BOOL v33 = v31 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    int v34 = !v33;
    if (!v33) {
      *a5 = v31;
    }
    uint64_t v30 = v34 ^ 1u;
  }
  return v30;
}

BOOL sub_1002BEA34(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1 && ((ASDErrorIsEqual() & 1) != 0 || (ASDErrorIsEqual() & 1) != 0 || (ASDErrorIsEqual() & 1) != 0);

  return v2;
}

uint64_t sub_1002BEAC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  long long v14 = 0u;
  long long v15 = 0u;
  if (v3)
  {
    sub_100237D68(v3, *(void **)(a1 + 32), 0, 0, (uint64_t)&v14);
    if (*(unsigned char *)(a1 + 48)) {
      BOOL v5 = *((void *)&v15 + 1) == 1;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      uint64_t v6 = [AppInstallEntity alloc];
      uint64_t v7 = v14;
      uint64_t v8 = [v4 connection];
      id v9 = [(SQLiteEntity *)v6 initWithPersistentID:v7 onConnection:v8];

      id v10 = sub_1003B6884(v9);
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
  }

  return 1;
}

void sub_1002BEBC8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = sub_1003E0BA4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1002BECA0;
  v5[3] = &unk_100525AC0;
  uint64_t v8 = *(void *)(a1 + 48);
  id v6 = WeakRetained;
  id v7 = *(id *)(a1 + 32);
  id v4 = WeakRetained;
  [v3 modifyUsingTransaction:v5];
}

uint64_t sub_1002BECA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [AppInstallEntity alloc];
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [v3 connection];
  id v7 = [(SQLiteEntity *)v4 initWithPersistentID:v5 onConnection:v6];

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002BEE00;
  void v14[3] = &unk_100525B50;
  id v15 = *(id *)(a1 + 32);
  sub_1002C34E0(v7, v14);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    char v10 = *(unsigned char *)(v9 + 48) & 1;
    if (v3)
    {
LABEL_3:
      id Property = objc_getProperty(v3, v8, 24, 1);
      goto LABEL_4;
    }
  }
  else
  {
    char v10 = 0;
    if (v3) {
      goto LABEL_3;
    }
  }
  id Property = 0;
LABEL_4:
  id v12 = Property;

  if (v10)
  {
    if (v12) {
      v12[16] |= 0x1000uLL;
    }
  }
  else
  {
    sub_100286910((uint64_t)v12, *(void **)(a1 + 40));
  }

  return 1;
}

void sub_1002BEE00(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v9 = a2;
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 56);
  }
  else {
    uint64_t v4 = 0;
  }
  sub_1003D4C80((uint64_t)v9, v4);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v6 = 0;
  }
  sub_1003D4D3C((uint64_t)v9, v6);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 72);
  }
  else {
    uint64_t v8 = 0;
  }
  sub_1003D4B04((uint64_t)v9, v8);
}

BOOL sub_1002BEEB0(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  BOOL v2 = sub_100367A80(a2, @"failure_error");
  uint64_t v3 = v2;
  if (v2) {
    BOOL v4 = sub_1002BEA34(v2);
  }
  else {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_1002BEF14(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 connection];
  BOOL v4 = sub_1003F8D50();
  sub_1002FF548((uint64_t)AppInstallEntity, v3, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 countOfEntities];
}

uint64_t sub_1002BEFB8(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80, 1);
  }
  id v6 = Property;
  id v7 = [v6 count];

  if (v7)
  {
    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v8, 80, 1);
    }
    id v10 = v9;
    id v11 = sub_10023845C(v4, v10);
  }
  id v12 = *(id *)(a1 + 32);
  if (v12) {
    id v12 = objc_getProperty(v12, v8, 72, 1);
  }
  id v13 = v12;
  id v14 = [v13 count];

  if (v14)
  {
    id v16 = *(id *)(a1 + 32);
    if (v16) {
      id v16 = objc_getProperty(v16, v15, 72, 1);
    }
    id v17 = v16;
    id v18 = sub_10023845C(v4, v17);
  }
  id v19 = *(id *)(a1 + 32);
  if (v19) {
    id v19 = objc_getProperty(v19, v15, 64, 1);
  }
  id v20 = v19;
  id v21 = [v20 count];

  if (v21)
  {
    id v23 = *(id *)(a1 + 32);
    if (v23) {
      id v23 = objc_getProperty(v23, v22, 64, 1);
    }
    id v24 = v23;
    id v25 = sub_10023845C(v4, v24);
  }
  return 1;
}

id sub_1002BF124()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1005B0D90;
  uint64_t v7 = qword_1005B0D90;
  if (!qword_1005B0D90)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1002C0DF0;
    void v3[3] = &unk_1005243D0;
    v3[4] = &v4;
    sub_1002C0DF0((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1002BF1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002BF208(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 connection];
  id v5 = sub_1003F96E4();
  uint64_t v6 = sub_1002FF548((uint64_t)AppInstallEntity, v4, v5);

  v15[0] = @"account_id";
  v15[1] = @"downloader_id";
  v15[2] = @"restore_state";
  uint64_t v7 = +[NSArray arrayWithObjects:v15 count:3];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1002BF380;
  v11[3] = &unk_100525BA0;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v12 = v3;
  uint64_t v13 = v8;
  id v14 = v9;
  id v10 = v3;
  [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v11];
}

void sub_1002BF380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  uint64_t v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  uint64_t v7 = [(SQLiteEntity *)v6 valueForProperty:@"restore_state"];
  id v8 = [v7 integerValue];

  if (v8 == (id)1 && sub_1002BEEB0(*(void *)(a1 + 40), v6))
  {
    id v9 = [(SQLiteEntity *)v6 valueForProperty:@"apple_id"];
    id v10 = [(SQLiteEntity *)v6 valueForProperty:@"account_id"];
    id v11 = [(SQLiteEntity *)v6 valueForProperty:@"downloader_id"];
    id v12 = v11;
    if (v9)
    {
      if (v11 && (uint64_t)[v11 longLongValue] >= 1)
      {
        uint64_t v13 = *(void **)(a1 + 48);
        id v14 = v12;
LABEL_10:
        id v15 = [v14 stringValue];
        [v13 setObject:v9 forKeyedSubscript:v15];

LABEL_17:
        goto LABEL_18;
      }
      if (v10 && (uint64_t)[v10 longLongValue] >= 1)
      {
        uint64_t v13 = *(void **)(a1 + 48);
        id v14 = v10;
        goto LABEL_10;
      }
      id v16 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:v6];
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 138412290;
        id v20 = v16;
        id v18 = "[%@] Couldn't find a downloaderID or purchaserID";
        goto LABEL_15;
      }
    }
    else
    {
      id v16 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:v6];
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 138412290;
        id v20 = v16;
        id v18 = "[%@] Couldn't find an appleID";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v19, 0xCu);
      }
    }

    goto LABEL_17;
  }
LABEL_18:
}

void sub_1002BF5E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543874;
    id v25 = v7;
    __int16 v26 = 2114;
    id v27 = v9;
    __int16 v28 = 2114;
    id v29 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failing all coordinators for appleID: %{public}@ error: %{public}@ reason: %{public}@", buf, 0x20u);
  }

  id v11 = +[NSMutableArray array];
  id v12 = sub_1003E0BA4();
  id v16 = _NSConcreteStackBlock;
  uint64_t v17 = 3221225472;
  id v18 = sub_1002BF7B8;
  int v19 = &unk_100525C18;
  id v13 = v7;
  id v20 = v13;
  uint64_t v21 = a1;
  id v14 = v9;
  id v22 = v14;
  id v15 = v11;
  id v23 = v15;
  [v12 readUsingSession:&v16];

  if (objc_msgSend(v15, "count", v16, v17, v18, v19)) {
    sub_1002BA214((uint64_t)RestoreManager, v15, v8);
  }
}

void sub_1002BF7B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054C258];
  v19[0] = v4;
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_state" equalToValue:&off_10054C258];
  v19[1] = v5;
  uint64_t v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"apple_id" equalToValue:*(void *)(a1 + 32)];
  void v19[2] = v6;
  id v7 = +[NSArray arrayWithObjects:v19 count:3];
  id v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  id v9 = [v3 connection];
  id v10 = sub_1002FF548((uint64_t)AppInstallEntity, v9, v8);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002BF9AC;
  void v14[3] = &unk_100525BF0;
  uint64_t v11 = *(void *)(a1 + 40);
  id v12 = *(void **)(a1 + 48);
  id v15 = v3;
  uint64_t v16 = v11;
  id v17 = v12;
  id v18 = *(id *)(a1 + 56);
  id v13 = v3;
  [v10 enumeratePersistentIDsUsingBlock:v14];
}

void sub_1002BF9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v12 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  uint64_t v6 = [(SQLiteEntity *)v12 valueForProperty:@"restore_state"];
  id v7 = [v6 integerValue];

  if (v7 == (id)1 && sub_1002BEEB0(*(void *)(a1 + 40), v12))
  {
    id v8 = [RestoreAppInstall alloc];
    id v9 = +[RestoreAppInstall defaultProperties];
    id v10 = [(SQLiteMemoryEntity *)v8 initWithDatabaseEntity:v12 properties:v9];

    uint64_t v11 = *(void **)(a1 + 48);
    if (v11) {
      sub_1003B8168(v10, v11);
    }
    [*(id *)(a1 + 56) addObject:v10];
  }
}

uint64_t sub_1002BFAC0(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80, 1);
  }
  id v6 = Property;
  id v7 = sub_10023845C(v4, v6);

  return 1;
}

uint64_t sub_1002BFB28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 connection];
  id v5 = sub_1003F96E4();
  id v6 = sub_1002FF548((uint64_t)AppInstallEntity, v4, v5);

  id v7 = +[RestoreAppInstall defaultProperties];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002BFC6C;
  v12[3] = &unk_100525C40;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v13 = v3;
  uint64_t v14 = v8;
  id v15 = v9;
  id v16 = *(id *)(a1 + 48);
  long long v17 = *(_OWORD *)(a1 + 56);
  id v10 = v3;
  [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v12];

  return 1;
}

void sub_1002BFC6C(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v7 = [(SQLiteEntity *)v6 valueForProperty:@"restore_state"];
  id v8 = [v7 integerValue];

  if (v8 && sub_1002BEEB0(*(void *)(a1 + 40), v6))
  {
    id v9 = [(SQLiteEntity *)v6 valueForProperty:@"apple_id"];
    id v10 = [(SQLiteEntity *)v6 valueForProperty:@"bundle_id"];
    uint64_t v11 = [(SQLiteEntity *)v6 valueForProperty:@"account_id"];
    id v12 = [(SQLiteEntity *)v6 valueForProperty:@"downloader_id"];
    if ((v9 && *(void *)(a1 + 48) && (objc_msgSend(v9, "isEqualToString:") & 1) != 0
       || (sub_1002BFFBC(*(id *)(a1 + 40), *(void **)(a1 + 56), v11) & 1) != 0
       || sub_1002BFFBC(*(id *)(a1 + 40), *(void **)(a1 + 56), v12))
      && v10)
    {
      int v19 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:v6];
      id v13 = [RestoreAppInstall alloc];
      uint64_t v14 = +[RestoreAppInstall defaultProperties];
      id v15 = [(SQLiteMemoryEntity *)v13 initWithDatabaseEntity:v6 properties:v14];

      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v15];
      id v16 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v10 allowPlaceholder:1 error:0];
      if ([v16 installType] == (id)7)
      {
        [(SQLiteMemoryEntity *)v15 setValue:&off_10054C240 forProperty:@"restore_type"];
        [(SQLiteEntity *)v6 setValue:&off_10054C240 forProperty:@"restore_type"];
        long long v17 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v21 = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Making a promoting coordinator", buf, 0xCu);
        }
      }
      [(SQLiteMemoryEntity *)v15 setValue:&off_10054C2B8, @"phase", v12 forProperty];
      [(SQLiteMemoryEntity *)v15 setValue:&off_10054C2A0 forProperty:@"restore_state"];
      [(SQLiteEntity *)v6 setValue:&off_10054C2B8 forProperty:@"phase"];
      [(SQLiteEntity *)v6 setValue:&off_10054C2A0 forProperty:@"restore_state"];

      id v12 = v18;
    }
    else
    {
      [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addObject:v10];
    }
  }
}

id sub_1002BFFBC(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    a1 = 0;
    if (v5)
    {
      if (v6)
      {
        if ([v5 integerValue] && objc_msgSend(v7, "integerValue")) {
          a1 = [v5 isEqualToNumber:v7];
        }
        else {
          a1 = 0;
        }
      }
    }
  }

  return a1;
}

uint64_t sub_1002C0044(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 connection];
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" equalToValue:&off_10054C258];
  id v6 = sub_1002FF548((uint64_t)AppInstallEntity, v4, v5);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1002C021C;
  void v15[3] = &unk_100525CB0;
  id v7 = v4;
  long long v18 = *(_OWORD *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v16 = v7;
  uint64_t v17 = v8;
  [v6 enumeratePersistentIDsUsingBlock:v15];
  id v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "(RestoreManager) Updated cellular access for %lu restore(s)", buf, 0xCu);
  }

  if (v3) {
    id Property = objc_getProperty(v3, v11, 24, 1);
  }
  else {
    id Property = 0;
  }
  id v13 = Property;

  if (v13) {
    v13[16] |= 0x1000uLL;
  }

  return 1;
}

void sub_1002C021C(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[AppInstallEntity alloc] initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1002C02D4;
  v4[3] = &unk_100525C88;
  long long v5 = *(_OWORD *)(a1 + 48);
  sub_1002C34E0(v3, v4);
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1002C02D4(uint64_t a1, void *a2)
{
  long long v5 = a2;
  id v3 = sub_1003D4CF0(v5);
  if ((unint64_t)v3 <= 4 && ((1 << (char)v3) & 0x19) != 0) {
    sub_1003D4D3C((uint64_t)v5, *(void *)(a1 + 32));
  }
  sub_1003D4B04((uint64_t)v5, *(void *)(a1 + 40));
}

void *sub_1002C0414(uint64_t a1)
{
  return sub_1002C041C(*(void **)(a1 + 32));
}

void *sub_1002C041C(void *result)
{
  if (result)
  {
    id v1 = (void *)result[4];
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1002C0498;
    v2[3] = &unk_100525D00;
    v2[4] = result;
    return [v1 fetchBackgroundRestoreCellularAccessWithCompletion:v2];
  }
  return result;
}

void sub_1002C0498(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C0564;
  block[3] = &unk_1005212D8;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1002C0564(void *a1)
{
  if (!a1[4])
  {
    id v3 = (void *)a1[6];
    id v4 = *(void **)(a1[5] + 24);
    if (v4)
    {
      if (v3)
      {
        unsigned __int8 v5 = [v4 isEqual:a1[6]];
        id v3 = (void *)a1[6];
        if (v5) {
          goto LABEL_11;
        }
      }
    }
    else if (!v3)
    {
LABEL_11:
      objc_storeStrong((id *)(a1[5] + 24), v3);
      return;
    }
    sub_1002B69B0((uint64_t)RestoreManager, v3);
    id v3 = (void *)a1[6];
    goto LABEL_11;
  }
  BOOL v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = a1[4];
    int v7 = 138543362;
    uint64_t v8 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "(RestoreManager) The restore cellular policy changed, but we couldn't fetch it: %{public}@", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1002C07C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%{public}@] Error in dialog task: %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

Class sub_1002C0A7C(uint64_t a1)
{
  sub_1002C0AEC();
  Class result = objc_getClass("FLFollowUpController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B0D80 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)sub_1002C0AEC();
  }
  return result;
}

uint64_t sub_1002C0AEC()
{
  v3[0] = 0;
  if (!qword_1005B0D88)
  {
    v3[1] = _NSConcreteStackBlock;
    void v3[2] = 3221225472;
    void v3[3] = sub_1002C0BFC;
    v3[4] = &unk_100521BF0;
    void v3[5] = v3;
    long long v4 = off_100525D20;
    uint64_t v5 = 0;
    qword_1005B0D88 = _sl_dlopen();
    id v1 = (void *)v3[0];
    uint64_t v0 = qword_1005B0D88;
    if (qword_1005B0D88)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      id v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return qword_1005B0D88;
}

uint64_t sub_1002C0BFC()
{
  uint64_t result = _sl_dlopen();
  qword_1005B0D88 = result;
  return result;
}

Class sub_1002C0C70(uint64_t a1)
{
  sub_1002C0AEC();
  Class result = objc_getClass("FLFollowUpItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B0DA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)sub_1002C0CE0(v3);
  }
  return result;
}

Class sub_1002C0CE0(uint64_t a1)
{
  sub_1002C0AEC();
  Class result = objc_getClass("FLFollowUpNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B0DB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)sub_1002C0D50(v3);
  }
  return result;
}

void *sub_1002C0D50(uint64_t a1)
{
  BOOL v2 = (void *)sub_1002C0AEC();
  Class result = dlsym(v2, "FLNotificationOptionLockscreen");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1005B0DB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1002C0DA0(uint64_t a1)
{
  BOOL v2 = (void *)sub_1002C0AEC();
  Class result = dlsym(v2, "FLNotificationOptionNotificationCenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1005B0DC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1002C0DF0(uint64_t a1)
{
  sub_1002C0AEC();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FLFollowUpAction");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1005B0D90 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    BOOL v2 = (LowDataEvaluatorTask *)abort_report_np();
    [(LowDataEvaluatorTask *)v2 main];
  }
}

id sub_1002C144C()
{
  self;
  if (qword_1005B0DD0 != -1) {
    dispatch_once(&qword_1005B0DD0, &stru_100525E60);
  }
  uint64_t v0 = (void *)qword_1005B0DC8;
  return v0;
}

void sub_1002C14A4(id a1)
{
  id v1 = objc_alloc_init(PowerMonitor);
  BOOL v2 = (void *)qword_1005B0DC8;
  qword_1005B0DC8 = (uint64_t)v1;
}

void sub_1002C15E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    *(_DWORD *)(v1 + 16) = -1;
    objc_initWeak(&location, (id)v1);
    SEL v3 = *(NSObject **)(v1 + 8);
    uint64_t v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    id v12 = sub_1002C1D14;
    uint64_t v13 = &unk_100523F28;
    objc_copyWeak(&v14, &location);
    uint32_t v4 = notify_register_dispatch("com.apple.system.powermanagement.poweradapter", (int *)(v1 + 16), v3, &v10);
    if (v4)
    {
      uint64_t v5 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        uint32_t v17 = v4;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[Power] Registration for power notification failed: %u", buf, 8u);
      }
    }
    else if (*(_DWORD *)(v1 + 16) != -1)
    {
      *(unsigned char *)(v1 + 25) = IOPSDrawingUnlimitedPower();
    }
    objc_destroyWeak(&v14);
    objc_destroyWeak(&location);
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      *(_DWORD *)(v6 + 20) = -1;
      objc_initWeak(&location, (id)v6);
      int v7 = *(NSObject **)(v6 + 8);
      uint64_t v10 = _NSConcreteStackBlock;
      uint64_t v11 = 3221225472;
      id v12 = sub_1002C1D74;
      uint64_t v13 = &unk_100523F28;
      objc_copyWeak(&v14, &location);
      uint32_t v8 = notify_register_dispatch("com.apple.system.lowpowermode", (int *)(v6 + 20), v7, &v10);
      if (v8)
      {
        int v9 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          uint32_t v17 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[Power] Registration for battery saver notification failed: %u", buf, 8u);
        }
      }
      else
      {
        sub_1002C1DC0(v6);
      }
      objc_destroyWeak(&v14);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1002C1868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_1002C1928(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1002C19E8;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002C19E8(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 24);
  return result;
}

BOOL sub_1002C19FC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1002C1ABC;
  v4[3] = &unk_100521988;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1002C1ABC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(unsigned char *)(*(void *)(a1 + 32) + 25);
  if (os_variant_has_internal_content())
  {
    BOOL v2 = sub_1003F3410();
    if (v2)
    {
      id v3 = v2;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 BOOLValue];
      BOOL v2 = v3;
    }
  }
}

void sub_1002C1B50(uint64_t a1)
{
  BOOL v2 = ASDLogHandleForCategory();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);

  if (v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint32_t v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v5 = "[Power] Low power mode is enabled";
LABEL_10:
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, v5, buf, 2u);
      }
    }
    else
    {
      int v6 = *(unsigned __int8 *)(a1 + 25);
      uint32_t v4 = ASDLogHandleForCategory();
      BOOL v7 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
      if (v6)
      {
        if (v7)
        {
          *(_WORD *)long long buf = 0;
          uint64_t v5 = "[Power] Power source is plugged in";
          goto LABEL_10;
        }
      }
      else if (v7)
      {
        *(_WORD *)long long buf = 0;
        uint64_t v5 = "[Power] Power source is battery";
        goto LABEL_10;
      }
    }
  }
  char v8 = dispatch_get_global_queue(17, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C1CB4;
  block[3] = &unk_100521388;
  void block[4] = a1;
  dispatch_async(v8, block);
}

void sub_1002C1CB4(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"PowerStateDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_1002C1D14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    if (*((_DWORD *)WeakRetained + 4) != -1) {
      *((unsigned char *)WeakRetained + 25) = IOPSDrawingUnlimitedPower();
    }
    sub_1002C1B50((uint64_t)v2);
    id WeakRetained = v2;
  }
}

void sub_1002C1D74(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    sub_1002C1DC0((uint64_t)WeakRetained);
    sub_1002C1B50((uint64_t)v2);
    id WeakRetained = v2;
  }
}

uint64_t sub_1002C1DC0(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 20);
  if (result != -1)
  {
    uint64_t state64 = 0;
    uint64_t result = notify_get_state(result, &state64);
    if (result) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = state64 == 0;
    }
    char v4 = !v3;
    *(unsigned char *)(a1 + 24) = v4;
  }
  return result;
}

id sub_1002C1E20(id result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = sub_10026E91C(result, @"update_type");
    if (result != (id)1) {
      return (id)(sub_10026E91C(v1, @"automatic_type") != 0);
    }
  }
  return result;
}

id sub_1002C1E74(id result)
{
  if (result) {
    return sub_10026E91C(result, @"automatic_type");
  }
  return result;
}

void *sub_1002C1E88(void *result)
{
  if (result) {
    return (void *)(sub_10026E91C(result, @"update_type") != 0);
  }
  return result;
}

void *sub_1002C1EB8(void *result)
{
  if (result) {
    return (void *)(sub_10026E91C(result, @"restore_type") != 0);
  }
  return result;
}

void *sub_1002C1EE8(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    BOOL v3 = (void *)a1[3];
    if (!v3)
    {
      char v4 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:a1];
      uint64_t v5 = (void *)v2[3];
      v2[3] = v4;

      BOOL v3 = (void *)v2[3];
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1002C1F5C(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithInteger:a2];
    [a1 setValue:v3 forProperty:@"automatic_type"];
  }
}

id sub_1002C1FCC(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"bundle_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002C2004(void *a1)
{
  if (a1)
  {
    a1 = sub_10026EA4C(a1, @"bundle_url");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002C203C(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E9D4(a1, @"coordinator_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002C2074(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E9D4(a1, @"external_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002C20AC(id result)
{
  if (result) {
    return sub_10026E91C(result, @"IFNULL(app_install.phase, 10)");
  }
  return result;
}

void sub_1002C20C0(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithInteger:a2];
    [a1 setValue:v3 forProperty:@"phase"];
  }
}

void *sub_1002C2130(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 valueForProperty:@"policy"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v2 = sub_1003D4BC0([AppInstallPolicy alloc], v1);
    }
    else {
      id v2 = 0;
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1002C21C0(void *a1, id *a2)
{
  if (a1)
  {
    if (a2) {
      a2 = (id *)[a2[1] copy];
    }
    id v3 = a2;
    [a1 setValue:a2 forProperty:@"policy"];
  }
}

id sub_1002C222C(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E95C(a1, @"install_verification_token");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002C2264(void *a1)
{
  if (a1)
  {
    a1 = sub_10026E82C(a1, @"item_id");
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002C229C(id result)
{
  if (result) {
    return sub_10026E91C(result, @"recovery_count");
  }
  return result;
}

void sub_1002C22B0(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithInteger:a2];
    [a1 setValue:v3 forProperty:@"priority"];
  }
}

id sub_1002C2320(id result)
{
  if (result) {
    return sub_10026E91C(result, @"software_platform");
  }
  return result;
}

id sub_1002C2334(id result)
{
  if (result) {
    return sub_10026E91C(result, @"source_type");
  }
  return result;
}

void sub_1002C2348(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithInteger:a2];
    [a1 setValue:v3 forProperty:@"update_type"];
  }
}

id sub_1002C23B8(id a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x3032000000;
    id v14 = sub_1000180A8;
    id v15 = sub_100017C10;
    id v16 = 0;
    id v2 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"parent_id", [a1 persistentID]);
    v18[0] = v2;
    id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"blocked" equalToValue:&__kCFBooleanFalse];
    v18[1] = v3;
    char v4 = +[NSArray arrayWithObjects:v18 count:2];
    uint64_t v5 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v4];

    CFStringRef v17 = @"package_type";
    int v6 = +[NSArray arrayWithObjects:&v17 count:1];
    BOOL v7 = [v1 connection];
    char v8 = sub_1002FF548((uint64_t)AppPackageEntity, v7, v5);

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002C2614;
    v10[3] = &unk_100524860;
    void v10[4] = v1;
    void v10[5] = &v11;
    [v8 enumeratePersistentIDsAndProperties:v6 usingBlock:v10];
    id v1 = (id)v12[5];

    _Block_object_dispose(&v11, 8);
  }
  return v1;
}

void sub_1002C25EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002C2614(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  id v8 = a3;
  int v9 = [AppPackageEntity alloc];
  uint64_t v10 = [*(id *)(a1 + 32) connection];
  uint64_t v11 = [(SQLiteEntity *)v9 initWithPersistentID:a2 onConnection:v10];
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  id v14 = [v8 objectForKeyedSubscript:@"package_type"];

  id v15 = [v14 integerValue];
  if (v15 == (id)1) {
    *a5 = 1;
  }
}

AppInstallsDatabaseChangeset *sub_1002C276C(void *a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    char v4 = 0;
    goto LABEL_21;
  }
  char v4 = objc_alloc_init(AppInstallsDatabaseChangeset);
  v29[0] = @"account_id";
  v29[1] = @"bundle_id";
  v29[2] = @"cancel_download_url";
  v29[3] = @"coordinator_id";
  void v29[4] = @"external_id";
  v29[5] = @"gizmo_pairing_id";
  v29[6] = @"item_id";
  v29[7] = @"remote_install";
  v29[8] = @"source_type";
  v29[9] = @"supress_dialogs";
  v29[10] = @"transaction_id";
  uint64_t v5 = +[NSArray arrayWithObjects:v29 count:11];
  int v6 = [a1 getValuesForProperties:v5];

  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  [v7 setObject:&off_10054C2D0 forKeyedSubscript:@"phase"];
  if (!v3)
  {
    uint64_t v9 = [a1 valueForProperty:@"failure_error"];
    if (v9)
    {
      id v8 = (void *)v9;
      id v3 = 0;
      goto LABEL_6;
    }
    NSErrorUserInfoKey v27 = NSDebugDescriptionErrorKey;
    CFStringRef v28 = @"Failure occurred but no error was provided";
    __int16 v26 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    id v3 = +[NSError errorWithDomain:ASDErrorDomain code:929 userInfo:v26];

    if (!v3) {
      goto LABEL_7;
    }
  }
  id v8 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:0];
  [v7 setObject:v8 forKeyedSubscript:@"failure_error"];
LABEL_6:

LABEL_7:
  [a1 setValuesWithDictionary:v7];
  uint64_t v10 = [v6 objectForKeyedSubscript:@"coordinator_id"];
  if (v10)
  {
    uint64_t v11 = [v6 objectForKeyedSubscript:@"bundle_id"];
    uint64_t v12 = sub_10027918C((uint64_t)lib_IXAppInstallCoordinatorTag, v10, v11);

    uint64_t v13 = [v6 objectForKeyedSubscript:@"supress_dialogs"];
    [v13 BOOLValue];

    id v14 = [v3 domain];
    unsigned int v15 = [v14 isEqualToString:IXUserPresentableErrorDomain];

    if (v15) {
      [v3 code];
    }
    id v16 = IXCreateUserPresentableError();
    sub_100286888((uint64_t)v4, v12, v16);
  }
  if (v4) {
    v4->_shouldPostUpdatesDone = 1;
  }
  CFStringRef v17 = [v6 objectForKeyedSubscript:@"source_type"];
  id v18 = [v17 integerValue];

  int v19 = sub_1002C2C24(a1, (uint64_t)v18, -20, v6);
  if (v4 && v19) {
    v4->_shouldPostAppsDone = 1;
  }
  uint64_t v20 = [v6 objectForKeyedSubscript:@"bundle_id"];
  sub_100286024((uint64_t)v4, v20);

  uint64_t v21 = [v6 objectForKeyedSubscript:@"external_id"];
  id v22 = (void *)v21;
  if (v21)
  {
    v30[0] = @"kind";
    v30[1] = @"identifier";
    *(void *)long long buf = @"finish";
    uint64_t v32 = v21;
    v30[2] = @"phase";
    id v23 = +[NSNumber numberWithInteger:-20];
    BOOL v33 = v23;
    id v24 = +[NSDictionary dictionaryWithObjects:buf forKeys:v30 count:3];

    sub_100285EAC((uint64_t)v4, v24);
  }
  else
  {
    id v24 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Skipping legacy finish notification because we don't have an identifier.", buf, 2u);
    }
  }

  sub_1002C2E94(v6, v3, v4);
LABEL_21:

  return v4;
}

uint64_t sub_1002C2C24(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (a2) {
    goto LABEL_14;
  }
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v9 = [v7 objectForKeyedSubscript:@"account_id"];
  id v10 = [v9 copy];
  [v8 setObject:v10 forKeyedSubscript:@"account_id"];

  if (a3 == -20 || a3 == -30)
  {
    CFStringRef v11 = @"cancel_download_url";
    uint64_t v12 = [v7 objectForKeyedSubscript:@"cancel_download_url"];

    if (!v12)
    {
LABEL_13:

LABEL_14:
      uint64_t v24 = 0;
      goto LABEL_15;
    }
    uint64_t v13 = &off_100527FC0;
  }
  else
  {
    uint64_t v14 = [v7 objectForKeyedSubscript:@"item_id"];
    if (!v14) {
      goto LABEL_13;
    }
    unsigned int v15 = (void *)v14;
    id v16 = [v7 objectForKeyedSubscript:@"transaction_id"];

    if (!v16) {
      goto LABEL_13;
    }
    CFStringRef v17 = [v7 objectForKeyedSubscript:@"item_id"];
    [v8 setObject:v17 forKeyedSubscript:@"item_id"];

    uint64_t v13 = &off_100527FC8;
    CFStringRef v11 = @"transaction_id";
  }
  id v18 = [v7 objectForKeyedSubscript:v11];
  [v8 setObject:v18 forKeyedSubscript:*v13];

  int v19 = [AppDoneEntity alloc];
  uint64_t v20 = [a1 connection];
  uint64_t v21 = [(SQLiteEntity *)v19 initWithPropertyValues:v8 onConnection:v20];

  if (!v21) {
    goto LABEL_13;
  }
  id v22 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v23 = sub_1002C1EE8(a1);
    int v26 = 138543362;
    NSErrorUserInfoKey v27 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%{public}@] Clearing item from queue", (uint8_t *)&v26, 0xCu);
  }
  uint64_t v24 = 1;
LABEL_15:

  return v24;
}

void sub_1002C2E94(void *a1, void *a2, void *a3)
{
  id v13 = a1;
  id v5 = a2;
  id v6 = a3;
  id v7 = [v13 objectForKeyedSubscript:@"source_type"];
  id v8 = [v7 integerValue];

  if (v8 == (id)2)
  {
    uint64_t v9 = [v13 objectForKeyedSubscript:@"bundle_id"];
    id v10 = [v13 objectForKeyedSubscript:@"gizmo_pairing_id"];
    CFStringRef v11 = [v13 objectForKeyedSubscript:@"remote_install"];
    unsigned int v12 = [v11 BOOLValue];

    if (v12) {
      sub_100285BC4((uint64_t)v6, v9, v10, v5);
    }
  }
}

AppInstallsDatabaseChangeset *sub_1002C2FA4(void *a1, uint64_t a2)
{
  if (a1)
  {
    char v4 = objc_alloc_init(AppInstallsDatabaseChangeset);
    CFStringRef v25 = @"phase";
    id v5 = +[NSNumber numberWithInteger:a2];
    int v26 = v5;
    id v6 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    [a1 setValuesWithDictionary:v6];

    v24[0] = @"account_id";
    v24[1] = @"bundle_id";
    void v24[2] = @"cancel_download_url";
    v24[3] = @"coordinator_id";
    v24[4] = @"external_id";
    void v24[5] = @"gizmo_pairing_id";
    v24[6] = @"item_id";
    void v24[7] = @"remote_install";
    uint8_t v24[8] = @"source_type";
    v24[9] = @"transaction_id";
    id v7 = +[NSArray arrayWithObjects:v24 count:10];
    id v8 = [a1 getValuesForProperties:v7];

    if (a2 == -30)
    {
      uint64_t v9 = [v8 objectForKeyedSubscript:@"coordinator_id"];
      if (v9)
      {
        id v10 = [v8 objectForKeyedSubscript:@"bundle_id"];
        CFStringRef v11 = sub_10027918C((uint64_t)lib_IXAppInstallCoordinatorTag, v9, v10);

        unsigned int v12 = IXCreateUserPresentableError();
        sub_100286888((uint64_t)v4, v11, v12);
      }
      if (sub_10026E91C(a1, @"update_type") && !sub_10026E91C(a1, @"source_type"))
      {
        id v13 = sub_10026E95C(a1, @"bundle_id");
        if (v13)
        {
          uint64_t v14 = sub_10001A308();
          unsigned int v15 = sub_1002C1EE8(a1);
          sub_1002E83AC(v14, v13, v15);

          if (v4) {
            v4->_shouldPostUpdatesDone = 1;
          }
        }
      }
    }
    id v16 = [v8 objectForKeyedSubscript:@"source_type"];
    id v17 = [v16 integerValue];

    if (sub_1002C2C24(a1, (uint64_t)v17, a2, v8) && v4) {
      v4->_shouldPostAppsDone = 1;
    }
    if (v17 == (id)2)
    {
      if (a2 == -40) {
        goto LABEL_25;
      }
      if (a2 != -20 && a2 != -30) {
        goto LABEL_27;
      }
      id v18 = sub_100367A80(a1, @"failure_error");
      if (!v18)
      {
        id v18 = ASDErrorWithDescription();
      }
      sub_1002C2E94(v8, v18, v4);
    }
    if (a2 == -30)
    {
      int v19 = [v8 objectForKeyedSubscript:@"bundle_id"];
      sub_100286024((uint64_t)v4, v19);
LABEL_26:

      goto LABEL_27;
    }
    if (a2 != -40)
    {
LABEL_27:
      uint64_t v20 = [v8 objectForKeyedSubscript:@"external_id"];
      v27[0] = @"kind";
      v27[1] = @"identifier";
      v28[0] = @"finish";
      v28[1] = v20;
      _DWORD v27[2] = @"phase";
      uint64_t v21 = +[NSNumber numberWithInteger:a2];
      v28[2] = v21;
      id v22 = +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:3];

      sub_100285EAC((uint64_t)v4, v22);
      goto LABEL_28;
    }
LABEL_25:
    int v19 = [v8 objectForKeyedSubscript:@"bundle_id"];
    sub_1002860A4((uint64_t)v4, v19);
    goto LABEL_26;
  }
  char v4 = 0;
LABEL_28:
  return v4;
}

void sub_1002C3480(id a1)
{
  id v1 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", @"app_package", 0);
  id v2 = (void *)qword_1005B0DD8;
  qword_1005B0DD8 = (uint64_t)v1;
}

void sub_1002C34E0(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    char v4 = sub_1002C2130(a1);
    id v5 = v4;
    if (v4)
    {
      id v6 = v4;
    }
    else
    {
      sub_1003D4A3C();
      id v6 = (id *)objc_claimAutoreleasedReturnValue();
    }
    id v8 = v6;

    v3[2](v3, v8);
    if (v8) {
      id v7 = [v8[1] copy];
    }
    else {
      id v7 = 0;
    }
    [a1 setValue:v7 forProperty:@"policy"];
  }
}

void sub_1002C35B4(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    char v4 = +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:](SQLiteComparisonPredicate, "predicateWithProperty:equalToLongLong:", @"parent_id", [a1 persistentID]);
    id v5 = [a1 connection];
    id v17 = v4;
    id v6 = sub_1002FF548((uint64_t)AppPackageEntity, v5, v4);
    [v6 deleteAllEntities];

    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v18 = v3;
    id v7 = v3;
    id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v20;
      do
      {
        CFStringRef v11 = 0;
        do
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          unsigned int v12 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v11);
          id v13 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(a1, "persistentID", v17));
          [v12 setValue:v13 forProperty:@"parent_id"];

          uint64_t v14 = [AppPackageEntity alloc];
          unsigned int v15 = [v12 propertyValues];
          id v16 = [a1 connection];

          CFStringRef v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v9);
    }

    id v3 = v18;
  }
}

id *sub_1002C3978(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)PurchaseHistoryItemsDAAPResponseMetadataParser;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

uint64_t sub_1002C3F88(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 1)
    {
      uint64_t v18 = PBReaderReadString();
      long long v19 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v18;
    }
    else
    {
      if (v12 == 2)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        while (1)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v15 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0) {
            goto LABEL_42;
          }
          v20 += 7;
          BOOL v9 = v21++ >= 9;
          if (v9)
          {
            uint64_t v15 = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v15 = 0;
        }
LABEL_44:
        uint64_t v25 = 8;
      }
      else
      {
        if (v12 != 3)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            uint64_t v15 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v15 = 0;
        }
LABEL_40:
        uint64_t v25 = 16;
      }
      *(void *)(a1 + v25) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1002C4468(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

NetworkEmulation *sub_1002C4494()
{
  self;
  uint64_t v0 = sub_1003F1F68((uint64_t)AppDefaultsManager, @"NetworkEmulation");
  if (v0)
  {
    id v1 = [NetworkEmulation alloc];
    id v2 = v0;
    if (v1)
    {
      v4.receiver = v1;
      v4.super_class = (Class)NetworkEmulation;
      id v1 = (NetworkEmulation *)objc_msgSendSuper2(&v4, "init");
      if (v1)
      {
        v1->_interfaceType = (int64_t)sub_1002687B0(v2, @"ifce", 0);
        v1->_isConstrained = sub_1002680CC(v2, @"cnst", 0);
        v1->_isExpensive = sub_1002680CC(v2, @"expn", 0);
        v1->_isRoaming = sub_1002680CC(v2, @"roam", 0);
      }
    }
  }
  else
  {
    id v1 = 0;
  }

  return v1;
}

void sub_1002C4D30(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_1002C4D48(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void *sub_1002C4DB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  self;
  unint64_t v7 = [TestFlightFeedbackUploadTask alloc];
  id v8 = v5;
  if (v7
    && (v13.receiver = v7,
        v13.super_class = (Class)TestFlightFeedbackUploadTask,
        (id v9 = objc_msgSendSuper2(&v13, "init")) != 0))
  {
    int v10 = v9;
    objc_storeStrong((id *)v9 + 6, a3);

    id v11 = v6;
    id v8 = (id)v10[7];
    v10[7] = v11;
  }
  else
  {

    int v10 = 0;
  }

  return v10;
}

void sub_1002C4FF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_super v4 = v3;
  if (a1)
  {
    id v71 = v3;
    id v5 = sub_100233A48(v3);
    uint64_t v75 = (void *)a1;
    if (v5 == (id)2)
    {
      id v6 = (_TtC9appstored6LogKey *)v71;
      uint64_t v33 = sub_100316F94((uint64_t)SubmitTestFlightFeedbackTask, v6);
      int v34 = (void *)a1;
      id v35 = (void *)v33;
      *(void *)&long long v79 = 0;
      unsigned int v36 = [v34 runSubTask:v33 returningError:&v79];
      id v37 = (id)v79;
      long long v38 = ASDLogHandleForCategory();
      id v39 = v38;
      if (v36)
      {
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          long long v40 = sub_100233614(v6);
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "[%@]: Successfully submitted feedback", buf, 0xCu);
        }
        id v41 = (void *)v75[7];
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_1002C5B68;
        id v90 = &unk_100524700;
        id v91 = v6;
        [v41 modifyUsingTransaction:buf];
        [v75 completeWithSuccess];
      }
      else
      {
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          id v69 = sub_100233614(v6);
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v69;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v37;
          _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "[%@]: Failed to upload feedback: %{public}@", buf, 0x16u);
        }
        [v75 completeWithError:v37];
      }
    }
    else if (v5 == (id)1)
    {
      id v6 = (_TtC9appstored6LogKey *)v71;
      sub_100233830(v6);
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      id obja = (id)objc_claimAutoreleasedReturnValue();
      id v42 = [obja countByEnumeratingWithState:&v79 objects:buf count:16];
      if (!v42) {
        goto LABEL_54;
      }
      id v43 = v42;
      uint64_t v76 = *(void *)v80;
      id v77 = 0;
      do
      {
        long long v44 = 0;
        do
        {
          if (*(void *)v80 != v76) {
            objc_enumerationMutation(obja);
          }
          uint64_t v45 = *(void *)(*((void *)&v79 + 1) + 8 * (void)v44);
          id v46 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            id v47 = sub_100233614(v6);
            if (v45)
            {
              id v48 = *(id *)(v45 + 16);
              long long v49 = *(void **)(v45 + 24);
              uint64_t v50 = v48;
            }
            else
            {
              id v48 = 0;
              uint64_t v50 = 0;
              long long v49 = 0;
            }
            id v51 = v49;
            *(_DWORD *)id v83 = 138412802;
            id v84 = v47;
            __int16 v85 = 2114;
            id v86 = v48;
            __int16 v87 = 2114;
            id v88 = v51;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[%@]: [%{public}@] Starting image upload to %{public}@", v83, 0x20u);

            a1 = (uint64_t)v75;
          }

          uint64_t v52 = sub_10026A474((uint64_t)UploadTestFlightImageTask, (void *)v45, v6);
          id v78 = 0;
          unsigned int v53 = [(id)a1 runSubTask:v52 returningError:&v78];
          id v54 = v78;
          if (v53)
          {
            if (v52)
            {
              id v55 = *(id *)(v52 + 56);
              BOOL v56 = *(void **)(v52 + 40);
            }
            else
            {
              id v55 = 0;
              BOOL v56 = 0;
            }
            id v57 = v56;
            sub_100233D30(v57, v55);
            id v58 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              char v59 = sub_100233614(v6);
              if (v45) {
                id v60 = *(void **)(v45 + 16);
              }
              else {
                id v60 = 0;
              }
              id v61 = v60;
              *(_DWORD *)id v83 = 138412546;
              id v84 = v59;
              __int16 v85 = 2114;
              id v86 = v61;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "[%@]: [%{public}@] Successfully uploaded image", v83, 0x16u);

              a1 = (uint64_t)v75;
            }
          }
          else
          {
            char v62 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              id v63 = sub_100233614(v6);
              if (v45) {
                id v64 = *(void **)(v45 + 16);
              }
              else {
                id v64 = 0;
              }
              id v65 = v64;
              *(_DWORD *)id v83 = 138412802;
              id v84 = v63;
              __int16 v85 = 2114;
              id v86 = v65;
              __int16 v87 = 2114;
              id v88 = v54;
              _os_log_error_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "[%@]: [%{public}@] Failed to upload image: %{public}@", v83, 0x20u);

              a1 = (uint64_t)v75;
            }

            id v55 = v77;
            id v77 = v54;
          }

          long long v44 = (char *)v44 + 1;
        }
        while (v43 != v44);
        id v66 = [obja countByEnumeratingWithState:&v79 objects:buf count:16];
        id v43 = v66;
      }
      while (v66);
      if (v77)
      {
        sub_1002C5A3C(a1, v6, 0);
        [(id)a1 completeWithError:v77];
      }
      else
      {
LABEL_54:
        sub_100233CC0(v6, 2);
        sub_1002C5A3C(a1, v6, 1);
      }
    }
    else
    {
      objc_super v4 = v71;
      if (v5) {
        goto LABEL_69;
      }
      id v6 = (_TtC9appstored6LogKey *)v71;
      unint64_t v7 = sub_100233690(v6);
      id v8 = [v7 imagesData];
      id v9 = [v8 count];

      int v10 = ASDLogHandleForCategory();
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          unint64_t v12 = sub_100233614(v6);
          objc_super v13 = [v7 imagesData];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = [v13 count];
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@]: Fetching %lu image URL(s) for feedback", buf, 0x16u);
        }
        uint64_t v14 = sub_100316F94((uint64_t)FetchImageUploadURLsTask, v6);
        *(void *)&long long v79 = 0;
        unsigned int v15 = [(id)a1 runSubTask:v14 returningError:&v79];
        id v16 = (id)v79;
        if (v15)
        {
          if (v14)
          {
            long long v72 = (_TtC9appstored6LogKey *)*(id *)(v14 + 40);
            char v17 = *(void **)(v14 + 48);
          }
          else
          {
            long long v72 = 0;
            char v17 = 0;
          }
          id obj = v16;
          id v18 = v17;
          long long v19 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            char v20 = (_TtC9appstored6LogKey *)*(id *)(a1 + 48);
            unsigned int v21 = sub_100233614(v20);
            id v22 = [v18 count];
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v21;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%@]: Successfully fetched %lu image URL(s)", buf, 0x16u);
          }
          char v23 = objc_opt_new();
          if ([v18 count])
          {
            unint64_t v24 = 0;
            do
            {
              uint64_t v25 = sub_100233690(*(_TtC9appstored6LogKey **)(a1 + 48));
              int v26 = [v25 imagesData];

              NSErrorUserInfoKey v27 = [v26 objectAtIndexedSubscript:v24];
              CFStringRef v28 = [v18 objectAtIndexedSubscript:v24];
              id v29 = sub_10032C1DC((uint64_t)TFPendingImageUpload, v27, v28);
              [v23 addObject:v29];

              a1 = (uint64_t)v75;
              ++v24;
            }
            while ((unint64_t)[v18 count] > v24);
          }
          sub_100233B94(v72, (uint64_t)v23);
          sub_100233CC0(v72, 1);
          uint64_t v30 = v6;
          unsigned int v31 = *(void **)(a1 + 40);
          *(void *)long long buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_1002C5AF8;
          id v90 = &unk_100524700;
          uint64_t v32 = v30;
          id v91 = v32;
          [v31 modifyUsingTransaction:buf];

          if (sub_100233A48(v72)) {
            sub_1002C5A3C(a1, v72, 1);
          }

          id v16 = obj;
        }
        else
        {
          uint64_t v68 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            long long v70 = sub_100233614(v6);
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v70;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "[%@]: Error fetching image upload URL(s): %{public}@", buf, 0x16u);

            a1 = (uint64_t)v75;
          }

          [(id)a1 completeWithError:v16];
        }
      }
      else
      {
        if (v11)
        {
          id v67 = sub_100233614(v6);
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v67;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@]: No images to upload for feedback", buf, 0xCu);
        }
        sub_100233CC0(v6, 2);
      }
    }
    objc_super v4 = v71;
  }
LABEL_69:
}

void sub_1002C5A3C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002C5BB0;
  v8[3] = &unk_100524700;
  id v7 = v5;
  id v9 = v7;
  [v6 modifyUsingTransaction:v8];
  if (a3) {
    sub_1002C4FF4(a1, v7);
  }
}

BOOL sub_1002C5AF8(uint64_t a1, void *a2)
{
  id v2 = *(_TtC9appstored6LogKey **)(a1 + 32);
  id v3 = a2;
  objc_super v4 = sub_100233690(v2);
  id v5 = [v4 appVersion];
  BOOL v6 = sub_1003EA470((BOOL)v3, 1, v5);

  return v6;
}

id sub_1002C5B68(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = sub_1003E978C(v3, (uint64_t)[v2 databaseID]);

  return v4;
}

uint64_t sub_1002C5BB0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  sub_100233B24(v3, 0);
  uint64_t v5 = sub_1003E9E3C((uint64_t)v4, *(void **)(a1 + 32));

  BOOL v6 = ASDLogHandleForCategory();
  id v7 = v6;
  if (!v5)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    id v8 = sub_100233614(*(_TtC9appstored6LogKey **)(a1 + 32));
    id v11 = sub_100233A48(*(id *)(a1 + 32));
    int v12 = 138412546;
    objc_super v13 = v8;
    __int16 v14 = 2048;
    id v15 = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[%@]: Failed to update entity with state: %lu", (uint8_t *)&v12, 0x16u);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = sub_100233614(*(_TtC9appstored6LogKey **)(a1 + 32));
    id v9 = sub_100233A48(*(id *)(a1 + 32));
    int v12 = 138412546;
    objc_super v13 = v8;
    __int16 v14 = 2048;
    id v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@]: Successfully updated entity with state: %lu", (uint8_t *)&v12, 0x16u);
LABEL_4:
  }
LABEL_6:

  return v5;
}

id sub_1002C5D90()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C5E34;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0DF0 != -1) {
    dispatch_once(&qword_1005B0DF0, block);
  }
  uint64_t v0 = (void *)qword_1005B0DE8;
  return v0;
}

void sub_1002C5E34(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005B0DE8;
  qword_1005B0DE8 = (uint64_t)v1;
}

void sub_1002C61F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak(a9);
  objc_destroyWeak((id *)(v12 - 168));
  _Unwind_Resume(a1);
}

uint64_t sub_1002C62A4(uint64_t a1, int a2, void *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = a3;
  id v29 = v6;
  if (!WeakRetained)
  {
    uint64_t v26 = 0;
    goto LABEL_24;
  }
  id v7 = [v6 objectForKeyedSubscript:@"CACHE_DELETE_VOLUME"];
  CFStringRef v28 = [v29 objectForKeyedSubscript:@"CACHE_DELETE_CALLING_PROCESS"];
  uint64_t v8 = sub_1002C79E8(a2);
  uint64_t v9 = sub_1002C7980(v7);
  int v10 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = objc_opt_class();
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a2;
    __int16 v32 = 2114;
    uint64_t v33 = v7;
    id v11 = *(id *)&buf[4];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purgeable request with urgency: %ld volume: %{public}@", buf, 0x20u);
  }
  uint64_t v12 = (double *)WeakRetained;
  objc_sync_enter(v12);
  double Current = CFAbsoluteTimeGetCurrent();
  double v14 = v12[5];
  if (v14 != 0.0 && Current - v14 <= 3600.0)
  {
    if (v9 == 1)
    {
      if (*((void *)v12 + 2))
      {
LABEL_9:
        objc_sync_exit(v12);

        int v15 = 1;
        goto LABEL_12;
      }
    }
    else if (v9 != 2 || *((void *)v12 + 1))
    {
      goto LABEL_9;
    }
  }
  objc_sync_exit(v12);

  sub_1002C7ABC((id *)v12, @"Purgeable Request", v28);
  int v15 = 0;
LABEL_12:
  id v16 = v12;
  objc_sync_enter(v16);
  if (v9 == 1)
  {
    uint64_t v17 = 2;
  }
  else
  {
    if (v9 != 2)
    {
      id v18 = 0;
      goto LABEL_18;
    }
    uint64_t v17 = 1;
  }
  id v18 = objc_msgSend(*(id *)&v16[v17], "copy", v28);
LABEL_18:
  objc_sync_exit(v16);

  long long v19 = +[NSNumber numberWithInteger:v8];
  char v20 = [v18 objectForKey:v19];

  if (v20) {
    id v21 = [v20 longLongValue];
  }
  else {
    id v21 = 0;
  }
  id v22 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    char v23 = objc_opt_class();
    *(_DWORD *)long long buf = 138544386;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v21;
    __int16 v32 = 2048;
    uint64_t v33 = (void *)a2;
    __int16 v34 = 1024;
    int v35 = v15;
    __int16 v36 = 2114;
    id v37 = v7;
    id v24 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purgeable total: %{bytes}lld for urgency: %ld cached: %{BOOL}d volume: %{public}@", buf, 0x30u);
  }
  v30[0] = @"CACHE_DELETE_VOLUME";
  v30[1] = @"CACHE_DELETE_AMOUNT";
  *(void *)long long buf = v7;
  uint64_t v25 = +[NSNumber numberWithLongLong:v21];
  *(void *)&uint8_t buf[8] = v25;
  uint64_t v26 = +[NSDictionary dictionaryWithObjects:buf forKeys:v30 count:2];

LABEL_24:
  return v26;
}

void sub_1002C6630(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6650(uint64_t a1, int a2, void *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = sub_1002C66A4(WeakRetained, a3, a2);

  return v6;
}

id sub_1002C66A4(void *a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    id v7 = [v5 objectForKeyedSubscript:@"CACHE_DELETE_VOLUME"];
    uint64_t v8 = [v6 objectForKeyedSubscript:@"CACHE_DELETE_AMOUNT"];
    unsigned int v53 = [v6 objectForKeyedSubscript:@"CACHE_DELETE_CALLING_PROCESS"];
    uint64_t v9 = sub_1002C7980(v7);
    uint64_t v10 = sub_1002C79E8(a3);
    id v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = objc_opt_class();
      id v13 = v12;
      *(_DWORD *)long long buf = 138544130;
      id v57 = v12;
      __int16 v58 = 2048;
      uint64_t v59 = (uint64_t)[v8 longLongValue];
      __int16 v60 = 2048;
      id v61 = (void *)a3;
      __int16 v62 = 2114;
      id v63 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purge request with desired bytes: %{bytes}lld with urgency: %ld volume: %{public}@", buf, 0x2Au);
    }
    id v14 = a1;
    objc_sync_enter(v14);
    double Current = CFAbsoluteTimeGetCurrent();
    double v16 = *((double *)v14 + 5);
    if (v16 == 0.0 || Current - v16 > 3600.0)
    {
      objc_sync_exit(v14);

      if (v9 == 2) {
        goto LABEL_16;
      }
      if (v9 != 1)
      {
        uint64_t v20 = 0;
LABEL_39:
        id v39 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          long long v40 = objc_opt_class();
          *(_DWORD *)long long buf = 138544386;
          id v57 = v40;
          __int16 v58 = 2048;
          uint64_t v59 = v20;
          __int16 v60 = 2114;
          id v61 = v8;
          __int16 v62 = 2048;
          id v63 = (void *)a3;
          __int16 v64 = 2114;
          id v65 = v7;
          id v41 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purged total: %{bytes}ld desiredPurge: %{public}@ urgency: %ld volume: %{public}@", buf, 0x34u);
        }
        if (v20 >= 1)
        {
          +[NSThread sleepForTimeInterval:5.0];
          sub_1002C7ABC((id *)v14, @"Purge", v53);
          sub_1002C73F4(v14, 0, 0, 1.0);
        }
        v54[0] = @"CACHE_DELETE_VOLUME";
        v54[1] = @"CACHE_DELETE_AMOUNT";
        v55[0] = v7;
        id v14 = +[NSNumber numberWithLongLong:v20];
        v55[1] = v14;
        id v42 = +[NSDictionary dictionaryWithObjects:v55 forKeys:v54 count:2];
        goto LABEL_44;
      }
    }
    else
    {
      if (v9 != 1)
      {
        if (v9 != 2)
        {
          objc_sync_exit(v14);
          uint64_t v20 = 0;
          uint64_t v25 = v14;
LABEL_38:

          goto LABEL_39;
        }
        uint64_t v17 = (void *)*((void *)v14 + 1);
        if (!v17) {
          goto LABEL_12;
        }
        id v18 = +[NSNumber numberWithInteger:v10];
        long long v19 = [v17 objectForKey:v18];

        if (!v19 || [v19 longLongValue])
        {

LABEL_12:
          objc_sync_exit(v14);

LABEL_16:
          id WeakRetained = objc_loadWeakRetained((id *)v14 + 7);
          if (WeakRetained
            && (id v22 = objc_loadWeakRetained((id *)v14 + 7),
                char v23 = objc_opt_respondsToSelector(),
                v22,
                WeakRetained,
                (v23 & 1) != 0))
          {
            id v24 = objc_loadWeakRetained((id *)v14 + 7);
            uint64_t v20 = (uint64_t)[v24 purgeForVolume:v7 urgency:v10 desiredPurge:v8 client:v53];

            uint64_t v25 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v26 = objc_opt_class();
              *(_DWORD *)long long buf = 138543618;
              id v57 = v26;
              __int16 v58 = 2048;
              uint64_t v59 = v20;
              id v27 = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purged %{bytes}ld for odr", buf, 0x16u);
            }
          }
          else
          {
            uint64_t v25 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              id v51 = objc_opt_class();
              *(_DWORD *)long long buf = 138543362;
              id v57 = v51;
              id v52 = v51;
              _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "[%{public}@] ODR has not been set please make sure everything is configured correctly.", buf, 0xCu);
            }
            uint64_t v20 = 0;
          }
          goto LABEL_38;
        }
        long long v44 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v45 = objc_opt_class();
          *(_DWORD *)long long buf = 138543618;
          id v57 = v45;
          __int16 v58 = 2048;
          uint64_t v59 = a3;
          id v46 = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[%{public}@][User] Nothing to purge for urgency %ld", buf, 0x16u);
        }
        v68[0] = @"CACHE_DELETE_VOLUME";
        v68[1] = @"CACHE_DELETE_AMOUNT";
        v69[0] = v7;
        v69[1] = &off_10054C2E8;
        uint64_t v47 = +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:2];
LABEL_54:
        id v42 = (void *)v47;

        objc_sync_exit(v14);
LABEL_44:

        goto LABEL_45;
      }
      CFStringRef v28 = (void *)*((void *)v14 + 2);
      if (v28)
      {
        id v29 = +[NSNumber numberWithInteger:v10];
        long long v19 = [v28 objectForKey:v29];

        if (v19 && ![v19 longLongValue])
        {
          id v48 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            long long v49 = objc_opt_class();
            *(_DWORD *)long long buf = 138543618;
            id v57 = v49;
            __int16 v58 = 2048;
            uint64_t v59 = a3;
            id v50 = v49;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[%{public}@][System] Nothing to purge for urgency %ld", buf, 0x16u);
          }
          v66[0] = @"CACHE_DELETE_VOLUME";
          v66[1] = @"CACHE_DELETE_AMOUNT";
          v67[0] = v7;
          v67[1] = &off_10054C2E8;
          uint64_t v47 = +[NSDictionary dictionaryWithObjects:v67 forKeys:v66 count:2];
          goto LABEL_54;
        }
      }
      objc_sync_exit(v14);
    }
    if (objc_opt_respondsToSelector())
    {
      uint64_t v20 = (uint64_t)[*((id *)v14 + 6) purgeForVolume:v7 urgency:v10 desiredPurge:v8 client:v53];
      uint64_t v30 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v31 = objc_opt_class();
        *(_DWORD *)long long buf = 138543618;
        id v57 = v31;
        __int16 v58 = 2048;
        uint64_t v59 = v20;
        id v32 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purged %{bytes}ld for apps", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    id v33 = *((id *)v14 + 8);
    if (!v33) {
      goto LABEL_39;
    }
    __int16 v34 = v33;
    char v35 = objc_opt_respondsToSelector();

    if ((v35 & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v36 = (uint64_t)[*((id *)v14 + 8) purgeForVolume:v7 urgency:v10 desiredPurge:v8 client:v53];
    uint64_t v25 = ASDLogHandleForCategory();
    v20 += v36;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v37 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v57 = v37;
      __int16 v58 = 2048;
      uint64_t v59 = v36;
      id v38 = v37;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purged %{bytes}ld bytes for partial downloads", buf, 0x16u);
    }
    goto LABEL_38;
  }
  id v42 = 0;
LABEL_45:

  return v42;
}

void sub_1002C6EE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002C6F14(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v1 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v13 = (id)objc_opt_class();
      id v2 = v13;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[%{public}@] Requested cancel purge for service", buf, 0xCu);
    }
    id v3 = WeakRetained + 7;
    id v4 = objc_loadWeakRetained(WeakRetained + 7);
    if (v4
      && (id v5 = v4,
          id v6 = objc_loadWeakRetained(v3),
          char v7 = objc_opt_respondsToSelector(),
          v6,
          v5,
          (v7 & 1) != 0))
    {
      uint64_t v8 = objc_loadWeakRetained(v3);
      [v8 cancelPurge];
    }
    else
    {
      uint64_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = objc_opt_class();
        *(_DWORD *)long long buf = 138543362;
        id v13 = v9;
        id v10 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] ODR has not been set please make sure everything is configured correctly.", buf, 0xCu);
      }
    }
  }
}

uint64_t sub_1002C70B4(uint64_t a1, int a2, void *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = sub_1002C66A4(WeakRetained, a3, a2);

  return v6;
}

void sub_1002C7108(id *a1)
{
  if (a1)
  {
    id v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138543362;
      id v13 = (id)objc_opt_class();
      id v3 = v13;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%{public}@] Invalidating caches", (uint8_t *)&v12, 0xCu);
    }
    if (objc_opt_respondsToSelector()) {
      [a1[6] cacheInvalidated];
    }
    id WeakRetained = objc_loadWeakRetained(a1 + 7);
    if (WeakRetained)
    {
      id v5 = WeakRetained;
      id v6 = objc_loadWeakRetained(a1 + 7);
      char v7 = objc_opt_respondsToSelector();

      if (v7)
      {
        id v8 = objc_loadWeakRetained(a1 + 7);
        [v8 cacheInvalidated];
      }
    }
    id v9 = a1[8];
    if (v9)
    {
      id v10 = v9;
      char v11 = objc_opt_respondsToSelector();

      if (v11) {
        [a1[8] cacheInvalidated];
      }
    }
    sub_1002C73F4(a1, 1, 0, 10.0);
  }
}

void sub_1002C7288(void *a1)
{
  if (a1) {
    sub_1002C73F4(a1, 1, 0, 10.0);
  }
}

uint64_t sub_1002C72A0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v14 = a2;
  id v6 = a4;
  char v7 = v6;
  if (a1)
  {
    id v8 = (const char *)[v6 UTF8String];
    id v9 = v8;
    if (!a3 || (v13 = 0, uint64_t v10 = fsctl(v8, 0x80084A02uLL, &v13, 0), !v10))
    {
      int v11 = open(v9, 0);
      uint64_t v10 = ffsctl(v11, 0xC0084A44uLL, &v14, 0);
      close(v11);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1002C735C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v6 = v3;
    id v4 = sub_1003DA6D4();
    unsigned __int8 v5 = [v4 isHRNMode];

    if ((v5 & 1) == 0) {
      sub_1002C73F4(a1, 1, 0, 10.0);
    }
    sub_10021A3C0((uint64_t)AppPurgeCoordinator, v6);
    id v3 = v6;
  }
}

void sub_1002C73F4(void *a1, char a2, int a3, float a4)
{
  if (a1)
  {
    char v7 = a1;
    objc_sync_enter(v7);
    if (!v7[4])
    {
      dispatch_source_t v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v7[3]);
      dispatch_queue_t v9 = v7[4];
      void v7[4] = v8;

      uint64_t v10 = v7[4];
      dispatch_time_t v11 = dispatch_time(0, (uint64_t)(float)(a4 * 1000000000.0));
      dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1002C8378;
      void v14[3] = &unk_1005229A8;
      char v15 = a2;
      void v14[4] = v7;
      int v12 = objc_retainBlock(v14);
      if (a3)
      {
        uint64_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, v12);

        int v12 = v13;
      }
      dispatch_source_set_event_handler(v7[4], v12);
      dispatch_resume(v7[4]);
    }
    objc_sync_exit(v7);
  }
}

void sub_1002C753C(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    id v2 = v1[4];
    if (v2)
    {
      dispatch_source_cancel(v2);
      id v3 = (void *)v1[4];
      v1[4] = 0;
    }
    objc_sync_exit(v1);

    sub_1002C73F4(v1, 1, 1, 1.0);
  }
}

uint64_t sub_1002C7980(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1 && ([v1 isEqualToString:@"/private/var"] & 1) == 0)
  {
    if ([v2 isEqualToString:@"/private/var/mobile"]) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 1;
  }

  return v3;
}

uint64_t sub_1002C79E8(int a1)
{
  uint64_t v1 = (a1 - 1);
  if (v1 < 4) {
    return v1 + 1;
  }
  uint64_t v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    id v6 = (id)objc_opt_class();
    id v4 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}@] Unknown urgency value, defaulting to low urgency", (uint8_t *)&v5, 0xCu);
  }
  return 1;
}

void sub_1002C7ABC(id *a1, void *a2, void *a3)
{
  id v53 = a2;
  id v52 = a3;
  if (!a1) {
    goto LABEL_33;
  }
  int v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138543618;
    id v55 = (id)objc_opt_class();
    __int16 v56 = 2114;
    id v57 = v53;
    id v6 = v55;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}@] Refreshing purgeable storage with reason: %{public}@", buf, 0x16u);
  }
  long long v49 = [[KeepAlive alloc] initWithName:@"com.apple.CacheDeleteCoordinator.refresh"];
  if (objc_opt_respondsToSelector())
  {
    id v7 = a1[6];
    dispatch_source_t v8 = objc_msgSend(v7, "allPurgeablesForVolume:reason:client:", @"/private/var", v53, v52, v49);

    dispatch_queue_t v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = objc_opt_class();
      *(_DWORD *)long long buf = 138543874;
      id v55 = v10;
      __int16 v56 = 2114;
      id v57 = v8;
      __int16 v58 = 2114;
      id v59 = v52;
      id v11 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%{public}@] Refreshed app purgeable: %{public}@ client: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    dispatch_source_t v8 = 0;
  }
  id v12 = a1[8];
  if (v12 && (v13 = v12, char v14 = objc_opt_respondsToSelector(), v13, (v14 & 1) != 0))
  {
    id v15 = a1[8];
    double v16 = [v15 allPurgeablesForVolume:@"/private/var" reason:v53 client:v52];

    uint64_t v17 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v55 = v18;
      __int16 v56 = 2114;
      id v57 = v16;
      id v19 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[%{public}@] Refreshed partial download purgeable: %{public}@", buf, 0x16u);
    }
  }
  else
  {
    double v16 = 0;
  }
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained
    && (id v21 = objc_loadWeakRetained(a1 + 7),
        char v22 = objc_opt_respondsToSelector(),
        v21,
        WeakRetained,
        (v22 & 1) != 0))
  {
    id v23 = objc_loadWeakRetained(a1 + 7);
    id v51 = [v23 allPurgeablesForVolume:@"/private/var/mobile" reason:v53 client:v52];

    id v24 = a1;
    objc_sync_enter(v24);
    id v25 = [v51 copy];
    id v26 = v24[1];
    v24[1] = v25;

    objc_sync_exit(v24);
    id v27 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      CFStringRef v28 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v55 = v28;
      __int16 v56 = 2114;
      id v57 = v51;
      id v29 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "[%{public}@] Refreshed odr purgeable: %{public}@", buf, 0x16u);
    }
  }
  else
  {
    id v51 = 0;
  }
  uint64_t v30 = +[NSMutableDictionary dictionary];
  for (uint64_t i = 1; i != 5; ++i)
  {
    if (v8)
    {
      id v32 = +[NSNumber numberWithInteger:i];
      id v33 = [v8 objectForKey:v32];
      __int16 v34 = (char *)[v33 unsignedLongLongValue];

      if (v16) {
        goto LABEL_24;
      }
    }
    else
    {
      __int16 v34 = 0;
      if (v16)
      {
LABEL_24:
        char v35 = +[NSNumber numberWithInteger:i];
        uint64_t v36 = [v16 objectForKey:v35];
        id v37 = [v36 unsignedLongLongValue];

        goto LABEL_27;
      }
    }
    id v37 = 0;
LABEL_27:
    id v38 = +[NSNumber numberWithUnsignedLongLong:&v34[(void)v37]];
    id v39 = +[NSNumber numberWithInteger:i];
    [v30 setObject:v38 forKey:v39];
  }
  long long v40 = a1;
  objc_sync_enter(v40);
  id v41 = [v30 copy];
  id v42 = v40[2];
  void v40[2] = v41;

  objc_sync_exit(v40);
  id v43 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    long long v44 = objc_opt_class();
    *(_DWORD *)long long buf = 138543618;
    id v55 = v44;
    __int16 v56 = 2114;
    id v57 = v30;
    id v45 = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "[%{public}@] Refreshed combined system purgeable: %{public}@", buf, 0x16u);
  }
  id v46 = v40;
  objc_sync_enter(v46);
  *((CFAbsoluteTime *)v46 + 5) = CFAbsoluteTimeGetCurrent();
  uint64_t v47 = v46[4];
  if (v47)
  {
    dispatch_source_cancel(v47);
    id v48 = v46[4];
    v46[4] = 0;
  }
  objc_sync_exit(v46);

LABEL_33:
}

void sub_1002C8070(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002C809C(dispatch_queue_t *a1, uint64_t a2)
{
  if (a1)
  {
    dispatch_assert_queue_V2(a1[3]);
    id v4 = @"/private/var";
    if (a2 != 1) {
      id v4 = 0;
    }
    if (a2 == 2) {
      id v4 = @"/private/var/mobile";
    }
    int v5 = v4;
    if (!v5)
    {
      dispatch_source_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543874;
        id v19 = (id)objc_opt_class();
        __int16 v20 = 2114;
        id v21 = 0;
        __int16 v22 = 2114;
        id v23 = 0;
        id v9 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}@] Unsupported targetVolume: %{public}@ volume: %{public}@", buf, 0x20u);
      }
      goto LABEL_19;
    }
    if (a2 == 1)
    {
      uint64_t v10 = a1;
      objc_sync_enter(v10);
      id v7 = [v10[2] copy];
    }
    else
    {
      if (a2 != 2) {
        goto LABEL_17;
      }
      id v6 = a1;
      objc_sync_enter(v6);
      id v7 = [v6[1] copy];
    }
    dispatch_source_t v8 = v7;
    objc_sync_exit(a1);

    if (v8)
    {
      v16[0] = @"CACHE_DELETE_ID";
      v16[1] = @"CACHE_DELETE_VOLUME";
      v17[0] = @"com.apple.appstored.CacheDelete";
      v17[1] = v5;
      id v16[2] = @"CACHE_DELETE_AMOUNT";
      v17[2] = v8;
      id v11 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:3];
      CacheDeleteUpdatePurgeable();
      id v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = objc_opt_class();
        *(_DWORD *)long long buf = 138543874;
        id v19 = v13;
        __int16 v20 = 2114;
        id v21 = v8;
        __int16 v22 = 2114;
        id v23 = v5;
        id v14 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%{public}@] Pushed purgeable amounts: %{public}@ for volume: %{public}@", buf, 0x20u);
      }
LABEL_19:

      return;
    }
LABEL_17:
    dispatch_source_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138543618;
      id v19 = (id)objc_opt_class();
      __int16 v20 = 2114;
      id v21 = v5;
      id v15 = v19;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%{public}@] Nothing to push for volume: %{public}@", buf, 0x16u);
    }
    goto LABEL_19;
  }
}

void sub_1002C8358(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002C8378(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    sub_1002C7ABC(*(id **)(a1 + 32), @"Update Push", @"com.apple.appstored");
  }
  sub_1002C809C(*(dispatch_queue_t **)(a1 + 32), 1);
  id v2 = *(dispatch_queue_t **)(a1 + 32);
  sub_1002C809C(v2, 2);
}

void sub_1002C84AC(id a1)
{
  uint64_t v1 = [GaletteStore alloc];
  sub_1001F5660();
  int v5 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  id v2 = sub_1001F5734(v5);
  uint64_t v3 = [(SQLiteDatabaseStore *)v1 initWithDatabase:v2];
  id v4 = (void *)qword_1005B0DF8;
  qword_1005B0DF8 = (uint64_t)v3;
}

void sub_1002C85D4(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (a2)
  {
    if (a2 != 15400) {
      return;
    }
    id v4 = &stru_1005261E0;
  }
  else
  {
    id v4 = &stru_1005261C0;
  }
  *a3 = 15500;
  id v5 = *a4;
  *a4 = v4;
}

void sub_1002C8610(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"DROP TABLE IF EXISTS galette;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS galette (bundle_id TEXT NOT NULL,mode INTEGER NOT NULL,name TEXT NOT NULL,PRIMARY KEY(bundle_id));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS pending_galette_confirmation (bundle_id TEXT NOT NULL,PRIMARY KEY(bundle_id));",
      1,
      0);
  }
}

void sub_1002C8694(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"CREATE TABLE IF NOT EXISTS pending_galette_confirmation (bundle_id TEXT NOT NULL,PRIMARY KEY(bundle_id));",
  }
      1,
      0);
}

void sub_1002C8A50(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void *sub_1002C8A7C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)CoordinatorPromiseProvider;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      if ([v5 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise])
      {
        id v6 = v5;
        id v7 = (void *)a1[1];
        a1[1] = v6;
      }
      else
      {

        if (!a3)
        {
          a1 = 0;
          goto LABEL_8;
        }
        NSErrorUserInfoKey v10 = NSDebugDescriptionErrorKey;
        CFStringRef v11 = @"Coordinator does not conform to IXCoordinatorWithAppAssetPromise";
        id v7 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
        +[NSError errorWithDomain:ASDErrorDomain code:807 userInfo:v7];
        a1 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
  }
LABEL_8:

  return a1;
}

void *sub_1002C8BB4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = (void *)a1[1];
    id v15 = 0;
    a1 = [v6 appAssetPromiseWithError:&v15];
    id v7 = v15;
    if (a1)
    {
      if (!v5) {
        goto LABEL_9;
      }
      dispatch_source_t v8 = [a1 uniqueIdentifier];
      unsigned __int8 v9 = [v8 isEqual:v5];

      if (v9) {
        goto LABEL_9;
      }
      NSErrorUserInfoKey v16 = NSDebugDescriptionErrorKey;
      CFStringRef v11 = v10 = [a1 uniqueIdentifier];
      uint64_t v17 = v11;
      id v12 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];

      uint64_t v13 = +[NSError errorWithDomain:ASDErrorDomain code:801 userInfo:v12];

      id v7 = (id)v13;
    }
    if (a3)
    {
      id v7 = v7;
      a1 = 0;
      *a3 = v7;
    }
    else
    {
      a1 = 0;
    }
LABEL_9:
  }
  return a1;
}

id sub_1002C8D64(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if (v7)
    {
      id v13 = 0;
      unsigned __int8 v9 = sub_1002C8BB4(a1, v7, &v13);
      id v10 = v13;
      if (v9)
      {
LABEL_8:

        goto LABEL_9;
      }
    }
    id v12 = 0;
    unsigned __int8 v9 = sub_1002C8E44((uint64_t)a1, v8, &v12);
    id v10 = v12;
    if (a4 && !v9)
    {
      id v10 = v10;
      *a4 = v10;
    }
    goto LABEL_8;
  }
  unsigned __int8 v9 = 0;
LABEL_9:

  return v9;
}

id sub_1002C8E44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    id v7 = v5;
    self;
    if (v7)
    {
      if (v7[5])
      {

        goto LABEL_5;
      }
      id v11 = objc_alloc((Class)IXPromisedStreamingZipTransfer);
      id v13 = objc_getProperty(v7, v12, 32, 1);
      id v15 = objc_getProperty(v7, v14, 56, 1);
      uint64_t v16 = v7[2];
      uint64_t v17 = v7[3];
    }
    else
    {
      id v11 = objc_alloc((Class)IXPromisedStreamingZipTransfer);
      uint64_t v16 = 0;
      id v13 = 0;
      id v15 = 0;
      uint64_t v17 = 0;
    }
    id v9 = [v11 initWithName:v13 client:1 streamingZipOptions:v15 archiveSize:v16 diskSpaceNeeded:v17];

    if (v9)
    {
      id v18 = *(void **)(a1 + 8);
      id v21 = 0;
      unsigned __int8 v19 = [v18 setAppAssetPromise:v9 error:&v21];
      id v10 = v21;
      if (v19)
      {
LABEL_13:

        goto LABEL_14;
      }
      [v9 cancelForReason:v10 client:1 error:0];
LABEL_6:

      if (a3)
      {
        id v10 = v10;
        id v9 = 0;
        *a3 = v10;
      }
      else
      {
        id v9 = 0;
      }
      goto LABEL_13;
    }
LABEL_5:
    NSErrorUserInfoKey v22 = NSDebugDescriptionErrorKey;
    id v8 = +[NSString stringWithFormat:@"Could not create an app data promise using %@", v7];
    id v23 = v8;
    id v9 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];

    id v10 = +[NSError errorWithDomain:ASDErrorDomain code:703 userInfo:v9];
    goto LABEL_6;
  }
  id v9 = 0;
LABEL_14:

  return v9;
}

void *sub_1002C9088(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    a1 = sub_1002C8BB4(a1, a2, a3);
    uint64_t v3 = vars8;
  }
  return a1;
}

id sub_1002C90B8(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (a1)
  {
    a1 = sub_1002C8E44((uint64_t)a1, a3, a4);
    uint64_t v4 = vars8;
  }
  return a1;
}

id sub_1002C90FC()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C91A0;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0E10 != -1) {
    dispatch_once(&qword_1005B0E10, block);
  }
  uint64_t v0 = (void *)qword_1005B0E08;
  return v0;
}

void sub_1002C91A0()
{
  uint64_t v0 = sub_1002C924C();
  if (v0)
  {
    id v5 = v0;
    uint64_t v1 = [v0 URLByAppendingPathComponent:@"Library/"];
    id v2 = +[NSFileManager defaultManager];
    [v2 createDirectoryAtURL:v1 withIntermediateDirectories:1 attributes:0 error:0];

    uint64_t v3 = [v1 path];
    uint64_t v4 = (void *)qword_1005B0E08;
    qword_1005B0E08 = v3;

    uint64_t v0 = v5;
  }
}

id sub_1002C924C()
{
  self;
  if (qword_1005B0E30 != -1) {
    dispatch_once(&qword_1005B0E30, &stru_100526200);
  }
  uint64_t v0 = (void *)qword_1005B0E28;
  return v0;
}

id sub_1002C92A4()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C9348;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0E20 != -1) {
    dispatch_once(&qword_1005B0E20, block);
  }
  uint64_t v0 = (void *)qword_1005B0E18;
  return v0;
}

void sub_1002C9348()
{
  uint64_t v0 = sub_1002C924C();
  if (v0)
  {
    id v6 = v0;
    uint64_t v1 = [v0 URLByAppendingPathComponent:@"Library/Caches/"];
    id v2 = [v1 URLByAppendingPathComponent:@"Scratch"];
    uint64_t v3 = +[NSFileManager defaultManager];
    [v3 createDirectoryAtURL:v2 withIntermediateDirectories:1 attributes:0 error:0];

    uint64_t v4 = [v2 path];
    id v5 = (void *)qword_1005B0E18;
    qword_1005B0E18 = v4;

    uint64_t v0 = v6;
  }
}

id sub_1002C9414()
{
  self;
  uint64_t v0 = sub_1002C92A4();
  uint64_t v1 = [v0 stringByAppendingPathComponent:@"ODR"];

  return v1;
}

void sub_1002C946C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  self;
  uint64_t v4 = sub_100013380(v3, v2);

  id v5 = &off_10054DE78;
  id v27 = v4;
  self;
  id v6 = +[NSFileManager defaultManager];
  id v37 = 0;
  id v7 = [v6 contentsOfDirectoryAtPath:v27 error:&v37];
  id v8 = v37;

  if (v7)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v9 = v7;
    id v10 = [v9 countByEnumeratingWithState:&v33 objects:v43 count:16];
    if (v10)
    {
      id v11 = v10;
      id v25 = v8;
      id v26 = v7;
      uint64_t v12 = *(void *)v34;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v34 != v12) {
            objc_enumerationMutation(v9);
          }
          SEL v14 = *(void **)(*((void *)&v33 + 1) + 8 * i);
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          id v15 = &off_10054DE78;
          id v16 = [&off_10054DE78 countByEnumeratingWithState:&v29 objects:v42 count:16];
          if (v16)
          {
            uint64_t v17 = *(void *)v30;
            while (2)
            {
              for (uint64_t j = 0; j != v16; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v30 != v17) {
                  objc_enumerationMutation(&off_10054DE78);
                }
                if (objc_msgSend(v14, "hasPrefix:", *(void *)(*((void *)&v29 + 1) + 8 * (void)j), v25, v26))
                {
                  LOBYTE(v16) = 1;
                  goto LABEL_17;
                }
              }
              id v16 = [&off_10054DE78 countByEnumeratingWithState:&v29 objects:v42 count:16];
              if (v16) {
                continue;
              }
              break;
            }
          }
LABEL_17:

          unsigned __int8 v19 = [v27 stringByAppendingPathComponent:v14];
          if (v16)
          {
            __int16 v20 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 138543362;
              id v39 = v19;
              _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Keeping allow listed file: %{public}@", buf, 0xCu);
            }
          }
          else
          {
            id v21 = +[NSFileManager defaultManager];
            id v28 = 0;
            unsigned int v22 = [v21 removeItemAtPath:v19 error:&v28];
            __int16 v20 = v28;

            id v23 = ASDLogHandleForCategory();
            id v24 = v23;
            if (v22)
            {
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543362;
                id v39 = v19;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Deleted file that didn't match allow list: %{public}@", buf, 0xCu);
              }
            }
            else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543618;
              id v39 = v19;
              __int16 v40 = 2114;
              id v41 = v20;
              _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to delete file that didn't match allow list: %{public}@ error: %{public}@", buf, 0x16u);
            }
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v33 objects:v43 count:16];
      }
      while (v11);
      id v8 = v25;
      id v7 = v26;
    }
  }
  else
  {
    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v43 = 138543618;
      id v44 = v27;
      __int16 v45 = 2114;
      id v46 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch contents of: %{public}@ error: %{public}@", v43, 0x16u);
    }
  }
}

id sub_1002C98A4()
{
  uint64_t v0 = self;
  uint64_t v1 = sub_1002C924C();
  id v2 = sub_100013518(v0, v1, @"Documents/Persistence");

  uint64_t v3 = [v2 path];

  return v3;
}

void sub_1002C991C(id a1)
{
  uint64_t v1 = container_system_path_for_identifier();
  if (v1)
  {
    uint64_t v3 = (void *)v1;
    uint64_t v4 = +[NSURL fileURLWithFileSystemRepresentation:v1 isDirectory:1 relativeToURL:0];
    id v5 = (void *)qword_1005B0E28;
    qword_1005B0E28 = v4;

    free(v3);
  }
  else
  {
    id v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v28 = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Failed to determine container path error: %llu", buf, 0xCu);
    }
  }
  if (qword_1005B0E28)
  {
    v25[0] = @".";
    v23[0] = NSURLIsExcludedFromBackupKey;
    v23[1] = NSURLFileProtectionKey;
    v24[0] = &__kCFBooleanFalse;
    v24[1] = NSURLFileProtectionNone;
    id v6 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:2];
    v26[0] = v6;
    v25[1] = @"Documents";
    v21[0] = NSURLIsExcludedFromBackupKey;
    v21[1] = NSURLFileProtectionKey;
    v22[0] = &__kCFBooleanTrue;
    v22[1] = NSURLFileProtectionNone;
    id v7 = +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:2];
    v26[1] = v7;
    void v25[2] = @"Library";
    v19[0] = NSURLIsExcludedFromBackupKey;
    v19[1] = NSURLFileProtectionKey;
    v20[0] = &__kCFBooleanFalse;
    v20[1] = NSURLFileProtectionNone;
    id v8 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:2];
    void v26[2] = v8;
    v25[3] = @"Library/Caches";
    v17[0] = NSURLIsExcludedFromBackupKey;
    v17[1] = NSURLFileProtectionKey;
    v18[0] = &__kCFBooleanTrue;
    v18[1] = NSURLFileProtectionNone;
    id v9 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:2];
    v26[3] = v9;
    v25[4] = @"Library/Preferences";
    v15[0] = NSURLIsExcludedFromBackupKey;
    v15[1] = NSURLFileProtectionKey;
    v16[0] = &__kCFBooleanTrue;
    v16[1] = NSURLFileProtectionCompleteUntilFirstUserAuthentication;
    id v10 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];
    v26[4] = v10;
    v25[5] = @"tmp";
    v13[0] = NSURLIsExcludedFromBackupKey;
    v13[1] = NSURLFileProtectionKey;
    v14[0] = &__kCFBooleanTrue;
    v14[1] = NSURLFileProtectionNone;
    id v11 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:2];
    void v26[5] = v11;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:6];

    [v12 enumerateKeysAndObjectsUsingBlock:&stru_100526240];
  }
}

void sub_1002C9C14(id a1, NSString *a2, NSDictionary *a3, BOOL *a4)
{
  id v5 = (void *)qword_1005B0E28;
  id v6 = a3;
  id v7 = [v5 URLByAppendingPathComponent:a2];
  id v11 = 0;
  unsigned __int8 v8 = [v7 setResourceValues:v6 error:&v11];

  id v9 = v11;
  if ((v8 & 1) == 0)
  {
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 138543618;
      id v13 = v7;
      __int16 v14 = 2114;
      id v15 = v9;
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Failed to set attributes for: %{public}@ error: %{public}@", buf, 0x16u);
    }
  }
}

void *sub_1002C9D28(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)PurchaseHistoryHideShowRequestEncoder;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

void *sub_1002CA0A8(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)RemoteApplicationCatalog;
    id v5 = objc_msgSendSuper2(&v10, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      uint64_t v6 = +[ACXDeviceConnection sharedDeviceConnection];
      objc_super v7 = (void *)a1[2];
      a1[2] = v6;

      unsigned __int8 v8 = sub_1003B3A54();
      sub_1003B409C((uint64_t)v8, a1);
    }
  }

  return a1;
}

id sub_1002CA36C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
  id v4 = sub_1002DC980();
  id v5 = [*(id *)(*(void *)(a1 + 32) + 8) pairingID];
  sub_1002DD110(v4, v5);
  uint64_t v6 = (unsigned char *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v7 + 8);
    unsigned __int8 v8 = *(void **)(v7 + 16);
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v7 + 8);
  unsigned __int8 v8 = *(void **)(v7 + 16);
  if ((v6[18] & 1) == 0)
  {
LABEL_3:
    uint64_t v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472;
    unsigned __int8 v19 = sub_1002CA9A0;
    __int16 v20 = &unk_100526290;
    uint64_t v21 = v7;
    objc_super v10 = &v22;
    id v22 = *(id *)(a1 + 40);
    id v11 = &v23;
    id v23 = v2;
    uint64_t v12 = (id *)&v24;
    id v24 = v3;
    [v8 fetchInstalledApplicationsForPairedDevice:v9 completion:&v17];
    goto LABEL_5;
  }
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_1002CA5CC;
  v25[3] = &unk_100526268;
  v25[4] = v7;
  objc_super v10 = (id *)&v26;
  id v26 = v3;
  id v11 = &v27;
  id v27 = *(id *)(a1 + 40);
  uint64_t v12 = &v28;
  id v28 = v2;
  [v8 enumerateInstalledApplicationsOnPairedDevice:v9 withBlock:v25];
LABEL_5:

  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  id v13 = sub_100388088();
  __int16 v14 = sub_1003899A8(v13);

  if ([v14 count]) {
    [v2 addObjectsFromArray:v14];
  }
  id v15 = objc_msgSend(v2, "objectEnumerator", v17, v18, v19, v20, v21);

  return v15;
}

uint64_t sub_1002CA5CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    unsigned __int8 v8 = sub_1002CA700(*(void *)(a1 + 32), v5);
    if (v8 && [*(id *)(a1 + 48) evaluateWithObject:v8]) {
      [*(id *)(a1 + 56) addObject:v8];
    }
  }
  else
  {
    if (v6)
    {
      uint64_t v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
        int v12 = 138543618;
        uint64_t v13 = v11;
        __int16 v14 = 2114;
        id v15 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed while fetching from: %{public}@ error: %{public}@", (uint8_t *)&v12, 0x16u);
      }
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }

  return 1;
}

id sub_1002CA700(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = [v3 isBetaApp];
    unsigned int v6 = [v4 isSystemApp];
    uint64_t v7 = 512;
    if (!v6) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7 | v5;
    if (([v4 isSystemApp] & 1) == 0
      && ![v4 isProfileValidated])
    {
      v8 |= 0x100uLL;
    }
    uint64_t v9 = v8 | 4;
    id v10 = objc_alloc((Class)ASDApp);
    uint64_t v11 = [v4 bundleIdentifier];
    id v12 = [v10 initWithBundleID:v11];

    uint64_t v13 = [v4 bundleShortVersion];
    [v12 setBundleShortVersion:v13];

    __int16 v14 = [v4 bundleVersion];
    [v12 setBundleVersion:v14];

    objc_msgSend(v12, "setWatchApplicationMode:", objc_msgSend(v4, "applicationMode"));
    id v15 = [v4 storeMetadata];
    if (v15)
    {
      if ([v4 isBetaApp]) {
        [v15 betaExternalVersionIdentifier];
      }
      else {
      id v16 = [v15 softwareVersionExternalIdentifier];
      }
      objc_msgSend(v12, "setStoreExternalVersionID:", objc_msgSend(v16, "longLongValue"));

      uint64_t v17 = [v15 artistName];
      [v12 setArtistName:v17];

      uint64_t v18 = [v15 downloaderID];
      objc_msgSend(v12, "setDownloaderDSID:", objc_msgSend(v18, "longLongValue"));

      unsigned __int8 v19 = [v15 familyID];
      objc_msgSend(v12, "setFamilyID:", objc_msgSend(v19, "longLongValue"));

      __int16 v20 = [v15 purchaserID];
      objc_msgSend(v12, "setPurchaserDSID:", objc_msgSend(v20, "longLongValue"));

      uint64_t v21 = [v15 itemID];
      objc_msgSend(v12, "setStoreItemID:", objc_msgSend(v21, "longLongValue"));

      id v22 = [v15 storeCohort];
      [v12 setStoreCohort:v22];

      id v23 = [v15 storefront];
      [v12 setStoreFront:v23];
    }
    id v24 = [v4 applicationName];
    [v12 setLocalizedName:v24];

    [v12 setStatus:v9];
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

void sub_1002CA9A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v7 = objc_msgSend(v5, "allKeys", 0);
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v13 = [v5 objectForKeyedSubscript:v12];
        __int16 v14 = sub_1002CAB84(*(void *)(a1 + 32), v12, v13);
        if ([*(id *)(a1 + 40) evaluateWithObject:v14]) {
          [*(id *)(a1 + 48) addObject:v14];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v9);
  }

  if (v6)
  {
    id v15 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v22 = v16;
      __int16 v23 = 2114;
      id v24 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed while fetching from: %{public}@ error: %{public}@", buf, 0x16u);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

id sub_1002CAB84(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = [objc_alloc((Class)ASDApp) initWithBundleID:v5];

    uint64_t v7 = [v4 objectForKeyedSubscript:ACXShowAppOnWatchKey];
    LODWORD(v5) = [v7 BOOLValue];

    if (v5) {
      uint64_t v8 = 4;
    }
    else {
      uint64_t v8 = 0;
    }
    id v9 = [v4 objectForKeyedSubscript:ACXBetaAppKey];
    unsigned int v10 = [v9 BOOLValue];

    uint64_t v11 = v8 | v10;
    id v12 = [v4 objectForKeyedSubscript:ACXAppShipsWithOS];

    unsigned int v13 = [v12 BOOLValue];
    uint64_t v14 = v11 | 0x200;
    if (!v13) {
      uint64_t v14 = v11;
    }
    if (v10) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = v14 | 0x100;
    }
    [v6 setStatus:v15];
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

id sub_1002CAD84(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = objc_alloc_init((Class)NSMutableArray);
  id v4 = sub_1002DC980();
  id v5 = [*(id *)(*(void *)(a1 + 32) + 8) pairingID];
  sub_1002DD110(v4, v5);
  id v6 = (unsigned char *)objc_claimAutoreleasedReturnValue();

  if (v6 && (v6[18] & 1) != 0)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v13 = *(id *)(a1 + 40);
    id v14 = [v13 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v14)
    {
      id v15 = v14;
      id obj = v13;
      uint64_t v16 = v3;
      uint64_t v17 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v36 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v35 + 1) + 8 * i);
          uint64_t v20 = *(void *)(a1 + 32);
          uint64_t v22 = *(void *)(v20 + 8);
          uint64_t v21 = *(void **)(v20 + 16);
          v31[0] = _NSConcreteStackBlock;
          v31[1] = 3221225472;
          v31[2] = sub_1002CB068;
          v31[3] = &unk_1005262E0;
          v31[4] = v20;
          id v32 = v16;
          uint64_t v33 = v19;
          long long v34 = v2;
          [v21 fetchApplicationOnPairedDevice:v22 withBundleID:v19 completion:v31];
        }
        id v15 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v15);
      id v3 = v16;
      id v13 = obj;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void **)(v7 + 16);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    void v26[2] = sub_1002CB180;
    v26[3] = &unk_100526290;
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 32);
    id v27 = v10;
    uint64_t v28 = v11;
    id v29 = v3;
    id v12 = v2;
    long long v30 = v12;
    [v8 fetchInstalledApplicationsForPairedDevice:v9 completion:v26];
    dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);

    id v13 = v27;
  }

  __int16 v23 = [v3 objectEnumerator];

  return v23;
}

void sub_1002CB068(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = sub_1002CA700(*(void *)(a1 + 32), a2);
    if (v6) {
      [*(id *)(a1 + 40) addObject:v6];
    }
  }
  else
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
      int v9 = 138543874;
      uint64_t v10 = v7;
      __int16 v11 = 2114;
      uint64_t v12 = v8;
      __int16 v13 = 2114;
      id v14 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to fetch: %{public}@ from: %{public}@ error: %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_1002CB180(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v7 = *(id *)(a1 + 32);
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        __int16 v13 = objc_msgSend(v5, "objectForKeyedSubscript:", v12, (void)v17);
        if (v13)
        {
          id v14 = sub_1002CAB84(*(void *)(a1 + 40), v12, v13);
          [*(id *)(a1 + 48) addObject:v14];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v9);
  }

  if (v6)
  {
    id v15 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v22 = v16;
      __int16 v23 = 2114;
      id v24 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed while fetching from: %{public}@ error: %{public}@", buf, 0x16u);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

id sub_1002CB6D4(uint64_t a1, void *a2)
{
  return sub_1002CA700(*(void *)(a1 + 32), a2);
}

id sub_1002CBAAC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = sub_1002C90FC();
    dispatch_semaphore_t v2 = [v1 stringByAppendingPathComponent:@"apps.plist"];
    id v3 = [objc_alloc((Class)NSArray) initWithContentsOfFile:v2];
    if (v3)
    {
      id v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = objc_opt_class();
        id v6 = v5;
        id v7 = [v3 componentsJoinedByString:@", "];
        int v10 = 138543618;
        __int16 v11 = v5;
        __int16 v12 = 2114;
        __int16 v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] Found commonly used apps: [%{public}@]", (uint8_t *)&v10, 0x16u);
      }
      id v8 = v3;
    }
    else
    {
      id v8 = &__NSArray0__struct;
    }
  }
  else
  {
    id v8 = 0;
  }
  return v8;
}

void sub_1002CBC30(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = objc_alloc_init(_TtC9appstored6LogKey);
    dispatch_semaphore_t v2 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543618;
      id v96 = (id)objc_opt_class();
      __int16 v97 = 2112;
      uint64_t v98 = v1;
      id v3 = v96;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Persisting usage for restore prioritization", buf, 0x16u);
    }
    id v4 = v1;
    id v5 = +[NSMutableSet set];
    sub_10035E108();
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v6 = [obj countByEnumeratingWithState:&v80 objects:buf count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v81;
      uint64_t v9 = LSUserApplicationType;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v81 != v8) {
            objc_enumerationMutation(obj);
          }
          __int16 v11 = *(void **)(*((void *)&v80 + 1) + 8 * i);
          __int16 v12 = [v11 typeForInstallMachinery];
          if ([v12 isEqualToString:v9])
          {
            __int16 v13 = [v11 bundleIdentifier];
            [v5 addObject:v13];
          }
        }
        id v7 = [obj countByEnumeratingWithState:&v80 objects:buf count:16];
      }
      while (v7);
    }
    id v14 = +[LaunchHistory shared];
    id v15 = [v14 syncIfNeededWithLogKey:v4];

    long long v73 = v15;
    uint64_t v16 = [v15 error];

    if (v16)
    {
      long long v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        long long v18 = objc_opt_class();
        *(_DWORD *)id v92 = 138543618;
        *(void *)&v92[4] = v18;
        __int16 v93 = 2112;
        id v94 = v4;
        id v19 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[%{public}@] [%@] History sync complete", v92, 0x16u);
      }
    }
    uint64_t v20 = +[NSDate dateWithTimeIntervalSinceNow:-604800.0];
    id v21 = objc_alloc((Class)NSDateInterval);
    uint64_t v22 = +[NSDate date];
    id v71 = (void *)v20;
    id v23 = [v21 initWithStartDate:v20 endDate:v22];

    id v24 = +[LaunchHistory shared];
    id v74 = v4;
    long long v72 = v23;
    id v25 = [v24 getBiomeLaunchesWithLogKey:v4 dateInterval:v23 latestLaunchOnly:0];

    id v26 = +[NSMutableDictionary dictionary];
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    id v27 = v25;
    id v28 = [v27 countByEnumeratingWithState:&v76 objects:v92 count:16];
    if (v28)
    {
      id v29 = v28;
      uint64_t v30 = *(void *)v77;
      do
      {
        for (uint64_t j = 0; j != v29; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v77 != v30) {
            objc_enumerationMutation(v27);
          }
          id v32 = *(void **)(*((void *)&v76 + 1) + 8 * (void)j);
          uint64_t v33 = sub_1003AC978(v32);
          unsigned int v34 = [v5 containsObject:v33];

          if (v34)
          {
            long long v35 = sub_1003AC978(v32);
            long long v36 = [v26 objectForKeyedSubscript:v35];

            if (v36)
            {
              long long v37 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[v36 integerValue] + 1);
              long long v38 = sub_1003AC978(v32);
              [v26 setObject:v37 forKeyedSubscript:v38];
            }
            else
            {
              long long v37 = sub_1003AC978(v32);
              [v26 setObject:&off_10054C300 forKeyedSubscript:v37];
            }
          }
        }
        id v29 = [v27 countByEnumeratingWithState:&v76 objects:v92 count:16];
      }
      while (v29);
    }

    if ([v26 count])
    {
      id v39 = [v26 keysSortedByValueUsingComparator:&stru_100526348];
      uint64_t v40 = llround((double)(unint64_t)[v5 count] * 0.15);
      if (v40 >= 25) {
        unint64_t v41 = 25;
      }
      else {
        unint64_t v41 = v40;
      }
      id v42 = [v39 count];
      if ((unint64_t)v42 >= v41) {
        uint64_t v43 = v41;
      }
      else {
        uint64_t v43 = (uint64_t)v42;
      }
      if (v43 < 1)
      {
        uint64_t v47 = &__NSArray0__struct;
        long long v49 = v71;
      }
      else
      {
        id v44 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v45 = objc_opt_class();
          *(_DWORD *)id v84 = 138543618;
          __int16 v85 = v45;
          __int16 v86 = 2114;
          id v87 = v26;
          id v46 = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[%{public}@] All ranked apps: %{public}@", v84, 0x16u);
        }
        uint64_t v47 = objc_msgSend(v39, "subarrayWithRange:", 0, v43);
        id v48 = ASDLogHandleForCategory();
        long long v49 = v71;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          id v50 = objc_opt_class();
          id v70 = v50;
          id v51 = [v47 count];
          id v52 = [v5 count];
          *(_DWORD *)id v84 = 138544130;
          __int16 v85 = v50;
          __int16 v86 = 2048;
          id v87 = v51;
          __int16 v88 = 2048;
          id v89 = v52;
          __int16 v90 = 2114;
          id v91 = v47;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[%{public}@] Ranked %ld apps out of %ld candidate(s). Ranked apps: %{public}@", v84, 0x2Au);
        }
      }
    }
    else
    {
      uint64_t v47 = &__NSArray0__struct;
      long long v49 = v71;
    }

    if (![v47 count])
    {
      id v59 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v60 = objc_opt_class();
        *(_DWORD *)long long buf = 138543618;
        id v96 = v60;
        __int16 v97 = 2112;
        uint64_t v98 = v74;
        id v61 = v60;
        __int16 v62 = "[%{public}@] [%@] No app usage to save";
LABEL_59:
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, v62, buf, 0x16u);
      }
LABEL_60:

      return;
    }
    id v53 = v74;
    *(void *)id v92 = 0;
    id v54 = +[NSPropertyListSerialization dataWithPropertyList:v47 format:100 options:0 error:v92];
    id v55 = *(id *)v92;
    if (v55)
    {
      __int16 v56 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        id v57 = objc_opt_class();
        *(_DWORD *)long long buf = 138543874;
        id v96 = v57;
        __int16 v97 = 2112;
        uint64_t v98 = v53;
        __int16 v99 = 2114;
        CFStringRef v100 = v55;
        id v58 = v57;
        _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "[%{public}@] [%@] Unable to write apps usage due serialization: %{public}@", buf, 0x20u);
      }
LABEL_57:

      id v59 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v68 = objc_opt_class();
        *(_DWORD *)long long buf = 138543618;
        id v96 = v68;
        __int16 v97 = 2112;
        uint64_t v98 = v53;
        id v61 = v68;
        __int16 v62 = "[%{public}@] [%@] Wrote app usage";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    id v63 = sub_1002C90FC();
    __int16 v56 = v63;
    if (v63)
    {
      __int16 v64 = [v63 stringByAppendingPathComponent:@"apps.plist"];
      [v54 writeToFile:v64 atomically:1];
      id v65 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        id v66 = objc_opt_class();
        *(_DWORD *)long long buf = 138543874;
        id v96 = v66;
        __int16 v97 = 2112;
        uint64_t v98 = v53;
        __int16 v99 = 2112;
        CFStringRef v100 = v64;
        id v67 = v66;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%@] Wrote app usage to path: %@", buf, 0x20u);
      }
    }
    else
    {
      __int16 v64 = ASDLogHandleForCategory();
      if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      id v69 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      id v96 = v69;
      __int16 v97 = 2112;
      uint64_t v98 = v53;
      id v65 = v69;
      _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "[%{public}@] [%@] Unable to write apps usage due to not being able to find the container path", buf, 0x16u);
    }

LABEL_56:
    goto LABEL_57;
  }
}

int64_t sub_1002CC5B8(id a1, NSNumber *a2, NSNumber *a3)
{
  id v4 = a3;
  NSInteger v5 = [(NSNumber *)a2 integerValue];
  NSInteger v6 = [(NSNumber *)v4 integerValue];

  if (v5 > v6) {
    return -1;
  }
  else {
    return v5 < v6;
  }
}

id sub_1002CC610(uint64_t a1, void *a2)
{
  dispatch_semaphore_t v2 = a2;
  self;
  if (v2)
  {
    id v3 = v2[3];
    id v4 = v2[2];
  }
  else
  {
    id v3 = 0;
    id v4 = 0;
  }
  id v5 = v4;
  NSInteger v6 = +[AMSDialogRequest requestWithTitle:v3 message:v5];

  id v7 = ASDLocalizedString();
  uint64_t v8 = +[AMSDialogAction actionWithTitle:v7 style:2];

  [v8 setIdentifier:@"AuthenticationChallengeDialogActionCancel"];
  [v6 addButtonAction:v8];
  uint64_t v9 = ASDLocalizedString();
  int v10 = +[AMSDialogAction actionWithTitle:v9 style:0];

  [v10 setIdentifier:@"AuthenticationChallengeDialogActionOkay"];
  [v6 addButtonAction:v10];
  __int16 v11 = ASDLocalizedString();
  __int16 v12 = +[AMSDialogTextField textFieldWithPlaceholder:v11 secure:0];

  [v12 setKeyboardType:0];
  __int16 v13 = sub_100361E94((uint64_t)v2);

  [v12 setText:v13];
  [v6 addTextField:v12];
  id v14 = ASDLocalizedString();
  id v15 = +[AMSDialogTextField textFieldWithPlaceholder:v14 secure:1];

  [v15 setKeyboardType:0];
  [v6 addTextField:v15];

  return v6;
}

id *sub_1002CC830(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    uint64_t v8 = [a1 init];
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 4, a2);
      objc_storeStrong(a1 + 3, a3);
    }
  }

  return a1;
}

void sub_1002CC8B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(id *)(a1 + 8);
    if (v4
      || (+[ACAccountStore ams_sharedAccountStore],
          id v5 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v5, "ams_activeiTunesAccount"),
          id v4 = (id)objc_claimAutoreleasedReturnValue(),
          v5,
          v4))
    {
      id v6 = objc_alloc_init(URLRequestProperties);
      sub_1003641D4((uint64_t)v6, v4);
      sub_100364598((uint64_t)v6, *(void **)(a1 + 16));
      id v7 = sub_10030B11C();
      uint64_t v8 = [v7 URLForKey:@"fsEntitlementsSrv"];
      sub_100364398((uint64_t)v6, v8);

      switch(*(void *)(a1 + 48))
      {
        case 0:
          uint64_t v9 = @"News";
          goto LABEL_14;
        case 1:
          uint64_t v9 = @"AppStore";
          goto LABEL_14;
        case 2:
          uint64_t v9 = @"Activity";
          goto LABEL_14;
        case 3:
          uint64_t v9 = @"Music";
          goto LABEL_14;
        case 4:
          uint64_t v9 = @"TV";
          goto LABEL_14;
        case 5:
          uint64_t v9 = @"iCloud";
          goto LABEL_14;
        case 6:
          uint64_t v9 = @"Podcasts";
LABEL_14:
          sub_100365450((uint64_t)v6, v9, @"segment");
          goto LABEL_15;
        case 7:
          sub_100365450((uint64_t)v6, @"HWBundle", @"segment");
          id v15 = +[AMSDevice serialNumber];
          if ([v15 length]) {
            sub_100365450((uint64_t)v6, v15, @"serialNumber");
          }

LABEL_15:
          __int16 v12 = *(void **)(a1 + 32);
          if (v12)
          {
            id v13 = objc_getProperty(v12, v11, 32, 1);
            sub_1003648FC((uint64_t)v6, v13);
          }
          id v14 = sub_100266924([URLRequest alloc], v6);
          v16[0] = _NSConcreteStackBlock;
          v16[1] = 3221225472;
          void v16[2] = sub_1002CCBB4;
          void v16[3] = &unk_100526378;
          void v16[4] = a1;
          id v18 = v3;
          id v17 = v4;
          sub_1002669B4((uint64_t)v14, v16);

          break;
        default:
          int v10 = ASDErrorWithDescription();
          (*((void (**)(id, void, void *))v3 + 2))(v3, 0, v10);

          break;
      }
    }
    else
    {
      (*((void (**)(id, void, void))v3 + 2))(v3, 0, 0);
    }
  }
}

void sub_1002CCBB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    id v7 = a2;
    self;
    if ([v7 responseStatusCode] == (id)200)
    {
      uint64_t v8 = [v7 object];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v9 = [v8 objectForKey:@"status"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && [v9 integerValue])
        {
          int v10 = [v8 objectForKey:@"errorNumber"];
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            __int16 v11 = v10;
          }
          else {
            __int16 v11 = v9;
          }
          id v12 = [v11 integerValue];
          uint64_t v13 = [v8 objectForKey:@"errorMessage"];
          id v14 = (void *)v13;
          id v15 = @"Unknown server error";
          if (v13) {
            id v15 = (__CFString *)v13;
          }
          uint64_t v16 = v15;

          uint64_t v17 = ASDServerErrorDomain;
          NSErrorUserInfoKey v45 = NSDebugDescriptionErrorKey;
          *(void *)uint64_t v40 = v16;
          id v18 = +[NSDictionary dictionaryWithObjects:v40 forKeys:&v45 count:1];
          id v19 = +[NSError errorWithDomain:v17 code:v12 userInfo:v18];

          goto LABEL_17;
        }
        id v28 = [v8 objectForKeyedSubscript:@"entitlements"];
        id v29 = sub_1003B8774([SubscriptionEntitlementsResponse alloc], v28);

        if (v29)
        {
          uint64_t v30 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 24);
            *(_DWORD *)uint64_t v40 = 138412290;
            *(void *)&void v40[4] = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[%@] Entitlement fetch succeeded", v40, 0xCu);
          }

          (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
          id v32 = 0;
          goto LABEL_35;
        }
      }
      else
      {
      }
      id v19 = 0;
      goto LABEL_27;
    }
    uint64_t v26 = ASDErrorDomain;
    uint64_t v43 = ASDErrorHTTPStatusCodeKey;
    id v27 = [v7 responseStatusCode];

    uint64_t v8 = +[NSNumber numberWithInteger:v27];
    id v44 = v8;
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
    id v19 = +[NSError errorWithDomain:v26 code:521 userInfo:v9];
LABEL_17:

LABEL_27:
    id v33 = v19;

    id v32 = v33;
    int IsEqual = ASDErrorIsEqual();
    long long v35 = ASDLogHandleForCategory();
    BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    if (IsEqual)
    {
      if (v36)
      {
        uint64_t v37 = *(void *)(*(void *)(a1 + 32) + 24);
        *(_DWORD *)uint64_t v40 = 138412290;
        *(void *)&void v40[4] = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "[%@] Entitlement fetch failed with a no authorization error", v40, 0xCu);
      }

      sub_1002CD158(*(void *)(a1 + 32), *(void **)(a1 + 40), v32, *(void **)(a1 + 48));
    }
    else
    {
      if (v36)
      {
        uint64_t v38 = *(void *)(*(void *)(a1 + 32) + 24);
        *(_DWORD *)uint64_t v40 = 138412546;
        *(void *)&void v40[4] = v38;
        __int16 v41 = 2114;
        id v42 = v32;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "[%@] Entitlement fetch failed due to error: %{public}@", v40, 0x16u);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    id v29 = 0;
LABEL_35:

    goto LABEL_36;
  }
  uint64_t v20 = [v5 userInfo];
  id v21 = [v20 objectForKey:AMSErrorUserInfoKeyStatusCode];
  id v22 = [v21 integerValue];

  id v23 = ASDLogHandleForCategory();
  id v24 = v23;
  if (v22 == (id)401)
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 24);
      *(_DWORD *)uint64_t v40 = 138412290;
      *(void *)&void v40[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] Entitlement fetch failed with a HTTP status 401 error", v40, 0xCu);
    }

    sub_1002CD158(*(void *)(a1 + 32), *(void **)(a1 + 40), v6, *(void **)(a1 + 48));
  }
  else
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *(void *)(*(void *)(a1 + 32) + 24);
      *(_DWORD *)uint64_t v40 = 138412546;
      *(void *)&void v40[4] = v39;
      __int16 v41 = 2114;
      id v42 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[%@] Entitlement fetch failed with error: %{public}@", v40, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
LABEL_36:
}

void sub_1002CD158(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    int v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 24);
      if (*(unsigned char *)(a1 + 40)) {
        CFStringRef v12 = @"loud";
      }
      else {
        CFStringRef v12 = @"silent";
      }
      uint64_t v13 = objc_msgSend(v7, "ams_DSID");
      *(_DWORD *)long long buf = 138412802;
      uint64_t v33 = v11;
      __int16 v34 = 2114;
      CFStringRef v35 = v12;
      __int16 v36 = 2114;
      uint64_t v37 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%@] Attempting to %{public}@ auth for accountID: %{public}@", buf, 0x20u);
    }
    id v14 = *(void **)(a1 + 32);
    if (!v14) {
      goto LABEL_14;
    }
    if ([v14 isInternal]) {
      goto LABEL_14;
    }
    id v15 = [*(id *)(a1 + 32) notificationClient];
    uint64_t v16 = [v15 supportedDialogHandlers];
    unsigned int v17 = [v16 handlesAuthentication];

    if (!v17) {
      goto LABEL_14;
    }
    id v18 = [*(id *)(a1 + 32) notificationClient];
    id v19 = sub_10033C1D8((uint64_t)CallerRequestPresenter, v18);

    if (v19)
    {
      uint64_t v20 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)(a1 + 24);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v33 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%@] Delivering presentation requests to notification client", buf, 0xCu);
      }
    }
    else
    {
LABEL_14:
      id v19 = objc_opt_new();
    }
    id v22 = objc_alloc_init((Class)AMSAuthenticateOptions);
    [v22 setCanMakeAccountActive:0];
    [v22 setAuthenticationType:*(unsigned char *)(a1 + 40) == 0];
    if (*(void *)(a1 + 32))
    {
      id v23 = +[NSString stringWithFormat:@"%@ - SubscriptionEntitlementsRequest", *(void *)(a1 + 32)];
      [v22 setDebugReason:v23];

      id v24 = [*(id *)(a1 + 32) processInfo];
      [v22 setClientInfo:v24];
      uint64_t v25 = [v24 bundleIdentifier];
      [v22 setProxyAppBundleID:v25];
    }
    else
    {
      [v22 setDebugReason:@"SubscriptionEntitlementsRequest"];
    }
    id v26 = [objc_alloc((Class)AMSAuthenticateRequest) initWithAccount:*(void *)(a1 + 8) options:v22];
    id v27 = [*(id *)(a1 + 24) description];
    [v26 setLogKey:v27];

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1002CD50C;
    void v28[3] = &unk_1005263A0;
    void v28[4] = a1;
    id v31 = v9;
    id v29 = v7;
    id v30 = v8;
    [v19 presentAuthenticateRequest:v26 resultHandler:v28];
  }
}

void sub_1002CD50C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 account];
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), v6);
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(v8 + 24);
      if (*(unsigned char *)(v8 + 40)) {
        CFStringRef v10 = @"loud";
      }
      else {
        CFStringRef v10 = @"silent";
      }
      uint64_t v11 = objc_msgSend(v6, "ams_DSID");
      int v19 = 138412802;
      uint64_t v20 = v9;
      __int16 v21 = 2114;
      CFStringRef v22 = v10;
      __int16 v23 = 2114;
      id v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Successfully completed %{public}@ auth accountID: %{public}@", (uint8_t *)&v19, 0x20u);
    }
    sub_1002CC8B0(*(void *)(a1 + 32), *(void *)(a1 + 56));
  }
  else
  {
    CFStringRef v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(v13 + 24);
      if (*(unsigned char *)(v13 + 40)) {
        CFStringRef v15 = @"loud";
      }
      else {
        CFStringRef v15 = @"silent";
      }
      uint64_t v16 = objc_msgSend(*(id *)(a1 + 40), "ams_DSID");
      int v19 = 138412802;
      uint64_t v20 = v14;
      __int16 v21 = 2114;
      CFStringRef v22 = v15;
      __int16 v23 = 2114;
      id v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%@] Failed to %{public}@ auth accountID: %{public}@", (uint8_t *)&v19, 0x20u);
    }
    uint64_t v17 = *(void *)(a1 + 56);
    id v18 = ASDErrorBySettingUserInfoValue();
    (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v18);
  }
}

void *sub_1002CD794(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  v12.receiver = a1;
  v12.super_class = (Class)SbsyncTask;
  id v3 = objc_msgSendSuper2(&v12, "init");
  if (v3)
  {
    id v4 = +[NSDate date];
    [v4 timeIntervalSinceReferenceDate];
    v3[13] = v5;

    void v3[5] = a2;
    id v6 = +[NSURLSessionConfiguration defaultSessionConfiguration];
    objc_msgSend(v6, "set_sourceApplicationBundleIdentifier:", @"com.apple.AppStore");
    id v7 = sub_100295100();
    uint64_t v8 = sub_10030B11C();
    objc_msgSend(v6, "ams_configureWithProcessInfo:bag:", v7, v8);

    id v9 = [objc_alloc((Class)AMSURLSession) initWithConfiguration:v6 delegate:v3 delegateQueue:0];
    CFStringRef v10 = (void *)v3[14];
    v3[14] = v9;
  }
  return v3;
}

id sub_1002CE90C(uint64_t a1, void *a2)
{
  uint64_t v3 = self;
  uint64_t v13 = 0;
  unsigned int v12 = 0;
  id v4 = +[AMSKeybag sharedInstance];
  id v11 = 0;
  [v4 fairplayContextWithError:&v11];
  id v5 = v11;

  sub_1000FFEA0();
  if (v6)
  {
    id v7 = +[NSString stringWithFormat:@"Failed to get sbsync info. Fairplay error status: %d", v6];
    uint64_t v8 = ASDErrorWithTitleAndMessage();

    id v9 = 0;
    id v5 = (id)v8;
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    id v9 = sub_1002CEEB0(v3, v13, v12);
    sub_1001F4F90(v13);
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v9 = 0;
  if (a2) {
LABEL_6:
  }
    *a2 = v5;
LABEL_7:

  return v9;
}

BOOL sub_1002CEA58(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  BOOL v6 = 0;
  if (v4 && v5)
  {
    id v7 = [v5 objectForKeyedSubscript:v4];
    uint64_t v8 = v7;
    if (v7) {
      BOOL v6 = [v7 integerValue] == (id)2;
    }
    else {
      BOOL v6 = 0;
    }
  }
  return v6;
}

BOOL sub_1002CEAE8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  uint64_t v5 = self;
  id v11 = 0;
  BOOL v6 = sub_1002CE90C(v5, &v11);
  id v7 = v11;
  uint64_t v8 = v7;
  if (v7)
  {
    BOOL v9 = 0;
    if (a3) {
      *a3 = v7;
    }
  }
  else
  {
    BOOL v9 = sub_1002CEA58((uint64_t)SbsyncTask, v4, v6);
  }

  return v9;
}

void sub_1002CEBA0(id a1, void *a2, unint64_t a3)
{
}

void sub_1002CED78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    *(unsigned char *)(v7 + 57) = 0;
  }
  if (!v5)
  {
    uint64_t v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11) {
        uint64_t v11 = *(void *)(v11 + 72);
      }
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Error presenting dialog request: %{public}@", (uint8_t *)&v12, 0x16u);
    }
  }
  uint64_t v9 = *(void *)(a1 + 40);
  CFStringRef v10 = ASDErrorWithSafeUserInfo();
  (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v5, v10);
}

id sub_1002CEEB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  self;
  id v5 = 0;
  if (a3)
  {
    id v6 = (unsigned int *)(a2 + 8);
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *((void *)v6 - 1);
      uint64_t v9 = *v6;
      if (!v5) {
        id v5 = objc_opt_new();
      }
      v6 += 4;
      CFStringRef v10 = +[NSNumber numberWithUnsignedInt:v9];
      uint64_t v11 = +[NSNumber numberWithUnsignedLongLong:v8];
      [v5 setObject:v10 forKey:v11];

      --v7;
    }
    while (v7);
  }
  return v5;
}

void sub_1002CEF80(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

NSPredicate *sub_1002CF110(uint64_t a1, uint64_t a2)
{
  return +[NSPredicate predicateWithFormat:@"self isKindOfClass: %@", a2];
}

id sub_1002CF238(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  v6[0] = ASDAppLibraryServiceNotificationKeyAction;
  v6[1] = ASDAppLibraryServiceNotificationKeyBundleIDs;
  v7[0] = ASDAppLibraryServiceNotificationActionRefresh;
  v7[1] = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  id v4 = +[ASDNotification notificationWithName:ASDAppLibraryServiceNotificationName userInfo:v3];

  return v4;
}

id sub_1002CF330(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  v6[0] = ASDAppLibraryServiceNotificationKeyAction;
  v6[1] = ASDAppLibraryServiceNotificationKeyDeviceID;
  v7[0] = ASDAppLibraryServiceNotificationActionRefresh;
  v7[1] = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  id v4 = +[ASDNotification notificationWithName:ASDAppLibraryServiceNotificationName userInfo:v3];

  return v4;
}

id sub_1002CF428(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  v6[0] = ASDAppLibraryServiceNotificationKeyAction;
  v6[1] = ASDAppLibraryServiceNotificationKeyApps;
  v7[0] = ASDAppLibraryServiceNotificationActionError;
  v7[1] = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  id v4 = +[ASDNotification notificationWithName:ASDAppLibraryServiceNotificationName userInfo:v3];

  return v4;
}

id sub_1002CF520(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  v9[0] = ASDAppLibraryServiceNotificationKeyAction;
  v9[1] = ASDAppLibraryServiceNotificationKeyApps;
  v10[0] = ASDAppLibraryServiceNotificationActionAppsRegistered;
  v10[1] = v5;
  v9[2] = ASDAppLibraryServiceNotificationKeyDeviceID;
  void v10[2] = v4;
  id v6 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:3];
  uint64_t v7 = +[ASDNotification notificationWithName:ASDAppLibraryServiceNotificationName userInfo:v6];

  return v7;
}

id sub_1002CF63C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  v6[0] = ASDAppLibraryServiceNotificationKeyAction;
  v6[1] = ASDAppLibraryServiceNotificationKeyApps;
  v7[0] = ASDAppLibraryServiceNotificationActionAppsRegistered;
  v7[1] = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  id v4 = +[ASDNotification notificationWithName:ASDAppLibraryServiceNotificationName userInfo:v3];

  return v4;
}

id sub_1002CF734(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  v9[0] = ASDAppLibraryServiceNotificationKeyAction;
  v9[1] = ASDAppLibraryServiceNotificationKeyBundleIDs;
  v10[0] = ASDAppLibraryServiceNotificationActionAppsUnregistered;
  v10[1] = v5;
  v9[2] = ASDAppLibraryServiceNotificationKeyDeviceID;
  void v10[2] = v4;
  id v6 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:3];
  uint64_t v7 = +[ASDNotification notificationWithName:ASDAppLibraryServiceNotificationName userInfo:v6];

  return v7;
}

id sub_1002CF850(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  v6[0] = ASDAppLibraryServiceNotificationKeyAction;
  v6[1] = ASDAppLibraryServiceNotificationKeyBundleIDs;
  v7[0] = ASDAppLibraryServiceNotificationActionAppsUnregistered;
  v7[1] = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  id v4 = +[ASDNotification notificationWithName:ASDAppLibraryServiceNotificationName userInfo:v3];

  return v4;
}

void sub_1002CFCD8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002CFD90;
  v7[3] = &unk_100526408;
  id v8 = v4;
  id v6 = v4;
  [v5 enumerateObjectsUsingBlock:v7];
}

void sub_1002CFD90(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [a2 URLByResolvingSymlinksInPath];
  (*(void (**)(uint64_t, id, uint64_t))(v5 + 16))(v5, v6, a4);
}

id sub_1002CFDF8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    id v14 = v5;
    __int16 v15 = 2114;
    id v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing %{public}@ [%{public}@]", buf, 0x16u);
  }

  uint64_t v7 = +[NSFileManager defaultManager];
  id v12 = 0;
  id v8 = [v7 removeItemAtURL:v4 error:&v12];
  id v9 = v12;

  if ((v8 & 1) == 0)
  {
    CFStringRef v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543874;
      id v14 = v5;
      __int16 v15 = 2114;
      id v16 = v4;
      __int16 v17 = 2114;
      id v18 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to remove %{public}@ [%{public}@] error: %{public}@", buf, 0x20u);
    }
  }
  return v8;
}

void sub_1002CFF90(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  id v6 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Examining %{public}@", (uint8_t *)&buf, 0xCu);
  }

  if ([*(id *)(a1 + 32) isCancelled])
  {
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Validate On Device Asset Packs operation has been cancelled.", (uint8_t *)&buf, 2u);
    }

    *a3 = 1;
  }
  else
  {
    id v8 = [v5 lastPathComponent];
    unsigned int v9 = [v8 isEqualToString:@"StoreKit"];

    if (v9)
    {
      CFStringRef v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Skipping validation of StoreKit downloads directory", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      uint64_t v11 = *(void **)(a1 + 40);
      id v16 = 0;
      id v12 = [v11 contentsOfDirectoryAtURL:v5 includingPropertiesForKeys:&__NSArray0__struct options:0 error:&v16];
      id v13 = v16;
      if (v12)
      {
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v18 = 0x2020000000;
        id v19 = 0;
        id v19 = [v12 count];
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        void v15[2] = sub_1002D0298;
        void v15[3] = &unk_100526430;
        void v15[4] = *(void *)(a1 + 32);
        void v15[5] = &buf;
        sub_1002CFCD8((uint64_t)ODRAssetPackValidationMaintenanceTask, v12, v15);
        if (!*(void *)(*((void *)&buf + 1) + 24)) {
          sub_1002CFDF8((uint64_t)ODRAssetPackValidationMaintenanceTask, v5, @"empty directory");
        }
        _Block_object_dispose(&buf, 8);
      }
      else
      {
        id v14 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Correctness checking the on-disk asset packs failed.  Error: %{public}@", (uint8_t *)&buf, 0xCu);
        }
      }
    }
  }
}

void sub_1002D0278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002D0298(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Examining %{public}@", (uint8_t *)&buf, 0xCu);
  }

  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Validate On Device Asset Packs operation has been cancelled.", (uint8_t *)&buf, 2u);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = v3;
    id v8 = v7;
    if (v6)
    {
      unsigned int v9 = +[NSFileManager defaultManager];
      id v15 = 0;
      CFStringRef v10 = [v9 contentsOfDirectoryAtURL:v8 includingPropertiesForKeys:&__NSArray0__struct options:0 error:&v15];
      id v11 = v15;

      if (v10)
      {
        *(void *)&long long v22 = 0;
        *((void *)&v22 + 1) = &v22;
        uint64_t v23 = 0x2020000000;
        id v24 = 0;
        id v24 = [v10 count];
        *(void *)&long long buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472;
        __int16 v17 = sub_1002D082C;
        uint64_t v18 = &unk_100526480;
        uint64_t v19 = v6;
        id v12 = v10;
        id v20 = v12;
        __int16 v21 = &v22;
        sub_1002CFCD8((uint64_t)ODRAssetPackValidationMaintenanceTask, v12, &buf);
        if (*(void *)(*((void *)&v22 + 1) + 24))
        {

          _Block_object_dispose(&v22, 8);
        }
        else
        {
          unsigned int v14 = sub_1002CFDF8((uint64_t)ODRAssetPackValidationMaintenanceTask, v8, @"empty directory");

          _Block_object_dispose(&v22, 8);
          if (v14) {
            --*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          }
        }
      }
      else
      {
        id v13 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v22) = 138543362;
          *(void *)((char *)&v22 + 4) = v11;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Correctness checking the on-disk asset packs failed.  Error: %{public}@", (uint8_t *)&v22, 0xCu);
        }
      }
    }
    else
    {
    }
  }
}

void sub_1002D05A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002D05C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001F83B4(v3, *(void **)(a1 + 32));
  if (v4)
  {
    id v5 = (void *)v4;
    BOOL v6 = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    id v7 = [*(id *)(a1 + 32) lastPathComponent];
    id v8 = [v7 stringByDeletingPathExtension];

    unsigned int v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v16 = 138543362;
      __int16 v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Asset Pack Name: %{public}@", (uint8_t *)&v16, 0xCu);
    }

    id v5 = sub_1001F82E8(v3, (uint64_t)v8);
    CFStringRef v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = *(void **)(a1 + 32);
      int v16 = 138543362;
      __int16 v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Asset pack at %{public}@ has no entry in the database, checking to see if it matches any entry", (uint8_t *)&v16, 0xCu);
    }

    if (v5)
    {
      unsigned int v12 = sub_100298654(v5);
      id v13 = ASDLogHandleForCategory();
      unsigned int v14 = v13;
      if (v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 138543362;
          __int16 v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Entry for asset pack at %{public}@ found and has been updated in the database", (uint8_t *)&v16, 0xCu);
        }

        sub_10029805C(v5, *(void **)(a1 + 32));
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      }
      else
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int v16 = 138543362;
          __int16 v17 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "No entry found for asset pack %{public}@, it has been deleted", (uint8_t *)&v16, 0xCu);
        }
      }
      BOOL v6 = sub_100249F50(v3, v5);
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  return v6;
}

void sub_1002D082C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 pathExtension];
  unsigned int v5 = [v4 isEqualToString:@"plist"];
  BOOL v6 = ASDLogHandleForCategory();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (!v5)
  {
    if (v7)
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Examining asset pack at URL: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v17 = a1[4];
    id v18 = v3;
    uint64_t v19 = v18;
    if (v17)
    {
      uint64_t v22 = 0;
      uint64_t v23 = &v22;
      uint64_t v24 = 0x2020000000;
      char v25 = 1;
      id v20 = sub_1002393C4();
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      id v27 = sub_1002D05C0;
      id v28 = &unk_100523970;
      id v21 = v19;
      id v29 = v21;
      id v30 = &v22;
      [v20 modifyUsingTransaction:&buf];

      LODWORD(v20) = *((unsigned char *)v23 + 24) == 0;
      _Block_object_dispose(&v22, 8);

      if (!v20) {
        goto LABEL_16;
      }
    }
    else
    {
    }
    int v16 = @"asset pack";
    goto LABEL_14;
  }
  if (v7)
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Examining metadata at URL: %{public}@", (uint8_t *)&buf, 0xCu);
  }

  uint64_t v9 = a1[4];
  id v8 = (void *)a1[5];
  id v10 = v3;
  id v11 = v8;
  unsigned int v12 = v11;
  if (!v9)
  {

LABEL_8:
    int v16 = @"metadata";
LABEL_14:
    if (sub_1002CFDF8((uint64_t)ODRAssetPackValidationMaintenanceTask, v3, v16)) {
      --*(void *)(*(void *)(a1[6] + 8) + 24);
    }
    goto LABEL_16;
  }
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 0;
  id v13 = objc_msgSend(v10, "lastPathComponent", 0);
  unsigned int v14 = [v13 stringByDeletingPathExtension];

  if (v14)
  {
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    id v27 = sub_1002D0B80;
    id v28 = &unk_1005264A8;
    id v30 = &v22;
    id v29 = v14;
    [v12 enumerateObjectsUsingBlock:&buf];
  }
  BOOL v15 = *((unsigned char *)v23 + 24) == 0;

  _Block_object_dispose(&v22, 8);
  if (v15) {
    goto LABEL_8;
  }
LABEL_16:
}

void sub_1002D0B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002D0B80(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v11 = a2;
  BOOL v6 = [v11 pathExtension];
  unsigned __int8 v7 = [v6 isEqualToString:@"plist"];

  id v8 = v11;
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = [v11 lastPathComponent];
    id v10 = [v9 stringByDeletingPathExtension];

    if (v10) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v10 isEqualToString:*(void *)(a1 + 32)];
    }
    *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

    id v8 = v11;
  }
}

id sub_1002D0D74(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v2 = (uint64_t)a1;
  if (a1)
  {
    id v3 = a1 + 4;
    id v4 = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
    uint64_t v2 = [*(id *)(v2 + 8) objectForKeyedSubscript:v4];

    os_unfair_lock_unlock(v3);
  }
  return (id)v2;
}

void sub_1002D0DE8(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    unsigned int v5 = (os_unfair_lock_s *)(a1 + 16);
    id v6 = a3;
    id v7 = a2;
    os_unfair_lock_lock(v5);
    [*(id *)(a1 + 8) setObject:v7 forKeyedSubscript:v6];

    os_unfair_lock_unlock(v5);
  }
}

void sub_1002D0E7C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = sub_1003F99E8((uint64_t)AppInstallPredicates, a2);
    id v7 = [a1 connection];
    id v8 = sub_1002FF548((uint64_t)AppInstallEntity, v7, v6);

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002D0F80;
    void v9[3] = &unk_100522A90;
    void v9[4] = a1;
    id v10 = v5;
    [v8 enumeratePersistentIDsUsingBlock:v9];
  }
}

void sub_1002D0F80(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  [(SQLiteEntity *)v6 setValue:&off_10054C330 forProperty:@"bootstrapped"];
  unint64_t v7 = (unint64_t)sub_10026E91C(v6, @"IFNULL(app_install.priority, 0)");
  id v8 = ASDLogHandleForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if ((v7 & 0x8000000000000000) != 0)
  {
    if (v9)
    {
      sub_1002C1EE8(v6);
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      int v15 = 138412290;
      id v16 = v14;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Reset bootstrap phase, ready for next attempt", (uint8_t *)&v15, 0xCu);
LABEL_10:
    }
  }
  else
  {
    if (v9)
    {
      id v10 = sub_1002C1EE8(v6);
      uint64_t v11 = *(void *)(a1 + 40);
      int v15 = 138412546;
      id v16 = v10;
      __int16 v17 = 2114;
      uint64_t v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Failing installation with bootstrap error: %{public}@", (uint8_t *)&v15, 0x16u);
    }
    id v8 = sub_1002C276C(v6, *(void **)(a1 + 40));
    if (v8)
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v12, 24, 1);
      }
      id v14 = Property;
      sub_100286124((uint64_t)v14, v8);
      goto LABEL_10;
    }
  }
}

void sub_1002D1158(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = [SQLiteQueryDescriptor alloc];
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    BOOL v9 = sub_1002FF380(v6, v7, v8);
    id v10 = sub_1003F8E9C();
    v27[0] = v10;
    uint64_t v11 = +[NSNumber numberWithInteger:a2];
    unsigned int v12 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToValue:v11];
    v27[1] = v12;
    id v13 = +[NSArray arrayWithObjects:v27 count:2];
    int v15 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v13];
    if (v9) {
      objc_setProperty_nonatomic_copy(v9, v14, v15, 56);
    }

    v26[0] = @"priority";
    v26[1] = @"order_index";
    __int16 v17 = +[NSArray arrayWithObjects:v26 count:2];
    if (v9) {
      objc_setProperty_nonatomic_copy(v9, v16, v17, 48);
    }

    v25[0] = @"DESC";
    v25[1] = @"ASC";
    uint64_t v19 = +[NSArray arrayWithObjects:v25 count:2];
    if (v9) {
      objc_setProperty_nonatomic_copy(v9, v18, v19, 40);
    }

    id v20 = [SQLiteQuery alloc];
    id v21 = [a1 connection];
    id v22 = [(SQLiteQuery *)v20 initOnConnection:v21 descriptor:v9];

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_1002D1404;
    v23[3] = &unk_100526518;
    void v23[4] = a1;
    id v24 = v5;
    [v22 enumerateMemoryEntitiesUsingBlock:v23];
  }
}

void sub_1002D1404(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v10 = a2;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    id v6 = [AppInstallEntity alloc];
    id v7 = [v10 databaseID];
    uint64_t v8 = [*(id *)(a1 + 32) connection];
    BOOL v9 = [(SQLiteEntity *)v6 initWithPersistentID:v7 onConnection:v8];

    [(SQLiteEntity *)v9 setValue:&off_10054C348 forProperty:@"bootstrapped"];
  }
  else
  {
    *a4 = 1;
  }
}

id sub_1002D14D8(void *a1, unint64_t a2, unint64_t a3)
{
  if (a1)
  {
    id v5 = +[NSMutableArray array];
    id v6 = [a1 connection];
    id v7 = sub_1002D16F0((uint64_t)AppSchedulerDatabaseTransaction, v6);

    uint64_t v8 = [v7 objectForKeyedSubscript:@"COUNT(1)"];
    BOOL v9 = (char *)[v8 unsignedIntegerValue];

    if ((unint64_t)v9 > a2)
    {
      uint64_t v19 = v7;
      id v10 = [a1 connection];
      uint64_t v11 = sub_1002D18D0((uint64_t)AppSchedulerDatabaseTransaction, v10);

      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      id v12 = v11;
      id v13 = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v22;
LABEL_5:
        uint64_t v16 = 0;
        while (1)
        {
          if (*(void *)v22 != v15) {
            objc_enumerationMutation(v12);
          }
          __int16 v17 = *(void **)(*((void *)&v21 + 1) + 8 * v16);
          if (((unint64_t)sub_10026E91C(v17, @"priority") & 0x8000000000000000) != 0)
          {
            sub_1002386A4((id *)a1, [v17 databaseID], 10, a3);
            --v9;
            [v5 addObject:v17];
            if ((unint64_t)v9 <= a2) {
              break;
            }
          }
          if (v14 == (id)++v16)
          {
            id v14 = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
            if (v14) {
              goto LABEL_5;
            }
            break;
          }
        }
      }

      id v7 = v19;
    }
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id sub_1002D16F0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000;
  id v12 = sub_1000180B8;
  id v13 = sub_100017C18;
  id v14 = 0;
  v15[0] = @"COUNT(1)";
  v15[1] = @"MAX(app_install.priority)";
  void v15[2] = @"MIN(app_install.priority)";
  id v3 = +[NSArray arrayWithObjects:v15 count:3];
  id v4 = sub_1003F8A7C();
  id v5 = sub_1002FF548((uint64_t)AppInstallEntity, v2, v4);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002D26F4;
  v8[3] = &unk_100526568;
  void v8[4] = &v9;
  [v5 enumeratePersistentIDsAndProperties:v3 usingBlock:v8];
  id v6 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1002D18AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002D18D0(uint64_t a1, void *a2)
{
  id v20 = a2;
  self;
  id v21 = objc_alloc_init((Class)NSMutableArray);
  v27[0] = @"bundle_id";
  v27[1] = @"external_id";
  void v27[2] = @"item_id";
  void v27[3] = @"log_code";
  v27[4] = @"phase";
  void v27[5] = @"priority";
  id v2 = +[NSArray arrayWithObjects:v27 count:6];
  id v3 = [SQLiteQueryDescriptor alloc];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  id v6 = sub_1002FF380(v3, v4, v5);
  id v7 = sub_1003F8A7C();
  v26[0] = v7;
  uint64_t v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"phase" value:&off_10054C360 comparisonType:3];
  v26[1] = v8;
  uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_type" value:&off_10054C348 comparisonType:2];
  void v26[2] = v9;
  id v10 = +[NSArray arrayWithObjects:v26 count:3];
  id v12 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v10];
  if (v6) {
    objc_setProperty_nonatomic_copy(v6, v11, v12, 56);
  }

  v25[0] = @"priority";
  v25[1] = @"phase";
  void v25[2] = @"order_index";
  id v14 = +[NSArray arrayWithObjects:v25 count:3];
  if (v6) {
    objc_setProperty_nonatomic_copy(v6, v13, v14, 48);
  }

  v24[0] = @"ASC";
  v24[1] = @"ASC";
  void v24[2] = @"DESC";
  uint64_t v16 = +[NSArray arrayWithObjects:v24 count:3];
  if (v6) {
    objc_setProperty_nonatomic_copy(v6, v15, v16, 40);
  }

  id v17 = [[SQLiteQuery alloc] initOnConnection:v20 descriptor:v6];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1002D2708;
  void v22[3] = &unk_100526590;
  id v18 = v21;
  id v23 = v18;
  [v17 enumerateMemoryEntitiesWithProperties:v2 usingBlock:v22];

  return v18;
}

id sub_1002D1BF8(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v7 = [a1 connection];
    uint64_t v8 = sub_1002D16F0((uint64_t)AppSchedulerDatabaseTransaction, v7);

    uint64_t v56 = 0;
    id v57 = &v56;
    uint64_t v58 = 0x2020000000;
    id v59 = 0;
    uint64_t v9 = [v8 objectForKeyedSubscript:@"COUNT(1)"];
    id v10 = [v9 unsignedIntegerValue];

    id v59 = v10;
    uint64_t v52 = 0;
    id v53 = &v52;
    uint64_t v54 = 0x2020000000;
    unint64_t v55 = 0x8000000000000000;
    uint64_t v48 = 0;
    long long v49 = &v48;
    uint64_t v50 = 0x2020000000;
    unint64_t v51 = 0x8000000000000000;
    if (v8 && v57[3])
    {
      uint64_t v11 = [v8 objectForKeyedSubscript:@"MAX(app_install.priority)"];
      id v12 = [v11 integerValue];
      void v53[3] = (uint64_t)v12;

      id v13 = [v8 objectForKeyedSubscript:@"MIN(app_install.priority)"];
      id v14 = [v13 integerValue];
      v49[3] = (uint64_t)v14;
    }
    uint64_t v15 = ASDLogHandleForCategory();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);

    if (v16)
    {
      id v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v38 = v57[3];
        uint64_t v39 = v49[3];
        uint64_t v40 = v53[3];
        *(_DWORD *)long long buf = 134218752;
        uint64_t v63 = v38;
        __int16 v64 = 2048;
        uint64_t v65 = a2;
        __int16 v66 = 2048;
        uint64_t v67 = v39;
        __int16 v68 = 2048;
        uint64_t v69 = v40;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Active installations: %lu/%lu Lowest Priority: %ld Highest Priority: %ld", buf, 0x2Au);
      }
    }
    id v18 = [SQLiteQueryDescriptor alloc];
    uint64_t v19 = objc_opt_class();
    uint64_t v20 = objc_opt_class();
    id v21 = sub_1002FF380(v18, v19, v20);
    id v23 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToLongLong:10];
    if (v21) {
      objc_setProperty_nonatomic_copy(v21, v22, v23, 56);
    }

    v61[0] = @"priority";
    v61[1] = @"order_index";
    char v25 = +[NSArray arrayWithObjects:v61 count:2];
    if (v21) {
      objc_setProperty_nonatomic_copy(v21, v24, v25, 48);
    }

    v60[0] = @"DESC";
    v60[1] = @"ASC";
    id v27 = +[NSArray arrayWithObjects:v60 count:2];
    if (v21) {
      objc_setProperty_nonatomic_copy(v21, v26, v27, 40);
    }

    id v28 = [SQLiteQuery alloc];
    id v29 = [a1 connection];
    id v30 = [(SQLiteQuery *)v28 initOnConnection:v29 descriptor:v21];

    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    void v41[2] = sub_1002D2148;
    v41[3] = &unk_100526540;
    v41[4] = a1;
    id v44 = &v56;
    uint64_t v47 = a2;
    id v43 = v5;
    NSErrorUserInfoKey v45 = &v52;
    id v31 = v6;
    id v42 = v31;
    id v46 = &v48;
    [v30 enumerateMemoryEntitiesUsingBlock:v41];
    id v32 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = v57[3];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v63 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Polling complete with %lu active installation(s)", buf, 0xCu);
    }

    uint64_t v34 = objc_opt_new();
    a1 = (void *)v34;
    if (v34) {
      *(void *)(v34 + _Block_object_dispose(&a9, 8) = v57[3];
    }
    id v36 = [v31 copy];
    if (a1) {
      objc_setProperty_atomic(a1, v35, v36, 16);
    }

    _Block_object_dispose(&v48, 8);
    _Block_object_dispose(&v52, 8);
    _Block_object_dispose(&v56, 8);
  }
  return a1;
}

void sub_1002D20FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1002D2148(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = v6;
  uint64_t v9 = v8;
  if (!v7) {
    goto LABEL_31;
  }
  id v10 = sub_10026E82C(v8, @"bootstrapped");
  uint64_t v11 = v10;
  if (!v10 || [v10 integerValue] == (id)2) {
    goto LABEL_4;
  }
  if (sub_10026E91C(v9, @"restore_type") || sub_10026E91C(v9, @"source_type") == (id)1)
  {

LABEL_31:
    goto LABEL_35;
  }
  id v29 = [AppInstallEntity alloc];
  id v30 = [v9 databaseID];
  id v31 = [v7 connection];
  id v32 = [(SQLiteEntity *)v29 initWithPersistentID:v30 onConnection:v31];

  [(SQLiteEntity *)v32 setValue:&off_10054C378 forProperty:@"bootstrapped"];
  uint64_t v33 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
  {
    uint64_t v38 = sub_100424C14(v9);
    *(_DWORD *)__int16 v41 = 138412290;
    *(void *)&v41[4] = v38;
    _os_log_fault_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "[%@] Correctness check failed - this installation doesn't appear need bootstrap, starting anyway", v41, 0xCu);
  }
LABEL_4:

  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) < *(void *)(a1 + 80))
  {
    if (!(*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))()) {
      goto LABEL_35;
    }
    id v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = sub_100424C14(v9);
      *(_DWORD *)__int16 v41 = 138543362;
      *(void *)&v41[4] = v37;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "No contention, starting: %{public}@", v41, 0xCu);
    }
    goto LABEL_8;
  }
  if ((uint64_t)sub_100424E9C(v9) <= *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
LABEL_34:
    *a4 = 1;
    goto LABEL_35;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) != *(void *)(a1 + 80)) {
    goto LABEL_33;
  }
  BOOL v16 = *(id **)(a1 + 32);
  id v17 = sub_100424E9C(v9);
  if (!v16) {
    goto LABEL_33;
  }
  uint64_t v18 = (uint64_t)v17;
  id v19 = v16[4];
  if (!v19)
  {
    uint64_t v20 = [v16 connection];
    uint64_t v21 = sub_1002D18D0((uint64_t)AppSchedulerDatabaseTransaction, v20);
    id v22 = v16[4];
    void v16[4] = (id)v21;

    id v23 = v16[4];
    *(void *)__int16 v41 = _NSConcreteStackBlock;
    *(void *)&v41[8] = 3221225472;
    *(void *)&v41[16] = sub_1002D2714;
    id v42 = &unk_1005265B8;
    id v43 = v16;
    long long v24 = [v23 indexesOfObjectsPassingTest:v41];
    if ([v24 count]) {
      [v16[4] removeObjectsAtIndexes:v24];
    }

    id v19 = v16[4];
  }
  char v25 = [v19 firstObject];
  id v26 = (uint64_t)sub_100424E9C(v25) >= v18 ? 0 : v25;
  id v27 = v26;

  if (!v27)
  {
LABEL_33:
    if (((unint64_t)sub_100424E9C(v9) & 0x8000000000000000) == 0
      && (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) & 0x8000000000000000) != 0)
    {
      if (!(*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))()) {
        goto LABEL_35;
      }
      id v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        id v34 = sub_100424E9C(v9);
        uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        id v36 = sub_100424C14(v9);
        *(_DWORD *)__int16 v41 = 134218498;
        *(void *)&v41[4] = v34;
        *(_WORD *)&v41[12] = 2048;
        *(void *)&v41[14] = v35;
        *(_WORD *)&v41[22] = 2114;
        id v42 = v36;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Prioritized (%ld >= %ld), starting: %{public}@", v41, 0x20u);
      }
LABEL_8:

      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      id v14 = sub_100424E9C(v9);
      if (v13 <= (uint64_t)v14) {
        uint64_t v15 = (uint64_t)v14;
      }
      else {
        uint64_t v15 = v13;
      }
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v15;
      [*(id *)(a1 + 40) addObject:v9];
      ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))())
  {
    id v28 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      id v39 = sub_100424E9C(v9);
      uint64_t v40 = sub_100424C14(v9);
      *(_DWORD *)__int16 v41 = 134218242;
      *(void *)&v41[4] = v39;
      *(_WORD *)&v41[12] = 2114;
      *(void *)&v41[14] = v40;
      _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Jettison candidate (%ld), starting: %{public}@", v41, 0x16u);
    }
    [*(id *)(*(void *)(a1 + 32) + 32) removeObject:v27];
    sub_1002386A4(*(id **)(a1 + 32), [v27 databaseID], 10, 1uLL);
    [*(id *)(a1 + 40) addObject:v9];
  }

LABEL_35:
}

void sub_1002D26F4(uint64_t a1, int a2, id obj)
{
}

id sub_1002D2708(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

BOOL sub_1002D2714(uint64_t a1, void *a2)
{
  id v2 = *(id **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = v3;
  if (v2)
  {
    id v5 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 databaseID]);
    id v6 = sub_10041E684((uint64_t)AppInstallInfo, v5);

    BOOL v7 = v6 == 0;
    if (!v6)
    {
      uint64_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = sub_100424C14(v4);
        int v12 = 138412290;
        uint64_t v13 = v11;
        _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "[%@] Encountered invalid installation which was not really running", (uint8_t *)&v12, 0xCu);
      }
      uint64_t v9 = ASDErrorWithDescription();
      sub_1002357D4(v2, (uint64_t)[v4 databaseID], v9, 0);
    }
  }
  else
  {
    BOOL v7 = 1;
  }

  return v7;
}

id *sub_1002D28B8(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)SQLiteTransporter;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 2, a2);
    }
  }

  return a1;
}

uint64_t sub_1002D2930(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!a1) {
    return v1;
  }
  id v2 = *(id *)(a1 + 16);
  self;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B0E38);
  id v3 = sub_1003F4C14();
  id v4 = [v3 mutableCopy];

  if (v4
    && ([v4 objectForKeyedSubscript:@"knownPaths"],
        id v5 = objc_claimAutoreleasedReturnValue(),
        id v6 = [v5 mutableCopy],
        v5,
        v6))
  {
    objc_super v7 = [v6 indexesOfObjectsPassingTest:&stru_1005265F8];
    if ([v7 count])
    {
      [v6 removeObjectsAtIndexes:v7];
      [v4 setObject:v6 forKeyedSubscript:@"knownPaths"];
      sub_1003F4B10((uint64_t)AppDefaultsManager, v4);
    }
    unsigned int v8 = [v6 containsObject:v2];

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B0E38);
    if (v8)
    {
      uint64_t v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(v1 + 16);
        int v26 = 138543362;
        uint64_t v27 = v10;
        uint64_t v11 = "Refusing to begin transportation for known path: %{public}@";
LABEL_25:
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v26, 0xCu);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B0E38);
  }
  int v12 = +[NSFileManager defaultManager];
  unsigned __int8 v13 = [v12 fileExistsAtPath:*(void *)(v1 + 16)];

  if ((v13 & 1) == 0)
  {
    uint64_t v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(v1 + 16);
      int v26 = 138543362;
      uint64_t v27 = v25;
      uint64_t v11 = "Refusing to begin transportation as path does not exist: %{public}@";
      goto LABEL_25;
    }
LABEL_15:

    return 0;
  }
  id v14 = *(id *)(v1 + 16);
  self;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B0E38);
  uint64_t v15 = sub_1003F4C14();
  id v16 = [v15 mutableCopy];

  if (!v16)
  {
    id v16 = objc_alloc_init((Class)NSMutableDictionary);
    goto LABEL_17;
  }
  id v17 = [v16 objectForKeyedSubscript:@"knownPaths"];
  id v18 = [v17 mutableCopy];

  if (!v18)
  {
LABEL_17:
    id v18 = +[NSMutableArray arrayWithObject:v14];
    goto LABEL_18;
  }
  [v18 addObject:v14];
LABEL_18:
  [v16 setObject:v18 forKeyedSubscript:@"knownPaths"];
  sub_1003F4B10((uint64_t)AppDefaultsManager, v16);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B0E38);

  id v19 = sub_10029FC14([SQLiteConnectionOptions alloc], *(void **)(v1 + 16));
  uint64_t v20 = v19;
  if (v19) {
    v19[8] = 1;
  }
  uint64_t v21 = sub_10025E59C([SQLiteConnection alloc], v19);
  id v22 = *(void **)(v1 + 8);
  *(void *)(v1 + _Block_object_dispose(&a9, 8) = v21;

  uint64_t v23 = *(void *)(v1 + 8);
  if (v23) {
    uint64_t v1 = sub_100012B74(v23);
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

uint64_t sub_1002D2CB4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 8);
    if (v2 && sub_10025E72C(v2) && sub_100307880(*(void **)(v1 + 16), 0))
    {
      id v3 = *(id *)(v1 + 16);
      self;
      os_unfair_lock_lock((os_unfair_lock_t)&unk_1005B0E38);
      id v4 = sub_1003F4C14();
      id v5 = [v4 mutableCopy];

      if (v5)
      {
        id v6 = [v5 objectForKeyedSubscript:@"knownPaths"];
        id v7 = [v6 mutableCopy];

        if (v7)
        {
          [v7 removeObject:v3];
          [v5 setObject:v7 forKeyedSubscript:@"knownPaths"];
          sub_1003F4B10((uint64_t)AppDefaultsManager, v5);
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1005B0E38);

      return 1;
    }
    else
    {
      unsigned int v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(v1 + 16);
        int v10 = 138543362;
        uint64_t v11 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Remembering path after ending transportation: %{public}@", (uint8_t *)&v10, 0xCu);
      }

      return 0;
    }
  }
  return result;
}

void sub_1002D2E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1002D2F00;
    v6[3] = &unk_100522DF8;
    void v6[4] = a1;
    id v7 = v3;
    sub_100011D9C(v5, v6);
  }
}

uint64_t sub_1002D2F00(uint64_t a1)
{
  return 1;
}

BOOL sub_1002D2F30(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  uint64_t v5 = +[NSFileManager defaultManager];
  unsigned __int8 v6 = [v5 fileExistsAtPath:v4];

  return v6 ^ 1;
}

uint64_t sub_1002D3DC8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v11 = 0;
  unsigned __int8 v6 = sub_10040CC40(v5, v3, (objc_class *)[v4 appEventEntityClass], &v11);

  id v7 = v11;
  [v6 count];

  if (v7)
  {
    unsigned int v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v10 = [*(id *)(a1 + 40) logKey];
      *(_DWORD *)long long buf = 138412546;
      unsigned __int8 v13 = v10;
      __int16 v14 = 2114;
      id v15 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Importing payout event(s) error: %{public}@", buf, 0x16u);
    }
  }

  return 1;
}

void sub_1002D44B4(void **a1, void *a2)
{
  id v3 = [a2 connection];
  id v4 = sub_1002FFEDC((uint64_t)SQLiteEntity, v3, a1[4], [a1[5] appEventEntityClass]);

  id v5 = objc_msgSend(objc_msgSend(a1[5], "appEventEntityClass"), "defaultProperties");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002D45AC;
  v8[3] = &unk_100525A48;
  id v6 = a1[6];
  id v7 = a1[5];
  id v9 = v6;
  int v10 = v7;
  [v4 enumerateMemoryEntitiesWithProperties:v5 usingBlock:v8];
}

void sub_1002D45AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) addObject:v3];
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 40) logKey];
    id v6 = sub_10022E5E8(v3);
    id v7 = sub_10022DD6C(v3);
    int v8 = 138412802;
    id v9 = v5;
    __int16 v10 = 2114;
    id v11 = v6;
    __int16 v12 = 2114;
    unsigned __int8 v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%@] [%{public}@] Added existing qualified event for accountID: %{public}@", (uint8_t *)&v8, 0x20u);
  }
}

uint64_t sub_1002D526C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002D5360(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002D5454(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002D5548(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002D5784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002D5888(void *a1)
{
  if (a1)
  {
    id obj = a1;
    objc_sync_enter(obj);
    uint64_t v1 = (void *)obj[7];
    obj[7] = 0;

    objc_sync_exit(obj);
  }
}

__CFString *sub_1002D59E0(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xA) {
    return 0;
  }
  else {
    return off_1005266B0[a2];
  }
}

id sub_1002D5A20(void *a1, unsigned int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    id v31 = objc_opt_new();
    id v9 = sub_1002D5CD8((uint64_t)a1, v7, a2, v8);
    if ([v9 count])
    {
      id v26 = v7;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id obj = [v9 keyEnumerator];
      id v10 = [obj countByEnumeratingWithState:&v32 objects:v42 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v33;
        uint64_t v28 = a2;
        uint64_t v29 = *(void *)v33;
        unsigned int v27 = a2;
        do
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v33 != v12) {
              objc_enumerationMutation(obj);
            }
            __int16 v14 = [v9 objectForKey:*(void *)(*((void *)&v32 + 1) + 8 * i)];
            id v15 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              id v16 = objc_opt_class();
              id v17 = v8;
              id v18 = v16;
              sub_10022E5E8(v14);
              id v19 = v11;
              uint64_t v20 = a1;
              v22 = uint64_t v21 = v9;
              *(_DWORD *)long long buf = 138412802;
              uint64_t v37 = v16;
              __int16 v38 = 2114;
              id v39 = v22;
              __int16 v40 = 2048;
              uint64_t v41 = v28;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[%@]: Adding event for app with bundleID: %{public}@ type: %ld", buf, 0x20u);

              id v9 = v21;
              a1 = v20;
              id v11 = v19;

              id v8 = v17;
              a2 = v27;
              uint64_t v12 = v29;
            }

            uint64_t v23 = sub_1002D61A0(a1, v14, a2, v8);
            if (v23) {
              [v31 addObject:v23];
            }
          }
          id v11 = [obj countByEnumeratingWithState:&v32 objects:v42 count:16];
        }
        while (v11);
      }

      id v7 = v26;
    }
    id v24 = [v31 copy];
  }
  else
  {
    id v24 = 0;
  }

  return v24;
}

id sub_1002D5CD8(uint64_t a1, void *a2, int a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  __int16 v40 = v6;
  if (a1)
  {
    id v8 = objc_opt_new();
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id obj = v6;
    id v47 = [obj countByEnumeratingWithState:&v48 objects:v52 count:16];
    if (v47)
    {
      uint64_t v46 = *(void *)v49;
      BOOL v10 = a3 != 2 || v7 == 0;
      BOOL v43 = v10;
      uint64_t v41 = v7;
      do
      {
        for (uint64_t i = 0; i != v47; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v49 != v46) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void **)(*((void *)&v48 + 1) + 8 * i);
          unsigned __int8 v13 = sub_10022E78C(v12);
          __int16 v14 = [v8 objectForKey:v13];

          if (v14)
          {
            id v15 = [v8 objectForKey:v13];
            id v16 = [v12 valueForProperty:@"count"];
            id v17 = (char *)[v16 integerValue];

            id v18 = [v15 valueForProperty:@"count"];
            id v19 = [v18 integerValue];

            uint64_t v20 = +[NSNumber numberWithInteger:&v17[(void)v19]];
            [v15 setValue:v20 forProperty:@"count"];

            if (a3 == 2)
            {
              if (v7 && v7[4] == 1)
              {
                uint64_t v21 = [v12 valueForProperty:@"launch_time"];
                if (v21)
                {
                  id v42 = +[AMSMetrics serverTimeFromDate:v21];
                  id v22 = [v12 valueForProperty:@"usage_time"];
                  uint64_t v23 = [v12 valueForProperty:@"is_clip"];
                  unsigned int v24 = [v23 BOOLValue];

                  if (v24)
                  {
                    uint64_t v25 = [v12 valueForProperty:@"clip_ref_type"];
                    id v26 = [v12 valueForProperty:@"clip_ref_source"];
                  }
                  else
                  {
                    uint64_t v25 = 0;
                    id v26 = 0;
                  }
                  sub_10022DDCC((uint64_t)v15, v42, v22, v25, v26);

                  id v7 = v41;
                }
              }
              else
              {
                long long v34 = [v12 valueForProperty:@"usage_time"];
                long long v35 = (char *)[v34 integerValue];

                id v36 = [v15 valueForProperty:@"usage_time"];
                id v37 = [v36 integerValue];

                uint64_t v21 = +[NSNumber numberWithInteger:&v35[(void)v37]];
                [v15 setValue:v21 forProperty:@"usage_time"];
              }
            }
          }
          else
          {
            if (!v43 && v7[4] == 1)
            {
              unsigned int v27 = [v12 valueForProperty:@"launch_time"];
              if (v27)
              {
                uint64_t v28 = +[AMSMetrics serverTimeFromDate:v27];
                uint64_t v29 = [v12 valueForProperty:@"usage_time"];
                id v30 = [v12 valueForProperty:@"is_clip"];
                unsigned int v31 = [v30 BOOLValue];

                if (v31)
                {
                  long long v32 = [v12 valueForProperty:@"clip_ref_type"];
                  long long v33 = [v12 valueForProperty:@"clip_ref_source"];
                }
                else
                {
                  long long v33 = 0;
                  long long v32 = 0;
                }
                sub_10022DDCC((uint64_t)v12, v28, v29, v32, v33);

                id v7 = v41;
              }
            }
            [v8 setObject:v12 forKey:v13];
          }
        }
        id v47 = [obj countByEnumeratingWithState:&v48 objects:v52 count:16];
      }
      while (v47);
    }

    id v38 = [v8 copy];
  }
  else
  {
    id v38 = 0;
  }

  return v38;
}

AppUsageMetricsEvent *sub_1002D61A0(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (!a1)
  {
    unsigned __int8 v13 = 0;
    goto LABEL_78;
  }
  uint64_t v75 = 0;
  long long v76 = &v75;
  uint64_t v77 = 0x3032000000;
  long long v78 = sub_1000180C8;
  long long v79 = sub_100017C20;
  id v80 = 0;
  id v9 = sub_10038F000();
  uint64_t v67 = _NSConcreteStackBlock;
  uint64_t v68 = 3221225472;
  uint64_t v69 = sub_1002D6B5C;
  id v70 = &unk_100526648;
  id v74 = &v75;
  id v71 = a1;
  BOOL v10 = (id *)v7;
  long long v72 = v10;
  id v11 = v8;
  id v73 = v11;
  [v9 readUsingSession:&v67];

  uint64_t v12 = (void *)v76[5];
  if (v12)
  {
    sub_1002D6D6C(a1, v12, a3, v11);
    unsigned __int8 v13 = (AppUsageMetricsEvent *)objc_claimAutoreleasedReturnValue();
    goto LABEL_23;
  }
  __int16 v14 = [AppUsageMetricsEvent alloc];
  if (v11) {
    id v15 = (void *)v11[19];
  }
  else {
    id v15 = 0;
  }
  id v16 = v15;
  unsigned __int8 v13 = -[AppUsageMetricsEvent initWithTopic:](v14, "initWithTopic:", v16, v67, v68, v69, v70, v71, v72);

  if (!v13)
  {
    id v17 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v64 = (id)objc_opt_class();
      if (v11) {
        uint64_t v65 = (void *)v11[19];
      }
      else {
        uint64_t v65 = 0;
      }
      id v66 = v65;
      *(_DWORD *)long long buf = 138412546;
      id v82 = v64;
      __int16 v83 = 2114;
      id v84 = v66;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[%@]: Failed to create event with topic: %{public}@", buf, 0x16u);
    }
  }
  sub_1003F50D0((uint64_t)v13, a3);
  if (!v11)
  {
    int64_t v18 = 0;
    if (!v13) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  int64_t v18 = v11[4];
  if (v13) {
LABEL_11:
  }
    v13->_appUsageType = v18;
LABEL_12:
  if (sub_10022E97C(v10))
  {
    id v19 = sub_10022E97C(v10);
    sub_1003F5318(v13, (uint64_t)v19);
  }
  uint64_t v20 = sub_10022E5E8(v10);
  sub_1003F53A8((id *)v13, v20);

  uint64_t v21 = sub_10022E620(v10);
  sub_1003F5420((id *)v13, v21);

  if (sub_10022E9C4(v10))
  {
    unsigned __int8 v22 = sub_10022E9C4(v10);
    if (v13) {
      v13->_clip = v22;
    }
    sub_1003F5588((id *)v13, @"clip");
  }
  uint64_t v23 = sub_10022E6C8(v10);
  sub_1003F5CD0((id *)v13, v23);

  unsigned int v24 = sub_10022EA54(v10);
  sub_1003F610C((id *)v13, v24);

  id v26 = sub_10022EA8C(v10);
  if (v13) {
    objc_setProperty_nonatomic_copy(v13, v25, v26, 288);
  }

  unsigned int v27 = sub_10022EAC4(v10);
  sub_1003F64E0((id *)v13, v27);

  uint64_t v28 = sub_10022EAFC(v10);
  sub_1003F6558((id *)v13, v28);

  if (sub_10022EA0C(v10)) {
    sub_1003F609C(v13, 1);
  }
  [a1 decorateMetricsEvent:v13 context:v11];
LABEL_23:
  if (!v11 || v11[4] != 1) {
    goto LABEL_34;
  }
  if (v10) {
    id v29 = sub_10026E91C(v10, @"app_platform");
  }
  else {
    id v29 = 0;
  }
  id v30 = sub_1002D59E0((uint64_t)AppUsageBaseManager, (unint64_t)v29);
  [(AppUsageMetricsEvent *)v13 setProperty:v30 forBodyKey:@"appPlatform"];

  unsigned int v31 = sub_10022E690(v10);

  if (v31)
  {
    long long v32 = sub_10022E690(v10);
    sub_1003F5210((id *)v13, v32);
  }
  else
  {
    id v59 = (void *)v76[5];
    if (!v59) {
      goto LABEL_30;
    }
    __int16 v60 = sub_1003A3F1C(v59);
    BOOL v61 = v60 == 0;

    if (v61) {
      goto LABEL_30;
    }
    long long v32 = sub_1003A3F1C((void *)v76[5]);
    sub_1003F5210((id *)v13, v32);
  }

LABEL_30:
  long long v33 = sub_10022E658(v10);

  if (v33)
  {
    long long v34 = sub_10022E658(v10);
    sub_1003F5B5C((id *)v13, v34);
  }
  if (sub_10022E934(v10)) {
    sub_1003F5288(v13, 1);
  }
LABEL_34:
  long long v35 = sub_10022E620(v10);

  if (v35)
  {
    id v36 = sub_10022E620(v10);
    sub_1003F5420((id *)v13, v36);
  }
  id v37 = sub_10022E6C8(v10);
  BOOL v38 = v37 == 0;

  if (!v38)
  {
    id v39 = sub_10022E6C8(v10);
    sub_1003F5CD0((id *)v13, v39);
  }
  __int16 v40 = sub_10022EAC4(v10);

  if (v40)
  {
    uint64_t v41 = sub_10022EAC4(v10);
    sub_1003F64E0((id *)v13, v41);
  }
  if (v11 && v11[4] == 1)
  {
    id v42 = [v10 valueForProperty:@"clip_affiliate_token"];

    if (v42)
    {
      BOOL v43 = [v10 valueForProperty:@"clip_affiliate_token"];
      sub_1003F5510((id *)v13, v43);
    }
    id v44 = objc_msgSend(v10, "valueForProperty:", @"clip_app_type", v67, v68, v69, v70, v71);

    if (v44)
    {
      NSErrorUserInfoKey v45 = [v10 valueForProperty:@"clip_app_type"];
      sub_1003F5588((id *)v13, v45);
    }
    uint64_t v46 = [v10 valueForProperty:@"clip_campaign"];

    if (v46)
    {
      id v47 = [v10 valueForProperty:@"clip_campaign"];
      sub_1003F5600((id *)v13, v47);
    }
    long long v48 = [v10 valueForProperty:@"clip_campaign_token"];

    if (v48)
    {
      long long v49 = [v10 valueForProperty:@"clip_campaign_token"];
      sub_1003F5678((id *)v13, v49);
    }
    long long v50 = [v10 valueForProperty:@"clip_provider_token"];

    if (v50)
    {
      long long v51 = [v10 valueForProperty:@"clip_provider_token"];
      sub_1003F5960((id *)v13, v51);
    }
    if (sub_10022E8EC(v10) != 2)
    {
      uint64_t v52 = [v10 valueForProperty:@"clip_ref_source"];

      if (v52)
      {
        id v53 = [v10 valueForProperty:@"clip_ref_source"];
        sub_1003F59D8((id *)v13, v53);
      }
      uint64_t v54 = [v10 valueForProperty:@"clip_ref_type"];

      if (v54)
      {
        unint64_t v55 = [v10 valueForProperty:@"clip_ref_type"];
        sub_1003F5A50((id *)v13, v55);
      }
      uint64_t v56 = [v10 valueForProperty:@"clip_third_party_with_no_app_referrer"];

      if (v56)
      {
        id v57 = [v10 valueForProperty:@"clip_third_party_with_no_app_referrer"];
        sub_1003F5AC8((id *)v13, v57);
      }
    }
  }
  if (a3 == 2)
  {
    if (v11 && v11[4] == 1)
    {
      if (v10) {
        id v58 = [v10[4] copy];
      }
      else {
        id v58 = 0;
      }
      if (objc_msgSend(v58, "count", v67, v68, v69, v70, v71)) {
        sub_1003F5E58((id *)v13, v58);
      }
    }
    else
    {
      objc_msgSend(v10, "valueForProperty:", @"usage_time", v67, v68, v69, v70, v71);
      id v58 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_opt_respondsToSelector()) {
        sub_1003F6720(v13, (uint64_t)[v58 integerValue]);
      }
    }
    goto LABEL_74;
  }
  if (a3 == 1)
  {
    id v58 = [v10 valueForProperty:@"event_subtype"];
    if (objc_opt_respondsToSelector()) {
      sub_1003F6030(v13, (int)[v58 unsignedCharValue]);
    }
LABEL_74:
  }
  __int16 v62 = objc_msgSend(v10, "valueForProperty:", @"count", v67, v68, v69, v70, v71);
  if (objc_opt_respondsToSelector()) {
    sub_1003F66B0(v13, (uint64_t)[v62 integerValue]);
  }

  _Block_object_dispose(&v75, 8);
LABEL_78:

  return v13;
}

void sub_1002D6B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002D6B5C(void *a1, void *a2)
{
  uint64_t v4 = a1[4];
  id v3 = (void *)a1[5];
  id v5 = a2;
  id v6 = sub_10022E5E8(v3);
  id v7 = [v5 connection];

  id v8 = (void *)a1[6];
  id v18 = v6;
  id v9 = v7;
  id v10 = v8;
  if (v4)
  {
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x3032000000;
    uint64_t v23 = sub_1000180C8;
    unsigned int v24 = sub_100017C20;
    id v25 = 0;
    id v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v18];
    uint64_t v12 = objc_opt_class();
    unsigned __int8 v13 = sub_1002FFEDC((uint64_t)SQLiteEntity, v9, v11, v12);
    __int16 v14 = +[AppMetadataEntity defaultProperties];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1002D7B74;
    void v19[3] = &unk_100521428;
    void v19[4] = &v20;
    [v13 enumerateMemoryEntitiesWithProperties:v14 usingBlock:v19];

    id v15 = (id)v21[5];
    _Block_object_dispose(&v20, 8);
  }
  else
  {
    id v15 = 0;
  }

  uint64_t v16 = *(void *)(a1[7] + 8);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;
}

void sub_1002D6D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

AppUsageMetricsEvent *sub_1002D6D6C(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (!a1)
  {
    uint64_t v12 = 0;
    goto LABEL_28;
  }
  id v9 = [AppUsageMetricsEvent alloc];
  if (v8) {
    id v10 = (void *)v8[19];
  }
  else {
    id v10 = 0;
  }
  id v11 = v10;
  uint64_t v12 = [(AppUsageMetricsEvent *)v9 initWithTopic:v11];

  if (!v12)
  {
    unsigned __int8 v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v29 = objc_opt_class();
      id v30 = v29;
      if (v8) {
        unsigned int v31 = (void *)v8[19];
      }
      else {
        unsigned int v31 = 0;
      }
      id v32 = v31;
      int v33 = 138412546;
      long long v34 = v29;
      __int16 v35 = 2114;
      id v36 = v32;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[%@]: Failed to create event with topic: %{public}@", (uint8_t *)&v33, 0x16u);
    }
  }
  sub_1003F50D0((uint64_t)v12, a3);
  if (v8)
  {
    int64_t v14 = v8[4];
    if (!v12) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  int64_t v14 = 0;
  if (v12) {
LABEL_9:
  }
    v12->_appUsageType = v14;
LABEL_10:
  if (sub_1003A4054(v7))
  {
    id v15 = sub_1003A4054(v7);
    sub_1003F5318(v12, (uint64_t)v15);
  }
  if (!v8 || v8[4] != 1) {
    goto LABEL_19;
  }
  if (!v7)
  {
    id v16 = 0;
    goto LABEL_17;
  }
  if (sub_10026E91C(v7, @"app_platform") != (id)99999)
  {
    id v16 = sub_10026E91C(v7, @"app_platform");
LABEL_17:
    id v17 = sub_1002D59E0((uint64_t)AppUsageBaseManager, (unint64_t)v16);
    [(AppUsageMetricsEvent *)v12 setProperty:v17 forBodyKey:@"appPlatform"];
  }
  id v18 = sub_1003A3A8C(v7);
  sub_1003F5B5C((id *)v12, v18);

LABEL_19:
  id v19 = sub_1003A3938(v7);
  sub_1003F53A8((id *)v12, v19);

  uint64_t v20 = sub_1003A3F54(v7);
  sub_1003F5420((id *)v12, v20);

  if (sub_1003A3FC4(v7))
  {
    unsigned __int8 v21 = sub_1003A3FC4(v7);
    if (v12) {
      v12->_clip = v21;
    }
    sub_1003F5588((id *)v12, @"clip");
  }
  uint64_t v22 = sub_1003A39A8(v7);
  sub_1003F5CD0((id *)v12, v22);

  uint64_t v23 = sub_1003A3970(v7);
  sub_1003F610C((id *)v12, v23);

  id v25 = sub_1003A3F8C(v7);
  if (v12) {
    objc_setProperty_nonatomic_copy(v12, v24, v25, 288);
  }

  id v26 = sub_1003A40E4(v7);
  sub_1003F64E0((id *)v12, v26);

  unsigned int v27 = sub_1003A411C(v7);
  sub_1003F6558((id *)v12, v27);

  if (sub_1003A409C(v7)) {
    sub_1003F609C(v12, 1);
  }
  [a1 decorateMetricsEvent:v12 context:v8];
LABEL_28:

  return v12;
}

id sub_1002D713C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  unsigned int v24 = v7;
  if (a1)
  {
    unsigned int v27 = objc_opt_new();
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id obj = v7;
    id v9 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v30;
      uint64_t v25 = a2;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v30 != v11) {
            objc_enumerationMutation(obj);
          }
          unsigned __int8 v13 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          int64_t v14 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            id v15 = objc_opt_class();
            id v28 = v15;
            sub_10022E5E8(v13);
            id v16 = a1;
            uint64_t v17 = v11;
            uint64_t v18 = a2;
            uint64_t v20 = v19 = v8;
            *(_DWORD *)long long buf = 138412802;
            long long v34 = v15;
            __int16 v35 = 2114;
            id v36 = v20;
            __int16 v37 = 2048;
            uint64_t v38 = v25;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[%@]: Adding event for app with bundleID: %{public}@ type: %ld", buf, 0x20u);

            id v8 = v19;
            a2 = v18;
            uint64_t v11 = v17;
            a1 = v16;
          }
          unsigned __int8 v21 = sub_1002D61A0(a1, v13, a2, v8);
          if (v21) {
            [v27 addObject:v21];
          }
        }
        id v10 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
      }
      while (v10);
    }

    id v22 = [v27 copy];
  }
  else
  {
    id v22 = 0;
  }

  return v22;
}

id sub_1002D73A8(void *a1, char a2, void *a3)
{
  if (a1)
  {
    a1 = sub_1002D73DC((uint64_t)a1, a2, a3, 0);
    uint64_t v3 = vars8;
  }
  return a1;
}

id sub_1002D73DC(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    id v9 = objc_opt_new();
    id v10 = sub_10038F000();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1002D7510;
    void v15[3] = &unk_100526670;
    id v16 = v7;
    char v19 = a2;
    id v17 = v8;
    id v11 = v9;
    id v18 = v11;
    [v10 readUsingSession:v15];

    uint64_t v12 = v18;
    id v13 = v11;
  }
  else
  {
    id v13 = 0;
  }

  return v13;
}

void sub_1002D7510(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  if (v3 && *(void *)(v3 + 32) == 4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5 || *(void *)(v5 + 32) != 3) {
      goto LABEL_8;
    }
  }
  if (!*(unsigned char *)(v5 + 8))
  {
LABEL_9:
    id v8 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 56)];
    id v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"event_type" equalToValue:v8];
    v19[0] = v9;
    id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"has_been_posted" equalToValue:&off_10054C3A8];
    v19[1] = v10;
    id v11 = +[NSArray arrayWithObjects:v19 count:2];
    id v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v11];

    goto LABEL_10;
  }
LABEL_8:
  id v6 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 56)];
  id v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"event_type" equalToValue:v6];

LABEL_10:
  uint64_t v12 = [v4 connection];

  id v13 = *(void **)(a1 + 40);
  int64_t v14 = sub_1003A8568(*(void **)(a1 + 32));
  id v15 = sub_1002FFF60((uint64_t)SQLiteEntity, v12, v7, v13, v14);

  id v16 = [sub_1003A8568(*(void **)(a1 + 32)) defaultProperties];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1002D7788;
  void v17[3] = &unk_1005213B0;
  id v18 = *(id *)(a1 + 48);
  [v15 enumerateMemoryEntitiesWithProperties:v16 usingBlock:v17];
}

id sub_1002D7788(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_1002D7794(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)MGCopyAnswer();
    if (v1)
    {
      uint64_t v2 = +[NSCharacterSet characterSetWithCharactersInString:@"0123456789"];
      uint64_t v3 = +[NSScanner scannerWithString:v1];
      if ([v3 isAtEnd])
      {
        id v4 = 0;
      }
      else
      {
        id v6 = 0;
        [v3 scanUpToCharactersFromSet:v2 intoString:&v6];
        id v4 = v6;
      }
    }
    else
    {
      id v4 = 0;
    }
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

id sub_1002D7870(void *a1)
{
  if (a1)
  {
    a1 = (void *)MGCopyAnswer();
    uint64_t v1 = vars8;
  }
  return a1;
}

__CFString *sub_1002D78A8(__CFString *result)
{
  if (result)
  {
    unsigned int v1 = MGGetSInt32Answer() - 1;
    if (v1 > 5) {
      return 0;
    }
    else {
      return off_100526708[v1];
    }
  }
  return result;
}

__CFString *sub_1002D78F4(__CFString *result)
{
  if (result)
  {
    unsigned int v1 = MGGetSInt32Answer() - 1;
    if (v1 > 5) {
      return 0;
    }
    else {
      return off_100526738[v1];
    }
  }
  return result;
}

BOOL sub_1002D7940(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_17;
  }
  if (v5)
  {
    [v5 doubleValue];
    if (v7 >= 2.22044605e-16)
    {
      id v8 = v5;
    }
    else
    {

      id v8 = &off_10054E330;
    }
  }
  else
  {
    int has_internal_content = os_variant_has_internal_content();
    id v10 = &off_10054E320;
    if (has_internal_content) {
      id v10 = &off_10054E310;
    }
    id v8 = v10;
  }
  int v11 = os_variant_has_internal_content();
  if (v6 && v11)
  {
    uint64_t v5 = v6;

    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v21 = (id)objc_opt_class();
      __int16 v22 = 2114;
      uint64_t v23 = v5;
      id v12 = v21;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@]: Using defaults based app usage post sampling override: %{public}@", buf, 0x16u);
    }
  }
  else
  {
    int v13 = os_variant_has_internal_content();
    int64_t v14 = &off_10054E310;
    if (!v13) {
      int64_t v14 = v8;
    }
    uint64_t v5 = v14;
  }

  [v5 doubleValue];
  if (v15 >= 2.22044605e-16)
  {
    if (qword_1005B0E40 != -1) {
      dispatch_once(&qword_1005B0E40, &stru_100526690);
    }
    double v16 = drand48();
    [v5 doubleValue];
    BOOL v19 = v16 < v17;
  }
  else
  {
LABEL_17:
    BOOL v19 = 0;
  }

  return v19;
}

void sub_1002D7B48(id a1)
{
  uint64_t v1 = arc4random();
  srand48(v1);
}

void sub_1002D7B74(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

id sub_1002D7CE8()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002D7D8C;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0E50 != -1) {
    dispatch_once(&qword_1005B0E50, block);
  }
  uint64_t v0 = (void *)qword_1005B0E48;
  return v0;
}

void sub_1002D7D8C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B0E48;
  qword_1005B0E48 = (uint64_t)v1;
}

void sub_1002D7DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1002D7E6C;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002D7E6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  if (v1)
  {
    id v28 = objc_alloc_init(_TtC9appstored6LogKey);
    uint64_t v23 = v1;
    id v3 = sub_1002D8C8C(v1);
    id v4 = +[NSMutableDictionary dictionaryWithDictionary:v3];

    uint64_t v25 = +[LSDatabaseContext sharedDatabaseContext];
    unsigned int v24 = [v25 startAccessingReturningError:0];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v26 = v2;
    id v5 = v2;
    id v6 = [v5 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (v6)
    {
      id v7 = v6;
      char v8 = 0;
      uint64_t v9 = *(void *)v32;
      long long v29 = v4;
      id v27 = v5;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v9) {
            objc_enumerationMutation(v5);
          }
          uint64_t v11 = *(void *)(*((void *)&v31 + 1) + 8 * i);
          int v13 = objc_msgSend(v4, "objectForKeyedSubscript:", v11, v23);

          if (!v13)
          {
            id v14 = objc_alloc((Class)LSApplicationRecord);
            id v30 = 0;
            id v15 = [v14 initForInstallMachineryWithBundleIdentifier:v11 placeholder:0 error:&v30];
            id v16 = v30;
            if (v15 && sub_1000173A0(v15))
            {
              double v17 = [AppLedgerItem alloc];
              id v18 = [v15 iTunesMetadata];
              BOOL v19 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v18 storeItemIdentifier]);
              uint64_t v20 = [(AppLedgerItem *)v17 initWithBundleID:v11 itemID:v19];

              id v21 = sub_1003D9EF0([AppLedgerEvent alloc], v15, v28);
              __int16 v22 = sub_1003BF880((id *)[AppLedgerInstallItem alloc], v21);
              [(AppLedgerItem *)v20 addInstall:v22];
              [v29 setObject:v20 forKeyedSubscript:v11];

              id v4 = v29;
              id v5 = v27;

              char v8 = 1;
            }
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v31 objects:v35 count:16];
      }
      while (v7);
    }
    else
    {
      char v8 = 0;
    }

    if (v24) {
      [v25 stopAccessing];
    }
    id v2 = v26;
    if (v8) {
      sub_1002D9314(v23, v4, v28);
    }
  }
}

void sub_1002D8164(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002D81E0;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002D81E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v23 = objc_alloc_init(_TtC9appstored6LogKey);
    id v2 = sub_1002D8C8C(v1);
    id v3 = +[NSMutableDictionary dictionaryWithDictionary:v2];

    id v21 = +[LSDatabaseContext sharedDatabaseContext];
    unsigned int v20 = [v21 startAccessingReturningError:0];
    id v4 = +[NSMutableArray array];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    __int16 v22 = v3;
    id v5 = [v3 keyEnumerator];
    id v6 = [v5 countByEnumeratingWithState:&v25 objects:v35 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          id v12 = objc_alloc((Class)LSApplicationRecord);
          id v24 = 0;
          id v13 = [v12 initWithBundleIdentifier:v10 allowPlaceholder:1 error:&v24];
          id v14 = v24;
          if (!v13) {
            [v4 addObject:v10];
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v25 objects:v35 count:16];
      }
      while (v7);
    }

    if (v20) {
      [v21 stopAccessing];
    }
    if (objc_msgSend(v4, "count", v1))
    {
      [v22 removeObjectsForKeys:v4];
      id v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = objc_opt_class();
        id v17 = v16;
        id v18 = [v4 componentsJoinedByString:@", "];
        *(_DWORD *)long long buf = 138543874;
        id v30 = v16;
        __int16 v31 = 2114;
        long long v32 = v23;
        __int16 v33 = 2114;
        long long v34 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Removed [%{public}@]", buf, 0x20u);
      }
      sub_1002D9314(v19, v22, v23);
    }
  }
}

void sub_1002D84A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1002D8550;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002D8550(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  id v3 = v2;
  if (v1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    id v53 = objc_alloc_init(_TtC9appstored6LogKey);
    uint64_t v55 = v1;
    id v5 = sub_1002D8C8C(v1);
    id v6 = +[NSMutableDictionary dictionaryWithDictionary:v5];

    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    uint64_t v54 = v3;
    id v7 = v3;
    id v8 = [v7 countByEnumeratingWithState:&v67 objects:v76 count:16];
    if (!v8) {
      goto LABEL_51;
    }
    id v9 = v8;
    uint64_t v10 = *(void *)v68;
    id v56 = v7;
    id v57 = v6;
    uint64_t v65 = *(void *)v68;
    while (1)
    {
      uint64_t v11 = 0;
      id v64 = v9;
      do
      {
        if (*(void *)v68 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v67 + 1) + 8 * (void)v11);
        if (v12) {
          id v13 = *(void **)(v12 + 8);
        }
        else {
          id v13 = 0;
        }
        id v14 = v13;
        id v15 = [v6 objectForKeyedSubscript:v14];
        if (v15
          || ((id v16 = [AppLedgerItem alloc], !v12) ? (v17 = 0) : (v17 = *(void **)(v12 + 48)),
              id v18 = v17,
              id v15 = [(AppLedgerItem *)v16 initWithBundleID:v14 itemID:v18],
              v18,
              [v6 setObject:v15 forKeyedSubscript:v14],
              v15))
        {
          uint64_t v19 = sub_1003BF880((id *)[AppLedgerInstallItem alloc], (void *)v12);
          if (!v19) {
            goto LABEL_40;
          }
          [(AppLedgerItem *)v15 addInstall:v19];
          if (!v12 || (*(void *)(v12 + 40) & 0xFFFFFFFFFFFFFFFELL) != 0x12) {
            goto LABEL_40;
          }
          id v20 = *(id *)(v12 + 56);
          id v21 = v15;
          id v22 = v20;
          uint64_t v23 = [(AppLedgerItem *)v21 installs];
          if ([v23 count] == (id)2)
          {
            id v66 = v22;
            id v24 = [(AppLedgerItem *)v21 installs];
            long long v25 = [v24 firstObject];
            if (v25)
            {
              uint64_t v26 = v25[2];

              BOOL v4 = v26 == 80;
              id v9 = v64;
              id v22 = v66;
              if (!v4)
              {
LABEL_39:

                uint64_t v10 = v65;
LABEL_40:

                goto LABEL_41;
              }
              long long v27 = [(AppLedgerItem *)v21 installs];
              uint64_t v23 = [v27 lastObject];

              uint64_t v63 = v21;
              long long v28 = [(AppLedgerItem *)v21 installs];
              uint64_t v29 = [v28 firstObject];

              if (v23)
              {
                BOOL v30 = v23[6] == 0;
                __int16 v31 = (void *)v23[1];
              }
              else
              {
                __int16 v31 = 0;
                BOOL v30 = 1;
              }
              id v32 = v31;
              [v32 timeIntervalSinceReferenceDate];
              double v34 = v33;
              if (v29) {
                __int16 v35 = *(void **)(v29 + 8);
              }
              else {
                __int16 v35 = 0;
              }
              id v36 = v35;
              [v36 timeIntervalSinceReferenceDate];
              uint64_t v38 = (uint64_t)(v34 - v37);

              if (v38 <= 0) {
                unint64_t v39 = 0;
              }
              else {
                unint64_t v39 = v38 / 0x15180uLL;
              }
              v83[0] = @"bundleID";
              uint64_t v84 = [(AppLedgerItem *)v63 bundleIdentifier];
              v83[1] = @"claimedVersionID";
              BOOL v61 = (void *)v84;
              unint64_t v58 = v39;
              if (v29) {
                __int16 v40 = *(void **)(v29 + 24);
              }
              else {
                __int16 v40 = 0;
              }
              id v41 = v40;
              uint64_t v85 = [v41 stringValue];
              void v83[2] = @"updateVersionID";
              __int16 v62 = (void *)v29;
              id v59 = (void *)v85;
              __int16 v60 = v41;
              if (v23) {
                id v42 = (void *)v23[3];
              }
              else {
                id v42 = 0;
              }
              id v43 = v42;
              id v44 = [v43 stringValue];
              __int16 v86 = v44;
              v83[3] = @"wasFullUpdate";
              NSErrorUserInfoKey v45 = +[NSNumber numberWithBool:v30];
              id v87 = v45;
              uint8_t v83[4] = @"timeToUpdate";
              uint64_t v46 = +[NSNumber numberWithLong:v58];
              __int16 v88 = v46;
              id v47 = +[NSDictionary dictionaryWithObjects:&v84 forKeys:v83 count:5];

              long long v48 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
              {
                long long v49 = objc_opt_class();
                *(_DWORD *)long long buf = 138543874;
                long long v78 = v49;
                __int16 v79 = 2114;
                id v80 = v66;
                __int16 v81 = 2114;
                id v82 = v47;
                id v50 = v49;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] We have an update of a factory claim update event: %{public}@", buf, 0x20u);
              }
              id v71 = _NSConcreteStackBlock;
              uint64_t v72 = 3221225472;
              id v73 = sub_1002D9724;
              id v74 = &unk_100526770;
              id v75 = v47;
              id v51 = v47;
              AnalyticsSendEventLazy();

              id v7 = v56;
              id v6 = v57;
            }
            else
            {
              __int16 v62 = v24;
              uint64_t v63 = v21;
              id v51 = 0;
            }

            id v21 = v63;
            id v9 = v64;
            id v22 = v66;
          }

          goto LABEL_39;
        }
LABEL_41:

        uint64_t v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v52 = [v7 countByEnumeratingWithState:&v67 objects:v76 count:16];
      id v9 = v52;
      if (!v52)
      {
LABEL_51:

        sub_1002D9314(v55, v6, v53);
        id v3 = v54;
        break;
      }
    }
  }
}

id sub_1002D8B44(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000180D8;
    id v9 = sub_100017C28;
    id v10 = 0;
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1002D8C40;
    v4[3] = &unk_100521988;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1002D8C40(uint64_t a1)
{
  uint64_t v2 = sub_1002D8C8C(*(void *)(a1 + 32));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  BOOL v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1002D8C8C(uint64_t a1)
{
  if (!a1)
  {
    id v21 = 0;
    goto LABEL_30;
  }
  uint64_t v1 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v2 = sub_1002D96C8();
  if (!v2)
  {
    uint64_t v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      id v34 = (id)objc_opt_class();
      __int16 v35 = 2114;
      id v36 = v1;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Unable to generate the path for ledger", buf, 0x16u);
    }
    goto LABEL_16;
  }
  uint64_t v3 = [objc_alloc((Class)NSData) initWithContentsOfFile:v2];
  if (!v3)
  {
LABEL_16:
    uint64_t v11 = &__NSDictionary0__struct;
    goto LABEL_17;
  }
  BOOL v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    id v34 = (id)objc_opt_class();
    __int16 v35 = 2114;
    id v36 = v1;
    id v5 = v34;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Loaded ledger", buf, 0x16u);
  }
  id v31 = 0;
  id v6 = +[NSPropertyListSerialization propertyListWithData:v3 options:0 format:0 error:&v31];
  id v7 = v31;
  objc_opt_class();
  id v8 = v6;
  id v9 = 0;
  if (objc_opt_isKindOfClass()) {
    id v9 = v8;
  }

  if (v7)
  {
    id v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v24 = objc_opt_class();
      *(_DWORD *)long long buf = 138543874;
      id v34 = v24;
      __int16 v35 = 2114;
      id v36 = v1;
      __int16 v37 = 2114;
      id v38 = v7;
      id v25 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%{public}@] [%{public}@] Failed to deserialize the cached ledger. Error: %{public}@", buf, 0x20u);
    }
  }
  else if (v9)
  {
    uint64_t v23 = [v9 objectForKeyedSubscript:@"apps"];

    if (v23)
    {
      uint64_t v11 = [v9 objectForKeyedSubscript:@"apps"];
      goto LABEL_13;
    }
  }
  uint64_t v11 = &__NSDictionary0__struct;
LABEL_13:

LABEL_17:
  if (v11)
  {
    uint64_t v26 = v1;
    uint64_t v12 = +[NSMutableDictionary dictionary];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v13 = v11;
    id v14 = [v13 countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void *)(*((void *)&v27 + 1) + 8 * i);
          uint64_t v19 = [v13 objectForKeyedSubscript:v18];
          id v20 = [[AppLedgerItem alloc] initWithDictionary:v19];
          if (v20) {
            [v12 setObject:v20 forKeyedSubscript:v18];
          }
        }
        id v15 = [v13 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }
      while (v15);
    }

    id v21 = [v12 copy];
    uint64_t v1 = v26;
  }
  else
  {
    id v21 = &__NSDictionary0__struct;
  }

LABEL_30:
  return v21;
}

void sub_1002D90A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1002D9150;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002D9150(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  id v3 = v2;
  if (v1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    id v5 = objc_alloc_init(_TtC9appstored6LogKey);
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = objc_opt_class();
      id v8 = v7;
      id v9 = [v3 componentsJoinedByString:@", "];
      int v16 = 138543874;
      id v17 = v7;
      __int16 v18 = 2114;
      uint64_t v19 = v5;
      __int16 v20 = 2114;
      id v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%{public}@] [%{public}@] Removing [%{public}@]", (uint8_t *)&v16, 0x20u);
    }
    id v10 = sub_1002D8C8C(v1);
    uint64_t v11 = +[NSMutableDictionary dictionaryWithDictionary:v10];

    uint64_t v12 = [v11 allKeys];
    id v13 = [v12 count];

    [v11 removeObjectsForKeys:v3];
    id v14 = [v11 allKeys];
    id v15 = [v14 count];

    if (v13 > v15) {
      sub_1002D9314(v1, v11, v5);
    }
  }
}

void sub_1002D9314(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  +[NSMutableDictionary dictionary];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  void v24[2] = sub_1002D972C;
  void v24[3] = &unk_100526798;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v25 = v6;
  [v5 enumerateKeysAndObjectsUsingBlock:v24];

  v32[0] = @"version";
  v32[1] = @"apps";
  v33[0] = &off_10054E340;
  v33[1] = v6;
  id v7 = +[NSDictionary dictionaryWithObjects:v33 forKeys:v32 count:2];
  id v8 = sub_1002D96C8();
  if (v8)
  {
    id v23 = 0;
    id v9 = +[NSPropertyListSerialization dataWithPropertyList:v7 format:200 options:0 error:&v23];
    id v10 = v23;
    uint64_t v11 = v10;
    if (!v9)
    {
      id v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = objc_opt_class();
        *(_DWORD *)long long buf = 138543874;
        long long v27 = v19;
        __int16 v28 = 2112;
        id v29 = v4;
        __int16 v30 = 2114;
        id v31 = v11;
        id v20 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%{public}@] [%@] Failed to serialize ledger. Error: %{public}@", buf, 0x20u);
      }
      goto LABEL_12;
    }
    id v22 = v10;
    unsigned __int8 v12 = [v9 writeToFile:v8 options:1 error:&v22];
    id v13 = v22;

    id v14 = ASDLogHandleForCategory();
    id v15 = v14;
    if (v12)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int v16 = objc_opt_class();
        *(_DWORD *)long long buf = 138543874;
        long long v27 = v16;
        __int16 v28 = 2112;
        id v29 = v4;
        __int16 v30 = 2112;
        id v31 = v8;
        id v17 = v16;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[%{public}@] [%@] Wrote the ledger to: %@", buf, 0x20u);
LABEL_16:
      }
    }
    else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v21 = objc_opt_class();
      *(_DWORD *)long long buf = 138543874;
      long long v27 = v21;
      __int16 v28 = 2112;
      id v29 = v4;
      __int16 v30 = 2114;
      id v31 = v13;
      id v17 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[%{public}@] [%@] Failed to write ledger. Error: %{public}@", buf, 0x20u);
      goto LABEL_16;
    }
    uint64_t v11 = v13;
LABEL_12:

    goto LABEL_13;
  }
  uint64_t v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    __int16 v18 = objc_opt_class();
    *(_DWORD *)long long buf = 138543618;
    long long v27 = v18;
    __int16 v28 = 2112;
    id v29 = v4;
    id v9 = v18;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%{public}@] [%@] Unable to generate the path in order to cache ledger", buf, 0x16u);
LABEL_13:
  }
}

id sub_1002D96C8()
{
  uint64_t v0 = sub_100013350();
  uint64_t v1 = [v0 stringByAppendingPathComponent:@"appledger.plist"];

  return v1;
}

id sub_1002D9724(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1002D972C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 dictionaryRepresentation];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

dispatch_queue_t sub_1002D97AC(const char *a1, dispatch_qos_class_t a2)
{
  id v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v5 = dispatch_queue_attr_make_with_qos_class(v4, a2, 0);
  dispatch_queue_t v6 = dispatch_queue_create(a1, v5);

  return v6;
}

id sub_1002D982C(id a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, int a7)
{
  id v13 = a4;
  id v14 = a5;
  if (a1 && a7 == 1)
  {
    a1 = [a1 initWithPhase:a2 terminalPhase:a3 bundleID:v13 itemID:v14 appType:a6 installType:1];
    id v15 = a1;
  }
  else
  {
    id v15 = 0;
  }

  return v15;
}

id sub_1002D98D8()
{
  self;
  if (qword_1005B0E60 != -1) {
    dispatch_once(&qword_1005B0E60, &stru_1005267B8);
  }
  uint64_t v0 = (void *)qword_1005B0E58;
  return v0;
}

void sub_1002D9930(id a1)
{
  uint64_t v1 = objc_alloc_init(OcelotService);
  id v2 = (void *)qword_1005B0E58;
  qword_1005B0E58 = (uint64_t)v1;
}

void sub_1002DAD34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  if (*(void *)(a1 + 40))
  {
    id v17 = v7;
    id v8 = [a2 firstObject];
    id v9 = v8;
    if (v8)
    {
      if ([v8 isTrialPeriod]) {
        CFStringRef v10 = @"Free Trial";
      }
      else {
        CFStringRef v10 = @"Paid";
      }
      [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"fsEntitlementsState"];
      uint64_t v11 = [v9 appAdamID];
      [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"fsEntitlementsAdamID"];

      unsigned __int8 v12 = [v9 offerID];
      [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"fsEntitlementsOfferID"];
    }
    uint64_t v15 = a1 + 32;
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v15 + 8);
    int v16 = ASDErrorWithSafeUserInfo();
    (*(void (**)(uint64_t, uint64_t, void *))(v14 + 16))(v14, v13, v16);

    id v7 = v17;
  }
}

void *sub_1002DB0E0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)RescueAbandonedPlaceholderOperation;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

void *sub_1002DB15C(void *result, void *a2)
{
  if (result)
  {
    id v2 = result;
    id v3 = a2;
    [v2 lock];
    id v4 = [v3 copy];

    id v5 = (void *)v2[6];
    v2[6] = v4;

    return [v2 unlock];
  }
  return result;
}

id *sub_1002DB844(id *a1, void *a2, void *a3, char a4)
{
  id v8 = a2;
  id v9 = a3;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)UpdatesTask;
    a1 = (id *)objc_msgSendSuper2(&v14, "init");
    if (a1)
    {
      CFStringRef v10 = v8;
      if (!v8)
      {
        id v4 = +[ACAccountStore ams_sharedAccountStore];
        CFStringRef v10 = objc_msgSend(v4, "ams_activeiTunesAccount");
      }
      objc_storeStrong(a1 + 5, v10);
      if (!v8)
      {
      }
      objc_storeStrong(a1 + 6, a3);
      *((unsigned char *)a1 + 56) = a4;
      uint64_t v11 = objc_alloc_init(_TtC9appstored6LogKey);
      id v12 = a1[8];
      a1[8] = v11;
    }
  }

  return a1;
}

id sub_1002DC1F8(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(id *)(a1 + 16);
    if (sub_1002F1FD4(v1))
    {
      id v2 = +[NSMutableString stringWithString:@"https://"];
      [v2 appendString:v1];
      [v2 appendString:@"/.well-known/skadnetwork/get-signed-payload"];
    }
    else
    {
      id v3 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v5 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "SKAdNetwork: adNetworkRegistrableDomain is not in eTLD+1 format", v5, 2u);
      }

      id v2 = 0;
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void *sub_1002DC2DC(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_opt_new();
    if (v1[5] && ASDInstallAttributionVersionCreateFromString() >= 400)
    {
      [v2 setObject:v1[1] forKeyedSubscript:@"adam-id"];
      [v2 setObject:v1[3] forKeyedSubscript:@"web-impression-id"];
      [v2 setObject:v1[4] forKeyedSubscript:@"source-domain"];
      [v2 setObject:v1[6] forKeyedSubscript:@"timestamp"];
      [v2 setObject:v1[5] forKeyedSubscript:@"version"];
      id v1 = v2;
    }
    else
    {
      id v1 = 0;
    }
  }
  return v1;
}

uint64_t sub_1002DC3B0(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 56) = a2;
  }
  return result;
}

id sub_1002DC7F8(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v5.receiver = a1;
    v5.super_class = (Class)PushDiagnostic;
    a1 = objc_msgSendSuper2(&v5, "init");
    if (a1) {
      sub_10035E550((uint64_t)v3, a1, 99);
    }
  }

  return a1;
}

id sub_1002DC980()
{
  self;
  if (qword_1005B0E70 != -1) {
    dispatch_once(&qword_1005B0E70, &stru_100526808);
  }
  uint64_t v0 = (void *)qword_1005B0E68;
  return v0;
}

void sub_1002DC9D8(id a1)
{
  id v1 = objc_alloc_init(XDCDeviceManager);
  id v2 = (void *)qword_1005B0E68;
  qword_1005B0E68 = (uint64_t)v1;
}

id sub_1002DCAAC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = 0;
    dispatch_queue_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_1000180E8;
    id v9 = sub_100017C30;
    id v10 = 0;
    id v1 = *(NSObject **)(a1 + 16);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1002DCBA8;
    v4[3] = &unk_100524F38;
    void v4[4] = a1;
    void v4[5] = &v5;
    dispatch_sync(v1, v4);
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_1002DCBA8(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 32) + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1002DCC24;
  void v3[3] = &unk_100526830;
  v3[4] = *(void *)(a1 + 40);
  return [v1 enumerateKeysAndObjectsUsingBlock:v3];
}

void sub_1002DCC24(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v7 = a3;
  if (v7 && (v7[16] & 1) != 0)
  {
    id v8 = v7;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
    uint64_t v7 = v8;
    *a4 = 1;
  }
}

void *sub_1002DCCA0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x3032000000;
    uint64_t v13 = sub_1000180E8;
    objc_super v14 = sub_100017C30;
    id v15 = 0;
    uint64_t v5 = a1[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002DCDC0;
    block[3] = &unk_100521288;
    id v9 = &v10;
    void block[4] = a1;
    id v8 = v3;
    dispatch_sync(v5, block);
    a1 = (id)v11[5];

    _Block_object_dispose(&v10, 8);
  }

  return a1;
}

void sub_1002DCDC0(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void *sub_1002DCE10(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (a1)
  {
    uint64_t v15 = 0;
    int v16 = &v15;
    uint64_t v17 = 0x3032000000;
    __int16 v18 = sub_1000180E8;
    uint64_t v19 = sub_100017C30;
    id v20 = 0;
    id v8 = a1[2];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002DCF54;
    void v10[3] = &unk_100526858;
    id v11 = v6;
    uint64_t v13 = a1;
    objc_super v14 = &v15;
    id v12 = v5;
    dispatch_sync(v8, v10);
    a1 = (id)v16[5];

    _Block_object_dispose(&v15, 8);
  }

  return a1;
}

void sub_1002DCF54(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) deviceForFromID:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = IDSCopyIDForDevice();
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = [*(id *)(*(void *)(a1 + 48) + 8) objectForKeyedSubscript:v3];
      uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;

      if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
      {
        id v8 = sub_1003038E4([XDCDevice alloc], v2);
        uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
        uint64_t v10 = *(void **)(v9 + 40);
        *(void *)(v9 + 40) = v8;

        [*(id *)(*(void *)(a1 + 48) + 8) setObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) forKeyedSubscript:v4];
      }
    }
    else
    {
      id v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = 138543362;
        objc_super v14 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Device has no destination ID: %{public}@", (uint8_t *)&v13, 0xCu);
      }

      id v4 = 0;
    }
  }
  else
  {
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v11 = *(void **)(a1 + 40);
      int v13 = 138543362;
      objc_super v14 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Device not found for from ID: %{public}@", (uint8_t *)&v13, 0xCu);
    }
  }
}

void *sub_1002DD110(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v13 = 0;
    objc_super v14 = &v13;
    uint64_t v15 = 0x3032000000;
    int v16 = sub_1000180E8;
    uint64_t v17 = sub_100017C30;
    id v18 = 0;
    uint64_t v5 = a1[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002DD2DC;
    block[3] = &unk_1005212B0;
    void block[4] = a1;
    id v6 = v3;
    id v11 = v6;
    id v12 = &v13;
    dispatch_sync(v5, block);
    uint64_t v7 = (void *)v14[5];
    if (!v7)
    {
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Unable to find device with ID: %{public}@", buf, 0xCu);
      }

      uint64_t v7 = (void *)v14[5];
    }
    a1 = v7;

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_1002DD2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002DD2DC(void *a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1[4] + 8), "objectEnumerator", 0);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(id **)(*((void *)&v10 + 1) + 8 * i);
        id v8 = sub_100303B70(v7);
        unsigned int v9 = [v8 isEqual:a1[5]];

        if (v9)
        {
          objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v7);
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1002DD41C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1002DD4C0;
    v6[3] = &unk_1005218C0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_1002DD4C0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        unsigned int v9 = (void *)IDSCopyIDForDevice();
        if (v9)
        {
          [v2 addObject:v9];
          uint64_t v10 = [*(id *)(*(void *)(a1 + 40) + 8) objectForKeyedSubscript:v9];
          if (v10)
          {
            long long v11 = v10;
            sub_100303A94(v10, v8);
          }
          else
          {
            long long v11 = sub_1003038E4([XDCDevice alloc], v8);
            [*(id *)(*(void *)(a1 + 40) + 8) setObject:v11 forKeyedSubscript:v9];
          }
        }
        else
        {
          long long v11 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543362;
            id v21 = v8;
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Skipping device with no destination ID: %{public}@", buf, 0xCu);
          }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v5);
  }

  long long v12 = *(void **)(*(void *)(a1 + 40) + 8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1002DD710;
  void v14[3] = &unk_100526880;
  id v15 = v2;
  id v13 = v2;
  [v12 enumerateKeysAndObjectsUsingBlock:v14];
}

void sub_1002DD710(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3;
  unsigned __int8 v5 = [*(id *)(a1 + 32) containsObject:a2];
  if (v6 && (v5 & 1) == 0)
  {
    v6[8] = 0;
    *((unsigned char *)v6 + 19) = 1;
  }
}

id sub_1002DD7BC()
{
  self;
  if (qword_1005B0E80 != -1) {
    dispatch_once(&qword_1005B0E80, &stru_1005268A0);
  }
  uint64_t v0 = (void *)qword_1005B0E78;
  return v0;
}

void sub_1002DD814(id a1)
{
  id v1 = objc_alloc_init(PersonalizationService);
  id v2 = (void *)qword_1005B0E78;
  qword_1005B0E78 = (uint64_t)v1;
}

id sub_1002DE9BC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init((Class)NWParameters);
  [v3 setSourceApplicationWithBundleID:v2];

  id v4 = v3;
  self;
  id v5 = [objc_alloc((Class)NWPathEvaluator) initWithEndpoint:0 parameters:v4];

  uint64_t v6 = [v5 path];

  return v6;
}

uint64_t sub_1002DEA74(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  self;
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = qword_1004A0E80[v2];
    if ([v1 usesInterfaceType:v3]) {
      break;
    }
    if (++v2 == 4)
    {
      uint64_t v3 = 0;
      break;
    }
  }

  return v3;
}

void sub_1002DF9A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

char *sub_1002DF9CC(char *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = sub_1003F4058();
    uint64_t v3 = v2;
    if (v2)
    {
      id v1 = (char *)[v2 BOOLValue];
    }
    else
    {
      id v4 = sub_10030BB1C(*(void *)(v1 + 66), @"install-attribution-should-use-proxy", @"false");
      id v5 = v4;
      if (v4) {
        id v1 = (char *)[v4 isEqualToString:@"true"];
      }
      else {
        id v1 = 0;
      }
    }
  }
  return v1;
}

void sub_1002DFA74(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  if (!v9)
  {
    id v51 = 0;
    __int16 v40 = +[NSJSONSerialization JSONObjectWithData:v7 options:4 error:&v51];
    id v12 = v51;
    if (v12)
    {
      id v13 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v55) = 138543362;
        *(void *)((char *)&v55 + 4) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "SKAdNetwork: web impression fetch failed to deserialize response with error: %{public}@", (uint8_t *)&v55, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      goto LABEL_50;
    }
    if (!v40)
    {
      id v31 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v55) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "SKAdNetwork: web impression fetch failed to deserialize response.", (uint8_t *)&v55, 2u);
      }

      uint64_t v32 = *(void *)(a1 + 32);
      double v33 = ASDErrorWithDescription();
      (*(void (**)(uint64_t, void *))(v32 + 16))(v32, v33);

      goto LABEL_50;
    }
    id obj = sub_10027002C((uint64_t)InstallAttributionParams, v40);
    objc_super v14 = *(void **)(WeakRetained + 50);
    if (v14) {
      objc_super v14 = (void *)v14[3];
    }
    id v15 = v14;
    sub_100263C08((uint64_t)obj, v15);

    long long v16 = *(void **)(WeakRetained + 50);
    if (v16) {
      long long v16 = (void *)v16[6];
    }
    long long v17 = v16;
    sub_10027030C((uint64_t)obj, v17);

    if (sub_100270234((uint64_t)obj))
    {
      long long v18 = obj;
      if (obj) {
        long long v18 = (void *)obj[8];
      }
      id v19 = v18;
      unsigned int v20 = sub_1002F1FD4(v19);

      if (v20)
      {
        id v21 = obj;
        if (obj) {
          id v21 = (void *)obj[8];
        }
        id v22 = v21;
        id v23 = *(void **)(WeakRetained + 50);
        if (v23) {
          id v23 = (void *)v23[4];
        }
        id v24 = v23;
        unsigned __int8 v25 = [v22 isEqualToString:v24];

        if (v25)
        {
          uint64_t v47 = 0;
          long long v48 = &v47;
          uint64_t v49 = 0x2020000000;
          char v50 = 0;
          *(void *)&long long v55 = 0;
          *((void *)&v55 + 1) = &v55;
          uint64_t v56 = 0x3032000000;
          id v57 = sub_1000180F8;
          unint64_t v58 = sub_100017C38;
          id v59 = 0;
          uint64_t v26 = *(void **)(WeakRetained + 58);
          v43[0] = _NSConcreteStackBlock;
          v43[1] = 3221225472;
          v43[2] = sub_1002E02A0;
          v43[3] = &unk_100524E50;
          NSErrorUserInfoKey v45 = &v47;
          id v44 = obj;
          uint64_t v46 = &v55;
          [v26 modifyUsingTransaction:v43];
          if (!*((unsigned char *)v48 + 24))
          {
            __int16 v37 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              uint64_t v38 = *(void *)(*((void *)&v55 + 1) + 40);
              LODWORD(buf) = 138543362;
              *(void *)((char *)&buf + 4) = v38;
              _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "SKAdNetwork: Failed to add web impression with error:%{public}@", (uint8_t *)&buf, 0xCu);
            }

            (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
            goto LABEL_48;
          }
          objc_storeStrong((id *)(WeakRetained + 42), obj);
          long long v27 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "SKAdNetwork: Successfully fetched and added web impression.", (uint8_t *)&buf, 2u);
          }

          *(void *)&long long buf = 0;
          *((void *)&buf + 1) = &buf;
          uint64_t v53 = 0x2020000000;
          char v54 = 0;
          __int16 v28 = *(void **)(WeakRetained + 58);
          v42[0] = _NSConcreteStackBlock;
          v42[1] = 3221225472;
          void v42[2] = sub_1002E031C;
          void v42[3] = &unk_1005268D0;
          v42[4] = WeakRetained;
          v42[5] = &buf;
          [v28 modifyUsingTransaction:v42];
          if (*(unsigned char *)(*((void *)&buf + 1) + 24))
          {
            id v29 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)id v41 = 0;
              __int16 v30 = "SKAdNetwork: Cleaned stub impression";
LABEL_46:
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v30, v41, 2u);
            }
          }
          else
          {
            id v29 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)id v41 = 0;
              __int16 v30 = "SKAdNetwork: Failed to clean stub impression";
              goto LABEL_46;
            }
          }

          (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
          _Block_object_dispose(&buf, 8);
LABEL_48:

          _Block_object_dispose(&v55, 8);
          _Block_object_dispose(&v47, 8);
          goto LABEL_49;
        }
        id v34 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v55) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "SKAdNetwork: Source domain mismatch.", (uint8_t *)&v55, 2u);
        }
      }
      else
      {
        id v34 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v55) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "SKAdNetwork: Source domain is invalid.", (uint8_t *)&v55, 2u);
        }
      }
    }
    else
    {
      id v34 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v55) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "SKAdNetwork: web impression returned is missing crucial fields.", (uint8_t *)&v55, 2u);
      }
    }

    uint64_t v35 = *(void *)(a1 + 32);
    id v36 = ASDErrorWithDescription();
    (*(void (**)(uint64_t, void *))(v35 + 16))(v35, v36);

LABEL_49:
LABEL_50:

    goto LABEL_51;
  }
  long long v11 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v55) = 138543362;
    *(void *)((char *)&v55 + 4) = v9;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "SKAdNetwork: web impression fetch failed with error: %{public}@", (uint8_t *)&v55, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_51:
}

void sub_1002E0250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E02A0(void *a1, BOOL a2)
{
  id v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  BOOL v6 = sub_100344100(a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

uint64_t sub_1002E031C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 50);
  id v4 = a2;
  if (v3) {
    uint64_t v5 = *(void **)(v3 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;
  id v7 = *(void **)(*(void *)(a1 + 32) + 50);
  if (v7) {
    id v7 = (void *)v7[4];
  }
  id v8 = v7;
  unsigned __int8 v9 = sub_100344B60(v4, v6, v8);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v9;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1002E04E4(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSUserDefaults standardUserDefaults];
  [v3 setInteger:a2 forKey:@"ODRSimulatedDownloadsBandwidthKey"];

  id v4 = +[NSUserDefaults standardUserDefaults];
  [v4 synchronize];
}

id sub_1002E0568()
{
  self;
  uint64_t v0 = +[NSUserDefaults standardUserDefaults];
  id v1 = [v0 integerForKey:@"ODRSimulatedDownloadsBandwidthKey"];

  return v1;
}

id sub_1002E1588(void *a1)
{
  id v1 = [a1 objectForKey:@"contentRatingsBySystem"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = [v1 objectForKey:@"appsApple"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      goto LABEL_5;
    }
  }
  uint64_t v2 = 0;
LABEL_5:

  return v2;
}

void sub_1002E1984(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_3;
  }
  uint64_t v16 = 0;
  long long v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  uint64_t v2 = sub_10038F000();
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = sub_1002E5E78;
  id v21 = &unk_1005269E8;
  id v22 = &v16;
  [v2 readUsingSession:buf];

  uint64_t v3 = v17[3];
  _Block_object_dispose(&v16, 8);
  if (!v3)
  {
LABEL_3:
    id v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = objc_opt_class();
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v6;
      id v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Metrics coordinator initializing app metadata", buf, 0x16u);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      sub_1002E6444(v8, 0, *(void **)(a1 + 40));
    }
  }
  unsigned __int8 v9 = sub_1002E1C14((uint64_t)MetricsCoordinator, 6);
  if (!v9)
  {
    sub_1002E1C68((uint64_t)MetricsCoordinator, 6);
    unsigned __int8 v9 = sub_1002E1C14((uint64_t)MetricsCoordinator, 6);
    uint64_t v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      long long v11 = objc_opt_class();
      uint64_t v12 = *(void *)(a1 + 40);
      id v13 = v11;
      if (v9)
      {
        [v9 timeIntervalSince1970];
        uint64_t v15 = (uint64_t)v14;
      }
      else
      {
        uint64_t v15 = 0;
      }
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v12;
      *(_WORD *)&unsigned char buf[22] = 2048;
      id v21 = (void *)v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Metrics coordinator first time recording events. Setting the start time as %{time_t}ld", buf, 0x20u);
    }
  }
}

void sub_1002E1BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__CFString *sub_1002E1C14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  id v4 = sub_1002E1EFC(v3, a2);
  if (v4)
  {
    sub_1003F1EF8((uint64_t)AppDefaultsManager, v4);
    id v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

void sub_1002E1C68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  id v4 = sub_1002E1E2C(v3, a2);
  if (v4)
  {
    CFStringRef v5 = v4;
    id v6 = +[NSDate date];
    sub_1003F2074((uint64_t)AppDefaultsManager, v6, v5);
  }
}

id sub_1002E1CF4()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002E1D98;
  block[3] = &unk_100521BF0;
  void block[4] = self;
  if (qword_1005B0E90 != -1) {
    dispatch_once(&qword_1005B0E90, block);
  }
  uint64_t v0 = (void *)qword_1005B0E88;
  return v0;
}

void sub_1002E1D98(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1005B0E88;
  qword_1005B0E88 = (uint64_t)v1;
}

__CFString *sub_1002E1DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  uint64_t result = sub_1002E1E2C(v3, a2);
  if (result)
  {
    return (__CFString *)sub_1003F2074((uint64_t)AppDefaultsManager, 0, result);
  }
  return result;
}

__CFString *sub_1002E1E2C(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) > 5) {
    return 0;
  }
  else {
    return off_100526AF8[a2 - 1];
  }
}

void sub_1002E1E70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  id v4 = sub_1002E1EFC(v3, a2);
  if (v4)
  {
    CFStringRef v5 = v4;
    id v6 = +[NSDate date];
    sub_1003F2074((uint64_t)AppDefaultsManager, v6, v5);
  }
}

__CFString *sub_1002E1EFC(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) > 5) {
    return 0;
  }
  else {
    return off_100526B28[a2 - 1];
  }
}

__CFString *sub_1002E1F40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  id v4 = sub_1002E1E2C(v3, a2);
  if (v4)
  {
    sub_1003F1EF8((uint64_t)AppDefaultsManager, v4);
    id v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

id sub_1002E1F94(uint64_t a1)
{
  if (a1)
  {
    id v1 = +[NSMutableDictionary dictionary];
    uint64_t v2 = sub_10038F000();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1002E2068;
    v5[3] = &unk_100522558;
    id v3 = v1;
    id v6 = v3;
    [v2 readUsingSession:v5];
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_1002E2068(uint64_t a1, void *a2)
{
  id v3 = [a2 connection];
  id v4 = sub_1002FF548((uint64_t)AppMetadataEntity, v3, 0);

  CFStringRef v5 = +[AppMetadataEntity defaultProperties];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002E214C;
  v6[3] = &unk_1005213B0;
  id v7 = *(id *)(a1 + 32);
  [v4 enumerateMemoryEntitiesWithProperties:v5 usingBlock:v6];
}

void sub_1002E214C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = sub_1003A3938(v4);
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKey:v3];
  }
}

void sub_1002E21B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (a1)
  {
    unsigned __int8 v9 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002E2270;
    void v10[3] = &unk_100526920;
    void v10[4] = a1;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

void sub_1002E2270(void *a1)
{
  uint64_t v19 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsCoordinator.getEvents"];
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v4 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v6 = a1[4];
  CFStringRef v5 = (void *)a1[5];
  id v7 = v2;
  uint64_t v8 = v5;
  if (v6)
  {
    sub_1002E264C(v6, v7, v3);
    sub_1002E5F04(v4);
    unsigned __int8 v9 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = v9;
    if (v9 && [v9 shouldCollectMetrics])
    {
      objc_setProperty_nonatomic_copy(v10, v11, *(id *)(v6 + 8), 24);
      objc_setProperty_nonatomic_copy(v10, v12, v7, 32);
      uint64_t v13 = sub_1002E1F94(v6);
      objc_storeStrong(v10 + 5, v13);

      id v20 = 0;
      double v14 = [v10 getAppEventsWithError:&v20];
      id v15 = v20;
      if (v8) {
        v8[2](v8, v14, v15);
      }
    }
    else if (v8)
    {
      self;
      if ((unint64_t)(v4 - 1) > 4) {
        CFStringRef v16 = @"None";
      }
      else {
        CFStringRef v16 = off_100526B78[v4 - 1];
      }
      long long v17 = +[NSString stringWithFormat:@"Handler not found for type: %@", v16];
      uint64_t v18 = ASDErrorWithTitleAndMessage();
      v8[2](v8, 0, v18);
    }
  }
}

void sub_1002E2474(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002E2520;
    block[3] = &unk_100525408;
    void block[4] = a1;
    id v9 = v5;
    uint64_t v10 = a3;
    dispatch_async(v7, block);
  }
}

void sub_1002E2520(uint64_t *a1)
{
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v3 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = a1[5];
    int v7 = 138543874;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v2;
    __int16 v11 = 2114;
    uint64_t v12 = v5;
    id v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] May be uninstalled", (uint8_t *)&v7, 0x20u);
  }
  sub_1002E264C(a1[4], v2, a1[6]);
  sub_1002E35D4((id *)a1[4], 2, v2, a1[6]);
  sub_1002E35D4((id *)a1[4], 5, v2, a1[6]);
}

void sub_1002E264C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  if (a1)
  {
    char v5 = sub_100390AD0();
    id v118 = sub_1002E1F94(a1);
    id v6 = sub_1002E1C14((uint64_t)MetricsCoordinator, 6);
    id v121 = +[NSDate now];
    int v7 = ASDLogHandleForCategory();
    id v120 = v6;
    uint64_t v127 = a1;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_opt_class();
      id v9 = v8;
      if (v6)
      {
        [v6 timeIntervalSince1970];
        id v6 = (uint64_t)v10;
      }
      if (v121)
      {
        [v121 timeIntervalSince1970];
        uint64_t v12 = (uint64_t)v11;
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v13 = sub_1002E62DC((uint64_t)MetricsCoordinator, a3);
      *(_DWORD *)long long buf = 138544386;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v4;
      *(_WORD *)&unsigned char buf[22] = 2048;
      id v148 = v6;
      *(_WORD *)id v149 = 2048;
      *(void *)&v149[2] = v12;
      *(_WORD *)&v149[10] = 2114;
      *(void *)&v149[12] = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Record launches checking for launches from: %{time_t}ld to %{time_t}ld sourceType: %{public}@", buf, 0x34u);

      id v6 = v120;
    }

    id v122 = +[NSMutableArray array];
    __int16 v125 = +[NSMutableArray array];
    double v14 = +[NSMutableDictionary dictionary];
    id v15 = sub_10038F000();
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1002E5D10;
    id v148 = &unk_100522558;
    id v16 = v14;
    *(void *)id v149 = v16;
    [v15 readUsingSession:buf];

    id v128 = +[NSMutableSet set];
    uint64_t v123 = v16;
    if ([v16 count])
    {
      long long v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = objc_opt_class();
        id v19 = v18;
        id v20 = [v123 allValues];
        id v21 = [v20 componentsJoinedByString:@", "];
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v4;
        *(_WORD *)&unsigned char buf[22] = 2114;
        id v148 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Previously active launches: %{public}@", buf, 0x20u);
      }
    }
    id v137 = 0;
    id v22 = sub_10039058C((uint64_t)LaunchCoordinator, v5, v6, v121, v123, &v137);
    id v23 = v137;
    id v24 = sub_100390B54((uint64_t)LaunchCoordinator, v22);

    if (v23)
    {
      unsigned __int8 v25 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        id v115 = objc_opt_class();
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v115;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v4;
        *(_WORD *)&unsigned char buf[22] = 2114;
        id v148 = v23;
        id v116 = v115;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "[%{public}@/%@] Failed to lookup launches with error: %{public}@", buf, 0x20u);
      }
    }
    id v117 = v23;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    id obj = v24;
    id v26 = [obj countByEnumeratingWithState:&v133 objects:v146 count:16];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v134;
      do
      {
        for (uint64_t i = 0; i != v27; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v134 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v30 = *(void *)(*((void *)&v133 + 1) + 8 * i);
          if (v30
            && ((uint64_t v31 = *(id *)(v30 + 40)) != 0
             || (uint64_t v31 = *(id *)(v30 + 128)) != 0))
          {
            id v32 = *(id *)(v30 + 16);
            if (!v32 || (int v33 = *(unsigned __int8 *)(v30 + 9), v32, !v33))
            {
              __int16 v40 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                id v41 = objc_opt_class();
                *(_DWORD *)long long buf = 138543874;
                *(void *)&uint8_t buf[4] = v41;
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&buf[14] = v4;
                *(_WORD *)&unsigned char buf[22] = 2114;
                id v148 = v31;
                id v42 = v41;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] Skipping active launch", buf, 0x20u);
              }
              unint64_t v39 = v125;
              goto LABEL_33;
            }
            id v34 = [v123 objectForKeyedSubscript:v31];

            if (v34) {
              [v128 addObject:v31];
            }
            id v35 = *(id *)(v30 + 16);
            id v36 = *(id *)(v30 + 24);
            [v35 timeIntervalSinceDate:v36];
            double v38 = v37;

            if (v38 > 1.0)
            {
              unint64_t v39 = v122;
LABEL_33:
              [v39 addObject:v30];
              goto LABEL_39;
            }
            id v43 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              id v44 = objc_opt_class();
              id v45 = v44;
              uint64_t v46 = *(id *)(v30 + 40);
              *(_DWORD *)long long buf = 138543874;
              *(void *)&uint8_t buf[4] = v44;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v4;
              *(_WORD *)&unsigned char buf[22] = 2114;
              id v148 = v46;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] Skipping too short event launch", buf, 0x20u);
            }
          }
          else
          {
            uint64_t v31 = ASDLogHandleForCategory();
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_39;
            }
            uint64_t v47 = objc_opt_class();
            *(_DWORD *)long long buf = 138543874;
            *(void *)&uint8_t buf[4] = v47;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v4;
            *(_WORD *)&unsigned char buf[22] = 2114;
            id v148 = v30;
            id v43 = v47;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] Skipping bundle / containingBundleID-less launch", buf, 0x20u);
          }

LABEL_39:
        }
        id v27 = [obj countByEnumeratingWithState:&v133 objects:v146 count:16];
      }
      while (v27);
    }

    if ([v125 count])
    {
      long long v48 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v49 = objc_opt_class();
        id v50 = v49;
        id v51 = [v125 componentsJoinedByString:@", "];
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v49;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v4;
        *(_WORD *)&unsigned char buf[22] = 2114;
        id v148 = v51;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Saving active launches: %{public}@", buf, 0x20u);
      }
      id v124 = v4;

      id v52 = v125;
      uint64_t v53 = +[NSMutableArray array];
      long long v141 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      long long v144 = 0u;
      id v54 = v52;
      id v55 = [v54 countByEnumeratingWithState:&v141 objects:buf count:16];
      if (v55)
      {
        id v56 = v55;
        uint64_t v57 = *(void *)v142;
        do
        {
          for (uint64_t j = 0; j != v56; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v142 != v57) {
              objc_enumerationMutation(v54);
            }
            uint64_t v59 = *(void *)(*((void *)&v141 + 1) + 8 * (void)j);
            if (v59)
            {
              unsigned int v60 = *(_DWORD *)(v59 + 12) - 4;
              if (v60 <= 2)
              {
                id v61 = sub_1003AC668([LaunchEvent alloc], (v60 + 5));
                id v62 = *(id *)(v59 + 24);
                if (v61) {
                  [v61 setValue:v62 forProperty:@"launch_start_time"];
                }

                sub_1003ACF18(v61, *(unsigned __int8 *)(v59 + 8));
                id v63 = *(id *)(v59 + 40);
                if (v61) {
                  [v61 setValue:v63 forProperty:@"bundle_id"];
                }

                id v64 = *(id *)(v59 + 32);
                sub_1003ACF88(v61, v64);

                [v53 addObject:v61];
              }
            }
          }
          id v56 = [v54 countByEnumeratingWithState:&v141 objects:buf count:16];
        }
        while (v56);
      }

      if ([v53 count])
      {
        uint64_t v65 = sub_10038F000();
        v138[0] = _NSConcreteStackBlock;
        v138[1] = 3221225472;
        v138[2] = sub_1002E6324;
        v138[3] = &unk_1005228E8;
        id v139 = v53;
        uint64_t v140 = v127;
        [v65 modifyUsingTransaction:v138];
      }
      id v4 = v124;
    }
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    id v66 = [v123 allValues];
    id v67 = [v66 countByEnumeratingWithState:&v129 objects:v145 count:16];
    long long v68 = v128;
    if (v67)
    {
      id v69 = v67;
      uint64_t v70 = *(void *)v130;
      do
      {
        id v71 = 0;
        do
        {
          if (*(void *)v130 != v70) {
            objc_enumerationMutation(v66);
          }
          uint64_t v72 = *(id **)(*((void *)&v129 + 1) + 8 * (void)v71);
          if (v72) {
            id v73 = v72[5];
          }
          else {
            id v73 = 0;
          }
          id v74 = v73;
          if (([v68 containsObject:v74] & 1) == 0)
          {
            if (v72 && (id v75 = v72[3]) != 0)
            {
              long long v76 = v75;
              [v75 timeIntervalSinceDate:*(void *)(v127 + 24)];
              double v78 = v77;

              long long v68 = v128;
              if (v78 >= 0.0) {
                goto LABEL_78;
              }
              __int16 v79 = ASDLogHandleForCategory();
              if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
              {
                id v80 = objc_opt_class();
                __int16 v81 = *(void **)(v127 + 24);
                id v82 = v80;
                if (v81)
                {
                  [v81 timeIntervalSince1970];
                  uint64_t v84 = (uint64_t)v83;
                }
                else
                {
                  uint64_t v84 = 0;
                }
                *(_DWORD *)long long buf = 138544130;
                *(void *)&uint8_t buf[4] = v80;
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&buf[14] = v4;
                *(_WORD *)&unsigned char buf[22] = 2114;
                id v148 = v72;
                *(_WORD *)id v149 = 2048;
                *(void *)&v149[2] = v84;
                _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Removing active launch: %{public}@ that occurred before the system up date: %{time_t}ld", buf, 0x2Au);

                long long v68 = v128;
              }

              id v74 = v72[5];
              [v68 addObject:v74];
            }
            else
            {
              long long v68 = v128;
            }
          }

LABEL_78:
          id v71 = (char *)v71 + 1;
        }
        while (v69 != v71);
        id v85 = [v66 countByEnumeratingWithState:&v129 objects:v145 count:16];
        id v69 = v85;
      }
      while (v85);
    }

    if ([v68 count])
    {
      id v86 = [v68 allObjects];
      id v87 = v4;
      __int16 v88 = sub_10038F000();
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1002E694C;
      id v148 = &unk_100526A38;
      id v89 = v86;
      *(void *)id v149 = v89;
      *(void *)&v149[8] = v127;
      id v90 = v87;
      *(void *)&v149[16] = v90;
      [v88 modifyUsingTransaction:buf];
    }
    if ([v122 count])
    {
      id v91 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
      {
        id v92 = objc_opt_class();
        id v93 = v92;
        id v94 = [v122 count];
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v92;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v4;
        *(_WORD *)&unsigned char buf[22] = 2048;
        id v148 = v94;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "[%{public}@/%@] Discovered %ld launch(s)", buf, 0x20u);
      }
      id v95 = [v122 copy];
      id v96 = objc_alloc_init(CrossfireMetricsHandler);
      p_isa = (id *)&v96->super.super.isa;
      if (v96 && [(CrossfireMetricsHandler *)v96 shouldCollectMetrics])
      {
        objc_setProperty_nonatomic_copy(p_isa, v98, v4, 32);
        objc_storeStrong(p_isa + 5, v118);
        [p_isa recordLaunches:v95];
      }
      __int16 v99 = objc_alloc_init(ArcadePayoutMetricsHandler);
      CFStringRef v100 = (id *)&v99->super.super.isa;
      if (v99 && [(ArcadePayoutMetricsHandler *)v99 shouldCollectMetrics])
      {
        objc_setProperty_nonatomic_copy(v100, v101, v4, 32);
        objc_storeStrong(v100 + 5, v118);
        [v100 recordLaunches:v95];
      }
      id v102 = objc_alloc_init(ArcadeMetricsHandler);
      id v103 = (id *)&v102->super.super.isa;
      if (v102 && [(ArcadeMetricsHandler *)v102 shouldCollectMetrics])
      {
        objc_setProperty_nonatomic_copy(v103, v104, v4, 32);
        objc_storeStrong(v103 + 5, v118);
        [v103 recordLaunches:v95];
      }
      uint64_t v105 = objc_alloc_init(DNUMetricsHandler);
      long long v106 = (id *)&v105->super.super.isa;
      if (v105 && [(DNUMetricsHandler *)v105 shouldCollectMetrics])
      {
        objc_setProperty_nonatomic_copy(v106, v107, v4, 32);
        objc_storeStrong(v106 + 5, v118);
        [v106 recordLaunches:v95];
      }
      SEL v108 = objc_alloc_init(ODPMetricsHandler);
      id v109 = (id *)&v108->super.super.isa;
      if (v108 && [(ODPMetricsHandler *)v108 shouldCollectMetrics])
      {
        objc_setProperty_nonatomic_copy(v109, v110, v4, 32);
        objc_storeStrong(v109 + 5, v118);
        [v109 recordLaunches:v95];
      }

      long long v68 = v128;
    }
    sub_1002E1C68((uint64_t)MetricsCoordinator, 6);
    id v111 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      id v112 = objc_opt_class();
      id v113 = v112;
      id v114 = sub_1002E62DC((uint64_t)MetricsCoordinator, a3);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v112;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v4;
      *(_WORD *)&unsigned char buf[22] = 2114;
      id v148 = v114;
      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Record launches complete for sourceType: %{public}@", buf, 0x20u);

      long long v68 = v128;
    }
  }
}

void sub_1002E35D4(id *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a1)
  {
    uint64_t v8 = sub_1002E3C0C(a1, a2, v7);
    id v9 = v8;
    if (v8 && [v8 shouldCollectMetrics])
    {
      if (a2 == 5)
      {
        objc_setProperty_nonatomic_copy(v9, v10, a1[1], 24);
        double v11 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = objc_opt_class();
          id v13 = v12;
          self;
          id v14 = a1[1];
          id v15 = sub_1002E62DC((uint64_t)MetricsCoordinator, a4);
          int v20 = 138544386;
          id v21 = v12;
          __int16 v22 = 2112;
          id v23 = v7;
          __int16 v24 = 2114;
          CFStringRef v25 = @"ODP";
          __int16 v26 = 2114;
          id v27 = v14;
          __int16 v28 = 2114;
          id v29 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] Recording supplemental metrics with activeAccountID: %{public}@ sourceType: %{public}@", (uint8_t *)&v20, 0x34u);
        }
      }
      else
      {
        double v11 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          id v16 = objc_opt_class();
          id v17 = v16;
          self;
          if ((unint64_t)(a2 - 1) > 3) {
            CFStringRef v18 = @"None";
          }
          else {
            CFStringRef v18 = off_100526B58[a2 - 1];
          }
          id v19 = sub_1002E62DC((uint64_t)MetricsCoordinator, a4);
          int v20 = 138544130;
          id v21 = v16;
          __int16 v22 = 2112;
          id v23 = v7;
          __int16 v24 = 2114;
          CFStringRef v25 = v18;
          __int16 v26 = 2114;
          id v27 = v19;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] Recording supplemental metrics for sourceType: %{public}@", (uint8_t *)&v20, 0x2Au);
        }
      }

      [v9 recordSupplementalAppMetricsEvents];
    }
  }
}

void sub_1002E384C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (a1)
  {
    id v9 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002E3908;
    void v10[3] = &unk_100526920;
    void v10[4] = a1;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

void sub_1002E3908(uint64_t a1)
{
  id v15 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsCoordinator.post"];
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void (**)(id, uint64_t, void))*(id *)(a1 + 40);
  if (v5)
  {
    sub_1002E264C(v5, v2, v3);
    sub_1002E5F04(v4);
    id v7 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = v7;
    if (v7 && [v7 shouldCollectMetrics])
    {
      id v9 = objc_alloc_init(_TtC9appstored6LogKey);
      objc_setProperty_nonatomic_copy(v8, v10, *(id *)(v5 + 8), 24);
      objc_setProperty_nonatomic_copy(v8, v11, v9, 32);
      uint64_t v12 = sub_1002E1F94(v5);
      objc_storeStrong(v8 + 5, v12);

      [v8 postMetrics];
      if (v6) {
        v6[2](v6, 1, 0);
      }
    }
    else
    {
      if (!v6)
      {
LABEL_12:

        goto LABEL_13;
      }
      self;
      if ((unint64_t)(v4 - 1) > 4) {
        CFStringRef v13 = @"None";
      }
      else {
        CFStringRef v13 = off_100526B78[v4 - 1];
      }
      id v9 = +[NSString stringWithFormat:@"Handler not found for type: %@", v13];
      id v14 = ASDErrorWithTitleAndMessage();
      ((void (**)(id, uint64_t, void *))v6)[2](v6, 0, v14);
    }
    goto LABEL_12;
  }
LABEL_13:
}

void sub_1002E3AEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1002E3B94;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002E3B94(uint64_t a1)
{
  uint64_t v4 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v2 = sub_1002E3C0C(*(id **)(a1 + 32), 1, v4);
  id v3 = v2;
  if (v2) {
    sub_10028B084(v2, *(void **)(a1 + 40));
  }
}

id *sub_1002E3C0C(id *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    sub_1002E5F04(a2);
    id v6 = (id *)objc_claimAutoreleasedReturnValue();
    id v7 = v6;
    if (v6 && [v6 shouldCollectMetrics])
    {
      objc_setProperty_nonatomic_copy(v7, v8, a1[1], 24);
      objc_setProperty_nonatomic_copy(v7, v9, v5, 32);
      SEL v10 = sub_1002E1F94((uint64_t)a1);
      objc_storeStrong(v7 + 5, v10);

      a1 = v7;
    }
    else
    {
      a1 = 0;
    }
  }
  return a1;
}

void sub_1002E3CD0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002E3D7C;
    block[3] = &unk_100525408;
    void block[4] = a1;
    id v9 = v5;
    uint64_t v10 = a3;
    dispatch_async(v7, block);
  }
}

void sub_1002E3D7C(uint64_t a1)
{
  uint64_t v2 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsCoordinator.recordDeleted"];
  sub_1002E3DEC(*(id **)(a1 + 32), *(void **)(a1 + 40), 0, 3, *(void *)(a1 + 48), 0);
}

void sub_1002E3DEC(id *a1, void *a2, uint64_t a3, int a4, uint64_t a5, void *a6)
{
  id v62 = a2;
  id v70 = a6;
  uint64_t v65 = a1;
  if (a1)
  {
    id v71 = objc_alloc_init(_TtC9appstored6LogKey);
    int v61 = a4;
    if (a4 == 1)
    {
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        SEL v11 = objc_opt_class();
        id v12 = v11;
        CFStringRef v13 = [v62 componentsJoinedByString:@", "];
        id v14 = sub_1002E62DC((uint64_t)MetricsCoordinator, a5);
        *(_DWORD *)long long buf = 138544130;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v71;
        *(_WORD *)&unsigned char buf[22] = 2114;
        uint64_t v84 = v13;
        *(_WORD *)id v85 = 2114;
        *(void *)&v85[2] = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Recording installed apps: [%{public}@] sourceType: %{public}@", buf, 0x2Au);
      }
    }
    else
    {
      if (a4 != 3) {
        goto LABEL_9;
      }
      uint64_t v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = objc_opt_class();
        id v16 = v15;
        id v17 = [v62 componentsJoinedByString:@", "];
        CFStringRef v18 = sub_1002E62DC((uint64_t)MetricsCoordinator, a5);
        *(_DWORD *)long long buf = 138544130;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v71;
        *(_WORD *)&unsigned char buf[22] = 2114;
        uint64_t v84 = v17;
        *(_WORD *)id v85 = 2114;
        *(void *)&v85[2] = v18;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Recording uninstalled apps: [%{public}@] sourceType: %{public}@", buf, 0x2Au);
      }
    }

LABEL_9:
    id v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = objc_opt_class();
      id v21 = v20;
      __int16 v22 = [v62 componentsJoinedByString:@", "];
      id v23 = sub_1002E62DC((uint64_t)MetricsCoordinator, a5);
      *(_DWORD *)long long buf = 138544130;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v71;
      *(_WORD *)&unsigned char buf[22] = 2114;
      uint64_t v84 = v22;
      *(_WORD *)id v85 = 2114;
      *(void *)&v85[2] = v23;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Preparing with apps: [%{public}@] sourceType: %{public}@", buf, 0x2Au);
    }
    sub_1002E264C((uint64_t)v65, v71, a5);
    sub_1002E35D4(v65, 2, v71, a5);
    sub_1002E35D4(v65, 5, v71, a5);
    __int16 v24 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v25 = objc_opt_class();
      id v26 = v25;
      id v27 = [v62 componentsJoinedByString:@", "];
      __int16 v28 = sub_1002E62DC((uint64_t)MetricsCoordinator, a5);
      *(_DWORD *)long long buf = 138544130;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v71;
      *(_WORD *)&unsigned char buf[22] = 2114;
      uint64_t v84 = v27;
      *(_WORD *)id v85 = 2114;
      *(void *)&v85[2] = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Recording events for apps: [%{public}@] sourceType: %{public}@", buf, 0x2Au);
    }
    if (+[AMSDevice deviceIsiPhone])
    {
      if (v61 != 1) {
        goto LABEL_27;
      }
    }
    else if (((v61 == 1) & +[AMSDevice deviceIsiPad]) == 0)
    {
      goto LABEL_27;
    }
    long long v68 = +[AppInstallMetrics shared];
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    id obj = v62;
    id v29 = [obj countByEnumeratingWithState:&v79 objects:v87 count:16];
    if (v29)
    {
      uint64_t v67 = *(void *)v80;
      uint64_t v63 = a3;
      do
      {
        for (uint64_t i = 0; i != v29; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v80 != v67) {
            objc_enumerationMutation(obj);
          }
          uint64_t v31 = *(void **)(*((void *)&v79 + 1) + 8 * i);
          id v32 = [v70 objectForKeyedSubscript:v31];
          dispatch_semaphore_t v33 = dispatch_semaphore_create(0);
          uint64_t v75 = 0;
          long long v76 = &v75;
          uint64_t v77 = 0x2020000000;
          char v78 = 0;
          v72[0] = _NSConcreteStackBlock;
          v72[1] = 3221225472;
          v72[2] = sub_1002E6430;
          v72[3] = &unk_100526A10;
          id v74 = &v75;
          id v34 = v33;
          id v73 = v34;
          [v68 recordInstallWithBundleID:v31 appInstallType:a3 token:v32 logKey:v71 completionHandler:v72];
          dispatch_semaphore_wait(v34, 0xFFFFFFFFFFFFFFFFLL);
          id v35 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v36 = a3;
            id v37 = (id)objc_opt_class();
            double v38 = sub_1002E62DC((uint64_t)MetricsCoordinator, a5);
            int v39 = *((unsigned __int8 *)v76 + 24);
            *(_DWORD *)long long buf = 138544898;
            *(void *)&uint8_t buf[4] = v37;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v71;
            *(_WORD *)&unsigned char buf[22] = 2114;
            uint64_t v84 = v31;
            *(_WORD *)id v85 = 2114;
            *(void *)&v85[2] = v38;
            *(_WORD *)&v85[10] = 2048;
            *(void *)&v85[12] = v63;
            *(_WORD *)&v85[20] = 2112;
            *(void *)&v85[22] = v32;
            *(_WORD *)&v85[30] = 1024;
            int v86 = v39;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Recorded app install for bundleID: [%{public}@] sourceType: %{public}@ installType: %ld token: %@ result: %{BOOL}d", buf, 0x44u);

            a3 = v36;
          }

          _Block_object_dispose(&v75, 8);
        }
        id v29 = [obj countByEnumeratingWithState:&v79 objects:v87 count:16];
      }
      while (v29);
    }

LABEL_27:
    __int16 v40 = +[NSMutableArray array];
    id v69 = sub_1002E3C0C(v65, 1, v71);
    if (a5 != 4 && v69 && [v69 shouldCollectMetrics])
    {
      self;
      [v40 addObject:@"Crossfire"];
      if (v61 == 1)
      {
        [v69 recordInstallEventsForBundleIDs:v62 installType:a3];
      }
      else if (v61 == 3)
      {
        [v69 recordDeletedBundleIDs:v62];
      }
    }
    id v41 = sub_1002E3C0C(v65, 2, v71);
    id v42 = v41;
    if (v41 && [v41 shouldCollectMetrics])
    {
      self;
      [v40 addObject:@"DNU"];
      if (v61 == 1)
      {
        [v42 recordInstallEventsForBundleIDs:v62 installType:a3];
      }
      else if (v61 == 3)
      {
        [v42 recordDeletedBundleIDs:v62];
      }
    }
    id v43 = sub_1002E3C0C(v65, 3, v71);
    id v44 = v43;
    if (v43 && [v43 shouldCollectMetrics])
    {
      self;
      [v40 addObject:@"Summary"];
      if (v61 == 1)
      {
        [v44 recordInstallEventsForBundleIDs:v62 installType:a3];
      }
      else if (v61 == 3)
      {
        [v44 recordDeletedBundleIDs:v62];
      }
    }
    id v45 = sub_1002E3C0C(v65, 5, v71);
    uint64_t v46 = v45;
    if (v45 && [v45 shouldCollectMetrics])
    {
      self;
      [v40 addObject:@"ODP"];
      if (v61 == 1)
      {
        [v46 recordInstallEventsForBundleIDs:v62 installType:a3];
        goto LABEL_51;
      }
      if (v61 != 3)
      {
LABEL_60:

        goto LABEL_61;
      }
      [v46 recordDeletedBundleIDs:v62];
    }
    else
    {
      if (v61 == 1)
      {
LABEL_51:
        sub_1002E6444((uint64_t)v65, v62, v71);
        uint64_t v47 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          long long v48 = objc_opt_class();
          id v49 = v48;
          id v50 = [v62 componentsJoinedByString:@", "];
          id v51 = [v40 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138544130;
          *(void *)&uint8_t buf[4] = v48;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v71;
          *(_WORD *)&unsigned char buf[22] = 2114;
          uint64_t v84 = v50;
          *(_WORD *)id v85 = 2114;
          *(void *)&v85[2] = v51;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Recorded installed apps: [%{public}@] for types: [%{public}@]", buf, 0x2Au);
        }
LABEL_59:

        goto LABEL_60;
      }
      if (v61 != 3) {
        goto LABEL_60;
      }
    }
    id v52 = v62;
    uint64_t v53 = v71;
    id v54 = sub_10038F000();
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1002E6B54;
    uint64_t v84 = &unk_100526A60;
    id v55 = v52;
    *(void *)id v85 = v55;
    *(void *)&v85[8] = v65;
    id v56 = v53;
    *(void *)&v85[16] = v56;
    *(void *)&v85[24] = a5;
    [v54 modifyUsingTransaction:buf];

    uint64_t v47 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v57 = objc_opt_class();
      id v58 = v57;
      uint64_t v59 = [v55 componentsJoinedByString:@", "];
      unsigned int v60 = [v40 componentsJoinedByString:@", "];
      *(_DWORD *)long long buf = 138544130;
      *(void *)&uint8_t buf[4] = v57;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v56;
      *(_WORD *)&unsigned char buf[22] = 2114;
      uint64_t v84 = v59;
      *(_WORD *)id v85 = 2114;
      *(void *)&v85[2] = v60;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Recorded uninstalled apps: [%{public}@] for types: [%{public}@]", buf, 0x2Au);
    }
    goto LABEL_59;
  }
LABEL_61:
}

void sub_1002E498C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1002E49B4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  if (a1)
  {
    id v15 = *(NSObject **)(a1 + 16);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1002E4AD4;
    void v16[3] = &unk_100526948;
    void v16[4] = a1;
    id v17 = v11;
    id v18 = v12;
    id v19 = v13;
    id v20 = v14;
    char v21 = a6;
    dispatch_async(v15, v16);
  }
}

void sub_1002E4AD4(uint64_t a1)
{
  id v5 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsCoordinator.recordInstalledClipForBundleID"];
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  uint64_t v3 = sub_1002E3C0C(*(id **)(a1 + 32), 1, v2);
  uint64_t v4 = (void *)v3;
  if (v3) {
    sub_10028B928(v3, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64), *(unsigned char *)(a1 + 72), v2);
  }
}

void sub_1002E4B80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (a1)
  {
    id v9 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002E4C3C;
    void v10[3] = &unk_100526920;
    void v10[4] = a1;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

void sub_1002E4C3C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  sub_1002E4C98(*(id **)(a1 + 32), *(void *)(a1 + 48), v2, *(void *)(a1 + 56), *(void **)(a1 + 40));
}

void sub_1002E4C98(id *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v10 = a3;
  id v9 = a5;
  if (a1)
  {
    sub_1002E264C((uint64_t)a1, v10, a4);
    sub_1002E35D4(a1, a2, v10, a4);
    if (v9) {
      v9[2](v9, 1, 0);
    }
  }
}

void sub_1002E4D40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = v6;
  if (a1)
  {
    uint64_t v8 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002E4DF0;
    block[3] = &unk_100526970;
    void block[4] = a1;
    uint64_t v11 = a2;
    id v10 = v6;
    dispatch_async(v8, block);
  }
}

void sub_1002E4DF0(uint64_t a1)
{
  id v18 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsCoordinator.record"];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void (**)(id, uint64_t, void))*(id *)(a1 + 40);
  if (v3)
  {
    id v5 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsHandler.reset"];
    sub_1002E5F04(v2);
    id v6 = (id *)objc_claimAutoreleasedReturnValue();
    id v7 = v6;
    if (v6 && [v6 shouldCollectMetrics])
    {
      uint64_t v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = objc_opt_class();
        id v10 = v9;
        self;
        if ((unint64_t)(v2 - 1) > 4) {
          CFStringRef v11 = @"None";
        }
        else {
          CFStringRef v11 = off_100526B78[v2 - 1];
        }
        *(_DWORD *)long long buf = 138543618;
        id v20 = v9;
        __int16 v21 = 2114;
        CFStringRef v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@/%{public}@] Reset metrics", buf, 0x16u);
      }
      uint64_t v13 = objc_alloc_init(_TtC9appstored6LogKey);
      objc_setProperty_nonatomic_copy(v7, v15, *(id *)(v3 + 8), 24);
      objc_setProperty_nonatomic_copy(v7, v16, v13, 32);
      id v17 = sub_1002E1F94(v3);
      objc_storeStrong(v7 + 5, v17);

      [v7 resetMetrics];
      v4[2](v4, 1, 0);
    }
    else
    {
      if (!v4)
      {
LABEL_16:

        goto LABEL_17;
      }
      self;
      if ((unint64_t)(v2 - 1) > 4) {
        CFStringRef v12 = @"None";
      }
      else {
        CFStringRef v12 = off_100526B78[v2 - 1];
      }
      uint64_t v13 = +[NSString stringWithFormat:@"Handler not found for type: %@", v12];
      id v14 = ASDErrorWithTitleAndMessage();
      ((void (**)(id, uint64_t, void *))v4)[2](v4, 0, v14);
    }
    goto LABEL_16;
  }
LABEL_17:
}

void sub_1002E50AC(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v17 = a2;
  if (a1)
  {
    if ((+[AMSDevice deviceIsiPhone] & 1) != 0
      || +[AMSDevice deviceIsiPad])
    {
      uint64_t v32 = 0;
      dispatch_semaphore_t v33 = &v32;
      uint64_t v34 = 0x3032000000;
      id v35 = sub_100018108;
      uint64_t v36 = sub_100017C40;
      id v37 = +[NSMutableDictionary dictionary];
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id obj = v17;
      id v5 = [obj countByEnumeratingWithState:&v28 objects:v38 count:16];
      if (v5)
      {
        uint64_t v6 = *(void *)v29;
        do
        {
          for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v29 != v6) {
              objc_enumerationMutation(obj);
            }
            uint64_t v8 = *(void *)(*((void *)&v28 + 1) + 8 * i);
            id v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v8];
            id v10 = sub_1003E0BA4();
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            void v24[2] = sub_1002E53E8;
            void v24[3] = &unk_100526998;
            id v11 = v9;
            uint64_t v26 = v8;
            id v27 = &v32;
            id v25 = v11;
            [v10 readUsingSession:v24];
          }
          id v5 = [obj countByEnumeratingWithState:&v28 objects:v38 count:16];
        }
        while (v5);
      }

      id v12 = [(id)v33[5] copy];
      _Block_object_dispose(&v32, 8);
    }
    else
    {
      id v12 = 0;
    }
    uint64_t v13 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002E54A8;
    block[3] = &unk_1005269C0;
    void block[4] = a1;
    char v23 = a3;
    id v21 = v12;
    uint64_t v22 = a4;
    id v20 = v17;
    id v14 = v12;
    dispatch_async(v13, block);
  }
}

void sub_1002E53B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1002E53E8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 connection];
  sub_1002FF3DC((uint64_t)AppInstallEntity, v3, *(void **)(a1 + 32));
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    uint64_t v4 = sub_1002C222C(v6);

    if (v4)
    {
      id v5 = sub_1002C222C(v6);
      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v5 forKeyedSubscript:*(void *)(a1 + 40)];
    }
  }
}

void sub_1002E54A8(uint64_t a1)
{
  uint64_t v2 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsCoordinator.recordInstalls"];
  sub_1002E3DEC(*(id **)(a1 + 32), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 64), 1, *(void *)(a1 + 56), *(void **)(a1 + 48));
}

void sub_1002E5514(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002E55C4;
    block[3] = &unk_100526970;
    void block[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_1002E55C4(uint64_t *a1)
{
  uint64_t v4 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsCoordinator.recordLaunches"];
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  sub_1002E264C(a1[4], v2, a1[6]);
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, 1, 0);
  }
}

void sub_1002E565C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (a1)
  {
    id v9 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002E5718;
    void v10[3] = &unk_100526920;
    void v10[4] = a1;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

void sub_1002E5718(uint64_t a1)
{
  uint64_t v4 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsCoordinator.recordLaunches"];
  uint64_t v2 = objc_alloc_init(_TtC9appstored6LogKey);
  sub_1002E35D4(*(id **)(a1 + 32), *(void *)(a1 + 48), v2, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, 1, 0);
  }
}

void sub_1002E57B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002E5860;
    block[3] = &unk_100526970;
    void block[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_1002E5860(uint64_t *a1)
{
  uint64_t v2 = [[KeepAlive alloc] initWithName:@"com.apple.appstored.MetricsHandler.recordDeleted"];
  uint64_t v3 = sub_1002E1F94(a1[4]);
  long long v31 = objc_alloc_init(_TtC9appstored6LogKey);
  if ([v3 count])
  {
    long long v28 = v2;
    long long v30 = +[NSMutableArray array];
    uint64_t v26 = +[LSDatabaseContext sharedDatabaseContext];
    unsigned int v25 = [v26 startAccessingReturningError:0];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v27 = v3;
    uint64_t v4 = [v3 keyEnumerator];
    id v5 = [v4 countByEnumeratingWithState:&v32 objects:v42 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v33;
      long long v29 = a1;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v33 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v8);
          id v11 = +[ApplicationProxy proxyForBundleID:v9];
          if (([v11 isInstalled] & 1) != 0
            || ([v11 isOffloaded] & 1) != 0
            || [v11 isPlaceholder])
          {
            uint64_t v12 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              SEL v16 = objc_opt_class();
              *(_DWORD *)long long buf = 138543874;
              id v37 = v16;
              __int16 v38 = 2112;
              int v39 = v31;
              __int16 v40 = 2114;
              id v41 = v9;
              id v17 = v16;
              _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[%{public}@/%@] [Sync] [%{public}@] Not recording uninstall non candidate install type", buf, 0x20u);
            }
          }
          else if (sub_1002E5C90(a1[4], v11))
          {
            uint64_t v13 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              id v14 = objc_opt_class();
              *(_DWORD *)long long buf = 138543874;
              id v37 = v14;
              __int16 v38 = 2112;
              int v39 = v31;
              __int16 v40 = 2114;
              id v41 = v9;
              id v15 = v14;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [Sync] [%{public}@] Recording uninstall", buf, 0x20u);

              a1 = v29;
            }

            [v30 addObject:v9];
          }

          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v18 = [v4 countByEnumeratingWithState:&v32 objects:v42 count:16];
        id v6 = v18;
      }
      while (v18);
    }

    if (v25) {
      [v26 stopAccessing];
    }
    uint64_t v3 = v27;
    uint64_t v2 = v28;
    if ([v30 count])
    {
      id v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = objc_opt_class();
        id v21 = a1;
        id v22 = v20;
        char v23 = [v30 componentsJoinedByString:@", "];
        *(_DWORD *)long long buf = 138543874;
        id v37 = v20;
        __int16 v38 = 2112;
        int v39 = v31;
        __int16 v40 = 2114;
        id v41 = v23;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [Sync] Found apps that were deleted event for bundleIDs: [%{public}@]", buf, 0x20u);

        a1 = v21;
      }

      sub_1002E3DEC((id *)a1[4], v30, 0, 3, a1[6], 0);
    }
  }
  uint64_t v24 = a1[5];
  if (v24) {
    (*(void (**)(uint64_t, uint64_t, void))(v24 + 16))(v24, 1, 0);
  }
}

uint64_t sub_1002E5C90(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if ([v3 isStoreOriginated]
      && (![v4 hasMIDBasedSINF] || objc_msgSend(v4, "isAppClip")))
    {
      if ([v4 isInstalled]) {
        a1 = 1;
      }
      else {
        a1 = (uint64_t)[v4 isOffloaded];
      }
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

void sub_1002E5D10(uint64_t a1, void *a2)
{
  id v3 = [a2 connection];
  uint64_t v4 = sub_1002FF548((uint64_t)ActiveLaunchEventEntity, v3, 0);

  id v5 = +[ActiveLaunchEventEntity defaultProperties];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002E5DF4;
  v6[3] = &unk_1005213B0;
  id v7 = *(id *)(a1 + 32);
  [v4 enumerateMemoryEntitiesWithProperties:v5 usingBlock:v6];
}

void sub_1002E5DF4(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = sub_1003AC978(v5);
  if (v3)
  {
    uint64_t v4 = sub_1003ACCB8(v5);
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
  }
}

void sub_1002E5E78(uint64_t a1, void *a2)
{
  id v3 = [a2 connection];
  sub_1002FF548((uint64_t)AppMetadataEntity, v3, 0);
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 countOfEntities];
}

id sub_1002E5F04(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
  {
    id v2 = 0;
  }
  else
  {
    id v2 = objc_alloc_init(*off_100526BA0[a1 - 1]);
  }
  return v2;
}

void sub_1002E5FF4(uint64_t a1)
{
  id v2 = objc_alloc_init(_TtC9appstored6LogKey);
  id v3 = [*(id *)(a1 + 32) userInfo];
  id v4 = [v3 objectForKeyedSubscript:@"DSID"];

  if (v4)
  {
    id v4 = sub_10026811C(v3, @"DSID");
  }
  id v5 = [v3 objectForKeyedSubscript:@"active"];

  if (v5)
  {
    id v5 = sub_10026811C(v3, @"active");
  }
  id v6 = [v3 objectForKeyedSubscript:@"signout"];

  if (v3 && v6) {
    sub_1002680CC(v3, @"signout", 0);
  }
  if ([v5 BOOLValue] && *(void *)(*(void *)(a1 + 40) + 8))
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
      id v10 = v8;
      int v16 = 138544386;
      id v17 = v8;
      __int16 v18 = 2112;
      id v19 = v2;
      __int16 v20 = 2114;
      uint64_t v21 = v9;
      __int16 v22 = 2114;
      char v23 = v4;
      __int16 v24 = 1024;
      unsigned int v25 = [v5 BOOLValue];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Not recording metrics following change from accountID: %{public}@ to accountID: %{public}@ active: %{BOOL}d", (uint8_t *)&v16, 0x30u);
    }
  }
  else
  {
    id v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = objc_opt_class();
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
      id v14 = v12;
      int v16 = 138544386;
      id v17 = v12;
      __int16 v18 = 2112;
      id v19 = v2;
      __int16 v20 = 2114;
      uint64_t v21 = v13;
      __int16 v22 = 2114;
      char v23 = v4;
      __int16 v24 = 1024;
      unsigned int v25 = [v5 BOOLValue];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] Recording metrics following change from accountID: %{public}@ going to accountID: %{public}@ active: %{BOOL}d", (uint8_t *)&v16, 0x30u);
    }
    sub_1002E4C98(*(id **)(a1 + 40), 5, v2, 5, 0);
  }
  if ([v5 BOOLValue]) {
    id v15 = v4;
  }
  else {
    id v15 = 0;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 8), v15);
}

CFStringRef sub_1002E62DC(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) > 0xA) {
    return @"Unknown";
  }
  else {
    return *(&off_100526BC8 + a2 - 1);
  }
}

uint64_t sub_1002E6324(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v10 = 0;
  id v4 = sub_10040DA90(a2, v3, &v10);
  id v5 = v10;
  if (v5)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = objc_opt_class();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 2114;
      id v14 = v5;
      id v9 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%{public}@] Failed to record active launches due to error: %{public}@", buf, 0x16u);
    }
  }

  return 1;
}

intptr_t sub_1002E6430(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1002E6444(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[NSMutableArray array];
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1002E6DCC;
  v37[3] = &unk_100526A88;
  id v8 = v5;
  id v38 = v8;
  uint64_t v39 = a1;
  id v9 = v6;
  id v40 = v9;
  id v10 = v7;
  id v41 = v10;
  +[ApplicationProxy enumerateApplicationsOfType:0 usingBlock:v37];
  id v11 = sub_10031CA20();
  id v36 = 0;
  uint64_t v12 = sub_10031CD70((uint64_t)v11, &v36);
  __int16 v13 = (uint64_t (*)(uint64_t, uint64_t))v36;

  if (v13)
  {
    id v14 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = objc_opt_class();
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2114;
      id v50 = v13;
      id v16 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%{public}@/%@] Error looking up system apps for metadata. Error: %{public}@", buf, 0x20u);
    }
  }
  else
  {
    id v17 = sub_10031CA20();
    id v35 = 0;
    id v14 = sub_10031D428((uint64_t)v17, v12, &v35);
    __int16 v13 = (uint64_t (*)(uint64_t, uint64_t))v35;

    if (v13)
    {
      __int16 v18 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = objc_opt_class();
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v9;
        *(_WORD *)&unsigned char buf[22] = 2114;
        id v50 = v13;
        id v20 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[%{public}@/%@] Error looking up system apps mappings for metadata. Error: %{public}@", buf, 0x20u);
      }
    }
    else
    {
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1002E6F88;
      void v28[3] = &unk_100526AB0;
      long long v29 = v8;
      id v30 = v12;
      long long v31 = v14;
      uint64_t v32 = a1;
      id v33 = v9;
      id v34 = v10;
      +[ApplicationProxy enumerateApplicationsOfType:1 usingBlock:v28];

      __int16 v18 = v29;
    }
  }
  id v21 = v10;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  id v50 = sub_100018108;
  id v51 = sub_100017C40;
  id v52 = 0;
  __int16 v22 = sub_10038F000();
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  void v42[2] = sub_1002E71C8;
  void v42[3] = &unk_100526AD8;
  id v23 = v21;
  id v43 = v23;
  id v44 = buf;
  [v22 modifyUsingTransaction:v42];

  if (*(void *)(*(void *)&buf[8] + 40))
  {
    __int16 v24 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      unsigned int v25 = objc_opt_class();
      uint64_t v26 = *(void *)(*(void *)&buf[8] + 40);
      *(_DWORD *)id v45 = 138543618;
      uint64_t v46 = v25;
      __int16 v47 = 2114;
      uint64_t v48 = v26;
      id v27 = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[%{public}@] Unable to record current apps due to error: %{public}@", v45, 0x16u);
    }
  }

  _Block_object_dispose(buf, 8);
}

void sub_1002E6924(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E694C(uint64_t a1, void *a2)
{
  id v19 = a2;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v20 objects:v30 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v21;
    *(void *)&long long v4 = 138543874;
    long long v17 = v4;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        id v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id", v8, v17 equalToValue];
        id v10 = [v19 connection];
        id v11 = sub_1002FF3DC((uint64_t)ActiveLaunchEventEntity, v10, v9);

        [v11 deleteFromDatabase];
        uint64_t v12 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v13 = objc_opt_class();
          uint64_t v14 = *(void *)(a1 + 48);
          *(_DWORD *)long long buf = v17;
          unsigned int v25 = v13;
          __int16 v26 = 2112;
          uint64_t v27 = v14;
          __int16 v28 = 2114;
          uint64_t v29 = v8;
          id v15 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] Removed active app launch", buf, 0x20u);
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v20 objects:v30 count:16];
    }
    while (v5);
  }

  return 1;
}

uint64_t sub_1002E6B54(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v20 = a1;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v25 objects:v37 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v23 = *(void *)v26;
    id v7 = SKANGhostback;
    *(void *)&long long v5 = 138544130;
    long long v18 = v5;
    id v19 = v3;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v23) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        id v9 = [&v7[65] predicateWithProperty:@"bundle_id" equalToValue:v18];
        id v10 = [v3 connection];
        id v11 = sub_1002FF3DC((uint64_t)AppMetadataEntity, v10, v9);

        [v11 deleteFromDatabase];
        uint64_t v12 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v13 = objc_opt_class();
          uint64_t v14 = *(void *)(v20 + 56);
          uint64_t v22 = *(void *)(v20 + 48);
          id v15 = v13;
          id v16 = sub_1002E62DC((uint64_t)MetricsCoordinator, v14);
          *(_DWORD *)long long buf = v18;
          id v30 = v13;
          __int16 v31 = 2112;
          uint64_t v32 = v22;
          __int16 v33 = 2114;
          id v34 = v16;
          __int16 v35 = 2114;
          uint64_t v36 = v24;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] [%{public}@] Removed metadata following deletion", buf, 0x2Au);

          id v3 = v19;
          id v7 = SKANGhostback;
        }
      }
      id v6 = [obj countByEnumeratingWithState:&v25 objects:v37 count:16];
    }
    while (v6);
  }

  return 1;
}

void sub_1002E6DCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  long long v5 = *(void **)(a1 + 32);
  if (!v5
    || ([v3 bundleID],
        id v6 = objc_claimAutoreleasedReturnValue(),
        unsigned int v7 = [v5 containsObject:v6],
        v6,
        v7))
  {
    if (sub_1002E5C90(*(void *)(a1 + 40), v4))
    {
      id v8 = sub_1003A3448([AppMetadata alloc], v4);
      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = objc_opt_class();
        uint64_t v11 = *(void *)(a1 + 48);
        id v12 = v10;
        __int16 v13 = [v4 bundleID];
        uint64_t v14 = [v4 shortVersionString];
        id v15 = [v4 bundleVersion];
        int v16 = 138544386;
        long long v17 = v10;
        __int16 v18 = 2112;
        uint64_t v19 = v11;
        __int16 v20 = 2114;
        long long v21 = v13;
        __int16 v22 = 2114;
        uint64_t v23 = v14;
        __int16 v24 = 2114;
        long long v25 = v15;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%{public}@/%@] [%{public}@] Writing metadata for version: %{public}@ bundleVersion: %{public}@", (uint8_t *)&v16, 0x34u);
      }
      [*(id *)(a1 + 56) addObject:v8];
    }
  }
}

void sub_1002E6F88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  long long v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id v6 = [v3 bundleID];
    if (([v5 containsObject:v6] & 1) == 0)
    {
LABEL_12:

      goto LABEL_13;
    }
    if ([v4 isInstalled])
    {
    }
    else
    {
      unsigned int v7 = [v4 isOffloaded];

      if (!v7) {
        goto LABEL_13;
      }
    }
  }
  id v8 = *(void **)(a1 + 40);
  id v9 = [v4 bundleID];
  LODWORD(v_Block_object_dispose(&a9, 8) = [v8 containsObject:v9];

  if (v8)
  {
    id v6 = sub_1003A3448([AppMetadata alloc], v4);
    [v6 setValue:&__kCFBooleanTrue forProperty:@"is_prior"];
    id v10 = *(void **)(a1 + 48);
    uint64_t v11 = [v4 bundleID];
    id v12 = [v10 objectForKeyedSubscript:v11];

    if (v12) {
      [v6 setValue:v12 forProperty:@"item_id"];
    }
    __int16 v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = objc_opt_class();
      uint64_t v15 = *(void *)(a1 + 64);
      id v16 = v14;
      long long v17 = [v4 bundleID];
      __int16 v18 = [v4 shortVersionString];
      int v19 = 138544386;
      __int16 v20 = v14;
      __int16 v21 = 2112;
      uint64_t v22 = v15;
      __int16 v23 = 2114;
      __int16 v24 = v17;
      __int16 v25 = 2114;
      long long v26 = v12;
      __int16 v27 = 2114;
      long long v28 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[%{public}@/%@] [%{public}@:%{public}@:%{public}@] Writing system metadata", (uint8_t *)&v19, 0x34u);
    }
    [*(id *)(a1 + 72) addObject:v6];

    goto LABEL_12;
  }
LABEL_13:
}

uint64_t sub_1002E71C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  long long v5 = (objc_class *)objc_opt_class();
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v6 + 40);
  id v7 = sub_10040D428(v3, v4, v5, &obj);
  objc_storeStrong((id *)(v6 + 40), obj);

  return 1;
}

id sub_1002E72A0(void *a1)
{
  if (a1)
  {
    a1 = sub_1002E72D4(a1, 40);
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002E72D4(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v8 = 0;
    id v3 = a1;
    sub_1001B6CA4((uint64_t)[v3 bytes], (uint64_t)objc_msgSend(v3, "length"), a2, (uint64_t)&v8);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109376;
        int v10 = a2;
        __int16 v11 = 1024;
        int v12 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to read %d (error %d)", buf, 0xEu);
      }

      a1 = 0;
    }
    else
    {
      a1 = +[NSNumber numberWithUnsignedLongLong:v8];
    }
  }
  return a1;
}

id sub_1002E73FC(void *a1)
{
  if (a1)
  {
    a1 = sub_1002E72D4(a1, 41);
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_1002E7430(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = sub_1002E72D4(a1, 42);
  uint64_t v2 = [v1 isEqualToNumber:&off_10054C3F0] ^ 1;

  return v2;
}

id sub_1002E7480(void *a1)
{
  if (a1)
  {
    a1 = sub_1002E72D4(a1, 1);
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1002E7600(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = (dispatch_source_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v7 = WeakRetained;
    uintptr_t data = dispatch_source_get_data(WeakRetained[2]);
    int v4 = (dispatch_queue_t *)objc_loadWeakRetained(v1);
    int v5 = v4;
    if (v4)
    {
      dispatch_assert_queue_V2(v4[1]);
      uint64_t v6 = [(dispatch_queue_t *)v5 delegate];
      [v6 stream:v5 handleEvent:data];
    }
    id WeakRetained = v7;
  }
}

void sub_1002E778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002E77A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = WeakRetained;
}

id sub_1002E7888(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
}

void sub_1002E7984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002E799C(uint64_t a1)
{
}

void sub_1002E79B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1)
  {
    int v5 = *(void **)(a1 + 24);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1002E7A58;
    v6[3] = &unk_1005218C0;
    void v6[4] = a1;
    id v7 = v3;
    sub_100010468(v5, v6);
  }
}

void sub_1002E7A58(uint64_t a1)
{
}

void sub_1002E7B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E7B28(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 48);
  return result;
}

void sub_1002E7B3C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1002E7BB8;
    void v3[3] = &unk_100521B80;
    v3[4] = a1;
    void v3[5] = a2;
    sub_100010468(v2, v3);
  }
}

uint64_t sub_1002E7BB8(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 4_Block_object_dispose(&a9, 8) = *(void *)(result + 40);
  return result;
}

void sub_1002E7C80(id a1)
{
  uint64_t v1 = [AppUpdatesDatabaseStore alloc];
  sub_1001F5660();
  int v5 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = sub_1001F5734(v5);
  id v3 = [(SQLiteDatabaseStore *)v1 initWithDatabase:v2];
  int v4 = (void *)qword_1005B0E98;
  qword_1005B0E98 = (uint64_t)v3;
}

BOOL sub_1002E7D08(BOOL a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (a1)
  {
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x2020000000;
    char v18 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002E7E0C;
    void v10[3] = &unk_100526C70;
    uint64_t v13 = a4;
    uint64_t v14 = a3;
    id v11 = v7;
    int v12 = &v15;
    [(id)a1 modifyUsingTransaction:v10];
    a1 = *((unsigned char *)v16 + 24) != 0;

    _Block_object_dispose(&v15, 8);
  }

  return a1;
}

void sub_1002E7DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E7E0C(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:a1[4]];
  if (+[UpdatesManager shouldUseModernUpdates]) {
    int v5 = _TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    int v5 = AppUpdateEntity;
  }
  uint64_t v6 = [v3 connection];
  id v7 = sub_1002FF3DC((uint64_t)v5, v6, v4);

  if ([v7 existsInDatabase])
  {
    uint64_t v8 = +[NSNumber numberWithInteger:a1[6]];
    [v7 setValue:v8 forProperty:@"package_type"];

    if (sub_10026E91C(v7, @"update_state") == (id)a1[7])
    {
      id v9 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = a1[4];
        uint64_t v11 = a1[7];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v52 = v10;
        __int16 v53 = 2048;
        uint64_t v54 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Ignoring request to set update state of %{public}@, current state is already %ld", buf, 0x16u);
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
      uint64_t v12 = a1[7];
      uint64_t v13 = ASDLogHandleForCategory();
      BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if (v12 == 1)
      {
        if (v14)
        {
          uint64_t v15 = a1[4];
          *(_DWORD *)long long buf = 138543362;
          uint64_t v52 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Updated state to installed for bundleID: %{public}@", buf, 0xCu);
        }

        id v16 = +[NSDate date];
        [v7 setValue:v16 forProperty:@"install_date"];

        uint64_t v17 = +[NSNumber numberWithInteger:a1[7]];
        [v7 setValue:v17 forProperty:@"update_state"];

        id v9 = [v7 valueForProperty:@"metrics_data"];
        if (v9)
        {
          char v18 = [[UpdateItemMetrics alloc] initWithData:v9];
          if (!v18) {
            char v18 = (UpdateItemMetrics *)objc_opt_new();
          }
          int v19 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
          sub_10020B7CC((uint64_t)v18, v19, ASDUpdateItemMetricsInstallComplete);

          if (v18) {
            id v20 = [(NSMutableDictionary *)v18->_metricsData copy];
          }
          else {
            id v20 = 0;
          }
          [v7 setValue:v20 forProperty:@"metrics_data"];

          __int16 v21 = +[NSMutableDictionary dictionary];
          if (v18) {
            id v22 = [(NSMutableDictionary *)v18->_metricsData copy];
          }
          else {
            id v22 = 0;
          }
          __int16 v23 = [v22 objectForKey:ASDUpdateItemMetricsAvailableDate];

          if (v23)
          {
            id v42 = v9;
            id v43 = v7;
            id v44 = v4;
            id v45 = v3;
            [v23 doubleValue];
            id v41 = +[NSNumber numberWithDouble:v24 / 3600.0];
            objc_msgSend(v21, "setObject:forKey:");
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            __int16 v25 = +[ASDUpdateMetricsEvent relativeMetricsKeys];
            id v26 = [v25 countByEnumeratingWithState:&v46 objects:v50 count:16];
            if (v26)
            {
              id v27 = v26;
              uint64_t v28 = *(void *)v47;
              do
              {
                uint64_t v29 = 0;
                do
                {
                  if (*(void *)v47 != v28) {
                    objc_enumerationMutation(v25);
                  }
                  uint64_t v30 = *(void *)(*((void *)&v46 + 1) + 8 * (void)v29);
                  if (v18) {
                    id v31 = [(NSMutableDictionary *)v18->_metricsData copy];
                  }
                  else {
                    id v31 = 0;
                  }
                  uint64_t v32 = [v31 objectForKey:v30];

                  if (v32)
                  {
                    [v32 doubleValue];
                    double v34 = v33;
                    [v23 doubleValue];
                    uint64_t v36 = +[NSNumber numberWithDouble:(v34 - v35) / 3600.0];
                    [v21 setObject:v36 forKey:v30];
                  }
                  uint64_t v29 = (char *)v29 + 1;
                }
                while (v27 != v29);
                id v37 = [v25 countByEnumeratingWithState:&v46 objects:v50 count:16];
                id v27 = v37;
              }
              while (v37);
            }

            int v4 = v44;
            id v3 = v45;
            id v9 = v42;
            id v7 = v43;
          }
          sub_10040E9A0((uint64_t)Analytics, v21, 33);
        }
      }
      else
      {
        if (v14)
        {
          uint64_t v38 = a1[4];
          uint64_t v39 = a1[7];
          *(_DWORD *)long long buf = 138543618;
          uint64_t v52 = v38;
          __int16 v53 = 2048;
          uint64_t v54 = v39;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Resetting update state for: %{public}@ to %ld", buf, 0x16u);
        }

        id v9 = +[NSNumber numberWithInteger:a1[7]];
        [v7 setValue:v9 forProperty:@"update_state"];
      }
    }
  }
  return 1;
}

void sub_1002E83AC(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1002E846C;
    v7[3] = &unk_100526C48;
    id v8 = v5;
    id v9 = v6;
    [a1 modifyUsingTransaction:v7];
  }
}

uint64_t sub_1002E846C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v17 = *(void *)(a1 + 32);
  int v4 = +[NSArray arrayWithObjects:&v17 count:1];
  id v5 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"bundle_id" values:v4];

  if (+[UpdatesManager shouldUseModernUpdates]) {
    id v6 = _TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    id v6 = AppUpdateEntity;
  }
  id v7 = [v3 connection];
  id v8 = sub_1002FF3DC((uint64_t)v6, v7, v5);

  if (v8)
  {
    sub_1003763C0((uint64_t)v3, v8, *(void **)(a1 + 40));
  }
  else
  {
    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      uint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Unable to reset purchase state for update with bundleID: %{public}@", (uint8_t *)&v13, 0x16u);
    }
  }
  return 1;
}

void sub_1002E8604(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1002E86C4;
    v7[3] = &unk_100526C48;
    id v8 = v5;
    id v9 = v6;
    [a1 modifyUsingTransaction:v7];
  }
}

uint64_t sub_1002E86C4(uint64_t a1, void *a2)
{
  uint64_t v17 = *(void *)(a1 + 32);
  id v3 = a2;
  int v4 = +[NSArray arrayWithObjects:&v17 count:1];
  id v5 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"bundle_id" values:v4];

  if (+[UpdatesManager shouldUseModernUpdates]) {
    id v6 = _TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    id v6 = AppUpdateEntity;
  }
  id v7 = [v3 connection];

  id v8 = sub_1002FF3DC((uint64_t)v6, v7, v5);

  if (v8)
  {
    [v8 deleteFromDatabase];
  }
  else
  {
    id v9 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      uint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Unable to drop update with bundleID: %{public}@", (uint8_t *)&v13, 0x16u);
    }
  }
  return 1;
}

BOOL sub_1002E8858(BOOL a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    char v18 = 0;
    if ([v7 count])
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1002E8980;
      void v10[3] = &unk_100526CC0;
      id v11 = v7;
      id v12 = v8;
      int v13 = &v15;
      uint64_t v14 = a2;
      [(id)a1 modifyUsingTransaction:v10];
    }
    a1 = *((unsigned char *)v16 + 24) != 0;
    _Block_object_dispose(&v15, 8);
  }

  return a1;
}

void sub_1002E8968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E8980(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"bundle_id" values:*(void *)(a1 + 32)];
  unsigned int v5 = +[UpdatesManager shouldUseModernUpdates];
  char v6 = v5;
  if (v5) {
    id v7 = _TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    id v7 = AppUpdateEntity;
  }
  id v8 = [v3 connection];
  id v9 = sub_1002FF548((uint64_t)v7, v8, v4);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1002E8AC8;
  void v14[3] = &unk_100526C98;
  char v19 = v6;
  id v15 = v3;
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = v11;
  id v16 = v10;
  id v12 = v3;
  [v9 enumeratePersistentIDsUsingBlock:v14];

  return 1;
}

void sub_1002E8AC8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64)) {
    int v4 = _TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    int v4 = AppUpdateEntity;
  }
  id v5 = [v4 alloc];
  char v6 = [*(id *)(a1 + 32) connection];
  id v7 = [v5 initWithPersistentID:a2 onConnection:v6];

  if ([v7 existsInDatabase])
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      id v10 = sub_10026E95C(v7, @"bundle_id");
      uint64_t v11 = *(void *)(a1 + 56);
      int v13 = 138412802;
      uint64_t v14 = v9;
      __int16 v15 = 2114;
      id v16 = v10;
      __int16 v17 = 2048;
      uint64_t v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@][%{public}@] Setting update state to %ld", (uint8_t *)&v13, 0x20u);
    }
    id v12 = +[NSNumber numberWithInteger:*(void *)(a1 + 56)];
    [v7 setValue:v12 forProperty:@"update_state"];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

BOOL sub_1002E8C5C(BOOL a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  char v6 = v5;
  if (a1)
  {
    uint64_t v12 = 0;
    int v13 = &v12;
    uint64_t v14 = 0x2020000000;
    char v15 = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002E8D54;
    v8[3] = &unk_100526CE8;
    id v10 = &v12;
    uint64_t v11 = a2;
    id v9 = v5;
    [(id)a1 modifyUsingTransaction:v8];
    a1 = *((unsigned char *)v13 + 24) != 0;

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_1002E8D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E8D54(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_100375DBC(a2, *(void *)(a1 + 48), *(void **)(a1 + 32));
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1002E8DC8(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (a2 > 14499)
  {
    if (a2 <= 14501)
    {
      if (a2 == 14500)
      {
        int v4 = &stru_100526DC8;
        int64_t v5 = 14501;
      }
      else
      {
        int v4 = &stru_100526DE8;
        int64_t v5 = 14502;
      }
      goto LABEL_24;
    }
    if (a2 == 14502)
    {
      int v4 = &stru_100526E08;
      int64_t v5 = 16000;
      goto LABEL_24;
    }
    if (a2 == 16000)
    {
      int v4 = &stru_100526E28;
      int64_t v5 = 16004;
      goto LABEL_24;
    }
    if (a2 != 16004) {
      return;
    }
    int v4 = &stru_100526E48;
LABEL_22:
    int64_t v5 = 17000;
    goto LABEL_24;
  }
  if (a2 > 13000)
  {
    switch(a2)
    {
      case 13001:
        int v4 = &stru_100526D68;
        int64_t v5 = 14000;
        break;
      case 14000:
        int v4 = &stru_100526D88;
        int64_t v5 = 14001;
        break;
      case 14001:
        int v4 = &stru_100526DA8;
        int64_t v5 = 14500;
        break;
      default:
        return;
    }
    goto LABEL_24;
  }
  if (!a2)
  {
    int v4 = &stru_100526D28;
    goto LABEL_22;
  }
  if (a2 != 13000) {
    return;
  }
  int v4 = &stru_100526D48;
  int64_t v5 = 13001;
LABEL_24:
  *a3 = v5;
  id v6 = *a4;
  *a4 = v4;
}

void sub_1002E8F08(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS app_updates (pid INTEGER, bundle_id TEXT, current_version_release_date DATETIME, device_families INTEGER, install_date DATETIME, is_background INTEGER NOT NULL DEFAULT 0, is_b2b_custom_app INTEGER NOT NULL DEFAULT 0, is_code_signature_update INTEGER NOT NULL DEFAULT 0, is_offloaded INTEGER NOT NULL DEFAULT 0, is_per_device INTEGER NOT NULL DEFAULT 0, is_profile_validated INTEGER NOT NULL DEFAULT 0, metrics_data JSON, package_type INTEGER, purchase_id INTEGER DEFAULT 0, release_date DATETIME, software_platform INTEGER NOT NULL DEFAULT 0, store_item_data JSON, store_item_id INTEGER NOT NULL DEFAULT 0, store_software_version_id INTEGER, timestamp DATETIME DEFAULT (timestamp()), update_state INTEGER NOT NULL DEFAULT 0, UNIQUE(bundle_id) ON CONFLICT REPLACE,PRIMARY KEY (pid));",
      1,
      0);
    sub_1003D82F4((uint64_t)v2, @"CREATE TABLE IF NOT EXISTS mapi_app_update (pid INTEGER, BOOLean_property_mask INTEGER NOT NULL DEFAULT 0, bundle_id TEXT NOT NULL, install_date DATETIME, item_id INTEGER NOT NULL DEFAULT 0, metadata BLOB, metrics_data JSON, package_type INTEGER, store_software_version_id INTEGER, timestamp DATETIME DEFAULT (timestamp()), update_state INTEGER NOT NULL DEFAULT 0, UNIQUE(bundle_id) ON CONFLICT REPLACE,PRIMARY KEY (pid));",
      1,
      0);
  }
}

void sub_1002E8F74(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"DELETE FROM app_updates WHERE is_profile_validated = 1;", 1, 0);
  }
}

void sub_1002E8F98(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE app_updates ADD COLUMN current_version_release_date DATETIME;",
  }
      1,
      0);
}

void sub_1002E8FBC(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_updates ADD COLUMN device_families INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_updates ADD COLUMN software_platform INTEGER NOT NULL DEFAULT 0;",
      1,
      0);
  }
}

void sub_1002E902C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v3 = a2;
  uint64_t has_internal_content = os_variant_has_internal_content();
  if (v3 && has_internal_content) {
    sub_1003D82F4((uint64_t)v3, @"DELETE FROM app_updates WHERE is_app_clip", 0, 0);
  }
  _objc_release_x2(has_internal_content);
}

void sub_1002E9094(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE app_updates ADD COLUMN is_code_signature_update INTEGER NOT NULL DEFAULT 0;",
  }
      1,
      0);
}

void sub_1002E90B8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"CREATE TABLE IF NOT EXISTS mapi_app_update (pid INTEGER, BOOLean_property_mask INTEGER NOT NULL DEFAULT 0, bundle_id TEXT NOT NULL, install_date DATETIME, item_id INTEGER NOT NULL DEFAULT 0, metadata BLOB, metrics_data JSON, package_type INTEGER, store_software_version_id INTEGER, timestamp DATETIME DEFAULT (timestamp()), update_state INTEGER NOT NULL DEFAULT 0, UNIQUE(bundle_id) ON CONFLICT REPLACE,PRIMARY KEY (pid));",
  }
      1,
      0);
}

void sub_1002E90DC(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1003D82F4((uint64_t)a2, @"ALTER TABLE app_updates ADD COLUMN is_b2b_custom_app INTEGER NOT NULL DEFAULT 0;",
  }
      1,
      0);
}

void sub_1002E9100(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE app_updates ADD COLUMN package_type INTEGER;", 1, 0);
    sub_1003D82F4((uint64_t)v2, @"ALTER TABLE mapi_app_update ADD COLUMN package_type INTEGER;", 0, 0);
  }
}

id *sub_1002E9178(void *a1, void *a2)
{
  id v4 = a2;
  v8.receiver = a1;
  v8.super_class = (Class)_NavigationIndexClientState;
  int64_t v5 = (id *)objc_msgSendSuper2(&v8, "init");
  id v6 = v5;
  if (v5)
  {
    *((_WORD *)v5 + 4) = 2;
    objc_storeStrong(v5 + 2, a2);
  }

  return v6;
}

void sub_1002E9404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

AMSBagValue *__cdecl sub_1002E942C(id a1, AMSBagProtocol *a2)
{
  return (AMSBagValue *)[(AMSBagProtocol *)a2 BOOLForKey:@"arcade-in-spotlight-enabled"];
}

AMSBagValue *__cdecl sub_1002E943C(id a1, AMSBagProtocol *a2)
{
  return (AMSBagValue *)[(AMSBagProtocol *)a2 stringForKey:@"language-tag"];
}

void sub_1002E944C(uint64_t a1, void *a2)
{
  id v11 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = [v11 userInfo];
    int64_t v5 = [v4 objectForKeyedSubscript:AMSBagChangedNotificationUserInfoProfile];
    id v6 = [WeakRetained[1] profile];
    if ([v5 isEqualToString:v6])
    {
      id v7 = [v11 userInfo];
      objc_super v8 = [v7 objectForKeyedSubscript:AMSBagChangedNotificationUserInfoProfileVersion];
      id v9 = [WeakRetained[1] profileVersion];
      unsigned int v10 = [v8 isEqualToString:v9];

      if (v10) {
        sub_1002E95F4((uint64_t)WeakRetained, 0);
      }
    }
    else
    {
    }
  }
}

void sub_1002E95F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (_os_feature_enabled_impl())
    {
      id v4 = (*(void (**)(void))(*(void *)(a1 + 16) + 16))();
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      void v5[2] = sub_1002E99C4;
      v5[3] = &unk_100526ED0;
      void v5[4] = a1;
      id v6 = v3;
      [v4 valueWithCompletion:v5];
    }
    else
    {
      sub_1002E96E4(a1, 0, 0, v3);
    }
  }
}

void sub_1002E96E4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    if (a2) {
      unsigned __int8 v9 = 3;
    }
    else {
      unsigned __int8 v9 = 1;
    }
    unsigned __int8 v10 = atomic_exchange((atomic_uchar *volatile)(a1 + 48), v9);
    if ((v10 & 1) == 0)
    {
      double v24 = _NSConcreteStackBlock;
      uint64_t v25 = 3221225472;
      id v26 = sub_1002E9BD8;
      id v27 = &unk_100526EF8;
      uint64_t v28 = a1;
      id v11 = v7;
      id v29 = v11;
      uint64_t v12 = objc_retainBlock(&v24);
      id v13 = v11;
      id v14 = v8;
      char v15 = v12;
      id v16 = v15;
      if (v14)
      {
        if (objc_msgSend(v14, "BOOLValue", v24, v25, v26, v27, v28) != a2)
        {
          __int16 v17 = [_NavigationIndexClientState alloc];
          if (v17)
          {
            if (a2) {
              uint64_t v18 = v13;
            }
            else {
              uint64_t v18 = 0;
            }
            char v19 = sub_1002E9178(v17, v18);
          }
          else
          {
            char v19 = 0;
          }
          sub_1002E9C9C(a1, a2, v13, v19, v16);

          goto LABEL_24;
        }
        __int16 v21 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_22;
        }
        *(_WORD *)long long buf = 0;
        id v22 = "Spotlight blew away our old index, but we didn't want it anyway!";
      }
      else
      {
        if ((v10 & 4) == 0 || ((v10 & 2) == 0) == a2)
        {
          __int16 v23 = *(void **)(a1 + 40);
          *(void *)long long buf = _NSConcreteStackBlock;
          uint64_t v31 = 3221225472;
          uint64_t v32 = sub_1002EA0D0;
          double v33 = &unk_100526F20;
          uint64_t v34 = a1;
          uint64_t v36 = v15;
          id v35 = v13;
          objc_msgSend(v23, "fetchLastClientStateWithCompletionHandler:", buf, v24, v25, v26, v27, v28);

          goto LABEL_24;
        }
        __int16 v21 = ASDLogHandleForCategory();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
LABEL_22:

          ((void (*)(void ***, uint64_t, uint64_t))v16[2])(v16, a2, 1);
LABEL_24:

          goto LABEL_25;
        }
        *(_WORD *)long long buf = 0;
        id v22 = "Arcade enabled hasn't changed";
      }
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, v22, buf, 2u);
      goto LABEL_22;
    }
    id v20 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Coalesced value for arcadeEnabled", buf, 2u);
    }
  }
LABEL_25:
}

void sub_1002E99C4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (v7)
  {
    unsigned __int8 v9 = [v7 domain];
    if ([v9 isEqualToString:AMSErrorDomain]) {
      os_log_type_t v10 = 16 * ([v8 code] != (id)203);
    }
    else {
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
    }

    uint64_t v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, v10))
    {
      *(_DWORD *)long long buf = 138543362;
      id v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v12, v10, "Failed to load bag key for Arcade in Spotlight: %{public}@", buf, 0xCu);
    }
  }
  else
  {
    id v11 = (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 16))();
    uint64_t v12 = [v11 valueWithError:0];

    if (v12)
    {
      id v13 = +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/AppStoreDaemon.framework"];
      id v14 = [v13 localizations];
      uint64_t v18 = v12;
      char v15 = +[NSArray arrayWithObjects:&v18 count:1];
      id v16 = +[NSBundle preferredLocalizationsFromArray:v14 forPreferences:v15];
      __int16 v17 = [v16 firstObject];
    }
    else
    {
      __int16 v17 = 0;
    }
    sub_1002E96E4(*(void *)(a1 + 32), (uint64_t)[v6 BOOLValue], v17, *(void **)(a1 + 40));
  }
}

uint64_t sub_1002E9BD8(uint64_t result, int a2, int a3)
{
  if (a2) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  if (a3) {
    char v4 = 4;
  }
  else {
    char v4 = 0;
  }
  unsigned int v5 = atomic_exchange((atomic_uchar *volatile)(*(void *)(result + 32) + 48), v4 | v3);
  if (((((v5 & 2) == 0) ^ a2) & 1) == 0)
  {
    uint64_t v6 = result;
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v8 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Need to reindex again as the value was changed midflight.", v8, 2u);
    }

    return sub_1002E96E4(*(void *)(v6 + 32), (v5 >> 1) & 1, *(void *)(v6 + 40), 0);
  }
  return result;
}

void sub_1002E9C9C(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  LODWORD(v7) = a2;
  id v9 = a3;
  id v10 = a5;
  if (a1)
  {
    id v11 = *(void **)(a1 + 40);
    uint64_t v12 = a4;
    [v11 beginIndexBatch];
    if (v7)
    {
      id v13 = [objc_alloc((Class)CSSearchableItemAttributeSet) initWithContentType:UTTypeResolvable];
      id v42 = v10;
      +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/AppStoreDaemon.framework"];
      id v14 = v41 = (char)v7;
      [v14 localizedStringForKey:@"SPOTLIGHT_ARCADE_DISPLAY_NAME" value:0 table:0 localization:v9];
      v16 = id v15 = v9;
      [v13 setDisplayName:v16];

      __int16 v17 = +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/AppStoreDaemon.framework"];
      uint64_t v18 = [v17 localizedStringForKey:@"SPOTLIGHT_ARCADE_KEYWORDS" value:0 table:0 localization:v15];
      char v19 = sub_1002EA37C(v18);

      id v20 = +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/AppStoreDaemon.framework"];
      __int16 v21 = [v20 localizedStringForKey:@"SPOTLIGHT_ARCADE_CONTENT_DESCRIPTION_IOS" value:0 table:0 localization:v15];
      [v13 setContentDescription:v21];

      id v22 = +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/AppStoreDaemon.framework"];
      __int16 v23 = [v22 localizedStringForKey:@"SPOTLIGHT_ARCADE_KEYWORDS_IOS" value:0 table:0 localization:v15];
      double v24 = sub_1002EA37C(v23);
      id v7 = [v24 arrayByAddingObjectsFromArray:v19];

      id v9 = v15;
      [v13 setKeywords:v7];
      uint64_t v25 = +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/AppStoreDaemon.framework"];
      id v26 = [v25 resourceURL];
      id v27 = [v26 URLByAppendingPathComponent:@"arcade-120-rounded.png"];
      [v13 setThumbnailURL:v27];

      id v28 = objc_alloc((Class)CSSearchableItem);
      id v29 = [v28 initWithUniqueIdentifier:ASDUserActivityUniqueIdentifierArcadeTab domainIdentifier:0 attributeSet:v13];
      uint64_t v30 = +[NSDate distantFuture];
      [v29 setExpirationDate:v30];

      uint64_t v31 = *(void **)(a1 + 40);
      id v46 = v29;
      uint64_t v32 = +[NSArray arrayWithObjects:&v46 count:1];
      [v31 indexSearchableItems:v32 completionHandler:&stru_100526F40];

      id v10 = v42;
      LOBYTE(v7) = v41;
    }
    else
    {
      [*(id *)(a1 + 40) deleteAllSearchableItemsWithCompletionHandler:&stru_100526F60];
    }
    double v33 = *(void **)(a1 + 40);
    if (v12)
    {
      uint64_t v34 = (char *)[v12[2] length];
      id v35 = [objc_alloc((Class)NSMutableData) initWithLength:v34 + 2];
      __int16 v36 = *((_WORD *)v12 + 4);
      id v37 = v35;
      *(_WORD *)[v37 mutableBytes] = v36;
      id v38 = v12[2];
      id v39 = v37;
      objc_msgSend(v38, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", (char *)objc_msgSend(v39, "mutableBytes") + 2, v34, 0, 4, 0, 0, v34, 0);
      id v40 = [v39 copy];
    }
    else
    {
      id v40 = 0;
    }

    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_1002EA5B0;
    v43[3] = &unk_100526F88;
    id v44 = v10;
    char v45 = (char)v7;
    [v33 endIndexBatchWithClientState:v40 completionHandler:v43];
  }
}

void sub_1002EA0D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 48));
  if (v6)
  {
    id v8 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v25.receiver) = 138543362;
      *(id *)((char *)&v25.receiver + 4) = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to fetch last client state of Spotlight index: %{public}@", (uint8_t *)&v25, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_30;
  }
  id v9 = [_NavigationIndexClientState alloc];
  if (v9)
  {
    if ((v7 & 2) != 0) {
      id v10 = *(void **)(a1 + 40);
    }
    else {
      id v10 = 0;
    }
    id v11 = sub_1002E9178(v9, v10);
  }
  else
  {
    id v11 = 0;
  }
  uint64_t v12 = [_NavigationIndexClientState alloc];
  id v13 = v5;
  if (v12)
  {
    v25.receiver = v12;
    v25.super_class = (Class)_NavigationIndexClientState;
    uint64_t v12 = (_NavigationIndexClientState *)objc_msgSendSuper2(&v25, "init");
    if (v12)
    {
      id v14 = [v13 length];
      if (v14 != (id)1)
      {
        if (!v14)
        {
          v12->_version = 2;
LABEL_19:
          language = v12->_language;
          v12->_language = 0;
LABEL_20:

          goto LABEL_21;
        }
        [v13 getBytes:&v12->_version length:2];
        if (v12->_version == 2)
        {
          id v15 = (char *)[v13 length];
          id v16 = v15 - 2;
          if (v15 == (char *)2) {
            goto LABEL_21;
          }
          id v17 = objc_alloc((Class)NSString);
          language = objc_msgSend(v13, "subdataWithRange:", 2, v16);
          char v19 = (NSString *)[v17 initWithData:language encoding:4];
          id v20 = v12->_language;
          v12->_language = v19;

          goto LABEL_20;
        }
      }
      v12->_version = 0;
      goto LABEL_19;
    }
  }
LABEL_21:

  __int16 v21 = v11;
  id v22 = v21;
  if (v21
    && v12
    && v12->_version == *((unsigned __int16 *)v21 + 4)
    && ((__int16 v23 = v12->_language, v24 = (NSString *)v22[2], v23 == v24)
     || v24 && -[NSString isEqualToString:](v23, "isEqualToString:")))
  {

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {

    sub_1002E9C9C(*(void *)(a1 + 32), (v7 >> 1) & 1, *(void **)(a1 + 40), v22, *(void **)(a1 + 48));
  }

LABEL_30:
}

id sub_1002EA37C(void *a1)
{
  uint64_t v1 = [a1 componentsSeparatedByString:@"|"];
  uint64_t v2 = sub_1003923F8(v1, &stru_100526FA8);

  return v2;
}

void sub_1002EA3D8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  char v3 = ASDLogHandleForCategory();
  char v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138543362;
      id v6 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to add Arcade to Spotlight index: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Added Arcade to Spotlight index", (uint8_t *)&v5, 2u);
  }
}

void sub_1002EA4C4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  char v3 = ASDLogHandleForCategory();
  char v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138543362;
      id v6 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to delete Arcade from Spotlight index: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Deleted Arcade from Spotlight index", (uint8_t *)&v5, 2u);
  }
}

void sub_1002EA5B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = ASDLogHandleForCategory();
  int v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138543362;
      id v7 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to fetch last client state of Spotlight index: %{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v6) = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Spotlight index batch ended", (uint8_t *)&v6, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1002EA7CC(id a1, NSString *a2)
{
  uint64_t v2 = a2;
  id v3 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  char v4 = [(NSString *)v2 stringByTrimmingCharactersInSet:v3];

  return v4;
}

id sub_1002EA840(id a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)DigestVerifier;
    a1 = objc_msgSendSuper2(&v16, "init");
    if (a1)
    {
      id v6 = [v5 copy];
      id v7 = (void *)*((void *)a1 + 1);
      *((void *)a1 + 1) = v6;

      *((void *)a1 + 5) = a3;
      *((void *)a1 + 6) = a3;
      uint64_t v8 = *((void *)a1 + 1);
      if (v8 && (unint64_t v9 = *(unsigned int *)(v8 + 8), v9))
      {
        *((void *)a1 + 3) = a3 / v9;
        if (a3 % v9)
        {
LABEL_11:
          *((unsigned char *)a1 + 32) = 1;
          goto LABEL_12;
        }
      }
      else
      {
        *((void *)a1 + 3) = 0;
      }
      id v10 = [HashDigest alloc];
      uint64_t v11 = *((void *)a1 + 1);
      if (v11) {
        uint64_t v12 = *(void *)(v11 + 24);
      }
      else {
        uint64_t v12 = 0;
      }
      id v13 = sub_1003A42C0(v10, v12);
      id v14 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v13;

      goto LABEL_11;
    }
  }
LABEL_12:

  return a1;
}

uint64_t sub_1002EA924(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    return v2;
  }
  char v4 = sub_1003A4354(*(void *)(a1 + 16), a2);
  unint64_t v5 = *(void *)(v2 + 24);
  id v6 = *(void **)(v2 + 8);
  if (v6) {
    id v6 = (void *)v6[2];
  }
  id v7 = v6;
  id v8 = [v7 count];

  if (v5 >= (unint64_t)v8)
  {
    id v17 = *(id *)(v2 + 24);
    uint64_t v18 = *(void **)(v2 + 8);
    if (v18) {
      uint64_t v18 = (void *)v18[2];
    }
    char v19 = v18;
    if (v17 == [v19 count])
    {
      uint64_t v21 = *(void *)(v2 + 40);
      uint64_t v20 = *(void *)(v2 + 48);

      if (v20 == v21) {
        goto LABEL_27;
      }
      if (!a2)
      {
LABEL_20:
        *(unsigned char *)(v2 + 32) = 0;
        goto LABEL_27;
      }
    }
    else
    {

      if (!a2) {
        goto LABEL_20;
      }
    }
    ASDErrorWithDescription();
    *a2 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_20;
  }
  if (v4)
  {
    unint64_t v9 = *(void **)(v2 + 8);
    if (v9) {
      unint64_t v9 = (void *)v9[2];
    }
    id v10 = v9;
    uint64_t v11 = [v10 objectAtIndexedSubscript:*(void *)(v2 + 24)];
    *(unsigned char *)(v2 + 32) = [v4 isEqualToString:v11];

    if (!*(unsigned char *)(v2 + 32))
    {
      uint64_t v12 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *(void **)(v2 + 8);
        if (v30) {
          uint64_t v30 = (void *)v30[2];
        }
        uint64_t v31 = v30;
        uint64_t v32 = [v31 objectAtIndexedSubscript:*(void *)(v2 + 24)];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v34 = v4;
        __int16 v35 = 2112;
        __int16 v36 = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid hash '%@' expected '%@'", buf, 0x16u);
      }
      if (a2)
      {
        id v13 = *(void **)(v2 + 8);
        if (v13) {
          id v13 = (void *)v13[2];
        }
        id v14 = v13;
        id v15 = [v14 objectAtIndexedSubscript:*(void *)(v2 + 24)];
        objc_super v16 = +[NSString stringWithFormat:@"Invalid hash '%@' expected '%@'", v4, v15];

        ASDErrorWithDescription();
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_27;
    }
  }
  else
  {
    id v22 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v23 = *(void **)(v2 + 24);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v34 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Skipped chunk digest at index %lu", buf, 0xCu);
    }

    *(unsigned char *)(v2 + 32) = 1;
  }
  *(void *)(v2 + 4_Block_object_dispose(&a9, 8) = *(void *)(v2 + 40);
  ++*(void *)(v2 + 24);
LABEL_27:
  if (*(unsigned char *)(v2 + 32))
  {
    double v24 = [HashDigest alloc];
    uint64_t v25 = *(void *)(v2 + 8);
    if (v25) {
      uint64_t v26 = *(void *)(v25 + 24);
    }
    else {
      uint64_t v26 = 0;
    }
    id v27 = sub_1003A42C0(v24, v26);
  }
  else
  {
    id v27 = 0;
  }
  id v28 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = v27;

  uint64_t v2 = *(unsigned char *)(v2 + 32) != 0;
  return v2;
}

uint64_t sub_1002EAC60(uint64_t result, char *a2, unint64_t a3, void *a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 32)) {
      return 0;
    }
    unint64_t v5 = a2;
    uint64_t v6 = *(void *)(result + 8);
    if (v6 && (unint64_t v7 = *(unsigned int *)(v6 + 8), v7))
    {
      unint64_t v8 = *(void *)(result + 40);
      unint64_t v9 = v7 + (v8 / v7) * v7 - *(_DWORD *)(result + 40);
      unint64_t v10 = a3 - v9;
      if (a3 >= v9)
      {
        *(void *)(result + 40) = v8 + v9;
        sub_1003A44EC(*(void *)(result + 16), a2, v9);
        uint64_t result = sub_1002EA924(v4, a4);
        if (!result) {
          return result;
        }
        a2 = &v5[v9];
        *(void *)(v4 + 40) += v10;
        uint64_t v12 = *(void *)(v4 + 16);
        LODWORD(a3) = v10;
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v8 = *(void *)(result + 40);
    }
    *(void *)(result + 40) = v8 + a3;
    uint64_t v12 = *(void *)(result + 16);
LABEL_11:
    sub_1003A44EC(v12, a2, a3);
    return *(unsigned char *)(v4 + 32) != 0;
  }
  return result;
}

uint64_t sub_1002EAD44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7
        || (unint64_t v8 = *(unsigned int *)(v7 + 8), !v8)
        || (unint64_t v9 = v8
               + (*(void *)(a1 + 40) / v8) * v8
               - *(void *)(a1 + 40),
            (unint64_t)[v5 length] < v9))
      {
        sub_1002EAED0(a1, v6);
LABEL_7:
        a1 = *(unsigned char *)(a1 + 32) != 0;
        goto LABEL_26;
      }
      unint64_t v10 = objc_msgSend(v6, "subdataWithRange:", 0, v9);
      sub_1002EAED0(a1, v10);

      if (sub_1002EA924(a1, a3))
      {
        for (; v9 < (unint64_t)[v6 length]; v9 += v15)
        {
          uint64_t v11 = *(void *)(a1 + 8);
          if (v11) {
            uint64_t v12 = (char *)*(unsigned int *)(v11 + 8);
          }
          else {
            uint64_t v12 = 0;
          }
          id v13 = (char *)[v6 length];
          if (&v13[-v9] < v12) {
            uint64_t v12 = &v13[-v9];
          }
          id v14 = objc_msgSend(v6, "subdataWithRange:", v9, v12);
          sub_1002EAED0(a1, v14);

          uint64_t v15 = *(void *)(a1 + 8);
          if (v15) {
            objc_super v16 = (char *)*(unsigned int *)(v15 + 8);
          }
          else {
            objc_super v16 = 0;
          }
          if (v12 == v16)
          {
            if (!sub_1002EA924(a1, a3)) {
              goto LABEL_7;
            }
            uint64_t v15 = *(void *)(a1 + 8);
          }
          if (v15) {
            uint64_t v15 = *(unsigned int *)(v15 + 8);
          }
        }
        goto LABEL_7;
      }
    }
    a1 = 0;
  }
LABEL_26:

  return a1;
}

void sub_1002EAED0(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    *(void *)(a1 + 40) += [v3 length];
    sub_1003A4524(*(id *)(a1 + 16), v3);
  }
}

id sub_1002EAF7C(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = [a1 options];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 clientInfo];
    uint64_t v4 = v3;
    if (v3)
    {
      id v5 = [v3 accountMediaType];
      id v6 = [v5 isEqualToString:AMSAccountMediaTypeAppStoreSandbox];
    }
    else
    {
      id v6 = 0;
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_1002EB014(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [a1 options];
    id v6 = [v2 copy];

    [v6 setAuthenticationType:1];
    [v6 setAllowServerDialogs:0];
    id v3 = [v6 debugReason];
    uint64_t v4 = v3;
    if (v3)
    {
      id v5 = [v3 stringByAppendingFormat:@" %@", @"(forced silent authentication)"];
      [v6 setDebugReason:v5];
    }
    else
    {
      [v6 setDebugReason:@"(forced silent authentication)"];
    }
    [a1 setOptions:v6];
  }
}

void sub_1002EB0FC(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = [a1 options];
    id v8 = [v4 copy];

    [v8 setProxyAppBundleID:v3];
    id v5 = [v8 debugReason];
    id v6 = v5;
    if (v5)
    {
      uint64_t v7 = [v5 stringByAppendingFormat:@" %@", @"(forced proxied authentication)"];
      [v8 setDebugReason:v7];
    }
    else
    {
      [v8 setDebugReason:@"(forced proxied authentication)"];
    }
    [a1 setOptions:v8];
  }
}

BOOL sub_1002EB368(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__availableBytes;
            goto LABEL_37;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            uint64_t v14 = 0;
            uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__availableBytes;
            goto LABEL_40;
          }
        }
        uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__availableBytes;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0;
        }
LABEL_40:
        *(void *)(a1 + *v1_Block_object_dispose(&a9, 8) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0;
    *(unsigned char *)(a1 + 24) |= 2u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__totalBytes;
        goto LABEL_38;
      }
      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        uint64_t v14 = 0;
        uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__totalBytes;
        goto LABEL_40;
      }
    }
    uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__totalBytes;
LABEL_37:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id *sub_1002EB86C(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)PushTypesTask;
    char v16 = (id *)objc_msgSendSuper2(&v18, "init");
    a1 = v16;
    if (v16)
    {
      objc_storeStrong(v16 + 7, a3);
      objc_storeStrong(a1 + 8, a4);
      objc_storeStrong(a1 + 10, a5);
      a1[9] = a2;
      objc_storeStrong(a1 + 5, a6);
    }
  }

  return a1;
}

id sub_1002EC390(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"bundle_id"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002EC3C8(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"bundle_key"];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1002EC400(id result)
{
  if (result)
  {
    uint64_t v1 = [result valueForProperty:@"always_preserved"];
    id v2 = [v1 BOOLValue];

    return v2;
  }
  return result;
}

id sub_1002EC448(void *a1)
{
  if (a1)
  {
    a1 = [a1 valueForProperty:@"name"];
    uint64_t v1 = vars8;
  }
  return a1;
}

double sub_1002EC480(void *a1)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v1 = [a1 valueForProperty:@"preservation_priority"];
  [v1 doubleValue];
  double v3 = v2;

  return v3;
}

void sub_1002EC4D4(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = +[NSNumber numberWithBool:a2];
    [a1 setValue:v3 forProperty:@"always_preserved"];
  }
}

void sub_1002EC544(void *a1)
{
  if (a1)
  {
    +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    [a1 setValue:v2 forProperty:@"preservation_priority"];
  }
}

id *sub_1002EC6E8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)PromptForAccountTask;
    a1 = (id *)objc_msgSendSuper2(&v10, "init");
    if (a1)
    {
      id v7 = [v5 copy];
      id v8 = a1[5];
      a1[5] = v7;

      objc_storeStrong(a1 + 8, a3);
      *((unsigned char *)a1 + 49) = 1;
    }
  }

  return a1;
}

void sub_1002ECD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1002ECDA8(uint64_t a1, void *a2, void *a3)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v10 = a2;
  id v6 = a3;
  uint64_t v7 = ASDErrorWithSafeUserInfo();

  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void *sub_1002ECEFC(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = [a1 init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      uint64_t v6 = objc_opt_new();
      uint64_t v7 = (void *)a1[2];
      a1[2] = v6;
    }
  }

  return a1;
}

id *sub_1002ECF70(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    a1 = [a1 init];
    if (a1)
    {
      id v4 = [v3 objectForKey:@"attempts"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        a1[3] = [v4 integerValue];
      }
      id v5 = [v3 objectForKey:@"type"];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        objc_storeStrong(a1 + 1, v5);
      }
      uint64_t v6 = [v3 objectForKey:@"values"];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        objc_storeStrong(a1 + 2, v6);
      }
    }
  }

  return a1;
}

void *sub_1002ED088(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = objc_opt_new();
    id v3 = +[NSNumber numberWithUnsignedInteger:v1[3]];
    [v2 setObject:v3 forKey:@"attempts"];

    uint64_t v4 = v1[1];
    if (v4) {
      [v2 setObject:v4 forKey:@"type"];
    }
    uint64_t v5 = v1[2];
    if (v5) {
      [v2 setObject:v5 forKey:@"values"];
    }
    id v6 = [v2 copy];

    return v6;
  }
  return result;
}

id sub_1002ED13C(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  id v2 = [*(id *)(a1 + 16) objectForKey:a2];
  id v3 = [v2 copy];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {

    return 0;
  }
  return v3;
}

void sub_1002ED1A4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = (uint64_t)v7;
    if (!v7)
    {
      uint64_t v6 = +[NSNull null];
    }
    id v7 = (id)v6;
    [*(id *)(a1 + 16) setObject:v6 forKey:v5];
  }
}

id sub_1002ED270()
{
  self;
  if (qword_1005B0EB0 != -1) {
    dispatch_once(&qword_1005B0EB0, &stru_100527040);
  }
  uint64_t v0 = (void *)qword_1005B0EA8;
  return v0;
}

void sub_1002ED2C8(id a1)
{
  uint64_t v1 = objc_alloc_init(AppInstallScheduler);
  id v2 = (void *)qword_1005B0EA8;
  qword_1005B0EA8 = (uint64_t)v1;
}

void sub_1002ED4A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2
    && ([*(id *)(v2 + 72) modifyUsingTransaction:&stru_100527238], (uint64_t v3 = *(void *)(a1 + 32)) != 0))
  {
    uint64_t v4 = +[NSNotificationCenter defaultCenter];
    id v5 = sub_100354F64();
    [v4 addObserver:v3 selector:"_handlePolicyNotificationWithMonitorStateDidChangeNotification:" name:@"CellularStateDidChangeNotification" object:v5];

    uint64_t v6 = sub_100259614();
    [v4 addObserver:v3 selector:"_handlePolicyNotificationWithMonitorStateDidChangeNotification:" name:@"NetworkStateDidChangeNotification" object:v6];

    id v7 = sub_1002C144C();
    [v4 addObserver:v3 selector:"_handlePolicyNotificationWithMonitorStateDidChangeNotification:" name:@"PowerStateDidChangeNotification" object:v7];

    uint64_t v8 = sub_100400794();
    [v4 addObserver:v3 selector:"_handlePolicyNotificationWithMonitorStateDidChangeNotification:" name:@"ThermalPressureStateDidChangeNotification" object:v8];

    uint64_t v9 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_1002ED688(v9);
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    uint64_t v11 = +[NSNotificationCenter defaultCenter];
    uint64_t v12 = sub_10026CA24();
    [v11 addObserver:v10 selector:"_handleDeviceStateDidChangeNotification:" name:@"DeviceStateDidChangeNotification" object:v12];

    uint64_t v13 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  sub_1002ED864(v13);
}

void sub_1002ED688(uint64_t a1)
{
  if (a1)
  {
    uint64_t v6 = 0;
    id v7 = &v6;
    uint64_t v8 = 0x3032000000;
    uint64_t v9 = sub_100018138;
    uint64_t v10 = sub_100017C58;
    id v11 = 0;
    uint64_t v1 = *(void **)(a1 + 72);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1002F149C;
    v5[3] = &unk_100522CF8;
    void v5[4] = &v6;
    [v1 readUsingSession:v5];
    if (v7[5])
    {
      uint64_t v2 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = v7[5];
        *(_DWORD *)long long buf = 138543362;
        uint64_t v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scheduling next optimal download for %{public}@", buf, 0xCu);
      }

      uint64_t v4 = sub_10020E0BC();
      sub_10020F30C(v4, 10, @"OptimalDownloadWindow", v7[5], @"Wait for optimal download window");
    }
    else
    {
      uint64_t v4 = sub_10020E0BC();
      sub_10020FFE0((uint64_t)v4, 10);
    }

    _Block_object_dispose(&v6, 8);
  }
}

void sub_1002ED840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002ED864(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10026CA24();
    if (sub_10026D18C((uint64_t)v2))
    {
      uint64_t v3 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Device is locked.", buf, 2u);
      }
    }
    else
    {
      uint64_t v4 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"IFNULL(app_install.phase, 10)" values:&off_10054DEC0];
      v38[0] = v4;
      id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"approved" equalToValue:&__kCFBooleanFalse];
      v38[1] = v5;
      uint64_t v6 = +[NSArray arrayWithObjects:v38 count:2];
      id v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

      *(void *)long long buf = 0;
      double v33 = buf;
      uint64_t v34 = 0x3032000000;
      __int16 v35 = sub_100018138;
      __int16 v36 = sub_100017C58;
      id v37 = 0;
      uint64_t v8 = *(void **)(a1 + 72);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_1002EF02C;
      v29[3] = &unk_100523E38;
      uint64_t v31 = buf;
      uint64_t v3 = v7;
      uint64_t v30 = v3;
      [v8 readUsingSession:v29];
      if ([*((id *)v33 + 5) unsignedIntegerValue])
      {
        if (_os_feature_enabled_impl())
        {
          uint64_t v9 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id v39 = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Background scheduling devive security approval", v39, 2u);
          }

          uint64_t v10 = *(void **)(a1 + 72);
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472;
          void v27[2] = sub_1002EF0C0;
          void v27[3] = &unk_1005236D0;
          id v28 = v3;
          [v10 modifyUsingTransaction:v27];
        }
        else
        {
          id v11 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id v39 = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Duet scheduling devive security approval", v39, 2u);
          }

          uint64_t v12 = [_TtC9appstored22DeviceSecurityActivity alloc];
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          void v25[2] = sub_1002EF2F0;
          void v25[3] = &unk_1005218C0;
          v25[4] = a1;
          uint64_t v26 = v3;
          uint64_t v13 = [(DeviceSecurityActivity *)v12 initWithBlock:v25];
          uint64_t v14 = sub_10020E0BC();
          sub_10020E988((uint64_t)v14, v13, @"Unlocked with unapproved installations");
        }
      }
      if (!*(unsigned char *)(a1 + 80))
      {
        *(unsigned char *)(a1 + 80) = 1;
        uint64_t v15 = @"Device Unlocked";
        uint64_t v16 = objc_alloc_init(_TtC9appstored6LogKey);
        BOOL v17 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v39 = 138412546;
          id v40 = v16;
          __int16 v41 = 2114;
          CFStringRef v42 = @"Device Unlocked";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Checking for incomplete coordinators with reason: %{public}@", v39, 0x16u);
        }

        objc_super v18 = objc_alloc_init(CompleteRestoreCoordinatorsTask);
        unsigned int v20 = v18;
        if (v18)
        {
          objc_setProperty_nonatomic_copy(v18, v19, @"com.apple.appstored", 40);
          objc_setProperty_nonatomic_copy(v20, v21, v16, 48);
          objc_setProperty_nonatomic_copy(v20, v22, @"Device Unlocked", 56);
        }
        uint64_t v23 = sub_1002B2A3C();
        double v24 = (void *)v23;
        if (v23) {
          [*(id *)(v23 + 8) addOperation:v20];
        }
      }
      _Block_object_dispose(buf, 8);
    }
  }
}

void sub_1002EDD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1002EDDA0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 8);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1002EDE1C;
    void v3[3] = &unk_100521B80;
    v3[4] = a1;
    void v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_1002EDE1C(uint64_t a1)
{
}

void sub_1002EDE28(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    uint64_t v4 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = sub_1003A4A20(a2);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Polling scheduler: [%{public}@]", (uint8_t *)&buf, 0xCu);
    }
    memset(v52, 0, sizeof(v52));
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v6 = sub_1002B2B80(*(id **)(a1 + 64));
    id v7 = [v6 countByEnumeratingWithState:v52 objects:&buf count:16];
    if (v7)
    {
      uint64_t v8 = **(void **)&v52[16];
      while (2)
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (**(void **)&v52[16] != v8) {
            objc_enumerationMutation(v6);
          }
          uint64_t v10 = *(void **)(*(void *)&v52[8] + 8 * i);
          objc_opt_class();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && ([v10 isCancelled] & 1) == 0)
          {
            uint64_t v14 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)id v38 = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Skipping system app bootstrap - pending task already exists", v38, 2u);
            }

            goto LABEL_22;
          }
        }
        id v7 = [v6 countByEnumeratingWithState:v52 objects:&buf count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }

    *(void *)id v38 = 0;
    id v39 = v38;
    uint64_t v40 = 0x3032000000;
    __int16 v41 = sub_100018138;
    CFStringRef v42 = sub_100017C58;
    id v43 = 0;
    id v11 = *(dispatch_queue_t ***)(a1 + 72);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_1002EE728;
    v37[3] = &unk_100527090;
    void v37[4] = v38;
    sub_1003E1CF8(v11, v37);
    uint64_t v12 = (void *)*((void *)v39 + 5);
    if (v12)
    {
      objc_initWeak(&location, v12);
      uint64_t v30 = _NSConcreteStackBlock;
      uint64_t v31 = 3221225472;
      uint64_t v32 = sub_1002EE900;
      double v33 = &unk_100527140;
      objc_copyWeak(&v35, &location);
      uint64_t v34 = a1;
      [*((id *)v39 + 5) setCompletionBlock:&v30];
      uint64_t v13 = *(void *)(a1 + 64);
      if (v13) {
        objc_msgSend(*(id *)(v13 + 8), "addOperation:", *((void *)v39 + 5), v30, v31, v32, v33);
      }
      objc_destroyWeak(&v35);
      objc_destroyWeak(&location);
    }
    else
    {
      sub_1002EEF58(a1);
    }
    _Block_object_dispose(v38, 8);

LABEL_22:
    id v15 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v16 = sub_100400794();
    BOOL v17 = sub_100400B20((uint64_t)v16);

    if (v17) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = 3;
    }
    if (v17)
    {
      char v19 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Limiting maximum active count due to thermal pressure", (uint8_t *)&buf, 2u);
      }
    }
    uint64_t v20 = objc_opt_new();
    SEL v21 = *(dispatch_queue_t ***)(a1 + 72);
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    char v45 = sub_1002F0274;
    id v46 = &unk_100527218;
    uint64_t v50 = v18;
    uint64_t v47 = a1;
    id v48 = (id)v20;
    id v22 = v15;
    id v49 = v22;
    BOOL v51 = v17;
    id v23 = (id)v20;
    sub_1003E1CF8(v21, &buf);
    LOBYTE(v20) = [v22 count] == 0;
    double v24 = ASDLogHandleForCategory();
    BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (v25)
      {
        *(_WORD *)uint64_t v52 = 0;
        id v27 = "Polling completed, started 0 installations";
        id v28 = v24;
        uint32_t v29 = 2;
        goto LABEL_34;
      }
    }
    else if (v25)
    {
      id v26 = [v22 count];
      *(_DWORD *)uint64_t v52 = 134218242;
      *(void *)&void v52[4] = v26;
      *(_WORD *)&v52[12] = 2114;
      *(void *)&v52[14] = v22;
      id v27 = "Polling completed, started %lu installation(s): %{public}@";
      id v28 = v24;
      uint32_t v29 = 22;
LABEL_34:
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, v52, v29);
    }
  }
}

void sub_1002EE33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1002EE378(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002EE3F4;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002EE3F4(uint64_t a1)
{
}

void *sub_1002EE3FC(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v3 = (void *)v1[9];
    uint64_t v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    uint64_t v8 = sub_1002EE510;
    uint64_t v9 = &unk_100522C00;
    id v10 = v2;
    id v4 = v2;
    [v3 readUsingSession:&v6];
    CFStringRef v11 = @"items";
    id v12 = v4;
    uint64_t v1 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1, v6, v7, v8, v9);
  }
  return v1;
}

void sub_1002EE510(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 connection];
  id v5 = sub_1003F8A7C();
  uint64_t v6 = sub_1002FF548((uint64_t)AppInstallEntity, v4, v5);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002EE618;
  v8[3] = &unk_100522A90;
  id v9 = v3;
  id v10 = *(id *)(a1 + 32);
  id v7 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v8];
}

void sub_1002EE618(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  CFStringRef v11 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = sub_1002C1EE8(v11);
  uint64_t v8 = [(SQLiteEntity *)v11 valueForProperty:@"phase"];
  id v9 = [(SQLiteEntity *)v11 valueForProperty:@"coordinator_id"];
  id v10 = +[NSString stringWithFormat:@"%@ phase: %@ coordinator: %@", v7, v8, v9];
  [v6 addObject:v10];
}

uint64_t sub_1002EE728(uint64_t a1, void *a2)
{
  id v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002EE8DC;
  v12[3] = &unk_100527068;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  id v13 = v4;
  sub_1002D1158(v3, 1, v12);

  id v5 = [v4 count];
  uint64_t v6 = ASDLogHandleForCategory();
  id v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [v4 count];
      *(_DWORD *)long long buf = 134217984;
      id v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Queuing %lu system app(s) for bootstrap", buf, 0xCu);
    }

    id v9 = sub_1001F60B8((id *)[SystemAppBootstrapTask alloc], v4);
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(NSObject **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Skipping system app bootstrap - no installations pending", buf, 2u);
  }

  return 1;
}

uint64_t sub_1002EE8DC(uint64_t a1, uint64_t a2)
{
  return 1;
}

void sub_1002EE900(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002EE9A0;
  v6[3] = &unk_1005218C0;
  id v7 = WeakRetained;
  uint64_t v8 = v3;
  id v5 = WeakRetained;
  dispatch_async(v4, v6);
}

void sub_1002EE9A0(uint64_t a1)
{
  id v2 = *(unsigned char **)(a1 + 32);
  if (v2 && (v2[24] & 1) != 0)
  {
    BOOL v17 = *(dispatch_queue_t ***)(*(void *)(a1 + 40) + 72);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_1002EECB8;
    void v22[3] = &unk_100527118;
    uint64_t v6 = (id *)&v23;
    id v23 = v2;
    sub_1003E1CF8(v17, v22);
    sub_1002EEF58(*(void *)(a1 + 40));
    sub_1002EDE28(*(void *)(a1 + 40), 4);
  }
  else
  {
    uint64_t v3 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v4, 32, 1);
      }
      id v19 = Property;
      LODWORD(handler) = 138543362;
      *(void *)((char *)&handler + 4) = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Bootstrapping system applications will be reset after error: %{public}@", (uint8_t *)&handler, 0xCu);
    }
    id v5 = *(dispatch_queue_t ***)(*(void *)(a1 + 40) + 72);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_1002EEFC0;
    void v20[3] = &unk_100527118;
    uint64_t v6 = &v21;
    id v21 = *(id *)(a1 + 32);
    sub_1003E1CF8(v5, v20);
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v7 + 8));
      if (!*(void *)(v7 + 40))
      {
        uint64_t v8 = *(void **)(v7 + 48);
        if (!v8)
        {
          uint64_t v9 = +[NSDate dateWithTimeIntervalSinceNow:3600.0];
          uint64_t v10 = *(void **)(v7 + 48);
          *(void *)(v7 + 4_Block_object_dispose(&a9, 8) = v9;

          uint64_t v8 = *(void **)(v7 + 48);
        }
        [v8 timeIntervalSinceNow];
        if (v11 > 0.0)
        {
          dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v7 + 8));
          id v13 = *(void **)(v7 + 40);
          *(void *)(v7 + 40) = v12;

          uint64_t v14 = *(NSObject **)(v7 + 40);
          dispatch_time_t v15 = dispatch_time(0, 300000000000);
          dispatch_source_set_timer(v14, v15, 0x45D964B800uLL, 0xDF8475800uLL);
          objc_initWeak(&location, (id)v7);
          uint64_t v16 = *(NSObject **)(v7 + 40);
          *(void *)&long long handler = _NSConcreteStackBlock;
          *((void *)&handler + 1) = 3221225472;
          id v26 = sub_1002F175C;
          id v27 = &unk_100525760;
          objc_copyWeak(&v28, &location);
          dispatch_source_set_event_handler(v16, &handler);
          dispatch_resume(*(dispatch_object_t *)(v7 + 40));
          objc_destroyWeak(&v28);
          objc_destroyWeak(&location);
        }
      }
    }
  }
}

uint64_t sub_1002EECB8(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 48, 1);
  }
  id v6 = Property;
  uint64_t v7 = sub_100392558(v6, &stru_1005270D0);
  id v8 = sub_100238EC0(v4, v7);

  id v10 = *(id *)(a1 + 32);
  if (v10) {
    id v10 = objc_getProperty(v10, v9, 48, 1);
  }
  id v11 = v10;
  dispatch_source_t v12 = sub_100392558(v11, &stru_1005270F0);

  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = v12;
  id v13 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v15) {
          objc_enumerationMutation(obj);
        }
        BOOL v17 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        uint64_t v18 = [v17 valueForProperty:@"failure_error"];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v18 error:0];
        }
        else {
        id v19 = ASDErrorWithDescription();
        }
        sub_1002357D4((id *)v4, (uint64_t)[v17 databaseID], v19, 1);
      }
      id v14 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v14);
  }

  return 1;
}

BOOL sub_1002EEF00(id a1, AppInstall *a2)
{
  return sub_10026E91C(a2, @"phase") != (id)-20;
}

BOOL sub_1002EEF2C(id a1, AppInstall *a2)
{
  return sub_10026E91C(a2, @"phase") == (id)-20;
}

void sub_1002EEF58(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    id v2 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;

    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_source_cancel(v3);
      id v4 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;
    }
  }
}

uint64_t sub_1002EEFC0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = a2;
  if (v2) {
    id Property = objc_getProperty(v2, v3, 32, 1);
  }
  else {
    id Property = 0;
  }
  id v6 = Property;
  sub_1002D0E7C(v4, 1, v6);

  return 1;
}

void sub_1002EF02C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v7 = [a2 connection];
  uint64_t v4 = sub_1002FF80C((uint64_t)AppInstallEntity, @"ROWID", v3, v7);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

uint64_t sub_1002EF0C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 connection];
  uint64_t v5 = sub_1002FF548((uint64_t)AppInstallEntity, v4, *(void **)(a1 + 32));

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1002EF1D4;
  void v10[3] = &unk_100523780;
  id v11 = v3;
  id v6 = v3;
  [v5 enumeratePersistentIDsUsingBlock:v10];
  if (v6)
  {
    id v8 = objc_getProperty(v6, v7, 24, 1);
    if (v8) {
      v8[16] |= 2uLL;
    }
  }
  else
  {
    id v8 = 0;
  }

  return 1;
}

void sub_1002EF1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = sub_1002C1EE8(v6);
    int v9 = 138412290;
    id v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Installation device security approved", (uint8_t *)&v9, 0xCu);
  }
  [(SQLiteEntity *)v6 setValue:&__kCFBooleanTrue forProperty:@"approved"];
}

void sub_1002EF2F0(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 72);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1002EF380;
  v2[3] = &unk_1005236D0;
  id v3 = *(id *)(a1 + 40);
  [v1 modifyUsingTransaction:v2];
}

uint64_t sub_1002EF380(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 connection];
  uint64_t v5 = sub_1002FF548((uint64_t)AppInstallEntity, v4, *(void **)(a1 + 32));

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1002EF494;
  void v10[3] = &unk_100523780;
  id v11 = v3;
  id v6 = v3;
  [v5 enumeratePersistentIDsUsingBlock:v10];
  if (v6)
  {
    id v8 = objc_getProperty(v6, v7, 24, 1);
    if (v8) {
      v8[16] |= 2uLL;
    }
  }
  else
  {
    id v8 = 0;
  }

  return 1;
}

void sub_1002EF494(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  id v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = sub_1002C1EE8(v6);
    int v9 = 138412290;
    id v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Installation device security approved", (uint8_t *)&v9, 0xCu);
  }
  [(SQLiteEntity *)v6 setValue:&__kCFBooleanTrue forProperty:@"approved"];
}

void sub_1002EF624(uint64_t a1)
{
  id v2 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Device unlock state did change", v3, 2u);
  }

  sub_1002ED864(*(void *)(a1 + 32));
}

void sub_1002EF69C(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 16);
    if (!v5 || ([v5 timeIntervalSinceDate:v4], v6 >= 0.0))
    {
      objc_storeStrong((id *)(a1 + 16), a2);
      id v7 = *(NSObject **)(a1 + 24);
      if (v7) {
        dispatch_source_cancel(v7);
      }
      id v8 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138543362;
        id v18 = v4;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Starting flap timer to fire at: %{public}@", buf, 0xCu);
      }

      dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 8));
      id v10 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v9;

      id v11 = *(void **)(a1 + 16);
      dispatch_source_t v12 = *(NSObject **)(a1 + 24);
      if (v11)
      {
        [v11 timeIntervalSinceNow];
        dispatch_time_t v14 = dispatch_time(0, 1000000000 * (uint64_t)v13);
      }
      else
      {
        dispatch_time_t v14 = 0;
      }
      dispatch_source_set_timer(v12, v14, 0xFFFFFFFFFFFFFFFFLL, 0x12A05F200uLL);
      uint64_t v15 = *(NSObject **)(a1 + 24);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1002EF868;
      handler[3] = &unk_100521388;
      void handler[4] = a1;
      dispatch_source_set_event_handler(v15, handler);
      dispatch_resume(*(dispatch_object_t *)(a1 + 24));
    }
  }
}

uint64_t sub_1002EF868(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  return sub_1002EDE28(v4, 0x40000);
}

id sub_1002EF978(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_1002EFA20(uint64_t a1)
{
  BOOL v2 = *(unsigned char *)(*(void *)(a1 + 32) + 32) == 0;
  id v3 = ASDLogHandleForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = [*(id *)(a1 + 40) name];
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Monitor state did change: %{public}@", (uint8_t *)&buf, 0xCu);
    }
    double v6 = [*(id *)(a1 + 40) name];
    unsigned int v7 = [v6 isEqualToString:@"ThermalPressureStateDidChangeNotification"];

    if (v7)
    {
      id v8 = sub_100400794();
      BOOL v9 = sub_100400B20((uint64_t)v8);

      if (v9)
      {
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v29 = 0x3032000000;
        uint64_t v30 = sub_100018138;
        uint64_t v31 = sub_100017C58;
        id v32 = 0;
        id v10 = *(dispatch_queue_t ***)(*(void *)(a1 + 32) + 72);
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        void v23[2] = sub_1002EFDA8;
        v23[3] = &unk_100527090;
        void v23[4] = &buf;
        sub_1003E1CF8(v10, v23);
        if ([*(id *)(*((void *)&buf + 1) + 40) count])
        {
          id v11 = sub_1003923F8(*(id *)(*((void *)&buf + 1) + 40), &stru_100527180);
          dispatch_source_t v12 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            id v19 = [v11 count];
            *(_DWORD *)long long v24 = 134218242;
            id v25 = v19;
            __int16 v26 = 2114;
            id v27 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Jettisoned %lu installation(s) due to thermal pressure: %{public}@", v24, 0x16u);
          }
        }
        _Block_object_dispose(&buf, 8);
      }
    }
    else
    {
      double v13 = [*(id *)(a1 + 40) name];
      unsigned int v14 = [v13 isEqualToString:@"NetworkStateDidChangeNotification"];

      if (v14)
      {
        uint64_t v15 = sub_100259614();
        unsigned __int8 v16 = [v15 isConstrained];
        unsigned __int8 v17 = [v15 isExpensive];
        id v18 = *(void **)(*(void *)(a1 + 32) + 72);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        void v20[2] = sub_1002EFDFC;
        void v20[3] = &unk_1005271C8;
        unsigned __int8 v21 = v17;
        unsigned __int8 v22 = v16;
        [v18 modifyUsingTransaction:v20];
      }
    }
    sub_1002EDE28(*(void *)(a1 + 32), 4096);
  }
  else
  {
    if (v4)
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Ignoring policy state change notifications", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1002EFD7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EFDA8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002D14D8(a2, 1uLL, 4uLL);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

id sub_1002EFDF4(id a1, AppInstall *a2)
{
  return sub_100424C14(a2);
}

uint64_t sub_1002EFDFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054C450];
  uint64_t v5 = [v3 connection];
  double v6 = sub_1002FF548((uint64_t)AppInstallEntity, v5, v4);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002EFF10;
  void v9[3] = &unk_1005271A8;
  id v10 = v3;
  __int16 v11 = *(_WORD *)(a1 + 32);
  id v7 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v9];

  return 1;
}

void sub_1002EFF10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [AppInstallEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  double v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  sub_1002C2130(v6);
  id v7 = (id *)objc_claimAutoreleasedReturnValue();
  id v8 = v7;
  if (!*(unsigned char *)(a1 + 40)
    || ((v9 = sub_1003D4CF0(v7), (unint64_t)v9 <= 4) ? (BOOL v10 = ((1 << (char)v9) & 0x15) == 0) : (BOOL v10 = 1), v10))
  {
    int v13 = 1;
  }
  else
  {
    __int16 v11 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      dispatch_source_t v12 = sub_1002C1EE8(v6);
      int v26 = 138412290;
      id v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%@] Installation remaining paused for expensive network", (uint8_t *)&v26, 0xCu);
    }
    int v13 = 0;
  }
  if (*(unsigned char *)(a1 + 41))
  {
    unsigned int v14 = sub_1003D4C34(v8);
    if ((unint64_t)v14 <= 4 && ((1 << (char)v14) & 0x15) != 0)
    {
      unsigned __int8 v16 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v17 = sub_1002C1EE8(v6);
        int v26 = 138412290;
        id v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] Installation remaining paused for low data network", (uint8_t *)&v26, 0xCu);
      }
LABEL_27:

      goto LABEL_28;
    }
  }
  if (v13)
  {
    id v18 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = sub_1002C1EE8(v6);
      int v26 = 138412290;
      id v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%@] Resuming installation paused for policy", (uint8_t *)&v26, 0xCu);
    }
    [(SQLiteEntity *)v6 setValue:&off_10054C468 forProperty:@"phase"];
    unsigned __int8 v16 = sub_10026E9D4(v6, @"coordinator_id");
    if (v16)
    {
      uint64_t v20 = sub_10026E95C(v6, @"bundle_id");
      unsigned __int8 v22 = sub_10027918C((uint64_t)lib_IXAppInstallCoordinatorTag, v16, v20);
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v21, 24, 1);
      }
      id v24 = Property;
      sub_100286990((uint64_t)v24, v22);
    }
    else
    {
      uint64_t v20 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        id v25 = sub_1002C1EE8(v6);
        int v26 = 138412290;
        id v27 = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[%@] Unable to resume coordinator, no identifier was recorded", (uint8_t *)&v26, 0xCu);
      }
    }

    goto LABEL_27;
  }
LABEL_28:
}

uint64_t sub_1002F0274(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 56);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  void v50[2] = sub_1002F07E4;
  void v50[3] = &unk_1005271F0;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v51 = v5;
  uint64_t v52 = v6;
  id v53 = v7;
  id v37 = (id *)v5;
  self = sub_1002D1BF8(v5, v4, v50);
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v41 = a1;
  id v8 = *(id *)(a1 + 40);
  id v9 = [v8 countByEnumeratingWithState:&v46 objects:v59 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v47 != v11) {
          objc_enumerationMutation(v8);
        }
        int v13 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        unsigned int v14 = [*(id *)(v41 + 40) objectForKeyedSubscript:v13];
        uint64_t v15 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          unsigned __int8 v16 = [v14 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138543618;
          id v56 = v13;
          __int16 v57 = 2114;
          id v58 = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[com.apple.appstored.Scheduler] Denied start: %{public}@ - %{public}@ ", buf, 0x16u);
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v46 objects:v59 count:16];
    }
    while (v10);
  }

  id v18 = objc_alloc_init((Class)NSMutableOrderedSet);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id Property = self;
  if (self) {
    id Property = objc_getProperty(self, v17, 16, 1);
  }
  id obj = Property;
  id v20 = [obj countByEnumeratingWithState:&v42 objects:v54 count:16];
  id v39 = v18;
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v43;
    do
    {
      for (uint64_t j = 0; j != v21; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v43 != v22) {
          objc_enumerationMutation(obj);
        }
        id v24 = *(void **)(*((void *)&v42 + 1) + 8 * (void)j);
        id v25 = sub_100424C14(v24);
        if (v25) {
          [*(id *)(v41 + 48) addObject:v25];
        }
        int v26 = sub_10026E8A4(v24, @"last_start_date");
        if (!v26)
        {
          id v27 = *(void **)(*(void *)(v41 + 32) + 56);
          id v28 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v24 databaseID]);
          [v27 setObject:0 forKeyedSubscript:v28];

          id v18 = v39;
        }
        uint64_t v29 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v24 databaseID]);
        [v18 addObject:v29];
      }
      id v21 = [obj countByEnumeratingWithState:&v42 objects:v54 count:16];
    }
    while (v21);
  }

  if ([v18 count])
  {
    if (v37) {
      id WeakRetained = objc_loadWeakRetained(v37 + 2);
    }
    else {
      id WeakRetained = 0;
    }
    [WeakRetained startInstallIDs:v39 transaction:v37];

    id v18 = v39;
  }
  if (!self || !self[1] || *(unsigned char *)(*(void *)(v41 + 32) + 32) && *(unsigned char *)(v41 + 64))
  {
    uint64_t v31 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"phase" values:&off_10054DED8];
    id v32 = [v37 connection];
    double v33 = sub_1002FF80C((uint64_t)AppInstallEntity, @"ROWID", v31, v32);

    if (v33 && ![v33 isEqualToNumber:&off_10054C480])
    {
      uint64_t v34 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v56 = v33;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}@ waiting installation(s), observing monitor state change notifications", buf, 0xCu);
      }
      char v35 = 0;
    }
    else
    {
      uint64_t v34 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "No waiting installations, ignoring monitor state change notifications", buf, 2u);
      }
      char v35 = 1;
    }
    id v18 = v39;

    *(unsigned char *)(*(void *)(v41 + 32) + 32) = v35;
  }

  return 1;
}

uint64_t sub_1002F07E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v58[0] = @"bytes_total";
  v58[1] = @"initial_odr_size";
  v58[2] = @"background_asset_metadata";
  uint64_t v4 = +[NSArray arrayWithObjects:v58 count:3];
  sub_100424C88(v3);
  id v5 = (id *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = sub_1003D4CF0(v5);
  if (((unint64_t)sub_1003D4C34(v5) & (unint64_t)v6) == 0)
  {
    id v7 = [*(id *)(a1 + 32) connection];
    id v8 = sub_1004250B4(v3, v7, v4);

    id v9 = sub_10042516C(v3, v8);
    uint64_t v10 = (uint64_t)sub_1003D4CF0(v5);
    if (!v10)
    {
      uint64_t v11 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v50 = sub_100424C14(v3);
        *(_DWORD *)long long buf = 138412290;
        unsigned int v60 = v50;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[%@]: Expensive network not evaluated, repairing...", buf, 0xCu);
      }
      dispatch_source_t v12 = sub_100354F64();
      int v13 = sub_1003553B0(v12);
      if (!v13)
      {
        int v13 = +[ASDCellularIdentity nullIdentity];
      }
      unsigned int v14 = sub_10023E9B0((uint64_t)ExpensiveNetworkEvaluator, v13);
      uint64_t v10 = sub_10023EAA0((uint64_t)v14, v9);
    }
    uint64_t v15 = (uint64_t)sub_1003D4C34(v5);
    if (v15)
    {
      if (v5)
      {
LABEL_10:
        sub_1003D4D3C((uint64_t)v5, v10);
        sub_1003D4C80((uint64_t)v5, v15);
        sub_100424D18(v3, v5);
        unsigned __int8 v16 = [AppInstallEntity alloc];
        id v17 = [v3 databaseID];
        id v18 = [*(id *)(a1 + 32) connection];
        id v19 = [(SQLiteEntity *)v16 initWithPersistentID:v17 onConnection:v18];

        sub_1002C21C0(v19, v5);
        goto LABEL_11;
      }
    }
    else
    {
      id v37 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        id v51 = sub_100424C14(v3);
        *(_DWORD *)long long buf = 138412290;
        unsigned int v60 = v51;
        _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "[%@]: Low data network not evaluated, repairing...", buf, 0xCu);
      }
      id v38 = objc_alloc_init(LowDataNetworkEvaluator);
      uint64_t v15 = sub_10024DD0C((uint64_t)v38, v9);

      if (v5) {
        goto LABEL_10;
      }
    }
    sub_1003D4A3C();
    id v5 = (id *)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
LABEL_11:
  id v20 = *(__CFString **)(a1 + 40);
  id v21 = v3;
  uint64_t v22 = v21;
  if (!v20)
  {
    uint64_t v35 = 1;
    uint64_t v29 = v21;
    goto LABEL_34;
  }
  long long v23 = sub_100424C14(v21);
  sub_100424C88(v22);
  id v24 = (id *)objc_claimAutoreleasedReturnValue();
  id v25 = v24;
  if (!v24)
  {
    int v26 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      unsigned int v60 = v23;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[%@]: Allowing start, no policy set, allowing install to start unconditionally", buf, 0xCu);
    }
    id v20 = 0;
    goto LABEL_20;
  }
  if (sub_1003D4FB0(v24) && !sub_10026E7EC(v22, @"approved"))
  {
    id v20 = @"device security not approved";
    goto LABEL_28;
  }
  if ((sub_1003D51C0(v25) & 1) == 0)
  {
    if (sub_1003D50B8(v25))
    {
      int v26 = sub_100259614();
      if (![v26 isConnected])
      {
        id v20 = @"no network available";
        goto LABEL_20;
      }
      unint64_t v27 = (unint64_t)sub_1003D4DAC(v25);
      if ([v26 isExpensive])
      {
        id v28 = sub_1003D4CF0(v25);
        if (v28 == (id *)4)
        {
          id v20 = @"implicitly denied expensive network by evaluator";
          goto LABEL_20;
        }
        if (v28 == (id *)2)
        {
          id v20 = @"explicitly denied expensive network by user";
LABEL_20:

          goto LABEL_28;
        }
        if (((unint64_t)v28 & 0xFFFFFFFFFFFFFFFDLL) == 1
          && (sub_1002F1624((unint64_t)[v26 interfaceType], v27) & 1) == 0)
        {
          id v39 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            unsigned int v60 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "[%@]: Expensive network allowed, overriding interface mask", buf, 0xCu);
          }

          unint64_t v27 = 62;
        }
      }
      if ([v26 isConstrained])
      {
        uint64_t v40 = sub_1003D4C34(v25);
        if (v40 == (id *)4)
        {
          id v20 = @"implicitly denied low data by evaluator";
          goto LABEL_20;
        }
        if (v40 == (id *)2)
        {
          id v20 = @"explicitly denied low data by user";
          goto LABEL_20;
        }
      }
      if (!v27)
      {
        uint64_t v41 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          unsigned int v60 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "[%@]: Interface mask unspecified, defaulting to always inexpensive", buf, 0xCu);
        }

        unint64_t v27 = 60;
      }
      if (!sub_1002F1624((unint64_t)[v26 interfaceType], v27))
      {
        id v20 = @"no matching network interface";
        goto LABEL_20;
      }
    }
    if (sub_1003D5104(v25))
    {
      int v26 = sub_1002C144C();
      if (!sub_1002C19FC((uint64_t)v26))
      {
        id v20 = @"no power available";
        goto LABEL_20;
      }
      if (sub_1002C1928((uint64_t)v26))
      {
        id v20 = @"low power mode enabled";
        goto LABEL_20;
      }
    }
    if (sub_1003D506C(v25))
    {
      int v26 = sub_10026CA24();
      if (!sub_10026D0B8((uint64_t)v26))
      {
        id v20 = @"pending data migration";
        goto LABEL_20;
      }
      if (!sub_10026D598((uint64_t)v26))
      {
        id v20 = @"pending setup assistant";
        goto LABEL_20;
      }
    }
    if (sub_10026E91C(v22, @"update_type") == (id)1)
    {
      uint64_t v42 = sub_1003D4DF8((uint64_t)v25);
      int v26 = v42;
      if (v42 && !sub_1003DA2A4(v42))
      {
        id v20 = @"pending optimal download window";
        goto LABEL_20;
      }
    }
    int v26 = sub_10026E8A4(v22, @"last_start_date");
    if (v26)
    {
      length = (void *)v20[1].length;
      long long v44 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v22 databaseID]);
      uint64_t v45 = [length objectForKeyedSubscript:v44];

      if (v45) {
        long long v46 = v45;
      }
      else {
        long long v46 = &off_10054C480;
      }
      __int16 v57 = v46;
      id v47 = [v46 unsignedIntegerValue];
      self;
      if ((unint64_t)v47 >= 0x14)
      {
        long long v48 = v57;
        double v49 = 10.0;
        if ((unint64_t)v47 >= 0x32)
        {
          if ((unint64_t)v47 >= 0x64) {
            double v49 = dbl_1004A0EB0[(unint64_t)v47 < 0x96];
          }
          else {
            double v49 = 60.0;
          }
        }
        uint64_t v52 = [v26 dateByAddingTimeInterval:v49];
        [v52 timeIntervalSinceNow];
        if (v53 > 0.0)
        {
          sub_1002EF69C((uint64_t)v20, v52);
          id v20 = +[NSString stringWithFormat:@"restarting too fast - delaying %.0fs", *(void *)&v49];

LABEL_92:
          goto LABEL_20;
        }
      }
      long long v54 = +[NSNumber numberWithUnsignedInteger:(char *)[v57 unsignedIntegerValue] + 1];
      id v55 = (void *)v20[1].length;
      id v56 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v22 databaseID]);
      [v55 setObject:v54 forKeyedSubscript:v56];
    }
    long long v48 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      unsigned int v60 = v23;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[%@]: Allowing start, all policy conditions were met", buf, 0xCu);
    }
    id v20 = 0;
    goto LABEL_92;
  }
  id v20 = @"pending termination";
LABEL_28:

  if (!v20)
  {
    uint64_t v35 = 1;
    goto LABEL_36;
  }
  uint64_t v29 = [*(id *)(a1 + 48) objectForKeyedSubscript:v20];
  if (!v29) {
    uint64_t v29 = objc_opt_new();
  }
  uint64_t v30 = sub_100424C14(v22);

  if (v30)
  {
    uint64_t v31 = sub_100424C14(v22);
    id v32 = [v31 description];
    double v33 = [v32 componentsSeparatedByString:@"/"];
    uint64_t v34 = [v33 firstObject];

    [v29 addObject:v34];
  }
  [*(id *)(a1 + 48) setObject:v29 forKeyedSubscript:v20];
  uint64_t v35 = 0;
LABEL_34:

LABEL_36:
  return v35;
}

BOOL sub_1002F1170(id a1, AppInstallsDatabaseTransaction *a2)
{
  BOOL v2 = a2;
  id v3 = [(AppInstallsDatabaseSession *)v2 connection];
  uint64_t v15 = 0;
  unsigned __int8 v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  uint64_t v4 = sub_1003F99E8((uint64_t)AppInstallPredicates, 1);
  id v5 = sub_1002FF548((uint64_t)AppInstallEntity, v3, v4);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002F1384;
  v12[3] = &unk_100522CD0;
  id v6 = v3;
  id v13 = v6;
  unsigned int v14 = &v15;
  [v5 enumeratePersistentIDsUsingBlock:v12];
  if (v16[3])
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = v16[3];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v20 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Requesting scheduler poll for %lu reset installation(s) after daemon start", buf, 0xCu);
    }

    if (v2)
    {
      id v9 = objc_getProperty(v2, v8, 24, 1);
      if (v9) {
        v9[16] |= 0x8000uLL;
      }
    }
    else
    {
      id v9 = 0;
    }
  }
  _Block_object_dispose(&v15, 8);

  return 1;
}

void sub_1002F135C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002F1384(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[AppInstallEntity alloc] initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  uint64_t v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    id v5 = sub_1002C1EE8(v3);
    int v6 = 138412290;
    id v7 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%@] Resetting bootstrap phase after daemon restart", (uint8_t *)&v6, 0xCu);
  }
  [(SQLiteEntity *)v3 setValue:&off_10054C498 forProperty:@"bootstrapped"];
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1002F149C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"optimal_download_start"];
  v14[0] = v4;
  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.phase, 10)" equalToValue:&off_10054C468];
  v14[1] = v5;
  int v6 = +[NSArray arrayWithObjects:v14 count:2];
  id v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

  id v8 = [v3 connection];

  id v9 = sub_1002FFB28((uint64_t)AppInstallEntity, @"optimal_download_start", v7, v8);

  if (v9)
  {
    [v9 doubleValue];
    uint64_t v11 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v10 + 10.0];
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
}

uint64_t sub_1002F1624(unint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 1;
  }
  switch(a1)
  {
    case 0uLL:
      uint64_t result = (a2 >> 3) & 1;
      break;
    case 1uLL:
      uint64_t result = (a2 >> 4) & 1;
      break;
    case 2uLL:
      uint64_t result = (a2 >> 1) & 1;
      break;
    case 3uLL:
      uint64_t result = (a2 >> 5) & 1;
      break;
    case 4uLL:
      uint64_t result = (a2 >> 2) & 1;
      break;
    default:
      uint64_t v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        id v5 = sub_1002F18A4(a1);
        int v6 = 138543362;
        id v7 = v5;
        _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Returning no match, encountered new interface type: %{public}@", (uint8_t *)&v6, 0xCu);
      }
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1002F175C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v2 = (dispatch_queue_t *)WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained[6] timeIntervalSinceNow];
    if (v3 <= 0.0)
    {
      uint64_t v4 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v7[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Poll timer duration exceeded 1 hour - halting timer", (uint8_t *)v7, 2u);
      }

      dispatch_assert_queue_V2(v2[1]);
      id v5 = v2[5];
      if (v5)
      {
        dispatch_source_cancel(v5);
        dispatch_queue_t v6 = v2[5];
        void v2[5] = 0;
      }
    }
    sub_1002EDE28(v2, 0x40000);
  }
}

id sub_1002F18A4(unint64_t a1)
{
  if (a1 >= 5) {
    id v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"unknown (%ld)", a1);
  }
  else {
    id v1 = *(&off_100527258 + a1);
  }
  return v1;
}

id sub_1002F1960(uint64_t a1, void *a2)
{
  id v2 = a2;
  double v3 = (objc_class *)self;
  id v4 = v2;
  self;
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  dispatch_queue_t v6 = [v4 assetType];
  unsigned __int8 v7 = [v6 isEqualToString:@"delta-package"];

  if (v7)
  {
    id v8 = &off_10054C4B0;
  }
  else
  {
    id v9 = [v4 assetType];
    unsigned int v10 = [v9 isEqualToString:@"media"];

    if (!v10)
    {
      id v13 = 0;
      goto LABEL_35;
    }
    id v8 = &off_10054C4C8;
  }
  [v5 setObject:v8 forKeyedSubscript:@"package_type"];
  uint64_t v11 = [v4 assetURL];
  uint64_t v12 = sub_10029598C(v11);
  [v5 setObject:v12 forKeyedSubscript:@"package_url"];

  id v13 = [v5 objectForKeyedSubscript:@"package_url"];

  if (!v13) {
    goto LABEL_35;
  }
  unsigned int v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 isLocallyCacheable]);
  [v5 setObject:v14 forKeyedSubscript:@"locate_asset_cache"];

  uint64_t v15 = [v4 variantID];
  [v5 setObject:v15 forKeyedSubscript:@"variant_id"];

  unsigned __int8 v16 = [v4 bytesTotal];
  [v5 setObject:v16 forKeyedSubscript:@"bytes_total"];

  uint64_t v17 = [v4 initialODRSize];
  [v5 setObject:v17 forKeyedSubscript:@"initial_odr_size"];

  uint64_t v18 = [v4 sinfs];

  if (v18)
  {
    id v19 = [v4 sinfs];
    uint64_t v20 = +[NSPropertyListSerialization propertyListWithData:v19 options:0 format:0 error:0];

    if ([v20 count])
    {
      id v21 = (id *)sub_1001FA1A4([StoreDRM alloc], v20);
      uint64_t v22 = v21;
      if (v21)
      {
        long long v23 = sub_1001FA294(v21, @"sinf");
        [v5 setObject:v23 forKeyedSubscript:@"sinf"];

        id v24 = sub_1001FA294(v22, @"dpInfo");
        [v5 setObject:v24 forKeyedSubscript:@"dp_info"];
      }
    }
  }
  id v25 = [v4 dPInfo];

  if (v25)
  {
    int v26 = [v4 dPInfo];
    [v5 setObject:v26 forKeyedSubscript:@"dp_info"];
  }
  unint64_t v27 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 isZipStreamable]);
  [v5 setObject:v27 forKeyedSubscript:@"streaming_zip"];

  id v28 = [v4 numberOfBytesToHash];
  [v5 setObject:v28 forKeyedSubscript:@"hash_size"];

  uint64_t v29 = [v4 numberOfBytesToHash];
  id v30 = [v29 unsignedLongLongValue];

  if (v30)
  {
    uint64_t v31 = [v4 hashArrayData];

    if (v31)
    {
      id v32 = [v4 hashArrayData];
      uint64_t v31 = +[NSPropertyListSerialization propertyListWithData:v32 options:0 format:0 error:0];
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || ![v31 count])
    {
      uint64_t v40 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v44 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "We did not receive any hash data, skipping hash verification", v44, 2u);
      }

      [v5 setObject:&off_10054C4E0 forKeyedSubscript:@"hash_size"];
      goto LABEL_33;
    }
    [v5 setObject:v31 forKeyedSubscript:@"hash_array"];
    double v33 = [v4 hashType];
    uint64_t v34 = v33;
    if (v33)
    {
      id v35 = [v33 integerValue];
      if (v35 == (id)1)
      {
        uint64_t v41 = &off_10054C4F8;
        goto LABEL_32;
      }
      if (!v35)
      {
LABEL_30:
        uint64_t v41 = &off_10054C4B0;
LABEL_32:
        objc_msgSend(v5, "setObject:forKeyedSubscript:", v41, @"hash_type", *(_OWORD *)v44);

LABEL_33:
        goto LABEL_34;
      }
      __int16 v36 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v44 = 138543362;
        *(void *)&uint8_t v44[4] = v34;
        id v37 = "Guessing MD5 hashing type - but we received an unknown value (%{public}@)";
        id v38 = v36;
        uint32_t v39 = 12;
LABEL_42:
        _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, v37, v44, v39);
      }
    }
    else
    {
      __int16 v36 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v44 = 0;
        id v37 = "Guessing MD5 hashing type - but we received no value";
        id v38 = v36;
        uint32_t v39 = 2;
        goto LABEL_42;
      }
    }

    goto LABEL_30;
  }
LABEL_34:
  id v13 = v5;
LABEL_35:

  if (v13) {
    id v42 = [[v3 alloc] initWithPropertyValues:v13];
  }
  else {
    id v42 = 0;
  }

  return v42;
}

id sub_1002F1F6C(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSNumberFormatter);
    [v2 setNumberStyle:1];
    id v1 = [v2 numberFromString:v1];
  }
  return v1;
}

id sub_1002F1FD4(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = +[NSString stringWithFormat:@"http://%@", a1];
    double v3 = sub_1002F205C((uint64_t)v2);
    id v4 = v3;
    if (v3) {
      id v1 = [v3 isEqualToString:v1];
    }
    else {
      id v1 = 0;
    }
  }
  return v1;
}

id sub_1002F205C(uint64_t a1)
{
  if (a1)
  {
    id v1 = +[NSURL URLWithString:a1];
    id v2 = v1;
    if (!v1)
    {
      double v3 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[SKAdNetwork: Not a valid URL.", buf, 2u);
      }
      id v9 = 0;
      goto LABEL_36;
    }
    double v3 = [v1 host];
    id v4 = [v3 componentsSeparatedByString:@"."];
    id v5 = +[NSMutableArray arrayWithArray:v4];

    dispatch_queue_t v6 = [v5 firstObject];
    unsigned int v7 = [v6 isEqualToString:@"www"];

    if (v7) {
      [v5 removeObjectAtIndex:0];
    }
    id v8 = [v5 count];
    if (v3 && v8)
    {
      if ([v5 count] == (id)1)
      {
        id v9 = 0;
LABEL_35:

LABEL_36:
        goto LABEL_37;
      }
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      uint64_t v11 = v5;
      id v12 = [v11 countByEnumeratingWithState:&v27 objects:v32 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v28;
        while (2)
        {
          for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v28 != v14) {
              objc_enumerationMutation(v11);
            }
            if ([*(id *)(*((void *)&v27 + 1) + 8 * i) isEqualToString:&stru_10052E4D8])
            {
              id v9 = 0;
              unsigned int v10 = v11;
              goto LABEL_34;
            }
          }
          id v13 = [v11 countByEnumeratingWithState:&v27 objects:v32 count:16];
          if (v13) {
            continue;
          }
          break;
        }
      }

      unsigned int v10 = objc_alloc_init((Class)NSMutableString);
      unsigned __int8 v16 = [v11 count];
      char v17 = 0;
      BOOL v18 = 1;
      do
      {
        if (!v18) {
          break;
        }
        id v19 = [v11 objectAtIndex:v16 - 1];
        [v10 insertString:v19 atIndex:0];

        [v10 insertString:@"." atIndex:0];
        int IsDomainTopLevel = _CFHostIsDomainTopLevel();
        BOOL v18 = IsDomainTopLevel != 0;
        v17 |= IsDomainTopLevel != 0;
        if (IsDomainTopLevel) {
          --v16;
        }
      }
      while (v16);
      if (v17)
      {
        id v21 = [v11 count];
        int64_t v22 = v21 - v16;
        long long v23 = -[NSObject subarrayWithRange:](v11, "subarrayWithRange:", v16, v21 - v16);
        id v24 = [v23 componentsJoinedByString:@"."];

        -[NSObject removeObjectsInRange:](v11, "removeObjectsInRange:", v16, v22);
        id v25 = [v11 lastObject];
        if (v25)
        {
          id v9 = +[NSString stringWithFormat:@"%@.%@", v25, v24, (void)v27];
        }
        else
        {
          id v9 = 0;
        }

        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[SKAdNetwork: URL does not have a valid host.", buf, 2u);
      }
    }
    id v9 = 0;
LABEL_34:

    goto LABEL_35;
  }
  id v9 = 0;
LABEL_37:
  return v9;
}

id sub_1002F2418(void *a1)
{
  if (a1)
  {
    id v1 = [a1 dataUsingEncoding:4];
    id v2 = sub_10025C1EC(v1);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_1002F2474(id a1, unint64_t a2, int a3)
{
  id v3 = a1;
  if (a1)
  {
    if ((unint64_t)[a1 length] <= a2)
    {
      id v7 = v3;
    }
    else
    {
      if (a3)
      {
        dispatch_queue_t v6 = [v3 substringToIndex:a2];
        id v3 = +[NSString stringWithFormat:@"%@...", v6];

        goto LABEL_8;
      }
      id v7 = [v3 substringToIndex:a2];
    }
    id v3 = v7;
  }
LABEL_8:
  return v3;
}

id sub_1002F2534(void *a1, unint64_t a2)
{
  if (a1)
  {
    id v4 = +[NSMutableCharacterSet alphanumericCharacterSet];
    id v5 = +[NSCharacterSet characterSetWithCharactersInString:@".()-"];
    [v4 formUnionWithCharacterSet:v5];

    dispatch_queue_t v6 = [v4 invertedSet];
    id v7 = [a1 componentsSeparatedByCharactersInSet:v6];
    id v8 = [v7 componentsJoinedByString:&stru_10052E4D8];

    id v9 = sub_1002F2474(v8, a2, 1);
  }
  else
  {
    id v9 = 0;
  }
  return v9;
}

id sub_1002F2628(void *a1)
{
  if (a1)
  {
    id v1 = [a1 componentsSeparatedByString:@"-"];
    char v17 = objc_opt_new();
    unsigned __int8 v16 = objc_opt_new();
    id v2 = objc_opt_new();
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v3 = v1;
    id v4 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * i), "componentsSeparatedByString:", @":", v16);
          if ([v8 count] == (id)2)
          {
            id v9 = [v8 objectAtIndexedSubscript:0];
            unsigned int v10 = [v2 numberFromString:v9];

            uint64_t v11 = [v8 objectAtIndexedSubscript:1];
            id v12 = [v2 numberFromString:v11];

            if (v10) {
              BOOL v13 = v12 == 0;
            }
            else {
              BOOL v13 = 1;
            }
            if (!v13)
            {
              [v17 addObject:v10];
              [v16 addObject:v12];
            }
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v5);
    }

    v22[0] = v17;
    v22[1] = v16;
    uint64_t v14 = +[NSArray arrayWithObjects:v22 count:2];
  }
  else
  {
    uint64_t v14 = 0;
  }
  return v14;
}

XPCNotificationSource *sub_1002F2980(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a5;
  self;
  unsigned int v10 = [XPCNotificationSource alloc];
  id v11 = a3;
  id v12 = a4;
  if (v10)
  {
    id v13 = v8;
    id v14 = v9;
    v21.receiver = v10;
    v21.super_class = (Class)XPCNotificationSource;
    uint64_t v15 = (XPCNotificationSource *)objc_msgSendSuper2(&v21, "init");
    unsigned int v10 = v15;
    if (v15)
    {
      objc_storeStrong((id *)&v15->_applicableEntitlement.name, a3);
      objc_storeStrong((id *)&v10->_applicableEntitlement.legacyName, a4);
      unsigned __int8 v16 = (NSString *)[v13 copy];
      name = v10->_name;
      v10->_name = v16;

      id v18 = [v14 copy];
      id mergeHandler = v10->_mergeHandler;
      v10->_id mergeHandler = v18;
    }
  }
  else
  {
  }
  return v10;
}

void sub_1002F2AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F2B3C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[AMSKeybag sharedInstance];
  id v7 = 0;
  unsigned __int8 v4 = [v3 importKeybagWithData:v2 error:&v7];

  id v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to import keybag data for account error: %{public}@", buf, 0xCu);
    }
  }
}

id sub_1002F2C44(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  self;
  id v5 = +[AMSKeybag sharedInstance];
  objc_msgSend(v4, "ams_DSID");
  uint64_t v6 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();

  if (v6) {
    id v7 = v6;
  }
  else {
    id v7 = &off_10054C510;
  }
  id v12 = 0;
  id v8 = [v5 keybagSyncDataWithAccountID:v7 transactionType:a3 error:&v12];
  id v9 = v12;

  if (!v8)
  {
    unsigned int v10 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v14 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to obtain keybay data for account error: %{public}@", buf, 0xCu);
    }
  }
  return v8;
}

id sub_1002F2D98(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  self;
  id v7 = +[AMSKeybag sharedInstance];
  objc_msgSend(v6, "ams_DSID");
  id v8 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();

  if (v8) {
    id v9 = v8;
  }
  else {
    id v9 = &off_10054C510;
  }
  id v15 = 0;
  unsigned int v10 = [v7 keybagSyncDataWithAccountID:v9 transactionType:a3 error:&v15];
  id v11 = v15;

  if (!v10)
  {
    id v12 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v17 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to obtain keybag data for account error: %{public}@", buf, 0xCu);
    }

    if (a4) {
      *a4 = v11;
    }
  }
  id v13 = [v10 base64EncodedStringWithOptions:0];

  return v13;
}

id sub_1002F2F18(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  id v6 = a3;
  id v7 = a2;
  self;
  id v8 = [v7 host];

  id v9 = objc_msgSend(v8, "_lp_userVisibleHost");
  unsigned int v10 = sub_1002F2534(v9, 0x20uLL);

  if (a4 < 2)
  {
    if (a4 != 1)
    {
      id v12 = 0;
      goto LABEL_10;
    }
    id v11 = sub_1002F2474(v6, 0x1F4uLL, 1);
    if ([v11 length])
    {
      id v13 = ASDLocalizedString();
      +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v13, v10, v11);
    }
    else
    {
      id v13 = ASDLocalizedString();
      +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v13, 1, v10);
    id v12 = };
  }
  else
  {
    id v11 = ASDLocalizedString();
    id v12 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v11, a4, v10);
  }

LABEL_10:
  id v14 = +[AMSDialogRequest requestWithTitle:v12 message:0];
  id v15 = ASDLocalizedString();
  unsigned __int8 v16 = +[AMSDialogAction actionWithTitle:v15 identifier:@"UPPManifestDialogActionCancel"];

  [v14 setDefaultAction:v16];
  id v17 = ASDLocalizedString();
  id v18 = +[AMSDialogAction actionWithTitle:v17 identifier:@"UPPManifestDialogActionInstall"];

  v21[0] = v16;
  v21[1] = v18;
  long long v19 = +[NSArray arrayWithObjects:v21 count:2];
  [v14 setButtonActions:v19];

  return v14;
}

id sub_1002F31A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  id v9 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412546;
    id v37 = v8;
    __int16 v38 = 2114;
    id v39 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%@] Could not load download manifest with underlying error: %{public}@", buf, 0x16u);
  }

  if (ASDErrorIsEqual())
  {
    id v33 = v7;
    unsigned int v10 = [v6 userInfo];
    id v11 = [v10 objectForKeyedSubscript:@"UPPManifestErrorUserInfoKeyExistingName"];
    objc_opt_class();
    id v12 = sub_100012D7C(v11);
    id v13 = sub_1002F2474(v12, 0x20uLL, 1);

    id v14 = [v6 userInfo];
    id v15 = [v14 objectForKeyedSubscript:@"UPPManifestErrorUserInfoKeyManifestName"];
    objc_opt_class();
    unsigned __int8 v16 = sub_100012D7C(v15);
    id v17 = sub_1002F2474(v16, 0x20uLL, 1);

    id v18 = ASDLocalizedString();
    long long v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v18, v13);

    id v20 = v8;
    if ([v17 isEqualToString:v13])
    {
      objc_super v21 = ASDLocalizedString();
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", v21, v13, v31, v32);
    }
    else
    {
      objc_super v21 = ASDLocalizedString();
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", v21, v17, v13, v13);
    int v26 = };

    id v25 = +[AMSDialogRequest requestWithTitle:v19 message:v26];
    long long v27 = ASDLocalizedString();
    long long v28 = +[AMSDialogAction actionWithTitle:v27];
    id v35 = v28;
    long long v29 = +[NSArray arrayWithObjects:&v35 count:1];
    [v25 setButtonActions:v29];

    id v8 = v20;
    id v7 = v33;
    goto LABEL_10;
  }
  if (v7)
  {
    int64_t v22 = [v7 host];
    long long v23 = objc_msgSend(v22, "_lp_userVisibleHost");
    id v13 = sub_1002F2534(v23, 0x20uLL);

    ASDErrorIsEqual();
    id v24 = ASDLocalizedString();
    id v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v24, v13);

    id v25 = +[AMSDialogRequest requestWithTitle:v17 message:0];
    long long v19 = ASDLocalizedString();
    int v26 = +[AMSDialogAction actionWithTitle:v19];
    uint64_t v34 = v26;
    long long v27 = +[NSArray arrayWithObjects:&v34 count:1];
    [v25 setButtonActions:v27];
LABEL_10:

    goto LABEL_11;
  }
  id v25 = 0;
LABEL_11:

  return v25;
}

void *sub_1002F35F4(void *result)
{
  if (result) {
    return (void *)([result isEqualToNumber:&off_10054C528] ^ 1);
  }
  return result;
}

unint64_t sub_1002F3620(unint64_t result)
{
  if (result)
  {
    id v1 = (const char *)[ (id) result objCType];
    uint64_t result = strcmp(v1, "d");
    if (result) {
      return strcmp(v1, "f") != 0;
    }
  }
  return result;
}

__CFString *sub_1002F3678(unint64_t a1)
{
  if (a1 >= 4)
  {
    id v1 = +[NSString stringWithFormat:@"Unknown Class: %ld", a1];
  }
  else
  {
    id v1 = off_1005272F8[a1];
  }
  return v1;
}

__CFString *sub_1002F36DC(unint64_t a1)
{
  if (a1 >= 6)
  {
    id v1 = +[NSString stringWithFormat:@"Unknown Class: %ld", a1];
  }
  else
  {
    id v1 = off_100527318[a1];
  }
  return v1;
}

void sub_1002F3A68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (!v5)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    id v9 = [*(id *)(a1 + 32) logUUID];
    int v10 = 138412546;
    id v11 = v9;
    __int16 v12 = 2114;
    id v13 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Interactive authentication for volume purchase completed with error: %{public}@", (uint8_t *)&v10, 0x16u);
    goto LABEL_4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = [*(id *)(a1 + 32) logUUID];
    int v10 = 138412546;
    id v11 = v9;
    __int16 v12 = 2114;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Interactive authentication for volume purchase completed with result: %{public}@", (uint8_t *)&v10, 0x16u);
LABEL_4:
  }
LABEL_6:

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1002F3BDC(id a1)
{
  id v1 = objc_alloc((Class)AMSPurchaseQueueConfiguration);
  id v2 = sub_10030B11C();
  id v7 = [v1 initWithBag:v2];

  id v3 = objc_alloc_init(ManagedPurchaseQueueDelegate);
  id v4 = (void *)qword_1005B0EC8;
  qword_1005B0EC8 = (uint64_t)v3;

  [v7 setDelegate:qword_1005B0EC8];
  id v5 = [objc_alloc((Class)AMSPurchaseQueue) initWithConfiguration:v7];
  id v6 = (void *)qword_1005B0EC0;
  qword_1005B0EC0 = (uint64_t)v5;
}

id *sub_1002F3C98(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (!a1) {
    goto LABEL_32;
  }
  v66.receiver = a1;
  v66.super_class = (Class)ManagedApplicationTask;
  id v8 = (id *)objc_msgSendSuper2(&v66, "init");
  a1 = v8;
  if (!v8) {
    goto LABEL_32;
  }
  objc_storeStrong(v8 + 17, a2);
  uint64_t v9 = [a1[17] bundleIdentifier];
  id v10 = a1[8];
  a1[8] = (id)v9;

  uint64_t v11 = [a1[17] bundleVersion];
  id v12 = a1[9];
  a1[9] = (id)v11;

  uint64_t v13 = [a1[17] itemIdentifier];
  id v14 = a1[13];
  a1[13] = (id)v13;

  uint64_t v15 = +[NSUUID UUID];
  id v16 = a1[16];
  a1[16] = (id)v15;

  if ([(__CFString *)v7 isEqualToString:@"com.apple.asclient"]) {
    id v17 = @"com.apple.dmd";
  }
  else {
    id v17 = v7;
  }
  objc_storeStrong(a1 + 10, v17);
  id v18 = [[KeepAlive alloc] initWithName:@"ManagedApplicationTask"];
  id v19 = a1[14];
  a1[14] = v18;

  *((unsigned char *)a1 + 144) = [a1[17] skipDownloads];
  if (a1[8])
  {
    uint64_t v20 = +[ApplicationProxy proxyForBundleID:](ApplicationProxy, "proxyForBundleID:");
    id v21 = a1[7];
    a1[7] = (id)v20;

    id v22 = a1[7];
    if (v22)
    {
      if ((uint64_t)[v22 storeItemID] >= 1)
      {
        uint64_t v23 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [a1[7] storeItemID]);
        id v24 = a1[13];
        a1[13] = (id)v23;

        uint64_t v25 = [a1[7] thinningVariantID];
        id v26 = a1[6];
        a1[6] = (id)v25;

        uint64_t v27 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [a1[7] storeExternalVersionID]);
        id v28 = a1[11];
        a1[11] = (id)v27;
      }
      *((unsigned char *)a1 + 96) = [a1[7] isInstalled];
    }
    goto LABEL_17;
  }
  uint64_t v29 = [a1[17] externalVersionIdentifier];
  id v30 = a1[11];
  a1[11] = (id)v29;

  uint64_t v31 = +[ApplicationProxy proxyForItemID:a1[13]];
  id v32 = a1[7];
  a1[7] = (id)v31;

  id v33 = a1[7];
  if (!v33)
  {
LABEL_17:
    sub_1002F4380(a1);
    goto LABEL_18;
  }
  uint64_t v34 = [v33 thinningVariantID];
  id v35 = a1[6];
  a1[6] = (id)v34;

  uint64_t v36 = [a1[7] bundleID];
  id v37 = a1[8];
  a1[8] = (id)v36;

  uint64_t v38 = [a1[7] bundleVersion];
  id v39 = a1[9];
  a1[9] = (id)v38;

  *((unsigned char *)a1 + 96) = [a1[7] isInstalled];
  sub_1002F4380(a1);
  if (!a1[11] && [a1[7] isFactoryInstall])
  {
    uint64_t v40 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [a1[7] storeExternalVersionID]);
    id v41 = a1[11];
    a1[11] = (id)v40;

    id v42 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      id v43 = a1[15];
      id v44 = a1[11];
      *(_DWORD *)long long buf = 138412546;
      id v68 = v43;
      __int16 v69 = 2114;
      id v70 = v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[%@] Factory VPP claim using evid: %{public}@", buf, 0x16u);
    }
  }
LABEL_18:
  uint64_t v45 = [a1[17] accountIdentifier];

  if (!v45) {
    goto LABEL_25;
  }
  long long v46 = +[ACAccountStore ams_sharedAccountStore];
  id v47 = [a1[17] accountIdentifier];
  uint64_t v48 = objc_msgSend(v46, "ams_iTunesAccountWithDSID:", v47);
  id v49 = a1[5];
  a1[5] = (id)v48;

  id v50 = a1[5];
  id v51 = ASDLogHandleForCategory();
  uint64_t v52 = v51;
  if (!v50)
  {
    if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    id v65 = a1[15];
    long long v54 = [a1[17] accountIdentifier];
    *(_DWORD *)long long buf = 138412546;
    id v68 = v65;
    __int16 v69 = 2114;
    id v70 = v54;
    _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "[%@] Unable to find specified account using accountID: %{public}@", buf, 0x16u);
    goto LABEL_22;
  }
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    id v53 = a1[15];
    long long v54 = objc_msgSend(a1[5], "ams_DSID");
    *(_DWORD *)long long buf = 138412546;
    id v68 = v53;
    __int16 v69 = 2114;
    id v70 = v54;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "[%@] Using account specified in request: %{public}@", buf, 0x16u);
LABEL_22:
  }
LABEL_24:

LABEL_25:
  if (!a1[5])
  {
    id v55 = +[ACAccountStore ams_sharedAccountStore];
    uint64_t v56 = objc_msgSend(v55, "ams_activeiTunesAccount");
    id v57 = a1[5];
    a1[5] = (id)v56;

    id v58 = a1[5];
    uint64_t v59 = ASDLogHandleForCategory();
    BOOL v60 = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
    if (v58)
    {
      if (v60)
      {
        id v61 = a1[15];
        id v62 = objc_msgSend(a1[5], "ams_DSID");
        *(_DWORD *)long long buf = 138412546;
        id v68 = v61;
        __int16 v69 = 2114;
        id v70 = v62;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "[%@] Using active account: %{public}@", buf, 0x16u);
      }
    }
    else if (v60)
    {
      id v63 = a1[15];
      *(_DWORD *)long long buf = 138412290;
      id v68 = v63;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "[%@] Not using an account", buf, 0xCu);
    }
  }
LABEL_32:

  return a1;
}

void sub_1002F4380(void *a1)
{
  if (a1)
  {
    id v2 = [_TtC9appstored6LogKey alloc];
    sub_1002F4660((uint64_t)a1);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    id v3 = [(LogKey *)v2 initWithBatchLogKey:0 logCode:v5 externalID:a1[16] bundleID:a1[8] itemID:a1[13]];
    id v4 = (void *)a1[15];
    a1[15] = v3;
  }
}

PurchaseInfo *sub_1002F4424(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(PurchaseInfo);
    [(PurchaseInfo *)v4 setBundleID:*(void *)(a1 + 64)];
    id v5 = [*(id *)(a1 + 136) accountIdentifier];
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);

      if (v6) {
        [(PurchaseInfo *)v4 setAccount:*(void *)(a1 + 40)];
      }
    }
    [(PurchaseInfo *)v4 setClientType:1];
    [(PurchaseInfo *)v4 setExternalID:*(void *)(a1 + 128)];
    id v7 = sub_1002F4660(a1);
    [(PurchaseInfo *)v4 setLogCode:v7];

    [(PurchaseInfo *)v4 setItemID:*(void *)(a1 + 104)];
    id v8 = sub_1002689B4(v3, ASDManagedLookupBundleDisplayName);
    [(PurchaseInfo *)v4 setItemName:v8];

    uint64_t v9 = sub_1002689B4(v3, ASDManagedLookupVendorName);
    [(PurchaseInfo *)v4 setVendorName:v9];

    [(PurchaseInfo *)v4 setRequireUniversal:_os_feature_enabled_impl() ^ 1];
    [(PurchaseInfo *)v4 setMetricsType:&off_10054C540];
    [(PurchaseInfo *)v4 setPurchaseType:0];
    if (*(unsigned char *)(a1 + 96)) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = 1;
    }
    [(PurchaseInfo *)v4 setCoordinatorIntent:v10];
    [(PurchaseInfo *)v4 setCoordinatorImportance:3];
    uint64_t v11 = sub_1002689B4(v3, ASDManagedLookupFreeBuyParams);
    if (v11)
    {
      id v12 = +[AMSBuyParams buyParamsWithString:v11];
      [(PurchaseInfo *)v4 setBuyParams:v12];
    }
    uint64_t v13 = sub_1002F46C0(a1);
    [(PurchaseInfo *)v4 setClientInfo:v13];

    [(PurchaseInfo *)v4 updateGeneratedProperties];
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_1002F4660(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 136) requestType];
  id v2 = (void **)&off_100523150;
  id v3 = &off_100523168;
  if (v1 != (id)3) {
    id v3 = &off_100523160;
  }
  if (v1 != (id)2) {
    id v2 = (void **)v3;
  }
  id v4 = *v2;
  return v4;
}

id sub_1002F46C0(uint64_t a1)
{
  id v2 = sub_1000169A4();
  id v3 = v2;
  if (*(void *)(a1 + 80))
  {
    objc_msgSend(v2, "setBundleIdentifier:");
    [v3 setClientVersion:@"1.0"];
  }
  return v3;
}

void sub_1002F5DE4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002F5E28(uint64_t a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  id v8 = a3;
  if (!a1)
  {
    BOOL v60 = 0;
    goto LABEL_48;
  }
  int v185 = *(unsigned __int8 *)(a1 + 144);
  uint64_t v9 = objc_opt_new();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a1 + 104);
  if (v11) {
    [v9 setParameter:v11 forKey:AMSBuyParamPropertyItemId];
  }
  id v12 = *(void **)(a1 + 88);
  if (v12)
  {
    uint64_t v13 = +[NSNumber numberWithInt:0xFFFFFFFFLL];
    unsigned __int8 v14 = [v12 isEqualToNumber:v13];

    if ((v14 & 1) == 0) {
      [v10 setParameter:*(void *)(a1 + 88) forKey:AMSBuyParamPropertyExternalVersionId];
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v15 = *(void **)(a1 + 56);
    if (v15 && (uint64_t)[v15 storeExternalVersionID] >= 1)
    {
      id v16 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 56) storeExternalVersionID]);
      [v10 setParameter:v16 forKey:AMSBuyParamPropertyExistingExternalVersionId];

      id v17 = [*(id *)(a1 + 56) deviceIdentifierForVendor];
      if (v17) {
        [v10 setParameter:v17 forKey:AMSBuyParamPropertyVendorID];
      }
    }
    [v10 setParameter:*(void *)(a1 + 64) forKey:AMSBuyParamPropertyBundleId];
    id v18 = [*(id *)(a1 + 56) sinf];
    if (v18) {
      [v10 setParameter:v18 forKey:AMSBuyParamPropertySinfData];
    }
  }
  uint64_t v19 = *(void *)(a1 + 72);
  if (v19) {
    [v10 setParameter:v19 forKey:AMSBuyParamPropertyBundleVersion];
  }
  uint64_t v20 = +[AMSDevice serialNumber];
  [v10 setParameter:v20 forKey:AMSBuyParamPropertySerialNumber];

  id v21 = objc_msgSend(*(id *)(a1 + 40), "ams_DSID");
  if (v21)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v22 = [v21 stringValue];
      [v10 setParameter:v22 forKey:AMSBuyParamPropertyDsid];
    }
  }
  id v192 = v8;
  if ([*(id *)(a1 + 136) requestType])
  {
    uint64_t v23 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 136) requestType]);
    [v10 setParameter:v23 forKey:AMSBuyParamPropertyRequestType];
  }
  id v24 = [objc_alloc((Class)AMSPurchase) initWithPurchaseType:5 buyParams:v10];
  [v24 setIgnoreRequirePasswordRestriction:1];
  uint64_t v25 = [*(id *)(a1 + 120) description];
  [v24 setLogUUID:v25];

  id v26 = sub_1002F46C0(a1);
  [v24 setClientInfo:v26];

  uint64_t v27 = [*(id *)(a1 + 136) accountIdentifier];
  if (v27 && (uint64_t v28 = *(void *)(a1 + 40), v27, v28))
  {
    [v24 setAccount:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v29 = +[ACAccountStore ams_sharedAccountStore];
    id v30 = objc_msgSend(v29, "ams_activeiTunesAccount");
    [v24 setAccount:v30];
  }
  uint64_t v31 = +[NSMutableDictionary dictionary];
  if (_os_feature_enabled_impl())
  {
    id v32 = sub_1003DA6D4();
    id v33 = [v32 copyThinningHeadersForPlatform:1];
    [v31 addEntriesFromDictionary:v33];
  }
  uint64_t v34 = sub_1003A0B6C();
  unsigned int v35 = sub_1003A0D4C(v34);

  if (v35) {
    [v31 setObject:@"true" forKeyedSubscript:@"X-MMe-Multi-User"];
  }
  if ([v31 count]) {
    [v24 setAdditionalHeaders:v31];
  }
  self;
  id v193 = v31;
  id v194 = v10;
  if (qword_1005B0EB8 != -1) {
    dispatch_once(&qword_1005B0EB8, &stru_100527288);
  }
  id v36 = (id)qword_1005B0EC0;
  id v208 = v24;
  id v37 = +[NSArray arrayWithObjects:&v208 count:1];
  uint64_t v38 = [v36 enquePurchases:v37];

  id v202 = 0;
  id v191 = v38;
  id v39 = [v38 resultWithError:&v202];
  id v40 = v202;
  if (v40 && ASDErrorIsEqual())
  {
    id v41 = [v40 userInfo];
    [v41 objectForKeyedSubscript:AMSErrorUserInfoKeyServerErrorCode];
    v43 = id v42 = v39;
    [v43 integerValue];

    [v40 localizedFailureReason];
    v45 = id v44 = a4;
    uint64_t v46 = ASDErrorWithTitleAndMessage();

    a4 = v44;
    id v40 = (id)v46;
    id v39 = v42;
  }
  id v47 = [v39 firstObject];
  uint64_t v48 = v47;
  if (v47)
  {
    uint64_t v49 = [v47 correlationID];
    id v50 = [v48 responseDictionary];
    v186 = (void *)v49;
    if (v40)
    {
      id v184 = v24;
      id v51 = a4;
      id v188 = v50;
      uint64_t v52 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        id v53 = *(void **)(a1 + 120);
        *(_DWORD *)long long buf = 138412802;
        id v216 = v53;
        __int16 v217 = 2114;
        *(void *)v218 = v40;
        *(_WORD *)&v218[8] = 2114;
        uint64_t v219 = v49;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "[%@] Request resulted in error: %{public}@ storeCorrelationID: %{public}@", buf, 0x20u);
      }
      BOOL v54 = 0;
      int v189 = 0;
      int v187 = 0;
      LOBYTE(v55) = 0;
      int v56 = 0;
      id v57 = v191;
LABEL_144:

      id v50 = v188;
      a4 = v51;
      id v24 = v184;
      goto LABEL_145;
    }
    if (!v50)
    {
      BOOL v54 = 0;
      int v189 = 0;
      int v187 = 0;
      id v40 = 0;
      LOBYTE(v55) = 0;
      int v56 = 0;
      id v57 = v191;
LABEL_145:

      BOOL v58 = v56 != 0;
      if (v189 && v187)
      {
        uint64_t v59 = 1;
        if (!a4) {
          goto LABEL_45;
        }
      }
      else
      {
        if (v189) {
          BOOL v142 = v187 == 0;
        }
        else {
          BOOL v142 = 0;
        }
        char v143 = !v142;
        char v144 = v143 ^ 1 | v55;
        uint64_t v145 = 2;
        if (!v142) {
          uint64_t v145 = 3;
        }
        uint64_t v146 = 4;
        if (!v54) {
          uint64_t v146 = 0;
        }
        if (v144) {
          uint64_t v59 = v145;
        }
        else {
          uint64_t v59 = v146;
        }
        if (!a4) {
          goto LABEL_45;
        }
      }
      goto LABEL_44;
    }
    id v188 = v50;
    id v181 = a2;
    id v182 = a4;
    uint64_t v196 = a1;
    id v184 = v24;
    id v179 = v48;
    id v180 = v39;
    if (!_os_feature_enabled_impl())
    {
      sub_1003DD184((uint64_t)StoreItemResponse, v188, 1);
      id Property = (id *)objc_claimAutoreleasedReturnValue();
      long long v79 = Property;
      if (Property) {
        id Property = (id *)objc_getProperty(Property, v78, 56, 1);
      }
      uint64_t v67 = Property;
      if ([*(id *)(a1 + 48) length])
      {
        long long v80 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        {
          id v151 = *(void **)(v196 + 120);
          uint64_t v152 = *(void *)(v196 + 48);
          *(_DWORD *)long long buf = 138412546;
          id v216 = v151;
          __int16 v217 = 2114;
          *(void *)v218 = v152;
          _os_log_error_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "[%@]: Will not attempt sinf update for app due to variantID: %{public}@", buf, 0x16u);
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + 96))
        {
          long long v80 = [v188 objectForKey:@"replacementSinf"];
          if (v80)
          {
            objc_opt_class();
            int v187 = objc_opt_isKindOfClass() & 1;
          }
          else
          {
            int v187 = 0;
          }
          int v189 = sub_1002F790C(v196, v67, v80);
          id v95 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            id v96 = *(void **)(v196 + 120);
            *(_DWORD *)long long buf = 138412802;
            id v216 = v96;
            __int16 v217 = 1024;
            *(_DWORD *)v218 = v189;
            *(_WORD *)&v218[4] = 1024;
            *(_DWORD *)&v218[6] = v187;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "[%@] Inline sinf update complete with result: %{BOOL}d used replacementSinf: %{BOOL}d", buf, 0x18u);
          }

          goto LABEL_99;
        }
        long long v80 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
        {
          id v94 = *(void **)(v196 + 120);
          *(_DWORD *)long long buf = 138412290;
          id v216 = v94;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "[%@] No app to attempt an inline update", buf, 0xCu);
        }
      }
      int v189 = 0;
      int v187 = 0;
LABEL_99:

      CFStringRef v100 = v67;
      id v183 = objc_opt_new();
      long long v204 = 0u;
      long long v205 = 0u;
      long long v206 = 0u;
      long long v207 = 0u;
      id v101 = v100;
      id v102 = [v101 countByEnumeratingWithState:&v204 objects:buf count:16];
      id v197 = v101;
      if (v102)
      {
        id v104 = v102;
        uint64_t v105 = *(void *)v205;
        while (2)
        {
          long long v106 = 0;
          do
          {
            if (*(void *)v205 != v105) {
              objc_enumerationMutation(v101);
            }
            long long v107 = *(unsigned char **)(*((void *)&v204 + 1) + 8 * (void)v106);
            if (v107)
            {
              id v108 = objc_retainAutoreleasedReturnValue(objc_getProperty(*(id *)(*((void *)&v204 + 1)
                                                                               + 8 * (void)v106), v103, 96, 1));
              id v110 = objc_getProperty(v107, v109, 208, 1);
            }
            else
            {
              id v108 = 0;
              id v110 = 0;
            }
            id v111 = v110;
            id v112 = [v111 stringValue];
            if ([v108 length])
            {
              if ([v112 length])
              {
                id v113 = [*(id *)(v196 + 104) stringValue];
                unsigned int v114 = [v112 isEqualToString:v113];

                id v101 = v197;
                if (v114)
                {
                  id v116 = [v108 copy];
                  [v183 setObject:v116 forKey:ASDManagedLookupBundleID];

                  if (v107)
                  {
                    id v117 = +[NSNumber numberWithBool:v107[19] & 1];
                    [v183 setObject:v117 forKey:ASDManagedLookupIs32BitOnly];

                    id v119 = objc_getProperty(v107, v118, 216, 1);
                    id v121 = v119;
                    if (v119 && [v119 length])
                    {
                      id v122 = [v121 copy];
                      [v183 setObject:v122 forKey:ASDManagedLookupBundleDisplayName];
                    }
                    id v123 = objc_getProperty(v107, v120, 144, 1);
                    __int16 v125 = v123;
                    if (v123)
                    {
                      id v126 = [v123 copy];
                      [v183 setObject:v126 forKey:@"softwareVersionExternalIdentifier"];
                    }
                    uint64_t v127 = objc_getProperty(v107, v124, 72, 1);
                    long long v107 = v127;
                    if (v127) {
                      uint64_t v127 = objc_getProperty(v127, v128, 80, 1);
                    }
                  }
                  else
                  {
                    id v178 = +[NSNumber numberWithBool:0];
                    [v183 setObject:v178 forKey:ASDManagedLookupIs32BitOnly];

                    __int16 v125 = 0;
                    id v121 = 0;
                    uint64_t v127 = 0;
                  }
                  long long v129 = v127;

                  if (v129)
                  {
                    id v130 = [v129 copy];
                    [v183 setObject:v130 forKey:ASDManagedLookupUncompressedSize];
                  }
                  id v101 = v197;
                  goto LABEL_125;
                }
              }
            }

            long long v106 = (char *)v106 + 1;
          }
          while (v104 != v106);
          id v115 = [v101 countByEnumeratingWithState:&v204 objects:buf count:16];
          id v104 = v115;
          if (v115) {
            continue;
          }
          break;
        }
      }
LABEL_125:

      long long v131 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v132 = *(void *)(v196 + 120);
        long long v133 = [v183 objectForKey:@"bundleDisplayName"];
        *(_DWORD *)id v209 = 138412802;
        uint64_t v210 = v132;
        __int16 v211 = 2114;
        id v212 = v133;
        __int16 v213 = 2114;
        uint64_t v214 = v183;
        _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "[%@] bundleDisplayName: %{public}@ metatdata: %{public}@", v209, 0x20u);

        id v101 = v197;
      }

      id v57 = v191;
      id v8 = v192;
      id v39 = v180;
      if ([v183 count])
      {
        id v134 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:v183];
        if ([v192 count]) {
          [v134 addEntriesFromDictionary:v192];
        }
        if (v181) {
          *id v181 = [v134 copy];
        }
      }
      if (v185 | v189)
      {
        id v51 = v182;
        id v40 = 0;
        LOBYTE(v55) = 0;
        BOOL v135 = v189 == 0;
        BOOL v136 = v185 != 0;
        BOOL v54 = v136 && v135;
        if (v136 && v135) {
          int v56 = 1;
        }
        else {
          int v56 = v189;
        }
      }
      else
      {
        id v51 = v182;
        id v137 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
        {
          id v138 = *(void **)(v196 + 120);
          uint64_t v139 = *(void *)(v196 + 88);
          *(_DWORD *)long long buf = 138412546;
          id v216 = v138;
          __int16 v217 = 2114;
          *(void *)v218 = v139;
          _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "[%@] Installing vpp application with evid: %{public}@", buf, 0x16u);
        }

        uint64_t v140 = sub_1002F4424(v196, v192);
        [v140 setAccount:*(void *)(v196 + 40)];
        [v140 setSuppressEvaluatorDialogs:1];
        long long v141 = sub_1002517FC((id *)[PurchaseImportTask alloc], v197, v140, 0);
        id v199 = 0;
        unsigned int v55 = [(id)v196 runSubTask:v141 returningError:&v199];
        id v40 = v199;
        if (v55) {
          int v56 = 1;
        }
        else {
          int v56 = v189;
        }

        BOOL v54 = 0;
      }

      uint64_t v48 = v179;
      uint64_t v52 = v197;
      goto LABEL_144;
    }
    if (!*(unsigned char *)(a1 + 96))
    {
      int v187 = 0;
      uint64_t v67 = 0;
LABEL_96:
      sub_1003DD184((uint64_t)StoreItemResponse, v188, 0);
      uint64_t v98 = (id *)objc_claimAutoreleasedReturnValue();
      long long v79 = v98;
      if (v98) {
        uint64_t v98 = (id *)objc_getProperty(v98, v99, 56, 1);
      }
      int v189 = 0;
      long long v80 = v67;
      uint64_t v67 = v98;
      goto LABEL_99;
    }
    id v62 = [*(id *)(a1 + 56) thinningVariantID];
    BOOL v63 = v62 == 0;

    id v64 = sub_1003DD184((uint64_t)StoreItemResponse, v188, v63);
    objc_super v66 = v64;
    if (v64) {
      id v64 = objc_getProperty(v64, v65, 56, 1);
    }
    uint64_t v67 = v64;
    if ([v67 count] != (id)1)
    {
      id v68 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        long long v81 = *(void **)(a1 + 120);
        id v82 = [v67 count];
        *(_DWORD *)long long buf = 138412546;
        id v216 = v81;
        __int16 v217 = 2048;
        *(void *)v218 = v82;
        _os_log_error_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "[%@]: Will not attempt sinf update for app because we did not receive the expected number of purchases in response: %lu@", buf, 0x16u);
      }
      goto LABEL_95;
    }
    id v68 = [v67 objectAtIndexedSubscript:0];
    id v70 = [*(id *)(a1 + 56) bundleID];
    if (v70
      && (!v68 ? (id v71 = 0) : (id v71 = objc_getProperty(v68, v69, 96, 1)),
          id v72 = v71,
          v72,
          v72))
    {
      if (v68) {
        id v74 = objc_getProperty(v68, v73, 96, 1);
      }
      else {
        id v74 = 0;
      }
      id v75 = v74;
      unsigned __int8 v76 = [v70 isEqualToString:v75];

      if ((v76 & 1) == 0) {
        goto LABEL_93;
      }
    }
    else
    {
      id v83 = [*(id *)(v196 + 56) storeItemID];
      if (!v83)
      {

LABEL_93:
        __int16 v97 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
        {
          id v198 = v67;
          BOOL v153 = *(void **)(v196 + 120);
          id v154 = [*(id *)(v196 + 56) bundleID];
          id v190 = [*(id *)(v196 + 56) storeItemID];
          id v156 = v153;
          if (v68)
          {
            id v157 = objc_getProperty(v68, v155, 96, 1);
            id v159 = objc_getProperty(v68, v158, 208, 1);
            id v160 = v157;
          }
          else
          {
            id v157 = 0;
            id v160 = 0;
            id v159 = 0;
          }
          id v161 = v159;
          *(_DWORD *)long long buf = 138413314;
          id v216 = v156;
          __int16 v217 = 2114;
          *(void *)v218 = v154;
          *(_WORD *)&v218[8] = 2048;
          uint64_t v219 = (uint64_t)v190;
          __int16 v220 = 2114;
          id v221 = v157;
          __int16 v222 = 2114;
          id v223 = v161;
          _os_log_error_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "[%@]: Will not attempt sinf update for app because the existing app does not match the purchase response: %{public}@/%lld@ vs %{public}@/%{public}@", buf, 0x34u);

          uint64_t v67 = v198;
        }

LABEL_95:
        int v187 = 0;
        goto LABEL_96;
      }
      id v85 = v83;
      int v86 = v67;
      if (v68) {
        id v87 = objc_getProperty(v68, v84, 208, 1);
      }
      else {
        id v87 = 0;
      }
      id v88 = v87;
      id v89 = [v88 unsignedLongLongValue];

      uint64_t v67 = v86;
      if (!v89 || v85 != v89) {
        goto LABEL_93;
      }
    }
    id v90 = sub_100268348(v188, @"replacementSinf");
    if (v90)
    {
      id v91 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        id v92 = *(void **)(v196 + 120);
        *(_DWORD *)long long buf = 138412290;
        id v216 = v92;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "[%@] Commerce response contained replacement key, attempting to update sinf", buf, 0xCu);
      }

      int v187 = 1;
      unsigned int v93 = 1;
      if (sub_1002F7588(v196, v90))
      {
LABEL_167:

        if (v93)
        {
          id v148 = (id *)v196;
          if ([*(id *)(v196 + 56) isFactoryInstall])
          {
            if ([*(id *)(v196 + 136) requestType] == (id)1
              || [*(id *)(v196 + 136) requestType] == (id)3)
            {
              id v149 = +[ACAccountStore ams_sharedAccountStore];
              id v150 = objc_msgSend(v149, "ams_activeiTunesAccount");
            }
            else
            {
              id v150 = 0;
            }
            id v162 = [v67 objectAtIndexedSubscript:0];
            id v163 = sub_1003A77CC(v162, v150, 0);

            if (v163)
            {
              id v164 = *(void **)(v196 + 64);
              id v201 = 0;
              unsigned int v165 = sub_100401B48(v163, v164, 0, &v201);
              id v166 = v201;
              id v167 = ASDLogHandleForCategory();
              id v168 = v167;
              if (v165)
              {
                if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
                {
                  id v169 = *(void **)(v196 + 120);
                  *(_DWORD *)long long buf = 138412290;
                  id v216 = v169;
                  _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEFAULT, "[%@] Updated iTunesMetadata.plist", buf, 0xCu);
                }
              }
              else if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
              {
                id v177 = *(void **)(v196 + 120);
                *(_DWORD *)long long buf = 138412546;
                id v216 = v177;
                __int16 v217 = 2114;
                *(void *)v218 = v166;
                _os_log_error_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_ERROR, "[%@] iTunesMetadata.plist update failed with error: %{public}@", buf, 0x16u);
              }
            }
            id v148 = (id *)v196;
          }
          uint64_t v170 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
          {
            id v171 = v148[15];
            *(_DWORD *)long long buf = 138412290;
            id v216 = v171;
            _os_log_impl((void *)&_mh_execute_header, v170, OS_LOG_TYPE_DEFAULT, "[%@] Fetching receipt after sinf update", buf, 0xCu);
          }

          id v172 = sub_100224624((id *)[AppReceiptTask alloc], v148[7]);
          long long v79 = v172;
          if (v172)
          {
            objc_setProperty_nonatomic_copy(v172, v173, v148[5], 56);
            v79[9] = (id)8;
            objc_setProperty_nonatomic_copy(v79, v174, v148[15], 64);
            *((unsigned char *)v79 + 4_Block_object_dispose(&a9, 8) = 1;
          }
          id v200 = 0;
          [v148 runSubTask:v79 returningError:&v200];
          long long v80 = v200;
          if (v80)
          {
            id v175 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
            {
              BOOL v176 = *(void **)(v196 + 120);
              *(_DWORD *)long long buf = 138412546;
              id v216 = v176;
              __int16 v217 = 2114;
              *(void *)v218 = v80;
              _os_log_error_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_ERROR, "[%@] Receipt refresh failed with error: %{public}@", buf, 0x16u);
            }
          }
          int v189 = 1;
          goto LABEL_99;
        }
        goto LABEL_96;
      }
    }
    else
    {
      int v187 = 0;
    }
    id v147 = [v67 objectAtIndexedSubscript:0];
    unsigned int v93 = sub_1002F771C(v196, v147);

    goto LABEL_167;
  }
  BOOL v58 = 0;
  uint64_t v59 = 0;
  id v57 = v191;
  if (a4) {
LABEL_44:
  }
    *a4 = v59;
LABEL_45:
  if (a5) {
    *a5 = v40;
  }
  BOOL v203 = v58;

  BOOL v60 = v203;
LABEL_48:

  return v60;
}

id sub_1002F7588(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleIdentifier:*(void *)(a1 + 64)];
  id v12 = 0;
  id v5 = sub_100279608((uint64_t)IXAppInstallCoordinator, v4, 0, v3, (uint64_t)&v12);

  id v6 = v12;
  id v7 = ASDLogHandleForCategory();
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 120);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Successfully replaced SINF for existing app", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 120);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v14 = v11;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%@] Attempt to replace SINF resulted in error: %{public}@", buf, 0x16u);
  }

  return v5;
}

id sub_1002F771C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!v3 || (id v6 = objc_getProperty(v3, v4, 72, 1)) == 0)
  {
    id v8 = 0;
    goto LABEL_10;
  }
  id v8 = v6;
  id v9 = objc_getProperty(v6, v7, 144, 1);
  if (!v9)
  {
LABEL_10:
    uint64_t v19 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 120);
      int v22 = 138412290;
      uint64_t v23 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[%@]: Will not attempt sinf update for app because the purchase response did not provide sinf data", (uint8_t *)&v22, 0xCu);
    }

    uint64_t v10 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = v9;
  id v11 = [*(id *)(a1 + 56) storeExternalVersionID];
  if (!v11
    || (id v13 = v11,
        id v14 = objc_getProperty(v5, v12, 144, 1),
        id v15 = [v14 unsignedLongLongValue],
        v14,
        v13 != v15))
  {
LABEL_13:
    id v18 = 0;
    goto LABEL_14;
  }
  id v16 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 120);
    int v22 = 138412290;
    uint64_t v23 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[%@] Existing app has matching evid, attempting to update sinf", (uint8_t *)&v22, 0xCu);
  }

  id v18 = sub_1002F7588(a1, v10);
LABEL_14:

  return v18;
}

uint64_t sub_1002F790C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v92 = a3;
  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = *(void **)(a1 + 120);
    *(_DWORD *)long long buf = 138412290;
    id v105 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%@] Attempting to update sinf", buf, 0xCu);
  }

  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  id obj = v4;
  id v7 = [obj countByEnumeratingWithState:&v99 objects:v108 count:16];
  if (!v7)
  {
    char v10 = 0;
    goto LABEL_103;
  }
  id v9 = v7;
  char v10 = 0;
  uint64_t v95 = *(void *)v100;
  *(void *)&long long v8 = 138412546;
  long long v87 = v8;
  id v11 = (id *)a1;
  do
  {
    id v12 = 0;
    id v93 = v9;
    do
    {
      if (*(void *)v100 != v95) {
        objc_enumerationMutation(obj);
      }
      id v13 = *(void **)(*((void *)&v99 + 1) + 8 * (void)v12);
      if (v13)
      {
        id v16 = objc_getProperty(v13, v14, 96, 1);
        id Property = objc_getProperty(v13, v17, 208, 1);
      }
      else
      {
        id v16 = 0;
        id Property = 0;
      }
      id v19 = Property;
      uint64_t v20 = [v19 stringValue];
      if (![v16 length] || !objc_msgSend(v20, "length"))
      {
        int v38 = 1;
        goto LABEL_68;
      }
      uint64_t v21 = [v11[13] stringValue];
      unsigned int v22 = [v20 isEqualToString:v21];

      if (v22)
      {
        id v24 = v11[7];
        if (v24)
        {
          id v26 = [v24 md5];
          if (v13)
          {
            id v27 = objc_getProperty(v13, v25, 72, 1);
            uint64_t v29 = v27;
            if (v27) {
              id v27 = objc_getProperty(v27, v28, 112, 1);
            }
          }
          else
          {
            uint64_t v29 = 0;
            id v27 = 0;
          }
          id v30 = v27;

          if (v26 && [v30 length])
          {
            unsigned __int8 v32 = [v30 isEqualToString:v26];
            log = ASDLogHandleForCategory();
            BOOL v33 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
            if (v32)
            {
              id v89 = v30;
              if (v33)
              {
                id v34 = v11[15];
                *(_DWORD *)long long buf = 138412290;
                id v105 = v34;
                _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "[%@] Updated sinf with MD5 match", buf, 0xCu);
              }
              char v35 = 0;
              int v36 = 0;
              int v37 = 1;
              goto LABEL_38;
            }
            if (v33)
            {
              id v65 = v11[15];
              *(_DWORD *)long long buf = 138412290;
              id v105 = v65;
              _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "[%@] sinf update failed due to MD5 miss-match", buf, 0xCu);
            }

LABEL_65:
            char v10 = 0;
LABEL_66:

            int v38 = 0;
            goto LABEL_67;
          }
          id v89 = v30;
          if (v13) {
            id v39 = objc_getProperty(v13, v31, 144, 1);
          }
          else {
            id v39 = 0;
          }
          id v88 = v26;
          log = v39;
          id v40 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v11[7] storeExternalVersionID]);
          if ([v11[7] isInstalled]
            && (![v11[7] isInstalled]
             || ([v40 isEqualToNumber:log] & 1) != 0))
          {
            id v41 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              id v42 = *(void **)(a1 + 120);
              unsigned int v43 = [*(id *)(a1 + 56) isInstalled];
              unsigned int v44 = [v40 isEqualToNumber:log];
              *(_DWORD *)long long buf = 138412802;
              id v105 = v42;
              __int16 v106 = 1024;
              LODWORD(v107[0]) = v43;
              WORD2(v107[0]) = 1024;
              *(_DWORD *)((char *)v107 + 6) = v44;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "[%@] Attempting sinf swap for matching. Installed: %{BOOL}d evid matches: %{BOOL}d", buf, 0x18u);
            }
            char v35 = 0;
            int v36 = 1;
          }
          else
          {
            id v41 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v45 = *(void **)(a1 + 120);
              unsigned int v46 = [*(id *)(a1 + 56) isInstalled];
              unsigned int v47 = [v40 isEqualToNumber:log];
              *(_DWORD *)long long buf = 138412802;
              id v105 = v45;
              __int16 v106 = 1024;
              LODWORD(v107[0]) = v46;
              WORD2(v107[0]) = 1024;
              *(_DWORD *)((char *)v107 + 6) = v47;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "[%@] Skipping sinf swap. Installed: %{BOOL}d evid matches: %{BOOL}d", buf, 0x18u);
            }
            int v36 = 0;
            char v35 = 1;
          }

          int v37 = 0;
          id v26 = v88;
LABEL_38:
        }
        else
        {
          char v35 = 0;
          int v36 = 0;
          int v37 = 0;
        }
        uint64_t v48 = v92;
        if (v92)
        {
LABEL_47:
          if (v48) {
            char v56 = v35;
          }
          else {
            char v56 = 1;
          }
          id v92 = v48;
          if ((v56 & 1) == 0)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v57 = [objc_alloc((Class)IXApplicationIdentity) initWithBundleIdentifier:v16];
              id v98 = 0;
              unsigned int v58 = sub_100279608((uint64_t)IXAppInstallCoordinator, v57, 0, v48, (uint64_t)&v98);
              id v26 = v98;
              uint64_t v59 = ASDLogHandleForCategory();
              BOOL v60 = v59;
              if (v58)
              {
                if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                {
                  id v61 = *(void **)(a1 + 120);
                  *(_DWORD *)long long buf = 138412290;
                  id v105 = v61;
                  _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "[%@] Successfully updated sinf", buf, 0xCu);
                }

                id v11 = (id *)a1;
                if ([*(id *)(a1 + 56) isFactoryInstall])
                {
                  if ([*(id *)(a1 + 136) requestType] == (id)1
                    || [*(id *)(a1 + 136) requestType] == (id)3)
                  {
                    id v62 = +[ACAccountStore ams_sharedAccountStore];
                    BOOL v63 = objc_msgSend(v62, "ams_activeiTunesAccount");
                  }
                  else
                  {
                    BOOL v63 = 0;
                  }
                  objc_super v66 = sub_1003A77CC(v13, v63, 0);
                  uint64_t v67 = v66;
                  if (v66)
                  {
                    id v97 = 0;
                    unsigned int v68 = sub_100401B48(v66, v16, 0, &v97);
                    id v69 = v97;
                    id v70 = ASDLogHandleForCategory();
                    id v71 = v70;
                    if (v68)
                    {
                      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                      {
                        id v72 = *(void **)(a1 + 120);
                        *(_DWORD *)long long buf = 138412290;
                        id v105 = v72;
                        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "[%@] Updated iTunesMetadata.plist", buf, 0xCu);
                      }
                    }
                    else if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v84 = *(void **)(a1 + 120);
                      *(_DWORD *)long long buf = v87;
                      id v105 = v84;
                      __int16 v106 = 2114;
                      v107[0] = v69;
                      _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "[%@] iTunesMetadata.plist update failed with error: %{public}@", buf, 0x16u);
                    }

                    id v11 = (id *)a1;
                  }
                }
                id v73 = v11[7];
                id v74 = ASDLogHandleForCategory();
                id v26 = v74;
                if (v73)
                {
                  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
                  {
                    id v75 = v11[15];
                    *(_DWORD *)long long buf = 138412290;
                    id v105 = v75;
                    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[%@] Fetching receipt", buf, 0xCu);
                  }

                  unsigned __int8 v76 = sub_100224624((id *)[AppReceiptTask alloc], v11[7]);
                  id v26 = v76;
                  if (v76)
                  {
                    objc_setProperty_nonatomic_copy(v76, v77, v11[5], 56);
                    v26[9].isa = (Class)8;
                    objc_setProperty_nonatomic_copy(v26, v78, v11[15], 64);
                    LOBYTE(v26[6].isa) = 1;
                  }
                  id v96 = 0;
                  objc_msgSend(v11, "runSubTask:returningError:", v26, &v96, v87);
                  id v79 = v96;
                  if (v79)
                  {
                    long long v80 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
                    {
                      id v82 = v11[15];
                      *(_DWORD *)long long buf = v87;
                      id v105 = v82;
                      __int16 v106 = 2114;
                      v107[0] = v79;
                      _os_log_error_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "[%@] Receipt refresh failed with error: %{public}@", buf, 0x16u);
                    }
                  }
                }
                else if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
                {
                  id v83 = v11[15];
                  *(_DWORD *)long long buf = 138412290;
                  id v105 = v83;
                  _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[%@] Receipt refresh failed - application not found", buf, 0xCu);
                }
                char v10 = 1;
              }
              else
              {
                if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                {
                  long long v81 = *(void **)(a1 + 120);
                  *(_DWORD *)long long buf = v87;
                  id v105 = v81;
                  __int16 v106 = 2114;
                  v107[0] = v26;
                  _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "[%@] Sinf update resulted in error: %{public}@", buf, 0x16u);
                }

                char v10 = 0;
                id v11 = (id *)a1;
              }
              goto LABEL_66;
            }
          }
        }
        else
        {
          if ((v36 | v37) == 1)
          {
            if (v13)
            {
              id v49 = objc_getProperty(v13, v23, 72, 1);
              id v51 = v49;
              uint64_t v52 = a1;
              if (v49) {
                id v49 = objc_getProperty(v49, v50, 144, 1);
              }
            }
            else
            {
              id v51 = 0;
              id v49 = 0;
              uint64_t v52 = a1;
            }
            id v53 = v49;

            BOOL v54 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v55 = *(void **)(v52 + 120);
              *(_DWORD *)long long buf = 138412290;
              id v105 = v55;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "[%@] Using sinf data for from download", buf, 0xCu);
            }

            uint64_t v48 = v53;
            goto LABEL_47;
          }
          id v92 = 0;
        }
        id v11 = (id *)a1;
        id v26 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          id v64 = *(void **)(a1 + 120);
          *(_DWORD *)long long buf = 138412290;
          id v105 = v64;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[%@] Did not perform an inline update of the sinf", buf, 0xCu);
        }
        goto LABEL_65;
      }
      int v38 = 1;
LABEL_67:
      id v9 = v93;
LABEL_68:

      if (!v38) {
        goto LABEL_103;
      }
      id v12 = (char *)v12 + 1;
    }
    while (v9 != v12);
    id v85 = [obj countByEnumeratingWithState:&v99 objects:v108 count:16];
    id v9 = v85;
  }
  while (v85);
LABEL_103:

  unsigned __int8 v103 = v10 & 1;
  return v103;
}

void sub_1002F84C0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1002F8520(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  int v37 = a3;
  id v6 = [v5 items];
  id v7 = [v6 count];

  if (v7)
  {
    char v35 = a3;
    id v36 = v5;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id obj = [v5 items];
    id v40 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
    if (!v40) {
      goto LABEL_37;
    }
    uint64_t v39 = *(void *)v49;
    uint64_t v43 = a1;
    while (1)
    {
      for (uint64_t i = 0; i != v40; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v49 != v39) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v48 + 1) + 8 * i);
        char v10 = [v9 results];
        if ([v10 count])
        {
          id v41 = v10;
          id v42 = i;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          id v11 = v10;
          id v12 = [v11 countByEnumeratingWithState:&v44 objects:v52 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v45;
            do
            {
              for (uint64_t j = 0; j != v13; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v45 != v14) {
                  objc_enumerationMutation(v11);
                }
                id v16 = *(void **)(*((void *)&v44 + 1) + 8 * (void)j);
                SEL v17 = [*(id *)(a1 + 32) logKey];
                id v18 = v16;
                id v19 = @"VPP Free Purchase";
                self;
                id v20 = [v18 status];
                if (v20)
                {
                  if (v20 == (id)1)
                  {
                    uint64_t v21 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                    {
                      unsigned int v22 = [v18 bundleID];
                      uint64_t v23 = [v18 error];
                      *(_DWORD *)long long buf = 138543874;
                      unsigned int v55 = v22;
                      __int16 v56 = 2114;
                      id v57 = v23;
                      __int16 v58 = 2114;
                      CFStringRef v59 = @"VPP Free Purchase";
                      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Import failed for bundleID: %{public}@ error: %{public}@ reason: %{public}@", buf, 0x20u);
                      goto LABEL_23;
                    }
                  }
                  else
                  {
                    if (v20 != (id)2) {
                      goto LABEL_25;
                    }
                    uint64_t v21 = ASDLogHandleForCategory();
                    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                    {
                      unsigned int v22 = [v18 persistentID];
                      uint64_t v23 = [v18 bundleID];
                      *(_DWORD *)long long buf = 138543874;
                      unsigned int v55 = v22;
                      __int16 v56 = 2114;
                      id v57 = v23;
                      __int16 v58 = 2114;
                      CFStringRef v59 = @"VPP Free Purchase";
                      id v24 = v21;
                      uint64_t v25 = "Import success for job: %{public}@ / %{public}@ reason: %{public}@";
                      goto LABEL_22;
                    }
                  }
                }
                else
                {
                  uint64_t v21 = ASDLogHandleForCategory();
                  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                  {
                    unsigned int v22 = [v18 persistentID];
                    uint64_t v23 = [v18 bundleID];
                    *(_DWORD *)long long buf = 138543874;
                    unsigned int v55 = v22;
                    __int16 v56 = 2114;
                    id v57 = v23;
                    __int16 v58 = 2114;
                    CFStringRef v59 = @"VPP Free Purchase";
                    id v24 = v21;
                    uint64_t v25 = "Skipped duplicate job: %{public}@ / %{public}@ reason: %{public}@";
LABEL_22:
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0x20u);
LABEL_23:

                    a1 = v43;
                  }
                }

LABEL_25:
              }
              id v13 = [v11 countByEnumeratingWithState:&v44 objects:v52 count:16];
            }
            while (v13);
          }

          id v26 = *(void **)(a1 + 40);
          char v10 = v41;
          uint64_t i = v42;
          if (v26) {
            [v26 addObjectsFromArray:v11];
          }
        }
        else
        {
          id v27 = [v9 purchase];
          uint64_t v28 = [v27 bundleID];

          uint64_t v29 = ASDLogHandleForCategory();
          BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
          if (v28)
          {
            if (v30)
            {
              uint64_t v31 = *(void **)(*(void *)(a1 + 48) + 120);
              *(_DWORD *)long long buf = 138412802;
              unsigned int v55 = v31;
              __int16 v56 = 2114;
              id v57 = v28;
              __int16 v58 = 2114;
              CFStringRef v59 = v37;
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "[%@] Free purchase failed for bundleID: %{public}@ error: %{public}@", buf, 0x20u);
            }
          }
          else if (v30)
          {
            unsigned __int8 v32 = *(void **)(*(void *)(a1 + 48) + 120);
            BOOL v33 = [v9 purchase];
            id v34 = [v33 buyParameters];
            *(_DWORD *)long long buf = 138412802;
            unsigned int v55 = v32;
            __int16 v56 = 2114;
            id v57 = v34;
            __int16 v58 = 2114;
            CFStringRef v59 = v37;
            _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "[%@] Free purchase failed with buyParams: %{public}@ error: %{public}@", buf, 0x20u);
          }
        }
      }
      id v40 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
      if (!v40)
      {
LABEL_37:

        a3 = v35;
        id v5 = v36;
        break;
      }
    }
  }
  if (v37) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

id *sub_1002F8BC0(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    if (os_variant_has_internal_content())
    {
      v10.receiver = a1;
      v10.super_class = (Class)PresentTapToRadarRequestFlow;
      long long v8 = (id *)objc_msgSendSuper2(&v10, "init");
      a1 = v8;
      if (v8)
      {
        objc_storeStrong(v8 + 2, a2);
        objc_storeStrong(a1 + 1, a3);
      }
    }
    else
    {

      a1 = 0;
    }
  }

  return a1;
}

void sub_1002F8C78(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[NSString stringWithFormat:@"INTERNAL ONLY\n%@", *(void *)(a1 + 16)];
    id v3 = +[NSString stringWithFormat:@"%@\n\nPlease file a radar! It's quick and easy.", *(void *)(a1 + 8)];
    id v4 = v2;
    self;
    id v5 = +[AMSDialogRequest requestWithTitle:v4 message:v3];

    id v6 = +[AMSDialogAction actionWithTitle:@"File A Radar" style:0];
    [v6 setIdentifier:@"FILE_RADAR_IDENTIFIER"];
    [v5 addButtonAction:v6];
    id v7 = +[AMSDialogAction actionWithTitle:@"No Thanks" style:2];
    [v5 addButtonAction:v7];
    [v5 setDefaultAction:v6];

    id v8 = [objc_alloc((Class)AMSSystemAlertDialogTask) initWithRequest:v5];
    id v9 = [v8 present];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002F8E38;
    void v10[3] = &unk_1005236A8;
    void v10[4] = a1;
    [v9 addFinishBlock:v10];
  }
}

void sub_1002F8E38(uint64_t a1, void *a2)
{
  id v2 = *(id **)(a1 + 32);
  id v3 = a2;
  id v4 = v3;
  if (v2)
  {
    id v5 = [v3 selectedActionIdentifier];
    unsigned int v6 = [v5 isEqual:@"FILE_RADAR_IDENTIFIER"];

    if (v6)
    {
      if (objc_getProperty(v2, v7, 24, 1))
      {
        id Property = (void (**)(void))objc_getProperty(v2, v8, 24, 1);
        objc_super v10 = Property[2]();
      }
      else
      {
        objc_super v10 = 0;
      }
      id v11 = v2[2];
      id v12 = v10;
      self;
      id v13 = objc_alloc_init((Class)NSURLComponents);
      [v13 setScheme:@"tap-to-radar"];
      [v13 setHost:@"new"];
      id v14 = objc_alloc_init((Class)NSMutableArray);
      id v15 = [objc_alloc((Class)NSURLQueryItem) initWithName:@"ComponentName" value:@"App Store"];
      [v14 addObject:v15];

      id v16 = [objc_alloc((Class)NSURLQueryItem) initWithName:@"ComponentVersion" value:@"New Bugs"];
      [v14 addObject:v16];

      id v17 = [objc_alloc((Class)NSURLQueryItem) initWithName:@"ComponentID" value:@"685220"];
      [v14 addObject:v17];

      id v18 = [objc_alloc((Class)NSURLQueryItem) initWithName:@"Classification" value:@"Serious Bug"];
      [v14 addObject:v18];

      id v19 = [objc_alloc((Class)NSURLQueryItem) initWithName:@"Reproducibility" value:@"I Didn't Try"];
      [v14 addObject:v19];

      id v20 = [objc_alloc((Class)NSURLQueryItem) initWithName:@"AutoDiagnostics" value:@"phone"];
      [v14 addObject:v20];

      if (v11 && [v11 length])
      {
        id v21 = [objc_alloc((Class)NSURLQueryItem) initWithName:@"Title" value:v11];
        [v14 addObject:v21];
      }
      if (v12 && [v12 length])
      {
        id v22 = [objc_alloc((Class)NSURLQueryItem) initWithName:@"Description" value:v12];
        [v14 addObject:v22];
      }
      [v13 setQueryItems:v14];
      uint64_t v23 = [v13 URL];

      id v24 = +[LSApplicationWorkspace defaultWorkspace];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      void v26[2] = sub_1002F91A4;
      void v26[3] = &unk_100527350;
      id v27 = v23;
      id v25 = v23;
      [v24 openURL:v25 configuration:0 completionHandler:v26];
    }
  }
}

void sub_1002F91A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138543618;
      uint64_t v8 = v6;
      __int16 v9 = 2114;
      id v10 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Tap-to-radar failed: %{public}@ error: %{public}@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1002F9278(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic_copy(a1, newValue, newValue, 24);
  }
}

void *sub_1002F92DC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)MediaApp;
    a1 = objc_msgSendSuper2(&v12, "init");
    if (a1)
    {
      id v4 = [v3 objectForKeyedSubscript:@"id"];
      id v5 = [v4 copy];

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_6;
      }
      a1[3] = [v5 longLongValue];
      uint64_t v6 = [v3 objectForKeyedSubscript:@"href"];
      id v7 = [v6 copy];
      uint64_t v8 = (void *)a1[4];
      a1[4] = v7;

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v9 = [v3 copy];
        id v10 = (void *)a1[1];
        a1[1] = v9;
      }
      else
      {
LABEL_6:
        id v10 = v5;
        id v5 = a1;
        a1 = 0;
      }
    }
  }

  return a1;
}

id *sub_1002F9408(id *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = a1[2];
    if (!v3)
    {
      id v4 = [a1[1] objectForKeyedSubscript:@"attributes"];
      if (v4)
      {
        id v5 = sub_10039F748((id *)[MediaAppAttributes alloc], v4);
        id v6 = v2[2];
        v2[2] = v5;
      }
      id v3 = v2[2];
    }
    a1 = (id *)v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_1002F948C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

void sub_1002F9618(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = 138543618;
    id v7 = (id)objc_opt_class();
    __int16 v8 = 2114;
    id v9 = v3;
    id v5 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}@]: Client was disconnected: %{public}@", (uint8_t *)&v6, 0x16u);
  }
  sub_1002F9714(WeakRetained, v3);
}

void sub_1002F9714(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v5 = v3;
    sub_10040A654((uint64_t)v3);
    id v4 = a1;
    objc_sync_enter(v4);
    [v4[1] removeObject:v5];
    objc_sync_exit(v4);

    id v3 = v5;
  }
}

void sub_1002F9784(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002F9798(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = 138543618;
    id v7 = (id)objc_opt_class();
    __int16 v8 = 2114;
    id v9 = v3;
    id v5 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}@]: Client lost connection: %{public}@", (uint8_t *)&v6, 0x16u);
  }
  sub_1002F9714(WeakRetained, v3);
}

void sub_1002F9FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_1002F9FEC(void *a1, void *a2)
{
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = sub_100344D90(a2, *(void **)(a1[4] + 88));
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v4;
  return *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
}

void sub_1002FA1B8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FA234;
    block[3] = &unk_100521388;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002FA234(uint64_t a1)
{
  uint64_t v1 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Performing cleanup on startup", buf, 2u);
  }

  if (!*(void *)(a1 + 32)) {
    goto LABEL_48;
  }
  id v2 = objc_opt_new();
  uint64_t v3 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"IFNULL(app_install.phase, 10)" values:&off_10054DF20];
  *(void *)&long long v60 = _NSConcreteStackBlock;
  *((void *)&v60 + 1) = 3221225472;
  uint64_t v61 = (uint64_t)sub_1002FBCB8;
  id v62 = &unk_100527448;
  id v4 = v2;
  id v63 = v4;
  sub_1002FBCD0(v3, &v60);

  id v5 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v4 count];
    LODWORD(v60) = 134217984;
    *(void *)((char *)&v60 + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "╒ Cleaning up stale coordinators. %lu active coordinator IDs:", (uint8_t *)&v60, 0xCu);
  }

  if ([v4 count])
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id v7 = v4;
    id v8 = [v7 countByEnumeratingWithState:&v56 objects:buf count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v57;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v57 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = *(void *)(*((void *)&v56 + 1) + 8 * i);
          objc_super v12 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v60) = 138543362;
            *(void *)((char *)&v60 + 4) = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "┊   %{public}@", (uint8_t *)&v60, 0xCu);
          }
        }
        id v8 = [v7 countByEnumeratingWithState:&v56 objects:buf count:16];
      }
      while (v8);
    }
  }
  else
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "┊   <none>", (uint8_t *)&v60, 2u);
    }
  }

  *(void *)&long long v60 = 0;
  *((void *)&v60 + 1) = &v60;
  uint64_t v61 = 0x2020000000;
  id v62 = 0;
  id v43 = 0;
  *(void *)long long v46 = _NSConcreteStackBlock;
  *(void *)&v46[8] = 3221225472;
  *(void *)&uint8_t v46[16] = sub_1002FC6AC;
  long long v47 = &unk_100524728;
  id v13 = v4;
  id v48 = v13;
  long long v49 = &v60;
  unsigned int v14 = +[IXAppInstallCoordinator enumerateCoordinatorsWithError:&v43 usingBlock:v46];
  id v15 = v43;
  if (v14)
  {
    id v16 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(*((void *)&v60 + 1) + 24);
      *(_DWORD *)long long v44 = 67109376;
      LODWORD(v45[0]) = 1;
      WORD2(v45[0]) = 2048;
      *(void *)((char *)v45 + 6) = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "╘ Coordinator cleanup complete with result: %d cancel count: %ld", v44, 0x12u);
    }
  }
  else
  {
    id v16 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v44 = 138543362;
      v45[0] = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "╘ Coordinator cleanup complete with error: %{public}@", v44, 0xCu);
    }
  }

  _Block_object_dispose(&v60, 8);
  if (!*(void *)(a1 + 32)) {
    goto LABEL_48;
  }
  id v18 = objc_alloc_init((Class)NSMutableDictionary);
  *(void *)long long buf = _NSConcreteStackBlock;
  uint64_t v51 = 3221225472;
  uint64_t v52 = sub_1002FC83C;
  id v53 = &unk_100527448;
  id v19 = v18;
  id v54 = v19;
  sub_1002FBCD0(0, buf);
  if (![v19 count]) {
    goto LABEL_30;
  }
  *(void *)&long long v60 = 0;
  *(void *)&long long v56 = _NSConcreteStackBlock;
  *((void *)&v56 + 1) = 3221225472;
  *(void *)&long long v57 = sub_1002FC9B0;
  *((void *)&v57 + 1) = &unk_100524750;
  *(void *)&long long v58 = v19;
  +[IXAppInstallCoordinator enumerateCoordinatorsWithError:&v60 usingBlock:&v56];
  id v20 = (id)v60;

  if (v20)
  {
    id v21 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v46 = 138543362;
      *(void *)&v46[4] = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
    }
  }
  else
  {
LABEL_30:
    if ([v19 count])
    {
      id v20 = [v19 allValues];
      id v22 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = [v19 count];
        id v24 = [v20 componentsJoinedByString:@","];
        *(_DWORD *)long long v46 = 134218242;
        *(void *)&v46[4] = v23;
        *(_WORD *)&v46[12] = 2114;
        *(void *)&v46[14] = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Cleaning up %lu stale install(s): %{public}@", v46, 0x16u);
      }
      sub_1002FC4F0(v20);
    }
    else
    {
      id v20 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "No stale installs", v46, 2u);
      }
    }
  }

  if (!*(void *)(a1 + 32)) {
    goto LABEL_48;
  }
  id v25 = objc_alloc_init(_TtC9appstored6LogKey);
  id v26 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_type" equalToValue:&off_10054C5B8];
  *(void *)&long long v56 = v26;
  id v27 = +[SQLiteComparisonPredicate predicateWithProperty:@"IFNULL(app_install.bootstrapped, 2)" equalToValue:&off_10054C558];
  *((void *)&v56 + 1) = v27;
  uint64_t v28 = +[SQLiteComparisonPredicate predicateWithProperty:@"restore_state" value:&off_10054C5D0 comparisonType:2];
  *(void *)&long long v57 = v28;
  uint64_t v29 = +[NSArray arrayWithObjects:&v56 count:3];
  BOOL v30 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v29];

  uint64_t v31 = sub_1003E0BA4();
  *(void *)long long buf = _NSConcreteStackBlock;
  uint64_t v51 = 3221225472;
  uint64_t v52 = sub_1002FCCF8;
  id v53 = &unk_100522AB8;
  id v54 = v30;
  unsigned int v55 = v25;
  unsigned __int8 v32 = v25;
  id v33 = v30;
  [v31 modifyUsingTransaction:buf];

  if (!*(void *)(a1 + 32))
  {
LABEL_48:
    int v38 = 0;
LABEL_41:
    *(void *)long long buf = 0;
    *(void *)&long long v56 = 0;
    sub_1002FAE7C(v38, 1, &__NSArray0__struct, buf, &v56);
    if ((uint64_t)(v56 + *(void *)buf) >= 1)
    {
      uint64_t v39 = +[UpdatesManager sharedManager];
      [v39 noteUpdatesStateChanged:@"Post Cleanup" logKey:0];
    }
    goto LABEL_45;
  }
  id v34 = sub_1003F4150();
  char v35 = v34;
  if (v34)
  {
    [v34 timeIntervalSinceNow];
    BOOL v37 = v36 < -86400.0;

    if (!v37)
    {
      int v38 = *(void **)(a1 + 32);
      goto LABEL_41;
    }
  }
  if (sub_1002FABE0(*(void **)(a1 + 32), 1, 0) >= 1)
  {
    id v40 = +[UpdatesManager sharedManager];
    [v40 noteUpdatesStateChanged:@"Post Stale Cleanup" logKey:0];
  }
LABEL_45:
  id v41 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Cleanup on startup complete", buf, 2u);
  }
}

void sub_1002FABB8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FABE0(void *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cleaning up updates", buf, 2u);
    }

    if (a2) {
      sub_1003F4254();
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    sub_1002FAE7C(a1, a2, v5, &v23, &v22);
    if ([v5 count])
    {
      id v7 = objc_opt_new();
      id v8 = sub_1003E0BA4();
      id v16 = _NSConcreteStackBlock;
      uint64_t v17 = 3221225472;
      id v18 = sub_1002FCA10;
      id v19 = &unk_100525BC8;
      id v20 = v5;
      id v9 = v7;
      id v21 = v9;
      [v8 readUsingSession:&v16];

      if (objc_msgSend(v9, "count", v16, v17, v18, v19))
      {
        id v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = [v9 array];
          objc_super v12 = [v11 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138543362;
          id v25 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Canceling jobs for deletedApps: [%{public}@]", buf, 0xCu);
        }
        sub_1002FC4F0(v9);
      }
    }
    id v13 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      id v25 = (void *)(v22 + v23);
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Update clean up complete with %ld changes", buf, 0xCu);
    }

    uint64_t v14 = v22 + v23;
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1002FAE7C(void *a1, char a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  if (a1)
  {
    id v10 = objc_opt_new();
    uint64_t v11 = +[LSDatabaseContext sharedDatabaseContext];
    id v40 = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472;
    id v42 = sub_1002FC000;
    id v43 = &unk_1005274D8;
    id v44 = a1;
    id v45 = v10;
    id v12 = v10;
    [v11 accessUsingBlock:&v40];

    id v13 = [v12 copy];
    uint64_t v36 = 0;
    BOOL v37 = &v36;
    uint64_t v38 = 0x2020000000;
    uint64_t v39 = 0;
    uint64_t v32 = 0;
    id v33 = &v32;
    uint64_t v34 = 0x2020000000;
    uint64_t v35 = 0;
    uint64_t v14 = objc_opt_new();
    id v15 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"IFNULL(app_install.phase, 10)" values:&off_10054DF08];
    id v16 = sub_1003E0BA4();
    id v40 = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472;
    id v42 = sub_1002FBB10;
    id v43 = &unk_100525BC8;
    id v44 = v15;
    id v17 = v14;
    id v45 = v17;
    id v18 = v15;
    [v16 readUsingSession:&v40];

    id v19 = v45;
    id v20 = v17;

    LOBYTE(v1_Block_object_dispose(&a9, 8) = +[UpdatesManager shouldUseModernUpdates];
    id v21 = sub_10001A308();
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_1002FCFD0;
    void v24[3] = &unk_100527550;
    char v30 = (char)v18;
    id v25 = v9;
    uint64_t v28 = &v32;
    char v31 = a2;
    uint64_t v29 = &v36;
    id v22 = v20;
    id v26 = v22;
    id v23 = v13;
    id v27 = v23;
    [v21 modifyUsingTransaction:v24];

    if (a5) {
      *a5 = v33[3];
    }
    if (a4) {
      *a4 = v37[3];
    }

    _Block_object_dispose(&v32, 8);
    _Block_object_dispose(&v36, 8);
  }
}

void sub_1002FB178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1002FB1A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FB264;
    block[3] = &unk_1005221F0;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1002FB264(uint64_t a1)
{
  +[PreinstalledAppUpdateAuthorizationTask cleanupAfterUninstalledAppsWithBundleIDs:*(void *)(a1 + 32)];
  uint64_t v2 = sub_1002FABE0(*(void **)(a1 + 40), 0, *(void **)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = v2;
    id v5 = dispatch_get_global_queue(0, 0);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1002FB334;
    v6[3] = &unk_1005273A8;
    id v7 = v3;
    uint64_t v8 = v4;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_1002FB334(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1002FB348(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cleaning up updates following app being registered", buf, 2u);
    }

    uint64_t v8 = *(NSObject **)(a1 + 8);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002FB454;
    void v9[3] = &unk_100521698;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, v9);
  }
}

void sub_1002FB454(uint64_t a1)
{
  v11[0] = 0;
  v11[1] = v11;
  void v11[2] = 0x2020000000;
  v11[3] = 0;
  uint64_t v2 = sub_10001A308();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002FB5C0;
  v8[3] = &unk_1005273F8;
  id v9 = *(id *)(a1 + 32);
  id v10 = v11;
  [v2 modifyUsingTransaction:v8];

  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = dispatch_get_global_queue(0, 0);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1002FBAF4;
    v5[3] = &unk_100524560;
    id v6 = v3;
    id v7 = v11;
    dispatch_async(v4, v5);
  }
  _Block_object_dispose(v11, 8);
}

void sub_1002FB5A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002FB5C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"update_state" equalToLongLong:0];
  id v5 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"bundle_id" values:*(void *)(a1 + 32)];
  v19[0] = v5;
  v19[1] = v4;
  id v6 = +[NSArray arrayWithObjects:v19 count:2];
  id v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

  uint64_t v8 = [v3 connection];
  id v9 = sub_100300254((uint64_t)AppUpdateMemoryEntity, v8, v7);

  v18[0] = @"bundle_id";
  v18[1] = @"store_software_version_id";
  id v10 = +[NSArray arrayWithObjects:v18 count:2];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1002FB7B4;
  void v15[3] = &unk_1005273D0;
  uint64_t v11 = *(void *)(a1 + 40);
  id v16 = v3;
  uint64_t v17 = v11;
  id v12 = v3;
  [v9 enumerateMemoryEntitiesWithProperties:v10 usingBlock:v15];
  BOOL v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) > 0;

  return v13;
}

void sub_1002FB7B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  id v6 = [v5 bundleID];
  id v7 = [v5 evid];
  id v8 = [v7 unsignedLongLongValue];

  if (v8)
  {
    id v9 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v6 allowPlaceholder:0 error:0];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = [v9 iTunesMetadata];
      id v12 = [v11 versionIdentifier];

      if (v12 <= v8)
      {
        if (v12 != v8)
        {
          id v16 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            int v24 = 138543874;
            id v25 = v6;
            __int16 v26 = 2048;
            id v27 = v12;
            __int16 v28 = 2048;
            id v29 = v8;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Skipping changing update state of bundleID: %{public}@ to installed app evid: %llu with update evid: %llu", (uint8_t *)&v24, 0x20u);
          }
          goto LABEL_13;
        }
        id v18 = [AppUpdateEntity alloc];
        id v19 = [v5 databaseID];
        id v20 = [*(id *)(a1 + 32) connection];
        id v16 = [(SQLiteEntity *)v18 initWithPersistentID:v19 onConnection:v20];

        id v21 = +[NSDate date];
        [v16 setValue:v21 forProperty:@"install_date"];

        [v16 setValue:&off_10054C558 forProperty:@"update_state"];
        id v22 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          int v24 = 138543874;
          id v25 = v6;
          __int16 v26 = 2048;
          id v27 = v8;
          __int16 v28 = 2048;
          id v29 = v8;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Updated update state of bundleID: %{public}@ to installed app evid: %llu equals update evid: %llu", (uint8_t *)&v24, 0x20u);
        }
      }
      else
      {
        BOOL v13 = [AppUpdateEntity alloc];
        id v14 = [v5 databaseID];
        uint64_t v15 = [*(id *)(a1 + 32) connection];
        id v16 = [(SQLiteEntity *)v13 initWithPersistentID:v14 onConnection:v15];

        [v16 deleteFromDatabase];
        uint64_t v17 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v24 = 138543874;
          id v25 = v6;
          __int16 v26 = 2048;
          id v27 = v12;
          __int16 v28 = 2048;
          id v29 = v8;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Removed update with bundleID: %{public}@ due to newly installed app evid: %llu being greater than update evid: %llu", (uint8_t *)&v24, 0x20u);
        }
      }
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
LABEL_13:
    }
  }
}

uint64_t sub_1002FBAF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_1002FBB10(uint64_t a1, void *a2)
{
  id v3 = [a2 connection];
  uint64_t v4 = sub_1002FF548((uint64_t)AppInstallEntity, v3, *(void **)(a1 + 32));

  CFStringRef v8 = @"bundle_id";
  id v5 = +[NSArray arrayWithObjects:&v8 count:1];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002FBC38;
  v6[3] = &unk_100527420;
  id v7 = *(id *)(a1 + 40);
  [v4 enumeratePersistentIDsAndProperties:v5 usingBlock:v6];
}

void sub_1002FBC38(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 objectForKeyedSubscript:@"bundle_id"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [*(id *)(a1 + 32) addObject:v4];
  }
}

id *sub_1002FBCB8(id *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    if (a5 != 50) {
      return (id *)objc_msgSend(result[4], "addObject:");
    }
  }
  return result;
}

void sub_1002FBCD0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = sub_1003E0BA4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002FBDA8;
  v8[3] = &unk_100527470;
  id v6 = v3;
  id v9 = v6;
  id v7 = v4;
  id v10 = v7;
  [v5 readUsingSession:v8];
}

void sub_1002FBDA8(uint64_t a1, void *a2)
{
  id v3 = [a2 connection];
  id v4 = sub_1002FF548((uint64_t)AppInstallEntity, v3, *(void **)(a1 + 32));

  v8[0] = @"coordinator_id";
  v8[1] = @"phase";
  v8[2] = @"bundle_id";
  id v5 = +[NSArray arrayWithObjects:v8 count:3];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002FBEE4;
  v6[3] = &unk_100527578;
  id v7 = *(id *)(a1 + 40);
  [v4 enumeratePersistentIDsAndProperties:v5 usingBlock:v6];
}

void sub_1002FBEE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 objectForKeyedSubscript:@"coordinator_id"];
  objc_opt_class();
  sub_100012D7C(v5);
  id v9 = (id)objc_claimAutoreleasedReturnValue();

  id v6 = [v4 objectForKeyedSubscript:@"phase"];
  [v6 integerValue];

  id v7 = [v4 objectForKeyedSubscript:@"bundle_id"];

  objc_opt_class();
  CFStringRef v8 = sub_100012D7C(v7);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002FC000(uint64_t a1)
{
  uint64_t v2 = +[LSApplicationRecord enumeratorWithOptions:0];
  [v2 setFilter:&stru_1005274B0];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = v2;
  id v3 = [obj countByEnumeratingWithState:&v41 objects:v52 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v42 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        CFStringRef v8 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          id v9 = objc_opt_class();
          *(_DWORD *)long long buf = 138412546;
          long long v46 = v9;
          __int16 v47 = 2112;
          id v48 = v7;
          id v10 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%@]: Including application: %@", buf, 0x16u);
        }
        uint64_t v11 = *(void **)(a1 + 40);
        id v12 = [v7 iTunesMetadata];
        BOOL v13 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v12 storeItemIdentifier]);
        [v11 setObject:&__kCFBooleanFalse forKeyedSubscript:v13];
      }
      id v4 = [obj countByEnumeratingWithState:&v41 objects:v52 count:16];
    }
    while (v4);
  }

  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v35 = +[LSApplicationRecord enumeratorWithOptions:64];
  id v14 = [v35 countByEnumeratingWithState:&v37 objects:v51 count:16];
  if (v14)
  {
    id v16 = v14;
    uint64_t v17 = *(void *)v38;
    *(void *)&long long v15 = 138412546;
    long long v34 = v15;
    do
    {
      for (uint64_t j = 0; j != v16; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v38 != v17) {
          objc_enumerationMutation(v35);
        }
        id v19 = *(void **)(*((void *)&v37 + 1) + 8 * (void)j);
        id v20 = objc_msgSend(v19, "placeholderFailureReason", v34);
        id v21 = ASDLogHandleForCategory();
        id v22 = v21;
        if (v20 == (id)4)
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            id v23 = objc_opt_class();
            id v24 = v23;
            id v25 = [v19 bundleIdentifier];
            *(_DWORD *)long long buf = 138412802;
            long long v46 = v23;
            __int16 v47 = 2114;
            id v48 = v25;
            __int16 v49 = 2048;
            uint64_t v50 = 4;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[%@]: Application is not installed: %{public}@ and is 32-bit: %ld", buf, 0x20u);
          }
          __int16 v26 = ASDLogHandleForCategory();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            id v27 = objc_opt_class();
            *(_DWORD *)long long buf = v34;
            long long v46 = v27;
            __int16 v47 = 2112;
            id v48 = v19;
            id v28 = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "[%@]: Including application: %@", buf, 0x16u);
          }
          id v22 = +[NSNumber numberWithBool:1];
          id v29 = *(void **)(a1 + 40);
          id v30 = [v19 iTunesMetadata];
          char v31 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v30 storeItemIdentifier]);
          [v29 setObject:v22 forKeyedSubscript:v31];
        }
        else
        {
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO)) {
            goto LABEL_24;
          }
          uint64_t v32 = objc_opt_class();
          id v30 = v32;
          id v33 = [v19 bundleIdentifier];
          *(_DWORD *)long long buf = 138412802;
          long long v46 = v32;
          __int16 v47 = 2114;
          id v48 = v33;
          __int16 v49 = 2048;
          uint64_t v50 = (uint64_t)v20;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "[%@]: Application is not installed: %{public}@ and not 32-bit: %ld", buf, 0x20u);
        }
LABEL_24:
      }
      id v16 = [v35 countByEnumeratingWithState:&v37 objects:v51 count:16];
    }
    while (v16);
  }
}

BOOL sub_1002FC4B0(id a1, LSApplicationRecord *a2)
{
  uint64_t v2 = [(LSApplicationRecord *)a2 iTunesMetadata];
  BOOL v3 = [v2 storeItemIdentifier] != 0;

  return v3;
}

void sub_1002FC4F0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_1003E0BA4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1002FC59C;
  v4[3] = &unk_1005236D0;
  id v3 = v1;
  id v5 = v3;
  [v2 modifyUsingTransaction:v4];
}

uint64_t sub_1002FC59C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      CFStringRef v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        sub_100237218(v3, (uint64_t)objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v8), "longLongValue", (void)v10), -30);
        CFStringRef v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }

  return 1;
}

uint64_t sub_1002FC6AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 creatorIdentifier] == (id)1)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = [v3 uniqueIdentifier];
    unsigned __int8 v6 = [v4 containsObject:v5];

    uint64_t v7 = ASDLogHandleForCategory();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        int v11 = 138543362;
        id v12 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "├ Active:    %{public}@", (uint8_t *)&v11, 0xCu);
      }
    }
    else
    {
      if (v8)
      {
        int v11 = 138543362;
        id v12 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "├ Untracked: %{public}@", (uint8_t *)&v11, 0xCu);
      }

      id v9 = ASDErrorWithTitleAndMessage();
      [v3 cancelForReason:v9 client:1 error:0];

      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
  }

  return 1;
}

void sub_1002FC83C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a3;
  id v10 = a4;
  int v11 = ASDLogHandleForCategory();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (a5 == 50)
  {
    if (v12)
    {
      int v14 = 138543362;
      id v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%{public}@] Skipping active install in postamble", (uint8_t *)&v14, 0xCu);
    }
  }
  else
  {
    if (v12)
    {
      long long v13 = sub_1003A47AC(a5);
      int v14 = 138543874;
      id v15 = v10;
      __int16 v16 = 2114;
      uint64_t v17 = v13;
      __int16 v18 = 2114;
      id v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[%{public}@] Found active install in phase: %{public}@ coordinatorID: %{public}@", (uint8_t *)&v14, 0x20u);
    }
    int v11 = +[NSNumber numberWithLongLong:a2];
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:v9];
  }
}

BOOL sub_1002FC9B0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a2 uniqueIdentifier];
  [v3 setObject:0 forKeyedSubscript:v4];

  return [*(id *)(a1 + 32) count] != 0;
}

void sub_1002FCA10(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v21 = a1;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        id v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"bundle_id" equalToValue:v8];
        id v10 = [v3 connection];
        int v11 = sub_1002FF3DC((uint64_t)AppInstallEntity, v10, v9);

        if ([v11 existsInDatabase])
        {
          id v12 = [objc_alloc((Class)LSApplicationRecord) initForInstallMachineryWithBundleIdentifier:v8 placeholder:1 error:0];
          long long v13 = (char *)[v12 installType];
          uint64_t v14 = (uint64_t)sub_10026E91C(v11, @"IFNULL(app_install.phase, 10)");
          if ((unint64_t)(v13 - 7) <= 2)
          {
            id v15 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:v11];
            __int16 v16 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v28 = v15;
              uint64_t v17 = v16;
              __int16 v18 = "[%@] Skipping cancellation, this looks like a promotion failure";
              goto LABEL_13;
            }
            goto LABEL_14;
          }
          if (v14 >= -19)
          {
            id v19 = *(void **)(v21 + 40);
            id v20 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v11 persistentID]);
            [v19 addObject:v20];

            id v15 = [[_TtC9appstored6LogKey alloc] initWithAppInstallEntity:v11];
            __int16 v16 = ASDLogHandleForCategory();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v28 = v15;
              uint64_t v17 = v16;
              __int16 v18 = "[%@] Scheduling install cancellation following app deletion";
LABEL_13:
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
            }
LABEL_14:
          }
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v29 count:16];
    }
    while (v5);
  }
}

uint64_t sub_1002FCCF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 connection];
  id v5 = sub_1002FF548((uint64_t)AppInstallEntity, v4, *(void **)(a1 + 32));

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1002FCE20;
  void v10[3] = &unk_100522A90;
  id v11 = v3;
  id v12 = *(id *)(a1 + 40);
  id v6 = v3;
  [v5 enumeratePersistentIDsUsingBlock:v10];
  if (v6)
  {
    uint64_t v8 = objc_getProperty(v6, v7, 24, 1);
    if (v8) {
      v8[16] |= 0x200000uLL;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return 1;
}

void sub_1002FCE20(uint64_t a1, uint64_t a2)
{
  id v4 = [AppInstallEntity alloc];
  id v5 = [*(id *)(a1 + 32) connection];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 onConnection:v5];

  uint64_t v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = sub_1002C1EE8(v6);
    int v16 = 138412546;
    uint64_t v17 = v8;
    __int16 v18 = 2112;
    id v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] [%@] Resetting restore bootstrap", (uint8_t *)&v16, 0x16u);
  }
  [(SQLiteEntity *)v6 setValue:&off_10054C5B8 forProperty:@"bootstrapped"];
  id v10 = sub_10026E91C(v6, @"restore_type");
  if (sub_10026E91C(v6, @"IFNULL(app_install.priority, 0)")) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = v10 == (id)2;
  }
  if (v12)
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v11, 24, 1);
    }
    id v14 = Property;
    id v15 = +[NSNumber numberWithLongLong:a2];
    sub_100285FAC((uint64_t)v14, v15);
  }
}

BOOL sub_1002FCFD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(unsigned char *)(a1 + 72))
  {
    id v5 = [v3 connection];
    id v6 = [SQLiteQueryDescriptor alloc];
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    id v9 = sub_1002FF380(v6, v7, v8);
    id v11 = v9;
    if (v9) {
      objc_setProperty_nonatomic_copy(v9, v10, &off_10054DF38, 40);
    }
    BOOL v12 = +[MediaAPIUpdateEntity installDatePropertyKey];
    id v48 = v12;
    id v14 = +[NSArray arrayWithObjects:&v48 count:1];
    if (v11) {
      objc_setProperty_nonatomic_copy(v11, v13, v14, 40);
    }

    id v15 = [[SQLiteQuery alloc] initOnConnection:v5 descriptor:v11];
    int v16 = +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey];
    v47[0] = v16;
    uint64_t v17 = +[MediaAPIUpdateEntity bundleIDPropertyKey];
    v47[1] = v17;
    __int16 v18 = +[MediaAPIUpdateEntity updateStatePropertyKey];
    v47[2] = v18;
    id v19 = +[NSArray arrayWithObjects:v47 count:3];

    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_1002FD430;
    v39[3] = &unk_100527500;
    id v40 = *(id *)(a1 + 32);
    id v41 = v5;
    char v44 = *(unsigned char *)(a1 + 73);
    long long v43 = *(_OWORD *)(a1 + 56);
    id v42 = *(id *)(a1 + 40);
    id v20 = v5;
    [v15 enumerateMemoryEntitiesWithProperties:v19 usingBlock:v39];
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
        + *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  }
  else
  {
    id v22 = [SQLiteQueryDescriptor alloc];
    uint64_t v23 = objc_opt_class();
    uint64_t v24 = objc_opt_class();
    long long v25 = sub_1002FF380(v22, v23, v24);
    id v11 = v25;
    if (v25) {
      objc_setProperty_nonatomic_copy(v25, v26, &off_10054DF50, 40);
    }
    CFStringRef v46 = @"install_date";
    id v28 = +[NSArray arrayWithObjects:&v46 count:1];
    if (v11) {
      objc_setProperty_nonatomic_copy(v11, v27, v28, 48);
    }

    id v29 = [SQLiteQuery alloc];
    id v30 = [v4 connection];
    id v15 = [(SQLiteQuery *)v29 initOnConnection:v30 descriptor:v11];

    v45[0] = @"bundle_id";
    v45[1] = @"update_state";
    v45[2] = @"store_item_id";
    void v45[3] = @"is_offloaded";
    id v19 = +[NSArray arrayWithObjects:v45 count:4];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    void v32[2] = sub_1002FD6C4;
    v32[3] = &unk_100527528;
    id v33 = *(id *)(a1 + 48);
    id v34 = *(id *)(a1 + 32);
    id v35 = v4;
    char v38 = *(unsigned char *)(a1 + 73);
    long long v37 = *(_OWORD *)(a1 + 56);
    id v36 = *(id *)(a1 + 40);
    [v15 enumerateMemoryEntitiesWithProperties:v19 usingBlock:v32];
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
        + *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);

    id v20 = v33;
  }

  return v21 > 0;
}

void sub_1002FD430(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 databaseID];
  id v5 = [v3 bundleID];
  if (([v3 isOffloaded] & 1) == 0
    && [*(id *)(a1 + 32) containsObject:v5])
  {
    id v6 = [[_TtC9appstored20MediaAPIUpdateEntity alloc] initWithPersistentID:v4 onConnection:*(void *)(a1 + 40)];
    [(SQLiteEntity *)v6 deleteFromDatabase];
    uint64_t v7 = ASDLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138543362;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removed modern update with bundle identifier “%{public}@” because the associated app was uninstalled.", (uint8_t *)&v14, 0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 56);
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    id v9 = [v3 updateState];
    if (v9 == (id)4)
    {
      if (([*(id *)(a1 + 48) containsObject:v5] & 1) == 0)
      {
        id v10 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 138543874;
          id v15 = v5;
          __int16 v16 = 2048;
          uint64_t v17 = 4;
          __int16 v18 = 2048;
          uint64_t v19 = 0;
          id v11 = "Updating purchased state for modern update with bundle identifier “%{public}@” from %ld to %ld…";
          goto LABEL_14;
        }
LABEL_15:

        id v6 = [[_TtC9appstored20MediaAPIUpdateEntity alloc] initWithPersistentID:v4 onConnection:*(void *)(a1 + 40)];
        BOOL v12 = +[NSNumber numberWithInteger:0];
        long long v13 = +[MediaAPIUpdateEntity updateStatePropertyKey];
        [(SQLiteEntity *)v6 setValue:v12 forProperty:v13];

        uint64_t v8 = *(void *)(a1 + 64);
LABEL_16:
        ++*(void *)(*(void *)(v8 + 8) + 24);
      }
    }
    else if (v9 == (id)3)
    {
      id v10 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138543874;
        id v15 = v5;
        __int16 v16 = 2048;
        uint64_t v17 = 3;
        __int16 v18 = 2048;
        uint64_t v19 = 0;
        id v11 = "Updating purchasing state for modern update with bundle identifier “%{public}@” from %ld to %ld…";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v14, 0x20u);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
  }
}

void sub_1002FD6C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 itemID];
  id v5 = [v3 bundleID];
  id v6 = [v3 valueForProperty:@"update_state"];
  id v7 = [v6 integerValue];

  uint64_t v8 = [v3 valueForProperty:@"is_offloaded"];
  id v9 = [*(id *)(a1 + 32) objectForKey:v4];
  id v10 = v9;
  if (!v9 || ([v9 isEqualToNumber:v8] & 1) == 0)
  {
    if ([*(id *)(a1 + 40) count]
      && v5
      && [*(id *)(a1 + 40) containsObject:v5])
    {
      id v11 = [AppUpdateEntity alloc];
      id v12 = [v3 databaseID];
      long long v13 = [*(id *)(a1 + 48) connection];
      int v14 = [(SQLiteEntity *)v11 initWithPersistentID:v12 onConnection:v13];

      [(SQLiteEntity *)v14 deleteFromDatabase];
      id v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 138543362;
        id v27 = v5;
        __int16 v16 = "Removed uninstalled update with bundleID: %{public}@";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v26, 0xCu);
        goto LABEL_17;
      }
      goto LABEL_17;
    }
    if (!v10)
    {
      uint64_t v19 = [AppUpdateEntity alloc];
      id v20 = [v3 databaseID];
      uint64_t v21 = [*(id *)(a1 + 48) connection];
      int v14 = [(SQLiteEntity *)v19 initWithPersistentID:v20 onConnection:v21];

      [(SQLiteEntity *)v14 deleteFromDatabase];
      id v15 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 138543362;
        id v27 = v5;
        __int16 v16 = "Removed update with bundleID: %{public}@ due to no matching app";
        goto LABEL_16;
      }
LABEL_17:

      uint64_t v22 = *(void *)(a1 + 64);
LABEL_23:
      ++*(void *)(*(void *)(v22 + 8) + 24);

      goto LABEL_24;
    }
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if (v7 == (id)4)
    {
      if (([*(id *)(a1 + 56) containsObject:v5] & 1) == 0)
      {
        uint64_t v17 = ASDLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = 138543618;
          id v27 = v5;
          __int16 v28 = 2048;
          uint64_t v29 = 4;
          __int16 v18 = "Updating purchased state for update with bundleID: %{public}@ currentState: %ld";
          goto LABEL_21;
        }
LABEL_22:

        uint64_t v23 = [AppUpdateEntity alloc];
        id v24 = [v3 databaseID];
        long long v25 = [*(id *)(a1 + 48) connection];
        int v14 = [(SQLiteEntity *)v23 initWithPersistentID:v24 onConnection:v25];

        [(SQLiteEntity *)v14 setValue:&off_10054C5B8 forProperty:@"update_state"];
        uint64_t v22 = *(void *)(a1 + 72);
        goto LABEL_23;
      }
    }
    else if (v7 == (id)3)
    {
      uint64_t v17 = ASDLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 138543618;
        id v27 = v5;
        __int16 v28 = 2048;
        uint64_t v29 = 3;
        __int16 v18 = "Updating purchasing state for update with bundleID: %{public}@ currentState: %ld";
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v26, 0x16u);
        goto LABEL_22;
      }
      goto LABEL_22;
    }
  }
LABEL_24:
}

void sub_1002FE420(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = ASDLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) bundleID];
    int v10 = 138543874;
    uint64_t v11 = v8;
    __int16 v12 = 2114;
    long long v13 = v9;
    __int16 v14 = 2114;
    id v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Completed legacy request from: %{public}@ for system application: %{public}@ (%{public}@)", (uint8_t *)&v10, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002FE790(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void sub_1002FE9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FEA10(uint64_t result)
{
  return result;
}

id sub_1002FECA4(uint64_t a1, uint64_t a2)
{
  int v5 = 1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 56);
  }
  else {
    id v3 = 0;
  }
  return [v3 applyBinding:a2 atIndex:&v5];
}

void sub_1002FED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FEDB0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[2];
  if (v3) {
    uint64_t v3 = *(void *)(v3 + 8);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002FEE4C;
  v6[3] = &unk_100527600;
  v6[6] = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  void v6[4] = v2;
  void v6[5] = v4;
  [v2 enumeratePersistentIDsUsingBlock:v6];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1002FEE4C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(*(void *)(a1 + 32) + 8)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v6 deleteFromDatabase];
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) ^ 1;
}

void sub_1002FEF58(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(*(Class *)(a1 + 40));
  [v4 setDatabaseID:a2];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002FEFD8(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *(objc_class **)(a1 + 40);
  id v6 = a3;
  id v7 = objc_alloc_init(v5);
  [v7 setDatabaseID:a2];
  [v7 setValuesWithDictionary:v6];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002FF114(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002FF12C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = +[NSMutableDictionary dictionaryWithCapacity:a1[7]];
  id v9 = v8;
  if (v5)
  {
    int v10 = (void *)a1[4];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1002FF280;
    void v15[3] = &unk_1005276A0;
    id v11 = v8;
    id v16 = v11;
    __int16 v12 = (sqlite3_stmt **)v5;
    uint64_t v17 = v12;
    [v10 enumerateObjectsUsingBlock:v15];
    uint64_t v13 = a1[5];
    sqlite3_int64 v14 = sqlite3_column_int64(v12[6], 0);
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
    (*(void (**)(uint64_t, sqlite3_int64, id))(v13 + 16))(v13, v14, v11);
  }
}

void sub_1002FF280(uint64_t a1, void *a2, int a3)
{
  id v4 = *(void **)(a1 + 40);
  unsigned int v5 = a3 + 1;
  id v6 = a2;
  sub_1003D6084(v4, v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

void *sub_1002FF380(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    v5.receiver = result;
    v5.super_class = (Class)SQLiteQueryDescriptor;
    uint64_t result = objc_msgSendSuper2(&v5, "init");
    if (result)
    {
      result[1] = a2;
      result[3] = a3;
    }
  }
  return result;
}

id sub_1002FF3DC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x3032000000;
  __int16 v18 = sub_100018168;
  uint64_t v19 = sub_100017C70;
  id v20 = 0;
  id v7 = sub_1002FF548(v6, v4, v5);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1002FF5C0;
  v11[3] = &unk_100527718;
  uint64_t v13 = &v15;
  uint64_t v14 = v6;
  id v8 = v4;
  id v12 = v8;
  [v7 enumeratePersistentIDsUsingBlock:v11];
  id v9 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v9;
}

void sub_1002FF530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002FF548(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  id v7 = sub_1002FFC6C(v6, v5, v4, 0);

  return v7;
}

void sub_1002FF5C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

id sub_1002FF620(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x3032000000;
  __int16 v18 = sub_100018168;
  uint64_t v19 = sub_100017C70;
  id v20 = (id)objc_opt_new();
  uint64_t v7 = sub_1002FF548(v6, v4, v5);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1002FF7A0;
  v11[3] = &unk_100527740;
  uint64_t v14 = v6;
  id v8 = v4;
  id v12 = v8;
  uint64_t v13 = &v15;
  [v7 enumeratePersistentIDsUsingBlock:v11];
  id v9 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v9;
}

void sub_1002FF788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002FF7A0(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v3];
}

id sub_1002FF80C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  int v10 = sub_1002FF89C(v9, v8, @"COUNT", v7, v6);

  return v10;
}

id sub_1002FF89C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = self;
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x3032000000;
  char v31 = sub_100018168;
  uint64_t v32 = sub_100017C70;
  id v33 = 0;
  uint64_t v13 = [[SQLiteQueryDescriptor alloc] initWithEntityClass:v12];
  uint64_t v15 = v13;
  if (v13) {
    objc_setProperty_nonatomic_copy(v13, v14, v10, 56);
  }
  id v16 = objc_alloc((Class)NSString);
  uint64_t v17 = [v12 disambiguatedSQLForProperty:v8];
  id v18 = [v16 initWithFormat:@"%@(%@)", v9, v17];

  id v34 = v8;
  uint64_t v19 = +[NSArray arrayWithObjects:&v34 count:1];
  id v20 = +[NSArray arrayWithObject:v18];
  id v21 = [(SQLiteQueryDescriptor *)v15 _newSelectSQLWithProperties:v19 columns:v20];

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_1002FFFFC;
  void v25[3] = &unk_100523FE8;
  uint64_t v22 = v15;
  int v26 = v22;
  id v27 = &v28;
  sub_100009834((uint64_t)v11, v21, v25);
  id v23 = (id)v29[5];

  _Block_object_dispose(&v28, 8);
  return v23;
}

void sub_1002FFB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002FFB28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  id v10 = sub_1002FF89C(v9, v8, @"MIN", v7, v6);

  return v10;
}

_UNKNOWN **sub_1002FFBB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  sub_1002FF89C(v9, v8, @"SUM", v7, v6);
  id v10 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v11 = v10;
  }
  else {
    id v11 = &off_10054C5E8;
  }
  id v12 = v11;

  return v12;
}

id sub_1002FFC6C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  id v10 = sub_1002FFCF8(v9, v8, v7, v6, 0);

  return v10;
}

id sub_1002FFCF8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  id v11 = a2;
  id v12 = self;
  uint64_t v13 = sub_1002FFDA0((uint64_t)v12, v11, v10, v9, v8, v12);

  return v13;
}

id sub_1002FFDA0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a2;
  self;
  uint64_t v14 = [SQLiteQueryDescriptor alloc];
  id v15 = [a6 memoryEntityClass];
  if (v14
    && (id v16 = v15,
        v24.receiver = v14,
        v24.super_class = (Class)SQLiteQueryDescriptor,
        (uint64_t v17 = objc_msgSendSuper2(&v24, "init")) != 0))
  {
    uint64_t v19 = v17;
    v17[1] = a6;
    void v17[3] = v16;
    objc_setProperty_nonatomic_copy(v17, v18, v11, 48);
    objc_setProperty_nonatomic_copy(v19, v20, v12, 40);
    objc_setProperty_nonatomic_copy(v19, v21, v10, 56);
  }
  else
  {
    uint64_t v19 = 0;
  }
  id v22 = [[SQLiteQuery alloc] initOnConnection:v13 descriptor:v19];

  return v22;
}

id sub_1002FFEDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = self;
  id v9 = sub_1002FFDA0(v8, v7, v6, 0, 0, a4);

  return v9;
}

id sub_1002FFF60(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  uint64_t v11 = self;
  id v12 = sub_1002FFDA0(v11, v10, v9, v8, 0, a5);

  return v12;
}

void sub_1002FFFFC(uint64_t a1, void *a2)
{
  int v7 = 1;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    id v4 = *(void **)(v3 + 56);
  }
  else {
    id v4 = 0;
  }
  id v5 = a2;
  [v4 applyBinding:v5 atIndex:&v7];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1003000BC;
  v6[3] = &unk_100523438;
  void v6[4] = *(void *)(a1 + 40);
  sub_1000096CC((uint64_t)v5, v6);
}

void sub_1003000BC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = sub_1003D6084(a2, 0);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

id sub_10030010C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = sub_100018168;
  id v15 = sub_100017C70;
  id v16 = 0;
  uint64_t v7 = sub_100300254(v6, v4, v5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1003002CC;
  void v10[3] = &unk_100521428;
  void v10[4] = &v11;
  [v7 enumerateMemoryEntitiesUsingBlock:v10];
  id v8 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v8;
}