uint64_t sub_1B3A235A4(void *a1)
{
  char *v1;

  return sub_1B3A233F4(a1, *v1);
}

uint64_t sub_1B3A235C4(char *a1, char *a2)
{
  return sub_1B3A21DA0(*a1, *a2);
}

uint64_t sub_1B3A235D0()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A2365C()
{
  sub_1B3A70360();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A236D4()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A2375C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B3A70B80();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1B3A237BC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6C616E696769726FLL;
  if (*v1) {
    uint64_t v2 = 0x696577746867696CLL;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB00000000746867;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B3A23804()
{
  return sub_1B3A70530();
}

uint64_t sub_1B3A23864()
{
  return sub_1B3A70520();
}

uint64_t sub_1B3A238B4(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a2 == -1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (((a3 | a2) & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (!is_mul_ok(a3, 0x3E8uLL))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  char v3 = result;
  kperf_ns_to_ticks();
  if (v3)
  {
    if ((kperf_lazy_wait_action_set() & 0x80000000) == 0)
    {
      uint64_t result = kperf_lazy_wait_time_threshold_set();
      if ((result & 0x80000000) == 0) {
        return result;
      }
      int v4 = MEMORY[0x1B3EBD410]();
      type metadata accessor for KTraceRecordError();
      sub_1B3A066CC();
      swift_allocError();
      unint64_t v7 = 0xD00000000000001FLL;
      v8 = "set up lazy wait action";
      goto LABEL_15;
    }
    int v4 = MEMORY[0x1B3EBD410]();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    v6 = "set up lazy wait action";
    unint64_t v7 = 0xD000000000000017;
LABEL_14:
    v8 = v6 - 32;
LABEL_15:
    *(void *)uint64_t v5 = v7;
    *(void *)(v5 + 8) = (unint64_t)v8 | 0x8000000000000000;
    goto LABEL_16;
  }
  if ((kperf_lazy_cpu_action_set() & 0x80000000) == 0)
  {
    uint64_t result = kperf_lazy_cpu_time_threshold_set();
    if ((result & 0x80000000) == 0) {
      return result;
    }
    int v4 = MEMORY[0x1B3EBD410]();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    v6 = "set up lazy CPU time threshold";
    unint64_t v7 = 0xD00000000000001ELL;
    goto LABEL_14;
  }
  int v4 = MEMORY[0x1B3EBD410]();
  type metadata accessor for KTraceRecordError();
  sub_1B3A066CC();
  swift_allocError();
  *(void *)uint64_t v5 = 0xD000000000000016;
  *(void *)(v5 + 8) = 0x80000001B3A7AF90;
LABEL_16:
  *(_DWORD *)(v5 + 16) = v4;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_1B3A23ABC()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0x6E496E6F69746361;
  }
}

uint64_t sub_1B3A23B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A358D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3A23B2C(uint64_t a1)
{
  unint64_t v2 = sub_1B3A3587C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A23B68(uint64_t a1)
{
  unint64_t v2 = sub_1B3A3587C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A23BA4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B3A23BE0(a1, &qword_1E9CD60A8, (void (*)(void))sub_1B3A3587C, a2);
}

uint64_t sub_1B3A23BE0@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_1B3A359D8(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

uint64_t sub_1B3A23C18(void *a1)
{
  return sub_1B39ACB9C(a1, *v1, v1[1], &qword_1E9CD5D98, (void (*)(void *))sub_1B3A3587C);
}

uint64_t sub_1B3A23C58(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v27) {
            return 1;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    uint64_t v14 = 16 * v10;
    v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_1B3A0C82C(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = sub_1B3A70D20();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v27) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1B3A23E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A35B90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3A23EA0(uint64_t a1)
{
  unint64_t v2 = sub_1B39AF1FC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A23EDC(uint64_t a1)
{
  unint64_t v2 = sub_1B39AF1FC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A23F18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B3A35CD8(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_1B3A23F50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  BOOL v6 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v6 || (v7 = sub_1B3A70D20(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (sub_1B3A23C58(v2, v4)) {
      return v3 ^ v5 ^ 1u;
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1B3A23FD0(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x694667756265646BLL;
      break;
    case 2:
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x746341667265706BLL;
      break;
    case 5:
      unint64_t result = 0x6D6954667265706BLL;
      break;
    case 6:
      unint64_t result = 0x746550667265706BLL;
      break;
    case 8:
    case 9:
      unint64_t result = 0x7A614C667265706BLL;
      break;
    case 10:
      unint64_t result = 0x72656469766F7270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B3A24174(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B3A26238(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B3A23FD0);
}

uint64_t sub_1B3A2418C(uint64_t a1, uint64_t a2)
{
  return sub_1B3A262E8(a1, a2, (void (*)(uint64_t))sub_1B3A23FD0);
}

uint64_t sub_1B3A241A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A2636C(a1, a2, a3, (void (*)(void))sub_1B3A23FD0);
}

uint64_t sub_1B3A241BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A263DC(a1, a2, a3, (void (*)(uint64_t))sub_1B3A23FD0);
}

uint64_t sub_1B3A241D4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B3A372C8();
  *a1 = result;
  return result;
}

unint64_t sub_1B3A2420C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B3A23FD0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B3A24238@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B3A372C8();
  *a1 = result;
  return result;
}

void sub_1B3A24268(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1B3A24274(uint64_t a1)
{
  unint64_t v2 = sub_1B39B4EA0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A242B0(uint64_t a1)
{
  unint64_t v2 = sub_1B39B4EA0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A242EC(uint64_t result, uint64_t a2)
{
  uint64_t v4 = v3;
  int v5 = v2;
  uint64_t v6 = v2[4];
  if (v6)
  {
    uint64_t v7 = v2[3];
    swift_bridgeObjectRetain();
    uint64_t result = sub_1B3A02D30(v7, v6);
    if (!v4)
    {
      sub_1B3A02FE0(result, 1);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v5[6];
      if (v8)
      {
        uint64_t v9 = v5[5];
        swift_bridgeObjectRetain();
        uint64_t v10 = sub_1B3A02D30(v9, v8);
        sub_1B3A02FE0(v10, 0);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (v2[6])
  {
    uint64_t v12 = result;
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    *int64_t v13 = v12;
    v13[1] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B3A24400(_TtC6ktrace12ProviderList *a1, void *a2, char a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  sub_1B39B4CD4(v6, (uint64_t)v76, &qword_1E9CD5DB8);
  uint64_t result = sub_1B39B4CD4((uint64_t)v76, (uint64_t)v77, &qword_1E9CD5DB8);
  if (v78) {
    return result;
  }
  uint64_t v11 = sub_1B3A21BE0(*(uint64_t *)&v77[1], v77[0]);
  ktrace_set_buffer_size((uint64_t)a1, v11);
  ktrace_set_coprocessor_tracing_enabled((uint64_t)a1, (*(unsigned char *)(v6 + 56) == 2) | *(unsigned char *)(v6 + 56) & 1);
  uint64_t v12 = *(void *)(v6 + 64);
  if (!v12) {
    goto LABEL_42;
  }
  uint64_t result = kperf_reset();
  unint64_t v13 = *(void *)(v12 + 16);
  if (HIDWORD(v13)) {
    goto LABEL_85;
  }
  uint64_t result = kperf_action_count_set();
  if (v13)
  {
    uint64_t v14 = a1;
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v12 + 8 * v15++ + 32);
      swift_bridgeObjectRetain();
      sub_1B3A21F30(v15, v16);
      swift_bridgeObjectRelease();
      if (v4) {
        return swift_bridgeObjectRelease();
      }
    }
    while (v13 != v15);
    uint64_t result = swift_bridgeObjectRelease();
    a1 = v14;
  }
  uint64_t v17 = *(void **)(v6 + 72);
  if (v17)
  {
    unint64_t v18 = v17[2];
    if (HIDWORD(v18)) {
      goto LABEL_86;
    }
    uint64_t result = kperf_timer_count_set();
    if (v18)
    {
      unint64_t v19 = v17[5];
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_87;
      }
      v67 = a2;
      if (is_mul_ok(v19, 0x3E8uLL))
      {
        uint64_t v20 = v17[4];
        swift_bridgeObjectRetain();
        kperf_ns_to_ticks();
        uint64_t result = kperf_timer_period_set();
        if ((result & 0x80000000) != 0)
        {
LABEL_29:
          int v26 = MEMORY[0x1B3EBD410]();
          type metadata accessor for KTraceRecordError();
          sub_1B3A066CC();
          swift_allocError();
          *(void *)uint64_t v27 = 0x6972657020746573;
          *(void *)(v27 + 8) = 0xEA0000000000646FLL;
          goto LABEL_30;
        }
        unint64_t v21 = v20 + 1;
        if (!__OFADD__(v20, 1))
        {
          if ((v21 & 0x8000000000000000) == 0)
          {
            if (!HIDWORD(v21))
            {
              uint64_t result = kperf_timer_action_set();
              if ((result & 0x80000000) == 0)
              {
                char v22 = v17 + 7;
                uint64_t v23 = 1;
                while (v18 != v23)
                {
                  if ((*v22 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_81:
                    __break(1u);
LABEL_82:
                    __break(1u);
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
LABEL_87:
                    __break(1u);
                    goto LABEL_88;
                  }
                  if (!is_mul_ok(*v22, 0x3E8uLL)) {
                    goto LABEL_81;
                  }
                  uint64_t v24 = *(v22 - 1);
                  kperf_ns_to_ticks();
                  uint64_t result = kperf_timer_period_set();
                  if ((result & 0x80000000) != 0) {
                    goto LABEL_29;
                  }
                  unint64_t v25 = v24 + 1;
                  if (__OFADD__(v24, 1)) {
                    goto LABEL_82;
                  }
                  if ((v25 & 0x8000000000000000) != 0) {
                    goto LABEL_83;
                  }
                  if (HIDWORD(v25)) {
                    goto LABEL_84;
                  }
                  uint64_t result = kperf_timer_action_set();
                  v22 += 2;
                  ++v23;
                  if ((result & 0x80000000) != 0) {
                    goto LABEL_28;
                  }
                }
                swift_bridgeObjectRelease();
                a2 = v67;
                goto LABEL_32;
              }
LABEL_28:
              int v26 = MEMORY[0x1B3EBD410]();
              type metadata accessor for KTraceRecordError();
              sub_1B3A066CC();
              swift_allocError();
              *(void *)uint64_t v27 = 0xD000000000000010;
              *(void *)(v27 + 8) = 0x80000001B3A7AEB0;
LABEL_30:
              *(_DWORD *)(v27 + 16) = v26;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              return swift_bridgeObjectRelease();
            }
LABEL_91:
            __break(1u);
            return result;
          }
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
      }
      else
      {
LABEL_88:
        __break(1u);
      }
      __break(1u);
      goto LABEL_90;
    }
  }
LABEL_32:
  sub_1B39B4CD4(v6 + 96, (uint64_t)v75, &qword_1E9CD5DC0);
  sub_1B39B4CD4((uint64_t)v75, (uint64_t)&v85, &qword_1E9CD5DC0);
  if (v85)
  {
    if (*(void *)(v85 + 16))
    {
      uint64_t v28 = *(void *)(v85 + 32);
      swift_bridgeObjectRetain();
      sub_1B3A22EFC(v28);
      uint64_t result = swift_bridgeObjectRelease();
      if (v5) {
        return result;
      }
    }
  }
  sub_1B39B4CD4(v6 + 80, (uint64_t)v74, &qword_1E9CD5DC8);
  sub_1B39B4CD4((uint64_t)v74, (uint64_t)v79, &qword_1E9CD5DC8);
  if (v79[0] != 2)
  {
    uint64_t result = sub_1B3A2319C(v79[0] & 1, v80);
    if (v5) {
      return result;
    }
  }
  sub_1B39B4CD4(v6 + 104, (uint64_t)v73, &qword_1E9CD5DD0);
  sub_1B39B4CD4((uint64_t)v73, (uint64_t)v81, &qword_1E9CD5DD0);
  if ((v82 & 1) == 0)
  {
    uint64_t result = sub_1B3A238B4(0, v81[0], v81[1]);
    if (v5) {
      return result;
    }
  }
  sub_1B39B4CD4(v6 + 128, (uint64_t)v72, &qword_1E9CD5DD0);
  sub_1B39B4CD4((uint64_t)v72, (uint64_t)v83, &qword_1E9CD5DD0);
  if ((v84 & 1) == 0)
  {
    uint64_t result = sub_1B3A238B4(1, v83[0], v83[1]);
    if (v5) {
      return result;
    }
  }
  if ((kperf_sample_set() & 0x80000000) != 0)
  {
    int v62 = MEMORY[0x1B3EBD410]();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    *(void *)uint64_t v63 = 0xD000000000000014;
    *(void *)(v63 + 8) = 0x80000001B3A7AFD0;
    *(_DWORD *)(v63 + 16) = v62;
    goto LABEL_44;
  }
LABEL_42:
  uint64_t v29 = sub_1B3A70320() + 32;
  swift_bridgeObjectRetain();
  int v33 = ktrace_session_provide(_:_:_:_:_:)(a1, v29, MEMORY[0x1E4FBC868], a2, 2, v30, v31, v32);
  swift_release();
  if (v33)
  {
    swift_arrayDestroy();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    void *v34 = 0x6465726975716552;
    v34[1] = 0xE800000000000000;
LABEL_44:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_1B3A35F98((uint64_t)&unk_1F0C3A5C8);
  swift_arrayDestroy();
  uint64_t v36 = *(void *)(v6 + 152);
  if (v36)
  {
    uint64_t v71 = *(void *)(v36 + 16);
    if (v71)
    {
      v66 = a1;
      v68 = a2;
      unsigned int v65 = a3 & 1;
      uint64_t v69 = v35 + 56;
      uint64_t v70 = v36 + 32;
      swift_bridgeObjectRetain();
      uint64_t v37 = 0;
      while (1)
      {
        v38 = (uint64_t *)(v70 + 32 * v37);
        uint64_t v39 = *v38;
        uint64_t v40 = v38[1];
        uint64_t v41 = v38[2];
        if (*(void *)(v35 + 16))
        {
          sub_1B3A70E00();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          sub_1B3A70360();
          uint64_t v42 = sub_1B3A70E50();
          uint64_t v43 = -1 << *(unsigned char *)(v35 + 32);
          unint64_t v44 = v42 & ~v43;
          if ((*(void *)(v69 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v44))
          {
            uint64_t v45 = *(void *)(v35 + 48);
            v46 = (void *)(v45 + 16 * v44);
            BOOL v47 = *v46 == v39 && v46[1] == v40;
            if (v47 || (sub_1B3A70D20() & 1) != 0)
            {
LABEL_50:
              swift_bridgeObjectRelease();
              goto LABEL_51;
            }
            uint64_t v48 = ~v43;
            unint64_t v49 = (v44 + 1) & v48;
            if ((*(void *)(v69 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49))
            {
              v50 = (void *)(v45 + 16 * v49);
              BOOL v51 = *v50 == v39 && v50[1] == v40;
              if (v51 || (sub_1B3A70D20() & 1) != 0) {
                goto LABEL_50;
              }
              unint64_t v52 = v49 + 1;
              uint64_t v53 = v48;
              for (unint64_t i = v52 & v48; ((*(void *)(v69 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v53)
              {
                v55 = (void *)(v45 + 16 * i);
                BOOL v56 = *v55 == v39 && v55[1] == v40;
                if (v56 || (sub_1B3A70D20() & 1) != 0) {
                  goto LABEL_50;
                }
              }
            }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v57 = sub_1B3A70320();
        int v61 = ktrace_session_provide(_:_:_:_:_:)(v66, v57 + 32, v41, v68, v65, v58, v59, v60);
        swift_release();
        if (v61)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for KTraceRecordError();
          sub_1B3A066CC();
          swift_allocError();
          void *v64 = v39;
          v64[1] = v40;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
LABEL_51:
        ++v37;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v37 == v71)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return swift_bridgeObjectRelease();
}

void *sub_1B3A24C50(uint64_t a1)
{
  uint64_t result = (void *)sub_1B3A34280(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (void *)(1 << *(unsigned char *)(a1 + 32))) {
    return 0;
  }
  else {
    return sub_1B3A34308(&v5, (uint64_t)result, v3, 0, a1);
  }
}

uint64_t sub_1B3A24CDC(uint64_t a1)
{
  uint64_t result = sub_1B3A34958(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_1B3A36030(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

unint64_t sub_1B3A24D5C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FD8);
  unint64_t v2 = (void *)sub_1B3A70B40();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  char v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B3A0C82C(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1B3A24E80(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v7 = v5;
  uint64_t v9 = a1;
  if ((a4 & 1) == 0)
  {
    sub_1B39B4CD4(a1 + 64, (uint64_t)v75, &qword_1E9CD5DD8);
    sub_1B39B4CD4((uint64_t)v75, (uint64_t)&v76, &qword_1E9CD5DD8);
    if (v76 && *(void *)(v76 + 16)
      || (sub_1B39B4CD4(v9 + 72, (uint64_t)v74, &qword_1E9CD5DE0),
          sub_1B39B4CD4((uint64_t)v74, (uint64_t)&v77, &qword_1E9CD5DE0),
          v77)
      && *(void *)(v77 + 16)
      || (sub_1B39B4CD4(v9 + 80, (uint64_t)v73, &qword_1E9CD5DC8),
          sub_1B39B4CD4((uint64_t)v73, (uint64_t)v78, &qword_1E9CD5DC8),
          v78[0] != 2)
      || (sub_1B39B4CD4(v9, (uint64_t)v72, &qword_1E9CD5DB8),
          sub_1B39B4CD4((uint64_t)v72, (uint64_t)v79, &qword_1E9CD5DB8),
          (v79[16] & 1) == 0))
    {
      type metadata accessor for KTraceRecordError();
      sub_1B3A066CC();
      swift_allocError();
      uint64_t v24 = v23;
      uint64_t v69 = 0;
      unint64_t v70 = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      goto LABEL_78;
    }
    goto LABEL_35;
  }
  uint64_t v57 = v5;
  char v10 = (char *)v4[8];
  if (!v10)
  {
    char v10 = (char *)MEMORY[0x1E4FBC860];
    v4[8] = MEMORY[0x1E4FBC860];
    uint64_t v7 = (char *)v4[9];
    if (v7) {
      goto LABEL_4;
    }
LABEL_32:
    uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
    v4[9] = MEMORY[0x1E4FBC860];
    goto LABEL_4;
  }
  uint64_t v7 = (char *)v4[9];
  if (!v7) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (*(void *)(a1 + 72)) {
    uint64_t v11 = *(void *)(a1 + 72);
  }
  uint64_t v59 = a1;
  uint64_t v60 = v11;
  uint64_t v65 = *(void *)(v11 + 16);
  if (v65)
  {
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v61 = v12 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v13 = (char *)(v60 + 40);
    uint64_t v63 = v12;
    while (1)
    {
      a3 = *((void *)v13 - 1);
      if (!v12) {
        break;
      }
      if ((int64_t)a3 >= *(void *)(v12 + 16))
      {
        swift_bridgeObjectRelease();
LABEL_97:
        type metadata accessor for KTraceRecordError();
        sub_1B3A066CC();
        swift_allocError();
        uint64_t v24 = v46;
        sub_1B3A709B0();
        swift_bridgeObjectRelease();
        uint64_t v69 = 0x2072656D6974;
        unint64_t v70 = 0xE600000000000000;
        sub_1B3A70D00();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        sub_1B3A703A0();
        sub_1B3A703A0();
        unint64_t v68 = a3;
        sub_1B3A70D00();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        goto LABEL_79;
      }
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_121;
      }
      if (*((void *)v10 + 2) > 0x1EuLL) {
        goto LABEL_77;
      }
      if (!v7) {
        goto LABEL_135;
      }
      if (*((void *)v7 + 2) > 7uLL)
      {
LABEL_77:
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1B3A066CC();
        swift_allocError();
        uint64_t v24 = v38;
        sub_1B3A709B0();
        swift_bridgeObjectRelease();
        uint64_t v69 = 0x2072656D6974;
        unint64_t v70 = 0xE600000000000000;
        unint64_t v68 = v9;
        sub_1B3A70D00();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        sub_1B3A703A0();
LABEL_78:
        sub_1B3A703A0();
LABEL_79:
        unint64_t v39 = v70;
        uint64_t *v24 = v69;
        v24[1] = v39;
LABEL_80:
        swift_storeEnumTagMultiPayload();
        return swift_willThrow();
      }
      unint64_t v6 = *(void *)v13;
      uint64_t v14 = *(void *)(v61 + 8 * a3);
      char v10 = (char *)v4[8];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v10 = sub_1B3A305F8(0, *((void *)v10 + 2) + 1, 1, v10);
      }
      unint64_t v16 = *((void *)v10 + 2);
      unint64_t v15 = *((void *)v10 + 3);
      uint64_t v17 = v67;
      if (v16 >= v15 >> 1)
      {
        char v22 = sub_1B3A305F8((char *)(v15 > 1), v16 + 1, 1, v10);
        uint64_t v17 = v67;
        char v10 = v22;
      }
      *((void *)v10 + 2) = v16 + 1;
      *(void *)&v10[8 * v16 + 32] = v14;
      v17[8] = (uint64_t)v10;
      uint64_t v18 = *((void *)v10 + 2);
      uint64_t v7 = (char *)v17[9];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_1B3A30800(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v20 = *((void *)v7 + 2);
      unint64_t v19 = *((void *)v7 + 3);
      a3 = v20 + 1;
      char v4 = v67;
      if (v20 >= v19 >> 1)
      {
        char v4 = v67;
        uint64_t v7 = sub_1B3A30800((char *)(v19 > 1), v20 + 1, 1, v7);
      }
      ++v9;
      v13 += 16;
      *((void *)v7 + 2) = a3;
      unint64_t v21 = &v7[16 * v20];
      *((void *)v21 + 4) = v18;
      *((void *)v21 + 5) = v6;
      v4[9] = (uint64_t)v7;
      uint64_t v12 = v63;
      if (v65 == v9) {
        goto LABEL_34;
      }
    }
    swift_bridgeObjectRelease();
    if ((a3 & 0x8000000000000000) != 0) {
      goto LABEL_125;
    }
    goto LABEL_97;
  }
  swift_bridgeObjectRetain();
LABEL_34:
  swift_bridgeObjectRelease();
  uint64_t v7 = v57;
  uint64_t v9 = v59;
LABEL_35:
  char v4 = &qword_1E9CD5DE8;
  sub_1B39B4CD4(v9 + 152, (uint64_t)v71, &qword_1E9CD5DE8);
  sub_1B39B4CD4((uint64_t)v71, (uint64_t)&v80, &qword_1E9CD5DE8);
  if (v80)
  {
    uint64_t v59 = v9;
    char v4 = (uint64_t *)v67[19];
    if (v4) {
      uint64_t v13 = (char *)v67[19];
    }
    else {
      uint64_t v13 = (char *)MEMORY[0x1E4FBC860];
    }
    uint64_t v64 = *(void *)(v80 + 16);
    if (v64)
    {
      uint64_t v62 = v80 + 32;
      sub_1B3A0EAF8((uint64_t)v71);
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v26 = v62 + 32 * v9;
        char v4 = *(uint64_t **)v26;
        uint64_t v27 = *(void *)(v26 + 8);
        uint64_t v28 = *(void *)(v26 + 16);
        char v29 = *(unsigned char *)(v26 + 24);
        unint64_t v6 = *((void *)v13 + 2);
        if (v6)
        {
          if (*((uint64_t **)v13 + 4) == v4 && *((void *)v13 + 5) == v27)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            a3 = 0;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              goto LABEL_75;
            }
            goto LABEL_70;
          }
          if (sub_1B3A70D20())
          {
            a3 = 0;
            goto LABEL_68;
          }
          char v66 = v29;
          uint64_t v31 = v7;
          if (v6 != 1)
          {
            uint64_t v7 = v13 + 72;
            a3 = 1;
            while (1)
            {
              BOOL v34 = *((uint64_t **)v7 - 1) == v4 && *(void *)v7 == v27;
              if (v34 || (sub_1B3A70D20() & 1) != 0) {
                break;
              }
              unint64_t v35 = a3 + 1;
              if (__OFADD__(a3, 1))
              {
                __break(1u);
LABEL_121:
                __break(1u);
LABEL_122:
                __break(1u);
LABEL_123:
                __break(1u);
LABEL_124:
                __break(1u);
LABEL_125:
                __break(1u);
                goto LABEL_126;
              }
              v7 += 32;
              ++a3;
              if (v35 == v6) {
                goto LABEL_51;
              }
            }
            uint64_t v7 = v31;
            char v29 = v66;
LABEL_68:
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if ((a3 & 0x8000000000000000) != 0) {
                goto LABEL_122;
              }
            }
            else
            {
LABEL_75:
              uint64_t v13 = sub_1B3A3048C((uint64_t)v13);
              if ((a3 & 0x8000000000000000) != 0) {
                goto LABEL_122;
              }
            }
LABEL_70:
            if (a3 >= *((void *)v13 + 2)) {
              goto LABEL_123;
            }
            uint64_t v36 = &v13[32 * a3];
            unint64_t v6 = (unint64_t)(v36 + 32);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v69 = *((void *)v36 + 6);
            *((void *)v36 + 6) = 0x8000000000000000;
            char v4 = &v69;
            sub_1B3A2F274(v28, (uint64_t)sub_1B3A34ADC, 0, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t *__return_ptr, id *, void *))sub_1B3A25C78);
            if (v7) {
              goto LABEL_137;
            }
            uint64_t v7 = 0;
            *(void *)(v6 + 16) = v69;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v29)
            {
              if (a3 >= *((void *)v13 + 2)) {
                goto LABEL_124;
              }
              *(unsigned char *)(v6 + 24) = 1;
            }
            goto LABEL_42;
          }
        }
        else
        {
          char v66 = *(unsigned char *)(v26 + 24);
          uint64_t v31 = v7;
        }
LABEL_51:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = sub_1B3A306FC(0, v6 + 1, 1, v13);
        }
        uint64_t v7 = v31;
        unint64_t v33 = *((void *)v13 + 2);
        unint64_t v32 = *((void *)v13 + 3);
        a3 = v33 + 1;
        if (v33 >= v32 >> 1) {
          uint64_t v13 = sub_1B3A306FC((char *)(v32 > 1), v33 + 1, 1, v13);
        }
        *((void *)v13 + 2) = a3;
        unint64_t v25 = &v13[32 * v33];
        *((void *)v25 + 4) = v4;
        *((void *)v25 + 5) = v27;
        *((void *)v25 + 6) = v28;
        v25[56] = v66;
LABEL_42:
        if (++v9 == v64)
        {
          sub_1B3A0EB24((uint64_t)v71);
          uint64_t v41 = v67;
          char v4 = (uint64_t *)v67[19];
          goto LABEL_85;
        }
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v41 = v67;
LABEL_85:
    swift_bridgeObjectRelease();
    v41[19] = (uint64_t)v13;
    uint64_t v42 = v41;
    uint64_t v9 = v59;
    uint64_t v13 = *(char **)(v59 + 96);
    if (!v13) {
      return sub_1B3A03D0C(*(void *)(v9 + 160), *(void *)(v9 + 168));
    }
  }
  else
  {
    uint64_t v42 = v67;
    uint64_t v13 = *(char **)(v9 + 96);
    if (!v13) {
      return sub_1B3A03D0C(*(void *)(v9 + 160), *(void *)(v9 + 168));
    }
  }
  if (!*((void *)v13 + 2))
  {
    uint64_t v45 = v42[12];
    if (v45)
    {
LABEL_118:
      uint64_t v69 = v45;
      uint64_t v56 = swift_bridgeObjectRetain();
      sub_1B3A25A9C(v56);
      v67[12] = v69;
      return sub_1B3A03D0C(*(void *)(v9 + 160), *(void *)(v9 + 168));
    }
    goto LABEL_93;
  }
  unint64_t v6 = *((void *)v13 + 4);
  uint64_t v43 = *((void *)v13 + 5);
  uint64_t v44 = *((void *)v13 + 6);
  uint64_t v7 = (char *)v42[12];
  if (!v7 || !*((void *)v7 + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5DF0);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1B3A73390;
    *(void *)(v45 + 32) = v6;
    *(void *)(v45 + 40) = v43;
    *(void *)(v45 + 48) = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v42 = v67;
    v67[12] = v45;
LABEL_117:
    if (v45) {
      goto LABEL_118;
    }
LABEL_93:
    v42[12] = (uint64_t)v13;
    swift_bridgeObjectRetain();
    return sub_1B3A03D0C(*(void *)(v9 + 160), *(void *)(v9 + 168));
  }
  uint64_t v59 = v9;
  uint64_t v9 = *((void *)v7 + 4);
  if (v9 != v6)
  {
    if (a4)
    {
      uint64_t v47 = v42[8];
      if (v47)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_130;
        }
        unint64_t v48 = *(void *)(v47 + 16);
        if (v6 >= v48) {
          goto LABEL_131;
        }
        if (v9 >= v48) {
          goto LABEL_132;
        }
        uint64_t v49 = *(void *)(v47 + 32 + 8 * v6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v50 = swift_bridgeObjectRetain();
        uint64_t v51 = sub_1B3A36084(v50);
        swift_bridgeObjectRelease();
        uint64_t v69 = v51;
        unint64_t v6 = *(void *)(v49 + 16);
        if (v6)
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            uint64_t v53 = v49 + i;
            sub_1B3A2C970(&v68, *(unsigned __int8 *)(v53 + 32));
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v55 = swift_bridgeObjectRetain();
        char v4 = (uint64_t *)sub_1B3A32140(v55);
        swift_bridgeObjectRelease_n();
        a3 = v67[8];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_133;
        }
        goto LABEL_110;
      }
      goto LABEL_136;
    }
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    void *v54 = 0xD000000000000048;
    v54[1] = 0x80000001B3A7AFF0;
    goto LABEL_80;
  }
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v9 = v59;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (!*((void *)v7 + 2)) {
        goto LABEL_127;
      }
    }
    else
    {
LABEL_126:
      uint64_t v7 = sub_1B3A30464((uint64_t)v7);
      if (!*((void *)v7 + 2))
      {
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
    }
    char v4 = (uint64_t *)(v7 + 40);
    sub_1B3A703A0();
    v67[12] = (uint64_t)v7;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (*((void *)v7 + 2)) {
        goto LABEL_116;
      }
      goto LABEL_129;
    }
LABEL_128:
    uint64_t v7 = sub_1B3A30464((uint64_t)v7);
    if (*((void *)v7 + 2))
    {
LABEL_116:
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      uint64_t v42 = v67;
      v67[12] = (uint64_t)v7;
      uint64_t v45 = (uint64_t)v7;
      goto LABEL_117;
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    a3 = (unint64_t)sub_1B3A30478(a3);
LABEL_110:
    if (v9 >= *(void *)(a3 + 16)) {
      break;
    }
    *(void *)(a3 + 8 * v9 + 32) = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v67[8] = a3;
    uint64_t v7 = (char *)v67[12];
  }
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  *(void *)(v6 + 16) = v69;
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B3A25A9C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_1B3A304DC((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B3A25B8C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_1B3A306FC((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B3A25C78@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B3A25C98(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    memcpy(__dst, (const void *)(*(void *)(v1 + 48) + 328 * v9), 0x141uLL);
    sub_1B39B373C((uint64_t)__dst);
    sub_1B3A2CE84(__src, __dst);
    memcpy(v14, __src, 0x141uLL);
    uint64_t result = sub_1B39B0C68((uint64_t)v14);
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1B3A25E24(uint64_t a1)
{
  int64_t v2 = *(void **)(v1 + 72);
  if (v2 && v2[2])
  {
    uint64_t v4 = v2[4];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if (v2[2])
      {
LABEL_5:
        v2[4] = v4;
        v2[5] = a1;
        *(void *)(v1 + 72) = v2;
        return result;
      }
    }
    else
    {
      uint64_t result = (uint64_t)sub_1B3A304A0((uint64_t)v2);
      int64_t v2 = (void *)result;
      if (*(void *)(result + 16)) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

__n128 sub_1B3A25EE8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B3A360F8(a1, v9);
  if (!v2)
  {
    long long v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v9[10];
    long long v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    long long v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    __n128 result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B3A25F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A36D68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3A25F74(uint64_t a1)
{
  unint64_t v2 = sub_1B39B1100();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A25FB0(uint64_t a1)
{
  unint64_t v2 = sub_1B39B1100();

  return MEMORY[0x1F41862B0](a1, v2);
}

__n128 sub_1B3A25FEC@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B3A36EC0(a1, (uint64_t)v10);
  if (!v2)
  {
    long long v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(void *)(a2 + 192) = v11;
    long long v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    long long v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    long long v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    long long v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

unint64_t sub_1B3A26070(char a1)
{
  unint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x4E70756F7247646FLL;
      break;
    case 4:
      unint64_t result = 0x6168436B63616C73;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x736973706F6E7973;
      break;
    case 7:
      unint64_t result = 0x746E656D75636F64;
      break;
    case 8:
      unint64_t result = 0x73676E6974746573;
      break;
    case 9:
      unint64_t result = 0x4C746C7561666564;
      break;
    case 10:
      unint64_t result = 0x73726579616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B3A26220(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B3A26238(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B3A26070);
}

uint64_t sub_1B3A26238(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = sub_1B3A70D20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1B3A262D0(uint64_t a1, uint64_t a2)
{
  return sub_1B3A262E8(a1, a2, (void (*)(uint64_t))sub_1B3A26070);
}

uint64_t sub_1B3A262E8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  sub_1B3A70E00();
  a3(v5);
  sub_1B3A70360();
  swift_bridgeObjectRelease();
  return sub_1B3A70E50();
}

uint64_t sub_1B3A26354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A2636C(a1, a2, a3, (void (*)(void))sub_1B3A26070);
}

uint64_t sub_1B3A2636C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  sub_1B3A70360();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A263C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A263DC(a1, a2, a3, (void (*)(uint64_t))sub_1B3A26070);
}

uint64_t sub_1B3A263DC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  sub_1B3A70E00();
  a4(v6);
  sub_1B3A70360();
  swift_bridgeObjectRelease();
  return sub_1B3A70E50();
}

uint64_t sub_1B3A26444@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B3A372C8();
  *a1 = result;
  return result;
}

unint64_t sub_1B3A2647C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B3A26070(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B3A264A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B3A372C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B3A264D8(uint64_t a1)
{
  unint64_t v2 = sub_1B39B5B2C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A26514(uint64_t a1)
{
  unint64_t v2 = sub_1B39B5B2C();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B3A26550()
{
  memcpy(__dst, v0, 0x141uLL);
  sub_1B39B373C((uint64_t)__dst);
  uint64_t v1 = swift_bridgeObjectRetain();
  unint64_t v2 = sub_1B3A37310(v1, (uint64_t)__dst);
  sub_1B39B0C68((uint64_t)__dst);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B3A265C4()
{
  uint64_t v0 = sub_1B3A6FD20();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  unint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v7 = (char *)&v13 - v6;
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v13 - v9;
  __swift_allocate_value_buffer(v8, qword_1E9CDCCF8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E9CDCCF8);
  sub_1B3A6FCE0();
  sub_1B3A6FD00();
  sub_1B3A6FD10();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v7, v0);
  sub_1B3A6FCF0();
  sub_1B3A6FD10();
  v11(v7, v0);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v0);
}

uint64_t sub_1B3A26768()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  char v3 = *((unsigned char *)v0 + 128);
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[26];
  if (qword_1E9CD85A0 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1B3A6FD20();
  __swift_project_value_buffer(v7, (uint64_t)qword_1E9CDCCF8);
  sub_1B39ADD78();
  sub_1B3A707F0();
  if ((v8 & 1) == 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    *uint64_t v9 = 1701667182;
    v9[1] = 0xE400000000000000;
    v9[2] = v2;
    v9[3] = v1;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  if (v3)
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    *uint64_t v10 = 0xD00000000000002FLL;
    v10[1] = 0x80000001B3A7B0D0;
LABEL_21:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  if (v4 && *(void *)(v4 + 16) >= 0x20uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    uint64_t v12 = 0x63615F667265706BLL;
    unint64_t v13 = 0xED0000736E6F6974;
LABEL_13:
    *uint64_t v11 = v12;
    v11[1] = v13;
    uint64_t v14 = 31;
LABEL_17:
    v11[2] = v14;
    goto LABEL_21;
  }
  if (v5 && *(void *)(v5 + 16) >= 9uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    uint64_t v12 = 0x69745F667265706BLL;
    unint64_t v13 = 0xEC0000007372656DLL;
    goto LABEL_13;
  }
  if (v6 && *(void *)(v6 + 16) >= 2uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    *uint64_t v11 = 0xD000000000000015;
    v11[1] = 0x80000001B3A7B100;
    uint64_t v14 = 1;
    goto LABEL_17;
  }
  if (sub_1B3A70370() > 79 || (uint64_t result = sub_1B3A70370()) == 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    uint64_t v17 = v16;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1B3A70370();
    *uint64_t v17 = v2;
    v17[1] = v1;
    v17[2] = v18;
    goto LABEL_21;
  }
  return result;
}

void *sub_1B3A26ABC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_1B3A6FC40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = (void *)sub_1B3A6FF60();
  if (!v1)
  {
    uint64_t v9 = (uint64_t)result;
    unint64_t v10 = v8;
    uint64_t v14 = a1;
    sub_1B3A6FC80();
    swift_allocObject();
    sub_1B3A6FC70();
    sub_1B3A6FC30();
    (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F26C70], v3);
    sub_1B3A6FC50();
    sub_1B3A3751C();
    sub_1B3A6FC60();
    memcpy(v12, v13, 0x141uLL);
    memcpy(v11, v13, sizeof(v11));
    sub_1B39B373C((uint64_t)v12);
    sub_1B3A26768();
    sub_1B39B0C68((uint64_t)v12);
    sub_1B3A26D10();
    swift_release();
    sub_1B39B0D88(v9, v10);
    return memcpy(v14, v13, 0x141uLL);
  }
  return result;
}

uint64_t sub_1B3A26D10()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  swift_bridgeObjectRetain();
  sub_1B3A242EC(v2, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v1) {
    return result;
  }
  uint64_t v5 = v0[37];
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v29 = v5 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v30 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v34 = v0[37];
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_24;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v10 >= v30) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v29 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_23:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_24:
    unint64_t v16 = (uint64_t *)(*(void *)(v34 + 48) + 16 * v12);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    swift_bridgeObjectRetain_n();
    unint64_t v19 = sub_1B3A30E58(v31, v18, v17);
    unint64_t v21 = (void *)v20;
    sub_1B39B4CD4(v20, (uint64_t)v32, &qword_1E9CD5EA8);
    sub_1B39B4CD4((uint64_t)v32, (uint64_t)v33, &qword_1E9CD5EA8);
    uint64_t result = sub_1B3A37570((uint64_t)v33);
    if (result == 1) {
      goto LABEL_38;
    }
    uint64_t v22 = v21[7];
    if (v22)
    {
      uint64_t v23 = v21[6];
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_1B3A02D30(v23, v22);
      sub_1B3A02FE0(v24, 1);
      swift_bridgeObjectRelease();
      uint64_t v25 = v21[9];
      if (v25)
      {
        uint64_t v26 = v21[8];
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_1B3A02D30(v26, v25);
        sub_1B3A02FE0(v27, 0);
        swift_bridgeObjectRelease();
      }
    }
    else if (v21[9])
    {
      type metadata accessor for KTraceRecordError();
      sub_1B3A066CC();
      swift_allocError();
      *uint64_t v28 = v18;
      v28[1] = v17;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      ((void (*)(void *, void))v19)(v31, 0);
      swift_release();
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    ((void (*)(void *, void))v19)(v31, 0);
    uint64_t result = swift_bridgeObjectRelease_n();
  }
  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v10 + 5;
  if (v10 + 5 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14)
  {
LABEL_22:
    int64_t v10 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v30) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v29 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1B3A270AC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t result = sub_1B3A37BCC(a1, a2, a3, a4);
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1B3A270D4(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(v4 + 296);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1B3A223CC(v9);
  swift_bridgeObjectRelease();
  uint64_t v219 = sub_1B3A35F98(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1B3A38700(v8, a1, a2);
  uint64_t v228 = v5;
  swift_bridgeObjectRelease();
  uint64_t v213 = a1;
  swift_bridgeObjectRelease();
  uint64_t v204 = a2;
  swift_bridgeObjectRelease();
  uint64_t v224 = v11 + 64;
  uint64_t v227 = v4;
  uint64_t v12 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v11 + 64);
  int64_t v229 = (unint64_t)(v12 + 63) >> 6;
  int64_t v15 = (void *)(v4 + 112);
  uint64_t v223 = v11;
  swift_retain();
  int64_t v16 = 0;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = (uint64_t *)(*(void *)(v223 + 48) + 16 * i);
    uint64_t v24 = *v22;
    unint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v223 + 56) + 200 * i;
    long long v26 = *(_OWORD *)(v25 + 16);
    long long v27 = *(_OWORD *)(v25 + 32);
    long long v28 = *(_OWORD *)(v25 + 64);
    *(_OWORD *)&v234[32] = *(_OWORD *)(v25 + 48);
    *(_OWORD *)&v234[48] = v28;
    *(_OWORD *)v234 = v26;
    *(_OWORD *)&v234[16] = v27;
    long long v29 = *(_OWORD *)(v25 + 80);
    long long v30 = *(_OWORD *)(v25 + 96);
    long long v31 = *(_OWORD *)(v25 + 128);
    *(_OWORD *)&v234[96] = *(_OWORD *)(v25 + 112);
    *(_OWORD *)&v234[112] = v31;
    *(_OWORD *)&v234[64] = v29;
    *(_OWORD *)&v234[80] = v30;
    long long v32 = *(_OWORD *)(v25 + 144);
    long long v33 = *(_OWORD *)(v25 + 160);
    long long v34 = *(_OWORD *)(v25 + 176);
    *(void *)&v234[176] = *(void *)(v25 + 192);
    *(_OWORD *)&v234[144] = v33;
    *(_OWORD *)&v234[160] = v34;
    *(_OWORD *)&v234[128] = v32;
    long long v233 = *(_OWORD *)v25;
    v235[8] = *(_OWORD *)&v234[136];
    v235[9] = *(_OWORD *)&v234[152];
    v235[10] = *(_OWORD *)&v234[168];
    v235[4] = *(_OWORD *)&v234[72];
    v235[5] = *(_OWORD *)&v234[88];
    v235[6] = *(_OWORD *)&v234[104];
    v235[7] = *(_OWORD *)&v234[120];
    v235[0] = *(_OWORD *)&v234[8];
    v235[1] = *(_OWORD *)&v234[24];
    v235[2] = *(_OWORD *)&v234[40];
    v235[3] = *(_OWORD *)&v234[56];
    swift_bridgeObjectRetain();
    sub_1B3A38924((uint64_t)&v233);
    sub_1B3A24E80((uint64_t)v235, v24, v23, a3 & 1);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B3A389D0((uint64_t)&v233);
      swift_release();
      return (uint64_t)v15;
    }
    unint64_t v35 = *(char **)(v227 + 312);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v35 = sub_1B3A1617C(0, *((void *)v35 + 2) + 1, 1, v35);
    }
    unint64_t v37 = *((void *)v35 + 2);
    unint64_t v36 = *((void *)v35 + 3);
    if (v37 >= v36 >> 1) {
      unint64_t v35 = sub_1B3A1617C((char *)(v36 > 1), v37 + 1, 1, v35);
    }
    *((void *)v35 + 2) = v37 + 1;
    v38 = &v35[16 * v37];
    *((void *)v38 + 4) = v24;
    *((void *)v38 + 5) = v23;
    sub_1B3A389D0((uint64_t)&v233);
    *(void *)(v227 + 312) = v35;
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v19 = __OFADD__(v16++, 1);
    if (v19)
    {
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
      goto LABEL_233;
    }
    if (v16 >= v229) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v224 + 8 * v16);
    if (!v20) {
      break;
    }
LABEL_15:
    unint64_t v14 = (v20 - 1) & v20;
  }
  int64_t v21 = v16 + 1;
  if (v16 + 1 >= v229) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v224 + 8 * v21);
  if (v20) {
    goto LABEL_14;
  }
  int64_t v21 = v16 + 2;
  if (v16 + 2 >= v229) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v224 + 8 * v21);
  if (v20)
  {
LABEL_14:
    int64_t v16 = v21;
    goto LABEL_15;
  }
  int64_t v21 = v16 + 3;
  if (v16 + 3 < v229)
  {
    unint64_t v20 = *(void *)(v224 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        int64_t v16 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          break;
        }
        if (v16 >= v229) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v224 + 8 * v16);
        ++v21;
        if (v20) {
          goto LABEL_15;
        }
      }
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }
    goto LABEL_14;
  }
LABEL_28:
  swift_release();
  uint64_t v39 = *(void *)(v227 + 264);
  if (v39)
  {
    int64_t v40 = *(void *)(v39 + 16);
    uint64_t v41 = MEMORY[0x1E4FBC860];
    if (v40)
    {
      *(void *)&long long v233 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      sub_1B3A052F4(0, v40, 0);
      uint64_t v41 = v233;
      uint64_t v42 = (uint64_t *)(v39 + 40);
      do
      {
        uint64_t v44 = *(v42 - 1);
        uint64_t v43 = *v42;
        *(void *)&long long v233 = v41;
        unint64_t v46 = *(void *)(v41 + 16);
        unint64_t v45 = *(void *)(v41 + 24);
        swift_bridgeObjectRetain();
        if (v46 >= v45 >> 1)
        {
          sub_1B3A052F4((char *)(v45 > 1), v46 + 1, 1);
          uint64_t v41 = v233;
        }
        v42 += 4;
        *(void *)(v41 + 16) = v46 + 1;
        uint64_t v47 = v41 + 16 * v46;
        *(void *)(v47 + 32) = v44;
        *(void *)(v47 + 40) = v43;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v41 = MEMORY[0x1E4FBC860];
  }
  uint64_t v48 = sub_1B3A35F98(v41);
  swift_bridgeObjectRelease();
  uint64_t v49 = v204;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v50 = swift_bridgeObjectRetain();
  uint64_t v51 = sub_1B3A285A0(v50, v219);
  if (*(void *)(v51 + 16) <= *(void *)(v204 + 16) >> 3)
  {
    *(void *)&long long v233 = v204;
    sub_1B3A31814(v51);
    uint64_t v49 = v204;
    swift_bridgeObjectRelease();
    uint64_t v52 = v233;
    if (!*(void *)(v233 + 16)) {
      goto LABEL_42;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    v54 = v53;
    *(void *)&long long v233 = v52;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5EB0);
    sub_1B3A38DD8((unint64_t *)&qword_1E9CD5EB8, &qword_1E9CD5EB0);
    sub_1B39ADD78();
    int64_t v15 = (void *)sub_1B3A704F0();
    uint64_t v56 = v55;
    swift_bridgeObjectRelease();
    void *v54 = v15;
    v54[1] = v56;
LABEL_39:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (uint64_t)v15;
  }
  uint64_t v52 = sub_1B3A319BC(v51, v204);
  swift_bridgeObjectRelease();
  if (*(void *)(v52 + 16)) {
    goto LABEL_38;
  }
LABEL_42:
  swift_bridgeObjectRelease();
  uint64_t v58 = MEMORY[0x1E4FBC860];
  if (v39)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v59 = swift_bridgeObjectRetain();
    uint64_t v58 = sub_1B3A38A7C(v59, v213, v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v60 = sub_1B3A285A0(v219, v48);
  uint64_t v211 = v39;
  if (*(void *)(v60 + 16) <= *(void *)(v213 + 16) >> 3)
  {
    *(void *)&long long v233 = v213;
    sub_1B3A31814(v60);
    swift_bridgeObjectRelease();
    uint64_t v61 = v233;
  }
  else
  {
    uint64_t v61 = sub_1B3A319BC(v60, v213);
    swift_bridgeObjectRelease();
  }
  int64_t v62 = *(void *)(v61 + 16);
  if (v62)
  {
    uint64_t v208 = v58;
    *(void *)&long long v233 = MEMORY[0x1E4FBC860];
    uint64_t v214 = v61;
    sub_1B3A2C484(0, v62, 0);
    uint64_t v63 = v233;
    int64_t v64 = sub_1B3A34958(v61);
    int v66 = v65;
    char v68 = v67 & 1;
    uint64_t v220 = v61 + 56;
    do
    {
      if (v64 < 0 || v64 >= 1 << *(unsigned char *)(v61 + 32)) {
        goto LABEL_230;
      }
      if (((*(void *)(v220 + (((unint64_t)v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v64) & 1) == 0) {
        goto LABEL_231;
      }
      if (*(_DWORD *)(v61 + 36) != v66) {
        goto LABEL_232;
      }
      char v230 = v68;
      uint64_t v69 = (uint64_t *)(*(void *)(v61 + 48) + 16 * v64);
      uint64_t v70 = v69[1];
      uint64_t v225 = *v69;
      swift_bridgeObjectRetain();
      unint64_t v71 = sub_1B3A24D5C(MEMORY[0x1E4FBC860]);
      *(void *)&long long v233 = v63;
      unint64_t v73 = *(void *)(v63 + 16);
      unint64_t v72 = *(void *)(v63 + 24);
      if (v73 >= v72 >> 1)
      {
        sub_1B3A2C484((char *)(v72 > 1), v73 + 1, 1);
        uint64_t v61 = v214;
        uint64_t v63 = v233;
      }
      *(void *)(v63 + 16) = v73 + 1;
      uint64_t v74 = v63 + 32 * v73;
      *(void *)(v74 + 32) = v225;
      *(void *)(v74 + 40) = v70;
      *(void *)(v74 + 48) = v71;
      *(unsigned char *)(v74 + 56) = 0;
      int64_t v75 = sub_1B3A349F8(v64, v66, v230 & 1, v61);
      int64_t v64 = v75;
      int v66 = v76;
      char v68 = v77 & 1;
      --v62;
    }
    while (v62);
    sub_1B3A38DCC(v75, v76, v68);
    swift_bridgeObjectRelease();
    uint64_t v58 = v208;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v63 = MEMORY[0x1E4FBC860];
  }
  uint64_t v78 = MEMORY[0x1E4FBC860];
  if (v211) {
    uint64_t v78 = v211;
  }
  uint64_t v209 = v78;
  *(void *)&long long v233 = v58;
  swift_bridgeObjectRetain();
  sub_1B3A25B8C(v63);
  uint64_t v79 = v233;
  uint64_t v193 = *(void *)(v233 + 16);
  if (v193)
  {
    unint64_t v80 = 0;
    uint64_t v194 = v233 + 32;
    uint64_t v192 = v233;
    while (1)
    {
      if (v80 >= *(void *)(v79 + 16)) {
        goto LABEL_241;
      }
      char v82 = (uint64_t *)(v194 + 32 * v80);
      uint64_t v84 = *v82;
      uint64_t v83 = v82[1];
      int64_t v15 = (void *)v82[2];
      swift_bridgeObjectRetain();
      v200 = v15;
      swift_bridgeObjectRetain();
      uint64_t v202 = v84;
      uint64_t v212 = v83;
      uint64_t v85 = sub_1B3A37BCC(v84, v83, a3 & 1, a4);
      uint64_t v226 = v88;
      if (v228)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_214:
        swift_bridgeObjectRelease();
        return (uint64_t)v15;
      }
      if (!v86)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        type metadata accessor for KTraceRecordError();
        sub_1B3A066CC();
        swift_allocError();
        uint64_t *v184 = v84;
        v184[1] = v83;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_214;
      }
      char v89 = v87;
      uint64_t v196 = v85;
      uint64_t v228 = 0;
      uint64_t v90 = v86;
      v91 = *(char **)(v227 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v205 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v91 = sub_1B3A1617C(0, *((void *)v91 + 2) + 1, 1, v91);
      }
      unint64_t v93 = *((void *)v91 + 2);
      unint64_t v92 = *((void *)v91 + 3);
      if (v93 >= v92 >> 1) {
        v91 = sub_1B3A1617C((char *)(v92 > 1), v93 + 1, 1, v91);
      }
      unint64_t v206 = v205 + 1;
      char v195 = v89 & 1;
      *((void *)v91 + 2) = v93 + 1;
      v94 = &v91[16 * v93];
      int64_t v15 = v200;
      *((void *)v94 + 4) = v202;
      *((void *)v94 + 5) = v212;
      *(void *)(v227 + 312) = v91;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v233 = v200;
      uint64_t v215 = v226 + 64;
      uint64_t v96 = 1 << *(unsigned char *)(v226 + 32);
      uint64_t v97 = v96 < 64 ? ~(-1 << v96) : -1;
      unint64_t v98 = v97 & *(void *)(v226 + 64);
      int64_t v221 = (unint64_t)(v96 + 63) >> 6;
      swift_bridgeObjectRetain();
      for (int64_t j = 0; ; int64_t j = v231)
      {
        if (v98)
        {
          unint64_t v101 = __clz(__rbit64(v98));
          v98 &= v98 - 1;
          int64_t v231 = j;
          unint64_t v102 = v101 | (j << 6);
          goto LABEL_95;
        }
        int64_t v103 = j + 1;
        if (__OFADD__(j, 1))
        {
          __break(1u);
          goto LABEL_227;
        }
        if (v103 >= v221) {
          goto LABEL_106;
        }
        unint64_t v104 = *(void *)(v215 + 8 * v103);
        int64_t v105 = j + 1;
        if (!v104)
        {
          int64_t v105 = j + 2;
          if (j + 2 >= v221) {
            goto LABEL_106;
          }
          unint64_t v104 = *(void *)(v215 + 8 * v105);
          if (!v104)
          {
            int64_t v105 = j + 3;
            if (j + 3 >= v221) {
              goto LABEL_106;
            }
            unint64_t v104 = *(void *)(v215 + 8 * v105);
            if (!v104)
            {
              int64_t v105 = j + 4;
              if (j + 4 >= v221) {
                goto LABEL_106;
              }
              unint64_t v104 = *(void *)(v215 + 8 * v105);
              if (!v104) {
                break;
              }
            }
          }
        }
LABEL_94:
        unint64_t v98 = (v104 - 1) & v104;
        int64_t v231 = v105;
        unint64_t v102 = __clz(__rbit64(v104)) + (v105 << 6);
LABEL_95:
        uint64_t v107 = 16 * v102;
        v108 = (uint64_t *)(*(void *)(v226 + 48) + v107);
        uint64_t v110 = *v108;
        uint64_t v109 = v108[1];
        v111 = (uint64_t *)(*(void *)(v226 + 56) + v107);
        uint64_t v112 = *v111;
        uint64_t v113 = v111[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v115 = sub_1B3A0C82C(v110, v109);
        uint64_t v116 = v15[2];
        BOOL v117 = (v114 & 1) == 0;
        uint64_t v118 = v116 + v117;
        if (__OFADD__(v116, v117))
        {
          __break(1u);
          goto LABEL_222;
        }
        char v119 = v114;
        if (v15[3] >= v118)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            int64_t v15 = (void *)v233;
            if (v114) {
              goto LABEL_75;
            }
          }
          else
          {
            sub_1B3A2FEA4();
            int64_t v15 = (void *)v233;
            if (v119) {
              goto LABEL_75;
            }
          }
        }
        else
        {
          sub_1B3A2F62C(v118, isUniquelyReferenced_nonNull_native & 1);
          unint64_t v120 = sub_1B3A0C82C(v110, v109);
          if ((v119 & 1) != (v121 & 1)) {
            goto LABEL_250;
          }
          unint64_t v115 = v120;
          int64_t v15 = (void *)v233;
          if (v119)
          {
LABEL_75:
            swift_bridgeObjectRelease();
            v100 = (void *)(v15[7] + 16 * v115);
            swift_bridgeObjectRelease();
            void *v100 = v112;
            v100[1] = v113;
            goto LABEL_76;
          }
        }
        v15[(v115 >> 6) + 8] |= 1 << v115;
        v122 = (uint64_t *)(v15[6] + 16 * v115);
        uint64_t *v122 = v110;
        v122[1] = v109;
        v123 = (void *)(v15[7] + 16 * v115);
        void *v123 = v112;
        v123[1] = v113;
        uint64_t v124 = v15[2];
        BOOL v19 = __OFADD__(v124, 1);
        uint64_t v125 = v124 + 1;
        if (v19)
        {
          __break(1u);
LABEL_224:
          swift_bridgeObjectRelease();
          int64_t v15 = (void *)MEMORY[0x1E4FBC860];
          goto LABEL_225;
        }
        v15[2] = v125;
LABEL_76:
        char isUniquelyReferenced_nonNull_native = 1;
      }
      uint64_t v106 = j + 5;
      if (j + 5 < v221) {
        break;
      }
LABEL_106:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v126 = *(void *)(v209 + 16);
      if (!v126) {
        goto LABEL_124;
      }
      if (*(void *)(v209 + 32) == v202 && *(void *)(v209 + 40) == v212 || (sub_1B3A70D20() & 1) != 0)
      {
        unint64_t v127 = 0;
        goto LABEL_111;
      }
      if (v126 == 1)
      {
LABEL_124:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if (swift_isUniquelyReferenced_nonNull_native()) {
          v133 = (char *)v209;
        }
        else {
          v133 = sub_1B3A306FC(0, *(void *)(v209 + 16) + 1, 1, (char *)v209);
        }
        unint64_t v135 = *((void *)v133 + 2);
        unint64_t v134 = *((void *)v133 + 3);
        if (v135 >= v134 >> 1) {
          v133 = sub_1B3A306FC((char *)(v134 > 1), v135 + 1, 1, v133);
        }
        *((void *)v133 + 2) = v135 + 1;
        uint64_t v209 = (uint64_t)v133;
        v81 = &v133[32 * v135];
        *((void *)v81 + 4) = v196;
        *((void *)v81 + 5) = v90;
        *((void *)v81 + 6) = v15;
        v81[56] = v195;
      }
      else
      {
        v130 = (void *)(v209 + 72);
        unint64_t v127 = 1;
        while (1)
        {
          BOOL v131 = *(v130 - 1) == v202 && *v130 == v212;
          if (v131 || (sub_1B3A70D20() & 1) != 0) {
            break;
          }
          unint64_t v132 = v127 + 1;
          if (__OFADD__(v127, 1)) {
            goto LABEL_243;
          }
          v130 += 4;
          ++v127;
          if (v132 == v126) {
            goto LABEL_124;
          }
        }
LABEL_111:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          v128 = (char *)v209;
          if ((v127 & 0x8000000000000000) != 0) {
            goto LABEL_246;
          }
        }
        else
        {
          v128 = sub_1B3A3048C(v209);
          if ((v127 & 0x8000000000000000) != 0) {
            goto LABEL_246;
          }
        }
        if (v127 >= *((void *)v128 + 2))
        {
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          uint64_t result = sub_1B3A70D70();
          __break(1u);
          return result;
        }
        uint64_t v209 = (uint64_t)v128;
        v129 = &v128[32 * v127];
        *((void *)v129 + 4) = v196;
        *((void *)v129 + 5) = v90;
        *((void *)v129 + 6) = v15;
        v129[56] = v195;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v79 = v192;
      unint64_t v80 = v206;
      if (v206 == v193) {
        goto LABEL_131;
      }
    }
    unint64_t v104 = *(void *)(v215 + 8 * v106);
    if (!v104)
    {
      while (1)
      {
        int64_t v105 = v106 + 1;
        if (__OFADD__(v106, 1)) {
          break;
        }
        if (v105 >= v221) {
          goto LABEL_106;
        }
        unint64_t v104 = *(void *)(v215 + 8 * v105);
        ++v106;
        if (v104) {
          goto LABEL_94;
        }
      }
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
LABEL_246:
      __break(1u);
      goto LABEL_247;
    }
    int64_t v105 = j + 5;
    goto LABEL_94;
  }
LABEL_131:
  swift_bridgeObjectRelease();
  v136 = sub_1B3A24C50(*a4);
  if (v137)
  {
    int64_t v15 = v136;
    uint64_t v139 = v137;
    uint64_t v140 = v138;
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    v142 = v141;
    uint64_t v143 = sub_1B3A24CDC(v140);
    unint64_t v145 = v144;
    swift_bridgeObjectRelease();
    uint64_t v146 = 4144959;
    if (v145) {
      uint64_t v146 = v143;
    }
    unint64_t v147 = 0xE300000000000000;
    void *v142 = v15;
    v142[1] = v139;
    if (v145) {
      unint64_t v147 = v145;
    }
    v142[2] = v146;
    v142[3] = v147;
    goto LABEL_39;
  }
  uint64_t v197 = v204 + 56;
  uint64_t v148 = 1 << *(unsigned char *)(v204 + 32);
  uint64_t v149 = -1;
  if (v148 < 64) {
    uint64_t v149 = ~(-1 << v148);
  }
  unint64_t v150 = v149 & *(void *)(v204 + 56);
  int64_t v199 = (unint64_t)(v148 + 63) >> 6;
  uint64_t v151 = swift_bridgeObjectRetain();
  int64_t v152 = 0;
  v153 = (char *)v209;
  while (1)
  {
    v154 = v153;
    if (v150)
    {
      uint64_t v203 = (v150 - 1) & v150;
      unint64_t v155 = __clz(__rbit64(v150)) | (v152 << 6);
      goto LABEL_154;
    }
    BOOL v19 = __OFADD__(v152++, 1);
    if (v19) {
      goto LABEL_248;
    }
    if (v152 >= v199) {
      break;
    }
    unint64_t v156 = *(void *)(v197 + 8 * v152);
    if (!v156)
    {
      int64_t v157 = v152 + 1;
      if (v152 + 1 >= v199) {
        break;
      }
      unint64_t v156 = *(void *)(v197 + 8 * v157);
      if (!v156)
      {
        int64_t v157 = v152 + 2;
        if (v152 + 2 >= v199) {
          break;
        }
        unint64_t v156 = *(void *)(v197 + 8 * v157);
        if (!v156)
        {
          int64_t v157 = v152 + 3;
          if (v152 + 3 >= v199) {
            break;
          }
          unint64_t v156 = *(void *)(v197 + 8 * v157);
          if (!v156)
          {
            while (1)
            {
              int64_t v152 = v157 + 1;
              if (__OFADD__(v157, 1)) {
                goto LABEL_249;
              }
              if (v152 >= v199) {
                goto LABEL_215;
              }
              unint64_t v156 = *(void *)(v197 + 8 * v152);
              ++v157;
              if (v156) {
                goto LABEL_153;
              }
            }
          }
        }
      }
      int64_t v152 = v157;
    }
LABEL_153:
    uint64_t v203 = (v156 - 1) & v156;
    unint64_t v155 = __clz(__rbit64(v156)) + (v152 << 6);
LABEL_154:
    v158 = (uint64_t *)(*(void *)(v151 + 48) + 16 * v155);
    uint64_t v159 = *((void *)v153 + 2);
    if (!v159)
    {
      swift_bridgeObjectRetain();
      uint64_t v162 = 0;
      int64_t v163 = 0;
      goto LABEL_168;
    }
    uint64_t v160 = *v158;
    BOOL v161 = *((void *)v153 + 4) == *v158 && *((void *)v153 + 5) == v158[1];
    uint64_t v232 = v158[1];
    if (v161)
    {
      int64_t v201 = v152;
      uint64_t v162 = 0;
    }
    else if (sub_1B3A70D20())
    {
      int64_t v201 = v152;
      uint64_t v162 = 0;
    }
    else
    {
      if (v159 == 1)
      {
        int64_t v163 = *((void *)v153 + 2);
        swift_bridgeObjectRetain();
        if (!v163) {
          goto LABEL_238;
        }
        uint64_t v162 = 1;
        goto LABEL_168;
      }
      v181 = v153 + 72;
      uint64_t v162 = 1;
      int64_t v201 = v152;
      while (*(v181 - 1) != v160 || *v181 != v232)
      {
        if (sub_1B3A70D20())
        {
          v153 = v154;
          break;
        }
        uint64_t v183 = v162 + 1;
        if (__OFADD__(v162, 1)) {
          goto LABEL_242;
        }
        v153 = v154;
        v181 += 4;
        ++v162;
        if (v183 == v159)
        {
          uint64_t v162 = v159;
          goto LABEL_165;
        }
      }
    }
    uint64_t v164 = v162 + 1;
    uint64_t v165 = v232;
    if (__OFADD__(v162, 1)) {
      goto LABEL_244;
    }
    if (v164 != v159)
    {
      swift_bridgeObjectRetain();
      uint64_t v171 = 32 * v162 + 64;
      unint64_t v172 = v162 + 1;
      while ((v164 & 0x8000000000000000) == 0)
      {
        unint64_t v173 = *((void *)v153 + 2);
        if (v172 >= v173) {
          goto LABEL_229;
        }
        BOOL v174 = *(void *)&v153[v171] == v160 && *(void *)&v153[v171 + 8] == v165;
        if (!v174 && (sub_1B3A70D20() & 1) == 0)
        {
          if (v172 != v162)
          {
            if (v162 >= v173) {
              goto LABEL_236;
            }
            uint64_t v175 = (uint64_t)&v153[32 * v162 + 32];
            uint64_t v210 = *(void *)v175;
            uint64_t v176 = *(void *)(v175 + 16);
            char v207 = *(unsigned char *)(v175 + 24);
            uint64_t v222 = *(void *)&v153[v171];
            uint64_t v177 = *(void *)&v153[v171 + 8];
            uint64_t v178 = *(void *)&v153[v171 + 16];
            char v218 = v153[v171 + 24];
            uint64_t v216 = *(void *)(v175 + 8);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v153 = sub_1B3A3048C((uint64_t)v153);
            }
            v179 = &v153[32 * v162];
            *((void *)v179 + 4) = v222;
            *((void *)v179 + 5) = v177;
            *((void *)v179 + 6) = v178;
            v179[56] = v218;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v172 >= *((void *)v153 + 2)) {
              goto LABEL_237;
            }
            v180 = &v153[v171];
            *(void *)v180 = v210;
            *((void *)v180 + 1) = v216;
            *((void *)v180 + 2) = v176;
            v180[24] = v207;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v165 = v232;
          }
          BOOL v19 = __OFADD__(v162++, 1);
          if (v19) {
            goto LABEL_234;
          }
        }
        ++v172;
        v171 += 32;
        if (v172 == *((void *)v153 + 2)) {
          goto LABEL_166;
        }
      }
      goto LABEL_228;
    }
LABEL_165:
    swift_bridgeObjectRetain();
LABEL_166:
    int64_t v163 = *((void *)v153 + 2);
    int64_t v152 = v201;
    if (v163 < v162) {
      goto LABEL_238;
    }
    if (v162 < 0) {
      goto LABEL_239;
    }
LABEL_168:
    uint64_t v166 = v162 - v163;
    if (__OFADD__(v163, v162 - v163)) {
      goto LABEL_240;
    }
    v167 = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!v167 || v162 > *((void *)v153 + 3) >> 1)
    {
      if (v163 <= v162) {
        int64_t v168 = v162;
      }
      else {
        int64_t v168 = v163;
      }
      v153 = sub_1B3A306FC(v167, v168, 1, v153);
    }
    swift_arrayDestroy();
    if (v163 != v162)
    {
      memmove(&v153[32 * v162 + 32], &v153[32 * v163 + 32], 32 * (*((void *)v153 + 2) - v163));
      uint64_t v169 = *((void *)v153 + 2);
      BOOL v19 = __OFADD__(v169, v166);
      uint64_t v170 = v169 + v166;
      if (v19) {
        goto LABEL_245;
      }
      *((void *)v153 + 2) = v170;
    }
    swift_bridgeObjectRelease();
    unint64_t v150 = v203;
    uint64_t v151 = v204;
  }
LABEL_215:
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v227 + 264) = v153;
  int64_t v185 = *((void *)v153 + 2);
  if (!v185) {
    goto LABEL_224;
  }
  *(void *)&long long v233 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  sub_1B3A052F4(0, v185, 0);
  int64_t v15 = (void *)v233;
  v186 = (uint64_t *)(v153 + 40);
  do
  {
    uint64_t v188 = *(v186 - 1);
    uint64_t v187 = *v186;
    *(void *)&long long v233 = v15;
    unint64_t v190 = v15[2];
    unint64_t v189 = v15[3];
    swift_bridgeObjectRetain();
    if (v190 >= v189 >> 1)
    {
      sub_1B3A052F4((char *)(v189 > 1), v190 + 1, 1);
      int64_t v15 = (void *)v233;
    }
    v186 += 4;
    v15[2] = v190 + 1;
    v191 = &v15[2 * v190];
    v191[4] = v188;
    v191[5] = v187;
    --v185;
  }
  while (v185);
LABEL_222:
  swift_bridgeObjectRelease_n();
LABEL_225:
  sub_1B3A32218(v223);
  swift_release();
  return (uint64_t)v15;
}

uint64_t sub_1B3A285A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1B3A2C7C0(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1B3A28720(_TtC6ktrace12ProviderList *a1, void *a2, char a3)
{
  return sub_1B3A24400(a1, a2, a3);
}

uint64_t sub_1B3A2877C(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  memcpy(__dst, v3, 0x141uLL);
  uint64_t v17 = (char *)__dst[36];
  swift_bridgeObjectRetain_n();
  sub_1B3A33238((uint64_t *)&v17, (uint64_t (*)(uint64_t))sub_1B3A1F1EC, sub_1B3A1E610);
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t)v17;
  sub_1B39B373C((uint64_t)__dst);
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_1B3A226A0(v7);
  swift_bridgeObjectRelease();
  sub_1B39B0C68((uint64_t)__dst);
  uint64_t v9 = sub_1B3A35F98(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1B3A31E2C(v6, v9);
  uint64_t v11 = (char *)sub_1B3A1E528(v10);
  swift_release();
  uint64_t v17 = v11;
  swift_retain();
  sub_1B3A33238((uint64_t *)&v17, (uint64_t (*)(uint64_t))sub_1B3A1F1EC, sub_1B3A1E610);
  swift_release();
  uint64_t v12 = (uint64_t)v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5EC0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0xD000000000000010;
  *(_OWORD *)(inited + 16) = xmmword_1B3A74040;
  *(void *)(inited + 40) = 0x80000001B3A7B120;
  *(void *)(inited + 48) = v6;
  strcpy((char *)(inited + 56), "Extra layers: ");
  *(unsigned char *)(inited + 71) = -18;
  *(void *)(inited + 72) = v12;
  swift_bridgeObjectRetain();
  int64_t v14 = sub_1B3A37974(inited, a1, a2);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5EC8);
  swift_arrayDestroy();
  uint64_t v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
  sub_1B3A38DD8((unint64_t *)&qword_1E9CD58B0, &qword_1E9CD58A8);
  uint64_t v15 = sub_1B3A70250();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1B3A28A10()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 296);
  int v5 = *(unsigned __int8 *)(v0 + 304);
  if (v5 != 1 && v5 != 4)
  {
    uint64_t v27 = 10272;
    unint64_t v28 = 0xE200000000000000;
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
  }
  unint64_t v28 = v1;
  swift_bridgeObjectRetain();
  sub_1B3A703A0();
  sub_1B3A70D00();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  swift_bridgeObjectRetain();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  uint64_t v7 = v2;
  unint64_t v8 = v1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1B3A22990(v9);
  swift_bridgeObjectRelease();
  uint64_t v27 = v10;
  swift_bridgeObjectRetain();
  sub_1B3A33238(&v27, (uint64_t (*)(uint64_t))sub_1B3A1F1EC, sub_1B3A1E610);
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + 16))
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    uint64_t v27 = 0xD000000000000017;
    unint64_t v28 = 0x80000001B3A7B140;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
    sub_1B3A38DD8((unint64_t *)&qword_1E9CD58B0, &qword_1E9CD58A8);
    sub_1B3A70250();
    swift_release();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    if (!v3) {
      goto LABEL_16;
    }
  }
  else
  {
    swift_release();
    if (!v3) {
      goto LABEL_16;
    }
  }
  int64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (v11)
  {
    unint64_t v24 = v8;
    uint64_t v25 = v7;
    uint64_t v26 = MEMORY[0x1E4FBC860];
    sub_1B3A052F4(0, v11, 0);
    uint64_t v12 = v26;
    uint64_t v13 = v3 + 48;
    uint64_t v14 = MEMORY[0x1E4FBB1A0];
    do
    {
      unint64_t v15 = *(void *)(v13 - 8);
      uint64_t v27 = *(void *)(v13 - 16);
      unint64_t v28 = v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1B3A703A0();
      uint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v17 = sub_1B3A22164(v16);
      swift_bridgeObjectRelease();
      MEMORY[0x1B3EBD890](v17, v14);
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v18 = v27;
      unint64_t v19 = v28;
      unint64_t v21 = *(void *)(v26 + 16);
      unint64_t v20 = *(void *)(v26 + 24);
      if (v21 >= v20 >> 1) {
        sub_1B3A052F4((char *)(v20 > 1), v21 + 1, 1);
      }
      v13 += 32;
      *(void *)(v26 + 16) = v21 + 1;
      unint64_t v22 = v26 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v19;
      --v11;
    }
    while (v11);
    unint64_t v8 = v24;
    uint64_t v7 = v25;
  }
  uint64_t v27 = v12;
  swift_bridgeObjectRetain();
  sub_1B3A33238(&v27, (uint64_t (*)(uint64_t))sub_1B3A1F1EC, sub_1B3A1E610);
  swift_bridgeObjectRelease();
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  sub_1B3A709B0();
  swift_bridgeObjectRelease();
  uint64_t v27 = 0xD00000000000001ALL;
  unint64_t v28 = 0x80000001B3A7B160;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
  sub_1B3A38DD8((unint64_t *)&qword_1E9CD58B0, &qword_1E9CD58A8);
  sub_1B3A70250();
  swift_release();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
LABEL_16:
  uint64_t v27 = v7;
  unint64_t v28 = v8;
  sub_1B3A703A0();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  swift_bridgeObjectRetain();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t sub_1B3A2903C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F00);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v109 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B39B5B2C();
  sub_1B3A70E60();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v109);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v52 = v6;
    uint64_t v50 = a2;
    LOBYTE(v54[0]) = 0;
    uint64_t v10 = sub_1B3A70BC0();
    uint64_t v12 = v11;
    LOBYTE(v54[0]) = 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1B3A70BF0();
    LOBYTE(v54[0]) = 2;
    uint64_t v48 = sub_1B3A70B90();
    uint64_t v49 = v13;
    LOBYTE(v54[0]) = 3;
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1B3A70B90();
    uint64_t v51 = v15;
    uint64_t v46 = v16;
    LOBYTE(v54[0]) = 4;
    uint64_t v18 = v17;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1B3A70B90();
    uint64_t v21 = v20;
    uint64_t v43 = v19;
    uint64_t v45 = v18;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
    v53[0] = 5;
    uint64_t v23 = sub_1B39B109C(&qword_1E9CD5F08);
    swift_bridgeObjectRetain();
    uint64_t v44 = v23;
    uint64_t v47 = v21;
    sub_1B3A70BB0();
    uint64_t v38 = v22;
    uint64_t v24 = v54[0];
    LOBYTE(v54[0]) = 6;
    swift_bridgeObjectRetain();
    uint64_t v41 = 0;
    uint64_t v25 = sub_1B3A70BC0();
    uint64_t v42 = v24;
    uint64_t v37 = v25;
    LOBYTE(v54[0]) = 7;
    uint64_t v27 = v26;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1B3A70BC0();
    uint64_t v40 = v27;
    uint64_t v36 = v28;
    char v85 = 8;
    uint64_t v30 = v29;
    sub_1B3A38EA8();
    swift_bridgeObjectRetain();
    sub_1B3A70C00();
    uint64_t v39 = v30;
    long long v82 = v94;
    long long v83 = v95;
    long long v84 = v96;
    long long v78 = v90;
    long long v79 = v91;
    long long v80 = v92;
    long long v81 = v93;
    long long v74 = v86;
    long long v75 = v87;
    long long v76 = v88;
    long long v77 = v89;
    long long v105 = v93;
    long long v106 = v94;
    long long v107 = v95;
    long long v108 = v96;
    long long v101 = v89;
    long long v102 = v90;
    long long v103 = v91;
    long long v104 = v92;
    long long v98 = v86;
    long long v99 = v87;
    long long v100 = v88;
    v53[0] = 9;
    sub_1B3A38EFC((uint64_t)&v74);
    sub_1B3A70C00();
    uint64_t v31 = v54[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5EE8);
    char v72 = 10;
    sub_1B39B577C(&qword_1E9CD5F18, (void (*)(void))sub_1B3A38F88);
    swift_bridgeObjectRetain();
    sub_1B3A70C00();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v8, v5);
    uint64_t v52 = v73;
    *(void *)uint64_t v53 = v10;
    *(void *)&v53[8] = v12;
    *(void *)&v53[16] = v49;
    *(void *)&v53[24] = v48;
    *(void *)&v53[32] = v51;
    *(void *)&v53[40] = v46;
    *(void *)&v53[48] = v45;
    *(void *)&v53[56] = v43;
    *(void *)&v53[64] = v47;
    *(void *)&v53[72] = v42;
    *(void *)&v53[80] = v37;
    *(void *)&v53[88] = v40;
    *(void *)&v53[96] = v36;
    *(void *)&v53[104] = v39;
    *(_OWORD *)&v53[112] = v74;
    *(_OWORD *)&v53[128] = v75;
    *(_OWORD *)&v53[192] = v79;
    *(_OWORD *)&v53[176] = v78;
    *(_OWORD *)&v53[144] = v76;
    *(_OWORD *)&v53[160] = v77;
    *(_OWORD *)&v53[272] = v84;
    *(_OWORD *)&v53[256] = v83;
    *(_OWORD *)&v53[240] = v82;
    *(_OWORD *)&v53[208] = v80;
    *(_OWORD *)&v53[224] = v81;
    *(void *)&v53[288] = v31;
    *(void *)&v53[296] = v73;
    v53[304] = 4;
    *(void *)&v53[312] = MEMORY[0x1E4FBC860];
    v53[320] = 0;
    sub_1B39B373C((uint64_t)v53);
    swift_bridgeObjectRelease();
    sub_1B3A38E1C((uint64_t)&v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = v42;
    swift_bridgeObjectRelease();
    uint64_t v33 = v40;
    swift_bridgeObjectRelease();
    uint64_t v34 = v39;
    swift_bridgeObjectRelease();
    memcpy(v50, v53, 0x141uLL);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v109);
    v54[0] = v10;
    v54[1] = v12;
    v54[2] = v49;
    v54[3] = v48;
    v54[4] = v51;
    v54[5] = v46;
    v54[6] = v45;
    v54[7] = v43;
    v54[8] = v47;
    v54[9] = v32;
    v54[10] = v37;
    v54[11] = v33;
    v54[12] = v36;
    v54[13] = v34;
    long long v63 = v106;
    long long v64 = v107;
    long long v65 = v108;
    long long v59 = v102;
    long long v60 = v103;
    long long v61 = v104;
    long long v62 = v105;
    long long v55 = v98;
    long long v56 = v99;
    long long v57 = v100;
    long long v58 = v101;
    uint64_t v66 = v31;
    uint64_t v67 = v52;
    char v68 = 4;
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v97;
    *(_DWORD *)&v69[3] = *(_DWORD *)&v97[3];
    uint64_t v70 = MEMORY[0x1E4FBC860];
    char v71 = 0;
    return sub_1B39B0C68((uint64_t)v54);
  }
}

uint64_t sub_1B3A29C00@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1B3A2903C(a1, a2);
}

uint64_t sub_1B3A29C18()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A29C74()
{
  swift_bridgeObjectRetain();
  sub_1B3A70360();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A29CCC()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A29D24(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_1B3A70D20();
  }
}

void *sub_1B3A29D54(char a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a3;
  int v64 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F28);
  uint64_t v67 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  long long v63 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  long long v62 = (char *)&v58 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v61 = (uint64_t)&v58 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v58 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v58 - v16;
  uint64_t v18 = sub_1B3A6FF40();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  long long v59 = (char *)&v58 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v58 - v24;
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v28 = (char *)&v58 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v58 - v29;
  uint64_t v65 = v31;
  uint64_t v66 = v6;
  if ((a1 & 1) == 0 || !getenv("TRACE_PLAN_PATH"))
  {
    uint64_t v33 = (void *)MEMORY[0x1E4FBC860];
    if (!a4) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  sub_1B3A703B0();
  sub_1B3A6FE90();
  swift_bridgeObjectRelease();
  uint64_t v32 = *(int *)(v6 + 48);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v17, v30, v18);
  v17[v32] = 3;
  uint64_t v33 = (void *)sub_1B3A30B60(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v35 = v33[2];
  unint64_t v34 = v33[3];
  if (v35 >= v34 >> 1) {
    uint64_t v33 = (void *)sub_1B3A30B60(v34 > 1, v35 + 1, 1, v33);
  }
  v33[2] = v35 + 1;
  sub_1B39B4CD4((uint64_t)v17, (uint64_t)v33+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v35, &qword_1E9CD5F28);
  uint64_t v6 = v66;
  if (a4)
  {
LABEL_8:
    sub_1B3A6FE90();
    uint64_t v36 = *(int *)(v6 + 48);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v28, v18);
    v15[v36] = 2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v33 = (void *)sub_1B3A30B60(0, v33[2] + 1, 1, v33);
    }
    unint64_t v38 = v33[2];
    unint64_t v37 = v33[3];
    if (v38 >= v37 >> 1) {
      uint64_t v33 = (void *)sub_1B3A30B60(v37 > 1, v38 + 1, 1, v33);
    }
    v33[2] = v38 + 1;
    sub_1B39B4CD4((uint64_t)v15, (uint64_t)v33+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v38, &qword_1E9CD5F28);
    uint64_t v6 = v66;
  }
LABEL_13:
  if (v64)
  {
    sub_1B3A6FE90();
    uint64_t v39 = *(int *)(v6 + 48);
    uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
    uint64_t v41 = v61;
    v40(v61, v25, v18);
    *(unsigned char *)(v41 + v39) = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v33 = (void *)sub_1B3A30B60(0, v33[2] + 1, 1, v33);
    }
    unint64_t v43 = v33[2];
    unint64_t v42 = v33[3];
    if (v43 >= v42 >> 1) {
      uint64_t v33 = (void *)sub_1B3A30B60(v42 > 1, v43 + 1, 1, v33);
    }
    v33[2] = v43 + 1;
    unint64_t v44 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    uint64_t v45 = *(void *)(v67 + 72);
    sub_1B39B4CD4(v61, (uint64_t)v33 + v44 + v45 * v43, &qword_1E9CD5F28);
    uint64_t v46 = v59;
    sub_1B3A6FE90();
    uint64_t v47 = *(int *)(v66 + 48);
    uint64_t v48 = v62;
    v40((uint64_t)v62, v46, v18);
    v48[v47] = 0;
    unint64_t v50 = v33[2];
    unint64_t v49 = v33[3];
    if (v50 >= v49 >> 1) {
      uint64_t v33 = (void *)sub_1B3A30B60(v49 > 1, v50 + 1, 1, v33);
    }
    uint64_t v51 = (uint64_t)v62;
    uint64_t v52 = (uint64_t)v63;
    v33[2] = v50 + 1;
    sub_1B39B4CD4(v51, (uint64_t)v33 + v44 + v50 * v45, &qword_1E9CD5F28);
    uint64_t v6 = v66;
  }
  else
  {
    uint64_t v52 = (uint64_t)v63;
  }
  uint64_t v53 = v65;
  sub_1B3A6FE90();
  uint64_t v54 = *(int *)(v6 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v52, v53, v18);
  *(unsigned char *)(v52 + v54) = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v33 = (void *)sub_1B3A30B60(0, v33[2] + 1, 1, v33);
  }
  unint64_t v56 = v33[2];
  unint64_t v55 = v33[3];
  if (v56 >= v55 >> 1) {
    uint64_t v33 = (void *)sub_1B3A30B60(v55 > 1, v56 + 1, 1, v33);
  }
  v33[2] = v56 + 1;
  sub_1B39B4CD4(v52, (uint64_t)v33+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v56, &qword_1E9CD5F28);
  return v33;
}

uint64_t sub_1B3A2A3C8(unsigned char *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, void (*a7)(unsigned char *, uint64_t))
{
  uint64_t v58 = a1;
  char v71 = a7;
  uint64_t v12 = sub_1B3A6FF40();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v67 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = &v55[-v17];
  MEMORY[0x1F4188790](v16);
  char v68 = &v55[-v19];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F28);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v66 = &v55[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v23 = a5 & a4;
  uint64_t v24 = sub_1B3A29D54(v23 & 1, a5, a6, (uint64_t)v71);
  uint64_t v25 = v24[2];
  if (v25)
  {
    int v56 = v23;
    uint64_t v26 = self;
    uint64_t v63 = v12;
    id v64 = v26;
    uint64_t v27 = *(unsigned __int8 *)(v21 + 80);
    long long v57 = v24;
    uint64_t v28 = (uint64_t)v24 + ((v27 + 32) & ~v27);
    uint64_t v59 = *(void *)(v21 + 72);
    uint64_t v65 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32);
    uint64_t v29 = (void (**)(void, void))(v13 + 8);
    uint64_t v30 = &unk_1E6063000;
    uint64_t v31 = v68;
    uint64_t v61 = v29;
    long long v62 = v18;
    while (1)
    {
      uint64_t v69 = v28;
      uint64_t v70 = v25;
      uint64_t v32 = v66;
      sub_1B3A38FDC(v28, (uint64_t)v66);
      uint64_t v60 = *v65;
      v60(v31, v32, v12);
      uint64_t v33 = v67;
      sub_1B3A6FED0();
      sub_1B3A6FEE0();
      char v71 = (void (*)(unsigned char *, uint64_t))*v29;
      v71(v33, v12);
      unint64_t v34 = (const char *)*((void *)v30 + 294);
      unint64_t v35 = (const char *)v30;
      uint64_t v36 = a2;
      id v37 = v64;
      id v38 = [v64 v34];
      sub_1B3A6FF20();
      uint64_t v39 = (void *)sub_1B3A70290();
      swift_bridgeObjectRelease();
      unsigned int v40 = objc_msgSend(v38, sel_fileExistsAtPath_, v39);

      if (v40)
      {
        uint64_t v48 = v63;
        v71(v68, v63);
        swift_bridgeObjectRelease();
        v60(v58, v62, v48);
LABEL_10:
        char v47 = v40 ^ 1;
        return v47 & 1;
      }
      id v41 = [v37 v35 + 827];
      a2 = v36;
      uint64_t v42 = a3;
      unint64_t v43 = (void *)sub_1B3A70290();
      unsigned int v44 = objc_msgSend(v41, sel_fileExistsAtPath_, v43);

      if (v44) {
        break;
      }
      uint64_t v12 = v63;
      uint64_t v29 = v61;
      uint64_t v45 = v71;
      v71(v62, v63);
      uint64_t v31 = v68;
      v45(v68, v12);
      uint64_t v28 = v69 + v59;
      uint64_t v25 = v70 - 1;
      a3 = v42;
      uint64_t v30 = &unk_1E6063000;
      if (v70 == 1) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v50 = v62;
    uint64_t v49 = v63;
    if (v56)
    {
      sub_1B3A6FE90();
      uint64_t v51 = v71;
      v71(v50, v49);
      v51(v68, v49);
      goto LABEL_10;
    }
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    *uint64_t v53 = a2;
    v53[1] = v42;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    uint64_t v54 = v71;
    v71(v50, v49);
    v54(v68, v49);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    void *v46 = a2;
    v46[1] = a3;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  return v47 & 1;
}

id sub_1B3A2A8E0(char a1, int a2)
{
  uint64_t v257 = *MEMORY[0x1E4F143B8];
  uint64_t v217 = type metadata accessor for KTraceRecordError();
  uint64_t v4 = MEMORY[0x1F4188790](v217);
  uint64_t v216 = (uint64_t)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v222 = (uint64_t *)((char *)&v168 - v6);
  uint64_t v220 = sub_1B3A70A10();
  uint64_t v7 = *(void *)(v220 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v220);
  int64_t v221 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v168 - v10;
  uint64_t v209 = sub_1B3A6FC40();
  uint64_t v12 = *(void *)(v209 - 8);
  MEMORY[0x1F4188790](v209);
  uint64_t v208 = (char *)&v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = sub_1B3A6FF40();
  uint64_t v14 = *(void *)(v227 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v227);
  uint64_t v178 = (char *)&v168 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  int64_t v229 = (char *)&v168 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v228 = (char *)&v168 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F28);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v194 = (uint64_t)&v168 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = MEMORY[0x1E4FBC870];
  int v23 = sub_1B3A29D54(a1, a2, 0, 0);
  uint64_t v193 = v23[2];
  if (v193)
  {
    uint64_t v191 = *(int *)(v20 + 48);
    uint64_t v24 = self;
    unint64_t v25 = 0;
    uint64_t v192 = v21;
    unint64_t v189 = (char *)v23 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    id v190 = v24;
    uint64_t v188 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    unsigned int v207 = *MEMORY[0x1E4F26C70];
    unint64_t v206 = (void (**)(char *, void, uint64_t))(v12 + 104);
    int64_t v185 = &v251[34];
    int64_t v201 = &v251[37];
    uint64_t v175 = &v239[40];
    uint64_t v176 = &v251[14];
    unint64_t v172 = v256;
    unint64_t v173 = v254;
    uint64_t v170 = &v238[14];
    uint64_t v171 = &v236[14];
    uint64_t v169 = (_DWORD *)((char *)&v238[38] + 1);
    uint64_t v214 = (void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v215 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v213 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v26 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v211 = 0x80000001B3A7B210;
    unint64_t v212 = 0x80000001B3A7B230;
    uint64_t v219 = v11;
    uint64_t v27 = v227;
    uint64_t v187 = v23;
    uint64_t v223 = (void (**)(char *, uint64_t))(v14 + 8);
    do
    {
      if (v25 >= v23[2]) {
        goto LABEL_113;
      }
      uint64_t v28 = v194;
      sub_1B3A38FDC((uint64_t)&v189[*(void *)(v192 + 72) * v25], v194);
      int v195 = *(unsigned __int8 *)(v28 + v191);
      (*v188)(v228, v28, v27);
      uint64_t v232 = MEMORY[0x1E4FBC870];
      id v29 = objc_msgSend(v190, sel_defaultManager);
      sub_1B3A6FF20();
      uint64_t v30 = (void *)sub_1B3A70290();
      swift_bridgeObjectRelease();
      v251[0] = 0;
      id v31 = objc_msgSend(v29, sel_contentsOfDirectoryAtPath_error_, v30, v251);

      uint64_t v32 = (void *)v251[0];
      unint64_t v198 = v25;
      if (v31)
      {
        uint64_t v33 = sub_1B3A70550();
        id v34 = v32;

        unint64_t v35 = v231;
      }
      else
      {
        id v36 = (id)v251[0];
        id v37 = (void *)sub_1B3A6FE40();

        swift_willThrow();
        unint64_t v35 = 0;
        uint64_t v33 = MEMORY[0x1E4FBC860];
      }
      char v230 = v26;
      int64_t v231 = v35;
      uint64_t v38 = *(void *)(v33 + 16);
      if (v38)
      {
        uint64_t v39 = (uint64_t *)(v33 + 40);
        uint64_t v40 = MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v42 = *(v39 - 1);
          uint64_t v41 = *v39;
          swift_bridgeObjectRetain();
          if (sub_1B3A70450())
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v251[0] = v40;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1B3A052F4(0, *(void *)(v40 + 16) + 1, 1);
              uint64_t v40 = v251[0];
            }
            unint64_t v45 = *(void *)(v40 + 16);
            unint64_t v44 = *(void *)(v40 + 24);
            if (v45 >= v44 >> 1)
            {
              sub_1B3A052F4((char *)(v44 > 1), v45 + 1, 1);
              uint64_t v40 = v251[0];
            }
            *(void *)(v40 + 16) = v45 + 1;
            uint64_t v46 = v40 + 16 * v45;
            *(void *)(v46 + 32) = v42;
            *(void *)(v46 + 40) = v41;
            uint64_t v11 = v219;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v39 += 2;
          --v38;
        }
        while (v38);
      }
      else
      {
        uint64_t v40 = MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      uint64_t v226 = *(void *)(v40 + 16);
      if (v226)
      {
        unint64_t v47 = 0;
        uint64_t v224 = v40;
        uint64_t v225 = v40 + 32;
        uint64_t v48 = v220;
        uint64_t v26 = v230;
        while (v47 < *(void *)(v40 + 16))
        {
          char v230 = v26;
          uint64_t v59 = (id *)(v225 + 16 * v47);
          id v60 = *v59;
          uint64_t v61 = (void (*)(char *, uint64_t))v59[1];
          swift_bridgeObjectRetain();
          sub_1B3A6FED0();
          long long v62 = v231;
          uint64_t v63 = sub_1B3A6FF60();
          uint64_t v65 = v62;
          if (v62)
          {
            int64_t v231 = 0;
          }
          else
          {
            char v218 = v61;
            uint64_t v66 = v63;
            unint64_t v67 = v64;
            sub_1B3A6FC80();
            swift_allocObject();
            uint64_t v68 = sub_1B3A6FC70();
            sub_1B3A6FC30();
            (*v206)(v208, v207, v209);
            sub_1B3A6FC50();
            sub_1B3A3751C();
            sub_1B3A6FC60();
            unint64_t v204 = v67;
            uint64_t v205 = v68;
            uint64_t v203 = v66;
            memcpy(v239, v251, 0x141uLL);
            memcpy(v238, v251, 0x141uLL);
            sub_1B39B373C((uint64_t)v239);
            sub_1B3A26768();
            int64_t v231 = 0;
            sub_1B39B0C68((uint64_t)v239);
            id v196 = v239[0];
            id v197 = v60;
            id v84 = v239[1];
            id v85 = v239[18];
            id v86 = v239[20];
            uint64_t v61 = v218;
            if (v239[18])
            {
              id v87 = v239[17];
              id v88 = v239[19];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v89 = (uint64_t)v85;
              long long v90 = v231;
              uint64_t v91 = sub_1B3A02D30((uint64_t)v87, v89);
              uint64_t v11 = v219;
              if (v90)
              {
                swift_bridgeObjectRelease();
                uint64_t v65 = v90;
              }
              else
              {
                int64_t v231 = 0;
                sub_1B3A02FE0(v91, 1);
                swift_bridgeObjectRelease();
                if (!v86) {
                  goto LABEL_53;
                }
                swift_bridgeObjectRetain();
                long long v93 = v231;
                uint64_t v94 = sub_1B3A02D30((uint64_t)v88, (uint64_t)v86);
                uint64_t v65 = v93;
                if (!v93)
                {
                  int64_t v231 = 0;
                  sub_1B3A02FE0(v94, 0);
                  swift_bridgeObjectRelease();
LABEL_53:
                  swift_bridgeObjectRelease();
LABEL_54:
                  uint64_t v186 = (uint64_t)v84;
                  uint64_t v95 = *(void *)(v251[37] + 64);
                  int64_t v199 = (void *)(v251[37] + 64);
                  uint64_t v96 = 1 << *(unsigned char *)(v251[37] + 32);
                  if (v96 < 64) {
                    uint64_t v97 = ~(-1 << v96);
                  }
                  else {
                    uint64_t v97 = -1;
                  }
                  unint64_t v98 = v97 & v95;
                  id v200 = (id)((unint64_t)(v96 + 63) >> 6);
                  uint64_t v202 = (void *)v251[37];
                  swift_bridgeObjectRetain();
                  for (id i = 0; ; id i = v210)
                  {
                    if (v98)
                    {
                      unint64_t v100 = __clz(__rbit64(v98));
                      v98 &= v98 - 1;
                      id v210 = i;
                      unint64_t v101 = v100 | ((void)i << 6);
                    }
                    else
                    {
                      BOOL v102 = __OFADD__(i, 1);
                      uint64_t v103 = (uint64_t)i + 1;
                      if (v102) {
                        goto LABEL_112;
                      }
                      if (v103 >= (uint64_t)v200)
                      {
LABEL_91:
                        swift_release();
                        swift_release();
                        id v182 = v239[2];
                        id v183 = v239[3];
                        id v184 = v239[4];
                        id v197 = v239[5];
                        int64_t v199 = v239[6];
                        id v200 = v239[7];
                        id v122 = v239[8];
                        id v123 = v239[10];
                        id v179 = v239[9];
                        id v180 = v239[11];
                        id v181 = v239[12];
                        uint64_t v202 = v239[13];
                        id v210 = v239[36];
                        id v124 = v239[39];
                        int v177 = *(unsigned __int8 *)v175;
                        sub_1B39B0D88(v203, v204);
                        long long v125 = *((_OWORD *)v176 + 9);
                        long long v248 = *((_OWORD *)v176 + 8);
                        long long v249 = v125;
                        long long v250 = *((_OWORD *)v176 + 10);
                        long long v126 = *((_OWORD *)v176 + 5);
                        long long v244 = *((_OWORD *)v176 + 4);
                        long long v245 = v126;
                        long long v127 = *((_OWORD *)v176 + 6);
                        long long v247 = *((_OWORD *)v176 + 7);
                        long long v246 = v127;
                        long long v128 = *((_OWORD *)v176 + 1);
                        long long v240 = *(_OWORD *)v176;
                        long long v241 = v128;
                        long long v129 = *((_OWORD *)v176 + 2);
                        long long v243 = *((_OWORD *)v176 + 3);
                        long long v242 = v129;
                        uint64_t v205 = v251[37];
                        swift_bridgeObjectRelease();
                        v130 = v178;
                        sub_1B3A6FEC0();
                        sub_1B3A6FEA0();
                        uint64_t v49 = v223;
                        BOOL v131 = v130;
                        uint64_t v132 = v227;
                        char v218 = *v223;
                        v218(v131, v227);
                        char v133 = sub_1B3A70450();
                        swift_bridgeObjectRelease();
                        if (v133)
                        {
                          long long v134 = v249;
                          unint64_t v135 = v171;
                          *((_OWORD *)v171 + 8) = v248;
                          v135[9] = v134;
                          v135[10] = v250;
                          long long v136 = v245;
                          v135[4] = v244;
                          v135[5] = v136;
                          long long v137 = v247;
                          v135[6] = v246;
                          v135[7] = v137;
                          long long v138 = v241;
                          *unint64_t v135 = v240;
                          v135[1] = v138;
                          long long v139 = v243;
                          v135[2] = v242;
                          v135[3] = v139;
                          id v140 = v124;
                          id v174 = v124;
                          id v141 = v196;
                          v236[0] = v196;
                          uint64_t v142 = v186;
                          v236[1] = v186;
                          id v143 = v181;
                          v236[2] = v182;
                          v236[3] = v183;
                          v236[4] = v184;
                          v236[5] = v197;
                          v236[6] = v199;
                          v236[7] = v200;
                          v236[8] = v122;
                          uint64_t v203 = (uint64_t)v122;
                          unint64_t v204 = (unint64_t)v123;
                          id v144 = v179;
                          v236[9] = v179;
                          v236[10] = v123;
                          id v145 = v180;
                          v236[11] = v180;
                          v236[12] = v181;
                          v236[13] = v202;
                          v236[36] = v210;
                          v236[37] = v205;
                          LOBYTE(v236[38]) = v195;
                          v236[39] = v140;
                          LOBYTE(v236[40]) = 1;
                          memcpy(v252, v236, 0x141uLL);
                          sub_1B39B373C((uint64_t)v236);
                          uint64_t v146 = v232;
                          char v147 = swift_isUniquelyReferenced_nonNull_native();
                          v237[0] = v146;
                          sub_1B3A33EA8(v252, v147, v235);
                          uint64_t v232 = v237[0];
                          swift_bridgeObjectRelease();
                          sub_1B39B4CD4((uint64_t)v235, (uint64_t)v237, &qword_1E9CD5F38);
                          sub_1B3A39104((uint64_t)v237);
                          v238[0] = v141;
                          v238[1] = v142;
                          v238[2] = v182;
                          v238[3] = v183;
                          v238[4] = v184;
                          v238[5] = v197;
                          v238[6] = v199;
                          v238[7] = v200;
                          v238[8] = v203;
                          v238[9] = v144;
                          v238[10] = v204;
                          v238[11] = v145;
                          v238[12] = v143;
                          v238[13] = v202;
                          long long v148 = v241;
                          uint64_t v149 = v170;
                          *uint64_t v170 = v240;
                          v149[1] = v148;
                          long long v150 = v242;
                          long long v151 = v243;
                          long long v152 = v245;
                          v149[4] = v244;
                          v149[5] = v152;
                          v149[2] = v150;
                          v149[3] = v151;
                          long long v153 = v246;
                          long long v154 = v247;
                          long long v155 = v250;
                          long long v156 = v248;
                          v149[9] = v249;
                          v149[10] = v155;
                          v149[7] = v154;
                          v149[8] = v156;
                          v149[6] = v153;
                          v238[36] = v210;
                          v238[37] = v205;
                          LOBYTE(v238[38]) = v195;
                          int64_t v157 = v169;
                          *uint64_t v169 = *(_DWORD *)v234;
                          *(_DWORD *)((char *)v157 + 3) = *(_DWORD *)&v234[3];
                          v238[39] = v174;
                          LOBYTE(v238[40]) = 1;
                          sub_1B39B0C68((uint64_t)v238);
                          long long v57 = v229;
                          uint64_t v58 = v227;
                        }
                        else
                        {
                          v253[0] = (uint64_t)v196;
                          v253[1] = v186;
                          v253[2] = (uint64_t)v182;
                          v253[3] = (uint64_t)v183;
                          v253[4] = (uint64_t)v184;
                          v253[5] = (uint64_t)v197;
                          v253[6] = (uint64_t)v199;
                          v253[7] = (uint64_t)v200;
                          v253[8] = (uint64_t)v122;
                          v253[9] = (uint64_t)v179;
                          v253[10] = (uint64_t)v123;
                          v253[11] = (uint64_t)v180;
                          v253[12] = (uint64_t)v181;
                          v253[13] = (uint64_t)v202;
                          long long v50 = v249;
                          uint64_t v51 = v173;
                          *((_OWORD *)v173 + 8) = v248;
                          v51[9] = v50;
                          v51[10] = v250;
                          long long v52 = v245;
                          v51[4] = v244;
                          v51[5] = v52;
                          long long v53 = v247;
                          v51[6] = v246;
                          v51[7] = v53;
                          long long v54 = v241;
                          *uint64_t v51 = v240;
                          v51[1] = v54;
                          long long v55 = v243;
                          v51[2] = v242;
                          v51[3] = v55;
                          v254[22] = v210;
                          v254[23] = v205;
                          char v255 = v195;
                          int v56 = v172;
                          *unint64_t v172 = *(_DWORD *)v234;
                          *(_DWORD *)((char *)v56 + 3) = *(_DWORD *)&v234[3];
                          *(void *)&v256[7] = v124;
                          v256[15] = v177;
                          sub_1B39B373C((uint64_t)v253);
                          sub_1B3A2CE84(v237, v253);
                          memcpy(v238, v237, 0x141uLL);
                          sub_1B39B0C68((uint64_t)v238);
                          sub_1B39B0C68((uint64_t)v253);
                          long long v57 = v229;
                          uint64_t v58 = v132;
                        }
                        v218(v57, v58);
                        uint64_t v11 = v219;
                        uint64_t v48 = v220;
                        uint64_t v26 = v230;
                        goto LABEL_25;
                      }
                      unint64_t v104 = v199[v103];
                      if (!v104)
                      {
                        uint64_t v105 = v103 + 1;
                        if (v103 + 1 >= (uint64_t)v200) {
                          goto LABEL_91;
                        }
                        unint64_t v104 = v199[v105];
                        if (!v104)
                        {
                          uint64_t v105 = v103 + 2;
                          if (v103 + 2 >= (uint64_t)v200) {
                            goto LABEL_91;
                          }
                          unint64_t v104 = v199[v105];
                          if (!v104)
                          {
                            uint64_t v105 = v103 + 3;
                            if (v103 + 3 >= (uint64_t)v200) {
                              goto LABEL_91;
                            }
                            unint64_t v104 = v199[v105];
                            if (!v104)
                            {
                              uint64_t v105 = v103 + 4;
                              if (v103 + 4 >= (uint64_t)v200) {
                                goto LABEL_91;
                              }
                              unint64_t v104 = v199[v105];
                              if (!v104)
                              {
                                uint64_t v105 = v103 + 5;
                                if (v103 + 5 >= (uint64_t)v200) {
                                  goto LABEL_91;
                                }
                                unint64_t v104 = v199[v105];
                                if (!v104)
                                {
                                  uint64_t v105 = v103 + 6;
                                  if (v103 + 6 >= (uint64_t)v200) {
                                    goto LABEL_91;
                                  }
                                  unint64_t v104 = v199[v105];
                                  if (!v104)
                                  {
                                    while (1)
                                    {
                                      uint64_t v103 = v105 + 1;
                                      if (__OFADD__(v105, 1)) {
                                        goto LABEL_114;
                                      }
                                      if (v103 >= (uint64_t)v200) {
                                        goto LABEL_91;
                                      }
                                      unint64_t v104 = v199[v103];
                                      ++v105;
                                      if (v104) {
                                        goto LABEL_78;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        uint64_t v103 = v105;
                      }
LABEL_78:
                      unint64_t v98 = (v104 - 1) & v104;
                      id v210 = (id)v103;
                      unint64_t v101 = __clz(__rbit64(v104)) + (v103 << 6);
                    }
                    long long v106 = (uint64_t *)(v202[6] + 16 * v101);
                    uint64_t v108 = *v106;
                    uint64_t v107 = v106[1];
                    swift_bridgeObjectRetain_n();
                    uint64_t v109 = sub_1B3A30E58(v236, v108, v107);
                    v111 = (void *)v110;
                    sub_1B39B4CD4(v110, (uint64_t)v237, &qword_1E9CD5EA8);
                    sub_1B39B4CD4((uint64_t)v237, (uint64_t)v238, &qword_1E9CD5EA8);
                    if (sub_1B3A37570((uint64_t)v238) == 1) {
                      goto LABEL_115;
                    }
                    uint64_t v112 = v111[7];
                    if (v112)
                    {
                      uint64_t v113 = v111[6];
                      swift_bridgeObjectRetain();
                      uint64_t v114 = v112;
                      unint64_t v115 = v231;
                      uint64_t v116 = sub_1B3A02D30(v113, v114);
                      int64_t v231 = v115;
                      if (v115) {
                        goto LABEL_90;
                      }
                      sub_1B3A02FE0(v116, 1);
                      swift_bridgeObjectRelease();
                      uint64_t v117 = v111[9];
                      if (v117)
                      {
                        uint64_t v118 = v111[8];
                        swift_bridgeObjectRetain();
                        uint64_t v119 = v117;
                        unint64_t v120 = v231;
                        uint64_t v121 = sub_1B3A02D30(v118, v119);
                        int64_t v231 = v120;
                        if (v120)
                        {
LABEL_90:
                          swift_bridgeObjectRelease();
                          uint64_t v65 = v231;
LABEL_94:
                          int64_t v231 = 0;
                          ((void (*)(void *, void))v109)(v236, 0);
                          swift_release();
                          swift_bridgeObjectRelease_n();
                          uint64_t v11 = v219;
                          uint64_t v48 = v220;
                          id v60 = v197;
                          goto LABEL_95;
                        }
                        sub_1B3A02FE0(v121, 0);
                        swift_bridgeObjectRelease();
                      }
                    }
                    else if (v111[9])
                    {
                      sub_1B3A066CC();
                      uint64_t v65 = (void *)swift_allocError();
                      uint64_t *v158 = v108;
                      v158[1] = v107;
                      swift_storeEnumTagMultiPayload();
                      swift_willThrow();
                      goto LABEL_94;
                    }
                    swift_bridgeObjectRelease();
                    ((void (*)(void *, void))v109)(v236, 0);
                    swift_bridgeObjectRelease_n();
                  }
                }
                swift_bridgeObjectRelease();
              }
              int64_t v231 = 0;
              id v60 = v197;
            }
            else
            {
              uint64_t v11 = v219;
              if (!v239[20]) {
                goto LABEL_54;
              }
              sub_1B3A066CC();
              uint64_t v65 = (void *)swift_allocError();
              *long long v92 = v196;
              v92[1] = v84;
              swift_storeEnumTagMultiPayload();
              swift_bridgeObjectRetain();
              swift_willThrow();
              int64_t v231 = 0;
            }
            uint64_t v48 = v220;
LABEL_95:
            memcpy(v238, v251, 0x141uLL);
            sub_1B39B0C68((uint64_t)v238);
            swift_release();
            sub_1B39B0D88(v203, v204);
          }
          v239[0] = v65;
          id v69 = v65;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
          if (swift_dynamicCast())
          {

            uint64_t v70 = v221;
            (*v215)(v221, v11, v48);
            uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F30);
            char v72 = v222;
            uint64_t v73 = (char *)v222 + *(int *)(v71 + 48);
            *uint64_t v222 = v60;
            v72[1] = v61;
            (*v214)(v73, v70, v48);
            swift_storeEnumTagMultiPayload();
            v251[0] = 0;
            v251[1] = 0xE000000000000000;
            sub_1B3A709B0();
            swift_bridgeObjectRelease();
            v251[0] = 0x203A726F727265;
            v251[1] = 0xE700000000000000;
            sub_1B3A6FF20();
            sub_1B3A703A0();
            swift_bridgeObjectRelease();
            sub_1B3A703A0();
            sub_1B3A39044((uint64_t)v72, v216);
            sub_1B3A70300();
            sub_1B3A703A0();
            swift_bridgeObjectRelease();
            uint64_t v74 = v251[0];
            uint64_t v75 = v251[1];
            uint64_t v26 = v230;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v26 = sub_1B3A1617C(0, *((void *)v26 + 2) + 1, 1, v26);
            }
            unint64_t v77 = *((void *)v26 + 2);
            unint64_t v76 = *((void *)v26 + 3);
            if (v77 >= v76 >> 1) {
              uint64_t v26 = sub_1B3A1617C((char *)(v76 > 1), v77 + 1, 1, v26);
            }
            *((void *)v26 + 2) = v77 + 1;
            long long v78 = &v26[16 * v77];
            *((void *)v78 + 4) = v74;
            *((void *)v78 + 5) = v75;
            sub_1B3A390A8((uint64_t)v222);
            (*v213)(v221, v48);
            uint64_t v49 = v223;
            (*v223)(v229, v227);
          }
          else
          {
            swift_bridgeObjectRelease();

            v251[0] = 0;
            v251[1] = 0xE000000000000000;
            sub_1B3A709B0();
            swift_bridgeObjectRelease();
            v251[0] = 0x203A726F727265;
            v251[1] = 0xE700000000000000;
            sub_1B3A6FF20();
            sub_1B3A703A0();
            swift_bridgeObjectRelease();
            sub_1B3A703A0();
            uint64_t v79 = v251[0];
            uint64_t v80 = v251[1];
            uint64_t v26 = v230;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v26 = sub_1B3A1617C(0, *((void *)v26 + 2) + 1, 1, v26);
            }
            unint64_t v82 = *((void *)v26 + 2);
            unint64_t v81 = *((void *)v26 + 3);
            if (v82 >= v81 >> 1) {
              uint64_t v26 = sub_1B3A1617C((char *)(v81 > 1), v82 + 1, 1, v26);
            }
            *((void *)v26 + 2) = v82 + 1;
            long long v83 = &v26[16 * v82];
            *((void *)v83 + 4) = v79;
            *((void *)v83 + 5) = v80;

            uint64_t v49 = v223;
            (*v223)(v229, v227);
            uint64_t v48 = v220;
          }
LABEL_25:
          uint64_t v40 = v224;
          if (++v47 == v226)
          {
            swift_release();
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
      }
      swift_release();
      uint64_t v26 = v230;
      uint64_t v49 = v223;
LABEL_4:
      unint64_t v25 = v198 + 1;
      sub_1B3A25C98(v232);
      uint64_t v27 = v227;
      (*v49)(v228, v227);
      int v23 = v187;
    }
    while (v25 != v193);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v159 = swift_bridgeObjectRetain();
  uint64_t v160 = sub_1B3A32300(v159);
  swift_bridgeObjectRelease();
  v251[0] = v160;
  swift_retain();
  BOOL v161 = v231;
  sub_1B3A33238(v251, (uint64_t (*)(uint64_t))sub_1B3A34CC8, sub_1B3A332BC);
  if (v161)
  {
    id result = (id)swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    uint64_t v162 = v251[0];
    v239[0] = (id)v251[0];
    uint64_t v163 = *(void *)(v251[0] + 16);
    if (v163)
    {
      char v230 = v26;
      unint64_t v164 = 0;
      uint64_t v165 = (void *)(v251[0] + 40);
      while (1)
      {
        BOOL v166 = *(v165 - 1) == 0x746C7561666564 && *v165 == 0xE700000000000000;
        if (v166 || (sub_1B3A70D20() & 1) != 0) {
          break;
        }
        v165 += 41;
        if (v163 == ++v164) {
          goto LABEL_109;
        }
      }
      swift_bridgeObjectRelease();
      sub_1B3A2BFA8(v164, v251);
      sub_1B3A33D64(0, 0, v251);
      return v239[0];
    }
    else
    {
LABEL_109:
      swift_bridgeObjectRelease();
    }
    return (id)v162;
  }
  return result;
}

uint64_t sub_1B3A2BFA8@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B3A304C8(v5);
    uint64_t v5 = result;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = v5 + 328 * a1;
    memcpy(a2, (const void *)(v9 + 32), 0x141uLL);
    uint64_t result = (uint64_t)memmove((void *)(v9 + 32), (const void *)(v9 + 360), 328 * (v8 - a1));
    *(void *)(v5 + 16) = v8;
    *uint64_t v2 = v5;
  }
  return result;
}

uint64_t ktrace_list_plans(_:_:_:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __dst[47] = nullsub_1(a1);
  __dst[46] = nullsub_1(a2);
  uint64_t v6 = sub_1B3A2A8E0((a3 & 2) != 0, (a3 >> 2) & 1);
  uint64_t v7 = v5;
  uint64_t v8 = v6[2];
  if (!v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v7 + 16);
    if (!v16) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  uint64_t v23 = v5;
  uint64_t v9 = v8 - 1;
  uint64_t v10 = 4;
  uint64_t v11 = MEMORY[0x1E4FBB1A0];
  while (1)
  {
    memcpy(__dst, &v6[v10], 0x141uLL);
    sub_1B39B373C((uint64_t)__dst);
    if (v10 != 4) {
      sub_1B3A70DE0();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A18);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1B3A73390;
    memcpy(v24, __dst, 0x141uLL);
    if (a3)
    {
      uint64_t v14 = sub_1B3A28A10();
    }
    else
    {
      sub_1B3A2877C(538976288, 0xE400000000000000);
      v24[0] = __dst[0];
      v24[1] = __dst[1];
      swift_bridgeObjectRetain();
      sub_1B3A703A0();
      swift_bridgeObjectRetain();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      v24[3] = v11;
      uint64_t v13 = (unsigned __int8 *)sub_1B39B5D68();
      sub_1B39B5680((uint64_t)v24, *v13);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      uint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
    }
    *(void *)(v12 + 56) = v11;
    *(void *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v15;
    sub_1B39B16DC();
    sub_1B3A70DD0();
    sub_1B39B0C68((uint64_t)__dst);
    swift_bridgeObjectRelease();
    if (!v9) {
      break;
    }
    v10 += 41;
    --v9;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = v23;
  uint64_t v16 = *(void *)(v23 + 16);
  if (v16)
  {
LABEL_11:
    uint64_t v17 = (uint64_t *)(v7 + 40);
    uint64_t v18 = MEMORY[0x1E4FBB1A0];
    do
    {
      uint64_t v20 = *(v17 - 1);
      uint64_t v19 = *v17;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A18);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1B3A73390;
      *(void *)(v21 + 56) = v18;
      *(void *)(v21 + 32) = v20;
      *(void *)(v21 + 40) = v19;
      sub_1B39B16DC();
      swift_bridgeObjectRetain();
      sub_1B3A70DD0();
      swift_bridgeObjectRelease();
      v17 += 2;
      --v16;
    }
    while (v16);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

char *sub_1B3A2C464(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B3A2C4A4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B3A2C484(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B3A2C5A0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B3A2C4A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD60E8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1B3A2C5A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FE0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1B3A2C6A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FB0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 328);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[328 * v8]) {
      memmove(v12, v13, 328 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1B3A2C7C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1B3A70E00();
  swift_bridgeObjectRetain();
  sub_1B3A70360();
  uint64_t v8 = sub_1B3A70E50();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1B3A70D20() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1B3A70D20() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1B3A2DB10(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1B3A2C970(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  sub_1B3A70E00();
  sub_1B39A7FD0(a2);
  swift_bridgeObjectRetain();
  sub_1B3A70360();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1B3A70E50();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1B3A2DCAC(a2, v7, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v20;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_41;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xEF6B636174735F6CLL;
    unint64_t v10 = 0x6C61635F72657375;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v10 = 0xD000000000000011;
        uint64_t v11 = "lLoss";
        goto LABEL_14;
      case 2:
        unint64_t v10 = 0x695F646165726874;
        unint64_t v9 = 0xEB000000006F666ELL;
        break;
      case 3:
        unint64_t v10 = 0x735F646165726874;
        unint64_t v9 = 0xEF746F687370616ELL;
        break;
      case 4:
        unint64_t v10 = 0xD000000000000014;
        uint64_t v11 = "k";
        goto LABEL_14;
      case 5:
        unint64_t v10 = 0xD00000000000001ALL;
        uint64_t v11 = "thread_dispatch_info";
        goto LABEL_14;
      case 6:
        unint64_t v10 = 0x666E695F6B736174;
        unint64_t v9 = 0xE90000000000006FLL;
        break;
      case 7:
        unint64_t v10 = 0x616E735F6B736174;
        unint64_t v9 = 0xED0000746F687370;
        break;
      case 8:
        unint64_t v9 = 0x80000001B3A7AD40;
        unint64_t v10 = 0xD000000000000010;
        break;
      case 9:
        unint64_t v10 = 0x6D5F6D6574737973;
        unint64_t v9 = 0xED000079726F6D65;
        break;
      case 0xA:
        unint64_t v10 = 0xD000000000000012;
        uint64_t v11 = "task_memory_info";
LABEL_14:
        unint64_t v9 = (unint64_t)v11 | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v12 = 0x6C61635F72657375;
    unint64_t v13 = 0xEF6B636174735F6CLL;
    switch((char)a2)
    {
      case 1:
        unint64_t v14 = 0xD000000000000011;
        uint64_t v15 = "lLoss";
        goto LABEL_33;
      case 2:
        unint64_t v13 = 0xEB000000006F666ELL;
        if (v10 != 0x695F646165726874) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 3:
        unint64_t v13 = 0xEF746F687370616ELL;
        if (v10 != 0x735F646165726874) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 4:
        unint64_t v14 = 0xD000000000000014;
        uint64_t v15 = "k";
        goto LABEL_33;
      case 5:
        unint64_t v14 = 0xD00000000000001ALL;
        uint64_t v15 = "thread_dispatch_info";
        goto LABEL_33;
      case 6:
        unint64_t v13 = 0xE90000000000006FLL;
        if (v10 != 0x666E695F6B736174) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 7:
        unint64_t v13 = 0xED0000746F687370;
        if (v10 != 0x616E735F6B736174) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 8:
        unint64_t v13 = 0x80000001B3A7AD40;
        if (v10 != 0xD000000000000010) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 9:
        uint64_t v12 = 0x6D5F6D6574737973;
        unint64_t v13 = 0xED000079726F6D65;
        goto LABEL_30;
      case 10:
        unint64_t v14 = 0xD000000000000012;
        uint64_t v15 = "task_memory_info";
LABEL_33:
        unint64_t v13 = (unint64_t)v15 | 0x8000000000000000;
        if (v10 == v14) {
          goto LABEL_34;
        }
        goto LABEL_35;
      default:
LABEL_30:
        if (v10 != v12) {
          goto LABEL_35;
        }
LABEL_34:
        if (v9 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_40;
        }
LABEL_35:
        char v16 = sub_1B3A70D20();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_37;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_40:
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_41:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t sub_1B3A2CE84(void *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1B3A70E00();
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B3A70360();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1B3A70E50();
  uint64_t v9 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v5 + 48);
    uint64_t v12 = 328 * v10;
    unint64_t v13 = (void *)(v11 + 328 * v10);
    BOOL v14 = *v13 == v6 && v13[1] == v7;
    if (v14 || (sub_1B3A70D20() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      sub_1B39B0C68((uint64_t)a2);
      uint64_t v15 = (const void *)(*(void *)(*v2 + 48) + v12);
      memcpy(__dst, (const void *)(*(void *)(*v3 + 48) + v12), 0x141uLL);
      memcpy(a1, v15, 0x141uLL);
      sub_1B39B373C((uint64_t)__dst);
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v12 = 328 * v10;
      uint64_t v18 = (void *)(v11 + 328 * v10);
      BOOL v19 = *v18 == v6 && v18[1] == v7;
      if (v19 || (sub_1B3A70D20() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __dst[0] = *v2;
  *uint64_t v2 = 0x8000000000000000;
  sub_1B39B373C((uint64_t)a2);
  sub_1B3A2E18C(a2, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = __dst[0];
  swift_bridgeObjectRelease();
  memcpy(a1, a2, 0x141uLL);
  return 1;
}

uint64_t sub_1B3A2D07C()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FC0);
  uint64_t v3 = sub_1B3A70980();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_1B3A70E00();
      sub_1B3A70360();
      uint64_t result = sub_1B3A70E50();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1B3A2D35C()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6088);
  uint64_t v3 = sub_1B3A70980();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_37;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_38;
    }
    if (v15 >= v9) {
      break;
    }
    unint64_t v16 = v6[v15];
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v9) {
        break;
      }
      unint64_t v16 = v6[v11];
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v9) {
          break;
        }
        unint64_t v16 = v6[v11];
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v9) {
            break;
          }
          unint64_t v16 = v6[v17];
          if (!v16)
          {
            while (1)
            {
              int64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v11 >= v9) {
                goto LABEL_33;
              }
              unint64_t v16 = v6[v11];
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          int64_t v11 = v17;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    sub_1B3A70E00();
    sub_1B3A70360();
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_1B3A70E50();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1B3A2D7B8);
      }
      BOOL v25 = v22 == v24;
      if (v22 == v24) {
        unint64_t v22 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v10 + 8 * v22);
    }
    while (v26 == -1);
    unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  swift_release();
  unint64_t v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1B3A2D7E4()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FA8);
  uint64_t v3 = sub_1B3A70980();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v29 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v29) {
          goto LABEL_33;
        }
        unint64_t v16 = v30[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v16 = v30[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v29) {
              goto LABEL_33;
            }
            unint64_t v16 = v30[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v29)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v30[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v29) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v30[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      char v18 = (uint64_t *)(*(void *)(v2 + 48) + 328 * v14);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      memcpy(__src, v18 + 2, sizeof(__src));
      sub_1B3A70E00();
      swift_bridgeObjectRetain();
      sub_1B3A70360();
      swift_bridgeObjectRelease();
      uint64_t result = sub_1B3A70E50();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v8 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (void *)(*(void *)(v4 + 48) + 328 * v11);
      *unint64_t v12 = v19;
      v12[1] = v20;
      uint64_t result = (uint64_t)memcpy(v12 + 2, __src, 0x131uLL);
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1B3A2DB10(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1B3A2D07C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1B3A2E370();
      goto LABEL_22;
    }
    sub_1B3A2E898();
  }
  uint64_t v11 = *v4;
  sub_1B3A70E00();
  sub_1B3A70360();
  uint64_t result = sub_1B3A70E50();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_1B3A70D20(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_1B3A70D60();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        char v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_1B3A70D20();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1B3A2DCAC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unsigned __int8 v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  char v27 = result;
  if (v8 <= v7 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1B3A2D35C();
    }
    else
    {
      if (v8 > v7)
      {
        uint64_t result = (uint64_t)sub_1B3A2E524();
        goto LABEL_44;
      }
      sub_1B3A2EB48();
    }
    uint64_t v9 = *v3;
    sub_1B3A70E00();
    sub_1B39A7FD0(v6);
    sub_1B3A70360();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B3A70E50();
    uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
    a2 = result & ~v10;
    if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v11 = ~v10;
      uint64_t v12 = v6;
      while (2)
      {
        unint64_t v13 = 0xEF6B636174735F6CLL;
        unint64_t v14 = 0x6C61635F72657375;
        switch(*(unsigned char *)(*(void *)(v9 + 48) + a2))
        {
          case 1:
            unint64_t v14 = 0xD000000000000011;
            int64_t v15 = "lLoss";
            goto LABEL_21;
          case 2:
            unint64_t v14 = 0x695F646165726874;
            unint64_t v13 = 0xEB000000006F666ELL;
            break;
          case 3:
            unint64_t v14 = 0x735F646165726874;
            unint64_t v13 = 0xEF746F687370616ELL;
            break;
          case 4:
            unint64_t v14 = 0xD000000000000014;
            int64_t v15 = "k";
            goto LABEL_21;
          case 5:
            unint64_t v14 = 0xD00000000000001ALL;
            int64_t v15 = "thread_dispatch_info";
            goto LABEL_21;
          case 6:
            unint64_t v14 = 0x666E695F6B736174;
            unint64_t v13 = 0xE90000000000006FLL;
            break;
          case 7:
            unint64_t v14 = 0x616E735F6B736174;
            unint64_t v13 = 0xED0000746F687370;
            break;
          case 8:
            unint64_t v13 = 0x80000001B3A7AD40;
            unint64_t v14 = 0xD000000000000010;
            break;
          case 9:
            unint64_t v14 = 0x6D5F6D6574737973;
            unint64_t v13 = 0xED000079726F6D65;
            break;
          case 0xA:
            unint64_t v14 = 0xD000000000000012;
            int64_t v15 = "task_memory_info";
LABEL_21:
            unint64_t v13 = (unint64_t)v15 | 0x8000000000000000;
            break;
          default:
            break;
        }
        unint64_t v16 = 0x6C61635F72657375;
        unint64_t v17 = 0xEF6B636174735F6CLL;
        switch(v12)
        {
          case 1:
            unint64_t v18 = 0xD000000000000011;
            uint64_t v19 = "lLoss";
            goto LABEL_40;
          case 2:
            unint64_t v17 = 0xEB000000006F666ELL;
            if (v14 != 0x695F646165726874) {
              goto LABEL_42;
            }
            goto LABEL_41;
          case 3:
            unint64_t v17 = 0xEF746F687370616ELL;
            if (v14 != 0x735F646165726874) {
              goto LABEL_42;
            }
            goto LABEL_41;
          case 4:
            unint64_t v18 = 0xD000000000000014;
            uint64_t v19 = "k";
            goto LABEL_40;
          case 5:
            unint64_t v18 = 0xD00000000000001ALL;
            uint64_t v19 = "thread_dispatch_info";
            goto LABEL_40;
          case 6:
            unint64_t v17 = 0xE90000000000006FLL;
            if (v14 != 0x666E695F6B736174) {
              goto LABEL_42;
            }
            goto LABEL_41;
          case 7:
            uint64_t v20 = 0x616E735F6B736174;
            uint64_t v21 = 0x746F687370;
            goto LABEL_31;
          case 8:
            unint64_t v17 = 0x80000001B3A7AD40;
            unint64_t v16 = 0xD000000000000010;
            goto LABEL_37;
          case 9:
            uint64_t v20 = 0x6D5F6D6574737973;
            uint64_t v21 = 0x79726F6D65;
LABEL_31:
            unint64_t v17 = v21 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            if (v14 != v20) {
              goto LABEL_42;
            }
            goto LABEL_41;
          case 10:
            unint64_t v18 = 0xD000000000000012;
            uint64_t v19 = "task_memory_info";
LABEL_40:
            unint64_t v17 = (unint64_t)v19 | 0x8000000000000000;
            if (v14 == v18) {
              goto LABEL_41;
            }
            goto LABEL_42;
          default:
LABEL_37:
            if (v14 != v16) {
              goto LABEL_42;
            }
LABEL_41:
            if (v13 == v17) {
              goto LABEL_47;
            }
LABEL_42:
            char v22 = sub_1B3A70D20();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v22) {
              goto LABEL_48;
            }
            a2 = (a2 + 1) & v11;
            if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_44:
  uint64_t v23 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v23 + 48) + a2) = v27;
  uint64_t v24 = *(void *)(v23 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
LABEL_47:
    swift_bridgeObjectRelease_n();
LABEL_48:
    sub_1B3A70D60();
    __break(1u);
    JUMPOUT(0x1B3A2E134);
  }
  *(void *)(v23 + 16) = v26;
  return result;
}

uint64_t sub_1B3A2E18C(uint64_t *__src, unint64_t i, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_21;
  }
  if (a3)
  {
    sub_1B3A2D7E4();
  }
  else
  {
    if (v8 > v7)
    {
      sub_1B3A2E6B8();
      goto LABEL_21;
    }
    sub_1B3A2EF9C();
  }
  uint64_t v9 = *v3;
  sub_1B3A70E00();
  uint64_t v10 = *__src;
  uint64_t v11 = __src[1];
  swift_bridgeObjectRetain();
  sub_1B3A70360();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_1B3A70E50();
  uint64_t v13 = -1 << *(unsigned char *)(v9 + 32);
  id i = v12 & ~v13;
  uint64_t v14 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v15 = *(void *)(v9 + 48);
    unint64_t v16 = (void *)(v15 + 328 * i);
    BOOL v17 = *v16 == v10 && v16[1] == v11;
    if (v17 || (sub_1B3A70D20() & 1) != 0) {
      goto LABEL_24;
    }
    uint64_t v18 = ~v13;
    for (id i = (i + 1) & v18; ((*(void *)(v14 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; id i = (i + 1) & v18)
    {
      uint64_t v19 = (void *)(v15 + 328 * i);
      BOOL v20 = *v19 == v10 && v19[1] == v11;
      if (v20 || (sub_1B3A70D20() & 1) != 0) {
        goto LABEL_24;
      }
    }
  }
LABEL_21:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (i >> 6) + 56) |= 1 << i;
  uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v21 + 48) + 328 * i), __src, 0x141uLL);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_24:
  uint64_t result = sub_1B3A70D60();
  __break(1u);
  return result;
}

void *sub_1B3A2E370()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FC0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70970();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1B3A2E524()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6088);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70970();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1B3A2E6B8()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FA8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70970();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 328 * v15;
    unint64_t v17 = (const void *)(*(void *)(v2 + 48) + 328 * v15);
    memcpy(v21, v17, 0x141uLL);
    memmove((void *)(*(void *)(v4 + 48) + v16), v17, 0x141uLL);
    uint64_t result = (void *)sub_1B39B373C((uint64_t)v21);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1B3A2E898()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FC0);
  uint64_t v3 = sub_1B3A70980();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_1B3A70E00();
    swift_bridgeObjectRetain();
    sub_1B3A70360();
    uint64_t result = sub_1B3A70E50();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1B3A2EB48()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6088);
  uint64_t v3 = sub_1B3A70980();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_35;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v15 >= v9) {
      break;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v9) {
        break;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v9) {
          break;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v9) {
            break;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              int64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_37;
              }
              if (v11 >= v9) {
                goto LABEL_33;
              }
              unint64_t v16 = *(void *)(v6 + 8 * v11);
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          int64_t v11 = v17;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    sub_1B3A70E00();
    sub_1B3A70360();
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_1B3A70E50();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x1B3A2EF70);
      }
      BOOL v25 = v22 == v24;
      if (v22 == v24) {
        unint64_t v22 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v10 + 8 * v22);
    }
    while (v26 == -1);
    unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  uint64_t result = swift_release_n();
  unint64_t v1 = v0;
LABEL_35:
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1B3A2EF9C()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FA8);
  uint64_t v2 = sub_1B3A70980();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v5 = v1 + 56;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v1 + 56);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v8 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v24) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v24) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v24) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    memcpy(__src, (const void *)(*(void *)(v1 + 48) + 328 * v13), 0x141uLL);
    sub_1B3A70E00();
    sub_1B39B373C((uint64_t)__src);
    swift_bridgeObjectRetain();
    sub_1B3A70360();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B3A70E50();
    uint64_t v17 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)(v8 + 8 * v19);
      }
      while (v23 == -1);
      unint64_t v11 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v3 + 48) + 328 * v11), __src, 0x141uLL);
    ++*(void *)(v3 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v24)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1B3A2F274(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(uint64_t *__return_ptr, id *, void *))
{
  uint64_t v6 = v5;
  uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = -v8;
  v51[4] = a1;
  v51[5] = a1 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  v51[6] = v9;
  v51[7] = 0;
  v51[8] = v12 & v10;
  v51[9] = a2;
  v51[10] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v13 = sub_1B3A34B24();
  if (!v14)
  {
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B3A21B4C();
    swift_release();
    return;
  }
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  uint64_t v20 = v16;
  while (1)
  {
    v51[2] = v17;
    v51[3] = v18;
    v51[0] = v19;
    v51[1] = v20;
    uint64_t v30 = *(void **)v6;
    unint64_t v32 = sub_1B3A0C82C(v17, v18);
    uint64_t v33 = v30[2];
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      sub_1B3A70D70();
      __break(1u);
      goto LABEL_27;
    }
    char v36 = v31;
    if (v30[3] < v35) {
      break;
    }
    if (a4)
    {
      if (v31) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_1B3A2FEA4();
      if (v36) {
        goto LABEL_16;
      }
    }
LABEL_6:
    unint64_t v21 = *(void **)v6;
    *(void *)(*(void *)v6 + 8 * (v32 >> 6) + 64) |= 1 << v32;
    BOOL v22 = (uint64_t *)(v21[6] + 16 * v32);
    *BOOL v22 = v17;
    v22[1] = v18;
    uint64_t v23 = (void *)(v21[7] + 16 * v32);
    *uint64_t v23 = v19;
    v23[1] = v20;
    uint64_t v24 = v21[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_25;
    }
    v21[2] = v26;
LABEL_8:
    uint64_t v17 = sub_1B3A34B24();
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    uint64_t v20 = v29;
    a4 = 1;
    if (!v27) {
      goto LABEL_20;
    }
  }
  sub_1B3A2F62C(v35, a4 & 1);
  unint64_t v37 = sub_1B3A0C82C(v17, v18);
  if ((v36 & 1) != (v38 & 1)) {
    goto LABEL_26;
  }
  unint64_t v32 = v37;
  if ((v36 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_16:
  uint64_t v39 = *(void **)v6;
  uint64_t v40 = *(void *)(*(void *)v6 + 56) + 16 * v32;
  uint64_t v41 = *(void **)(v40 + 8);
  v48[0] = *(id *)v40;
  v48[1] = v41;
  swift_bridgeObjectRetain();
  uint64_t v42 = v52;
  a5(&v49, v48, v51);
  if (!v42)
  {
    long long v52 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v43 = (void *)(v39[7] + 16 * v32);
    uint64_t v44 = v49;
    unint64_t v45 = v50;
    swift_bridgeObjectRelease();
    *unint64_t v43 = v44;
    v43[1] = v45;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  v48[0] = v42;
  id v46 = v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B3A21B4C();
    swift_release();

    return;
  }
LABEL_27:
  uint64_t v49 = 0;
  unint64_t v50 = 0xE000000000000000;
  sub_1B3A709B0();
  sub_1B3A703A0();
  sub_1B3A70A80();
  sub_1B3A703A0();
  sub_1B3A70B00();
  __break(1u);
}

uint64_t sub_1B3A2F62C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FD8);
  char v42 = a2;
  uint64_t v6 = sub_1B3A70B30();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B3A70E00();
    sub_1B3A70360();
    uint64_t result = sub_1B3A70E50();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1B3A2F954(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FE8);
  char v53 = a2;
  uint64_t v6 = sub_1B3A70B30();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v51 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v49 = v2;
  int64_t v50 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      if (v53) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v26 >= v50) {
      break;
    }
    char v27 = v51;
    unint64_t v28 = v51[v26];
    ++v13;
    if (!v28)
    {
      int64_t v13 = v26 + 1;
      if (v26 + 1 >= v50) {
        goto LABEL_33;
      }
      unint64_t v28 = v51[v13];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v50)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v49;
          if ((v53 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v28 = v51[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v13 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v50) {
              goto LABEL_33;
            }
            unint64_t v28 = v51[v13];
            ++v29;
            if (v28) {
              goto LABEL_22;
            }
          }
        }
        int64_t v13 = v29;
      }
    }
LABEL_22:
    unint64_t v10 = (v28 - 1) & v28;
    unint64_t v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if (v53)
    {
LABEL_10:
      uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = *(void *)(v5 + 56) + 200 * v18;
      long long v72 = *(_OWORD *)v22;
      uint64_t v54 = *(void *)(v22 + 32);
      char v23 = *(unsigned char *)(v22 + 40);
      uint64_t v58 = *(void *)(v22 + 48);
      uint64_t v59 = *(void *)(v22 + 16);
      uint64_t v55 = *(void *)(v22 + 56);
      uint64_t v56 = *(void *)(v22 + 72);
      uint64_t v57 = *(void *)(v22 + 24);
      char v60 = *(unsigned char *)(v22 + 80);
      uint64_t v61 = *(void *)(v22 + 64);
      uint64_t v62 = *(void *)(v22 + 88);
      uint64_t v63 = *(void *)(v22 + 112);
      uint64_t v64 = *(void *)(v22 + 96);
      uint64_t v65 = *(void *)(v22 + 120);
      uint64_t v66 = *(void *)(v22 + 104);
      long long v67 = *(_OWORD *)(v22 + 128);
      char v24 = *(unsigned char *)(v22 + 144);
      char v25 = *(unsigned char *)(v22 + 168);
      long long v70 = *(_OWORD *)(v22 + 176);
      uint64_t v71 = *(void *)(v22 + 152);
      uint64_t v68 = *(void *)(v22 + 160);
      uint64_t v69 = *(void *)(v22 + 192);
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    uint64_t v20 = *v30;
    uint64_t v21 = v30[1];
    uint64_t v31 = *(void *)(v5 + 56) + 200 * v18;
    long long v73 = *(_OWORD *)v31;
    long long v32 = *(_OWORD *)(v31 + 64);
    long long v34 = *(_OWORD *)(v31 + 16);
    long long v33 = *(_OWORD *)(v31 + 32);
    long long v76 = *(_OWORD *)(v31 + 48);
    long long v77 = v32;
    long long v74 = v34;
    long long v75 = v33;
    long long v35 = *(_OWORD *)(v31 + 128);
    long long v37 = *(_OWORD *)(v31 + 80);
    long long v36 = *(_OWORD *)(v31 + 96);
    long long v80 = *(_OWORD *)(v31 + 112);
    long long v81 = v35;
    long long v78 = v37;
    long long v79 = v36;
    long long v39 = *(_OWORD *)(v31 + 160);
    long long v38 = *(_OWORD *)(v31 + 176);
    long long v40 = *(_OWORD *)(v31 + 144);
    uint64_t v85 = *(void *)(v31 + 192);
    long long v83 = v39;
    long long v84 = v38;
    long long v82 = v40;
    long long v72 = v73;
    uint64_t v69 = v85;
    long long v70 = v38;
    uint64_t v71 = *((void *)&v40 + 1);
    char v25 = BYTE8(v39);
    uint64_t v68 = v39;
    char v24 = v40;
    uint64_t v66 = *((void *)&v79 + 1);
    long long v67 = v81;
    uint64_t v64 = v79;
    uint64_t v65 = *((void *)&v80 + 1);
    uint64_t v62 = *((void *)&v37 + 1);
    uint64_t v63 = v80;
    char v60 = v37;
    uint64_t v61 = v77;
    uint64_t v55 = *((void *)&v76 + 1);
    uint64_t v56 = *((void *)&v77 + 1);
    uint64_t v58 = v76;
    uint64_t v57 = *((void *)&v74 + 1);
    uint64_t v59 = v74;
    uint64_t v54 = v75;
    char v23 = BYTE8(v75);
    swift_bridgeObjectRetain();
    sub_1B3A38924((uint64_t)&v73);
LABEL_24:
    sub_1B3A70E00();
    sub_1B3A70360();
    uint64_t result = sub_1B3A70E50();
    uint64_t v41 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v42 = result & ~v41;
    unint64_t v43 = v42 >> 6;
    if (((-1 << v42) & ~*(void *)(v11 + 8 * (v42 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v42) & ~*(void *)(v11 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v44 = 0;
      unint64_t v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v46 = v43 == v45;
        if (v43 == v45) {
          unint64_t v43 = 0;
        }
        v44 |= v46;
        uint64_t v47 = *(void *)(v11 + 8 * v43);
      }
      while (v47 == -1);
      unint64_t v14 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    LOBYTE(v73) = v23;
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    void *v15 = v20;
    v15[1] = v21;
    uint64_t v16 = *(void *)(v7 + 56) + 200 * v14;
    *(_OWORD *)uint64_t v16 = v72;
    *(void *)(v16 + 16) = v59;
    *(void *)(v16 + 24) = v57;
    *(void *)(v16 + 32) = v54;
    *(unsigned char *)(v16 + 40) = v23;
    *(void *)(v16 + 48) = v58;
    *(void *)(v16 + 56) = v55;
    *(void *)(v16 + 64) = v61;
    *(void *)(v16 + 72) = v56;
    *(unsigned char *)(v16 + 80) = v60;
    *(void *)(v16 + 88) = v62;
    *(void *)(v16 + 96) = v64;
    *(void *)(v16 + 104) = v66;
    *(void *)(v16 + 112) = v63;
    *(void *)(v16 + 120) = v65;
    *(_OWORD *)(v16 + 128) = v67;
    *(unsigned char *)(v16 + 144) = v24;
    *(void *)(v16 + 152) = v71;
    *(void *)(v16 + 160) = v68;
    *(_OWORD *)(v16 + 176) = v70;
    *(void *)(v16 + 192) = v69;
    *(unsigned char *)(v16 + 168) = v25;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v49;
  char v27 = v51;
  if ((v53 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v48 = 1 << *(unsigned char *)(v5 + 32);
  if (v48 >= 64) {
    bzero(v27, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v27 = -1 << v48;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_1B3A2FEA4()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FD8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70B20();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    char v23 = (void *)(*(void *)(v4 + 48) + v16);
    *char v23 = v19;
    v23[1] = v18;
    char v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B3A30060()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FE8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70B20();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v42 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v42 >= v13) {
      goto LABEL_26;
    }
    unint64_t v43 = *(void *)(v6 + 8 * v42);
    ++v9;
    if (!v43)
    {
      int64_t v9 = v42 + 1;
      if (v42 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v43 = *(void *)(v6 + 8 * v9);
      if (!v43) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v43 - 1) & v43;
    unint64_t v15 = __clz(__rbit64(v43)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 200 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    long long v23 = *(_OWORD *)(v21 + 16);
    long long v22 = *(_OWORD *)(v21 + 32);
    long long v24 = *(_OWORD *)(v21 + 64);
    long long v48 = *(_OWORD *)(v21 + 48);
    long long v49 = v24;
    long long v25 = *(_OWORD *)(v21 + 128);
    long long v27 = *(_OWORD *)(v21 + 80);
    long long v26 = *(_OWORD *)(v21 + 96);
    long long v52 = *(_OWORD *)(v21 + 112);
    long long v53 = v25;
    long long v50 = v27;
    long long v51 = v26;
    long long v29 = *(_OWORD *)(v21 + 160);
    long long v28 = *(_OWORD *)(v21 + 176);
    long long v30 = *(_OWORD *)(v21 + 144);
    uint64_t v57 = *(void *)(v21 + 192);
    long long v55 = v29;
    long long v56 = v28;
    long long v54 = v30;
    long long v45 = *(_OWORD *)v21;
    long long v46 = v23;
    long long v47 = v22;
    uint64_t v31 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v31 = v19;
    v31[1] = v18;
    uint64_t v32 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)uint64_t v32 = v45;
    long long v33 = v46;
    long long v34 = v47;
    long long v35 = v49;
    *(_OWORD *)(v32 + 48) = v48;
    *(_OWORD *)(v32 + 64) = v35;
    *(_OWORD *)(v32 + 16) = v33;
    *(_OWORD *)(v32 + 32) = v34;
    long long v36 = v50;
    long long v37 = v51;
    long long v38 = v53;
    *(_OWORD *)(v32 + 112) = v52;
    *(_OWORD *)(v32 + 128) = v38;
    *(_OWORD *)(v32 + 80) = v36;
    *(_OWORD *)(v32 + 96) = v37;
    long long v39 = v54;
    long long v40 = v55;
    long long v41 = v56;
    *(void *)(v32 + 192) = v57;
    *(_OWORD *)(v32 + 160) = v40;
    *(_OWORD *)(v32 + 176) = v41;
    *(_OWORD *)(v32 + 144) = v39;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_1B3A38924((uint64_t)&v45);
  }
  int64_t v44 = v42 + 2;
  if (v44 >= v13) {
    goto LABEL_26;
  }
  unint64_t v43 = *(void *)(v6 + 8 * v44);
  if (v43)
  {
    int64_t v9 = v44;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v43 = *(void *)(v6 + 8 * v9);
    ++v44;
    if (v43) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B3A302AC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FF0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70B20();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1B3A30464(uint64_t a1)
{
  return sub_1B3A304DC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B3A30478(uint64_t a1)
{
  return sub_1B3A305F8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B3A3048C(uint64_t a1)
{
  return sub_1B3A306FC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B3A304A0(uint64_t a1)
{
  return sub_1B3A30800(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B3A304B4(void *a1)
{
  return sub_1B3A30A3C(0, a1[2], 0, a1);
}

char *sub_1B3A304C8(uint64_t a1)
{
  return sub_1B3A30D3C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B3A304DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5DF0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A305F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6078);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A306FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FE0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A30800(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6070);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B3A308FC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FF8);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 216);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[27 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 216 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6000);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B3A30A3C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FC8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FD0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1B3A30B60(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    int64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FB8);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F28) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  int64_t v13 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F28) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_1B3A30D3C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FB0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 328);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[328 * v8]) {
      memmove(v12, v13, 328 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void (*sub_1B3A30E58(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_1B3A31168(v6);
  v6[10] = sub_1B3A30F78(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1B3A30F04;
}

void sub_1B3A30F04(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_1B3A30F78(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t *a1)
{
  char v5 = v4;
  uint64_t v10 = malloc(0x1B8uLL);
  *a1 = v10;
  v10[51] = a3;
  v10[52] = v4;
  v10[50] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1B3A0C82C(a2, a3);
  *((unsigned char *)v10 + 432) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 < v16 || (a4 & 1) == 0)
  {
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1B3A30060();
      goto LABEL_9;
    }
    sub_1B3A2F954(v16, a4 & 1);
    unint64_t v19 = sub_1B3A0C82C(a2, a3);
    if ((v17 & 1) == (v20 & 1))
    {
      unint64_t v13 = v19;
      goto LABEL_9;
    }
LABEL_14:
    uint64_t result = (void (*)(uint64_t *))sub_1B3A70D70();
    __break(1u);
    return result;
  }
LABEL_9:
  v10[53] = v13;
  if (v17)
  {
    memmove(v10 + 25, (const void *)(*(void *)(*v5 + 56) + 200 * v13), 0xC8uLL);
    nullsub_1(v10 + 25);
  }
  else
  {
    sub_1B3A3B53C((uint64_t)(v10 + 25));
  }
  sub_1B39B4CD4((uint64_t)(v10 + 25), (uint64_t)v10, &qword_1E9CD5EA8);
  return sub_1B3A310EC;
}

void sub_1B3A310EC(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = (void *)(*a1 + 200);
  sub_1B3A311A4(*a1, *(unsigned char *)(*a1 + 432), *(uint64_t **)(*a1 + 416), *(void *)(*a1 + 424), *(void *)(*a1 + 400), *(void *)(*a1 + 408));
  sub_1B39B4CD4((uint64_t)v1, (uint64_t)v2, &qword_1E9CD5EA8);
  sub_1B3A3B618(v2, sub_1B3A3B560);

  free(v1);
}

uint64_t (*sub_1B3A31168(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_1B3A31198;
}

uint64_t sub_1B3A31198(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

void *sub_1B3A311A4(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1B39B4CD4(a1, (uint64_t)v39, &qword_1E9CD5EA8);
  sub_1B39B4CD4((uint64_t)v39, (uint64_t)v40, &qword_1E9CD5EA8);
  if (sub_1B3A37570((uint64_t)v40) == 1)
  {
    if (a2)
    {
      swift_arrayDestroy();
      sub_1B3A31388(a4, *a3);
    }
    return sub_1B3A3B618(v39, sub_1B3A3B68C);
  }
  uint64_t result = (void *)sub_1B39B4CD4((uint64_t)v39, (uint64_t)__src, &qword_1E9CD5EA8);
  long long v36 = __src[10];
  long long v37 = __src[11];
  uint64_t v38 = v25;
  long long v32 = __src[6];
  long long v33 = __src[7];
  long long v34 = __src[8];
  long long v35 = __src[9];
  long long v28 = __src[2];
  long long v29 = __src[3];
  long long v30 = __src[4];
  long long v31 = __src[5];
  long long v26 = __src[0];
  long long v27 = __src[1];
  char v12 = (void *)*a3;
  if (a2)
  {
    memmove((void *)(v12[7] + 200 * a4), __src, 0xC8uLL);
    return sub_1B3A3B618(v39, sub_1B3A3B68C);
  }
  v12[(a4 >> 6) + 8] |= 1 << a4;
  unint64_t v13 = (void *)(v12[6] + 16 * a4);
  *unint64_t v13 = a5;
  v13[1] = a6;
  uint64_t v14 = v12[7] + 200 * a4;
  long long v15 = v29;
  *(_OWORD *)(v14 + 32) = v28;
  *(_OWORD *)(v14 + 48) = v15;
  long long v16 = v33;
  *(_OWORD *)(v14 + 96) = v32;
  *(_OWORD *)(v14 + 112) = v16;
  long long v17 = v31;
  *(_OWORD *)(v14 + 64) = v30;
  *(_OWORD *)(v14 + 80) = v17;
  *(void *)(v14 + 192) = v38;
  long long v18 = v37;
  *(_OWORD *)(v14 + 160) = v36;
  *(_OWORD *)(v14 + 176) = v18;
  long long v19 = v35;
  *(_OWORD *)(v14 + 128) = v34;
  *(_OWORD *)(v14 + 144) = v19;
  long long v20 = v27;
  *(_OWORD *)uint64_t v14 = v26;
  *(_OWORD *)(v14 + 16) = v20;
  uint64_t v21 = v12[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (!v22)
  {
    v12[2] = v23;
    swift_bridgeObjectRetain();
    return sub_1B3A3B618(v39, sub_1B3A3B68C);
  }
  __break(1u);
  return result;
}

unint64_t sub_1B3A31388(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_1B3A70930();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1B3A70E00();
        swift_bridgeObjectRetain();
        sub_1B3A70360();
        uint64_t v9 = sub_1B3A70E50();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t result = v14 + 200 * v3;
          long long v15 = (const void *)(v14 + 200 * v6);
          if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v15 + 200))
          {
            uint64_t result = (unint64_t)memmove((void *)result, v15, 0xC8uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    long long v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *long long v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1B3A3156C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_1B3A70930();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1B3A70E00();
        swift_bridgeObjectRetain();
        sub_1B3A70360();
        uint64_t v9 = sub_1B3A70E50();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          long long v15 = (void *)(v14 + 8 * v3);
          long long v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1B3A31744(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1B3A0C82C(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B3A302AC();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1B3A3156C(v6, v9);
  *int64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B3A31814(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1B3A323FC(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t sub_1B3A319BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_1B3A21B4C();
                  return v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      int64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      sub_1B3A70E00();
      swift_bridgeObjectRetain();
      sub_1B3A70360();
      uint64_t v19 = sub_1B3A70E50();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (sub_1B3A70D20() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        long long v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (sub_1B3A70D20() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x1F4188790](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_1B3A3258C((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v30, v2, v21, &v38);
      swift_release();
      sub_1B3A21B4C();
    }
    else
    {
      long long v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_1B3A3258C((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      sub_1B3A21B4C();
      MEMORY[0x1B3EC0090](v33, -1, -1);
    }
    return v32;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t sub_1B3A31E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v26 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25[0] + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      ++v5;
      sub_1B3A70E00();
      swift_bridgeObjectRetain();
      sub_1B3A70360();
      uint64_t v9 = sub_1B3A70E50();
      uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(v2 + 48);
        unint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (sub_1B3A70D20() & 1) != 0)
        {
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          uint64_t v27 = v5;
LABEL_19:
          char v19 = *(unsigned char *)(v2 + 32);
          unint64_t v20 = (unint64_t)((1 << v19) + 63) >> 6;
          size_t v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            MEMORY[0x1F4188790](isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            uint64_t v22 = sub_1B3A3286C((uint64_t)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            uint64_t v22 = sub_1B3A3286C((uint64_t)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x1B3EC0090](v23, -1, -1);
          }
          return v22;
        }
        uint64_t v15 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v15;
          if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
            break;
          }
          int64_t v16 = (void *)(v12 + 16 * v11);
          BOOL v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (sub_1B3A70D20() & 1) != 0)
          {
            uint64_t v27 = v5;
            uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }
  return v2;
}

uint64_t sub_1B3A32140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6080);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_1B3A3439C(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1B3A21B4C();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x1E4FBC860];
  }
  return v3;
}

void *sub_1B3A32218(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1B3A34530((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1B3A21B4C();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_1B3A32300(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FB0);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 328);
  uint64_t v5 = sub_1B3A34730(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1B3A21B4C();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_1B3A323FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_1B3A70E00();
  swift_bridgeObjectRetain();
  sub_1B3A70360();
  uint64_t v6 = sub_1B3A70E50();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (sub_1B3A70D20() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (sub_1B3A70D20() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1B3A2E370();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1B3A32D30(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1B3A3258C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v38 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v37 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_43;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_43;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }
            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_43;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }
              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_43;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v15 = v14 - 1;
                  int64_t v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain();
                  return sub_1B3A32A98(v38, a2, v37, a3);
                }
              }
            }
          }
LABEL_21:
          uint64_t v11 = (v17 - 1) & v17;
          unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          int64_t v9 = v13;
        }
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        sub_1B3A70E00();
        swift_bridgeObjectRetain();
        sub_1B3A70360();
        uint64_t v22 = sub_1B3A70E50();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v39 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_3:
        uint64_t result = swift_bridgeObjectRelease();
      }
      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      BOOL v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (sub_1B3A70D20() & 1) == 0)
      {
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v39 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          long long v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (sub_1B3A70D20() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_29:
      unint64_t v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_45:
      __break(1u);
      return result;
    }
    if (v37 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t sub_1B3A3286C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  unint64_t v30 = (unint64_t *)result;
  uint64_t v31 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return sub_1B3A32A98(v30, a2, v31, a3);
  }
  uint64_t v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_29;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    sub_1B3A70E00();
    swift_bridgeObjectRetain();
    sub_1B3A70360();
    uint64_t v14 = sub_1B3A70E50();
    uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1 << v16;
    if (((1 << v16) & *(void *)(v32 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_4;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    uint64_t v20 = (void *)(v19 + 16 * v16);
    BOOL v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (sub_1B3A70D20() & 1) == 0)
    {
      uint64_t v24 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v26 + 1)
      {
        unint64_t v26 = i & v24;
        if (((*(void *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v19 + 16 * v26);
        BOOL v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (sub_1B3A70D20() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v17 = v26 >> 6;
          uint64_t v18 = 1 << v26;
          goto LABEL_15;
        }
      }
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_15:
    unint64_t v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      uint64_t v23 = v31 - 1;
      if (__OFSUB__(v31, 1)) {
        goto LABEL_30;
      }
      --v31;
      if (!v23) {
        return MEMORY[0x1E4FBC870];
      }
    }
LABEL_5:
    uint64_t v8 = *a5;
    unint64_t v7 = a5[1];
    unint64_t v9 = *(void *)(*a5 + 16);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1B3A32A98(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FC0);
  uint64_t result = sub_1B3A70990();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_1B3A70E00();
    swift_bridgeObjectRetain();
    sub_1B3A70360();
    uint64_t result = sub_1B3A70E50();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    BOOL v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *BOOL v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_1B3A32D30(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_1B3A70930();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        sub_1B3A70E00();
        swift_bridgeObjectRetain();
        sub_1B3A70360();
        uint64_t v10 = sub_1B3A70E50();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *unint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1B3A32EF8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FE8);
  uint64_t result = sub_1B3A70B40();
  uint64_t v8 = result;
  uint64_t v50 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v50) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v50) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v50) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v50) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v50) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(void *)(v4 + 56) + 200 * v13;
    long long v21 = *(_OWORD *)(v20 + 16);
    long long v22 = *(_OWORD *)(v20 + 32);
    long long v23 = *(_OWORD *)(v20 + 48);
    long long v56 = *(_OWORD *)(v20 + 64);
    long long v54 = v22;
    long long v55 = v23;
    long long v24 = *(_OWORD *)(v20 + 128);
    long long v26 = *(_OWORD *)(v20 + 80);
    long long v25 = *(_OWORD *)(v20 + 96);
    long long v59 = *(_OWORD *)(v20 + 112);
    long long v60 = v24;
    long long v57 = v26;
    long long v58 = v25;
    long long v28 = *(_OWORD *)(v20 + 160);
    long long v27 = *(_OWORD *)(v20 + 176);
    long long v29 = *(_OWORD *)(v20 + 144);
    uint64_t v64 = *(void *)(v20 + 192);
    long long v62 = v28;
    long long v63 = v27;
    long long v61 = v29;
    long long v52 = *(_OWORD *)v20;
    long long v53 = v21;
    sub_1B3A70E00();
    swift_bridgeObjectRetain();
    sub_1B3A38924((uint64_t)&v52);
    sub_1B3A70360();
    uint64_t result = sub_1B3A70E50();
    uint64_t v30 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v11 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v33 = __clz(__rbit64((-1 << v31) & ~*(void *)(v11 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v36 = v32 == v35;
        if (v32 == v35) {
          unint64_t v32 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v32);
      }
      while (v37 == -1);
      unint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }
    *(void *)(v11 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    uint64_t v38 = (void *)(*(void *)(v8 + 48) + 16 * v33);
    void *v38 = v19;
    v38[1] = v18;
    uint64_t v39 = *(void *)(v8 + 56) + 200 * v33;
    *(_OWORD *)uint64_t v39 = v52;
    long long v40 = v53;
    long long v41 = v54;
    long long v42 = v56;
    *(_OWORD *)(v39 + 48) = v55;
    *(_OWORD *)(v39 + 64) = v42;
    *(_OWORD *)(v39 + 16) = v40;
    *(_OWORD *)(v39 + 32) = v41;
    long long v43 = v57;
    long long v44 = v58;
    long long v45 = v60;
    *(_OWORD *)(v39 + 112) = v59;
    *(_OWORD *)(v39 + 128) = v45;
    *(_OWORD *)(v39 + 80) = v43;
    *(_OWORD *)(v39 + 96) = v44;
    long long v46 = v61;
    long long v47 = v62;
    long long v48 = v63;
    *(void *)(v39 + 192) = v64;
    *(_OWORD *)(v39 + 160) = v47;
    *(_OWORD *)(v39 + 176) = v48;
    *(_OWORD *)(v39 + 144) = v46;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1B3A33238(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_1B3A332BC(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1B3A70CE0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_156;
    }
    if (v3) {
      return sub_1B3A339F8(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_155;
  }
  uint64_t v96 = result;
  uint64_t v97 = v3;
  uint64_t v101 = v1;
  long long v92 = a1;
  if (v3 <= 1)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    long long v99 = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v10 = MEMORY[0x1E4FBC860];
LABEL_121:
      uint64_t result = v10;
      uint64_t v95 = v7;
      if (v11 >= 2)
      {
        uint64_t v84 = *v92;
        do
        {
          unint64_t v85 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_150;
          }
          if (!v84) {
            goto LABEL_163;
          }
          uint64_t v86 = result;
          uint64_t v87 = *(void *)(result + 32 + 16 * v85);
          uint64_t v88 = *(void *)(result + 32 + 16 * (v11 - 1) + 8);
          uint64_t v89 = v101;
          uint64_t result = sub_1B3A33AF4((char *)(v84 + 328 * v87), (char *)(v84 + 328 * *(void *)(result + 32 + 16 * (v11 - 1))), v84 + 328 * v88, v99);
          uint64_t v101 = v89;
          if (v89) {
            break;
          }
          if (v88 < v87) {
            goto LABEL_151;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1B3A0D7F4(v86);
            uint64_t v86 = result;
          }
          if (v85 >= *(void *)(v86 + 16)) {
            goto LABEL_152;
          }
          long long v90 = (void *)(v86 + 32 + 16 * v85);
          *long long v90 = v87;
          v90[1] = v88;
          unint64_t v91 = *(void *)(v86 + 16);
          if (v11 > v91) {
            goto LABEL_153;
          }
          memmove((void *)(v86 + 32 + 16 * (v11 - 1)), (const void *)(v86 + 32 + 16 * v11), 16 * (v91 - v11));
          uint64_t result = v86;
          *(void *)(v86 + 16) = v91 - 1;
          unint64_t v11 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      *(void *)(v95 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v95 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = sub_1B3A70590();
    *(void *)(result + 16) = v6;
    uint64_t v3 = v97;
    uint64_t v95 = result;
    long long v99 = (char *)(result + 32);
  }
  uint64_t v8 = 0;
  uint64_t v9 = *a1;
  uint64_t v93 = *a1 - 328;
  uint64_t v94 = *a1 + 8;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v98 = *a1;
  while (1)
  {
    uint64_t v12 = v8++;
    if (v8 >= v3)
    {
LABEL_23:
      if (v8 < v3) {
        goto LABEL_24;
      }
      goto LABEL_70;
    }
    unint64_t v13 = (uint64_t *)(v9 + 328 * v8);
    uint64_t result = *v13;
    uint64_t v14 = v13[1];
    unint64_t v15 = (void *)(v9 + 328 * v12);
    if (result == *v15 && v14 == v15[1]) {
      break;
    }
    uint64_t result = sub_1B3A70D20();
    int v17 = result;
    uint64_t v18 = v12 + 2;
    if (v12 + 2 < v3) {
      goto LABEL_45;
    }
    uint64_t v8 = v12 + 2;
    if ((result & 1) == 0) {
      goto LABEL_23;
    }
LABEL_60:
    if (v18 < v12) {
      goto LABEL_159;
    }
LABEL_61:
    if (v12 >= v18)
    {
      uint64_t v8 = v18;
      if (v18 < v3) {
        goto LABEL_24;
      }
    }
    else
    {
      long long v28 = (char *)(v93 + 328 * v18);
      uint64_t v29 = v18;
      uint64_t v30 = v12;
      unint64_t v31 = (char *)(v9 + 328 * v12);
      do
      {
        if (v30 != --v29)
        {
          if (!v9) {
            goto LABEL_162;
          }
          memcpy(__dst, v31, sizeof(__dst));
          memmove(v31, v28, 0x148uLL);
          uint64_t result = (uint64_t)memcpy(v28, __dst, 0x141uLL);
        }
        ++v30;
        v28 -= 328;
        v31 += 328;
      }
      while (v30 < v29);
      uint64_t v8 = v18;
      uint64_t v3 = v97;
      if (v18 < v97)
      {
LABEL_24:
        if (__OFSUB__(v8, v12)) {
          goto LABEL_154;
        }
        if (v8 - v12 < v96)
        {
          if (__OFADD__(v12, v96)) {
            goto LABEL_157;
          }
          if (v12 + v96 >= v3) {
            uint64_t v19 = v3;
          }
          else {
            uint64_t v19 = v12 + v96;
          }
          if (v19 < v12)
          {
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          if (v8 != v19)
          {
            uint64_t v20 = (void *)(v93 + 328 * v8);
            do
            {
              uint64_t v21 = v12;
              long long v22 = v20;
              do
              {
                uint64_t result = v22[41];
                if (result == *v22 && v22[42] == v22[1]) {
                  break;
                }
                uint64_t result = sub_1B3A70D20();
                if ((result & 1) == 0) {
                  break;
                }
                if (!v9) {
                  goto LABEL_160;
                }
                memcpy(__dst, v22 + 41, sizeof(__dst));
                memcpy(v22 + 41, v22, 0x148uLL);
                uint64_t result = (uint64_t)memcpy(v22, __dst, 0x141uLL);
                v22 -= 41;
                ++v21;
              }
              while (v8 != v21);
              ++v8;
              v20 += 41;
            }
            while (v8 != v19);
            uint64_t v8 = v19;
          }
        }
      }
    }
LABEL_70:
    if (v8 < v12) {
      goto LABEL_149;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1B3A0D63C(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
      uint64_t v10 = result;
    }
    unint64_t v33 = *(void *)(v10 + 16);
    unint64_t v32 = *(void *)(v10 + 24);
    unint64_t v11 = v33 + 1;
    if (v33 >= v32 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B3A0D63C((char *)(v32 > 1), v33 + 1, 1, (char *)v10);
      uint64_t v10 = result;
    }
    *(void *)(v10 + 16) = v11;
    uint64_t v34 = v10 + 32;
    unint64_t v35 = (uint64_t *)(v10 + 32 + 16 * v33);
    *unint64_t v35 = v12;
    v35[1] = v8;
    if (v33)
    {
      uint64_t v9 = v98;
      while (1)
      {
        unint64_t v36 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v41 = v34 + 16 * v11;
          uint64_t v42 = *(void *)(v41 - 64);
          uint64_t v43 = *(void *)(v41 - 56);
          BOOL v47 = __OFSUB__(v43, v42);
          uint64_t v44 = v43 - v42;
          if (v47) {
            goto LABEL_138;
          }
          uint64_t v46 = *(void *)(v41 - 48);
          uint64_t v45 = *(void *)(v41 - 40);
          BOOL v47 = __OFSUB__(v45, v46);
          uint64_t v39 = v45 - v46;
          char v40 = v47;
          if (v47) {
            goto LABEL_139;
          }
          unint64_t v48 = v11 - 2;
          long long v49 = (uint64_t *)(v34 + 16 * (v11 - 2));
          uint64_t v51 = *v49;
          uint64_t v50 = v49[1];
          BOOL v47 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          if (v47) {
            goto LABEL_140;
          }
          BOOL v47 = __OFADD__(v39, v52);
          uint64_t v53 = v39 + v52;
          if (v47) {
            goto LABEL_142;
          }
          if (v53 >= v44)
          {
            uint64_t v71 = (uint64_t *)(v34 + 16 * v36);
            uint64_t v73 = *v71;
            uint64_t v72 = v71[1];
            BOOL v47 = __OFSUB__(v72, v73);
            uint64_t v74 = v72 - v73;
            if (v47) {
              goto LABEL_148;
            }
            BOOL v64 = v39 < v74;
            goto LABEL_108;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v65 = *(void *)(v10 + 32);
            uint64_t v66 = *(void *)(v10 + 40);
            BOOL v47 = __OFSUB__(v66, v65);
            uint64_t v58 = v66 - v65;
            char v59 = v47;
            goto LABEL_102;
          }
          uint64_t v38 = *(void *)(v10 + 32);
          uint64_t v37 = *(void *)(v10 + 40);
          BOOL v47 = __OFSUB__(v37, v38);
          uint64_t v39 = v37 - v38;
          char v40 = v47;
        }
        if (v40) {
          goto LABEL_141;
        }
        unint64_t v48 = v11 - 2;
        long long v54 = (uint64_t *)(v34 + 16 * (v11 - 2));
        uint64_t v56 = *v54;
        uint64_t v55 = v54[1];
        BOOL v57 = __OFSUB__(v55, v56);
        uint64_t v58 = v55 - v56;
        char v59 = v57;
        if (v57) {
          goto LABEL_143;
        }
        long long v60 = (uint64_t *)(v34 + 16 * v36);
        uint64_t v62 = *v60;
        uint64_t v61 = v60[1];
        BOOL v47 = __OFSUB__(v61, v62);
        uint64_t v63 = v61 - v62;
        if (v47) {
          goto LABEL_145;
        }
        if (__OFADD__(v58, v63)) {
          goto LABEL_147;
        }
        if (v58 + v63 >= v39)
        {
          BOOL v64 = v39 < v63;
LABEL_108:
          if (v64) {
            unint64_t v36 = v48;
          }
          goto LABEL_110;
        }
LABEL_102:
        if (v59) {
          goto LABEL_144;
        }
        long long v67 = (uint64_t *)(v34 + 16 * v36);
        uint64_t v69 = *v67;
        uint64_t v68 = v67[1];
        BOOL v47 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v47) {
          goto LABEL_146;
        }
        if (v70 < v58) {
          goto LABEL_15;
        }
LABEL_110:
        unint64_t v75 = v36 - 1;
        if (v36 - 1 >= v11)
        {
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        if (!v9) {
          goto LABEL_161;
        }
        uint64_t v76 = v10;
        uint64_t v77 = v9;
        long long v78 = (uint64_t *)(v34 + 16 * v75);
        uint64_t v79 = *v78;
        long long v80 = (void *)(v34 + 16 * v36);
        uint64_t v81 = v80[1];
        uint64_t v82 = v101;
        uint64_t result = sub_1B3A33AF4((char *)(v77 + 328 * *v78), (char *)(v77 + 328 * *v80), v77 + 328 * v81, v99);
        uint64_t v101 = v82;
        if (v82) {
          goto LABEL_118;
        }
        if (v81 < v79) {
          goto LABEL_135;
        }
        if (v36 > *(void *)(v76 + 16)) {
          goto LABEL_136;
        }
        *long long v78 = v79;
        *(void *)(v34 + 16 * v75 + 8) = v81;
        unint64_t v83 = *(void *)(v76 + 16);
        if (v36 >= v83) {
          goto LABEL_137;
        }
        uint64_t v10 = v76;
        unint64_t v11 = v83 - 1;
        uint64_t result = (uint64_t)memmove((void *)(v34 + 16 * v36), v80 + 2, 16 * (v83 - 1 - v36));
        *(void *)(v76 + 16) = v83 - 1;
        BOOL v64 = v83 > 2;
        uint64_t v9 = v98;
        if (!v64) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
    uint64_t v9 = v98;
LABEL_15:
    uint64_t v3 = v97;
    if (v8 >= v97)
    {
      uint64_t v7 = v95;
      goto LABEL_121;
    }
  }
  uint64_t v18 = v12 + 2;
  if (v12 + 2 >= v3)
  {
    uint64_t v8 = v12 + 2;
    goto LABEL_70;
  }
  int v17 = 0;
LABEL_45:
  long long v24 = (void *)(v94 + 328 * v18);
  while (1)
  {
    uint64_t result = *(v24 - 1);
    long long v26 = (void *)(v9 + 328 * v8);
    if (result != *v26 || *v24 != v26[1])
    {
      uint64_t result = sub_1B3A70D20();
      if ((v17 ^ result)) {
        goto LABEL_59;
      }
      goto LABEL_47;
    }
    if (v17) {
      break;
    }
LABEL_47:
    v24 += 41;
    uint64_t v25 = v18 + 1;
    uint64_t v8 = v18;
    uint64_t v18 = v25;
    if (v25 >= v97)
    {
      uint64_t v18 = v25;
LABEL_59:
      uint64_t v3 = v97;
      uint64_t v8 = v18;
      if ((v17 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_60;
    }
  }
  uint64_t v3 = v97;
  if (v18 >= v12) {
    goto LABEL_61;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
  return result;
}

uint64_t sub_1B3A339F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 328 * a3 - 328;
LABEL_5:
    uint64_t v9 = v6;
    uint64_t v10 = (void *)v8;
    while (1)
    {
      uint64_t result = v10[41];
      BOOL v11 = result == *v10 && v10[42] == v10[1];
      if (v11 || (uint64_t result = sub_1B3A70D20(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 328;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      memcpy(v12, v10 + 41, sizeof(v12));
      memcpy(v10 + 41, v10, 0x148uLL);
      uint64_t result = (uint64_t)memcpy(v10, v12, 0x141uLL);
      v10 -= 41;
      if (v4 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1B3A33AF4(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 328;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 328;
  if (v9 >= v11)
  {
    uint64_t v16 = 328 * v11;
    if (a4 != __src || &__src[v16] <= a4) {
      memmove(a4, __src, 328 * v11);
    }
    unint64_t v13 = &v4[v16];
    if (v7 >= v6 || v10 < 328) {
      goto LABEL_44;
    }
    int v17 = (char *)(a3 - 328);
    while (1)
    {
      uint64_t v18 = v17 + 328;
      uint64_t v19 = v6 - 328;
      BOOL v20 = *((void *)v13 - 41) == *((void *)v6 - 41) && *((void *)v13 - 40) == *((void *)v6 - 40);
      if (v20 || (sub_1B3A70D20() & 1) == 0)
      {
        uint64_t v19 = v13 - 328;
        if (v18 != v13)
        {
          v13 -= 328;
LABEL_41:
          memmove(v17, v19, 0x148uLL);
          goto LABEL_42;
        }
        BOOL v21 = v17 >= v13;
        v13 -= 328;
        if (v21) {
          goto LABEL_41;
        }
      }
      else
      {
        if (v18 != v6)
        {
          v6 -= 328;
          goto LABEL_41;
        }
        BOOL v21 = v17 >= v6;
        v6 -= 328;
        if (v21) {
          goto LABEL_41;
        }
      }
LABEL_42:
      if (v6 > v7)
      {
        v17 -= 328;
        if (v13 > v4) {
          continue;
        }
      }
      goto LABEL_44;
    }
  }
  size_t v12 = 328 * v9;
  if (a4 != __dst || &__dst[v12] <= a4) {
    memmove(a4, __dst, v12);
  }
  unint64_t v13 = &v4[v12];
  if ((unint64_t)v6 < a3 && v8 >= 328)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (v14 || (sub_1B3A70D20() & 1) == 0) {
        break;
      }
      unint64_t v15 = v6;
      BOOL v14 = v7 == v6;
      v6 += 328;
      if (!v14) {
        goto LABEL_16;
      }
LABEL_17:
      v7 += 328;
      if (v4 >= v13 || (unint64_t)v6 >= a3) {
        goto LABEL_19;
      }
    }
    unint64_t v15 = v4;
    BOOL v14 = v7 == v4;
    v4 += 328;
    if (v14) {
      goto LABEL_17;
    }
LABEL_16:
    memmove(v7, v15, 0x148uLL);
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v6 = v7;
LABEL_44:
  size_t v22 = 328 * ((v13 - v4) / 328);
  if (v6 != v4 || v6 >= &v4[v22]) {
    memmove(v6, v4, v22);
  }
  return 1;
}

unint64_t sub_1B3A33D64(unint64_t result, int64_t a2, const void *a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_1B3A30D3C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  BOOL v14 = &v5[328 * v7 + 32];
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v15 = *((void *)v5 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_25;
  }
  uint64_t result = (unint64_t)(v14 + 328);
  uint64_t v18 = &v5[328 * a2 + 32];
  size_t v19 = 328 * v17;
  if (v14 + 328 != v18 || result >= (unint64_t)&v18[v19]) {
    uint64_t result = (unint64_t)memmove((void *)result, v18, v19);
  }
  uint64_t v20 = *((void *)v5 + 2);
  BOOL v16 = __OFADD__(v20, v9);
  uint64_t v21 = v20 + v9;
  if (!v16)
  {
    *((void *)v5 + 2) = v21;
LABEL_19:
    uint64_t result = (unint64_t)memcpy(v14, a3, 0x141uLL);
    *uint64_t v3 = v5;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1B3A33EA8@<X0>(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  sub_1B3A70E00();
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  __src = a1;
  swift_bridgeObjectRetain();
  sub_1B3A70360();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1B3A70E50();
  uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v14 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v15 = *(void *)(v8 + 48);
    BOOL v16 = (void *)(v15 + 328 * v13);
    BOOL v17 = *v16 == v9 && v16[1] == v10;
    if (v17 || (sub_1B3A70D20() & 1) != 0)
    {
      uint64_t v18 = 0;
      int v19 = 1;
    }
    else
    {
      uint64_t v42 = a3;
      uint64_t v20 = ~v12;
      unint64_t v13 = (v13 + 1) & ~v12;
      if ((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
      {
        uint64_t v18 = 1;
        while (1)
        {
          uint64_t v21 = (void *)(v15 + 328 * v13);
          BOOL v22 = *v21 == v9 && v21[1] == v10;
          if (v22 || (sub_1B3A70D20() & 1) != 0) {
            break;
          }
          unint64_t v13 = (v13 + 1) & v20;
          if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          {
            int v19 = 0;
            goto LABEL_20;
          }
        }
        uint64_t v18 = 0;
        int v19 = 1;
      }
      else
      {
        int v19 = 0;
        uint64_t v18 = 1;
      }
LABEL_20:
      a3 = v42;
    }
  }
  else
  {
    int v19 = 0;
    uint64_t v18 = 1;
  }
  uint64_t v23 = *(void *)(v8 + 16);
  uint64_t v24 = v23 + v18;
  if (__OFADD__(v23, v18))
  {
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v25 = *(void *)(v8 + 24);
  if (v25 >= v24 && (a2 & 1) != 0)
  {
    if (!v19) {
      goto LABEL_50;
    }
    goto LABEL_39;
  }
  if (a2)
  {
    long long v26 = a3;
    sub_1B3A2D7E4();
    goto LABEL_32;
  }
  if (v25 < v24)
  {
    long long v26 = a3;
    sub_1B3A2EF9C();
LABEL_32:
    uint64_t v27 = *v4;
    sub_1B3A70E00();
    swift_bridgeObjectRetain();
    sub_1B3A70360();
    swift_bridgeObjectRelease();
    uint64_t v28 = sub_1B3A70E50();
    uint64_t v29 = -1 << *(unsigned char *)(v27 + 32);
    unint64_t v13 = v28 & ~v29;
    uint64_t v30 = v27 + 56;
    if ((*(void *)(v27 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      uint64_t v31 = *(void *)(v27 + 48);
      unint64_t v32 = (void *)(v31 + 328 * v13);
      BOOL v33 = *v32 == v9 && v32[1] == v10;
      if (v33 || (sub_1B3A70D20() & 1) != 0) {
        goto LABEL_38;
      }
      unint64_t v13 = (v13 + 1) & ~v29;
      if ((*(void *)(v30 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
      {
        while (1)
        {
          unint64_t v36 = (void *)(v31 + 328 * v13);
          BOOL v37 = *v36 == v9 && v36[1] == v10;
          if (v37 || (sub_1B3A70D20() & 1) != 0) {
            break;
          }
          unint64_t v13 = (v13 + 1) & ~v29;
          if (((*(void *)(v30 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
            goto LABEL_49;
          }
        }
LABEL_38:
        a3 = v26;
        if (v19) {
          goto LABEL_39;
        }
LABEL_54:
        uint64_t result = sub_1B3A70D60();
        __break(1u);
        return result;
      }
    }
LABEL_49:
    a3 = v26;
    if ((v19 & 1) == 0) {
      goto LABEL_50;
    }
    goto LABEL_54;
  }
  sub_1B3A2E6B8();
  if (!v19)
  {
LABEL_50:
    uint64_t v38 = *v4;
    *(void *)(*v4 + 8 * (v13 >> 6) + 56) |= 1 << v13;
    memcpy((void *)(*(void *)(v38 + 48) + 328 * v13), __src, 0x141uLL);
    uint64_t v39 = *(void *)(v38 + 16);
    BOOL v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (!v40)
    {
      *(void *)(v38 + 16) = v41;
      sub_1B3A3B448((uint64_t)v44);
      return sub_1B39B4CD4((uint64_t)v44, (uint64_t)a3, &qword_1E9CD5F38);
    }
    goto LABEL_53;
  }
LABEL_39:
  uint64_t v34 = (void *)(*(void *)(*v4 + 48) + 328 * v13);
  memmove(a3, v34, 0x141uLL);
  memcpy(v34, __src, 0x141uLL);

  return nullsub_1(a3);
}

uint64_t sub_1B3A34280(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_1B3A34308(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *uint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_1B3A3439C(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1B3A34530(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1B3A34730(void *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v21 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    int64_t v19 = (const void *)(*(void *)(a4 + 48) + 328 * v15);
    memcpy(__dst, v19, 0x141uLL);
    memmove(v10, v19, 0x141uLL);
    if (v12 == v9)
    {
      sub_1B39B373C((uint64_t)__dst);
      goto LABEL_38;
    }
    v10 += 328;
    uint64_t result = (void *)sub_1B39B373C((uint64_t)__dst);
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v20;
      uint64_t result = v21;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1B3A34958(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_1B3A349F8(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B3A34ADC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B3A34B24()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    unint64_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    unint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    unint64_t v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  int64_t v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      int64_t v18 = v0[1];
      int64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }
      uint64_t v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        int64_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          int64_t v16 = v20;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          int64_t v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            int64_t v16 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            int64_t v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            int64_t v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              int64_t v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              uint64_t v21 = v3 + 6;
              while (v17 != v21)
              {
                int64_t v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  int64_t v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

char *sub_1B3A34CC8(uint64_t a1)
{
  return sub_1B3A2C6A4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B3A34CDC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001B3A7B250 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654D757043726570 && a2 == 0xEF62694D79726F6DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B3A34DF0(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD60F0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39B5BB4();
  sub_1B3A70E60();
  if (!v1)
  {
    char v11 = 0;
    sub_1B3A70BE0();
    char v10 = 1;
    uint64_t v7 = sub_1B3A70BF0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v7;
}

void *sub_1B3A34F98(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD60D0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39AD4C0();
  sub_1B3A70E60();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D60);
    sub_1B39B4D38(&qword_1E9CD60D8, &qword_1E9CD5D60, (void (*)(void))sub_1B3A3BA38);
    sub_1B3A70C00();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1B3A35148(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E496E6F69746361 && a2 == 0xEB00000000786564;
  if (v2 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B3A7B270)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B3A35250(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E496E6F69746361 && a2 == 0xEB00000000786564;
  if (v2 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4665736963657270 && a2 == 0xED00007265746C69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B3A35380(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD60C0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_1B39ACF2C();
  sub_1B3A70E60();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = sub_1B3A70BF0();
    v9[14] = 1;
    sub_1B3A70BC0();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v7;
}

unint64_t sub_1B3A35528()
{
  unint64_t result = qword_1E9CD85D0;
  if (!qword_1E9CD85D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD85D0);
  }
  return result;
}

unint64_t sub_1B3A3557C()
{
  unint64_t result = qword_1E9CD5D90;
  if (!qword_1E9CD5D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5D90);
  }
  return result;
}

uint64_t sub_1B3A355D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E4972656D6974 && a2 == 0xEA00000000007865)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B3A356C0(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD60B0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3A35528();
  sub_1B3A70E60();
  v8[14] = 0;
  sub_1B3A3B9E4();
  sub_1B3A70C00();
  uint64_t v6 = v8[15];
  v8[13] = 1;
  sub_1B3A70BF0();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v6;
}

unint64_t sub_1B3A3587C()
{
  unint64_t result = qword_1E9CD85D8;
  if (!qword_1E9CD85D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD85D8);
  }
  return result;
}

uint64_t sub_1B3A358D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E496E6F69746361 && a2 == 0xEB00000000786564;
  if (v2 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B3A7B290)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B3A359D8(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v13 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_1B3A70E60();
  if (!v3)
  {
    uint64_t v10 = v13;
    char v15 = 0;
    uint64_t v5 = sub_1B3A70BF0();
    char v14 = 1;
    sub_1B3A70BF0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v5;
}

uint64_t sub_1B3A35B90(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B3A35CD8(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6098);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39AF1FC();
  sub_1B3A70E60();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v7 = sub_1B3A70BC0();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5DA8);
    char v11 = 1;
    sub_1B39AF198(&qword_1E9CD60A0);
    swift_bridgeObjectRetain();
    sub_1B3A70C00();
    char v10 = 2;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    sub_1B3A70BD0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1B3A35F98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1B3A705D0();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1B3A2C7C0(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1B3A36030(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1B3A36084(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1B3A3B990();
  uint64_t result = sub_1B3A705D0();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_1B3A2C970(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1B3A360F8@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  BOOL v57 = a2;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6010);
  uint64_t v4 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  char v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v109 = 1;
  char v106 = 1;
  char v104 = 1;
  uint64_t v7 = sub_1B3A02F9C();
  unint64_t v9 = v8;
  uint64_t v10 = a1[3];
  long long v60 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1B39B396C(v7, v9);
  sub_1B39B4EA0();
  char v59 = v6;
  sub_1B3A70E60();
  unint64_t v110 = v9;
  if (v2)
  {
    uint64_t v66 = v2;
    sub_1B39B0D88(v7, v9);
    long long v61 = 0uLL;
    long long v62 = 0uLL;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 2;
    uint64_t v15 = MEMORY[0x1E4FBC860];
    uint64_t v65 = MEMORY[0x1E4FBC860];
    uint64_t v67 = MEMORY[0x1E4FBC860];
    char v16 = 2;
    uint64_t v17 = 0;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v60);
    *(void *)&long long v81 = v13;
    *((void *)&v81 + 1) = v12;
    unsigned __int8 v82 = v109;
    *(_DWORD *)unint64_t v83 = *(_DWORD *)v108;
    *(_DWORD *)&v83[3] = *(_DWORD *)&v108[3];
    uint64_t v84 = v64;
    *(void *)&unsigned long long v85 = v17;
    *((void *)&v85 + 1) = v11;
    uint64_t v86 = v68;
    char v87 = v16;
    *(_DWORD *)uint64_t v88 = *(_DWORD *)v107;
    *(_DWORD *)&v88[3] = *(_DWORD *)&v107[3];
    uint64_t v89 = v67;
    uint64_t v90 = v65;
    uint64_t v91 = v14;
    uint64_t v92 = v63;
    uint64_t v93 = v15;
    long long v94 = v62;
    char v95 = v106;
    *(_DWORD *)uint64_t v96 = *(_DWORD *)v105;
    *(_DWORD *)&v96[3] = *(_DWORD *)&v105[3];
    long long v97 = v61;
    char v98 = v104;
    *(_DWORD *)long long v99 = *(_DWORD *)v103;
    *(_DWORD *)&v99[3] = *(_DWORD *)&v103[3];
    unint64_t v100 = 0;
    uint64_t v101 = v7;
    unint64_t v102 = v110;
    return sub_1B3A38E1C((uint64_t)&v81);
  }
  uint64_t v18 = v4;
  int64_t v19 = v57;
  LOBYTE(v69) = 0;
  sub_1B3A3B744();
  uint64_t v20 = v58;
  sub_1B3A70BB0();
  long long v56 = v81;
  int v21 = v82;
  char v109 = v82;
  LOBYTE(v81) = 1;
  uint64_t v22 = sub_1B3A70B90();
  uint64_t v24 = v23;
  int v55 = v21;
  uint64_t v64 = v22;
  LOBYTE(v81) = 2;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1B3A70B90();
  uint64_t v28 = v27;
  *(void *)&long long v54 = v24;
  *((void *)&v54 + 1) = v25;
  LOBYTE(v81) = 3;
  swift_bridgeObjectRetain();
  int v29 = sub_1B3A70BA0();
  uint64_t v68 = v28;
  int v53 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E10);
  LOBYTE(v69) = 4;
  sub_1B39B4D38(&qword_1E9CD6020, &qword_1E9CD5E10, (void (*)(void))sub_1B3A3B798);
  sub_1B3A70BB0();
  uint64_t v30 = v81;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E28);
  LOBYTE(v69) = 5;
  sub_1B39B4D38(&qword_1E9CD6030, &qword_1E9CD5E28, (void (*)(void))sub_1B3A3B7EC);
  uint64_t v67 = v30;
  swift_bridgeObjectRetain();
  sub_1B3A70BB0();
  uint64_t v31 = v81;
  LOBYTE(v69) = 6;
  sub_1B3A3B840();
  swift_bridgeObjectRetain();
  sub_1B3A70BB0();
  uint64_t v65 = v31;
  uint64_t v63 = *((void *)&v81 + 1);
  uint64_t v52 = v81;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E48);
  LOBYTE(v69) = 7;
  sub_1B39B4D38(&qword_1E9CD6048, &qword_1E9CD5E48, (void (*)(void))sub_1B3A3B894);
  sub_1B3A70BB0();
  uint64_t v66 = 0;
  uint64_t v15 = v81;
  LOBYTE(v69) = 8;
  sub_1B3A3B8E8();
  swift_bridgeObjectRetain();
  unint64_t v32 = v59;
  uint64_t v33 = v66;
  sub_1B3A70BB0();
  uint64_t v66 = v33;
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v32, v20);
    sub_1B39B0D88(v7, v110);
    uint64_t v17 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v61 = 0uLL;
    long long v62 = 0uLL;
LABEL_9:
    uint64_t v12 = *((void *)&v56 + 1);
    uint64_t v13 = v56;
    uint64_t v11 = *((void *)&v54 + 1);
    char v16 = v53;
    uint64_t v14 = v52;
    goto LABEL_4;
  }
  long long v62 = v81;
  unsigned __int8 v34 = v82;
  char v106 = v82;
  LOBYTE(v69) = 9;
  sub_1B3A70BB0();
  uint64_t v66 = 0;
  long long v61 = v81;
  int v51 = v82;
  char v104 = v82;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E68);
  char v79 = 10;
  sub_1B39B4D38(&qword_1E9CD6060, &qword_1E9CD5E68, (void (*)(void))sub_1B3A3B93C);
  uint64_t v35 = v66;
  sub_1B3A70BB0();
  uint64_t v66 = v35;
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v59, v58);
    sub_1B39B0D88(v7, v110);
    uint64_t v17 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v59, v58);
  char v59 = v80;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v69 = v56;
  LOBYTE(v70) = v55;
  uint64_t v36 = v65;
  unint64_t v37 = v54;
  *((void *)&v70 + 1) = v64;
  long long v71 = v54;
  uint64_t v38 = v68;
  *(void *)&long long v72 = v68;
  BYTE8(v72) = v53;
  *(void *)&long long v73 = v67;
  *((void *)&v73 + 1) = v65;
  *(void *)&long long v74 = v52;
  *((void *)&v74 + 1) = v63;
  uint64_t v39 = v15;
  *(void *)unint64_t v75 = v15;
  *(_OWORD *)&char v75[8] = v62;
  v75[24] = v34;
  long long v76 = v61;
  LOBYTE(v77) = v51;
  BOOL v40 = v59;
  *((void *)&v77 + 1) = v59;
  *(void *)&long long v78 = v7;
  uint64_t v41 = v7;
  uint64_t v50 = v7;
  unint64_t v42 = v110;
  *((void *)&v78 + 1) = v110;
  sub_1B3A38EFC((uint64_t)&v69);
  sub_1B39B0D88(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = v67;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v60);
  long long v81 = v56;
  unsigned __int8 v82 = v109;
  *(_DWORD *)unint64_t v83 = *(_DWORD *)v108;
  *(_DWORD *)&v83[3] = *(_DWORD *)&v108[3];
  uint64_t v84 = v64;
  unsigned long long v85 = __PAIR128__(*((unint64_t *)&v54 + 1), v37);
  uint64_t v86 = v38;
  char v87 = v53;
  *(_DWORD *)uint64_t v88 = *(_DWORD *)v107;
  *(_DWORD *)&v88[3] = *(_DWORD *)&v107[3];
  uint64_t v89 = v43;
  uint64_t v90 = v36;
  uint64_t v91 = v52;
  uint64_t v92 = v63;
  uint64_t v93 = v39;
  long long v94 = v62;
  char v95 = v106;
  *(_DWORD *)uint64_t v96 = *(_DWORD *)v105;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v105[3];
  long long v97 = v61;
  char v98 = v104;
  *(_DWORD *)long long v99 = *(_DWORD *)v103;
  *(_DWORD *)&v99[3] = *(_DWORD *)&v103[3];
  unint64_t v100 = v40;
  uint64_t v101 = v50;
  unint64_t v102 = v42;
  uint64_t result = sub_1B3A38E1C((uint64_t)&v81);
  long long v44 = v77;
  v19[8] = v76;
  v19[9] = v44;
  v19[10] = v78;
  long long v45 = v74;
  v19[4] = v73;
  v19[5] = v45;
  long long v46 = *(_OWORD *)&v75[16];
  v19[6] = *(_OWORD *)v75;
  v19[7] = v46;
  long long v47 = v70;
  *int64_t v19 = v69;
  v19[1] = v47;
  long long v48 = v72;
  v19[2] = v71;
  v19[3] = v48;
  return result;
}

uint64_t sub_1B3A36D68(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73657361696C61 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736973706F6E7973 && a2 == 0xE800000000000000 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73676E6974746573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B3A36EC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6008);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  long long v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B39B1100();
  sub_1B3A70E60();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v6;
    uint64_t v23 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
    LOBYTE(v24) = 0;
    sub_1B39B109C(&qword_1E9CD5F08);
    sub_1B3A70BB0();
    uint64_t v11 = v26[0];
    LOBYTE(v26[0]) = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1B3A70BC0();
    uint64_t v14 = v13;
    char v38 = 2;
    sub_1B3A38EA8();
    swift_bridgeObjectRetain();
    sub_1B3A70C00();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
    *(_OWORD *)&v25[120] = v46;
    *(_OWORD *)&v25[136] = v47;
    *(_OWORD *)&v25[152] = v48;
    *(_OWORD *)&v25[168] = v49;
    *(_OWORD *)&v25[56] = v42;
    *(_OWORD *)&v25[72] = v43;
    *(_OWORD *)&v25[88] = v44;
    *(_OWORD *)&v25[104] = v45;
    *(_OWORD *)&v25[8] = v39;
    *(_OWORD *)&v25[24] = v40;
    *(_OWORD *)&v25[40] = v41;
    long long v58 = v47;
    long long v59 = v48;
    long long v60 = v49;
    long long v54 = v43;
    long long v55 = v44;
    long long v56 = v45;
    long long v57 = v46;
    long long v50 = v39;
    long long v51 = v40;
    long long v52 = v41;
    long long v53 = v42;
    *(void *)&long long v24 = v11;
    *((void *)&v24 + 1) = v12;
    *(void *)uint64_t v25 = v14;
    sub_1B3A38924((uint64_t)&v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
    long long v34 = v57;
    long long v35 = v58;
    long long v36 = v59;
    long long v37 = v60;
    long long v30 = v53;
    long long v31 = v54;
    long long v32 = v55;
    long long v33 = v56;
    long long v27 = v50;
    long long v28 = v51;
    v26[0] = v11;
    v26[1] = v12;
    v26[2] = v14;
    long long v29 = v52;
    uint64_t result = sub_1B3A389D0((uint64_t)v26);
    long long v16 = *(_OWORD *)&v25[160];
    uint64_t v17 = v23;
    *(_OWORD *)(v23 + 160) = *(_OWORD *)&v25[144];
    *(_OWORD *)(v17 + 176) = v16;
    *(void *)(v17 + 192) = *(void *)&v25[176];
    long long v18 = *(_OWORD *)&v25[96];
    *(_OWORD *)(v17 + 96) = *(_OWORD *)&v25[80];
    *(_OWORD *)(v17 + 112) = v18;
    long long v19 = *(_OWORD *)&v25[128];
    *(_OWORD *)(v17 + 128) = *(_OWORD *)&v25[112];
    *(_OWORD *)(v17 + 144) = v19;
    long long v20 = *(_OWORD *)&v25[32];
    *(_OWORD *)(v17 + 32) = *(_OWORD *)&v25[16];
    *(_OWORD *)(v17 + 48) = v20;
    long long v21 = *(_OWORD *)&v25[64];
    *(_OWORD *)(v17 + 64) = *(_OWORD *)&v25[48];
    *(_OWORD *)(v17 + 80) = v21;
    long long v22 = *(_OWORD *)v25;
    *(_OWORD *)uint64_t v17 = v24;
    *(_OWORD *)(v17 + 16) = v22;
  }
  return result;
}

uint64_t sub_1B3A372C8()
{
  unint64_t v0 = sub_1B3A70B80();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB) {
    return 11;
  }
  else {
    return v0;
  }
}

void *sub_1B3A37310(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = *(void *)(a2 + 296);
  uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    if (*(void *)(v3 + 16))
    {
      uint64_t v7 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain_n();
      unint64_t v8 = sub_1B3A0C82C(v7, v6);
      if (v9)
      {
        uint64_t v10 = *(void *)(v3 + 56) + 200 * v8;
        long long v37 = *(_OWORD *)v10;
        long long v11 = *(_OWORD *)(v10 + 48);
        long long v12 = *(_OWORD *)(v10 + 64);
        long long v13 = *(_OWORD *)(v10 + 32);
        long long v38 = *(_OWORD *)(v10 + 16);
        long long v39 = v13;
        long long v40 = v11;
        long long v41 = v12;
        long long v14 = *(_OWORD *)(v10 + 80);
        long long v15 = *(_OWORD *)(v10 + 96);
        long long v16 = *(_OWORD *)(v10 + 128);
        long long v44 = *(_OWORD *)(v10 + 112);
        long long v45 = v16;
        long long v42 = v14;
        long long v43 = v15;
        long long v17 = *(_OWORD *)(v10 + 144);
        long long v18 = *(_OWORD *)(v10 + 160);
        long long v19 = *(_OWORD *)(v10 + 176);
        uint64_t v49 = *(void *)(v10 + 192);
        long long v47 = v18;
        long long v48 = v19;
        long long v46 = v17;
        sub_1B3A38924((uint64_t)&v37);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = sub_1B3A308FC(0, v5[2] + 1, 1, v5);
        }
        unint64_t v21 = v5[2];
        unint64_t v20 = v5[3];
        if (v21 >= v20 >> 1) {
          uint64_t v5 = sub_1B3A308FC((void *)(v20 > 1), v21 + 1, 1, v5);
        }
        long long v26 = v39;
        long long v27 = v40;
        long long v30 = v43;
        long long v31 = v44;
        long long v28 = v41;
        long long v29 = v42;
        uint64_t v36 = v49;
        long long v34 = v47;
        long long v35 = v48;
        long long v32 = v45;
        long long v33 = v46;
        long long v24 = v37;
        long long v25 = v38;
        v5[2] = v21 + 1;
        long long v22 = &v5[27 * v21];
        v22[4] = v7;
        v22[5] = v6;
        *((_OWORD *)v22 + 3) = v24;
        *((_OWORD *)v22 + 6) = v27;
        *((_OWORD *)v22 + 7) = v28;
        *((_OWORD *)v22 + 4) = v25;
        *((_OWORD *)v22 + 5) = v26;
        *((_OWORD *)v22 + 10) = v31;
        *((_OWORD *)v22 + 11) = v32;
        *((_OWORD *)v22 + 8) = v29;
        *((_OWORD *)v22 + 9) = v30;
        v22[30] = v36;
        *((_OWORD *)v22 + 13) = v34;
        *((_OWORD *)v22 + 14) = v35;
        *((_OWORD *)v22 + 12) = v33;
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_1B3A3751C()
{
  unint64_t result = qword_1E9CD5EA0;
  if (!qword_1E9CD5EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5EA0);
  }
  return result;
}

uint64_t sub_1B3A37570(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1B3A37588(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FC8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B3A73390;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      uint64_t v11 = *(void *)(inited + 16);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v11)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }
      uint64_t v13 = *(void *)(inited + 16 * v11 + 16);
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_1B3A70370();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = v13 + v14;
      if (__OFADD__(v13, v14)) {
        goto LABEL_38;
      }
      BOOL v16 = __OFADD__(v15, 2);
      uint64_t v17 = v15 + 2;
      if (v16) {
        goto LABEL_39;
      }
      if (v17 < 81)
      {
        unint64_t v22 = *(void *)(inited + 16);
        uint64_t result = sub_1B3A70370();
        uint64_t v23 = result + 2;
        if (__OFADD__(result, 2)) {
          goto LABEL_41;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          if (!v22) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t result = (uint64_t)sub_1B3A304B4((void *)inited);
          uint64_t inited = result;
          if (!v22) {
            goto LABEL_45;
          }
        }
        if (v22 > *(void *)(inited + 16)) {
          goto LABEL_42;
        }
        long long v24 = (void *)(inited + 32 + 16 * (v22 - 1));
        if (__OFADD__(*v24, v23)) {
          goto LABEL_43;
        }
        *v24 += v23;
        uint64_t v25 = *(void *)(inited + 16);
        uint64_t result = swift_bridgeObjectRetain();
        if (!v25) {
          goto LABEL_44;
        }
        uint64_t v26 = inited + 32 + 16 * v25;
        long long v29 = *(char **)(v26 - 8);
        long long v28 = (char **)(v26 - 8);
        long long v27 = v29;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *long long v28 = v29;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v27 = sub_1B3A1617C(0, *((void *)v27 + 2) + 1, 1, v27);
          *long long v28 = v27;
        }
        unint64_t v32 = *((void *)v27 + 2);
        unint64_t v31 = *((void *)v27 + 3);
        if (v32 >= v31 >> 1)
        {
          long long v27 = sub_1B3A1617C((char *)(v31 > 1), v32 + 1, 1, v27);
          *long long v28 = v27;
        }
        *((void *)v27 + 2) = v32 + 1;
        long long v33 = &v27[16 * v32];
        *((void *)v33 + 4) = v10;
        *((void *)v33 + 5) = v9;
      }
      else
      {
        uint64_t result = sub_1B3A70370();
        uint64_t v18 = result + 2;
        if (__OFADD__(result, 2)) {
          goto LABEL_40;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_1B3A73390;
        *(void *)(v19 + 32) = v10;
        *(void *)(v19 + 40) = v9;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t inited = (uint64_t)sub_1B3A30A3C(0, *(void *)(inited + 16) + 1, 1, (void *)inited);
        }
        unint64_t v21 = *(void *)(inited + 16);
        unint64_t v20 = *(void *)(inited + 24);
        if (v21 >= v20 >> 1) {
          uint64_t inited = (uint64_t)sub_1B3A30A3C((void *)(v20 > 1), v21 + 1, 1, (void *)inited);
        }
        *(void *)(inited + 16) = v21 + 1;
        uint64_t v8 = inited + 16 * v21;
        *(void *)(v8 + 32) = v18;
        *(void *)(v8 + 40) = v19;
      }
      v7 += 2;
      swift_bridgeObjectRelease();
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    int64_t v34 = *(void *)(inited + 16);
    if (v34)
    {
      uint64_t v5 = MEMORY[0x1E4FBC860];
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  else
  {
    int64_t v34 = 1;
LABEL_30:
    uint64_t v43 = v5;
    sub_1B3A052F4(0, v34, 0);
    uint64_t v35 = 40;
    uint64_t v36 = v43;
    do
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
      sub_1B3A38DD8((unint64_t *)&qword_1E9CD58B0, &qword_1E9CD58A8);
      uint64_t v37 = sub_1B3A70250();
      uint64_t v39 = v38;
      swift_bridgeObjectRelease();
      unint64_t v41 = *(void *)(v43 + 16);
      unint64_t v40 = *(void *)(v43 + 24);
      if (v41 >= v40 >> 1) {
        sub_1B3A052F4((char *)(v40 > 1), v41 + 1, 1);
      }
      *(void *)(v43 + 16) = v41 + 1;
      uint64_t v42 = v43 + 16 * v41;
      *(void *)(v42 + 32) = v37;
      *(void *)(v42 + 40) = v39;
      v35 += 16;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
  }
  return v36;
}

char *sub_1B3A37974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = swift_bridgeObjectRetain() + 48;
  uint64_t v5 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v7 = *(void *)v4;
    if (*(void *)(*(void *)v4 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1B3A70370();
      sub_1B3A37588(v7, v8);
      sub_1B3A703A0();
      uint64_t v9 = sub_1B3A70370();
      MEMORY[0x1B3EBD790](32, 0xE100000000000000, v9);
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
      sub_1B3A38DD8((unint64_t *)&qword_1E9CD58B0, &qword_1E9CD58A8);
      sub_1B3A70250();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_1B3A1617C(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v11 = *((void *)v5 + 2);
      unint64_t v10 = *((void *)v5 + 3);
      if (v11 >= v10 >> 1) {
        uint64_t v5 = sub_1B3A1617C((char *)(v10 > 1), v11 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v11 + 1;
      uint64_t v6 = &v5[16 * v11];
      *((void *)v6 + 4) = a2;
      *((void *)v6 + 5) = a3;
    }
    v4 += 24;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B3A37BCC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5900);
  MEMORY[0x1F4188790](v10);
  long long v12 = (uint64_t *)((char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = a2;
  uint64_t v88 = a1;
  sub_1B3A07288(a1, a2, a3, v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v14 = *v12;
  if (EnumCaseMultiPayload == 1)
  {
    sub_1B3A0F4AC(*v12, v12[1], v12[2], v12[3], *((unsigned char *)v12 + 32));
    return 0;
  }
  uint64_t v16 = v12[1];
  uint64_t v86 = (char *)v12 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5908) + 48);
  uint64_t v17 = *a4;
  if (!*(void *)(*a4 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t v77 = sub_1B3A6FF40();
    long long v78 = *(void (**)(char *, uint64_t))(*(void *)(v77 - 8) + 8);
    swift_bridgeObjectRetain();
    v78(v86, v77);
    return v88;
  }
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1B3A0C82C(v14, v16);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_42;
  }
  uint64_t v20 = v14;
  uint64_t v21 = v16;
  uint64_t v22 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v84 = v20;
  sub_1B3A31744(v20, v21);
  uint64_t v85 = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_bridgeObjectRelease();
  int64_t v24 = 0;
  uint64_t v25 = *(void *)(v22 + 56);
  uint64_t v89 = v22 + 56;
  uint64_t v26 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  int64_t v90 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v91 = v22;
  long long v29 = (void *)MEMORY[0x1E4FBC868];
  if ((v27 & v25) == 0) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v30 = __clz(__rbit64(v28));
  uint64_t v31 = (v28 - 1) & v28;
  for (unint64_t i = v30 | (v24 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v24 << 6))
  {
    uint64_t v36 = (uint64_t *)(*(void *)(v91 + 48) + 16 * i);
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    uint64_t v97 = 61;
    unint64_t v98 = 0xE100000000000000;
    MEMORY[0x1F4188790](v23);
    *(&v83 - 2) = (uint64_t)&v97;
    swift_bridgeObjectRetain_n();
    uint64_t v39 = sub_1B3A0420C(1, 1, sub_1B3A060F8, (uint64_t)(&v83 - 4), v37, v38);
    swift_bridgeObjectRelease();
    if (!*((void *)v39 + 2))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for KTraceRecordError();
      sub_1B3A066CC();
      swift_allocError();
      uint64_t v80 = v79;
      uint64_t v97 = v84;
      unint64_t v98 = v85;
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      unint64_t v81 = v98;
      *(void *)uint64_t v80 = v97;
      *(void *)(v80 + 8) = v81;
      *(unsigned char *)(v80 + 16) = 0;
      goto LABEL_44;
    }
    unint64_t v92 = v31;
    uint64_t v40 = *((void *)v39 + 4);
    uint64_t v96 = *((void *)v39 + 5);
    uint64_t v42 = *((void *)v39 + 6);
    uint64_t v41 = *((void *)v39 + 7);
    uint64_t v94 = v5;
    uint64_t v95 = v42;
    uint64_t v99 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v43 = *((void *)v39 + 2);
    int64_t v93 = v24;
    if (v43 > 1)
    {
      uint64_t v44 = *((void *)v39 + 8);
      uint64_t v46 = *((void *)v39 + 9);
      uint64_t v48 = *((void *)v39 + 10);
      uint64_t v50 = *((void *)v39 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v44 = MEMORY[0x1B3EBDAC0](0, 0xE000000000000000);
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      uint64_t v50 = v49;
    }
    uint64_t v51 = MEMORY[0x1B3EBD660](v44, v46, v48, v50);
    uint64_t v53 = v52;
    swift_bridgeObjectRelease();
    uint64_t v54 = v40;
    uint64_t v55 = MEMORY[0x1B3EBD660](v40, v96, v95, v99);
    uint64_t v57 = v56;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = (uint64_t)v29;
    unint64_t v60 = sub_1B3A0C82C(v55, v57);
    uint64_t v61 = v29[2];
    BOOL v62 = (v59 & 1) == 0;
    uint64_t v63 = v61 + v62;
    if (__OFADD__(v61, v62)) {
      break;
    }
    char v64 = v59;
    if (v29[3] >= v63)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        long long v29 = (void *)v97;
        if (v59) {
          goto LABEL_39;
        }
      }
      else
      {
        sub_1B3A2FEA4();
        long long v29 = (void *)v97;
        if (v64) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      sub_1B3A2F62C(v63, isUniquelyReferenced_nonNull_native);
      unint64_t v65 = sub_1B3A0C82C(v55, v57);
      if ((v64 & 1) != (v66 & 1)) {
        goto LABEL_50;
      }
      unint64_t v60 = v65;
      long long v29 = (void *)v97;
      if (v64)
      {
LABEL_39:
        long long v71 = (uint64_t *)(v29[7] + 16 * v60);
        *long long v71 = v51;
        v71[1] = v53;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1B3A066CC();
        swift_allocError();
        long long v73 = v72;
        uint64_t v74 = MEMORY[0x1B3EBD660](v54, v96, v95, v99);
        uint64_t v76 = v75;
        swift_bridgeObjectRelease();
        *long long v73 = v74;
        v73[1] = v76;
LABEL_44:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
        uint64_t v82 = sub_1B3A6FF40();
        return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v82 - 8) + 8))(v86, v82);
      }
    }
    v29[(v60 >> 6) + 8] |= 1 << v60;
    uint64_t v67 = (uint64_t *)(v29[6] + 16 * v60);
    uint64_t *v67 = v55;
    v67[1] = v57;
    uint64_t v68 = (uint64_t *)(v29[7] + 16 * v60);
    uint64_t *v68 = v51;
    v68[1] = v53;
    uint64_t v69 = v29[2];
    BOOL v33 = __OFADD__(v69, 1);
    uint64_t v70 = v69 + 1;
    if (v33) {
      goto LABEL_47;
    }
    v29[2] = v70;
    swift_bridgeObjectRelease();
    uint64_t v23 = swift_bridgeObjectRelease();
    int64_t v24 = v93;
    uint64_t v5 = v94;
    unint64_t v28 = v92;
    if (v92) {
      goto LABEL_8;
    }
LABEL_9:
    BOOL v33 = __OFADD__(v24++, 1);
    uint64_t v23 = v85;
    if (v33) {
      goto LABEL_48;
    }
    if (v24 >= v90) {
      goto LABEL_45;
    }
    unint64_t v34 = *(void *)(v89 + 8 * v24);
    if (!v34)
    {
      int64_t v35 = v24 + 1;
      if (v24 + 1 >= v90) {
        goto LABEL_45;
      }
      unint64_t v34 = *(void *)(v89 + 8 * v35);
      if (!v34)
      {
        int64_t v35 = v24 + 2;
        if (v24 + 2 >= v90) {
          goto LABEL_45;
        }
        unint64_t v34 = *(void *)(v89 + 8 * v35);
        if (!v34)
        {
          int64_t v35 = v24 + 3;
          if (v24 + 3 >= v90)
          {
LABEL_45:
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_42;
          }
          unint64_t v34 = *(void *)(v89 + 8 * v35);
          if (!v34)
          {
            while (1)
            {
              int64_t v24 = v35 + 1;
              if (__OFADD__(v35, 1)) {
                goto LABEL_49;
              }
              if (v24 >= v90) {
                goto LABEL_45;
              }
              unint64_t v34 = *(void *)(v89 + 8 * v24);
              ++v35;
              if (v34) {
                goto LABEL_19;
              }
            }
          }
        }
      }
      int64_t v24 = v35;
    }
LABEL_19:
    uint64_t v31 = (v34 - 1) & v34;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = sub_1B3A70D70();
  __break(1u);
  return result;
}

uint64_t sub_1B3A382EC(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  uint64_t v49 = (unint64_t *)result;
  uint64_t v50 = 0;
  int64_t v6 = 0;
  uint64_t v9 = a3[8];
  uint64_t v7 = a3 + 8;
  uint64_t v8 = v9;
  uint64_t v10 = 1 << *((unsigned char *)v7 - 32);
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v8;
  uint64_t v51 = v7;
  int64_t v52 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v59 = a4 + 56;
  uint64_t v56 = a5 + 56;
  while (v12)
  {
    unint64_t v13 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v14 = v13 | (v6 << 6);
LABEL_22:
    unint64_t v18 = (uint64_t *)(a3[6] + 16 * v14);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = a3[7] + 200 * v14;
    v57[0] = *(_OWORD *)v21;
    long long v22 = *(_OWORD *)(v21 + 48);
    long long v24 = *(_OWORD *)(v21 + 16);
    long long v23 = *(_OWORD *)(v21 + 32);
    v57[4] = *(_OWORD *)(v21 + 64);
    v57[2] = v23;
    v57[3] = v22;
    v57[1] = v24;
    long long v25 = *(_OWORD *)(v21 + 128);
    long long v27 = *(_OWORD *)(v21 + 80);
    long long v26 = *(_OWORD *)(v21 + 96);
    v57[7] = *(_OWORD *)(v21 + 112);
    v57[8] = v25;
    v57[5] = v27;
    v57[6] = v26;
    long long v29 = *(_OWORD *)(v21 + 160);
    long long v28 = *(_OWORD *)(v21 + 176);
    long long v30 = *(_OWORD *)(v21 + 144);
    uint64_t v58 = *(void *)(v21 + 192);
    v57[10] = v29;
    v57[11] = v28;
    v57[9] = v30;
    if (*(void *)(v5 + 16))
    {
      sub_1B3A70E00();
      swift_bridgeObjectRetain();
      sub_1B3A38924((uint64_t)v57);
      sub_1B3A70360();
      uint64_t v31 = sub_1B3A70E50();
      uint64_t v32 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v33 = v31 & ~v32;
      if (((*(void *)(v59 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v34 = *(void *)(a4 + 48);
      int64_t v35 = (void *)(v34 + 16 * v33);
      if ((*v35 != v19 || v35[1] != v20) && (sub_1B3A70D20() & 1) == 0)
      {
        uint64_t v45 = ~v32;
        do
        {
          unint64_t v33 = (v33 + 1) & v45;
          if (((*(void *)(v59 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
            goto LABEL_5;
          }
          uint64_t v46 = (void *)(v34 + 16 * v33);
          BOOL v47 = *v46 == v19 && v46[1] == v20;
        }
        while (!v47 && (sub_1B3A70D20() & 1) == 0);
      }
      if (!*(void *)(a5 + 16)) {
        goto LABEL_50;
      }
      sub_1B3A70E00();
      sub_1B3A70360();
      uint64_t v36 = sub_1B3A70E50();
      uint64_t v37 = -1 << *(unsigned char *)(a5 + 32);
      unint64_t v38 = v36 & ~v37;
      if (((*(void *)(v56 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
        goto LABEL_50;
      }
      uint64_t v39 = *(void *)(a5 + 48);
      uint64_t v40 = (void *)(v39 + 16 * v38);
      BOOL v41 = *v40 == v19 && v40[1] == v20;
      if (v41 || (sub_1B3A70D20() & 1) != 0)
      {
LABEL_5:
        sub_1B3A389D0((uint64_t)v57);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = a4;
      }
      else
      {
        uint64_t v42 = ~v37;
        while (1)
        {
          unint64_t v38 = (v38 + 1) & v42;
          if (((*(void *)(v56 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
            break;
          }
          unint64_t v43 = (void *)(v39 + 16 * v38);
          BOOL v44 = *v43 == v19 && v43[1] == v20;
          if (v44 || (sub_1B3A70D20() & 1) != 0) {
            goto LABEL_5;
          }
        }
LABEL_50:
        sub_1B3A389D0((uint64_t)v57);
        uint64_t result = swift_bridgeObjectRelease();
        *(unint64_t *)((char *)v49 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        if (__OFADD__(v50, 1)) {
          goto LABEL_55;
        }
        ++v50;
        uint64_t v5 = a4;
      }
    }
  }
  int64_t v15 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_54;
  }
  if (v15 >= v52) {
    return sub_1B3A32EF8(v49, a2, v50, (uint64_t)a3);
  }
  unint64_t v16 = v51[v15];
  ++v6;
  if (v16) {
    goto LABEL_21;
  }
  int64_t v6 = v15 + 1;
  if (v15 + 1 >= v52) {
    return sub_1B3A32EF8(v49, a2, v50, (uint64_t)a3);
  }
  unint64_t v16 = v51[v6];
  if (v16) {
    goto LABEL_21;
  }
  int64_t v6 = v15 + 2;
  if (v15 + 2 >= v52) {
    return sub_1B3A32EF8(v49, a2, v50, (uint64_t)a3);
  }
  unint64_t v16 = v51[v6];
  if (v16)
  {
LABEL_21:
    unint64_t v12 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v6 << 6);
    goto LABEL_22;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v52) {
    return sub_1B3A32EF8(v49, a2, v50, (uint64_t)a3);
  }
  unint64_t v16 = v51[v17];
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v52) {
      return sub_1B3A32EF8(v49, a2, v50, (uint64_t)a3);
    }
    unint64_t v16 = v51[v6];
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_1B3A38700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1B3A382EC((uint64_t)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1B3A382EC((uint64_t)v13, v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MEMORY[0x1B3EC0090](v13, -1, -1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1B3A38924(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = *(void *)(a1 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B39B396C(v2, v3);
  return a1;
}

uint64_t sub_1B3A389D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = *(void *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B39B0D88(v2, v3);
  return a1;
}

uint64_t sub_1B3A38A7C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v5 = 0;
  uint64_t v36 = result + 32;
  uint64_t v40 = a3 + 56;
  uint64_t v41 = a2 + 56;
  uint64_t v35 = MEMORY[0x1E4FBC860];
  do
  {
    if (v5 <= v3) {
      unint64_t v6 = v3;
    }
    else {
      unint64_t v6 = v5;
    }
    unint64_t v39 = v6;
    unint64_t v7 = v5;
    while (1)
    {
      if (v7 == v39)
      {
        __break(1u);
        return result;
      }
      unint64_t v5 = v7 + 1;
      if (*(void *)(a2 + 16)) {
        break;
      }
LABEL_9:
      unint64_t v7 = v5;
      if (v5 == v3) {
        return v35;
      }
    }
    unint64_t v8 = v3;
    uint64_t v9 = v36 + 32 * v7;
    uint64_t v11 = *(void *)v9;
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v12 = *(void *)(v9 + 16);
    char v37 = *(unsigned char *)(v9 + 24);
    sub_1B3A70E00();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B3A70360();
    uint64_t v13 = sub_1B3A70E50();
    uint64_t v14 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v41 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v16 = *(void *)(a2 + 48);
    int64_t v17 = (void *)(v16 + 16 * v15);
    BOOL v18 = *v17 == v11 && v17[1] == v10;
    if (!v18 && (sub_1B3A70D20() & 1) == 0)
    {
      uint64_t v28 = ~v14;
      do
      {
        unint64_t v15 = (v15 + 1) & v28;
        if (((*(void *)(v41 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
          goto LABEL_8;
        }
        long long v29 = (void *)(v16 + 16 * v15);
        BOOL v30 = *v29 == v11 && v29[1] == v10;
      }
      while (!v30 && (sub_1B3A70D20() & 1) == 0);
    }
    if (!*(void *)(a3 + 16)) {
      goto LABEL_42;
    }
    sub_1B3A70E00();
    swift_bridgeObjectRetain();
    sub_1B3A70360();
    uint64_t v19 = sub_1B3A70E50();
    uint64_t v20 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v40 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v22 = *(void *)(a3 + 48);
    long long v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v11 && v23[1] == v10;
    if (v24 || (sub_1B3A70D20() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
LABEL_8:
      unint64_t v3 = v8;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    uint64_t v25 = ~v20;
    while (1)
    {
      unint64_t v21 = (v21 + 1) & v25;
      if (((*(void *)(v40 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
        break;
      }
      long long v26 = (void *)(v22 + 16 * v21);
      BOOL v27 = *v26 == v11 && v26[1] == v10;
      if (v27 || (sub_1B3A70D20() & 1) != 0) {
        goto LABEL_7;
      }
    }
LABEL_41:
    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t v31 = v35;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1B3A2C484(0, *(void *)(v35 + 16) + 1, 1);
      uint64_t v31 = v35;
    }
    unint64_t v3 = v8;
    unint64_t v33 = *(void *)(v31 + 16);
    unint64_t v32 = *(void *)(v31 + 24);
    if (v33 >= v32 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B3A2C484((char *)(v32 > 1), v33 + 1, 1);
      uint64_t v31 = v35;
    }
    *(void *)(v31 + 16) = v33 + 1;
    uint64_t v35 = v31;
    uint64_t v34 = v31 + 32 * v33;
    *(void *)(v34 + 32) = v11;
    *(void *)(v34 + 40) = v10;
    *(void *)(v34 + 48) = v12;
    *(unsigned char *)(v34 + 56) = v37;
  }
  while (v5 != v3);
  return v35;
}

uint64_t sub_1B3A38DCC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A38DD8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B3A38E1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  unint64_t v3 = *(void *)(a1 + 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B39B0D88(v2, v3);
  return a1;
}

unint64_t sub_1B3A38EA8()
{
  unint64_t result = qword_1E9CD5F10;
  if (!qword_1E9CD5F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F10);
  }
  return result;
}

uint64_t sub_1B3A38EFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  unint64_t v3 = *(void *)(a1 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B39B396C(v2, v3);
  return a1;
}

unint64_t sub_1B3A38F88()
{
  unint64_t result = qword_1E9CD5F20;
  if (!qword_1E9CD5F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F20);
  }
  return result;
}

uint64_t sub_1B3A38FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A39044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTraceRecordError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A390A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KTraceRecordError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B3A39104(uint64_t a1)
{
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 256);
  sub_1B3A39198(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1));
  return a1;
}

uint64_t sub_1B3A39198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,unint64_t a36)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B39B0D88(a35, a36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1B3A392D4()
{
  unint64_t result = qword_1E9CD5F40;
  if (!qword_1E9CD5F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F40);
  }
  return result;
}

unint64_t sub_1B3A3932C()
{
  unint64_t result = qword_1E9CD5F48;
  if (!qword_1E9CD5F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F48);
  }
  return result;
}

unint64_t sub_1B3A39384()
{
  unint64_t result = qword_1E9CD5F50;
  if (!qword_1E9CD5F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F50);
  }
  return result;
}

unint64_t sub_1B3A393DC()
{
  unint64_t result = qword_1E9CD5F58;
  if (!qword_1E9CD5F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F58);
  }
  return result;
}

unint64_t sub_1B3A39434()
{
  unint64_t result = qword_1E9CD5F60;
  if (!qword_1E9CD5F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F60);
  }
  return result;
}

unint64_t sub_1B3A3948C()
{
  unint64_t result = qword_1E9CD5F68;
  if (!qword_1E9CD5F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F68);
  }
  return result;
}

unint64_t sub_1B3A394E4()
{
  unint64_t result = qword_1E9CD5F70;
  if (!qword_1E9CD5F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F70);
  }
  return result;
}

unint64_t sub_1B3A3953C()
{
  unint64_t result = qword_1E9CD5F78;
  if (!qword_1E9CD5F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F78);
  }
  return result;
}

unint64_t sub_1B3A39594()
{
  unint64_t result = qword_1E9CD5F80;
  if (!qword_1E9CD5F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F80);
  }
  return result;
}

unint64_t sub_1B3A395EC()
{
  unint64_t result = qword_1E9CD5F88;
  if (!qword_1E9CD5F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F88);
  }
  return result;
}

unint64_t sub_1B3A39644()
{
  unint64_t result = qword_1E9CD5F90;
  if (!qword_1E9CD5F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F90);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlanSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PlanSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A397F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSource()
{
  return &type metadata for PlanSource;
}

ValueMetadata *type metadata accessor for KDebugBufferSize()
{
  return &type metadata for KDebugBufferSize;
}

uint64_t destroy for PlanSettings(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 160);
  unint64_t v3 = *(void *)(a1 + 168);

  return sub_1B39B0D88(v2, v3);
}

uint64_t initializeWithCopy for PlanSettings(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v6 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  unint64_t v7 = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B39B396C(v6, v7);
  *(void *)(a1 + 160) = v6;
  *(void *)(a1 + 168) = v7;
  return a1;
}

uint64_t assignWithCopy for PlanSettings(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v5 = *(long long *)((char *)a2 + 104);
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v5;
  char v6 = *((unsigned char *)a2 + 144);
  *(_OWORD *)(a1 + 128) = a2[8];
  *(unsigned char *)(a1 + 144) = v6;
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)a2 + 20);
  unint64_t v7 = *((void *)a2 + 21);
  sub_1B39B396C(v8, v7);
  uint64_t v9 = *(void *)(a1 + 160);
  unint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = v7;
  sub_1B39B0D88(v9, v10);
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for PlanSettings(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a1 + 160);
  unint64_t v7 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_1B39B0D88(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlanSettings(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanSettings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings()
{
  return &type metadata for PlanSettings;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfSampler()
{
  return &type metadata for PlanSettings.KPerfSampler;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfAction()
{
  return &type metadata for PlanSettings.KPerfAction;
}

uint64_t storeEnumTagSinglePayload for PlanSettings.KPerfTimer(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfTimer()
{
  return &type metadata for PlanSettings.KPerfTimer;
}

void *assignWithCopy for PlanSettings.KPerfKDebugTrigger(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PlanSettings.KPerfKDebugTrigger(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlanSettings.KPerfKDebugTrigger(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanSettings.KPerfKDebugTrigger(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfKDebugTrigger()
{
  return &type metadata for PlanSettings.KPerfKDebugTrigger;
}

uint64_t storeEnumTagSinglePayload for PlanSettings.KPerfPET(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfPET()
{
  return &type metadata for PlanSettings.KPerfPET;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfPETMode()
{
  return &type metadata for PlanSettings.KPerfPETMode;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfLazyTrigger()
{
  return &type metadata for PlanSettings.KPerfLazyTrigger;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfLazyTrigger.KPerfLazyKind()
{
  return &type metadata for PlanSettings.KPerfLazyTrigger.KPerfLazyKind;
}

uint64_t assignWithCopy for PlanSettings.ProviderEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for PlanSettings.ProviderEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlanSettings.ProviderEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanSettings.ProviderEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.ProviderEntry()
{
  return &type metadata for PlanSettings.ProviderEntry;
}

uint64_t assignWithCopy for PlanLayer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v5;
  char v6 = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = v6;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 184);
  unint64_t v7 = *(void *)(a2 + 192);
  sub_1B39B396C(v8, v7);
  uint64_t v9 = *(void *)(a1 + 184);
  unint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 192) = v7;
  sub_1B39B0D88(v9, v10);
  return a1;
}

uint64_t assignWithTake for PlanLayer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a1 + 184);
  unint64_t v8 = *(void *)(a1 + 192);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  sub_1B39B0D88(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlanLayer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanLayer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanLayer()
{
  return &type metadata for PlanLayer;
}

uint64_t destroy for Plan(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B39B0D88(*(void *)(a1 + 272), *(void *)(a1 + 280));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Plan(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  uint64_t v13 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  unint64_t v16 = *(void *)(a2 + 280);
  uint64_t v17 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B39B396C(v17, v16);
  *(void *)(a1 + 272) = v17;
  *(void *)(a1 + 280) = v16;
  uint64_t v14 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v14;
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Plan(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v5;
  char v6 = *(unsigned char *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = v6;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 272);
  unint64_t v8 = *(void *)(a2 + 280);
  sub_1B39B396C(v7, v8);
  uint64_t v9 = *(void *)(a1 + 272);
  unint64_t v10 = *(void *)(a1 + 280);
  *(void *)(a1 + 272) = v7;
  *(void *)(a1 + 280) = v8;
  sub_1B39B0D88(v9, v10);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  return a1;
}

void *__swift_memcpy321_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x141uLL);
}

uint64_t assignWithTake for Plan(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1 + 272);
  unint64_t v11 = *(void *)(a1 + 280);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  sub_1B39B0D88(v10, v11);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  return a1;
}

uint64_t getEnumTagSinglePayload for Plan(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 321)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Plan(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(unsigned char *)(result + 320) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 321) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 321) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Plan()
{
  return &type metadata for Plan;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfLazyTrigger.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfLazyTrigger.CodingKeys;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfPET.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfPET.CodingKeys;
}

unsigned char *sub_1B3A3AAC8(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

uint64_t _s6ktrace12PlanSettingsV12KPerfPETModeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unint64_t sub_1B3A3ABB8()
{
  unint64_t result = qword_1E9CD9F70[0];
  if (!qword_1E9CD9F70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD9F70);
  }
  return result;
}

unint64_t sub_1B3A3AC10()
{
  unint64_t result = qword_1E9CDA180[0];
  if (!qword_1E9CDA180[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDA180);
  }
  return result;
}

unint64_t sub_1B3A3AC68()
{
  unint64_t result = qword_1E9CDA390[0];
  if (!qword_1E9CDA390[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDA390);
  }
  return result;
}

unint64_t sub_1B3A3ACC0()
{
  unint64_t result = qword_1E9CDA5A0[0];
  if (!qword_1E9CDA5A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDA5A0);
  }
  return result;
}

unint64_t sub_1B3A3AD18()
{
  unint64_t result = qword_1E9CDA7B0[0];
  if (!qword_1E9CDA7B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDA7B0);
  }
  return result;
}

unint64_t sub_1B3A3AD70()
{
  unint64_t result = qword_1E9CDA9C0[0];
  if (!qword_1E9CDA9C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDA9C0);
  }
  return result;
}

unint64_t sub_1B3A3ADC8()
{
  unint64_t result = qword_1E9CDABD0[0];
  if (!qword_1E9CDABD0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDABD0);
  }
  return result;
}

unint64_t sub_1B3A3AE20()
{
  unint64_t result = qword_1E9CDADE0[0];
  if (!qword_1E9CDADE0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDADE0);
  }
  return result;
}

unint64_t sub_1B3A3AE78()
{
  unint64_t result = qword_1E9CDAEF0;
  if (!qword_1E9CDAEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDAEF0);
  }
  return result;
}

unint64_t sub_1B3A3AED0()
{
  unint64_t result = qword_1E9CDAEF8[0];
  if (!qword_1E9CDAEF8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDAEF8);
  }
  return result;
}

unint64_t sub_1B3A3AF28()
{
  unint64_t result = qword_1E9CDAF80;
  if (!qword_1E9CDAF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDAF80);
  }
  return result;
}

unint64_t sub_1B3A3AF80()
{
  unint64_t result = qword_1E9CDAF88[0];
  if (!qword_1E9CDAF88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDAF88);
  }
  return result;
}

unint64_t sub_1B3A3AFD8()
{
  unint64_t result = qword_1E9CDB010;
  if (!qword_1E9CDB010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDB010);
  }
  return result;
}

unint64_t sub_1B3A3B030()
{
  unint64_t result = qword_1E9CDB018[0];
  if (!qword_1E9CDB018[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDB018);
  }
  return result;
}

unint64_t sub_1B3A3B088()
{
  unint64_t result = qword_1E9CDB0A0;
  if (!qword_1E9CDB0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDB0A0);
  }
  return result;
}

unint64_t sub_1B3A3B0E0()
{
  unint64_t result = qword_1E9CDB0A8[0];
  if (!qword_1E9CDB0A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDB0A8);
  }
  return result;
}

unint64_t sub_1B3A3B138()
{
  unint64_t result = qword_1E9CDB130;
  if (!qword_1E9CDB130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDB130);
  }
  return result;
}

unint64_t sub_1B3A3B190()
{
  unint64_t result = qword_1E9CDB138[0];
  if (!qword_1E9CDB138[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDB138);
  }
  return result;
}

unint64_t sub_1B3A3B1E8()
{
  unint64_t result = qword_1E9CDB1C0;
  if (!qword_1E9CDB1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDB1C0);
  }
  return result;
}

unint64_t sub_1B3A3B240()
{
  unint64_t result = qword_1E9CDB1C8[0];
  if (!qword_1E9CDB1C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDB1C8);
  }
  return result;
}

unint64_t sub_1B3A3B298()
{
  unint64_t result = qword_1E9CDB250;
  if (!qword_1E9CDB250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDB250);
  }
  return result;
}

unint64_t sub_1B3A3B2F0()
{
  unint64_t result = qword_1E9CDB258[0];
  if (!qword_1E9CDB258[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDB258);
  }
  return result;
}

unint64_t sub_1B3A3B348()
{
  unint64_t result = qword_1E9CDB2E0;
  if (!qword_1E9CDB2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDB2E0);
  }
  return result;
}

unint64_t sub_1B3A3B3A0()
{
  unint64_t result = qword_1E9CDB2E8[0];
  if (!qword_1E9CDB2E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDB2E8);
  }
  return result;
}

unint64_t sub_1B3A3B3F4()
{
  unint64_t result = qword_1E9CD5F98;
  if (!qword_1E9CD5F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5F98);
  }
  return result;
}

double sub_1B3A3B448(uint64_t a1)
{
  *(unsigned char *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1B3A3B47C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v4 = *(void *)(a1 + 208);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B39B0D88(v2, v4);
  return a1;
}

double sub_1B3A3B53C(uint64_t a1)
{
  *(void *)(a1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_1B3A3B560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B39B0D88(a24, a25);
  }
}

void *sub_1B3A3B618(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24]);
  return a1;
}

void sub_1B3A3B68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B39B396C(a24, a25);
  }
}

unint64_t sub_1B3A3B744()
{
  unint64_t result = qword_1E9CD6018;
  if (!qword_1E9CD6018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6018);
  }
  return result;
}

unint64_t sub_1B3A3B798()
{
  unint64_t result = qword_1E9CD6028;
  if (!qword_1E9CD6028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6028);
  }
  return result;
}

unint64_t sub_1B3A3B7EC()
{
  unint64_t result = qword_1E9CD6038;
  if (!qword_1E9CD6038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6038);
  }
  return result;
}

unint64_t sub_1B3A3B840()
{
  unint64_t result = qword_1E9CD6040;
  if (!qword_1E9CD6040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6040);
  }
  return result;
}

unint64_t sub_1B3A3B894()
{
  unint64_t result = qword_1E9CD6050;
  if (!qword_1E9CD6050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6050);
  }
  return result;
}

unint64_t sub_1B3A3B8E8()
{
  unint64_t result = qword_1E9CD6058;
  if (!qword_1E9CD6058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6058);
  }
  return result;
}

unint64_t sub_1B3A3B93C()
{
  unint64_t result = qword_1E9CD6068;
  if (!qword_1E9CD6068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6068);
  }
  return result;
}

unint64_t sub_1B3A3B990()
{
  unint64_t result = qword_1E9CD6090;
  if (!qword_1E9CD6090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6090);
  }
  return result;
}

unint64_t sub_1B3A3B9E4()
{
  unint64_t result = qword_1E9CD60B8;
  if (!qword_1E9CD60B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD60B8);
  }
  return result;
}

unint64_t sub_1B3A3BA38()
{
  unint64_t result = qword_1E9CD60E0;
  if (!qword_1E9CD60E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD60E0);
  }
  return result;
}

uint64_t StaticString.charPtr.getter(uint64_t result, uint64_t a2, char a3)
{
  if (a3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (!result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1B3A3BAAC()
{
  uint64_t result = sub_1B3A700F0();
  qword_1E9CDCD10 = result;
  return result;
}

uint64_t *sub_1B3A3BACC()
{
  if (qword_1E9CDB370 != -1) {
    swift_once();
  }
  return &qword_1E9CDCD10;
}

uint64_t sub_1B3A3BB18()
{
  uint64_t result = sub_1B3A70100();
  qword_1E9CDCD18 = result;
  return result;
}

uint64_t *sub_1B3A3BB38()
{
  if (qword_1E9CDB378 != -1) {
    swift_once();
  }
  return &qword_1E9CDCD18;
}

uint64_t sub_1B3A3BB84(char *a1, char *a2)
{
  return sub_1B3A3BB90(*a1, *a2);
}

uint64_t sub_1B3A3BB90(char a1, char a2)
{
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 114;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 11122;
      break;
    case 2:
      uint64_t v4 = 119;
      break;
    case 3:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 11127;
      break;
    case 4:
      uint64_t v4 = 97;
      break;
    case 5:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 11105;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 114;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 11122) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      if (v4 != 119) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 11127) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v6 = 97;
      goto LABEL_15;
    case 5:
      unint64_t v5 = 0xE200000000000000;
      if (v4 != 11105) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v4 != v6) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_1B3A70D20();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1B3A3BD00()
{
  return sub_1B3A3BD08();
}

uint64_t sub_1B3A3BD08()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A3BDCC()
{
  sub_1B3A70360();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A3BE78()
{
  return sub_1B3A3BE80();
}

uint64_t sub_1B3A3BE80()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A3BF40@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B3A3F23C();
  *a1 = result;
  return result;
}

void sub_1B3A3BF70(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 114;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 11122;
      goto LABEL_3;
    case 2:
      *a1 = 119;
      a1[1] = 0xE100000000000000;
      break;
    case 3:
      *a1 = 11127;
      a1[1] = 0xE200000000000000;
      break;
    case 4:
      *a1 = 97;
      a1[1] = 0xE100000000000000;
      break;
    case 5:
      *a1 = 11105;
      a1[1] = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

FILE *sub_1B3A3BFFC()
{
  uint64_t v0 = sub_1B3A70320();
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_1B3A70320();
  swift_bridgeObjectRelease();
  unint64_t v2 = fopen((const char *)(v0 + 32), (const char *)(v1 + 32));
  swift_release();
  swift_release();
  return v2;
}

FILE *sub_1B3A3C0EC(FILE *a1)
{
  int v1 = fileno(a1);
  int v2 = dup(v1);
  if (v2 < 0) {
    return 0;
  }
  uint64_t result = fdopen(v2, "a");
  if (!result) {
    __break(1u);
  }
  return result;
}

FILE *sub_1B3A3C12C(FILE *a1)
{
  int v2 = fileno(a1);
  int v3 = dup(v2);
  if ((v3 & 0x80000000) == 0)
  {
    int v4 = v3;
    uint64_t result = fopen("/dev/null", "a");
    if (!result) {
      return result;
    }
    int v6 = fileno(result);
    int v7 = fileno(a1);
    if ((dup2(v6, v7) & 0x80000000) == 0)
    {
      uint64_t result = fdopen(v4, "a");
      if (result) {
        return result;
      }
      __break(1u);
    }
  }
  return 0;
}

uint64_t sub_1B3A3C1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  uint64_t v8 = sub_1B3A3F288(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v8;
}

char *sub_1B3A3C260@<X0>(const char *a1@<X0>, char **a2@<X8>)
{
  uint64_t result = strdup(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B3A3C290(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v40 - v13;
  unint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_1B3A70730();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  long long v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  int64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  BOOL v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_1B3A704C0();
  uint64_t v61 = sub_1B3A70A50();
  uint64_t v56 = sub_1B3A70A60();
  sub_1B3A70A30();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = sub_1B3A704B0();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    unint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_1B3A707B0();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_1B3A70A40();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  sub_1B3A707B0();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    char v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    int64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    unint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    unint64_t v39 = v41;
    char v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_1B3A70A40();
      sub_1B3A707B0();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t sub_1B3A3C98C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      int v4 = *(void **)(v1 + 8 * i + 32);
      if (v4) {
        free(v4);
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_1B3A3CA38(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1B3A3CA44()
{
  return 0;
}

uint64_t sub_1B3A3CA4C()
{
  return 2;
}

uint64_t *sub_1B3A3CA54()
{
  return sub_1B3A3E2A4(*v0);
}

uint64_t **sub_1B3A3CA5C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A3CA64(a1, a2, a3, *v3);
}

uint64_t **sub_1B3A3CA64(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a2) {
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_11:
    uint64_t v5 = a3;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = *a4;
    if (*a4)
    {
      uint64_t v5 = 0;
      int v6 = a4 + 1;
      while (1)
      {
        *(void *)(a2 + 8 * v5) = v4;
        if (a3 - 1 == v5) {
          break;
        }
        a4 = v6;
        uint64_t v7 = *v6++;
        uint64_t v4 = v7;
        ++v5;
        if (!v7) {
          goto LABEL_12;
        }
      }
      a4 = v6;
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v5 = 0;
LABEL_12:
    *uint64_t result = a4;
    return (uint64_t **)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3A3CAC4()
{
  return sub_1B3A704E0();
}

void sub_1B3A3CAE8(void *a1@<X8>)
{
  uint64_t v2 = **v1;
  if (v2) {
    ++*v1;
  }
  *a1 = v2;
}

uint64_t sub_1B3A3CB04()
{
  sub_1B3A067C4(v0, (uint64_t)&v5);
  if (v6)
  {
    uint64_t v1 = v5;
    sub_1B3A709B0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v4 = v1;
    sub_1B3A703A0();
  }
  else
  {
    uint64_t v2 = v5;
    sub_1B3A709B0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v4 = v2;
  }
  sub_1B3A703A0();
  return v4;
}

uint64_t sub_1B3A3CC70()
{
  sub_1B3A067C4(v0, (uint64_t)v2);
  return sub_1B3A3CB04();
}

unint64_t sub_1B3A3CCA8(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v5 = 115;
  if ((a3 & 1) == 0) {
    unint64_t v5 = 0xD000000000000010;
  }
  unint64_t v6 = 0x80000001B3A7B350;
  if (a3) {
    unint64_t v6 = 0xE100000000000000;
  }
  unint64_t v47 = v5;
  unint64_t v48 = v6;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
LABEL_23:
    sub_1B3A3F640();
    swift_allocError();
    *(void *)uint64_t v32 = a1;
    *(void *)(v32 + 8) = a2;
    *(void *)(v32 + 16) = v47;
    *(void *)(v32 + 24) = v48;
    *(unsigned char *)(v32 + 32) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  uint64_t v9 = 4 * v7;
  unint64_t v10 = 15;
  while (1)
  {
    uint64_t v11 = sub_1B3A70480();
    uint64_t v13 = v12;
    if ((sub_1B3A70240() & 1) == 0 && (v11 != 46 || v13 != 0xE100000000000000)) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_10:
    unint64_t v10 = sub_1B3A70380();
    if (v9 == v10 >> 14) {
      goto LABEL_23;
    }
  }
  char v14 = sub_1B3A70D20();
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1B3A704A0();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1B3A16E0C(v10, a1, a2);
  unint64_t v45 = v23;
  unint64_t v46 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_1B3A705C0();
  if (v29)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x1B3EBD660](v15, v17, v19, v21);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    sub_1B3A3F640();
    swift_allocError();
    *(void *)uint64_t v36 = v33;
    *(void *)(v36 + 8) = v35;
    *(void *)(v36 + 16) = 0;
    *(void *)(v36 + 24) = 0;
    *(unsigned char *)(v36 + 32) = 0;
    return swift_willThrow();
  }
  double v30 = *(double *)&v28;
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0 && (sub_1B3A3F694(v46, v45, v25, v27, 115, 0xE100000000000000) & 1) == 0)
  {
    uint64_t v38 = MEMORY[0x1B3EBD660](v46, v45, v25, v27);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    sub_1B3A3F640();
    swift_allocError();
    *(void *)uint64_t v41 = v38;
    *(void *)(v41 + 8) = v40;
    *(_OWORD *)(v41 + 16) = xmmword_1B3A759A0;
LABEL_33:
    *(unsigned char *)(v41 + 32) = 2;
    return swift_willThrow();
  }
  if (sub_1B3A3F70C(29550, 0xE200000000000000, v46, v45, v25, v27))
  {
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if ((~*(void *)&v30 & 0x7FF0000000000000) != 0)
    {
      if (v30 > -1.0)
      {
        if (v30 < 1.84467441e19) {
          return (unint64_t)v30;
        }
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_47;
  }
  if ((sub_1B3A3F70C(7583170, 0xA300000000000000, v46, v45, v25, v27) & 1) != 0
    || (sub_1B3A3F70C(29557, 0xE200000000000000, v46, v45, v25, v27) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    double v37 = v30 * 1000.0;
    if ((~COERCE__INT64(v30 * 1000.0) & 0x7FF0000000000000) == 0) {
      goto LABEL_48;
    }
    if (v37 <= -1.0)
    {
LABEL_49:
      __break(1u);
    }
    else if (v37 < 1.84467441e19)
    {
      return (unint64_t)v37;
    }
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if ((sub_1B3A3F70C(29549, 0xE200000000000000, v46, v45, v25, v27) & 1) == 0)
  {
LABEL_39:
    if (sub_1B3A3F70C(115, 0xE100000000000000, v46, v45, v25, v27))
    {
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      double v37 = v30 * 1000000000.0;
      if ((~COERCE__INT64(v30 * 1000000000.0) & 0x7FF0000000000000) == 0)
      {
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      if (v37 <= -1.0)
      {
LABEL_54:
        __break(1u);
        return result;
      }
      if (v37 < 1.84467441e19) {
        return (unint64_t)v37;
      }
      __break(1u);
    }
    uint64_t v42 = MEMORY[0x1B3EBD660](v46, v45, v25, v27);
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    sub_1B3A3F640();
    swift_allocError();
    *(void *)uint64_t v41 = v42;
    *(void *)(v41 + 8) = v44;
    *(void *)(v41 + 16) = v47;
    *(void *)(v41 + 24) = v48;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  double v37 = v30 * 1000000.0;
  if ((~COERCE__INT64(v30 * 1000000.0) & 0x7FF0000000000000) == 0) {
    goto LABEL_51;
  }
  if (v37 <= -1.0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v37 >= 1.84467441e19)
  {
    __break(1u);
    goto LABEL_39;
  }
  return (unint64_t)v37;
}

unint64_t sub_1B3A3D200(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
LABEL_18:
    sub_1B3A3F640();
    swift_allocError();
    *(void *)uint64_t v28 = a1;
    *(void *)(v28 + 8) = a2;
    *(_OWORD *)(v28 + 16) = xmmword_1B3A759B0;
    *(unsigned char *)(v28 + 32) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  uint64_t v5 = 4 * v4;
  unint64_t v6 = 15;
  while (1)
  {
    uint64_t v7 = sub_1B3A70480();
    uint64_t v9 = v8;
    if ((sub_1B3A70240() & 1) == 0 && (v7 != 46 || v9 != 0xE100000000000000)) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_6:
    unint64_t v6 = sub_1B3A70380();
    if (v5 == v6 >> 14) {
      goto LABEL_18;
    }
  }
  char v10 = sub_1B3A70D20();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1B3A704A0();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1B3A16E0C(v6, a1, a2);
  unint64_t v20 = v19;
  uint64_t v38 = v21;
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1B3A705C0();
  if (v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = MEMORY[0x1B3EBD660](v11, v13, v15, v17);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    sub_1B3A3F640();
    swift_allocError();
    *(void *)uint64_t v32 = v29;
    *(void *)(v32 + 8) = v31;
    *(void *)(v32 + 16) = 0;
    *(void *)(v32 + 24) = 0;
    *(unsigned char *)(v32 + 32) = 0;
    return swift_willThrow();
  }
  double v26 = *(double *)&v24;
  swift_bridgeObjectRelease();
  if ((sub_1B3A3F70C(25197, 0xE200000000000000, v18, v20, v38, v23) & 1) != 0
    || (sub_1B3A3F70C(16973, 0xE200000000000000, v18, v20, v38, v23) & 1) != 0)
  {
    unint64_t result = swift_bridgeObjectRelease();
    if ((~*(void *)&v26 & 0x7FF0000000000000) != 0)
    {
      if (v26 > -1.0)
      {
        if (v26 < 1.84467441e19) {
          return (unint64_t)v26;
        }
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  if ((sub_1B3A3F70C(25191, 0xE200000000000000, v18, v20, v38, v23) & 1) == 0
    && (sub_1B3A3F70C(16967, 0xE200000000000000, v18, v20, v38, v23) & 1) == 0)
  {
    uint64_t v34 = MEMORY[0x1B3EBD660](v18, v20, v38, v23);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    sub_1B3A3F640();
    swift_allocError();
    *(void *)uint64_t v37 = v34;
    *(void *)(v37 + 8) = v36;
    *(_OWORD *)(v37 + 16) = xmmword_1B3A759B0;
    *(unsigned char *)(v37 + 32) = 2;
    return swift_willThrow();
  }
  unint64_t result = swift_bridgeObjectRelease();
  double v33 = v26 * 1024.0;
  if ((~COERCE__INT64(v26 * 1024.0) & 0x7FF0000000000000) == 0) {
    goto LABEL_31;
  }
  if (v33 <= -1.0)
  {
LABEL_32:
    __break(1u);
  }
  else if (v33 < 1.84467441e19)
  {
    return (unint64_t)v33;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3A3D5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1B3A3F778(a1, a2, a3);
  uint64_t v7 = swift_bridgeObjectRelease();
  unint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    int64_t v9 = *(void *)(v6 + 32);
    unint64_t v10 = v8 - 1;
    if (v8 != 1)
    {
      if (v8 < 5)
      {
        unint64_t v11 = 1;
        goto LABEL_9;
      }
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v13 = vdupq_n_s64(v9);
      uint64_t v14 = (int64x2_t *)(v6 + 56);
      unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v16 = v13;
      do
      {
        int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v13, v14[-1]), (int8x16_t)v13, (int8x16_t)v14[-1]);
        int64x2_t v16 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v16, *v14), (int8x16_t)v16, *(int8x16_t *)v14);
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      int8x16_t v17 = vbslq_s8((int8x16_t)vcgtq_s64(v13, v16), (int8x16_t)v13, (int8x16_t)v16);
      uint64_t v18 = vextq_s8(v17, v17, 8uLL).u64[0];
      int64_t v9 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v17.i64[0], v18), *(int8x8_t *)v17.i8, (int8x8_t)v18);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_9:
        unint64_t v19 = v8 - v11;
        unint64_t v20 = (int64_t *)(v6 + 8 * v11 + 32);
        do
        {
          int64_t v22 = *v20++;
          int64_t v21 = v22;
          if (v9 <= v22) {
            int64_t v9 = v21;
          }
          --v19;
        }
        while (v19);
      }
    }
    MEMORY[0x1F4188790](v7);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1B3A3F3A0(v6, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B3A3F89C);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12;
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1B3A3D750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1B3A70850())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v4, a2);
    sub_1B3A705E0();
    return sub_1B3A70600();
  }
  else
  {
    uint64_t v11 = *(void *)(*(void *)(a4 + 8) + 8);
    return MEMORY[0x1F4184408](ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2, 0, a2, v11);
  }
}

uint64_t sub_1B3A3D8BC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v38 = (char *)&v36 - v7;
  uint64_t v44 = *(void *)(a1 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v42 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v36 - v10;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v43 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v37 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)&v36 - v18;
  if (sub_1B3A70840())
  {
    uint64_t v45 = 30768;
    unint64_t v46 = 0xE200000000000000;
    sub_1B39ADD78();
    sub_1B3A3D750((uint64_t)&v45, a1, MEMORY[0x1E4FBB1A0], a2);
    swift_getAssociatedConformanceWitness();
    if ((sub_1B3A705F0() & 1) == 0)
    {
      uint64_t v20 = AssociatedConformanceWitness;
      uint64_t v21 = sub_1B3A70830();
      MEMORY[0x1F4188790](v21);
      *(&v36 - 4) = v15;
      *(&v36 - 3) = v20;
      *(&v36 - 2) = 16;
      swift_getAssociatedConformanceWitness();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6108);
      sub_1B3A704D0();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v12);
      uint64_t v22 = v43;
      uint64_t v23 = (uint64_t)v37;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v37, v19, v15);
      if ((v46 & 0x100) != 0)
      {
        unint64_t v24 = sub_1B3A3F928();
        sub_1B3A3E45C(v23, 16, v15, MEMORY[0x1E4FBB808], v20, v24);
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v15);
        if (v48) {
          return 0;
        }
      }
      else
      {
        char v31 = v46;
        uint64_t v32 = v45;
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v15);
        uint64_t v47 = v32;
        if (v31) {
          return 0;
        }
      }
      return v47;
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v15);
  }
  else
  {
    uint64_t v25 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v11, v2, a1);
    if (sub_1B3A705F0())
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, a1);
    }
    else
    {
      double v26 = v38;
      uint64_t v27 = sub_1B3A70830();
      MEMORY[0x1F4188790](v27);
      *(&v36 - 4) = a1;
      *(&v36 - 3) = a2;
      *(&v36 - 2) = 10;
      uint64_t v28 = v41;
      swift_getAssociatedConformanceWitness();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6108);
      sub_1B3A704D0();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v28);
      uint64_t v29 = (uint64_t)v42;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v42, v11, a1);
      if ((v46 & 0x100) != 0)
      {
        unint64_t v30 = sub_1B3A3F928();
        sub_1B3A3E45C(v29, 10, a1, MEMORY[0x1E4FBB808], a2, v30);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, a1);
        if (v48) {
          return 0;
        }
        return v47;
      }
      char v33 = v46;
      uint64_t v34 = v45;
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, a1);
      uint64_t v47 = v34;
      if ((v33 & 1) == 0) {
        return v47;
      }
    }
  }
  return 0;
}

uint64_t sub_1B3A3DF7C()
{
  v2[1] = *MEMORY[0x1E4F143B8];
  size_t v1 = 8;
  v2[0] = 0;
  sysctlbyname("hw.memsize", v2, &v1, 0, 0);
  if ((v2[0] & 0x8000000000000000) != 0) {
    __break(1u);
  }
  return v2[0] >> 20;
}

uint64_t sub_1B3A3DFF8()
{
  return os_variant_has_internal_content();
}

uint64_t sub_1B3A3E018()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v2 = 0;
  size_t v1 = 4;
  sysctlbyname("hw.logicalcpu_max", &v2, &v1, 0, 0);
  return v2;
}

char *sub_1B3A3E08C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6150);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A3E188(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_1B3A3E1A8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B3A3E1A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6140);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

uint64_t *sub_1B3A3E2A4(uint64_t *result)
{
  uint64_t v1 = *result;
  int v2 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v3 = 0;
  if (*result)
  {
    uint64_t v4 = (void *)(MEMORY[0x1E4FBC860] + 32);
    char v5 = result + 1;
    while (1)
    {
      if (!v3)
      {
        unint64_t v6 = v2[3];
        if ((uint64_t)((v6 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_26;
        }
        int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        if (v7 <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v7;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6128);
        uint64_t v9 = (void *)swift_allocObject();
        int64_t v10 = _swift_stdlib_malloc_size(v9);
        uint64_t v11 = v10 - 32;
        if (v10 < 32) {
          uint64_t v11 = v10 - 25;
        }
        uint64_t v12 = v11 >> 3;
        void v9[2] = v8;
        v9[3] = 2 * (v11 >> 3);
        unint64_t v13 = (unint64_t)(v9 + 4);
        uint64_t v14 = v2[3] >> 1;
        if (v2[2])
        {
          if (v9 != v2 || v13 >= (unint64_t)&v2[v14 + 4]) {
            memmove(v9 + 4, v2 + 4, 8 * v14);
          }
          void v2[2] = 0;
        }
        uint64_t v4 = (void *)(v13 + 8 * v14);
        uint64_t v3 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - v14;
        unint64_t result = (uint64_t *)swift_release();
        int v2 = v9;
      }
      BOOL v16 = __OFSUB__(v3--, 1);
      if (v16) {
        break;
      }
      *v4++ = v1;
      uint64_t v17 = *v5++;
      uint64_t v1 = v17;
      if (!v17) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_21:
  unint64_t v18 = v2[3];
  if (v18 < 2) {
    return v2;
  }
  unint64_t v19 = v18 >> 1;
  BOOL v16 = __OFSUB__(v19, v3);
  uint64_t v20 = v19 - v3;
  if (!v16)
  {
    void v2[2] = v20;
    return v2;
  }
LABEL_27:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1B3A3E3E8@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v7 = *result;
  if (v7 == 43)
  {
    BOOL v8 = a2-- < 1;
    if (v8) {
      goto LABEL_15;
    }
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0;
    }
LABEL_12:
    int v9 = 0;
    return (unsigned __int8 *)sub_1B3A3E5A0(result, a2, a3, v9, a4, a5, a6);
  }
  if (v7 != 45) {
    goto LABEL_12;
  }
  BOOL v8 = a2-- < 1;
  if (!v8)
  {
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0;
    }
    int v9 = 1;
    return (unsigned __int8 *)sub_1B3A3E5A0(result, a2, a3, v9, a4, a5, a6);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1B3A3E45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *))(v12 + 16))(&v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v21 = sub_1B3A70490();
  uint64_t v22 = v13;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a2;
  sub_1B3A70730();
  sub_1B3A3EC0C((uint64_t (*)(void *, uint64_t))sub_1B3A4009C);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A3E5A0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v54 = a4;
  uint64_t v60 = a1;
  uint64_t v56 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2 - 8);
  uint64_t v53 = (char *)v47 - v12;
  uint64_t v55 = a6;
  uint64_t v13 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v47 - v21;
  MEMORY[0x1F4188790](v20);
  double v26 = (char *)v47 - v25;
  if (!a2)
  {
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
    uint64_t v46 = v56;
    return v45(v46, 1, 1, a5);
  }
  uint64_t v58 = v24;
  uint64_t v61 = v23;
  int v27 = a3 + 48;
  int v28 = a3 + 55;
  int v29 = a3 + 87;
  if (a3 <= 10) {
    int v29 = 97;
  }
  int v48 = v29;
  if (a3 <= 10) {
    int v28 = 65;
  }
  int v49 = v28;
  uint64_t v65 = a3;
  if (a3 > 10) {
    int v27 = 58;
  }
  int v51 = v27;
  sub_1B39AF9BC();
  uint64_t v59 = v26;
  uint64_t v57 = v13;
  sub_1B3A70870();
  swift_getAssociatedConformanceWitness();
  sub_1B3A70D40();
  sub_1B3A70D10();
  char v31 = v60;
  if (!v60)
  {
    uint64_t v35 = *(void (**)(char *, uint64_t))(v61 + 8);
    uint64_t v42 = v56;
LABEL_27:
    ((void (*)(char *, uint64_t, uint64_t))v35)(v59, a5, v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v42, v22, a5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v42, 0, 1, a5);
  }
  uint64_t v50 = a2;
  uint64_t v30 = v61;
  uint64_t v32 = (void (**)(char *, uint64_t))(v61 + 8);
  char v33 = (void (**)(char *, char *, uint64_t))(v61 + 32);
  v47[1] = (v61 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  while (1)
  {
    unsigned int v34 = *v31;
    if (v34 >= 0x30 && v34 < v51)
    {
      uint64_t v60 = v31;
      char v62 = v34 - 48;
      sub_1B3A400C0();
      goto LABEL_19;
    }
    if (v34 >= 0x41 && v34 < v49)
    {
      uint64_t v60 = v31;
      char v63 = v34 - 55;
      sub_1B3A400C0();
      goto LABEL_19;
    }
    if (v34 < 0x61 || v34 >= v48) {
      break;
    }
    uint64_t v60 = v31;
    char v64 = v34 - 87;
    sub_1B3A400C0();
LABEL_19:
    sub_1B3A70870();
    int v52 = sub_1B3A70AD0();
    uint64_t v35 = *v32;
    (*v32)(v22, a5);
    uint64_t v36 = *v33;
    (*v33)(v22, v18, a5);
    uint64_t v37 = v18;
    uint64_t v38 = v58;
    if (v54) {
      int v39 = sub_1B3A70AE0();
    }
    else {
      int v39 = sub_1B3A70AC0();
    }
    int v40 = v39;
    v35(v38, a5);
    v35(v22, a5);
    uint64_t v41 = v53;
    v36(v53, v37, a5);
    v36(v22, v41, a5);
    if ((v52 | v40))
    {
      v35(v22, a5);
      v35(v59, a5);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v56, 1, 1, a5);
    }
    uint64_t v18 = v37;
    uint64_t v30 = v61;
    char v31 = v60 + 1;
    if (!--v50)
    {
      uint64_t v42 = v56;
      goto LABEL_27;
    }
  }
  uint64_t v44 = *(void (**)(char *, uint64_t))(v30 + 8);
  v44(v22, a5);
  v44(v59, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v56, 1, 1, a5);
}

unsigned __int8 *sub_1B3A3EB98@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  int v6 = *result;
  if (v6 == 43)
  {
    BOOL v7 = a2-- < 1;
    if (v7) {
      goto LABEL_15;
    }
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0;
    }
LABEL_12:
    int v8 = 0;
    return (unsigned __int8 *)sub_1B3A3E5A0(result, a2, a3, v8, a4, a5, a6);
  }
  if (v6 != 45) {
    goto LABEL_12;
  }
  BOOL v7 = a2-- < 1;
  if (!v7)
  {
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0;
    }
    int v8 = 1;
    return (unsigned __int8 *)sub_1B3A3E5A0(result, a2, a3, v8, a4, a5, a6);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1B3A3EC0C(uint64_t (*a1)(void *, uint64_t))
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    char v5 = v10;
    return a1(v5, v6);
  }
  uint64_t v3 = sub_1B3A3ECD4();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t *v1 = v3;
  v1[1] = v8;
  unint64_t v4 = v8;
  if ((v8 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    char v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    char v5 = (void *)sub_1B3A70A20();
  }
  return a1(v5, v6);
}

uint64_t sub_1B3A3ECD4()
{
  unint64_t v0 = sub_1B3A704A0();
  uint64_t v4 = sub_1B3A3ED54(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B3A3ED54(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_1B3A3EEAC(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = sub_1B39B3344(v9, 0);
      unint64_t v12 = sub_1B3A3EFAC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_1B3A70A20();
LABEL_4:
        JUMPOUT(0x1B3EBD680);
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x1B3EBD680](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1B3EBD680]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1B3A3EEAC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    unint64_t result = sub_1B3A3F1C0(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    unint64_t result = sub_1B3A3F1C0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return sub_1B3A70400();
}

unint64_t sub_1B3A3EFAC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_1B3A3F1C0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_1B3A70410();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = sub_1B3A70A20();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_1B3A3F1C0(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_1B3A703E0();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1B3A3F1C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_1B3A70430();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1B3EBD720](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1B3A3F23C()
{
  unint64_t v0 = sub_1B3A70B80();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B3A3F288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  void v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  unint64_t v8 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6148);
  uint64_t v10 = sub_1B3A3C290((void (*)(char *, char *))sub_1B3A40114, (uint64_t)v15, a2, v8, MEMORY[0x1E4FBC248], a3, MEMORY[0x1E4FBC278], v9);
  swift_bridgeObjectRetain();
  uint64_t v11 = (char *)v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = sub_1B3A3E08C(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
  }
  unint64_t v13 = *((void *)v11 + 2);
  unint64_t v12 = *((void *)v11 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v11 = sub_1B3A3E08C((char *)(v12 > 1), v13 + 1, 1, v11);
  }
  *((void *)v11 + 2) = v13 + 1;
  *(void *)&v11[8 * v13 + 32] = 0;
  swift_bridgeObjectRelease();
  *(void *)(v5 + 16) = v11;
  return v5;
}

uint64_t sub_1B3A3F3A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    int64_t v7 = *(void *)(a1 + 16);
  }
  else {
    int64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v40 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v7, 0);
  int64_t v32 = v7;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  unint64_t v36 = v5;
  int64_t v33 = v6;
  if (v7)
  {
    unint64_t v8 = (uint64_t *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v10 = (uint64_t *)(a2 + 40);
    while (v5)
    {
      if (!v6) {
        goto LABEL_26;
      }
      uint64_t v11 = *v8;
      uint64_t v12 = *(v10 - 1);
      uint64_t v13 = *v10;
      swift_bridgeObjectRetain();
      uint64_t v39 = a3(v11, v12, v13);
      uint64_t v15 = v14;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(v40 + 16);
      unint64_t v16 = *(void *)(v40 + 24);
      if (v17 >= v16 >> 1) {
        uint64_t result = (uint64_t)sub_1B3A052F4((char *)(v16 > 1), v17 + 1, 1);
      }
      *(void *)(v40 + 16) = v17 + 1;
      uint64_t v18 = v40 + 16 * v17;
      --v6;
      *(void *)(v18 + 32) = v39;
      *(void *)(v18 + 40) = v15;
      --v5;
      v10 += 2;
      ++v8;
      if (!--v7) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_13:
    if (v36 <= v33)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v40;
    }
    uint64_t v19 = 0;
    if (v32 <= v33) {
      int64_t v20 = v33;
    }
    else {
      int64_t v20 = v32;
    }
    int64_t v37 = v20 - v32;
    unint64_t v21 = v36 - v32;
    uint64_t v22 = (uint64_t *)(v35 + 16 * v32 + 40);
    while (v21 != v19)
    {
      if (v33 - v32 == v19) {
        goto LABEL_24;
      }
      if (v37 == v19) {
        goto LABEL_28;
      }
      uint64_t v23 = *(void *)(v34 + 8 * v32 + 32 + 8 * v19);
      uint64_t v24 = *(v22 - 1);
      uint64_t v25 = *v22;
      swift_bridgeObjectRetain();
      uint64_t v26 = a3(v23, v24, v25);
      uint64_t v28 = v27;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v30 = *(void *)(v40 + 16);
      unint64_t v29 = *(void *)(v40 + 24);
      if (v30 >= v29 >> 1) {
        uint64_t result = (uint64_t)sub_1B3A052F4((char *)(v29 > 1), v30 + 1, 1);
      }
      *(void *)(v40 + 16) = v30 + 1;
      uint64_t v31 = v40 + 16 * v30;
      *(void *)(v31 + 32) = v26;
      *(void *)(v31 + 40) = v28;
      ++v19;
      v22 += 2;
      if (v21 == v19) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1B3A3F640()
{
  unint64_t result = qword_1E9CD60F8;
  if (!qword_1E9CD60F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD60F8);
  }
  return result;
}

uint64_t sub_1B3A3F694(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6) {
    return 1;
  }
  else {
    return sub_1B3A70CF0() & 1;
  }
}

uint64_t sub_1B3A3F70C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16) {
    return 1;
  }
  else {
    return sub_1B3A70CF0() & 1;
  }
}

uint64_t sub_1B3A3F778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    sub_1B3A3E188(0, v3, 0);
    uint64_t v4 = v15;
    unint64_t v8 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v9 = *(v8 - 1);
      unint64_t v10 = *v8;
      swift_bridgeObjectRetain();
      sub_1B3A15E10(a2, a3, v9, v10);
      uint64_t v11 = sub_1B3A70420();
      swift_bridgeObjectRelease();
      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        sub_1B3A3E188((char *)(v12 > 1), v13 + 1, 1);
      }
      v8 += 2;
      *(void *)(v15 + 16) = v13 + 1;
      *(void *)(v15 + 8 * v13 + 32) = v11;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B3A3F89C(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
  }
  else if (!__OFSUB__(v5, result))
  {
    uint64_t v6 = MEMORY[0x1B3EBD790](32, 0xE100000000000000, v5 - result);
    sub_1B3A703A0();
    return v6;
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1B3A3F910@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B3A3F97C(a1, a2, a3);
}

unint64_t sub_1B3A3F928()
{
  unint64_t result = qword_1E9CD6100;
  if (!qword_1E9CD6100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6100);
  }
  return result;
}

unsigned __int8 *sub_1B3A3F97C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 32);
  unint64_t v8 = sub_1B3A3F928();
  return sub_1B3A3E3E8(a1, a2, v7, MEMORY[0x1E4FBB808], v8, a3);
}

uint64_t sub_1B3A3F9F8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

unint64_t sub_1B3A3FA34()
{
  unint64_t result = qword_1E9CD6110;
  if (!qword_1E9CD6110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6110);
  }
  return result;
}

unint64_t sub_1B3A3FA8C()
{
  unint64_t result = qword_1E9CD6118;
  if (!qword_1E9CD6118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6118);
  }
  return result;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for StandardFile()
{
  return &type metadata for StandardFile;
}

unsigned char *storeEnumTagSinglePayload for StandardFile.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A3FBD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StandardFile.Mode()
{
  return &type metadata for StandardFile.Mode;
}

uint64_t type metadata accessor for CStringArray()
{
  return self;
}

ValueMetadata *type metadata accessor for NullTerminatedCStringArray()
{
  return &type metadata for NullTerminatedCStringArray;
}

uint64_t _s6ktrace12StandardFileVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t _s6ktrace12StandardFileVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)unint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NullTerminatedCStringArrayIterator()
{
  return &type metadata for NullTerminatedCStringArrayIterator;
}

uint64_t sub_1B3A3FCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (!a5)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SuffixedNumberError(uint64_t a1)
{
  return sub_1B3A3FD48(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_1B3A3FD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (!a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SuffixedNumberError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1B3A3FCD0(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SuffixedNumberError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1B3A3FCD0(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1B3A3FD48(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for SuffixedNumberError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1B3A3FD48(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SuffixedNumberError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SuffixedNumberError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SuffixedNumberError()
{
  return &type metadata for SuffixedNumberError;
}

ValueMetadata *type metadata accessor for CurrentSystem()
{
  return &type metadata for CurrentSystem;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_1B3A3FFB4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 152)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1B3A40010(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 152) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

void type metadata accessor for __sFILE(uint64_t a1)
{
}

unsigned __int8 *sub_1B3A4009C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B3A3EB98(a1, a2, v3[6], v3[3], v3[5], a3);
}

unint64_t sub_1B3A400C0()
{
  unint64_t result = qword_1E9CD6138;
  if (!qword_1E9CD6138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6138);
  }
  return result;
}

uint64_t sub_1B3A40114()
{
  return sub_1B3A70820();
}

void type metadata accessor for __sbuf(uint64_t a1)
{
}

unint64_t sub_1B3A401CC(unint64_t result, unint64_t a2)
{
  double v2 = (double)result * (double)HIDWORD(a2) / (double)a2;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.84467441e19) {
    return (unint64_t)v2;
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_1B3A40228(unint64_t a1, unint64_t a2)
{
  return (double)a1 * (double)a2 / (double)HIDWORD(a2) / 1000000000.0;
}

unint64_t sub_1B3A40258(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for EventTimebase(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EventTimebase(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for EventTimebase()
{
  return &type metadata for EventTimebase;
}

unint64_t sub_1B3A402C8()
{
  uint64_t v1 = sub_1B3A6FF40();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  int v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1B3A70A00();
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v65 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1B3A70A10();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (long long *)((char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v65 - v12;
  uint64_t v14 = type metadata accessor for KTraceRecordError();
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B3A39044(v0, (uint64_t)v16);
  unint64_t v17 = 0xD00000000000003DLL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      int v24 = *(_DWORD *)v16;
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = 0xD000000000000012;
      v68[1] = 0x80000001B3A7BA00;
      LODWORD(v71) = v24;
      goto LABEL_15;
    case 2u:
      int v25 = *((_DWORD *)v16 + 4);
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = 0x20667265706BLL;
      v68[1] = 0xE600000000000000;
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      if (strerror(v25)) {
        goto LABEL_34;
      }
      __break(1u);
LABEL_8:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000022;
      uint64_t v27 = "kdebug filter element is invalid: ";
      goto LABEL_36;
    case 3u:
      goto LABEL_8;
    case 4u:
    case 0x15u:
    case 0x17u:
      uint64_t v18 = *((void *)v16 + 1);
      v68[0] = *(void *)v16;
      v68[1] = v18;
      sub_1B3A703A0();
      goto LABEL_42;
    case 5u:
    case 6u:
    case 8u:
    case 0xDu:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Du:
    case 0x1Fu:
    case 0x20u:
      uint64_t v57 = *(void *)v16;
      uint64_t v58 = *((void *)v16 + 1);
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = v57;
      v68[1] = v58;
      goto LABEL_40;
    case 7u:
      unint64_t v29 = *(void *)v16;
      unint64_t v28 = *((void *)v16 + 1);
      unint64_t v30 = &v16[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F30) + 48)];
      uint64_t v31 = v13;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v30, v7);
      (*(void (**)(long long *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
      int v32 = (*(uint64_t (**)(long long *, uint64_t))(v8 + 88))(v11, v7);
      if (v32 == *MEMORY[0x1E4FBBA70])
      {
        (*(void (**)(long long *, uint64_t))(v8 + 96))(v11, v7);
        int64_t v33 = (char *)v11 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6168) + 48);
        uint64_t v34 = v65;
        uint64_t v35 = v66;
        uint64_t v36 = v67;
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v65, v33, v67);
        v68[0] = 0;
        v68[1] = 0xE000000000000000;
        sub_1B3A709B0();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        sub_1B3A70EB0();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        sub_1B3A70A80();
        unint64_t v17 = v68[0];
        (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
LABEL_11:
        (*(void (**)(char *, uint64_t))(v8 + 8))(v31, v7);
        return v17;
      }
      if (v32 == *MEMORY[0x1E4FBBA80])
      {
        (*(void (**)(long long *, uint64_t))(v8 + 96))(v11, v7);
        uint64_t v60 = (char *)v11 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6168) + 48);
        v68[0] = 0;
        v68[1] = 0xE000000000000000;
        sub_1B3A709B0();
        swift_bridgeObjectRelease();
        v68[0] = v29;
        v68[1] = v28;
        sub_1B3A703A0();
        sub_1B3A70EB0();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        unint64_t v17 = v68[0];
        (*(void (**)(char *, uint64_t))(v8 + 8))(v31, v7);
LABEL_51:
        (*(void (**)(char *, uint64_t))(v66 + 8))(v60, v67);
        return v17;
      }
      if (v32 == *MEMORY[0x1E4FBBA68])
      {
        (*(void (**)(long long *, uint64_t))(v8 + 96))(v11, v7);
        uint64_t v60 = (char *)v11 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6170) + 48);
        sub_1B3A41964(v11, (uint64_t)v68);
        unint64_t v71 = 0;
        unint64_t v72 = 0xE000000000000000;
        sub_1B3A709B0();
        swift_bridgeObjectRelease();
        unint64_t v71 = v29;
        unint64_t v72 = v28;
        sub_1B3A703A0();
        __swift_project_boxed_opaque_existential_1(v68, v70);
        sub_1B3A70E80();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        unint64_t v17 = v71;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v31, v7);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
        goto LABEL_51;
      }
      if (v32 == *MEMORY[0x1E4FBBA78])
      {
        (*(void (**)(long long *, uint64_t))(v8 + 96))(v11, v7);
        uint64_t v61 = (uint64_t)v65;
        uint64_t v62 = v66;
        uint64_t v63 = v67;
        (*(void (**)(char *, long long *, uint64_t))(v66 + 32))(v65, v11, v67);
        v68[0] = 0;
        v68[1] = 0xE000000000000000;
        sub_1B3A709B0();
        swift_bridgeObjectRelease();
        v68[0] = v29;
        v68[1] = v28;
        sub_1B3A703A0();
        sub_1B3A4197C(v61);
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        unint64_t v17 = v68[0];
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
        goto LABEL_11;
      }
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = v29;
      v68[1] = v28;
      sub_1B3A703A0();
      unint64_t v17 = v68[0];
      char v64 = *(void (**)(char *, uint64_t))(v8 + 8);
      v64(v13, v7);
      v64((char *)v11, v7);
      return v17;
    case 9u:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      goto LABEL_21;
    case 0xAu:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[1] = 0xE700000000000000;
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      goto LABEL_21;
    case 0xBu:
      unint64_t v37 = *((void *)v16 + 2);
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      unint64_t v71 = v37;
LABEL_15:
      sub_1B3A70D00();
      goto LABEL_42;
    case 0xCu:
      unint64_t v38 = *(void *)v16;
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = 0xD000000000000025;
      v68[1] = 0x80000001B3A7B7E0;
      unint64_t v71 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5EB0);
      sub_1B3A41908();
      sub_1B39ADD78();
      sub_1B3A704F0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      goto LABEL_43;
    case 0xEu:
    case 0x1Eu:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      goto LABEL_40;
    case 0xFu:
      unint64_t v39 = *((void *)v16 + 2);
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      BYTE5(v68[1]) = 0;
      HIWORD(v68[1]) = -5120;
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      unint64_t v71 = v39;
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      goto LABEL_40;
    case 0x10u:
      int v56 = *(_DWORD *)v16;
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = 0xD000000000000016;
      v68[1] = 0x80000001B3A7B720;
      if (strerror(v56)) {
        goto LABEL_34;
      }
      goto LABEL_56;
    case 0x11u:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v26 = 0x716572206E616C70;
      unint64_t v40 = 0xEE00207365726975;
      goto LABEL_37;
    case 0x12u:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      BYTE1(v68[1]) = 0;
      WORD1(v68[1]) = 0;
      HIDWORD(v68[1]) = -402653184;
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
LABEL_21:
      sub_1B3A703A0();
      sub_1B3A703A0();
      goto LABEL_43;
    case 0x13u:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      BYTE1(v68[1]) = 0;
      WORD1(v68[1]) = 0;
      HIDWORD(v68[1]) = -402653184;
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      goto LABEL_40;
    case 0x14u:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD00000000000001FLL;
      uint64_t v27 = "additional unparsed arguments: ";
LABEL_36:
      unint64_t v40 = (unint64_t)(v27 - 32) | 0x8000000000000000;
LABEL_37:
      v68[0] = v26;
      v68[1] = v40;
      goto LABEL_42;
    case 0x16u:
      int v41 = *((_DWORD *)v16 + 4);
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      LODWORD(v71) = v41;
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      goto LABEL_40;
    case 0x1Cu:
      strcpy((char *)v68, "usage: ");
      v68[1] = 0xE700000000000000;
      goto LABEL_42;
    case 0x21u:
      unint64_t v42 = *(void *)v16;
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      unint64_t v71 = v42;
      uint64_t v43 = sub_1B3A70D00();
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      v68[0] = v43;
      v68[1] = v45;
      goto LABEL_40;
    case 0x22u:
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = 0xD000000000000015;
      v68[1] = 0x80000001B3A7B490;
      sub_1B3A703A0();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      goto LABEL_40;
    case 0x23u:
      uint64_t v47 = *(void *)v16;
      uint64_t v46 = *((void *)v16 + 1);
      int v48 = *((_DWORD *)v16 + 4);
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      unint64_t v71 = v68[0];
      unint64_t v72 = v68[1];
      v68[0] = v47;
      v68[1] = v46;
      int v69 = v48;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6160);
      sub_1B3A70A80();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      return v71;
    case 0x24u:
      int v49 = *(_DWORD *)v16;
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = 0xD000000000000014;
      v68[1] = 0x80000001B3A7B440;
      if (strerror(v49))
      {
LABEL_34:
        sub_1B3A703B0();
LABEL_42:
        sub_1B3A703A0();
LABEL_43:
        swift_bridgeObjectRelease();
      }
      else
      {
        __break(1u);
LABEL_29:
        int v50 = *(_DWORD *)v16;
        int v51 = *((_DWORD *)v16 + 1);
        int v52 = *((_DWORD *)v16 + 2);
        v68[0] = 0;
        v68[1] = 0xE000000000000000;
        sub_1B3A709B0();
        LODWORD(v71) = v50;
        uint64_t v53 = sub_1B3A70D00();
        uint64_t v55 = v54;
        swift_bridgeObjectRelease();
        v68[0] = v53;
        v68[1] = v55;
        sub_1B3A703A0();
        LODWORD(v71) = v51;
        sub_1B3A70D00();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        LODWORD(v71) = v52;
        sub_1B3A70D00();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
LABEL_40:
        sub_1B3A703A0();
      }
      return v68[0];
    case 0x25u:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v16, v1);
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = 0xD000000000000029;
      v68[1] = 0x80000001B3A7B410;
      sub_1B3A6FF20();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      unint64_t v17 = v68[0];
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return v17;
    case 0x26u:
      goto LABEL_29;
    case 0x27u:
      return v17;
    case 0x28u:
      return 0xD000000000000040;
    case 0x29u:
      return 0xD00000000000002ALL;
    default:
      unint64_t v19 = *(void *)v16;
      uint64_t v20 = *((void *)v16 + 1);
      char v21 = v16[16];
      v68[0] = 0;
      v68[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      v68[0] = 0xD000000000000013;
      v68[1] = 0x80000001B3A7BA20;
      sub_1B3A133F0(v19, v20, v21);
      uint64_t v23 = v22;
      sub_1B3A166D8(v19, v20, v21);
      if (!v23)
      {
        __break(1u);
LABEL_56:
        __break(1u);
        JUMPOUT(0x1B3A41814);
      }
      goto LABEL_42;
  }
}

uint64_t type metadata accessor for KTraceRecordError()
{
  uint64_t result = qword_1E9CDB880;
  if (!qword_1E9CDB880) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1B3A41908()
{
  unint64_t result = qword_1E9CD5EB8;
  if (!qword_1E9CD5EB8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9CD5EB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5EB8);
  }
  return result;
}

uint64_t sub_1B3A41964(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1B3A4197C(uint64_t a1)
{
  uint64_t v2 = sub_1B3A70A00();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v20 - v7;
  uint64_t v9 = sub_1B3A709E0();
  if (!v9
    || (uint64_t v10 = (void *)v9,
        uint64_t v11 = (void *)sub_1B3A6FE30(),
        v10,
        uint64_t v12 = (void *)sub_1B3A70720(),
        v11,
        !v12))
  {
    memset(v21, 0, sizeof(v21));
    uint64_t v22 = 1;
LABEL_11:
    sub_1B3A11580((uint64_t)v21, &qword_1E9CD6178);
LABEL_12:
    uint64_t v14 = 0;
    uint64_t v15 = 1;
    goto LABEL_13;
  }
  if (objc_msgSend(v12, sel_respondsToSelector_, sel___swift_objectForKeyedSubscript_))
  {
    unint64_t v23 = 0xD000000000000012;
    unint64_t v24 = 0x80000001B3A7BA80;
    id v13 = objc_msgSend(v12, sel___swift_objectForKeyedSubscript_, sub_1B3A70D50());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v13)
    {
      sub_1B3A70900();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v20, 0, sizeof(v20));
    }
    sub_1B39B4CD4((uint64_t)v20, (uint64_t)&v23, &qword_1E9CD5A50);
  }
  else
  {
    swift_unknownObjectRelease();
    unint64_t v23 = 0;
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 1;
  }
  sub_1B39B4CD4((uint64_t)&v23, (uint64_t)v21, &qword_1E9CD6178);
  if (v22 == 1) {
    goto LABEL_11;
  }
  sub_1B39B4CD4((uint64_t)v21, (uint64_t)&v23, &qword_1E9CD5A50);
  if (v26)
  {
    if (!swift_dynamicCast()) {
      goto LABEL_12;
    }
    uint64_t v15 = *((void *)&v20[0] + 1);
    uint64_t v14 = *(void *)&v20[0];
  }
  else
  {
    sub_1B3A11580((uint64_t)&v23, &qword_1E9CD5A50);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
LABEL_13:
  unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v16(v8, a1, v2);
  if (v15 == 1)
  {
    uint64_t v14 = sub_1B3A709F0();
    uint64_t v15 = v17;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v8, v2);
  v16(v6, a1, v2);
  if (!v15) {
    uint64_t v14 = sub_1B3A709F0();
  }
  v18(v6, v2);
  return v14;
}

uint64_t *sub_1B3A41CA8(uint64_t *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *((void *)a2 + 1);
        unsigned __int8 v9 = a2[16];
        sub_1B3A17914(v7, v8, v9);
        *a1 = v7;
        a1[1] = v8;
        *((unsigned char *)a1 + 16) = v9;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
      case 0x16u:
      case 0x23u:
        uint64_t v22 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v22;
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 5u:
      case 6u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0x11u:
      case 0x13u:
      case 0x14u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
        uint64_t v18 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v18;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
      case 9u:
      case 0xAu:
      case 0x12u:
      case 0x15u:
      case 0x17u:
      case 0x22u:
        uint64_t v19 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v19;
        uint64_t v20 = *((void *)a2 + 2);
        uint64_t v21 = *((void *)a2 + 3);
        a1[2] = v20;
        a1[3] = v21;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        uint64_t v12 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v12;
        swift_bridgeObjectRetain();
        uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F30) + 48);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = &a2[v13];
        uint64_t v16 = sub_1B3A70A10();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xBu:
      case 0xFu:
        uint64_t v17 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v17;
        a1[2] = *((void *)a2 + 2);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xCu:
        *a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0x25u:
        uint64_t v23 = sub_1B3A6FF40();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1B3A42388(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      unsigned __int8 v5 = *(unsigned char *)(a1 + 16);
      return sub_1B3A166D8(v3, v4, v5);
    case 2:
    case 3:
    case 5:
    case 6:
    case 8:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 19:
    case 20:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 35:
      goto LABEL_3;
    case 4:
    case 9:
    case 10:
    case 18:
    case 21:
    case 23:
    case 34:
      swift_bridgeObjectRelease();
LABEL_3:
      return swift_bridgeObjectRelease();
    case 7:
      swift_bridgeObjectRelease();
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F30) + 48);
      uint64_t v6 = sub_1B3A70A10();
      goto LABEL_11;
    case 37:
      uint64_t v6 = sub_1B3A6FF40();
LABEL_11:
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      uint64_t result = v7(a1, v6);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1B3A42544(uint64_t *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      unsigned __int8 v8 = a2[16];
      sub_1B3A17914(v6, v7, v8);
      *a1 = v6;
      a1[1] = v7;
      *((unsigned char *)a1 + 16) = v8;
      goto LABEL_11;
    case 2u:
    case 0x16u:
    case 0x23u:
      uint64_t v19 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v19;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 3u:
    case 5u:
    case 6u:
    case 8u:
    case 0xDu:
    case 0xEu:
    case 0x11u:
    case 0x13u:
    case 0x14u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
      uint64_t v15 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 4u:
    case 9u:
    case 0xAu:
    case 0x12u:
    case 0x15u:
    case 0x17u:
    case 0x22u:
      uint64_t v16 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v16;
      uint64_t v17 = *((void *)a2 + 2);
      uint64_t v18 = *((void *)a2 + 3);
      a1[2] = v17;
      a1[3] = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 7u:
      uint64_t v9 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F30) + 48);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = &a2[v10];
      uint64_t v13 = sub_1B3A70A10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      goto LABEL_11;
    case 0xBu:
    case 0xFu:
      uint64_t v14 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v14;
      a1[2] = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 0xCu:
      *a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 0x25u:
      uint64_t v20 = sub_1B3A6FF40();
      (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_1B3A42B5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1B3A390A8((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        unsigned __int8 v8 = *((unsigned char *)a2 + 16);
        sub_1B3A17914(v6, v7, v8);
        *a1 = v6;
        a1[1] = v7;
        *((unsigned char *)a1 + 16) = v8;
        goto LABEL_12;
      case 2u:
      case 0x16u:
      case 0x23u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 3u:
      case 5u:
      case 6u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0x11u:
      case 0x13u:
      case 0x14u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 4u:
      case 9u:
      case 0xAu:
      case 0x12u:
      case 0x15u:
      case 0x17u:
      case 0x22u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F30) + 48);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = sub_1B3A70A10();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        goto LABEL_12;
      case 0xBu:
      case 0xFu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 0xCu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 0x25u:
        uint64_t v13 = sub_1B3A6FF40();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *sub_1B3A432B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 37)
  {
    uint64_t v11 = sub_1B3A6FF40();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 7)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F30) + 48);
    unsigned __int8 v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1B3A70A10();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_1B3A433E4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1B3A390A8((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 37)
    {
      uint64_t v11 = sub_1B3A6FF40();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 7)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5F30) + 48);
      unsigned __int8 v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_1B3A70A10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s6ktrace8TrimNoteOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t _s6ktrace8TrimNoteOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1B3A43578()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1B3A43588()
{
  uint64_t v0 = MEMORY[0x1E4FBAD98] + 64;
  unsigned __int8 v5 = &unk_1B3A75D48;
  uint64_t v6 = MEMORY[0x1E4FBAD98] + 64;
  uint64_t v7 = &unk_1B3A75D60;
  unsigned __int8 v8 = &unk_1B3A75D78;
  uint64_t v9 = &unk_1B3A75D90;
  uint64_t v10 = &unk_1B3A75D78;
  uint64_t v11 = &unk_1B3A75D78;
  uint64_t result = sub_1B3A70A10();
  if (v2 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v12 = &v4;
    uint64_t v13 = &unk_1B3A75D78;
    uint64_t v14 = &unk_1B3A75D90;
    uint64_t v15 = &unk_1B3A75D90;
    uint64_t v16 = &unk_1B3A75DA8;
    uint64_t v17 = MEMORY[0x1E4FBAD80] + 64;
    uint64_t v18 = &unk_1B3A75D78;
    uint64_t v19 = &unk_1B3A75D78;
    uint64_t v20 = &unk_1B3A75DA8;
    uint64_t v21 = v0;
    uint64_t v22 = &unk_1B3A75D78;
    uint64_t v23 = &unk_1B3A75D90;
    unint64_t v24 = &unk_1B3A75D78;
    uint64_t v25 = &unk_1B3A75D78;
    uint64_t v26 = &unk_1B3A75D90;
    uint64_t v27 = &unk_1B3A75D60;
    unint64_t v28 = &unk_1B3A75D90;
    unint64_t v29 = &unk_1B3A75D78;
    unint64_t v30 = &unk_1B3A75D78;
    uint64_t v31 = &unk_1B3A75D78;
    int v32 = &unk_1B3A75D78;
    int64_t v33 = &unk_1B3A75D78;
    uint64_t v34 = &unk_1B3A75D78;
    uint64_t v35 = &unk_1B3A75D78;
    uint64_t v36 = &unk_1B3A75D78;
    unint64_t v37 = &unk_1B3A75D78;
    uint64_t v38 = MEMORY[0x1E4FBADA0] + 64;
    unint64_t v39 = &unk_1B3A75D90;
    unint64_t v40 = &unk_1B3A75D60;
    uint64_t v41 = v0;
    uint64_t result = sub_1B3A6FF40();
    if (v3 <= 0x3F)
    {
      uint64_t v42 = *(void *)(result - 8) + 64;
      uint64_t v43 = &unk_1B3A75DC0;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B3A43710(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v43 = MEMORY[0x1E4FBC860];
    sub_1B3A494E8(0, v3, 0);
    uint64_t v5 = v43;
    uint64_t v6 = (unint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v7 = *(v6 - 1);
      unint64_t v8 = *v6;
      swift_bridgeObjectRetain();
      v42[0] = 58;
      v42[1] = 0xE100000000000000;
      unint64_t v40 = v42;
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_1B3A0420C(1, 1, sub_1B3A05D00, (uint64_t)v39, v7, v8);
      uint64_t v10 = *((void *)v9 + 2);
      if (!v10) {
        break;
      }
      uint64_t v37 = v2;
      uint64_t v38 = v5;
      uint64_t v11 = *((void *)v9 + 5);
      int64_t v34 = v3;
      uint64_t v35 = *((void *)v9 + 4);
      uint64_t v12 = *((void *)v9 + 6);
      uint64_t v13 = *((void *)v9 + 7);
      if (v10 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v36 = MEMORY[0x1B3EBDAC0](0, 0xE000000000000000);
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        uint64_t v19 = v18;
      }
      else
      {
        uint64_t v15 = *((void *)v9 + 9);
        uint64_t v36 = *((void *)v9 + 8);
        uint64_t v17 = *((void *)v9 + 10);
        uint64_t v19 = *((void *)v9 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      uint64_t v20 = MEMORY[0x1B3EBD660](v35, v11, v12, v13);
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B3A73390;
      uint64_t v24 = MEMORY[0x1B3EBD660](v36, v15, v17, v19);
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      *(void *)(inited + 32) = v24;
      *(void *)(inited + 40) = v26;
      uint64_t v27 = sub_1B3A35F98(inited);
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v2 = v37;
      uint64_t v5 = v38;
      if (v37) {
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      uint64_t v43 = v38;
      unint64_t v29 = *(void *)(v38 + 16);
      unint64_t v28 = *(void *)(v38 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_1B3A494E8(v28 > 1, v29 + 1, 1);
        uint64_t v5 = v43;
      }
      v6 += 2;
      *(void *)(v5 + 16) = v29 + 1;
      unint64_t v30 = (void *)(v5 + 24 * v29);
      v30[4] = v20;
      v30[5] = v22;
      v30[6] = v27;
      int64_t v3 = v34 - 1;
      if (v34 == 1) {
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    swift_allocError();
    *(void *)uint64_t v32 = v7;
    *(void *)(v32 + 8) = v8;
    *(unsigned char *)(v32 + 16) = 0;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
LABEL_15:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    if (*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
LABEL_13:
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FF0);
      uint64_t v31 = sub_1B3A70B40();
    }
    else
    {
      uint64_t v31 = MEMORY[0x1E4FBC868];
    }
    v41[0] = v31;
    sub_1B3A48BBC(v5, 1, v41);
    uint64_t result = v41[0];
    if (v2) {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B3A43A6C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    while (1)
    {
      int64_t v12 = v11;
      if (!v8) {
        break;
      }
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      if (*(void *)(v5 + 16)) {
        goto LABEL_31;
      }
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v15 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v12 + 2;
      if (v12 + 2 >= v31) {
        goto LABEL_48;
      }
      unint64_t v16 = *(void *)(v33 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v12 + 3;
        if (v12 + 3 >= v31) {
          goto LABEL_48;
        }
        unint64_t v16 = *(void *)(v33 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_30:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    if (*(void *)(v5 + 16))
    {
LABEL_31:
      uint64_t v18 = (uint64_t *)(*(void *)(v32 + 48) + 16 * v14);
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      sub_1B3A70E00();
      swift_bridgeObjectRetain();
      sub_1B3A70360();
      uint64_t v21 = sub_1B3A70E50();
      uint64_t v22 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v23 = v21 & ~v22;
      if ((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23))
      {
        uint64_t v24 = *(void *)(v5 + 48);
        uint64_t v25 = (void *)(v24 + 16 * v23);
        BOOL v26 = *v25 == v20 && v25[1] == v19;
        if (v26 || (sub_1B3A70D20() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v30 = 0;
LABEL_45:
          sub_1B3A21B4C();
          return v30;
        }
        uint64_t v27 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v27;
          if (((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          unint64_t v28 = (void *)(v24 + 16 * v23);
          BOOL v29 = *v28 == v20 && v28[1] == v19;
          if (v29 || (sub_1B3A70D20() & 1) != 0) {
            goto LABEL_44;
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v31)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v30 = 1;
    goto LABEL_45;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v12 + 4;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_30;
    }
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_1B3A43D50(void *__src)
{
  memcpy(__dst, __src, 0x141uLL);
  unint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_plan);
  swift_beginAccess();
  memcpy(v5, v2, 0x141uLL);
  memcpy(v2, __dst, 0x141uLL);
  sub_1B39B373C((uint64_t)__dst);
  sub_1B39B0C68((uint64_t)v5);
  return sub_1B39B0C68((uint64_t)__dst);
}

uint64_t (*sub_1B3A43DDC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A43E38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6ktrace9Recording_inProcessFile;
  swift_beginAccess();
  return sub_1B3A49508(v3, a1);
}

uint64_t sub_1B3A43E8C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6ktrace9Recording_inProcessFile;
  swift_beginAccess();
  sub_1B3A49570(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_1B3A43EE8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A43F44()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_1B3A43F78(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1B3A43FB8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A4400C()
{
  swift_beginAccess();
  return *(void *)(v0 + 24);
}

uint64_t sub_1B3A44040(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_1B3A44080())()
{
  return j__swift_endAccess;
}

uint64_t sub_1B3A440D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = nullsub_1(a1);
  *(void *)(v4 + 24) = nullsub_1(a2);
  return v4;
}

uint64_t sub_1B3A44130()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1B3A44140()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_endReason);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1B3A44188(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_endReason);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1B3A441D4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A44230()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  sub_1B39B6160(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  return v2;
}

uint64_t (*sub_1B3A442A0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A442FC(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_endWaitGroup);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_1B3A44350())()
{
  return j_j__swift_endAccess;
}

__n128 sub_1B3A443AC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing);
  swift_beginAccess();
  long long v4 = v3[6];
  v19[0] = v3[7];
  *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)v3 + 121);
  long long v5 = v3[3];
  long long v14 = v3[2];
  long long v15 = v5;
  long long v6 = v3[4];
  long long v17 = v3[5];
  long long v18 = v4;
  long long v16 = v6;
  __n128 v7 = *((__n128 *)v3 + 1);
  __n128 v12 = *(__n128 *)v3;
  __n128 v13 = v7;
  sub_1B3A495D8((uint64_t)&v12);
  long long v8 = v19[0];
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 121) = *(_OWORD *)((char *)v19 + 9);
  long long v9 = v15;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v9;
  long long v10 = v17;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v10;
  __n128 result = v13;
  *(__n128 *)a1 = v12;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B3A44460(_OWORD *a1)
{
  uint64_t v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing);
  swift_beginAccess();
  long long v4 = v3[6];
  v14[0] = v3[7];
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)v3 + 121);
  long long v5 = v3[3];
  v13[2] = v3[2];
  v13[3] = v5;
  long long v6 = v3[4];
  v13[5] = v3[5];
  v13[6] = v4;
  v13[4] = v6;
  long long v7 = v3[1];
  v13[0] = *v3;
  v13[1] = v7;
  long long v8 = a1[5];
  v3[4] = a1[4];
  v3[5] = v8;
  long long v9 = a1[3];
  v3[2] = a1[2];
  v3[3] = v9;
  long long v10 = a1[1];
  *uint64_t v3 = *a1;
  v3[1] = v10;
  *(_OWORD *)((char *)v3 + 121) = *(_OWORD *)((char *)a1 + 121);
  long long v11 = a1[7];
  v3[6] = a1[6];
  v3[7] = v11;
  sub_1B3A495D8((uint64_t)a1);
  sub_1B3A20690((uint64_t)v13);
  return sub_1B3A20690((uint64_t)a1);
}

uint64_t (*sub_1B3A44520())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A4457C(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_1B3A445E4(a1, a2, a3);
  return v6;
}

uint64_t sub_1B3A445E4(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v289 = a3;
  v293 = a2;
  v322[27] = *MEMORY[0x1E4F143B8];
  uint64_t v271 = sub_1B3A70A10();
  uint64_t v269 = *(void *)(v271 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v271);
  v270 = (char *)&v256 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v268 = (char *)&v256 - v8;
  v285 = (int *)type metadata accessor for RecordingOptions.Options(0);
  MEMORY[0x1F4188790](v285);
  uint64_t v267 = (uint64_t)&v256 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v297 = sub_1B3A70680();
  uint64_t v282 = *(void *)(v297 - 8);
  MEMORY[0x1F4188790](v297);
  v296 = (char *)&v256 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = sub_1B3A70660();
  MEMORY[0x1F4188790](v280);
  v281 = (char *)&v256 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1B3A701D0();
  MEMORY[0x1F4188790](v12 - 8);
  v279 = (char *)&v256 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1B3A6FE60();
  uint64_t v276 = *(void *)(v14 - 8);
  uint64_t v277 = v14;
  MEMORY[0x1F4188790](v14);
  v275 = (char *)&v256 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  *(void *)&long long v278 = (char *)&v256 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t)&v256 - v19;
  uint64_t v21 = sub_1B3A6FF40();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v256 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  v274 = (char *)&v256 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v273 = (uint64_t)&v256 - v29;
  MEMORY[0x1F4188790](v28);
  int64_t v31 = (char *)&v256 - v30;
  uint64_t v32 = v22;
  int64_t v34 = *(void (**)(void))(v22 + 56);
  uint64_t v33 = (char **)(v22 + 56);
  uint64_t v291 = v3 + OBJC_IVAR____TtC6ktrace9Recording_inProcessFile;
  uint64_t v294 = v35;
  v272 = v34;
  v34();
  uint64_t v36 = v3 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason;
  *(void *)uint64_t v36 = 0;
  *(void *)(v36 + 8) = 0;
  *(unsigned char *)(v36 + 16) = -1;
  uint64_t v37 = OBJC_IVAR____TtC6ktrace9Recording_endWaitGroup;
  *(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_endWaitGroup) = 0;
  uint64_t v38 = (v3 + OBJC_IVAR____TtC6ktrace9Recording_pendingExtension);
  v38->isa = (Class)0xD000000000000014;
  v38[1].isa = (Class)0x80000001B3A7BAA0;
  v292 = v38;
  if (!*a1) {
    goto LABEL_113;
  }
  uint64_t v287 = v36;
  uint64_t v288 = v37;
  v284 = v25;
  uint64_t v39 = sub_1B3A703B0();
  unint64_t v40 = (uint64_t *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_toolName);
  *unint64_t v40 = v39;
  v40[1] = v41;
  v286 = v40;
  uint64_t v295 = v3;
  *(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_recording) = a1;
  uint64_t v42 = a1[3];
  if (!v42)
  {
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
  }
  uint64_t v43 = nullsub_1(v42);
  v283 = a1;
  uint64_t v44 = a1[4];
  if (!v44) {
    goto LABEL_115;
  }
  uint64_t v45 = (FILE *)v43;
  type metadata accessor for Reporter();
  uint64_t v46 = (FILE *)nullsub_1(v44);
  uint64_t v47 = sub_1B3A12534(v45, v46, 0x6E6964726F636572, 0xE900000000000067, 1);
  if (v4)
  {
    swift_release();
    sub_1B3A4B628((uint64_t)v293, type metadata accessor for RecordingOptions);
    sub_1B3A11580(v291, &qword_1E9CD58F8);
    swift_bridgeObjectRelease();
    sub_1B39A8658(*(void *)v287, *(void *)(v287 + 8), *(unsigned char *)(v287 + 16));
    uint64_t v20 = v295;
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for Recording();
    swift_deallocPartialClassInstance();
    return v20;
  }
  uint64_t v48 = v47;
  uint64_t v290 = 0;
  uint64_t v49 = v295;
  uint64_t v258 = OBJC_IVAR____TtC6ktrace9Recording_reporter;
  *(void *)(v295 + OBJC_IVAR____TtC6ktrace9Recording_reporter) = v47;
  uint64_t v50 = type metadata accessor for RecordingOptions(0);
  uint64_t v51 = v49 + OBJC_IVAR____TtC6ktrace9Recording_options;
  uint64_t v259 = (uint64_t)v293 + *(int *)(v50 + 20);
  sub_1B3A4BEE4(v259, v49 + OBJC_IVAR____TtC6ktrace9Recording_options, type metadata accessor for RecordingOptions.Options);
  uint64_t v52 = v285[5];
  uint64_t v263 = v51;
  sub_1B3A49508(v51 + v52, v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v20, 1, v294) != 1)
  {
    swift_retain();
    sub_1B3A6FE50();
    uint64_t v53 = v48;
    uint64_t v54 = v31;
    uint64_t v55 = v294;
    v265 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    uint64_t v266 = v32 + 8;
    v265(v20, v294);
    int v56 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 16);
    v56(v49 + OBJC_IVAR____TtC6ktrace9Recording_finishedFile, v54, v55);
    id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28CB8]), sel_init);
    uint64_t v58 = (void *)sub_1B3A6FEB0();
    *(void *)v319 = 0;
    id v59 = objc_msgSend(v57, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v58, 1, v319);

    uint64_t v60 = *(void **)v319;
    BOOL v264 = v59 != 0;
    uint64_t v262 = v32 + 16;
    if (v59)
    {
      uint64_t v257 = v56;
      uint64_t v260 = v53;
      uint64_t v61 = v273;
      sub_1B3A6FF00();
      id v62 = v60;

      v261 = v54;
      *(void *)v319 = sub_1B3A6FEA0();
      *(void *)&v319[8] = v63;
      uint64_t v65 = v275;
      uint64_t v64 = v276;
      uint64_t v66 = v277;
      (*(void (**)(char *, void, uint64_t))(v276 + 104))(v275, *MEMORY[0x1E4F276C0], v277);
      unint64_t v67 = sub_1B39ADD78();
      uint64_t v68 = v274;
      unint64_t v256 = v67;
      sub_1B3A6FF30();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
      swift_bridgeObjectRelease();
      uint64_t v69 = v278;
      sub_1B3A6FEE0();
      uint64_t v70 = v294;
      unint64_t v71 = v265;
      v265((uint64_t)v68, v294);
      v71(v61, v70);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v272)(v69, 0, 1, v70);
      uint64_t v72 = v291;
      swift_beginAccess();
      sub_1B3A49570(v69, v72);
      swift_endAccess();
      sub_1B3A4C0E8(0, &qword_1E9CD6180);
      sub_1B3A701C0();
      *(void *)v319 = MEMORY[0x1E4FBC860];
      sub_1B3A4965C(&qword_1E9CD6188, MEMORY[0x1E4FBCC10]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6190);
      sub_1B3A38DD8(&qword_1E9CD6198, &qword_1E9CD6190);
      sub_1B3A70920();
      (*(void (**)(char *, void, uint64_t))(v282 + 104))(v296, *MEMORY[0x1E4FBCC58], v297);
      *(void *)(v295 + OBJC_IVAR____TtC6ktrace9Recording_waitQueue) = sub_1B3A70690();
      long long v73 = v283;
      if (v283[2])
      {
        uint64_t v74 = sub_1B3A703B0();
        uint64_t v76 = v75;
      }
      else
      {
        uint64_t v74 = 0;
        uint64_t v76 = 0;
      }
      uint64_t v83 = v284;
      int v84 = (*((_DWORD *)v73 + 12) >> 1) & 1;
      uint64_t v85 = (uint64_t *)(v263 + v285[32]);
      uint64_t v87 = *v85;
      uint64_t v86 = v85[1];
      uint64_t v88 = v285[28];
      int v89 = *(unsigned __int8 *)(v263 + v88);
      swift_bridgeObjectRetain();
      uint64_t v90 = v74;
      uint64_t v91 = v290;
      int v92 = sub_1B3A2A3C8(v83, v87, v86, v89, v84, v90, v76);
      if (!v91)
      {
        uint64_t v276 = v88;
        LODWORD(v275) = v92;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v96 = v295;
        uint64_t v97 = v295 + OBJC_IVAR____TtC6ktrace9Recording_planPath;
        v257(v295 + OBJC_IVAR____TtC6ktrace9Recording_planPath, v83, v294);
        uint64_t v277 = v97;
        sub_1B3A26ABC(v319);
        uint64_t v290 = 0;
        uint64_t v98 = *(void *)&v319[264];
        uint64_t v99 = v96 + OBJC_IVAR____TtC6ktrace9Recording_plan;
        memcpy((void *)(v96 + OBJC_IVAR____TtC6ktrace9Recording_plan), v319, 0x108uLL);
        *(void *)(v99 + 264) = v98;
        long long v100 = *(_OWORD *)&v319[288];
        *(_OWORD *)(v99 + 272) = *(_OWORD *)&v319[272];
        *(_OWORD *)(v99 + 288) = v100;
        *(_OWORD *)(v99 + 304) = *(_OWORD *)&v319[304];
        *(unsigned char *)(v99 + 320) = v319[320];
        uint64_t v101 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v280 = v99;
        if (v98)
        {
          int64_t v102 = *(void *)(v98 + 16);
          uint64_t v103 = (char *)MEMORY[0x1E4FBC860];
          if (v102)
          {
            v299 = (char *)MEMORY[0x1E4FBC860];
            swift_bridgeObjectRetain();
            sub_1B3A052F4(0, v102, 0);
            uint64_t v103 = v299;
            uint64_t v297 = v98;
            char v104 = (uint64_t *)(v98 + 40);
            do
            {
              uint64_t v106 = *(v104 - 1);
              uint64_t v105 = *v104;
              v299 = v103;
              unint64_t v108 = *((void *)v103 + 2);
              unint64_t v107 = *((void *)v103 + 3);
              swift_bridgeObjectRetain();
              if (v108 >= v107 >> 1)
              {
                sub_1B3A052F4((char *)(v107 > 1), v108 + 1, 1);
                uint64_t v103 = v299;
              }
              v104 += 4;
              *((void *)v103 + 2) = v108 + 1;
              char v109 = &v103[16 * v108];
              *((void *)v109 + 4) = v106;
              *((void *)v109 + 5) = v105;
              --v102;
            }
            while (v102);
            swift_bridgeObjectRelease();
            uint64_t v99 = v280;
            uint64_t v101 = (char *)MEMORY[0x1E4FBC860];
          }
        }
        else
        {
          uint64_t v103 = (char *)MEMORY[0x1E4FBC860];
        }
        swift_beginAccess();
        uint64_t v110 = swift_bridgeObjectRetain();
        v111 = (char *)sub_1B3A35F98(v110);
        swift_bridgeObjectRelease();
        uint64_t v112 = *(void *)(v259 + v285[25]);
        unint64_t v113 = *(void *)(v112 + 16);
        unint64_t v114 = *((void *)v111 + 2);
        uint64_t v273 = v112;
        if (v113 <= v114 >> 3)
        {
          v299 = v111;
          sub_1B3A31814(v112);
          unint64_t v115 = v299;
        }
        else
        {
          unint64_t v115 = (char *)sub_1B3A319BC(v112, (uint64_t)v111);
        }
        uint64_t v116 = *((void *)v103 + 2);
        uint64_t v117 = *((void *)v115 + 2);
        BOOL v118 = __OFADD__(v116, v117);
        uint64_t v119 = v116 + v117;
        if (v118) {
          goto LABEL_112;
        }
        v299 = sub_1B3A1617C(0, v119 & ~(v119 >> 63), 0, v101);
        uint64_t v120 = swift_bridgeObjectRetain();
        sub_1B3A4A57C(v120);
        sub_1B3A14368((uint64_t)v103);
        swift_bridgeObjectRelease();
        uint64_t v121 = swift_bridgeObjectRetain();
        sub_1B3A4A57C(v121);
        uint64_t v122 = sub_1B3A35F98((uint64_t)v299);
        swift_bridgeObjectRelease();
        uint64_t v298 = v122;
        uint64_t v20 = v122 + 56;
        uint64_t v123 = 1 << *(unsigned char *)(v122 + 32);
        uint64_t v124 = -1;
        if (v123 < 64) {
          uint64_t v124 = ~(-1 << v123);
        }
        unint64_t v125 = v124 & *(void *)(v122 + 56);
        uint64_t v282 = (unint64_t)(v123 + 63) >> 6;
        swift_bridgeObjectRetain();
        uint64_t v126 = 0;
        v279 = (char *)v122;
        *(void *)&long long v278 = v122 + 56;
        while (1)
        {
          if (v125)
          {
            v296 = (char *)((v125 - 1) & v125);
            uint64_t v297 = v126;
            unint64_t v127 = __clz(__rbit64(v125)) | (v126 << 6);
          }
          else
          {
            uint64_t v128 = v126 + 1;
            if (__OFADD__(v126, 1))
            {
              __break(1u);
              goto LABEL_107;
            }
            if (v128 >= v282) {
              goto LABEL_72;
            }
            unint64_t v129 = *(void *)(v20 + 8 * v128);
            uint64_t v130 = v126 + 1;
            if (!v129)
            {
              uint64_t v130 = v126 + 2;
              if (v126 + 2 >= v282) {
                goto LABEL_72;
              }
              unint64_t v129 = *(void *)(v20 + 8 * v130);
              if (!v129)
              {
                uint64_t v130 = v126 + 3;
                if (v126 + 3 >= v282) {
                  goto LABEL_72;
                }
                unint64_t v129 = *(void *)(v20 + 8 * v130);
                if (!v129)
                {
                  uint64_t v131 = v126 + 4;
                  if (v126 + 4 >= v282)
                  {
LABEL_72:
                    swift_release();
                    BOOL v161 = *(char **)(v263 + v285[26]);
                    int64_t v162 = *((void *)v161 + 2);
                    uint64_t v163 = MEMORY[0x1E4FBC860];
                    if (v162)
                    {
                      v318[0] = MEMORY[0x1E4FBC860];
                      swift_bridgeObjectRetain();
                      sub_1B3A494E8(0, v162, 0);
                      uint64_t v163 = v318[0];
                      v274 = v161;
                      unint64_t v164 = (unint64_t *)(v161 + 40);
                      long long v278 = xmmword_1B3A73390;
                      while (1)
                      {
                        uint64_t v166 = *(v164 - 1);
                        unint64_t v165 = *v164;
                        swift_bridgeObjectRetain();
                        uint64_t v303 = 58;
                        unint64_t v304 = 0xE100000000000000;
                        *(void *)&long long v306 = &v303;
                        swift_bridgeObjectRetain();
                        uint64_t v167 = v290;
                        uint64_t v168 = sub_1B3A0420C(1, 1, sub_1B3A05D00, (uint64_t)&v305, v166, v165);
                        uint64_t v290 = v167;
                        uint64_t v169 = *((void *)v168 + 2);
                        if (!v169) {
                          break;
                        }
                        v279 = (char *)v162;
                        uint64_t v297 = v163;
                        uint64_t v170 = *((void *)v168 + 4);
                        uint64_t v171 = *((void *)v168 + 5);
                        uint64_t v172 = *((void *)v168 + 7);
                        v281 = (char *)*((void *)v168 + 6);
                        uint64_t v282 = v170;
                        if (v169 == 1)
                        {
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                          v296 = (char *)MEMORY[0x1B3EBDAC0](0, 0xE000000000000000);
                          uint64_t v174 = v173;
                          uint64_t v176 = v175;
                          uint64_t v178 = v177;
                        }
                        else
                        {
                          uint64_t v174 = *((void *)v168 + 9);
                          v296 = (char *)*((void *)v168 + 8);
                          uint64_t v176 = *((void *)v168 + 10);
                          uint64_t v178 = *((void *)v168 + 11);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                        }
                        uint64_t v179 = MEMORY[0x1B3EBD660](v282, v171, v281, v172);
                        uint64_t v181 = v180;
                        swift_bridgeObjectRelease();
                        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
                        uint64_t inited = swift_initStackObject();
                        *(_OWORD *)(inited + 16) = v278;
                        uint64_t v183 = MEMORY[0x1B3EBD660](v296, v174, v176, v178);
                        uint64_t v185 = v184;
                        swift_bridgeObjectRelease();
                        *(void *)(inited + 32) = v183;
                        *(void *)(inited + 40) = v185;
                        uint64_t v186 = sub_1B3A35F98(inited);
                        swift_setDeallocating();
                        swift_arrayDestroy();
                        uint64_t v163 = v297;
                        if (v290) {
                          goto LABEL_84;
                        }
                        swift_bridgeObjectRelease();
                        v318[0] = v163;
                        unint64_t v188 = *(void *)(v163 + 16);
                        unint64_t v187 = *(void *)(v163 + 24);
                        if (v188 >= v187 >> 1)
                        {
                          sub_1B3A494E8(v187 > 1, v188 + 1, 1);
                          uint64_t v163 = v318[0];
                        }
                        v164 += 2;
                        *(void *)(v163 + 16) = v188 + 1;
                        unint64_t v189 = (void *)(v163 + 24 * v188);
                        v189[4] = v179;
                        v189[5] = v181;
                        v189[6] = v186;
                        uint64_t v99 = v280;
                        int64_t v162 = (int64_t)(v279 - 1);
                        if (v279 == (char *)1)
                        {
                          swift_bridgeObjectRelease();
                          goto LABEL_85;
                        }
                      }
                      swift_bridgeObjectRelease();
                      type metadata accessor for KTraceRecordError();
                      sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
                      uint64_t v190 = swift_allocError();
                      *(void *)uint64_t v191 = v166;
                      *(void *)(v191 + 8) = v165;
                      *(unsigned char *)(v191 + 16) = 0;
                      swift_storeEnumTagMultiPayload();
                      swift_bridgeObjectRetain();
                      uint64_t v290 = v190;
                      swift_willThrow();
LABEL_84:
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_bridgeObjectRelease();
                      uint64_t v20 = v295;
                      uint64_t v192 = v284;
LABEL_90:
                      swift_bridgeObjectRelease();
LABEL_91:
                      unint64_t v198 = v192;
                      uint64_t v80 = v294;
                      int64_t v93 = (void (*)(char *, uint64_t))v265;
                      v265((uint64_t)v198, v294);
                      v93(v261, v80);
                      sub_1B3A4B628((uint64_t)v293, type metadata accessor for RecordingOptions);
LABEL_92:
                      v93((char *)v277, v80);
                      memcpy(v319, (const void *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_plan), sizeof(v319));
                      sub_1B39B0C68((uint64_t)v319);
                      int v94 = 1;
                      goto LABEL_15;
                    }
LABEL_85:
                    uint64_t v193 = v163;
                    uint64_t v194 = *(void *)(v163 + 16);
                    uint64_t v20 = v295;
                    uint64_t v192 = v284;
                    if (v194)
                    {
                      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FF0);
                      int v195 = (char *)sub_1B3A70B40();
                    }
                    else
                    {
                      int v195 = (char *)MEMORY[0x1E4FBC868];
                    }
                    uint64_t v196 = v276;
                    v299 = v195;
                    uint64_t v197 = v290;
                    sub_1B3A48BBC(v193, 1, &v299);
                    if (v197)
                    {
                      uint64_t v290 = v197;
                      swift_release();
                      swift_release();
                      swift_release();
                      goto LABEL_90;
                    }
                    v302[0] = (uint64_t)v299;
                    uint64_t v199 = v263;
                    char v200 = *(unsigned char *)(v263 + v196);
                    swift_beginAccess();
                    uint64_t v201 = swift_bridgeObjectRetain();
                    uint64_t v202 = sub_1B3A270D4(v201, v273, v200, v302);
                    uint64_t v290 = 0;
                    uint64_t v203 = v202;
                    v296 = v204;
                    swift_endAccess();
                    swift_bridgeObjectRelease();
                    uint64_t v205 = *(void *)(v20 + v258);
                    v299 = 0;
                    unint64_t v300 = 0xE000000000000000;
                    swift_retain();
                    sub_1B3A709B0();
                    swift_bridgeObjectRelease();
                    v299 = (char *)0xD00000000000001ALL;
                    unint64_t v300 = 0x80000001B3A7BAF0;
                    uint64_t v297 = v203;
                    *(void *)&long long v305 = v203;
                    uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
                    sub_1B3A38DD8((unint64_t *)&qword_1E9CD58B0, &qword_1E9CD58A8);
                    uint64_t v282 = v206;
                    sub_1B3A70250();
                    sub_1B3A703A0();
                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, unint64_t))(*(void *)v205 + 224))(v299, v300);
                    swift_release();
                    swift_bridgeObjectRelease();
                    uint64_t v207 = *(void *)(v99 + 272);
                    unint64_t v208 = *(void *)(v99 + 280);
                    uint64_t v303 = v207;
                    unint64_t v304 = v208;
                    uint64_t v209 = (uint64_t *)(v199 + v285[19]);
                    uint64_t v210 = v209[1];
                    if (v210)
                    {
                      uint64_t v211 = *v209;
                      sub_1B39B396C(v207, v208);
                      swift_bridgeObjectRetain();
                      uint64_t v212 = v290;
                      uint64_t v213 = sub_1B3A02D30(v211, v210);
                      uint64_t v290 = v212;
                      if (v212)
                      {
                        swift_release();
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_bridgeObjectRelease();
                        sub_1B39B0D88(v207, v208);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v80 = v294;
                        int64_t v93 = (void (*)(char *, uint64_t))v265;
                        v265((uint64_t)v284, v294);
                        v93(v261, v80);
                        sub_1B3A4B628((uint64_t)v293, type metadata accessor for RecordingOptions);
                        uint64_t v20 = v295;
                        goto LABEL_92;
                      }
                      sub_1B3A02FE0(v213, 1);
                      uint64_t result = swift_bridgeObjectRelease();
                      uint64_t v20 = v295;
                      uint64_t v192 = v284;
                    }
                    else
                    {
                      uint64_t result = sub_1B39B396C(v207, v208);
                    }
                    uint64_t v122 = v297;
                    uint64_t v214 = v285;
                    uint64_t v215 = v263;
                    uint64_t v216 = (uint64_t *)(v263 + v285[20]);
                    uint64_t v217 = v216[1];
                    if (v217)
                    {
                      uint64_t v218 = *v216;
                      swift_bridgeObjectRetain();
                      uint64_t v219 = v217;
                      uint64_t v220 = v290;
                      uint64_t v221 = sub_1B3A02D30(v218, v219);
                      uint64_t v290 = v220;
                      if (v220)
                      {
                        swift_release();
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_bridgeObjectRelease();
                        sub_1B39B0D88(v303, v304);
                        swift_bridgeObjectRelease();
                        goto LABEL_90;
                      }
                      sub_1B3A02FE0(v221, 0);
                      uint64_t result = swift_bridgeObjectRelease();
                      uint64_t v214 = v285;
                      uint64_t v215 = v263;
                    }
                    uint64_t v222 = v215 + v214[15];
                    if (*(unsigned char *)(v222 + 8)) {
                      goto LABEL_108;
                    }
                    uint64_t v223 = *(void *)v222;
                    if ((*(void *)v222 & 0x8000000000000000) != 0)
                    {
                      __break(1u);
                    }
                    else
                    {
                      swift_beginAccess();
                      uint64_t v224 = v290;
                      sub_1B3A25E24(v223);
                      uint64_t v290 = v224;
                      if (v224)
                      {
                        swift_endAccess();
                        swift_release();
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1B39B0D88(v303, v304);
                        goto LABEL_91;
                      }
LABEL_107:
                      swift_endAccess();
LABEL_108:
                      uint64_t v225 = v289;
                      uint64_t v226 = v267;
                      sub_1B3A4BEE4(v259, v267, type metadata accessor for RecordingOptions.Options);
                      swift_bridgeObjectRetain();
                      sub_1B3A1A1E0(v226, (char *)v122, v296, v275 & 1, (uint64_t)&v299);
                      nullsub_1(&v299);
                      sub_1B39B4CD4((uint64_t)&v299, (uint64_t)v322, &qword_1E9CD5CC8);
                      (*(void (**)(void *))(*(void *)v225 + 192))(v322);
                      uint64_t result = (uint64_t)ktrace_session_create();
                      if (result)
                      {
                        uint64_t v227 = result;
                        uint64_t v228 = v290;
                        sub_1B3A4A0D8(&v303, result);
                        uint64_t v290 = v228;
                        uint64_t v229 = v303;
                        unint64_t v230 = v304;
                        int64_t v231 = (void *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_subclassBitmap);
                        *int64_t v231 = v303;
                        v231[1] = v230;
                        *(void *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_session) = v227;
                        sub_1B39B396C(v229, v230);
                        dispatch_semaphore_t v232 = dispatch_semaphore_create(0);
                        type metadata accessor for KernelDisableWaiter();
                        *(void *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_kernelDisableWaiter) = sub_1B3A19660();
                        *(void *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_waitComplete) = v232;
                        *(_DWORD *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_endReason) = 0;
                        uint64_t v233 = v232;
                        sub_1B3A511CC((uint64_t)v320);
                        v234 = (_OWORD *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing);
                        long long v235 = v321[0];
                        v234[6] = v320[6];
                        unsigned char v234[7] = v235;
                        *(_OWORD *)((char *)v234 + 121) = *(_OWORD *)((char *)v321 + 9);
                        long long v236 = v320[3];
                        v234[2] = v320[2];
                        v234[3] = v236;
                        long long v237 = v320[5];
                        v234[4] = v320[4];
                        v234[5] = v237;
                        long long v238 = v320[1];
                        _OWORD *v234 = v320[0];
                        v234[1] = v238;
                        v239 = (char *)OBJC_IVAR____TtC6ktrace9Recording_session;
                        long long v240 = (void *)swift_allocObject();
                        v240[2] = v227;
                        v240[3] = v20;
                        v240[4] = v225;
                        v240[5] = v233;
                        *(void *)&long long v307 = sub_1B3A4AD04;
                        *((void *)&v307 + 1) = v240;
                        *(void *)&long long v305 = MEMORY[0x1E4F143A8];
                        *((void *)&v305 + 1) = 1107296256;
                        *(void *)&long long v306 = sub_1B39B583C;
                        *((void *)&v306 + 1) = &block_descriptor_0;
                        long long v241 = _Block_copy(&v305);
                        v292 = v233;
                        swift_retain();
                        swift_retain();
                        swift_release();
                        ktrace_set_completion_handler(v227, v241);
                        _Block_release(v241);
                        v296 = v239;
                        uint64_t v242 = *(void *)&v239[v295];
                        long long v243 = (void *)swift_allocObject();
                        v243[2] = v227;
                        v243[3] = v225;
                        uint64_t v244 = v297;
                        v243[4] = v295;
                        v243[5] = v244;
                        long long v245 = v283;
                        v243[6] = v260;
                        v243[7] = v245;
                        *(void *)&long long v307 = sub_1B3A4B05C;
                        *((void *)&v307 + 1) = v243;
                        *(void *)&long long v305 = MEMORY[0x1E4F143A8];
                        *((void *)&v305 + 1) = 1107296256;
                        uint64_t v20 = v295;
                        *(void *)&long long v306 = sub_1B39B5698;
                        *((void *)&v306 + 1) = &block_descriptor_7;
                        long long v246 = _Block_copy(&v305);
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_release();
                        ktrace_set_post_processing_handler(v242, v246);
                        _Block_release(v246);
                        type metadata accessor for CStringArray();
                        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
                        uint64_t v247 = swift_allocObject();
                        *(_OWORD *)(v247 + 16) = xmmword_1B3A73390;
                        uint64_t v248 = *(void *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_toolName + 8);
                        *(void *)(v247 + 32) = *(void *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_toolName);
                        *(void *)(v247 + 40) = v248;
                        uint64_t v249 = *v293;
                        *(void *)&long long v305 = v247;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        sub_1B3A14368(v249);
                        uint64_t v250 = sub_1B3A38DD8(&qword_1E9CD61A0, &qword_1E9CD58A8);
                        uint64_t v51 = sub_1B3A3C1C4((uint64_t)&v305, v282, v250, v256);
                        uint64_t v33 = (char **)(v51 + 16);
                        swift_beginAccess();
                        int64_t v31 = *(char **)(v51 + 16);
                        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        *(void *)(v51 + 16) = v31;
                        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                          goto LABEL_117;
                        }
                        goto LABEL_110;
                      }
                    }
                    __break(1u);
                    return result;
                  }
                  unint64_t v129 = *(void *)(v20 + 8 * v131);
                  if (!v129)
                  {
                    while (1)
                    {
                      uint64_t v130 = v131 + 1;
                      if (__OFADD__(v131, 1)) {
                        break;
                      }
                      if (v130 >= v282) {
                        goto LABEL_72;
                      }
                      unint64_t v129 = *(void *)(v20 + 8 * v130);
                      ++v131;
                      if (v129) {
                        goto LABEL_52;
                      }
                    }
                    __break(1u);
LABEL_112:
                    __break(1u);
LABEL_113:
                    __break(1u);
                    goto LABEL_114;
                  }
                  uint64_t v130 = v126 + 4;
                }
              }
            }
LABEL_52:
            v296 = (char *)((v129 - 1) & v129);
            uint64_t v297 = v130;
            unint64_t v127 = __clz(__rbit64(v129)) + (v130 << 6);
          }
          uint64_t v132 = (uint64_t *)(*(void *)(v122 + 48) + 16 * v127);
          uint64_t v134 = *v132;
          uint64_t v133 = v132[1];
          swift_beginAccess();
          uint64_t v135 = *(void *)(v99 + 296);
          if (*(void *)(v135 + 16))
          {
            swift_bridgeObjectRetain_n();
            unint64_t v136 = sub_1B3A0C82C(v134, v133);
            if (v137)
            {
              long long v138 = (_OWORD *)(*(void *)(v135 + 56) + 200 * v136);
              long long v305 = *v138;
              long long v139 = v138[3];
              long long v140 = v138[4];
              long long v141 = v138[2];
              long long v306 = v138[1];
              long long v307 = v141;
              long long v309 = v140;
              long long v308 = v139;
              long long v142 = v138[5];
              long long v143 = v138[6];
              long long v144 = v138[7];
              long long v313 = v138[8];
              long long v312 = v144;
              long long v311 = v143;
              long long v310 = v142;
              long long v145 = v138[9];
              long long v146 = v138[10];
              long long v147 = v138[11];
              uint64_t v317 = *((void *)v138 + 24);
              long long v316 = v147;
              long long v315 = v146;
              long long v314 = v145;
              memmove(&v299, v138, 0xC8uLL);
              nullsub_1(&v299);
              sub_1B3A38924((uint64_t)&v305);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              sub_1B3A3B53C((uint64_t)&v305);
              sub_1B39B4CD4((uint64_t)&v305, (uint64_t)&v299, &qword_1E9CD5EA8);
            }
          }
          else
          {
            sub_1B3A3B53C((uint64_t)&v305);
            sub_1B39B4CD4((uint64_t)&v305, (uint64_t)&v299, &qword_1E9CD5EA8);
            swift_bridgeObjectRetain();
          }
          sub_1B39B4CD4((uint64_t)&v299, (uint64_t)&v303, &qword_1E9CD5EA8);
          sub_1B39B4CD4((uint64_t)&v303, (uint64_t)&v305, &qword_1E9CD5EA8);
          if (sub_1B3A37570((uint64_t)&v305) == 1)
          {
            swift_endAccess();
            swift_bridgeObjectRelease();
          }
          else
          {
            long long v148 = v301;
            sub_1B39B4CD4((uint64_t)&v299, (uint64_t)v302, &qword_1E9CD5EA8);
            swift_endAccess();
            swift_bridgeObjectRetain();
            sub_1B3A4AC50((uint64_t)v302);
            swift_bridgeObjectRelease();
            if (v148)
            {
              int64_t v149 = *((void *)v148 + 2);
              if (v149)
              {
                v318[0] = (uint64_t)v101;
                sub_1B3A052F4(0, v149, 0);
                uint64_t v150 = v318[0];
                v281 = v148;
                long long v151 = (uint64_t *)(v148 + 40);
                do
                {
                  uint64_t v152 = *(v151 - 1);
                  uint64_t v153 = *v151;
                  v318[0] = v150;
                  unint64_t v155 = *(void *)(v150 + 16);
                  unint64_t v154 = *(void *)(v150 + 24);
                  swift_bridgeObjectRetain();
                  if (v155 >= v154 >> 1)
                  {
                    sub_1B3A052F4((char *)(v154 > 1), v155 + 1, 1);
                    uint64_t v150 = v318[0];
                  }
                  v151 += 4;
                  *(void *)(v150 + 16) = v155 + 1;
                  uint64_t v156 = v150 + 16 * v155;
                  *(void *)(v156 + 32) = v152;
                  *(void *)(v156 + 40) = v153;
                  --v149;
                }
                while (v149);
                swift_bridgeObjectRelease();
                uint64_t v99 = v280;
                uint64_t v101 = (char *)MEMORY[0x1E4FBC860];
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t v150 = (uint64_t)v101;
              }
              uint64_t v157 = *(void *)(v150 + 16);
              uint64_t v20 = v278;
              if (v157)
              {
                v158 = (uint64_t *)(v150 + 40);
                do
                {
                  uint64_t v159 = *(v158 - 1);
                  uint64_t v160 = *v158;
                  swift_bridgeObjectRetain();
                  sub_1B3A2C7C0(v318, v159, v160);
                  swift_bridgeObjectRelease();
                  v158 += 2;
                  --v157;
                }
                while (v157);
              }
              swift_bridgeObjectRelease();
              uint64_t v122 = (uint64_t)v279;
            }
          }
          unint64_t v125 = (unint64_t)v296;
          uint64_t v126 = v297;
        }
      }
      uint64_t v290 = v91;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = v261;
      uint64_t v80 = v294;
    }
    else
    {
      id v77 = *(id *)v319;
      long long v78 = (void *)sub_1B3A6FE40();

      swift_willThrow();
      type metadata accessor for KTraceRecordError();
      sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
      uint64_t v79 = swift_allocError();
      uint64_t v80 = v294;
      v56(v81, v54, v294);
      swift_storeEnumTagMultiPayload();
      uint64_t v290 = v79;
      swift_willThrow();

      swift_release();
      swift_release();
      uint64_t v82 = v54;
    }
    int64_t v93 = (void (*)(char *, uint64_t))v265;
    v265((uint64_t)v82, v80);
    sub_1B3A4B628((uint64_t)v293, type metadata accessor for RecordingOptions);
    uint64_t v20 = v295;
    int v94 = v264;
LABEL_15:
    sub_1B3A11580(v291, &qword_1E9CD58F8);
    v93((char *)(v20 + OBJC_IVAR____TtC6ktrace9Recording_finishedFile), v80);
    swift_bridgeObjectRelease();
    if (v94) {

    }
    sub_1B3A4B628(v20 + OBJC_IVAR____TtC6ktrace9Recording_options, type metadata accessor for RecordingOptions.Options);
    sub_1B39A8658(*(void *)v287, *(void *)(v287 + 8), *(unsigned char *)(v287 + 16));
    swift_release();
    goto LABEL_18;
  }
  __break(1u);
LABEL_117:
  int64_t v31 = sub_1B3A4AAB4((uint64_t)v31);
  *uint64_t v33 = v31;
LABEL_110:
  v252 = v261;
  v253 = v284;
  ktrace_set_command_argv(*(void *)&v296[v20], (const char **)v31 + 4);
  *(void *)(v51 + 16) = v31;
  swift_endAccess();
  swift_release();

  swift_release();
  swift_release();
  sub_1B39B0D88(v303, v304);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v254 = v294;
  char v255 = (void (*)(char *, uint64_t))v265;
  v265((uint64_t)v253, v294);
  v255(v252, v254);
  sub_1B3A4B628((uint64_t)v293, type metadata accessor for RecordingOptions);
  return v20;
}

uint64_t sub_1B3A4672C(uint64_t a1, uint64_t a2)
{
  return sub_1B39B56A0(a1, a2);
}

uint64_t sub_1B3A46734(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

void sub_1B3A46784(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(v3 + 40);
  if (v4)
  {
    _Block_copy(v4);
    sub_1B3A48534(a2, a3, a1, (void (**)(void, void, void, void))v4);
  }
}

uint64_t sub_1B3A467E4()
{
  v35[41] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD61A8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for KTraceRecordError();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (geteuid())
  {
    sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    swift_allocError();
LABEL_3:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  sub_1B3A46D64((uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1B3A4BE7C((uint64_t)v4, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for KTraceRecordError);
    sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    swift_allocError();
    sub_1B3A4BEE4((uint64_t)v7, v9, (uint64_t (*)(void))type metadata accessor for KTraceRecordError);
    swift_willThrow();
    return sub_1B3A4B628((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for KTraceRecordError);
  }
  sub_1B3A11580((uint64_t)v4, &qword_1E9CD61A8);
  uint64_t v10 = *(void **)(*(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_recording) + 40);
  uint64_t v11 = v0 + OBJC_IVAR____TtC6ktrace9Recording_options;
  uint64_t v12 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v13 = (int *)v12;
  if (v10)
  {
    uint64_t v14 = (uint64_t *)(v11 + *(int *)(v12 + 128));
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    _Block_copy(v10);
    _Block_copy(v10);
    sub_1B3A48534(v16, v15, 0, (void (**)(void, void, void, void))v10);
    uint64_t v17 = v10;
  }
  else
  {
    uint64_t v17 = 0;
  }
  _Block_release(v17);
  if (*(unsigned char *)(v11 + v13[18]) != 1)
  {
    uint64_t v19 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v0 + 240))(v35);
    *(unsigned char *)(v20 + 168) = 0;
    uint64_t v18 = v19(v35, 0);
  }
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v0 + 224))(v35, v18);
  memcpy(v34, v35, sizeof(v34));
  uint64_t v21 = *(_TtC6ktrace12ProviderList **)(v0 + OBJC_IVAR____TtC6ktrace9Recording_session);
  char v22 = *(unsigned char *)(v11 + v13[28]);
  sub_1B3A28720(v21, *(void **)(v0 + OBJC_IVAR____TtC6ktrace9Recording_reporter), v22);
  uint64_t result = sub_1B39B0C68((uint64_t)v35);
  if (!v1)
  {
    uint64_t v23 = v11 + v13[21];
    if ((*(unsigned char *)(v23 + 8) & 1) == 0) {
      uint64_t result = ktrace_set_buffer_size((uint64_t)v21, *(void *)v23);
    }
    if ((*(unsigned char *)(v11 + v13[30] + 8) & 1) == 0) {
      ktrace_set_trailing_duration((uint64_t)v21);
    }
    if (*(unsigned char *)(v11 + v13[22]) == 1) {
      uint64_t result = ktrace_set_collection_priority((uint64_t)v21, 63);
    }
    uint64_t v24 = v11 + v13[23];
    if ((*(unsigned char *)(v24 + 4) & 1) == 0) {
      uint64_t result = ktrace_set_collection_priority((uint64_t)v21, *(_DWORD *)v24);
    }
    uint64_t v25 = v11 + v13[10];
    if (*(unsigned char *)(v25 + 4))
    {
      uint64_t v26 = v11 + v13[11];
      if (*(unsigned char *)(v26 + 8)) {
        return result;
      }
      if ((v22 & 1) == 0)
      {
        sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        swift_allocError();
        unint64_t v28 = 0xD00000000000001CLL;
        uint64_t v29 = "end-after-kdebug-events-size";
LABEL_29:
        *uint64_t v27 = v28;
        v27[1] = (unint64_t)(v29 - 32) | 0x8000000000000000;
        goto LABEL_3;
      }
    }
    else
    {
      if ((v22 & 1) == 0)
      {
        sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        swift_allocError();
        unint64_t v28 = 0xD000000000000013;
        uint64_t v29 = "end-on-kdebug-event";
        goto LABEL_29;
      }
      *(_DWORD *)int64_t v34 = *(_DWORD *)v25;
      memset(&v34[8], 0, 32);
      int v31 = -1;
      long long v32 = 0u;
      long long v33 = 0u;
      uint64_t result = ktrace_end_on_event_match((uint64_t)v21, (long long *)v34, (long long *)&v31);
      uint64_t v26 = v11 + v13[11];
      if (*(unsigned char *)(v26 + 8)) {
        return result;
      }
    }
    return ktrace_end_on_event_count((uint64_t)v21, *(void *)v26);
  }
  return result;
}

uint64_t sub_1B3A46D64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v12 = 0;
  size_t v11 = 4;
  sysctlbyname("ktrace.state", &v12, &v11, 0, 0);
  if ((v12 | 2) == 2) {
    goto LABEL_2;
  }
  int v10 = 0;
  size_t v9 = 4;
  sysctlbyname("ktrace.owning_pid", &v10, &v9, 0, 0);
  int v3 = v10;
  if (v10 < 1 || v3 == getpid()) {
    goto LABEL_2;
  }
  uint64_t v4 = sub_1B3A70590();
  *(void *)(v4 + 16) = 64;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  if (proc_name(v3, (void *)(v4 + 32), 0x40u) > 0)
  {
LABEL_13:
    uint64_t v6 = sub_1B3A4B770(v4, v5);
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 16) = v3;
    type metadata accessor for KTraceRecordError();
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD61A8);
    return swift_storeEnumTagMultiPayload();
  }
  if (MEMORY[0x1B3EBD410]() != 3)
  {
    if (*(void *)(sub_1B3A70320() + 16))
    {
      swift_release();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if (*(void *)(v4 + 16))
        {
LABEL_12:
          *(unsigned char *)(v4 + 32) = 63;
          goto LABEL_13;
        }
LABEL_16:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v4 = (uint64_t)sub_1B3A4AAC8(v4);
    if (*(void *)(v4 + 16)) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
LABEL_2:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD61A8);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1B3A46F5C()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = v0 + OBJC_IVAR____TtC6ktrace9Recording_options;
  uint64_t v5 = *(void *)(v4 + *(int *)(type metadata accessor for RecordingOptions.Options(0) + 24));
  int64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v36 = v1;
    v38[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1B3A496A4(0, v6, 0);
    uint64_t v7 = v38[0];
    uint64_t v8 = (uint64_t *)(v5 + 40);
    do
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v9 = *v8;
      swift_bridgeObjectRetain();
      sub_1B3A18974(v10, v9, v37);
      swift_bridgeObjectRelease();
      v38[0] = v7;
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1B3A496A4(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v38[0];
      }
      v8 += 2;
      *(void *)(v7 + 16) = v12 + 1;
      sub_1B3A41964(v37, v7 + 40 * v12 + 32);
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    uint64_t v2 = v36;
  }
  if (!*(void *)(v7 + 16)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
  char v14 = sub_1B39B5D74();
  char v15 = sub_1B39B5AA4();
  uint64_t v16 = *(void (**)(unint64_t, unint64_t, void, void))(*(void *)v13 + 216);
  uint64_t v17 = *(void *)v13 + 216;
  v16(0xD000000000000018, 0x80000001B3A7BB80, v14 & 1, v15 & 1);
  uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_recording);
  uint64_t v19 = *(void (***)(void, void))(v18 + 40);
  if (v19)
  {
    _Block_copy(*(const void **)(v18 + 40));
    _Block_copy(v19);
    v37[0] = xmmword_1B3A75DE0;
    LODWORD(v38[0]) = 1;
    v38[1] = v37;
    ((void (**)(void, void *))v19)[2](v19, v38);
    _Block_release(v19);
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  _Block_release(v20);
  type metadata accessor for WaitGroup();
  id v22 = *(id *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_waitQueue);
  swift_retain();
  uint64_t result = sub_1B3A18660(v7, v22, v13);
  if (!v2)
  {
    uint64_t v23 = sub_1B39B5840();
    if (!v23) {
      return swift_release();
    }
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      uint64_t v25 = (char *)(v23 + 48);
      v38[3] = v13;
      do
      {
        uint64_t v26 = v17;
        uint64_t v27 = v16;
        uint64_t v28 = *((void *)v25 - 2);
        uint64_t v29 = *((void *)v25 - 1);
        char v30 = *v25;
        v25 += 24;
        sub_1B39AAABC(v28, v29, v30);
        int v31 = sub_1B39ADA50(v28, v29, v30);
        unint64_t v33 = v32;
        uint64_t v34 = v29;
        uint64_t v16 = v27;
        uint64_t v17 = v26;
        sub_1B39B6148(v28, v34, v30);
        LOBYTE(v28) = sub_1B39B5D74();
        char v35 = sub_1B39B5AA4();
        v16((unint64_t)v31, v33, v28 & 1, v35 & 1);
        swift_bridgeObjectRelease();
        --v24;
      }
      while (v24);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A472B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 1)
  {
    (*(void (**)(unint64_t, unint64_t))(**(void **)(a2
                                                                             + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                               + 248))(0xD000000000000018, 0x80000001B3A7BF90);
    ktrace_abort(*(void *)(a2 + OBJC_IVAR____TtC6ktrace9Recording_session));
  }
  else if (v5)
  {
    if (v5 >= 2) {
      (*(void (**)(unint64_t, unint64_t))(**(void **)(a2
    }
                                                                               + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                                 + 248))(0xD000000000000011, 0x80000001B3A7BF70);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t))(**(void **)(a2
                                                                             + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                               + 248))(0xD00000000000003ELL, 0x80000001B3A7BFB0);
  }
  uint64_t result = swift_beginAccess();
  if (__OFADD__(*v4, 1)) {
    __break(1u);
  }
  else {
    ++*v4;
  }
  return result;
}

uint64_t sub_1B3A47430@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1B3A47438(uint64_t a1)
{
  uint64_t v2 = sub_1B3A6FE10();
  MEMORY[0x1F4188790](v2);
  uint64_t v3 = sub_1B3A6FDF0();
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = sub_1B3A6FE20();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  (*(void (**)(uint64_t))(*(void *)a1 + 272))(v5);
  return 0;
}

uint64_t sub_1B3A47BEC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6ktrace9Recording_planPath;
  uint64_t v2 = sub_1B3A6FF40();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  memcpy(__dst, (const void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_plan), 0x141uLL);
  sub_1B39B0C68((uint64_t)__dst);
  sub_1B3A11580(v0 + OBJC_IVAR____TtC6ktrace9Recording_inProcessFile, &qword_1E9CD58F8);
  v3(v0 + OBJC_IVAR____TtC6ktrace9Recording_finishedFile, v2);
  swift_bridgeObjectRelease();

  sub_1B3A4B628(v0 + OBJC_IVAR____TtC6ktrace9Recording_options, type metadata accessor for RecordingOptions.Options);
  sub_1B39B0D88(*(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_subclassBitmap), *(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_subclassBitmap + 8));
  sub_1B39A8658(*(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason), *(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason + 16));

  swift_release();
  swift_release();
  swift_release();
  long long v4 = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 112);
  v10[6] = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 96);
  v11[0] = v4;
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 121);
  long long v5 = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 48);
  void v10[2] = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 32);
  v10[3] = v5;
  long long v6 = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 80);
  v10[4] = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 64);
  v10[5] = v6;
  long long v7 = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 16);
  v10[0] = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing);
  v10[1] = v7;
  sub_1B3A20690((uint64_t)v10);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B3A47DC8()
{
  sub_1B3A47BEC();

  return swift_deallocClassInstance();
}

uint64_t sub_1B3A47E20()
{
  uint64_t v0 = sub_1B3A700D0();
  __swift_allocate_value_buffer(v0, qword_1E9CDCD20);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E9CDCD20);
  return sub_1B3A700C0();
}

void sub_1B3A47E94(int a1, uint64_t a2, unint64_t a3)
{
  long long v6 = *(void **)(v3 + 40);
  if (v6)
  {
    _Block_copy(v6);
    sub_1B3A48534(a2, a3, a1, (void (**)(void, void, void, void))v6);
  }
  if (qword_1E9CDB890 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1B3A700D0();
  __swift_project_value_buffer(v8, (uint64_t)qword_1E9CDCD20);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = sub_1B3A700B0();
  os_log_type_t v10 = sub_1B3A70630();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = v12;
    *(_DWORD *)unint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    sub_1B39B2E48(a2, a3, &v13);
    sub_1B3A707C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B39A5000, v9, v10, "recording failed: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EC0090](v12, -1, -1);
    MEMORY[0x1B3EC0090](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t ktrace_record(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B39B61D8(a1, a3);
}

uint64_t ktrace_record(_:_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B39B61D8(a1, a3);
}

uint64_t sub_1B3A48078(void *a1, char a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void, void))(*a1 + 256))(7, a1[2], a1[3], a1[4], 0);
  if (a2)
  {
    unint64_t v6 = a3[1];
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *a3;
      sub_1B39B396C(v7, v6);
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t aBlock = 0xD00000000000001BLL;
      unint64_t v12 = 0x80000001B3A7BF30;
      uint64_t v17 = *(void *)sub_1B3A1A1D4();
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      uint64_t v8 = (void *)sub_1B3A70290();
      swift_bridgeObjectRelease();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = v6;
      char v15 = sub_1B3A4BFB0;
      uint64_t v16 = v9;
      unint64_t aBlock = MEMORY[0x1E4F143A8];
      unint64_t v12 = 1107296256;
      uint64_t v13 = sub_1B3A48684;
      char v14 = &block_descriptor_49;
      os_log_type_t v10 = _Block_copy(&aBlock);
      sub_1B39B396C(v7, v6);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v10);

      return sub_1B3A4B87C(v7, v6);
    }
  }
  return result;
}

uint64_t ktrace_recording_create(const char *a1, int a2)
{
  uint64_t v4 = swift_slowAlloc();
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(v4 + 40) = 0;
  *(void *)uint64_t v4 = strdup(a1);
  *(_DWORD *)(v4 + 48) = a2;
  return v4;
}

uint64_t ktrace_recording_create(_:_:)(const char *a1, int a2)
{
  uint64_t v4 = swift_slowAlloc();
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(v4 + 40) = 0;
  *(void *)uint64_t v4 = strdup(a1);
  *(_DWORD *)(v4 + 48) = a2;
  return v4;
}

char *ktrace_recording_override_default_plan(uint64_t a1, const char *a2)
{
  free(*(void **)(a1 + 8));
  uint64_t result = strdup(a2);
  *(void *)(a1 + 8) = result;
  return result;
}

char *ktrace_recording_override_default_plan(_:_:)(uint64_t a1, const char *a2)
{
  free(*(void **)(a1 + 8));
  uint64_t result = strdup(a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t ktrace_recording_set_streams(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  return result;
}

uint64_t ktrace_recording_set_streams(_:_:_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  return result;
}

char *ktrace_recording_override_plan_path(uint64_t a1, const char *a2)
{
  free(*(void **)(a1 + 16));
  uint64_t result = strdup(a2);
  *(void *)(a1 + 16) = result;
  return result;
}

char *ktrace_recording_override_plan_path(_:_:)(uint64_t a1, const char *a2)
{
  free(*(void **)(a1 + 16));
  uint64_t result = strdup(a2);
  *(void *)(a1 + 16) = result;
  return result;
}

void ktrace_recording_follow_notifications(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = _Block_copy(v3);
  _Block_release(v4);
  long long v5 = _Block_copy(v4);
  unint64_t v6 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  _Block_copy(v5);
  _Block_release(v6);

  _Block_release(v3);
}

void ktrace_recording_follow_notifications(_:callback:)(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  _Block_release(v3);
  uint64_t v4 = _Block_copy(v3);
  long long v5 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  _Block_copy(v4);

  _Block_release(v5);
}

void ktrace_recording_destroy(_:)(uint64_t a1)
{
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  free(*(void **)(a1 + 8));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    _Block_release(v2);
  }

  JUMPOUT(0x1B3EC0090);
}

void sub_1B3A48534(uint64_t a1, uint64_t a2, int a3, void (**a4)(void, void, void, void))
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v13 = a3;
  char v14 = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_1B3A709A0();
    goto LABEL_8;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      uint64_t v8 = sub_1B3A70A20();
      if (!v8)
      {
        LODWORD(v11) = a3;
        uint64_t v12 = 0;
        goto LABEL_7;
      }
    }
    LODWORD(v11) = a3;
    uint64_t v12 = v8;
LABEL_7:
    ((void (**)(void, uint64_t *, uint64_t, uint64_t))a4)[2](a4, &v11, v7, v6);
LABEL_8:
    _Block_release(a4);
    return;
  }
  uint64_t v11 = a1;
  uint64_t v12 = a2 & 0xFFFFFFFFFFFFFFLL;
  int v9 = a3;
  os_log_type_t v10 = &v11;
  ((void (*)(void (**)(void, void, void, void), int *))a4[2])(a4, &v9);
  _Block_release(a4);
}

id sub_1B3A48684(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1B3A4C0E8(0, &qword_1E9CD6210);
    uint64_t v4 = (void *)sub_1B3A70210();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

_DWORD *sub_1B3A48720@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1B3A4872C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1B3A48734@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1B3A48748@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1B3A4875C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B3A48770(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1B3A487A0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1B3A487CC@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1B3A487F0(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1B3A48804(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1B3A48818(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1B3A4882C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B3A48840(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B3A48854(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1B3A48868(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B3A4887C()
{
  return *v0 == 0;
}

_DWORD *sub_1B3A4888C(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1B3A488A0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_1B3A4B9F0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1B3A488E0(uint64_t a1)
{
  uint64_t v2 = sub_1B3A4965C(&qword_1E9CD61B8, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_1B3A4965C(&qword_1E9CD61F8, type metadata accessor for FileAttributeKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

char *sub_1B3A4899C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6240);
      os_log_type_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      os_log_type_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1B3A4B688(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1B3A48A98(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD61B0);
      os_log_type_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      os_log_type_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1B3A4B8E0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_1B3A48BBC(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  for (uint64_t i = (uint64_t *)(swift_bridgeObjectRetain() + 48); ; i += 3)
  {
    uint64_t v11 = *(i - 2);
    uint64_t v10 = *(i - 1);
    uint64_t v12 = *i;
    int v13 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_1B3A0C82C(v11, v10);
    uint64_t v16 = v13[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      sub_1B3A70D70();
      __break(1u);
      goto LABEL_22;
    }
    char v19 = v14;
    if (v13[3] >= v18)
    {
      if ((a2 & 1) == 0) {
        sub_1B3A302AC();
      }
    }
    else
    {
      sub_1B3A49058(v18, a2 & 1);
      unint64_t v20 = sub_1B3A0C82C(v11, v10);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_21;
      }
      unint64_t v15 = v20;
    }
    id v22 = (void *)*a3;
    if (v19) {
      break;
    }
    v22[(v15 >> 6) + 8] |= 1 << v15;
    unint64_t v6 = (uint64_t *)(v22[6] + 16 * v15);
    uint64_t *v6 = v11;
    v6[1] = v10;
    *(void *)(v22[7] + 8 * v15) = v12;
    uint64_t v7 = v22[2];
    BOOL v8 = __OFADD__(v7, 1);
    uint64_t v9 = v7 + 1;
    if (v8) {
      goto LABEL_20;
    }
    v22[2] = v9;
LABEL_5:
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  uint64_t v23 = *(void *)(v22[7] + 8 * v15);
  swift_bridgeObjectRetain();
  if (sub_1B3A43A6C(v12, v23))
  {
    uint64_t v24 = sub_1B3A285A0(v12, v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = v22[7];
    swift_bridgeObjectRelease();
    *(void *)(v25 + 8 * v15) = v24;
    goto LABEL_5;
  }
  type metadata accessor for KTraceRecordError();
  sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
  uint64_t v26 = (void *)swift_allocError();
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  sub_1B3A49A10(v12, v23);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5EB0);
  sub_1B3A38DD8((unint64_t *)&qword_1E9CD5EB8, &qword_1E9CD5EB0);
  sub_1B39ADD78();
  uint64_t v29 = sub_1B3A704F0();
  uint64_t v31 = v30;
  swift_release();
  *uint64_t v28 = v29;
  v28[1] = v31;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_bridgeObjectRelease();
  id v32 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_22:
  sub_1B3A709B0();
  sub_1B3A703A0();
  sub_1B3A70A80();
  sub_1B3A703A0();
  sub_1B3A70B00();
  __break(1u);
}

unint64_t sub_1B3A48FC4(uint64_t a1)
{
  sub_1B3A702C0();
  sub_1B3A70E00();
  sub_1B3A70360();
  uint64_t v2 = sub_1B3A70E50();
  swift_bridgeObjectRelease();

  return sub_1B3A49370(a1, v2);
}

uint64_t sub_1B3A49058(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5FF0);
  char v36 = a2;
  uint64_t v6 = sub_1B3A70B30();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B3A70E00();
    sub_1B3A70360();
    uint64_t result = sub_1B3A70E50();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1B3A49370(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_1B3A702C0();
    uint64_t v8 = v7;
    if (v6 == sub_1B3A702C0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_1B3A702C0();
          uint64_t v15 = v14;
          if (v13 == sub_1B3A702C0() && v15 == v16) {
            break;
          }
          char v18 = sub_1B3A70D20();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1B3A494E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B3A496C4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1B3A49508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A49570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A495D8(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for Recording()
{
  uint64_t result = qword_1E9CD64D8;
  if (!qword_1E9CD64D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B3A4965C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B3A496A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B3A4986C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1B3A496C4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6248);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6250);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A4986C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD61B0);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6238);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A49A10(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_1B3A49B98((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_1B3A49B98((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x1B3EC0090](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_1B3A49B98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  id v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          unint64_t v9 = (v14 - 1) & v14;
          int64_t v62 = v15;
          unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        sub_1B3A70E00();
        swift_bridgeObjectRetain();
        sub_1B3A70360();
        uint64_t v20 = sub_1B3A70E50();
        uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v22 = v20 & ~v21;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = 1 << v22;
        if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v6 = v62;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      unint64_t v26 = (void *)(v25 + 16 * v22);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (sub_1B3A70D20() & 1) == 0)
      {
        uint64_t v28 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & v28;
          if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          uint64_t v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (sub_1B3A70D20() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v23 = v30 >> 6;
            uint64_t v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }
  int64_t v34 = 0;
  uint64_t v60 = a3 + 56;
  uint64_t v61 = 0;
  uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & *(void *)(a3 + 56);
  int64_t v63 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      unint64_t v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        unint64_t v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }
LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    sub_1B3A70E00();
    swift_bridgeObjectRetain();
    sub_1B3A70360();
    uint64_t v47 = sub_1B3A70E50();
    uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    uint64_t v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_1B3A70D20() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_1B3A32A98(v57, a2, v61, v5);
      }
    }
    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        uint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (sub_1B3A70D20() & 1) != 0) {
          goto LABEL_76;
        }
      }
LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  unint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    int64_t v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    int64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_1B3A4A0D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1B3A73570;
      uint64_t v10 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      if (v10 < (int)v3) {
        goto LABEL_22;
      }
      if (sub_1B3A6FD40() && __OFSUB__((int)v3, sub_1B3A6FD70())) {
        goto LABEL_23;
      }
      sub_1B3A6FD80();
      swift_allocObject();
      uint64_t v20 = sub_1B3A6FD30();
      swift_release();
      uint64_t v9 = v20;
LABEL_13:
      if (v10 < (int)v3) {
        goto LABEL_20;
      }
      uint64_t v21 = sub_1B3A6FD40();
      if (!v21) {
        goto LABEL_25;
      }
      uint64_t v22 = v21;
      uint64_t v23 = sub_1B3A6FD70();
      if (__OFSUB__((int)v3, v23)) {
        goto LABEL_21;
      }
      uint64_t v24 = (const void *)(v22 + (int)v3 - v23);
      sub_1B3A6FD60();
      uint64_t v31 = nullsub_1;
      uint64_t v32 = 0;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v28 = 1107296256;
      uint64_t v29 = sub_1B3A4672C;
      unint64_t v30 = &block_descriptor_71;
      uint64_t v25 = _Block_copy(&aBlock);
      uint64_t v7 = ktrace_events_filter_bitmap(a2, v24, v25);
      _Block_release(v25);
      unint64_t v18 = v9 | 0x4000000000000000;
      *a1 = v3;
      break;
    case 2uLL:
      *(void *)&long long v33 = *a1;
      *((void *)&v33 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1B3A6FF50();
      long long v11 = v33;
      uint64_t v12 = *(void *)(v33 + 16);
      uint64_t v13 = sub_1B3A6FD40();
      if (!v13)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x1B3A4A56CLL);
      }
      uint64_t v14 = v13;
      uint64_t v15 = sub_1B3A6FD70();
      if (__OFSUB__(v12, v15))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      uint64_t v16 = (const void *)(v14 + v12 - v15);
      sub_1B3A6FD60();
      uint64_t v31 = nullsub_1;
      uint64_t v32 = 0;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v28 = 1107296256;
      uint64_t v29 = sub_1B3A4672C;
      unint64_t v30 = &block_descriptor_68;
      unint64_t v17 = _Block_copy(&aBlock);
      uint64_t v7 = ktrace_events_filter_bitmap(a2, v16, v17);
      _Block_release(v17);
      unint64_t v18 = *((void *)&v11 + 1) | 0x8000000000000000;
      *a1 = v11;
      break;
    case 3uLL:
      *(void *)((char *)&v33 + 7) = 0;
      uint64_t v32 = 0;
      *(void *)&long long v33 = 0;
      uint64_t v31 = nullsub_1;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v28 = 1107296256;
      uint64_t v29 = sub_1B3A4672C;
      unint64_t v30 = &block_descriptor_77;
      uint64_t v19 = _Block_copy(&aBlock);
      uint64_t v7 = ktrace_events_filter_bitmap(a2, &v33, v19);
      _Block_release(v19);
      return v7;
    default:
      *(void *)&long long v33 = *a1;
      WORD4(v33) = v2;
      BYTE10(v33) = BYTE2(v2);
      BYTE11(v33) = BYTE3(v2);
      BYTE12(v33) = BYTE4(v2);
      BYTE13(v33) = BYTE5(v2);
      BYTE14(v33) = BYTE6(v2);
      uint64_t v31 = nullsub_1;
      uint64_t v32 = 0;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v28 = 1107296256;
      uint64_t v29 = sub_1B3A4672C;
      unint64_t v30 = &block_descriptor_74;
      int64_t v6 = _Block_copy(&aBlock);
      uint64_t v7 = ktrace_events_filter_bitmap(a2, &v33, v6);
      _Block_release(v6);
      unint64_t v8 = DWORD2(v33) | ((unint64_t)BYTE12(v33) << 32) | ((unint64_t)BYTE13(v33) << 40) | ((unint64_t)BYTE14(v33) << 48);
      *a1 = v33;
      a1[1] = v8;
      return v7;
  }
  a1[1] = v18;
  return v7;
}

uint64_t sub_1B3A4A57C(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *v1;
  int64_t v5 = *((void *)*v1 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = *((void *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t v4 = sub_1B3A1617C(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v11 = *((void *)v4 + 2);
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_1B3A1F200((uint64_t)v38, &v4[16 * v11 + 32], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    *((void *)v4 + 2) = v16;
  }
  if (result != v12)
  {
LABEL_13:
    uint64_t result = sub_1B3A21B4C();
    _DWORD *v1 = v4;
    return result;
  }
LABEL_16:
  int64_t v2 = *((void *)v4 + 2);
  uint64_t v3 = v38[0];
  uint64_t v37 = v38[1];
  uint64_t v13 = v39;
  int64_t v6 = v40;
  if (v41)
  {
    unint64_t v17 = (v41 - 1) & v41;
    unint64_t v18 = __clz(__rbit64(v41)) | (v40 << 6);
    int64_t v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  int64_t v32 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_66;
  }
  int64_t v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36) {
    goto LABEL_13;
  }
  unint64_t v33 = *(void *)(v37 + 8 * v32);
  int64_t v34 = v6 + 1;
  if (!v33)
  {
    int64_t v34 = v6 + 2;
    if (v6 + 2 >= v36) {
      goto LABEL_13;
    }
    unint64_t v33 = *(void *)(v37 + 8 * v34);
    if (!v33)
    {
      int64_t v34 = v6 + 3;
      if (v6 + 3 >= v36) {
        goto LABEL_13;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v6 + 4;
        if (v6 + 4 >= v36) {
          goto LABEL_13;
        }
        unint64_t v33 = *(void *)(v37 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v6 + 5;
          if (v6 + 5 >= v36) {
            goto LABEL_13;
          }
          unint64_t v33 = *(void *)(v37 + 8 * v34);
          if (!v33)
          {
            int64_t v35 = v6 + 6;
            do
            {
              if (v36 == v35) {
                goto LABEL_13;
              }
              unint64_t v33 = *(void *)(v37 + 8 * v35++);
            }
            while (!v33);
            int64_t v34 = v35 - 1;
          }
        }
      }
    }
  }
  unint64_t v17 = (v33 - 1) & v33;
  unint64_t v18 = __clz(__rbit64(v33)) + (v34 << 6);
  int64_t v6 = v34;
LABEL_18:
  uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v18);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v22 = *((void *)v4 + 3);
    int64_t v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1) {
      break;
    }
    if (v2 < v23) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v2;
  }
  uint64_t result = (uint64_t)sub_1B3A1617C((char *)(v22 > 1), v2 + 1, 1, v4);
  uint64_t v4 = (char *)result;
  int64_t v23 = *(void *)(result + 24) >> 1;
  if (v2 >= v23) {
    goto LABEL_20;
  }
  while (1)
  {
LABEL_23:
    uint64_t v24 = &v4[16 * v2 + 32];
    *(void *)uint64_t v24 = v21;
    *((void *)v24 + 1) = v20;
    ++v2;
    if (v17)
    {
      unint64_t v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    int64_t v27 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v27 >= v36) {
      goto LABEL_45;
    }
    unint64_t v28 = *(void *)(v37 + 8 * v27);
    int64_t v29 = v6 + 1;
    if (!v28)
    {
      int64_t v29 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_45;
      }
      unint64_t v28 = *(void *)(v37 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_45;
        }
        unint64_t v28 = *(void *)(v37 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v6 + 4;
          if (v6 + 4 >= v36) {
            goto LABEL_45;
          }
          unint64_t v28 = *(void *)(v37 + 8 * v29);
          if (!v28)
          {
            int64_t v29 = v6 + 5;
            if (v6 + 5 >= v36) {
              goto LABEL_45;
            }
            unint64_t v28 = *(void *)(v37 + 8 * v29);
            if (!v28)
            {
              int64_t v30 = v6 + 6;
              while (v36 != v30)
              {
                unint64_t v28 = *(void *)(v37 + 8 * v30++);
                if (v28)
                {
                  int64_t v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              *((void *)v4 + 2) = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    unint64_t v17 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    int64_t v6 = v29;
LABEL_41:
    uint64_t v31 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v26);
    uint64_t v21 = *v31;
    uint64_t v20 = v31[1];
    if (v2 >= v23)
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    uint64_t result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_1B3A4A948(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1B3A48A98(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6238);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

char *sub_1B3A4AAB4(uint64_t a1)
{
  return sub_1B3A3E08C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B3A4AAC8(uint64_t a1)
{
  return sub_1B3A4899C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B3A4AADC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      unint64_t v9 = (void *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
      unint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      void v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A4AC50(uint64_t a1)
{
  sub_1B3A3B560(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192));
  return a1;
}

uint64_t sub_1B3A4ACBC()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B3A4AD04()
{
  void (*v5)(void *__return_ptr, uint64_t);
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t ns_from_timestamp;
  void (*v13)(void *, void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void __dst[41];
  void v26[18];
  void v27[18];
  void __src[42];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t end_reason = ktrace_get_end_reason(v1);
  uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v2 + 344);
  int64_t v6 = ((void *(*)(void *__return_ptr))v5)(v26);
  (*(void (**)(void *__return_ptr, void *))(*(void *)v2 + 224))(__src, v6);
  memcpy(__dst, __src, 0x141uLL);
  uint64_t v7 = v2 + OBJC_IVAR____TtC6ktrace9Recording_options;
  uint64_t v8 = sub_1B3A50E74(__dst, v2 + OBJC_IVAR____TtC6ktrace9Recording_options);
  int64_t v10 = v9;
  sub_1B3A20690((uint64_t)v26);
  uint64_t v11 = sub_1B39B0C68((uint64_t)__src);
  if (v10)
  {
    (*(void (**)(unint64_t, uint64_t))(**(void **)(v2 + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                      + 232))(v8, v10);
    uint64_t v11 = swift_bridgeObjectRelease();
  }
  v5(v27, v11);
  sub_1B3A20690((uint64_t)v27);
  ns_from_timestamp = ktrace_get_ns_from_timestamp(v1, v27[4]);
  uint64_t v13 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v2 + 360))(__dst);
  *(void *)(v14 + 40) = ns_from_timestamp;
  *(unsigned char *)(v14 + 48) = 0;
  v13(__dst, 0);
  BOOL v15 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 280))(end_reason);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 296))(v15);
  if (v18 != -1)
  {
    uint64_t v19 = v16;
    uint64_t v20 = v17;
    uint64_t v21 = v18;
    ((void (*)(void *__return_ptr))v5)(__dst);
    unint64_t v22 = type metadata accessor for RecordingOptions.Options(0);
    int64_t v23 = sub_1B3A1CB2C(v19, v20, v21, (uint64_t)__dst, *(void *)(v7 + *(int *)(v22 + 44)), *(unsigned char *)(v7 + *(int *)(v22 + 44) + 8));
    (*(void (**)(uint64_t))(*(void *)v3 + 352))(v23);
  }
  ktrace_session_destroy(v1);
  return sub_1B3A70710();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1B3A4B00C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1B3A4B05C(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v42 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v6 = v1[7];
  kperf_reset();
  uint64_t end_reason = ktrace_get_end_reason(v3);
  (*(void (**)(uint64_t, void, void, void, uint64_t))(*(void *)v4 + 256))(5, 0, 0, 0, 1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(**(void **)(v5 + OBJC_IVAR____TtC6ktrace9Recording_kernelDisableWaiter)
                                              + 128))(end_reason);
  if (!a1)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v40 = v6;
  uint64_t v41 = v5;
  uint64_t v39 = a1;
  uint64_t ktrace_file = ktrace_get_ktrace_file(a1);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  if (!ktrace_file)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v13 = result;
  int64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = v11;
  void v14[3] = v12;
  v14[4] = v13;
  uint64_t v46 = sub_1B3A4C260;
  uint64_t v47 = v14;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v44 = sub_1B3A46734;
  uint64_t v45 = &block_descriptor_59;
  uint64_t v15 = v12;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  ktrace_file_iterate(ktrace_file, 0, (uint64_t)v16, v17, v18, v19, v20, v21);
  _Block_release(v16);
  swift_beginAccess();
  uint64_t v22 = *(void *)(v11 + 16);
  int64_t v23 = *(uint64_t (**)(long long *))(*(void *)v41 + 360);
  uint64_t v24 = (void (*)(long long *, void))v23(&aBlock);
  *(void *)(v25 + 112) = v22;
  *(unsigned char *)(v25 + 120) = 0;
  v24(&aBlock, 0);
  swift_beginAccess();
  uint64_t v26 = *(void *)(v15 + 16);
  int64_t v27 = (void (*)(long long *, void))v23(&aBlock);
  *(void *)(v28 + 128) = v26;
  *(unsigned char *)(v28 + 136) = 0;
  v27(&aBlock, 0);
  swift_beginAccess();
  uint64_t v29 = *(void *)(v13 + 16);
  int64_t v30 = (void (*)(long long *, void))v23(&aBlock);
  *(void *)(v31 + 96) = v29;
  *(unsigned char *)(v31 + 104) = 0;
  v30(&aBlock, 0);
  *(void *)&long long aBlock = v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
  sub_1B3A38DD8((unint64_t *)&qword_1E9CD58B0, &qword_1E9CD58A8);
  sub_1B3A70250();
  *(void *)&long long aBlock = 0;
  *((void *)&aBlock + 1) = 0xE000000000000000;
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  *(void *)&long long aBlock = 0;
  *((void *)&aBlock + 1) = 0xE000000000000000;
  sub_1B3A709B0();
  swift_bridgeObjectRelease();
  *(void *)&long long aBlock = 0xD000000000000018;
  *((void *)&aBlock + 1) = 0x80000001B3A7C0C0;
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  long long v32 = aBlock;
  char v33 = sub_1B39B5D74();
  char v34 = sub_1B39B5AA4();
  (*(void (**)(void, void, void, void))(*(void *)v7 + 216))(v32, *((void *)&v32 + 1), v33 & 1, v34 & 1);
  swift_bridgeObjectRelease();
  int64_t v35 = *(void (***)(void, void))(v40 + 40);
  if (v35)
  {
    _Block_copy(*(const void **)(v40 + 40));
    _Block_copy(v35);
    long long aBlock = xmmword_1B3A75DE0;
    int v48 = 5;
    p_long long aBlock = &aBlock;
    ((void (**)(void, int *))v35)[2](v35, &v48);
    _Block_release(v35);
    int64_t v36 = v35;
  }
  else
  {
    int64_t v36 = 0;
  }
  _Block_release(v36);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v41;
  *(void *)(v37 + 24) = v39;
  uint64_t v46 = sub_1B3A4C3A4;
  uint64_t v47 = (void *)v37;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v44 = sub_1B3A4672C;
  uint64_t v45 = &block_descriptor_65;
  uint64_t v38 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  ktrace_events_all(v39, v38);
  _Block_release(v38);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B3A4B628(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *sub_1B3A4B688(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A4B770(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
LABEL_9:
    __break(1u);
    return MEMORY[0x1F4183950](a1, a2);
  }
  uint64_t v3 = a1;
  int v4 = *(unsigned __int8 *)(a1 + 32);
  a1 += 32;
  if (v4)
  {
    a2 = 0;
    uint64_t v5 = v2 - 1;
    uint64_t v6 = v3 + 33;
    while (v5 != a2)
    {
      if (!*(unsigned __int8 *)(v6 + a2++)) {
        return MEMORY[0x1F4183950](a1, a2);
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  a2 = 0;
  return MEMORY[0x1F4183950](a1, a2);
}

uint64_t sub_1B3A4B7B8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B3A4B7CC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(v4 + 16);
  BOOL v7 = __CFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = (void *)(v3 + 16);
    *(void *)(v4 + 16) = v8;
    uint64_t v10 = ktrace_chunk_size(a1);
    uint64_t result = swift_beginAccess();
    if (!__CFADD__(*v9, v10))
    {
      *v9 += v10;
      return 1;
    }
  }
  __break(1u);
  return result;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

uint64_t sub_1B3A4B87C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1B39B0D88(a1, a2);
  }
  return a1;
}

uint64_t sub_1B3A4B894()
{
  return sub_1B3A472B8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t objectdestroy_16Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A4B8E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6238);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A4B9F0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1B3A4BA28()
{
  return type metadata accessor for Recording();
}

void sub_1B3A4BA30()
{
  sub_1B3A6FF40();
  if (v0 <= 0x3F)
  {
    sub_1B3A4BBBC();
    if (v1 <= 0x3F)
    {
      type metadata accessor for RecordingOptions.Options(319);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1B3A4BBBC()
{
  if (!qword_1E9CD5790)
  {
    sub_1B3A6FF40();
    unint64_t v0 = sub_1B3A70730();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9CD5790);
    }
  }
}

uint64_t type metadata accessor for Recording.Diagnostics()
{
  return self;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1B3A4BC54(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1B3A4BCB0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

void type metadata accessor for ktrace_recording(uint64_t a1)
{
}

uint64_t sub_1B3A4BD24()
{
  return sub_1B3A4965C(&qword_1E9CD61E0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1B3A4BD6C()
{
  return sub_1B3A4965C(&qword_1E9CD61E8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1B3A4BDB4()
{
  return sub_1B3A4965C(&qword_1E9CD61F0, type metadata accessor for FileAttributeKey);
}

unint64_t sub_1B3A4BDFC()
{
  unint64_t result = qword_1E9CD6208;
  if (!qword_1E9CD6208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6208);
  }
  return result;
}

uint64_t sub_1B3A4BE50(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A4BE7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B3A4BEE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B3A4BF4C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A4BF78()
{
  sub_1B39B0D88(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A4BFB0()
{
  uint64_t v0 = self;
  uint64_t v1 = (void *)sub_1B3A6FFA0();
  *(void *)&v10[0] = 0;
  id v2 = objc_msgSend(v0, sel_JSONObjectWithData_options_error_, v1, 0, v10);

  id v3 = *(id *)&v10[0];
  if (v2)
  {
    sub_1B3A70900();
    swift_unknownObjectRelease();
  }
  else
  {
    int v4 = v3;
    uint64_t v5 = (void *)sub_1B3A6FE40();

    swift_willThrow();
    memset(v10, 0, sizeof(v10));
  }
  sub_1B39B4CD4((uint64_t)v10, (uint64_t)v8, &qword_1E9CD5A50);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6218);
    if (swift_dynamicCast()) {
      return v7;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_1B3A11580((uint64_t)v8, &qword_1E9CD5A50);
    return 0;
  }
}

uint64_t sub_1B3A4C0E8(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1B3A4C124()
{
  unint64_t result = qword_1E9CD6220;
  if (!qword_1E9CD6220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6220);
  }
  return result;
}

unint64_t sub_1B3A4C178()
{
  unint64_t result = qword_1E9CD6230;
  if (!qword_1E9CD6230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6230);
  }
  return result;
}

uint64_t sub_1B3A4C1CC(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(void *)(v1 + 24);
  int v4 = *(_DWORD *)(v1 + 16);
  return (*(uint64_t (**)(uint64_t, int *))(v2 + 16))(v2, &v4);
}

uint64_t sub_1B3A4C218()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1B3A4C260(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v4 + 16);
  BOOL v8 = __CFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
    goto LABEL_10;
  }
  *(void *)(v4 + 16) = v9;
  uint64_t v10 = ktrace_chunk_size(a1);
  uint64_t result = swift_beginAccess();
  if (__CFADD__(*(void *)(v3 + 16), v10))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(void *)(v3 + 16) += v10;
  int v11 = ktrace_chunk_tag(a1);
  if (v11 != 7680 && v11 != 20982 && v11 != 7936) {
    return 1;
  }
  uint64_t v12 = ktrace_chunk_size(a1);
  uint64_t result = swift_beginAccess();
  if (!__CFADD__(*(void *)(v5 + 16), v12))
  {
    *(void *)(v5 + 16) += v12;
    return 1;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1B3A4C36C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A4C3A4(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    if (v2)
    {
      unint64_t v3 = result;
      uint64_t v4 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(**(void **)(v1 + 16) + 360))(v5);
      sub_1B3A50D5C(v3, v2);
      return v4(v5, 0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void type metadata accessor for ktrace_record_flags_t(uint64_t a1)
{
}

uint64_t sub_1B3A4C464(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_1B3A4C4A8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

void type metadata accessor for ktrace_record_notify(uint64_t a1)
{
}

uint64_t sub_1B3A4C4F8()
{
  return sub_1B3A4965C(&qword_1E9CD6268, type metadata accessor for ktrace_record_flags_t);
}

uint64_t sub_1B3A4C540()
{
  return sub_1B3A4965C(&qword_1E9CD6270, type metadata accessor for ktrace_record_flags_t);
}

uint64_t sub_1B3A4C588()
{
  return sub_1B3A4965C(&qword_1E9CD6278, type metadata accessor for ktrace_record_flags_t);
}

uint64_t sub_1B3A4C5D0()
{
  return sub_1B3A4965C(&qword_1E9CD6280, type metadata accessor for ktrace_record_flags_t);
}

void type metadata accessor for ktrace_record_note_t(uint64_t a1)
{
}

unint64_t sub_1B3A4C6A0()
{
  unint64_t result = sub_1B3A4CE9C((uint64_t)&unk_1F0C3B618);
  qword_1E9CDCD38 = result;
  return result;
}

uint64_t sub_1B3A4C6C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 184);
  if (v1 && *(void *)(v1 + 16))
  {
    sub_1B3A709B0();
    sub_1B3A703A0();
    sub_1B3A70D00();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = sub_1B3A26550();
  uint64_t v3 = sub_1B3A4C9C8((uint64_t)v2);
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
    sub_1B3A0609C();
    sub_1B3A70250();
    swift_bridgeObjectRelease();
    sub_1B3A709B0();
    sub_1B3A703A0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A703A0();
  }
  swift_bridgeObjectRelease();
  sub_1B3A709B0();
  sub_1B3A703A0();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B3A4C9C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = a1 + 32;
  uint64_t v3 = swift_bridgeObjectRetain();
  long long v4 = *(_OWORD *)(v3 + 208);
  long long v55 = *(_OWORD *)(v3 + 192);
  long long v56 = v4;
  long long v57 = *(_OWORD *)(v3 + 224);
  uint64_t v58 = *(void *)(v3 + 240);
  long long v5 = *(_OWORD *)(v3 + 144);
  long long v51 = *(_OWORD *)(v3 + 128);
  long long v52 = v5;
  long long v6 = *(_OWORD *)(v3 + 176);
  long long v53 = *(_OWORD *)(v3 + 160);
  long long v54 = v6;
  long long v7 = *(_OWORD *)(v3 + 80);
  long long v47 = *(_OWORD *)(v3 + 64);
  long long v48 = v7;
  long long v8 = *(_OWORD *)(v3 + 112);
  long long v49 = *(_OWORD *)(v3 + 96);
  long long v50 = v8;
  long long v9 = *(_OWORD *)(v3 + 48);
  long long v45 = *(_OWORD *)(v3 + 32);
  long long v46 = v9;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v11 = 1;
  uint64_t v35 = v2;
  uint64_t v36 = v1;
  while (1)
  {
    long long v43 = v45;
    *(_OWORD *)&v60[144] = v56;
    *(_OWORD *)&v60[160] = v57;
    *(void *)&v60[176] = v58;
    *(_OWORD *)&v60[80] = v52;
    *(_OWORD *)&v60[96] = v53;
    *(_OWORD *)&v60[112] = v54;
    *(_OWORD *)&v60[128] = v55;
    *(_OWORD *)&v60[16] = v48;
    *(_OWORD *)&v60[32] = v49;
    *(_OWORD *)&v60[48] = v50;
    *(_OWORD *)&v60[64] = v51;
    long long v59 = v46;
    *(_OWORD *)uint64_t v60 = v47;
    sub_1B3A4DFE0((uint64_t)&v45);
    long long v74 = *(_OWORD *)&v60[136];
    long long v75 = *(_OWORD *)&v60[152];
    long long v76 = *(_OWORD *)&v60[168];
    v71[0] = *(_OWORD *)&v60[72];
    v71[1] = *(_OWORD *)&v60[88];
    long long v72 = *(_OWORD *)&v60[104];
    long long v73 = *(_OWORD *)&v60[120];
    long long v67 = *(_OWORD *)&v60[8];
    long long v68 = *(_OWORD *)&v60[24];
    long long v69 = *(_OWORD *)&v60[40];
    long long v70 = *(_OWORD *)&v60[56];
    sub_1B3A50BD8((uint64_t)v71, (uint64_t)v77);
    sub_1B3A50BD8((uint64_t)v77, (uint64_t)&v78);
    if (v78)
    {
      if ((void)v72)
      {
        uint64_t v12 = *(void *)(v72 + 16);
        if (v12) {
          break;
        }
      }
    }
LABEL_33:
    sub_1B3A3B47C((uint64_t)&v45);
    if (v11 == v1) {
      goto LABEL_35;
    }
LABEL_34:
    uint64_t v28 = (long long *)(v2 + 216 * v11);
    long long v29 = v28[11];
    long long v55 = v28[10];
    long long v56 = v29;
    long long v57 = v28[12];
    uint64_t v58 = *((void *)v28 + 26);
    long long v30 = v28[7];
    long long v51 = v28[6];
    long long v52 = v30;
    long long v31 = v28[9];
    long long v53 = v28[8];
    long long v54 = v31;
    long long v32 = v28[3];
    long long v47 = v28[2];
    long long v48 = v32;
    long long v33 = v28[5];
    long long v49 = v28[4];
    long long v50 = v33;
    long long v34 = v28[1];
    ++v11;
    long long v45 = *v28;
    long long v46 = v34;
  }
  uint64_t v41 = v10;
  uint64_t v13 = v72 + 32;
  uint64_t v14 = *(void *)(v78 + 16);
  uint64_t v15 = v78 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  uint64_t v42 = v11;
  uint64_t v39 = v13;
  uint64_t v40 = v12;
  uint64_t v37 = v15;
  uint64_t v38 = v14;
  while (1)
  {
    uint64_t v18 = *(void *)(v13 + 24 * v17);
    if (v18 < v14)
    {
      if (v18 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v44 = *(void *)(*(void *)(v15 + 8 * v18) + 16);
      if (v44) {
        break;
      }
    }
LABEL_7:
    if (++v17 == v12)
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = v35;
      uint64_t v1 = v36;
      uint64_t v10 = v41;
      goto LABEL_33;
    }
  }
  sub_1B39ACFD0();
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  while (1)
  {
    uint64_t v21 = v19;
    char v22 = *(unsigned char *)(v19 + v20 + 32);
    char v66 = v22;
    char v65 = 0;
    sub_1B3A70500();
    sub_1B3A70500();
    if (v63 == v61 && v64 == v62) {
      break;
    }
    char v24 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_23;
    }
    char v66 = v22;
    char v65 = 1;
    sub_1B3A70500();
    sub_1B3A70500();
    if (v63 == v61 && v64 == v62) {
      break;
    }
    char v25 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_23;
    }
    ++v20;
    uint64_t v19 = v21;
    if (v44 == v20)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v11 = v42;
      uint64_t v13 = v39;
      uint64_t v12 = v40;
      uint64_t v15 = v37;
      uint64_t v14 = v38;
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B3A3B47C((uint64_t)&v45);
  if (*((void *)&v43 + 1))
  {
    uint64_t v10 = v41;
    uint64_t v2 = v35;
    uint64_t v1 = v36;
    uint64_t v11 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1B3A1617C(0, *((void *)v41 + 2) + 1, 1, v41);
    }
    unint64_t v27 = *((void *)v10 + 2);
    unint64_t v26 = *((void *)v10 + 3);
    if (v27 >= v26 >> 1) {
      uint64_t v10 = sub_1B3A1617C((char *)(v26 > 1), v27 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v27 + 1;
    *(_OWORD *)&v10[16 * v27 + 32] = v43;
  }
  else
  {
    uint64_t v2 = v35;
    uint64_t v1 = v36;
    uint64_t v10 = v41;
    uint64_t v11 = v42;
  }
  if (v11 != v1) {
    goto LABEL_34;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  return (uint64_t)v10;
}

uint64_t sub_1B3A4CE74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B3A4C6C8(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t sub_1B3A4CE9C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62B0);
  uint64_t v2 = (void *)sub_1B3A70B40();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (long long *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *((unsigned __int8 *)v4 - 8);
    long long v11 = *v4;
    swift_retain();
    unint64_t result = sub_1B3A4DC5C(v5);
    if (v7) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    uint64_t v8 = v2[2];
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    void v2[2] = v10;
    uint64_t v4 = (long long *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for KdebugAdvice()
{
  uint64_t result = qword_1E9CDBEA8;
  if (!qword_1E9CDBEA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B3A4CFFC()
{
  void (*v16)(void *__return_ptr, void *);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  long long v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unsigned __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  void v77[2];
  void v78[44];
  _OWORD v79[21];
  uint64_t v80;
  unint64_t v81;

  uint64_t v1 = type metadata accessor for KdebugAdvice();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v74 = v0;
  uint64_t v4 = *v0;
  swift_bridgeObjectRetain_n();
  uint64_t v5 = sub_1B3A4DEF8(v4);
  swift_bridgeObjectRelease();
  *(void *)&v79[0] = v5;
  sub_1B3A4DE8C((char **)v79);
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)&v79[0] + 16) < 3uLL)
  {
    __break(1u);
    goto LABEL_42;
  }
  char v65 = 0;
  char v66 = v1;
  long long v67 = v3;
  long long v68 = *(void *)&v79[0];
  uint64_t v80 = 0;
  uint64_t v81 = 0xE000000000000000;
  long long v70 = v74 + 2;
  unint64_t v71 = *(void *)&v79[0] + 32;
  swift_retain();
  uint64_t v6 = 0;
  char v7 = (char *)MEMORY[0x1E4FBC860];
  long long v69 = 0x80000001B3A7C2D0;
  do
  {
    long long v76 = v6;
    uint64_t v8 = (unsigned __int16 *)(v71 + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = *((void *)v8 + 1);
    uint64_t v11 = sub_1B39FDD74(*v8);
    if (v11 != 150)
    {
      uint64_t v12 = v11;
      if (qword_1E9CDBEA0 != -1) {
        swift_once();
      }
      uint64_t v13 = qword_1E9CDCD38;
      if (*(void *)(qword_1E9CDCD38 + 16))
      {
        unint64_t v14 = sub_1B3A4DC5C(v12);
        if (v15)
        {
          uint64_t v16 = *(void (**)(void *__return_ptr, void *))(*(void *)(v13 + 56) + 16 * v14);
          LOBYTE(v79[0]) = v12;
          swift_retain();
          uint64_t v17 = sub_1B3A70300();
          sub_1B3A17AF4(v17, v18, v10, v4, v74[1]);
          swift_bridgeObjectRelease();
          *(void *)&v79[0] = 8237;
          *((void *)&v79[0] + 1) = 0xE200000000000000;
          sub_1B3A703A0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_1B3A703A0();
          swift_bridgeObjectRelease();
          sub_1B3A703A0();
          swift_bridgeObjectRelease();
          memcpy(v79, v70, 0x141uLL);
          memcpy(v78, v70, 0x141uLL);
          sub_1B39B373C((uint64_t)v79);
          v16(v77, v78);
          swift_release();
          sub_1B39B0C68((uint64_t)v79);
          v78[0] = v77[0];
          v78[1] = v77[1];
          swift_bridgeObjectRetain();
          sub_1B3A703A0();
          swift_bridgeObjectRelease();
LABEL_31:
          sub_1B3A703A0();
          goto LABEL_3;
        }
      }
    }
    memcpy(v79, v70, 0x141uLL);
    uint64_t v19 = sub_1B3A26550();
    uint64_t v20 = v19;
    long long v75 = &v65;
    uint64_t v21 = v19[2];
    if (v21)
    {
      long long v72 = v10;
      long long v73 = v7;
      char v22 = *((_OWORD *)v19 + 13);
      v79[10] = *((_OWORD *)v19 + 12);
      v79[11] = v22;
      v79[12] = *((_OWORD *)v19 + 14);
      *(void *)&v79[13] = v19[30];
      int64_t v23 = *((_OWORD *)v19 + 9);
      v79[6] = *((_OWORD *)v19 + 8);
      v79[7] = v23;
      char v24 = *((_OWORD *)v19 + 11);
      char v79[8] = *((_OWORD *)v19 + 10);
      v79[9] = v24;
      char v25 = *((_OWORD *)v19 + 5);
      v79[2] = *((_OWORD *)v19 + 4);
      v79[3] = v25;
      unint64_t v26 = *((_OWORD *)v19 + 7);
      v79[4] = *((_OWORD *)v19 + 6);
      v79[5] = v26;
      unint64_t v27 = *((_OWORD *)v19 + 3);
      v79[0] = *((_OWORD *)v19 + 2);
      v79[1] = v27;
      uint64_t v28 = v21 - 1;
      long long v29 = 31;
      long long v30 = (char *)MEMORY[0x1E4FBC860];
      while (1)
      {
        long long v31 = v79[0];
        long long v32 = *((void *)&v79[12] + 1);
        long long v33 = *(void *)&v79[13];
        sub_1B3A4DFE0((uint64_t)v79);
        if (sub_1B3A03864(v9 | 0x10000, v32, v33))
        {
          swift_bridgeObjectRetain();
          sub_1B3A3B47C((uint64_t)v79);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v30 = sub_1B3A1617C(0, *((void *)v30 + 2) + 1, 1, v30);
          }
          uint64_t v35 = *((void *)v30 + 2);
          long long v34 = *((void *)v30 + 3);
          if (v35 >= v34 >> 1) {
            long long v30 = sub_1B3A1617C((char *)(v34 > 1), v35 + 1, 1, v30);
          }
          *((void *)v30 + 2) = v35 + 1;
          *(_OWORD *)&v30[16 * v35 + 32] = v31;
          if (!v28)
          {
LABEL_21:
            swift_bridgeObjectRelease();
            uint64_t v10 = v72;
            char v7 = v73;
            goto LABEL_23;
          }
        }
        else
        {
          sub_1B3A3B47C((uint64_t)v79);
          if (!v28) {
            goto LABEL_21;
          }
        }
        uint64_t v36 = *(_OWORD *)&v20[v29 + 2];
        v79[0] = *(_OWORD *)&v20[v29];
        v79[1] = v36;
        uint64_t v37 = *(_OWORD *)&v20[v29 + 4];
        uint64_t v38 = *(_OWORD *)&v20[v29 + 6];
        uint64_t v39 = *(_OWORD *)&v20[v29 + 10];
        v79[4] = *(_OWORD *)&v20[v29 + 8];
        v79[5] = v39;
        v79[2] = v37;
        v79[3] = v38;
        uint64_t v40 = *(_OWORD *)&v20[v29 + 12];
        uint64_t v41 = *(_OWORD *)&v20[v29 + 14];
        uint64_t v42 = *(_OWORD *)&v20[v29 + 18];
        char v79[8] = *(_OWORD *)&v20[v29 + 16];
        v79[9] = v42;
        v79[6] = v40;
        v79[7] = v41;
        long long v43 = *(_OWORD *)&v20[v29 + 20];
        uint64_t v44 = *(_OWORD *)&v20[v29 + 22];
        long long v45 = *(_OWORD *)&v20[v29 + 24];
        *(void *)&v79[13] = v20[v29 + 26];
        v79[11] = v44;
        v79[12] = v45;
        v79[10] = v43;
        v29 += 27;
        --v28;
      }
    }
    swift_bridgeObjectRelease();
    long long v30 = (char *)MEMORY[0x1E4FBC860];
LABEL_23:
    if (!*((void *)v30 + 2))
    {
      long long v46 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v7 = sub_1B3A4DD90(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      long long v48 = *((void *)v7 + 2);
      long long v47 = *((void *)v7 + 3);
      if (v48 >= v47 >> 1) {
        char v7 = sub_1B3A4DD90((char *)(v47 > 1), v48 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v48 + 1;
      long long v49 = &v7[16 * v48];
      *((_WORD *)v49 + 16) = v9;
      uint64_t v10 = v46;
      *((void *)v49 + 5) = v46;
    }
    long long v50 = nullsub_1(v9);
    long long v51 = sub_1B3A00B90(v50);
    *(void *)&v79[0] = 8237;
    *((void *)&v79[0] + 1) = 0xE200000000000000;
    uint64_t v4 = *v74;
    sub_1B3A17AF4(v51, v52, v10, *v74, v74[1]);
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    if (*((void *)v30 + 2))
    {
      *(void *)&v79[0] = 0;
      *((void *)&v79[0] + 1) = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      *(void *)&v79[0] = 0xD000000000000017;
      *((void *)&v79[0] + 1) = v69;
      v78[0] = v30;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
      sub_1B3A0609C();
      sub_1B3A70250();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
LABEL_3:
    swift_bridgeObjectRelease();
    uint64_t v6 = v76 + 1;
  }
  while (v76 != 2);
  swift_release();
  if (*((void *)v7 + 2))
  {
    long long v53 = swift_bridgeObjectRetain();
    long long v54 = sub_1B3A4D9CC(v53);
    swift_bridgeObjectRelease();
    *(void *)&v79[0] = 0;
    *((void *)&v79[0] + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    *(void *)&v79[0] = 8237;
    *((void *)&v79[0] + 1) = 0xE200000000000000;
    v78[0] = v54;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
    sub_1B3A0609C();
    sub_1B3A70250();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    if (sub_1B3A3DFF8())
    {
      long long v55 = swift_bridgeObjectRetain();
      long long v56 = sub_1B3A4DAA8(v55);
      swift_bridgeObjectRelease();
      *(void *)&v79[0] = 0;
      *((void *)&v79[0] + 1) = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      v78[0] = v56;
      sub_1B3A70250();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
    }
  }
  long long v57 = (uint64_t)v74;
  uint64_t v58 = (char *)v74 + *(int *)(v66 + 24);
  long long v59 = &v58[*(int *)(type metadata accessor for RecordingOptions.Options(0) + 84)];
  uint64_t v60 = *(void *)v59;
  LOBYTE(v58) = v59[8];
  uint64_t v61 = (uint64_t)v67;
  sub_1B3A4E0A0(v57, (uint64_t)v67, (uint64_t (*)(void))type metadata accessor for KdebugAdvice);
  if ((v58 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    sub_1B3A4E108(v61);
    *(void *)&v79[0] = 0;
    *((void *)&v79[0] + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    sub_1B3A703A0();
    if (!__OFADD__(v60, v60 / 4))
    {
      v78[0] = v60 + v60 / 4;
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      swift_release();
      return v80;
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((*(unsigned char *)(v61 + 144) & 1) == 0)
  {
    uint64_t v62 = *(void *)(v61 + 136);
    uint64_t v63 = *(double *)(v61 + 128);
    swift_bridgeObjectRelease();
    uint64_t v60 = sub_1B3A21BE0(v62, v63);
    goto LABEL_39;
  }
LABEL_43:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1B3A4D9CC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    sub_1B3A052F4(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = (unsigned __int16 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4;
      v4 += 8;
      unsigned __int16 v6 = nullsub_1(v5);
      uint64_t v7 = sub_1B3A00B90(v6);
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        sub_1B3A052F4((char *)(v10 > 1), v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B3A4DAA8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    sub_1B3A052F4(0, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = (__int16 *)(a1 + 32);
    uint64_t v5 = MEMORY[0x1E4FBC4B8];
    do
    {
      __int16 v6 = *v4;
      v4 += 8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5890);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1B3A73390;
      *(void *)(v7 + 56) = MEMORY[0x1E4FBC450];
      *(void *)(v7 + 64) = v5;
      *(_WORD *)(v7 + 32) = v6;
      sub_1B3A702D0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      unint64_t v9 = *(void *)(v12 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
      if (v9 >= v8 >> 1) {
        sub_1B3A052F4((char *)(v8 > 1), v9 + 1, 1);
      }
      *(void *)(v12 + 16) = v9 + 1;
      uint64_t v10 = v12 + 16 * v9;
      *(void *)(v10 + 32) = 7876691;
      *(void *)(v10 + 40) = 0xE300000000000000;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B3A4DC00@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a2;
  a5[1] = a3;
  memcpy(a5 + 2, __src, 0x141uLL);
  uint64_t v7 = (uint64_t)a5 + *(int *)(type metadata accessor for KdebugAdvice() + 24);

  return sub_1B3A4E164(a4, v7);
}

unint64_t sub_1B3A4DC5C(uint64_t a1)
{
  sub_1B3A50018();
  uint64_t v2 = sub_1B3A70230();
  return sub_1B3A4DCC8(a1, v2);
}

unint64_t sub_1B3A4DCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    sub_1B3A02804();
    do
    {
      if (sub_1B3A70280()) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

char *sub_1B3A4DD90(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6298);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B3A4DE8C(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1B3A50BC4((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_1B3A5006C(v5);
  *a1 = v2;
  return result;
}

void *sub_1B3A4DEF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62A0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  unint64_t v6 = sub_1B3A50A24(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1B3A21B4C();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_1B3A4DFE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v4 = *(void *)(a1 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B39B396C(v2, v4);
  return a1;
}

uint64_t sub_1B3A4E0A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B3A4E108(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KdebugAdvice();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B3A4E164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A4E1C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24) = a2[3];
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    uint64_t v7 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v7;
    uint64_t v8 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v8;
    uint64_t v9 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v9;
    uint64_t v10 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v10;
    uint64_t v11 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v11;
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
    uint64_t v12 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v12;
    uint64_t v13 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v13;
    *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
    uint64_t v14 = a2[25];
    *(void *)(a1 + 192) = a2[24];
    *(void *)(a1 + 200) = v14;
    *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
    *(void *)(a1 + 224) = a2[28];
    *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(unsigned char *)(a1 + 272) = *((unsigned char *)a2 + 272);
    *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
    uint64_t v15 = a2[36];
    *(void *)(a1 + 280) = a2[35];
    unint64_t v64 = a2[37];
    uint64_t v65 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B39B396C(v65, v64);
    *(void *)(a1 + 288) = v65;
    *(void *)(a1 + 296) = v64;
    uint64_t v16 = a2[39];
    *(void *)(a1 + 304) = a2[38];
    *(void *)(a1 + 312) = v16;
    *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
    *(void *)(a1 + 328) = a2[41];
    *(unsigned char *)(a1 + 336) = *((unsigned char *)a2 + 336);
    uint64_t v17 = *(int *)(a3 + 24);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = (uint64_t)a2 + v17;
    *(void *)(a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v20 = (int *)type metadata accessor for RecordingOptions.Options(0);
    uint64_t v21 = v20[5];
    __dst = (void *)(v18 + v21);
    char v22 = (const void *)(v19 + v21);
    uint64_t v23 = sub_1B3A6FF40();
    uint64_t v24 = *(void *)(v23 - 8);
    char v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25(v22, 1, v23))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
      memcpy(__dst, v22, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(__dst, v22, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
    }
    *(void *)(v18 + v20[6]) = *(void *)(v19 + v20[6]);
    *(void *)(v18 + v20[7]) = *(void *)(v19 + v20[7]);
    *(void *)(v18 + v20[8]) = *(void *)(v19 + v20[8]);
    uint64_t v27 = v20[9];
    uint64_t v28 = v18 + v27;
    uint64_t v29 = v19 + v27;
    *(void *)uint64_t v28 = *(void *)v29;
    *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
    uint64_t v30 = v20[10];
    uint64_t v31 = v18 + v30;
    uint64_t v32 = v19 + v30;
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
    uint64_t v33 = v20[11];
    uint64_t v34 = v18 + v33;
    uint64_t v35 = v19 + v33;
    *(void *)uint64_t v34 = *(void *)v35;
    *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
    *(void *)(v18 + v20[12]) = *(void *)(v19 + v20[12]);
    *(void *)(v18 + v20[13]) = *(void *)(v19 + v20[13]);
    *(unsigned char *)(v18 + v20[14]) = *(unsigned char *)(v19 + v20[14]);
    uint64_t v36 = v20[15];
    uint64_t v37 = v18 + v36;
    uint64_t v38 = v19 + v36;
    *(void *)uint64_t v37 = *(void *)v38;
    *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
    *(unsigned char *)(v18 + v20[16]) = *(unsigned char *)(v19 + v20[16]);
    *(unsigned char *)(v18 + v20[17]) = *(unsigned char *)(v19 + v20[17]);
    *(unsigned char *)(v18 + v20[18]) = *(unsigned char *)(v19 + v20[18]);
    uint64_t v39 = v20[19];
    uint64_t v40 = (void *)(v18 + v39);
    uint64_t v41 = (void *)(v19 + v39);
    uint64_t v66 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v66;
    uint64_t v42 = v20[20];
    long long v43 = (void *)(v18 + v42);
    uint64_t v44 = (void *)(v19 + v42);
    uint64_t v45 = v44[1];
    *long long v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = v20[21];
    uint64_t v47 = v18 + v46;
    uint64_t v48 = v19 + v46;
    *(void *)uint64_t v47 = *(void *)v48;
    *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
    *(unsigned char *)(v18 + v20[22]) = *(unsigned char *)(v19 + v20[22]);
    uint64_t v49 = v20[23];
    uint64_t v50 = v18 + v49;
    uint64_t v51 = v19 + v49;
    *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
    *(unsigned char *)(v50 + 4) = *(unsigned char *)(v51 + 4);
    *(void *)(v18 + v20[24]) = *(void *)(v19 + v20[24]);
    *(void *)(v18 + v20[25]) = *(void *)(v19 + v20[25]);
    *(void *)(v18 + v20[26]) = *(void *)(v19 + v20[26]);
    *(unsigned char *)(v18 + v20[27]) = *(unsigned char *)(v19 + v20[27]);
    *(unsigned char *)(v18 + v20[28]) = *(unsigned char *)(v19 + v20[28]);
    *(void *)(v18 + v20[29]) = *(void *)(v19 + v20[29]);
    uint64_t v52 = v20[30];
    uint64_t v53 = v18 + v52;
    uint64_t v54 = v19 + v52;
    *(void *)uint64_t v53 = *(void *)v54;
    *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
    uint64_t v55 = v20[31];
    long long v56 = (void *)(v18 + v55);
    long long v57 = (void *)(v19 + v55);
    uint64_t v58 = v57[1];
    *long long v56 = *v57;
    v56[1] = v58;
    uint64_t v59 = v20[32];
    uint64_t v60 = (void *)(v18 + v59);
    uint64_t v61 = (void *)(v19 + v59);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1B3A4E73C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B39B0D88(*(void *)(a1 + 288), *(void *)(a1 + 296));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for RecordingOptions.Options(0) + 20);
  uint64_t v6 = sub_1B3A6FF40();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A4E948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v11;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  uint64_t v12 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  uint64_t v13 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  unint64_t v62 = *(void *)(a2 + 296);
  uint64_t v63 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B39B396C(v63, v62);
  *(void *)(a1 + 288) = v63;
  *(void *)(a1 + 296) = v62;
  uint64_t v14 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v14;
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v18 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v19 = v18[5];
  __dst = (void *)(v16 + v19);
  uint64_t v20 = (const void *)(v17 + v19);
  uint64_t v21 = sub_1B3A6FF40();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23(v20, 1, v21))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(__dst, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
  }
  *(void *)(v16 + v18[6]) = *(void *)(v17 + v18[6]);
  *(void *)(v16 + v18[7]) = *(void *)(v17 + v18[7]);
  *(void *)(v16 + v18[8]) = *(void *)(v17 + v18[8]);
  uint64_t v25 = v18[9];
  uint64_t v26 = v16 + v25;
  uint64_t v27 = v17 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  uint64_t v28 = v18[10];
  uint64_t v29 = v16 + v28;
  uint64_t v30 = v17 + v28;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = v18[11];
  uint64_t v32 = v16 + v31;
  uint64_t v33 = v17 + v31;
  *(void *)uint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
  *(void *)(v16 + v18[12]) = *(void *)(v17 + v18[12]);
  *(void *)(v16 + v18[13]) = *(void *)(v17 + v18[13]);
  *(unsigned char *)(v16 + v18[14]) = *(unsigned char *)(v17 + v18[14]);
  uint64_t v34 = v18[15];
  uint64_t v35 = v16 + v34;
  uint64_t v36 = v17 + v34;
  *(void *)uint64_t v35 = *(void *)v36;
  *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
  *(unsigned char *)(v16 + v18[16]) = *(unsigned char *)(v17 + v18[16]);
  *(unsigned char *)(v16 + v18[17]) = *(unsigned char *)(v17 + v18[17]);
  *(unsigned char *)(v16 + v18[18]) = *(unsigned char *)(v17 + v18[18]);
  uint64_t v37 = v18[19];
  uint64_t v38 = (void *)(v16 + v37);
  uint64_t v39 = (void *)(v17 + v37);
  uint64_t v64 = v39[1];
  void *v38 = *v39;
  v38[1] = v64;
  uint64_t v40 = v18[20];
  uint64_t v41 = (void *)(v16 + v40);
  uint64_t v42 = (void *)(v17 + v40);
  uint64_t v43 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v43;
  uint64_t v44 = v18[21];
  uint64_t v45 = v16 + v44;
  uint64_t v46 = v17 + v44;
  *(void *)uint64_t v45 = *(void *)v46;
  *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
  *(unsigned char *)(v16 + v18[22]) = *(unsigned char *)(v17 + v18[22]);
  uint64_t v47 = v18[23];
  uint64_t v48 = v16 + v47;
  uint64_t v49 = v17 + v47;
  *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
  *(unsigned char *)(v48 + 4) = *(unsigned char *)(v49 + 4);
  *(void *)(v16 + v18[24]) = *(void *)(v17 + v18[24]);
  *(void *)(v16 + v18[25]) = *(void *)(v17 + v18[25]);
  *(void *)(v16 + v18[26]) = *(void *)(v17 + v18[26]);
  *(unsigned char *)(v16 + v18[27]) = *(unsigned char *)(v17 + v18[27]);
  *(unsigned char *)(v16 + v18[28]) = *(unsigned char *)(v17 + v18[28]);
  *(void *)(v16 + v18[29]) = *(void *)(v17 + v18[29]);
  uint64_t v50 = v18[30];
  uint64_t v51 = v16 + v50;
  uint64_t v52 = v17 + v50;
  *(void *)uint64_t v51 = *(void *)v52;
  *(unsigned char *)(v51 + 8) = *(unsigned char *)(v52 + 8);
  uint64_t v53 = v18[31];
  uint64_t v54 = (void *)(v16 + v53);
  uint64_t v55 = (void *)(v17 + v53);
  uint64_t v56 = v55[1];
  void *v54 = *v55;
  v54[1] = v56;
  uint64_t v57 = v18[32];
  uint64_t v58 = (void *)(v16 + v57);
  uint64_t v59 = (void *)(v17 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B3A4EE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v6;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v7;
  char v8 = *(unsigned char *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(unsigned char *)(a1 + 272) = v8;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 288);
  unint64_t v10 = *(void *)(a2 + 296);
  sub_1B39B396C(v9, v10);
  uint64_t v11 = *(void *)(a1 + 288);
  unint64_t v12 = *(void *)(a1 + 296);
  *(void *)(a1 + 288) = v9;
  *(void *)(a1 + 296) = v10;
  sub_1B39B0D88(v11, v12);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v17 = v16[5];
  uint64_t v18 = (void *)(v14 + v17);
  uint64_t v19 = (void *)(v15 + v17);
  uint64_t v20 = sub_1B3A6FF40();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v65 = v18;
  LODWORD(v18) = v22(v18, 1, v20);
  int v23 = v22(v19, 1, v20);
  if (v18)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v65, v19, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v65, 0, 1, v20);
      goto LABEL_9;
    }
    size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8) - 8) + 64);
    uint64_t v25 = v65;
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v65, v19, v20);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v65, v20);
    size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8) - 8) + 64);
    uint64_t v25 = v65;
  }
  memcpy(v25, v19, v24);
LABEL_9:
  *(void *)(v14 + v16[6]) = *(void *)(v15 + v16[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[7]) = *(void *)(v15 + v16[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[8]) = *(void *)(v15 + v16[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v16[9];
  uint64_t v27 = v14 + v26;
  uint64_t v28 = (uint64_t *)(v15 + v26);
  uint64_t v29 = *v28;
  *(unsigned char *)(v27 + 8) = *((unsigned char *)v28 + 8);
  *(void *)uint64_t v27 = v29;
  uint64_t v30 = v16[10];
  uint64_t v31 = v14 + v30;
  uint64_t v32 = v15 + v30;
  LODWORD(v29) = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  *(_DWORD *)uint64_t v31 = v29;
  uint64_t v33 = v16[11];
  uint64_t v34 = v14 + v33;
  uint64_t v35 = (uint64_t *)(v15 + v33);
  uint64_t v36 = *v35;
  *(unsigned char *)(v34 + 8) = *((unsigned char *)v35 + 8);
  *(void *)uint64_t v34 = v36;
  *(void *)(v14 + v16[12]) = *(void *)(v15 + v16[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[13]) = *(void *)(v15 + v16[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + v16[14]) = *(unsigned char *)(v15 + v16[14]);
  uint64_t v37 = v16[15];
  uint64_t v38 = v14 + v37;
  uint64_t v39 = v15 + v37;
  char v40 = *(unsigned char *)(v39 + 8);
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = v40;
  *(unsigned char *)(v14 + v16[16]) = *(unsigned char *)(v15 + v16[16]);
  *(unsigned char *)(v14 + v16[17]) = *(unsigned char *)(v15 + v16[17]);
  *(unsigned char *)(v14 + v16[18]) = *(unsigned char *)(v15 + v16[18]);
  uint64_t v41 = v16[19];
  uint64_t v42 = (void *)(v14 + v41);
  uint64_t v43 = (void *)(v15 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v16[20];
  uint64_t v45 = (void *)(v14 + v44);
  uint64_t v46 = (void *)(v15 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v16[21];
  uint64_t v48 = v14 + v47;
  uint64_t v49 = (uint64_t *)(v15 + v47);
  uint64_t v50 = *v49;
  *(unsigned char *)(v48 + 8) = *((unsigned char *)v49 + 8);
  *(void *)uint64_t v48 = v50;
  *(unsigned char *)(v14 + v16[22]) = *(unsigned char *)(v15 + v16[22]);
  uint64_t v51 = v16[23];
  uint64_t v52 = v14 + v51;
  uint64_t v53 = v15 + v51;
  LODWORD(v50) = *(_DWORD *)v53;
  *(unsigned char *)(v52 + 4) = *(unsigned char *)(v53 + 4);
  *(_DWORD *)uint64_t v52 = v50;
  *(void *)(v14 + v16[24]) = *(void *)(v15 + v16[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[25]) = *(void *)(v15 + v16[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[26]) = *(void *)(v15 + v16[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + v16[27]) = *(unsigned char *)(v15 + v16[27]);
  *(unsigned char *)(v14 + v16[28]) = *(unsigned char *)(v15 + v16[28]);
  *(void *)(v14 + v16[29]) = *(void *)(v15 + v16[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v16[30];
  uint64_t v55 = v14 + v54;
  uint64_t v56 = (uint64_t *)(v15 + v54);
  uint64_t v57 = *v56;
  *(unsigned char *)(v55 + 8) = *((unsigned char *)v56 + 8);
  *(void *)uint64_t v55 = v57;
  uint64_t v58 = v16[31];
  uint64_t v59 = (void *)(v14 + v58);
  uint64_t v60 = (void *)(v15 + v58);
  *uint64_t v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = v16[32];
  unint64_t v62 = (void *)(v14 + v61);
  uint64_t v63 = (void *)(v15 + v61);
  *unint64_t v62 = *v63;
  v62[1] = v63[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1B3A4F564(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  memcpy(a1 + 1, a2 + 1, 0x141uLL);
  uint64_t v6 = *(int *)(a3 + 24);
  long long v7 = (char *)a1 + v6;
  char v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  unint64_t v12 = &v8[v10];
  uint64_t v13 = sub_1B3A6FF40();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  uint64_t v16 = v9[9];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v9[10];
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  uint64_t v22 = v9[11];
  int v23 = &v7[v22];
  size_t v24 = &v8[v22];
  *(void *)int v23 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)&v7[v9[12]] = *(void *)&v8[v9[12]];
  *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
  v7[v9[14]] = v8[v9[14]];
  uint64_t v25 = v9[15];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  v7[v9[16]] = v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
  *(_OWORD *)&v7[v9[20]] = *(_OWORD *)&v8[v9[20]];
  uint64_t v28 = v9[21];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  v7[v9[22]] = v8[v9[22]];
  uint64_t v31 = v9[23];
  uint64_t v32 = &v7[v31];
  uint64_t v33 = &v8[v31];
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  v32[4] = v33[4];
  *(void *)&v7[v9[24]] = *(void *)&v8[v9[24]];
  *(void *)&v7[v9[25]] = *(void *)&v8[v9[25]];
  *(void *)&v7[v9[26]] = *(void *)&v8[v9[26]];
  v7[v9[27]] = v8[v9[27]];
  v7[v9[28]] = v8[v9[28]];
  *(void *)&v7[v9[29]] = *(void *)&v8[v9[29]];
  uint64_t v34 = v9[30];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  v35[8] = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  *(_OWORD *)&v7[v9[31]] = *(_OWORD *)&v8[v9[31]];
  *(_OWORD *)&v7[v9[32]] = *(_OWORD *)&v8[v9[32]];
  return a1;
}

uint64_t sub_1B3A4F864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a1 + 288);
  unint64_t v13 = *(void *)(a1 + 296);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_1B39B0D88(v12, v13);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v15 + v18);
  uint64_t v20 = (void *)(v16 + v18);
  uint64_t v21 = sub_1B3A6FF40();
  uint64_t v22 = *(void *)(v21 - 8);
  int v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  long long v69 = v19;
  LODWORD(v19) = v23(v19, 1, v21);
  int v24 = v23(v20, 1, v21);
  if (v19)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v69, v20, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v69, 0, 1, v21);
      goto LABEL_9;
    }
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8) - 8) + 64);
    uint64_t v26 = v69;
  }
  else
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v69, v20, v21);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v69, v21);
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8) - 8) + 64);
    uint64_t v26 = v69;
  }
  memcpy(v26, v20, v25);
LABEL_9:
  *(void *)(v15 + v17[6]) = *(void *)(v16 + v17[6]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[7]) = *(void *)(v16 + v17[7]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[8]) = *(void *)(v16 + v17[8]);
  swift_bridgeObjectRelease();
  uint64_t v27 = v17[9];
  uint64_t v28 = v15 + v27;
  uint64_t v29 = v16 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  uint64_t v30 = v17[10];
  uint64_t v31 = v15 + v30;
  uint64_t v32 = v16 + v30;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  uint64_t v33 = v17[11];
  uint64_t v34 = v15 + v33;
  uint64_t v35 = v16 + v33;
  *(void *)uint64_t v34 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  *(void *)(v15 + v17[12]) = *(void *)(v16 + v17[12]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[13]) = *(void *)(v16 + v17[13]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v15 + v17[14]) = *(unsigned char *)(v16 + v17[14]);
  uint64_t v36 = v17[15];
  uint64_t v37 = v15 + v36;
  uint64_t v38 = v16 + v36;
  *(void *)uint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  *(unsigned char *)(v15 + v17[16]) = *(unsigned char *)(v16 + v17[16]);
  *(unsigned char *)(v15 + v17[17]) = *(unsigned char *)(v16 + v17[17]);
  *(unsigned char *)(v15 + v17[18]) = *(unsigned char *)(v16 + v17[18]);
  uint64_t v39 = v17[19];
  char v40 = (void *)(v15 + v39);
  uint64_t v41 = (uint64_t *)(v16 + v39);
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  *char v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = v17[20];
  uint64_t v45 = (void *)(v15 + v44);
  uint64_t v46 = (uint64_t *)(v16 + v44);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  *uint64_t v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = v17[21];
  uint64_t v50 = v15 + v49;
  uint64_t v51 = v16 + v49;
  *(void *)uint64_t v50 = *(void *)v51;
  *(unsigned char *)(v50 + 8) = *(unsigned char *)(v51 + 8);
  *(unsigned char *)(v15 + v17[22]) = *(unsigned char *)(v16 + v17[22]);
  uint64_t v52 = v17[23];
  uint64_t v53 = v15 + v52;
  uint64_t v54 = v16 + v52;
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  *(unsigned char *)(v53 + 4) = *(unsigned char *)(v54 + 4);
  *(void *)(v15 + v17[24]) = *(void *)(v16 + v17[24]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[25]) = *(void *)(v16 + v17[25]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[26]) = *(void *)(v16 + v17[26]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v15 + v17[27]) = *(unsigned char *)(v16 + v17[27]);
  *(unsigned char *)(v15 + v17[28]) = *(unsigned char *)(v16 + v17[28]);
  *(void *)(v15 + v17[29]) = *(void *)(v16 + v17[29]);
  swift_bridgeObjectRelease();
  uint64_t v55 = v17[30];
  uint64_t v56 = v15 + v55;
  uint64_t v57 = v16 + v55;
  *(void *)uint64_t v56 = *(void *)v57;
  *(unsigned char *)(v56 + 8) = *(unsigned char *)(v57 + 8);
  uint64_t v58 = v17[31];
  uint64_t v59 = (void *)(v15 + v58);
  uint64_t v60 = (uint64_t *)(v16 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  *uint64_t v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = v17[32];
  uint64_t v64 = (void *)(v15 + v63);
  uint64_t v65 = (uint64_t *)(v16 + v63);
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  void *v64 = v67;
  v64[1] = v66;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B3A4FDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B3A4FE0C);
}

uint64_t sub_1B3A4FE0C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for RecordingOptions.Options(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1B3A4FEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B3A4FED0);
}

void *sub_1B3A4FED0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for RecordingOptions.Options(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1B3A4FF78()
{
  uint64_t result = type metadata accessor for RecordingOptions.Options(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1B3A50018()
{
  unint64_t result = qword_1E9CD6290;
  if (!qword_1E9CD6290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6290);
  }
  return result;
}

uint64_t sub_1B3A5006C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1B3A70CE0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v83 = 0;
      uint64_t v84 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v86 = *(void *)(v84 + 16 * i + 8);
        uint64_t v87 = v83;
        do
        {
          uint64_t v88 = v84 + v87;
          if (*(void *)(v84 + v87 + 8) >= v86) {
            break;
          }
          if (!v84) {
            goto LABEL_141;
          }
          __int16 v89 = *(_WORD *)(v88 + 16);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(_WORD *)uint64_t v88 = v89;
          *(void *)(v88 + 8) = v86;
          v87 -= 16;
        }
        while (v87 != -16);
        v83 += 16;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_136;
    }
    uint64_t v6 = result;
    uint64_t v97 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62A8);
      uint64_t result = sub_1B3A70590();
      *(void *)(result + 16) = v7;
      uint64_t v99 = result;
      uint64_t v103 = (char *)(result + 32);
LABEL_13:
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v98 = *a1 + 40;
      uint64_t v11 = MEMORY[0x1E4FBC860];
      uint64_t v100 = v6;
      uint64_t v101 = v3;
      uint64_t v102 = v10;
      while (1)
      {
        uint64_t v13 = v9++;
        if (v9 < v3)
        {
          uint64_t v14 = *(void *)(v10 + 16 * v9 + 8);
          uint64_t v15 = *(void *)(v10 + 16 * v13 + 8);
          uint64_t v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            uint64_t v16 = (uint64_t *)(v98 + 16 * v13);
            uint64_t v17 = v14;
            while (1)
            {
              uint64_t v19 = *v16;
              v16 += 2;
              uint64_t v18 = v19;
              if (v15 < v14 == v17 >= v19) {
                break;
              }
              ++v9;
              uint64_t v17 = v18;
              if (v3 == v9)
              {
                uint64_t v9 = v3;
                break;
              }
            }
          }
          if (v15 < v14)
          {
            if (v9 < v13) {
              goto LABEL_138;
            }
            if (v13 < v9)
            {
              uint64_t v20 = 16 * v9;
              uint64_t v21 = 16 * v13;
              uint64_t v22 = v9;
              uint64_t v23 = v13;
              do
              {
                if (v23 != --v22)
                {
                  if (!v10) {
                    goto LABEL_144;
                  }
                  uint64_t v24 = v10 + v20;
                  __int16 v25 = *(_WORD *)(v10 + v21);
                  uint64_t v26 = *(void *)(v10 + v21 + 8);
                  *(_OWORD *)(v10 + v21) = *(_OWORD *)(v10 + v20 - 16);
                  *(_WORD *)(v24 - 16) = v25;
                  *(void *)(v24 - 8) = v26;
                }
                ++v23;
                v20 -= 16;
                v21 += 16;
              }
              while (v23 < v22);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_135;
          }
          if (v9 - v13 < v6)
          {
            uint64_t v27 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_139;
            }
            if (v27 >= v3) {
              uint64_t v27 = v3;
            }
            if (v27 < v13)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v9 != v27)
            {
              uint64_t v28 = (_WORD *)(v10 + 16 * v9);
              do
              {
                uint64_t v29 = *(void *)(v10 + 16 * v9 + 8);
                uint64_t v30 = v13;
                uint64_t v31 = v28;
                do
                {
                  if (*((void *)v31 - 1) >= v29) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_142;
                  }
                  __int16 v32 = *v31;
                  *(_OWORD *)uint64_t v31 = *((_OWORD *)v31 - 1);
                  *((void *)v31 - 1) = v29;
                  *(v31 - 8) = v32;
                  v31 -= 8;
                  ++v30;
                }
                while (v9 != v30);
                ++v9;
                v28 += 8;
              }
              while (v9 != v27);
              uint64_t v9 = v27;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_130;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1B3A0D63C(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        unint64_t v34 = *(void *)(v11 + 16);
        unint64_t v33 = *(void *)(v11 + 24);
        unint64_t v12 = v34 + 1;
        uint64_t v10 = v102;
        if (v34 >= v33 >> 1)
        {
          uint64_t result = (uint64_t)sub_1B3A0D63C((char *)(v33 > 1), v34 + 1, 1, (char *)v11);
          uint64_t v10 = v102;
          uint64_t v11 = result;
        }
        *(void *)(v11 + 16) = v12;
        uint64_t v35 = v11 + 32;
        uint64_t v36 = (uint64_t *)(v11 + 32 + 16 * v34);
        *uint64_t v36 = v13;
        v36[1] = v9;
        if (v34)
        {
          while (1)
          {
            unint64_t v37 = v12 - 1;
            if (v12 >= 4)
            {
              unint64_t v42 = v35 + 16 * v12;
              uint64_t v43 = *(void *)(v42 - 64);
              uint64_t v44 = *(void *)(v42 - 56);
              BOOL v48 = __OFSUB__(v44, v43);
              uint64_t v45 = v44 - v43;
              if (v48) {
                goto LABEL_119;
              }
              uint64_t v47 = *(void *)(v42 - 48);
              uint64_t v46 = *(void *)(v42 - 40);
              BOOL v48 = __OFSUB__(v46, v47);
              uint64_t v40 = v46 - v47;
              char v41 = v48;
              if (v48) {
                goto LABEL_120;
              }
              unint64_t v49 = v12 - 2;
              uint64_t v50 = (uint64_t *)(v35 + 16 * (v12 - 2));
              uint64_t v52 = *v50;
              uint64_t v51 = v50[1];
              BOOL v48 = __OFSUB__(v51, v52);
              uint64_t v53 = v51 - v52;
              if (v48) {
                goto LABEL_121;
              }
              BOOL v48 = __OFADD__(v40, v53);
              uint64_t v54 = v40 + v53;
              if (v48) {
                goto LABEL_123;
              }
              if (v54 >= v45)
              {
                long long v72 = (uint64_t *)(v35 + 16 * v37);
                uint64_t v74 = *v72;
                uint64_t v73 = v72[1];
                BOOL v48 = __OFSUB__(v73, v74);
                uint64_t v75 = v73 - v74;
                if (v48) {
                  goto LABEL_129;
                }
                BOOL v65 = v40 < v75;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v66 = *(void *)(v11 + 32);
                uint64_t v67 = *(void *)(v11 + 40);
                BOOL v48 = __OFSUB__(v67, v66);
                uint64_t v59 = v67 - v66;
                char v60 = v48;
                goto LABEL_77;
              }
              uint64_t v39 = *(void *)(v11 + 32);
              uint64_t v38 = *(void *)(v11 + 40);
              BOOL v48 = __OFSUB__(v38, v39);
              uint64_t v40 = v38 - v39;
              char v41 = v48;
            }
            if (v41) {
              goto LABEL_122;
            }
            unint64_t v49 = v12 - 2;
            uint64_t v55 = (uint64_t *)(v35 + 16 * (v12 - 2));
            uint64_t v57 = *v55;
            uint64_t v56 = v55[1];
            BOOL v58 = __OFSUB__(v56, v57);
            uint64_t v59 = v56 - v57;
            char v60 = v58;
            if (v58) {
              goto LABEL_124;
            }
            uint64_t v61 = (uint64_t *)(v35 + 16 * v37);
            uint64_t v63 = *v61;
            uint64_t v62 = v61[1];
            BOOL v48 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            if (v48) {
              goto LABEL_126;
            }
            if (__OFADD__(v59, v64)) {
              goto LABEL_128;
            }
            if (v59 + v64 >= v40)
            {
              BOOL v65 = v40 < v64;
LABEL_83:
              if (v65) {
                unint64_t v37 = v49;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v60) {
              goto LABEL_125;
            }
            long long v68 = (uint64_t *)(v35 + 16 * v37);
            uint64_t v70 = *v68;
            uint64_t v69 = v68[1];
            BOOL v48 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v48) {
              goto LABEL_127;
            }
            if (v71 < v59) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v76 = v37 - 1;
            if (v37 - 1 >= v12)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v10) {
              goto LABEL_143;
            }
            uint64_t v77 = v11;
            uint64_t v78 = (uint64_t *)(v35 + 16 * v76);
            uint64_t v79 = *v78;
            uint64_t v80 = (void *)(v35 + 16 * v37);
            uint64_t v81 = v80[1];
            uint64_t result = sub_1B3A50700((char *)(v10 + 16 * *v78), (char *)(v10 + 16 * *v80), v10 + 16 * v81, v103);
            if (v1) {
              goto LABEL_93;
            }
            if (v81 < v79) {
              goto LABEL_116;
            }
            if (v37 > *(void *)(v77 + 16)) {
              goto LABEL_117;
            }
            *uint64_t v78 = v79;
            *(void *)(v35 + 16 * v76 + 8) = v81;
            unint64_t v82 = *(void *)(v77 + 16);
            if (v37 >= v82) {
              goto LABEL_118;
            }
            uint64_t v11 = v77;
            unint64_t v12 = v82 - 1;
            uint64_t result = (uint64_t)memmove((void *)(v35 + 16 * v37), v80 + 2, 16 * (v82 - 1 - v37));
            *(void *)(v77 + 16) = v82 - 1;
            uint64_t v10 = v102;
            if (v82 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v100;
        uint64_t v3 = v101;
        if (v9 >= v101)
        {
          uint64_t v8 = v99;
          goto LABEL_102;
        }
      }
    }
    uint64_t v8 = MEMORY[0x1E4FBC860];
    uint64_t v103 = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 == 1)
    {
      uint64_t v99 = MEMORY[0x1E4FBC860];
      goto LABEL_13;
    }
    unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_102:
    uint64_t result = v11;
    uint64_t v99 = v8;
    if (v12 >= 2)
    {
      uint64_t v90 = *v97;
      do
      {
        unint64_t v91 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_131;
        }
        if (!v90) {
          goto LABEL_145;
        }
        uint64_t v92 = result;
        uint64_t v93 = *(void *)(result + 32 + 16 * v91);
        uint64_t v94 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_1B3A50700((char *)(v90 + 16 * v93), (char *)(v90 + 16 * *(void *)(result + 32 + 16 * (v12 - 1))), v90 + 16 * v94, v103);
        if (v1) {
          break;
        }
        if (v94 < v93) {
          goto LABEL_132;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1B3A0D7F4(v92);
          uint64_t v92 = result;
        }
        if (v91 >= *(void *)(v92 + 16)) {
          goto LABEL_133;
        }
        uint64_t v95 = (void *)(v92 + 32 + 16 * v91);
        *uint64_t v95 = v93;
        v95[1] = v94;
        unint64_t v96 = *(void *)(v92 + 16);
        if (v12 > v96) {
          goto LABEL_134;
        }
        memmove((void *)(v92 + 32 + 16 * (v12 - 1)), (const void *)(v92 + 32 + 16 * v12), 16 * (v96 - v12));
        uint64_t result = v92;
        *(void *)(v92 + 16) = v96 - 1;
        unint64_t v12 = v96 - 1;
      }
      while (v96 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(void *)(v99 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A50700(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 15;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[16 * v13] <= a4) {
      memmove(a4, __src, 16 * v13);
    }
    uint64_t v14 = &v4[16 * v13];
    if (v7 >= v6 || v11 < 16) {
      goto LABEL_43;
    }
    uint64_t v18 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v19 = v18 + 16;
      if (*((void *)v6 - 1) >= *((void *)v14 - 1))
      {
        uint64_t v20 = v14 - 16;
        if (v19 != v14)
        {
          v14 -= 16;
          goto LABEL_40;
        }
        BOOL v21 = v18 >= v14;
        v14 -= 16;
        if (v21) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v20 = v6 - 16;
        if (v19 != v6)
        {
          v6 -= 16;
LABEL_40:
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
          goto LABEL_41;
        }
        BOOL v21 = v18 >= v6;
        v6 -= 16;
        if (v21) {
          goto LABEL_40;
        }
      }
LABEL_41:
      if (v6 > v7)
      {
        v18 -= 16;
        if (v14 > v4) {
          continue;
        }
      }
      goto LABEL_43;
    }
  }
  if (a4 != __dst || &__dst[16 * v10] <= a4) {
    memmove(a4, __dst, 16 * v10);
  }
  uint64_t v14 = &v4[16 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      if (*((void *)v4 + 1) >= *((void *)v6 + 1))
      {
        uint64_t v17 = v4 + 16;
        uint64_t v16 = v4;
        uint64_t v15 = v6;
        if (v7 == v4)
        {
          v4 += 16;
          if (v7 < v17) {
            goto LABEL_20;
          }
        }
        else
        {
          v4 += 16;
        }
      }
      else
      {
        uint64_t v15 = v6 + 16;
        uint64_t v16 = v6;
        if (v7 == v6 && v7 < v15) {
          goto LABEL_20;
        }
      }
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
LABEL_20:
      v7 += 16;
      if (v4 < v14)
      {
        uint64_t v6 = v15;
        if ((unint64_t)v15 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_43:
  int64_t v22 = v14 - v4 + (v14 - v4 < 0 ? 0xFuLL : 0);
  if (v6 != v4 || v6 >= &v4[v22 & 0xFFFFFFFFFFFFFFF0]) {
    memmove(v6, v4, 16 * (v22 >> 4));
  }
  return 1;
}

char *sub_1B3A50928(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62A0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

void *sub_1B3A50A24(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    __int16 v13 = *(_WORD *)(*(void *)(a4 + 48) + 2 * v12);
    uint64_t v14 = *(void *)(*(void *)(a4 + 56) + 8 * v12);
    *(_WORD *)a2 = v13;
    *(void *)(a2 + 8) = v14;
    a2 += 16;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    int64_t v15 = v8;
LABEL_19:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_8;
  }
  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v15 = v17;
    goto LABEL_19;
  }
  int64_t v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15 + 2;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v4 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

char *sub_1B3A50BC4(uint64_t a1)
{
  return sub_1B3A50928(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B3A50BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5DD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A50C40()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A50CA0()
{
  return sub_1B3A70E30();
}

uint64_t sub_1B3A50CE0()
{
  return sub_1B3A70E50();
}

BOOL sub_1B3A50D3C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
}

unint64_t sub_1B3A50D5C(unint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  if (*(_DWORD *)(result + 48) != 117571592) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(v2 + 72) == 2)
  {
    uint64_t result = ktrace_get_earliest_timestamp(a2);
    if (*(void *)v4 < result)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    ktrace_get_ns_from_timestamp(a2, *(void *)v4 - result);
    uint64_t result = sub_1B3A1C758(1);
    *(void *)(v2 + 72) = result & 1;
    *(void *)(v2 + 80) = v5;
    *(void *)(v2 + 88) = v6;
  }
  uint64_t v7 = *(void *)(v2 + 64);
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(void *)(v2 + 64) = v9;
LABEL_7:
  uint64_t result = sub_1B3A17C9C(v4);
  uint64_t v10 = *(void *)v4;
  if (*(void *)v4 < *(void *)(v2 + 32))
  {
    uint64_t result = sub_1B3A51260((uint64_t)v11, *(unsigned int *)(v4 + 52) | ((unint64_t)(unsigned __int16)HIWORD(*(_DWORD *)(v4 + 48)) << 32));
    uint64_t v10 = *(void *)v4;
  }
  if (*(unsigned char *)(v2 + 24) == 1)
  {
    uint64_t result = ktrace_get_ns_from_timestamp(a2, v10);
    *(void *)(v2 + 16) = result;
    *(unsigned char *)(v2 + 24) = 0;
    uint64_t v10 = *(void *)v4;
  }
  *(void *)(v2 + 32) = v10;
  return result;
}

unint64_t sub_1B3A50E74(const void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for RecordingOptions.Options(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KdebugAdvice();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (void *)((char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  memcpy(v20, a1, 0x141uLL);
  uint64_t v11 = v2[8];
  if (*(void *)(v2[7] + 16)) {
    unint64_t v12 = 0xD000000000000063;
  }
  else {
    unint64_t v12 = 0;
  }
  if (v11 >= 1)
  {
    sub_1B3A513B0((uint64_t)(v2 + 9), (uint64_t)v18);
    sub_1B3A513B0((uint64_t)v18, (uint64_t)v19);
    if (v19[0] != 2)
    {
      uint64_t v14 = *v2;
      uint64_t v13 = v2[1];
      memcpy(v17, v20, 0x141uLL);
      sub_1B3A51418(a2, (uint64_t)v7);
      swift_bridgeObjectRetain();
      sub_1B39B373C((uint64_t)v20);
      sub_1B3A4DC00(v17, v14, v13, (uint64_t)v7, v10);
      v17[0] = 0;
      v17[1] = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      uint64_t v16 = v11;
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      sub_1B3A705B0();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      sub_1B3A4CFFC();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      unint64_t v12 = v17[0];
      sub_1B3A4E108((uint64_t)v10);
    }
  }
  return v12;
}

double sub_1B3A511CC@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_1B3A17E00();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = MEMORY[0x1E4FBC870];
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = xmmword_1B3A76320;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  return result;
}

uint64_t sub_1B3A51260(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = *v2;
  sub_1B3A70E00();
  sub_1B3A70E40();
  sub_1B3A70E30();
  uint64_t v7 = sub_1B3A70E50();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      uint64_t v11 = *(void *)(v6 + 48) + 8 * v9;
      if (*(_DWORD *)v11 == v3 && *(unsigned __int16 *)(v11 + 4) == (unsigned __int16)v5) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    uint64_t v13 = *(void *)(*v2 + 48) + 8 * v9;
    LODWORD(v3) = *(_DWORD *)v13;
    LOWORD(v5) = *(_WORD *)(v13 + 4);
  }
  else
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1B3A51B68(v3 & 0xFFFFFFFFFFFFLL, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *(_DWORD *)a1 = v3;
  *(_WORD *)(a1 + 4) = v5;
  return result;
}

uint64_t sub_1B3A513B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A51418(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B3A51480()
{
  unint64_t result = qword_1E9CD62C0;
  if (!qword_1E9CD62C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD62C0);
  }
  return result;
}

uint64_t __swift_memcpy6_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for RetrogradeEvent(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RetrogradeEvent(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 6) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RetrogradeEvent()
{
  return &type metadata for RetrogradeEvent;
}

uint64_t destroy for KdebugPostprocessing()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KdebugPostprocessing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KdebugPostprocessing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v9;
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for KdebugPostprocessing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for KdebugPostprocessing(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 137)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KdebugPostprocessing(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 136) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 137) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 137) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KdebugPostprocessing()
{
  return &type metadata for KdebugPostprocessing;
}

uint64_t sub_1B3A51888()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62C8);
  uint64_t result = sub_1B3A70980();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v29 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v9) {
          goto LABEL_33;
        }
        unint64_t v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v16 = v29[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v16 = v29[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v28;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v29[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(v2 + 48) + 8 * v14;
      int v19 = *(_DWORD *)v18;
      __int16 v20 = *(_WORD *)(v18 + 4);
      sub_1B3A70E00();
      sub_1B3A70E40();
      sub_1B3A70E30();
      uint64_t result = sub_1B3A70E50();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 8 * v11;
      *(_DWORD *)uint64_t v12 = v19;
      *(_WORD *)(v12 + 4) = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t sub_1B3A51B68(unint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = HIDWORD(result);
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1B3A51888();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (unint64_t)sub_1B3A51CD8();
      goto LABEL_14;
    }
    sub_1B3A51E80();
  }
  uint64_t v9 = *v3;
  sub_1B3A70E00();
  sub_1B3A70E40();
  sub_1B3A70E30();
  uint64_t result = sub_1B3A70E50();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    while (1)
    {
      uint64_t v12 = *(void *)(v9 + 48) + 8 * a2;
      if (*(_DWORD *)v12 == v5 && *(unsigned __int16 *)(v12 + 4) == (unsigned __int16)v6) {
        break;
      }
      a2 = (a2 + 1) & v11;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t result = sub_1B3A70D60();
    __break(1u);
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 8 * a2;
  *(_DWORD *)uint64_t v14 = v5;
  *(_WORD *)(v14 + 4) = v6;
  uint64_t v15 = *(void *)(v13 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v17;
  }
  return result;
}

void *sub_1B3A51CD8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62C8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70970();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    int v18 = *(_DWORD *)v17;
    LOWORD(v17) = *(_WORD *)(v17 + 4);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v19 = v18;
    *(_WORD *)(v19 + 4) = v17;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1B3A51E80()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62C8);
  uint64_t result = sub_1B3A70980();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 8 * v14;
    int v19 = *(_DWORD *)v18;
    __int16 v20 = *(_WORD *)(v18 + 4);
    sub_1B3A70E00();
    sub_1B3A70E40();
    sub_1B3A70E30();
    uint64_t result = sub_1B3A70E50();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 8 * v11;
    *(_DWORD *)uint64_t v12 = v19;
    *(_WORD *)(v12 + 4) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1B3A5212C(uint64_t a1)
{
  swift_allocObject();
  return sub_1B3A52168(a1, v2);
}

uint64_t sub_1B3A52168(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(unsigned char *)(v2 + 48) = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(char *)(a1 + 8);
  unint64_t v5 = *(void *)&asc_1B3A76A28[8 * v4];
  *(void *)(v2 + 56) = v5;
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = ktrace_chunk_size_t(*(void *)a1, a2);
  if (__OFSUB__(v7, v5))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    JUMPOUT(0x1B3A5227CLL);
  }
  if (ktrace_chunk_map_data(v6, v5, v7 - v5))
  {
    switch((char)v4)
    {
      case 2:
      case 3:
        goto LABEL_8;
      default:
        *(void *)(v2 + 64) = sub_1B3A70750();
        *(void *)(v2 + 72) = v8;
        return v2;
    }
  }
  type metadata accessor for EventChunkData();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t type metadata accessor for EventChunkData()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B3A522A8(uint64_t (*a1)(char *))
{
  unint64_t v16 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790]();
  unint64_t v5 = (char *)v14 - v4;
  uint64_t v6 = 32;
  uint64_t v7 = 0;
  switch(*(unsigned char *)(v1 + 24))
  {
    case 1:
      uint64_t v6 = 64;
      goto LABEL_4;
    case 2:
    case 3:
      return v7;
    case 4:
      uint64_t v6 = 48;
      goto LABEL_4;
    default:
LABEL_4:
      unint64_t v8 = ktrace_chunk_size_t(*(void *)(v1 + 16), 1) / v6;
      if ((uint64_t)v8 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v9 = *(void *)(v1 + 64);
        v14[1] = v3 + 16;
        uint64_t v15 = v9;
        while (1)
        {
          uint64_t v10 = v8 >> 1;
          uint64_t v11 = v7 + (v8 >> 1);
          if (__OFADD__(v7, v8 >> 1)) {
            break;
          }
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15 + *(void *)(v3 + 72) * v11, v2);
          char v12 = v16(v5);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
          if ((v12 & 1) == 0)
          {
            uint64_t v7 = v11 + 1;
            if (__OFADD__(v11, 1)) {
              goto LABEL_14;
            }
            uint64_t v10 = v8 + ~v10;
          }
          unint64_t v8 = v10;
          if (v10 <= 0) {
            return v7;
          }
        }
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x1B3A52474);
      }
      return 0;
  }
}

uint64_t sub_1B3A52488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v11 = *(uint64_t (**)(BOOL (*)(uint64_t), unsigned char *))(*v5 + 120);
  uint64_t v12 = v11(sub_1B3A5B850, v41);
  char v34 = v13;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t result = v11(sub_1B3A5B8B4, v36);
  uint64_t v16 = v5[8];
  if (!v16) {
    goto LABEL_24;
  }
  if (v34)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  if (v15) {
    goto LABEL_26;
  }
  uint64_t v17 = result;
  if (v12 < result)
  {
    while (1)
    {
      uint64_t v18 = v5[2];
      int v19 = ktrace_chunk_tag(v18);
      __int16 v20 = ktrace_chunk_version_major(v18);
      __int16 v21 = ktrace_chunk_version_minor(v18);
      appended = ktrace_file_append_start(a1, v19, v20, v21);
      if (!appended)
      {
        int v28 = MEMORY[0x1B3EBD410]();
        sub_1B3A53178();
        swift_allocError();
        *(void *)uint64_t v29 = 0xD000000000000015;
        *(void *)(v29 + 8) = 0x80000001B3A7C4B0;
        *(_DWORD *)(v29 + 16) = v28;
        *(unsigned char *)(v29 + 20) = 1;
        return swift_willThrow();
      }
      uint64_t v23 = (uint64_t)appended;
      if ((uint64_t)v5[7] > 0)
      {
        *(void *)bytes = 0;
        int v24 = ktrace_file_append_data(a1, (uint64_t)appended, bytes, 8);
        if (v24) {
          break;
        }
      }
      if (__OFSUB__(v17, v12))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v17 - v12 >= 0x1FFFFFF) {
        uint64_t v25 = 0x1FFFFFFLL;
      }
      else {
        uint64_t v25 = v17 - v12;
      }
      if ((unint64_t)(v25 - 0x200000000000000) >> 58 != 63) {
        goto LABEL_22;
      }
      int v26 = ktrace_file_append_data(a1, v23, (UInt8 *)(v16 + (v12 << 6)), v25 << 6);
      if (v26)
      {
        int v30 = v26;
        sub_1B3A53178();
        swift_allocError();
        unint64_t v32 = 0xD000000000000014;
        unint64_t v33 = "appending event data";
        goto LABEL_20;
      }
      BOOL v27 = __OFADD__(v12, v25);
      v12 += v25;
      if (v27) {
        goto LABEL_23;
      }
      uint64_t result = ktrace_file_append_finish(a1, v23);
      if (v12 >= v17) {
        return result;
      }
    }
    int v30 = v24;
    sub_1B3A53178();
    swift_allocError();
    unint64_t v32 = 0xD000000000000016;
    unint64_t v33 = "appending event header";
LABEL_20:
    *(void *)uint64_t v31 = v32;
    *(void *)(v31 + 8) = (unint64_t)(v33 - 32) | 0x8000000000000000;
    *(_DWORD *)(v31 + 16) = v30;
    *(unsigned char *)(v31 + 20) = 1;
    swift_willThrow();
    return ktrace_file_append_finish(a1, v23);
  }
  return result;
}

uint64_t sub_1B3A5278C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v11 = *(uint64_t (**)(BOOL (*)(uint64_t *), unsigned char *))(*v5 + 120);
  uint64_t v12 = v11(sub_1B3A5B918, v41);
  char v34 = v13;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t result = v11(sub_1B3A5B974, v36);
  uint64_t v16 = v5[8];
  if (!v16) {
    goto LABEL_24;
  }
  if (v34)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  if (v15) {
    goto LABEL_26;
  }
  uint64_t v17 = result;
  if (v12 < result)
  {
    while (1)
    {
      uint64_t v18 = v5[2];
      int v19 = ktrace_chunk_tag(v18);
      __int16 v20 = ktrace_chunk_version_major(v18);
      __int16 v21 = ktrace_chunk_version_minor(v18);
      appended = ktrace_file_append_start(a1, v19, v20, v21);
      if (!appended)
      {
        int v28 = MEMORY[0x1B3EBD410]();
        sub_1B3A53178();
        swift_allocError();
        *(void *)uint64_t v29 = 0xD000000000000015;
        *(void *)(v29 + 8) = 0x80000001B3A7C4B0;
        *(_DWORD *)(v29 + 16) = v28;
        *(unsigned char *)(v29 + 20) = 1;
        return swift_willThrow();
      }
      uint64_t v23 = (uint64_t)appended;
      if ((uint64_t)v5[7] > 0)
      {
        *(void *)bytes = 0;
        int v24 = ktrace_file_append_data(a1, (uint64_t)appended, bytes, 8);
        if (v24) {
          break;
        }
      }
      if (__OFSUB__(v17, v12))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v17 - v12 >= 0x3FFFFFF) {
        uint64_t v25 = 0x3FFFFFFLL;
      }
      else {
        uint64_t v25 = v17 - v12;
      }
      if ((unint64_t)(v25 - 0x400000000000000) >> 59 != 31) {
        goto LABEL_22;
      }
      int v26 = ktrace_file_append_data(a1, v23, (UInt8 *)(v16 + 32 * v12), 32 * v25);
      if (v26)
      {
        int v30 = v26;
        sub_1B3A53178();
        swift_allocError();
        unint64_t v32 = 0xD000000000000014;
        unint64_t v33 = "appending event data";
        goto LABEL_20;
      }
      BOOL v27 = __OFADD__(v12, v25);
      v12 += v25;
      if (v27) {
        goto LABEL_23;
      }
      uint64_t result = ktrace_file_append_finish(a1, v23);
      if (v12 >= v17) {
        return result;
      }
    }
    int v30 = v24;
    sub_1B3A53178();
    swift_allocError();
    unint64_t v32 = 0xD000000000000016;
    unint64_t v33 = "appending event header";
LABEL_20:
    *(void *)uint64_t v31 = v32;
    *(void *)(v31 + 8) = (unint64_t)(v33 - 32) | 0x8000000000000000;
    *(_DWORD *)(v31 + 16) = v30;
    *(unsigned char *)(v31 + 20) = 1;
    swift_willThrow();
    return ktrace_file_append_finish(a1, v23);
  }
  return result;
}

uint64_t sub_1B3A52A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v11 = *(uint64_t (**)(BOOL (*)(uint64_t), unsigned char *))(*v5 + 120);
  uint64_t v12 = v11(sub_1B3A5B9D0, v41);
  char v34 = v13;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t result = v11(sub_1B3A5BA2C, v36);
  uint64_t v16 = v5[8];
  if (!v16) {
    goto LABEL_24;
  }
  if (v34)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  if (v15) {
    goto LABEL_26;
  }
  uint64_t v17 = result;
  if (v12 < result)
  {
    while (1)
    {
      uint64_t v18 = v5[2];
      int v19 = ktrace_chunk_tag(v18);
      __int16 v20 = ktrace_chunk_version_major(v18);
      __int16 v21 = ktrace_chunk_version_minor(v18);
      appended = ktrace_file_append_start(a1, v19, v20, v21);
      if (!appended)
      {
        int v28 = MEMORY[0x1B3EBD410]();
        sub_1B3A53178();
        swift_allocError();
        *(void *)uint64_t v29 = 0xD000000000000015;
        *(void *)(v29 + 8) = 0x80000001B3A7C4B0;
        *(_DWORD *)(v29 + 16) = v28;
        *(unsigned char *)(v29 + 20) = 1;
        return swift_willThrow();
      }
      uint64_t v23 = (uint64_t)appended;
      if ((uint64_t)v5[7] > 0)
      {
        *(void *)bytes = 0;
        int v24 = ktrace_file_append_data(a1, (uint64_t)appended, bytes, 8);
        if (v24) {
          break;
        }
      }
      if (__OFSUB__(v17, v12))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v17 - v12 >= 44739242) {
        uint64_t v25 = 44739242;
      }
      else {
        uint64_t v25 = v17 - v12;
      }
      if ((unsigned __int128)(v25 * (__int128)48) >> 64 != (48 * v25) >> 63) {
        goto LABEL_22;
      }
      int v26 = ktrace_file_append_data(a1, v23, (UInt8 *)(v16 + 48 * v12), 48 * v25);
      if (v26)
      {
        int v30 = v26;
        sub_1B3A53178();
        swift_allocError();
        unint64_t v32 = 0xD000000000000014;
        unint64_t v33 = "appending event data";
        goto LABEL_20;
      }
      BOOL v27 = __OFADD__(v12, v25);
      v12 += v25;
      if (v27) {
        goto LABEL_23;
      }
      uint64_t result = ktrace_file_append_finish(a1, v23);
      if (v12 >= v17) {
        return result;
      }
    }
    int v30 = v24;
    sub_1B3A53178();
    swift_allocError();
    unint64_t v32 = 0xD000000000000016;
    unint64_t v33 = "appending event header";
LABEL_20:
    *(void *)uint64_t v31 = v32;
    *(void *)(v31 + 8) = (unint64_t)(v33 - 32) | 0x8000000000000000;
    *(_DWORD *)(v31 + 16) = v30;
    *(unsigned char *)(v31 + 20) = 1;
    swift_willThrow();
    return ktrace_file_append_finish(a1, v23);
  }
  return result;
}

uint64_t sub_1B3A52D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(uint64_t (**)(BOOL (*)(), unsigned char *))(*v5 + 120);
  uint64_t v49 = *(void *)(*v5 + 80);
  uint64_t v12 = v49;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v13 = v11(sub_1B3A53108, v48);
  unint64_t v14 = v11;
  uint64_t v15 = v13;
  char v38 = v16;
  uint64_t v43 = v12;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v17 = v14(sub_1B3A53140, v42);
  char v19 = v18;
  uint64_t result = sub_1B3A70740();
  uint64_t v40 = result;
  if (!result) {
    goto LABEL_26;
  }
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v21 = *(void *)(v39 + 64);
  if (!v21) {
    goto LABEL_25;
  }
  if (v38)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  if (v19) {
    goto LABEL_28;
  }
  if (v15 < v17)
  {
    while (1)
    {
      uint64_t v22 = v5[2];
      int v23 = ktrace_chunk_tag(v22);
      __int16 v24 = ktrace_chunk_version_major(v22);
      __int16 v25 = ktrace_chunk_version_minor(v22);
      appended = ktrace_file_append_start(a1, v23, v24, v25);
      if (!appended)
      {
        int v32 = MEMORY[0x1B3EBD410]();
        sub_1B3A53178();
        swift_allocError();
        *(void *)uint64_t v33 = 0xD000000000000015;
        *(void *)(v33 + 8) = 0x80000001B3A7C4B0;
        *(_DWORD *)(v33 + 16) = v32;
        *(unsigned char *)(v33 + 20) = 1;
        return swift_willThrow();
      }
      uint64_t v27 = (uint64_t)appended;
      if ((uint64_t)v5[7] >= 1)
      {
        *(void *)bytes = 0;
        int v28 = ktrace_file_append_data(a1, (uint64_t)appended, bytes, 8);
        if (v28) {
          break;
        }
      }
      if (__OFSUB__(v17, v15))
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (0x7FFFFFFF / v21 >= v17 - v15) {
        uint64_t v29 = v17 - v15;
      }
      else {
        uint64_t v29 = 0x7FFFFFFF / v21;
      }
      if ((unsigned __int128)(v29 * (__int128)v21) >> 64 != (v29 * v21) >> 63) {
        goto LABEL_23;
      }
      int v30 = ktrace_file_append_data(a1, v27, (UInt8 *)(v40 + *(void *)(v39 + 72) * v15), v29 * v21);
      if (v30)
      {
        int v34 = v30;
        sub_1B3A53178();
        swift_allocError();
        unint64_t v36 = 0xD000000000000014;
        uint64_t v37 = "appending event data";
        goto LABEL_21;
      }
      BOOL v31 = __OFADD__(v15, v29);
      v15 += v29;
      if (v31) {
        goto LABEL_24;
      }
      uint64_t result = ktrace_file_append_finish(a1, v27);
      if (v15 >= v17) {
        return result;
      }
    }
    int v34 = v28;
    sub_1B3A53178();
    swift_allocError();
    unint64_t v36 = 0xD000000000000016;
    uint64_t v37 = "appending event header";
LABEL_21:
    *(void *)uint64_t v35 = v36;
    *(void *)(v35 + 8) = (unint64_t)(v37 - 32) | 0x8000000000000000;
    *(_DWORD *)(v35 + 16) = v34;
    *(unsigned char *)(v35 + 20) = 1;
    swift_willThrow();
    return ktrace_file_append_finish(a1, v27);
  }
  return result;
}

BOOL sub_1B3A53108()
{
  unint64_t v1 = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 24))() > v1;
}

BOOL sub_1B3A53140()
{
  unint64_t v1 = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 24))() > v1;
}

unint64_t sub_1B3A53178()
{
  unint64_t result = qword_1E9CD62D0;
  if (!qword_1E9CD62D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD62D0);
  }
  return result;
}

unint64_t sub_1B3A531CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  unint64_t result = ktrace_chunk_size_t(v3, a2);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = result - v5;
  if (__OFSUB__(result, v5))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_1B3A70740();
    if (result)
    {
      ktrace_chunk_unmap_data(v3, result, v6);
      return v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3A5325C(uint64_t a1, uint64_t a2)
{
  sub_1B3A531CC(a1, a2);

  return swift_deallocClassInstance();
}

uint64_t sub_1B3A53290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) != 0)
  {
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    strcpy((char *)v4, "file I/O for ");
    HIWORD(v4[1]) = -4864;
    sub_1B3A703A0();
    sub_1B3A703A0();
    sub_1B3A70D00();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    v4[0] = 0xD000000000000018;
    v4[1] = 0x80000001B3A7C510;
    sub_1B3A703A0();
  }
  return v4[0];
}

uint64_t sub_1B3A533BC()
{
  return sub_1B3A53290(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32));
}

uint64_t sub_1B3A533E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A53498()
{
  return sub_1B3A533E0(*v0);
}

uint64_t sub_1B3A534A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  v21[0] = 0;
  int v9 = ktrace_file_earliest_timestamp(a1, v21, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    int v16 = v9;
    sub_1B3A57B34();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000012;
    *(void *)(v17 + 8) = 0x80000001B3A7C550;
LABEL_5:
    *(_DWORD *)(v17 + 16) = v16;
    return swift_willThrow();
  }
  uint64_t v20 = 0;
  int v18 = ktrace_file_latest_timestamp(a1, &v20, v10, v11, v12, v13, v14, v15);
  if (v18)
  {
    int v16 = v18;
    sub_1B3A57B34();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000010;
    *(void *)(v17 + 8) = 0x80000001B3A7C570;
    goto LABEL_5;
  }
  return v21[0];
}

unint64_t sub_1B3A535C8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  unint64_t v5 = a4;
  switch(a5)
  {
    case 1:
      unint64_t v8 = sub_1B3A401CC(a4, a3);
      unint64_t v5 = a1 + v8;
      if (__CFADD__(a1, v8))
      {
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x1B3A5378CLL);
      }
      if (v5 <= a2) {
        return v5;
      }
      type metadata accessor for TrimError(0);
      sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
      swift_allocError();
      *int v9 = 0xD00000000000001FLL;
      v9[1] = 0x80000001B3A7C5C0;
      void v9[2] = v5;
      v9[3] = a2;
      break;
    case 2:
      unint64_t v10 = sub_1B3A401CC(a4, a3);
      unint64_t v5 = a2 - v10;
      if (a2 < v10) {
        goto LABEL_14;
      }
      if (v5 >= a1) {
        return v5;
      }
      type metadata accessor for TrimError(0);
      sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
      swift_allocError();
      *uint64_t v11 = 0xD000000000000023;
      v11[1] = 0x80000001B3A7C590;
      v11[2] = v5;
      _OWORD v11[3] = a1;
      break;
    case 3:
      if (a4) {
        return a2;
      }
      else {
        return a1;
      }
    default:
      return v5;
  }
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return v5;
}

uint64_t sub_1B3A5379C(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = 0;
      goto LABEL_9;
    case 2:
      uint64_t v3 = 0;
LABEL_9:
      sub_1B3A703A0();
      sub_1B3A705B0();
      return v3;
    case 3:
      if (a1) {
        return 6581861;
      }
      else {
        return 0x7472617473;
      }
    default:
      uint64_t v3 = 64;
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      return v3;
  }
}

uint64_t sub_1B3A538C0(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 1:
    case 2:
      unint64_t v3 = 0;
      sub_1B3A705B0();
      sub_1B3A703A0();
      goto LABEL_7;
    case 3:
      if (a1) {
        uint64_t result = 6581861;
      }
      else {
        uint64_t result = 0x7472617473;
      }
      break;
    default:
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v3 = 0xD000000000000010;
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t result = v3;
      break;
  }
  return result;
}

uint64_t sub_1B3A53A6C()
{
  return sub_1B3A538C0(*(void *)v0, *(unsigned char *)(v0 + 8));
}

BOOL sub_1B3A53A78(uint64_t a1, uint64_t a2)
{
  return sub_1B3A58394(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

unint64_t sub_1B3A53A90()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1B3A70190();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TrimError(0);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B3A58830(v1, (uint64_t)v8, type metadata accessor for TrimError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      int v9 = *(_DWORD *)v8;
      int v10 = *((_DWORD *)v8 + 1);
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      sub_1B3A709B0();
      LODWORD(v31) = v9;
      uint64_t v11 = sub_1B3A70D00();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      unint64_t v32 = v11;
      unint64_t v33 = v13;
      sub_1B3A703A0();
      LODWORD(v31) = v10;
      goto LABEL_8;
    case 4u:
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v18 = 0xD00000000000001ALL;
      char v19 = "usage: invalid arguments: ";
      goto LABEL_6;
    case 5u:
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v18 = 0xD000000000000015;
      char v19 = "invalid source file: ";
LABEL_6:
      unint64_t v32 = v18;
      unint64_t v33 = (unint64_t)(v19 - 32) | 0x8000000000000000;
      sub_1B3A703A0();
      goto LABEL_9;
    case 6u:
      unint64_t v20 = *(void *)v8;
      unint64_t v21 = *((void *)v8 + 1);
      uint64_t v22 = *((void *)v8 + 2);
      uint64_t v23 = *((void *)v8 + 3);
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v32 = v20;
      unint64_t v33 = v21;
      sub_1B3A703A0();
      uint64_t v31 = v22;
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      uint64_t v31 = v23;
LABEL_8:
      sub_1B3A70D00();
      sub_1B3A703A0();
LABEL_9:
      swift_bridgeObjectRelease();
      return v32;
    case 7u:
      char v25 = *v8;
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      LOBYTE(v31) = v25;
      sub_1B3A70A80();
      return v32;
    case 8u:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A58430(&qword_1E9CD62F0, MEMORY[0x1E4FBCE28]);
      uint64_t v26 = sub_1B3A70D00();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      unint64_t v32 = v26;
      unint64_t v33 = v28;
      sub_1B3A703A0();
      goto LABEL_13;
    default:
      int v14 = *(_DWORD *)&v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62F8) + 48)];
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A58430(&qword_1E9CD62F0, MEMORY[0x1E4FBCE28]);
      uint64_t v15 = sub_1B3A70D00();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      unint64_t v32 = v15;
      unint64_t v33 = v17;
      sub_1B3A703A0();
      LODWORD(v31) = v14;
      sub_1B3A70D00();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
LABEL_13:
      unint64_t v24 = v32;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v24;
  }
}

uint64_t sub_1B3A54140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v90 = a3;
  uint64_t v88 = a6;
  uint64_t v10 = sub_1B3A70190();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v84 = v10;
  uint64_t v85 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v81 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v82 = (char *)&v78 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6300);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v83 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for TrimOptions(0);
  uint64_t v87 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  unint64_t v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v18;
  uint64_t v21 = *(int *)(v18 + 32);
  uint64_t v86 = v20;
  v20[v21] = 0;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a4;
  *(void *)(v22 + 24) = a5;
  uint64_t v114 = a5;
  swift_retain();
  uint64_t v23 = sub_1B3A15F00();
  uint64_t v24 = sub_1B3A15F0C();
  uint64_t v25 = sub_1B3A15F0C();
  v77.n128_u64[1] = v24;
  *((void *)&v76 + 1) = v22;
  v77.n128_u64[0] = (unint64_t)v23;
  *(void *)&long long v76 = sub_1B3A584D0;
  *(void *)&long long v75 = 0xD000000000000049;
  *((void *)&v75 + 1) = 0x80000001B3A7C840;
  sub_1B3A15F18(a1, a2, (uint64_t)sub_1B3A55074, 0, 0xD000000000000024, 0x80000001B3A7C750, 0xD0000000000000BFLL, 0x80000001B3A7C780, (uint64_t)&v103, v75, 0, v76, v77, v25);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 0;
  *(unsigned char *)(v26 + 24) = 3;
  swift_retain();
  char v27 = sub_1B39B5AA4();
  sub_1B3A138AC(1836020326, 0xE400000000000000, 0xD00000000000001FLL, 0x80000001B3A7C890, 0, 0, v27 & 1, (uint64_t)sub_1B3A58508, v26);
  swift_release();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 1;
  *(unsigned char *)(v28 + 24) = 3;
  swift_retain();
  char v29 = sub_1B39B5AA4();
  sub_1B3A138AC(28532, 0xE200000000000000, 0xD000000000000020, 0x80000001B3A7C8B0, 0, 0, v29 & 1, (uint64_t)sub_1B3A58508, v28);
  swift_release();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 0;
  *(void *)(v30 + 24) = 0;
  swift_retain();
  char v31 = sub_1B39B5AA4();
  sub_1B3A138AC(0x74757074756FLL, 0xE600000000000000, 0xD00000000000001CLL, 0x80000001B3A7C8E0, 111, 0xE100000000000000, v31 & 1, (uint64_t)sub_1B3A585D0, v30);
  swift_release();
  v112[6] = v109;
  v112[7] = v110;
  uint64_t v113 = v111;
  v112[2] = v105;
  v112[3] = v106;
  v112[4] = v107;
  v112[5] = v108;
  v112[0] = v103;
  v112[1] = v104;
  sub_1B3A58634(v112);
  uint64_t v32 = v91;
  unint64_t v33 = sub_1B3A14784(v90);
  if (v32)
  {
    swift_bridgeObjectRelease();
    sub_1B3A58704(v112);
    swift_release();
    sub_1B3A58704(v112);
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v79 = (void *)(v26 + 16);
  uint64_t v80 = v28;
  uint64_t v91 = v30;
  unint64_t v35 = v33;
  swift_bridgeObjectRelease();
  sub_1B3A58704(v112);
  if (!v35)
  {
    swift_release();
    sub_1B3A58704(v112);
    swift_release();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v88, 1, 1, v89);
  }
  uint64_t v90 = 0;
  unint64_t v36 = *(void *)(v35 + 16);
  if (!v36)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for TrimError(0);
    sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
    swift_allocError();
    *uint64_t v39 = 0xD000000000000020;
    v39[1] = 0x80000001B3A7C960;
    goto LABEL_14;
  }
  uint64_t v78 = v26;
  if (v36 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v37 = v79;
    swift_beginAccess();
    if (*(unsigned __int8 *)(v26 + 24) >= 3u && !*v37)
    {
      swift_beginAccess();
      if (*(unsigned __int8 *)(v80 + 24) >= 3u)
      {
        if (*(void *)(v28 + 16))
        {
          swift_bridgeObjectRelease();
          type metadata accessor for TrimError(0);
          sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
          swift_allocError();
          void *v38 = 0xD00000000000001FLL;
          v38[1] = 0x80000001B3A7C940;
LABEL_14:
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          swift_release();
          long long v100 = v109;
          long long v101 = v110;
          uint64_t v102 = v111;
          long long v96 = v105;
          long long v97 = v106;
          long long v98 = v107;
          long long v99 = v108;
          long long v94 = v103;
          long long v95 = v104;
          sub_1B3A58704(&v94);
          swift_release();
          swift_release();
          return swift_release();
        }
      }
    }
    uint64_t v43 = (uint64_t)v86;
    sub_1B3A701A0();
    char v44 = *(unsigned char *)(v26 + 24);
    uint64_t v45 = v89;
    uint64_t v46 = v43 + *(int *)(v89 + 24);
    *(void *)uint64_t v46 = *(void *)(v26 + 16);
    *(unsigned char *)(v46 + 8) = v44;
    swift_beginAccess();
    uint64_t v47 = v80;
    char v48 = *(unsigned char *)(v80 + 24);
    uint64_t v49 = v43 + *(int *)(v45 + 28);
    *(void *)uint64_t v49 = *(void *)(v80 + 16);
    *(unsigned char *)(v49 + 8) = v48;
    swift_beginAccess();
    if (*(void *)(v91 + 24))
    {
      swift_bridgeObjectRetain();
      sub_1B3A701A0();
      swift_release();
      sub_1B3A58704(v112);
      swift_release();
      swift_release();
LABEL_19:
      uint64_t v51 = v87;
      uint64_t v50 = v88;
      swift_release();
      sub_1B3A58830(v43, v50, type metadata accessor for TrimOptions);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v50, 0, 1, v45);
      return sub_1B3A589C4(v43, type metadata accessor for TrimOptions);
    }
    sub_1B3A70180();
    if (v52)
    {
      *(void *)&long long v94 = 46;
      *((void *)&v94 + 1) = 0xE100000000000000;
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
    }
    uint64_t v53 = (uint64_t)v83;
    sub_1B3A70120();
    uint64_t v54 = sub_1B3A70160();
    uint64_t v55 = *(void *)(v54 - 8);
    LODWORD(v83) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54);
    if (v83 == 1)
    {
      swift_bridgeObjectRelease();
      sub_1B3A11580(v53, &qword_1E9CD6300);
      uint64_t v90 = type metadata accessor for TrimError(0);
      sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
      swift_allocError();
      uint64_t v57 = v56;
      *(void *)&long long v94 = 0;
      *((void *)&v94 + 1) = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A58430(&qword_1E9CD62F0, MEMORY[0x1E4FBCE28]);
      uint64_t v58 = v84;
      uint64_t v59 = sub_1B3A70D00();
      uint64_t v60 = v43;
      uint64_t v62 = v61;
      swift_bridgeObjectRelease();
      *(void *)&long long v94 = v59;
      *((void *)&v94 + 1) = v62;
      sub_1B3A703A0();
      uint64_t v63 = *((void *)&v94 + 1);
      *uint64_t v57 = v94;
      v57[1] = v63;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      long long v100 = v109;
      long long v101 = v110;
      uint64_t v102 = v111;
      long long v96 = v105;
      long long v97 = v106;
      long long v98 = v107;
      long long v99 = v108;
      long long v94 = v103;
      long long v95 = v104;
      sub_1B3A58704(&v94);
      swift_release();
      swift_release();
      uint64_t v64 = v89;
    }
    else
    {
      uint64_t v65 = sub_1B3A70150();
      uint64_t v66 = v53;
      uint64_t v67 = v43;
      uint64_t v69 = v68;
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v66, v54);
      *(void *)&long long v94 = v65;
      *((void *)&v94 + 1) = v69;
      sub_1B3A703A0();
      sub_1B3A5379C(*(void *)(v78 + 16), *(unsigned char *)(v78 + 24));
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      sub_1B3A5379C(*(void *)(v47 + 16), *(unsigned char *)(v47 + 24));
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      uint64_t v79 = *(void **)(v85 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v79)(v81, v67, v84);
      sub_1B3A70130();
      uint64_t v70 = v67 + *(int *)(v89 + 20);
      sub_1B3A70170();
      id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28CB8]), sel_init);
      sub_1B3A70140();
      long long v72 = (void *)sub_1B3A70290();
      swift_bridgeObjectRelease();
      LODWORD(v65) = objc_msgSend(v71, sel_fileExistsAtPath_, v72);

      if (!v65)
      {
        swift_release();
        long long v100 = v109;
        long long v101 = v110;
        uint64_t v102 = v111;
        long long v96 = v105;
        long long v97 = v106;
        long long v98 = v107;
        long long v99 = v108;
        long long v94 = v103;
        long long v95 = v104;
        sub_1B3A58704(&v94);
        swift_release();
        swift_release();
        uint64_t v45 = v89;
        uint64_t v43 = (uint64_t)v86;
        goto LABEL_19;
      }
      type metadata accessor for TrimError(0);
      sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
      swift_allocError();
      uint64_t v58 = v84;
      ((void (*)(uint64_t, uint64_t, uint64_t))v79)(v73, v70, v84);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      long long v100 = v109;
      long long v101 = v110;
      uint64_t v102 = v111;
      long long v96 = v105;
      long long v97 = v106;
      long long v98 = v107;
      long long v99 = v108;
      long long v94 = v103;
      long long v95 = v104;
      sub_1B3A58704(&v94);
      swift_release();
      swift_release();
      uint64_t v64 = v89;
      uint64_t v60 = (uint64_t)v86;
    }
    swift_release();
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8);
    uint64_t result = v74(v60, v58);
    if (v83 != 1) {
      return v74(v60 + *(int *)(v64 + 20), v58);
    }
  }
  else
  {
    type metadata accessor for TrimError(0);
    sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
    swift_allocError();
    char v41 = v40;
    *(void *)&long long v94 = 0;
    *((void *)&v94 + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v92 = 0xD000000000000011;
    unint64_t v93 = 0x80000001B3A7C900;
    if (*(void *)(v35 + 16) < v36)
    {
      __break(1u);
    }
    else
    {
      *(void *)&long long v94 = v35;
      *((void *)&v94 + 1) = v35 + 32;
      *(void *)&long long v95 = 1;
      *((void *)&v95 + 1) = (2 * v36) | 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6308);
      sub_1B3A587D4();
      sub_1B3A70250();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      unint64_t v42 = v93;
      *char v41 = v92;
      v41[1] = v42;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      long long v100 = v109;
      long long v101 = v110;
      uint64_t v102 = v111;
      long long v96 = v105;
      long long v97 = v106;
      long long v98 = v107;
      long long v99 = v108;
      long long v94 = v103;
      long long v95 = v104;
      sub_1B3A58704(&v94);
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

unint64_t sub_1B3A55074()
{
  return 0xD000000000000021;
}

uint64_t sub_1B3A55090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1B3A70010();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B3A70000();
  uint64_t v27 = sub_1B3A6FFF0();
  char v28 = v8;
  char v29 = v9;
  char v30 = v10;
  char v31 = v11;
  char v32 = v12;
  char v33 = v13;
  char v34 = v14;
  char v35 = v15;
  int v22 = ktrace_file_uuid(a1, (uint64_t)&v27, v16, v17, v18, v19, v20, v21);
  if (v22)
  {
    int v23 = v22;
    sub_1B3A53178();
    swift_allocError();
    *(_OWORD *)uint64_t v24 = xmmword_1B3A763D0;
    *(_DWORD *)(v24 + 16) = v23;
    *(unsigned char *)(v24 + 20) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
  }
}

uint64_t sub_1B3A552AC()
{
  return 0x6946656372756F73;
}

uint64_t sub_1B3A552D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6946656372756F73 && a2 == 0xEE0044495555656CLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B3A70D20();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B3A5538C(uint64_t a1)
{
  unint64_t v2 = sub_1B3A58898();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A553C8(uint64_t a1)
{
  unint64_t v2 = sub_1B3A58898();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A55404(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6320);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3A58898();
  sub_1B3A70E70();
  sub_1B3A70C80();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Trimming.toolName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Trimming.interactive.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Trimming.notify.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t Trimming.init(toolName:interactive:notify:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Trimming.trim(arguments:)(Swift::OpaquePointer arguments)
{
  rawValue = (unint64_t *)arguments._rawValue;
  uint64_t v2 = v1;
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  uint64_t v209 = sub_1B3A6FC90();
  uint64_t v208 = *(void *)(v209 - 8);
  MEMORY[0x1F4188790](v209);
  uint64_t v207 = (char *)&v192 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6318);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v212 = (void **)((char *)&v192 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v211 = sub_1B3A70010();
  uint64_t v210 = *(void *)(v211 - 8);
  MEMORY[0x1F4188790](v211);
  uint64_t v206 = (char *)&v192 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = type metadata accessor for TrimNote(0);
  MEMORY[0x1F4188790](v218);
  uint64_t v219 = (uint64_t *)((char *)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v213 = sub_1B3A702F0();
  uint64_t v217 = *(void **)(v213 - 8);
  MEMORY[0x1F4188790](v213);
  unint64_t v214 = (unint64_t)&v192 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v216 = type metadata accessor for TrimOptions(0);
  uint64_t v215 = *(void *)(v216 - 8);
  uint64_t v9 = *(void *)(v215 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](v216);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)&v192 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6328);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v192 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v192 - v17;
  long long v19 = v2[1];
  long long v222 = *v2;
  long long v223 = v19;
  uint64_t v224 = *((void *)v2 + 4);
  uint64_t v21 = *((void *)&v222 + 1);
  unint64_t v20 = v222;
  uint64_t v22 = swift_allocObject();
  long long v23 = v2[1];
  *(_OWORD *)(v22 + 16) = *v2;
  *(_OWORD *)(v22 + 32) = v23;
  *(void *)(v22 + 48) = *((void *)v2 + 4);
  swift_bridgeObjectRetain();
  uint64_t v24 = (uint64_t)rawValue;
  swift_bridgeObjectRetain();
  sub_1B3A5898C((uint64_t)&v222);
  uint64_t v25 = (uint64_t)v221;
  sub_1B3A54140(v20, v21, v24, (uint64_t)sub_1B3A58984, v22, (uint64_t)v18);
  uint64_t v26 = (void *)v25;
  if (v25) {
    goto LABEL_14;
  }
  unint64_t v27 = v214;
  char v28 = v217;
  uint64_t v204 = v9;
  rawValue = (unint64_t *)((char *)&v192 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v205 = v12;
  sub_1B3A58A24((uint64_t)v18, (uint64_t)v16);
  uint64_t v29 = v216;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48))(v16, 1, v216) == 1)
  {
    sub_1B3A11580((uint64_t)v18, &qword_1E9CD6328);
    uint64_t v30 = (uint64_t)v16;
LABEL_4:
    sub_1B3A11580(v30, &qword_1E9CD6328);
    return;
  }
  uint64_t v221 = v18;
  uint64_t v31 = (uint64_t)v16;
  uint64_t v32 = (uint64_t)v205;
  sub_1B3A58A8C(v31, (uint64_t)v205);
  *(void *)&long long aBlock = sub_1B3A70140();
  *((void *)&aBlock + 1) = v33;
  sub_1B3A702E0();
  unint64_t v203 = sub_1B39ADD78();
  uint64_t v34 = sub_1B3A70800();
  char v35 = v28 + 1;
  uint64_t v36 = (void (*)(unint64_t, uint64_t))v28[1];
  v36(v27, v213);
  swift_bridgeObjectRelease();
  if (!v34)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  uint64_t v37 = ktrace_file_open((const char *)(v34 + 32), 0);
  swift_bridgeObjectRelease();
  if (!v37)
  {
    type metadata accessor for TrimError(0);
    sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
    uint64_t v26 = (void *)swift_allocError();
    uint64_t v54 = v53;
    uint64_t v55 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62F8) + 48);
    uint64_t v56 = sub_1B3A70190();
    uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v32, v56);
    *(_DWORD *)(v54 + v55) = MEMORY[0x1B3EBD410](v57);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    uint64_t v52 = v32;
    goto LABEL_12;
  }
  uint64_t v45 = sub_1B3A534A4(v37, v38, v39, v40, v41, v42, v43, v44);
  uint64_t v202 = v36;
  unint64_t v47 = v46;
  unint64_t v48 = v45;
  LODWORD(aBlock) = 0;
  unsigned int v226 = 0;
  int v49 = ktrace_file_timebase(v37, &aBlock, &v226);
  if (v49)
  {
    int v50 = v49;
    sub_1B3A57B34();
    uint64_t v26 = (void *)swift_allocError();
    *(void *)uint64_t v51 = 0x65736162656D6974;
    *(void *)(v51 + 8) = 0xE800000000000000;
    *(_DWORD *)(v51 + 16) = v50;
LABEL_9:
    swift_willThrow();
    goto LABEL_10;
  }
  uint64_t v217 = v35;
  uint64_t v194 = v37;
  uint64_t v201 = 0;
  unint64_t v62 = sub_1B3A40258(aBlock, v226);
  unint64_t v198 = v48;
  unint64_t v197 = v47;
  if (v47 < v48)
  {
    __break(1u);
LABEL_81:
    int v185 = MEMORY[0x1B3EBD410]();
    sub_1B3A53178();
    uint64_t v186 = swift_allocError();
    *(void *)uint64_t v187 = 0xD000000000000017;
    *(void *)(v187 + 8) = 0x80000001B3A7C9C0;
    *(_DWORD *)(v187 + 16) = v185;
    *(unsigned char *)(v187 + 20) = v27;
    uint64_t v26 = (void *)v186;
    swift_willThrow();
    swift_release();
    swift_release();
    goto LABEL_83;
  }
  unint64_t v196 = v62;
  double v63 = sub_1B3A40228(v47 - v48, v62);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5890);
  uint64_t v64 = swift_allocObject();
  uint64_t v65 = MEMORY[0x1E4FBB3D0];
  *(_OWORD *)(v64 + 16) = xmmword_1B3A73390;
  uint64_t v66 = MEMORY[0x1E4FBB460];
  *(void *)(v64 + 56) = v65;
  *(void *)(v64 + 64) = v66;
  *(double *)(v64 + 32) = v63;
  sub_1B3A702D0();
  char v200 = (void (*)(void *))*((void *)&v223 + 1);
  uint64_t v199 = v224;
  uint64_t v67 = sub_1B3A70190();
  sub_1B3A58430(&qword_1E9CD62F0, MEMORY[0x1E4FBCE28]);
  uint64_t v68 = (uint64_t)v205;
  uint64_t v193 = v67;
  *(void *)&long long aBlock = sub_1B3A70D00();
  *((void *)&aBlock + 1) = v69;
  sub_1B3A703A0();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  uint64_t v195 = *((void *)&aBlock + 1);
  uint64_t v70 = aBlock;
  uint64_t v71 = v68 + *(int *)(v29 + 24);
  uint64_t v72 = sub_1B3A538C0(*(void *)v71, *(unsigned char *)(v71 + 8));
  uint64_t v74 = v73;
  uint64_t v75 = v68 + *(int *)(v29 + 28);
  uint64_t v76 = sub_1B3A538C0(*(void *)v75, *(unsigned char *)(v75 + 8));
  __n128 v77 = v219;
  uint64_t v78 = v195;
  *uint64_t v219 = v70;
  v77[1] = v78;
  double v77[2] = v72;
  v77[3] = v74;
  uint64_t v79 = v200;
  v77[4] = v76;
  v77[5] = v80;
  swift_storeEnumTagMultiPayload();
  v79(v77);
  sub_1B3A589C4((uint64_t)v77, type metadata accessor for TrimNote);
  unint64_t v81 = v198;
  unint64_t v82 = v197;
  unint64_t v83 = v196;
  uint64_t v84 = v201;
  unint64_t v85 = sub_1B3A535C8(v198, v197, v196, *(void *)v71, *(unsigned char *)(v71 + 8));
  uint64_t v26 = v84;
  if (v84)
  {
    uint64_t v52 = v68;
    goto LABEL_12;
  }
  unint64_t v86 = v85;
  unint64_t v87 = v81;
  uint64_t v88 = v216;
  unint64_t v89 = sub_1B3A535C8(v87, v82, v83, *(void *)v75, *(unsigned char *)(v75 + 8));
  uint64_t v90 = (uint64_t)v221;
  unint64_t v91 = v89;
  if (v86 >= v89)
  {
    type metadata accessor for TrimError(0);
    sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
    uint64_t v26 = (void *)swift_allocError();
    *long long v98 = 0xD000000000000028;
    v98[1] = 0x80000001B3A7C990;
    v98[2] = v86;
    v98[3] = v91;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_1B3A589C4(v68, type metadata accessor for TrimOptions);
    uint64_t v58 = v90;
    goto LABEL_13;
  }
  unint64_t v198 = v89;
  uint64_t v216 = v68 + *(int *)(v88 + 20);
  *(void *)&long long aBlock = sub_1B3A70140();
  *((void *)&aBlock + 1) = v92;
  sub_1B3A702E0();
  uint64_t v93 = sub_1B3A70800();
  v202(v27, v213);
  swift_bridgeObjectRelease();
  if (!v93)
  {
LABEL_98:
    __break(1u);
LABEL_99:
    sub_1B3A6FD60();
    __break(1u);
LABEL_100:
    sub_1B3A6FD60();
    __break(1u);
    JUMPOUT(0x1B3A56FA8);
  }
  uint64_t v94 = v194;
  long long v95 = ktrace_file_create(v194, (char *)(v93 + 32));
  swift_bridgeObjectRelease();
  uint64_t v96 = v193;
  if (!v95)
  {
    type metadata accessor for TrimError(0);
    sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
    uint64_t v26 = (void *)swift_allocError();
    uint64_t v100 = v99;
    uint64_t v101 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62F8) + 48);
    uint64_t v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(v100, v216, v96);
    *(_DWORD *)(v100 + v101) = MEMORY[0x1B3EBD410](v102);
    swift_storeEnumTagMultiPayload();
    goto LABEL_9;
  }
  uint64_t v97 = (uint64_t)v212;
  sub_1B3A55090(v94, (uint64_t)v212);
  uint64_t v103 = v210;
  uint64_t v104 = v211;
  int v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v210 + 48))(v97, 1, v211);
  unint64_t v214 = v86;
  uint64_t v217 = v95;
  if (v105 == 1)
  {
    uint64_t v201 = 0;
    sub_1B3A11580(v97, &qword_1E9CD6318);
    goto LABEL_26;
  }
  uint64_t v130 = v206;
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 32))(v206, v97, v104);
  uint64_t v131 = sub_1B3A6FFE0();
  uint64_t v133 = v132;
  (*(void (**)(char *, uint64_t))(v103 + 8))(v130, v104);
  sub_1B3A6FCD0();
  swift_allocObject();
  sub_1B3A6FCC0();
  (*(void (**)(char *, void, uint64_t))(v208 + 104))(v207, *MEMORY[0x1E4F26CE8], v209);
  sub_1B3A6FCA0();
  *(void *)&long long aBlock = v131;
  *((void *)&aBlock + 1) = v133;
  sub_1B3A58FE0();
  uint64_t v29 = sub_1B3A6FCB0();
  unint64_t v20 = v142;
  uint64_t v201 = 0;
  swift_bridgeObjectRelease();
  switch(v20 >> 62)
  {
    case 1uLL:
      if ((int)v29 > v29 >> 32) {
        goto LABEL_93;
      }
      sub_1B39B396C(v29, v20);
      uint64_t v145 = sub_1B3A6FD40();
      if (!v145) {
        goto LABEL_99;
      }
      uint64_t v146 = v145;
      uint64_t v147 = sub_1B3A6FD70();
      uint64_t v148 = (int)v29 - v147;
      if (__OFSUB__((int)v29, v147)) {
        goto LABEL_95;
      }
      sub_1B3A6FD60();
      if (__OFSUB__(HIDWORD(v29), v29)) {
        goto LABEL_97;
      }
      if (!ktrace_file_header_append_chunk((uint64_t)v217, 35842, 1, 0, (UInt8 *)(v146 + v148), HIDWORD(v29) - (int)v29))
      {
        int v188 = MEMORY[0x1B3EBD410]();
        sub_1B3A53178();
        uint64_t v189 = swift_allocError();
        *(void *)uint64_t v190 = 0xD000000000000017;
        *(void *)(v190 + 8) = 0x80000001B3A7C9C0;
        *(_DWORD *)(v190 + 16) = v188;
        *(unsigned char *)(v190 + 20) = 1;
        uint64_t v26 = (void *)v189;
        swift_willThrow();
        sub_1B39B0D88(v29, v20);
LABEL_83:
        swift_release();
        sub_1B39B0D88(v29, v20);
        goto LABEL_86;
      }
      sub_1B39B0D88(v29, v20);
LABEL_53:
      swift_release();
      sub_1B39B0D88(v29, v20);
LABEL_26:
      uint64_t v106 = swift_allocObject();
      uint64_t v213 = v106;
      *(void *)(v106 + 16) = 0;
      uint64_t v212 = (void **)(v106 + 16);
      uint64_t v107 = swift_allocObject();
      *(void *)(v107 + 16) = MEMORY[0x1E4FBC860];
      uint64_t v211 = v107 + 16;
      uint64_t v108 = swift_allocObject();
      *(unsigned char *)(v108 + 16) = 0;
      uint64_t v210 = v108 + 16;
      uint64_t v109 = (uint64_t)v205;
      uint64_t v110 = (uint64_t)rawValue;
      sub_1B3A58830((uint64_t)v205, (uint64_t)rawValue, type metadata accessor for TrimOptions);
      unint64_t v111 = (*(unsigned __int8 *)(v215 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80);
      unint64_t v112 = (v204 + v111 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v113 = (v112 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v114 = swift_allocObject();
      *(void *)(v114 + 16) = v198;
      *(void *)(v114 + 24) = v107;
      uint64_t v115 = v114 + v111;
      uint64_t v116 = v108;
      uint64_t v117 = v110;
      uint64_t v118 = v107;
      uint64_t v119 = v213;
      sub_1B3A58A8C(v117, v115);
      *(void *)(v114 + v112) = v108;
      uint64_t v120 = v217;
      *(void *)(v114 + v113) = v217;
      *(void *)(v114 + ((v113 + 15) & 0xFFFFFFFFFFFFFFF8)) = v119;
      unint64_t v230 = sub_1B3A58CB4;
      uint64_t v231 = v114;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v228 = sub_1B3A46734;
      uint64_t v229 = &block_descriptor_1;
      uint64_t v121 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      ktrace_file_iterate(v194, 0, (uint64_t)v121, v122, v123, v124, v125, v126);
      _Block_release(v121);
      unint64_t v127 = v212;
      swift_beginAccess();
      uint64_t v128 = *v127;
      if (v128)
      {
        id v129 = v128;
        swift_willThrow();
        swift_release();
        swift_release();
        swift_release();
        ktrace_file_close(v120);
        sub_1B3A589C4(v109, type metadata accessor for TrimOptions);
        sub_1B3A11580((uint64_t)v221, &qword_1E9CD6328);
        uint64_t v26 = v128;
        goto LABEL_14;
      }
      uint64_t v212 = (void **)v118;
      uint64_t v215 = v116;
      uint64_t v134 = (unsigned char *)v210;
      swift_beginAccess();
      if ((*v134 & 1) == 0)
      {
        unint64_t v225 = v198;
        ktrace_file_append_chunk((uint64_t)v120, 32775, 0, 1, (UInt8 *)&v225, 8);
      }
      uint64_t v135 = (void **)v211;
      swift_beginAccess();
      rawValue = (unint64_t *)*v135;
      unint64_t v136 = rawValue[2];
      unint64_t v137 = 0;
      if (v136 < 2 || rawValue[6] >= v214) {
        goto LABEL_59;
      }
      long long v138 = rawValue + 11;
      uint64_t v139 = 1;
      while (1)
      {
        unint64_t v140 = *v138;
        v138 += 5;
        if (v140 >= v214) {
          break;
        }
        uint64_t v141 = v139 + 1;
        if (__OFADD__(v139, 1)) {
          goto LABEL_89;
        }
        ++v139;
        if (v141 == v136) {
          goto LABEL_58;
        }
      }
      if (!v139) {
        goto LABEL_58;
      }
      unint64_t v137 = v139 - 1;
      if ((uint64_t)v136 < v139 - 1) {
        goto LABEL_92;
      }
      if (v139 < 1)
      {
        __break(1u);
LABEL_58:
        unint64_t v137 = 0;
      }
LABEL_59:
      if (v137 == v136)
      {
LABEL_76:
        uint64_t v179 = (uint64_t)v219;
        (*(void (**)(void *, uint64_t))(*(void *)(v193 - 8) + 16))(v219, v216);
        swift_storeEnumTagMultiPayload();
        v200((void *)v179);
        sub_1B3A589C4(v179, type metadata accessor for TrimNote);
        swift_release();
        swift_release();
        swift_release();
        ktrace_file_close(v217);
        sub_1B3A589C4((uint64_t)v205, type metadata accessor for TrimOptions);
        uint64_t v30 = (uint64_t)v221;
        goto LABEL_4;
      }
      swift_bridgeObjectRetain();
      uint64_t v157 = 5 * v137;
      unint64_t v158 = v136;
      while (1)
      {
        if (v137 >= v158) {
          goto LABEL_88;
        }
        uint64_t v159 = (void *)rawValue[v157 + 4];
        int v160 = LOBYTE(rawValue[v157 + 5]);
        unint64_t v162 = rawValue[v157 + 6];
        unint64_t v161 = rawValue[v157 + 7];
        char v163 = rawValue[v157 + 8];
        if (LOBYTE(rawValue[v157 + 5])) {
          break;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6338);
        uint64_t v170 = swift_allocObject();
        *(void *)(v170 + 16) = v159;
        *(unsigned char *)(v170 + 24) = 0;
        *(void *)(v170 + 32) = v162;
        *(void *)(v170 + 40) = v161;
        *(unsigned char *)(v170 + 48) = v163;
        *(void *)(v170 + 56) = 8;
        uint64_t v172 = ktrace_chunk_size_t(v159, v171);
        int64_t v173 = v172 - 8;
        if (__OFSUB__(v172, 8)) {
          goto LABEL_91;
        }
        uint64_t v174 = ktrace_chunk_map_data(v159, 8uLL, v173);
        if (!v174)
        {
LABEL_77:
          swift_deallocPartialClassInstance();
          type metadata accessor for TrimError(0);
          sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
          uint64_t v26 = (void *)swift_allocError();
          uint64_t v181 = v180;
          _DWORD *v180 = ktrace_chunk_tag((uint64_t)v159);
          v181[1] = 0;
          goto LABEL_85;
        }
        *(void *)(v170 + 64) = v174;
        *(void *)(v170 + 72) = v173 / 32;
        uint64_t v169 = v201;
        sub_1B3A5278C((uint64_t)v217, v214, v198, (uint64_t)sub_1B3A5708C, 0);
LABEL_73:
        uint64_t v201 = v169;
        if (v169)
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          ktrace_file_close(v217);
          sub_1B3A589C4((uint64_t)v205, type metadata accessor for TrimOptions);
          sub_1B3A11580((uint64_t)v221, &qword_1E9CD6328);
          uint64_t v26 = v201;
          goto LABEL_14;
        }
        unint64_t v158 = v136;
        ++v137;
        swift_release();
        v157 += 5;
        if (v136 == v137)
        {
          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
      }
      if (v160 == 4)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6330);
        uint64_t v175 = swift_allocObject();
        *(void *)(v175 + 16) = v159;
        *(unsigned char *)(v175 + 24) = 4;
        *(void *)(v175 + 32) = v162;
        *(void *)(v175 + 40) = v161;
        *(unsigned char *)(v175 + 48) = v163;
        *(void *)(v175 + 56) = 0;
        int64_t v177 = ktrace_chunk_size_t(v159, v176);
        uint64_t v178 = ktrace_chunk_map_data(v159, 0, v177);
        if (!v178) {
          goto LABEL_77;
        }
        *(void *)(v175 + 64) = v178;
        *(void *)(v175 + 72) = v177 / 48;
        uint64_t v169 = v201;
        sub_1B3A52A90((uint64_t)v217, v214, v198, (uint64_t)sub_1B3A5708C, 0);
        goto LABEL_73;
      }
      if (v160 == 1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6340);
        uint64_t v164 = swift_allocObject();
        *(void *)(v164 + 16) = v159;
        *(unsigned char *)(v164 + 24) = 1;
        *(void *)(v164 + 32) = v162;
        *(void *)(v164 + 40) = v161;
        *(unsigned char *)(v164 + 48) = v163;
        *(void *)(v164 + 56) = 8;
        uint64_t v166 = ktrace_chunk_size_t(v159, v165);
        int64_t v167 = v166 - 8;
        if (__OFSUB__(v166, 8)) {
          goto LABEL_90;
        }
        uint64_t v168 = ktrace_chunk_map_data(v159, 8uLL, v167);
        if (!v168) {
          goto LABEL_77;
        }
        *(void *)(v164 + 64) = v168;
        *(void *)(v164 + 72) = v167 / 64;
        uint64_t v169 = v201;
        sub_1B3A52488((uint64_t)v217, v214, v198, (uint64_t)sub_1B3A57084, 0);
        goto LABEL_73;
      }
      type metadata accessor for TrimError(0);
      sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
      uint64_t v26 = (void *)swift_allocError();
      unsigned char *v191 = v160;
LABEL_85:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_86:
      ktrace_file_close(v217);
LABEL_10:
      uint64_t v52 = (uint64_t)v205;
LABEL_12:
      sub_1B3A589C4(v52, type metadata accessor for TrimOptions);
      uint64_t v58 = (uint64_t)v221;
LABEL_13:
      sub_1B3A11580(v58, &qword_1E9CD6328);
LABEL_14:
      uint64_t v59 = (void (*)(uint64_t))*((void *)&v223 + 1);
      uint64_t v60 = (uint64_t)v219;
      *uint64_t v219 = v26;
      swift_storeEnumTagMultiPayload();
      id v61 = v26;
      v59(v60);
      sub_1B3A589C4(v60, type metadata accessor for TrimNote);
      swift_willThrow();
      return;
    case 2uLL:
      uint64_t v149 = *(void *)(v29 + 16);
      swift_retain();
      swift_retain();
      uint64_t v150 = sub_1B3A6FD40();
      if (!v150) {
        goto LABEL_100;
      }
      uint64_t v151 = v150;
      uint64_t v152 = sub_1B3A6FD70();
      BOOL v153 = __OFSUB__(v149, v152);
      unint64_t v27 = v149 - v152;
      if (v153) {
        goto LABEL_94;
      }
      sub_1B3A6FD60();
      uint64_t v155 = *(void *)(v29 + 16);
      uint64_t v154 = *(void *)(v29 + 24);
      if (__OFSUB__(v154, v155)) {
        goto LABEL_96;
      }
      uint64_t v156 = (UInt8 *)(v151 + v27);
      LOBYTE(v27) = 1;
      if (!ktrace_file_header_append_chunk((uint64_t)v217, 35842, 1, 0, v156, v154 - v155)) {
        goto LABEL_81;
      }
      swift_release();
      swift_release();
      goto LABEL_53;
    case 3uLL:
      *(void *)((char *)&aBlock + 6) = 0;
      *(void *)&long long aBlock = 0;
      long long v144 = v217;
      CFIndex v143 = 0;
      goto LABEL_52;
    default:
      *(void *)&long long aBlock = v29;
      WORD4(aBlock) = v20;
      BYTE10(aBlock) = BYTE2(v20);
      BYTE11(aBlock) = BYTE3(v20);
      BYTE12(aBlock) = BYTE4(v20);
      CFIndex v143 = BYTE6(v20);
      BYTE13(aBlock) = BYTE5(v20);
      long long v144 = v217;
LABEL_52:
      if (ktrace_file_header_append_chunk((uint64_t)v144, 35842, 1, 0, (UInt8 *)&aBlock, v143)) {
        goto LABEL_53;
      }
      int v182 = MEMORY[0x1B3EBD410]();
      sub_1B3A53178();
      uint64_t v183 = swift_allocError();
      *(void *)uint64_t v184 = 0xD000000000000017;
      *(void *)(v184 + 8) = 0x80000001B3A7C9C0;
      *(_DWORD *)(v184 + 16) = v182;
      *(unsigned char *)(v184 + 20) = 1;
      uint64_t v26 = (void *)v183;
      swift_willThrow();
      goto LABEL_83;
  }
}

uint64_t sub_1B3A56FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TrimNote(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void (**)(void *))(a3 + 24);
  void *v8 = a1;
  v8[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  v9(v8);
  return sub_1B3A589C4((uint64_t)v8, type metadata accessor for TrimNote);
}

uint64_t sub_1B3A57084(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_1B3A5708C(void *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFLL;
}

char *sub_1B3A57098(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6378);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  char v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unsigned __int8 *sub_1B3A571A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1B3A5BA88();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1B3A70490();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1B3A3ECD4();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)sub_1B3A70A20();
  }
LABEL_7:
  uint64_t v13 = sub_1B3A57294(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1B3A57294(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }
      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }
      if (result)
      {
        unint64_t v29 = 0;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          if (!is_mul_ok(v29, a3)) {
            return 0;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }
  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }
      else
      {
        char v23 = -55;
      }
    }
    else
    {
      char v23 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0;
    }
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1B3A57510(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unsigned int v11 = (void *)sub_1B3A70A20();
  }
  uint64_t result = sub_1B3A57B88((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_1B3A575E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t *)a1;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unint64_t result = ktrace_chunk_tag(a1);
  int v5 = result;
  if (result != 20982 && result != 7936)
  {
    if (result == 7680)
    {
      unsigned int is_64_bit = ktrace_chunk_is_64_bit((uint64_t)v2);
      size_t v7 = is_64_bit ? 64 : 32;
      unint64_t result = ktrace_chunk_size((uint64_t)v2);
      if (result >= (v7 | 8))
      {
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        int v8 = ktrace_chunk_copy_data(v2, 8, &v38, v7);
        if (v8)
        {
          int v10 = v8;
          sub_1B3A53178();
          swift_allocError();
          unint64_t v12 = 0xD000000000000017;
          char v13 = "copying first raw event";
LABEL_30:
          *(void *)uint64_t v11 = v12;
          *(void *)(v11 + 8) = (unint64_t)(v13 - 32) | 0x8000000000000000;
          *(_DWORD *)(v11 + 16) = v10;
LABEL_41:
          *(unsigned char *)(v11 + 20) = 1;
          return swift_willThrow();
        }
        uint64_t v21 = is_64_bit;
        if (is_64_bit) {
          uint64_t v22 = v38;
        }
        else {
          uint64_t v22 = v38 & 0xFFFFFFFFFFFFFFLL;
        }
        uint64_t v30 = ktrace_chunk_size_t(v2, v9);
        if (!__OFSUB__(v30, v7))
        {
          unint64_t result = ktrace_chunk_copy_data(v2, v30 - v7, &v38, v7);
          if (result)
          {
            int v16 = result;
            sub_1B3A53178();
            swift_allocError();
            unint64_t v17 = 0xD000000000000016;
            unsigned __int8 v18 = "copying last raw event";
            goto LABEL_40;
          }
          char v24 = 0;
          uint64_t v23 = v38;
          if (!v21) {
            uint64_t v23 = v38 & 0xFFFFFFFFFFFFFFLL;
          }
LABEL_23:
          *(void *)a2 = v2;
          *(void *)(a2 + 8) = v21;
          *(void *)(a2 + 16) = v22;
          *(void *)(a2 + 24) = v23;
          *(unsigned char *)(a2 + 32) = v24;
          return result;
        }
        goto LABEL_55;
      }
    }
LABEL_22:
    uint64_t v2 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    char v24 = 0;
    uint64_t v21 = 5;
    goto LABEL_23;
  }
  unint64_t result = ktrace_chunk_is_64_bit((uint64_t)v2);
  if (v5 != 7936)
  {
    if (v5 == 20982)
    {
      unint64_t result = ktrace_chunk_size((uint64_t)v2);
      if (result >= 0x30)
      {
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        int v14 = ktrace_chunk_copy_data(v2, 0, &v38, 0x30uLL);
        if (v14)
        {
          int v16 = v14;
          sub_1B3A53178();
          swift_allocError();
          unint64_t v17 = 0xD00000000000001BLL;
          unsigned __int8 v18 = "copying first artrace event";
LABEL_40:
          *(void *)uint64_t v11 = v17;
          *(void *)(v11 + 8) = (unint64_t)(v18 - 32) | 0x8000000000000000;
          *(_DWORD *)(v11 + 16) = v16;
          goto LABEL_41;
        }
        uint64_t v31 = v38;
        memset(v37, 0, sizeof(v37));
        uint64_t v32 = ktrace_chunk_size_t(v2, v15);
        if (!__OFSUB__(v32, 48))
        {
          unint64_t result = ktrace_chunk_copy_data(v2, v32 - 48, v37, 0x30uLL);
          if (result)
          {
            int v16 = result;
            sub_1B3A53178();
            swift_allocError();
            unint64_t v17 = 0xD00000000000001ALL;
            unsigned __int8 v18 = "copying last artrace event";
            goto LABEL_40;
          }
          char v24 = 0;
          uint64_t v22 = v31 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v23 = *(void *)&v37[0] & 0xFFFFFFFFFFFFFFLL;
          uint64_t v21 = 4;
          goto LABEL_23;
        }
        goto LABEL_56;
      }
    }
    goto LABEL_22;
  }
  int v19 = result;
  if (result) {
    unint64_t v20 = 64;
  }
  else {
    unint64_t v20 = 32;
  }
  if (result) {
    uint64_t v21 = 3;
  }
  else {
    uint64_t v21 = 2;
  }
  unint64_t result = ktrace_chunk_size((uint64_t)v2);
  if (result < 0xC) {
    goto LABEL_22;
  }
  unsigned __int8 v25 = (void *)swift_slowAlloc();
  uint64_t v27 = ktrace_chunk_size_t(v2, v26);
  if (__OFSUB__(v27, 12))
  {
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v27 - 12 >= 64) {
    size_t v28 = 64;
  }
  else {
    size_t v28 = v27 - 12;
  }
  *(void *)&v37[0] = v28;
  int v29 = ktrace_chunk_copy_data(v2, 12, v25, v28);
  if (v29)
  {
    int v10 = v29;
    sub_1B3A53178();
    swift_allocError();
    unint64_t v12 = 0xD00000000000001ELL;
    char v13 = "copying first compressed event";
    goto LABEL_30;
  }
  bzero(&v38, 0x388uLL);
  ktrace_compressor_reset(&v38);
  type metadata accessor for ktrace_point(0);
  uint64_t v33 = sub_1B3A70590();
  *(void *)(v33 + 16) = 1;
  *(_OWORD *)(v33 + 64) = 0u;
  *(_OWORD *)(v33 + 80) = 0u;
  *(_OWORD *)(v33 + 48) = 0u;
  *(_OWORD *)(v33 + 32) = 0u;
  if (decompress_64((int *)&v38, (uint64_t)v25, (unint64_t *)v37, v33 + 32, v20) == v20)
  {
    uint64_t v34 = *(void *)(v33 + 16);
    if (v19)
    {
      if (!v34)
      {
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
      }
      uint64_t v22 = *(void *)(v33 + 32);
      unint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      if (!v34) {
        goto LABEL_58;
      }
      uint64_t v36 = *(void *)(v33 + 32);
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v22 = v36 & 0xFFFFFFFFFFFFFFLL;
    }
    uint64_t v23 = 0;
    char v24 = 1;
    goto LABEL_23;
  }
  sub_1B3A53178();
  swift_allocError();
  *(void *)uint64_t v35 = 0xD000000000000022;
  *(void *)(v35 + 8) = 0x80000001B3A7CAC0;
  *(_DWORD *)(v35 + 16) = 0;
  *(unsigned char *)(v35 + 20) = 0;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A57ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B3A57B34()
{
  unint64_t result = qword_1E9CD62E0;
  if (!qword_1E9CD62E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD62E0);
  }
  return result;
}

uint64_t sub_1B3A57B88(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_1B3A3F1C0(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_96;
  }
  unint64_t result = sub_1B3A70400();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_1B3A3F1C0(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_1B3A3F1C0(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_92;
  }
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  unint64_t result = sub_1B3A70400();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  int v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    int v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 48;
        unsigned __int8 v34 = a6 + 55;
        unsigned __int8 v35 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v33 = 58;
        }
        else
        {
          unsigned __int8 v35 = 97;
          unsigned __int8 v34 = 65;
        }
        if (v19)
        {
          unint64_t v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0;
                if (v38 < 0x61 || v38 >= v35) {
                  return v29;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            if (!is_mul_ok(v24, a6)) {
              return 0;
            }
            unint64_t v40 = v24 * a6;
            unsigned __int8 v41 = v38 + v39;
            BOOL v32 = __CFADD__(v40, v41);
            unint64_t v24 = v40 + v41;
            if (v32) {
              return 0;
            }
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 48;
      unsigned __int8 v43 = a6 + 55;
      unsigned __int8 v44 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v42 = 58;
      }
      else
      {
        unsigned __int8 v44 = 97;
        unsigned __int8 v43 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0;
              if (v45 < 0x61 || v45 >= v44) {
                return v29;
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v47 = v24 * a6;
          unsigned __int8 v48 = v45 + v46;
          BOOL v32 = __CFADD__(v47, v48);
          unint64_t v24 = v47 + v48;
          if (v32) {
            return 0;
          }
          ++v19;
          if (!--result) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v30 = v24 * a6;
          unsigned __int8 v31 = v27 + v28;
          BOOL v32 = v30 >= v31;
          unint64_t v24 = v30 - v31;
          if (!v32) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1B3A57FA8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (sub_1B3A70440())
  {
    unint64_t v6 = sub_1B3A16D5C(1uLL, a1, a2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x1B3EBD660](v6, v8, v10, v12);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    char v16 = sub_1B39B5AA4();
    unint64_t v17 = sub_1B3A3CCA8(v13, v15, v16 & 1);
    if (!v2) {
      uint64_t v3 = (unsigned __int8 *)v17;
    }
    goto LABEL_7;
  }
  if (sub_1B3A70440())
  {
    unint64_t v18 = sub_1B3A16D5C(1uLL, a1, a2);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1B3EBD660](v18, v20, v22, v24);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    char v28 = sub_1B39B5AA4();
    unint64_t v29 = sub_1B3A3CCA8(v25, v27, v28 & 1);
    if (!v2) {
      uint64_t v3 = (unsigned __int8 *)v29;
    }
    goto LABEL_7;
  }
  if ((sub_1B3A70440() & 1) == 0)
  {
    type metadata accessor for TrimError(0);
    sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
    swift_allocError();
    unsigned __int8 v41 = v40;
    uint64_t v47 = 0;
    unint64_t v48 = 0xE000000000000000;
    sub_1B3A709B0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    uint64_t v3 = (unsigned __int8 *)&v47;
LABEL_18:
    sub_1B3A703A0();
    unint64_t v45 = v48;
    *unsigned __int8 v41 = v47;
    v41[1] = v45;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return v3;
  }
  swift_bridgeObjectRetain();
  unint64_t v30 = sub_1B3A16D5C(1uLL, a1, a2);
  unint64_t v32 = v31;
  unint64_t v34 = v33;
  unint64_t v36 = v35;
  swift_bridgeObjectRelease();
  if (!((v30 ^ v32) >> 14))
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v37 = sub_1B3A57510(v30, v32, v34, v36, 10);
  if ((v38 & 0x100) != 0)
  {
    uint64_t v3 = sub_1B3A571A0(v30, v32, v34, v36, 10);
    char v43 = v42;
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_17:
    type metadata accessor for TrimError(0);
    sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
    swift_allocError();
    unsigned __int8 v41 = v44;
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    uint64_t v47 = a1;
    unint64_t v48 = a2;
    uint64_t v3 = (unsigned __int8 *)&v47;
    goto LABEL_18;
  }
  uint64_t v3 = (unsigned __int8 *)v37;
  char v39 = v38;
  swift_bridgeObjectRelease();
  if (v39) {
    goto LABEL_17;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t type metadata accessor for TrimError(uint64_t a1)
{
  return sub_1B3A5890C(a1, (uint64_t *)&unk_1E9CDC5D0);
}

BOOL sub_1B3A58394(uint64_t a1, char a2, uint64_t a3, char a4)
{
  switch(a2)
  {
    case 1:
      if (a4 == 1) {
        return a1 == a3;
      }
      return 0;
    case 2:
      if (a4 == 2) {
        return a1 == a3;
      }
      return 0;
    case 3:
      if (!a1) {
        return a4 == 3 && !a3;
      }
      return a4 == 3 && a3 == 1;
    default:
      if (a4) {
        return 0;
      }
      return a1 == a3;
  }
}

uint64_t sub_1B3A58430(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TrimOptions(uint64_t a1)
{
  return sub_1B3A5890C(a1, qword_1E9CDC5F0);
}

uint64_t sub_1B3A58498()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A584D0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1B3A584F8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A58508(uint64_t a1, unint64_t a2)
{
  return sub_1B3A58520(a1, a2);
}

uint64_t sub_1B3A58520(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t result = (uint64_t)sub_1B3A57FA8(a1, a2);
  if (!v3)
  {
    uint64_t v8 = result;
    char v9 = v7;
    uint64_t result = swift_beginAccess();
    *(void *)(v2 + 16) = v8;
    *(unsigned char *)(v2 + 24) = v9;
  }
  return result;
}

uint64_t sub_1B3A58598()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A585D0(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRetain();
}

void *sub_1B3A58634(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRetain();
  sub_1B3A13628(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B3A13628(v3);
  sub_1B3A13628(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1B3A58704(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRelease();
  sub_1B3A13638(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B3A13638(v3);
  sub_1B3A13638(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1B3A587D4()
{
  unint64_t result = qword_1E9CD6310;
  if (!qword_1E9CD6310)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9CD6308);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6310);
  }
  return result;
}

uint64_t sub_1B3A58830(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1B3A58898()
{
  unint64_t result = qword_1E9CDBFC0[0];
  if (!qword_1E9CDBFC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDBFC0);
  }
  return result;
}

uint64_t type metadata accessor for TrimNote(uint64_t a1)
{
  return sub_1B3A5890C(a1, (uint64_t *)&unk_1E9CDC5E0);
}

uint64_t sub_1B3A5890C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B3A58944()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1B3A58984(uint64_t a1, uint64_t a2)
{
  return sub_1B3A56FB8(a1, a2, v2 + 16);
}

uint64_t sub_1B3A5898C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A589C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B3A58A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A58A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrimOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A58AF0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B3A58B28()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B3A58B60()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B3A58B70()
{
  uint64_t v1 = (int *)(type metadata accessor for TrimOptions(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_1B3A70190();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, v5, v4);
}

uint64_t sub_1B3A58CB4(void *a1)
{
  uint64_t v3 = type metadata accessor for TrimOptions(0);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  unint64_t v5 = (*(void *)(*(void *)(v3 - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 24);
  unint64_t v31 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  sub_1B3A575E4((uint64_t)a1, (uint64_t)v32);
  sub_1B3A57ACC((uint64_t)v32, (uint64_t)&v33);
  if (BYTE8(v33) == 5)
  {
    int v13 = ktrace_chunk_tag((uint64_t)a1);
    unint64_t v14 = v1 + v4 + *(int *)(v3 + 28);
    if (*(unsigned __int8 *)(v14 + 8) >= 3u)
    {
      if (*(void *)v14) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v13 == 32775;
      }
      if (v25) {
        goto LABEL_6;
      }
    }
    else if (v13 == 32775)
    {
LABEL_6:
      unint64_t v15 = (unsigned char *)(v8 + 16);
      uint64_t v16 = 1;
      swift_beginAccess();
      unsigned char *v15 = 1;
      return v16;
    }
    if (!ktrace_file_append(v9, a1))
    {
      type metadata accessor for TrimError(0);
      sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
      uint64_t v26 = swift_allocError();
      char v28 = v27;
      int v29 = ktrace_chunk_tag((uint64_t)a1);
      int v30 = MEMORY[0x1B3EBD410]();
      *char v28 = v29;
      v28[1] = v30;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_beginAccess();
      uint64_t v11 = *(void **)(v10 + 16);
      *(void *)(v10 + 16) = v26;

      return 0;
    }
    return 1;
  }
  long long v39 = v33;
  unint64_t v17 = v34;
  uint64_t v37 = v35;
  char v38 = v36;
  if (v34 > v31) {
    return 1;
  }
  unint64_t v18 = (char **)(v7 + 16);
  swift_beginAccess();
  uint64_t v19 = *(char **)(v7 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v7 + 16) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = sub_1B3A57098(0, *((void *)v19 + 2) + 1, 1, v19);
    const char *v18 = v19;
  }
  unint64_t v22 = *((void *)v19 + 2);
  unint64_t v21 = *((void *)v19 + 3);
  if (v22 >= v21 >> 1)
  {
    uint64_t v19 = sub_1B3A57098((char *)(v21 > 1), v22 + 1, 1, v19);
    const char *v18 = v19;
  }
  *((void *)v19 + 2) = v22 + 1;
  uint64_t v23 = &v19[40 * v22];
  *((_OWORD *)v23 + 2) = v39;
  *((void *)v23 + 6) = v17;
  uint64_t v24 = v37;
  v23[64] = v38;
  *((void *)v23 + 7) = v24;
  return 1;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t sub_1B3A58FE0()
{
  unint64_t result = qword_1E9CD6348;
  if (!qword_1E9CD6348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6348);
  }
  return result;
}

unint64_t sub_1B3A5903C()
{
  unint64_t result = qword_1E9CD6350;
  if (!qword_1E9CD6350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6350);
  }
  return result;
}

uint64_t sub_1B3A59094()
{
  return sub_1B3A58430(&qword_1E9CD62E8, (void (*)(uint64_t))type metadata accessor for TrimError);
}

uint64_t sub_1B3A590E0()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for EventChunk(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EventChunk(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventChunk()
{
  return &type metadata for EventChunk;
}

uint64_t sub_1B3A591DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for EventChunk.Err()
{
  return sub_1B3A591F8();
}

uint64_t sub_1B3A591F8()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s6ktrace10EventChunkV3ErrOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int v5 = *((_DWORD *)a2 + 4);
  char v6 = *((unsigned char *)a2 + 20);
  sub_1B3A591DC();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 20) = v6;
  return a1;
}

uint64_t assignWithCopy for EventChunk.Err(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int v5 = *((_DWORD *)a2 + 4);
  char v6 = *((unsigned char *)a2 + 20);
  sub_1B3A591DC();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 20) = v6;
  sub_1B3A591F8();
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EventChunk.Err(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 20);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 20) = v4;
  sub_1B3A591F8();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventChunk.Err(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventChunk.Err(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B3A593C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t sub_1B3A593D0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 20) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EventChunk.Err()
{
  return &type metadata for EventChunk.Err;
}

uint64_t getEnumTagSinglePayload for EventChunk.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EventChunk.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A59548);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventChunk.Kind()
{
  return &type metadata for EventChunk.Kind;
}

uint64_t sub_1B3A59584(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s3ErrOwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t _s3ErrOwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t _s3ErrOwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s3ErrOwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s3ErrOMa()
{
  return &_s3ErrON;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TrimLocation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrimLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B3A597A0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1B3A597B8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TrimLocation()
{
  return &type metadata for TrimLocation;
}

void *sub_1B3A597E0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        uint64_t v7 = sub_1B3A70190();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62F8);
        *(_DWORD *)((char *)a1 + *(int *)(v8 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v8 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
      case 5u:
        uint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v13 = sub_1B3A70190();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1B3A59A5C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
    case 8:
      uint64_t v3 = sub_1B3A70190();
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 4:
    case 5:
    case 6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1B3A59B40(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 3u:
      uint64_t v6 = sub_1B3A70190();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62F8);
      *(_DWORD *)((char *)a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
      goto LABEL_7;
    case 4u:
    case 5u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 6u:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 8u:
      uint64_t v10 = sub_1B3A70190();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1B3A59D64(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1B3A589C4((uint64_t)a1, type metadata accessor for TrimError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        uint64_t v6 = sub_1B3A70190();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62F8);
        *(_DWORD *)((char *)a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
        goto LABEL_8;
      case 4u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 8u:
        uint64_t v8 = sub_1B3A70190();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_1B3A59FCC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 8)
  {
    uint64_t v9 = sub_1B3A70190();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload != 3 && EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = sub_1B3A70190();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62F8);
    *(_DWORD *)&a1[*(int *)(v8 + 48)] = *(_DWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_1B3A5A160(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1B3A589C4((uint64_t)a1, type metadata accessor for TrimError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      uint64_t v9 = sub_1B3A70190();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload != 3 && EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_1B3A70190();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD62F8);
      *(_DWORD *)&a1[*(int *)(v8 + 48)] = *(_DWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1B3A5A320()
{
  uint64_t result = sub_1B3A70190();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    int v5 = &v4;
    uint64_t v6 = "\b";
    uint64_t v7 = "\b";
    swift_getTupleTypeLayout2();
    uint64_t v8 = &v3;
    uint64_t v9 = &unk_1B3A76738;
    uint64_t v10 = &unk_1B3A76738;
    uint64_t v11 = &unk_1B3A76750;
    uint64_t v12 = &unk_1B3A76768;
    uint64_t v13 = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for TrimNote(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = *a2;
        uint64_t v11 = v10;
        *(void *)a1 = v10;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v12 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v12;
        uint64_t v13 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v13;
        unint64_t v14 = a2[4];
        unint64_t v15 = a2[5];
        *((void *)a1 + 4) = v14;
        *((void *)a1 + 5) = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v16 = sub_1B3A70190();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for TrimNote(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      goto LABEL_6;
    case 1u:
      uint64_t v2 = *a1;

      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v3 = sub_1B3A70190();
      char v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

void *initializeWithCopy for TrimNote(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 1u:
      uint64_t v7 = (void *)*a2;
      id v8 = v7;
      *a1 = v7;
      goto LABEL_7;
    case 2u:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      uint64_t v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      uint64_t v11 = a2[4];
      uint64_t v12 = a2[5];
      a1[4] = v11;
      a1[5] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      uint64_t v13 = sub_1B3A70190();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for TrimNote(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1B3A589C4((uint64_t)a1, type metadata accessor for TrimNote);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 1u:
        uint64_t v6 = (void *)*a2;
        id v7 = v6;
        *a1 = v6;
        goto LABEL_8;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        uint64_t v8 = sub_1B3A70190();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for TrimNote(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = sub_1B3A70190();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TrimNote(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1B3A589C4((uint64_t)a1, type metadata accessor for TrimNote);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = sub_1B3A70190();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1B3A5AB70()
{
  uint64_t result = sub_1B3A70190();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1B3A5AC18(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1B3A70190();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    unsigned char v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    unint64_t v14 = (char *)a2 + v10;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_1B3A5AD40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B3A70190();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return v7(v5, v4);
}

uint64_t sub_1B3A5ADE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B3A70190();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1B3A5AEB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B3A70190();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *v10;
  *(unsigned char *)(v9 + 8) = *((unsigned char *)v10 + 8);
  *(void *)uint64_t v9 = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  LOBYTE(v11) = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v11;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1B3A5AF94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B3A70190();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1B3A5B06C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B3A70190();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1B3A5B144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B3A5B158);
}

uint64_t sub_1B3A5B158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1B3A70190();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1B3A5B228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B3A5B23C);
}

uint64_t sub_1B3A5B23C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1B3A70190();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 32)) = a2 + 1;
  }
  return result;
}

uint64_t sub_1B3A5B2F8()
{
  uint64_t result = sub_1B3A70190();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TraceFileProvenance()
{
  return &type metadata for TraceFileProvenance;
}

uint64_t destroy for Trimming()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for Trimming(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Trimming(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Trimming(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Trimming()
{
  return &type metadata for Trimming;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t sub_1B3A5B524(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_1B3A5B568(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for ktrace_chunk(uint64_t a1)
{
}

void type metadata accessor for ktrace_point_64(uint64_t a1)
{
}

uint64_t sub_1B3A5B5EC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B3A5B60C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ktrace_point_32(uint64_t a1)
{
}

__n128 __swift_memcpy48_1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for artrace_ktrace_file_tracepoint64(uint64_t a1)
{
}

unsigned char *storeEnumTagSinglePayload for TraceFileProvenance.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B3A5B710);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TraceFileProvenance.CodingKeys()
{
  return &type metadata for TraceFileProvenance.CodingKeys;
}

unint64_t sub_1B3A5B74C()
{
  unint64_t result = qword_1E9CDC700[0];
  if (!qword_1E9CDC700[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDC700);
  }
  return result;
}

unint64_t sub_1B3A5B7A4()
{
  unint64_t result = qword_1E9CDC810;
  if (!qword_1E9CDC810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CDC810);
  }
  return result;
}

unint64_t sub_1B3A5B7FC()
{
  unint64_t result = qword_1E9CDC818[0];
  if (!qword_1E9CDC818[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CDC818);
  }
  return result;
}

BOOL sub_1B3A5B850(uint64_t a1)
{
  long long v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = v4;
  return v2(v7) > v3;
}

BOOL sub_1B3A5B8B4(uint64_t a1)
{
  long long v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = v4;
  return v2(v7) > v3;
}

BOOL sub_1B3A5B918(uint64_t *a1)
{
  long long v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = *a1;
  long long v6 = *(_OWORD *)(a1 + 1);
  uint64_t v7 = a1[3];
  return v2(&v5) > v3;
}

BOOL sub_1B3A5B974(uint64_t *a1)
{
  long long v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 40);
  uint64_t v5 = *a1;
  long long v6 = *(_OWORD *)(a1 + 1);
  uint64_t v7 = a1[3];
  return v2(&v5) > v3;
}

BOOL sub_1B3A5B9D0(uint64_t a1)
{
  long long v2 = *(uint64_t (**)(void *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 32);
  v6[0] = *(void *)a1;
  v6[1] = *(void *)(a1 + 8);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = v4;
  return v2(v6) > v3;
}

BOOL sub_1B3A5BA2C(uint64_t a1)
{
  long long v2 = *(uint64_t (**)(void *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 40);
  v6[0] = *(void *)a1;
  v6[1] = *(void *)(a1 + 8);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = v4;
  return v2(v6) > v3;
}

unint64_t sub_1B3A5BA88()
{
  unint64_t result = qword_1E9CD6380;
  if (!qword_1E9CD6380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6380);
  }
  return result;
}

void type metadata accessor for ktrace_point(uint64_t a1)
{
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1B3A5BB20(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B3A5BB40(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for ktrace_chunk.__Unnamed_union___Anonymous_field9(uint64_t a1)
{
}

uint64_t sub_1B3A5BB90(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B3A5BBB0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

void type metadata accessor for ktrace_chunk_array(uint64_t a1)
{
}

void type metadata accessor for ktrace_chunk.__Unnamed_union___Anonymous_field2(uint64_t a1)
{
}

unint64_t AmendmentError.errorDescription.getter()
{
  long long v2 = *(void **)v0;
  uint64_t v1 = *(void **)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
    case 4:
      sub_1B3A709B0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v6 = (unint64_t)v2;
      goto LABEL_7;
    case 2:
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v3 = 0xD000000000000010;
      goto LABEL_4;
    case 3:
      id v4 = v2;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD00000000000001BLL;
      swift_getErrorValue();
      sub_1B3A70D80();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A5BE30(v2, v1, 3);
      return v6;
    default:
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      unint64_t v3 = 0xD000000000000013;
LABEL_4:
      unint64_t v6 = v3;
LABEL_7:
      sub_1B3A703A0();
      return v6;
  }
}

void sub_1B3A5BE30(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      swift_bridgeObjectRelease();
      break;
    case 3:

      break;
    default:
      return;
  }
}

uint64_t Amending.toolName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Amending.interactive.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Amending.notify.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t Amending.init(toolName:interactive:notify:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  *(void *)(a6 + 40) = 0;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Amending.amend(arguments:)(Swift::OpaquePointer arguments)
{
  rawValue = (void (*)(void))arguments._rawValue;
  uint64_t v3 = sub_1B3A701B0();
  uint64_t v129 = *(void *)(v3 - 8);
  uint64_t v130 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v128 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_1B3A70680();
  Class isa = v135[-1].isa;
  MEMORY[0x1F4188790](v135);
  uint64_t v134 = ((char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v131 = sub_1B3A70660();
  MEMORY[0x1F4188790](v131);
  uint64_t v132 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1B3A701D0();
  uint64_t v126 = *(void *)(v7 - 8);
  uint64_t v127 = v7;
  MEMORY[0x1F4188790](v7);
  unint64_t v136 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = v1[1];
  long long v165 = *v1;
  long long v166 = v9;
  long long v167 = v1[2];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x1E4FBC870];
  *(void *)(v10 + 24) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(v10 + 32) = 0;
  uint64_t v12 = *((void *)&v165 + 1);
  uint64_t v11 = v165;
  uint64_t v13 = (_OWORD *)swift_allocObject();
  long long v14 = v1[1];
  v13[1] = *v1;
  v13[2] = v14;
  v13[3] = v1[2];
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B3A5898C((uint64_t)&v165);
  uint64_t v15 = sub_1B3A15F00();
  uint64_t v16 = sub_1B3A15F0C();
  uint64_t v17 = sub_1B3A15F0C();
  v117.n128_u64[1] = v16;
  *((void *)&v116 + 1) = v13;
  v117.n128_u64[0] = (unint64_t)v15;
  *(void *)&long long v116 = sub_1B3A5DCDC;
  *(void *)&long long v115 = 0xD000000000000049;
  *((void *)&v115 + 1) = 0x80000001B3A7C840;
  sub_1B3A15F18(v11, v12, (uint64_t)sub_1B3A5DA98, v10, 0xD000000000000039, 0x80000001B3A7CBD0, 0, 0, (uint64_t)&v156, v115, 0, v116, v117, v17);
  swift_retain();
  char v18 = sub_1B39B5AA4();
  sub_1B3A138AC(6579297, 0xE300000000000000, 0xD000000000000017, 0x80000001B3A7CC10, 0, 0, v18 & 1, (uint64_t)sub_1B3A5DD40, v10);
  swift_release();
  swift_retain();
  char v19 = sub_1B39B5AA4();
  sub_1B3A13788(0x656D697265707865, 0xEC0000006C61746ELL, 0xD000000000000026, 0x80000001B3A7CC30, 0, 0, v19 & 1, (uint64_t)sub_1B3A5DF24, v10);
  swift_release();
  uint64_t v20 = v161;
  swift_retain();
  sub_1B3A13638(v20);
  *(void *)&long long v161 = sub_1B3A5DF6C;
  *((void *)&v161 + 1) = v10;
  v177[0] = v156;
  v177[1] = v157;
  v177[2] = v158;
  v177[3] = v159;
  v177[4] = v160;
  *(void *)&long long v178 = sub_1B3A5DF6C;
  *((void *)&v178 + 1) = v10;
  long long v179 = v162;
  long long v180 = v163;
  uint64_t v181 = v164;
  long long v170 = v158;
  long long v171 = v159;
  long long v168 = v156;
  long long v169 = v157;
  uint64_t v176 = v164;
  long long v174 = v162;
  long long v175 = v163;
  long long v172 = v160;
  long long v173 = v178;
  sub_1B3A58634(v177);
  unint64_t v21 = (void *)v138;
  unint64_t v22 = sub_1B3A14784((uint64_t)rawValue);
  uint64_t v23 = v21;
  if (v21)
  {
    sub_1B3A58704(v177);
    sub_1B3A58704(v177);
LABEL_19:
    swift_release();
    unint64_t v40 = 0;
LABEL_20:
    unsigned __int8 v41 = (void (*)(long long *))*((void *)&v166 + 1);
    long long v156 = (unint64_t)v23;
    LOBYTE(v157) = 1;
    id v42 = v23;
    v41(&v156);

    swift_willThrow();
    unint64_t v31 = v40;
    goto LABEL_21;
  }
  uint64_t v24 = (void *)v22;
  rawValue = (void (*)(void))(v10 + 16);
  sub_1B3A58704(v177);
  if (!v24)
  {
    sub_1B3A58704(v177);
    swift_release();
    unint64_t v31 = 0;
LABEL_21:
    sub_1B3A13638((uint64_t)v31);
    return;
  }
  uint64_t v138 = v10;
  unint64_t v25 = v24[2];
  if (!v25)
  {
    swift_bridgeObjectRelease();
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v32 = 0xD000000000000024;
    *(void *)(v32 + 8) = 0x80000001B3A7CE40;
    *(unsigned char *)(v32 + 16) = 0;
LABEL_10:
    swift_willThrow();
LABEL_17:
    long long v153 = v162;
    long long v154 = v163;
    uint64_t v155 = v164;
    long long v149 = v158;
    long long v150 = v159;
    long long v151 = v160;
    long long v152 = v161;
    goto LABEL_18;
  }
  unint64_t v26 = v24[4];
  if (v25 != 1)
  {
    *(void *)&long long v147 = 0;
    *((void *)&v147 + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    unint64_t v144 = 0xD000000000000011;
    unint64_t v145 = 0x80000001B3A7C900;
    if (v24[2] < v25)
    {
      __break(1u);
      goto LABEL_49;
    }
    *(void *)&long long v147 = v24;
    *((void *)&v147 + 1) = v24 + 4;
    *(void *)&long long v148 = 1;
    *((void *)&v148 + 1) = (2 * v25) | 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6308);
    sub_1B3A38DD8((unint64_t *)&qword_1E9CD6310, &qword_1E9CD6308);
    sub_1B3A70250();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    unint64_t v33 = v144;
    unint64_t v34 = v145;
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v35 = v33;
    *(void *)(v35 + 8) = v34;
    *(unsigned char *)(v35 + 16) = 0;
    swift_willThrow();
    long long v153 = v162;
    long long v154 = v163;
    uint64_t v155 = v164;
    long long v149 = v158;
    long long v150 = v159;
    long long v151 = v160;
    long long v152 = v161;
LABEL_18:
    long long v147 = v156;
    long long v148 = v157;
    sub_1B3A58704(&v147);
    goto LABEL_19;
  }
  unint64_t v27 = v24[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v28 = (void *)*((void *)&v167 + 1);
  if (*((void *)&v167 + 1))
  {
    unint64_t v29 = v26;
    int v30 = rawValue;
    goto LABEL_14;
  }
  unint64_t v29 = v26;
  uint64_t v36 = sub_1B3A70320();
  char v28 = (void *)ktrace_file_open((const char *)(v36 + 32), 1);
  swift_release();
  int v30 = rawValue;
  if (!v28)
  {
    *(void *)&long long v147 = 0;
    *((void *)&v147 + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    unint64_t v144 = v26;
    unint64_t v145 = v27;
    uint64_t v45 = sub_1B3A703A0();
    int v46 = MEMORY[0x1B3EBD410](v45);
    if (!strerror(v46))
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    sub_1B3A703B0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    unint64_t v47 = v144;
    unint64_t v48 = v145;
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v49 = v47;
    *(void *)(v49 + 8) = v48;
    *(unsigned char *)(v49 + 16) = 1;
    goto LABEL_10;
  }
LABEL_14:
  if (ktrace_file_get_format((uint64_t)v28) != 4)
  {
    *(void *)&long long v147 = 0;
    *((void *)&v147 + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    *(void *)&long long v147 = v29;
    *((void *)&v147 + 1) = v27;
    sub_1B3A703A0();
    long long v38 = v147;
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v39 = v38;
    *(unsigned char *)(v39 + 16) = 1;
    swift_willThrow();
    ktrace_file_close(v28);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v43 = sub_1B3A43710(v37);
  swift_bridgeObjectRelease();
  uint64_t v146 = v43;
  uint64_t v44 = swift_bridgeObjectRetain();
  uint64_t v50 = sub_1B3A5D7CC(v44, (uint64_t)v30, &v146);
  swift_bridgeObjectRelease();
  if (!*(void *)(v50 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v63 = 0xD000000000000024;
    *(void *)(v63 + 8) = 0x80000001B3A7CE10;
    *(unsigned char *)(v63 + 16) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    ktrace_file_close(v28);
    long long v153 = v162;
    long long v154 = v163;
    uint64_t v155 = v164;
    long long v149 = v158;
    long long v150 = v159;
    long long v151 = v160;
    long long v152 = v161;
    long long v147 = v156;
    long long v148 = v157;
    sub_1B3A58704(&v147);
    goto LABEL_19;
  }
  uint64_t v143 = 0;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = &v143;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = sub_1B3A5E16C;
  *(void *)(v52 + 24) = v51;
  *(void *)&long long v149 = sub_1B3A5E1AC;
  *((void *)&v149 + 1) = v52;
  *(void *)&long long v147 = MEMORY[0x1E4F143A8];
  uint64_t v2 = 1107296256;
  *((void *)&v147 + 1) = 1107296256;
  *(void *)&long long v148 = sub_1B3A5DA28;
  *((void *)&v148 + 1) = &block_descriptor_2;
  uint64_t v53 = (uint64_t)_Block_copy(&v147);
  swift_retain();
  swift_release();
  int v59 = ktrace_file_header_iterate((uint64_t)v28, 0, v53, v54, v55, v56, v57, v58);
  _Block_release((const void *)v53);
  LOBYTE(v53) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v53)
  {
    __break(1u);
    goto LABEL_60;
  }
  if (v59)
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v147 = 0;
    *((void *)&v147 + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    unint64_t v139 = 0xD00000000000001DLL;
    unint64_t v140 = 0x80000001B3A7CCB0;
    if (strerror(v59))
    {
      sub_1B3A703B0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      unint64_t v60 = v139;
      unint64_t v61 = v140;
      sub_1B3A5E108();
      uint64_t v23 = (void *)swift_allocError();
      *(void *)uint64_t v62 = v60;
      *(void *)(v62 + 8) = v61;
LABEL_29:
      *(unsigned char *)(v62 + 16) = 2;
      swift_willThrow();
LABEL_30:
      swift_bridgeObjectRelease();
      ktrace_file_close(v28);
      long long v153 = v162;
      long long v154 = v163;
      uint64_t v155 = v164;
      long long v149 = v158;
      long long v150 = v159;
      long long v151 = v160;
      long long v152 = v161;
      long long v147 = v156;
      long long v148 = v157;
      sub_1B3A58704(&v147);
LABEL_31:
      swift_release();
      unint64_t v40 = sub_1B3A5E16C;
      goto LABEL_20;
    }
    goto LABEL_61;
  }
  uint64_t v64 = v143;
  if (!v143)
  {
    swift_bridgeObjectRelease();
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v62 = 0xD000000000000024;
    *(void *)(v62 + 8) = 0x80000001B3A7CCD0;
    goto LABEL_29;
  }
  uint64_t v125 = v50;
  uint64_t v65 = (int *)ktrace_session_create_with_flags(0);
  if (!v65)
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v147 = 0;
    *((void *)&v147 + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    uint64_t v78 = swift_bridgeObjectRelease();
    unint64_t v139 = 0xD00000000000002ALL;
    unint64_t v140 = 0x80000001B3A7CD00;
    int v79 = MEMORY[0x1B3EBD410](v78);
    if (!strerror(v79))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    sub_1B3A703B0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    unint64_t v80 = v139;
    unint64_t v81 = v140;
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v82 = v80;
    *(void *)(v82 + 8) = v81;
    *(unsigned char *)(v82 + 16) = 2;
    swift_willThrow();
    uint64_t v77 = v64;
    goto LABEL_41;
  }
  uint64_t v71 = v65;
  uint64_t v124 = v64;
  int v72 = ktrace_set_ktrace_file((uint64_t)v65, (uint64_t)v28, 0, v66, v67, v68, v69, v70);
  if (v72)
  {
    int v73 = v72;
    swift_bridgeObjectRelease();
    *(void *)&long long v147 = 0;
    *((void *)&v147 + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    unint64_t v139 = 0xD000000000000023;
    unint64_t v140 = 0x80000001B3A7CD30;
    if (!strerror(v73))
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    sub_1B3A703B0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    unint64_t v74 = v139;
    unint64_t v75 = v140;
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v76 = v74;
    *(void *)(v76 + 8) = v75;
    *(unsigned char *)(v76 + 16) = 2;
    swift_willThrow();
    uint64_t v77 = v124;
LABEL_41:
    ktrace_machine_destroy(v77);
    goto LABEL_30;
  }
  unint64_t v83 = sub_1B3A3BFFC();
  if (!v83)
  {
    swift_bridgeObjectRelease();
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v86 = 0xD000000000000019;
    *(void *)(v86 + 8) = 0x80000001B3A7CD60;
    *(unsigned char *)(v86 + 16) = 2;
    swift_willThrow();
    ktrace_machine_destroy(v124);
    swift_bridgeObjectRelease();
    ktrace_file_close(v28);
    long long v153 = v162;
    long long v154 = v163;
    uint64_t v155 = v164;
    long long v149 = v158;
    long long v150 = v159;
    long long v151 = v160;
    long long v152 = v161;
    long long v147 = v156;
    long long v148 = v157;
    sub_1B3A58704(&v147);
    goto LABEL_31;
  }
  uint64_t v119 = v71;
  uint64_t v121 = v51;
  v122._rawValue = v28;
  if (v166)
  {
    unint64_t v87 = sub_1B3A3BB38();
    swift_beginAccess();
    unint64_t v85 = (FILE *)*v87;
    uint64_t v88 = sub_1B3A3BACC();
    swift_beginAccess();
    uint64_t v84 = (FILE *)*v88;
  }
  else
  {
    uint64_t v84 = v83;
    unint64_t v85 = v83;
  }
  type metadata accessor for Reporter();
  uint64_t v120 = sub_1B3A12534(v85, v84, 0x676E69646E656D41, 0xE800000000000000, 1);
LABEL_49:
  type metadata accessor for ProviderList();
  id v123 = ProviderList.__allocating_init(machine:)(v124);
  uint64_t v89 = *(void *)(v125 + 16);
  if (v89)
  {
    int v90 = *(unsigned __int8 *)(v138 + 32);
    unint64_t v91 = (uint64_t *)(v125 + 48);
    uint64_t v92 = (void *)v120;
    do
    {
      uint64_t v93 = *(v91 - 1);
      uint64_t v94 = *v91;
      uint64_t v95 = *(v91 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B3A08838(v95, v93, v94, v92, v90);
      v91 += 4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      --v89;
    }
    while (v89);
  }
  swift_bridgeObjectRelease();
  sub_1B3A0949C((uint64_t)v122._rawValue);
  sub_1B3A4C0E8(0, &qword_1E9CD6180);
  sub_1B3A701C0();
  *(void *)&long long v147 = MEMORY[0x1E4FBC860];
  sub_1B3A5EA0C(&qword_1E9CD6188, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6190);
  sub_1B3A38DD8(&qword_1E9CD6198, &qword_1E9CD6190);
  sub_1B3A70920();
  (*((void (**)(NSObject *, void, NSObject *))isa + 13))(v134, *MEMORY[0x1E4FBCC58], v135);
  uint64_t v135 = sub_1B3A70690();
  dispatch_semaphore_t v96 = dispatch_semaphore_create(0);
  uint64_t v97 = swift_allocObject();
  long long v98 = v166;
  *(_OWORD *)(v97 + 16) = v165;
  *(_OWORD *)(v97 + 32) = v98;
  *(_OWORD *)(v97 + 48) = v167;
  uint64_t v99 = v119;
  *(void *)(v97 + 64) = v119;
  *(void *)(v97 + 72) = v96;
  *(void *)&long long v149 = sub_1B3A5E238;
  *((void *)&v149 + 1) = v97;
  *(void *)&long long v147 = MEMORY[0x1E4F143A8];
  *((void *)&v147 + 1) = v2;
  *(void *)&long long v148 = sub_1B39B583C;
  *((void *)&v148 + 1) = &block_descriptor_15;
  uint64_t v100 = _Block_copy(&v147);
  sub_1B3A5898C((uint64_t)&v165);
  uint64_t v134 = v96;
  swift_release();
  ktrace_set_completion_handler((uint64_t)v99, v100);
  _Block_release(v100);
  ProviderList.configurePostprocessing(session:)((Swift::OpaquePointer)v99);
  uint64_t v101 = (void (*)(void))*((void *)&v166 + 1);
  uint64_t v102 = swift_bridgeObjectRetain();
  uint64_t v103 = sub_1B3A1E528(v102);
  swift_bridgeObjectRelease();
  long long v147 = (unint64_t)v103;
  LOBYTE(v148) = 2;
  rawValue = v101;
  v101(&v147);
  swift_release();
  if (!ktrace_session_has_callbacks(v99))
  {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v120 + 224))(0xD000000000000029, 0x80000001B3A7CDB0);
LABEL_58:
    uint64_t v114 = v122._rawValue;
    id v113 = v123;
    ProviderList.postprocessingComplete(file:)(v122);
    long long v147 = xmmword_1B3A74740;
    LOBYTE(v148) = 3;
    rawValue(&v147);

    swift_release();
    ktrace_machine_destroy(v124);
    swift_bridgeObjectRelease();
    ktrace_file_close(v114);
    long long v153 = v162;
    long long v154 = v163;
    uint64_t v155 = v164;
    long long v149 = v158;
    long long v150 = v159;
    long long v151 = v160;
    long long v152 = v161;
    long long v147 = v156;
    long long v148 = v157;
    sub_1B3A58704(&v147);
    swift_release();
    unint64_t v31 = sub_1B3A5E16C;
    goto LABEL_21;
  }
  sub_1B3A4C0E8(0, (unint64_t *)&qword_1E9CD5BF0);
  sub_1B3A706A0();
  swift_getObjectType();
  uint64_t v104 = swift_allocObject();
  long long v105 = v166;
  *(_OWORD *)(v104 + 16) = v165;
  *(_OWORD *)(v104 + 32) = v105;
  *(_OWORD *)(v104 + 48) = v167;
  unint64_t v106 = (unint64_t)v119;
  *(void *)(v104 + 64) = v119;
  *(void *)&long long v149 = sub_1B3A5E2E8;
  *((void *)&v149 + 1) = v104;
  *(void *)&long long v147 = MEMORY[0x1E4F143A8];
  *((void *)&v147 + 1) = v2;
  *(void *)&long long v148 = sub_1B39B583C;
  *((void *)&v148 + 1) = &block_descriptor_21;
  uint64_t v107 = _Block_copy(&v147);
  sub_1B3A5898C((uint64_t)&v165);
  uint64_t v108 = v136;
  sub_1B3A701C0();
  uint64_t v109 = v128;
  sub_1B3A19058();
  sub_1B3A706B0();
  _Block_release(v107);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v109, v130);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v108, v127);
  swift_release();
  sub_1B3A706D0();
  if (!ktrace_start(v106, v135))
  {
    sub_1B3A70700();
    sub_1B3A706C0();
    swift_unknownObjectRelease();
    goto LABEL_58;
  }
  *(void *)&long long v147 = 0;
  *((void *)&v147 + 1) = 0xE000000000000000;
  sub_1B3A709B0();
  swift_bridgeObjectRelease();
  unint64_t v141 = 0xD000000000000024;
  unint64_t v142 = 0x80000001B3A7CDE0;
  if (strerror(0))
  {
    sub_1B3A703B0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    unint64_t v110 = v141;
    unint64_t v111 = v142;
    sub_1B3A5E108();
    uint64_t v23 = (void *)swift_allocError();
    *(void *)uint64_t v112 = v110;
    *(void *)(v112 + 8) = v111;
    *(unsigned char *)(v112 + 16) = 2;
    swift_willThrow();
    swift_release();

    swift_unknownObjectRelease();
    ktrace_machine_destroy(v124);
    swift_bridgeObjectRelease();
    ktrace_file_close(v122._rawValue);
    long long v153 = v162;
    long long v154 = v163;
    uint64_t v155 = v164;
    long long v149 = v158;
    long long v150 = v159;
    long long v151 = v160;
    long long v152 = v161;
    long long v147 = v156;
    long long v148 = v157;
    sub_1B3A58704(&v147);
    swift_release();
    unint64_t v40 = sub_1B3A5E16C;
    goto LABEL_20;
  }
LABEL_64:
  __break(1u);
}

uint64_t sub_1B3A5D7CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (!v5) {
    return v6;
  }
  uint64_t v8 = a1;
  uint64_t v42 = MEMORY[0x1E4FBC860];
  sub_1B3A2C484(0, v5, 0);
  uint64_t v6 = v42;
  int64_t v9 = sub_1B3A34958(v8);
  int v11 = v10;
  char v13 = v12 & 1;
  uint64_t v37 = v8 + 56;
  uint64_t result = swift_beginAccess();
  uint64_t v35 = v8;
  uint64_t v36 = a2;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(unsigned char *)(v8 + 32))
  {
    if (((*(void *)(v37 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      goto LABEL_17;
    }
    if (*(_DWORD *)(v8 + 36) != v11) {
      goto LABEL_18;
    }
    char v39 = v13;
    int v40 = v11;
    int64_t v41 = v5;
    uint64_t v15 = v6;
    uint64_t v16 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v9);
    uint64_t v6 = *v16;
    uint64_t v17 = v16[1];
    int v18 = *(unsigned __int8 *)(a2 + 16);
    swift_bridgeObjectRetain();
    int v19 = v18;
    uint64_t v20 = v4;
    uint64_t v21 = sub_1B3A270AC(v6, v17, v19, a3);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }
    uint64_t v25 = v22;
    if (!v22)
    {
      sub_1B3A5E108();
      swift_allocError();
      *(void *)uint64_t v34 = v6;
      *(void *)(v34 + 8) = v17;
      *(unsigned char *)(v34 + 16) = 4;
      swift_willThrow();
      swift_release();
      return v6;
    }
    uint64_t v26 = v21;
    uint64_t v27 = v23;
    char v28 = v24;
    swift_bridgeObjectRelease();
    uint64_t v6 = v15;
    unint64_t v30 = *(void *)(v15 + 16);
    unint64_t v29 = *(void *)(v15 + 24);
    if (v30 >= v29 >> 1)
    {
      sub_1B3A2C484((char *)(v29 > 1), v30 + 1, 1);
      uint64_t v6 = v15;
    }
    *(void *)(v6 + 16) = v30 + 1;
    uint64_t v31 = v6 + 32 * v30;
    *(void *)(v31 + 32) = v26;
    *(void *)(v31 + 40) = v25;
    *(void *)(v31 + 48) = v27;
    *(unsigned char *)(v31 + 56) = v28 & 1;
    uint64_t v8 = v35;
    uint64_t result = sub_1B3A349F8(v9, v40, v39 & 1, v35);
    int64_t v9 = result;
    int v11 = v32;
    char v13 = v33 & 1;
    int64_t v5 = v41 - 1;
    uint64_t v4 = v20;
    a2 = v36;
    if (v41 == 1)
    {
      sub_1B3A38DCC(result, v32, v33 & 1);
      return v6;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B3A5DA28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2) & 1;
}

uint64_t sub_1B3A5DA58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 33, 7);
}

unint64_t sub_1B3A5DA98()
{
  swift_beginAccess();
  uint64_t v1 = sub_1B3A06C84(*(unsigned char *)(v0 + 32));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(v1 + 64);
    uint64_t v4 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      if (*v3) {
        sub_1B3A703A0();
      }
      swift_bridgeObjectRetain();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_1B3A1617C(0, *((void *)v4 + 2) + 1, 1, v4);
      }
      unint64_t v6 = *((void *)v4 + 2);
      unint64_t v5 = *((void *)v4 + 3);
      if (v6 >= v5 >> 1) {
        uint64_t v4 = sub_1B3A1617C((char *)(v5 > 1), v6 + 1, 1, v4);
      }
      *((void *)v4 + 2) = v6 + 1;
      uint64_t v7 = &v4[16 * v6];
      *((void *)v7 + 4) = 9;
      *((void *)v7 + 5) = 0xE100000000000000;
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
  sub_1B3A38DD8((unint64_t *)&qword_1E9CD58B0, &qword_1E9CD58A8);
  sub_1B3A70250();
  swift_bridgeObjectRelease();
  sub_1B3A709B0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  return 0xD00000000000002DLL;
}

uint64_t sub_1B3A5DCD4()
{
  return objectdestroy_2Tm(64);
}

uint64_t sub_1B3A5DCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(void *))(v2 + 40);
  v5[0] = a1;
  v5[1] = a2;
  char v6 = 0;
  swift_bridgeObjectRetain();
  v3(v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A5DD40(uint64_t a1, unint64_t a2)
{
  v27[0] = 44;
  v27[1] = 0xE100000000000000;
  uint64_t v25 = v27;
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1B3A0420C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1B3A060F8, (uint64_t)v24, a1, a2);
  int64_t v6 = *((void *)v5 + 2);
  if (v6)
  {
    v27[4] = v2;
    v27[0] = MEMORY[0x1E4FBC860];
    sub_1B3A052F4(0, v6, 0);
    uint64_t v7 = (void *)v27[0];
    uint64_t v8 = (uint64_t *)(v5 + 56);
    do
    {
      uint64_t v10 = *(v8 - 3);
      uint64_t v9 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      swift_bridgeObjectRetain();
      uint64_t v13 = MEMORY[0x1B3EBD660](v10, v9, v11, v12);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v27[0] = v7;
      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_1B3A052F4((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v7 = (void *)v27[0];
      }
      v7[2] = v17 + 1;
      int v18 = &v7[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
      v8 += 4;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_beginAccess();
  uint64_t v19 = v7[2];
  if (v19)
  {
    uint64_t v20 = v7 + 5;
    do
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v21 = *v20;
      swift_bridgeObjectRetain();
      sub_1B3A2C7C0(&v26, v22, v21);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1B3A5DF24()
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v0 + 32) = 1;
  return result;
}

uint64_t sub_1B3A5DF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_1B39ADD78();
  if (sub_1B3A70810())
  {
    swift_beginAccess();
    uint64_t v6 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 24) = v6;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1B3A1617C(0, *(void *)(v6 + 16) + 1, 1, (char *)v6);
      uint64_t v6 = result;
      *(void *)(v3 + 24) = result;
    }
    unint64_t v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B3A1617C((char *)(v8 > 1), v9 + 1, 1, (char *)v6);
      uint64_t v6 = result;
      *(void *)(v3 + 24) = result;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 16 * v9;
    *(void *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = a2;
  }
  else
  {
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A5E108();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000010;
    *(void *)(v11 + 8) = 0x80000001B3A7CE70;
    *(unsigned char *)(v11 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1B3A5E108()
{
  unint64_t result = qword_1E9CD63A8;
  if (!qword_1E9CD63A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD63A8);
  }
  return result;
}

uint64_t sub_1B3A5E15C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

BOOL sub_1B3A5E16C(uint64_t *a1)
{
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  uint64_t v3 = ktrace_machine_create(a1);
  *uint64_t v2 = v3;
  return v3 == 0;
}

uint64_t sub_1B3A5E19C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A5E1AC()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1B3A5E1F0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1B3A5E238()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void (**)(void *))(v0 + 40);
  v4[0] = 0;
  v4[1] = 0;
  char v5 = 3;
  v2(v4);
  ktrace_session_destroy(v1);
  return sub_1B3A70710();
}

uint64_t sub_1B3A5E294()
{
  return objectdestroy_2Tm(72);
}

uint64_t objectdestroy_2Tm(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v1, a1, 7);
}

void sub_1B3A5E2E8()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void (**)(long long *))(v0 + 40);
  long long v3 = xmmword_1B3A76A50;
  char v4 = 3;
  v2(&v3);

  ktrace_end(v1, 0);
}

uint64_t initializeBufferWithCopyOfBuffer for AmendmentError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B3A5E524(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1B3A5E368);
}

id sub_1B3A5E368(id result, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      unint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      unint64_t result = result;
      break;
    default:
      return result;
  }
  return result;
}

void destroy for AmendmentError(uint64_t a1)
{
}

uint64_t *assignWithCopy for AmendmentError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B3A5E5A0(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1B3A5E368, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B3A5BE30);
}

uint64_t *assignWithTake for AmendmentError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A5E624(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B3A5BE30);
}

uint64_t getEnumTagSinglePayload for AmendmentError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AmendmentError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AmendmentError()
{
  return &type metadata for AmendmentError;
}

uint64_t initializeBufferWithCopyOfBuffer for AmendmentNote(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B3A5E524(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1B3A5E4C4);
}

id sub_1B3A5E4C4(id result, id a2, char a3)
{
  if (a3 == 2) {
    return (id)swift_bridgeObjectRetain();
  }
  if (a3 != 1)
  {
    if (a3) {
      return result;
    }
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for AmendmentNote(uint64_t a1)
{
}

void sub_1B3A5E4FC(void *a1, id a2, char a3)
{
  if (a3 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return;
  }
  if (a3 != 1)
  {
    if (a3) {
      return;
    }
    goto LABEL_4;
  }
}

uint64_t sub_1B3A5E524(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for AmendmentNote(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B3A5E5A0(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1B3A5E4C4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B3A5E4FC);
}

uint64_t *sub_1B3A5E5A0(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for AmendmentNote(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A5E624(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B3A5E4FC);
}

uint64_t *sub_1B3A5E624(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for AmendmentNote()
{
  return &type metadata for AmendmentNote;
}

uint64_t destroy for AmendingOptions()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s6ktrace15AmendingOptionsVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AmendingOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AmendingOptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AmendingOptions(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AmendingOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AmendingOptions()
{
  return &type metadata for AmendingOptions;
}

uint64_t initializeWithCopy for Amending(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Amending(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Amending(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Amending(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Amending(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Amending()
{
  return &type metadata for Amending;
}

uint64_t sub_1B3A5EA0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1B3A5EA64@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1B3A5EA70(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1B3A5EA78@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1B3A5EA8C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1B3A5EAA0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B3A5EAB4(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1B3A5EAE4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1B3A5EB10@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1B3A5EB34(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1B3A5EB48(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1B3A5EB5C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1B3A5EB70@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B3A5EB84(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B3A5EB98(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1B3A5EBAC(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B3A5EBC0()
{
  return *v0 == 0;
}

void *sub_1B3A5EBD0(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_1B3A5EBE4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

BOOL sub_1B3A5EBF4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B3A5EC08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1B3A61660(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for RecordingOptions.Options(uint64_t a1)
{
  return sub_1B3A5890C(a1, (uint64_t *)&unk_1E9CD6490);
}

void sub_1B3A5EC68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v33 = a1;
  uint64_t v27 = a4;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v28 = (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v25 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = sub_1B3A6FF40();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = 1;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v32 = v16 + 56;
  v31(v14, 1, 1, v15);
  id v30 = self;
  uint64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v26 = v16;
  int v18 = (void (**)(char *, uint64_t))(v16 + 8);
  long long v29 = xmmword_1B3A73390;
  do
  {
    if (v17 == 1000)
    {
      __break(1u);
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
    uint64_t v37 = v34;
    uint64_t v38 = v35;
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5890);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = v29;
    *(void *)(v19 + 56) = MEMORY[0x1E4FBB550];
    *(void *)(v19 + 64) = MEMORY[0x1E4FBB5C8];
    *(void *)(v19 + 32) = v17;
    sub_1B3A702D0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A6FED0();
    swift_bridgeObjectRelease();
    sub_1B3A5EFF4((uint64_t)v14);
    v31(v12, 0, 1, v15);
    sub_1B39B4CD4((uint64_t)v12, (uint64_t)v14, &qword_1E9CD58F8);
    id v20 = objc_msgSend(v30, sel_defaultManager);
    sub_1B3A49508((uint64_t)v14, (uint64_t)v9);
    uint64_t v21 = *v36;
    if ((*v36)(v9, 1, v15) == 1) {
      goto LABEL_8;
    }
    sub_1B3A6FF20();
    uint64_t v22 = (void *)sub_1B3A70290();
    swift_bridgeObjectRelease();
    (*v18)(v9, v15);
    unsigned __int8 v23 = objc_msgSend(v20, sel_fileExistsAtPath_, v22);

    ++v17;
  }
  while ((v23 & 1) != 0);
  uint64_t v24 = v28;
  sub_1B3A49508((uint64_t)v14, v28);
  if (v21((char *)v24, 1, v15) != 1)
  {
    sub_1B3A5EFF4((uint64_t)v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v27, v24, v15);
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1B3A5EFF4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B3A5F054@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v2 = v1;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_1B3A6FF40();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v37 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = (uint64_t *)(v2 + *(int *)(v4 + 132));
  uint64_t v18 = v17[1];
  if (!v18) {
    __break(1u);
  }
  uint64_t v19 = *v17;
  swift_bridgeObjectRetain();
  sub_1B3A6FE90();
  char v20 = sub_1B3A70450();
  uint64_t v39 = v7;
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_1B3A6FEA0();
    uint64_t v26 = v25;
    sub_1B3A6FEF0();
    if (sub_1B3A6FF20()) {
      BOOL v28 = 0;
    }
    else {
      BOOL v28 = v27 == 0xE000000000000000;
    }
    if (v28)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v29 = sub_1B3A70D20();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        uint64_t v30 = v39;
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v14, v39);
LABEL_16:
        sub_1B3A5EC68((uint64_t)v11, v24, v26, v38);
        swift_bridgeObjectRelease();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v8 + 8);
        v36(v11, v30);
        v36(v14, v30);
        return ((uint64_t (*)(char *, uint64_t))v36)(v16, v30);
      }
    }
    id v34 = objc_msgSend(self, sel_defaultManager);
    id v35 = objc_msgSend(v34, sel_currentDirectoryPath);

    sub_1B3A702C0();
    sub_1B3A6FE90();
    swift_bridgeObjectRelease();
    uint64_t v30 = v39;
    goto LABEL_16;
  }
  char v40 = 0;
  id v21 = objc_msgSend(self, sel_defaultManager);
  uint64_t v22 = (void *)sub_1B3A70290();
  unsigned int v23 = objc_msgSend(v21, sel_fileExistsAtPath_isDirectory_, v22, &v40);

  if (v40 == 1) {
    goto LABEL_13;
  }
  sub_1B3A63CA0(v2, (uint64_t)v6, type metadata accessor for RecordingOptions.Options);
  if (v23)
  {
    uint64_t v31 = *v6;
    sub_1B3A63D08((uint64_t)v6, type metadata accessor for RecordingOptions.Options);
    if ((v31 & 1) == 0)
    {
LABEL_13:
      type metadata accessor for KTraceRecordError();
      sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
      swift_allocError();
      *uint64_t v32 = v19;
      v32[1] = v18;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v39);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1B3A63D08((uint64_t)v6, type metadata accessor for RecordingOptions.Options);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v38, v16, v39);
}

uint64_t type metadata accessor for RecordingOptions(uint64_t a1)
{
  return sub_1B3A5890C(a1, (uint64_t *)&unk_1E9CDCC20);
}

uint64_t sub_1B3A5F59C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (sub_1B3A70D20() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = sub_1B3A70D20();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

uint64_t sub_1B3A5F684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v119 = a3;
  uint64_t v5 = (int *)type metadata accessor for RecordingOptions.Options(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v115 = (uint64_t)v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v114 = (uint64_t)v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RecordingOptions(0);
  uint64_t v117 = *(void *)(v9 - 8);
  uint64_t v118 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v127 = (void *)((char *)v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = swift_allocBox();
  uint64_t v13 = (uint64_t)v12;
  *uint64_t v12 = 0;
  uint64_t v14 = (char *)v12 + v5[5];
  uint64_t v15 = sub_1B3A6FF40();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v112 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 56);
  uint64_t v113 = v15;
  v111[1] = v16 + 56;
  v112(v14, 1, 1);
  uint64_t v17 = MEMORY[0x1E4FBC860];
  *(void *)(v13 + v5[6]) = MEMORY[0x1E4FBC860];
  uint64_t v120 = (void *)(v13 + v5[7]);
  *uint64_t v120 = v17;
  *(void *)(v13 + v5[8]) = v17;
  uint64_t v18 = v13 + v5[9];
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  uint64_t v19 = v13 + v5[10];
  *(_DWORD *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 4) = 1;
  uint64_t v20 = v13 + v5[11];
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  *(void *)(v13 + v5[12]) = v17;
  *(void *)(v13 + v5[13]) = v17;
  *(unsigned char *)(v13 + v5[14]) = 0;
  uint64_t v21 = v13 + v5[15];
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  *(unsigned char *)(v13 + v5[16]) = 0;
  *(unsigned char *)(v13 + v5[17]) = 0;
  *(unsigned char *)(v13 + v5[18]) = 1;
  uint64_t v22 = (void *)(v13 + v5[19]);
  *uint64_t v22 = 0;
  v22[1] = 0;
  unsigned int v23 = (void *)(v13 + v5[20]);
  *unsigned int v23 = 0;
  v23[1] = 0;
  uint64_t v24 = v13 + v5[21];
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 1;
  *(unsigned char *)(v13 + v5[22]) = 0;
  uint64_t v25 = v13 + v5[23];
  *(_DWORD *)uint64_t v25 = 0;
  *(unsigned char *)(v25 + 4) = 1;
  uint64_t v26 = MEMORY[0x1E4FBC870];
  *(void *)(v13 + v5[24]) = MEMORY[0x1E4FBC870];
  *(void *)(v13 + v5[25]) = v26;
  *(void *)(v13 + v5[26]) = v17;
  *(unsigned char *)(v13 + v5[27]) = 0;
  *(unsigned char *)(v13 + v5[28]) = 0;
  *(void *)(v13 + v5[29]) = v17;
  uint64_t v27 = v13 + v5[30];
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8) = 1;
  BOOL v28 = (void *)(v13 + v5[31]);
  *BOOL v28 = 0;
  v28[1] = 0;
  char v29 = (void *)(v13 + v5[32]);
  *char v29 = 0x746C7561666564;
  v29[1] = 0xE700000000000000;
  uint64_t v30 = swift_allocObject();
  uint64_t v126 = v30;
  *(unsigned char *)(v30 + 16) = 0;
  long long v116 = (unsigned char *)(v30 + 16);
  sub_1B39B4CD4(a1, (uint64_t)v150, &qword_1E9CD6148);
  sub_1B39B4CD4((uint64_t)v150, (uint64_t)&v153, &qword_1E9CD6148);
  uint64_t result = v153;
  if (v153)
  {
    uint64_t v32 = sub_1B3A703B0();
    uint64_t v121 = v33;
    uint64_t v122 = v32;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = a2;
    long long v35 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v34 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(v34 + 40) = v35;
    *(_OWORD *)(v34 + 56) = *(_OWORD *)(a1 + 32);
    *(void *)(v34 + 72) = *(void *)(a1 + 48);
    uint64_t v36 = swift_allocObject();
    long long v37 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v36 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v36 + 32) = v37;
    *(_OWORD *)(v36 + 48) = *(_OWORD *)(a1 + 32);
    *(void *)(v36 + 64) = *(void *)(a1 + 48);
    sub_1B3A4BE50(a1);
    sub_1B3A4BE50(a1);
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_1B3A15F00();
    uint64_t v125 = a1;
    unint64_t v39 = (unint64_t)v38;
    uint64_t v40 = sub_1B3A15F0C();
    uint64_t v41 = sub_1B3A15F0C();
    v110.n128_u64[1] = v40;
    *((void *)&v109 + 1) = v36;
    v110.n128_u64[0] = v39;
    *(void *)&long long v109 = sub_1B3A61C3C;
    *(void *)&long long v108 = 0xD000000000000049;
    *((void *)&v108 + 1) = 0x80000001B3A7C840;
    sub_1B3A15F18(v122, v121, (uint64_t)sub_1B3A61C08, v34, 0xD000000000000010, 0x80000001B3A7CEC0, 0, 0, (uint64_t)&v141, v108, 0, v109, v110, v41);
    *uint64_t v127 = a2;
    char v42 = *(unsigned char *)(v125 + 48);
    uint64_t v123 = a2;
    if (v42)
    {
      *(void *)&long long v132 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      sub_1B3A60EB4(0, 2, 0);
      uint64_t v43 = v132;
      unint64_t v45 = *(void *)(v132 + 16);
      unint64_t v44 = *(void *)(v132 + 24);
      unint64_t v46 = v44 >> 1;
      unint64_t v47 = v45 + 1;
      if (v44 >> 1 <= v45)
      {
        sub_1B3A60EB4((char *)(v44 > 1), v45 + 1, 1);
        uint64_t v43 = v132;
        unint64_t v44 = *(void *)(v132 + 24);
        unint64_t v46 = v44 >> 1;
      }
      *(void *)(v43 + 16) = v47;
      uint64_t v48 = v43 + 24 * v45;
      *(_OWORD *)(v48 + 32) = xmmword_1B3A74740;
      *(unsigned char *)(v48 + 48) = 0;
      int64_t v49 = v45 + 2;
      if (v46 <= v47)
      {
        sub_1B3A60EB4((char *)(v44 > 1), v49, 1);
        uint64_t v43 = v132;
      }
      *(void *)(v43 + 16) = v49;
      uint64_t v50 = v43 + 24 * v47;
      *(_OWORD *)(v50 + 32) = xmmword_1B3A76B70;
      *(unsigned char *)(v50 + 48) = 0;
      sub_1B3A60FEC(v43);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_retain();
    sub_1B3A13648((uint64_t)sub_1B3A61D3C, v11);
    swift_release();
    swift_retain();
    sub_1B3A13648((uint64_t)sub_1B3A61DCC, v11);
    swift_release();
    swift_retain();
    char v51 = sub_1B39B5AA4();
    uint64_t v122 = 0xD000000000000023;
    sub_1B3A138AC(1851878512, 0xE400000000000000, 0xD000000000000023, 0x80000001B3A7CEE0, 0, 0, v51 & 1, (uint64_t)sub_1B3A61E5C, v11);
    swift_release();
    swift_retain();
    char v52 = sub_1B39B5AA4();
    sub_1B3A138AC(6579297, 0xE300000000000000, 0xD00000000000002ALL, 0x80000001B3A7CF10, 0, 0, v52 & 1, (uint64_t)sub_1B3A61EE8, v11);
    swift_release();
    swift_retain();
    char v53 = sub_1B39B5AA4();
    sub_1B3A138AC(1953066351, 0xE400000000000000, 0xD00000000000002CLL, 0x80000001B3A7CF40, 0, 0, v53 & 1, (uint64_t)sub_1B3A620F0, v11);
    swift_release();
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v126;
    *(void *)(v54 + 24) = v11;
    uint64_t v55 = v146;
    swift_retain();
    swift_retain();
    sub_1B3A13638(v55);
    *(void *)&long long v146 = sub_1B3A62338;
    *((void *)&v146 + 1) = v54;
    swift_retain();
    char v56 = sub_1B39B5AA4();
    sub_1B3A138AC(0xD000000000000012, 0x80000001B3A7CF70, 0xD00000000000003BLL, 0x80000001B3A7CF90, 0, 0, v56 & 1, (uint64_t)sub_1B3A6256C, v11);
    swift_release();
    swift_retain();
    char v57 = sub_1B39B5AA4();
    sub_1B3A138AC(0xD000000000000010, 0x80000001B3A7CFD0, 0xD00000000000003ELL, 0x80000001B3A7CFF0, 0, 0, v57 & 1, (uint64_t)sub_1B3A62668, v11);
    swift_release();
    swift_retain();
    char v58 = sub_1B39B5AA4();
    sub_1B3A138AC(0xD000000000000012, 0x80000001B3A7D030, 0xD000000000000032, 0x80000001B3A7D050, 0, 0, v58 & 1, (uint64_t)sub_1B3A62764, v11);
    swift_release();
    swift_retain();
    char v59 = sub_1B39B5AA4();
    sub_1B3A138AC(0xD000000000000013, 0x80000001B3A7D090, 0xD000000000000038, 0x80000001B3A7D0B0, 0, 0, v59 & 1, (uint64_t)sub_1B3A62998, v11);
    swift_release();
    swift_retain();
    char v60 = sub_1B39B5AA4();
    sub_1B3A138AC(0xD000000000000013, 0x80000001B3A7BB30, 0xD00000000000002FLL, 0x80000001B3A7D0F0, 0, 0, v60 & 1, (uint64_t)sub_1B3A62AB4, v11);
    swift_release();
    swift_retain();
    char v61 = sub_1B39B5AA4();
    sub_1B3A138AC(0xD00000000000001CLL, 0x80000001B3A7BB10, 0xD000000000000041, 0x80000001B3A7D120, 0, 0, v61 & 1, (uint64_t)sub_1B3A62C00, v11);
    swift_release();
    swift_retain();
    char v62 = sub_1B39B5AA4();
    sub_1B3A138AC(0xD000000000000015, 0x80000001B3A7D170, 0xD000000000000037, 0x80000001B3A7D190, 0, 0, v62 & 1, (uint64_t)sub_1B3A62DCC, v11);
    swift_release();
    swift_retain();
    char v63 = sub_1B39B5AA4();
    sub_1B3A13788(0x746972777265766FLL, 0xE900000000000065, v122, 0x80000001B3A7D1D0, 0, 0, v63 & 1, (uint64_t)sub_1B3A62EC8, v11);
    swift_release();
    swift_retain();
    char v64 = sub_1B39B5AA4();
    sub_1B3A138AC(0xD000000000000012, 0x80000001B3A7D200, 0xD000000000000026, 0x80000001B3A7D220, 0, 0, v64 & 1, (uint64_t)sub_1B3A62F28, v11);
    swift_release();
    swift_retain();
    char v65 = sub_1B39B5AA4();
    sub_1B3A13788(0x73736572706D6F63, 0xE800000000000000, 0xD000000000000021, 0x80000001B3A7D250, 0, 0, v65 & 1, (uint64_t)sub_1B3A63180, v11);
    swift_release();
    swift_retain();
    char v66 = sub_1B39B5AA4();
    sub_1B3A13788(0x73736572706D6F63, 0xEF676E697275642DLL, 0xD000000000000022, 0x80000001B3A7D280, 0, 0, v66 & 1, (uint64_t)sub_1B3A631E8, v11);
    swift_release();
    swift_retain();
    char v67 = sub_1B39B5AA4();
    uint64_t v122 = 0xD000000000000011;
    sub_1B3A138AC(0xD000000000000011, 0x80000001B3A7D2B0, 0xD000000000000040, 0x80000001B3A7D2D0, 0, 0, v67 & 1, (uint64_t)sub_1B3A63250, v11);
    swift_release();
    swift_retain();
    char v68 = sub_1B39B5AA4();
    sub_1B3A13788(0x656D697265707865, 0xEC0000006C61746ELL, 0xD000000000000019, 0x80000001B3A7D320, 0, 0, v68 & 1, (uint64_t)sub_1B3A6340C, v11);
    swift_release();
    uint64_t v69 = (uint64_t *)sub_1B3A13614();
    swift_beginAccess();
    uint64_t v71 = *v69;
    uint64_t v70 = v69[1];
    swift_retain();
    swift_bridgeObjectRetain();
    char v72 = sub_1B39B5AA4();
    sub_1B3A13788(v71, v70, 0xD000000000000015, 0x80000001B3A7D340, 0, 0, v72 & 1, (uint64_t)sub_1B3A63474, v11);
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    sub_1B3A138AC(0xD000000000000012, 0x80000001B3A7D360, 0xD000000000000028, 0x80000001B3A7D380, 0, 0, 1, (uint64_t)sub_1B3A634DC, v11);
    swift_release();
    swift_retain();
    sub_1B3A138AC(0xD000000000000015, 0x80000001B3A7D3B0, 0xD00000000000002BLL, 0x80000001B3A7D3D0, 0, 0, 1, (uint64_t)sub_1B3A63698, v11);
    swift_release();
    swift_retain();
    sub_1B3A138AC(0xD000000000000015, 0x80000001B3A7D400, 0xD000000000000025, 0x80000001B3A7D420, 0, 0, 1, (uint64_t)sub_1B3A63724, v11);
    swift_release();
    swift_retain();
    sub_1B3A13788(0xD000000000000015, 0x80000001B3A7D450, 0xD000000000000089, 0x80000001B3A7D470, 0, 0, 1, (uint64_t)sub_1B3A637B0, v11);
    swift_release();
    swift_retain();
    sub_1B3A138AC(0xD000000000000013, 0x80000001B3A7D500, 0xD000000000000049, 0x80000001B3A7D520, 0, 0, 1, (uint64_t)sub_1B3A63818, v11);
    swift_release();
    swift_retain();
    sub_1B3A13788(0xD000000000000016, 0x80000001B3A7D570, 0xD000000000000025, 0x80000001B3A7D590, 0, 0, 1, (uint64_t)sub_1B3A63C3C, v11);
    swift_release();
    v151[6] = v147;
    v151[7] = v148;
    uint64_t v152 = v149;
    v151[2] = v143;
    v151[3] = v144;
    v151[4] = v145;
    v151[5] = v146;
    v151[0] = v141;
    v151[1] = v142;
    sub_1B3A58634(v151);
    int v73 = v124;
    unint64_t v74 = sub_1B3A14784(v123);
    unint64_t v75 = v73;
    if (v73)
    {
      swift_bridgeObjectRelease();
      sub_1B3A58704(v151);
LABEL_11:
      id v128 = v75;
      id v76 = v75;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
      if (swift_dynamicCast())
      {

        uint64_t v77 = v129;
        uint64_t v78 = v130;
        char v79 = v131;
        type metadata accessor for KTraceRecordError();
        sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        swift_allocError();
        *(void *)uint64_t v80 = v77;
        *(void *)(v80 + 8) = v78;
        *(unsigned char *)(v80 + 16) = v79;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
      }
      sub_1B3A4BF4C(v125);

      goto LABEL_14;
    }
    uint64_t v81 = v122;
    swift_bridgeObjectRelease();
    sub_1B3A58704(v151);
    if (v74)
    {
      if (*(void *)(v74 + 16))
      {
        type metadata accessor for KTraceRecordError();
        sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        unint64_t v75 = (void *)swift_allocError();
        unint64_t v83 = v82;
        *(void *)&long long v132 = v74;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
        sub_1B3A0609C();
        uint64_t v84 = sub_1B3A70250();
        uint64_t v86 = v85;
        swift_bridgeObjectRelease();
        *unint64_t v83 = v84;
        v83[1] = v86;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      if ((*(unsigned char *)(v13 + v5[28]) & 1) == 0 && *(unsigned char *)(v13 + v5[17]) == 1)
      {
        type metadata accessor for KTraceRecordError();
        sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        swift_allocError();
        *unint64_t v87 = v81;
        v87[1] = 0x80000001B3A7D5F0;
LABEL_32:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_1B3A4BF4C(v125);
LABEL_14:
        long long v138 = v147;
        long long v139 = v148;
        uint64_t v140 = v149;
        long long v134 = v143;
        long long v135 = v144;
        long long v136 = v145;
        long long v137 = v146;
        long long v132 = v141;
        long long v133 = v142;
        sub_1B3A58704(&v132);
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      uint64_t v88 = (uint64_t *)(v13 + v5[31]);
      uint64_t v89 = v88[1];
      if (!v89)
      {
        type metadata accessor for KTraceRecordError();
        sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        swift_allocError();
        *uint64_t v97 = 0xD00000000000002ELL;
        v97[1] = 0x80000001B3A7D5C0;
        goto LABEL_32;
      }
      uint64_t v90 = *v88;
      unint64_t v91 = v116;
      swift_beginAccess();
      if (*v91 == 1)
      {
        swift_bridgeObjectRetain();
        if ((sub_1B3A70450() & 1) == 0)
        {
          type metadata accessor for KTraceRecordError();
          sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
          swift_allocError();
          *uint64_t v103 = v90;
          v103[1] = v89;
          goto LABEL_32;
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v92 = *(void *)(v13 + v5[24]);
      swift_bridgeObjectRetain();
      uint64_t v93 = swift_bridgeObjectRetain();
      char v94 = sub_1B3A43A6C(v93, v92);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v94 & 1) == 0)
      {
        type metadata accessor for KTraceRecordError();
        sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        swift_allocError();
        uint64_t v99 = v98;
        uint64_t v100 = *(void *)(v13 + v5[24]);
        swift_bridgeObjectRetain();
        uint64_t v101 = swift_bridgeObjectRetain();
        uint64_t v102 = sub_1B3A49A10(v101, v100);
        swift_bridgeObjectRelease();
        *uint64_t v99 = v102;
        goto LABEL_32;
      }
      uint64_t v95 = v115;
      sub_1B3A63CA0(v13, v115, type metadata accessor for RecordingOptions.Options);
      uint64_t v96 = v114;
      sub_1B3A5F054(v114);
      sub_1B3A63D08(v95, type metadata accessor for RecordingOptions.Options);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v112)(v96, 0, 1, v113);
      sub_1B3A49570(v96, v13 + v5[5]);
      uid_t v104 = geteuid();
      uint64_t v105 = (uint64_t)v127;
      if (v104)
      {
        type metadata accessor for KTraceRecordError();
        sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_1B3A4BF4C(v125);
        long long v138 = v147;
        long long v139 = v148;
        uint64_t v140 = v149;
        long long v134 = v143;
        long long v135 = v144;
        long long v136 = v145;
        long long v137 = v146;
        long long v132 = v141;
        long long v133 = v142;
        sub_1B3A58704(&v132);
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      sub_1B3A4BF4C(v125);
      uint64_t v106 = v118;
      sub_1B3A63CA0(v13, v105 + *(int *)(v118 + 20), type metadata accessor for RecordingOptions.Options);
      long long v138 = v147;
      long long v139 = v148;
      uint64_t v140 = v149;
      long long v134 = v143;
      long long v135 = v144;
      long long v136 = v145;
      long long v137 = v146;
      long long v132 = v141;
      long long v133 = v142;
      sub_1B3A58704(&v132);
      swift_release();
      swift_release();
      uint64_t v107 = v119;
      sub_1B3A63CA0(v105, v119, type metadata accessor for RecordingOptions);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v117 + 56))(v107, 0, 1, v106);
      return sub_1B3A63D08(v105, type metadata accessor for RecordingOptions);
    }
    else
    {
      sub_1B3A4BF4C(v125);
      sub_1B3A58704(v151);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v119, 1, 1, v118);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1B3A60EB4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B3A60ED4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B3A60ED4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD63D0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1B3A60FEC(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_1B3A610DC((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *sub_1B3A610DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD63D0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A611F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD63D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B3A612F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1B3A70490();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    int64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_1B3A3ECD4();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    int64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    int64_t v7 = (unsigned __int8 *)sub_1B3A70A20();
  }
LABEL_7:
  int64_t v11 = sub_1B3A613E0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *sub_1B3A613E0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__(v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3A61660(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1B3A61698(void *a1, int a2)
{
  int v3 = v2;
  uint64_t v6 = 0x746C7561666564;
  uint64_t v7 = sub_1B3A6FF40();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned int v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B3A5F59C(0x6972657078652D2DLL, 0xEE006C61746E656DLL, a1);
  int v12 = v11;
  uint64_t v13 = sub_1B3A5F59C(0x6E616C702D2DLL, 0xE600000000000000, a1);
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v15 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v15 >= a1[2])
  {
LABEL_6:
    uint64_t v17 = 0xE700000000000000;
LABEL_7:
    unsigned __int8 v18 = sub_1B3A2A8E0((v12 & 1) == 0, a2 & 1);
    int v19 = v12;
    uint64_t v20 = v2;
    if (!v2)
    {
      int v3 = v18;
      int v41 = v19;
      uint64_t v37 = v6;
      int v42 = a2;
      swift_bridgeObjectRelease();
      int64_t v21 = v3[2];
      if (v21)
      {
        uint64_t v31 = v17;
        unsigned __int8 v32 = 0;
        uint64_t v33 = v10;
        uint64_t v34 = v8;
        uint64_t v35 = v7;
        v40[0] = MEMORY[0x1E4FBC860];
        uint64_t v36 = v3;
        sub_1B3A052F4(0, v21, 0);
        int v3 = v36;
        uint64_t v22 = v40[0];
        uint64_t v23 = v36 + 5;
        do
        {
          uint64_t v24 = *(v23 - 1);
          uint64_t v25 = *v23;
          v40[0] = v22;
          unint64_t v27 = *(void *)(v22 + 16);
          unint64_t v26 = *(void *)(v22 + 24);
          swift_bridgeObjectRetain();
          if (v27 >= v26 >> 1)
          {
            sub_1B3A052F4((char *)(v26 > 1), v27 + 1, 1);
            int v3 = v36;
            uint64_t v22 = v40[0];
          }
          v23 += 41;
          *(void *)(v22 + 16) = v27 + 1;
          uint64_t v28 = v22 + 16 * v27;
          *(void *)(v28 + 32) = v24;
          *(void *)(v28 + 40) = v25;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
        uint64_t v8 = v34;
        uint64_t v7 = v35;
        uint64_t v20 = v32;
        unsigned int v10 = v33;
        uint64_t v17 = v31;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = MEMORY[0x1E4FBC860];
      }
      sub_1B3A2A3C8(v10, v37, v17, (v41 & 1) == 0, v42 & 1, 0, 0);
      if (!v20)
      {
        swift_bridgeObjectRelease();
        sub_1B3A26ABC(v40);
        memcpy(v39, v40, 0x141uLL);
        v38[0] = 0;
        v38[1] = 0xE000000000000000;
        sub_1B3A709B0();
        swift_bridgeObjectRelease();
        v38[0] = 0x6020202020;
        v38[1] = 0xE500000000000000;
        swift_bridgeObjectRetain();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        swift_bridgeObjectRetain();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        v38[41] = v38[0];
        v38[42] = v38[1];
        memcpy(v38, v39, 0x141uLL);
        sub_1B3A2877C(0x2020202020202020, 0xE800000000000000);
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        sub_1B39B0C68((uint64_t)v39);
        v40[0] = 0;
        v40[1] = 0xE000000000000000;
        sub_1B3A709B0();
        swift_bridgeObjectRelease();
        v40[0] = 0xD00000000000002FLL;
        v40[1] = 0x80000001B3A7D6F0;
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        v39[0] = (char *)v22;
        swift_bridgeObjectRetain();
        sub_1B3A1E4BC(v39);
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
        sub_1B3A0609C();
        sub_1B3A70250();
        swift_release();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        int v3 = (void *)v40[0];
        (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
        return (uint64_t)v3;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &a1[2 * v15];
    uint64_t v6 = v16[4];
    uint64_t v17 = v16[5];
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
LABEL_21:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1B3A61BC0()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B3A61BD0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1B3A61C08()
{
  return sub_1B3A61698(*(void **)(v0 + 16), (*(_DWORD *)(v0 + 72) >> 1) & 1);
}

uint64_t sub_1B3A61C2C()
{
  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1B3A61C3C(uint64_t a1, uint64_t a2)
{
  sub_1B3A46784(7, a1, a2);
  sub_1B39B4CD4(v2 + 40, (uint64_t)v7, &qword_1E9CD63E0);
  sub_1B39B4CD4((uint64_t)v7, (uint64_t)&v8, &qword_1E9CD63E0);
  uint64_t result = v8;
  if (v8)
  {
    nullsub_1(v8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A18);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1B3A73390;
    *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v6 + 32) = a1;
    *(void *)(v6 + 40) = a2;
    sub_1B39B16DC();
    swift_bridgeObjectRetain();
    sub_1B3A70DD0();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B3A61D3C(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for RecordingOptions.Options(0);
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = swift_projectBox();
    swift_beginAccess();
    uint64_t v7 = (void *)(v6 + *(int *)(v5 + 124));
    *uint64_t v7 = a1;
    v7[1] = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A61DCC(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for RecordingOptions.Options(0);
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = swift_projectBox();
    swift_beginAccess();
    uint64_t v7 = (void *)(v6 + *(int *)(v5 + 128));
    *uint64_t v7 = a1;
    v7[1] = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A61E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = (void *)(v5 + *(int *)(v4 + 128));
  void *v6 = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A61EE8(uint64_t a1, unint64_t a2)
{
  type metadata accessor for RecordingOptions.Options(0);
  swift_projectBox();
  v27[0] = 44;
  v27[1] = 0xE100000000000000;
  uint64_t v25 = v27;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1B3A0420C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1B3A05D00, (uint64_t)v24, a1, a2);
  int64_t v6 = *((void *)v5 + 2);
  if (v6)
  {
    v27[4] = v2;
    v27[0] = MEMORY[0x1E4FBC860];
    sub_1B3A052F4(0, v6, 0);
    uint64_t v7 = (void *)v27[0];
    uint64_t v8 = (uint64_t *)(v5 + 56);
    do
    {
      uint64_t v10 = *(v8 - 3);
      uint64_t v9 = *(v8 - 2);
      uint64_t v12 = *(v8 - 1);
      uint64_t v11 = *v8;
      swift_bridgeObjectRetain();
      uint64_t v13 = MEMORY[0x1B3EBD660](v10, v9, v12, v11);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v27[0] = v7;
      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_1B3A052F4((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v7 = (void *)v27[0];
      }
      v7[2] = v17 + 1;
      unsigned __int8 v18 = &v7[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
      v8 += 4;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_beginAccess();
  uint64_t v19 = v7[2];
  if (v19)
  {
    uint64_t v20 = v7 + 5;
    do
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v21 = *v20;
      swift_bridgeObjectRetain();
      sub_1B3A2C7C0(&v26, v22, v21);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1B3A620F0(uint64_t a1, unint64_t a2)
{
  type metadata accessor for RecordingOptions.Options(0);
  swift_projectBox();
  v27[0] = 44;
  v27[1] = 0xE100000000000000;
  uint64_t v25 = v27;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1B3A0420C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1B3A05D00, (uint64_t)v24, a1, a2);
  int64_t v6 = *((void *)v5 + 2);
  if (v6)
  {
    v27[4] = v2;
    v27[0] = MEMORY[0x1E4FBC860];
    sub_1B3A052F4(0, v6, 0);
    uint64_t v7 = (void *)v27[0];
    uint64_t v8 = (uint64_t *)(v5 + 56);
    do
    {
      uint64_t v10 = *(v8 - 3);
      uint64_t v9 = *(v8 - 2);
      uint64_t v12 = *(v8 - 1);
      uint64_t v11 = *v8;
      swift_bridgeObjectRetain();
      uint64_t v13 = MEMORY[0x1B3EBD660](v10, v9, v12, v11);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v27[0] = v7;
      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_1B3A052F4((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v7 = (void *)v27[0];
      }
      v7[2] = v17 + 1;
      unsigned __int8 v18 = &v7[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
      v8 += 4;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_beginAccess();
  uint64_t v19 = v7[2];
  if (v19)
  {
    uint64_t v20 = v7 + 5;
    do
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v21 = *v20;
      swift_bridgeObjectRetain();
      sub_1B3A2C7C0(&v26, v22, v21);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1B3A622F8()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A62338(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v7 = swift_projectBox();
  if (a1 == 0x687461702D6F74 && a2 == 0xE700000000000000 || (sub_1B3A70D20() & 1) != 0)
  {
    uint64_t result = swift_beginAccess();
    *(unsigned char *)(v5 + 16) = 1;
  }
  else
  {
    sub_1B39ADD78();
    if (sub_1B3A70810())
    {
      swift_beginAccess();
      uint64_t v9 = *(int *)(v6 + 104);
      uint64_t v10 = *(void *)(v7 + v9);
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v7 + v9) = v10;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1B3A1617C(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
        uint64_t v10 = result;
        *(void *)(v7 + v9) = result;
      }
      unint64_t v11 = *(void *)(v10 + 16);
      unint64_t v12 = *(void *)(v10 + 24);
      unint64_t v13 = v11 + 1;
      if (v11 >= v12 >> 1)
      {
        unint64_t v16 = (char *)v10;
        unint64_t v17 = *(void *)(v10 + 16);
        uint64_t result = (uint64_t)sub_1B3A1617C((char *)(v12 > 1), v11 + 1, 1, v16);
        unint64_t v11 = v17;
        uint64_t v10 = result;
        *(void *)(v7 + v9) = result;
      }
      *(void *)(v10 + 16) = v13;
      unint64_t v14 = v10 + 16 * v11;
      *(void *)(v14 + 32) = a1;
      *(void *)(v14 + 40) = a2;
    }
    else
    {
      type metadata accessor for KTraceRecordError();
      sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
      swift_allocError();
      *(void *)uint64_t v15 = a1;
      *(void *)(v15 + 8) = a2;
      *(unsigned char *)(v15 + 16) = 0;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1B3A6256C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = *(int *)(v4 + 48);
  uint64_t v7 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + v6) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B3A1617C(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B3A1617C((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }
  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 16 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  return result;
}

uint64_t sub_1B3A62668(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = *(int *)(v4 + 52);
  uint64_t v7 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + v6) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B3A1617C(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B3A1617C((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }
  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 16 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  return result;
}

void sub_1B3A62764(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v6 = swift_projectBox();
  unint64_t v7 = sub_1B3A3CCA8(a1, a2, 1);
  if (v2)
  {
    id v24 = v2;
    id v8 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_5:

      return;
    }

    sub_1B3A067C4(&v22, (uint64_t)v23);
    type metadata accessor for KTraceRecordError();
    sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    unint64_t v9 = (void *)swift_allocError();
    unint64_t v11 = v10;
    uint64_t v12 = sub_1B3A3CB04();
    uint64_t v14 = v13;
    sub_1B3A66B0C((uint64_t)v23);
    if (v14)
    {
      *unint64_t v11 = 0xD000000000000014;
      v11[1] = 0x80000001B3A7D6D0;
      v11[2] = v12;
      _OWORD v11[3] = v14;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_5;
    }

    __break(1u);
  }
  else
  {
    unint64_t v15 = v7;
    swift_beginAccess();
    uint64_t v16 = *(int *)(v5 + 32);
    unint64_t v17 = *(char **)(v6 + v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + v16) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v17 = sub_1B3A610DC(0, *((void *)v17 + 2) + 1, 1, v17);
      *(void *)(v6 + v16) = v17;
    }
    unint64_t v20 = *((void *)v17 + 2);
    unint64_t v19 = *((void *)v17 + 3);
    if (v20 >= v19 >> 1)
    {
      unint64_t v17 = sub_1B3A610DC((char *)(v19 > 1), v20 + 1, 1, v17);
      *(void *)(v6 + v16) = v17;
    }
    *((void *)v17 + 2) = v20 + 1;
    uint64_t v21 = &v17[24 * v20];
    *((void *)v21 + 4) = v15;
    *((void *)v21 + 5) = 0;
    v21[48] = 1;
  }
}

uint64_t sub_1B3A62998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = *(int *)(v4 + 28);
  uint64_t v7 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + v6) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B3A610DC(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B3A610DC((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }
  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 24 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  *(unsigned char *)(v11 + 48) = 2;
  *(unsigned char *)(v5 + *(int *)(v4 + 56)) = 1;
  return result;
}

unint64_t sub_1B3A62AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v5 = swift_projectBox();
  unint64_t v6 = sub_1B39ADD78();
  unint64_t result = sub_1B3A3D8BC(MEMORY[0x1E4FBB1A0], v6);
  if (v8)
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    swift_allocError();
    *unint64_t v11 = 0xD000000000000015;
    v11[1] = 0x80000001B3A7D6B0;
    v11[2] = a1;
    _OWORD v11[3] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    int v9 = result;
    if (HIDWORD(result))
    {
      __break(1u);
    }
    else
    {
      unint64_t result = swift_beginAccess();
      uint64_t v10 = v5 + *(int *)(v4 + 40);
      *(_DWORD *)uint64_t v10 = v9;
      *(unsigned char *)(v10 + 4) = 0;
    }
  }
  return result;
}

void sub_1B3A62C00(uint64_t a1, unint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v7 = swift_projectBox();
  unint64_t v8 = sub_1B3A3D200(a1, a2);
  if (v2)
  {
    id v19 = v2;
    id v9 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_5:

      return;
    }

    sub_1B3A067C4(&v17, (uint64_t)v18);
    type metadata accessor for KTraceRecordError();
    sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    int v3 = (void *)swift_allocError();
    unint64_t v11 = v10;
    uint64_t v12 = sub_1B3A3CB04();
    uint64_t v14 = v13;
    sub_1B3A66B0C((uint64_t)v18);
    if (v14)
    {
      *unint64_t v11 = 0xD00000000000001ELL;
      v11[1] = 0x80000001B3A7D690;
      v11[2] = v12;
      _OWORD v11[3] = v14;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_5;
    }
  }
  else
  {
    if (v8 >> 54)
    {
      __break(1u);
    }
    else if ((v8 & 0x3FF00000000000) == 0)
    {
      uint64_t v15 = (v8 & 0xFFFFFFFFFFFLL) << 14;
      swift_beginAccess();
      uint64_t v16 = v7 + *(int *)(v6 + 44);
      *(void *)uint64_t v16 = v15;
      *(unsigned char *)(v16 + 8) = 0;
      return;
    }
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1B3A62DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = *(int *)(v4 + 24);
  uint64_t v7 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + v6) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B3A611F4(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B3A611F4((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }
  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 16 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  return result;
}

uint64_t sub_1B3A62EC8()
{
  type metadata accessor for RecordingOptions.Options(0);
  uint64_t v0 = (void *)swift_projectBox();
  uint64_t result = swift_beginAccess();
  if ((*v0 & 1) == 0) {
    *v0 |= 1uLL;
  }
  return result;
}

void sub_1B3A62F28(uint64_t a1, unint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v7 = swift_projectBox();
  char v8 = sub_1B39B5AA4();
  unint64_t v9 = sub_1B3A3CCA8(a1, a2, v8 & 1);
  if (!v2)
  {
    unint64_t v10 = v9;
    if (v9 >> 4 > 0xC34)
    {
      swift_beginAccess();
      uint64_t v19 = v7 + *(int *)(v6 + 60);
      *(void *)uint64_t v19 = v10 / 0x3E8;
      *(unsigned char *)(v19 + 8) = 0;
      return;
    }
    type metadata accessor for KTraceRecordError();
    sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    int v3 = (void *)swift_allocError();
    *unint64_t v11 = v10;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  id v21 = v3;
  id v12 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
  if (!swift_dynamicCast())
  {
LABEL_7:

    return;
  }

  sub_1B3A067C4(&v20, (uint64_t)v22);
  type metadata accessor for KTraceRecordError();
  sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
  uint64_t v13 = (void *)swift_allocError();
  uint64_t v15 = v14;
  uint64_t v16 = sub_1B3A3CB04();
  uint64_t v18 = v17;
  sub_1B3A66B0C((uint64_t)v22);
  if (v18)
  {
    void *v15 = 0xD000000000000014;
    v15[1] = 0x80000001B3A7D670;
    void v15[2] = v16;
    v15[3] = v18;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_7;
  }

  __break(1u);
}

uint64_t sub_1B3A63180()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + *(int *)(v0 + 64)) = 1;
  return result;
}

uint64_t sub_1B3A631E8()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + *(int *)(v0 + 68)) = 1;
  return result;
}

void sub_1B3A63250(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v6 = swift_projectBox();
  char v7 = sub_1B39B5AA4();
  unint64_t v8 = sub_1B3A3CCA8(a1, a2, v7 & 1);
  if (v2)
  {
    id v20 = v2;
    id v9 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_5:

      return;
    }

    sub_1B3A067C4(&v18, (uint64_t)v19);
    type metadata accessor for KTraceRecordError();
    sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    unint64_t v10 = (void *)swift_allocError();
    id v12 = v11;
    uint64_t v13 = sub_1B3A3CB04();
    uint64_t v15 = v14;
    sub_1B3A66B0C((uint64_t)v19);
    if (v15)
    {
      *id v12 = 0xD000000000000013;
      v12[1] = 0x80000001B3A7D650;
      v12[2] = v13;
      v12[3] = v15;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_5;
    }

    __break(1u);
  }
  else
  {
    unint64_t v16 = v8;
    swift_beginAccess();
    uint64_t v17 = v6 + *(int *)(v5 + 120);
    *(void *)uint64_t v17 = v16;
    *(unsigned char *)(v17 + 8) = 0;
  }
}

uint64_t sub_1B3A6340C()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + *(int *)(v0 + 112)) = 1;
  return result;
}

uint64_t sub_1B3A63474()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + *(int *)(v0 + 108)) = 1;
  return result;
}

void sub_1B3A634DC(uint64_t a1, unint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v7 = swift_projectBox();
  unint64_t v8 = sub_1B3A3D200(a1, a2);
  if (v2)
  {
    id v19 = v2;
    id v9 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_5:

      return;
    }

    sub_1B3A067C4(&v17, (uint64_t)v18);
    type metadata accessor for KTraceRecordError();
    sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    int v3 = (void *)swift_allocError();
    unint64_t v11 = v10;
    uint64_t v12 = sub_1B3A3CB04();
    uint64_t v14 = v13;
    sub_1B3A66B0C((uint64_t)v18);
    if (v14)
    {
      *unint64_t v11 = 0xD000000000000014;
      v11[1] = 0x80000001B3A7D630;
      v11[2] = v12;
      _OWORD v11[3] = v14;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t v15 = v8;
    if ((v8 & 0x8000000000000000) == 0)
    {
      swift_beginAccess();
      uint64_t v16 = v7 + *(int *)(v6 + 84);
      *(void *)uint64_t v16 = v15;
      *(unsigned char *)(v16 + 8) = 0;
      return;
    }
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1B3A63698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = (void *)(v5 + *(int *)(v4 + 76));
  void *v6 = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A63724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = (void *)(v5 + *(int *)(v4 + 80));
  void *v6 = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A637B0()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + *(int *)(v0 + 88)) = 1;
  return result;
}

uint64_t sub_1B3A63818(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t result = swift_projectBox();
  uint64_t v6 = HIBYTE(a2) & 0xF;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    goto LABEL_56;
  }
  uint64_t v9 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1B3A612F8(a1, a2, 10);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_56;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      unint64_t v10 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v10 = (unsigned __int8 *)sub_1B3A70A20();
    }
    unint64_t v11 = sub_1B3A613E0(v10, v7, 10);
    char v30 = BYTE4(v11) & 1;
    if ((BYTE4(v11) & 1) == 0)
    {
      LODWORD(v12) = v11;
LABEL_36:
      if ((v12 - 64) >= 0xFFFFFFC4)
      {
        uint64_t result = swift_beginAccess();
        uint64_t v19 = v9 + *(int *)(v4 + 92);
        *(_DWORD *)uint64_t v19 = v12;
        *(unsigned char *)(v19 + 4) = 0;
        return result;
      }
      type metadata accessor for KTraceRecordError();
      sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
      swift_allocError();
      *(_DWORD *)uint64_t v18 = v12;
      *(void *)(v18 + 4) = 0x3F00000004;
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
LABEL_56:
    type metadata accessor for KTraceRecordError();
    sub_1B3A66B44((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    swift_allocError();
    *uint64_t v28 = 0xD000000000000015;
    v28[1] = 0x80000001B3A7D610;
    void v28[2] = a1;
    v28[3] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  v29[0] = a1;
  v29[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v6) {
      goto LABEL_61;
    }
    if (v6 == 1) {
      goto LABEL_59;
    }
    LODWORD(v12) = (BYTE1(a1) - 48);
    if (v12 <= 9)
    {
      if (v6 == 2) {
        goto LABEL_34;
      }
      if ((BYTE2(a1) - 48) <= 9u)
      {
        LODWORD(v12) = 10 * v12 + (BYTE2(a1) - 48);
        uint64_t v14 = v6 - 3;
        if (v6 != 3)
        {
          unint64_t v15 = (unsigned __int8 *)v29 + 3;
          while (1)
          {
            unsigned int v16 = *v15 - 48;
            if (v16 > 9) {
              goto LABEL_32;
            }
            uint64_t v17 = 10 * (int)v12;
            if (v17 != (int)v17) {
              goto LABEL_32;
            }
            LODWORD(v12) = v17 + v16;
            if (__OFADD__(v17, v16)) {
              goto LABEL_32;
            }
            LOBYTE(v6) = 0;
            ++v15;
            if (!--v14) {
              goto LABEL_35;
            }
          }
        }
        goto LABEL_34;
      }
    }
LABEL_32:
    LODWORD(v12) = 0;
    LOBYTE(v6) = 1;
    goto LABEL_35;
  }
  if (a1 != 45)
  {
    if (!v6) {
      goto LABEL_32;
    }
    LODWORD(v12) = (a1 - 48);
    if (v12 > 9) {
      goto LABEL_32;
    }
    if (v6 == 1)
    {
LABEL_34:
      LOBYTE(v6) = 0;
      goto LABEL_35;
    }
    if ((BYTE1(a1) - 48) <= 9u)
    {
      LODWORD(v12) = 10 * v12 + (BYTE1(a1) - 48);
      uint64_t v20 = v6 - 2;
      if (v6 != 2)
      {
        id v21 = (unsigned __int8 *)v29 + 2;
        while (1)
        {
          unsigned int v22 = *v21 - 48;
          if (v22 > 9) {
            goto LABEL_32;
          }
          uint64_t v23 = 10 * (int)v12;
          if (v23 != (int)v23) {
            goto LABEL_32;
          }
          LODWORD(v12) = v23 + v22;
          if (__OFADD__(v23, v22)) {
            goto LABEL_32;
          }
          LOBYTE(v6) = 0;
          ++v21;
          if (!--v20) {
            goto LABEL_35;
          }
        }
      }
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v6)
  {
    if (v6 != 1)
    {
      unsigned int v13 = (BYTE1(a1) - 48);
      if (v13 > 9) {
        goto LABEL_32;
      }
      if (v6 == 2)
      {
        LOBYTE(v6) = 0;
        LODWORD(v12) = -v13;
        goto LABEL_35;
      }
      if ((BYTE2(a1) - 48) > 9u) {
        goto LABEL_32;
      }
      LODWORD(v12) = -10 * v13 - (BYTE2(a1) - 48);
      uint64_t v24 = v6 - 3;
      if (v6 != 3)
      {
        uint64_t v25 = (unsigned __int8 *)v29 + 3;
        while (1)
        {
          unsigned int v26 = *v25 - 48;
          if (v26 > 9) {
            goto LABEL_32;
          }
          uint64_t v27 = 10 * (int)v12;
          if (v27 != (int)v27) {
            goto LABEL_32;
          }
          LODWORD(v12) = v27 - v26;
          if (__OFSUB__(v27, v26)) {
            goto LABEL_32;
          }
          LOBYTE(v6) = 0;
          ++v25;
          if (!--v24) {
            goto LABEL_35;
          }
        }
      }
      goto LABEL_34;
    }
LABEL_59:
    LODWORD(v12) = 0;
LABEL_35:
    if ((v6 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_56;
  }
  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}

uint64_t sub_1B3A63C3C()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + *(int *)(v0 + 72)) = 0;
  return result;
}

uint64_t sub_1B3A63CA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B3A63D08(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1B3A63D6C()
{
  unint64_t result = qword_1E9CD63B0;
  if (!qword_1E9CD63B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD63B0);
  }
  return result;
}

unint64_t sub_1B3A63DC4()
{
  unint64_t result = qword_1E9CD63B8;
  if (!qword_1E9CD63B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD63B8);
  }
  return result;
}

unint64_t sub_1B3A63E1C()
{
  unint64_t result = qword_1E9CD63C0;
  if (!qword_1E9CD63C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD63C0);
  }
  return result;
}

unint64_t sub_1B3A63E74()
{
  unint64_t result = qword_1E9CD63C8;
  if (!qword_1E9CD63C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD63C8);
  }
  return result;
}

uint64_t *sub_1B3A63EC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v16 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    *(uint64_t *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    uint64_t v8 = (int *)type metadata accessor for RecordingOptions.Options(0);
    uint64_t v9 = v8[5];
    unint64_t v10 = &v6[v9];
    unint64_t v11 = &v7[v9];
    uint64_t v12 = sub_1B3A6FF40();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(void *)&v6[v8[6]] = *(void *)&v7[v8[6]];
    *(void *)&v6[v8[7]] = *(void *)&v7[v8[7]];
    *(void *)&v6[v8[8]] = *(void *)&v7[v8[8]];
    uint64_t v17 = v8[9];
    uint64_t v18 = &v6[v17];
    uint64_t v19 = &v7[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v8[10];
    id v21 = &v6[v20];
    unsigned int v22 = &v7[v20];
    *(_DWORD *)id v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = v8[11];
    uint64_t v24 = &v6[v23];
    uint64_t v25 = &v7[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    *(void *)&v6[v8[12]] = *(void *)&v7[v8[12]];
    *(void *)&v6[v8[13]] = *(void *)&v7[v8[13]];
    v6[v8[14]] = v7[v8[14]];
    uint64_t v26 = v8[15];
    uint64_t v27 = &v6[v26];
    uint64_t v28 = &v7[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    v6[v8[16]] = v7[v8[16]];
    v6[v8[17]] = v7[v8[17]];
    v6[v8[18]] = v7[v8[18]];
    uint64_t v29 = v8[19];
    char v30 = &v6[v29];
    uint64_t v31 = &v7[v29];
    uint64_t v32 = *((void *)v31 + 1);
    *(void *)char v30 = *(void *)v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = v8[20];
    uint64_t v34 = &v6[v33];
    uint64_t v35 = &v7[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = v8[21];
    uint64_t v38 = &v6[v37];
    unint64_t v39 = &v7[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    v6[v8[22]] = v7[v8[22]];
    uint64_t v40 = v8[23];
    int v41 = &v6[v40];
    int v42 = &v7[v40];
    *(_DWORD *)int v41 = *(_DWORD *)v42;
    v41[4] = v42[4];
    *(void *)&v6[v8[24]] = *(void *)&v7[v8[24]];
    *(void *)&v6[v8[25]] = *(void *)&v7[v8[25]];
    *(void *)&v6[v8[26]] = *(void *)&v7[v8[26]];
    v6[v8[27]] = v7[v8[27]];
    v6[v8[28]] = v7[v8[28]];
    *(void *)&v6[v8[29]] = *(void *)&v7[v8[29]];
    uint64_t v43 = v8[30];
    unint64_t v44 = &v6[v43];
    unint64_t v45 = &v7[v43];
    *(void *)unint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    uint64_t v46 = v8[31];
    unint64_t v47 = &v6[v46];
    uint64_t v48 = &v7[v46];
    uint64_t v49 = *((void *)v48 + 1);
    *(void *)unint64_t v47 = *(void *)v48;
    *((void *)v47 + 1) = v49;
    uint64_t v50 = v8[32];
    char v51 = &v6[v50];
    char v52 = &v7[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *(void *)char v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  return (uint64_t *)v16;
}

uint64_t sub_1B3A642B4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for RecordingOptions.Options(0) + 20);
  uint64_t v6 = sub_1B3A6FF40();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1B3A64438(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  *(void *)((char *)a1 + v3) = *(void *)((char *)a2 + v3);
  uint64_t v6 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = &v4[v7];
  uint64_t v9 = &v5[v7];
  uint64_t v10 = sub_1B3A6FF40();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)&v4[v6[6]] = *(void *)&v5[v6[6]];
  *(void *)&v4[v6[7]] = *(void *)&v5[v6[7]];
  *(void *)&v4[v6[8]] = *(void *)&v5[v6[8]];
  uint64_t v14 = v6[9];
  uint64_t v15 = &v4[v14];
  uint64_t v16 = &v5[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = v6[10];
  uint64_t v18 = &v4[v17];
  uint64_t v19 = &v5[v17];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = v6[11];
  id v21 = &v4[v20];
  unsigned int v22 = &v5[v20];
  *(void *)id v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)&v4[v6[12]] = *(void *)&v5[v6[12]];
  *(void *)&v4[v6[13]] = *(void *)&v5[v6[13]];
  v4[v6[14]] = v5[v6[14]];
  uint64_t v23 = v6[15];
  uint64_t v24 = &v4[v23];
  uint64_t v25 = &v5[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  v4[v6[16]] = v5[v6[16]];
  v4[v6[17]] = v5[v6[17]];
  v4[v6[18]] = v5[v6[18]];
  uint64_t v26 = v6[19];
  uint64_t v27 = &v4[v26];
  uint64_t v28 = &v5[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = v6[20];
  uint64_t v31 = &v4[v30];
  uint64_t v32 = &v5[v30];
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v33;
  uint64_t v34 = v6[21];
  uint64_t v35 = &v4[v34];
  uint64_t v36 = &v5[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  v4[v6[22]] = v5[v6[22]];
  uint64_t v37 = v6[23];
  uint64_t v38 = &v4[v37];
  unint64_t v39 = &v5[v37];
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  void v38[4] = v39[4];
  *(void *)&v4[v6[24]] = *(void *)&v5[v6[24]];
  *(void *)&v4[v6[25]] = *(void *)&v5[v6[25]];
  *(void *)&v4[v6[26]] = *(void *)&v5[v6[26]];
  v4[v6[27]] = v5[v6[27]];
  v4[v6[28]] = v5[v6[28]];
  *(void *)&v4[v6[29]] = *(void *)&v5[v6[29]];
  uint64_t v40 = v6[30];
  int v41 = &v4[v40];
  int v42 = &v5[v40];
  *(void *)int v41 = *(void *)v42;
  v41[8] = v42[8];
  uint64_t v43 = v6[31];
  unint64_t v44 = &v4[v43];
  unint64_t v45 = &v5[v43];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)unint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = v6[32];
  uint64_t v48 = &v4[v47];
  uint64_t v49 = &v5[v47];
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1B3A647D4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  char v58 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_1B3A6FF40();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = v9[9];
  uint64_t v20 = &v7[v19];
  id v21 = &v8[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = v9[10];
  uint64_t v24 = &v7[v23];
  uint64_t v25 = &v8[v23];
  LODWORD(v22) = *(_DWORD *)v25;
  v24[4] = v25[4];
  *(_DWORD *)uint64_t v24 = v22;
  uint64_t v26 = v9[11];
  uint64_t v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  *(void *)&v7[v9[12]] = *(void *)&v8[v9[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v9[14]] = v8[v9[14]];
  uint64_t v30 = v9[15];
  uint64_t v31 = &v7[v30];
  uint64_t v32 = &v8[v30];
  char v33 = v32[8];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v33;
  v7[v9[16]] = v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  uint64_t v34 = v9[19];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v9[20];
  uint64_t v38 = &v7[v37];
  unint64_t v39 = &v8[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = v9[21];
  int v41 = &v7[v40];
  int v42 = &v8[v40];
  uint64_t v43 = *(void *)v42;
  v41[8] = v42[8];
  *(void *)int v41 = v43;
  v7[v9[22]] = v8[v9[22]];
  uint64_t v44 = v9[23];
  unint64_t v45 = &v7[v44];
  uint64_t v46 = &v8[v44];
  LODWORD(v43) = *(_DWORD *)v46;
  v45[4] = v46[4];
  *(_DWORD *)unint64_t v45 = v43;
  *(void *)&v7[v9[24]] = *(void *)&v8[v9[24]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[25]] = *(void *)&v8[v9[25]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[26]] = *(void *)&v8[v9[26]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v9[27]] = v8[v9[27]];
  v7[v9[28]] = v8[v9[28]];
  *(void *)&v7[v9[29]] = *(void *)&v8[v9[29]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v9[30];
  uint64_t v48 = &v7[v47];
  uint64_t v49 = &v8[v47];
  uint64_t v50 = *(void *)v49;
  v48[8] = v49[8];
  *(void *)uint64_t v48 = v50;
  uint64_t v51 = v9[31];
  char v52 = &v7[v51];
  uint64_t v53 = &v8[v51];
  *(void *)char v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v9[32];
  uint64_t v55 = &v7[v54];
  char v56 = &v8[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v58;
}

void *sub_1B3A64C5C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = sub_1B3A6FF40();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
  *(void *)&v5[v7[7]] = *(void *)&v6[v7[7]];
  *(void *)&v5[v7[8]] = *(void *)&v6[v7[8]];
  uint64_t v14 = v7[9];
  uint64_t v15 = &v5[v14];
  int v16 = &v6[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = v7[10];
  uint64_t v18 = &v5[v17];
  uint64_t v19 = &v6[v17];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = v7[11];
  id v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  *(void *)id v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
  *(void *)&v5[v7[13]] = *(void *)&v6[v7[13]];
  v5[v7[14]] = v6[v7[14]];
  uint64_t v23 = v7[15];
  uint64_t v24 = &v5[v23];
  uint64_t v25 = &v6[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  v5[v7[16]] = v6[v7[16]];
  v5[v7[17]] = v6[v7[17]];
  v5[v7[18]] = v6[v7[18]];
  *(_OWORD *)&v5[v7[19]] = *(_OWORD *)&v6[v7[19]];
  *(_OWORD *)&v5[v7[20]] = *(_OWORD *)&v6[v7[20]];
  uint64_t v26 = v7[21];
  uint64_t v27 = &v5[v26];
  uint64_t v28 = &v6[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  v5[v7[22]] = v6[v7[22]];
  uint64_t v29 = v7[23];
  uint64_t v30 = &v5[v29];
  uint64_t v31 = &v6[v29];
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  v30[4] = v31[4];
  *(void *)&v5[v7[24]] = *(void *)&v6[v7[24]];
  *(void *)&v5[v7[25]] = *(void *)&v6[v7[25]];
  *(void *)&v5[v7[26]] = *(void *)&v6[v7[26]];
  v5[v7[27]] = v6[v7[27]];
  v5[v7[28]] = v6[v7[28]];
  *(void *)&v5[v7[29]] = *(void *)&v6[v7[29]];
  uint64_t v32 = v7[30];
  char v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  v33[8] = v34[8];
  *(void *)char v33 = *(void *)v34;
  *(_OWORD *)&v5[v7[31]] = *(_OWORD *)&v6[v7[31]];
  *(_OWORD *)&v5[v7[32]] = *(_OWORD *)&v6[v7[32]];
  return a1;
}

void *sub_1B3A64F4C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  char v61 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_1B3A6FF40();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  swift_bridgeObjectRelease();
  uint64_t v19 = v9[9];
  uint64_t v20 = &v7[v19];
  id v21 = &v8[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v9[10];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  v23[4] = v24[4];
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  uint64_t v25 = v9[11];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)&v7[v9[12]] = *(void *)&v8[v9[12]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
  swift_bridgeObjectRelease();
  v7[v9[14]] = v8[v9[14]];
  uint64_t v28 = v9[15];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  v7[v9[16]] = v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  uint64_t v31 = v9[19];
  uint64_t v32 = &v7[v31];
  char v33 = &v8[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = v9[20];
  uint64_t v37 = &v7[v36];
  uint64_t v38 = &v8[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = v9[21];
  int v42 = &v7[v41];
  uint64_t v43 = &v8[v41];
  *(void *)int v42 = *(void *)v43;
  v42[8] = v43[8];
  v7[v9[22]] = v8[v9[22]];
  uint64_t v44 = v9[23];
  unint64_t v45 = &v7[v44];
  uint64_t v46 = &v8[v44];
  *(_DWORD *)unint64_t v45 = *(_DWORD *)v46;
  v45[4] = v46[4];
  *(void *)&v7[v9[24]] = *(void *)&v8[v9[24]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[25]] = *(void *)&v8[v9[25]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[26]] = *(void *)&v8[v9[26]];
  swift_bridgeObjectRelease();
  v7[v9[27]] = v8[v9[27]];
  v7[v9[28]] = v8[v9[28]];
  *(void *)&v7[v9[29]] = *(void *)&v8[v9[29]];
  swift_bridgeObjectRelease();
  uint64_t v47 = v9[30];
  uint64_t v48 = &v7[v47];
  uint64_t v49 = &v8[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
  uint64_t v50 = v9[31];
  uint64_t v51 = &v7[v50];
  char v52 = &v8[v50];
  uint64_t v54 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = v54;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v9[32];
  char v56 = &v7[v55];
  char v57 = &v8[v55];
  uint64_t v59 = *(void *)v57;
  uint64_t v58 = *((void *)v57 + 1);
  *(void *)char v56 = v59;
  *((void *)v56 + 1) = v58;
  swift_bridgeObjectRelease();
  return v61;
}

uint64_t sub_1B3A65344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B3A65358);
}

uint64_t sub_1B3A65358(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for RecordingOptions.Options(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1B3A65408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B3A6541C);
}

void *sub_1B3A6541C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for RecordingOptions.Options(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1B3A654C4()
{
  uint64_t result = type metadata accessor for RecordingOptions.Options(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1B3A65560(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1B3A6FF40();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v14) = *(void *)((char *)a2 + v14);
    uint64_t v15 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    int v16 = (char *)v4 + v15;
    int v17 = (char *)a2 + v15;
    *(void *)int v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = a3[10];
    uint64_t v19 = a3[11];
    uint64_t v20 = (char *)v4 + v18;
    id v21 = (char *)a2 + v18;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    uint64_t v22 = (char *)v4 + v19;
    uint64_t v23 = (char *)a2 + v19;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    *(void *)((char *)v4 + v24) = *(void *)((char *)a2 + v24);
    uint64_t v25 = a3[15];
    *((unsigned char *)v4 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = a3[17];
    *((unsigned char *)v4 + a3[16]) = *((unsigned char *)a2 + a3[16]);
    *((unsigned char *)v4 + v28) = *((unsigned char *)a2 + v28);
    uint64_t v29 = a3[19];
    *((unsigned char *)v4 + a3[18]) = *((unsigned char *)a2 + a3[18]);
    uint64_t v30 = (void *)((char *)v4 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[20];
    uint64_t v34 = a3[21];
    uint64_t v35 = (void *)((char *)v4 + v33);
    uint64_t v36 = (void *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = (char *)v4 + v34;
    uint64_t v39 = (char *)a2 + v34;
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    uint64_t v40 = a3[23];
    *((unsigned char *)v4 + a3[22]) = *((unsigned char *)a2 + a3[22]);
    uint64_t v41 = (char *)v4 + v40;
    int v42 = (char *)a2 + v40;
    *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
    v41[4] = v42[4];
    uint64_t v43 = a3[25];
    *(void *)((char *)v4 + a3[24]) = *(void *)((char *)a2 + a3[24]);
    *(void *)((char *)v4 + v43) = *(void *)((char *)a2 + v43);
    uint64_t v44 = a3[27];
    *(void *)((char *)v4 + a3[26]) = *(void *)((char *)a2 + a3[26]);
    *((unsigned char *)v4 + v44) = *((unsigned char *)a2 + v44);
    uint64_t v45 = a3[29];
    *((unsigned char *)v4 + a3[28]) = *((unsigned char *)a2 + a3[28]);
    *(void *)((char *)v4 + v45) = *(void *)((char *)a2 + v45);
    uint64_t v46 = a3[30];
    uint64_t v47 = a3[31];
    uint64_t v48 = (char *)v4 + v46;
    uint64_t v49 = (char *)a2 + v46;
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    uint64_t v50 = (void *)((char *)v4 + v47);
    uint64_t v51 = (void *)((char *)a2 + v47);
    uint64_t v52 = v51[1];
    void *v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = a3[32];
    uint64_t v54 = (void *)((char *)v4 + v53);
    uint64_t v55 = (void *)((char *)a2 + v53);
    uint64_t v56 = v55[1];
    void *v54 = *v55;
    v54[1] = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1B3A658F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_1B3A6FF40();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1B3A65A70(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1B3A6FF40();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[10];
  uint64_t v17 = a3[11];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = (char *)a1 + v17;
  id v21 = (char *)a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  uint64_t v23 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = a3[17];
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  *((unsigned char *)a1 + v26) = *((unsigned char *)a2 + v26);
  uint64_t v27 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[20];
  uint64_t v32 = a3[21];
  uint64_t v33 = (void *)((char *)a1 + v31);
  uint64_t v34 = (void *)((char *)a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (char *)a1 + v32;
  uint64_t v37 = (char *)a2 + v32;
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  uint64_t v38 = a3[23];
  *((unsigned char *)a1 + a3[22]) = *((unsigned char *)a2 + a3[22]);
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
  v39[4] = v40[4];
  uint64_t v41 = a3[25];
  *(void *)((char *)a1 + a3[24]) = *(void *)((char *)a2 + a3[24]);
  *(void *)((char *)a1 + v41) = *(void *)((char *)a2 + v41);
  uint64_t v42 = a3[27];
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  *((unsigned char *)a1 + v42) = *((unsigned char *)a2 + v42);
  uint64_t v43 = a3[29];
  *((unsigned char *)a1 + a3[28]) = *((unsigned char *)a2 + a3[28]);
  *(void *)((char *)a1 + v43) = *(void *)((char *)a2 + v43);
  uint64_t v44 = a3[30];
  uint64_t v45 = a3[31];
  uint64_t v46 = (char *)a1 + v44;
  uint64_t v47 = (char *)a2 + v44;
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8] = v47[8];
  uint64_t v48 = (void *)((char *)a1 + v45);
  uint64_t v49 = (void *)((char *)a2 + v45);
  uint64_t v50 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = a3[32];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = (void *)((char *)a2 + v51);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1B3A65DB4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1B3A6FF40();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[10];
  uint64_t v20 = (char *)a1 + v19;
  id v21 = (char *)a2 + v19;
  LODWORD(v18) = *(_DWORD *)v21;
  v20[4] = v21[4];
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[11];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v26 = a3[15];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v29;
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  uint64_t v30 = a3[19];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[20];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  void *v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[21];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = *(void *)v38;
  v37[8] = v38[8];
  *(void *)uint64_t v37 = v39;
  *((unsigned char *)a1 + a3[22]) = *((unsigned char *)a2 + a3[22]);
  uint64_t v40 = a3[23];
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  LODWORD(v39) = *(_DWORD *)v42;
  v41[4] = v42[4];
  *(_DWORD *)uint64_t v41 = v39;
  *(void *)((char *)a1 + a3[24]) = *(void *)((char *)a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[25]) = *(void *)((char *)a2 + a3[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[27]) = *((unsigned char *)a2 + a3[27]);
  *((unsigned char *)a1 + a3[28]) = *((unsigned char *)a2 + a3[28]);
  *(void *)((char *)a1 + a3[29]) = *(void *)((char *)a2 + a3[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[30];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  uint64_t v46 = *(void *)v45;
  v44[8] = v45[8];
  *(void *)uint64_t v44 = v46;
  uint64_t v47 = a3[31];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (void *)((char *)a2 + v47);
  *uint64_t v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[32];
  uint64_t v51 = (void *)((char *)a1 + v50);
  uint64_t v52 = (void *)((char *)a2 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1B3A66200(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1B3A6FF40();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[10];
  uint64_t v17 = a3[11];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = (char *)a1 + v17;
  id v21 = (char *)a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  uint64_t v23 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = a3[17];
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  *((unsigned char *)a1 + v26) = *((unsigned char *)a2 + v26);
  uint64_t v27 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)((char *)a2 + v27);
  uint64_t v28 = a3[21];
  *(_OWORD *)((char *)a1 + a3[20]) = *(_OWORD *)((char *)a2 + a3[20]);
  char v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  *(void *)char v29 = *(void *)v30;
  v29[8] = v30[8];
  uint64_t v31 = a3[23];
  *((unsigned char *)a1 + a3[22]) = *((unsigned char *)a2 + a3[22]);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  v32[4] = v33[4];
  uint64_t v34 = a3[25];
  *(void *)((char *)a1 + a3[24]) = *(void *)((char *)a2 + a3[24]);
  *(void *)((char *)a1 + v34) = *(void *)((char *)a2 + v34);
  uint64_t v35 = a3[27];
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  *((unsigned char *)a1 + v35) = *((unsigned char *)a2 + v35);
  uint64_t v36 = a3[29];
  *((unsigned char *)a1 + a3[28]) = *((unsigned char *)a2 + a3[28]);
  *(void *)((char *)a1 + v36) = *(void *)((char *)a2 + v36);
  uint64_t v37 = a3[30];
  uint64_t v38 = a3[31];
  uint64_t v39 = (char *)a1 + v37;
  uint64_t v40 = (char *)a2 + v37;
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v40[8];
  *(_OWORD *)((char *)a1 + v38) = *(_OWORD *)((char *)a2 + v38);
  *(_OWORD *)((char *)a1 + a3[32]) = *(_OWORD *)((char *)a2 + a3[32]);
  return a1;
}

void *sub_1B3A664A4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1B3A6FF40();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = (char *)a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = (char *)a1 + v16;
  uint64_t v20 = (char *)a2 + v16;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v19[4] = v20[4];
  uint64_t v21 = a3[11];
  uint64_t v22 = a3[12];
  uint64_t v23 = (char *)a1 + v21;
  uint64_t v24 = (char *)a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  uint64_t v28 = a3[17];
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  *((unsigned char *)a1 + v28) = *((unsigned char *)a2 + v28);
  uint64_t v29 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  uint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[20];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *uint64_t v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[21];
  uint64_t v40 = a3[22];
  uint64_t v41 = (char *)a1 + v39;
  uint64_t v42 = (char *)a2 + v39;
  v41[8] = v42[8];
  *(void *)uint64_t v41 = *(void *)v42;
  *((unsigned char *)a1 + v40) = *((unsigned char *)a2 + v40);
  uint64_t v43 = a3[23];
  uint64_t v44 = a3[24];
  uint64_t v45 = (char *)a1 + v43;
  uint64_t v46 = (char *)a2 + v43;
  v45[4] = v46[4];
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  *(void *)((char *)a1 + v44) = *(void *)((char *)a2 + v44);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[25]) = *(void *)((char *)a2 + a3[25]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[28];
  *((unsigned char *)a1 + a3[27]) = *((unsigned char *)a2 + a3[27]);
  *((unsigned char *)a1 + v47) = *((unsigned char *)a2 + v47);
  *(void *)((char *)a1 + a3[29]) = *(void *)((char *)a2 + a3[29]);
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[30];
  uint64_t v49 = a3[31];
  uint64_t v50 = (char *)a1 + v48;
  uint64_t v51 = (char *)a2 + v48;
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  uint64_t v52 = (void *)((char *)a1 + v49);
  uint64_t v53 = (void *)((char *)a2 + v49);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[32];
  char v57 = (void *)((char *)a1 + v56);
  uint64_t v58 = (void *)((char *)a2 + v56);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  *char v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B3A66844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B3A66858);
}

uint64_t sub_1B3A66858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1B3A66920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B3A66934);
}

uint64_t sub_1B3A66934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void sub_1B3A669F8()
{
  sub_1B3A4BBBC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for RecordingOptions.Options.Requests()
{
  return &type metadata for RecordingOptions.Options.Requests;
}

uint64_t sub_1B3A66B0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A66B44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void ktrace_postprocessing_set_completed_handler_cold_1()
{
}

void ktrace_postprocess_file_internal_cold_1()
{
}

void ktrace_postprocess_file_internal_cold_2(os_log_t log)
{
  *(_WORD *)unint64_t v1 = 0;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "post-processing complete", v1, 2u);
}

void ktrace_postprocess_file_internal_cold_3(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "failed to start ktrace session to postprocess file (%{errno}d)", (uint8_t *)v2, 8u);
}

void ktrace_postprocess_file_internal_cold_4(os_log_t log)
{
  *(_WORD *)unint64_t v1 = 0;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "starting post-processing", v1, 2u);
}

void ktariadne_read_times_cold_1(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "unable to decode artrace traceinfo extended chunk (%{errno}d)", (uint8_t *)v2, 8u);
}

void kttimesync_init_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get timezone (%{errno}d)", v2, v3, v4, v5, v6);
}

void kttimesync_init_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get timebase info (%{errno}d)", v2, v3, v4, v5, v6);
}

void kttimesync_init_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to read mach_get_times (%{errno}d)", v2, v3, v4, v5, v6);
}

void __kttimesync_init_block_invoke_2_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unable to decode tailspin time chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void __kttimesync_init_block_invoke_2_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get abstime from tailspin time chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_set_remotetime_conversion_enabled_cold_2()
{
}

void _session_process_events_cold_1()
{
}

void sysctlbyname_string_cold_3()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "sysctlbyname(%s) failed (%{errno}d)");
}

void sysctlbyname_string_cold_7()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "sysctlbyname(%s) size returned got larger (%{errno}d)");
}

void sysctl_number_internal_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void sysctl_number_internal_cold_6()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "sysctl requires too much space %zu (%{errno}d)");
}

void create_dict_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unknown error reading dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void create_dict_cold_2()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "error reading dictionary: %@ (%{errno}d)");
}

void create_dict_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "data does not contain a dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void dict_string_cold_5()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "dictionary value at key '%@' is not a string (%{errno}d)");
}

void dict_number_internal_cold_4()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "cannot convert CFData of size %zu to number (%{errno}d)");
}

void dict_number_internal_cold_5()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "dictionary value at key '%@' should be a number or data (%{errno}d)");
}

void dict_BOOL_cold_4()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "dictionary has no value for key '%@' (%{errno}d)");
}

void dict_BOOL_cold_5()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "dictionary value at key '%@' is not a BOOLean (%{errno}d)");
}

void dict_data_cold_2()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "dictionary value at key '%@' is not data (%{errno}d)");
}

void dict_number_arr_internal_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "array value at index %u is not a number (%{errno}d)");
}

void dict_number_arr_internal_cold_6()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "dictionary value at key '%@' is not an array (%{errno}d)");
}

void dict_set_string_cold_3()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "could not create string from '%s' (%{errno}d)");
}

void dict_set_cfstring_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not allocate C string (%{errno}d)", v2, v3, v4, v5, v6);
}

void dict_set_number_cold_4()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "could not create number of type %ld (%{errno}d)");
}

void dict_set_number_arr_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not create array (%{errno}d)", v2, v3, v4, v5, v6);
}

void dict_set_number_arr_cold_4(int a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67109376;
  HIDWORD(v3) = a1;
  LOWORD(v4) = 1024;
  *(_DWORD *)((char *)&v4 + 2) = a2;
  OUTLINED_FUNCTION_5(&dword_1B39A5000, a2, a3, "could not create number at index %u (%{errno}d)", v3, v4);
}

void ktrace_chunk_map_data_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to map non-file chunk data (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_chunk_map_data_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to map 0 size data of chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_chunk_map_data_cold_6()
{
  __assert_rtn("ktrace_chunk_map_data", "chunk.c", 157, "n <= to_read");
}

void ktrace_chunk_unmap_data_internal_cold_1()
{
}

void ktrace_chunk_copy_plist_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to map chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_chunk_copy_plist_cold_2(__CFError **a1, int a2, NSObject *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = utf8_cferror(*a1);
  int v6 = 136315394;
  uint64_t v7 = v5;
  __int16 v8 = 1024;
  int v9 = a2;
  _os_log_error_impl(&dword_1B39A5000, a3, OS_LOG_TYPE_ERROR, "failed to decode plist chunk: %s (%{errno}d)", (uint8_t *)&v6, 0x12u);
}

void ktrace_chunk_iterate_subchunks_cold_2(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "no chunks to iterate", v1, 2u);
}

void ktrace_chunk_iterate_subchunks_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not validate the first chunk for iteration (%{errno}d)", v2, v3, v4, v5, v6);
}

void append_eventnames_from_path_cold_1(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 136315394;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_error_impl(&dword_1B39A5000, log, OS_LOG_TYPE_ERROR, "failed to append codes file: %s (%{errno}d)", (uint8_t *)&v3, 0x12u);
}

void ktrace_callback_list_add_cold_4()
{
}

void safe_encode_cold_3()
{
}

void ktrace_config_create_current_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to allocate event disabling match (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_config_create_current_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get event disabling matcher (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get lightweight PET status (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_7()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get PET idle rate (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_8()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get kperf sampling status (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_9()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get kperf lazy CPU action (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_10()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get kperf lazy CPU time threshold (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_11()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get kperf lazy wait action (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_12()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get kperf lazy wait time threshold (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_13()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get PET timer ID (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_14()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get action for kdebug trigger (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_15()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "failed to get period for timer %u (%{errno}d)");
}

void config_current_kperf_cold_16()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "failed to get action ID for timer %u (%{errno}d)");
}

void config_current_kperf_cold_17()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get timer count (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kperf_cold_18()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "failed to get user data for action %u (%{errno}d)");
}

void config_current_kperf_cold_19()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "failed to get samplers for action %u (%{errno}d)");
}

void config_current_kperf_cold_20()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get kperf action count (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kpc_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get periods for KPC (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kpc_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get action IDs for KPC (%{errno}d)", v2, v3, v4, v5, v6);
}

void config_current_kpc_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get config for KPC (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_config_serialize_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unknown error reading config dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_config_serialize_cold_3(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_error_impl(&dword_1B39A5000, log, OS_LOG_TYPE_ERROR, "error reading config dictionary: %@ (%{errno}d)", (uint8_t *)&v4, 0x12u);
}

void ktrace_config_serialize_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "length of serialized config is 0 (%{errno}d)", v2, v3, v4, v5, v6);
}

void state_name_cold_1()
{
}

void owner_kind_name_cold_1()
{
}

void context_kind_name_cold_1()
{
}

void trigger_kind_name_cold_1()
{
}

void ktrace_config_kdebug_pid_included_cold_2()
{
}

void ktrace_file_append_local_log_content_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get os_log local store (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_log_content_from_store_cold_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2_0();
  int v3 = v0;
  _os_log_error_impl(&dword_1B39A5000, v1, OS_LOG_TYPE_ERROR, "exception occurred while setting logging predicate: %@ (%{errno}d)", v2, 0x12u);
}

void __ktrace_file_append_log_content_from_store_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to prepare log source for unknown reason (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_cold_2(void *a1, int a2, NSObject *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  [a1 localizedDescription];
  OUTLINED_FUNCTION_2_0();
  int v6 = a2;
  _os_log_error_impl(&dword_1B39A5000, a3, OS_LOG_TYPE_ERROR, "failed to prepare log source: %@ (%{errno}d)", v5, 0x12u);
}

void __ktrace_file_append_log_content_from_store_block_invoke_2_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to append log data (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to append log metadata (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "log stream disconnected while appending (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "log stream backlogged while appending (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "log stream in invalid position while appending (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "log stream requested invalidation while appending (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "log stream unsupported invalidation while appending (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_7()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "log stream had insufficient permissions while appending (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_8()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "log stream failed to evaluate predicate while appending (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_9()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "log stream failed to initialize while appending (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_print_trace_point_cold_1()
{
}

void escape_string_cold_1()
{
  __assert_rtn("escape_string", "event_printing.c", 32, "written >= 1");
}

void thread_cputime_map_update_cold_1()
{
}

void ktrace_set_thread_cputime_enabled_cold_4()
{
}

void fd_size_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot get file size (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_open_internal_cold_1()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "only read %zd bytes of magic word (%{errno}d)");
}

void ktrace_file_open_internal_cold_2()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_9(&dword_1B39A5000, v0, v1, "cannot read %zu bytes at offset 0 to parse version 0 header (%{errno}d)", v2, v3, v4, v5, 0);
}

void ktrace_file_open_internal_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot allocate memory for synthesized artrace chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_open_internal_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot append artrace chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_open_internal_cold_5()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "cannot read artrace block header at offset %lld (%{errno}d)");
}

void ktrace_file_open_internal_cold_6()
{
  OUTLINED_FUNCTION_8(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "file size of %lld is too small to contain a valid trace file\n (%{errno}d)");
}

void ktrace_file_open_internal_cold_7()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_9(&dword_1B39A5000, v0, v1, "failed to read V2 header of %zu bytes (%{errno}d)", v2, v3, v4, v5, 0);
}

void ktrace_file_open_internal_cold_8()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "parsing a V2 file", v2, v3, v4, v5, v6);
}

void ktrace_chunk_array_next_cold_5()
{
  OUTLINED_FUNCTION_8(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_6(&dword_1B39A5000, v0, v1, "consuming last chunk at offset %lld, max offset %lld", v2, v3);
}

void ktrace_chunk_array_next_cold_6(int *a1, uint64_t a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  int v4 = a1[1];
  int v5 = 134218496;
  uint64_t v6 = a2;
  __int16 v7 = 1024;
  int v8 = v3;
  __int16 v9 = 1024;
  int v10 = v4;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "found chunk with header at offset %lld, tag 0x%08x size %u", (uint8_t *)&v5, 0x18u);
}

void ktrace_chunk_array_next_cold_8()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot write correct file size to chunk with EOF size (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_chunk_array_next_cold_9()
{
  OUTLINED_FUNCTION_8(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_6(&dword_1B39A5000, v0, v1, "found EOF size on appendable file, writing actual size %llu at offset %llu", v2, v3);
}

void ktrace_chunk_array_next_cold_10()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "found invalid chunk at offset %lld\n (%{errno}d)");
}

void ktrace_chunk_array_next_cold_11()
{
  OUTLINED_FUNCTION_8(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_6(&dword_1B39A5000, v0, v1, "no initial chunk and asked to iterate from current offset %lld, starting with offset %lld", v2, v3);
}

void ktrace_chunk_array_next_cold_12(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_DEBUG, "no more chunks to return from file, next position %zu", (uint8_t *)&v2, 0xCu);
}

void ktrace_file_iterate_cold_3()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "no chunks to iterate", v2, v3, v4, v5, v6);
}

void ktrace_file_iterate_cold_4()
{
  OUTLINED_FUNCTION_5_0();
  _os_log_fault_impl(&dword_1B39A5000, v0, OS_LOG_TYPE_FAULT, "ktrace_chunk_next returned the same chunk", v1, 2u);
}

void ktrace_file_iterate_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not validate the first chunk for iteration (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_data_cold_5()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "cannot write data of size %zu to file (%{errno}d)");
}

void ktrace_file_append_data_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot seek to end of file (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_file_cold_1()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "failed to open file to append: %s (%{errno}d)");
}

void ktrace_file_append_file_cold_2()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "failed to stat file to append: %s (%{errno}d)");
}

void ktrace_file_append_file_cold_3()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "failed to map file to append: %s (%{errno}d)");
}

void ktrace_file_append_file_cold_4()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "failed to unmap file: %s (%{errno}d)");
}

void ktrace_file_append_start_internal_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot write chunk header to file (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_start_internal_cold_3()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "cannot extend file by %zu bytes (%{errno}d)");
}

void ktrace_file_append_start_internal_cold_4(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_DEBUG, "aligning appended chunk by %zu bytes", (uint8_t *)&v2, 0xCu);
}

void ktrace_file_append_start_internal_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot seek to the end to start appending chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_start_internal_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "chunk with subchunk bit set cannot be created (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_finish_internal_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to write chunk header, truncating the file (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_finish_internal_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot append chunk to internal table (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_align_next_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to extend file (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_align_next_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to extend file by one byte (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_align_next_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to seek to end (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_update_header_size_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot update header size (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_header_append_chunk_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot append header chunk because normal chunks have been appended (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_header_append_chunk_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot append header chunk because chunk is already being appended (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_header_append_chunk_cold_3()
{
}

void ktrace_file_header_append_live_cpu_map_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unable to read CPU map (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_thread_map_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unable to read thread map (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_ktrace_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "Unrecognized compression level (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_ktrace_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "file is not appendable (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_ktrace_cold_4(int a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  __error();
  OUTLINED_FUNCTION_14();
  int v5 = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "cannot seek to end of file after writing events %d (%{errno}d)", v4, 0xEu);
}

void ktrace_file_append_live_ktrace_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "start time only supported when compressing (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_ktrace_transformed_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to allocate read buffer (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_ktrace_transformed_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to allocate scratch buffer (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_ktrace_transformed_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to append transformed events to file (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_ktrace_transformed_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not read events from kernel (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_ktrace_transformed_cold_7()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_1();
  _os_log_debug_impl(&dword_1B39A5000, v0, OS_LOG_TYPE_DEBUG, "starting to read for %u ms", v1, 8u);
}

void ktrace_file_append_live_ktrace_transformed_cold_8()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "compression or filtering must be requested (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_append_live_filtered_ktrace_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "Unrecognized compression level (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_compress_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to allocate scratch buffer (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_compress_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get path to input file (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_compress_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to create temporary file (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_compress_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to fcopyfile (%{errno}d)", v2, v3, v4, v5, v6);
}

void append_transformed_events_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to map chunk data (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_capture_live_stackshot_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to create stackshot config (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_capture_live_stackshot_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "stackshot failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_capture_live_stackshot_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to set flags on stackshot config %{errno}d", v2, v3, v4, v5, v6);
}

void ktrace_file_walltime_offset_cold_3()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "timezone not available, using local timezone instead", v2, v3, v4, v5, v6);
}

void ktrace_file_earliest_timestamp_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "never set timestamp from events (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_earliest_timestamp_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "inner iteration failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_earliest_timestamp_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to iterate file (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_latest_timestamp_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to iterate file to find last timestamp (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_write_header_system_default_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unknown error reading machine dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_write_header_system_default_cold_3()
{
  OUTLINED_FUNCTION_8(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "error reading machine dictionary: %@ (%{errno}d)");
}

void ktrace_file_write_header_system_default_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not append machine chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_file_write_header_internal_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot write file header when creating new file (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_iterate_subfiles_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "invalid subfile: id out of range (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_iterate_subfiles_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "invalid subfile: no header or bad header version (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_iterate_subfiles_block_invoke_2_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "invalid subfile: bad size or version for subfile id chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_iterate_subfiles_block_invoke_2_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "invalid subfile: bad size, version, or position for subfile header chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_iterate_subfiles_block_invoke_2_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "invalid subfile: bad size or version for subfile relationship chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "no CPU map found in V1 file", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot read magic number for CPU map (%{errno}d)", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot read number of CPUs in CPU map (%{errno}d)", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_4()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_14();
  int v3 = v0;
  _os_log_error_impl(&dword_1B39A5000, v1, OS_LOG_TYPE_ERROR, "value at CPU count was %u (%{errno}d)", v2, 0xEu);
}

void parse_v1_file_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot create chunk for CPU map (%{errno}d)", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_6()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "CPU map found in V1+ file", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_7()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot append synthesized CPU map chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LOWORD(v3) = 2048;
  *(void *)((char *)&v3 + 2) = a2;
  OUTLINED_FUNCTION_13(&dword_1B39A5000, a2, a3, "CPU map found with %u CPUs, of size %llu", 67109376, (void)v3);
}

void parse_v1_file_cold_9()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "CPU map location cannot be determined (%{errno}d)", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_10()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "synthesized thread map chunk", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_11()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "walltime in V1 header in high bytes", v2, v3, v4, v5, v6);
}

void parse_v1_file_cold_12()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "read only %zu bytes of V1 header (%{errno}d)");
}

void parse_v1_file_cold_13()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "parsing a V1 file", v2, v3, v4, v5, v6);
}

void parse_v3_header_cold_1()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "only read %zu bytes of V3 header (%{errno}d)");
}

void parse_v3_header_cold_2()
{
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_6(&dword_1B39A5000, v0, v1, "V3 file has header with size %llu, header size %llu", v2, v3);
}

void parse_v3_header_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3 = "active";
  if (!*(_DWORD *)(a1 + 184)) {
    uint64_t v3 = "inactive";
  }
  LOWORD(v4) = 2080;
  *(void *)((char *)&v4 + 2) = v3;
  OUTLINED_FUNCTION_13(&dword_1B39A5000, a2, a3, "file has timezone of %u minutes west, DST %s", 67109378, (const char *)v4);
}

void __parse_artrace_file_block_invoke_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "size of artrace trace info block is smaller than structure (%{errno}d)", v2, v3, v4, v5, v6);
}

void __parse_artrace_file_block_invoke_cold_6()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_9(&dword_1B39A5000, v0, v1, "size of artrace extended trace info block is %llu (%{errno}d)", v2, v3, v4, v5, 0);
}

void __parse_artrace_file_block_invoke_cold_7()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "cannot allocate memory for artrace extended trace info data of size %llu (%{errno}d)");
}

void __parse_artrace_file_block_invoke_cold_8()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not find K64 key in extended trace info block (%{errno}d)", v2, v3, v4, v5, v6);
}

void __parse_artrace_file_block_invoke_cold_9()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not get 32-bit unsigned integer from CFNumber (%{errno}d)", v2, v3, v4, v5, v6);
}

void __parse_artrace_file_block_invoke_cold_10()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unsupported type for k64 value (%{errno}d)", v2, v3, v4, v5, v6);
}

void synthesize_thread_map_chunk_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot append synthesized thread map chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void synthesize_thread_map_chunk_cold_2()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "cannot allocate %zu bytes to read thread map (%{errno}d)");
}

void synthesize_thread_map_chunk_cold_3()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "V1 file is 32-bits with uintptr_t aligned 4", v2, v3, v4, v5, v6);
}

void synthesize_thread_map_chunk_cold_4()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "V1 file is 32-bits with uintptr_t aligned 8", v2, v3, v4, v5, v6);
}

void synthesize_thread_map_chunk_cold_5()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "V1 file is 64-bits", v2, v3, v4, v5, v6);
}

void synthesize_thread_map_chunk_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "V1 thread map is not valid (%{errno}d)", v2, v3, v4, v5, v6);
}

void synthesize_thread_map_chunk_cold_7()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "V1 file has no 64-bit thread map", v2, v3, v4, v5, v6);
}

void synthesize_thread_map_chunk_cold_8()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "V1 file has no 32-bit thread map", v2, v3, v4, v5, v6);
}

void synthesize_events_chunk_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot read first event's timestamp (%{errno}d)", v2, v3, v4, v5, v6);
}

void synthesize_events_chunk_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot create chunk for events (%{errno}d)", v2, v3, v4, v5, v6);
}

void synthesize_events_chunk_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot append synthesized events chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void synthesize_events_chunk_cold_4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 134218240;
  *(void *)&v3[4] = a2;
  *(_WORD *)&v3[12] = 2048;
  *(void *)&v3[14] = *(void *)(a1 + 280) - a2;
  OUTLINED_FUNCTION_6(&dword_1B39A5000, a2, a3, "creating synthetic events chunk at offset %lld of size %lld", *(void *)v3, *(void *)&v3[8]);
}

void synthesize_events_chunk_cold_5()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, v0, v1, "first 64-bit event's unused field is 0, cannot be a 32-bit file", v2, v3, v4, v5, v6);
}

void synthesize_events_chunk_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot read first 64-bit event's unused field (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_iterate_subfile_block_invoke_2_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "invalid subfile: unexpected subchunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void __ktrace_file_iterate_subfile_block_invoke_2_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "invalid subfile: bad size, version, or position for subfile id chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void setup_events_chunk_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to start appending chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void setup_events_chunk_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to append events header to chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void finish_events_chunk_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to finish appending chunk (%{errno}d)", v2, v3, v4, v5, v6);
}

void finish_events_chunk_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to update compressed events count (%{errno}d)", v2, v3, v4, v5, v6);
}

void flatbuffers::FlatBufferBuilder::GetBufferPointer()
{
}

{
  __assert_rtn("data", "flatbuffers.h", 1020, "cur_");
}

void flatbuffers::Allocator::reallocate_downward()
{
}

void flatbuffers::FlatBufferBuilder::NotNested()
{
}

{
  __assert_rtn("NotNested", "flatbuffers.h", 1434, "!nested");
}

void flatbuffers::vector_downward::ensure_space()
{
  __assert_rtn("ensure_space", "flatbuffers.h", 992, "cur_ >= scratch_ && scratch_ >= buf_");
}

{
  __assert_rtn("ensure_space", "flatbuffers.h", 996, "size() < FLATBUFFERS_MAX_BUFFER_SIZE");
}

void flatbuffers::FlatBufferBuilder::ReferTo()
{
  __assert_rtn("ReferTo", "flatbuffers.h", 1421, "off && off <= GetSize()");
}

void flatbuffers::FlatBufferBuilder::EndTable()
{
}

{
  __assert_rtn("EndTable", "flatbuffers.h", 1467, "table_object_size < 0x10000");
}

{
  __assert_rtn("scratch_end", "flatbuffers.h", 1030, "scratch_");
}

{
  __assert_rtn("scratch_data", "flatbuffers.h", 1025, "buf_");
}

{
  __assert_rtn("EndTable", "flatbuffers.h", 1478, "!ReadScalar<voffset_t>(buf_.data() + field_location->id)");
}

void flatbuffers::FlatBufferBuilder::EndVector()
{
}

void flatbuffers::FlatBufferBuilder::Finish()
{
  __assert_rtn("Finish", "flatbuffers.h", 2155, "strlen(file_identifier) == kFileIdentifierLength");
}

void _session_start_file_cold_4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "no timebase found in the file; using current system timebase",
    v1,
    2u);
}

void _session_start_file_cold_5(int *a1, int *a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  int v4 = *a2;
  v5[0] = 67109376;
  v5[1] = v3;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "no timebase found in the file; using supplemental timebase (%d / %d)",
    (uint8_t *)v5,
    0xEu);
}

void _session_start_live_cold_1()
{
}

void _session_start_live_cold_2()
{
}

void _session_start_live_cold_4()
{
}

void _session_start_live_cold_7(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _session_start_live_cold_8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _session_start_live_cold_9(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_error_impl(&dword_1B39A5000, log, OS_LOG_TYPE_ERROR, "failed to start tracing with providers: %@ (%{errno}d)", (uint8_t *)&v4, 0x12u);
}

void _session_start_live_cold_10()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unable to disable tracing for existing trace mode (%{errno}d)", v2, v3, v4, v5, v6);
}

void _session_start_live_cold_11()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot set event match disable (%{errno}d)", v2, v3, v4, v5, v6);
}

void _session_start_live_cold_12()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "unable to initialize tracing (%{errno}d)", v2, v3, v4, v5, v6);
}

void _session_start_live_cold_13()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "existing session cannot take over live session (%{errno}d)", v2, v3, v4, v5, v6);
}

void _session_start_live_cold_14()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "attempt to trace from two sessions at once denied (%{errno}d)", v2, v3, v4, v5, v6);
}

void _session_start_live_cold_15()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "attempt to live trace but not available (%{errno}d)", v2, v3, v4, v5, v6);
}

void _session_start_live_cold_16(int a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  geteuid();
  OUTLINED_FUNCTION_3();
  int v5 = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "cannot live trace with euid %d (%{errno}d)", v4, 0xEu);
}

void ktrace_reset_existing_cold_1()
{
}

void __drain_events_block_block_invoke_cold_1()
{
}

void __drain_events_block_block_invoke_cold_4(int a1, int a2, NSObject *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v5 = 136315394;
  uint64_t v6 = strerror(a1);
  __int16 v7 = 1024;
  int v8 = a2;
  _os_log_error_impl(&dword_1B39A5000, a3, OS_LOG_TYPE_ERROR, "trace collection failed: %s (%{errno}d)", (uint8_t *)&v5, 0x12u);
}

void __drain_events_block_block_invoke_cold_6(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_4_0(&dword_1B39A5000, a1, a3, "trace returned empty", a5, a6, a7, a8, 0);
}

void __drain_events_block_block_invoke_cold_7()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_3();
  int v3 = v0;
  _os_log_error_impl(&dword_1B39A5000, v1, OS_LOG_TYPE_ERROR, "trace collection failed: %d (%{errno}d)", v2, 0xEu);
}

void kdebug_wait_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KERN_KDBUFWAIT failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void kdebug_read_events_cold_1()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "KERN_KDREADTR failed to read %zu bytes (%{errno}d)");
}

void kdebug_write_events_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KERN_KDWRITETR failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void kdebug_get_bufinfo_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KERN_KDGETBUF failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void kdebug_alloc_current_cpu_map_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KERN_KDCPUMAP_EXT failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void kdebug_alloc_current_cpu_map_cold_5()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "KERN_KDCPUMAP_EXT failed %zu (%{errno}d)");
}

void kdebug_alloc_current_thread_map_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KERN_KDREADCURTHRMAP failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void kdebug_alloc_thread_map_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KERN_KDTHRMAP failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace::RingBufferImpl::handleTracepoint()
{
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "WARNING: The maximum ring buffer size has been reached. The trace will not be able to cover the full requested ring buffer time. (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "ERROR: Timestamp size exceeded. Trace file will probably be corrupted and unreadable. You can fix this by rebooting. (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67109376;
  HIDWORD(v3) = *(unsigned __int8 *)(a1 + 3);
  LOWORD(v4) = 1024;
  *(_DWORD *)((char *)&v4 + 2) = a2;
  OUTLINED_FUNCTION_5(&dword_1B39A5000, a2, a3, "ERROR: Timestamps out of order for class 0x%x. Trace file will probably be corrupted and unreadable. Please file a bug against Purple Ariadne with this trace. (%{errno}d)", v3, v4);
}

void ktrace::RingBufferImpl::handleCompletion()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "ERROR: Failed to create kdebug events chunk in output file (%{errno}d)", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-events for additional help. (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace::RingBufferImpl::handleCompletion(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_error_impl(&dword_1B39A5000, log, OS_LOG_TYPE_ERROR, "ERROR: Failed to write %ld kdebug events into chunk in output file (%{errno}d)", (uint8_t *)&v3, 0x12u);
}

void ktrace::RingBufferImpl::RingBufferImpl()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "ERROR: Couldn't allocate ring buffer. (%{errno}d)", v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "ERROR: Couldn't get total memory size: %{darwin.errno}d (%{errno}d)");
}

void ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory()
{
}

void _session_end_internal_cold_3()
{
}

void _session_teardown_cold_2()
{
}

void _session_teardown_cold_4(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "could not find last timestamp, not writing summary chunk (%{errno}d)", (uint8_t *)v2, 8u);
}

void ktrace_start_cold_4()
{
}

void ktrace_start_cold_6()
{
}

void ktrace_start_cold_11()
{
}

void ktrace_start_cold_12(unsigned __int8 *a1)
{
}

void ktrace_file_append_ioreg_cold_1(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "error writing ioreg plist (%{errno}d)", (uint8_t *)v2, 8u);
}

void ktrace_machine_create_current_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to fill machine from sysctl (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_create_current_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "device UUID is NULL, cannot create machine (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_create_current_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not set internal content in dict (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_create_current_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to fill machine clusters (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_create_current_cold_6()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to get IORegistry entry for cpus (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_create_current_cold_7(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "ignoring CPU due to missing logical-cpu-id property", buf, 2u);
}

void ktrace_machine_create_current_cold_8()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot find BuildVersion in SupplementalVersionDictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_create_current_cold_9()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot find ProductName in SupplementalVersionDictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_create_current_cold_10()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot find ProductVersion in SupplementalVersionDictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_fill_name_cold_1(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&v3[4] = *a1;
  *(_WORD *)&v3[12] = 1024;
  *(_DWORD *)&v3[14] = a2;
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, a2, a3, "cannot determine if current task is entitled to user-assigned device name: %@ (%{errno}d)", *(void *)v3, *(void *)&v3[8], *(_WORD *)&v3[16], *MEMORY[0x1E4F143B8]);
}

void ktrace_machine_fill_name_cold_2(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "cannot access user-assigned device name without entitlement", v1, 2u);
}

void ktrace_machine_fill_volume_size_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "overflow when getting root volume size (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_fill_volume_size_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "could not set root volume size in dict (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_fill_volume_size_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot stat root node (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_create_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 136315394;
  *(void *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 1024;
  *(_DWORD *)&v3[14] = a2;
}

void ktrace_machine_v1_2_cold_1()
{
  OUTLINED_FUNCTION_1();
}

void ktrace_machine_v1_3_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot find clusters by CPU in machine dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_v1_3_cold_2()
{
  OUTLINED_FUNCTION_1();
}

void ktrace_machine_v1_4_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot find dies by CPU in machine dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_machine_v1_4_cold_2()
{
  OUTLINED_FUNCTION_1();
}

void ktrace_start_writing_fd_cold_2()
{
}

void ktrace_start_writing_fd_cold_3(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "unable to create output ktrace_file when starting to trace (%{errno}d)", (uint8_t *)v2, 8u);
}

void ktrace_start_writing_file_cold_4(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "unable to open output trace file (%{errno}d)", (uint8_t *)v2, 8u);
}

void _session_ensure_uuidmap_cold_1(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_ERROR, "failed to get ktrace_machine_t for session. (%{errno}d)", (uint8_t *)v2, 8u);
}

void ktrace_stream_iterate_group_cold_4()
{
}

void convert_events_cold_5(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_1B39A5000, a2, OS_LOG_TYPE_DEBUG, "did not convert data, provided data with size %zu", (uint8_t *)&v2, 0xCu);
}

void ktrace_iter_init_chunk_cold_2(const __CFData *a1, uint64_t *a2, NSObject *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFDataGetLength(a1);
  uint64_t v6 = *a2;
  int v7 = 134218240;
  CFIndex v8 = Length;
  __int16 v9 = 2048;
  uint64_t v10 = v6;
  _os_log_debug_impl(&dword_1B39A5000, a3, OS_LOG_TYPE_DEBUG, "decompressed %zu bytes, but expected %zu", (uint8_t *)&v7, 0x16u);
}

void kthmap_update_stackshot_cold_2(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_0(a1, a2);
  OUTLINED_FUNCTION_2_1(&dword_1B39A5000, v2, v3, "invalid stackshot", v4);
}

void kthmap_update_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "new thread has no associated task (%{errno}d)", v2, v3, v4, v5, v6);
}

void kthmap_update_cold_2(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1B39A5000, log, OS_LOG_TYPE_DEBUG, "task unique ID's aren't consistent", v1, 2u);
}

void ktrace_thread_map_update_prepass_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "thread groups found on 32-bit target (%{errno}d)", v2, v3, v4, v5, v6);
}

void create_dictionary_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to create CFData for dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void create_dictionary_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "failed to create property list from data (%{errno}d)", v2, v3, v4, v5, v6);
}

void create_dictionary_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "deserialized property list is not a dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ariadne_thread_dict_apply_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot find pid key in thread dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ariadne_thread_dict_apply_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot convert tid key to number (%{errno}d)", v2, v3, v4, v5, v6);
}

void _ariadne_process_dict_apply_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "cannot find name key in thread dictionary (%{errno}d)", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_create_cold_1(char a1, uint64_t a2, NSObject *a3)
{
  if (a1) {
    LOWORD(v3) = 0;
  }
  else {
    int v3 = *(_DWORD *)(a2 + 196);
  }
  LOWORD(v4) = 1024;
  HIWORD(v4) = v3;
  OUTLINED_FUNCTION_5(&dword_1B39A5000, a2, a3, "unknown arch: type = %#x, subtype = %#x", 67109376, v4);
}

void ktrace_address_space_append()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "refusing to append symbol owner with a null uuid to address space!\n", v2, v3, v4, v5, v6);
}

{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  WORD2(v4) = 2048;
  HIWORD(v4) = v0;
  OUTLINED_FUNCTION_13_0(&dword_1B39A5000, v1, v2, "refusing to append a second shared cache to address space!\nold start address = %llx\nnew start address = %llx\n", v3, v4);
}

void ktrace_address_space_from_stackshot()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "bad stackshot: unbalanced containers!", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "bad stackshot: no STACKSHOT_KCTYPE_TASK_SNAPSHOT or pid is -1", v2, v3, v4, v5, v6);
}

void ktrace_address_space_from_stackshot(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_0(a1, a2);
  OUTLINED_FUNCTION_10_0(&dword_1B39A5000, v2, v3, "invalid stackshot", v4);
}

void ktrace_uuid_map_update_with_stackshot_cold_1()
{
  __assert_rtn("ktrace_address_space_merge", "trace_symbolicate.mm", 1201, "owner->start <= old_owner.start");
}

void ktrace_address_space_deep_iterate_symbol_owners()
{
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "invalid tailspin process info chunk: plist decode", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_2()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "invalid tailspin process info chunk: bad Pid or LoadInfos", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_9_0(&dword_1B39A5000, v0, v1, "tailspin process info chunk invalid pid (%ld), ignoring", v2);
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "not a dict", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "not a number", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "invalid tailspin symbols chunk: plist decode", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_3()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "tailspin symbols chunk says size is zero.  Guessing size from symbols", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_4()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "invalid tailspin symbols chunk: bad Size, UUID_String or TEXT_EXEC", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_5()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "not a BOOLean", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "not a string", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "invalid ariadne chunk", v2, v3, v4, v5, v6);
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "invalid process dict in ariadne chunk", v2, v3, v4, v5, v6);
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_0(a1, a2);
  OUTLINED_FUNCTION_2_2(&dword_1B39A5000, v2, (uint64_t)v2, "not a string", v3);
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_0(a1, a2);
  OUTLINED_FUNCTION_2_2(&dword_1B39A5000, v2, (uint64_t)v2, "not a number", v3);
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_0(a1, a2);
  OUTLINED_FUNCTION_2_2(&dword_1B39A5000, v2, (uint64_t)v2, "not a dictionary", v3);
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "not an array", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_inodes_with_chunk_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "failed to map inodes chunk", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_inodes_with_chunk_cold_2(__CFError **a1)
{
  utf8_cferror(*a1);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_7_0(&dword_1B39A5000, v1, v2, "failed to decode inodes chunk: %s", v3, v4, v5, v6, v7);
}

void ktrace_uuid_map_learn_inodes_with_chunk_cold_4()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "saw a second inodes chunk!?  Invalid file.  Ignoring.", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_read_process_info_dict()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "process info dict has no images", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "process info dict image has no uuid", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "process info dict segment has no name", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "process info dict segment has no address", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_9_0(&dword_1B39A5000, v0, v1, "process info dict segment has invalid address: %@", v2);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "process info dict segment has no length", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_9_0(&dword_1B39A5000, v0, v1, "process info dict segment has invalid length: %@", v2);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "process info dict has invalid uuid", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "process info dict has no pid", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_read_process_info_dict(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_0(a1, a2);
  OUTLINED_FUNCTION_2_2(&dword_1B39A5000, v2, (uint64_t)v2, "not an array", v3);
}

void ktrace_uuid_map_learn_kernelmap_with_chunk_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "failed to parse kernel map", v2, v3, v4, v5, v6);
}

void ktrace_uuid_map_learn_process_info_with_chunk_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "failed to parse process info chunk", v2, v3, v4, v5, v6);
}

void dyldtp_decode_window_update()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_14_0();
  _os_log_error_impl(&dword_1B39A5000, v0, OS_LOG_TYPE_ERROR, "ignoring DBG_DYLD tracepoint with a threadid of -1, at time %llu", v1, 0xCu);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "DBG_DYLD decode error.  UUID high bits cut off.  rdar://problem/53183775", v2, v3, v4, v5, v6);
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_1(uint64_t a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(_DWORD *)buf = 136315394;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2048;
  *(void *)(buf + 14) = v4;
  _os_log_error_impl(&dword_1B39A5000, log, OS_LOG_TYPE_ERROR, "missing dyld unload event for uuid %s at address %llx rdar://problem/54088896", buf, 0x16u);
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_12(a1, a2, a3, 4.8151e-34);
  _os_log_error_impl(&dword_1B39A5000, v4, OS_LOG_TYPE_ERROR, "dyld tracepoints show a lib(%s), likely from sharedcache(%s), but no dscsym available", v3, 0x16u);
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_3()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "got null UUID from DBG_DYLD_UUID_MAP_A", v2, v3, v4, v5, v6);
}

void ktrace_address_space_merge_owner()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "kext UUID mismatch rdar://problem/56379326", v2, v3, v4, v5, v6);
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_76_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "got null UUID from DBG_DYLD_UUID_SHARED_CACHE_A", v2, v3, v4, v5, v6);
}

void make_image_summary(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v4 = 136315394;
  uint64_t Path = CSSymbolOwnerGetPath();
  __int16 v6 = 2080;
  uint64_t Name = CSSymbolOwnerGetName();
  _os_log_fault_impl(&dword_1B39A5000, a3, OS_LOG_TYPE_FAULT, "null uuid found for symbol owner (%s, %s)", (uint8_t *)&v4, 0x16u);
}

uint64_t make_image_summary(void *a1, const char *a2, uint64_t a3, uint64_t a4, void *a5)
{
  bzero(a1, 0x801uLL);
  size_t v8 = strlen(a2);
  uint64_t v9 = 1024;
  if (v8 < 0x400) {
    uint64_t v9 = v8;
  }
  if (v9)
  {
    uint64_t v10 = 2 * v9;
    size_t v11 = 2049;
    unint64_t v12 = (char *)a1;
    do
    {
      int v13 = *a2++;
      snprintf(v12, v11, "%0hhx", v13);
      v11 -= 2;
      v12 += 2;
    }
    while (v10 + v11 != 2049);
  }
  CSSymbolOwnerGetSymbolicator();
  if (CSIsNull()) {
    int Pid = -1;
  }
  else {
    int Pid = CSSymbolicatorGetPid();
  }
  bzero(a5, 0xC00uLL);
  uint64_t result = snprintf((char *)a5, 0xC00uLL, "non-UTF-8 path: %s, pid: %d", (const char *)a1, Pid);
  qword_1E9CD63F0 = (uint64_t)a5;
  __break(1u);
  return result;
}

void ktrace_uuid_map_postprocess_file_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_14_0();
  _os_log_debug_impl(&dword_1B39A5000, v0, OS_LOG_TYPE_DEBUG, "no CPU count found in file, using %llu", v1, 0xCu);
}

void __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "failed to visit UUIDs: %d (%{errno}d)");
}

void __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "failed to create thread for call: %d (%{errno}d)");
}

void __ktrace_symbolicate_file_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "invalid symbols chunk", v2, v3, v4, v5, v6);
}

void __ktrace_symbolicate_file_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "failed to map symbols chunk", v2, v3, v4, v5, v6);
}

void ktrace_make_symbolicator(uint64_t a1, unsigned __int8 *a2)
{
  describe2(a1, a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "failed to create a symbolicator for %s\n", v4, v5, v6, v7, v8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  describe2(a1, a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "failed to set up symbolicator for %s: expected 1 symbol owner\n", v4, v5, v6, v7, v8);
}

void ktrace_symboilcator_learn_ariadne_chunk()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "invalid ariadne chunk", v2, v3, v4, v5, v6);
}

void ktrace_symboilcator_learn_tailspin_chunk()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "invalid tailspin symbols chunk: bad UUID_String, TEXT_EXEC or Symbols", v2, v3, v4, v5, v6);
}

void ktrace_copy_symbolicator_from_chunk_cold_5()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "failed to read signature in symbols chunk", v2, v3, v4, v5, v6);
}

void ktrace_copy_symbolicator_from_chunk_cold_6()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_2(&dword_1B39A5000, v0, v1, "failed to read symbols chunk header", v2, v3, v4, v5, v6);
}

void ktrace_address_space_create_cssymbolicator()
{
  OUTLINED_FUNCTION_5_0();
  _os_log_debug_impl(&dword_1B39A5000, v0, OS_LOG_TYPE_DEBUG, "Couldn't find any binary image infos.  Symbolicator will be NULL\n", v1, 2u);
}

void ktrace_dsym_search_configuration_create_with_plist_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "ktrace_dsym_search_configuration_create_with_plist(): not a dictionary", v2, v3, v4, v5, v6);
}

void __ktrace_dsym_search_configuration_create_with_plist_block_invoke_cold_1(const __CFString *a1)
{
  utf8(a1);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_7_0(&dword_1B39A5000, v1, v2, "unknown dsym_search_configuration key: %s", v3, v4, v5, v6, v7);
}

void ktrace_symbols_buffer_to_text_cold_1()
{
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "invalid inode map\n", v2, v3, v4, v5, v6);
}

void CSRegionGetSegmentName(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3 = "<unknown>";
  if (a1) {
    LOWORD(v3) = a1;
  }
  LODWORD(v4) = 136315394;
  *(void *)((char *)&v4 + 4) = a2;
  WORD6(v4) = 2080;
  HIWORD(v4) = (_WORD)v3;
  OUTLINED_FUNCTION_13_0(&dword_1B39A5000, a2, a3, "malformed segment name: '%s', from macho: '%s'", (const char *)v4, *((const char **)&v4 + 1));
}

void ktrace_collect_uuid_offset()
{
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_cold_1(uint64_t *a1, unsigned __int8 **a2)
{
  describe2(*a1, *a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "failed to create signature for %s\n", v4, v5, v6, v7, v8);
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_200_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  _os_log_debug_impl(&dword_1B39A5000, v0, OS_LOG_TYPE_DEBUG, "failed to write symbols chunk\n", v1, 2u);
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_200_cold_2(uint64_t *a1, unsigned __int8 **a2)
{
  describe2(*a1, *a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "added symbols for %s\n", v4, v5, v6, v7, v8);
}

void ktrace_find_executable(uint64_t a1, unsigned __int8 *a2)
{
  describe2(a1, a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "could not find executable for %s\n", v4, v5, v6, v7, v8);
}

void ktrace_find_executable()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_1(&dword_1B39A5000, v0, v1, "fdopen failed!\n", v2, v3, v4, v5, v6);
}

{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  _os_log_error_impl(&dword_1B39A5000, v0, OS_LOG_TYPE_ERROR, "failed to parse output from command: %s\n", v1, 0xCu);
}

{
  int v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  int v4;
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  uint64_t v3 = 1024;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_1B39A5000, v1, OS_LOG_TYPE_ERROR, "command failed: %s (exit status %d)\n", v2, 0x12u);
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  os_log_t v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_7_0(&dword_1B39A5000, v1, v2, "pipe failed: %s\n", v3, v4, v5, v6, v7);
}

void ktrace_find_executable(FILE *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = ferror(a1);
  strerror(v3);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_9_0(&dword_1B39A5000, a2, v4, "error reading from pipe! %s\n", v5);
}

void ktrace_find_executable(const __CFString *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  utf8(a1);
  OUTLINED_FUNCTION_6_0();
  __int16 v6 = 2080;
  uint64_t v7 = a2;
  _os_log_debug_impl(&dword_1B39A5000, a3, OS_LOG_TYPE_DEBUG, "found executable: %s\n\tusing command: %s\n", v5, 0x16u);
}

void ktrace_find_executable(NSObject *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __error();
  strerror(*v2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_9_0(&dword_1B39A5000, a1, v3, "waitpid failed! %s\n", v4);
}

void ktrace_find_executable(int *a1)
{
  strerror(*a1);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_7_0(&dword_1B39A5000, v1, v2, "posix_spawn failed: %s\n", v3, v4, v5, v6, v7);
}

void ktrace_find_arch_with_default(uint64_t a1, unsigned __int8 *a2)
{
  describe2(a1, a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "could not figure out arch for %s\n", v4, v5, v6, v7, v8);
}

void ktrace_find_segment_count(uint64_t a1, unsigned __int8 *a2)
{
  describe2(a1, a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "could not figure segment count for %s\n", v4, v5, v6, v7, v8);
}

void ktrace_find_image_type(uint64_t a1, unsigned __int8 *a2)
{
  describe2(a1, a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "could not figure out image type for %s\n", v4, v5, v6, v7, v8);
}

void ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2_cold_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_12(a1, a2, a3, 4.8151e-34);
  _os_log_debug_impl(&dword_1B39A5000, v4, OS_LOG_TYPE_DEBUG, "coulnd't figure out segment length for %s of %s\n", v3, 0x16u);
}

void ktrace_iterate_segments(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  OUTLINED_FUNCTION_9_0(&dword_1B39A5000, a3, (uint64_t)a3, "invalid image summary for %s", (uint8_t *)a2);
}

void ktrace_find_base_address(uint64_t a1, unsigned __int8 *a2)
{
  describe2(a1, a2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_5_1(&dword_1B39A5000, v2, v3, "could not figure out base address for %s\n", v4, v5, v6, v7, v8);
}

void flatbuffers::IntToStringHex()
{
  __assert_rtn("IntToStringHex", "util.h", 208, "i >= 0");
}

void flatbuffers::IterateObject()
{
}

{
  __assert_rtn("InlineSize", "minireflect.h", 99, "false");
}

void flatbuffers::IterateValue()
{
}

{
  __assert_rtn("Get", "flatbuffers.h", 279, "i < size()");
}

{
  __assert_rtn("IterateValue", "minireflect.h", 227, "false");
}

void trace_set_enable_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "KDENABLE sysctl failed setting to %d (%{errno}d)");
}

void trace_get_bufinfo_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KDGETBUF sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void trace_readtrace_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KDREADTR sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void trace_set_filter_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KDSET_TYPEFILTER sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void trace_parse_filter_cold_1()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "parsing filter: invalid directive: '%s' (%{errno}d)");
}

void trace_parse_filter_cold_2()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "parsing filter: invalid class: %s (%{errno}d)");
}

void trace_parse_filter_cold_3()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "parsing filter: class out of range: %s (%{errno}d)");
}

void trace_parse_filter_cold_4()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "parsing filter: unexpected extra string contents in class filter: '%s' (%{errno}d)");
}

void trace_parse_filter_cold_5()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "parsing filter: invalid subclass: %s (%{errno}d)");
}

void trace_parse_filter_cold_6()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "parsing filter: subclass out of range: %s (%{errno}d)");
}

void trace_parse_filter_cold_7()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B39A5000, v0, v1, "parsing filter: unexpected extra string contents in subclass filter: '%s' (%{errno}d)");
}

void trace_parse_filter_cold_8()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "parsing filter: unexpected end of string (%{errno}d)", v2, v3, v4, v5, v6);
}

void trace_set_pid_filter_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KDPID{TR,EX} sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void trace_initialize_bufs_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KERN_KDSETBUF sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void trace_initialize_bufs_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KERN_KDSETUP sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void trace_set_flags_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "KDEFLAGS %u sysctl failed (%{errno}d)");
}

void trace_set_event_match_disable_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KDSET_EDM sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void trace_readcurthreadmap_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B39A5000, v0, v1, "KDREADCURTHRMAP sysctl failed (%{errno}d)", v2, v3, v4, v5, v6);
}

void vfs_trace_paths_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_1B39A5000, v0, v1, "vfs.generic.trace_paths sysctl failed with error %d (%{errno}d)");
}

uint64_t sub_1B3A6FC20()
{
  return MEMORY[0x1F40E2F70]();
}

uint64_t sub_1B3A6FC30()
{
  return MEMORY[0x1F40E2FE8]();
}

uint64_t sub_1B3A6FC40()
{
  return MEMORY[0x1F40E2FF0]();
}

uint64_t sub_1B3A6FC50()
{
  return MEMORY[0x1F40E2FF8]();
}

uint64_t sub_1B3A6FC60()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t sub_1B3A6FC70()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t sub_1B3A6FC80()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t sub_1B3A6FC90()
{
  return MEMORY[0x1F40E30D0]();
}

uint64_t sub_1B3A6FCA0()
{
  return MEMORY[0x1F40E30D8]();
}

uint64_t sub_1B3A6FCB0()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t sub_1B3A6FCC0()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t sub_1B3A6FCD0()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t sub_1B3A6FCE0()
{
  return MEMORY[0x1F40E32B0]();
}

uint64_t sub_1B3A6FCF0()
{
  return MEMORY[0x1F40E3330]();
}

uint64_t sub_1B3A6FD00()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t sub_1B3A6FD10()
{
  return MEMORY[0x1F40E3380]();
}

uint64_t sub_1B3A6FD20()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t sub_1B3A6FD30()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t sub_1B3A6FD40()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t sub_1B3A6FD50()
{
  return MEMORY[0x1F40E37F0]();
}

uint64_t sub_1B3A6FD60()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t sub_1B3A6FD70()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t sub_1B3A6FD80()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_1B3A6FD90()
{
  return MEMORY[0x1F40E3A90]();
}

uint64_t sub_1B3A6FDA0()
{
  return MEMORY[0x1F40E3A98]();
}

uint64_t sub_1B3A6FDB0()
{
  return MEMORY[0x1F40E3AC0]();
}

uint64_t sub_1B3A6FDC0()
{
  return MEMORY[0x1F40E3F78]();
}

uint64_t sub_1B3A6FDD0()
{
  return MEMORY[0x1F40E3FF0]();
}

uint64_t sub_1B3A6FDE0()
{
  return MEMORY[0x1F40E4008]();
}

uint64_t sub_1B3A6FDF0()
{
  return MEMORY[0x1F40E4280]();
}

uint64_t sub_1B3A6FE00()
{
  return MEMORY[0x1F40E4288]();
}

uint64_t sub_1B3A6FE10()
{
  return MEMORY[0x1F40E4290]();
}

uint64_t sub_1B3A6FE20()
{
  return MEMORY[0x1F40E4298]();
}

uint64_t sub_1B3A6FE30()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1B3A6FE40()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1B3A6FE50()
{
  return MEMORY[0x1F40E4878]();
}

uint64_t sub_1B3A6FE60()
{
  return MEMORY[0x1F40E48D8]();
}

uint64_t sub_1B3A6FE70()
{
  return MEMORY[0x1F40E48E8]();
}

uint64_t sub_1B3A6FE80()
{
  return MEMORY[0x1F40E4918]();
}

uint64_t sub_1B3A6FE90()
{
  return MEMORY[0x1F40E4938]();
}

uint64_t sub_1B3A6FEA0()
{
  return MEMORY[0x1F40E4970]();
}

uint64_t sub_1B3A6FEB0()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_1B3A6FEC0()
{
  return MEMORY[0x1F40E49D0]();
}

uint64_t sub_1B3A6FED0()
{
  return MEMORY[0x1F40E49E8]();
}

uint64_t sub_1B3A6FEE0()
{
  return MEMORY[0x1F40E49F8]();
}

uint64_t sub_1B3A6FEF0()
{
  return MEMORY[0x1F40E4A28]();
}

uint64_t sub_1B3A6FF00()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t sub_1B3A6FF10()
{
  return MEMORY[0x1F40E4AA8]();
}

uint64_t sub_1B3A6FF20()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t sub_1B3A6FF30()
{
  return MEMORY[0x1F40E4B58]();
}

uint64_t sub_1B3A6FF40()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1B3A6FF50()
{
  return MEMORY[0x1F40E4BC8]();
}

uint64_t sub_1B3A6FF60()
{
  return MEMORY[0x1F40E4BE0]();
}

uint64_t sub_1B3A6FF70()
{
  return MEMORY[0x1F40E4C08]();
}

uint64_t sub_1B3A6FF80()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_1B3A6FF90()
{
  return MEMORY[0x1F40E4D20]();
}

uint64_t sub_1B3A6FFA0()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_1B3A6FFB0()
{
  return MEMORY[0x1F40E50E0]();
}

uint64_t sub_1B3A6FFC0()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t sub_1B3A6FFD0()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t sub_1B3A6FFE0()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t sub_1B3A6FFF0()
{
  return MEMORY[0x1F40E5428]();
}

uint64_t sub_1B3A70000()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_1B3A70010()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_1B3A70020()
{
  return MEMORY[0x1F40E5A58]();
}

uint64_t sub_1B3A70030()
{
  return MEMORY[0x1F40E5AB8]();
}

uint64_t sub_1B3A70040()
{
  return MEMORY[0x1F40E5AF0]();
}

uint64_t sub_1B3A70050()
{
  return MEMORY[0x1F40E5B18]();
}

uint64_t sub_1B3A70060()
{
  return MEMORY[0x1F4188570]();
}

uint64_t sub_1B3A70070()
{
  return MEMORY[0x1F4188578]();
}

uint64_t sub_1B3A70080()
{
  return MEMORY[0x1F4188580]();
}

uint64_t sub_1B3A70090()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t sub_1B3A700A0()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t sub_1B3A700B0()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1B3A700C0()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1B3A700D0()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1B3A700E0()
{
  return MEMORY[0x1F41884A8]();
}

uint64_t sub_1B3A700F0()
{
  return MEMORY[0x1F41884D8]();
}

uint64_t sub_1B3A70100()
{
  return MEMORY[0x1F41884E0]();
}

uint64_t sub_1B3A70110()
{
  return MEMORY[0x1F41884D0]();
}

uint64_t sub_1B3A70120()
{
  return MEMORY[0x1F41877A8]();
}

uint64_t sub_1B3A70130()
{
  return MEMORY[0x1F41877B0]();
}

uint64_t sub_1B3A70140()
{
  return MEMORY[0x1F41877D8]();
}

uint64_t sub_1B3A70150()
{
  return MEMORY[0x1F41877E0]();
}

uint64_t sub_1B3A70160()
{
  return MEMORY[0x1F41877F0]();
}

uint64_t sub_1B3A70170()
{
  return MEMORY[0x1F4187800]();
}

uint64_t sub_1B3A70180()
{
  return MEMORY[0x1F4187808]();
}

uint64_t sub_1B3A70190()
{
  return MEMORY[0x1F4187810]();
}

uint64_t sub_1B3A701A0()
{
  return MEMORY[0x1F4187818]();
}

uint64_t sub_1B3A701B0()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t sub_1B3A701C0()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t sub_1B3A701D0()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t sub_1B3A701E0()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t sub_1B3A701F0()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t sub_1B3A70200()
{
  return MEMORY[0x1F4186F18]();
}

uint64_t sub_1B3A70210()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1B3A70220()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_1B3A70230()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_1B3A70240()
{
  return MEMORY[0x1F4183690]();
}

uint64_t sub_1B3A70250()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_1B3A70260()
{
  return MEMORY[0x1F4183740]();
}

uint64_t sub_1B3A70270()
{
  return MEMORY[0x1F4183748]();
}

uint64_t sub_1B3A70280()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1B3A70290()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1B3A702A0()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t sub_1B3A702B0()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_1B3A702C0()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1B3A702D0()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t sub_1B3A702E0()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t sub_1B3A702F0()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_1B3A70300()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_1B3A70310()
{
  return MEMORY[0x1F4183898]();
}

uint64_t sub_1B3A70320()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t sub_1B3A70330()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_1B3A70350()
{
  return MEMORY[0x1F4183958]();
}

uint64_t sub_1B3A70360()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1B3A70370()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_1B3A70380()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t sub_1B3A70390()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t sub_1B3A703A0()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1B3A703B0()
{
  return MEMORY[0x1F4183A60]();
}

uint64_t sub_1B3A703C0()
{
  return MEMORY[0x1F4183A78]();
}

uint64_t sub_1B3A703D0()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1B3A703E0()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_1B3A703F0()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1B3A70400()
{
  return MEMORY[0x1F4183AA8]();
}

uint64_t sub_1B3A70410()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_1B3A70420()
{
  return MEMORY[0x1F4183AC8]();
}

uint64_t sub_1B3A70430()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1B3A70440()
{
  return MEMORY[0x1F4183B30]();
}

uint64_t sub_1B3A70450()
{
  return MEMORY[0x1F4183B38]();
}

uint64_t sub_1B3A70460()
{
  return MEMORY[0x1F4183B48]();
}

uint64_t sub_1B3A70470()
{
  return MEMORY[0x1F4183B50]();
}

uint64_t sub_1B3A70480()
{
  return MEMORY[0x1F4183B58]();
}

uint64_t sub_1B3A70490()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t sub_1B3A704A0()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1B3A704B0()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t sub_1B3A704C0()
{
  return MEMORY[0x1F4183BB8]();
}

uint64_t sub_1B3A704D0()
{
  return MEMORY[0x1F4183BD0]();
}

uint64_t sub_1B3A704E0()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t sub_1B3A704F0()
{
  return MEMORY[0x1F4183CF0]();
}

uint64_t sub_1B3A70500()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t sub_1B3A70510()
{
  return MEMORY[0x1F4183D78]();
}

uint64_t sub_1B3A70520()
{
  return MEMORY[0x1F4183D80]();
}

uint64_t sub_1B3A70530()
{
  return MEMORY[0x1F4183DF8]();
}

uint64_t sub_1B3A70540()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1B3A70550()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1B3A70560()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_1B3A70570()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1B3A70580()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1B3A70590()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1B3A705A0()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1B3A705B0()
{
  return MEMORY[0x1F4184048]();
}

uint64_t sub_1B3A705C0()
{
  return MEMORY[0x1F4184080]();
}

uint64_t sub_1B3A705D0()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_1B3A705E0()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t sub_1B3A705F0()
{
  return MEMORY[0x1F4184320]();
}

uint64_t sub_1B3A70600()
{
  return MEMORY[0x1F41843E8]();
}

uint64_t sub_1B3A70620()
{
  return MEMORY[0x1F40E6628]();
}

uint64_t sub_1B3A70630()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1B3A70640()
{
  return MEMORY[0x1F4188700]();
}

uint64_t sub_1B3A70650()
{
  return MEMORY[0x1F4186FB0]();
}

uint64_t sub_1B3A70660()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t sub_1B3A70670()
{
  return MEMORY[0x1F4186FF0]();
}

uint64_t sub_1B3A70680()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t sub_1B3A70690()
{
  return MEMORY[0x1F4187100]();
}

uint64_t sub_1B3A706A0()
{
  return MEMORY[0x1F4187178]();
}

uint64_t sub_1B3A706B0()
{
  return MEMORY[0x1F41871D0]();
}

uint64_t sub_1B3A706C0()
{
  return MEMORY[0x1F4187218]();
}

uint64_t sub_1B3A706D0()
{
  return MEMORY[0x1F4187248]();
}

uint64_t sub_1B3A706E0()
{
  return MEMORY[0x1F4188708]();
}

uint64_t sub_1B3A706F0()
{
  return MEMORY[0x1F4188710]();
}

uint64_t sub_1B3A70700()
{
  return MEMORY[0x1F4187278]();
}

uint64_t sub_1B3A70710()
{
  return MEMORY[0x1F4187288]();
}

uint64_t sub_1B3A70720()
{
  return MEMORY[0x1F40E68A8]();
}

uint64_t sub_1B3A70730()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1B3A70740()
{
  return MEMORY[0x1F4184680]();
}

uint64_t sub_1B3A70750()
{
  return MEMORY[0x1F4184688]();
}

uint64_t sub_1B3A70760()
{
  return MEMORY[0x1F4184720]();
}

uint64_t sub_1B3A70770()
{
  return MEMORY[0x1F4184730]();
}

uint64_t sub_1B3A70780()
{
  return MEMORY[0x1F4184780]();
}

uint64_t sub_1B3A70790()
{
  return MEMORY[0x1F4184788]();
}

uint64_t sub_1B3A707A0()
{
  return MEMORY[0x1F4184790]();
}

uint64_t sub_1B3A707B0()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t sub_1B3A707C0()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1B3A707D0()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1B3A707E0()
{
  return MEMORY[0x1F40E6BB0]();
}

uint64_t sub_1B3A707F0()
{
  return MEMORY[0x1F40E6C30]();
}

uint64_t sub_1B3A70800()
{
  return MEMORY[0x1F40E6D48]();
}

uint64_t sub_1B3A70810()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t sub_1B3A70820()
{
  return MEMORY[0x1F4184850]();
}

uint64_t sub_1B3A70830()
{
  return MEMORY[0x1F4184860]();
}

uint64_t sub_1B3A70840()
{
  return MEMORY[0x1F4184870]();
}

uint64_t sub_1B3A70850()
{
  return MEMORY[0x1F41848B0]();
}

uint64_t sub_1B3A70860()
{
  return MEMORY[0x1F40E6DA0]();
}

uint64_t sub_1B3A70870()
{
  return MEMORY[0x1F41848C0]();
}

uint64_t sub_1B3A70880()
{
  return MEMORY[0x1F41848E0]();
}

uint64_t sub_1B3A70890()
{
  return MEMORY[0x1F41848F0]();
}

uint64_t sub_1B3A708A0()
{
  return MEMORY[0x1F41848F8]();
}

uint64_t sub_1B3A708B0()
{
  return MEMORY[0x1F4184910]();
}

uint64_t sub_1B3A708C0()
{
  return MEMORY[0x1F4184938]();
}

uint64_t sub_1B3A708D0()
{
  return MEMORY[0x1F4184940]();
}

uint64_t sub_1B3A708E0()
{
  return MEMORY[0x1F4184950]();
}

uint64_t sub_1B3A708F0()
{
  return MEMORY[0x1F4184970]();
}

uint64_t sub_1B3A70900()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_1B3A70920()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_1B3A70930()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_1B3A70940()
{
  return MEMORY[0x1F4184C48]();
}

uint64_t sub_1B3A70950()
{
  return MEMORY[0x1F4184C58]();
}

uint64_t sub_1B3A70970()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_1B3A70980()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_1B3A70990()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t sub_1B3A709A0()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t sub_1B3A709B0()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1B3A709C0()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1B3A709D0()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1B3A709E0()
{
  return MEMORY[0x1F4184DC8]();
}

uint64_t sub_1B3A709F0()
{
  return MEMORY[0x1F4184DE0]();
}

uint64_t sub_1B3A70A00()
{
  return MEMORY[0x1F4184DE8]();
}

uint64_t sub_1B3A70A10()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t sub_1B3A70A20()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1B3A70A30()
{
  return MEMORY[0x1F4184EE8]();
}

uint64_t sub_1B3A70A40()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t sub_1B3A70A50()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t sub_1B3A70A60()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t sub_1B3A70A70()
{
  return MEMORY[0x1F4184FF8]();
}

uint64_t sub_1B3A70A80()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_1B3A70A90()
{
  return MEMORY[0x1F4185088]();
}

uint64_t sub_1B3A70AA0()
{
  return MEMORY[0x1F4185090]();
}

uint64_t sub_1B3A70AB0()
{
  return MEMORY[0x1F4185098]();
}

uint64_t sub_1B3A70AC0()
{
  return MEMORY[0x1F4185100]();
}

uint64_t sub_1B3A70AD0()
{
  return MEMORY[0x1F4185108]();
}

uint64_t sub_1B3A70AE0()
{
  return MEMORY[0x1F4185110]();
}

uint64_t sub_1B3A70AF0()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1B3A70B00()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1B3A70B10()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1B3A70B20()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1B3A70B30()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1B3A70B40()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1B3A70B50()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1B3A70B60()
{
  return MEMORY[0x1F41853A8]();
}

uint64_t sub_1B3A70B80()
{
  return MEMORY[0x1F41854C8]();
}

uint64_t sub_1B3A70B90()
{
  return MEMORY[0x1F41854F8]();
}

uint64_t sub_1B3A70BA0()
{
  return MEMORY[0x1F4185500]();
}

uint64_t sub_1B3A70BB0()
{
  return MEMORY[0x1F4185528]();
}

uint64_t sub_1B3A70BC0()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_1B3A70BD0()
{
  return MEMORY[0x1F4185570]();
}

uint64_t sub_1B3A70BE0()
{
  return MEMORY[0x1F4185578]();
}

uint64_t sub_1B3A70BF0()
{
  return MEMORY[0x1F4185588]();
}

uint64_t sub_1B3A70C00()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_1B3A70C10()
{
  return MEMORY[0x1F4185628]();
}

uint64_t sub_1B3A70C20()
{
  return MEMORY[0x1F4185630]();
}

uint64_t sub_1B3A70C30()
{
  return MEMORY[0x1F4185638]();
}

uint64_t sub_1B3A70C40()
{
  return MEMORY[0x1F4185648]();
}

uint64_t sub_1B3A70C50()
{
  return MEMORY[0x1F4185658]();
}

uint64_t sub_1B3A70C60()
{
  return MEMORY[0x1F4185680]();
}

uint64_t sub_1B3A70C70()
{
  return MEMORY[0x1F4185688]();
}

uint64_t sub_1B3A70C80()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_1B3A70C90()
{
  return MEMORY[0x1F4185698]();
}

uint64_t sub_1B3A70CA0()
{
  return MEMORY[0x1F41856A0]();
}

uint64_t sub_1B3A70CB0()
{
  return MEMORY[0x1F41856B0]();
}

uint64_t sub_1B3A70CC0()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_1B3A70CD0()
{
  return MEMORY[0x1F4185700]();
}

uint64_t sub_1B3A70CE0()
{
  return MEMORY[0x1F4185740]();
}

uint64_t sub_1B3A70CF0()
{
  return MEMORY[0x1F4185748]();
}

uint64_t sub_1B3A70D00()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1B3A70D10()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t sub_1B3A70D20()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1B3A70D30()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t sub_1B3A70D40()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t sub_1B3A70D50()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t sub_1B3A70D60()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_1B3A70D70()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1B3A70D80()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t sub_1B3A70D90()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1B3A70DA0()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1B3A70DB0()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1B3A70DC0()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1B3A70DD0()
{
  return MEMORY[0x1F4185E88]();
}

uint64_t sub_1B3A70DE0()
{
  return MEMORY[0x1F4185E90]();
}

uint64_t sub_1B3A70DF0()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t sub_1B3A70E00()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1B3A70E10()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1B3A70E20()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_1B3A70E30()
{
  return MEMORY[0x1F4185ED8]();
}

uint64_t sub_1B3A70E40()
{
  return MEMORY[0x1F4185EE0]();
}

uint64_t sub_1B3A70E50()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1B3A70E60()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_1B3A70E70()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t sub_1B3A70E80()
{
  return MEMORY[0x1F4186288]();
}

uint64_t sub_1B3A70EB0()
{
  return MEMORY[0x1F4186318]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
{
  return MEMORY[0x1F40D7158](theArray, range.location, range.length, value, comparator, context);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFTypeID CFSetGetTypeID(void)
{
  return MEMORY[0x1F40D8230]();
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1F40D8238](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8918](anURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1F40D8948](url, error);
}

uint64_t CSAddressSetAdd()
{
  return MEMORY[0x1F4115578]();
}

uint64_t CSAddressSetCreate()
{
  return MEMORY[0x1F4115580]();
}

uint64_t CSArchitectureGetArchitectureForName()
{
  return MEMORY[0x1F4115588]();
}

uint64_t CSArchitectureGetFamilyName()
{
  return MEMORY[0x1F41155B0]();
}

uint64_t CSArchitectureIsArm()
{
  return MEMORY[0x1F41155C8]();
}

uint64_t CSArchitectureIsArm64()
{
  return MEMORY[0x1F41155E0]();
}

uint64_t CSArchitectureIsX86_64()
{
  return MEMORY[0x1F41155F0]();
}

uint64_t CSIsNull()
{
  return MEMORY[0x1F4115610]();
}

uint64_t CSRegionGetName()
{
  return MEMORY[0x1F4115638]();
}

uint64_t CSRegionGetRange()
{
  return MEMORY[0x1F4115648]();
}

uint64_t CSRegionGetSymbolOwner()
{
  return MEMORY[0x1F4115658]();
}

uint64_t CSRelease()
{
  return MEMORY[0x1F4115660]();
}

uint64_t CSRetain()
{
  return MEMORY[0x1F4115670]();
}

uint64_t CSSourceInfoGetFilename()
{
  return MEMORY[0x1F4115688]();
}

uint64_t CSSourceInfoGetLineNumber()
{
  return MEMORY[0x1F4115698]();
}

uint64_t CSSymbolGetName()
{
  return MEMORY[0x1F41156D8]();
}

uint64_t CSSymbolOwnerCreateSparseSignature()
{
  return MEMORY[0x1F4115708]();
}

uint64_t CSSymbolOwnerForeachSegment()
{
  return MEMORY[0x1F4115720]();
}

uint64_t CSSymbolOwnerGetArchitecture()
{
  return MEMORY[0x1F4115738]();
}

uint64_t CSSymbolOwnerGetBaseAddress()
{
  return MEMORY[0x1F4115748]();
}

uint64_t CSSymbolOwnerGetCFUUIDBytes()
{
  return MEMORY[0x1F4115758]();
}

uint64_t CSSymbolOwnerGetFlags()
{
  return MEMORY[0x1F4115770]();
}

uint64_t CSSymbolOwnerGetName()
{
  return MEMORY[0x1F4115778]();
}

uint64_t CSSymbolOwnerGetPath()
{
  return MEMORY[0x1F4115790]();
}

uint64_t CSSymbolOwnerGetSymbolicator()
{
  return MEMORY[0x1F41157D0]();
}

uint64_t CSSymbolOwnerIsAOut()
{
  return MEMORY[0x1F41157E0]();
}

uint64_t CSSymbolOwnerIsDyld()
{
  return MEMORY[0x1F41157F0]();
}

uint64_t CSSymbolOwnerIsDyldSharedCache()
{
  return MEMORY[0x1F4115800]();
}

uint64_t CSSymbolicatorCreateWithBinaryImageListCountPidFlagsAndNotification()
{
  return MEMORY[0x1F4115830]();
}

uint64_t CSSymbolicatorCreateWithMachKernel()
{
  return MEMORY[0x1F4115850]();
}

uint64_t CSSymbolicatorCreateWithPid()
{
  return MEMORY[0x1F4115878]();
}

uint64_t CSSymbolicatorCreateWithSignature()
{
  return MEMORY[0x1F4115890]();
}

uint64_t CSSymbolicatorCreateWithURLAndArchitecture()
{
  return MEMORY[0x1F41158B0]();
}

uint64_t CSSymbolicatorForeachSymbolOwnerAtTime()
{
  return MEMORY[0x1F41158D8]();
}

uint64_t CSSymbolicatorForeachSymbolicatorWithPath()
{
  return MEMORY[0x1F41158F8]();
}

uint64_t CSSymbolicatorForeachSymbolicatorWithURL()
{
  return MEMORY[0x1F4115908]();
}

uint64_t CSSymbolicatorGetArchitecture()
{
  return MEMORY[0x1F4115920]();
}

uint64_t CSSymbolicatorGetPid()
{
  return MEMORY[0x1F4115938]();
}

uint64_t CSSymbolicatorGetSourceInfoWithAddressAtTime()
{
  return MEMORY[0x1F4115958]();
}

uint64_t CSSymbolicatorGetSymbolOwner()
{
  return MEMORY[0x1F4115968]();
}

uint64_t CSSymbolicatorGetSymbolOwnerCountAtTime()
{
  return MEMORY[0x1F4115970]();
}

uint64_t CSSymbolicatorGetSymbolWithAddressAtTime()
{
  return MEMORY[0x1F41159A0]();
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED8](*(void *)&iterator);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x1F40E9158](*(void *)&entry, properties, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryGetChildIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x1F40E9190](*(void *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetLocationInPlane(io_registry_entry_t entry, const io_name_t plane, io_name_t location)
{
  return MEMORY[0x1F40E91A0](*(void *)&entry, plane, location);
}

kern_return_t IORegistryEntryGetNameInPlane(io_registry_entry_t entry, const io_name_t plane, io_name_t name)
{
  return MEMORY[0x1F40E91B0](*(void *)&entry, plane, name);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x1F40E91F8](*(void *)&entry, entryID);
}

io_registry_entry_t IORegistryGetRootEntry(mach_port_t mainPort)
{
  return MEMORY[0x1F40E9228](*(void *)&mainPort);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1F40E9250](*(void *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1F40E9258](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9278](name);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t OSLogLookupPathWithUUID()
{
  return MEMORY[0x1F412AB68]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFCopySupplementalVersionDictionary()
{
  return MEMORY[0x1F40D8D08]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _IOObjectGetClass()
{
  return MEMORY[0x1F40E92D0]();
}

char ***_NSGetEnviron(void)
{
  return (char ***)MEMORY[0x1F40C9AE0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B8]();
}

{
  return MEMORY[0x1F417E8C0]();
}

{
  return MEMORY[0x1F417E8C8]();
}

{
  return MEMORY[0x1F417E8D0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1F40C9CA0](a1, *(void *)&a2, a3, a4);
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1F40C9F90]();
}

uint64_t _os_assumes_log()
{
  return MEMORY[0x1F40C9F98]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1F40C9FA0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void abort(void)
{
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

char *__cdecl basename_r(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CA520](a1, a2);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
}

uint64_t dispatch_source_cancel_and_wait()
{
  return MEMORY[0x1F40CBC90]();
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD58](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1F40CBD88]();
}

uint64_t dscsym_iterate_buffer()
{
  return MEMORY[0x1F417F5F0]();
}

uint64_t dscsym_mmap_dscsym_for_uuid()
{
  return MEMORY[0x1F417F5F8]();
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

int dup2(int a1, int a2)
{
  return MEMORY[0x1F40CBE00](*(void *)&a1, *(void *)&a2);
}

void exit(int a1)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int fcopyfile(int from_fd, int to_fd, copyfile_state_t a3, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CC060](*(void *)&from_fd, *(void *)&to_fd, a3, *(void *)&flags);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1F40CC070](*(void *)&a1, a2);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1F40CC0A0](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1F40CC110](a1);
}

FILE *__cdecl fmemopen(void *__buf, size_t __size, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC198](__buf, __size, __mode);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return MEMORY[0x1F40CC2B0](a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1F40CC2D0](*(void *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

int getfsstat(statfs *a1, int a2, int a3)
{
  return MEMORY[0x1F40CC3C8](a1, *(void *)&a2, *(void *)&a3);
}

int gethostuuid(uuid_t a1, const timespec *a2)
{
  return MEMORY[0x1F40CC408](a1, a2);
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return MEMORY[0x1F40CC428](__linep, __linecapp, __stream);
}

int getopt(int a1, char *const a2[], const char *a3)
{
  return MEMORY[0x1F40CC468](*(void *)&a1, a2, a3);
}

int getpagesize(void)
{
  return MEMORY[0x1F40CC480]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

uint64_t kdebug_typefilter()
{
  return MEMORY[0x1F40CC710]();
}

uint64_t kpc_get_actionid()
{
  return MEMORY[0x1F4177C98]();
}

uint64_t kpc_get_config()
{
  return MEMORY[0x1F4177CA0]();
}

uint64_t kpc_get_config_count()
{
  return MEMORY[0x1F4177CA8]();
}

uint64_t kpc_get_counter_count()
{
  return MEMORY[0x1F4177CB0]();
}

uint64_t kpc_get_counting()
{
  return MEMORY[0x1F4177CB8]();
}

uint64_t kpc_get_period()
{
  return MEMORY[0x1F4177CC0]();
}

uint64_t kpc_get_thread_counting()
{
  return MEMORY[0x1F4177CC8]();
}

uint64_t kpdecode_cursor_clearchunk()
{
  return MEMORY[0x1F4177DF0]();
}

uint64_t kpdecode_cursor_create()
{
  return MEMORY[0x1F4177DF8]();
}

uint64_t kpdecode_cursor_free()
{
  return MEMORY[0x1F4177E00]();
}

uint64_t kpdecode_cursor_next_record()
{
  return MEMORY[0x1F4177E08]();
}

uint64_t kpdecode_cursor_set_option()
{
  return MEMORY[0x1F4177E10]();
}

uint64_t kpdecode_cursor_setchunk()
{
  return MEMORY[0x1F4177E18]();
}

uint64_t kpdecode_record_free()
{
  return MEMORY[0x1F4177E20]();
}

uint64_t kperf_action_count_get()
{
  return MEMORY[0x1F4177CD0]();
}

uint64_t kperf_action_count_set()
{
  return MEMORY[0x1F4177CD8]();
}

uint64_t kperf_action_filter_get()
{
  return MEMORY[0x1F4177CE0]();
}

uint64_t kperf_action_samplers_get()
{
  return MEMORY[0x1F4177CE8]();
}

uint64_t kperf_action_samplers_set()
{
  return MEMORY[0x1F4177CF0]();
}

uint64_t kperf_action_userdata_get()
{
  return MEMORY[0x1F4177CF8]();
}

uint64_t kperf_kdebug_action_get()
{
  return MEMORY[0x1F4177D00]();
}

uint64_t kperf_kdebug_action_set()
{
  return MEMORY[0x1F4177D08]();
}

uint64_t kperf_kdebug_filter_add_desc()
{
  return MEMORY[0x1F4177D10]();
}

uint64_t kperf_kdebug_filter_create()
{
  return MEMORY[0x1F4177D18]();
}

uint64_t kperf_kdebug_filter_create_desc()
{
  return MEMORY[0x1F4177D20]();
}

uint64_t kperf_kdebug_filter_destroy()
{
  return MEMORY[0x1F4177D28]();
}

uint64_t kperf_kdebug_filter_get()
{
  return MEMORY[0x1F4177D30]();
}

uint64_t kperf_kdebug_filter_set()
{
  return MEMORY[0x1F4177D38]();
}

uint64_t kperf_lazy_cpu_action_get()
{
  return MEMORY[0x1F4177D40]();
}

uint64_t kperf_lazy_cpu_action_set()
{
  return MEMORY[0x1F4177D48]();
}

uint64_t kperf_lazy_cpu_time_threshold_get()
{
  return MEMORY[0x1F4177D50]();
}

uint64_t kperf_lazy_cpu_time_threshold_set()
{
  return MEMORY[0x1F4177D58]();
}

uint64_t kperf_lazy_wait_action_get()
{
  return MEMORY[0x1F4177D60]();
}

uint64_t kperf_lazy_wait_action_set()
{
  return MEMORY[0x1F4177D68]();
}

uint64_t kperf_lazy_wait_time_threshold_get()
{
  return MEMORY[0x1F4177D70]();
}

uint64_t kperf_lazy_wait_time_threshold_set()
{
  return MEMORY[0x1F4177D78]();
}

uint64_t kperf_ns_to_ticks()
{
  return MEMORY[0x1F4177D80]();
}

uint64_t kperf_reset()
{
  return MEMORY[0x1F4177D88]();
}

uint64_t kperf_sample_get()
{
  return MEMORY[0x1F4177D90]();
}

uint64_t kperf_sample_set()
{
  return MEMORY[0x1F4177D98]();
}

uint64_t kperf_ticks_to_ns()
{
  return MEMORY[0x1F4177DA0]();
}

uint64_t kperf_timer_action_get()
{
  return MEMORY[0x1F4177DA8]();
}

uint64_t kperf_timer_action_set()
{
  return MEMORY[0x1F4177DB0]();
}

uint64_t kperf_timer_count_get()
{
  return MEMORY[0x1F4177DB8]();
}

uint64_t kperf_timer_count_set()
{
  return MEMORY[0x1F4177DC0]();
}

uint64_t kperf_timer_lightweight_pet_set()
{
  return MEMORY[0x1F4177DC8]();
}

uint64_t kperf_timer_period_get()
{
  return MEMORY[0x1F4177DD0]();
}

uint64_t kperf_timer_period_set()
{
  return MEMORY[0x1F4177DD8]();
}

uint64_t kperf_timer_pet_get()
{
  return MEMORY[0x1F4177DE0]();
}

uint64_t kperf_timer_pet_set()
{
  return MEMORY[0x1F4177DE8]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

uint64_t mach_get_times()
{
  return MEMORY[0x1F40CC948]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCB08](a1, a2, *(void *)&a3);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB0](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

int mkstemp(char *a1)
{
  return MEMORY[0x1F40CCE08](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

FILE *__cdecl open_memstream(char **__bufp, size_t *__sizep)
{
  return (FILE *)MEMORY[0x1F40CD0F8](__bufp, __sizep);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

void perror(const char *a1)
{
}

int pipe(int a1[2])
{
  return MEMORY[0x1F40CD760](a1);
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1F40CD790](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *a1, int a2)
{
  return MEMORY[0x1F40CD798](a1, *(void *)&a2);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return MEMORY[0x1F40CD7A0](a1, *(void *)&a2, *(void *)&a3);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1F40CD7B8](a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1F40CD7C0](a1);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int proc_listpids(uint32_t type, uint32_t typeinfo, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD880](*(void *)&type, *(void *)&typeinfo, buffer, *(void *)&buffersize);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x1F40CD890](*(void *)&pid, *(void *)&flavor, buffer);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CDBC0](*(void *)&__fd, __buf, __nbyte, a4);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x1F40CE030](*(void *)&a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

uint64_t stackshot_capture_with_config()
{
  return MEMORY[0x1F40CE0E0]();
}

uint64_t stackshot_config_create()
{
  return MEMORY[0x1F40CE0E8]();
}

uint64_t stackshot_config_dealloc()
{
  return MEMORY[0x1F40CE0F0]();
}

uint64_t stackshot_config_get_stackshot_buffer()
{
  return MEMORY[0x1F40CE0F8]();
}

uint64_t stackshot_config_get_stackshot_size()
{
  return MEMORY[0x1F40CE100]();
}

uint64_t stackshot_config_set_flags()
{
  return MEMORY[0x1F40CE108]();
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1F40CE118](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1F40CE200](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1F40CE210](__big, __little, __len);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1F40CE238](__stringp, __delim);
}

char *__cdecl strsignal(int __sig)
{
  return (char *)MEMORY[0x1F40CE240](*(void *)&__sig);
}

int strsnvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, const char *a6)
{
  return MEMORY[0x1F40CE248](a1, a2, a3, a4, *(void *)&a5, a6);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastTypeToObjCProtocolConditional()
{
  return MEMORY[0x1F4186500]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1F4186730]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1F40CE630](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_generate_random(uuid_t out)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1F40CE658](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE680](a1, a2, a3);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x1F40CE7C8](*(void *)&a1, a2, *(void *)&a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}