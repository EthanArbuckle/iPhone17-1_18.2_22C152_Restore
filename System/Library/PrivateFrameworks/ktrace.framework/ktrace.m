uint64_t getEnumTagSinglePayload for PlanSettings.KPerfTimer(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B39A7B24()
{
  uint64_t v1 = 0x736973706F6E7973;
  if (*v0 != 1) {
    uint64_t v1 = 0x73676E6974746573;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73657361696C61;
  }
}

unint64_t sub_1B39A7B80()
{
  return sub_1B39A7B88(*v0);
}

unint64_t sub_1B39A7B88(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x694667756265646BLL;
      break;
    case 2:
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x746341667265706BLL;
      break;
    case 5:
      unint64_t result = 0x6D6954667265706BLL;
      break;
    case 6:
      unint64_t result = 0x746550667265706BLL;
      break;
    case 8:
    case 9:
      unint64_t result = 0x7A614C667265706BLL;
      break;
    case 10:
      unint64_t result = 0x72656469766F7270;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *_s6ktrace9PlanLayerV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RecordInfo.LostEvents.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for PlanSettings.KPerfPET(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B39A7E80()
{
  uint64_t v1 = 0x736E6F6974706FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465726975716572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182;
  }
}

unsigned char *_s6ktrace12PlanSettingsV12KPerfSamplerOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

unint64_t sub_1B39A7FA4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B39A7FD0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B39A7FD0(char a1)
{
  unint64_t result = 0x6C61635F72657375;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x695F646165726874;
      break;
    case 3:
      unint64_t result = 0x735F646165726874;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0x666E695F6B736174;
      break;
    case 7:
      unint64_t result = 0x616E735F6B736174;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0x6D5F6D6574737973;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s6ktrace12PlanSettingsV12KPerfSamplerOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unint64_t sub_1B39A81DC()
{
  return sub_1B39A81E4(*v0);
}

unint64_t sub_1B39A81E4(char a1)
{
  unint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x4E70756F7247646FLL;
      break;
    case 4:
      unint64_t result = 0x6168436B63616C73;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x736973706F6E7973;
      break;
    case 7:
      unint64_t result = 0x746E656D75636F64;
      break;
    case 8:
      unint64_t result = 0x73676E6974746573;
      break;
    case 9:
      unint64_t result = 0x4C746C7561666564;
      break;
    case 10:
      unint64_t result = 0x73726579616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1B39A8354()
{
  if (*v0) {
    return 0x4665736963657270;
  }
  else {
    return 0x6E496E6F69746361;
  }
}

uint64_t getEnumTagSinglePayload for ReporterError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t destroy for PlanSettings.KPerfKDebugTrigger()
{
  return swift_bridgeObjectRelease();
}

unsigned char *storeEnumTagSinglePayload for PlanSettings.KPerfAction.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        break;
      case 2:
        *(_WORD *)__n128 result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *__n128 result = 0;
        break;
      case 2:
        *(_WORD *)__n128 result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)__n128 result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1B39A849C()
{
  return 0x7372656C706D6173;
}

uint64_t sub_1B39A84B4()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x6E496E6F69746361;
  }
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t sub_1B39A8540@<X0>(uint64_t a1@<X8>)
{
  return sub_1B39AF2F4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1B39A8560()
{
  if (*v0) {
    return 0x654D757043726570;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t sub_1B39A85B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason;
  swift_beginAccess();
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  char v10 = *(unsigned char *)(v7 + 16);
  *(unsigned char *)(v7 + 16) = a3;
  sub_1B39B6160(a1, a2, a3);
  sub_1B39A8658(v8, v9, v10);
  return sub_1B39A8658(a1, a2, a3);
}

uint64_t sub_1B39A8658(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_1B39B6148(a1, a2, a3);
  }
  return a1;
}

uint64_t _session_start_live(unint64_t a1)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)v105 = xmmword_1B3A73178;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  memset(buf, 0, sizeof(buf));
  size_t v73 = 648;
  if (sysctl((int *)v105, 4u, buf, &v73, 0, 0) < 0) {
    _session_start_live_cold_1();
  }
  if ((buf[32] & 4) == 0) {
    _session_start_live_cold_2();
  }
  ktrace_log_init();
  long long v2 = ktrace_log;
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B39A5000, v2, OS_LOG_TYPE_INFO, "starting to trace live", buf, 2u);
  }
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_DWORD *)a1 | 2) != 2) {
    _session_start_live_cold_4();
  }
  CFIndex v71 = 0;
  v72 = 0;
  if (geteuid())
  {
    int v3 = *__error();
    ktrace_log_init();
    long long v4 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      _session_start_live_cold_16(v3, v4);
    }
    *__error() = v3;
    return 1;
  }
  int v75 = 0;
  v105[0] = 4;
  if (sysctlbyname("ktrace.state", &v75, v105, 0, 0)) {
    goto LABEL_12;
  }
  if (v75 == 1)
  {
    int pid = -1;
    size_t v73 = 4;
    if (sysctlbyname("ktrace.owning_pid", &pid, &v73, 0, 0))
    {
LABEL_12:
      unsigned int v13 = *__error();
      if (v13) {
        uint64_t v5 = v13;
      }
      else {
        uint64_t v5 = 22;
      }
      goto LABEL_15;
    }
    int v16 = pid;
    if (pid >= 1 && v16 != getpid())
    {
      memset(&buf[3], 0, 61);
      memset(buf, 63, 3);
      if (proc_name(pid, buf, 0x40u) > 0)
      {
        uint64_t v5 = 16;
LABEL_15:
        *__error() = v5;
        int v14 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          _session_start_live_cold_15();
        }
        *__error() = v14;
        return v5;
      }
    }
  }
  uint64_t v5 = _session_machine_init(a1, v6, v7, v8, v9, v10, v11, v12);
  if (v5) {
    return v5;
  }
  uint64_t v17 = 0;
  atomic_compare_exchange_strong(&live_session, (unint64_t *)&v17, a1);
  if (v17)
  {
    if (*(_DWORD *)a1 == 2)
    {
      unint64_t v19 = atomic_load((unint64_t *)&live_session);
      unint64_t v20 = v19;
      atomic_compare_exchange_strong(&live_session, &v20, a1);
      if (v20 == v19) {
        goto LABEL_27;
      }
      int v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        _session_start_live_cold_13();
      }
    }
    else
    {
      int v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        _session_start_live_cold_14();
      }
    }
    *__error() = v21;
    return 22;
  }
LABEL_27:
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0) {
    uint64_t v18 = mach_continuous_time();
  }
  else {
    uint64_t v18 = mach_absolute_time();
  }
  *(void *)(a1 + 504) = v18;
  if (!*(_DWORD *)a1)
  {
    *(void *)(a1 + 520) = kttimesync_timestamp_from_ns(a1 + 432, *(void *)(a1 + 512)) + v18;
    uint64_t v23 = trace_initialize(*(void *)(a1 + 336));
    if (v23)
    {
      uint64_t v5 = v23;
      int v24 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        _session_start_live_cold_12();
      }
LABEL_45:
      *__error() = v24;
      goto LABEL_46;
    }
    unsigned int v28 = *(unsigned __int8 *)(a1 + 828);
    int v29 = *(unsigned __int16 *)(a1 + 224);
    if ((v29 & 0x200) != 0) {
      int v30 = ((4 * v29) | (v28 >> 1)) & 0x202;
    }
    else {
      int v30 = ((4 * v29) | (v28 >> 1)) & 0x202 | 0x400;
    }
    if ((v28 & 2) != 0)
    {
      uint64_t matched = trace_set_event_match_disable(a1 + 728, a1 + 768);
      if (matched)
      {
        uint64_t v5 = matched;
        int v24 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          _session_start_live_cold_11();
        }
        goto LABEL_45;
      }
      v30 |= 0x800u;
    }
    else if (!v30)
    {
LABEL_63:
      uint64_t v5 = apply_kernel_typefilter_and_pid_filter(a1);
      if (v5) {
        goto LABEL_46;
      }
      goto LABEL_64;
    }
    uint64_t v5 = trace_set_flags(v30);
    if (v5) {
      goto LABEL_46;
    }
    goto LABEL_63;
  }
  if (*(_DWORD *)a1 != 2)
  {
LABEL_64:
    uint64_t v22 = 0;
    goto LABEL_65;
  }
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    uint64_t v22 = ktrace_capture_live_stackshot();
    if (!v22)
    {
      uint64_t v5 = *__error();
LABEL_46:
      atomic_exchange(&live_session, 0);
LABEL_136:
      free(v72);
      return v5;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v25 = trace_set_enable(0);
  if (v25)
  {
    uint64_t v5 = v25;
    int v26 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      _session_start_live_cold_10();
    }
    v27 = 0;
    *__error() = v26;
    goto LABEL_113;
  }
LABEL_65:
  if ((*(_DWORD *)(a1 + 4) - 1) <= 1)
  {
    current = (void **)ktrace_config_create_current();
    if (current)
    {
      v27 = current;
      ktrace_config_enable_configured(current);
      v33 = *(char **)(a1 + 696);
      if (v33) {
        ktrace_config_set_reason((uint64_t)v27, v33);
      }
      v34 = *(char **)(a1 + 704);
      if (v34) {
        ktrace_config_set_command((uint64_t)v27, v34);
      }
      unsigned int v35 = *(_DWORD *)(a1 + 712);
      if (v35) {
        ktrace_config_set_trigger_kind((uint64_t)v27, v35);
      }
      if (*(_DWORD *)a1 == 2 || *(_DWORD *)(a1 + 4) == 2) {
        ktrace_config_set_context_kind((uint64_t)v27, 2u);
      }
      v36 = *(void **)(a1 + 600);
      if (v36)
      {
        *(void *)buf = 0;
        if (!objc_msgSend(v36, "shouldStartTracingWithConfiguration:error:", v27, buf, v71))
        {
          int v38 = *__error();
          ktrace_log_init();
          v39 = ktrace_log;
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            _session_start_live_cold_9((uint64_t *)buf, v38, v39);
          }
          *__error() = v38;
          uint64_t v5 = 45;
          goto LABEL_113;
        }
      }
      uint64_t v37 = ktrace_config_serialize((uint64_t)v27, (UInt8 **)&v72, &v71);
      if (v37)
      {
        uint64_t v5 = v37;
LABEL_113:
        if (v22) {
          stackshot_config_dealloc();
        }
        atomic_exchange(&live_session, 0);
        if (v27) {
          ktrace_config_destroy(v27);
        }
        goto LABEL_136;
      }
      ktrace_config_destroy(v27);
    }
  }
  if (!*(_DWORD *)a1)
  {
    [*(id *)(a1 + 600) willStartTracingWithFile:*(void *)(a1 + 648)];
    ktrace_log_init();
    v45 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      _session_start_live_cold_8(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    uint64_t v53 = trace_set_enable(1);
    if (v53)
    {
      uint64_t v5 = v53;
      v27 = 0;
      goto LABEL_113;
    }
    int v61 = *(_DWORD *)(a1 + 4);
    if (v61 == 2)
    {
      ktrace_time_ringbuffer_tracing_started(*(void *)(a1 + 640));
      int v61 = *(_DWORD *)(a1 + 4);
    }
    if (v61 == 1)
    {
      ktrace_log_init();
      v62 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        _session_start_live_cold_7(v62, v63, v64, v65, v66, v67, v68, v69);
      }
      uint64_t v22 = ktrace_capture_live_stackshot();
      if (!v22) {
        goto LABEL_131;
      }
    }
    objc_msgSend(*(id *)(a1 + 600), "didStartTracingWithFile:", *(void *)(a1 + 648), v71);
    if (*(_DWORD *)(a1 + 268))
    {
      global_queue = dispatch_get_global_queue(25, 0);
      dispatch_async(global_queue, &__block_literal_global_3);
    }
  }
  kttimesync_init(a1 + 432, 0, (*(unsigned __int16 *)(a1 + 224) >> 7) & 1);
  if (*(_DWORD *)(a1 + 288))
  {
    memset(buf, 0, 24);
    v105[0] = 24;
    if (!sysctlbyname("machdep.remotetime.conversion_params", buf, v105, 0, 0))
    {
      *(_OWORD *)(a1 + 528) = *(_OWORD *)buf;
      *(void *)(a1 + 544) = *(void *)&buf[16];
    }
  }
  int v40 = *(_DWORD *)(a1 + 4);
  if (!v40)
  {
    populate_threadmap(a1, 0);
    uint64_t v5 = _session_cpus_init(a1, v54, v55, v56, v57, v58, v59, v60);
    if (v5) {
      return v5;
    }
    int v40 = *(_DWORD *)(a1 + 4);
  }
  if ((v40 - 1) > 1) {
    goto LABEL_107;
  }
  uint64_t v41 = *(void *)(a1 + 648);
  if (!v41) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!ktrace_file_header_append_live_cpu_map(v41)) {
    goto LABEL_133;
  }
  uint64_t v42 = *(void *)(a1 + 664);
  if (v42) {
    (*(void (**)(uint64_t, void))(v42 + 16))(v42, *(void *)(a1 + 648));
  }
  if (!kttimesync_append((long long *)(a1 + 432), *(void *)(a1 + 648))) {
    goto LABEL_133;
  }
  if (v72)
  {
    if (!ktrace_file_append_chunk(*(void *)(a1 + 648), 32774, 1, 4, (UInt8 *)v72, v71)) {
      goto LABEL_133;
    }
    free(v72);
    v72 = 0;
  }
  if ((objc_msgSend(*(id *)(a1 + 600), "containsWithName:", @"Required", v71) & 1) == 0) {
    ktrace_file_append_ioreg(*(void *)(a1 + 648));
  }
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    if (!v22) {
      ktrace_postprocess_file_internal_cold_1();
    }
    appended = ktrace_file_append_stackshot(*(void *)(a1 + 648), v22);
    stackshot_config_dealloc();
    if (appended)
    {
      uint64_t v22 = 0;
      goto LABEL_104;
    }
LABEL_131:
    uint64_t v5 = *__error();
LABEL_135:
    _session_end_internal(a1, 1, 1);
    goto LABEL_136;
  }
LABEL_104:
  if (!ktrace_file_append_live_thread_map(*(void *)(a1 + 648)) && *__error()
    || *(_DWORD *)(a1 + 288) && !ktrace_file_append_chunk(*(void *)(a1 + 648), 32782, 1, 0, (UInt8 *)(a1 + 528), 24))
  {
LABEL_133:
    uint64_t v5 = *__error();
    if (v22) {
      stackshot_config_dealloc();
    }
    goto LABEL_135;
  }
LABEL_107:
  v44 = drain_events_block(a1);
  dispatch_async(*(dispatch_queue_t *)(a1 + 128), v44);
  _Block_release(v44);
  if (*(void *)(a1 + 592)) {
    ktrace_client_start_tracing();
  }
  if (v22) {
    stackshot_config_dealloc();
  }
  return 0;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t ktrace_file_appending_chunk(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t supportsDeprecatedWillEndTracingToFile(void *a1)
{
  id v1 = a1;
  char v2 = objc_opt_respondsToSelector();

  return v2 & 1;
}

uint64_t kttimesync_init(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v46 = 0;
  uint64_t v47 = &v46;
  uint64_t v48 = 0x2000000000;
  char v49 = 0;
  uint64_t v42 = 0;
  v43 = &v42;
  uint64_t v44 = 0x2000000000;
  char v45 = 0;
  if (a2)
  {
    ktrace_file_timebase(a2, (_DWORD *)(a1 + 16), (_DWORD *)(a1 + 20));
    uint64_t v38 = 0;
    v39 = &v38;
    uint64_t v40 = 0x2000000000;
    int v41 = 0;
    uint64_t v34 = 0;
    unsigned int v35 = &v34;
    uint64_t v36 = 0x2000000000;
    char v37 = 0;
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 0x40000000;
    v33[2] = __kttimesync_init_block_invoke;
    v33[3] = &unk_1E6061C10;
    v33[4] = &v38;
    v33[5] = &v34;
    v33[7] = &v46;
    v33[8] = a1;
    v33[6] = &v42;
    uint64_t v11 = ktrace_file_iterate(a2, 0, (uint64_t)v33, v6, v7, v8, v9, v10);
    if (*((_DWORD *)v39 + 6))
    {
      int v17 = 1;
      uint64_t v18 = *((unsigned int *)v39 + 6);
      goto LABEL_11;
    }
    uint64_t v18 = v11;
    if (!v11)
    {
      if (!*((unsigned char *)v35 + 24))
      {
        v32[0] = MEMORY[0x1E4F143A8];
        v32[1] = 0x40000000;
        v32[2] = __kttimesync_init_block_invoke_2;
        v32[3] = &__block_descriptor_tmp_5;
        v32[4] = a1;
        ktrace_file_header_iterate(a2, 0, (uint64_t)v32, v12, v13, v14, v15, v16);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        if (ktrace_file_walltime_offset(a2, (void *)a1, (uint64_t)&v30, (void *)(a1 + 40), v25, v26, v27, v28))
        {
          int v17 = 1;
        }
        else
        {
          int v17 = 0;
          *(unsigned char *)(a1 + 48) |= 2u;
          uint64_t v29 = 1000 * (int)v31;
          *(void *)(a1 + 24) = v30;
          *(void *)(a1 + 32) = v29;
        }
        uint64_t v18 = 45;
LABEL_11:
        _Block_object_dispose(&v34, 8);
        _Block_object_dispose(&v38, 8);
        if (v17) {
          goto LABEL_22;
        }
        goto LABEL_12;
      }
      uint64_t v18 = 0;
    }
    int v17 = 1;
    goto LABEL_11;
  }
  uint64_t v38 = 0;
  uint64_t v34 = 0;
  if (mach_get_times())
  {
    int v19 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      kttimesync_init_cold_3();
    }
LABEL_21:
    *__error() = v19;
    uint64_t v18 = 22;
    goto LABEL_22;
  }
  char v21 = *(unsigned char *)(a1 + 48);
  uint64_t v22 = v34 - v38;
  *(void *)a1 = v38;
  *(void *)(a1 + 8) = v22;
  *(unsigned char *)(a1 + 48) = v21 | 3;
  if (mach_timebase_info((mach_timebase_info_t)(a1 + 16)))
  {
    int v19 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      kttimesync_init_cold_2();
    }
    goto LABEL_21;
  }
  if (!gettimeofday(0, (void *)(a1 + 40)))
  {
    *(unsigned char *)(a1 + 48) |= 4u;
LABEL_12:
    if (*((unsigned char *)v47 + 24)) {
      a3 = *((unsigned char *)v43 + 24) != 0;
    }
    uint64_t v18 = 0;
    if (a3) {
      char v20 = 8;
    }
    else {
      char v20 = 0;
    }
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a1 + 48) & 0xF7 | v20;
    goto LABEL_22;
  }
  int v24 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kttimesync_init_cold_1();
  }
  *__error() = v24;
  uint64_t v18 = *__error();
LABEL_22:
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v46, 8);
  return v18;
}

void *kttimesync_append(long long *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v6 = *((void *)a1 + 3);
  long long v4 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  int v7 = v2;
  uint64_t v8 = *((void *)a1 + 5);
  int v9 = (*((unsigned __int8 *)a1 + 48) >> 3) & 1;
  return ktrace_file_append_chunk(a2, 32787, 1, 0, (UInt8 *)&v4, 48);
}

void *ktrace_file_header_append_live_cpu_map(uint64_t a1)
{
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  int v2 = kdebug_alloc_current_cpu_map(&v8, (size_t *)&v7);
  if (v2)
  {
    int v3 = v2;
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_header_append_live_cpu_map_cold_1();
    }
    appended = 0;
    *__error() = v4;
  }
  else
  {
    appended = ktrace_file_header_append_chunk(a1, 7168, 1, 0, (UInt8 *)v8, v7);
    if (appended) {
      int v3 = 0;
    }
    else {
      int v3 = *__error();
    }
  }
  free(v8);
  *__error() = v3;
  return appended;
}

void *ktrace_file_header_append_chunk(uint64_t a1, int a2, __int16 a3, __int16 a4, UInt8 *a5, CFIndex a6)
{
  if ((unint64_t)(a1 + 1) <= 1) {
    ktrace_file_header_append_chunk_cold_3();
  }
  if (!*(unsigned char *)(a1 + 299))
  {
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_header_append_chunk_cold_1();
    }
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10)
  {
    uint64_t result = ktrace_file_append_start(v10, 32778, 0, 0);
    if (result)
    {
      uint64_t v12 = (uint64_t)result;
      uint64_t result = ktrace_file_append_subchunk(*(void *)(a1 + 200), (uint64_t)result, 32780, 0, 0, (UInt8 *)(a1 + 216), 4);
      if (result)
      {
        appended = ktrace_file_append_subchunk(*(void *)(a1 + 200), v12, a2, 0, 0, a5, a6);
        ktrace_file_append_finish(*(void *)(a1 + 200), v12);
        return appended;
      }
    }
    return result;
  }
  if (*(void *)(a1 + 152))
  {
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_header_append_chunk_cold_2();
    }
LABEL_12:
    *__error() = v14;
    uint64_t v15 = __error();
    uint64_t result = 0;
    *uint64_t v15 = 22;
    return result;
  }
  uint64_t result = ktrace_file_append_start_internal(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v16 = (uint64_t)result;
    if (a5 && a6 && ktrace_file_append_data(a1, (uint64_t)result, a5, a6)
      || ktrace_file_append_finish_internal(a1, (void *)(a1 + 80), v16))
    {
      return 0;
    }
    else if (ktrace_file_update_header_size(a1))
    {
      return 0;
    }
    else
    {
      return (void *)v16;
    }
  }
  return result;
}

uint64_t ktrace_file_update_header_size(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 4) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 280);
  *(void *)(a1 + 288) = v3;
  uint64_t v6 = v3 - 16;
  if ((unint64_t)ktrace_file_write(a1, &v6, 8uLL, 8) > 7)
  {
    uint64_t result = 0;
    uint64_t v5 = *(void *)(a1 + 288);
    *(void *)(a1 + 56) = 16;
    *(void *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v5;
  }
  else
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_update_header_size_cold_1();
    }
    *__error() = v4;
    return *__error();
  }
  return result;
}

void *ktrace_file_append_stackshot(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  appended = ktrace_file_append_start(a1, 32770, 1, 0);
  if (appended)
  {
    stackshot_buffer = (UInt8 *)stackshot_config_get_stackshot_buffer();
    unsigned int stackshot_size = stackshot_config_get_stackshot_size();
    int v6 = ktrace_file_append_data(a1, (uint64_t)appended, stackshot_buffer, stackshot_size);
    if (v6 || (int v6 = ktrace_file_append_finish(a1, (uint64_t)appended)) != 0)
    {
      appended = 0;
      *__error() = v6;
    }
  }
  return appended;
}

void *ktrace_file_append_live_thread_map(uint64_t a1)
{
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  int v2 = kdebug_alloc_thread_map(&v8, (size_t *)&v7);
  if (!v2)
  {
    appended = ktrace_file_append_chunk(a1, 7424, 0, 0, (UInt8 *)v8, v7);
    if (appended) {
      int v3 = 0;
    }
    else {
      int v3 = *__error();
    }
LABEL_10:
    free(v8);
    goto LABEL_11;
  }
  int v3 = v2;
  if (v2 != 2)
  {
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_thread_map_cold_1();
    }
    appended = 0;
    *__error() = v5;
    goto LABEL_10;
  }
  int v3 = 0;
  appended = 0;
LABEL_11:
  *__error() = v3;
  return appended;
}

uint64_t kdebug_alloc_thread_map(void *a1, size_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t result = kdebug_get_bufinfo(&v11);
  if (!result)
  {
    if (HIDWORD(v12))
    {
      size_t v5 = 32 * SHIDWORD(v12);
      *a2 = v5;
      int v6 = malloc_type_malloc(v5, 0x35B909D8uLL);
      if (!v6) {
        ktrace_postprocess_file_internal_cold_1();
      }
      CFIndex v7 = v6;
      int v15 = 12;
      *(void *)int v14 = 0x1800000001;
      if (sysctl(v14, 3u, v6, a2, 0, 0) < 0)
      {
        unsigned int v8 = *__error();
        free(v7);
        if (v8 == 22)
        {
          return kdebug_alloc_current_thread_map(v9, a2);
        }
        else
        {
          int v10 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            kdebug_alloc_thread_map_cold_4();
          }
          *__error() = v10;
          if (v8) {
            return v8;
          }
          else {
            return 22;
          }
        }
      }
      else
      {
        uint64_t result = 0;
        *a1 = v7;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t kdebug_alloc_current_cpu_map(void *a1, size_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v13 = 25;
  size_t size = 0;
  *(void *)uint64_t v12 = 0x1800000001;
  if (sysctl(v12, 3u, 0, &size, 0, 0))
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      kdebug_alloc_current_cpu_map_cold_5();
    }
    *__error() = v4;
    unsigned int v5 = *__error();
    if (v5) {
      return v5;
    }
    else {
      return 22;
    }
  }
  else
  {
    CFIndex v7 = malloc_type_malloc(size, 0xA43368D8uLL);
    if (!v7) {
      ktrace_postprocess_file_internal_cold_1();
    }
    unsigned int v8 = v7;
    uint64_t result = sysctl(v12, 3u, v7, &size, 0, 0);
    if (result)
    {
      unsigned int v9 = *__error();
      free(v8);
      int v10 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        kdebug_alloc_current_cpu_map_cold_4();
      }
      *__error() = v10;
      if (v9) {
        return v9;
      }
      else {
        return 22;
      }
    }
    else
    {
      *a1 = v8;
      *a2 = size;
    }
  }
  return result;
}

void *drain_events_block(uint64_t a1)
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x3052000000;
  CFIndex v7 = __Block_byref_object_copy__1;
  unsigned int v8 = __Block_byref_object_dispose__1;
  uint64_t v9 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __drain_events_block_block_invoke;
  v3[3] = &unk_1E6062750;
  v3[4] = &v4;
  v3[5] = a1;
  id v1 = _Block_copy(v3);
  v5[5] = (uint64_t)v1;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void ktrace_end(uint64_t a1, int a2)
{
  _session_end_internal(a1, a2 != 0, 3);
}

uint64_t sub_1B39A9E08()
{
  return swift_bridgeObjectRetain();
}

void _session_end_internal(uint64_t a1, char a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)(a1 + 4);
  if ((a2 & 2) != 0) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 128));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 824));
  if ((*(_WORD *)(a1 + 224) & 3) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 156));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    ktrace_log_init();
    int v10 = ktrace_log;
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v11 = "ending before starting/configuration";
    goto LABEL_16;
  }
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 157));
  if (v8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    ktrace_log_init();
    int v10 = ktrace_log;
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v11 = "ending while already ended immediately";
LABEL_16:
    _os_log_impl(&dword_1B39A5000, v10, OS_LOG_TYPE_INFO, v11, buf, 2u);
    return;
  }
  if ((v6 | 2) == 2)
  {
    BOOL v9 = _session_end_live(a1);
    if (a3) {
      goto LABEL_7;
    }
LABEL_29:
    ktrace_postprocess_file_internal_cold_1();
  }
  BOOL v9 = 0;
  if (!a3) {
    goto LABEL_29;
  }
LABEL_7:
  if (a2) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 157));
  }
  if ((a2 & 4) != 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 158));
    atomic_store(1u, (unsigned __int8 *)(a1 + 156));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    if (!v9)
    {
      uint64_t v13 = *(void *)(a1 + 80);
      if (v13) {
        _session_end_internal(v13, 1, 3);
      }
      *(_DWORD *)(a1 + 808) = 7;
      goto LABEL_34;
    }
    goto LABEL_18;
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 156));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
  if (v9)
  {
LABEL_18:
    if (*(_DWORD *)(a1 + 4) == 2)
    {
      *(_WORD *)(a1 + 224) |= 0x20u;
      ktrace_file_append_live_stackshot_internal(*(void *)(a1 + 648));
    }
    *(_DWORD *)(a1 + 808) = a3;
    if ((v7 - 1) <= 1) {
      [*(id *)(a1 + 600) willEndTracingWithFile:0];
    }
    trace_set_enable(0);
    if (*(void *)(a1 + 592)) {
      ktrace_client_stop_tracing();
    }
    if ((v7 - 1) <= 1)
    {
      uint64_t v12 = *(NSObject **)(a1 + 128);
      if (!v12) {
        ktrace_postprocess_file_internal_cold_1();
      }
      if ((a2 & 2) != 0)
      {
        [*(id *)(a1 + 600) didEndTracingWithFile:*(void *)(a1 + 648)];
      }
      else
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___session_end_internal_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = a1;
        dispatch_async(v12, block);
      }
    }
  }
LABEL_34:
  ktrace_log_init();
  uint64_t v14 = ktrace_log;
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
  {
    uint64_t v22 = "";
    uint64_t v23 = " immediately";
    if ((a2 & 1) == 0) {
      uint64_t v23 = "";
    }
    int v24 = _end_reason_names[a3];
    uint64_t v25 = " from draining";
    if ((a2 & 2) == 0) {
      uint64_t v25 = "";
    }
    *(_DWORD *)buf = 136315906;
    uint64_t v31 = v23;
    __int16 v32 = 2080;
    v33 = v25;
    __int16 v34 = 2080;
    unsigned int v35 = v24;
    if (v9) {
      uint64_t v22 = ", was active";
    }
    __int16 v36 = 2080;
    char v37 = v22;
    _os_log_impl(&dword_1B39A5000, v14, OS_LOG_TYPE_INFO, "ending tracing%s%s due to %s%s", buf, 0x2Au);
  }
  unsigned int v26 = *(_DWORD *)(a1 + 4);
  if (v26 >= 3)
  {
    if (v26 != 4) {
      _session_end_internal_cold_3();
    }
    if (v9) {
      _session_teardown(a1, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else if ((a2 & 1) != 0 || *(_DWORD *)a1 == 1)
  {
    uint64_t v27 = *(NSObject **)(a1 + 128);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = ___session_end_internal_block_invoke_13;
    v28[3] = &__block_descriptor_40_e5_v8__0l;
    v28[4] = a1;
    dispatch_async(v27, v28);
  }
}

BOOL _session_end_live(uint64_t a1)
{
  uint64_t v1 = a1;
  atomic_compare_exchange_strong(&live_session, (unint64_t *)&v1, 0);
  return v1 == a1;
}

uint64_t sub_1B39AA240(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D50);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39B5BB4();
  sub_1B3A70E70();
  char v10 = 0;
  sub_1B3A70CA0();
  if (!v1)
  {
    char v9 = 1;
    sub_1B3A70CB0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1B39AA3A8(char a1, char **a2, char *a3, unint64_t a4, char a5)
{
  double v14 = sub_1B39AC9F0();
  double v16 = v14;
  double v17 = v15;
  if ((a5 & 1) == 0)
  {
    BOOL v18 = v13 >= a4;
    unint64_t v19 = v13 - a4;
    if (!v18) {
      goto LABEL_11;
    }
    double v6 = *(double *)&a2;
    double v7 = *(double *)&a3;
LABEL_7:
    uint64_t v5 = (unint64_t *)(*(uint64_t (**)(unsigned char *))(*v5 + 224))(v27);
    a2 = v21;
    a3 = *v21;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = a3;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  unint64_t v20 = v5[7];
  unint64_t v19 = v13 - v20;
  if (v13 >= v20)
  {
    double v6 = *((double *)v5 + 5);
    double v7 = *((double *)v5 + 6);
    *((double *)v5 + 5) = v14;
    *((double *)v5 + 6) = v15;
    v5[7] = v13;
    goto LABEL_7;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  *(double *)&a3 = COERCE_DOUBLE(sub_1B3A1EFB8(0, *((void *)a3 + 2) + 1, 1, a3));
  *a2 = a3;
LABEL_8:
  unint64_t v24 = *((void *)a3 + 2);
  unint64_t v23 = *((void *)a3 + 3);
  if (v24 >= v23 >> 1)
  {
    *(double *)&a3 = COERCE_DOUBLE(sub_1B3A1EFB8((char *)(v23 > 1), v24 + 1, 1, a3));
    *a2 = a3;
  }
  *((void *)a3 + 2) = v24 + 1;
  uint64_t v25 = &a3[32 * v24];
  v25[32] = a1;
  *((double *)v25 + 5) = v16 - v6;
  *((double *)v25 + 6) = v17 - v7;
  *((void *)v25 + 7) = v19;
  ((void (*)(unsigned char *, void))v5)(v27, 0);
  return v19;
}

char *sub_1B39AA5A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5BF8);
    char v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    char v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B39AA6C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = v3[3];
  sub_1B3A709B0();
  swift_bridgeObjectRelease();
  strcpy((char *)v18, "waking due to ");
  HIBYTE(v18[1]) = -18;
  sub_1B39ADA50(a1, a2, a3);
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  (*(void (**)(void, void))(*(void *)v7 + 224))(v18[0], v18[1]);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(uint64_t (**)(void *))(*v3 + 112);
  sub_1B39AAABC(a1, a2, a3);
  uint64_t v9 = (uint64_t (*)(void *, void))v8(v18);
  size_t v11 = v10;
  uint64_t v12 = *v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *size_t v11 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v12 = sub_1B39AA5A8(0, *((void *)v12 + 2) + 1, 1, v12);
    *size_t v11 = v12;
  }
  unint64_t v15 = *((void *)v12 + 2);
  unint64_t v14 = *((void *)v12 + 3);
  if (v15 >= v14 >> 1)
  {
    uint64_t v12 = sub_1B39AA5A8((char *)(v14 > 1), v15 + 1, 1, v12);
    *size_t v11 = v12;
  }
  *((void *)v12 + 2) = v15 + 1;
  double v16 = &v12[24 * v15];
  *((void *)v16 + 4) = a1;
  *((void *)v16 + 5) = a2;
  v16[48] = a3;
  return v9(v18, 0);
}

uint64_t sub_1B39AA888()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 320))();
  if (result)
  {
    uint64_t v2 = sub_1B39B5840();
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3)
      {
        double v16 = *(void (**)(uint64_t, uint64_t, void))(*(void *)v0 + 304);
        uint64_t v12 = *(void (**)(uint64_t, unint64_t, void, uint64_t))(**(void **)(v0
                                                                                              + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                                                + 216);
        uint64_t v4 = (unsigned __int8 *)(v2 + 48);
        do
        {
          uint64_t v5 = *((void *)v4 - 2);
          uint64_t v6 = *((void *)v4 - 1);
          unsigned int v7 = *v4;
          v4 += 24;
          sub_1B39AAABC(v5, v6, v7);
          sub_1B39AAABC(v5, v6, v7);
          v16(v5, v6, v7);
          uint64_t v14 = 0;
          unint64_t v15 = 0xE000000000000000;
          v13[3] = MEMORY[0x1E4FBB1A0];
          v13[0] = 0x676E69646E65;
          v13[1] = 0xE600000000000000;
          uint64_t v8 = (unsigned __int8 *)sub_1B39B5D68();
          sub_1B39B5680((uint64_t)v13, *v8);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
          sub_1B3A703A0();
          sub_1B39ADA50(v5, v6, v7);
          sub_1B39B6148(v5, v6, v7);
          sub_1B3A703A0();
          swift_bridgeObjectRelease();
          uint64_t v9 = v14;
          unint64_t v10 = v15;
          char v11 = sub_1B39B5D74();
          v12(v9, v10, v11 & 1, 1);
          swift_bridgeObjectRelease();
          --v3;
        }
        while (v3);
        return swift_bridgeObjectRelease();
      }
      else
      {
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B39AAABC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B39AAAD4(UInt8 *a1)
{
  void (*v65)(void *__return_ptr);
  UInt8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  char v74;
  char v75;
  void *v76;
  unsigned __int8 *v77;
  _DWORD *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char *v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  uint64_t v88;
  id v89;
  uint64_t *v90;
  uint64_t v91;
  id v92;
  unint64_t v93;
  char v94;
  id v95;
  UInt8 *v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  UInt8 *v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  SEL *v111;
  uint64_t v112;
  unint64_t v113;
  CFIndex v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  id v118;
  void *v119;
  unsigned __int8 v120;
  UInt8 *v121;
  UInt8 *v122;
  void (**v123)(char *, uint64_t, uint64_t);
  id v124;
  void *v125;
  unsigned int v126;
  UInt8 *v127;
  char *v128;
  void (*v129)(char *);
  UInt8 *v130;
  void (**v131)(char *, uint64_t, uint64_t);
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void *v137;
  char *v138;
  uint64_t v139;
  void (**v140)(char *, uint64_t, uint64_t);
  void (*v141)(void (**)(char *, uint64_t, uint64_t), uint64_t);
  void *v142;
  unsigned int v143;
  UInt8 *v144;
  UInt8 *v145;
  char *v146;
  uint64_t result;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  id v151;
  id v152;
  void *v153;
  void (*v154)(uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  void (**v161)(char *, uint64_t);
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  const char *v166;
  uint32_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint32_t *v172;
  void (*v173)(void (**)(char *, uint64_t, uint64_t), uint64_t);
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  UInt8 *v181;
  unint64_t v182;
  char v183;
  char v184;
  void (*v185)(UInt8 *, unint64_t, void, void);
  char v186;
  void *v187;
  uint64_t v188;
  const void *v189;
  uint64_t v190;
  void (**v191)(char *, uint64_t, uint64_t);
  uint64_t v192;
  void (**v193)(char *, uint64_t, uint64_t);
  void (*v194)(void (**)(char *, uint64_t, uint64_t), uint64_t);
  void (**v195)(char *, uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  void (*v198)(char *, uint64_t, uint64_t, unsigned __int8 *);
  unsigned __int8 *v199;
  uint64_t v200;
  char *v201;
  unsigned __int8 *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(uint64_t);
  void (**v214)(char *, uint64_t, uint64_t);
  uint64_t v215;
  long long *v216;
  uint64_t v217;
  char *v218;
  void (**v219)(char *, uint64_t, uint64_t);
  unsigned int (*v220)(char *, uint64_t, uint64_t);
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  void (*v226)(void *__return_ptr);
  UInt8 *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  UInt8 *v236;
  unint64_t v237;
  unint64_t v238;
  _OWORD v239[3];
  uint64_t v240;
  int v241;
  long long *v242;
  long long v243;
  long long v244;
  void *v245;
  uint64_t v246;
  void v247[18];
  void v248[18];
  void v249[7];
  uint64_t v250;
  void v251[13];
  char v252;
  void v253[14];
  uint64_t v254;
  void v255[16];
  uint64_t v256;
  void v257[18];
  unsigned char v258[16];
  unsigned char v259[16];
  _OWORD v260[3];
  char v261;
  unint64_t v262;
  char v263;
  unint64_t v264;
  char v265;
  uint64_t v266;

  uint64_t v3 = v1;
  v266 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = sub_1B3A6FFD0();
  v212 = *(void *)(v5 - 8);
  v213 = (void (*)(uint64_t))v5;
  MEMORY[0x1F4188790](v5);
  v210 = (char *)&v197 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_1B3A70040();
  v209 = *(void *)(v211 - 8);
  MEMORY[0x1F4188790](v211);
  v207 = (char *)&v197 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_1B3A70050();
  v206 = *(void *)(v208 - 8);
  MEMORY[0x1F4188790](v208);
  v205 = (char *)&v197 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A78);
  MEMORY[0x1F4188790](v9 - 8);
  v215 = (uint64_t)&v197 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  v203 = (char *)&v197 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v204 = (char *)&v197 - v15;
  MEMORY[0x1F4188790](v14);
  v228 = (char *)&v197 - v16;
  v233 = sub_1B3A6FF40();
  uint64_t v17 = *(void *)(v233 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v233);
  v218 = (char *)&v197 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v214 = (void (**)(char *, uint64_t, uint64_t))((char *)&v197 - v21);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v219 = (char *)&v197 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v197 - v24;
  v230 = sub_1B3A701B0();
  v224 = *(void *)(v230 - 8);
  MEMORY[0x1F4188790](v230);
  uint64_t v27 = (char *)&v197 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = sub_1B3A701D0();
  v223 = *(void *)(v229 - 8);
  MEMORY[0x1F4188790](v229);
  uint64_t v29 = (uint64_t)&v197 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  ktrace_end(*(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_session), 0);
  uint64_t v30 = *(void **)(*(void *)a1 + 256);
  v226 = (void (*)(void *__return_ptr))(*(void *)a1 + 256);
  v227 = a1;
  v225 = v30;
  ((void (*)(uint64_t, void, void, void, uint64_t))v30)(4, 0, 0, 0, 1);
  v234 = (char *)v3;
  uint64_t v31 = *(unsigned __int8 **)(v3 + OBJC_IVAR____TtC6ktrace9Recording_recording);
  __int16 v32 = (void (**)(void, void))*((void *)v31 + 5);
  if (v32)
  {
    _Block_copy(*((const void **)v31 + 5));
    _Block_copy(v32);
    v243 = xmmword_1B3A75DE0;
    v241 = 4;
    v242 = &v243;
    ((void (**)(void, int *))v32)[2](v32, &v241);
    _Block_release(v32);
    v33 = v32;
  }
  else
  {
    v33 = 0;
  }
  _Block_release(v33);
  unint64_t v34 = MEMORY[0x1E4FBC860];
  v238 = MEMORY[0x1E4FBC860];
  unsigned __int8 v35 = v31[48];
  v231 = v17;
  v232 = v25;
  v202 = v31;
  if ((v35 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = 0;
  uint64_t v37 = sub_1B3A4C0E8(0, (unint64_t *)&qword_1E9CD5BF0);
  uint64_t v25 = v234;
  v217 = *(void *)&v234[OBJC_IVAR____TtC6ktrace9Recording_waitQueue];
  v220 = (unsigned int (*)(char *, uint64_t, uint64_t))v37;
  sub_1B3A706A0();
  swift_getObjectType();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v36;
  *(void *)(v38 + 24) = v25;
  v245 = sub_1B3A4B894;
  v246 = v38;
  *(void *)&v243 = MEMORY[0x1E4F143A8];
  uint64_t v2 = 1107296256;
  *((void *)&v243 + 1) = 1107296256;
  v216 = &v244;
  *(void *)&v244 = sub_1B39B583C;
  *((void *)&v244 + 1) = &block_descriptor_27;
  v39 = _Block_copy(&v243);
  v222 = v36;
  swift_retain();
  swift_retain();
  sub_1B3A701C0();
  sub_1B3A19058();
  sub_1B3A706B0();
  _Block_release(v39);
  v224 = *(void *)(v224 + 8);
  ((void (*)(char *, uint64_t))v224)(v27, v230);
  v201 = v27;
  v223 = *(void *)(v223 + 8);
  ((void (*)(uint64_t, uint64_t))v223)(v29, v229);
  swift_release();
  sub_1B3A706D0();
  uint64_t v40 = swift_unknownObjectRetain();
  MEMORY[0x1B3EBD870](v40);
  if (*(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_95;
  }
  while (1)
  {
    sub_1B3A705A0();
    sub_1B3A70570();
    swift_unknownObjectRelease();
    sub_1B3A706A0();
    swift_getObjectType();
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v222;
    *(void *)(v41 + 24) = v25;
    v245 = sub_1B3A4C630;
    v246 = v41;
    *(void *)&v243 = MEMORY[0x1E4F143A8];
    *((void *)&v243 + 1) = v2;
    *(void *)&v244 = sub_1B39B583C;
    *((void *)&v244 + 1) = &block_descriptor_34_0;
    uint64_t v31 = (unsigned __int8 *)_Block_copy(&v243);
    swift_retain();
    swift_retain();
    sub_1B3A701C0();
    uint64_t v42 = (uint64_t)v201;
    sub_1B3A19058();
    sub_1B3A706B0();
    _Block_release(v31);
    ((void (*)(uint64_t, uint64_t))v224)(v42, v230);
    ((void (*)(uint64_t, uint64_t))v223)(v29, v229);
    swift_release();
    sub_1B3A706D0();
    uint64_t v43 = swift_unknownObjectRetain();
    MEMORY[0x1B3EBD870](v43);
    if (*(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1B3A70580();
    }
    sub_1B3A705A0();
    sub_1B3A70570();
    swift_release();
    swift_unknownObjectRelease();
    unint64_t v34 = v238;
    uint64_t v17 = v231;
    uint64_t v25 = v232;
LABEL_9:
    sub_1B3A70700();
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_1B3A70B10();
      if (!v29) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v29) {
        goto LABEL_18;
      }
    }
    if (v29 >= 1) {
      break;
    }
    __break(1u);
LABEL_95:
    sub_1B3A70580();
  }
  uint64_t v44 = 0;
  do
  {
    if ((v34 & 0xC000000000000001) != 0) {
      MEMORY[0x1B3EBDD00](v44, v34);
    }
    else {
      swift_unknownObjectRetain();
    }
    ++v44;
    swift_getObjectType();
    sub_1B3A706C0();
    swift_unknownObjectRelease();
  }
  while (v29 != v44);
LABEL_18:
  uint64_t v45 = swift_bridgeObjectRelease();
  uint64_t v46 = (uint64_t)v228;
  (*(void (**)(uint64_t))(*(void *)v234 + 248))(v45);
  uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v48 = v233;
  v222 = v17 + 48;
  v220 = v47;
  if (v47((char *)v46, 1, v233) == 1) {
    goto LABEL_102;
  }
  v216 = *(long long **)(v17 + 32);
  v217 = v17 + 32;
  ((void (*)(char *, uint64_t, uint64_t))v216)(v25, v46, v48);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = 0;
  v224 = v49 + 16;
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = 0;
  v223 = v50 + 16;
  uint64_t v51 = sub_1B3A6FF10();
  uint64_t v53 = v52;
  uint64_t v54 = sub_1B3A70320();
  uint64_t v55 = ktrace_file_open((const char *)(v54 + 32), 1);
  swift_release();
  v229 = v50;
  v230 = v49;
  if (!v55)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    swift_allocError();
    long long v81 = v80;
    long long v82 = MEMORY[0x1B3EBD410]();
    *(void *)long long v81 = v51;
    *(void *)(v81 + 8) = v53;
    *(_DWORD *)(v81 + 16) = v82;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    long long v83 = v232;
    long long v77 = (unsigned __int8 *)v233;
LABEL_66:
    (*(void (**)(char *, unsigned __int8 *))(v17 + 8))(v83, v77);
    swift_release();
    swift_release();
    return v31 & 1;
  }
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = v49;
  *(void *)(v56 + 24) = v50;
  v245 = sub_1B3A4B7CC;
  v246 = v56;
  *(void *)&v243 = MEMORY[0x1E4F143A8];
  *((void *)&v243 + 1) = 1107296256;
  *(void *)&v244 = sub_1B3A46734;
  *((void *)&v244 + 1) = &block_descriptor_20;
  uint64_t v57 = _Block_copy(&v243);
  swift_retain();
  swift_retain();
  swift_release();
  ktrace_file_iterate(v55, 0, (uint64_t)v57, v58, v59, v60, v61, v62);
  _Block_release(v57);
  uint64_t v63 = (uint64_t)v234;
  uint64_t v64 = (char *)(*(void *)v234 + 344);
  uint64_t v65 = *(void (**)(void *__return_ptr))v64;
  (*(void (**)(void *__return_ptr))v64)(v247);
  sub_1B3A20690((uint64_t)v247);
  v201 = (char *)v247[1];
  uint64_t v66 = v227;
  uint64_t v67 = ((uint64_t (*)(uint64_t, void, void, void, uint64_t))v225)(6, 0, 0, 0, 1);
  ((void (*)(void *__return_ptr, uint64_t))v65)(v248, v67);
  sub_1B3A20690((uint64_t)v248);
  uint64_t v68 = (*(uint64_t (**)(void, void, void))(*(void *)v66 + 304))(v248[9], v248[10], v248[11]);
  v228 = v64;
  v226 = v65;
  ((void (*)(void *__return_ptr, uint64_t))v65)(v249, v68);
  uint64_t v69 = v250;
  v240 = v250;
  swift_bridgeObjectRetain();
  sub_1B3A20690((uint64_t)v249);
  v70 = *(void *)(v69 + 16);
  sub_1B3A0EB24((uint64_t)&v240);
  (*(void (**)(BOOL))(*(void *)v66 + 328))(v70 != 0);
  uint64_t v31 = (unsigned __int8 *)(v63 + OBJC_IVAR____TtC6ktrace9Recording_options);
  CFIndex v71 = type metadata accessor for RecordingOptions.Options(0);
  v72 = v31[*(int *)(v71 + 64)];
  v200 = v71;
  if (v72 == 1)
  {
    size_t v73 = *(void *)(v63 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
    v74 = sub_1B39B5D74();
    int v75 = sub_1B39B5AA4();
    (*(void (**)(unint64_t, unint64_t, void, void))(*(void *)v73 + 216))(0xD000000000000010, 0x80000001B3A7BD60, v74 & 1, v75 & 1);
    v76 = ktrace_file_compress(v55, 2u);
    long long v77 = (unsigned __int8 *)v233;
    if (!v76)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for KTraceRecordError();
      sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
      swift_allocError();
      *long long v78 = MEMORY[0x1B3EBD410]();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      long long v79 = (void *)v55;
LABEL_33:
      ktrace_file_close(v79);
      uint64_t v17 = v231;
LABEL_34:
      long long v83 = v232;
      goto LABEL_66;
    }
  }
  else
  {
    v76 = (void *)v55;
    long long v77 = (unsigned __int8 *)v233;
  }
  long long v84 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28CB8]), sel_init);
  long long v85 = (void *)sub_1B3A70290();
  swift_bridgeObjectRelease();
  *(void *)&v243 = 0;
  long long v86 = objc_msgSend(v84, sel_attributesOfItemAtPath_error_, v85, &v243);

  long long v87 = (void *)v243;
  if (!v86)
  {
    long long v95 = (id)v243;
    swift_bridgeObjectRelease();
    sub_1B3A6FE40();

    swift_willThrow();
    long long v79 = v76;
    goto LABEL_33;
  }
  v199 = v31;
  v225 = v76;
  type metadata accessor for FileAttributeKey(0);
  sub_1B3A4965C(&qword_1E9CD61B8, type metadata accessor for FileAttributeKey);
  long long v88 = sub_1B3A70220();
  long long v89 = v87;

  v226(v251);
  sub_1B3A20690((uint64_t)v251);
  if (v252) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = v251[12];
  }
  long long v90 = (uint64_t *)v224;
  swift_beginAccess();
  long long v91 = *v90;
  if (*(void *)(v88 + 16))
  {
    long long v92 = (id)*MEMORY[0x1E4F28390];
    long long v93 = sub_1B3A48FC4((uint64_t)v92);
    if (v94)
    {
      sub_1B39B2F1C(*(void *)(v88 + 56) + 32 * v93, (uint64_t)&v243);
    }
    else
    {
      v243 = 0u;
      v244 = 0u;
    }
  }
  else
  {
    v243 = 0u;
    v244 = 0u;
  }
  swift_bridgeObjectRelease();
  long long v83 = v232;
  if (!*((void *)&v244 + 1))
  {
    sub_1B3A11580((uint64_t)&v243, &qword_1E9CD5A50);
    goto LABEL_42;
  }
  if (!swift_dynamicCast())
  {
LABEL_42:
    long long v96 = 0;
    goto LABEL_43;
  }
  long long v96 = v236;
LABEL_43:
  long long v97 = *v90;
  v226(v253);
  sub_1B3A20690((uint64_t)v253);
  sub_1B39B4CD4((uint64_t)&v254, (uint64_t)v259, &qword_1E9CD5CE8);
  sub_1B39B4CD4((uint64_t)v259, (uint64_t)&v262, &qword_1E9CD5CE8);
  if (v263)
  {
    __break(1u);
  }
  else
  {
    long long v98 = v97 >= v262;
    long long v99 = v97 - v262;
    if (!v98)
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
    }
    long long v100 = (unint64_t *)v223;
    long long v101 = swift_beginAccess();
    long long v102 = *v100;
    ((void (*)(void *__return_ptr, uint64_t))v226)(v255, v101);
    sub_1B3A20690((uint64_t)v255);
    sub_1B39B4CD4((uint64_t)&v256, (uint64_t)v258, &qword_1E9CD5CE8);
    sub_1B39B4CD4((uint64_t)v258, (uint64_t)&v264, &qword_1E9CD5CE8);
    if ((v265 & 1) == 0)
    {
      long long v98 = v102 >= v264;
      long long v103 = v102 - v264;
      uint64_t v31 = (unsigned __int8 *)v233;
      long long v104 = v225;
      if (!v98) {
        goto LABEL_96;
      }
      sub_1B3A1BC4C((uint64_t)v201, v46, v91, (uint64_t)v96, v99, v103, v239);
      v260[0] = v239[0];
      v260[1] = v239[1];
      v260[2] = v239[2];
      v261 = 0;
      v105 = v227;
      (*(void (**)(_OWORD *))(*(void *)v227 + 280))(v260);
      sub_1B3A6FCD0();
      swift_allocObject();
      sub_1B3A6FCC0();
      v236 = v105;
      type metadata accessor for RecordInfo();
      sub_1B3A4965C(&qword_1E9CD61C0, (void (*)(uint64_t))type metadata accessor for RecordInfo);
      uint64_t v106 = v221;
      v107 = sub_1B3A6FCB0();
      if (v106)
      {

        swift_release();
        v109 = swift_bridgeObjectRelease();
        v221 = 0;
        v223 = 0;
        v224 = 0xF000000000000000;
        v110 = (uint64_t)v234;
        v111 = (SEL *)&unk_1E6063000;
      }
      else
      {
        v112 = v107;
        v113 = v108;
        swift_release();
        sub_1B39B396C(v112, v113);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD61C8);
        sub_1B3A6FF90();
        v221 = 0;
        swift_bridgeObjectRelease();
        v110 = (uint64_t)v234;
        v114 = 0;
        v111 = (SEL *)&unk_1E6063000;
        switch(v113 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v112), v112)) {
              goto LABEL_98;
            }
            v114 = HIDWORD(v112) - (int)v112;
LABEL_56:
            ktrace_file_append_chunk((uint64_t)v104, 32790, 1, 0, v236, v114);
            v223 = v112;
            v224 = v113;
            v109 = sub_1B39B0D88(v112, v113);
            break;
          case 2uLL:
            v116 = *(void *)(v112 + 16);
            v115 = *(void *)(v112 + 24);
            v114 = v115 - v116;
            if (!__OFSUB__(v115, v116)) {
              goto LABEL_56;
            }
            goto LABEL_99;
          case 3uLL:
            goto LABEL_56;
          default:
            v114 = BYTE6(v113);
            goto LABEL_56;
        }
      }
      v117 = (*(uint64_t (**)(uint64_t))(*(void *)v110 + 272))(v109);
      v118 = [objc_allocWithZone(MEMORY[0x1E4F28CB8]) v111[348]];
      v119 = (void *)sub_1B3A6FEB0();
      if (v117 == 7)
      {
        v236 = 0;
        v120 = objc_msgSend(v118, sel_removeItemAtURL_error_, v119, &v236);

        v121 = v236;
        if (v120) {
          goto LABEL_59;
        }
      }
      else
      {
        v142 = (void *)sub_1B3A6FEB0();
        v236 = 0;
        v143 = objc_msgSend(v118, sel_moveItemAtURL_toURL_error_, v119, v142, &v236);

        v121 = v236;
        if (v143)
        {
LABEL_59:
          v122 = v121;
          v123 = (void (**)(char *, uint64_t, uint64_t))v219;
          sub_1B3A6FEF0();
          v124 = [objc_allocWithZone(MEMORY[0x1E4F28CB8]) v111[348]];
          v125 = (void *)sub_1B3A6FEB0();
          v236 = 0;
          v126 = objc_msgSend(v124, sel_removeItemAtURL_error_, v125, &v236);

          v127 = v236;
          if (v126)
          {
            v128 = v204;
            v198 = *(void (**)(char *, uint64_t, uint64_t, unsigned __int8 *))(v231 + 56);
            v201 = (char *)(v231 + 56);
            v198(v204, 1, 1, v31);
            v129 = *(void (**)(char *))(*(void *)v110 + 256);
            v130 = v127;
            v129(v128);
            v131 = v214;
            sub_1B3A6FEF0();
            v132 = v205;
            sub_1B3A70030();
            v133 = v209;
            v134 = v207;
            uint64_t v31 = (unsigned __int8 *)v211;
            (*(void (**)(char *, void, uint64_t))(v209 + 104))(v207, *MEMORY[0x1E4F27C48], v211);
            v135 = v210;
            sub_1B3A6FFC0();
            v136 = v215;
            sub_1B3A70020();
            (*(void (**)(char *, void (*)(uint64_t)))(v212 + 8))(v135, v213);
            (*(void (**)(char *, unsigned __int8 *))(v133 + 8))(v134, v31);
            (*(void (**)(char *, uint64_t))(v206 + 8))(v132, v208);
            v137 = v221;
            listFiles(in:pathExtension:olderThan:)(v131, *(void *)&v234[OBJC_IVAR____TtC6ktrace9Recording_pendingExtension], *(void *)&v234[OBJC_IVAR____TtC6ktrace9Recording_pendingExtension + 8], v136);
            if (v137)
            {
              v140 = v123;
              sub_1B3A4B87C(v223, v224);
              sub_1B3A11580(v136, &qword_1E9CD5A78);
              uint64_t v17 = v231;
              v141 = *(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v231 + 8);
              long long v77 = (unsigned __int8 *)v233;
              v141(v131, v233);
              v141(v140, (uint64_t)v77);
              ktrace_file_close(v225);
              goto LABEL_34;
            }
            v208 = 0;
            v148 = *((void *)v138 + 2);
            if (v148)
            {
              v149 = v139;
              v150 = v138;
              v151 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B68]), sel_init);
              v152 = objc_msgSend(v151, sel_stringFromByteCount_, v149);

              sub_1B3A702C0();
              v153 = *(void **)&v234[OBJC_IVAR____TtC6ktrace9Recording_reporter];
              v236 = 0;
              v237 = 0xE000000000000000;
              sub_1B3A709B0();
              sub_1B3A703A0();
              v235 = v148;
              sub_1B3A70D00();
              sub_1B3A703A0();
              swift_bridgeObjectRelease();
              sub_1B3A703A0();
              sub_1B3A703A0();
              swift_bridgeObjectRelease();
              sub_1B3A703A0();
              v154 = *(void (**)(uint64_t))(*(void *)v153 + 248);
              v155 = *(void *)v153 + 248;
              v221 = v153;
              v212 = v155;
              v213 = v154;
              ((void (*)(UInt8 *, unint64_t))v154)(v236, v237);
              swift_bridgeObjectRelease();
              v207 = v150;
              v156 = *((void *)v150 + 2);
              v157 = v233;
              uint64_t v17 = v231;
              v158 = v203;
              if (v156)
              {
                v159 = *(char **)(v231 + 16);
                v160 = &v207[(*(unsigned __int8 *)(v231 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v231 + 80)];
                v209 = *(void *)(v231 + 72);
                v210 = v159;
                v211 = v231 + 16;
                v161 = (void (**)(char *, uint64_t))(v231 + 8);
                v162 = v218;
                while (1)
                {
                  ((void (*)(char *, char *, uint64_t))v210)(v158, v160, v157);
                  v198(v158, 0, 1, (unsigned __int8 *)v157);
                  if (v220(v158, 1, v157) == 1) {
                    break;
                  }
                  ((void (*)(char *, char *, uint64_t))v216)(v162, v158, v157);
                  v163 = sub_1B3A6FF10();
                  v213(v163);
                  uint64_t v17 = v231;
                  swift_bridgeObjectRelease();
                  (*v161)(v162, v157);
                  v160 += v209;
                  if (!--v156) {
                    goto LABEL_73;
                  }
                }
              }
              else
              {
LABEL_73:
                v198(v158, 1, 1, (unsigned __int8 *)v157);
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v17 = v231;
            }
            long long v83 = v232;
            v164 = *(void *)&v199[*(int *)(v200 + 52)];
            uint64_t v31 = *(unsigned __int8 **)(v164 + 16);
            v165 = v224;
            if (!v31)
            {
LABEL_85:
              v174 = (uint64_t)v234;
              v175 = sub_1B3A47438((uint64_t)v234);
              v177 = v176;
              v179 = v178;
              if (v175)
              {
                v226(v257);
                sub_1B3A20690((uint64_t)v257);
                if (v257[8] < 1)
                {
                  v180 = *(void *)(v174 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
                  LOBYTE(v31) = 1;
                  goto LABEL_89;
                }
                swift_bridgeObjectRelease();
                v179 = 0xEB0000000074736FLL;
                v177 = 0x6C2073746E657665;
              }
              LOBYTE(v31) = 0;
              v180 = *(void *)(v174 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
LABEL_89:
              v234 = (char *)v177;
              v236 = 0;
              v237 = 0xE000000000000000;
              sub_1B3A703A0();
              swift_bridgeObjectRelease();
              sub_1B3A703A0();
              swift_bridgeObjectRetain();
              sub_1B3A703A0();
              swift_bridgeObjectRelease();
              v181 = v236;
              v182 = v237;
              v183 = sub_1B39B5D74();
              v184 = sub_1B39B5AA4();
              v185 = *(void (**)(UInt8 *, unint64_t, void, void))(*(void *)v180 + 216);
              v185(v181, v182, v183 & 1, v184 & 1);
              swift_bridgeObjectRelease();
              LOBYTE(v181) = sub_1B39B5D74();
              v186 = sub_1B39B5AA4();
              v185((UInt8 *)0xD000000000000042, 0x80000001B3A7BCE0, v181 & 1, v186 & 1);
              v187 = (void *)*((void *)v202 + 5);
              if (v187)
              {
                _Block_copy(*((const void **)v202 + 5));
                _Block_copy(v187);
                v188 = v208;
                sub_1B3A48534((uint64_t)v234, v179, 6, (void (**)(void, void, void, void))v187);
                v208 = v188;
                v189 = v187;
              }
              else
              {
                v189 = 0;
              }
              _Block_release(v189);
              v190 = v231;
              v191 = (void (**)(char *, uint64_t, uint64_t))v232;
              v193 = v214;
              v192 = v215;
              swift_bridgeObjectRelease();
              sub_1B3A11580(v192, &qword_1E9CD5A78);
              v194 = *(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v190 + 8);
              v195 = v193;
              v196 = v233;
              v194(v195, v233);
              v194((void (**)(char *, uint64_t, uint64_t))v219, v196);
              ktrace_file_close(v225);
              v194(v191, v196);
              swift_release();
              swift_release();
              return v31 & 1;
            }
            v166 = (const char *)(sub_1B3A70320() + 32);
            swift_bridgeObjectRetain();
            v167 = notify_post(v166);
            swift_release();
            if (!v167)
            {
              v168 = 0;
              v169 = v164 + 56;
              --v31;
              while (v31 != v168)
              {
                if ((unint64_t)++v168 >= *(void *)(v164 + 16)) {
                  goto LABEL_97;
                }
                v170 = v169 + 16;
                v171 = sub_1B3A70320();
                v167 = notify_post((const char *)(v171 + 32));
                swift_release();
                v169 = v170;
                uint64_t v17 = v231;
                if (v167)
                {
                  v165 = v224;
                  goto LABEL_83;
                }
              }
              swift_bridgeObjectRelease();
              goto LABEL_85;
            }
LABEL_83:
            swift_bridgeObjectRelease();
            type metadata accessor for KTraceRecordError();
            sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
            swift_allocError();
            *v172 = v167;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            sub_1B3A4B87C(v223, v165);
            sub_1B3A11580(v215, &qword_1E9CD5A78);
            v173 = *(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v17 + 8);
            long long v77 = (unsigned __int8 *)v233;
            v173(v214, v233);
            v173((void (**)(char *, uint64_t, uint64_t))v219, (uint64_t)v77);
          }
          else
          {
            v145 = v236;
            sub_1B3A6FE40();

            swift_willThrow();
            sub_1B3A4B87C(v223, v224);
            uint64_t v17 = v231;
            v146 = (char *)v123;
            long long v77 = v31;
            (*(void (**)(char *, unsigned __int8 *))(v231 + 8))(v146, v31);
          }
          ktrace_file_close(v225);
          goto LABEL_66;
        }
      }
      v144 = v121;
      sub_1B3A6FE40();

      swift_willThrow();
      sub_1B3A4B87C(v223, v224);
      ktrace_file_close(v225);
      uint64_t v17 = v231;
      long long v77 = v31;
      goto LABEL_66;
    }
  }
  __break(1u);
LABEL_102:
  sub_1B3A11580(v46, &qword_1E9CD58F8);
  uint64_t result = sub_1B3A70B00();
  __break(1u);
  return result;
}

uint64_t sub_1B39AC9A4()
{
  return swift_retain();
}

double sub_1B39AC9F0()
{
  v3[1] = *(mach_timebase_info *)MEMORY[0x1E4F143B8];
  v3[0] = 0;
  mach_timebase_info(v3);
  uint64_t v0 = swift_slowAlloc();
  pid_t v1 = getpid();
  if (!proc_pid_rusage(v1, 6, (rusage_info_t *)v0) && __CFADD__(*(void *)(v0 + 16), *(void *)(v0 + 24))) {
    __break(1u);
  }
  return (double)clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 1000000000.0;
}

uint64_t sub_1B39ACAC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 40) = v3;
  swift_retain();
  uint64_t result = sub_1B3A70950();
  *a1 = result;
  return result;
}

uint64_t sub_1B39ACB5C(void *a1)
{
  return sub_1B39ACB9C(a1, *v1, v1[1], &qword_1E9CD5D78, (void (*)(void *))sub_1B39ACD0C);
}

uint64_t sub_1B39ACB9C(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void *))
{
  v14[0] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5(v11);
  sub_1B3A70E70();
  char v16 = 0;
  uint64_t v12 = v14[1];
  sub_1B3A70CB0();
  if (!v12)
  {
    char v15 = 1;
    sub_1B3A70CB0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_1B39ACD0C()
{
  unint64_t result = qword_1E9CD85C0;
  if (!qword_1E9CD85C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD85C0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlanSettings.KPerfKDebugTrigger(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B39ACD98(void *a1)
{
  return sub_1B39ACDB8(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1B39ACDB8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[1] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D80);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39ACF2C();
  sub_1B3A70E70();
  char v13 = 0;
  sub_1B3A70CB0();
  if (!v4)
  {
    char v12 = 1;
    sub_1B3A70C80();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1B39ACF2C()
{
  unint64_t result = qword_1E9CD85C8;
  if (!qword_1E9CD85C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD85C8);
  }
  return result;
}

uint64_t sub_1B39ACF80()
{
  return sub_1B3A70520();
}

unint64_t sub_1B39ACFD0()
{
  unint64_t result = qword_1E9CD5FA0;
  if (!qword_1E9CD5FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5FA0);
  }
  return result;
}

uint64_t sub_1B39AD024@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (const void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_plan);
  swift_beginAccess();
  memcpy(__dst, v3, 0x141uLL);
  memcpy(a1, v3, 0x141uLL);
  return sub_1B39B373C((uint64_t)__dst);
}

uint64_t sub_1B39AD09C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_1B3A700D0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v2 + 176))(v7);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = sub_1B3A700B0();
  os_log_type_t v11 = sub_1B3A70640();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = v5;
    uint64_t v13 = a1;
    uint64_t v14 = (uint8_t *)v12;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v20 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1B39B2E48(v13, a2, &v20);
    sub_1B3A707C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B39A5000, v10, v11, "%{public}s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EC0090](v15, -1, -1);
    MEMORY[0x1B3EC0090](v14, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v18);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_1B39AD2D4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_1B3A70320();
  fputs((const char *)(v2 + 32), v1);

  return swift_release();
}

uint64_t sub_1B39AD31C(void *a1)
{
  return sub_1B39AD338(a1, *v1);
}

uint64_t sub_1B39AD338(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D58);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39AD4C0();
  sub_1B3A70E70();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D60);
  sub_1B39B4D38(&qword_1E9CD5D68, &qword_1E9CD5D60, (void (*)(void))sub_1B39B5F4C);
  sub_1B3A70CC0();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1B39AD4C0()
{
  unint64_t result = qword_1E9CD85B8;
  if (!qword_1E9CD85B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD85B8);
  }
  return result;
}

uint64_t sub_1B39AD514(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5ED8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v2 + 16);
  uint64_t v29 = *(void *)(v2 + 24);
  uint64_t v28 = *(void *)(v2 + 32);
  uint64_t v27 = *(void *)(v2 + 40);
  uint64_t v26 = *(void *)(v2 + 48);
  uint64_t v24 = *(void *)(v2 + 56);
  uint64_t v25 = *(void *)(v2 + 64);
  uint64_t v23 = *(void *)(v2 + 72);
  uint64_t v22 = *(void *)(v2 + 80);
  uint64_t v21 = *(void *)(v2 + 88);
  uint64_t v19 = *(void *)(v2 + 96);
  uint64_t v20 = *(void *)(v2 + 104);
  uint64_t v18 = *(void *)(v2 + 288);
  uint64_t v17 = *(void *)(v2 + 296);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39B5B2C();
  sub_1B3A70E70();
  LOBYTE(v32) = 0;
  uint64_t v8 = v31;
  sub_1B3A70C80();
  if (v8) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  LOBYTE(v32) = 1;
  sub_1B3A70CB0();
  LOBYTE(v32) = 2;
  sub_1B3A70C10();
  LOBYTE(v32) = 3;
  sub_1B3A70C10();
  LOBYTE(v32) = 4;
  sub_1B3A70C10();
  *(void *)&long long v32 = v23;
  char v43 = 5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
  sub_1B39B109C(&qword_1E9CD5E90);
  sub_1B3A70C50();
  uint64_t v31 = v9;
  LOBYTE(v32) = 6;
  sub_1B3A70C80();
  LOBYTE(v32) = 7;
  sub_1B3A70C80();
  long long v10 = *(_OWORD *)(v2 + 256);
  long long v40 = *(_OWORD *)(v2 + 240);
  long long v41 = v10;
  long long v42 = *(_OWORD *)(v2 + 272);
  long long v11 = *(_OWORD *)(v2 + 192);
  long long v36 = *(_OWORD *)(v2 + 176);
  long long v37 = v11;
  long long v12 = *(_OWORD *)(v2 + 224);
  long long v38 = *(_OWORD *)(v2 + 208);
  long long v39 = v12;
  long long v13 = *(_OWORD *)(v2 + 128);
  long long v32 = *(_OWORD *)(v2 + 112);
  long long v14 = *(_OWORD *)(v2 + 144);
  long long v35 = *(_OWORD *)(v2 + 160);
  long long v33 = v13;
  long long v34 = v14;
  char v43 = 8;
  sub_1B39B1154();
  sub_1B3A70CC0();
  *(void *)&long long v32 = v18;
  char v43 = 9;
  sub_1B3A70CC0();
  *(void *)&long long v32 = v17;
  char v43 = 10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5EE8);
  sub_1B39B577C(&qword_1E9CD5EF0, (void (*)(void))sub_1B39B5A40);
  sub_1B3A70CC0();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

char *sub_1B39ADA50(uint64_t __sig, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      HIBYTE(v6[1]) = -18;
      sub_1B3A703A0();
      goto LABEL_13;
    case 2:
      v6[0] = 0;
      v6[1] = 0xE000000000000000;
      sub_1B3A709B0();
      sub_1B3A703A0();
      sub_1B3A705B0();
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xD00000000000001FLL;
      if (!(__sig ^ 1 | a2)) {
        unint64_t v5 = 0xD00000000000001ALL;
      }
      if (__sig | a2) {
        return (char *)v5;
      }
      else {
        return (char *)0xD00000000000001ALL;
      }
    default:
      unint64_t result = strsignal(__sig);
      if (result)
      {
        sub_1B3A703B0();
        sub_1B39ADD78();
        uint64_t v4 = sub_1B3A707E0();
        swift_bridgeObjectRelease();
        v6[0] = 0;
        v6[1] = 0xE000000000000000;
        sub_1B3A709B0();
        if (*(void *)(v4 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          sub_1B3A70310();
        }
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        sub_1B3A70D00();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
LABEL_13:
        sub_1B3A703A0();
        return (char *)v6[0];
      }
      else
      {
        __break(1u);
      }
      return result;
  }
}

unint64_t sub_1B39ADD78()
{
  unint64_t result = qword_1E9CD5B60;
  if (!qword_1E9CD5B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5B60);
  }
  return result;
}

uint64_t destroy for PlanSettings.ProviderEntry()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B39ADE08()
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = sub_1B3A700D0();
  uint64_t v95 = *(void *)(v1 - 8);
  uint64_t v96 = v1;
  MEMORY[0x1F4188790](v1);
  long long v99 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1B3A6FF40();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  long long v94 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  long long v12 = (char *)&v89 - v11;
  (*(void (**)(uint64_t))(*(void *)v0 + 248))(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1B3A11580((uint64_t)v5, &qword_1E9CD58F8);
    uint64_t result = sub_1B3A70B00();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    uint64_t v103 = v0;
    uint64_t v13 = v0 + OBJC_IVAR____TtC6ktrace9Recording_options;
    long long v97 = (int *)type metadata accessor for RecordingOptions.Options(0);
    uint64_t v98 = v13;
    uint64_t v14 = *(void *)(v13 + v97[7]);
    int64_t v15 = *(void *)(v14 + 16);
    uint64_t v16 = MEMORY[0x1E4FBC860];
    uint64_t v101 = v7;
    uint64_t v102 = v6;
    long long v104 = v12;
    if (v15)
    {
      *(void *)&long long v106 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      sub_1B3A496A4(0, v15, 0);
      uint64_t v16 = v106;
      uint64_t v17 = (char *)(v14 + 48);
      do
      {
        uint64_t v18 = *((void *)v17 - 2);
        uint64_t v19 = *((void *)v17 - 1);
        char v20 = *v17;
        sub_1B3A19BA8(v18, v19, *v17);
        sub_1B3A19164(v18, v19, v20, (uint64_t *)&v108);
        sub_1B3A19BD0(v18, v19, v20);
        *(void *)&long long v106 = v16;
        unint64_t v22 = *(void *)(v16 + 16);
        unint64_t v21 = *(void *)(v16 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_1B3A496A4(v21 > 1, v22 + 1, 1);
          uint64_t v16 = v106;
        }
        v17 += 24;
        *(void *)(v16 + 16) = v22 + 1;
        sub_1B3A41964(&v108, v16 + 40 * v22 + 32);
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      uint64_t v7 = v101;
      uint64_t v6 = v102;
      long long v12 = v104;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD61B0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B3A73390;
    uint64_t v24 = v103;
    uint64_t v25 = *(void *)(v103 + OBJC_IVAR____TtC6ktrace9Recording_kernelDisableWaiter);
    *(void *)(inited + 56) = type metadata accessor for KernelDisableWaiter();
    *(void *)(inited + 64) = &off_1F0C3B218;
    *(void *)(inited + 32) = v25;
    *(void *)&long long v108 = v16;
    swift_retain();
    sub_1B3A4A948(inited);
    uint64_t v26 = v108;
    type metadata accessor for WaitGroup();
    uint64_t v27 = *(void *)(v24 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
    id v28 = *(id *)(v24 + OBJC_IVAR____TtC6ktrace9Recording_waitQueue);
    swift_retain();
    uint64_t v29 = v28;
    uint64_t v30 = v100;
    uint64_t v31 = sub_1B3A18660(v26, v29, v27);
    if (v30) {
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    (*(void (**)(uint64_t))(*(void *)v24 + 328))(v31);
    uint64_t v91 = *(void *)(v24 + OBJC_IVAR____TtC6ktrace9Recording_recording);
    long long v33 = *(void (***)(void, void))(v91 + 40);
    uint64_t v93 = 0;
    if (v33)
    {
      _Block_copy(v33);
      _Block_copy(v33);
      long long v108 = xmmword_1B3A75DE0;
      LODWORD(v106) = 2;
      *((void *)&v106 + 1) = &v108;
      ((void (**)(void, long long *))v33)[2](v33, &v106);
      _Block_release(v33);
      long long v34 = v33;
    }
    else
    {
      long long v34 = 0;
    }
    _Block_release(v34);
    long long v35 = *(void (**)(void))(*(void *)v27 + 176);
    long long v36 = v99;
    uint64_t v92 = v27;
    v35();
    long long v37 = v94;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v94, v12, v6);
    long long v38 = sub_1B3A700B0();
    os_log_type_t v39 = sub_1B3A70640();
    if (os_log_type_enabled(v38, v39))
    {
      os_log_t v90 = v38;
      long long v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(void *)&long long v108 = v41;
      *(_DWORD *)long long v40 = 136315138;
      long long v100 = (void (*)(void, void))(v40 + 4);
      uint64_t v42 = sub_1B3A6FF20();
      *(void *)&long long v106 = sub_1B39B2E48(v42, v43, (uint64_t *)&v108);
      sub_1B3A707C0();
      swift_bridgeObjectRelease();
      long long v100 = *(void (**)(void, void))(v7 + 8);
      v100(v37, v6);
      os_log_t v44 = v90;
      _os_log_impl(&dword_1B39A5000, v90, v39, "writing in-process file to %s)", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EC0090](v41, -1, -1);
      uint64_t v45 = v40;
      uint64_t v24 = v103;
      MEMORY[0x1B3EC0090](v45, -1, -1);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v99, v96);
    }
    else
    {
      long long v100 = *(void (**)(void, void))(v7 + 8);
      v100(v37, v6);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v36, v96);
    }
    uint64_t v46 = *(_DWORD **)(v24 + OBJC_IVAR____TtC6ktrace9Recording_session);
    sub_1B3A6FF20();
    uint64_t v47 = v97;
    uint64_t v48 = v98;
    if (*(unsigned char *)(v98 + v97[17])) {
      int v49 = 4;
    }
    else {
      int v49 = 0;
    }
    v111 = sub_1B39B5954;
    uint64_t v112 = v24;
    *(void *)&long long v108 = MEMORY[0x1E4F143A8];
    *((void *)&v108 + 1) = 1107296256;
    v109 = sub_1B39B5698;
    v110 = &block_descriptor_10;
    uint64_t v50 = _Block_copy(&v108);
    swift_retain();
    swift_release();
    uint64_t v51 = sub_1B3A70320();
    swift_bridgeObjectRelease();
    int started = ktrace_start_writing_file(v46, (char *)(v51 + 32), v49, v50, 0);
    swift_release();
    _Block_release(v50);
    if (started)
    {
      type metadata accessor for KTraceRecordError();
      sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
      swift_allocError();
      *uint64_t v54 = started;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v55 = v102;
      uint64_t v56 = v104;
      return ((uint64_t (*)(char *, uint64_t))v100)(v56, v55);
    }
    uint64_t v57 = *(char **)(v48 + v47[8]);
    int64_t v58 = *((void *)v57 + 2);
    uint64_t v59 = MEMORY[0x1E4FBC860];
    if (v58)
    {
      *(void *)&long long v106 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      sub_1B3A496A4(0, v58, 0);
      uint64_t v59 = v106;
      long long v99 = v57;
      uint64_t v60 = v57 + 48;
      do
      {
        uint64_t v61 = *((void *)v60 - 2);
        uint64_t v62 = *((void *)v60 - 1);
        char v63 = *v60;
        sub_1B3A19BA8(v61, v62, *v60);
        sub_1B3A19164(v61, v62, v63, (uint64_t *)&v108);
        sub_1B3A19BD0(v61, v62, v63);
        *(void *)&long long v106 = v59;
        unint64_t v65 = *(void *)(v59 + 16);
        unint64_t v64 = *(void *)(v59 + 24);
        if (v65 >= v64 >> 1)
        {
          sub_1B3A496A4(v64 > 1, v65 + 1, 1);
          uint64_t v59 = v106;
        }
        v60 += 24;
        *(void *)(v59 + 16) = v65 + 1;
        sub_1B3A41964(&v108, v59 + 40 * v65 + 32);
        --v58;
      }
      while (v58);
      uint64_t v53 = swift_bridgeObjectRelease();
    }
    uint64_t v66 = v102;
    uint64_t v67 = v103;
    uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)v103 + 320))(v53);
    uint64_t v69 = v104;
    if (v68)
    {
      uint64_t v70 = v93;
      sub_1B39B5890(v59);
      uint64_t v93 = v70;
      if (v70)
      {
        v100(v69, v66);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v106 = 0;
    *((void *)&v106 + 1) = 0xE000000000000000;
    sub_1B3A709B0();
    long long v105 = v106;
    uint64_t v107 = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v106 = 0x676E697472617473;
    *((void *)&v106 + 1) = 0xE800000000000000;
    CFIndex v71 = (unsigned __int8 *)sub_1B39B5D68();
    sub_1B39B5680((uint64_t)&v106, *v71);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v106);
    uint64_t v72 = sub_1B3A703A0();
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v67 + 224))(&v108, v72);
    swift_bridgeObjectRetain();
    sub_1B39B0C68((uint64_t)&v108);
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A6FF10();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    long long v73 = v105;
    char v74 = sub_1B39B5D74();
    char v75 = sub_1B39B5AA4();
    (*(void (**)(void, void, void, void))(*(void *)v92 + 216))(v73, *((void *)&v73 + 1), v74 & 1, v75 & 1);
    swift_bridgeObjectRelease();
    v76 = *(void (***)(void, void))(v91 + 40);
    if (v76)
    {
      _Block_copy(*(const void **)(v91 + 40));
      _Block_copy(v76);
      long long v106 = xmmword_1B3A75DE0;
      LODWORD(v105) = 3;
      *((void *)&v105 + 1) = &v106;
      ((void (**)(void, long long *))v76)[2](v76, &v105);
      _Block_release(v76);
      long long v77 = v76;
    }
    else
    {
      long long v77 = 0;
    }
    _Block_release(v77);
    uint64_t v78 = *(void *)(v98 + v97[12]);
    uint64_t v79 = *(void *)(v78 + 16);
    if (v79)
    {
      long long v80 = (const char *)(sub_1B3A70320() + 32);
      swift_bridgeObjectRetain();
      uint32_t v81 = notify_post(v80);
      swift_release();
      if (v81)
      {
LABEL_42:
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
        swift_allocError();
        *long long v88 = v81;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v56 = v69;
        uint64_t v55 = v66;
        return ((uint64_t (*)(char *, uint64_t))v100)(v56, v55);
      }
      uint64_t v82 = v66;
      uint64_t v83 = 0;
      uint64_t v84 = v78 + 56;
      uint64_t v85 = v79 - 1;
      while (v85 != v83)
      {
        if ((unint64_t)++v83 >= *(void *)(v78 + 16)) {
          __break(1u);
        }
        uint64_t v86 = v84 + 16;
        uint64_t v87 = sub_1B3A70320();
        uint32_t v81 = notify_post((const char *)(v87 + 32));
        swift_release();
        uint64_t v84 = v86;
        uint64_t v69 = v104;
        if (v81)
        {
          uint64_t v66 = v82;
          goto LABEL_42;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v66 = v82;
    }
    return ((uint64_t (*)(char *, uint64_t))v100)(v69, v66);
  }
  return result;
}

uint64_t sub_1B39AEB6C(char a1, __int16 a2)
{
  if (a1 == 8)
  {
    if ((a2 & 0x100) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else
  {
    char v7 = 91;
    sub_1B3A70D00();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    if ((a2 & 0x100) != 0) {
      goto LABEL_3;
    }
  }
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  unint64_t v3 = sub_1B39AEF00();
  unint64_t v4 = sub_1B39AEEA0();
  sub_1B39AEDAC((uint64_t)&type metadata for ANSIAttributes, v3, v4);
  sub_1B3A70A70();
  swift_release();
  swift_retain();
  sub_1B3A70B60();
  if ((v7 & 1) == 0)
  {
    do
    {
      __int16 v6 = sub_1B3A70D00();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A70B60();
    }
    while (HIBYTE(v6) != 1);
  }
  swift_release_n();
LABEL_8:
  sub_1B3A70A80();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  return sub_1B3A703A0();
}

uint64_t sub_1B39AEDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = swift_allocBox();
  sub_1B3A70500();
  char v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = v6;
  uint64_t v8 = sub_1B3A70940();
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184C70](sub_1B39ACAC8, v7, a1, v8, WitnessTable);
}

unint64_t sub_1B39AEEA0()
{
  unint64_t result = qword_1E9CD5AD0;
  if (!qword_1E9CD5AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5AD0);
  }
  return result;
}

void sub_1B39AEEF4(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_1B39AEF00()
{
  unint64_t result = qword_1E9CD5AC8;
  if (!qword_1E9CD5AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5AC8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ProviderOption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1B39AEF88(void *a1)
{
  return sub_1B39AEFAC(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1B39AEFAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v13 = a5;
  v12[0] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5DA0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39AF1FC();
  sub_1B3A70E70();
  char v16 = 0;
  sub_1B3A70C80();
  if (!v5)
  {
    v12[1] = v12[0];
    char v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5DA8);
    sub_1B39AF198(&qword_1E9CD5DB0);
    sub_1B3A70CC0();
    char v14 = 2;
    sub_1B3A70C90();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1B39AF198(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9CD5DA8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B39AF1FC()
{
  unint64_t result = qword_1E9CD85E0;
  if (!qword_1E9CD85E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD85E0);
  }
  return result;
}

uint64_t initializeWithCopy for PlanSettings.ProviderEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B39AF298(void *a1)
{
  return sub_1B39B473C(a1);
}

uint64_t sub_1B39AF2F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v39 = *(void *)(a2 + 8);
  uint64_t v41 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v3 = swift_checkMetadataState();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  long long v38 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  unint64_t v43 = (char *)&v36 - v11;
  MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v36 - v12;
  uint64_t v14 = swift_projectBox();
  swift_beginAccess();
  char v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v37 = v14;
  os_log_t v44 = v15;
  v15(v13, v14, v3);
  char v16 = sub_1B3A708E0();
  uint64_t v42 = v4 + 16;
  if (v16)
  {
    if (sub_1B3A708D0() < 64)
    {
      uint64_t v17 = sub_1B3A708C0();
      uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
      v18(v13, v3);
      if (!v17) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1);
      }
LABEL_11:
      uint64_t v28 = v37;
      swift_beginAccess();
      uint64_t v29 = v43;
      v44(v43, v28, v3);
      uint64_t v30 = sub_1B3A70890();
      v18(v29, v3);
      uint64_t v45 = 1;
      sub_1B39AF9BC();
      uint64_t v31 = v38;
      sub_1B3A708F0();
      uint64_t v45 = v30;
      sub_1B3A708B0();
      v18(v31, v3);
      sub_1B3A70880();
      swift_beginAccess();
      sub_1B3A708A0();
      swift_endAccess();
      v18(v31, v3);
      v44(v31, (uint64_t)v29, v3);
      sub_1B3A70510();
      return ((uint64_t (*)(char *, uint64_t))v18)(v29, v3);
    }
    uint64_t v46 = 0;
    sub_1B39AF9BC();
    uint64_t v25 = v43;
    sub_1B3A70870();
    char v26 = sub_1B3A70280();
    uint64_t v27 = v25;
    uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18(v27, v3);
    v18(v13, v3);
    if ((v26 & 1) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    char v19 = sub_1B3A708E0();
    uint64_t v20 = sub_1B3A708D0();
    if (v19)
    {
      if (v20 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        sub_1B3A70D40();
        unint64_t v21 = v43;
        sub_1B3A70D10();
        char v22 = sub_1B3A70270();
        uint64_t v23 = *(void (**)(char *, uint64_t))(v4 + 8);
        uint64_t v36 = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v23(v21, v3);
        v44(v9, (uint64_t)v13, v3);
        if (v22)
        {
          uint64_t v24 = sub_1B3A708C0();
          v23(v9, v3);
          v23(v13, v3);
          uint64_t v18 = v23;
          if (!v24) {
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1);
          }
        }
        else
        {
          v23(v9, v3);
          v23(v13, v3);
          uint64_t v18 = v23;
        }
        goto LABEL_11;
      }
    }
    else if (v20 < 64)
    {
      uint64_t v33 = sub_1B3A708C0();
      uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
      v18(v13, v3);
      if (!v33) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1);
      }
      goto LABEL_11;
    }
    uint64_t v46 = 0;
    sub_1B39AF9BC();
    long long v34 = v43;
    sub_1B3A70870();
    char v35 = sub_1B3A70280();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18(v34, v3);
    v18(v13, v3);
    if ((v35 & 1) == 0) {
      goto LABEL_11;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1);
}

unint64_t sub_1B39AF9BC()
{
  unint64_t result = qword_1E9CD6130;
  if (!qword_1E9CD6130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD6130);
  }
  return result;
}

unsigned __int8 *sub_1B39AFA10@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void __drain_events_block_block_invoke(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)v2;
  int v4 = atomic_load((unsigned __int8 *)(v2 + 156));
  int v5 = v4 | (v3 == 2);
  if (v4 & 1 | (v3 == 2)) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v2 + 152);
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v2 + 157));
  if (v7) {
    return;
  }
  int v8 = *(_DWORD *)(v2 + 4);
  if (v8 == 2)
  {
    unsigned __int8 v16 = atomic_load((unsigned __int8 *)(v2 + 159));
    if (v16)
    {
LABEL_46:
      int v20 = 0;
      goto LABEL_63;
    }
    if (v6 && (kdebug_wait(v6) & 0x80000000) != 0) {
      goto LABEL_32;
    }
    size_t v52 = 0;
    uint64_t v53 = 0;
    int v51 = 0;
    if (trace_collect(&v53, &v52, &v51))
    {
      int v14 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __drain_events_block_block_invoke_cold_7();
      }
      goto LABEL_24;
    }
    if (!v53) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!v52)
    {
      trace_free(v53);
      if (v5)
      {
        ktrace_log_init();
        unint64_t v43 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          __drain_events_block_block_invoke_cold_6(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        int v20 = 1;
        goto LABEL_63;
      }
      goto LABEL_46;
    }
    uint64_t v27 = *(NSObject **)(v2 + 232);
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    uint64_t v55 = __drain_trailing_duration_block_invoke;
    uint64_t v56 = &__block_descriptor_56_e5_v8__0l;
    uint64_t v57 = v2;
    int64_t v58 = v53;
    uint64_t v59 = (void *)v52;
    char v26 = v27;
LABEL_45:
    dispatch_async(v26, &buf);
    goto LABEL_46;
  }
  if (v8 == 1)
  {
    uint64_t v53 = 0;
    uint64_t v17 = *(void *)(v2 + 680);
    uint64_t v18 = *(void *)(v2 + 648);
    if (v17) {
      int appended = ktrace_file_append_live_filtered_ktrace(v18, v6, *(_DWORD *)(v2 + 656), &v53, v17);
    }
    else {
      int appended = ktrace_file_append_live_ktrace(v18, 0, v6, *(_DWORD *)(v2 + 656), (uint64_t *)&v53);
    }
    int v21 = appended;
    if (appended)
    {
      ktrace_log_init();
      char v22 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = strerror(v21);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1B39A5000, v22, OS_LOG_TYPE_INFO, "ending draining to file due to error: %s", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_32;
    }
    uint64_t v24 = (uint64_t)v53;
    if (v53)
    {
      BOOL v25 = (unint64_t)ktrace_chunk_size((uint64_t)v53) < 9;
      uint64_t v24 = (uint64_t)v53;
    }
    else
    {
      BOOL v25 = 0;
    }
    if (v24) {
      int v28 = v25;
    }
    else {
      int v28 = 1;
    }
    if ((v5 & v28) == 1)
    {
      ktrace_log_init();
      uint64_t v29 = ktrace_log;
      int v20 = 1;
      if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO)) {
        goto LABEL_63;
      }
      uint64_t v30 = "";
      if (v25) {
        uint64_t v30 = ", undersized chunk";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v30;
      uint64_t v31 = "ending draining to file, out of events%s";
      long long v32 = v29;
      uint32_t v33 = 12;
      goto LABEL_56;
    }
    unint64_t v34 = *(void *)(v2 + 160) + ((unint64_t)ktrace_chunk_size(v24) >> 6);
    *(void *)(v2 + 160) = v34;
    unint64_t v35 = *(void *)(v2 + 720);
    if (v34 <= v35 || v35 == 0) {
      int v20 = 0;
    }
    else {
      int v20 = 2;
    }
  }
  else
  {
    if (v8) {
      __drain_events_block_block_invoke_cold_1();
    }
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v2 + 159));
    if (v9)
    {
      int v20 = 3;
      goto LABEL_63;
    }
    if (!*(void *)(v2 + 320))
    {
      __int16 v10 = *(_WORD *)(v2 + 224);
      if ((v10 & 0x20) == 0)
      {
        *(_WORD *)(v2 + 224) = v10 | 0x20;
        uint64_t v11 = (void *)ktrace_file_append_live_stackshot_internal(-1);
        if (v11) {
          _session_read_stackshot_chunk(v2, v11);
        }
      }
    }
    if (v6 && (kdebug_wait(v6) & 0x80000000) != 0) {
      goto LABEL_32;
    }
    size_t v52 = 0;
    uint64_t v53 = 0;
    int v51 = 0;
    int v12 = trace_collect(&v53, &v52, &v51);
    if (v12)
    {
      int v13 = v12;
      int v14 = *__error();
      ktrace_log_init();
      char v15 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __drain_events_block_block_invoke_cold_4(v13, v14, v15);
      }
LABEL_24:
      *__error() = v14;
LABEL_32:
      int v20 = 4;
      goto LABEL_63;
    }
    if (!v53) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if ((*(unsigned char *)(v2 + 828) & 4) == 0 && (v51 & 8) != 0 && !*(_DWORD *)v2) {
      populate_threadmap(v2, 1);
    }
    if (v52)
    {
      char v26 = *(NSObject **)(v2 + 232);
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3221225472;
      uint64_t v55 = __drain_callbacks_block_invoke;
      uint64_t v56 = &__block_descriptor_56_e5_v8__0l;
      uint64_t v57 = v2;
      int64_t v58 = (void *)v52;
      uint64_t v59 = v53;
      goto LABEL_45;
    }
    trace_free(v53);
    if ((v5 & 1) == 0) {
      goto LABEL_46;
    }
    ktrace_log_init();
    uint64_t v42 = ktrace_log;
    int v20 = 1;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      uint64_t v31 = "ending after empty trace collection";
      long long v32 = v42;
      uint32_t v33 = 2;
LABEL_56:
      _os_log_impl(&dword_1B39A5000, v32, OS_LOG_TYPE_INFO, v31, (uint8_t *)&buf, v33);
    }
  }
LABEL_63:
  switch(v20)
  {
    case 0:
      unsigned __int8 v40 = atomic_load((unsigned __int8 *)(v2 + 157));
      if (v40) {
        return;
      }
      unsigned __int8 v41 = atomic_load((unsigned __int8 *)(v2 + 156));
      if ((v41 & 1) != 0
        || v3 == 2
        || (long long buf = 0uLL, LODWORD(v55) = 0, trace_get_bufinfo(&buf))
        || !DWORD1(buf))
      {
        dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 40) + 128), *(dispatch_block_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
      }
      else
      {
        if ((BYTE8(buf) & 8) != 0) {
          uint64_t v39 = 5;
        }
        else {
          uint64_t v39 = 4;
        }
        uint64_t v37 = v2;
        uint64_t v38 = 3;
LABEL_67:
        _session_end_internal(v37, v38, v39);
        _session_drain_finish(v2);
      }
      break;
    case 1:
      uint64_t v37 = v2;
      uint64_t v38 = 2;
      uint64_t v39 = 2;
      goto LABEL_67;
    case 2:
      uint64_t v37 = v2;
      uint64_t v38 = 2;
      uint64_t v39 = 6;
      goto LABEL_67;
    case 3:
      return;
    case 4:
      uint64_t v37 = v2;
      uint64_t v38 = 3;
      uint64_t v39 = 1;
      goto LABEL_67;
    default:
      ktrace_postprocess_file_internal_cold_1();
  }
}

uint64_t ktrace_file_append_live_ktrace(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  LODWORD(v6) = a3;
  if (a4 - 2 < 3)
  {
    return ktrace_file_append_live_ktrace_transformed(a1, a2, a3, a4, a5, 0);
  }
  if (a4 > 1)
  {
    int v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_cold_2();
    }
    *__error() = v10;
    *__error() = 22;
    return *__error();
  }
  if (a2)
  {
    *__error() = 22;
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_cold_5();
    }
    *__error() = v9;
    return *__error();
  }
  if (*(unsigned char *)(a1 + 296))
  {
    v23[0] = 0;
    v23[1] = 0;
    int v24 = 0;
    uint64_t result = kdebug_get_bufinfo(v23);
    if (result) {
      return result;
    }
    uint64_t v11 = setup_events_chunk(a1, 0);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      unint64_t v13 = (uint64_t)SLODWORD(v23[0]) << 6;
      uint64_t v6 = v6;
      __uint64_t v14 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      while (1)
      {
        int v15 = *(_DWORD *)(a1 + 196);
        if (v15 == -1)
        {
          size_t v22 = v13;
          if (ktrace_file_ensure_space((void *)a1, v13)
            || kdebug_wait_and_read_events((void *)(*(void *)(a1 + 240) + *(void *)(a1 + 280)), &v22, v6))
          {
LABEL_27:
            int v17 = *(_DWORD *)(a1 + 196);
            if (v17 == -1)
            {
              off_t v18 = *(void *)(a1 + 280);
            }
            else
            {
              off_t v18 = lseek(v17, 0, 2);
              if (v18 == -1)
              {
                int v19 = *__error();
                ktrace_log_init();
                int v20 = ktrace_file_log;
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                  ktrace_file_append_live_ktrace_cold_4(v19, v20);
                }
                *__error() = v19;
                off_t v18 = -1;
              }
            }
            *(void *)(v12 + 8) = v18 - *(void *)(v12 + 16);
            uint64_t result = finish_events_chunk(a1, v12, 0, 0);
            if (a5 && !result) {
              *a5 = v12;
            }
            return result;
          }
          *(void *)(a1 + 280) += v22;
        }
        else if (kdebug_write_events(v15, v6))
        {
          goto LABEL_27;
        }
        __uint64_t v16 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
        v6 -= (v16 - v14) / 0xF4240;
        __uint64_t v14 = v16;
        if (v6 <= 0) {
          goto LABEL_27;
        }
      }
    }
    return *__error();
  }
  int v21 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_file_append_live_ktrace_cold_3();
  }
  *__error() = v21;
  return 22;
}

uint64_t kdebug_get_bufinfo(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v5 = 5;
  *(void *)int v4 = 0x1800000001;
  size_t v3 = 20;
  if ((sysctl(v4, 3u, a1, &v3, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kdebug_get_bufinfo_cold_1();
  }
  *__error() = v2;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22;
  }
}

void *setup_events_chunk(uint64_t a1, int a2)
{
  int v14 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (a2) {
    CFIndex v3 = 12;
  }
  else {
    CFIndex v3 = 8;
  }
  if (a2) {
    int v4 = (UInt8 *)&v13;
  }
  else {
    int v4 = (UInt8 *)&v12;
  }
  if (a2)
  {
    int v5 = 7936;
  }
  else
  {
    int v6 = ktrace_file_align_next(a1, 0xFF8uLL);
    *__error() = v6;
    if (*__error()) {
      return 0;
    }
    int v5 = 7680;
  }
  int appended = ktrace_file_append_start(a1, v5, 0, 0);
  if (!appended)
  {
    int v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      setup_events_chunk_cold_1();
    }
    goto LABEL_18;
  }
  unsigned __int8 v7 = appended;
  int v9 = ktrace_file_append_data(a1, (uint64_t)appended, v4, v3);
  if (v9)
  {
    *__error() = v9;
    int v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      setup_events_chunk_cold_2();
    }
LABEL_18:
    unsigned __int8 v7 = 0;
    *__error() = v10;
  }
  return v7;
}

uint64_t ktrace_file_align_next(uint64_t a1, unint64_t a2)
{
  if (a2 <= 8) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((a2 & 7) != 0) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 16) == 4) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 196);
  if (v4 == -1)
  {
    off_t v5 = *(void *)(a1 + 280);
  }
  else
  {
    off_t v5 = lseek(v4, 0, 2);
    if (v5 < 0)
    {
      int v6 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_align_next_cold_5();
      }
      *__error() = v6;
      return *__error();
    }
  }
  if (((-16 - v5) & (a2 - 1)) == 0) {
    return 0;
  }
  size_t v7 = (-32 - v5) & (a2 - 1);
  if (!v7) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 299)) {
    int v8 = (void *)(a1 + 80);
  }
  else {
    int v8 = (void *)(a1 + 24);
  }
  int appended = ktrace_file_append_start_internal(a1, 0x2000, 0, 0);
  if (appended)
  {
    if (!*(unsigned char *)(a1 + 296)) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int v10 = appended;
    int v11 = *(_DWORD *)(a1 + 196);
    if (v11 == -1)
    {
      if (!*(void *)(a1 + 240)) {
        ktrace_postprocess_file_internal_cold_1();
      }
      uint64_t updated = ktrace_file_ensure_space((void *)a1, *(void *)(a1 + 248) + v7);
      if (updated) {
        goto LABEL_32;
      }
      bzero((void *)(*(void *)(a1 + 240) + *(void *)(a1 + 280)), v7);
      *(void *)(a1 + 280) += v7;
    }
    else
    {
      char v15 = 0;
      if (lseek(v11, v7 - 1, 2) < 0)
      {
        int v12 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_align_next_cold_3();
        }
      }
      else
      {
        if (ktrace_file_write(a1, &v15, 1uLL, -1)) {
          goto LABEL_29;
        }
        int v12 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_align_next_cold_4();
        }
      }
      *__error() = v12;
      uint64_t updated = *__error();
      if (updated) {
        goto LABEL_32;
      }
    }
LABEL_29:
    v10[1] = v7;
    uint64_t updated = ktrace_file_append_finish_internal(a1, v8, (uint64_t)v10);
    if (updated) {
      return updated;
    }
    if (*(unsigned char *)(a1 + 299))
    {
      uint64_t updated = ktrace_file_update_header_size(a1);
      if (!updated) {
        return updated;
      }
LABEL_32:
      ftruncate(*(_DWORD *)(a1 + 196), v10[2] - 16);
      free(v10);
      return updated;
    }
    return 0;
  }
  return *__error();
}

uint64_t kdebug_write_events(int a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)int v6 = 0x1800000001;
  int v7 = 17;
  int v8 = a1;
  if (a2 <= 1) {
    size_t v2 = 1;
  }
  else {
    size_t v2 = a2;
  }
  size_t v5 = v2;
  if ((sysctl(v6, 4u, 0, &v5, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  int v4 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kdebug_write_events_cold_1();
  }
  *__error() = v4;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22;
  }
}

uint64_t sub_1B39B08C0(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1B3A6FC90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v32, v1, sizeof(v32));
  sub_1B3A6FCD0();
  swift_allocObject();
  sub_1B3A6FCC0();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F26CE8], v4);
  sub_1B3A6FCA0();
  memcpy(v31, v32, 0x141uLL);
  sub_1B39B5AC8();
  uint64_t v8 = sub_1B3A6FCB0();
  if (v2)
  {
    swift_release();
    return v10;
  }
  unint64_t v11 = v9;
  uint64_t v12 = v8;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v30 = (v8 >> 32) - (int)v8;
      if (v8 >> 32 < (int)v8)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      sub_1B39B396C(v8, v9);
      uint64_t v15 = sub_1B3A6FD40();
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = sub_1B3A6FD70();
        uint64_t v18 = (int)v12 - v17;
        if (!__OFSUB__((int)v12, v17))
        {
          uint64_t v19 = sub_1B3A6FD60();
          if (v19 >= v30) {
            CFIndex v20 = v30;
          }
          else {
            CFIndex v20 = v19;
          }
          int appended = ktrace_file_append_chunk(a1, 32789, 0, 0, (UInt8 *)(v16 + v18), v20);
          sub_1B39B0D88(v12, v11);
LABEL_23:
          sub_1B39B0D88(v12, v11);
          swift_release();
          return appended != 0;
        }
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      uint64_t result = sub_1B3A6FD60();
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    case 2uLL:
      uint64_t v22 = *(void *)(v8 + 16);
      uint64_t v30 = *(void *)(v8 + 24);
      swift_retain();
      swift_retain();
      uint64_t v23 = (UInt8 *)sub_1B3A6FD40();
      if (!v23) {
        goto LABEL_15;
      }
      uint64_t v24 = sub_1B3A6FD70();
      if (__OFSUB__(v22, v24)) {
        goto LABEL_28;
      }
      v23 += v22 - v24;
LABEL_15:
      BOOL v25 = __OFSUB__(v30, v22);
      CFIndex v26 = v30 - v22;
      if (v25) {
        goto LABEL_26;
      }
      uint64_t result = sub_1B3A6FD60();
      if (!v23) {
        goto LABEL_30;
      }
      if (result >= v26) {
        CFIndex v28 = v26;
      }
      else {
        CFIndex v28 = result;
      }
      int appended = ktrace_file_append_chunk(a1, 32789, 0, 0, v23, v28);
      swift_release();
      swift_release();
      goto LABEL_23;
    case 3uLL:
      *(void *)((char *)v31 + 6) = 0;
      v31[0] = 0;
      uint64_t v14 = a1;
      CFIndex v13 = 0;
      goto LABEL_22;
    default:
      v31[0] = v8;
      LOWORD(v31[1]) = v9;
      BYTE2(v31[1]) = BYTE2(v9);
      BYTE3(v31[1]) = BYTE3(v9);
      BYTE4(v31[1]) = BYTE4(v9);
      CFIndex v13 = BYTE6(v9);
      BYTE5(v31[1]) = BYTE5(v9);
      uint64_t v14 = a1;
LABEL_22:
      int appended = ktrace_file_append_chunk(v14, 32789, 0, 0, (UInt8 *)v31, v13);
      goto LABEL_23;
  }
}

uint64_t sub_1B39B0C68(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 280);
  uint64_t v4 = *(void *)(a1 + 272);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B39B0D88(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B39B0D88(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1B39B0DE0(void *a1)
{
  return sub_1B39B0E44(a1);
}

uint64_t sub_1B39B0E44(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E80);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39B1100();
  sub_1B3A70E70();
  sub_1B39B4CD4(v3, (uint64_t)v18, &qword_1E9CD5E88);
  sub_1B39B4CD4((uint64_t)v18, (uint64_t)v16, &qword_1E9CD5E88);
  char v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
  sub_1B39B109C(&qword_1E9CD5E90);
  sub_1B3A70C50();
  if (!v2)
  {
    LOBYTE(v16[0]) = 1;
    sub_1B3A70C80();
    long long v9 = *(_OWORD *)(v3 + 136);
    long long v10 = *(_OWORD *)(v3 + 168);
    v16[8] = *(_OWORD *)(v3 + 152);
    v16[9] = v10;
    v16[10] = *(_OWORD *)(v3 + 184);
    long long v11 = *(_OWORD *)(v3 + 72);
    long long v12 = *(_OWORD *)(v3 + 104);
    v16[4] = *(_OWORD *)(v3 + 88);
    v16[5] = v12;
    v16[6] = *(_OWORD *)(v3 + 120);
    v16[7] = v9;
    long long v13 = *(_OWORD *)(v3 + 40);
    v16[0] = *(_OWORD *)(v3 + 24);
    long long v14 = *(_OWORD *)(v3 + 56);
    v16[3] = v11;
    v16[1] = v13;
    v16[2] = v14;
    char v17 = 2;
    sub_1B39B1154();
    sub_1B3A70CC0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1B39B109C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9CD58A8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B39B1100()
{
  unint64_t result = qword_1E9CD85E8[0];
  if (!qword_1E9CD85E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD85E8);
  }
  return result;
}

unint64_t sub_1B39B1154()
{
  unint64_t result = qword_1E9CD5E98;
  if (!qword_1E9CD5E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E98);
  }
  return result;
}

uint64_t sub_1B39B11A8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = sub_1B3A700D0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A18);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B3A73390;
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B39B14E4();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  uint64_t v12 = v22;
  unint64_t v13 = v23;
  *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v13;
  swift_beginAccess();
  sub_1B39B16DC();
  sub_1B3A70DD0();
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  if (a3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 176))(result);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = sub_1B3A700B0();
    os_log_type_t v16 = sub_1B3A70640();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v20 = v8;
      char v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v22 = v18;
      *(_DWORD *)char v17 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_1B39B2E48(a1, a2, &v22);
      sub_1B3A707C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B39A5000, v15, v16, "%{public}s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EC0090](v18, -1, -1);
      MEMORY[0x1B3EC0090](v17, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v7);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  return result;
}

id sub_1B39B14E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1B3A6FFD0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B3A6FFC0();
  sub_1B3A6FFB0();
  double v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10[0] = 43;
  v10[1] = 0xE100000000000000;
  id result = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC6ktrace8Reporter_updateFormatter), sel_stringFromTimeInterval_, v7);
  if (result)
  {
    uint64_t v9 = result;
    sub_1B3A702C0();

    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A703A0();
    return (id)v10[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B39B1658@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  swift_beginAccess();
  uint64_t v4 = sub_1B3A700D0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

unint64_t sub_1B39B16DC()
{
  unint64_t result = qword_1E9CD5A20;
  if (!qword_1E9CD5A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5A20);
  }
  return result;
}

uint64_t ProviderList.willEndTracing(file:)(uint64_t a1)
{
  uint64_t v70 = a1;
  uint64_t v69 = sub_1B3A70080();
  uint64_t v2 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v68 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_1B3A700A0();
  uint64_t v4 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  char v75 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v6;
  uint64_t v8 = *(void *)(*v6 + 16);
  if (v8)
  {
    char v63 = v81;
    uint64_t v67 = (void (**)(void))(v4 + 16);
    uint64_t v66 = (void (**)(char *, uint64_t))(v2 + 8);
    unint64_t v65 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v60 = swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)(v60 + 64);
    *(void *)&long long v10 = 136446210;
    long long v62 = v10;
    uint64_t v61 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v10 = 136315138;
    long long v64 = v10;
    while (1)
    {
      uint64_t v15 = *(v9 - 4);
      unint64_t v14 = *(v9 - 3);
      os_log_type_t v16 = (void *)*(v9 - 2);
      uint64_t v17 = *(v9 - 1);
      uint64_t v18 = *v9;
      v81[4] = v15;
      v81[5] = v14;
      v81[6] = (uint64_t)v16;
      v81[7] = v17;
      v81[8] = v18;
      if (objc_msgSend(v16, sel_respondsToSelector_, sel_willEndTracing, v60, v61))
      {
        uint64_t v19 = qword_1E9CD6A10;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v19 != -1) {
          swift_once();
        }
        uint64_t v20 = sub_1B3A700D0();
        uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)qword_1E9CDCCC8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v22 = sub_1B3A700B0();
        os_log_type_t v23 = sub_1B3A70640();
        BOOL v24 = os_log_type_enabled(v22, v23);
        long long v73 = v9;
        uint64_t v74 = v8;
        uint64_t v77 = v15;
        uint64_t v78 = v18;
        uint64_t v72 = v21;
        if (v24)
        {
          BOOL v25 = (uint8_t *)swift_slowAlloc();
          uint64_t v26 = swift_slowAlloc();
          v81[0] = v26;
          *(_DWORD *)BOOL v25 = v62;
          swift_bridgeObjectRetain();
          uint64_t v80 = sub_1B39B2E48(v15, v14, v81);
          sub_1B3A707C0();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B39A5000, v22, v23, "calling provider %{public}s's willEndTracing", v25, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EC0090](v26, -1, -1);
          MEMORY[0x1B3EC0090](v25, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1E9CD6A18 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v76, (uint64_t)qword_1E9CDCCE0);
        (*v67)();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v79 = v16;
        uint64_t v36 = v68;
        sub_1B3A70070();
        uint64_t v37 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        v81[0] = v71;
        *(_DWORD *)uint64_t v37 = v64;
        swift_bridgeObjectRetain();
        *(void *)(v37 + 4) = sub_1B39B2E48(v77, v14, v81);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v38 = sub_1B3A70090();
        os_signpost_type_t v39 = sub_1B3A706F0();
        os_signpost_id_t v40 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v38, v39, v40, "05: willEndTracing", "%s", (uint8_t *)v37, 0xCu);
        objc_msgSend(v79, sel_willEndTracing);
        sub_1B39B33AC(v70);
        os_signpost_type_t v41 = sub_1B3A706E0();
        os_signpost_id_t v42 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v38, v41, v42, "05: willEndTracing", "%s", (uint8_t *)v37, 0xCu);

        uint64_t v43 = MEMORY[0x1E4FBC840] + 8;
        uint64_t v44 = v71;
        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v44, -1, -1);
        MEMORY[0x1B3EC0090](v37, -1, -1);
        (*v66)(v36, v69);
        (*v65)(v75, v76);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v45 = sub_1B3A700B0();
        os_log_type_t v46 = sub_1B3A70640();
        if (!os_log_type_enabled(v45, v46)) {
          goto LABEL_28;
        }
        uint64_t v11 = swift_slowAlloc();
        uint64_t v72 = v43;
        uint64_t v12 = (uint8_t *)v11;
        uint64_t v13 = swift_slowAlloc();
        v81[0] = v13;
        *(_DWORD *)uint64_t v12 = v62;
        swift_bridgeObjectRetain();
        uint64_t v80 = sub_1B39B2E48(v77, v14, v81);
        sub_1B3A707C0();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B39A5000, v45, v46, "finished time-sensitive willEndTracing from provider %{public}s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v13, -1, -1);
        MEMORY[0x1B3EC0090](v12, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease_n();
      }
      else
      {
        self;
        uint64_t v27 = swift_dynamicCastObjCClass();
        if (!v27) {
          goto LABEL_5;
        }
        CFIndex v28 = (void *)v27;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (!supportsDeprecatedWillEndTracingToFile(v28))
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        if (qword_1E9CD6A10 != -1) {
          swift_once();
        }
        uint64_t v29 = sub_1B3A700D0();
        uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)qword_1E9CDCCC8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v72 = v30;
        uint64_t v31 = sub_1B3A700B0();
        os_log_type_t v32 = sub_1B3A70640();
        BOOL v33 = os_log_type_enabled(v31, v32);
        long long v73 = v9;
        uint64_t v74 = v8;
        uint64_t v77 = v15;
        uint64_t v78 = v18;
        if (v33)
        {
          unint64_t v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v35 = swift_slowAlloc();
          v81[0] = v35;
          *(_DWORD *)unint64_t v34 = v62;
          swift_bridgeObjectRetain();
          uint64_t v80 = sub_1B39B2E48(v15, v14, v81);
          sub_1B3A707C0();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B39A5000, v31, v32, "calling provider %{public}s's legacy willEndTracing:", v34, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EC0090](v35, -1, -1);
          MEMORY[0x1B3EC0090](v34, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1E9CD6A18 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v76, (uint64_t)qword_1E9CDCCE0);
        (*v67)();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v79 = v16;
        uint64_t v47 = v68;
        sub_1B3A70070();
        uint64_t v48 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        v81[0] = v71;
        *(_DWORD *)uint64_t v48 = v64;
        swift_bridgeObjectRetain();
        *(void *)(v48 + 4) = sub_1B39B2E48(v77, v14, v81);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v49 = sub_1B3A70090();
        os_signpost_type_t v50 = sub_1B3A706F0();
        os_signpost_id_t v51 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v49, v50, v51, "05: willEndTracing", "%s", (uint8_t *)v48, 0xCu);
        uint64_t v52 = v70;
        deprecatedWillEndTracingToFile(v79, v70);
        sub_1B39B33AC(v52);
        LOBYTE(v52) = sub_1B3A706E0();
        os_signpost_id_t v53 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v49, (os_signpost_type_t)v52, v53, "05: willEndTracing", "%s", (uint8_t *)v48, 0xCu);

        uint64_t v54 = MEMORY[0x1E4FBC840] + 8;
        uint64_t v55 = v71;
        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v55, -1, -1);
        MEMORY[0x1B3EC0090](v48, -1, -1);
        (*v66)(v47, v69);
        (*v65)(v75, v76);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v45 = sub_1B3A700B0();
        os_log_type_t v56 = sub_1B3A70640();
        if (!os_log_type_enabled(v45, v56))
        {
LABEL_28:

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          goto LABEL_4;
        }
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        uint64_t v72 = v54;
        uint64_t v59 = v58;
        v81[0] = v58;
        *(_DWORD *)uint64_t v57 = v62;
        swift_bridgeObjectRetain();
        uint64_t v80 = sub_1B39B2E48(v77, v14, v81);
        sub_1B3A707C0();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B39A5000, v45, v56, "finished time-sensitive willEndTracing from provider %{public}s", v57, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v59, -1, -1);
        MEMORY[0x1B3EC0090](v57, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
      }
LABEL_4:
      uint64_t v9 = v73;
      uint64_t v8 = v74;
LABEL_5:
      v9 += 5;
      if (!--v8) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t ProviderList.didStartTracing(file:)(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v48 = sub_1B3A70080();
  uint64_t v2 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v47 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_1B3A700A0();
  uint64_t v4 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v54 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v6;
  uint64_t v8 = *(void *)(*v6 + 16);
  if (v8)
  {
    os_log_type_t v46 = v59;
    uint64_t v45 = (void (**)(void))(v4 + 16);
    uint64_t v44 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v43 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v39 = swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)(v39 + 64);
    long long v10 = (SEL *)&unk_1E6063000;
    *(void *)&long long v11 = 136446210;
    long long v42 = v11;
    uint64_t v40 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v11 = 136315138;
    long long v41 = v11;
    do
    {
      uint64_t v12 = *(v9 - 4);
      unint64_t v13 = *(v9 - 3);
      uint64_t v15 = (void *)*(v9 - 2);
      uint64_t v14 = *(v9 - 1);
      uint64_t v16 = *v9;
      v59[4] = v12;
      v59[5] = v13;
      v59[6] = (uint64_t)v15;
      v59[7] = v14;
      v59[8] = v16;
      if (objc_msgSend(v15, v10[357], sel_didStartTracingToFile_, v39, v40))
      {
        uint64_t v57 = v12;
        uint64_t v53 = v8;
        uint64_t v17 = qword_1E9CD6A10;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17 != -1) {
          swift_once();
        }
        uint64_t v18 = sub_1B3A700D0();
        uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)qword_1E9CDCCC8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v52 = v19;
        uint64_t v20 = sub_1B3A700B0();
        os_log_type_t v21 = sub_1B3A70640();
        BOOL v22 = os_log_type_enabled(v20, v21);
        uint64_t v56 = v16;
        if (v22)
        {
          os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          v59[0] = v24;
          *(_DWORD *)os_log_type_t v23 = v42;
          swift_bridgeObjectRetain();
          uint64_t v58 = sub_1B39B2E48(v57, v13, v59);
          sub_1B3A707C0();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B39A5000, v20, v21, "calling provider %{public}s's didStartTracing", v23, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EC0090](v24, -1, -1);
          MEMORY[0x1B3EC0090](v23, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1E9CD6A18 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v55, (uint64_t)qword_1E9CDCCE0);
        (*v45)();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        BOOL v25 = v47;
        sub_1B3A70070();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v50 = v14;
        uint64_t v51 = v27;
        v59[0] = v27;
        *(_DWORD *)uint64_t v26 = v41;
        swift_bridgeObjectRetain();
        *(void *)(v26 + 4) = sub_1B39B2E48(v57, v13, v59);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        CFIndex v28 = sub_1B3A70090();
        os_signpost_type_t v29 = sub_1B3A706F0();
        os_signpost_id_t v30 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v28, v29, v30, "04: didStartTracing", "%s", (uint8_t *)v26, 0xCu);
        uint64_t v31 = v49;
        objc_msgSend(v15, sel_didStartTracingToFile_, v49);
        sub_1B39B33AC(v31);
        LOBYTE(v31) = sub_1B3A706E0();
        os_signpost_id_t v32 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v28, (os_signpost_type_t)v31, v32, "04: didStartTracing", "%s", (uint8_t *)v26, 0xCu);

        uint64_t v33 = MEMORY[0x1E4FBC840] + 8;
        uint64_t v34 = v51;
        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v34, -1, -1);
        MEMORY[0x1B3EC0090](v26, -1, -1);
        (*v44)(v25, v48);
        (*v43)(v54, v55);
        uint64_t v51 = (uint64_t)v15;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v35 = sub_1B3A700B0();
        os_log_type_t v36 = sub_1B3A70640();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          uint64_t v38 = swift_slowAlloc();
          v59[0] = v38;
          *(_DWORD *)uint64_t v37 = v42;
          uint64_t v52 = v33;
          swift_bridgeObjectRetain();
          uint64_t v58 = sub_1B39B2E48(v57, v13, v59);
          sub_1B3A707C0();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B39A5000, v35, v36, "finished time-sensitive didStartTracing from provider %{public}s", v37, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EC0090](v38, -1, -1);
          MEMORY[0x1B3EC0090](v37, -1, -1);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease_n();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v8 = v53;
        long long v10 = (SEL *)&unk_1E6063000;
      }
      v9 += 5;
      --v8;
    }
    while (v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B39B2E48(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1B39B2F78(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1B39B2F1C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1B39B2F1C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1B39B2F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B39B2F78(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1B3A707D0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1B39B3134(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1B3A70A20();
  if (!v8)
  {
    sub_1B3A70AF0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1B3A70B50();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1B39B3134(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1B39B31CC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1B3A0C6DC(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1B3A0C6DC(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1B39B31CC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1B39B3344(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1B3A709C0();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1B3A70AF0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1B3A703D0();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1B3A70B50();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1B3A70AF0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1B39B3344(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A40);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  int v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1B39B33AC(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = ktrace_file_appending_chunk(result);
    if (result)
    {
      uint64_t v3 = result;
      LODWORD(v16) = ktrace_chunk_tag(result);
      sub_1B3A0EAA4();
      uint64_t v4 = sub_1B3A70470();
      unint64_t v6 = v5;
      if (qword_1E9CD6A10 != -1) {
        swift_once();
      }
      uint64_t v7 = sub_1B3A700D0();
      __swift_project_value_buffer(v7, (uint64_t)qword_1E9CDCCC8);
      unint64_t v8 = v1[1];
      uint64_t v14 = *v1;
      uint64_t v16 = v1[4];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1B3A0EAF8((uint64_t)&v16);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1B3A0EAF8((uint64_t)&v16);
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_1B3A700B0();
      os_log_type_t v10 = sub_1B3A70630();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v12 = v4;
        uint64_t v11 = swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v15 = v13;
        *(_DWORD *)uint64_t v11 = 136446466;
        swift_bridgeObjectRetain();
        sub_1B39B2E48(v14, v8, &v15);
        sub_1B3A707C0();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_1B3A0EB24((uint64_t)&v16);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B3A0EB24((uint64_t)&v16);
        *(_WORD *)(v11 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_1B39B2E48(v12, v6, &v15);
        sub_1B3A707C0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B39A5000, v9, v10, "\tprovider %{public}s left chunk with tag 0x%{public}s unfinished", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v13, -1, -1);
        MEMORY[0x1B3EC0090](v11, -1, -1);
      }
      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B3A0EB24((uint64_t)&v16);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B3A0EB24((uint64_t)&v16);

        swift_bridgeObjectRelease_n();
      }
      return ktrace_file_append_finish(v2, v3);
    }
  }
  return result;
}

uint64_t destroy for PlanLayer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = *(void *)(a1 + 192);

  return sub_1B39B0D88(v2, v3);
}

uint64_t sub_1B39B373C(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 280);
  uint64_t v4 = *(void *)(a1 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B39B396C(v4, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for PlanLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v7 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  unint64_t v8 = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B39B396C(v7, v8);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v8;
  return a1;
}

uint64_t sub_1B39B396C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

void *ktrace_file_append_chunk(uint64_t a1, int a2, __int16 a3, __int16 a4, UInt8 *a5, CFIndex a6)
{
  if (a1 != -1)
  {
    if (!a1) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (*(void *)(a1 + 152))
    {
      int v9 = 22;
LABEL_10:
      int appended = 0;
      *__error() = v9;
      return appended;
    }
  }
  int appended = ktrace_file_append_start(a1, a2, a3, a4);
  if (appended)
  {
    if (a5)
    {
      if (a6)
      {
        int v9 = ktrace_file_append_data(a1, (uint64_t)appended, a5, a6);
        if (v9) {
          goto LABEL_10;
        }
      }
    }
    int v9 = ktrace_file_append_finish(a1, (uint64_t)appended);
    if (v9) {
      goto LABEL_10;
    }
  }
  return appended;
}

uint64_t ktrace_file_append_data(uint64_t a1, uint64_t a2, UInt8 *bytes, CFIndex length)
{
  while (1)
  {
    if (!a1) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!a2) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!bytes) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!length) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (a1 == -1 || *(_DWORD *)(a1 + 16) == 4)
    {
      CFDataAppendBytes(*(CFMutableDataRef *)(a2 + 16), bytes, length);
      goto LABEL_11;
    }
    uint64_t v8 = *(void *)(a1 + 200);
    if (!v8) {
      break;
    }
    a1 = *(void *)(a1 + 200);
    if (*(void *)(v8 + 152) != a2) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  if (*(void *)(a1 + 152) == a2)
  {
    int v10 = *(_DWORD *)(a1 + 196);
    if (v10 != -1 && lseek(v10, 0, 2) == -1)
    {
      uint64_t v9 = *__error();
      int v12 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_data_cold_6();
      }
      *__error() = v12;
      goto LABEL_23;
    }
    if (ktrace_file_write(a1, bytes, length, -1) < length)
    {
      uint64_t v9 = *__error();
      int v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_data_cold_5();
      }
      *__error() = v11;
LABEL_23:
      *(void *)(a1 + 152) = 0;
      free((void *)a2);
      return v9;
    }
LABEL_11:
    uint64_t v9 = 0;
    *(void *)(a2 + 8) += length;
    return v9;
  }
  return 22;
}

void *ktrace_file_append_start(uint64_t a1, int a2, __int16 a3, __int16 a4)
{
  if (a1 == -1) {
    goto LABEL_12;
  }
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v8 = *(void *)(a1 + 200);
  if (!v8)
  {
LABEL_12:
    return ktrace_file_append_start_internal(a1, a2, a3, a4);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 232);
    if (!v9 || *(void *)(v8 + 152) != v9)
    {
      uint64_t appended = ktrace_file_append_start();
      *(void *)(a1 + 232) = appended;
      if (!appended
        || !ktrace_file_append_subchunk(*(void *)(a1 + 200), appended, 32780, 0, 0, (UInt8 *)(a1 + 216), 4))
      {
        return 0;
      }
      uint64_t v8 = *(void *)(a1 + 200);
      uint64_t v9 = *(void *)(a1 + 232);
    }
    return ktrace_file_append_start_subchunk(v8, v9, a2, a3, a4);
  }
}

uint64_t ktrace_file_append_finish(uint64_t a1, uint64_t a2)
{
  if (a1 == -1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 200);
  if (v3)
  {
    if (*(void *)(v3 + 152) != a2) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!*(void *)(a1 + 232)) {
      ktrace_postprocess_file_internal_cold_1();
    }
    uint64_t result = ((uint64_t (*)(void))ktrace_file_append_finish)();
    if (!result)
    {
      uint64_t result = ktrace_file_append_finish(*(void *)(a1 + 200), *(void *)(a1 + 232));
      *(void *)(a1 + 232) = 0;
    }
  }
  else
  {
    uint64_t result = ktrace_file_append_finish_internal(a1, (void *)(a1 + 24), a2);
    if (!result) {
      *(unsigned char *)(a1 + 299) = 0;
    }
  }
  return result;
}

uint64_t ktrace_file_append_finish_internal(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a1 == -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6 != 4 && *(void *)(a1 + 152) != a3) {
    return 22;
  }
  uint64_t v8 = *(void *)(a3 + 40);
  *(void *)(a1 + 152) = v8;
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(a3 + 8) + *(void *)(v8 + 8) + 16;
    *(void *)(v8 + 8) = v10;
    unint64_t v11 = *(void *)(a3 + 8) + *(void *)(a3 + 16) - v9;
    if (v11 > v10) {
      *(void *)(v8 + 8) = v11;
    }
  }
  if (v6 == 4)
  {
    (*(void (**)(void, BOOL, uint64_t))(*(void *)(a1 + 272) + 16))(*(void *)(a1 + 272), a1 + 80 == (void)a2, a3);
    ktrace_chunk_destroy((void *)a3);
    return 0;
  }
  int v12 = *(_DWORD *)(a3 + 36);
  v22[0] = *(_DWORD *)(a3 + 32);
  v22[1] = v12;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v23 = *(void *)(a3 + 8);
  off_t v14 = v13 - 16;
  if ((unint64_t)ktrace_file_write(a1, v22, 0x10uLL, v13 - 16) > 0xF)
  {
    uint64_t v17 = ktrace_chunk_array_append(a2, (void *)a3);
    if (!v17)
    {
      if (ktrace_chunk_has_subchunks(a3) && *(void *)a3 != -1)
      {
        uint64_t v7 = 0;
        uint64_t v20 = *(void *)(a3 + 16);
        uint64_t v21 = *(void *)(a3 + 8) + v20;
        *(void *)(a3 + 80) = 16;
        *(void *)(a3 + 88) = v20;
        *(void *)(a3 + 96) = v21;
        return v7;
      }
      return 0;
    }
    uint64_t v7 = v17;
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_finish_internal_cold_5();
    }
  }
  else
  {
    unsigned int v15 = *__error();
    if (v15) {
      uint64_t v7 = v15;
    }
    else {
      uint64_t v7 = 22;
    }
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_finish_internal_cold_4();
    }
  }
  *__error() = v16;
  int v18 = *(_DWORD *)(a1 + 196);
  if (v18 != -1) {
    ftruncate(v18, v14);
  }
  free((void *)a3);
  return v7;
}

uint64_t ktrace_chunk_array_append(void *a1, void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = ktrace_chunk_array_append_internal((uint64_t)a1, a2);
  if (!result)
  {
    a1[6] = a1[5];
    a1[1] = a2;
  }
  return result;
}

uint64_t ktrace_chunk_array_append_internal(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v4 = *(void **)a1;
  if (!v4)
  {
    uint64_t v4 = malloc_type_malloc(0x38uLL, 0x2004093837F09uLL);
    *(void *)a1 = v4;
    if (v4)
    {
      *(void *)(a1 + 24) = 7;
      goto LABEL_9;
    }
    return *__error();
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 == *(void *)(a1 + 16))
  {
    uint64_t v6 = (2 * v5) | 1;
    uint64_t v4 = malloc_type_realloc(v4, 8 * v6, 0x2004093837F09uLL);
    if (v4)
    {
      *(void *)a1 = v4;
      *(void *)(a1 + 24) = v6;
      goto LABEL_9;
    }
    return *__error();
  }
LABEL_9:
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  a2[3] = v8;
  *(void *)(a1 + 40) = a2[1] + a2[2];
  *(void *)(a1 + 16) = v8 + 1;
  *((void *)v4 + v8) = a2;
  return v7;
}

void *ktrace_file_append_start_internal(uint64_t a1, int a2, __int16 a3, __int16 a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a3 < 0)
  {
    *__error() = 22;
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_start_internal_cold_6();
    }
    goto LABEL_8;
  }
  if (a1 != -1 && *(_DWORD *)(a1 + 16) != 4)
  {
    if (*(unsigned char *)(a1 + 296))
    {
      int v11 = *(_DWORD *)(a1 + 196);
      if (v11 == -1)
      {
        off_t v12 = *(void *)(a1 + 280);
      }
      else
      {
        off_t v12 = lseek(v11, 0, 2);
        if (v12 == -1)
        {
          int v9 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
            ktrace_file_append_start_internal_cold_5();
          }
LABEL_8:
          uint64_t v8 = 0;
          *__error() = v9;
          return v8;
        }
      }
      ktrace_chunk_array_read_all(a1, a1 + 80);
      ktrace_chunk_array_read_all(a1, a1 + 24);
      unint64_t v13 = -(int)v12 & 7;
      if (!v13) {
        goto LABEL_24;
      }
      ktrace_log_init();
      off_t v14 = ktrace_file_log;
      BOOL v15 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG);
      if (v15) {
        ktrace_file_append_start_internal_cold_4(v13, v14);
      }
      MEMORY[0x1F4188790](v15);
      uint64_t v17 = (char *)&v20 - v16;
      bzero((char *)&v20 - v16, v13);
      if (ktrace_file_write(a1, v17, v13, -1) >= v13)
      {
LABEL_24:
        uint64_t v8 = ktrace_chunk_create(a1, a2, a3, a4, 0, v12 + v13 + 16);
        if (!v8) {
          return v8;
        }
        long long v20 = xmmword_1B3A73130;
        if (ktrace_file_write(a1, &v20, 0x10uLL, -1) == 16)
        {
          *(void *)(a1 + 152) = v8;
          return v8;
        }
        int v19 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_append_start_internal_cold_2();
        }
        *__error() = v19;
        int v9 = *__error();
        free(v8);
        goto LABEL_8;
      }
      int v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_start_internal_cold_3();
      }
      *__error() = v18;
    }
    return 0;
  }
  uint64_t v8 = ktrace_chunk_create(-1, a2, a3, a4, 0, 0);
  v8[2] = CFDataCreateMutable(0, 0);
  return v8;
}

uint64_t ktrace_file_write(uint64_t a1, const void *a2, size_t a3, off_t a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 16) == 4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  off_t v6 = a4;
  if (*(_DWORD *)(a1 + 196) != -1)
  {
    while (1)
    {
      *__error() = 0;
      int v8 = *(_DWORD *)(a1 + 196);
      if (v6 == -1)
      {
        unint64_t v9 = write(v8, a2, a3);
        *(void *)(a1 + 280) = fd_size(*(_DWORD *)(a1 + 196));
      }
      else
      {
        unint64_t v9 = pwrite(v8, a2, a3, v6);
      }
      if (v9 < a3) {
        break;
      }
      if (v9 != -1) {
        return v9;
      }
      if (*__error() != 4) {
        return -1;
      }
    }
    *__error() = 79;
    return -1;
  }
  if (a4 == -1) {
    off_t v6 = *(void *)(a1 + 280);
  }
  size_t v10 = v6 + a3;
  int v11 = ktrace_file_ensure_space((void *)a1, v6 + a3);
  if (v11)
  {
    *__error() = v11;
    return -1;
  }
  memcpy((void *)(*(void *)(a1 + 240) + v6), a2, a3);
  if (*(void *)(a1 + 280) < v10) {
    *(void *)(a1 + 280) = v10;
  }
  return a3;
}

off_t fd_size(int a1)
{
  if (a1 == -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  memset(&v3, 0, sizeof(v3));
  if (!fstat(a1, &v3)) {
    return v3.st_size;
  }
  int v1 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    fd_size_cold_2();
  }
  *__error() = v1;
  return -1;
}

uint64_t ktrace_chunk_array_read_all(uint64_t result, uint64_t a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*(void *)(a2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    do
      uint64_t result = ktrace_chunk_array_next(v3, a2, &v4);
    while (!result && v4);
  }
  return result;
}

void *ktrace_chunk_create(uint64_t a1, int a2, __int16 a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  if (a1 != -1)
  {
    if (!a1) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (*(_DWORD *)(a1 + 16) == 4) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  off_t v12 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A2040F61CF89BuLL);
  unint64_t v13 = v12;
  if (v12)
  {
    *((_DWORD *)v12 + 8) = a2;
    *((_WORD *)v12 + 18) = a3;
    *((_WORD *)v12 + 19) = a4;
    *off_t v12 = a1;
    v12[1] = a5;
    void v12[2] = a6;
    if (ktrace_chunk_has_subchunks((uint64_t)v12))
    {
      uint64_t v14 = v13[2];
      uint64_t v15 = v13[1] + v14;
      v13[10] = 16;
      v13[11] = v14;
      v13[12] = v15;
    }
  }
  return v13;
}

uint64_t ktrace_chunk_has_subchunks(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned __int16 *)(a1 + 36) >> 15;
}

uint64_t sub_1B39B473C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5DF8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B39B4EA0();
  sub_1B3A70E70();
  sub_1B39B4CD4(v3, (uint64_t)v20, &qword_1E9CD5DB8);
  sub_1B39B4CD4((uint64_t)v20, (uint64_t)v12, &qword_1E9CD5DB8);
  char v11 = 0;
  sub_1B39B4DA4();
  sub_1B3A70C50();
  if (!v2)
  {
    v12[0] = 1;
    sub_1B3A70C10();
    v12[0] = 2;
    sub_1B3A70C10();
    v12[0] = 3;
    sub_1B3A70C20();
    sub_1B39B4CD4(v3 + 64, (uint64_t)v19, &qword_1E9CD5DD8);
    sub_1B39B4CD4((uint64_t)v19, (uint64_t)v12, &qword_1E9CD5DD8);
    char v11 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E10);
    sub_1B39B4D38(&qword_1E9CD5E18, &qword_1E9CD5E10, (void (*)(void))sub_1B39B6070);
    sub_1B3A70C50();
    sub_1B39B4CD4(v3 + 72, (uint64_t)v18, &qword_1E9CD5DE0);
    sub_1B39B4CD4((uint64_t)v18, (uint64_t)v12, &qword_1E9CD5DE0);
    char v11 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E28);
    sub_1B39B4D38(&qword_1E9CD5E30, &qword_1E9CD5E28, (void (*)(void))sub_1B39B60D4);
    sub_1B3A70C50();
    sub_1B39B4CD4(v3 + 80, (uint64_t)v17, &qword_1E9CD5DC8);
    sub_1B39B4CD4((uint64_t)v17, (uint64_t)v12, &qword_1E9CD5DC8);
    char v11 = 6;
    sub_1B39B4DF8();
    sub_1B3A70C50();
    sub_1B39B4CD4(v3 + 96, (uint64_t)v16, &qword_1E9CD5DC0);
    sub_1B39B4CD4((uint64_t)v16, (uint64_t)v12, &qword_1E9CD5DC0);
    char v11 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E48);
    sub_1B39B4D38(&qword_1E9CD5E50, &qword_1E9CD5E48, (void (*)(void))sub_1B39B5E84);
    sub_1B3A70C50();
    sub_1B39B4CD4(v3 + 104, (uint64_t)v15, &qword_1E9CD5DD0);
    sub_1B39B4CD4((uint64_t)v15, (uint64_t)v12, &qword_1E9CD5DD0);
    char v11 = 8;
    sub_1B39B4E4C();
    sub_1B3A70C50();
    sub_1B39B4CD4(v3 + 128, (uint64_t)v14, &qword_1E9CD5DD0);
    sub_1B39B4CD4((uint64_t)v14, (uint64_t)v12, &qword_1E9CD5DD0);
    char v11 = 9;
    sub_1B3A70C50();
    sub_1B39B4CD4(v3 + 152, (uint64_t)v13, &qword_1E9CD5DE8);
    sub_1B39B4CD4((uint64_t)v13, (uint64_t)v12, &qword_1E9CD5DE8);
    char v11 = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5E68);
    sub_1B39B4D38(&qword_1E9CD5E70, &qword_1E9CD5E68, (void (*)(void))sub_1B39B5EE8);
    sub_1B3A70C50();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1B39B4CD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B39B4D38(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B39B4DA4()
{
  unint64_t result = qword_1E9CD5E08;
  if (!qword_1E9CD5E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E08);
  }
  return result;
}

unint64_t sub_1B39B4DF8()
{
  unint64_t result = qword_1E9CD5E40;
  if (!qword_1E9CD5E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E40);
  }
  return result;
}

unint64_t sub_1B39B4E4C()
{
  unint64_t result = qword_1E9CD5E60;
  if (!qword_1E9CD5E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E60);
  }
  return result;
}

unint64_t sub_1B39B4EA0()
{
  unint64_t result = qword_1E9CD5E00;
  if (!qword_1E9CD5E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E00);
  }
  return result;
}

uint64_t ktrace_chunk_array_next(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  if (v6)
  {
    unint64_t v7 = v6[3] + 1;
    unint64_t v8 = *(void *)(a2 + 16);
    if (v7 < v8)
    {
      uint64_t appended = 0;
      uint64_t v10 = *(void **)(*(void *)a2 + 8 * v7);
LABEL_9:
      *a3 = v10;
      return appended;
    }
    if (v7 == v8 && *(void *)(a2 + 8) != 0)
    {
      ktrace_log_init();
      uint64_t v17 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_chunk_array_next_cold_12(v7, v17);
      }
LABEL_29:
      uint64_t appended = 0;
      *a3 = 0;
      return appended;
    }
    uint64_t v12 = v6[1] + v6[2];
    unint64_t v13 = (-(int)v12 & 7) + v12;
    ktrace_log_init();
    uint64_t v14 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = v6[1];
      uint64_t v15 = v6[2];
      *(_DWORD *)long long buf = 134218496;
      unint64_t v49 = v13;
      __int16 v50 = 2048;
      *(void *)uint64_t v51 = v15;
      *(_WORD *)&v51[8] = 2048;
      *(void *)&v51[10] = v16;
      _os_log_debug_impl(&dword_1B39A5000, v14, OS_LOG_TYPE_DEBUG, "calculating new offset %lld from %lld base data offset and %llu size", buf, 0x20u);
    }
  }
  else
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t appended = 0;
      uint64_t v10 = **(void ***)a2;
      goto LABEL_9;
    }
    unint64_t v13 = (-*(unsigned char *)(a2 + 40) & 7) + *(void *)(a2 + 40);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      ktrace_chunk_array_next_cold_11();
    }
  }
  int v19 = (void *)(a2 + 48);
  size_t v20 = *(void *)(a2 + 32);
  if (v20 + v13 >= *(void *)(a2 + 48))
  {
LABEL_27:
    ktrace_log_init();
    uint64_t v24 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v38 = *(void *)(a2 + 32) + v13;
      uint64_t v39 = *(void *)(a2 + 48);
      *(_DWORD *)long long buf = 134218496;
      unint64_t v49 = v13;
      __int16 v50 = 2048;
      *(void *)uint64_t v51 = v38;
      *(_WORD *)&v51[8] = 2048;
      *(void *)&v51[10] = v39;
      _os_log_debug_impl(&dword_1B39A5000, v24, OS_LOG_TYPE_DEBUG, "next chunk header is at offset %lld (data at %lld), max offset is %lld", buf, 0x20u);
    }
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v21 = ktrace_file_read(a1, &v46, v20, v13);
    unint64_t v22 = *(void *)(a2 + 32);
    if (v21 < v22)
    {
      uint64_t appended = *__error();
      if (!appended) {
        ktrace_postprocess_file_internal_cold_1();
      }
      int v27 = *__error();
      ktrace_log_init();
      CFIndex v28 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      {
        unint64_t v42 = *(void *)(a2 + 32);
        *(_DWORD *)long long buf = 134218496;
        unint64_t v49 = v42;
        __int16 v50 = 2048;
        *(void *)uint64_t v51 = v13;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)&v51[10] = v27;
        _os_log_error_impl(&dword_1B39A5000, v28, OS_LOG_TYPE_ERROR, "cannot read %zu bytes at offset %lld for next chunk header (%{errno}d)", buf, 0x1Cu);
      }
      *__error() = v27;
      return appended;
    }
    if (v46 != 0x2000) {
      break;
    }
    v13 += (-(v22 + v13 + v47) & 7) + v22 + v47;
    ktrace_log_init();
    uint64_t v23 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v49 = v13;
      _os_log_debug_impl(&dword_1B39A5000, v23, OS_LOG_TYPE_DEBUG, "skipping null chunk to offset %lld", buf, 0xCu);
    }
    size_t v20 = *(void *)(a2 + 32);
    if (v20 + v13 >= *(void *)(a2 + 48)) {
      goto LABEL_27;
    }
  }
  if (v46 == -1)
  {
    int v26 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_array_next_cold_10();
    }
    *__error() = v26;
    return 79;
  }
  if (v47 != -1)
  {
    if (v47 + v13 + v22 > *v19)
    {
      int v29 = *__error();
      ktrace_log_init();
      os_signpost_id_t v30 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      {
        unint64_t v43 = *(void *)(a2 + 16);
        unint64_t v44 = *(void *)(a2 + 32) + v13;
        uint64_t v45 = *(void *)(a2 + 48);
        *(_DWORD *)long long buf = 134219008;
        unint64_t v49 = v43;
        __int16 v50 = 2048;
        *(void *)uint64_t v51 = v47;
        *(_WORD *)&v51[8] = 2048;
        *(void *)&v51[10] = v44;
        __int16 v52 = 2048;
        uint64_t v53 = v45;
        __int16 v54 = 1024;
        int v55 = v29;
        _os_log_error_impl(&dword_1B39A5000, v30, OS_LOG_TYPE_ERROR, "chunk %zu would extend beyond file: chunk header shows size %llu, data starts at offset %lld, but max offset in file is %lld (%{errno}d)", buf, 0x30u);
      }
      *__error() = v29;
      return 79;
    }
LABEL_50:
    if (v22 == 8)
    {
      ktrace_log_init();
      uint64_t v40 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_chunk_array_next_cold_6((int *)&v46, v13, v40);
      }
      int v32 = v46;
      uint64_t v35 = HIDWORD(v46);
      uint64_t v36 = *(void *)(a2 + 32) + v13;
      uint64_t v37 = a1;
      __int16 v33 = 0;
      __int16 v34 = 0;
LABEL_58:
      uint64_t v6 = ktrace_chunk_create(v37, v32, v33, v34, v35, v36);
    }
    else if (v22 == 16)
    {
      ktrace_log_init();
      uint64_t v31 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134218496;
        unint64_t v49 = v13;
        __int16 v50 = 1024;
        *(_DWORD *)uint64_t v51 = v46;
        *(_WORD *)&v51[4] = 2048;
        *(void *)&v51[6] = v47;
        _os_log_debug_impl(&dword_1B39A5000, v31, OS_LOG_TYPE_DEBUG, "found chunk with header at offset %lld, tag 0x%08x size %llu", buf, 0x1Cu);
      }
      int v32 = v46;
      __int16 v33 = WORD2(v46);
      __int16 v34 = HIWORD(v46);
      uint64_t v35 = v47;
      uint64_t v36 = *(void *)(a2 + 32) + v13;
      uint64_t v37 = a1;
      goto LABEL_58;
    }
    if (!v6) {
      return *__error();
    }
    *a3 = v6;
    uint64_t appended = ktrace_chunk_array_append_internal(a2, v6);
    if (!appended)
    {
      if (*(void *)(a2 + 40) >= *(void *)(a2 + 48))
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_chunk_array_next_cold_5();
        }
        uint64_t appended = 0;
        *(void *)(a2 + 8) = v6;
      }
      else
      {
        return 0;
      }
    }
    return appended;
  }
  uint64_t v47 = *v19 - (v13 + v22);
  if (!*(unsigned char *)(a1 + 296)) {
    goto LABEL_50;
  }
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    ktrace_chunk_array_next_cold_9();
  }
  if (ktrace_file_write(a1, &v47, 8uLL, v13 + 8) == 8)
  {
    unint64_t v22 = *(void *)(a2 + 32);
    goto LABEL_50;
  }
  uint64_t appended = *__error();
  if (!appended) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v41 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_chunk_array_next_cold_8();
  }
  *__error() = v41;
  return appended;
}

void ktrace_log_init()
{
  if (ktrace_log_init_ktrace_log_once != -1) {
    dispatch_once(&ktrace_log_init_ktrace_log_once, &__block_literal_global_6);
  }
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

__n128 __Block_byref_object_copy__0(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

uint64_t __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t sub_1B39B5680(uint64_t a1, unsigned __int8 a2)
{
  return sub_1B39AEB6C(8, a2);
}

uint64_t sub_1B39B5698(uint64_t a1, uint64_t a2)
{
  return sub_1B39B56A0(a1, a2);
}

uint64_t sub_1B39B56A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1B39B56F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  for (i = (void *)(a1 + 40); ; i += 5)
  {
    BOOL v7 = *(i - 1) == a2 && *i == a3;
    if (v7 || (sub_1B3A70D20() & 1) != 0) {
      break;
    }
    if (!--v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1B39B577C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9CD5EE8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B39B57F8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1B39B5840()
{
  uint64_t v1 = sub_1B3A70700();
  return (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 40) + 96))(v1);
}

uint64_t sub_1B39B5890(uint64_t result)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v5 = v1[3];
    uint64_t v6 = v1[4];
    BOOL v7 = (void *)(result + 32);
    uint64_t v8 = v1[5];
    swift_bridgeObjectRetain();
    uint64_t v9 = v4 - 1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v11 = v7[3];
      uint64_t v12 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(v5, v6, v8, v11, v12);
      if (v3) {
        break;
      }
      uint64_t v9 = v10 - 1;
      v7 += 5;
    }
    while (v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B39B5954(uint64_t a1)
{
  uint64_t v2 = v1;
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 224))(__src);
  uint64_t result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if (a1)
  {
    char v5 = sub_1B39B08C0(a1);
    uint64_t result = sub_1B39B0C68((uint64_t)__src);
    if ((v5 & 1) == 0) {
      return (*(uint64_t (**)(unint64_t, unint64_t))(**(void **)(v2
    }
                                                                                         + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                                           + 248))(0xD00000000000001DLL, 0x80000001B3A7C0A0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1B39B5A40()
{
  unint64_t result = qword_1E9CD5EF8;
  if (!qword_1E9CD5EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5EF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanLayer.CodingKeys()
{
  return &type metadata for PlanLayer.CodingKeys;
}

uint64_t sub_1B39B5AA4()
{
  return 0;
}

uint64_t sub_1B39B5AB0(void *a1)
{
  return sub_1B39AD514(a1);
}

unint64_t sub_1B39B5AC8()
{
  unint64_t result = qword_1E9CD5ED0;
  if (!qword_1E9CD5ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5ED0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Plan.CodingKeys()
{
  return &type metadata for Plan.CodingKeys;
}

unint64_t sub_1B39B5B2C()
{
  unint64_t result = qword_1E9CD5EE0;
  if (!qword_1E9CD5EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5EE0);
  }
  return result;
}

uint64_t sub_1B39B5B84(void *a1)
{
  return sub_1B39AA240(a1);
}

ValueMetadata *type metadata accessor for KDebugBufferSize.CodingKeys()
{
  return &type metadata for KDebugBufferSize.CodingKeys;
}

unint64_t sub_1B39B5BB4()
{
  unint64_t result = qword_1E9CD85B0;
  if (!qword_1E9CD85B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD85B0);
  }
  return result;
}

unint64_t sub_1B39B5C18()
{
  unint64_t result = qword_1E9CD5B00;
  if (!qword_1E9CD5B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5B00);
  }
  return result;
}

unint64_t sub_1B39B5C6C()
{
  unint64_t result = qword_1E9CD5AF0;
  if (!qword_1E9CD5AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5AF0);
  }
  return result;
}

unint64_t sub_1B39B5CC0()
{
  unint64_t result = qword_1E9CD5AE8;
  if (!qword_1E9CD5AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5AE8);
  }
  return result;
}

unint64_t sub_1B39B5D14()
{
  unint64_t result = qword_1E9CD5AF8;
  if (!qword_1E9CD5AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5AF8);
  }
  return result;
}

void *sub_1B39B5D68()
{
  return &unk_1B3A739E8;
}

uint64_t sub_1B39B5D74()
{
  return 1;
}

uint64_t (*sub_1B39B5D7C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1B39B5DD0()
{
  (*(void (**)(void, void, void))(**(void **)(v0 + 16) + 120))(*(unsigned int *)(*(void *)(v0 + 24) + 16), 0, 0);
  return sub_1B3A70710();
}

unint64_t sub_1B39B5E84()
{
  unint64_t result = qword_1E9CD5E58;
  if (!qword_1E9CD5E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E58);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfKDebugTrigger.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfKDebugTrigger.CodingKeys;
}

unint64_t sub_1B39B5EE8()
{
  unint64_t result = qword_1E9CD5E78;
  if (!qword_1E9CD5E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E78);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.ProviderEntry.CodingKeys()
{
  return &type metadata for PlanSettings.ProviderEntry.CodingKeys;
}

unint64_t sub_1B39B5F4C()
{
  unint64_t result = qword_1E9CD5D70;
  if (!qword_1E9CD5D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5D70);
  }
  return result;
}

unsigned char *_s6ktrace12PlanSettingsV12KPerfPETModeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t sub_1B39B6070()
{
  unint64_t result = qword_1E9CD5E20;
  if (!qword_1E9CD5E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E20);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfAction.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfAction.CodingKeys;
}

unint64_t sub_1B39B60D4()
{
  unint64_t result = qword_1E9CD5E38;
  if (!qword_1E9CD5E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5E38);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfTimer.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfTimer.CodingKeys;
}

ValueMetadata *type metadata accessor for PlanSettings.CodingKeys()
{
  return &type metadata for PlanSettings.CodingKeys;
}

uint64_t sub_1B39B6148(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B39B6160(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_1B39AAABC(a1, a2, a3);
  }
  return a1;
}

ValueMetadata *type metadata accessor for WakeReason()
{
  return &type metadata for WakeReason;
}

uint64_t (*sub_1B39B6184())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B39B61D8(void *a1, uint64_t a2)
{
  uint64_t v91 = a1;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1B3A6FF40();
  uint64_t v8 = *(void *)(v7 - 8);
  v81[1] = v7;
  v81[2] = v8;
  MEMORY[0x1F4188790](v7);
  v81[3] = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD6200);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v87 = (void *)((char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for RecordingOptions(0);
  uint64_t v83 = *(void *)(v12 - 8);
  uint64_t v84 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v82 = (void *)((char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v88 = (uint64_t)v81 - v15;
  uint64_t v86 = type metadata accessor for KTraceRecordError();
  MEMORY[0x1F4188790](v86);
  uint64_t v85 = (char *)v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = j_nullsub_1(a2);
  *(void *)&long long v96 = v17;
  sub_1B3A4BDFC();
  uint64_t v18 = sub_1B3A704C0();
  *(void *)&long long v95 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v18 & ~(v18 >> 63), 0);
  uint64_t v19 = v95;
  uint64_t v94 = v17;
  sub_1B3A704B0();
  if (v18 < 0)
  {
    __break(1u);
LABEL_40:
    swift_once();
LABEL_33:
    uint64_t v58 = sub_1B3A700D0();
    __swift_project_value_buffer(v58, (uint64_t)qword_1E9CDCD20);
    uint64_t v59 = v6;
    uint64_t v60 = v6;
    uint64_t v61 = sub_1B3A700B0();
    os_log_type_t v62 = sub_1B3A70630();
    if (os_log_type_enabled(v61, v62))
    {
      char v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v94 = v64;
      uint64_t v91 = v2;
      *(_DWORD *)char v63 = 136315138;
      swift_getErrorValue();
      uint64_t v65 = sub_1B3A70D80();
      uint64_t v92 = sub_1B39B2E48(v65, v66, &v94);
      uint64_t v2 = v91;
      sub_1B3A707C0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B39A5000, v61, v62, "recording failed: %s", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EC0090](v64, -1, -1);
      MEMORY[0x1B3EC0090](v63, -1, -1);
    }
    else
    {
    }
    sub_1B3A48078(v2, v90, (uint64_t *)&v93);
    swift_release();
    swift_release();
    uint64_t v45 = 71;
    goto LABEL_37;
  }
  if (v18)
  {
    sub_1B3A3FA8C();
    do
    {
      sub_1B3A707B0();
      if (!v94) {
        __break(1u);
      }
      uint64_t v20 = sub_1B3A703B0();
      uint64_t v22 = v21;
      *(void *)&long long v95 = v19;
      unint64_t v24 = *(void *)(v19 + 16);
      unint64_t v23 = *(void *)(v19 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1B3A052F4((char *)(v23 > 1), v24 + 1, 1);
        uint64_t v19 = v95;
      }
      *(void *)(v19 + 16) = v24 + 1;
      uint64_t v25 = v19 + 16 * v24;
      *(void *)(v25 + 32) = v20;
      *(void *)(v25 + 40) = v22;
      --v18;
    }
    while (v18);
  }
  sub_1B3A3FA8C();
  sub_1B3A707B0();
  while (v94)
  {
    uint64_t v26 = sub_1B3A703B0();
    uint64_t v28 = v27;
    *(void *)&long long v95 = v19;
    unint64_t v30 = *(void *)(v19 + 16);
    unint64_t v29 = *(void *)(v19 + 24);
    if (v30 >= v29 >> 1)
    {
      sub_1B3A052F4((char *)(v29 > 1), v30 + 1, 1);
      uint64_t v19 = v95;
    }
    *(void *)(v19 + 16) = v30 + 1;
    uint64_t v31 = v19 + 16 * v30;
    *(void *)(v31 + 32) = v26;
    *(void *)(v31 + 40) = v28;
    sub_1B3A707B0();
  }
  uint64_t v32 = *(void *)(v19 + 16);
  uint64_t v33 = v32 != 0;
  __int16 v34 = v91;
  uint64_t v35 = v91[4];
  if (v35)
  {
    uint64_t v36 = (FILE *)nullsub_1(v35);
    uint64_t v89 = sub_1B3A3C0EC(v36);
  }
  else
  {
    uint64_t v89 = 0;
  }
  type metadata accessor for RecordInfo();
  uint64_t v2 = (void *)sub_1B3A1E018();
  long long v93 = xmmword_1B3A75DF0;
  if (!getenv("TRACE_NO_ANALYTICS")) {
    goto LABEL_19;
  }
  if (sub_1B3A703B0() == 48 && v37 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    int v38 = 1;
    goto LABEL_21;
  }
  int v38 = sub_1B3A70D20();
  swift_bridgeObjectRelease();
LABEL_21:
  int v90 = os_variant_has_internal_content() & v38;
  if (v32 <= v33)
  {
    long long v46 = *((_OWORD *)v34 + 1);
    long long v96 = *(_OWORD *)v34;
    long long v97 = v46;
    long long v98 = *((_OWORD *)v34 + 2);
    uint64_t v99 = v34[6];
    uint64_t v47 = (uint64_t)v85;
    swift_storeEnumTagMultiPayload();
    sub_1B3A4BE50((uint64_t)&v96);
    sub_1B3A4965C((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    uint64_t v48 = sub_1B3A70D80();
    unint64_t v50 = v49;
    sub_1B3A4B628(v47, (uint64_t (*)(void))type metadata accessor for KTraceRecordError);
    sub_1B3A47E94(8, v48, v50);
    swift_bridgeObjectRelease();
    sub_1B3A4BF4C((uint64_t)&v96);
    unsigned int v6 = (char *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    if (v89)
    {
      uint64_t v94 = (uint64_t)v89;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A18);
      uint64_t v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_1B3A73390;
      swift_getErrorValue();
      __int16 v52 = v6;
      uint64_t v53 = sub_1B3A70D80();
      *(void *)(v51 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v51 + 32) = v53;
      *(void *)(v51 + 40) = v54;
      sub_1B39B16DC();
      sub_1B3A70DD0();
      swift_bridgeObjectRelease();
    }
    else
    {
      int v55 = v6;
    }
    uint64_t v56 = *(void (**)(char *))(*v2 + 376);
    uint64_t v57 = v6;
    v56(v6);
    if (qword_1E9CDB890 == -1) {
      goto LABEL_33;
    }
    goto LABEL_40;
  }
  long long v39 = *((_OWORD *)v34 + 1);
  long long v96 = *(_OWORD *)v34;
  long long v97 = v39;
  long long v98 = *((_OWORD *)v34 + 2);
  uint64_t v99 = v34[6];
  swift_retain_n();
  sub_1B3A4BE50((uint64_t)&v96);
  sub_1B3A70D30();
  swift_retain();
  uint64_t v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_release();
    uint64_t v40 = MEMORY[0x1E4FBC860];
  }
  uint64_t v41 = *(void *)(v40 + 16);
  swift_release();
  if (v41 == v32 - v33)
  {
    uint64_t v42 = swift_dynamicCastClass();
    uint64_t v43 = v88;
    if (!v42)
    {
      swift_release();
      uint64_t v42 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    swift_release();
    uint64_t v42 = sub_1B3A4AADC(v19, v19 + 32, v32 != 0, (2 * v32) | 1);
    uint64_t v43 = v88;
  }
  swift_release();
  unint64_t v44 = (uint64_t (*)(void, void, void, void, void))v87;
  sub_1B3A5F684((uint64_t)&v96, v42, (uint64_t)v87);
  if ((*(unsigned int (**)(uint64_t (*)(void, void, void, void, void), uint64_t, uint64_t))(v83 + 48))(v44, 1, v84) == 1)
  {
    sub_1B3A11580((uint64_t)v44, &qword_1E9CD6200);
    sub_1B3A48078(v2, v90, (uint64_t *)&v93);
    swift_release();
    swift_release();
    uint64_t v45 = 0;
  }
  else
  {
    sub_1B3A4BE7C((uint64_t)v44, v43, type metadata accessor for RecordingOptions);
    uint64_t v68 = v82;
    sub_1B3A4BEE4(v43, (uint64_t)v82, type metadata accessor for RecordingOptions);
    type metadata accessor for Recording();
    uint64_t v69 = swift_allocObject();
    swift_retain();
    sub_1B3A445E4(v34, v68, (uint64_t)v2);
    uint64_t v70 = *(void **)(*v2 + 256);
    swift_retain();
    uint64_t v87 = v70;
    uint64_t v71 = ((uint64_t (*)(void, void, void, void, uint64_t))v70)(0, 0, 0, 0, 1);
    (*(void (**)(uint64_t))(*(void *)v69 + 376))(v71);
    uint64_t v72 = ((uint64_t (*)(uint64_t, void, void, void, uint64_t))v87)(1, 0, 0, 0, 1);
    (*(void (**)(uint64_t))(*(void *)v69 + 384))(v72);
    uint64_t v73 = ((uint64_t (*)(uint64_t, void, void, void, uint64_t))v87)(2, 0, 0, 0, 1);
    (*(void (**)(uint64_t))(*(void *)v69 + 392))(v73);
    uint64_t v74 = ((uint64_t (*)(uint64_t, void, void, void, uint64_t))v87)(3, 0, 0, 0, 1);
    (*(void (**)(uint64_t))(*(void *)v69 + 400))(v74);
    char v75 = (*(uint64_t (**)(void *))(*(void *)v69 + 408))(v2);
    uint64_t v78 = v76;
    uint64_t v79 = v77;
    char v80 = v75;
    swift_release_n();
    *(void *)&long long v93 = v78;
    *((void *)&v93 + 1) = v79;
    if (v80) {
      uint64_t v45 = 0;
    }
    else {
      uint64_t v45 = 75;
    }
    sub_1B3A4B628(v88, type metadata accessor for RecordingOptions);
    sub_1B3A48078(v2, v90, (uint64_t *)&v93);
    swift_release();
    swift_release();
  }
LABEL_37:
  sub_1B3A4B87C(v93, *((unint64_t *)&v93 + 1));
  return v45;
}

uint64_t ktrace_only_do_time_sensitive_postprocess(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 224)) & 1;
}

uint64_t ktrace_set_only_do_time_sensitive_postprocess(uint64_t result, int a2)
{
  if (a2) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(result + 224) = *(_WORD *)(result + 224) & 0xFEFF | v2;
  return result;
}

void *ktrace_postprocessing_set_completed_handler(uint64_t *a1, const void *a2)
{
  uint64_t v3 = *a1;
  if ((*(_WORD *)(v3 + 224) & 3) != 0) {
    ktrace_postprocessing_set_completed_handler_cold_1();
  }
  uint64_t v5 = ktrace_callback_list_add(v3, (uint64_t)(a1 + 2));
  v5[4] = 5;
  uint64_t result = _Block_copy(a2);
  *((void *)v5 + 3) = result;
  *uint64_t v5 = 2;
  return result;
}

uint64_t ktrace_postprocessing_get_processing_queue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t ktrace_postprocess_file_internal(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10 = dup(*(_DWORD *)(a2 + 196));
  if (v10 < 0) {
    return *__error();
  }
  int v11 = v10;
  uint64_t v12 = ktrace_file_open_fd(v10, 0);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = dispatch_semaphore_create(0);
    uint64_t v15 = ktrace_session_create_with_flags(0);
    *(_OWORD *)object = 0u;
    long long v40 = 0u;
    uint64_t v21 = ktrace_set_ktrace_file((uint64_t)v15, v13, 1, v16, v17, v18, v19, v20);
    if (!v21)
    {
      if (!v15) {
        ktrace_postprocess_file_internal_cold_1();
      }
      *((unsigned char *)v15[37].isa + 96) &= ~1u;
      if (a1)
      {
        uint64_t v22 = *(void *)(a1 + 72);
        if (v22) {
          (*(void (**)(uint64_t, NSObject *))(v22 + 16))(v22, v15);
        }
        [*(id *)(a1 + 600) configurePostprocessingWithSession:v15];
      }
      object[0] = v15;
      object[1] = dispatch_queue_create("com.apple.libktrace.postprocessing", 0);
      if (!a3) {
        ktrace_catalog_postprocess_file((uint64_t)v15, a2, (uint64_t *)object, v23, v24, v25, v26, v27);
      }
      ktrace_uuid_map_postprocess_file((uint64_t)v15, a2, a3, a4, (uint64_t *)object);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __ktrace_postprocess_file_internal_block_invoke;
      aBlock[3] = &unk_1E6061BE8;
      aBlock[5] = a5;
      aBlock[6] = v15;
      aBlock[4] = v14;
      ktrace_set_completion_handler((uint64_t)v15, aBlock);
      if (!a1 || (unsigned __int8 v28 = atomic_load((unsigned __int8 *)(a1 + 158)), (v28 & 1) == 0))
      {
        ktrace_log_init();
        unint64_t v29 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_postprocess_file_internal_cold_4(v29);
        }
        uint64_t v30 = ktrace_start((unint64_t)v15, object[1]);
        if (v30)
        {
          uint64_t v21 = v30;
          *__error() = v30;
          int v31 = *__error();
          ktrace_log_init();
          uint64_t v32 = ktrace_log;
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_postprocess_file_internal_cold_3(v31, v32);
          }
          *__error() = v31;
          goto LABEL_31;
        }
        if (a1) {
          *(void *)(a1 + 80) = v15;
        }
        dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
        ktrace_log_init();
        uint64_t v33 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_postprocess_file_internal_cold_2(v33);
        }
        if ((int)v40 >= 1)
        {
          uint64_t v34 = 0;
          uint64_t v35 = (uint64_t *)(*((void *)&v40 + 1) + 24);
          do
          {
            uint64_t v36 = *v35;
            v35 += 4;
            (*(void (**)(void))(v36 + 16))();
            ++v34;
          }
          while (v34 < (int)v40);
        }
        if (a1) {
          [*(id *)(a1 + 600) postprocessingCompleteWithFile:a2];
        }
      }
      uint64_t v21 = 0;
    }
LABEL_31:
    ktrace_session_destroy((uint64_t)v15);
    dispatch_release(v14);
    ktrace_callback_list_reset((int *)&v40);
    dispatch_release(object[1]);
    return v21;
  }
  uint64_t v21 = *__error();
  close(v11);
  return v21;
}

intptr_t __ktrace_postprocess_file_internal_block_invoke(uint64_t a1)
{
  if (*(void *)(a1 + 40)) {
    **(void **)(a1 + 40) = ktrace_get_current_timestamp(*(void *)(a1 + 48));
  }
  __int16 v2 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v2);
}

uint64_t ktrace_postprocess_file(uint64_t a1)
{
  return ktrace_postprocess_file_internal(0, a1, 0, 2, 0);
}

void ktrace_client_destroy()
{
}

void ktrace_client_start_tracing()
{
}

void ktrace_client_stop_tracing()
{
}

void ktrace_client_get_subfile()
{
}

void ktrace_client_get_live_kernel_map()
{
}

void ktrace_client_copy_dscsym()
{
}

void ktrace_client_get_mounts()
{
}

void ktrace_client_get_dscsym()
{
}

void ktrace_client_get_file_info()
{
}

uint64_t ktrace_client_open_bridge()
{
  *__error() = 45;
  return 0;
}

uint64_t deserializeSignpostSpecs(uint64_t a1)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithContentsOfFile:a1];
  if (!v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfFile:a1];
    if (v3)
    {
      v8[0] = v3;
      uint64_t v4 = v8;
    }
    else
    {
      uint64_t v5 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:a1];
      if (!v5) {
        return 0;
      }
      uint64_t v2 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v5 options:0 error:0];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        return v2;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return 0;
      }
      uint64_t v7 = v2;
      uint64_t v4 = &v7;
    }
    return [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1];
  }
  return v2;
}

uint64_t signpostSpecPathsForURL(void *a1)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return MEMORY[0x1E4F1CBF0];
  }
  char v21 = 0;
  uint64_t v2 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v3 = [a1 path];
  if (![v2 fileExistsAtPath:v3 isDirectory:&v21]) {
    return MEMORY[0x1E4F1CBF0];
  }
  if (!v21)
  {
    v23[0] = v3;
    return [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:1];
  }
  uint64_t v20 = 0;
  uint64_t v4 = (void *)[v2 contentsOfDirectoryAtURL:a1 includingPropertiesForKeys:0 options:0 error:&v20];
  if (!v4 || v20 != 0) {
    return MEMORY[0x1E4F1CBF0];
  }
  unsigned int v6 = v4;
  if (![v4 count]) {
    return MEMORY[0x1E4F1CBF0];
  }
  uint64_t v7 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v8 = [v6 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v13 = (void *)[v12 pathExtension];
        if (([v13 isEqualToString:@"plist"] & 1) != 0
          || [v13 isEqualToString:@"json"])
        {
          uint64_t v14 = (void *)[MEMORY[0x1E4F1CB10] URLByResolvingAliasFileAtURL:v12 options:768 error:0];
          if (v14) {
            objc_msgSend(v7, "addObject:", objc_msgSend(v14, "path"));
          }
        }
      }
      uint64_t v9 = [v6 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v9);
  }
  return (uint64_t)v7;
}

void *ktariadne_append_live_signpost_specs(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v3 = (void *)signpostSpecPathsForURL((void *)[MEMORY[0x1E4F1CB10] fileURLWithPath:@"/AppleInternal/Library/Ariadne/Plists/"]);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v9 = deserializeSignpostSpecs(v8);
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v8, (void)v13);
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F28F98], "dataWithPropertyList:format:options:error:", v2, 200, 0, 0, (void)v13);
  if (v10) {
    return ktrace_file_append_chunk(a1, 20986, 0, 0, (UInt8 *)[v10 bytes], objc_msgSend(v10, "length"));
  }
  uint64_t v12 = __error();
  uint64_t result = 0;
  *uint64_t v12 = 79;
  return result;
}

void *ktariadne_append_live_device_tree(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1B3EBF6E0]();
  uint64_t RootEntry = IORegistryGetRootEntry(0);
  io_object_t v4 = RootEntry;
  uint64_t v5 = serializeServiceRecursively(RootEntry);
  if (v5)
  {
    uint64_t v6 = v5;
    IOObjectRelease(v4);
    uint64_t v7 = (void *)[MEMORY[0x1E4F28F98] dataWithPropertyList:v6 format:200 options:0 error:0];
    uint64_t appended = ktrace_file_append_chunk(a1, 20991, 0, 0, (UInt8 *)[v7 bytes], objc_msgSend(v7, "length"));
  }
  else
  {
    uint64_t appended = 0;
  }
  return appended;
}

void *serializeServiceRecursively(uint64_t a1)
{
  io_registry_entry_t v1 = a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  io_iterator_t iterator = 0;
  if (MEMORY[0x1B3EBE930](a1, "IODeviceTree", &iterator)) {
    return 0;
  }
  uint64_t v3 = IOIteratorNext(iterator);
  memset(v13, 0, 128);
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  uint64_t entryID = 0;
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  if (!IORegistryEntryGetNameInPlane(v1, "IODeviceTree", v13)) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSString, "stringWithUTF8String:", v13), @"IORegistryEntryName");
  }
  if (!IORegistryEntryGetLocationInPlane(v1, "IODeviceTree", v12)) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSString, "stringWithUTF8String:", v12), @"IORegistryEntryLocation");
  }
  if (!IORegistryEntryGetRegistryEntryID(v1, &entryID)) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", entryID), @"IORegistryEntryID");
  }
  if (!_IOObjectGetClass()) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSString, "stringWithUTF8String:", v11), @"IOObjectClass");
  }
  CFMutableDictionaryRef properties = 0;
  IORegistryEntryCreateCFProperties(v1, &properties, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (properties)
  {
    [v2 setObject:properties forKeyedSubscript:@"IORegistryEntryProperties"];
    CFRelease(properties);
  }
  if (v3)
  {
    io_object_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
    do
    {
      uint64_t v5 = (void *)MEMORY[0x1B3EBF6E0]();
      [v4 addObject:serializeServiceRecursively(v3)];
      uint64_t v6 = IOIteratorNext(iterator);
      IOObjectRelease(v3);
      uint64_t v3 = v6;
    }
    while (v6);
    [v2 setObject:v4 forKeyedSubscript:@"IORegistryEntryChildren"];
  }
  IOObjectRelease(iterator);
  return v2;
}

uint64_t ktariadne_read_times(uint64_t a1, void *a2, void *a3, void *a4, _DWORD *a5, _DWORD *a6)
{
  if (*(_DWORD *)(*(void *)a1 + 20) != 5 || ktrace_chunk_tag(a1) != 20482) {
    return 0;
  }
  CFDictionaryRef v12 = (const __CFDictionary *)ktrace_chunk_copy_plist(a1);
  if (v12)
  {
    CFDictionaryRef v13 = v12;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v12, @"MachAbsoluteTime");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt64Type, a2);
      if (!a3) {
        goto LABEL_14;
      }
    }
    else
    {
      *a6 = 45;
      if (!a3) {
        goto LABEL_14;
      }
    }
    CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v13, @"ContinuousTimeOffset");
    if (!v19)
    {
      *a6 = 45;
      if (a4)
      {
LABEL_15:
        CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v13, @"SecondsSinceEpoch");
        if (v20)
        {
          double valuePtr = 0.0;
          CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
          double v23 = 0.0;
          long double v21 = modf(valuePtr, &v23);
          *a4 = (uint64_t)v23;
          a4[1] = (uint64_t)(v21 * 1000000000.0);
        }
        else
        {
          *a6 = 45;
        }
      }
LABEL_20:
      if (a5)
      {
        CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v13, @"SecondsFromGMT");
        if (v22)
        {
          double valuePtr = 0.0;
          CFNumberGetValue(v22, kCFNumberDoubleType, &valuePtr);
          *a5 = (int)(valuePtr / -60.0);
        }
        else
        {
          *a6 = 45;
        }
      }
      CFRelease(v13);
      return 1;
    }
    CFNumberGetValue(v19, kCFNumberSInt64Type, a3);
LABEL_14:
    if (a4) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  int v16 = *__error();
  ktrace_log_init();
  long long v17 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktariadne_read_times_cold_1(v16, v17);
  }
  uint64_t v18 = __error();
  uint64_t result = 0;
  *uint64_t v18 = v16;
  return result;
}

uint64_t __kttimesync_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 32787)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) == 1)
    {
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      int v4 = ktrace_chunk_copy_data(a2, 0, &v11, 0x30uLL);
      if (v4)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
      }
      else
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        uint64_t v8 = *(void *)(a1 + 64);
        *(_OWORD *)uint64_t v8 = v11;
        *(_OWORD *)(v8 + 16) = v12;
        *(void *)(v8 + 32) = v13;
        *(void *)(v8 + 40) = *(void *)((char *)&v13 + 4);
        *(unsigned char *)(v8 + 48) = *(unsigned char *)(v8 + 48) & 0xF0 | (8 * (BYTE12(v13) & 1)) | 7;
      }
    }
    return 1;
  }
  if (ktrace_chunk_tag((uint64_t)a2) == 32774)
  {
    uint64_t v5 = (void **)ktrace_config_create(a2);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = ktrace_config_kdebug_using_mach_continuous_time((uint64_t)v5);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v7 = 1;
    *(unsigned char *)(v6 + 24) = 1;
    ktrace_config_destroy(v5);
  }
  else
  {
    if (!ktariadne_read_times((uint64_t)a2, *(void **)(a1 + 64), (void *)(*(void *)(a1 + 64) + 8), (void *)(*(void *)(a1 + 64) + 24), (_DWORD *)(*(void *)(a1 + 64) + 40), (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)))return 1; {
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    }
    {
      return 0;
    }
    else
    {
      *(unsigned char *)(*(void *)(a1 + 64) + 48) |= 2u;
      *(unsigned char *)(*(void *)(a1 + 64) + 48) |= 1u;
      *(unsigned char *)(*(void *)(a1 + 64) + 48) |= 4u;
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v7 = 1;
      *(unsigned char *)(v10 + 24) = 1;
    }
  }
  return v7;
}

BOOL __kttimesync_init_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 36874)
  {
    CFDictionaryRef v5 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
    if (v5)
    {
      CFDictionaryRef v6 = v5;
      uint64_t v12 = 0;
      if (dict_uint64(v5, @"mach_abs_time", &v12))
      {
        int v7 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          __kttimesync_init_block_invoke_2_cold_2();
        }
        *__error() = v7;
      }
      else
      {
        **(void **)(a1 + 32) = v12;
        uint64_t v11 = 0;
        if (!dict_uint64(v6, @"mach_cont_time", &v11))
        {
          uint64_t v9 = *(void *)(a1 + 32);
          *(void *)(v9 + 8) = v11 - *(void *)v9;
          *(unsigned char *)(v9 + 48) |= 1u;
        }
      }
      CFRelease(v6);
    }
    else
    {
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        __kttimesync_init_block_invoke_2_cold_1();
      }
      *__error() = v8;
    }
  }
  return v4 != 36874;
}

uint64_t kttimesync_update_kdebug(uint64_t result, int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  if (a2 == 25165824)
  {
    unint64_t v6 = a4 | ((unint64_t)a6 << 32);
    unint64_t v7 = v6 - *(void *)(result + 8);
    *(void *)(result + 8) = v6;
    uint64_t v8 = *(unsigned int *)(result + 16);
    unint64_t v9 = *(unsigned int *)(result + 20);
    if (v8 != v9) {
      unint64_t v7 = v7 * v8 / v9;
    }
    unint64_t v10 = *(void *)(result + 24) + v7 / 0x3B9ACA00;
    unint64_t v11 = *(void *)(result + 32) + v7 % 0x3B9ACA00;
    *(void *)(result + 24) = v10;
    *(void *)(result + 32) = v11;
  }
  return result;
}

unint64_t machtime_to_timespec(unsigned int *a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = a1[1];
    if (v2 != v3) {
      a2 = v2 * a2 / v3;
    }
    return a2 / 0x3B9ACA00;
  }
  else
  {
    _os_assert_log();
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t kttimesync_update_kdebug_prepass(uint64_t result, int a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  if (a2 == 25165824)
  {
    unint64_t v5 = a3 | ((unint64_t)a5 << 32);
    *(void *)(result + 8) -= v5;
    uint64_t v6 = *(unsigned int *)(result + 16);
    unint64_t v7 = *(unsigned int *)(result + 20);
    if (v6 != v7) {
      unint64_t v5 = v5 * v6 / v7;
    }
    unint64_t v8 = *(void *)(result + 32) + 1000000000 * (v5 / 0x3B9ACA00) - v5;
    *(void *)(result + 24) -= v5 / 0x3B9ACA00;
    *(void *)(result + 32) = v8;
  }
  return result;
}

double kttimesync_frequency(uint64_t a1, double a2, double a3)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 16);
  LODWORD(a3) = *(_DWORD *)(a1 + 20);
  return (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3;
}

unint64_t kttimesync_ns_from_mach(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  unint64_t v3 = *(unsigned int *)(a1 + 20);
  if (v2 != v3) {
    return v2 * a2 / v3;
  }
  return a2;
}

uint64_t kttimesync_cont_from_abs(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) + a2;
}

unint64_t kttimesync_abs_from_cont(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t kttimesync_ns_from_timestamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  unint64_t v3 = *(unsigned int *)(a1 + 20);
  if (v2 != v3) {
    return v2 * a2 / v3;
  }
  return a2;
}

unint64_t kttimesync_timestamp_from_ns(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 20);
  if (v2 != v3) {
    return v3 * a2 / v2;
  }
  return a2;
}

unint64_t kttimesync_abs_from_timestamp(uint64_t a1, unint64_t a2)
{
  if ((*(unsigned char *)(a1 + 48) & 8) == 0) {
    return a2;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t kttimesync_cont_from_timestamp(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 48) & 8) == 0) {
    a2 += *(void *)(a1 + 8);
  }
  return a2;
}

unint64_t kttimesync_wall_from_timestamp(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  unint64_t v3 = *(unsigned int *)(a1 + 20);
  unint64_t v4 = *(void *)a1 - a2;
  if (*(void *)a1 <= a2)
  {
    unint64_t v6 = a2 - *(void *)a1;
    if (v2 != v3) {
      unint64_t v6 = v6 * v2 / v3;
    }
    if (*(void *)(a1 + 32) + v6 % 0x3B9ACA00 <= 0x3B9AC9FF) {
      return *(void *)(a1 + 24) + v6 / 0x3B9ACA00;
    }
    else {
      return *(void *)(a1 + 24) + v6 / 0x3B9ACA00 + 1;
    }
  }
  else
  {
    if (v2 != v3) {
      unint64_t v4 = v4 * v2 / v3;
    }
    return *(void *)(a1 + 24)
         - v4 / 0x3B9ACA00
         + ((uint64_t)(*(void *)(a1 + 32) + 1000000000 * (v4 / 0x3B9ACA00) - v4) >> 63);
  }
}

uint64_t timespec_subtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 - a3 + ((a2 - a4) >> 63);
}

uint64_t timespec_add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a4 + a2) <= 0x3B9AC9FF) {
    return a3 + a1;
  }
  else {
    return a3 + a1 + 1;
  }
}

uint64_t kttimesync_can_convert_continuous(uint64_t a1)
{
  return *(unsigned char *)(a1 + 48) & 1;
}

double ktrace_remotetime_update_params(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(void *)(a1 + 536) = *(void *)(a2 + 8);
  *(void *)(a1 + 544) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 528) = result;
  return result;
}

uint64_t ktrace_get_remotetime_for_localtime(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v7 = 0;
  ktrace_convert_timestamp_to_nanoseconds(a1, a2, &v7);
  uint64_t result = 0;
  double v4 = *(double *)(a1 + 528);
  if (v4 != 0.0)
  {
    double v5 = v4 * (double)(uint64_t)(v7 - *(void *)(a1 + 536));
    uint64_t v6 = *(void *)(a1 + 544);
    if (__OFADD__(v6, (uint64_t)v5)) {
      return 0;
    }
    else {
      return v6 + (uint64_t)v5;
    }
  }
  return result;
}

uint64_t ktrace_set_remotetime_conversion_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  *(_DWORD *)(result + 288) = a2;
  return result;
}

uint64_t ktrace_get_remotetime_conversion_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 288);
}

uint64_t timeval_subtract(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return a1 - a3 + ((a2 - a4) >> 31);
}

uint64_t timeval_add(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if ((a4 + a2) <= 0xF423F) {
    return a3 + a1;
  }
  else {
    return a3 + a1 + 1;
  }
}

unint64_t machtime_to_timeval(unsigned int *a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = a1[1];
    if (v2 != v3) {
      a2 = v2 * a2 / v3;
    }
    return a2 / 0x3B9ACA00;
  }
  else
  {
    _os_assert_log();
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void _session_process_events(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 4)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 232));
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v53 = *(unsigned int *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v51 = *(void *)(a1 + 8);
  uint64_t i = tracepoint_timestamp(a2, a4);
  if (!*(void *)(a1 + 488)) {
    *(void *)(a1 + 488) = i;
  }
  uint64_t v12 = 32;
  if (a4) {
    uint64_t v12 = 64;
  }
  uint64_t v57 = v12;
  char v13 = 5;
  if (a4) {
    char v13 = 6;
  }
  unint64_t v50 = a3 >> v13;
  if (a3 >> v13)
  {
    uint64_t v14 = 0;
    long long v15 = 0;
    uint64_t v49 = a1 + 432;
    uint64_t v54 = (void **)(a1 + 248);
    uint64_t v52 = v10 + 24;
    int v55 = a4;
    do
    {
      if (v15) {
      long long v15 = (void *)MEMORY[0x1B3EBF6E0](i);
      }
      unsigned __int8 v16 = atomic_load((unsigned __int8 *)(a1 + 157));
      if (v16) {
        break;
      }
      if (a4) {
        uint64_t v17 = 48;
      }
      else {
        uint64_t v17 = 28;
      }
      unint64_t v18 = *(unsigned int *)(a2 + v17);
      uint64_t i = tracepoint_timestamp(a2, a4);
      *(void *)(a1 + 496) = i;
      int v58 = 1 << (BYTE2(v18) & 7);
      if ((v58 & *(unsigned char *)(v51 + (v18 >> 19))) != 0)
      {
        unint64_t v19 = i;
        uint64_t v56 = v15;
        int v20 = v18 & 0xFFFFFFFC;
        if ((v18 & 0xFFFFFFFC) == 0x7020008)
        {
          clear_events(*(void *)(a1 + 240), v54);
          *(void *)(a1 + 488) = v19;
          if (*(_DWORD *)(a1 + 272)) {
            thread_cputime_map_dropped_events(a1, *(void *)(a1 + 408));
          }
          uint64_t v21 = *(void *)(a1 + 64);
          if (v21) {
            (*(void (**)(void))(v21 + 16))();
          }
        }
        else if (v18 == 25165824)
        {
          if (a4)
          {
            uint64_t v22 = *(void *)(a2 + 8);
            uint64_t v23 = *(void *)(a2 + 16);
            uint64_t v24 = *(void *)(a2 + 24);
            uint64_t v25 = *(void *)(a2 + 32);
          }
          else
          {
            uint64_t v22 = *(unsigned int *)(a2 + 8);
            LODWORD(v23) = *(_DWORD *)(a2 + 12);
            uint64_t v24 = *(unsigned int *)(a2 + 16);
            LODWORD(v25) = *(_DWORD *)(a2 + 20);
          }
          kttimesync_update_kdebug(v49, *(_DWORD *)(a2 + v17), v22, v23, v24, v25);
        }
        if (*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280) || *(_DWORD *)(a1 + 276)) {
          kthmap_update(*(void *)(a1 + 296), a2, a4);
        }
        uint64_t v26 = *(void *)(a1 + 304);
        if (v26 && (BYTE3(v18) == 31 || v20 == 67174404 || v20 == 117571592 || v20 == 117440520)) {
          ktrace_uuid_map_update(v26, a1, (uint64_t *)a2, a4);
        }
        if (v20 == 117440524)
        {
          uint64_t v27 = *(void *)(a1 + 88);
          if (v27)
          {
            if (v55) {
              unsigned __int8 v28 = *(const void **)(a2 + 8);
            }
            else {
              unsigned __int8 v28 = (const void *)*(unsigned int *)(a2 + 8);
            }
            uint64_t v29 = kthmap_process_name_for_tid(*(void *)(a1 + 296), v28);
            (*(void (**)(uint64_t, const void *, uint64_t))(v27 + 16))(v27, v28, v29);
          }
        }
        a4 = v55;
        if (*(_DWORD *)(a1 + 268) && (v18 & 0xFFFFFFF8 | 4) == 0x3010094) {
          vnode_path_map_update(*(CFDictionaryRef **)(a1 + 400), v18, a2, v55);
        }
        if (*(_DWORD *)(a1 + 272)
          && ((v20 - 20971520) <= 0x24 && ((1 << v20) & 0x1000000101) != 0 || v20 == 117440524))
        {
          thread_cputime_map_update(a1, *(void *)(a1 + 408), v18, a2, v55);
        }
        _session_handle_stackshot(a1, v19);
        if (*(_DWORD *)(a1 + 288) && v18 == 25165840) {
          ktrace_remotetime_update_params(a1, a2);
        }
        ++*(void *)(a1 + 160);
        long long v15 = v56;
        if (*(void *)(a1 + 520) <= v19)
        {
          memset(v61, 0, 96);
          if ((int)v8 >= 1)
          {
            uint64_t v30 = 0;
            char v31 = 0;
            do
            {
              int v32 = *(_DWORD *)(v9 + 32 * v30);
              if (v32 == 1)
              {
                if ((v58 & *(unsigned char *)(*(void *)(v9 + 32 * v30 + 8) + (v18 >> 19))) == 0) {
                  goto LABEL_101;
                }
              }
              else if (!v32)
              {
                uint64_t v33 = v9 + 32 * v30;
                unsigned int v35 = *(_DWORD *)(v33 + 8);
                uint64_t v34 = v33 + 8;
                if (v18 < v35 || v18 >= *(_DWORD *)(v34 + 4)) {
                  goto LABEL_101;
                }
              }
              int v36 = *(_DWORD *)(v9 + 32 * v30 + 16);
              if (v36 == 2)
              {
                *(void *)&v59[0] = 0;
                if (!*(void *)(a1 + 416))
                {
                  uint64_t v39 = kpdecode_cursor_create();
                  *(void *)(a1 + 416) = v39;
                  if (!v39) {
                    ktrace_postprocess_file_internal_cold_1();
                  }
                  long long v40 = (char *)malloc_type_valloc(0x1000uLL, 0xF48082EBuLL);
                  if (!v40) {
                    ktrace_postprocess_file_internal_cold_1();
                  }
                  uint64_t v43 = v40;
                  uint64_t v44 = *(void *)(a1 + 608);
                  if (v44) {
                    int is_64_bit = ktrace_file_is_64_bit(v44);
                  }
                  else {
                    int is_64_bit = 1;
                  }
                  double v48 = kttimesync_frequency(v49, v41, v42);
                  *(_DWORD *)uint64_t v43 = 1437204992;
                  *(void *)(v43 + 12) = 0;
                  *(void *)(v43 + 4) = 0;
                  *((_DWORD *)v43 + 5) = is_64_bit;
                  *((void *)v43 + 3) = (unint64_t)((double)(unint64_t)v48 * 1000000000.0);
                  *((_OWORD *)v43 + 2) = 0u;
                  *((_OWORD *)v43 + 3) = 0u;
                  *((_OWORD *)v43 + 4) = 0u;
                  *((_OWORD *)v43 + 5) = 0u;
                  *((_OWORD *)v43 + 6) = 0u;
                  *((_OWORD *)v43 + 7) = 0u;
                  *((_OWORD *)v43 + 8) = 0u;
                  *((_OWORD *)v43 + 9) = 0u;
                  *((_OWORD *)v43 + 10) = 0u;
                  *((_OWORD *)v43 + 11) = 0u;
                  *((_OWORD *)v43 + 12) = 0u;
                  *((_OWORD *)v43 + 13) = 0u;
                  *((_OWORD *)v43 + 14) = 0u;
                  *((_OWORD *)v43 + 15) = 0u;
                  *((_OWORD *)v43 + 16) = 0u;
                  *((_OWORD *)v43 + 17) = 0u;
                  if (kpdecode_cursor_setchunk()) {
                    ktrace_postprocess_file_internal_cold_1();
                  }
                  while (!kpdecode_cursor_next_record())
                    kpdecode_record_free();
                  free(v43);
                  a4 = v55;
                  if (*(unsigned char *)(a1 + 16)) {
                    kpdecode_cursor_set_option();
                  }
                }
                kpdecode_cursor_clearchunk();
                if (kpdecode_cursor_setchunk()) {
                  ktrace_postprocess_file_internal_cold_1();
                }
                *(void *)&v59[0] = 0;
                for (uint64_t i = kpdecode_cursor_next_record(); !i; uint64_t i = kpdecode_cursor_next_record())
                  (*(void (**)(void))(*(void *)(v9 + 32 * v30 + 24) + 16))();
                goto LABEL_101;
              }
              if (v36 == 1)
              {
                if (v18)
                {
                  insert_start_event(*(void *)(a1 + 240), v54, a2);
                  goto LABEL_101;
                }
                if ((v18 & 2) == 0) {
                  goto LABEL_101;
                }
                memset(v60, 0, sizeof(v60));
                memset(v59, 0, sizeof(v59));
                uint64_t i = match_end_event(*(void *)(a1 + 240), (long long **)v54, a2, v60);
                if (!i) {
                  goto LABEL_101;
                }
                uint64_t i = process_tracepoint(a1, (uint64_t)v60, (uint64_t)v59, a4);
                if (!i) {
                  goto LABEL_101;
                }
                if ((v31 & 1) == 0) {
                  process_tracepoint(a1, a2, (uint64_t)v61, a4);
                }
                uint64_t v46 = v52;
                uint64_t v47 = v53;
                if ((int)v53 >= 1)
                {
                  do
                  {
                    if (*(_DWORD *)(v46 - 8) == 1) {
                      (*(void (**)(void))(*(void *)v46 + 16))();
                    }
                    v46 += 32;
                    --v47;
                  }
                  while (v47);
                }
              }
              else
              {
                if (v36) {
                  _session_process_events_cold_1();
                }
                if ((v31 & 1) == 0)
                {
                  uint64_t i = process_tracepoint(a1, a2, (uint64_t)v61, a4);
                  if (!i)
                  {
                    char v31 = 0;
                    goto LABEL_101;
                  }
                }
                uint64_t v37 = v52;
                uint64_t v38 = v53;
                if ((int)v53 >= 1)
                {
                  do
                  {
                    if (!*(_DWORD *)(v37 - 8)) {
                      (*(void (**)(void))(*(void *)v37 + 16))();
                    }
                    v37 += 32;
                    --v38;
                  }
                  while (v38);
                }
              }
              uint64_t i = (*(uint64_t (**)(void))(*(void *)(v9 + 32 * v30 + 24) + 16))();
              char v31 = 1;
LABEL_101:
              ++v30;
            }
            while (v30 != v8);
          }
          long long v15 = v56;
        }
      }
      ++v14;
      a2 += v57;
    }
    while (v14 != v50);
    if (v15) {
  }
    }
}

uint64_t process_tracepoint(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 232));
  uint64_t v8 = *(void *)a2;
  if (a4)
  {
    *(void *)a3 = v8;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 48);
    *(void *)(a3 + 8) = *(void *)(a2 + 8);
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    *(void *)(a3 + 24) = *(void *)(a2 + 24);
    *(void *)(a3 + 32) = *(void *)(a2 + 32);
    *(void *)(a3 + 40) = *(void *)(a2 + 40);
    int v9 = *(_DWORD *)(a2 + 52);
  }
  else
  {
    v8 &= 0xFFFFFFFFFFFFFFuLL;
    *(void *)a3 = v8;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 28);
    *(void *)(a3 + 8) = *(unsigned int *)(a2 + 8);
    *(void *)(a3 + 16) = *(unsigned int *)(a2 + 12);
    *(void *)(a3 + 24) = *(unsigned int *)(a2 + 16);
    *(void *)(a3 + 32) = *(unsigned int *)(a2 + 20);
    *(void *)(a3 + 40) = *(unsigned int *)(a2 + 24);
    int v9 = *(unsigned __int8 *)(a2 + 7);
  }
  *(_DWORD *)(a3 + 52) = v9;
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0)
  {
    uint64_t v8 = kttimesync_cont_from_timestamp(a1 + 432, v8);
    *(void *)a3 = v8;
  }
  if (*(_DWORD *)(a1 + 264))
  {
    _session_convert_walltime(a1, v8);
    *(void *)(a3 + 64) = v11;
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)(a3 + 64) = 0;
  }
  *(void *)(a3 + 56) = v10;
  if (*(_DWORD *)(a1 + 260) != 1 && !*(_DWORD *)(a1 + 560) && !*(_DWORD *)(a1 + 576))
  {
    *(_DWORD *)(a3 + 88) = -1;
    *(void *)(a3 + 80) = 0;
    goto LABEL_41;
  }
  *(void *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 88) = kthmap_pid_name_for_tid(*(void *)(a1 + 296), *(const void **)(a3 + 40), (void *)(a3 + 80));
  uint64_t v12 = *(const void **)(a3 + 80);
  if (*(_DWORD *)(a1 + 260) == 2) {
    *(void *)(a3 + 80) = 0;
  }
  if (!*(unsigned char *)(a1 + 580)
    || !CFSetContainsValue(*(CFSetRef *)(a1 + 584), (const void *)(*(_DWORD *)(a3 + 48) & 0xFFFFFFFC)))
  {
    if (!*(_DWORD *)(a1 + 268)
      || *(_DWORD *)(a3 + 48) >> 2 != 12599332
      || (int v13 = *(_DWORD *)(a3 + 88), v13 != getpid()))
    {
      if (*(_DWORD *)(a1 + 560) == 1)
      {
        uint64_t v14 = (const void *)*(int *)(a3 + 88);
        if (v14 != -1)
        {
          if (CFSetContainsValue(*(CFSetRef *)(a1 + 552), v14)) {
            return 0;
          }
        }
      }
      if (*(_DWORD *)(a1 + 576) == 1 && v12 && CFSetContainsValue(*(CFSetRef *)(a1 + 568), v12)) {
        return 0;
      }
      if (*(_DWORD *)(a1 + 560) == 2 || *(_DWORD *)(a1 + 576) == 2)
      {
        long long v15 = (const void *)*(int *)(a3 + 88);
        if (v15 == -1)
        {
          BOOL v16 = 1;
          if (v12) {
            goto LABEL_29;
          }
        }
        else
        {
          BOOL v16 = CFSetContainsValue(*(CFSetRef *)(a1 + 552), v15) == 0;
          if (v12)
          {
LABEL_29:
            BOOL v17 = CFSetContainsValue(*(CFSetRef *)(a1 + 568), v12) == 0;
LABEL_33:
            int v18 = *(_DWORD *)(a1 + 560) != 2 || v16;
            if (v18 == 1)
            {
              if (*(_DWORD *)(a1 + 576) != 2) {
                BOOL v17 = 1;
              }
              if (v17) {
                return 0;
              }
            }
            goto LABEL_41;
          }
        }
        BOOL v17 = 1;
        goto LABEL_33;
      }
    }
  }
LABEL_41:
  if (*(_DWORD *)(a1 + 256) == 1) {
    int v20 = ktrace_name_for_eventid(a1, (void *)(*(_DWORD *)(a3 + 48) & 0xFFFFFFFC));
  }
  else {
    int v20 = 0;
  }
  *(void *)(a3 + 72) = v20;
  return 1;
}

BOOL int_equal_callback(int a1, int a2)
{
  return a1 == a2;
}

uint64_t int_hash_callback(uint64_t result)
{
  return result;
}

BOOL str_equal_callback(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t str_hash_callback(const char *a1)
{
  size_t v2 = strlen(a1);

  return MEMORY[0x1F40D7BA8](a1, v2);
}

BOOL proc_name_equal_callback(const char *a1, const char *a2)
{
  return strncmp(a1, a2, 0x10uLL) == 0;
}

uint64_t proc_name_hash_callback(const char *a1)
{
  int64_t v2 = strlen(a1);
  if (v2 >= 16) {
    uint64_t v3 = 16;
  }
  else {
    uint64_t v3 = v2;
  }

  return MEMORY[0x1F40D7BA8](a1, v3);
}

void free_callback(int a1, void *a2)
{
}

BOOL ptr_equal_callback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL long_equal_callback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef str_desc_copy_callback(char *cStr)
{
  return CFStringCreateWithCStringNoCopy(0, cStr, 0x600u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
}

uint64_t sysctlbyname_string(__CFDictionary *a1, const void *a2, char *a3, char **a4, size_t count)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  size_t v19 = count;
  if (!a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (count)
  {
LABEL_11:
    uint64_t v11 = (char *)malloc_type_calloc(count, 1uLL, 0x2C308B52uLL);
    if (!v11) {
      ktrace_postprocess_file_internal_cold_1();
    }
    uint64_t v12 = v11;
    size_t v18 = v19;
    if (sysctlbyname(a3, v11, &v18, 0, 0) < 0)
    {
      int v15 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        sysctlbyname_string_cold_3();
      }
    }
    else if (v18 >= v19)
    {
      int v15 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        sysctlbyname_string_cold_7();
      }
    }
    else
    {
      v12[v18] = 0;
      if (!a1)
      {
LABEL_18:
        uint64_t result = 0;
        *a4 = v12;
        return result;
      }
      if (!a2) {
        ktrace_postprocess_file_internal_cold_1();
      }
      CFStringRef v13 = CFStringCreateWithCString(0, v12, 0x600u);
      if (v13)
      {
        CFStringRef v14 = v13;
        CFDictionarySetValue(a1, a2, v13);
        CFRelease(v14);
        goto LABEL_18;
      }
      int v15 = *__error();
      ktrace_log_init();
      BOOL v17 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v21 = a3;
        __int16 v22 = 2080;
        uint64_t v23 = v12;
        __int16 v24 = 1024;
        int v25 = v15;
        _os_log_error_impl(&dword_1B39A5000, v17, OS_LOG_TYPE_ERROR, "could not create string from sysctlbyname(%s) result '%s' (%{errno}d)", buf, 0x1Cu);
      }
    }
    *__error() = v15;
    unsigned int v16 = *__error();
    free(v12);
    if (v16) {
      return v16;
    }
    else {
      return 22;
    }
  }
  if ((sysctlbyname(a3, 0, &v19, 0, 0) & 0x80000000) == 0 || v19)
  {
    count = ++v19;
    goto LABEL_11;
  }
  int v9 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    sysctlbyname_string_cold_3();
  }
  *__error() = v9;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22;
  }
}

uint64_t sysctlbyname_uint64(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 8uLL, kCFNumberSInt64Type);
}

uint64_t sysctlbyname_number_internal(__CFDictionary *a1, const void *a2, const char *a3, void *a4, size_t a5, CFNumberType a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  MEMORY[0x1F4188790](a1);
  CFStringRef v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v13, v12);
  size_t v24 = a5;
  int v14 = sysctlbyname(a3, v13, &v24, 0, 0);
  if (v14 < 0)
  {
    int v18 = v14;
    int v19 = *__error();
    ktrace_log_init();
    int v20 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      uint64_t v26 = a3;
      __int16 v27 = 1024;
      *(_DWORD *)unsigned __int8 v28 = v18;
      *(_WORD *)&v28[4] = 1024;
      *(_DWORD *)&v28[6] = v19;
      _os_log_error_impl(&dword_1B39A5000, v20, OS_LOG_TYPE_ERROR, "sysctlbyname(%s) returned %d (%{errno}d)", buf, 0x18u);
    }
    *__error() = v19;
    return *__error();
  }
  else
  {
    if (v24 <= a5)
    {
      if (a1)
      {
        if (!a2) {
          ktrace_postprocess_file_internal_cold_1();
        }
        CFNumberRef v21 = CFNumberCreate(0, a6, v13);
        if (!v21) {
          return 12;
        }
        CFNumberRef v22 = v21;
        CFDictionarySetValue(a1, a2, v21);
        CFRelease(v22);
      }
      memcpy(a4, v13, a5);
      return 0;
    }
    int v15 = *__error();
    ktrace_log_init();
    unsigned int v16 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      uint64_t v26 = a3;
      __int16 v27 = 2048;
      *(void *)unsigned __int8 v28 = v24;
      *(_WORD *)&v28[8] = 1024;
      int v29 = v15;
      _os_log_error_impl(&dword_1B39A5000, v16, OS_LOG_TYPE_ERROR, "sysctlbyname(%s) needs too much space %zu (%{errno}d)", buf, 0x1Cu);
    }
    *__error() = v15;
    return 22;
  }
}

uint64_t sysctlbyname_uint32(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberSInt32Type);
}

uint64_t sysctlbyname_uint(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberIntType);
}

uint64_t sysctlbyname_int(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberIntType);
}

uint64_t sysctl_string(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5)
{
  size_t v15 = 0;
  if (!a5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (sysctl(a3, a4, 0, &v15, 0, 0) < 0 && (*__error() == 2 || *__error() == 1)) {
    return *__error();
  }
  uint64_t v10 = malloc_type_malloc(++v15, 0x276C1F5CuLL);
  if (v10)
  {
    uint64_t v11 = v10;
    if (sysctl(a3, a4, v10, &v15, 0, 0) < 0)
    {
      free(v11);
      return *__error();
    }
    *((unsigned char *)v11 + v15) = 0;
    CFStringRef v12 = CFStringCreateWithCString(0, (const char *)v11, 0x600u);
    if (v12)
    {
      CFStringRef v13 = v12;
      CFDictionarySetValue(a1, a2, v12);
      CFRelease(v13);
      uint64_t result = 0;
      *a5 = v11;
      return result;
    }
    free(v11);
  }
  return 12;
}

uint64_t sysctl_uint(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5)
{
  return sysctl_number_internal(a1, a2, a3, a4, a5, 4uLL, kCFNumberIntType);
}

uint64_t sysctl_number_internal(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5, size_t a6, CFNumberType a7)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  MEMORY[0x1F4188790](a1);
  size_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v15, v14);
  v21[0] = a6;
  if (sysctl(a3, a4, v15, v21, 0, 0) < 0)
  {
    int v18 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      sysctl_number_internal_cold_5();
    }
    *__error() = v18;
    return *__error();
  }
  else if (v21[0] <= a6)
  {
    CFNumberRef v19 = CFNumberCreate(0, a7, v15);
    if (v19)
    {
      CFNumberRef v20 = v19;
      CFDictionarySetValue(a1, a2, v19);
      CFRelease(v20);
      memcpy(a5, v15, a6);
      return 0;
    }
    else
    {
      return 12;
    }
  }
  else
  {
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      sysctl_number_internal_cold_6();
    }
    *__error() = v16;
    return 22;
  }
}

uint64_t sysctl_uint64(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5)
{
  return sysctl_number_internal(a1, a2, a3, a4, a5, 8uLL, kCFNumberSInt64Type);
}

const void *create_dict(UInt8 *bytes, CFIndex length)
{
  CFErrorRef error = 0;
  CFDataRef v2 = CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v2) {
    return 0;
  }
  CFDataRef v3 = v2;
  CFPropertyListRef v4 = CFPropertyListCreateWithData(0, v2, 0, 0, &error);
  if (v4)
  {
    double v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 != CFDictionaryGetTypeID())
    {
      int v7 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        create_dict_cold_3();
      }
      *__error() = v7;
      CFRelease(v5);
      double v5 = 0;
    }
  }
  else
  {
    CFErrorRef v8 = error;
    int v9 = *__error();
    ktrace_log_init();
    BOOL v10 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v10) {
        create_dict_cold_2();
      }
    }
    else if (v10)
    {
      create_dict_cold_1();
    }
    double v5 = 0;
    *__error() = v9;
  }
  CFRelease(v3);
  if (error) {
    CFRelease(error);
  }
  return v5;
}

uint64_t dict_string(const __CFDictionary *a1, void *key, __CFDictionary *a3, const void *a4, char **a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!key) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, key);
  if (!Value) {
    return 22;
  }
  CFStringRef v9 = Value;
  CFTypeID v10 = CFGetTypeID(Value);
  if (v10 != CFStringGetTypeID())
  {
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_string_cold_5();
    }
    *__error() = v16;
    return 22;
  }
  if (a3)
  {
    if (!a4) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFDictionarySetValue(a3, a4, v9);
  }
  CFIndex Length = CFStringGetLength(v9);
  CFIndex v12 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFStringRef v13 = (char *)malloc_type_malloc(v12, 0x2014CD84uLL);
  if (v13)
  {
    size_t v14 = v13;
    if (CFStringGetCString(v9, v13, v12, 0x8000100u))
    {
      uint64_t result = 0;
      *a5 = v14;
      return result;
    }
    free(v14);
    return 22;
  }
  return 12;
}

uint64_t dict_uint64(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberSInt64Type);
}

uint64_t dict_number_internal(const __CFDictionary *a1, void *key, void *a3, CFNumberType a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!key) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
  if (!Value) {
    return 22;
  }
  CFNumberRef v8 = Value;
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v8, a4, a3))
    {
      int v10 = *__error();
      ktrace_log_init();
      uint64_t v11 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        int v15 = 138412802;
        CFNumberRef v16 = v8;
        __int16 v17 = 2112;
        int v18 = key;
        __int16 v19 = 1024;
        int v20 = v10;
        _os_log_error_impl(&dword_1B39A5000, v11, OS_LOG_TYPE_ERROR, "dictionary number %@ at key '%@' is not the right type (%{errno}d)", (uint8_t *)&v15, 0x1Cu);
      }
      *__error() = v10;
      return 22;
    }
    return 0;
  }
  if (v9 != CFDataGetTypeID())
  {
    int v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_number_internal_cold_5();
    }
    *__error() = v13;
    return 22;
  }
  if (CFDataGetLength(v8) == 4)
  {
    v22.location = 0;
    v22.length = 4;
    CFDataGetBytes(v8, v22, (UInt8 *)a3);
    return 0;
  }
  *__error() = 34;
  int v14 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    dict_number_internal_cold_4();
  }
  *__error() = v14;
  return 34;
}

uint64_t dict_uint32(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberSInt32Type);
}

uint64_t dict_int(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberIntType);
}

uint64_t dict_BOOL(const __CFDictionary *a1, void *key, BOOL *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!key) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1, key);
  if (Value)
  {
    CFBooleanRef v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFBooleanGetTypeID())
    {
      int v7 = CFBooleanGetValue(v5);
      uint64_t result = 0;
      *a3 = v7 != 0;
      return result;
    }
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_BOOL_cold_5();
    }
  }
  else
  {
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_BOOL_cold_4();
    }
  }
  *__error() = v9;
  return 22;
}

uint64_t dict_data(const __CFDictionary *a1, const void *a2, UInt8 **a3, CFIndex *a4)
{
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_BOOL_cold_4();
    }
    goto LABEL_11;
  }
  CFDataRef v7 = Value;
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFDataGetTypeID())
  {
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_data_cold_2();
    }
LABEL_11:
    *__error() = v14;
    return 22;
  }
  size_t Length = CFDataGetLength(v7);
  if (!Length)
  {
    *a3 = 0;
    if (a4)
    {
      uint64_t result = 0;
      *a4 = 0;
      return result;
    }
    return 0;
  }
  CFIndex v10 = Length;
  uint64_t v11 = (UInt8 *)malloc_type_malloc(Length, 0xCA18849AuLL);
  if (v11)
  {
    CFIndex v12 = v11;
    v15.location = 0;
    v15.length = v10;
    CFDataGetBytes(v7, v15, v11);
    *a3 = v12;
    if (a4)
    {
      uint64_t result = 0;
      *a4 = v10;
      return result;
    }
    return 0;
  }
  return *__error();
}

CFIndex dict_uint64_arr(const __CFDictionary *a1, void *a2, void *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberSInt64Type, 8);
}

CFIndex dict_number_arr_internal(const __CFDictionary *a1, void *key, void *a3, _DWORD *a4, CFNumberType a5, uint64_t a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!key) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, key);
  if (!Value)
  {
    int v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_BOOL_cold_4();
    }
    goto LABEL_19;
  }
  CFArrayRef v11 = Value;
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 != CFArrayGetTypeID())
  {
    int v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_number_arr_internal_cold_6();
    }
LABEL_19:
    *__error() = v20;
    return 22;
  }
  CFIndex result = CFArrayGetCount(v11);
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v26 = (char *)malloc_type_malloc(result * a6, 0x559DC39AuLL);
    if (v26)
    {
      if (v14 < 1)
      {
LABEL_14:
        CFIndex result = 0;
        *a3 = v26;
        *a4 = v14;
        return result;
      }
      CFIndex v15 = 0;
      unsigned int v16 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v11, v15);
        if (!ValueAtIndex)
        {
          int v21 = *__error();
          ktrace_log_init();
          uint64_t v22 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          *(_DWORD *)long long buf = 67109634;
          *(_DWORD *)unsigned __int8 v28 = v16;
          *(_WORD *)&v28[4] = 2112;
          *(void *)&v28[6] = v11;
          __int16 v29 = 1024;
          int v30 = v21;
          uint64_t v23 = "element %u missing from array: %@ (%{errno}d)";
          size_t v24 = v22;
LABEL_30:
          _os_log_error_impl(&dword_1B39A5000, v24, OS_LOG_TYPE_ERROR, v23, buf, 0x18u);
          goto LABEL_28;
        }
        CFNumberRef v18 = ValueAtIndex;
        CFTypeID v19 = CFGetTypeID(ValueAtIndex);
        if (v19 != CFNumberGetTypeID()) {
          break;
        }
        if (!CFNumberGetValue(v18, a5, &v26[v15 * a6]))
        {
          int v21 = *__error();
          ktrace_log_init();
          uint64_t v25 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          *(_DWORD *)long long buf = 138412802;
          *(void *)unsigned __int8 v28 = v18;
          *(_WORD *)&v28[8] = 1024;
          *(_DWORD *)&unsigned char v28[10] = v16;
          __int16 v29 = 1024;
          int v30 = v21;
          uint64_t v23 = "array number '%@' at index %u is not the right type (%{errno}d)";
          size_t v24 = v25;
          goto LABEL_30;
        }
        CFIndex v15 = ++v16;
        if (v14 <= v16) {
          goto LABEL_14;
        }
      }
      int v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        dict_number_arr_internal_cold_5();
      }
LABEL_28:
      *__error() = v21;
      free(v26);
      return 22;
    }
    return *__error();
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
  }
  return result;
}

CFIndex dict_uint32_arr(const __CFDictionary *a1, void *a2, void *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberSInt32Type, 4);
}

CFIndex dict_int_arr(const __CFDictionary *a1, void *a2, void *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberIntType, 4);
}

uint64_t dict_set_string(__CFDictionary *a1, const void *a2, char *cStr)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (cStr) {
    CFStringRef Mutable = CFStringCreateWithCString(0, cStr, 0x600u);
  }
  else {
    CFStringRef Mutable = CFStringCreateMutable(0, 1);
  }
  CFStringRef v6 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(a1, a2, Mutable);
    CFRelease(v6);
    return 0;
  }
  else
  {
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_set_string_cold_3();
    }
    *__error() = v8;
    return 12;
  }
}

uint64_t dict_set_cfstring(__CFDictionary *a1, const void *a2, CFStringRef theString, char **a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v9 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFIndex v10 = (char *)malloc_type_malloc(v9, 0xDD986364uLL);
  if (v10)
  {
    CFArrayRef v11 = v10;
    if (CFStringGetCString(theString, v10, v9, 0x8000100u))
    {
      if (a4) {
        *a4 = v11;
      }
      else {
        free(v11);
      }
      CFDictionarySetValue(a1, a2, theString);
      return 0;
    }
    else
    {
      free(v11);
      return 22;
    }
  }
  else
  {
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_set_cfstring_cold_3();
    }
    *__error() = v12;
    return 12;
  }
}

uint64_t dict_set_uint64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberSInt64Type);
}

uint64_t dict_set_number(__CFDictionary *a1, const void *a2, const void *a3, CFNumberType theType)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFNumberRef v6 = CFNumberCreate(0, theType, a3);
  if (v6)
  {
    CFNumberRef v7 = v6;
    CFDictionarySetValue(a1, a2, v6);
    CFRelease(v7);
    return 0;
  }
  else
  {
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_set_number_cold_4();
    }
    *__error() = v9;
    return 22;
  }
}

uint64_t dict_set_uint32(__CFDictionary *a1, const void *a2, int a3)
{
  int v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberSInt32Type);
}

uint64_t dict_set_int(__CFDictionary *a1, const void *a2, int a3)
{
  int v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberIntType);
}

uint64_t dict_set_BOOL(__CFDictionary *a1, const void *a2, int a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFDataRef v3 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    CFDataRef v3 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(a1, a2, *v3);
  return 0;
}

uint64_t dict_set_data(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6 = CFDataCreate(0, bytes, length);
  if (!v6) {
    return 12;
  }
  CFDataRef v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t dict_set_uint64_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 8, kCFNumberSInt64Type);
}

uint64_t dict_set_number_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex capacity, uint64_t a5, CFNumberType a6)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v9 = capacity;
  uint64_t v12 = capacity;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v14 = Mutable;
    if (a3 && v9)
    {
      uint64_t v15 = 0;
      while (1)
      {
        CFNumberRef v16 = CFNumberCreate(0, a6, a3);
        if (!v16) {
          break;
        }
        CFNumberRef v17 = v16;
        CFArrayAppendValue(v14, v16);
        CFRelease(v17);
        ++v15;
        a3 += a5;
        if (v12 == v15) {
          goto LABEL_9;
        }
      }
      uint64_t v20 = *__error();
      ktrace_log_init();
      int v21 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        dict_set_number_arr_cold_4(v15, v20, v21);
      }
      *__error() = v20;
      uint64_t v18 = 22;
    }
    else
    {
LABEL_9:
      CFDictionarySetValue(a1, a2, v14);
      uint64_t v18 = 0;
    }
    CFRelease(v14);
  }
  else
  {
    int v19 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_set_number_arr_cold_3();
    }
    *__error() = v19;
    return 22;
  }
  return v18;
}

uint64_t dict_set_uint32_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 4, kCFNumberSInt32Type);
}

uint64_t dict_set_int_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 4, kCFNumberIntType);
}

UInt8 *aasprintf(char *a1, ...)
{
  va_start(va, a1);
  bytes[0] = 0;
  va_copy((va_list)&bytes[1], va);
  vasprintf((char **)bytes, a1, va);
  if (!bytes[0]) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFDataRef v1 = CFDataCreateWithBytesNoCopy(0, bytes[0], 1, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  CFAutorelease(v1);
  return bytes[0];
}

CFStringRef cfaasprintf(char *a1, ...)
{
  va_start(va, a1);
  __s[0] = 0;
  va_copy((va_list)&__s[1], va);
  vasprintf(__s, a1, va);
  if (!__s[0]) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v1 = strlen(__s[0]);
  CFStringRef v2 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)__s[0], v1, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  if (!v2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFStringRef v3 = v2;
  CFAutorelease(v2);
  return v3;
}

char *utf8_nullable(const __CFString *a1)
{
  if (a1) {
    return utf8(a1);
  }
  else {
    return "<null>";
  }
}

char *utf8(const __CFString *a1)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr)
  {
    CFIndex v3 = CFStringGetLength(a1) + 1;
    int v4 = (char *)malloc_type_malloc(v3, 0xBBD065C4uLL);
    if (!v4) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CStringPtr = v4;
    if (!CFStringGetCString(a1, v4, v3, 0x8000100u))
    {
      CFIndex Length = CFStringGetLength(a1);
      CFIndex v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      free(CStringPtr);
      CFDataRef v7 = (char *)malloc_type_malloc(v6, 0xC51E0DBCuLL);
      if (!v7) {
        ktrace_postprocess_file_internal_cold_1();
      }
      CStringPtr = v7;
      if (!CFStringGetCString(a1, v7, v6, 0x8000100u)) {
        ktrace_postprocess_file_internal_cold_1();
      }
    }
    CFDataRef v8 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)CStringPtr, 1, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
    CFAutorelease(v8);
  }
  return CStringPtr;
}

char *uuid_string(uint64_t a1, uint64_t a2)
{
  v5[0] = a1;
  v5[1] = a2;
  CFStringRef v2 = (char *)malloc_type_calloc(1uLL, 0x25uLL, 0x1000040C946DD6EuLL);
  uuid_unparse((const unsigned __int8 *)v5, v2);
  CFDataRef v3 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v2, 1, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  CFAutorelease(v3);
  return v2;
}

uint64_t CFSetApplierTrampoline(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t CFDictionaryApplierTrampoline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t CFArrayApplierTrampoline(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

uint64_t ktrace_chunk_tag(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 32);
}

uint64_t ktrace_chunk_version_major(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(_WORD *)(a1 + 36) & 0x7FFF;
}

uint64_t ktrace_chunk_version_minor(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned __int16 *)(a1 + 38);
}

uint64_t ktrace_chunk_size(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 8);
}

uint64_t ktrace_chunk_is_64_bit(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(void *)a1) {
    return *(unsigned __int8 *)(*(void *)a1 + 298);
  }

  return current_system_is_64_bit();
}

uint64_t ktrace_chunk_copy_data(uint64_t *a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v6 = a1[1];
  if (v6 < a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 < 0) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a4 + a2 > v6) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v8 = *a1;
  if (!*a1) {
    return 45;
  }
  if (ktrace_file_read(v8, a3, a4, a1[2] + a2) >= (uint64_t)a4) {
    return 0;
  }
  ktrace_log_init();
  int v9 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = a1[2] + a2;
    int v12 = 134218240;
    size_t v13 = a4;
    __int16 v14 = 2048;
    uint64_t v15 = v11;
    _os_log_debug_impl(&dword_1B39A5000, v9, OS_LOG_TYPE_DEBUG, "cannot read %zu bytes at offset %lld", (uint8_t *)&v12, 0x16u);
  }
  return *__error();
}

const UInt8 *ktrace_chunk_map_data(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v4 = *a1;
  if (!*a1)
  {
    *__error() = 45;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_map_data_cold_2();
    }
    goto LABEL_17;
  }
  if (!a3)
  {
    *__error() = 22;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_map_data_cold_3();
    }
LABEL_17:
    size_t v13 = __error();
    CFIndex result = 0;
    *size_t v13 = v12;
    return result;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v7 = a1[1];
  if (v7 <= a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (v7 < a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a3 + a2 > v7) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (v4 == -1)
  {
    CFDataRef v14 = (const __CFData *)a1[2];
    return CFDataGetBytePtr(v14);
  }
  else
  {
    uint64_t v8 = a1[2] + a2;
    uint64_t v9 = *(void *)(v4 + 240);
    if (v9)
    {
      unint64_t v10 = *(void *)(v4 + 280);
      if (v8 >= (uint64_t)v10) {
        ktrace_postprocess_file_internal_cold_1();
      }
      if (v8 + a3 > v10) {
        ktrace_postprocess_file_internal_cold_1();
      }
      return (const UInt8 *)(v9 + v8);
    }
    int v15 = getpagesize();
    if (v15 <= 0) {
      ktrace_postprocess_file_internal_cold_1();
    }
    uint64_t v16 = v8 & (v15 - 1);
    off_t v17 = v8 & -v15;
    if (*(unsigned char *)(v4 + 301))
    {
      uint64_t v18 = (char *)mmap(0, v16 + a3, 1, 1, *(_DWORD *)(v4 + 196), v17);
LABEL_24:
      if (v18 != (char *)-1) {
        return (const UInt8 *)&v18[v16];
      }
    }
    else
    {
      int v19 = (char *)mmap(0, v16 + a3, 3, 4098, -1, 0);
      if (v19 != (char *)-1)
      {
        uint64_t v18 = v19;
        if (!(v16 + a3)) {
          return (const UInt8 *)&v18[v16];
        }
        size_t v20 = v16 + a3;
        int v21 = v19;
        off_t v22 = v17;
        while (1)
        {
          ssize_t v23 = pread(*(_DWORD *)(*a1 + 196), v21, v20, v22);
          if (!v23) {
            break;
          }
          if (v23 <= 0) {
            goto LABEL_35;
          }
          if (v20 < v23) {
            ktrace_chunk_map_data_cold_6();
          }
          v21 += v23;
          v22 += v23;
          v20 -= v23;
          if (!v20) {
            goto LABEL_24;
          }
        }
        *__error() = 5;
LABEL_35:
        munmap(v18, v16 + a3);
      }
    }
    int v24 = *__error();
    ktrace_log_init();
    uint64_t v25 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      int v27 = 134219008;
      uint64_t v28 = v16 + a3;
      __int16 v29 = 2048;
      unint64_t v30 = a3;
      __int16 v31 = 2048;
      off_t v32 = v17;
      __int16 v33 = 2048;
      unint64_t v34 = a2;
      __int16 v35 = 1024;
      int v36 = v24;
      _os_log_error_impl(&dword_1B39A5000, v25, OS_LOG_TYPE_ERROR, "failed to map %zu (%zu) bytes chunk data at offset %lld (%lld) (%{errno}d)", (uint8_t *)&v27, 0x30u);
    }
    uint64_t v26 = __error();
    CFIndex result = 0;
    *uint64_t v26 = v24;
  }
  return result;
}

uint64_t ktrace_chunk_unmap_data(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 && (unint64_t)(*(void *)result + 1) >= 2 && !*(void *)(*(void *)result + 240))
  {
    return ktrace_chunk_unmap_data_internal(a2, a3);
  }
  return result;
}

uint64_t ktrace_chunk_unmap_data_internal(unint64_t a1, uint64_t a2)
{
  int v4 = getpagesize();
  if (v4 <= 0) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = munmap((void *)(-v4 & a1), ((v4 - 1) & a1) + a2);
  if (result) {
    ktrace_chunk_unmap_data_internal_cold_1();
  }
  return result;
}

CFDataRef ktrace_chunk_copy_cfdata(uint64_t a1, unint64_t a2, void *a3)
{
  if (*(void *)a1 == -1)
  {
    CFRetain(*(CFTypeRef *)(a1 + 16));
    return *(CFDataRef *)(a1 + 16);
  }
  else
  {
    CFBooleanRef v5 = ktrace_chunk_map_data((void *)a1, a2, (unint64_t)a3);
    if (v5)
    {
      size_t v6 = v5;
      v11.version = 0;
      memset(&v11.retain, 0, 40);
      v11.info = a3;
      v11.deallocate = (CFAllocatorDeallocateCallBack)callback_unmap_chunk;
      v11.preferredSize = 0;
      CFAllocatorRef v7 = CFAllocatorCreate(0, &v11);
      if (!v7) {
        ktrace_postprocess_file_internal_cold_1();
      }
      CFAllocatorRef v8 = v7;
      CFDataRef v9 = CFDataCreateWithBytesNoCopy(0, v6, (CFIndex)a3, v7);
      CFRelease(v8);
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

CFPropertyListRef ktrace_chunk_copy_plist(uint64_t a1)
{
  CFStringRef v2 = (void *)ktrace_chunk_size(a1);
  CFDataRef v3 = ktrace_chunk_copy_cfdata(a1, 0, v2);
  if (v3)
  {
    CFDataRef v4 = v3;
    CFErrorRef error = 0;
    CFPropertyListRef v5 = CFPropertyListCreateWithData(0, v3, 0, 0, &error);
    CFRelease(v4);
    if (!v5)
    {
      int v6 = *__error();
      ktrace_log_init();
      CFAllocatorRef v7 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_chunk_copy_plist_cold_2(&error, v6, v7);
      }
      *__error() = v6;
      CFRelease(error);
    }
  }
  else
  {
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_copy_plist_cold_1();
    }
    CFPropertyListRef v5 = 0;
    *__error() = v8;
  }
  return v5;
}

const char *utf8_cferror(__CFError *a1)
{
  if (!a1) {
    return "unknown error";
  }
  CFStringRef v1 = CFErrorCopyDescription(a1);
  if (!v1) {
    return "unknown error";
  }
  CFStringRef v2 = v1;
  CFDataRef v3 = utf8(v1);
  CFRelease(v2);
  return v3;
}

uint64_t ktrace_chunk_overwrite(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a4 + a2 > *(void *)(a1 + 8)) {
    return 34;
  }
  uint64_t v9 = *(void *)a1;
  if (!*(void *)a1) {
    return 45;
  }
  if (v9 == -1)
  {
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
    memcpy((void *)&BytePtr[a2], a3, a4);
    return 0;
  }
  if (ktrace_file_write(v9, a3, a4, *(void *)(a1 + 16) + a2) >= a4) {
    return 0;
  }
  ktrace_log_init();
  CFAllocatorContext v11 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 16) + a2;
    int v13 = 134218240;
    size_t v14 = a4;
    __int16 v15 = 2048;
    uint64_t v16 = v12;
    _os_log_debug_impl(&dword_1B39A5000, v11, OS_LOG_TYPE_DEBUG, "cannot write %zu bytes at offset %lld", (uint8_t *)&v13, 0x16u);
  }
  return *__error();
}

uint64_t ktrace_chunk_iterate_subchunks(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v12 = a2;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v5 = (uint64_t)(a1 + 6);
  uint64_t v6 = ktrace_chunk_array_validate_chunk(*a1, (uint64_t)(a1 + 6), &v12);
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_iterate_subchunks_cold_3();
    }
    *__error() = v8;
  }
  else
  {
    if (v12)
    {
      do
      {
        if (!(*(unsigned int (**)(uint64_t))(a3 + 16))(a3)) {
          break;
        }
      }
      while (!ktrace_chunk_array_next(*a1, v5, &v12) && v12 != 0);
    }
    else
    {
      ktrace_log_init();
      unint64_t v10 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_chunk_iterate_subchunks_cold_2(v10);
      }
    }
    return 0;
  }
  return v7;
}

void ktrace_chunk_destroy(void *a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*a1 != -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFStringRef v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

void kteventnames_append(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 1) == 0) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0 || (byte_1E9CD6460 & 6) == 6)
  {
    append_eventnames_from_dir(a2, "/usr/share/misc");
    append_eventnames_from_dir(a2, "/usr/local/share/misc");
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 16);
  v8.length = CFArrayGetCount(v4);
  context[0] = MEMORY[0x1E4F143A8];
  context[1] = 3221225472;
  context[2] = __kteventnames_append_block_invoke;
  context[3] = &__block_descriptor_40_e9_v16__0_v8l;
  context[4] = a2;
  v8.location = 0;
  CFArrayApplyFunction(v4, v8, (CFArrayApplierFunction)CFArrayApplierTrampoline, context);
  CFArrayRef v5 = *(const __CFArray **)(a1 + 24);
  v9.length = CFArrayGetCount(v5);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  int v6[2] = __kteventnames_append_block_invoke_2;
  v6[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v6[4] = a2;
  v9.location = 0;
  CFArrayApplyFunction(v5, v9, (CFArrayApplierFunction)CFArrayApplierTrampoline, v6);
}

uint64_t kteventnames_using_default(uint64_t a1)
{
  if ((~byte_1E9CD6460 & 6) != 0) {
    return (*(unsigned __int8 *)(a1 + 32) >> 1) & 1;
  }
  else {
    return 1;
  }
}

DIR *__kteventnames_append_block_invoke(uint64_t a1, char *a2)
{
  return append_eventnames_from_dir(*(void *)(a1 + 32), a2);
}

DIR *append_eventnames_from_dir(uint64_t a1, char *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = opendir(a2);
  if (result)
  {
    CFArrayRef v5 = result;
    for (uint64_t i = readdir(result); i; uint64_t i = readdir(v5))
    {
      d_name = i->d_name;
      if (issuffix(i->d_name, ".codes"))
      {
        snprintf(__str, 0x400uLL, "%s/%s", a2, d_name);
        append_eventnames_from_path(a1, __str);
      }
    }
    return (DIR *)closedir(v5);
  }
  return result;
}

_DWORD *__kteventnames_append_block_invoke_2(uint64_t a1, char *a2)
{
  return append_eventnames_from_path(*(void *)(a1 + 32), a2);
}

_DWORD *append_eventnames_from_path(uint64_t a1, char *a2)
{
  uint64_t result = ktrace_file_append_file(a1, 32783, 0, 0, a2, 0, 0x7FFFFFFFFFFFFFFFLL);
  if (!result)
  {
    int v4 = *__error();
    ktrace_log_init();
    CFArrayRef v5 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      append_eventnames_from_path_cold_1((uint64_t)a2, v4, v5);
    }
    uint64_t result = __error();
    *uint64_t result = v4;
  }
  return result;
}

uint64_t kteventnames_add_path(CFMutableDictionaryRef *a1, char *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)&global);
  uint64_t v4 = kteventnames_add_path_locked(a1, a2);
  if (!v4)
  {
    CFArrayRef v5 = strdup(a2);
    if (!v5) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFArrayAppendValue(a1[3], v5);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
  return v4;
}

uint64_t kteventnames_add_path_locked(CFMutableDictionaryRef *a1, char *__filename)
{
  CFDataRef v3 = fopen(__filename, "r");
  if (!v3) {
    return *__error();
  }
  uint64_t v4 = v3;
  kteventnames_add_stream(a1, v3);
  fclose(v4);
  return 0;
}

BOOL kteventnames_add_chunks(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 6) != 2) {
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&global);
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __kteventnames_add_chunks_block_invoke;
  v11[3] = &unk_1E6061C78;
  v11[4] = &v12;
  v11[5] = a1;
  LODWORD(a2) = ktrace_file_iterate(a2, 0, (uint64_t)v11, v4, v5, v6, v7, v8);
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
  if (a2) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = *((_DWORD *)v13 + 6) != 0;
  }
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_1B39BBF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __kteventnames_add_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (ktrace_chunk_tag(a2) == 20986)
  {
    uint64_t v4 = *(CFMutableDictionaryRef **)(a1 + 40);
    uint64_t v5 = (void *)ktrace_chunk_copy_plist(a2);
    context = (void *)MEMORY[0x1B3EBF6E0]();
    uint64_t v28 = v5;
    if (v5)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        uint64_t v6 = objc_msgSend(v5, "allValues", context);
        uint64_t v7 = [v6 countByEnumeratingWithState:&v33 objects:v38 count:16];
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)v34;
          do
          {
            for (uint64_t i = 0; i != v8; ++i)
            {
              if (*(void *)v34 != v9) {
                objc_enumerationMutation(v6);
              }
              CFAllocatorContext v11 = *(void **)(*((void *)&v33 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                long long v31 = 0u;
                long long v32 = 0u;
                long long v29 = 0u;
                long long v30 = 0u;
                uint64_t v12 = [v11 countByEnumeratingWithState:&v29 objects:v37 count:16];
                if (v12)
                {
                  uint64_t v13 = v12;
                  uint64_t v14 = *(void *)v30;
                  do
                  {
                    for (uint64_t j = 0; j != v13; ++j)
                    {
                      if (*(void *)v30 != v14) {
                        objc_enumerationMutation(v11);
                      }
                      kteventnames_add_track(v4, 0, *(void **)(*((void *)&v29 + 1) + 8 * j));
                    }
                    uint64_t v13 = [v11 countByEnumeratingWithState:&v29 objects:v37 count:16];
                  }
                  while (v13);
                }
              }
            }
            uint64_t v8 = [v6 countByEnumeratingWithState:&v33 objects:v38 count:16];
          }
          while (v8);
        }
      }
    }
  }
  else if (ktrace_chunk_tag(a2) == 32783 && !ktrace_chunk_version_major(a2))
  {
    uint64_t v17 = (void *)ktrace_chunk_size_t(a2, v16);
    CFDataRef v18 = ktrace_chunk_copy_cfdata(a2, 0, v17);
    if (!v18)
    {
      uint64_t v26 = __error();
      uint64_t result = 0;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v26;
      return result;
    }
    CFDataRef v19 = v18;
    size_t v20 = *(CFMutableDictionaryRef **)(a1 + 40);
    BytePtr = (UInt8 *)CFDataGetBytePtr(v18);
    size_t Length = CFDataGetLength(v19);
    ssize_t v23 = fmemopen(BytePtr, Length, "r");
    if (!v23) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int v24 = v23;
    kteventnames_add_stream(v20, v23);
    fclose(v24);
    CFRelease(v19);
    *(unsigned char *)(*(void *)(a1 + 40) + 32) |= 4u;
  }
  return 1;
}

BOOL kteventnames_from_system(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 32) & 4) == 0;
}

uint64_t kteventnames_use_default(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 32)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(result + 32) = *(unsigned char *)(result + 32) & 0xFD | v2;
  return result;
}

uint64_t kteventnames_using_global(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  if ((v1 & 4) != 0) {
    return 0;
  }
  unsigned int v2 = (v1 >> 1) & 1;
  if ((~byte_1E9CD6460 & 6) != 0) {
    return v2;
  }
  else {
    return 1;
  }
}

CFMutableArrayRef kteventnames_init(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &str_no_free_key_callbacks, &int_value_callbacks);
  *(void *)a1 = Mutable;
  if (!Mutable) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(0, 0, &int_key_callbacks, &str_no_free_value_callbacks);
  *(void *)(a1 + 8) = v3;
  if (!v3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableArrayRef v4 = CFArrayCreateMutable(0, 0, &free_array_callbacks);
  *(void *)(a1 + 16) = v4;
  if (!v4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableArrayRef result = CFArrayCreateMutable(0, 0, &free_array_callbacks);
  *(void *)(a1 + 24) = result;
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return result;
}

void kteventnames_freeze(uint64_t *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&global);
  char v2 = *((unsigned char *)a1 + 32);
  if ((v2 & 4) == 0 && ((a1[4] & 2) != 0 || (byte_1E9CD6460 & 6) == 6))
  {
    ensure_global_names_locked();
    uint64_t v3 = *a1;
    uint64_t context = MEMORY[0x1E4F143A8];
    uint64_t v6 = 3221225472;
    uint64_t v7 = __copy_cfdict_block_invoke;
    uint64_t v8 = &__block_descriptor_40_e15_v24__0r_v8r_v16l;
    uint64_t v9 = v3;
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1E9CD6438, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, &context);
    uint64_t v4 = a1[1];
    uint64_t context = MEMORY[0x1E4F143A8];
    uint64_t v6 = 3221225472;
    uint64_t v7 = __copy_cfdict_block_invoke;
    uint64_t v8 = &__block_descriptor_40_e15_v24__0r_v8r_v16l;
    uint64_t v9 = v4;
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1E9CD6440, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, &context);
    char v2 = *((unsigned char *)a1 + 32);
  }
  *((unsigned char *)a1 + 32) = v2 | 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
}

const void *kteventnames_name_from_id(uint64_t a1, void *key)
{
  unint64_t v3 = key;
  CFMutableArrayRef result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)key);
  if (!result)
  {
    if ((*(unsigned char *)(a1 + 32) & 5) == 0 && ((*(unsigned char *)(a1 + 32) & 2) != 0 || (byte_1E9CD6460 & 6) == 6))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&global);
      ensure_global_names_locked();
      CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1E9CD6440, (const void *)v3);
      os_unfair_lock_unlock((os_unfair_lock_t)&global);
      return Value;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void ensure_global_names_locked()
{
  v31[1] = *MEMORY[0x1E4F143B8];
  if (byte_1E9CD6460) {
    return;
  }
  kteventnames_init((uint64_t)&qword_1E9CD6438);
  uint64_t v0 = opendir("/AppleInternal/Library/Ariadne/Plists/");
  if (!v0) {
    goto LABEL_26;
  }
  unsigned int v1 = v0;
  while (1)
  {
    char v2 = readdir(v1);
    if (!v2) {
      break;
    }
    d_name = v2->d_name;
    if (issuffix(v2->d_name, ".plist"))
    {
      snprintf(__str, 0x400uLL, "%s/%s", "/AppleInternal/Library/Ariadne/Plists/", d_name);
      id v23 = 0;
      uint64_t v4 = (void *)[NSString stringWithUTF8String:__str];
      if ([v4 hasSuffix:@".plist"])
      {
        uint64_t v5 = (void *)[MEMORY[0x1E4F1CA10] inputStreamWithFileAtPath:v4];
        if (!v5)
        {
          *__error() = 2;
          int v12 = *__error();
          ktrace_log_init();
          uint64_t v13 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_22;
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v26 = __str;
          __int16 v27 = 1024;
          LODWORD(v28) = v12;
          uint64_t v14 = v13;
          int v15 = "failed to open file at %s (%{errno}d)";
          uint32_t v16 = 18;
          goto LABEL_24;
        }
        uint64_t v6 = v5;
        [v5 open];
        uint64_t v7 = (void *)[MEMORY[0x1E4F28F98] propertyListWithStream:v6 options:0 format:0 error:&v23];
        [v6 close];
        if (v7)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            v31[0] = v7;
            uint64_t v7 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:1];
          }
          long long v21 = 0u;
          long long v22 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          uint64_t v8 = [v7 countByEnumeratingWithState:&v19 objects:buf count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(void *)v20;
            do
            {
              for (uint64_t i = 0; i != v9; ++i)
              {
                if (*(void *)v20 != v10) {
                  objc_enumerationMutation(v7);
                }
                kteventnames_add_track((CFMutableDictionaryRef *)&qword_1E9CD6438, 0, *(void **)(*((void *)&v19 + 1) + 8 * i));
              }
              uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:buf count:16];
            }
            while (v9);
          }
        }
        else
        {
          *__error() = 79;
          int v12 = *__error();
          ktrace_log_init();
          uint64_t v17 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_22;
          }
          uint64_t v18 = objc_msgSend((id)objc_msgSend(v23, "localizedDescription"), "UTF8String");
          *(_DWORD *)long long buf = 136315650;
          uint64_t v26 = __str;
          __int16 v27 = 2080;
          uint64_t v28 = v18;
          __int16 v29 = 1024;
          int v30 = v12;
          uint64_t v14 = v17;
          int v15 = "failed to read Ariadne signpost file at %s as plist: %s (%{errno}d)";
          uint32_t v16 = 28;
LABEL_24:
          _os_log_error_impl(&dword_1B39A5000, v14, OS_LOG_TYPE_ERROR, v15, buf, v16);
LABEL_22:
          *__error() = v12;
          __error();
        }
      }
    }
  }
  closedir(v1);
LABEL_26:
  kteventnames_add_dir("/usr/share/misc");
  kteventnames_add_dir("/usr/local/share/misc");
  byte_1E9CD6460 |= 1u;
}

const void *kteventnames_id_from_name(uint64_t a1, const void *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)a1, a2);
  if (!Value)
  {
    if ((*(unsigned char *)(a1 + 32) & 5) == 0 && ((*(unsigned char *)(a1 + 32) & 2) != 0 || (byte_1E9CD6460 & 6) == 6))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&global);
      ensure_global_names_locked();
      CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1E9CD6438, a2);
      os_unfair_lock_unlock((os_unfair_lock_t)&global);
    }
    else
    {
      return 0;
    }
  }
  return Value;
}

void kteventnames_destroy(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 8));
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  char v2 = *(const void **)(a1 + 24);

  CFRelease(v2);
}

void ktrace_set_default_event_names_enabled(int a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&global);
  if (a1 == 1) {
    char v2 = 6;
  }
  else {
    char v2 = 2;
  }
  byte_1E9CD6460 = v2 | byte_1E9CD6460 & 0xF9;

  os_unfair_lock_unlock((os_unfair_lock_t)&global);
}

BOOL ktrace_get_default_event_names_enabled()
{
  return (~byte_1E9CD6460 & 6) == 0;
}

uint64_t ktrace_add_codes_file(char *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&global);
  ensure_global_names_locked();
  os_unfair_lock_unlock((os_unfair_lock_t)&global);

  return kteventnames_add_path((CFMutableDictionaryRef *)&qword_1E9CD6438, a1);
}

char *issuffix(char *a1, const char *a2)
{
  CFMutableArrayRef result = strrchr(a1, *a2);
  if (result) {
    return (char *)(strcmp(result, a2) == 0);
  }
  return result;
}

void kteventnames_add_stream(CFMutableDictionaryRef *a1, FILE *__stream)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  size_t __linecapp = 0;
  __linep = 0;
  if (getline(&__linep, &__linecapp, __stream) >= 1)
  {
    do
    {
      uint64_t v4 = __linep;
      uint64_t v5 = strchr(__linep, 35);
      if (v5)
      {
        *uint64_t v5 = 0;
        uint64_t v4 = __linep;
      }
      if (*v4)
      {
        key = 0;
        if (sscanf(v4, "%x%127s", &key, __s2) == 2)
        {
          __s2[127] = 0;
          CFArrayRef Value = (const char *)CFDictionaryGetValue(a1[1], key);
          if (Value)
          {
            uint64_t v7 = Value;
            if (strcmp(Value, __s2))
            {
              ktrace_log_init();
              uint64_t v8 = ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 134218498;
                uint64_t v14 = key;
                __int16 v15 = 2080;
                uint32_t v16 = v7;
                __int16 v17 = 2080;
                uint64_t v18 = __s2;
                _os_log_debug_impl(&dword_1B39A5000, v8, OS_LOG_TYPE_DEBUG, "conflicting names for debugid %#lx: %s and %s", buf, 0x20u);
              }
            }
          }
          else
          {
            uint64_t v9 = name_intern(__s2);
            CFDictionarySetValue(*a1, v9, key);
            CFDictionarySetValue(a1[1], key, v9);
          }
        }
      }
    }
    while (getline(&__linep, &__linecapp, __stream) > 0);
  }
  free(__linep);
}

const void *name_intern(void *value)
{
  if (name_intern_nameset_once != -1) {
    dispatch_once(&name_intern_nameset_once, &__block_literal_global);
  }
  char v2 = CFSetGetValue((CFSetRef)name_intern_nameset, value);
  if (!v2)
  {
    size_t v3 = strlen((const char *)value) + 1;
    if (v3 >= 0x8000) {
      ktrace_postprocess_file_internal_cold_1();
    }
    size_t v4 = name_intern_namebuf_left;
    if (v3 >= name_intern_namebuf_left)
    {
      uint64_t v5 = (char *)malloc_type_malloc(0x8000uLL, 0x9A8656EuLL);
      name_intern_namebuf_pos = (uint64_t)v5;
      if (!v5) {
        ktrace_postprocess_file_internal_cold_1();
      }
      size_t v4 = 0x8000;
      name_intern_namebuf_left = 0x8000;
    }
    else
    {
      uint64_t v5 = (char *)name_intern_namebuf_pos;
    }
    size_t v6 = strlcpy(v5, (const char *)value, v4);
    char v2 = (const void *)name_intern_namebuf_pos;
    name_intern_namebuf_pos += v6 + 1;
    if (name_intern_namebuf_left < v6 + 1) {
      ktrace_postprocess_file_internal_cold_1();
    }
    name_intern_namebuf_left -= v6 + 1;
    CFSetAddValue((CFMutableSetRef)name_intern_nameset, v2);
  }
  return v2;
}

CFMutableSetRef __name_intern_block_invoke()
{
  CFMutableSetRef result = CFSetCreateMutable(0, 0, &str_no_free_set_callbacks);
  name_intern_nameset = (uint64_t)result;
  return result;
}

void kteventnames_add_track(CFMutableDictionaryRef *a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    size_t v6 = (void *)MEMORY[0x1B3EBF6E0]();
    uint64_t v7 = (void *)[a3 objectForKeyedSubscript:@"Name"];
    if (v7)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v7 = (void *)[v7 stringByReplacingOccurrencesOfString:@" " withString:@"_"];
      }
      else {
        uint64_t v7 = 0;
      }
    }
    uint64_t v8 = [a3 objectForKeyedSubscript:@"Children"];
    if (v8 && (uint64_t v9 = (void *)v8, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v30;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v30 != v12) {
              objc_enumerationMutation(v9);
            }
            kteventnames_add_track(a1, v7, *(void *)(*((void *)&v29 + 1) + 8 * i));
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
        }
        while (v11);
      }
    }
    else if (v7)
    {
      if (a2) {
        uint64_t v7 = (void *)[NSString stringWithFormat:@"%@.%@", a2, v7];
      }
      uint64_t v14 = name_intern((void *)[v7 UTF8String]);
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      uint64_t v15 = [&unk_1F0C40458 countByEnumeratingWithState:&v34 objects:v40 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v35;
        do
        {
          for (uint64_t j = 0; j != v16; ++j)
          {
            if (*(void *)v35 != v17) {
              objc_enumerationMutation(&unk_1F0C40458);
            }
            long long v19 = (void *)[a3 objectForKeyedSubscript:*(void *)(*((void *)&v34 + 1) + 8 * j)];
            if (v19)
            {
              value = 0;
              if (!_to_integer(v19, (unint64_t *)&value)) {
                goto LABEL_29;
              }
              uint64_t v20 = value;
              CFDictionarySetValue(*a1, v14, value);
              CFDictionarySetValue(a1[1], v20, v14);
            }
          }
          uint64_t v16 = [&unk_1F0C40458 countByEnumeratingWithState:&v34 objects:v40 count:16];
        }
        while (v16);
      }
LABEL_29:
      long long v21 = (void *)[a3 objectForKeyedSubscript:@"Component"];
      value = 0;
      if (_to_integer(v21, (unint64_t *)&value))
      {
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        uint64_t v22 = [&unk_1F0C40470 countByEnumeratingWithState:&v34 objects:v40 count:16];
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = *(void *)v35;
          unint64_t v25 = ((unint64_t)value << 16) | 0x2B000000;
          do
          {
            for (uint64_t k = 0; k != v23; ++k)
            {
              if (*(void *)v35 != v24) {
                objc_enumerationMutation(&unk_1F0C40470);
              }
              __int16 v27 = (void *)[a3 objectForKeyedSubscript:*(void *)(*((void *)&v34 + 1) + 8 * k)];
              unint64_t v33 = 0;
              if (_to_integer(v27, &v33))
              {
                uint64_t v28 = (const void *)(v25 | (4 * (v33 & 0x3FFF)));
                CFDictionarySetValue(*a1, v14, v28);
                CFDictionarySetValue(a1[1], v28, v14);
              }
            }
            uint64_t v23 = [&unk_1F0C40470 countByEnumeratingWithState:&v34 objects:v40 count:16];
          }
          while (v23);
        }
      }
    }
  }
}

BOOL _to_integer(void *a1, unint64_t *a2)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *a2 = [a1 unsignedLongValue];
    return 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      __endptr = 0;
      *a2 = strtoul((const char *)[a1 UTF8String], &__endptr, 0);
      return *__endptr == 0;
    }
    else
    {
      return 0;
    }
  }
}

void __copy_cfdict_block_invoke(uint64_t a1, const void *a2, const void *a3)
{
}

void kteventnames_add_dir(const char *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v2 = opendir(a1);
  if (v2)
  {
    size_t v3 = v2;
    int v4 = 0;
    while (1)
    {
      uint64_t v5 = readdir(v3);
      if (!v5) {
        break;
      }
      d_name = v5->d_name;
      if (issuffix(v5->d_name, ".codes"))
      {
        snprintf(__str, 0x400uLL, "%s/%s", a1, d_name);
        int v7 = kteventnames_add_path_locked((CFMutableDictionaryRef *)&qword_1E9CD6438, __str);
        if (v4) {
          BOOL v8 = 1;
        }
        else {
          BOOL v8 = v7 == 0;
        }
        if (!v8) {
          int v4 = v7;
        }
      }
    }
    closedir(v3);
    if (!v4)
    {
      uint64_t v9 = strdup(a1);
      if (!v9) {
        ktrace_postprocess_file_internal_cold_1();
      }
      CFArrayAppendValue((CFMutableArrayRef)qword_1E9CD6448, v9);
    }
  }
}

uint64_t ktrace_events_all(uint64_t a1, const void *a2)
{
  uint64_t result = ktrace_events_range(a1, 0, -1, a2);
  if (!result) {
    *(unsigned char *)(a1 + 16) = 1;
  }
  return result;
}

uint64_t ktrace_events_range(uint64_t a1, int a2, int a3, const void *a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v7 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v7) {
    return 12;
  }
  BOOL v8 = v7;
  *int v7 = 0;
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = 0;
  uint64_t v9 = _Block_copy(a4);
  uint64_t result = 0;
  *((void *)v8 + 3) = v9;
  return result;
}

uint64_t ktrace_events_all_paired(uint64_t a1, const void *a2)
{
  uint64_t result = ktrace_events_range_paired(a1, 0, 0xFFFFFFFF, a2);
  if (!result) {
    *(unsigned char *)(a1 + 16) = 1;
  }
  return result;
}

uint64_t ktrace_events_range_paired(uint64_t a1, int a2, unsigned int a3, const void *a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v7 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v7) {
    return 12;
  }
  BOOL v8 = v7;
  *int v7 = 0;
  unsigned int v9 = (a3 + 3) & 0xFFFFFFFC;
  if (a3 > 0xFFFFFFFB) {
    unsigned int v9 = -1;
  }
  v7[2] = a2 & 0xFFFFFFFC;
  v7[3] = v9;
  v7[4] = 1;
  uint64_t v10 = _Block_copy(a4);
  uint64_t result = 0;
  *((void *)v8 + 3) = v10;
  return result;
}

uint64_t ktrace_events_any(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v3 = ktrace_callback_list_add(a1, a1 + 40);
  if (!v3) {
    return 12;
  }
  int v4 = v3;
  *size_t v3 = 2;
  v3[4] = 0;
  uint64_t v5 = _Block_copy(a2);
  uint64_t result = 0;
  *((void *)v4 + 3) = v5;
  return result;
}

uint64_t ktrace_events_any_paired(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v3 = ktrace_callback_list_add(a1, a1 + 40);
  if (!v3) {
    return 12;
  }
  int v4 = v3;
  *size_t v3 = 2;
  v3[4] = 1;
  uint64_t v5 = _Block_copy(a2);
  uint64_t result = 0;
  *((void *)v4 + 3) = v5;
  return result;
}

uint64_t ktrace_events_single(uint64_t a1, int a2, const void *a3)
{
  return ktrace_events_range(a1, a2, a2 + 4, a3);
}

uint64_t ktrace_events_single_paired(uint64_t a1, int a2, const void *a3)
{
  return ktrace_events_range_paired(a1, a2, a2 + 4, a3);
}

uint64_t ktrace_events_filter_bitmap(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v6 = malloc_type_malloc(0x2000uLL, 0x90BBD73uLL);
  if (!v6) {
    return 12;
  }
  int v7 = v6;
  memcpy(v6, a2, 0x2000uLL);
  uint64_t v8 = ktrace_events_filter_bitmap_internal(a1, (uint64_t)v7, a3);
  if (v8) {
    free(v7);
  }
  return v8;
}

uint64_t ktrace_events_filter_bitmap_internal(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v5 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v5) {
    return 12;
  }
  size_t v6 = v5;
  *(_DWORD *)uint64_t v5 = 1;
  v5[1] = a2;
  *((_DWORD *)v5 + 4) = 0;
  int v7 = _Block_copy(a3);
  uint64_t result = 0;
  v6[3] = v7;
  return result;
}

uint64_t ktrace_events_filter_bitmap_paired(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v6 = malloc_type_malloc(0x2000uLL, 0x702EFDB0uLL);
  if (!v6) {
    return 12;
  }
  int v7 = v6;
  memcpy(v6, a2, 0x2000uLL);
  uint64_t v8 = ktrace_events_filter_bitmap_internal_paired(a1, (uint64_t)v7, a3);
  if (v8) {
    free(v7);
  }
  return v8;
}

uint64_t ktrace_events_filter_bitmap_internal_paired(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v5 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v5) {
    return 12;
  }
  size_t v6 = v5;
  *(_DWORD *)uint64_t v5 = 1;
  v5[1] = a2;
  *((_DWORD *)v5 + 4) = 1;
  int v7 = _Block_copy(a3);
  uint64_t result = 0;
  v6[3] = v7;
  return result;
}

uint64_t ktrace_events_filter(uint64_t a1, const char *a2, const void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v6 = malloc_type_calloc(0x2000uLL, 1uLL, 0x100004077774924uLL);
  if (!v6) {
    return 12;
  }
  int v7 = v6;
  if (trace_parse_filter(a2, v6))
  {
    uint64_t v8 = 22;
LABEL_7:
    free(v7);
    return v8;
  }
  uint64_t v8 = ktrace_events_filter_bitmap_internal(a1, (uint64_t)v7, a3);
  if (v8) {
    goto LABEL_7;
  }
  return v8;
}

uint64_t ktrace_events_filter_paired(uint64_t a1, const char *a2, const void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v6 = malloc_type_calloc(0x2000uLL, 1uLL, 0x100004077774924uLL);
  if (!v6) {
    return 12;
  }
  int v7 = v6;
  if (trace_parse_filter(a2, v6))
  {
    uint64_t v8 = 22;
LABEL_7:
    free(v7);
    return v8;
  }
  uint64_t v8 = ktrace_events_filter_bitmap_internal_paired(a1, (uint64_t)v7, a3);
  if (v8) {
    goto LABEL_7;
  }
  return v8;
}

BOOL ktrace_session_has_callbacks(int *a1)
{
  return a1[6] > 0 || a1[28] > 0 || a1[24] > 0;
}

void *ktrace_callback_list_add(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_WORD *)(a1 + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  int v3 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = *(_DWORD *)a2 + 1;
  *(_DWORD *)a2 = v5;
  if (v3 < v4) {
    goto LABEL_10;
  }
  if (v4) {
    v4 *= 2;
  }
  else {
    int v4 = 1;
  }
  uint64_t result = malloc_type_realloc(*(void **)(a2 + 8), 32 * v4, 0x109204018D12139uLL);
  if (result)
  {
    *(_DWORD *)(a2 + 4) = v4;
    *(void *)(a2 + 8) = result;
    int v5 = *(_DWORD *)a2;
LABEL_10:
    if (v5 > v4) {
      ktrace_postprocess_file_internal_cold_1();
    }
    return (void *)(*(void *)(a2 + 8) + 32 * (v5 - 1));
  }
  return result;
}

void ktrace_callback_list_sort(int *a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  char v2 = (void *)*((void *)a1 + 1);
  if (v2)
  {
    size_t v3 = *a1;
    qsort_b(v2, v3, 0x20uLL, &__block_literal_global_0);
  }
}

uint64_t __ktrace_callback_list_sort_block_invoke(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3 = *a3;
  if (*a2 == 1)
  {
    if (v3 != 1) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (v3 == 1) {
      return 1;
    }
    if (*a2 == 3)
    {
      if (v3 != 3) {
        return 0xFFFFFFFFLL;
      }
    }
    else if (v3 == 3)
    {
      return 1;
    }
  }
  int v4 = a3[4];
  if (a2[4] == 1)
  {
    if (v4 != 1) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_14;
  }
  if (v4 == 1) {
    return 1;
  }
LABEL_14:
  unsigned int v6 = a2[2];
  unsigned int v7 = a3[2];
  BOOL v8 = v6 >= v7;
  BOOL v9 = v6 != v7;
  if (v8) {
    return v9;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void ktrace_callback_list_reset(int *a1)
{
  if (*a1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *((void *)a1 + 1);
      if (*(_DWORD *)(v4 + v2) == 1) {
        free(*(void **)(v4 + v2 + 8));
      }
      _Block_release(*(const void **)(v4 + v2 + 24));
      ++v3;
      v2 += 32;
    }
    while (v3 < *a1);
  }
  free(*((void **)a1 + 1));
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
}

void ktrace_compressor_init(_DWORD *a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  bzero(a1, 0x388uLL);
  a1[1] = a2;
}

void ktrace_compressor_reset(_DWORD *a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v2 = a1[1];
  bzero(a1, 0x388uLL);
  a1[1] = v2;
}

char *ktrace_compressor_commit(int *a1, void *a2, unint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a3 < 0x41)
  {
    int v5 = safe_encode(a1, (uint64_t)__src, a3);
    if (v5) {
      memcpy(a2, __src, (size_t)v5);
    }
    return v5;
  }
  else
  {
    return safe_encode(a1, (uint64_t)a2, a3);
  }
}

char *safe_encode(int *a1, uint64_t a2, unint64_t a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v6 = *((void *)a1 + 2) - *((void *)a1 + 1);
  uint64_t v7 = (void *)(a2 + 2);
  unsigned int v8 = __clz(v6 | 1);
  unsigned int v9 = (9 * v8) >> 6;
  if (v8 >= 8)
  {
    *uint64_t v7 = ((2 * v6) | 1) << (8 - v9);
  }
  else
  {
    *(unsigned char *)(a2 + 2) = 0;
    *(void *)(a2 + 3) = v6;
  }
  uint64_t v10 = (void *)((char *)v7 + 9 - v9);
  unsigned int v11 = a1[1];
  if (v11 == 2)
  {
    uint64_t v25 = 0;
    unsigned int v26 = 0;
    unint64_t v13 = 0;
    unsigned int v27 = *a1;
    uint64_t v28 = (unsigned int *)&a1[12 * *a1];
    unsigned int v29 = -1;
    while (1)
    {
      uint64_t v30 = 0;
      unsigned int v31 = 0;
      unint64_t v32 = 0;
      if (v27 + 1 <= 0x10) {
        ++v27;
      }
      else {
        unsigned int v27 = 0;
      }
      uint64_t v33 = 6;
      do
      {
        uint64_t v34 = *(void *)&v28[v33];
        if (!v34) {
          goto LABEL_35;
        }
        uint64_t v35 = *(void *)&a1[12 * v27 + v33];
        if ((v35 ^ v34) == 3)
        {
          uint64_t v36 = (2 << v30);
LABEL_33:
          v32 |= v36;
          goto LABEL_35;
        }
        if (v34 == v35)
        {
          uint64_t v36 = (1 << v30);
          goto LABEL_33;
        }
        uint64_t v37 = 9 - ((9 * __cls(v34 - v35)) >> 6);
        v32 |= (v37 << ((v33 * 4) - 8)) | (3 << v30);
        v31 += v37;
LABEL_35:
        v33 += 2;
        v30 += 2;
      }
      while (v30 != 12);
      if (v31 < v29)
      {
        unsigned int v29 = v31;
        unint64_t v13 = v32 | (v25 << 12);
        unsigned int v26 = v27;
      }
      if (++v25 == 16)
      {
        uint64_t v10 = (void *)encode_row((uint64_t)v10, (uint64_t)&a1[12 * v26 + 6], (uint64_t)(v28 + 6), v13);
        goto LABEL_60;
      }
    }
  }
  if (v11 == 3)
  {
    int v38 = *a1;
    uint64_t v39 = (unsigned int *)&a1[12 * *a1];
    uint64_t v40 = (uint64_t)(v39 + 6);
    uint64_t v41 = 3999999939 * ((*((void *)v39 + 7) << 30) | (*((void *)v39 + 8) >> 2));
    double v42 = (char *)a1 + ((BYTE5(v41) ^ BYTE3(v41)) & 0x3F);
    int v43 = v42[840];
    v42[840] = *a1;
    unsigned int v44 = v43 + ~v38;
    if (v44 <= 0x11) {
      unsigned int v45 = v43 + ~v38;
    }
    else {
      unsigned int v45 = v44 + 17;
    }
    if (v45 <= 0xF && (uint64_t v46 = (unsigned int *)&a1[12 * v43], *((void *)v46 + 7) == *(void *)(v40 + 32)))
    {
      uint64_t v47 = (uint64_t)(v46 + 6);
    }
    else
    {
      LOWORD(v45) = 0;
      if ((v38 + 1) <= 0x10) {
        int v48 = v38 + 1;
      }
      else {
        int v48 = 0;
      }
      uint64_t v47 = (uint64_t)&a1[12 * v48 + 6];
    }
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v51 = *(void *)(v40 + v50);
      if (v51)
      {
        uint64_t v52 = *(void *)(v47 + v50);
        if ((v52 ^ v51) == 3)
        {
          uint64_t v53 = (2 << v49);
        }
        else
        {
          if (v51 != v52)
          {
            v13 |= ((unint64_t)(9 - ((9 * __cls(v51 - v52)) >> 6)) << (v50 + 16)) | (3 << v49);
            goto LABEL_58;
          }
          uint64_t v53 = (1 << v49);
        }
        v13 |= v53;
      }
LABEL_58:
      v50 += 8;
      v49 += 2;
      if (v49 == 12)
      {
        uint64_t v10 = (void *)encode_row((uint64_t)v10, v47, v40, v13);
        LOWORD(v13) = v13 | ((_WORD)v45 << 12);
        goto LABEL_60;
      }
    }
  }
  if (v11 != 4) {
    safe_encode_cold_3();
  }
  uint64_t v12 = 0;
  LOWORD(v13) = 0;
  uint64_t v14 = (unsigned int *)&a1[12 * *a1 + 6];
  if ((*a1 + 1) <= 0x10) {
    unsigned int v15 = *a1 + 1;
  }
  else {
    unsigned int v15 = 0;
  }
  uint64_t v16 = (unsigned int *)&a1[12 * v15 + 6];
  do
  {
    uint64_t v18 = *(void *)v14;
    v14 += 2;
    uint64_t v17 = v18;
    uint64_t v20 = *(void *)v16;
    v16 += 2;
    uint64_t v19 = v20;
    if (v17)
    {
      if (v17 == v19)
      {
        int v21 = 1 << v12;
      }
      else
      {
        unint64_t v22 = v17 - v19;
        unsigned int v23 = __cls(v22);
        unsigned int v24 = (9 * v23) >> 6;
        if (v23 >= 8)
        {
          *uint64_t v10 = ((2 * v22) | 1) << (8 - v24);
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(void *)((char *)v10 + 1) = v22;
        }
        uint64_t v10 = (void *)((char *)v10 + 9 - v24);
        int v21 = 3 << v12;
      }
      LOWORD(v13) = v13 | v21;
    }
    v12 += 2;
  }
  while (v12 != 12);
LABEL_60:
  *(_WORD *)a2 = v13;
  uint64_t result = (char *)v10 - a2;
  if ((unint64_t)result > a3) {
    return 0;
  }
  if (*a1) {
    int v55 = *a1 - 1;
  }
  else {
    int v55 = 16;
  }
  *a1 = v55;
  *((void *)a1 + 1) = *((void *)a1 + 2);
  return result;
}

unint64_t ktrace_compressor_decompress(int *a1, char *a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a3 <= 0x40)
  {
    __memcpy_chk();
    a2 = &v22;
  }
  unsigned int v5 = a2[1];
  unsigned int v6 = *a2 | (v5 << 8);
  int v7 = *a1;
  unsigned int v8 = *a1 + (v5 >> 4);
  if (v8 > 0x10) {
    v8 -= 17;
  }
  unsigned int v9 = &a1[12 * v8];
  unint64_t v10 = *(void *)(a2 + 2);
  if ((_BYTE)v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    unint64_t v12 = v10 << (-8 * (v11 + 1)) >> (-7 * (v11 + 1));
    unint64_t result = v11 + 3;
  }
  else
  {
    unint64_t v12 = *(void *)(a2 + 3);
    unint64_t result = 11;
  }
  uint64_t v14 = 0;
  unsigned int v15 = v9 + 6;
  unsigned int v16 = v7 - 1;
  if (!v7) {
    unsigned int v16 = 16;
  }
  do
  {
    uint64_t v17 = v6 & 3;
    switch(v6 & 3)
    {
      case 1u:
        uint64_t v17 = *(void *)&v15[v14];
        break;
      case 2u:
        uint64_t v17 = *(void *)&v15[v14] ^ 3;
        break;
      case 3u:
        unint64_t v18 = *(void *)&a2[result];
        if ((_BYTE)v18)
        {
          unsigned int v19 = __clz(__rbit64(v18)) + 1;
          uint64_t v20 = (uint64_t)(v18 << (-8 * v19)) >> (-7 * v19);
        }
        else
        {
          uint64_t v20 = *(void *)&a2[result + 1];
          unsigned int v19 = 9;
        }
        result += v19;
        uint64_t v17 = *(void *)&v15[v14] + v20;
        break;
      default:
        break;
    }
    *(void *)&a1[12 * v16 + 6 + v14] = v17;
    v6 >>= 2;
    v14 += 2;
  }
  while (v14 != 12);
  if (result >= 0x42) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (result > a3) {
    return 0;
  }
  *a1 = v16;
  uint64_t v21 = *((void *)a1 + 2);
  *((void *)a1 + 1) = v21;
  *((void *)a1 + 2) = v21 + v12;
  return result;
}

uint64_t ktrace_compressor_read_first_timestamp(char *a1, unint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  bzero(v7, 0x388uLL);
  v7[1] = 1;
  if (!ktrace_compressor_decompress(v7, a1, a2)) {
    return 22;
  }
  uint64_t result = 0;
  *a3 = v8;
  return result;
}

unint64_t decompress_32(int *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v8 = 0;
  unint64_t v9 = *a3;
  if (*a3)
  {
    unint64_t v11 = 0;
    if (a5)
    {
      unint64_t v11 = 0;
      unint64_t v8 = 0;
      do
      {
        unint64_t v13 = ktrace_compressor_decompress(a1, (char *)(a2 + v11), v9 - v11);
        if (!v13) {
          break;
        }
        uint64_t v14 = a4 + v8;
        unsigned int v15 = (unsigned int *)&a1[12 * *a1];
        *(void *)uint64_t v14 = *((void *)a1 + 2) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)BYTE4(*((void *)v15 + 8)) << 56);
        *(int32x4_t *)(v14 + 8) = vuzp1q_s32(*(int32x4_t *)(v15 + 6), *(int32x4_t *)(v15 + 10));
        *(int32x2_t *)(v14 + 24) = vmovn_s64(*(int64x2_t *)(v15 + 14));
        v11 += v13;
        v8 += 32;
        if (v11 >= v9) {
          break;
        }
      }
      while (v8 < a5);
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  *a3 = v11;
  return v8;
}

unint64_t decompress_64(int *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v8 = 0;
  unint64_t v9 = *a3;
  if (*a3)
  {
    unint64_t v11 = 0;
    if (a5)
    {
      unint64_t v11 = 0;
      unint64_t v8 = 0;
      do
      {
        unint64_t v13 = ktrace_compressor_decompress(a1, (char *)(a2 + v11), v9 - v11);
        if (!v13) {
          break;
        }
        uint64_t v14 = a4 + v8;
        *(void *)uint64_t v14 = *((void *)a1 + 2);
        unsigned int v15 = (unsigned int *)&a1[12 * *a1];
        unsigned int v16 = v15[17];
        *(void *)(v14 + 8) = *((void *)v15 + 3);
        *(void *)(v14 + 16) = *((void *)v15 + 4);
        *(void *)(v14 + 24) = *((void *)v15 + 5);
        *(void *)(v14 + 32) = *((void *)v15 + 6);
        *(void *)(v14 + 40) = *((void *)v15 + 7);
        *(_DWORD *)(v14 + 48) = *((void *)v15 + 8);
        *(_DWORD *)(v14 + 52) = v16;
        v11 += v13;
        v8 += 64;
        if (v11 >= v9) {
          break;
        }
      }
      while (v8 < a5);
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  *a3 = v11;
  return v8;
}

uint64_t encode_row(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = a4 >> 16;
  do
  {
    if ((_BYTE)v5)
    {
      uint64_t v6 = *(void *)(a3 + v4) - *(void *)(a2 + v4);
      if (v5 > 8u)
      {
        *(unsigned char *)uint64_t result = 0;
        *(void *)(result + 1) = v6;
      }
      else
      {
        *(void *)uint64_t result = ((2 * v6) | 1) << (v5 - 1);
      }
    }
    result += v5;
    v5 >>= 8;
    v4 += 8;
  }
  while (v4 != 48);
  return result;
}

uint64_t config_init_v1_0(const __CFDictionary *a1, char **a2)
{
  uint64_t v4 = (_DWORD *)a2 + 63;
  uint64_t result = dict_uint32(a1, @"owner_kind", (char *)a2 + 252);
  if (!result)
  {
    if (!*v4) {
      return 0;
    }
    uint64_t result = dict_string(a1, @"owner_name", 0, 0, a2);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t config_init_v1_1(const __CFDictionary *a1, char **a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = dict_uint32(a1, @"context_kind", a2 + 32);
  if (!result)
  {
    dict_string(a1, @"reason", 0, 0, a2 + 1);
    dict_string(a1, @"command", 0, 0, a2 + 2);
    return dict_uint32(a1, @"trigger_kind", (char *)a2 + 260);
  }
  return result;
}

uint64_t config_init_v1_2(const __CFDictionary *a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  dict_uint64(a1, @"kperf_lazy_wait_threshold", (void *)(a2 + 160));
  dict_uint32(a1, @"kperf_lazy_wait_action", (void *)(a2 + 168));
  dict_uint64(a1, @"kperf_lazy_cpu_threshold", (void *)(a2 + 176));
  dict_uint32(a1, @"kperf_lazy_cpu_action", (void *)(a2 + 184));
  return 0;
}

uint64_t config_init_v1_3(const __CFDictionary *a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  dict_BOOL(a1, @"kdebug_continuous_time", (BOOL *)(a2 + 77));
  dict_BOOL(a1, @"kdebug_coprocessor_tracing", (BOOL *)(a2 + 78));
  return 0;
}

uint64_t config_init_v1_4(const __CFDictionary *a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v5 = 0;
  dict_uint64_arr(a1, @"kdebug_disabling_event_match", (void *)(a2 + 40), &v5);
  dict_uint64_arr(a1, @"kdebug_disabling_event_mask", (void *)(a2 + 48), &v5);
  return 0;
}

unsigned char *ktrace_config_create(void *a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v2 = ktrace_chunk_tag((uint64_t)a1);
  if (v2 != 20995)
  {
    int v17 = v2;
    uint64_t v4 = 0;
    unint64_t v6 = 0;
    unint64_t v13 = 0;
    unint64_t v18 = a1;
    goto LABEL_8;
  }
  uint64_t v4 = ktrace_chunk_size_t(a1, v3);
  int v5 = ktrace_chunk_map_data(a1, 0, v4);
  if (!v5)
  {
    int inited = *__error();
    if (inited)
    {
LABEL_27:
      unsigned int v16 = 0;
      *__error() = inited;
      return v16;
    }
    return 0;
  }
  unint64_t v6 = (unint64_t)v5;
  int v7 = ktrace_file_open_memory((uint64_t)v5, v4, 0, 0);
  if (v7)
  {
    unint64_t v13 = v7;
    uint64_t v29 = 0;
    uint64_t v30 = &v29;
    uint64_t v31 = 0x2000000000;
    uint64_t v32 = 0;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 0x40000000;
    v28[2] = __ktrace_config_create_block_invoke;
    v28[3] = &unk_1E6061D00;
    v28[4] = &v29;
    int v14 = ktrace_file_iterate((uint64_t)v7, 0, (uint64_t)v28, v8, v9, v10, v11, v12);
    if (v14)
    {
      int inited = v14;
      _Block_object_dispose(&v29, 8);
      unsigned int v16 = 0;
LABEL_12:
      ktrace_file_close(v13);
LABEL_13:
      if (!v6)
      {
        if (!inited) {
          return v16;
        }
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    unint64_t v18 = (void *)v30[3];
    int v17 = ktrace_chunk_tag((uint64_t)v18);
    _Block_object_dispose(&v29, 8);
LABEL_8:
    if (v17 != 32774 || ktrace_chunk_version_major((uint64_t)v18) > 1)
    {
      unsigned int v16 = 0;
      int inited = 79;
      goto LABEL_11;
    }
    uint64_t v19 = ktrace_chunk_size((uint64_t)v18);
    uint64_t v20 = (UInt8 *)ktrace_chunk_map_data(v18, 0, v19);
    if (!v20)
    {
      unsigned int v16 = 0;
      int inited = *__error();
      goto LABEL_11;
    }
    unint64_t v21 = (unint64_t)v20;
    CFDictionaryRef dict = (const __CFDictionary *)create_dict(v20, v19);
    if (!dict)
    {
      unsigned int v16 = 0;
      int inited = 12;
LABEL_52:
      ktrace_chunk_unmap_data((uint64_t)v18, v21, v19);
LABEL_11:
      if (!v13) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    CFDictionaryRef v23 = dict;
    unsigned int v24 = (char *)malloc_type_calloc(1uLL, 0x110uLL, 0x101004089C2A7BEuLL);
    if (!v24) {
      ktrace_postprocess_file_internal_cold_1();
    }
    unsigned int v16 = v24;
    v24[78] = 1;
    uint64_t v25 = (BOOL *)(v24 + 78);
    unsigned int v26 = ktrace_chunk_version_minor((uint64_t)v18);
    if (v26 < 4)
    {
      if (v26 != 3)
      {
        if (v26 < 2)
        {
          if (!v26) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
LABEL_34:
        config_init_v1_2(v23, (uint64_t)v16);
LABEL_35:
        int inited = config_init_v1_1(v23, (char **)v16);
        if (inited)
        {
LABEL_51:
          CFRelease(v23);
          goto LABEL_52;
        }
LABEL_36:
        int inited = config_init_v1_0(v23, (char **)v16);
        if (!inited)
        {
          int inited = dict_uint32(v23, @"kdebug_state", v16 + 68);
          if (!inited && ((v16[68] & 1) == 0 || (int inited = config_kdebug_init((uint64_t)v16, v23)) == 0))
          {
            int inited = dict_uint32(v23, @"kperf_state", v16 + 136);
            if (!inited && ((v16[136] & 1) == 0 || (int inited = config_kperf_init((uint64_t)v16, v23)) == 0))
            {
              int inited = dict_uint32(v23, @"kpc_state", v16 + 216);
              if (!inited)
              {
                if (v16[216]) {
                  int inited = config_kpc_init((uint64_t)v16, v23);
                }
                else {
                  int inited = 0;
                }
              }
            }
          }
        }
        goto LABEL_51;
      }
    }
    else
    {
      LODWORD(v29) = 0;
      dict_uint64_arr(v23, @"kdebug_disabling_event_match", (void *)v16 + 5, &v29);
      dict_uint64_arr(v23, @"kdebug_disabling_event_mask", (void *)v16 + 6, &v29);
    }
    dict_BOOL(v23, @"kdebug_continuous_time", v16 + 77);
    dict_BOOL(v23, @"kdebug_coprocessor_tracing", v25);
    goto LABEL_34;
  }
  unsigned int v16 = 0;
  int inited = *__error();
LABEL_24:
  ktrace_chunk_unmap_data((uint64_t)a1, v6, v4);
  if (inited)
  {
LABEL_25:
    if (v16) {
      ktrace_config_destroy((void **)v16);
    }
    goto LABEL_27;
  }
  return v16;
}

BOOL __ktrace_config_create_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 32774) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
  return v4 != 32774;
}

uint64_t config_kdebug_init(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = dict_uint64(a2, @"kdebug_buffer_size", (void *)(a1 + 56));
  if (!result)
  {
    uint64_t result = dict_data(a2, @"kdebug_typefilter", (UInt8 **)(a1 + 24), 0);
    if (!result)
    {
      uint64_t result = dict_uint32(a2, @"kdebug_procfilt_mode", (void *)(a1 + 72));
      if (!result)
      {
        uint64_t result = dict_int_arr(a2, @"kdebug_procfilt", (void *)(a1 + 32), (_DWORD *)(a1 + 64));
        if (!result)
        {
          return dict_BOOL(a2, @"kdebug_wrapping", (BOOL *)(a1 + 76));
        }
      }
    }
  }
  return result;
}

CFIndex config_kperf_init(uint64_t a1, const __CFDictionary *a2)
{
  int v4 = (_DWORD *)(a1 + 128);
  CFIndex result = dict_uint64_arr(a2, @"kperf_actions_sampler", (void *)(a1 + 80), (_DWORD *)(a1 + 128));
  if (!result)
  {
    int v7 = 0;
    CFIndex result = dict_uint64_arr(a2, @"kperf_actions_user_data", (void *)(a1 + 88), &v7);
    if (!result)
    {
      if (*v4 != v7) {
        return 79;
      }
      CFIndex result = dict_int_arr(a2, @"kperf_actions_pid_filter", (void *)(a1 + 96), &v7);
      if (result) {
        return result;
      }
      if (*v4 != v7) {
        return 79;
      }
      CFIndex result = dict_uint32_arr(a2, @"kperf_timers_action_id", (void *)(a1 + 104), (_DWORD *)(a1 + 132));
      if (result) {
        return result;
      }
      int v6 = 0;
      CFIndex result = dict_uint64_arr(a2, @"kperf_timers_period_ns", (void *)(a1 + 112), &v6);
      if (result) {
        return result;
      }
      if (*(_DWORD *)(a1 + 132) != v6) {
        return 79;
      }
      CFIndex result = dict_uint32(a2, @"kperf_pet_mode", (void *)(a1 + 140));
      if (!result)
      {
        CFIndex result = dict_int(a2, @"kperf_pet_timer_id", (void *)(a1 + 144));
        if (!result)
        {
          CFIndex result = dict_uint32(a2, @"kperf_pet_idle_rate", (void *)(a1 + 148));
          if (!result)
          {
            CFIndex result = dict_uint32(a2, @"kperf_kdebug_action_id", (void *)(a1 + 152));
            if (!result) {
              return dict_string(a2, @"kperf_kdebug_filter", 0, 0, (char **)(a1 + 120));
            }
          }
        }
      }
    }
  }
  return result;
}

CFIndex config_kpc_init(uint64_t a1, const __CFDictionary *a2)
{
  CFIndex result = dict_uint64_arr(a2, @"kpc_config", (void *)(a1 + 192), (_DWORD *)(a1 + 240));
  if (!result)
  {
    CFIndex result = dict_uint64(a2, @"kpc_classes", (void *)(a1 + 224));
    if (!result)
    {
      CFIndex result = dict_uint64(a2, @"kpc_thread_classes", (void *)(a1 + 232));
      if (!result)
      {
        CFIndex result = dict_uint64_arr(a2, @"kpc_periods", (void *)(a1 + 200), (_DWORD *)(a1 + 244));
        if (!result)
        {
          int v5 = 0;
          CFIndex result = dict_uint32_arr(a2, @"kpc_action_ids", (void *)(a1 + 208), &v5);
          if (!result)
          {
            if (*(_DWORD *)(a1 + 244) == v5) {
              return 0;
            }
            else {
              return 22;
            }
          }
        }
      }
    }
  }
  return result;
}

void ktrace_config_destroy(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1[1]);
    free(a1[2]);
    free(a1[3]);
    free(a1[4]);
    free(a1[5]);
    free(a1[6]);
    free(a1[10]);
    free(a1[11]);
    free(a1[12]);
    free(a1[13]);
    free(a1[14]);
    free(a1[15]);
    free(a1[24]);
    free(a1[26]);
    free(a1[25]);
    free(a1);
  }
}

uint64_t ktrace_config_create_current()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (char **)malloc_type_calloc(1uLL, 0x110uLL, 0x101004089C2A7BEuLL);
  if (!v0) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v1 = (uint64_t)v0;
  int v2 = sysctlbyname_string(0, 0, "ktrace.configured_by", v0, 0x20uLL);
  if (v2) {
    goto LABEL_35;
  }
  int v2 = sysctlbyname_int(0, 0, "ktrace.state", (void *)(v1 + 252));
  if (v2) {
    goto LABEL_35;
  }
  int v2 = sysctlbyname_int(0, 0, "ktrace.owning_pid", (void *)(v1 + 248));
  if (v2) {
    goto LABEL_35;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  int bufinfo = kdebug_get_bufinfo(&v22);
  if (bufinfo)
  {
    int v2 = bufinfo;
LABEL_35:
    ktrace_config_destroy((void **)v1);
    uint64_t v1 = 0;
    *__error() = v2;
    return v1;
  }
  int v4 = v22;
  if (v22)
  {
    if (HIDWORD(v22)) {
      int v5 = 1;
    }
    else {
      int v5 = 3;
    }
    *(_DWORD *)(v1 + 68) = v5;
    if ((v23 & 0x400000) != 0)
    {
      int v6 = malloc_type_malloc(0x2000uLL, 0x26CD95C2uLL);
      *(void *)(v1 + 24) = v6;
      if (!v6) {
        ktrace_postprocess_file_internal_cold_1();
      }
      int v7 = v6;
      uint64_t v8 = (const void *)kdebug_typefilter();
      memcpy(v7, v8, 0x2000uLL);
      int v4 = v22;
    }
    uint64_t v9 = v4;
    int is_64_bit = current_system_is_64_bit();
    char v11 = 5;
    if (is_64_bit) {
      char v11 = 6;
    }
    *(void *)(v1 + 56) = v9 << v11;
    __int16 v12 = v23;
    *(unsigned char *)(v1 + 76) = (v23 & 2) == 0;
    if ((v12 & 0x10) != 0)
    {
      int v13 = 1;
    }
    else
    {
      if ((v12 & 0x40) == 0)
      {
        *(_DWORD *)(v1 + 72) = 0;
        goto LABEL_24;
      }
      int v13 = 2;
    }
    *(_DWORD *)(v1 + 72) = v13;
    int v14 = proc_listpids(7u, 0, 0, 0);
    unsigned int v15 = malloc_type_calloc(1uLL, v14, 0x680600A7uLL);
    if (!v15) {
      ktrace_postprocess_file_internal_cold_1();
    }
    unsigned int v16 = v15;
    *(_DWORD *)(v1 + 64) = proc_listpids(7u, 0, v15, v14) >> 2;
    *(void *)(v1 + 32) = v16;
    __int16 v12 = v23;
LABEL_24:
    if ((v12 & 0x800) == 0)
    {
LABEL_32:
      *(unsigned char *)(v1 + 77) = (v12 & 0x200) != 0;
      *(unsigned char *)(v1 + 78) = (v12 & 0x400) == 0;
      goto LABEL_33;
    }
    int v32 = 27;
    *(void *)uint64_t v31 = 0x1800000001;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    size_t v25 = 80;
    if (sysctl(v31, 3u, &v26, &v25, 0, 0))
    {
      int v17 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_config_create_current_cold_3();
      }
    }
    else
    {
      unint64_t v18 = malloc_type_calloc(5uLL, 8uLL, 0x100004000313F17uLL);
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t v20 = (char *)malloc_type_calloc(5uLL, 8uLL, 0x100004000313F17uLL);
        *uint64_t v19 = v26;
        v19[1] = *((void *)&v26 + 1);
        *((_OWORD *)v19 + 1) = v27;
        v19[4] = v28;
        *(void *)uint64_t v20 = DWORD2(v28);
        *(_OWORD *)(v20 + 8) = v29;
        *(_OWORD *)(v20 + 24) = v30;
        *(void *)(v1 + 40) = v19;
        *(void *)(v1 + 48) = v20;
        goto LABEL_31;
      }
      int v17 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_config_create_current_cold_2();
      }
    }
    *__error() = v17;
LABEL_31:
    __int16 v12 = v23;
    goto LABEL_32;
  }
  *(_DWORD *)(v1 + 68) = 0;
LABEL_33:
  int v2 = config_current_kperf(v1);
  if (v2) {
    goto LABEL_35;
  }
  int v2 = config_current_kpc(v1);
  if (v2) {
    goto LABEL_35;
  }
  return v1;
}

uint64_t config_current_kperf(uint64_t a1)
{
  int v2 = (_DWORD *)(a1 + 128);
  uint64_t v3 = kperf_action_count_get();
  if (v3)
  {
    uint64_t v4 = v3;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_20();
    }
    goto LABEL_4;
  }
  int v7 = malloc_type_malloc(8 * *(unsigned int *)(a1 + 128), 0x100004000313F17uLL);
  *(void *)(a1 + 80) = v7;
  if (!v7) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v8 = malloc_type_malloc(8 * *(unsigned int *)(a1 + 128), 0x100004000313F17uLL);
  *(void *)(a1 + 88) = v8;
  if (!v8) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v9 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 128), 0x100004052888210uLL);
  *(void *)(a1 + 96) = v9;
  if (!v9) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*v2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    char v12 = 0;
    while (1)
    {
      LODWORD(v38) = 0;
      unint64_t v13 = v11 + 1;
      uint64_t v14 = kperf_action_samplers_get();
      if (v14) {
        break;
      }
      BOOL v15 = v38 != 0;
      *(void *)(*(void *)(a1 + 80) + 8 * v11) = v38;
      uint64_t v16 = kperf_action_userdata_get();
      if (v16)
      {
        uint64_t v4 = v16;
        int v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          config_current_kperf_cold_18();
        }
        goto LABEL_4;
      }
      *(void *)(*(void *)(a1 + 88) + 8 * v11) = v38;
      uint64_t v17 = kperf_action_filter_get();
      if (v17)
      {
        uint64_t v4 = v17;
        goto LABEL_5;
      }
      v12 |= v15;
      v10 += 4;
      ++v11;
      if (v13 >= *v2) {
        goto LABEL_19;
      }
    }
    uint64_t v4 = v14;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_19();
    }
    goto LABEL_4;
  }
  char v12 = 0;
LABEL_19:
  uint64_t v18 = kperf_timer_count_get();
  if (v18)
  {
    uint64_t v4 = v18;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_17();
    }
    goto LABEL_4;
  }
  uint64_t v19 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 132), 0x100004052888210uLL);
  *(void *)(a1 + 104) = v19;
  if (!v19) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v20 = malloc_type_malloc(8 * *(unsigned int *)(a1 + 132), 0x100004000313F17uLL);
  *(void *)(a1 + 112) = v20;
  if (!v20) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 132))
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      size_t v38 = 0;
      uint64_t v23 = kperf_timer_action_get();
      if (v23) {
        break;
      }
      uint64_t v24 = kperf_timer_period_get();
      if (v24)
      {
        uint64_t v4 = v24;
        int v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          config_current_kperf_cold_15();
        }
        goto LABEL_4;
      }
      *(void *)(*(void *)(a1 + 112) + 8 * v22++) = kperf_ticks_to_ns();
      v21 += 4;
      if (v22 >= *(unsigned int *)(a1 + 132)) {
        goto LABEL_29;
      }
    }
    uint64_t v4 = v23;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_16();
    }
    goto LABEL_4;
  }
LABEL_29:
  uint64_t v25 = kperf_kdebug_action_get();
  if (v25)
  {
    uint64_t v4 = v25;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_14();
    }
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 152))
  {
    uint64_t v26 = kperf_kdebug_filter_get();
    if (v26)
    {
      uint64_t v27 = v26;
      *(void *)(a1 + 120) = kperf_kdebug_filter_create_desc();
      MEMORY[0x1B3EBF390](v27);
    }
  }
  uint64_t v28 = kperf_timer_pet_get();
  if (v28)
  {
    uint64_t v4 = v28;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_13();
    }
    goto LABEL_4;
  }
  if (*(int *)(a1 + 144) > 15)
  {
    *(void *)(a1 + 140) = 0xFFFFFFFF00000000;
  }
  else
  {
    int v37 = 0;
    size_t v38 = 4;
    if (sysctlbyname("kperf.lightweight_pet", &v37, &v38, 0, 0) == -1)
    {
      int v31 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        config_current_kperf_cold_6();
      }
LABEL_65:
      *__error() = v31;
      if (!*__error()) {
        return 22;
      }
      return *__error();
    }
    if (v37) {
      int v29 = 2;
    }
    else {
      int v29 = 1;
    }
    *(_DWORD *)(a1 + 140) = v29;
  }
  size_t v38 = 4;
  if (sysctlbyname("kperf.pet_idle_rate", (void *)(a1 + 148), &v38, 0, 0) == -1)
  {
    int v31 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_7();
    }
    goto LABEL_65;
  }
  uint64_t v30 = kperf_lazy_wait_time_threshold_get();
  if (v30)
  {
    uint64_t v4 = v30;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_12();
    }
  }
  else
  {
    *(void *)(a1 + 160) = kperf_ticks_to_ns();
    uint64_t v32 = kperf_lazy_wait_action_get();
    if (v32)
    {
      uint64_t v4 = v32;
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        config_current_kperf_cold_11();
      }
    }
    else
    {
      uint64_t v33 = kperf_lazy_cpu_time_threshold_get();
      if (v33)
      {
        uint64_t v4 = v33;
        int v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          config_current_kperf_cold_10();
        }
      }
      else
      {
        *(void *)(a1 + 176) = kperf_ticks_to_ns();
        uint64_t v34 = kperf_lazy_cpu_action_get();
        if (v34)
        {
          uint64_t v4 = v34;
          int v5 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            config_current_kperf_cold_9();
          }
        }
        else
        {
          int v37 = 0;
          uint64_t v35 = kperf_sample_get();
          if (!v35)
          {
            if (v37)
            {
              uint64_t v4 = 0;
              int v36 = 3;
            }
            else
            {
              uint64_t v4 = 0;
              if ((v12 & 1) == 0)
              {
                *(_DWORD *)(a1 + 136) = 0;
                return v4;
              }
              int v36 = 1;
            }
            *(_DWORD *)(a1 + 136) = v36;
            return v4;
          }
          uint64_t v4 = v35;
          int v5 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            config_current_kperf_cold_8();
          }
        }
      }
    }
  }
LABEL_4:
  *__error() = v5;
LABEL_5:
  if (*__error()) {
    return *__error();
  }
  return v4;
}

uint64_t config_current_kpc(uint64_t a1)
{
  unsigned int counting = kpc_get_counting();
  *(void *)(a1 + 224) = counting;
  if (!counting)
  {
    uint64_t period = 0;
    *(_DWORD *)(a1 + 216) = 0;
    return period;
  }
  *(_DWORD *)(a1 + 216) = 3;
  *(void *)(a1 + 232) = kpc_get_thread_counting();
  *(_DWORD *)(a1 + 240) = kpc_get_config_count();
  int counter_count = kpc_get_counter_count();
  *(_DWORD *)(a1 + 244) = counter_count;
  size_t v4 = *(unsigned int *)(a1 + 240);
  if (!v4 || !counter_count)
  {
    uint64_t period = 0;
    *(void *)(a1 + 240) = 0;
    return period;
  }
  int v5 = malloc_type_calloc(v4, 8uLL, 0x100004000313F17uLL);
  *(void *)(a1 + 192) = v5;
  if (!v5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t config = kpc_get_config();
  if (config)
  {
    uint64_t period = config;
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kpc_cold_6();
    }
LABEL_18:
    *__error() = v8;
    if (*__error()) {
      return *__error();
    }
    return period;
  }
  uint64_t v9 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 244), 0x100004052888210uLL);
  *(void *)(a1 + 208) = v9;
  if (!v9) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t actionid = kpc_get_actionid();
  if (actionid)
  {
    uint64_t period = actionid;
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kpc_cold_5();
    }
    goto LABEL_18;
  }
  uint64_t v11 = malloc_type_malloc(8 * *(unsigned int *)(a1 + 244), 0x100004000313F17uLL);
  *(void *)(a1 + 200) = v11;
  if (!v11) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t period = kpc_get_period();
  if (period)
  {
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kpc_cold_4();
    }
    goto LABEL_18;
  }
  return period;
}

_DWORD *ktrace_config_enable_configured(_DWORD *result)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (result[17] == 1) {
    result[17] = 3;
  }
  if (result[34] == 1) {
    result[34] = 3;
  }
  if (result[54] == 1) {
    result[54] = 3;
  }
  return result;
}

uint64_t ktrace_config_kdebug_get_state(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 68);
}

uint64_t ktrace_config_kperf_get_state(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 136);
}

uint64_t ktrace_config_kpc_get_state(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 216);
}

void *ktrace_config_append(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFIndex v8 = 0;
  uint64_t v9 = 0;
  int v3 = ktrace_config_serialize(a1, &v9, &v8);
  if (v3)
  {
    int v4 = v3;
    uint64_t appended = 0;
  }
  else
  {
    int v6 = v9;
    if (!v9) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!v8) {
      ktrace_postprocess_file_internal_cold_1();
    }
    uint64_t appended = ktrace_file_append_chunk(a2, 32774, 1, 4, v9, v8);
    int v4 = *__error();
    free(v6);
  }
  *__error() = v4;
  return appended;
}

uint64_t ktrace_config_serialize(uint64_t a1, UInt8 **a2, CFIndex *a3)
{
  CFErrorRef error = 0;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 12;
  }
  int v7 = Mutable;
  uint64_t v8 = dict_set_string(Mutable, @"owner_name", *(char **)a1);
  if (!v8)
  {
    uint64_t v8 = dict_set_uint32(v7, @"owner_kind", *(_DWORD *)(a1 + 252));
    if (!v8)
    {
      uint64_t v8 = dict_set_int(v7, @"owner_pid", *(_DWORD *)(a1 + 248));
      if (!v8)
      {
        uint64_t v8 = dict_set_uint32(v7, @"context_kind", *(_DWORD *)(a1 + 256));
        if (!v8)
        {
          uint64_t v8 = dict_set_string(v7, @"reason", *(char **)(a1 + 8));
          if (!v8)
          {
            uint64_t v8 = dict_set_string(v7, @"command", *(char **)(a1 + 16));
            if (!v8)
            {
              uint64_t v8 = dict_set_uint32(v7, @"trigger_kind", *(_DWORD *)(a1 + 260));
              if (!v8)
              {
                uint64_t v8 = dict_set_uint32(v7, @"kdebug_state", *(_DWORD *)(a1 + 68));
                if (!v8)
                {
                  uint64_t v8 = dict_set_uint64(v7, @"kdebug_buffer_size", *(void *)(a1 + 56));
                  if (!v8)
                  {
                    uint64_t v8 = dict_set_data(v7, @"kdebug_typefilter", *(UInt8 **)(a1 + 24), (unint64_t)(*(void *)(a1 + 24) != 0) << 13);
                    if (!v8)
                    {
                      uint64_t v8 = dict_set_uint32(v7, @"kdebug_procfilt_mode", *(_DWORD *)(a1 + 72));
                      if (!v8)
                      {
                        uint64_t v8 = dict_set_int_arr(v7, @"kdebug_procfilt", *(char **)(a1 + 32), *(unsigned int *)(a1 + 64));
                        if (!v8)
                        {
                          uint64_t v8 = dict_set_BOOL(v7, @"kdebug_wrapping", *(unsigned __int8 *)(a1 + 76));
                          if (!v8)
                          {
                            uint64_t v8 = dict_set_BOOL(v7, @"kdebug_continuous_time", *(unsigned __int8 *)(a1 + 77));
                            if (!v8)
                            {
                              uint64_t v8 = dict_set_BOOL(v7, @"kdebug_coprocessor_tracing", *(unsigned __int8 *)(a1 + 78));
                              if (!v8)
                              {
                                uint64_t v8 = dict_set_uint64_arr(v7, @"kdebug_disabling_event_match", *(char **)(a1 + 40), 5);
                                if (!v8)
                                {
                                  uint64_t v8 = dict_set_uint64_arr(v7, @"kdebug_disabling_event_mask", *(char **)(a1 + 48), 5);
                                  if (!v8)
                                  {
                                    uint64_t v8 = dict_set_uint32(v7, @"kperf_state", *(_DWORD *)(a1 + 136));
                                    if (!v8)
                                    {
                                      uint64_t v8 = dict_set_uint64_arr(v7, @"kperf_actions_sampler", *(char **)(a1 + 80), *(unsigned int *)(a1 + 128));
                                      if (!v8)
                                      {
                                        uint64_t v8 = dict_set_uint64_arr(v7, @"kperf_actions_user_data", *(char **)(a1 + 88), *(unsigned int *)(a1 + 128));
                                        if (!v8)
                                        {
                                          uint64_t v8 = dict_set_int_arr(v7, @"kperf_actions_pid_filter", *(char **)(a1 + 96), *(unsigned int *)(a1 + 128));
                                          if (!v8)
                                          {
                                            uint64_t v8 = dict_set_uint32_arr(v7, @"kperf_timers_action_id", *(char **)(a1 + 104), *(unsigned int *)(a1 + 132));
                                            if (!v8)
                                            {
                                              uint64_t v8 = dict_set_uint64_arr(v7, @"kperf_timers_period_ns", *(char **)(a1 + 112), *(unsigned int *)(a1 + 132));
                                              if (!v8)
                                              {
                                                uint64_t v8 = dict_set_uint32(v7, @"kperf_kdebug_action_id", *(_DWORD *)(a1 + 152));
                                                if (!v8)
                                                {
                                                  uint64_t v8 = dict_set_string(v7, @"kperf_kdebug_filter", *(char **)(a1 + 120));
                                                  if (!v8)
                                                  {
                                                    uint64_t v8 = dict_set_uint32(v7, @"kperf_pet_mode", *(_DWORD *)(a1 + 140));
                                                    if (!v8)
                                                    {
                                                      uint64_t v8 = dict_set_int(v7, @"kperf_pet_timer_id", *(_DWORD *)(a1 + 144));
                                                      if (!v8)
                                                      {
                                                        uint64_t v8 = dict_set_uint32(v7, @"kperf_pet_idle_rate", *(_DWORD *)(a1 + 148));
                                                        if (!v8)
                                                        {
                                                          uint64_t v8 = dict_set_uint64(v7, @"kperf_lazy_wait_threshold", *(void *)(a1 + 160));
                                                          if (!v8)
                                                          {
                                                            uint64_t v8 = dict_set_uint32(v7, @"kperf_lazy_wait_action", *(_DWORD *)(a1 + 168));
                                                            if (!v8)
                                                            {
                                                              uint64_t v8 = dict_set_uint64(v7, @"kperf_lazy_cpu_threshold", *(void *)(a1 + 176));
                                                              if (!v8)
                                                              {
                                                                uint64_t v8 = dict_set_uint32(v7, @"kperf_lazy_cpu_action", *(_DWORD *)(a1 + 184));
                                                                if (!v8)
                                                                {
                                                                  uint64_t v8 = dict_set_uint32(v7, @"kpc_state", *(_DWORD *)(a1 + 216));
                                                                  if (!v8)
                                                                  {
                                                                    uint64_t v8 = dict_set_uint64_arr(v7, @"kpc_config", *(char **)(a1 + 192), *(unsigned int *)(a1 + 240));
                                                                    if (!v8)
                                                                    {
                                                                      uint64_t v8 = dict_set_uint64(v7, @"kpc_classes", *(void *)(a1 + 224));
                                                                      if (!v8)
                                                                      {
                                                                        uint64_t v8 = dict_set_uint64(v7, @"kpc_thread_classes", *(void *)(a1 + 232));
                                                                        if (!v8)
                                                                        {
                                                                          uint64_t v8 = dict_set_uint64_arr(v7, @"kpc_periods", *(char **)(a1 + 200), *(unsigned int *)(a1 + 244));
                                                                          if (!v8)
                                                                          {
                                                                            uint64_t v8 = dict_set_uint32_arr(v7, @"kpc_action_ids", *(char **)(a1 + 208), *(unsigned int *)(a1 + 244));
                                                                            if (!v8)
                                                                            {
                                                                              CFDataRef v11 = CFPropertyListCreateData(0, v7, kCFPropertyListBinaryFormat_v1_0, 0, &error);
                                                                              if (v11)
                                                                              {
                                                                                CFDataRef v12 = v11;
                                                                                size_t Length = CFDataGetLength(v11);
                                                                                CFIndex v14 = Length;
                                                                                if (Length)
                                                                                {
                                                                                  BOOL v15 = (UInt8 *)malloc_type_malloc(Length, 0xF6663FB7uLL);
                                                                                  if (v15)
                                                                                  {
                                                                                    v22.location = 0;
                                                                                    v22.length = v14;
                                                                                    CFDataGetBytes(v12, v22, v15);
                                                                                    uint64_t v8 = 0;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    uint64_t v8 = *__error();
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  *__error() = 22;
                                                                                  int v20 = *__error();
                                                                                  ktrace_log_init();
                                                                                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                                                                                  {
                                                                                    ktrace_config_serialize_cold_4();
                                                                                  }
                                                                                  BOOL v15 = 0;
                                                                                  *__error() = v20;
                                                                                  uint64_t v8 = 22;
                                                                                }
                                                                                CFRelease(v12);
                                                                                CFRelease(v7);
                                                                                if (!v8)
                                                                                {
                                                                                  *a2 = v15;
                                                                                  *a3 = v14;
                                                                                  return v8;
                                                                                }
                                                                                uint64_t v9 = v15;
                                                                                goto LABEL_42;
                                                                              }
                                                                              CFErrorRef v16 = error;
                                                                              int v17 = *__error();
                                                                              ktrace_log_init();
                                                                              uint64_t v18 = ktrace_log;
                                                                              BOOL v19 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
                                                                              if (v16)
                                                                              {
                                                                                if (v19) {
                                                                                  ktrace_config_serialize_cold_3((uint64_t *)&error, v17, v18);
                                                                                }
                                                                              }
                                                                              else if (v19)
                                                                              {
                                                                                ktrace_config_serialize_cold_2();
                                                                              }
                                                                              *__error() = v17;
                                                                              uint64_t v8 = 22;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  CFRelease(v7);
  uint64_t v9 = 0;
LABEL_42:
  free(v9);
  return v8;
}

const char *state_name(int a1)
{
  if (a1 > 2)
  {
    if (a1 == 3)
    {
      return "enabled";
    }
    else
    {
      if (a1 != 0x8000000) {
        goto LABEL_10;
      }
      return "unknown";
    }
  }
  else
  {
    if (a1)
    {
      if (a1 == 1) {
        return "configured";
      }
LABEL_10:
      state_name_cold_1();
    }
    return "off";
  }
}

char *owner_kind_name(unsigned int a1)
{
  if (a1 >= 3) {
    owner_kind_name_cold_1();
  }
  return off_1E6061D20[a1];
}

char *context_kind_name(unsigned int a1)
{
  if (a1 >= 5) {
    context_kind_name_cold_1();
  }
  return off_1E6061D38[a1];
}

char *trigger_kind_name(unsigned int a1)
{
  if (a1 >= 4) {
    trigger_kind_name_cold_1();
  }
  return off_1E6061D60[a1];
}

FILE *print_typefilter(FILE *result, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (v3)
  {
    int v5 = result;
    uint64_t v6 = 0;
    char v7 = 0;
    uint64_t v8 = v3 + 1;
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v18 = v9;
    do
    {
      if (*(unsigned char *)(v3 + 32 * v6))
      {
LABEL_4:
        if ((v7 & 1) == 0)
        {
          uint64_t v10 = kdebug_alloc_filter_description(v3);
          CFDataRef v11 = v10;
          if (v10) {
            CFDataRef v12 = v10;
          }
          else {
            CFDataRef v12 = "";
          }
          fprintf(v5, "%stypefilter: %s\n", a2, v12);
          free(v11);
          fprintf(v5, "%s%8s  ", a2, "");
          for (int i = 0; i != 256; i += 8)
            fprintf(v5, "%02x ", i);
          fputc(10, v5);
          fprintf(v5, "%s%8s  ", a2, "");
          int v14 = 32;
          do
          {
            fwrite("---", 3uLL, 1uLL, v5);
            --v14;
          }
          while (v14);
          fputc(10, v5);
          uint64_t v3 = v18;
        }
        fprintf(v5, "%s%6s%02x: ", a2, "", v6);
        for (uint64_t j = 0; j != 32; ++j)
          fprintf(v5, "%02X ", *(unsigned __int8 *)(v9 + j));
        CFIndex result = (FILE *)fputc(10, v5);
        char v7 = 1;
      }
      else
      {
        uint64_t v16 = 0;
        while (v16 != 31)
        {
          if (*(unsigned __int8 *)(v8 + v16++))
          {
            if ((unint64_t)(v16 - 1) <= 0x1E) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
      ++v6;
      v8 += 32;
      v9 += 32;
    }
    while (v6 != 256);
  }
  return result;
}

FILE *ktrace_config_copy_description(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v4 = 0;
  __bufp = 0;
  CFIndex result = open_memstream(&__bufp, &v4);
  if (result)
  {
    uint64_t v3 = result;
    ktrace_config_print_description(a1, result);
    fclose(v3);
    return (FILE *)__bufp;
  }
  return result;
}

uint64_t ktrace_config_print_description(uint64_t a1, FILE *__stream)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!__stream) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v4 = *(_DWORD *)(a1 + 252);
  if (v4)
  {
    if (v4 == 1)
    {
      int v5 = "foreground";
    }
    else
    {
      if (v4 != 2) {
        owner_kind_name_cold_1();
      }
      int v5 = "background";
    }
    fprintf(__stream, "owner: %s[%d] (%s)\n", *(const char **)a1, *(_DWORD *)(a1 + 248), v5);
  }
  else
  {
    fwrite("unowned\n", 8uLL, 1uLL, __stream);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 256);
  if (v6)
  {
    char v7 = context_kind_name(v6);
    fprintf(__stream, "context: %s\n", v7);
  }
  unsigned int v8 = *(_DWORD *)(a1 + 260);
  if (v8)
  {
    uint64_t v9 = trigger_kind_name(v8);
    fprintf(__stream, "trigger: %s\n", v9);
  }
  uint64_t v10 = *(unsigned char **)(a1 + 8);
  if (v10 && *v10) {
    fprintf(__stream, "reason: %s\n", *(const char **)(a1 + 8));
  }
  if (*(void *)(a1 + 16)) {
    fprintf(__stream, "command: %s\n", *(const char **)(a1 + 16));
  }
  CFDataRef v11 = state_name(*(_DWORD *)(a1 + 68));
  fprintf(__stream, "kdebug: %s\n", v11);
  if (*(_DWORD *)(a1 + 68))
  {
    if (*(unsigned char *)(a1 + 77)) {
      CFDataRef v12 = "continuous";
    }
    else {
      CFDataRef v12 = "absolute";
    }
    fprintf(__stream, "\ttimestamps: %s\n", v12);
    fprintf(__stream, "\tbuffer size: %llu bytes\n", *(void *)(a1 + 56));
    if (*(unsigned char *)(a1 + 76)) {
      unint64_t v13 = "YES";
    }
    else {
      unint64_t v13 = "NO";
    }
    fprintf(__stream, "\twrapping: %s\n", v13);
    if (*(unsigned char *)(a1 + 78)) {
      int v14 = "YES";
    }
    else {
      int v14 = "NO";
    }
    fprintf(__stream, "\tcoprocessors: %s\n", v14);
    int v15 = *(_DWORD *)(a1 + 72);
    if (v15)
    {
      if (v15 == 1) {
        uint64_t v16 = "in";
      }
      else {
        uint64_t v16 = "ex";
      }
      fprintf(__stream, "\tprocesses %scluded:\n", v16);
      fwrite("\t\t", 2uLL, 1uLL, __stream);
      if (*(_DWORD *)(a1 + 64))
      {
        unint64_t v17 = 0;
        do
        {
          if (v17) {
            uint64_t v18 = ", ";
          }
          else {
            uint64_t v18 = "";
          }
          fprintf(__stream, "%s%d", v18, *(_DWORD *)(*(void *)(a1 + 32) + 4 * v17++));
        }
        while (v17 < *(unsigned int *)(a1 + 64));
      }
      fputc(10, __stream);
    }
    if (*(void *)(a1 + 40)) {
      BOOL v19 = "YES";
    }
    else {
      BOOL v19 = "NO";
    }
    fprintf(__stream, "\tend event matching: %s\n", v19);
    int v20 = *(void **)(a1 + 40);
    if (v20)
    {
      fprintf(__stream, "\t\tdebugid: 0x%08x & 0x%08x\n", *v20, **(void **)(a1 + 48));
      fwrite("\t\targs:\n", 8uLL, 1uLL, __stream);
      uint64_t v21 = *(void **)(a1 + 40);
      fprintf(__stream, "\t\t\t0x%016llx & 0x%016llx\n\t\t\t0x%016llx & 0x%016llx\n\t\t\t0x%016llx & 0x%016llx\n\t\t\t0x%016llx & 0x%016llx\n", v21[1], *(void *)(*(void *)(a1 + 48) + 8), v21[2], *(void *)(*(void *)(a1 + 48) + 16), v21[3], *(void *)(*(void *)(a1 + 48) + 24), v21[4], *(void *)(*(void *)(a1 + 48) + 32));
    }
    print_typefilter(__stream, "\t", a1);
  }
  CFRange v22 = state_name(*(_DWORD *)(a1 + 136));
  fprintf(__stream, "kperf: %s\n", v22);
  if (*(_DWORD *)(a1 + 136))
  {
    fprintf(__stream, "\t%u actions:\n", *(_DWORD *)(a1 + 128));
    if (*(_DWORD *)(a1 + 128))
    {
      unint64_t v23 = 0;
      do
      {
        unint64_t v24 = v23 + 1;
        fprintf(__stream, "\t\t%u: samplers = %#llx, user data = %#llx, pid filter = %d\n", v23 + 1, *(void *)(*(void *)(a1 + 80) + 8 * v23), *(void *)(*(void *)(a1 + 88) + 8 * v23), *(_DWORD *)(*(void *)(a1 + 96) + 4 * v23));
        unint64_t v23 = v24;
      }
      while (v24 < *(unsigned int *)(a1 + 128));
    }
    fprintf(__stream, "\t%u timers:\n", *(_DWORD *)(a1 + 132));
    if (*(_DWORD *)(a1 + 132))
    {
      unint64_t v25 = 0;
      do
      {
        fprintf(__stream, "\t\t%u: uint64_t period = %llu ns, action = %u\n", v25, *(void *)(*(void *)(a1 + 112) + 8 * v25), *(_DWORD *)(*(void *)(a1 + 104) + 4 * v25));
        ++v25;
      }
      while (v25 < *(unsigned int *)(a1 + 132));
    }
    uint64_t v26 = *(const char **)(a1 + 120);
    if (v26) {
      fprintf(__stream, "\tkdebug filter: %d: %s\n", *(_DWORD *)(a1 + 152), v26);
    }
    if (*(_DWORD *)(a1 + 140))
    {
      fprintf(__stream, "\tPET: %d: ", *(_DWORD *)(a1 + 144));
      if (*(_DWORD *)(a1 + 140) == 1) {
        fprintf(__stream, "original (%d idle rate)", *(_DWORD *)(a1 + 148));
      }
      else {
        fwrite("lightweight", 0xBuLL, 1uLL, __stream);
      }
      fputc(10, __stream);
    }
    if (*(_DWORD *)(a1 + 168)) {
      fprintf(__stream, "\tlazy wait: %u: %llu ns\n", *(_DWORD *)(a1 + 168), *(void *)(a1 + 160));
    }
    if (*(_DWORD *)(a1 + 184)) {
      fprintf(__stream, "\tlazy CPU: %u: %llu ns\n", *(_DWORD *)(a1 + 184), *(void *)(a1 + 176));
    }
  }
  uint64_t v27 = state_name(*(_DWORD *)(a1 + 136));
  fprintf(__stream, "kpc: %s\n", v27);
  if (*(_DWORD *)(a1 + 216))
  {
    if (*(void *)(a1 + 224)) {
      fprintf(__stream, "\tclasses: %#llx\n", *(void *)(a1 + 224));
    }
    if (*(void *)(a1 + 232)) {
      fprintf(__stream, "\tthread classes: %#llx\n", *(void *)(a1 + 232));
    }
    fprintf(__stream, "\t%u counters\n", *(_DWORD *)(a1 + 244));
    unint64_t v28 = *(unsigned int *)(a1 + 244);
    if (v28)
    {
      for (unint64_t i = 0; i < v28; ++i)
      {
        int v30 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * i);
        if (v30)
        {
          fprintf(__stream, "\t\tCTR%u: %llu triggering %u\n", i, *(void *)(*(void *)(a1 + 200) + 8 * i), v30);
          unint64_t v28 = *(unsigned int *)(a1 + 244);
        }
      }
    }
    fprintf(__stream, "\t%u configurations\n", *(_DWORD *)(a1 + 240));
    if (*(_DWORD *)(a1 + 240))
    {
      unint64_t v31 = 0;
      do
      {
        fprintf(__stream, "\t\tCFG%u: %#llx\n", v31, *(void *)(*(void *)(a1 + 192) + 8 * v31));
        ++v31;
      }
      while (v31 < *(unsigned int *)(a1 + 240));
    }
  }
  return 0;
}

uint64_t ktrace_config_get_owner_name(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)a1;
}

uint64_t ktrace_config_get_owner_kind(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 252);
}

uint64_t ktrace_config_get_owner_pid(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 248);
}

uint64_t ktrace_config_get_context_kind(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 256);
}

uint64_t ktrace_config_set_context_kind(uint64_t result, unsigned int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 >= 5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(_DWORD *)(result + 256) = a2;
  return result;
}

uint64_t ktrace_config_get_reason(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 8);
}

char *ktrace_config_set_reason(uint64_t a1, char *__s1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v4 = *(void **)(a1 + 8);
  if (v4) {
    free(v4);
  }
  if (__s1) {
    CFIndex result = strdup(__s1);
  }
  else {
    CFIndex result = 0;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t ktrace_config_get_command(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 16);
}

char *ktrace_config_set_command(uint64_t a1, char *__s1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v4 = *(void **)(a1 + 16);
  if (v4) {
    free(v4);
  }
  if (__s1) {
    CFIndex result = strdup(__s1);
  }
  else {
    CFIndex result = 0;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t ktrace_config_get_trigger_kind(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 260);
}

uint64_t ktrace_config_set_trigger_kind(uint64_t result, unsigned int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 >= 4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(_DWORD *)(result + 260) = a2;
  return result;
}

BOOL ktrace_config_kdebug_get_filtering_events(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 24) != 0;
}

uint64_t ktrace_config_kdebug_get_typefilter(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *__error() = 0;
  return *(void *)(a1 + 24);
}

uint64_t ktrace_config_kdebug_get_debugid_enabled(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 68) != 3) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(unsigned __int8 *)(v2 + ((unint64_t)a2 >> 19)) >> (BYTE2(a2) & 7)) & 1;
  }
  else {
    return 1;
  }
}

uint64_t ktrace_config_kdebug_get_buffer_size(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 56);
}

uint64_t ktrace_config_kdebug_get_procfilt_mode(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 72);
}

uint64_t ktrace_config_kdebug_get_procfilt(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *a2 = *(unsigned int *)(a1 + 64);
  return *(void *)(a1 + 32);
}

uint64_t ktrace_config_kdebug_pid_included(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v3 = *(_DWORD *)(a1 + 72);
  uint64_t result = 1;
  if (v3)
  {
    if (v3 != 1)
    {
      if (v3 != 2) {
        ktrace_config_kdebug_pid_included_cold_2();
      }
      LODWORD(result) = 0;
    }
    unint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5)
    {
      unsigned int v6 = *(_DWORD **)(a1 + 32);
      if (*v6 == a2)
      {
        BOOL v7 = 0;
      }
      else
      {
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = v8;
          if (v5 == v8) {
            break;
          }
          int v10 = v6[v8++];
        }
        while (v10 != a2);
        BOOL v7 = v9 >= v5;
      }
    }
    else
    {
      BOOL v7 = 1;
    }
    return result ^ v7;
  }
  return result;
}

uint64_t ktrace_config_kdebug_get_wrapping(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 76);
}

uint64_t ktrace_config_kdebug_using_mach_continuous_time(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 77);
}

uint64_t ktrace_config_kdebug_get_coprocessor_tracing(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 78);
}

uint64_t ktrace_config_kdebug_get_disabling_event_matching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v3 = *(void **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  int v4 = *(void **)(a1 + 48);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v3[1];
  *(_DWORD *)a2 = *v3;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v3[2];
  *(void *)(a2 + 24) = v3[3];
  *(void *)(a2 + 32) = v3[4];
  uint64_t v6 = v4[1];
  *(_DWORD *)a3 = *v4;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v4[2];
  *(void *)(a3 + 24) = v4[3];
  *(void *)(a3 + 32) = v4[4];
  return 1;
}

uint64_t ktrace_config_kperf_get_action_count(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 128);
}

uint64_t ktrace_config_kperf_get_action_samplers(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 && *(_DWORD *)(a1 + 128) >= a2) {
    return *(void *)(*(void *)(a1 + 80) + 8 * (a2 - 1));
  }
  else {
    return 0;
  }
}

uint64_t ktrace_config_kperf_get_action_user_data(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 && *(_DWORD *)(a1 + 128) >= a2) {
    return *(void *)(*(void *)(a1 + 88) + 8 * (a2 - 1));
  }
  else {
    return 0;
  }
}

uint64_t ktrace_config_kperf_get_action_pid_only(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 && *(_DWORD *)(a1 + 128) >= a2) {
    return *(unsigned int *)(*(void *)(a1 + 96) + 4 * (a2 - 1));
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ktrace_config_kperf_get_timer_count(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 132);
}

uint64_t ktrace_config_kperf_get_timer_action_id(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 132) <= a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 104) + 4 * a2);
  }
}

uint64_t ktrace_config_kperf_get_timer_period_ns(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 132) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 112) + 8 * a2);
  }
}

uint64_t ktrace_config_kperf_get_pet_mode(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 140);
}

uint64_t ktrace_config_kperf_get_pet_timer_id(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 144);
}

uint64_t ktrace_config_kperf_get_pet_idle_rate(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 148);
}

uint64_t ktrace_config_kperf_get_kdebug_action_id(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 152);
}

uint64_t ktrace_config_kperf_get_kdebug_filter_desc(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 120);
}

BOOL ktrace_config_kperf_get_lazy_wait_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(_DWORD *)(a1 + 168) != 0;
}

uint64_t ktrace_config_kperf_get_lazy_wait_time_threshold(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 168)) {
    return *(void *)(a1 + 160);
  }
  else {
    return 0;
  }
}

BOOL ktrace_config_kperf_get_lazy_cpu_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(_DWORD *)(a1 + 184) != 0;
}

uint64_t ktrace_config_kperf_get_lazy_cpu_time_threshold(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 184)) {
    return *(void *)(a1 + 176);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_config_kpc_get_classes(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 224);
}

uint64_t ktrace_config_kpc_get_thread_classes(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 232);
}

uint64_t ktrace_config_kpc_get_config(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *a2 = *(unsigned int *)(a1 + 240);
  return *(void *)(a1 + 192);
}

uint64_t ktrace_config_kpc_get_action_id(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 216) == 3 && (uint64_t v2 = *(void *)(a1 + 208)) != 0 && *(_DWORD *)(a1 + 244) > a2) {
    return *(unsigned int *)(v2 + 4 * a2);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_config_kpc_get_period(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 216) == 3 && (uint64_t v2 = *(void *)(a1 + 200)) != 0 && *(_DWORD *)(a1 + 244) > a2) {
    return *(void *)(v2 + 8 * a2);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_file_append_local_log_content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)[MEMORY[0x1E4F730C0] localStore];
  if (v8)
  {
    return ktrace_file_append_log_content_from_store(a1, v8, a2, a3, 0, a4, 0);
  }
  else
  {
    int v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_local_log_content_cold_1();
    }
    *__error() = v10;
    return 22;
  }
}

uint64_t ktrace_file_append_log_content_from_store(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  int v34 = 0;
  int v14 = (void *)MEMORY[0x1B3EBF6E0]();
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x3052000000;
  unint64_t v28 = __Block_byref_object_copy_;
  int v29 = __Block_byref_object_dispose_;
  uint64_t v30 = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __ktrace_file_append_log_content_from_store_block_invoke;
  v24[3] = &unk_1E6061D88;
  v24[4] = &v25;
  [a2 prepareWithCompletionHandler:v24];
  uint64_t v15 = v26[5];
  if (v15)
  {
    uint64_t v16 = dispatch_semaphore_create(0);
    id v17 = objc_alloc(MEMORY[0x1E4F730B0]);
    uint64_t v18 = v26[5];
    v22[6] = a1;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = __ktrace_file_append_log_content_from_store_block_invoke_2;
    void v23[3] = &__block_descriptor_40_e16_v16__0__NSData_8l;
    v23[4] = a1;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    _DWORD v22[2] = __ktrace_file_append_log_content_from_store_block_invoke_4;
    v22[3] = &unk_1E6061DD0;
    v22[4] = v16;
    v22[5] = &v31;
    BOOL v19 = (void *)[v17 initWithSource:v18 dataProcessingBlock:v23 completionBlock:v22];
    [v19 setFlags:a3];
    [v19 setArgumentRedactionBlock:a5];
    [v19 setFilterPredicate:a4];
    [v19 serializeFromDate:a6 toDate:a7];
    dispatch_semaphore_wait(v16, 0xFFFFFFFFFFFFFFFFLL);

    dispatch_release(v16);
  }
  _Block_object_dispose(&v25, 8);
  if (v15) {
    uint64_t v20 = *((unsigned int *)v32 + 6);
  }
  else {
    uint64_t v20 = 22;
  }
  _Block_object_dispose(&v31, 8);
  return v20;
}

void sub_1B39C1860(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

int *__ktrace_file_append_log_content_from_store_block_invoke(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    uint64_t v4 = [a3 localizedDescription];
    int v5 = *__error();
    ktrace_log_init();
    uint64_t v6 = ktrace_log;
    BOOL v7 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v7) {
        __ktrace_file_append_log_content_from_store_block_invoke_cold_2(a3, v5, v6);
      }
    }
    else if (v7)
    {
      __ktrace_file_append_log_content_from_store_block_invoke_cold_1();
    }
    uint64_t result = __error();
    *uint64_t result = v5;
  }
  else
  {
    uint64_t result = a2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  }
  return result;
}

_DWORD *__ktrace_file_append_log_content_from_store_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result = ktrace_file_append_chunk(*(void *)(a1 + 32), 32785, *MEMORY[0x1E4F730E8], 0, (UInt8 *)[a2 bytes], objc_msgSend(a2, "length"));
  if (!result)
  {
    int v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_file_append_log_content_from_store_block_invoke_2_cold_1();
    }
    uint64_t result = __error();
    *uint64_t result = v3;
  }
  return result;
}

intptr_t __ktrace_file_append_log_content_from_store_block_invoke_4(uint64_t a1, void *a2, uint64_t a3)
{
  switch(a3)
  {
    case 1:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_2();
      }
      int v6 = 57;
      goto LABEL_26;
    case 2:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_3();
      }
      int v6 = 55;
      goto LABEL_26;
    case 3:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_4();
      }
      int v6 = 6;
      goto LABEL_26;
    case 4:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_5();
      }
      int v6 = 89;
      goto LABEL_26;
    case 6:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_6();
      }
      int v6 = 45;
      goto LABEL_26;
    case 7:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_7();
      }
      int v6 = 1;
      goto LABEL_26;
    case 8:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_8();
      }
      int v6 = 22;
      goto LABEL_26;
    case 9:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_9();
      }
      int v6 = 70;
LABEL_26:
      *__error() = v5;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
      break;
    default:
      break;
  }
  if (a2
    && !ktrace_file_append_chunk(*(void *)(a1 + 48), 32786, *MEMORY[0x1E4F730E8], 0, (UInt8 *)[a2 bytes], objc_msgSend(a2, "length")))
  {
    int v7 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_file_append_log_content_from_store_block_invoke_4_cold_1();
    }
    *__error() = v7;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL ktrace_file_contains_log_content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  uint64_t v11 = 0;
  CFDataRef v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __ktrace_file_contains_log_content_block_invoke;
  v10[3] = &unk_1E6061DF8;
  v10[4] = &v15;
  v10[5] = &v11;
  ktrace_file_iterate(a1, 0, (uint64_t)v10, a4, a5, a6, a7, a8);
  if (*((unsigned char *)v16 + 24)) {
    BOOL v8 = *((unsigned char *)v12 + 24) != 0;
  }
  else {
    BOOL v8 = 0;
  }
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  return v8;
}

void sub_1B39C1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL __ktrace_file_contains_log_content_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = ktrace_chunk_tag(a2);
  if (v3 == 32785)
  {
    uint64_t v4 = *(void *)(a1 + 40);
  }
  else
  {
    if (v3 != 32786) {
      return !*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    }
          || *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0;
    uint64_t v4 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(*(void *)(v4 + 8) + 24) = 1;
  return !*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
      || *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0;
}

void sub_1B39C21D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unsigned int *ktrace_cpus_create(uint64_t *a1)
{
  if (ktrace_chunk_tag((uint64_t)a1) != 7168 || ktrace_chunk_version_major((uint64_t)a1) >= 2)
  {
    uint64_t v2 = 0;
    *__error() = 0;
    return v2;
  }
  size_t count = 0;
  if ((unint64_t)ktrace_chunk_size((uint64_t)a1) <= 7)
  {
LABEL_6:
    uint64_t v2 = 0;
    *__error() = 79;
    return v2;
  }
  int v4 = ktrace_chunk_copy_data(a1, 0, &count, 8uLL);
  if (v4)
  {
    uint64_t v2 = 0;
    *__error() = v4;
    return v2;
  }
  if (count != 1)
  {
    if (count == 1437204737) {
      return _create_from_legacy_cpu_map(a1, HIDWORD(count));
    }
    goto LABEL_6;
  }
  int v5 = malloc_type_calloc(HIDWORD(count), 0x28uLL, 0x10000400A747E1EuLL);
  if (!v5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v6 = v5;
  int v7 = ktrace_chunk_copy_data(a1, 8, v5, 40 * HIDWORD(count));
  if (v7)
  {
    int v8 = v7;
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = _create_from_cpu_map(HIDWORD(count), (uint64_t)v6);
    int v8 = *__error();
  }
  free(v6);
  *__error() = v8;
  return v2;
}

unsigned int *_create_from_legacy_cpu_map(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = ktrace_chunk_size_t(a1, a2);
  uint64_t v5 = v2;
  if (v4 < ((16 * v2) | 8uLL))
  {
    unint64_t v6 = v4;
    *__error() = 79;
    int v7 = *__error();
    ktrace_log_init();
    int v8 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      int v17 = 134218752;
      unint64_t v18 = v6;
      __int16 v19 = 2048;
      uint64_t v20 = (16 * v2) | 8;
      __int16 v21 = 1024;
      unsigned int v22 = v2;
      __int16 v23 = 1024;
      int v24 = v7;
      _os_log_error_impl(&dword_1B39A5000, v8, OS_LOG_TYPE_ERROR, "legacy CPU map chunk is too small %zu, expected %zu for %u CPUs (%{errno}d)", (uint8_t *)&v17, 0x22u);
    }
    goto LABEL_8;
  }
  unint64_t v9 = (unsigned int *)malloc_type_malloc(33 * v2 + 4, 0xBCEC85B9uLL);
  if (!v9) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v10 = v9;
  uint64_t v11 = (char *)malloc_type_malloc(16 * v2, 0x3DAB024FuLL);
  if (!v11) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFDataRef v12 = v11;
  int v13 = ktrace_chunk_copy_data(a1, 8, v11, 16 * v2);
  if (v13)
  {
    int v7 = v13;
    free(v10);
    free(v12);
LABEL_8:
    int v10 = 0;
    *__error() = v7;
    return v10;
  }
  *int v10 = v2;
  if (v2)
  {
    uint64_t v15 = v12 + 8;
    do
    {
      uint64_t v16 = (char *)v10 + 33 * *((unsigned int *)v15 - 2);
      __strlcpy_chk();
      v16[36] = *(v15 - 4) & 1;
      v15 += 16;
      --v5;
    }
    while (v5);
  }
  free(v12);
  return v10;
}

_DWORD *_create_from_cpu_map(unsigned int a1, uint64_t a2)
{
  LODWORD(v3) = a1;
  unint64_t v4 = malloc_type_malloc(33 * a1 + 4, 0x66DDB4EuLL);
  if (!v4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v5 = v4;
  *unint64_t v4 = v3;
  if (v3)
  {
    uint64_t v3 = v3;
    uint64_t v6 = a2 + 8;
    do
    {
      int v7 = (char *)v5 + 33 * *(unsigned int *)(v6 - 8);
      __strlcpy_chk();
      v7[36] = *(unsigned char *)(v6 - 4) & 1;
      v6 += 40;
      --v3;
    }
    while (v3);
  }
  return v5;
}

_DWORD *ktrace_cpus_create_current()
{
  size_t v3 = 0;
  unint64_t v4 = 0;
  int v0 = kdebug_alloc_current_cpu_map(&v4, &v3);
  if (v0)
  {
    uint64_t v1 = 0;
    *__error() = v0;
  }
  else
  {
    uint64_t v1 = _create_from_cpu_map(*((_DWORD *)v4 + 1), (uint64_t)v4 + 8);
    free(v4);
  }
  return v1;
}

uint64_t ktrace_cpus_get_count(unsigned int *a1)
{
  return *a1;
}

uint64_t ktrace_cpus_get_cpu_name(uint64_t a1, unsigned int a2)
{
  return a1 + 33 * a2 + 4;
}

uint64_t ktrace_cpus_get_cpu_is_coproc(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + 33 * a2 + 36);
}

uint64_t ktrace_print_trace_point(FILE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = 0;
  uint64_t v10 = *a3;
  unint64_t earliest_timestamp = ktrace_get_earliest_timestamp(a2);
  int v12 = ktrace_convert_timestamp_to_nanoseconds(a2, v10 - earliest_timestamp, &v24);
  if (v12)
  {
    *__error() = v12;
    return 0xFFFFFFFFLL;
  }
  bzero(v47, 0x400uLL);
  if (a5)
  {
    memset(v31, 0, 56);
    if (!localtime_r(a3 + 7, (tm *)v31)) {
      return 0xFFFFFFFFLL;
    }
    if (!strftime((char *)v46, 0x400uLL, "%FT%T", (const tm *)v31)
      || !strftime((char *)v45, 0x400uLL, "%Z", (const tm *)v31))
    {
      *__error() = 22;
      return 0xFFFFFFFFLL;
    }
    snprintf(v47, 0x400uLL, "\"%s.%06u%s\"", (const char *)v46, *((_DWORD *)a3 + 16), (const char *)v45);
    char v14 = ", \"walltime\": ";
  }
  else
  {
    char v14 = "";
  }
  long long v15 = 0uLL;
  memset(__str, 0, sizeof(__str));
  if ((a5 & 4) != 0 && *((_DWORD *)a3 + 22) != -1)
  {
    snprintf((char *)__str, 0x20uLL, "%d", *((_DWORD *)a3 + 22));
    long long v15 = 0uLL;
  }
  v45[14] = v15;
  v45[15] = v15;
  v45[12] = v15;
  v45[13] = v15;
  v45[10] = v15;
  v45[11] = v15;
  v45[8] = v15;
  v45[9] = v15;
  v45[6] = v15;
  v45[7] = v15;
  v45[4] = v15;
  v45[5] = v15;
  v45[2] = v15;
  v45[3] = v15;
  v45[0] = v15;
  v45[1] = v15;
  if ((a5 & 2) != 0)
  {
    name_for_thread = (char *)ktrace_get_name_for_thread(a2, (const void *)a3[5]);
    if (name_for_thread) {
      escape_string(a4, v45, 0x100uLL, name_for_thread);
    }
  }
  long long v17 = 0uLL;
  memset(v46, 0, 512);
  if ((a5 & 8) != 0)
  {
    escape_string(a4, v46, 0x200uLL, (char *)a3[9]);
    long long v17 = 0uLL;
    unint64_t v18 = ", \"eventname\": ";
  }
  else
  {
    unint64_t v18 = "";
  }
  __int16 v23 = v18;
  long long v42 = v17;
  long long v43 = v17;
  long long v40 = v17;
  long long v41 = v17;
  long long v38 = v17;
  long long v39 = v17;
  long long v36 = v17;
  long long v37 = v17;
  long long v34 = v17;
  long long v35 = v17;
  long long v32 = v17;
  long long v33 = v17;
  *(_OWORD *)&v31[32] = v17;
  *(_OWORD *)&v31[48] = v17;
  *(_OWORD *)uint64_t v31 = v17;
  *(_OWORD *)&v31[16] = v17;
  if ((a5 & 0x10) != 0)
  {
    __int16 v19 = (char *)a3[10];
    if (v19) {
      escape_string(a4, v31, 0x100uLL, v19);
    }
  }
  if (a4)
  {
    uint64_t v20 = "%llu";
    snprintf(v30, 0x20uLL, "%llu");
  }
  else
  {
    uint64_t v20 = "\"%llu\"";
    snprintf(v30, 0x20uLL, "\"%llu\"");
  }
  snprintf(v29, 0x20uLL, v20, a3[1]);
  snprintf(v28, 0x20uLL, v20, a3[2]);
  snprintf(v27, 0x20uLL, v20, a3[3]);
  snprintf(v26, 0x20uLL, v20, a3[4]);
  snprintf(v25, 0x20uLL, v20, a3[5]);
  if (a4 < 2) {
    return fprintf(a1, "{ \"timestampns\": %s%s%s%s%s, \"debugid\": %u, \"args\": [ %s, %s, %s, %s ], \"cpuid\": %u, \"threadid\": %s%s%s%s%s%s%s }", v30, v14, v47, v23, v46, *((unsigned int *)a3 + 12), v29, v28, v27, v26, *((unsigned int *)a3 + 13), v25);
  }
  if (a4 != 2) {
    ktrace_print_trace_point_cold_1();
  }
  if (a5) {
    __int16 v21 = ",";
  }
  else {
    __int16 v21 = "";
  }
  if ((a5 & 8) != 0) {
    unsigned int v22 = ",";
  }
  else {
    unsigned int v22 = "";
  }
  return fprintf(a1, "%s%s%s%s%s,%u,%s,%s,%s,%s,%u,%s%s%s%s%s%s%s", v30, v21, v47, v22, v46, *((unsigned int *)a3 + 12), v29, v28, v27, v26, *((unsigned int *)a3 + 13), v25);
}

uint64_t escape_string(uint64_t result, unsigned char *a2, unint64_t a3, char *__s)
{
  *a2 = 34;
  if (!__s)
  {
LABEL_7:
    int v10 = 1;
    goto LABEL_20;
  }
  if (result == 2)
  {
    unint64_t v7 = a3 - 2;
    int v8 = *__s;
    if (*__s) {
      BOOL v9 = v7 >= 2;
    }
    else {
      BOOL v9 = 0;
    }
    if (!v9) {
      goto LABEL_7;
    }
    int v13 = __s + 1;
    uint64_t v14 = 1;
    int v15 = 1;
    do
    {
      if (v8 == 34)
      {
        ++v15;
        a2[v14] = 34;
        LOBYTE(v8) = *(v13 - 1);
      }
      int v10 = v15 + 1;
      a2[v15] = v8;
      int v16 = *v13++;
      int v8 = v16;
      uint64_t v14 = v15 + 1;
      if (v16) {
        BOOL v17 = v7 > v10;
      }
      else {
        BOOL v17 = 0;
      }
      ++v15;
    }
    while (v17);
  }
  else
  {
    size_t v11 = strlen(__s);
    if (v11 >= a3 >> 2) {
      size_t v12 = a3 >> 2;
    }
    else {
      size_t v12 = v11;
    }
    uint64_t result = strsnvisx(a2 + 1, a3 - 2, __s, v12, 34, "\\\"\b\f\n\r\t");
    int v10 = result + 1;
  }
  if (v10 <= 0) {
    escape_string_cold_1();
  }
LABEL_20:
  *(_WORD *)&a2[v10] = 34;
  return result;
}

uint64_t ktrace_print_csv_header(FILE *a1, uint64_t a2, char a3)
{
  size_t v3 = ",walltime";
  unint64_t v4 = "";
  if ((a3 & 1) == 0) {
    size_t v3 = "";
  }
  uint64_t v5 = ",eventname";
  if ((a3 & 8) == 0) {
    uint64_t v5 = "";
  }
  uint64_t v6 = ",threadname";
  if ((a3 & 2) == 0) {
    uint64_t v6 = "";
  }
  unint64_t v7 = ",pid";
  if ((a3 & 4) == 0) {
    unint64_t v7 = "";
  }
  if ((a3 & 0x10) != 0) {
    unint64_t v4 = ",execname";
  }
  return fprintf(a1, "timestampns%s%s,debugid,arg1,arg2,arg3,arg4,cpuid,threadid%s%s%s", v3, v5, v6, v7, v4);
}

void thread_cputime_map_update(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 232));
  unsigned int v10 = a3 & 0xFFFFFFFC;
  if ((int)(a3 & 0xFFFFFFFC) <= 20971555)
  {
    if (v10 == 20971520 || v10 == 20971528)
    {
      if (a5)
      {
        size_t v11 = *(const void **)(a4 + 16);
        size_t v12 = *(const void **)(a4 + 40);
        uint64_t v13 = *(void *)a4;
      }
      else
      {
        size_t v11 = (const void *)*(unsigned int *)(a4 + 12);
        size_t v12 = (const void *)*(unsigned int *)(a4 + 24);
        uint64_t v13 = *(void *)a4 & 0xFFFFFFFFFFFFFFLL;
      }
      state = thread_cputime_get_state((CFDictionaryRef *)a2, v12);
      uint64_t v16 = state[1];
      if (!v16)
      {
        if (*(unsigned char *)(a2 + 16))
        {
          uint64_t v16 = *(void *)(a1 + 488);
        }
        else
        {
          uint64_t v16 = v13;
          if ((unint64_t)(*state + 1) >= 2) {
            ktrace_postprocess_file_internal_cold_1();
          }
        }
      }
      if (*state != -1) {
        void *state = *state + v13 - v16;
      }
      state[1] = 0;
      *((void *)thread_cputime_get_state((CFDictionaryRef *)a2, v11) + 1) = v13;
      return;
    }
LABEL_30:
    thread_cputime_map_update_cold_1();
  }
  if (v10 == 20971556)
  {
    if (a5) {
      BOOL v17 = *(const void **)(a4 + 40);
    }
    else {
      BOOL v17 = (const void *)*(unsigned int *)(a4 + 24);
    }
    __int16 v21 = thread_cputime_get_state((CFDictionaryRef *)a2, v17);
    if (*v21 != -1) {
      *__int16 v21 = -1;
    }
  }
  else
  {
    if (v10 != 117440524) {
      goto LABEL_30;
    }
    if (a5) {
      uint64_t v14 = *(const void **)(a4 + 8);
    }
    else {
      uint64_t v14 = (const void *)*(unsigned int *)(a4 + 8);
    }
    CFArrayRef Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)a2, v14);
    if (Value)
    {
      uint64_t v19 = *Value;
      uint64_t v20 = *(__CFDictionary **)a2;
      *(void *)(a2 + 8) += v19;
      CFDictionaryRemoveValue(v20, v14);
    }
  }
}

const void *thread_cputime_get_state(CFDictionaryRef *a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFArrayRef Value = CFDictionaryGetValue(*a1, a2);
  if (!Value)
  {
    uint64_t v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
    if (!v5) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFArrayRef Value = v5;
    CFDictionarySetValue(*a1, a2, v5);
  }
  return Value;
}

void thread_cputime_map_destroy(const void **a1)
{
  if (a1)
  {
    unsigned int v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

void thread_cputime_map_dropped_events(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = 1;
  CFDictionaryRef v2 = *(const __CFDictionary **)a2;
  if (!*(void *)a2) {
    ktrace_postprocess_file_internal_cold_1();
  }

  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)apply_clear_oncore, 0);
}

void apply_clear_oncore(uint64_t a1, void *a2)
{
  if (a2[1])
  {
    if (*a2 != -1) {
      a2[1] = 0;
    }
  }
}

CFMutableDictionaryRef ktrace_set_thread_cputime_enabled(CFMutableDictionaryRef result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableDictionaryRef v2 = result;
  if ((*((_WORD *)result + 112) & 3) != 0) {
    ktrace_set_thread_cputime_enabled_cold_4();
  }
  if (a2 && !*((_DWORD *)result + 68))
  {
    *((_DWORD *)result + 68) = 1;
    CFDictionaryValueCallBacks v5 = *(CFDictionaryValueCallBacks *)byte_1F0C3CE68;
    size_t v3 = (CFMutableDictionaryRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x1020040545B2139uLL);
    *((void *)v2 + 51) = v3;
    if (!v3) {
      ktrace_postprocess_file_internal_cold_1();
    }
    unint64_t v4 = v3;
    uint64_t result = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &v5);
    *unint64_t v4 = result;
    if (!result) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  return result;
}

uint64_t ktrace_get_thread_cputime_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 272);
}

void *ktrace_get_cputime_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*(_DWORD *)(a1 + 272)) {
    return 0;
  }
  uint64_t result = CFDictionaryGetValue(**(CFDictionaryRef **)(a1 + 408), a2);
  if (result)
  {
    unint64_t v4 = result;
    uint64_t result = (void *)*result;
    uint64_t v5 = v4[1];
    if (v5) {
      return (void *)((char *)result + *(void *)(a1 + 496) - v5);
    }
  }
  return result;
}

uint64_t ktrace_get_cputime_total(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*(_DWORD *)(a1 + 272)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 408);
  CFDictionaryRef v3 = *(const __CFDictionary **)v2;
  if (!*(void *)v2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v6 = a1;
  uint64_t v7 = v4;
  CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)apply_sum_time, &v6);
  return v7;
}

void apply_sum_time(uint64_t a1, void *a2, void *a3)
{
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*a2 != -1)
  {
    uint64_t v3 = a3[1] + *a2;
    a3[1] = v3;
    uint64_t v4 = a2[1];
    if (v4) {
      a3[1] = v3 - v4 + *(void *)(*a3 + 496);
    }
  }
}

uint64_t clear_events(uint64_t result, void *a2)
{
  for (uint64_t i = 0; i != 1024; ++i)
  {
    uint64_t v3 = *(void *)(result + 8 * i);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 56);
      for (j = *(void *)(result + 8 * i); v4; uint64_t v4 = *(void *)(v4 + 56))
        uint64_t j = v4;
      *(void *)(j + 56) = *a2;
      *a2 = v3;
      *(void *)(result + 8 * i) = 0;
    }
  }
  return result;
}

__n128 insert_start_event(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 40);
  uint64_t v6 = v5 & 0x3FF;
  uint64_t v7 = *(void **)(a1 + 8 * v6);
  if (!v7) {
    goto LABEL_9;
  }
  if (*((void *)v7 + 5) == v5 && *((_DWORD *)v7 + 12) == *(_DWORD *)(a3 + 48))
  {
    *(void *)(a1 + 8 * v6) = *((void *)v7 + 7);
    goto LABEL_13;
  }
  uint64_t v8 = *((void *)v7 + 7);
  if (!v8)
  {
LABEL_9:
    uint64_t v7 = *a2;
    if (*a2) {
      *a2 = (void *)*((void *)v7 + 7);
    }
    else {
      uint64_t v7 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
    }
    goto LABEL_13;
  }
  while (*(void *)(v8 + 40) != v5 || *(_DWORD *)(v8 + 48) != *(_DWORD *)(a3 + 48))
  {
    uint64_t v8 = *(void *)(v8 + 56);
    if (!v8) {
      goto LABEL_9;
    }
  }
  BOOL v9 = *(void **)(v8 + 56);
  *((void *)v7 + 7) = v9;
  BOOL v10 = v7 == v9;
  uint64_t v7 = (void *)v8;
  if (v10) {
    ktrace_postprocess_file_internal_cold_1();
  }
LABEL_13:
  __n128 result = *(__n128 *)a3;
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v13 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v7 + 3) = v13;
  *(__n128 *)uint64_t v7 = result;
  *((_OWORD *)v7 + 1) = v12;
  *((_DWORD *)v7 + 12) &= 0xFFFFFFFC;
  uint64_t v14 = *(void **)(a1 + 8 * v6);
  *((void *)v7 + 7) = v14;
  *(void *)(a1 + 8 * v6) = v7;
  if (v7 == v14) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return result;
}

uint64_t match_end_event(uint64_t a1, long long **a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = *(void *)(a3 + 40);
  uint64_t v5 = *(long long **)(a1 + 8 * (v4 & 0x3FF));
  if (!v5) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a3 + 48) & 0xFFFFFFFC;
  if (*((void *)v5 + 5) != v4 || *((_DWORD *)v5 + 12) != v6)
  {
    uint64_t v7 = (long long *)*((void *)v5 + 7);
    if (v7)
    {
      while (*((void *)v7 + 5) != v4 || *((_DWORD *)v7 + 12) != v6)
      {
        uint64_t v7 = (long long *)*((void *)v7 + 7);
        if (!v7) {
          return 0;
        }
      }
      BOOL v9 = (long long *)*((void *)v7 + 7);
      *((void *)v5 + 7) = v9;
      BOOL v10 = v5 == v9;
      uint64_t v5 = v7;
      if (v10) {
        ktrace_postprocess_file_internal_cold_1();
      }
      goto LABEL_11;
    }
    return 0;
  }
  *(void *)(a1 + 8 * (v4 & 0x3FF)) = *((void *)v5 + 7);
LABEL_11:
  long long v11 = *v5;
  long long v12 = v5[1];
  long long v13 = v5[3];
  a4[2] = v5[2];
  a4[3] = v13;
  *a4 = v11;
  a4[1] = v12;
  *((void *)v5 + 7) = *a2;
  *a2 = v5;
  return 1;
}

void *ktrace_file_create(uint64_t a1, char *a2)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v3 = open(a2, 1538, 438);
  if (v3 == -1) {
    return 0;
  }

  return ktrace_file_create_fd(a1, v3);
}

void *ktrace_file_create_fd(uint64_t a1, int a2)
{
  if (a2 < 0) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v4 = ktrace_file_alloc_fd(a2, 1);
  if (!v4)
  {
    int v7 = *__error();
    close(a2);
    goto LABEL_6;
  }
  uint64_t v5 = (void *)v4;
  int internal = ktrace_file_create_internal(v4, a1);
  if (internal)
  {
    int v7 = internal;
    ktrace_file_close(v5);
LABEL_6:
    uint64_t v5 = 0;
    *__error() = v7;
  }
  return v5;
}

void *ktrace_file_create_memory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v4 = ktrace_file_alloc_memory(0, 0, a2, a3);
  uint64_t v5 = v4;
  if (v4 && ktrace_file_create_internal((uint64_t)v4, a1))
  {
    ktrace_file_close(v5);
    return 0;
  }
  return v5;
}

void *ktrace_file_alloc_memory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v9 = ktrace_file_alloc();
  BOOL v10 = (void *)v8;
  if (v8)
  {
    *(_DWORD *)(v8 + 16) = 2;
    *(_DWORD *)(v8 + 196) = -1;
    *(void *)(v8 + 256) = a3;
    *(void *)(v8 + 264) = a4;
    if (a1)
    {
      *(void *)(v8 + 280) = a2;
      *(void *)(v8 + 240) = a1;
      *(void *)(v8 + 248) = a2;
      if (a3)
      {
        *(unsigned char *)(v8 + 296) = 1;
      }
      else if (!a2)
      {
        ktrace_postprocess_file_internal_cold_1();
      }
    }
    else
    {
      if (!a3) {
        ktrace_postprocess_file_internal_cold_1();
      }
      *(unsigned char *)(v8 + 296) = 1;
      uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, double))(a3 + 16))(a3, 0, 0, 0x2000, v9);
      v10[30] = v11;
      if (v11)
      {
        v10[31] = 0x2000;
      }
      else
      {
        *__error() = 12;
        ktrace_file_close(v10);
        return 0;
      }
    }
  }
  return v10;
}

uint64_t ktrace_file_create_internal(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v10 = ktrace_file_write_header_system_default(a1);
    if (v10) {
      return v10;
    }
    goto LABEL_10;
  }
  *(void *)uuid_t out = 0x155AA0300;
  *(void *)&out[8] = 40;
  uint64_t v21 = *(void *)(a2 + 188);
  long long v22 = *(_OWORD *)(a2 + 160);
  uint64_t v23 = *(void *)(a2 + 176);
  int v24 = *(_DWORD *)(a2 + 184);
  BOOL v25 = *(unsigned char *)(a2 + 298) != 0;
  ktrace_file_write_header_internal(a1, (uint64_t)out);
  uint64_t v10 = v9;
  if (!v9)
  {
    *(_DWORD *)(a1 + 20) = 4;
    uint64_t v16 = 0;
    BOOL v17 = &v16;
    uint64_t v18 = 0x2000000000;
    int v19 = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    v15[2] = __ktrace_file_write_header_template_block_invoke;
    v15[3] = &unk_1E6062090;
    v15[4] = &v16;
    v15[5] = a1;
    unsigned int v11 = ktrace_file_header_iterate(a2, 0, (uint64_t)v15, v4, v5, v6, v7, v8);
    unsigned int v12 = *((_DWORD *)v17 + 6);
    if (v12) {
      uint64_t v10 = v12;
    }
    else {
      uint64_t v10 = v11;
    }
    _Block_object_dispose(&v16, 8);
  }
  if (!v10)
  {
LABEL_10:
    memset(out, 0, sizeof(out));
    uuid_generate_random(out);
    if (ktrace_file_header_append_chunk(a1, 35841, 0, 0, out, 16) || (uint64_t v10 = *__error(), !v10))
    {
      uint64_t v10 = 0;
      uint64_t v13 = *(void *)(a1 + 288);
      *(void *)(a1 + 56) = 16;
      *(void *)(a1 + 64) = v13;
      *(void *)(a1 + 72) = v13;
    }
  }
  return v10;
}

void ktrace_file_close(void *cf)
{
  if (!cf) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (cf[25]) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (CFGetRetainCount(cf) != 1) {
    ktrace_postprocess_file_internal_cold_1();
  }

  CFRelease(cf);
}

uint64_t ktrace_file_alloc_fd(int a1, char a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(&v7, 0, sizeof(v7));
  if (a1 == -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (fstat(a1, &v7) < 0) {
    return 0;
  }
  if ((v7.st_mode & 0xF000) == 0x4000)
  {
    uint64_t v4 = 0;
    *__error() = 21;
  }
  else
  {
    ktrace_file_alloc();
    uint64_t v4 = v5;
    if (v5)
    {
      bzero(&v8, 0x878uLL);
      if (!fstatfs(a1, &v8) && (v8.f_flags & 0x1000) != 0) {
        *(unsigned char *)(v4 + 301) = 1;
      }
      *(_DWORD *)(v4 + 16) = 1;
      *(_DWORD *)(v4 + 196) = a1;
      *(unsigned char *)(v4 + 296) = a2;
    }
  }
  return v4;
}

uint64_t ktrace_file_create_chunk_sink(const void *a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  ktrace_file_alloc();
  uint64_t v3 = v2;
  if (v2)
  {
    *(_DWORD *)(v2 + 196) = -1;
    *(_DWORD *)(v2 + 16) = 4;
    *(void *)(v2 + 272) = _Block_copy(a1);
    *(unsigned char *)(v3 + 299) = 1;
    *(unsigned char *)(v3 + 296) = 1;
  }
  return v3;
}

uint64_t ktrace_file_open(const char *a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2) {
    int v3 = open(a1, 2);
  }
  else {
    int v3 = open(a1, 0);
  }
  if (v3 == -1) {
    return 0;
  }

  return ktrace_file_open_fd(v3, a2);
}

uint64_t ktrace_file_open_fd(int a1, int a2)
{
  if (a1 == -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v4 = ktrace_file_alloc_fd(a1, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    off_t v6 = fd_size(*(_DWORD *)(v4 + 196));
    *(void *)(v5 + 280) = v6;
    if (v6 < 0)
    {
      close(a1);
      *(_DWORD *)(v5 + 196) = -1;
      ktrace_file_close((void *)v5);
      uint64_t v5 = 0;
      *__error() = 79;
    }
    else
    {
      int v7 = ktrace_file_open_internal(v5, a2);
      if (v7)
      {
        int v8 = v7;
        ktrace_file_close((void *)v5);
        uint64_t v5 = 0;
        *__error() = v8;
      }
    }
  }
  else
  {
    close(a1);
  }
  return v5;
}

uint64_t ktrace_file_open_internal(uint64_t a1, int a2)
{
  int v37 = 0;
  if (ktrace_file_read(a1, &v37, 4uLL, 0) <= 3)
  {
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_open_internal_cold_1();
    }
LABEL_4:
    *__error() = v9;
LABEL_5:
    unsigned int v10 = *__error();
    goto LABEL_67;
  }
  if (v37 <= 1437204736)
  {
    if (v37 != 4096)
    {
      if (v37 == 1095914544)
      {
        *(_DWORD *)(a1 + 20) = 5;
        uint64_t v38 = 0;
        long long v39 = &v38;
        uint64_t v40 = 0x2000000000;
        int v41 = 0;
        *(unsigned char *)(a1 + 296) = 0;
        if (*(uint64_t *)(a1 + 280) <= 4096)
        {
LABEL_23:
          *(void *)&long long v42 = MEMORY[0x1E4F143A8];
          *((void *)&v42 + 1) = 0x40000000;
          *(void *)&long long v43 = __parse_artrace_file_block_invoke;
          *((void *)&v43 + 1) = &unk_1E60620B8;
          *(void *)&long long v44 = &v38;
          *((void *)&v44 + 1) = a1;
          if (ktrace_file_iterate(a1, 0, (uint64_t)&v42, v4, v5, v6, v7, v8)) {
            unsigned int v10 = 1;
          }
          else {
            unsigned int v10 = *((_DWORD *)v39 + 6) != 0;
          }
        }
        else
        {
          int64_t v15 = 4096;
          while (1)
          {
            *(void *)&long long v42 = 0;
            if (ktrace_file_read(a1, &v42, 8uLL, v15) != 8) {
              break;
            }
            uint64_t v16 = v15 + 8;
            uint64_t v17 = DWORD1(v42);
            uint64_t v18 = ktrace_chunk_create(a1, (int)v42 + 20480, 0, 0, DWORD1(v42), v16);
            if (!v18)
            {
              int v34 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                ktrace_file_open_internal_cold_3();
              }
              *__error() = v34;
              int v33 = *__error();
              goto LABEL_65;
            }
            int v19 = v18;
            int appended = ktrace_chunk_array_append_internal(a1 + 24, v18);
            if (appended)
            {
              int v35 = appended;
              free(v19);
              *__error() = v35;
              int v33 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                ktrace_file_open_internal_cold_4();
              }
              goto LABEL_65;
            }
            *(void *)(a1 + 72) = *(void *)(a1 + 64);
            *(void *)(a1 + 32) = v19;
            int64_t v15 = v16 + v17;
            if (v15 >= *(void *)(a1 + 280)) {
              goto LABEL_23;
            }
          }
          int v32 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
            ktrace_file_open_internal_cold_5();
          }
          *__error() = v32;
          __error();
          int v33 = 0;
LABEL_65:
          *__error() = v33;
          unsigned int v10 = *__error();
        }
        _Block_object_dispose(&v38, 8);
        goto LABEL_67;
      }
      if (v37 == 1437204736)
      {
        int v11 = 1;
LABEL_26:
        *(_DWORD *)(a1 + 20) = v11;
        unsigned int v14 = parse_v1_file(a1);
        goto LABEL_27;
      }
      goto LABEL_38;
    }
    *(_DWORD *)(a1 + 20) = 4;
    uint64_t v12 = a1;
    int v13 = 1;
LABEL_16:
    unsigned int v14 = parse_v3_header(v12, v13);
LABEL_27:
    unsigned int v10 = v14;
    goto LABEL_67;
  }
  switch(v37)
  {
    case 1437204737:
      int v11 = 2;
      goto LABEL_26;
    case 1437204992:
      *(_DWORD *)(a1 + 20) = 3;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_file_open_internal_cold_8();
      }
      *(unsigned char *)(a1 + 296) = 0;
      if (ktrace_file_read(a1, &v42, 0x120uLL, 0) != 288)
      {
        int v9 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_open_internal_cold_7();
        }
        goto LABEL_4;
      }
      *(void *)(a1 + 168) = *((void *)&v42 + 1);
      *(_DWORD *)(a1 + 176) = v43;
      unint64_t v21 = 1000000000;
      if (*((void *)&v43 + 1))
      {
        unint64_t v22 = *((void *)&v43 + 1);
        unint64_t v23 = 1000000000;
        do
        {
          unint64_t v21 = v22;
          unint64_t v22 = v23 % v22;
          unint64_t v23 = v21;
        }
        while (v22);
      }
      unint64_t v24 = *((void *)&v43 + 1) / v21;
      *(_DWORD *)(a1 + 188) = 0x3B9ACA00 / v21;
      *(_DWORD *)(a1 + 192) = v24;
      if (BYTE4(v43))
      {
        *(unsigned char *)(a1 + 298) = 1;
        int v25 = 32;
      }
      else
      {
        int v25 = 32;
        if (!*(unsigned char *)(a1 + 298)) {
          int v25 = 28;
        }
      }
      unint64_t v28 = (-(v25 * DWORD1(v42)) & 0xFFCLL) + v25 * (uint64_t)SDWORD1(v42);
      if (*(void *)(a1 + 280) >= v28)
      {
        uint64_t v30 = ktrace_chunk_create(a1, 7424, 1, 0, v28 - 288, 288);
        if (!v30) {
          goto LABEL_5;
        }
        uint64_t v31 = v30;
        unsigned int v10 = ktrace_chunk_array_append_internal(a1 + 24, v30);
        if (v10)
        {
          free(v31);
        }
        else
        {
          *(void *)(a1 + 72) = *(void *)(a1 + 64);
          *(void *)(a1 + 32) = v31;
          if (!synthesize_events_chunk(a1, (-(int)v28 & 0xFFCLL) + v28)) {
            goto LABEL_5;
          }
        }
        goto LABEL_67;
      }
      int v29 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_open_internal_cold_6();
      }
      *__error() = v29;
LABEL_52:
      unsigned int v10 = 22;
      goto LABEL_67;
    case 1437205248:
      *(_DWORD *)(a1 + 20) = 4;
      uint64_t v12 = a1;
      int v13 = 0;
      goto LABEL_16;
  }
LABEL_38:
  *(_DWORD *)(a1 + 20) = 0;
  LODWORD(v42) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  if ((unint64_t)ktrace_file_read(a1, &v42, 4uLL, 0) <= 3)
  {
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_open_internal_cold_2();
    }
    goto LABEL_4;
  }
  if (v42 > 0x186A0) {
    goto LABEL_52;
  }
  if (v42)
  {
    uint64_t v26 = synthesize_thread_map_chunk(a1, 4uLL, v42);
    if (!v26) {
      goto LABEL_5;
    }
    unint64_t v27 = v26[1] + v26[2];
  }
  else
  {
    unint64_t v27 = 4;
  }
  if (!synthesize_events_chunk(a1, v27)) {
    goto LABEL_5;
  }
  unsigned int v10 = 0;
LABEL_67:
  if (*(unsigned __int8 *)(a1 + 296) == a2) {
    return v10;
  }
  else {
    return 79;
  }
}

void *ktrace_file_open_memory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = ktrace_file_alloc_memory(a1, a2, a3, a4);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = ktrace_file_open_internal((uint64_t)v4, *((unsigned __int8 *)v4 + 296));
    if (v6)
    {
      int v7 = v6;
      ktrace_file_close(v5);
      uint64_t v5 = 0;
      *__error() = v7;
    }
  }
  return v5;
}

uint64_t ktrace_file_get_memory(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v3 = *(void *)(a1 + 240);
  if (!v3) {
    return 79;
  }
  uint64_t v4 = 0;
  *a2 = v3;
  *a3 = *(void *)(a1 + 280);
  return v4;
}

uint64_t ktrace_file_get_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t ktrace_file_read(uint64_t a1, void *a2, size_t a3, unint64_t a4)
{
  *__error() = 0;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v8 = *(void *)(a1 + 240);
  if (v8)
  {
    unint64_t v9 = *(void *)(a1 + 248);
    if (v9 < a4 || a4 + a3 > v9)
    {
      int v11 = __error();
      int v12 = 22;
LABEL_12:
      *int v11 = v12;
      return -1;
    }
    else
    {
      memcpy(a2, (const void *)(v8 + a4), a3);
    }
  }
  else
  {
    while (1)
    {
      unint64_t v10 = pread(*(_DWORD *)(a1 + 196), a2, a3, a4);
      if (v10 < a3)
      {
        int v11 = __error();
        int v12 = 79;
        goto LABEL_12;
      }
      if (v10 != -1) {
        return v10;
      }
      if (*__error() != 4) {
        return -1;
      }
    }
  }
  return a3;
}

uint64_t ktrace_file_ensure_space(void *a1, unint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a1[30]) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v3 = a1[31];
  if (v3 >= a2) {
    return 0;
  }
  unint64_t v4 = a1[31];
  while (v4 >= v3)
  {
    unint64_t v4 = 2 * v4 - 1;
    if (v4 >= a2) {
      goto LABEL_11;
    }
  }
  unint64_t v4 = a2;
LABEL_11:
  uint64_t v6 = (*(uint64_t (**)(void))(a1[32] + 16))();
  if (!v6) {
    return 12;
  }
  uint64_t v7 = v6;
  uint64_t result = 0;
  a1[30] = v7;
  a1[31] = v4;
  return result;
}

uint64_t current_system_is_64_bit()
{
  return 1;
}

uint64_t ktrace_chunk_array_validate_chunk(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v4 = *a3;
  if (*a3)
  {
    if (v4[3] >= *(void *)(a2 + 16))
    {
      int v6 = *__error();
      ktrace_log_init();
      uint64_t v7 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = v4[3];
        uint64_t v9 = *(void *)(a2 + 16);
        int v10 = 134218496;
        uint64_t v11 = v8;
        __int16 v12 = 2048;
        uint64_t v13 = v9;
        __int16 v14 = 1024;
        int v15 = v6;
        _os_log_error_impl(&dword_1B39A5000, v7, OS_LOG_TYPE_ERROR, "attempt to iterate chunk at position %zu with only %zu chunks (%{errno}d)", (uint8_t *)&v10, 0x1Cu);
      }
      *__error() = v6;
      return 79;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return ktrace_chunk_array_next(a1, a2, a3);
  }
}

uint64_t ktrace_file_iterate(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v19 = a2;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 16) == 4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10)
  {
    int v11 = *(_DWORD *)(a1 + 216);
    return ktrace_file_iterate_subfile(v10, v11, 0, a3, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v13 = ktrace_chunk_array_validate_chunk(a1, a1 + 24, &v19);
    if (v13)
    {
      uint64_t v14 = v13;
      int v15 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_iterate_cold_5();
      }
      *__error() = v15;
    }
    else
    {
      if (v19)
      {
        uint64_t v18 = v19;
        while ((*(unsigned int (**)(uint64_t))(a3 + 16))(a3))
        {
          uint64_t v16 = v18;
          uint64_t v17 = ktrace_chunk_array_next(a1, a1 + 24, &v18);
          if (v18 == v16)
          {
            if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_FAULT)) {
              ktrace_file_iterate_cold_4();
            }
            return 5;
          }
          uint64_t v14 = v17;
          if (v17 || !v18) {
            return v14;
          }
        }
      }
      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_file_iterate_cold_3();
        }
      }
      return 0;
    }
    return v14;
  }
}

uint64_t ktrace_file_iterate_subfile(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 16) == 4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  v27[0] = 0;
  v27[1] = v27;
  if (a3) {
    int v8 = 32778;
  }
  else {
    int v8 = 32779;
  }
  v27[2] = 0x2000000000;
  char v28 = 1;
  uint64_t v23 = 0;
  unint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  char v26 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  int v22 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  void v12[2] = __ktrace_file_iterate_subfile_block_invoke;
  uint64_t v12[3] = &unk_1E6062108;
  int v13 = v8;
  int v14 = a2;
  v12[6] = &v19;
  v12[7] = &v23;
  v12[8] = v27;
  v12[4] = a4;
  v12[5] = &v15;
  uint64_t v9 = ((uint64_t (*)(uint64_t, void, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))ktrace_file_iterate)(a1, 0, v12, a4, a5, a6, a7, a8);
  *((_DWORD *)v16 + 6) = v9;
  uint64_t v10 = *((unsigned int *)v20 + 6);
  if (!v10)
  {
    *((_DWORD *)v20 + 6) = v9;
    uint64_t v10 = v9;
    if (!v9) {
      uint64_t v10 = 2 * (*((unsigned char *)v24 + 24) == 0);
    }
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(v27, 8);
  return v10;
}

void *ktrace_file_append_file(uint64_t a1, int a2, __int16 a3, __int16 a4, char *a5, unint64_t a6, off_t a7)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v13 = open(a5, 0);
  if ((v13 & 0x80000000) == 0)
  {
    int v14 = v13;
    memset(&v25, 0, sizeof(v25));
    if (fstat(v13, &v25) == -1)
    {
      int v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_file_cold_2();
      }
    }
    else
    {
      st_size_t size = v25.st_size;
      size_t v16 = v25.st_size - a6;
      if (v25.st_size <= a6)
      {
        *__error() = 34;
        int v21 = *__error();
        ktrace_log_init();
        uint64_t v23 = ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134218496;
          unint64_t v27 = a6;
          __int16 v28 = 2048;
          off_t v29 = st_size;
          __int16 v30 = 1024;
          int v31 = v21;
          _os_log_error_impl(&dword_1B39A5000, v23, OS_LOG_TYPE_ERROR, "invalid file size to append, offset = %jd, filesize_t size = %jd (%{errno}d)", buf, 0x1Cu);
        }
      }
      else
      {
        uint64_t v17 = (UInt8 *)mmap(0, v25.st_size - a6, 1, 1, v14, a6);
        if (v17 != (UInt8 *)-1)
        {
          int v18 = v17;
          if (st_size >= a7) {
            CFIndex v19 = a7;
          }
          else {
            CFIndex v19 = st_size;
          }
          int appended = ktrace_file_append_chunk(a1, a2, a3, a4, v17, v19);
          if (munmap(v18, v16) != -1) {
            goto LABEL_22;
          }
          int v21 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
            ktrace_file_append_file_cold_4();
          }
LABEL_21:
          *__error() = v21;
LABEL_22:
          close(v14);
          return appended;
        }
        int v21 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_append_file_cold_3();
        }
      }
    }
    int appended = 0;
    goto LABEL_21;
  }
  int v22 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_file_append_file_cold_1();
  }
  int appended = 0;
  *__error() = v22;
  return appended;
}

void *ktrace_file_append_subchunk(uint64_t a1, uint64_t a2, int a3, __int16 a4, __int16 a5, UInt8 *a6, CFIndex a7)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(void *)(a1 + 152) == a2)
  {
    int appended = ktrace_file_append_start_subchunk(a1, a2, a3, a4, a5);
    if (appended
      && (ktrace_file_append_data(a1, (uint64_t)appended, a6, a7)
       || a1 != -1 && ktrace_file_append_finish(a1, (uint64_t)appended)))
    {
      return 0;
    }
  }
  else
  {
    int appended = 0;
    *__error() = 22;
  }
  return appended;
}

void *ktrace_file_append_start_subchunk(uint64_t a1, uint64_t a2, int a3, __int16 a4, __int16 a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(void *)(a1 + 152) == a2)
  {
    uint64_t result = ktrace_file_append_start_internal(a1, a3, a4, a5);
    if (result)
    {
      *(_WORD *)(a2 + 36) |= 0x8000u;
      result[5] = a2;
      *(void *)(a1 + 152) = result;
    }
  }
  else
  {
    uint64_t v7 = __error();
    uint64_t result = 0;
    *uint64_t v7 = 22;
  }
  return result;
}

void *ktrace_file_append(uint64_t a1, void *a2)
{
  uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
  if (v4)
  {
    uint64_t v5 = (UInt8 *)ktrace_chunk_map_data(a2, 0, v4);
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  int v7 = ktrace_chunk_tag((uint64_t)a2);
  __int16 v8 = ktrace_chunk_version_major((uint64_t)a2);
  __int16 v9 = ktrace_chunk_version_minor((uint64_t)a2);
  int appended = ktrace_file_append_chunk(a1, v7, v8, v9, v5, v4);
  if (v5) {
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, v4);
  }
  return appended;
}

uint64_t ktrace_file_header_iterate(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v16 = a2;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10)
  {
    int v11 = *(_DWORD *)(a1 + 216);
    return ktrace_file_iterate_subfile(v10, v11, 1, a3, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v13 = ktrace_chunk_array_validate_chunk(a1, a1 + 80, &v16);
    if (v13)
    {
      uint64_t v14 = v13;
      int v15 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_iterate_cold_5();
      }
      *__error() = v15;
    }
    else
    {
      if (v16)
      {
        while ((*(unsigned int (**)(uint64_t))(a3 + 16))(a3))
        {
          uint64_t v14 = ktrace_chunk_array_next(a1, a1 + 80, &v16);
          if (v14 || !v16) {
            return v14;
          }
        }
      }
      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_file_iterate_cold_3();
        }
      }
      return 0;
    }
    return v14;
  }
}

uint64_t ktrace_file_append_live_ktrace_transformed(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, void *a5, uint64_t a6)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*(unsigned char *)(a1 + 296))
  {
    *__error() = 22;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_cold_3();
    }
    goto LABEL_35;
  }
  bzero(v48, 0x388uLL);
  if (a4 <= 1 && !a6)
  {
    *__error() = 22;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_transformed_cold_8();
    }
LABEL_35:
    *__error() = v12;
    return *__error();
  }
  if (a4 < 2)
  {
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = v48;
    ktrace_compressor_init(v48, a4);
  }
  uint64_t v43 = 0;
  uint64_t v40 = malloc_type_calloc(1uLL, 0x400000uLL, 0xED05397CuLL);
  if (!v40)
  {
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_transformed_cold_3();
    }
    goto LABEL_35;
  }
  long long v39 = (UInt8 *)malloc_type_calloc(1uLL, 0x400000uLL, 0x203E65ACuLL);
  if (!v39)
  {
    uint64_t v20 = *__error();
    int v26 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_transformed_cold_4();
    }
    int v16 = 0;
    *__error() = v26;
    goto LABEL_52;
  }
  uint64_t v37 = a6;
  unsigned int v34 = a4;
  int v35 = a5;
  unint64_t v13 = 1000000 * a3;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    ktrace_file_append_live_ktrace_transformed_cold_7();
  }
  uint64_t v14 = mach_absolute_time();
  unint64_t v15 = ktrace_current_timebase();
  int v16 = 0;
  unint64_t v17 = HIDWORD(v15);
  uint64_t v18 = v15;
  uint64_t v36 = v14 + v13 / v15 * HIDWORD(v15);
  while (1)
  {
    size_t v42 = 0x400000;
    if (v13) {
      uint64_t v19 = kdebug_wait_and_read_events(v40, &v42, v13 / 0xF4240);
    }
    else {
      uint64_t v19 = kdebug_read_events(v40, &v42);
    }
    uint64_t v20 = v19;
    if (v19)
    {
      *__error() = v19;
      int v27 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_live_ktrace_transformed_cold_6();
      }
      goto LABEL_46;
    }
    if (!v42) {
      break;
    }
    unint64_t v21 = tracepoint_timestamp((uint64_t)v40 + v42 - 64, 1);
    unint64_t v22 = v21;
    if (!a2 || v43 || v21 >= a2)
    {
      uint64_t v41 = 0;
      uint64_t appended = append_transformed_events_internal(a1, &v43, (uint64_t)v40, v42, v39, 1, &v41, (uint64_t)v38, v37);
      if (appended)
      {
        uint64_t v20 = appended;
        *__error() = appended;
        int v27 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_append_live_ktrace_transformed_cold_5();
        }
LABEL_46:
        *__error() = v27;
        goto LABEL_51;
      }
      v16 += v41;
      if (v22 > v36)
      {
        ktrace_log_init();
        uint64_t v32 = ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 134218240;
          uint64_t v45 = v36;
          __int16 v46 = 2048;
          unint64_t v47 = v22;
          off_t v29 = "ending transformed append: cutoff timestamp was %llu, newest event is %llu\n";
          __int16 v30 = v32;
          uint32_t v31 = 22;
LABEL_49:
          _os_log_impl(&dword_1B39A5000, v30, OS_LOG_TYPE_INFO, v29, buf, v31);
        }
        goto LABEL_50;
      }
    }
    if (a3)
    {
LABEL_31:
      uint64_t v24 = mach_absolute_time();
      v13 -= (v24 - v14) * v18 / v17;
      uint64_t v14 = v24;
      if ((v13 & 0x8000000000000000) != 0) {
        goto LABEL_50;
      }
    }
    else if ((v13 & 0x8000000000000000) != 0)
    {
      goto LABEL_50;
    }
  }
  if (a3) {
    goto LABEL_31;
  }
  ktrace_log_init();
  uint64_t v28 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    off_t v29 = "ending transformed append: no more events";
    __int16 v30 = v28;
    uint32_t v31 = 2;
    goto LABEL_49;
  }
LABEL_50:
  uint64_t v20 = 0;
LABEL_51:
  a5 = v35;
  a4 = v34;
LABEL_52:
  free(v40);
  free(v39);
  if (v43)
  {
    uint64_t v33 = finish_events_chunk(a1, v43, a4 > 1, v16);
    uint64_t v20 = v33;
    if (a5)
    {
      if (!v33) {
        *a5 = v43;
      }
    }
  }
  return v20;
}

uint64_t ktrace_file_append_live_filtered_ktrace(uint64_t a1, unsigned int a2, unsigned int a3, void *a4, uint64_t a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a3 < 5)
  {
    return ktrace_file_append_live_ktrace_transformed(a1, 0, a2, a3, a4, a5);
  }
  else
  {
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_filtered_ktrace_cold_2();
    }
    *__error() = v5;
    return 22;
  }
}

void *ktrace_file_compress(uint64_t a1, unsigned int a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 <= 1 || *(_DWORD *)(a1 + 20) != 4)
  {
    fd = 0;
    *__error() = 45;
    return fd;
  }
  bzero(&__from, 0x400uLL);
  bzero(&__to, 0x400uLL);
  int v4 = *(_DWORD *)(a1 + 196);
  if (v4 != -1)
  {
    if (fcntl(v4, 50, &__to) < 0)
    {
      int v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_compress_cold_3();
      }
    }
    else
    {
      __sprintf_chk((char *)&__from, 0, 0x400uLL, "%s.XXXXXX", (const char *)&__to);
      int v5 = mkstemp((char *)&__from);
      if (v5 < 0)
      {
        int v18 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_compress_cold_4();
        }
      }
      else
      {
        int v6 = v5;
        if ((fcopyfile(v4, v5, 0, 7u) & 0x80000000) == 0)
        {
          fd = ktrace_file_create_fd(a1, v6);
          goto LABEL_12;
        }
        int v20 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_compress_cold_5();
        }
        *__error() = v20;
        int v18 = *__error();
        close(v6);
      }
    }
    fd = 0;
    *__error() = v18;
    return fd;
  }
  fd = ktrace_file_create_memory(a1, *(void *)(a1 + 256), *(void *)(a1 + 264));
  int v6 = -1;
LABEL_12:
  if (fd)
  {
    uint64_t v26 = 0;
    int v27 = &v26;
    uint64_t v28 = 0x2000000000;
    int v29 = 0;
    __int16 v9 = malloc_type_malloc(0x400000uLL, 0xBA92C05FuLL);
    if (v9)
    {
      unint64_t v15 = v9;
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      v24[2] = __ktrace_file_compress_block_invoke;
      v24[3] = &unk_1E6061E70;
      void v24[5] = fd;
      v24[6] = v9;
      unsigned int v25 = a2;
      v24[4] = &v26;
      int v16 = ktrace_file_iterate(a1, 0, (uint64_t)v24, v10, v11, v12, v13, v14);
      if (v16)
      {
        *((_DWORD *)v27 + 6) = v16;
      }
      else if (!*((_DWORD *)v27 + 6) && (*(_DWORD *)(a1 + 196) & 0x80000000) == 0)
      {
        rename(&__from, &__to, v17);
        if (v21 < 0)
        {
          *((_DWORD *)v27 + 6) = *__error();
          int v22 = *__error();
          ktrace_log_init();
          uint64_t v23 = ktrace_file_log;
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            p_from = &__from;
            __int16 v32 = 2080;
            p_to = &__to;
            __int16 v34 = 1024;
            int v35 = v22;
            _os_log_error_impl(&dword_1B39A5000, v23, OS_LOG_TYPE_ERROR, "failed to rename %s to %s (%{errno}d)", buf, 0x1Cu);
          }
          *__error() = v22;
        }
      }
      free(v15);
      if (!*((_DWORD *)v27 + 6))
      {
        ktrace_file_close((void *)a1);
        goto LABEL_33;
      }
      if ((v6 & 0x80000000) == 0) {
        unlink((const char *)&__from);
      }
      ktrace_file_close(fd);
      int v19 = *((_DWORD *)v27 + 6);
    }
    else
    {
      int v19 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_compress_cold_2();
      }
    }
    fd = 0;
    *__error() = v19;
LABEL_33:
    _Block_object_dispose(&v26, 8);
  }
  return fd;
}

uint64_t __ktrace_file_compress_block_invoke(uint64_t a1, void *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 7680)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) >= 9
      && !append_transformed_events(*(void *)(a1 + 40), a2, *(UInt8 **)(a1 + 48), *(_DWORD *)(a1 + 56), 0))
    {
      goto LABEL_4;
    }
  }
  else if (!ktrace_file_append(*(void *)(a1 + 40), a2))
  {
LABEL_4:
    int v4 = __error();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v4;
    return result;
  }
  return 1;
}

uint64_t append_transformed_events(uint64_t a1, void *a2, UInt8 *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = ktrace_chunk_size((uint64_t)a2);
  unint64_t v11 = v10 - 8;
  if (v10 > 8)
  {
    uint64_t v14 = v10;
    unint64_t v15 = ktrace_chunk_map_data(a2, 0, v10);
    if (v15)
    {
      unint64_t v16 = (unint64_t)v15;
      bzero(v25, 0x388uLL);
      ktrace_compressor_init(v25, a4);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      int is_64_bit = ktrace_file_is_64_bit(a1);
      if (a4 <= 1) {
        int v18 = 0;
      }
      else {
        int v18 = v25;
      }
      int appended = append_transformed_events_internal(a1, &v24, v16 + 8, v11, a3, is_64_bit, &v23, (uint64_t)v18, a5);
      if (appended || (int appended = finish_events_chunk(a1, v24, 1, v23)) != 0) {
        *__error() = appended;
      }
      int v20 = *__error();
      ktrace_chunk_unmap_data((uint64_t)a2, v16, v14);
      *__error() = v20;
      return v24;
    }
    else
    {
      int v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        append_transformed_events_cold_1();
      }
      int v22 = __error();
      uint64_t result = 0;
      *int v22 = v21;
    }
  }
  else
  {
    uint64_t v12 = __error();
    uint64_t result = 0;
    *uint64_t v12 = 22;
  }
  return result;
}

uint64_t ktrace_file_append_filtered_kdebug_events(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v6 = ktrace_chunk_tag((uint64_t)a2);
  if (v6 == 7680)
  {
    __int16 v9 = (UInt8 *)malloc_type_malloc(0x400000uLL, 0x1C07ADB3uLL);
    if (!v9) {
      return 0;
    }
    unint64_t v10 = v9;
    uint64_t appended = append_transformed_events(a1, a2, v9, 1u, a3);
    int v7 = *__error();
    free(v10);
  }
  else
  {
    if (v6 == 7936) {
      int v7 = 45;
    }
    else {
      int v7 = 22;
    }
    uint64_t appended = 0;
  }
  *__error() = v7;
  return appended;
}

uint64_t ktrace_capture_live_stackshot()
{
  uint64_t v0 = stackshot_config_create();
  if (!v0)
  {
    *__error() = 12;
    int v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_capture_live_stackshot_cold_1();
    }
    goto LABEL_10;
  }
  uint64_t v1 = v0;
  int v2 = stackshot_config_set_flags();
  if (v2)
  {
    int v3 = v2;
    stackshot_config_dealloc();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_capture_live_stackshot_cold_3();
    }
LABEL_10:
    uint64_t v1 = 0;
    *__error() = v3;
    return v1;
  }
  int v4 = stackshot_capture_with_config();
  if (v4)
  {
    int v5 = v4;
    stackshot_config_dealloc();
    *__error() = v5;
    int v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_capture_live_stackshot_cold_2();
    }
    goto LABEL_10;
  }
  return v1;
}

uint64_t ktrace_file_append_live_stackshot(uint64_t a1)
{
  return ktrace_file_append_live_stackshot_internal(a1);
}

uint64_t ktrace_file_append_live_stackshot_internal(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = ktrace_capture_live_stackshot();
  if (result)
  {
    uint64_t appended = ktrace_file_append_stackshot(a1, result);
    stackshot_config_dealloc();
    return (uint64_t)appended;
  }
  return result;
}

uint64_t ktrace_file_walltime_offset(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 20) != 5)
  {
    *a2 = *(void *)(a1 + 160);
    if (a3)
    {
      uint64_t v11 = *(void *)(a1 + 168);
      if (!v11) {
        return 79;
      }
      *(void *)a3 = v11;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 176);
    }
    if (a4)
    {
      if (*(unsigned char *)(a1 + 297))
      {
        uint64_t v10 = 0;
        *a4 = *(void *)(a1 + 180);
        return v10;
      }
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_file_walltime_offset_cold_3();
      }
      if (gettimeofday(0, a4)) {
        return *__error();
      }
    }
    return 0;
  }
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  char v17 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = __ktrace_file_walltime_offset_block_invoke;
  v13[3] = &unk_1E6061E98;
  v13[6] = a2;
  v13[7] = a3;
  unsigned char v13[8] = a4;
  void v13[4] = &v14;
  v13[5] = &v18;
  int v9 = ktrace_file_iterate(a1, 0, (uint64_t)v13, (uint64_t)a4, a5, a6, a7, a8);
  if (*((unsigned char *)v15 + 24))
  {
    if (v9) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = *((_DWORD *)v19 + 6) != 0;
    }
  }
  else
  {
    uint64_t v10 = 79;
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v10;
}

BOOL __ktrace_file_walltime_offset_block_invoke(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  if (*(void *)(a1 + 56)) {
    int v3 = v8;
  }
  else {
    int v3 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ktariadne_read_times(a2, *(void **)(a1 + 48), 0, v3, *(_DWORD **)(a1 + 64), (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8)+ 24));
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    return 1;
  }
  int v4 = *(void **)(a1 + 56);
  if (!v4) {
    return 0;
  }
  timespec_to_timeval();
  *int v4 = v5;
  v4[1] = v6;
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t ktrace_file_machtime_to_walltime(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  v28[1] = 0;
  unint64_t v29 = 0;
  v28[0] = 0;
  uint64_t result = ktrace_file_walltime_offset(a1, &v29, (uint64_t)v28, 0, a5, a6, a7, a8);
  if (!result)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 192);
    if (v12)
    {
      v27[0] = *(_DWORD *)(a1 + 188);
      v27[1] = v12;
      timeval_to_timespec();
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      unint64_t v17 = machtime_to_timespec(v27, v29);
      uint64_t v19 = timespec_subtract(v14, v16, v17, v18);
      uint64_t v21 = v20;
      unint64_t v22 = machtime_to_timespec(v27, a3);
      timespec_add(v22, v23, v19, v21);
      timespec_to_timeval();
      uint64_t v25 = v24;
      uint64_t result = 0;
      *a2 = v25;
      a2[1] = v26;
    }
    else
    {
      return 79;
    }
  }
  return result;
}

uint64_t ktrace_file_timebase(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*(_DWORD *)(a1 + 192)) {
    return 79;
  }
  uint64_t v3 = 0;
  *a2 = *(_DWORD *)(a1 + 188);
  *a3 = *(_DWORD *)(a1 + 192);
  return v3;
}

uint64_t ktrace_file_earliest_walltime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  unint64_t v16 = 0;
  uint64_t result = ktrace_file_earliest_timestamp(a1, &v16, a3, a4, a5, a6, a7, a8);
  if (!result) {
    return ktrace_file_machtime_to_walltime(a1, (void *)a2, v16, v11, v12, v13, v14, v15);
  }
  return result;
}

uint64_t ktrace_file_earliest_timestamp(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2000000000;
  int v28 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  char v24 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  uint64_t v20 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  v16[2] = __ktrace_file_earliest_timestamp_block_invoke;
  v16[3] = &unk_1E6061EC0;
  v16[4] = &v25;
  v16[5] = &v17;
  v16[6] = &v21;
  v16[7] = a1;
  uint64_t v9 = ktrace_file_iterate(a1, 0, (uint64_t)v16, a4, a5, a6, a7, a8);
  if (v9)
  {
    uint64_t v10 = v9;
    *__error() = v9;
    int v11 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_earliest_timestamp_cold_5();
    }
    *__error() = v11;
  }
  else
  {
    int v12 = *((_DWORD *)v26 + 6);
    if (v12)
    {
      *__error() = v12;
      int v13 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_earliest_timestamp_cold_4();
      }
      *__error() = v13;
      uint64_t v10 = *((unsigned int *)v26 + 6);
    }
    else if (*((unsigned char *)v22 + 24))
    {
      uint64_t v10 = 0;
      *a2 = v18[3];
    }
    else
    {
      *__error() = 22;
      int v14 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_earliest_timestamp_cold_3();
      }
      *__error() = v14;
      uint64_t v10 = 22;
    }
  }
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v10;
}

uint64_t __ktrace_file_earliest_timestamp_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  int v5 = v4;
  if (v4 != 7680 && v4 != 20982 && v4 != 7936 || !ktrace_stream_estimate_events(a2)) {
    return 1;
  }
  int is_64_bit = ktrace_file_is_64_bit(a1[7]);
  memset(v15, 0, sizeof(v15));
  if (is_64_bit) {
    size_t v7 = 64;
  }
  else {
    size_t v7 = 32;
  }
  if (v5 == 20982)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) < 0x30) {
      return 1;
    }
    memset(v16, 0, 48);
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = ktrace_chunk_copy_data(a2, 0, v16, 0x30uLL);
    uint64_t v11 = *(void *)&v16[0] & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_18;
  }
  int v8 = is_64_bit;
  if (v5 == 7936)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) < 0xD) {
      return 1;
    }
    size_t v12 = (unint64_t)(ktrace_chunk_size((uint64_t)a2) - 77) >= 0xFFFFFFFFFFFFFFBFLL
        ? ktrace_chunk_size((uint64_t)a2) - 12
        : 64;
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = ktrace_chunk_copy_data(a2, 12, v17, v12);
    if (*(_DWORD *)(*(void *)(a1[4] + 8) + 24)) {
      return 1;
    }
    bzero(v16, 0x388uLL);
    ktrace_compressor_reset(v16);
    int v13 = decompress_32;
    if (v8) {
      int v13 = decompress_64;
    }
    uint64_t v14 = 64;
    if (v13((int *)v16, (uint64_t)v17, (unint64_t *)&v14, (uint64_t)v15, v7) != v7)
    {
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 79;
      return 1;
    }
    uint64_t v11 = *(void *)&v15[0];
    if (!v8) {
      uint64_t v11 = *(void *)&v15[0] & 0xFFFFFFFFFFFFFFLL;
    }
LABEL_18:
    *(void *)(*(void *)(a1[5] + 8) + 24) = v11;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    return 0;
  }
  if (v5 != 7680) {
    return 0;
  }
  if (ktrace_chunk_size((uint64_t)a2) >= (v7 | 8))
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = ktrace_chunk_copy_data(a2, 8, v15, v7);
    uint64_t result = 1;
    if (*(_DWORD *)(*(void *)(a1[4] + 8) + 24)) {
      return result;
    }
    uint64_t v10 = *(void *)&v15[0];
    if (!v8) {
      uint64_t v10 = *(void *)&v15[0] & 0xFFFFFFFFFFFFFFLL;
    }
    *(void *)(*(void *)(a1[5] + 8) + 24) = v10;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    return 0;
  }
  return 1;
}

uint64_t ktrace_file_is_64_bit(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 298);
}

uint64_t ktrace_file_latest_timestamp(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2000000000;
  uint64_t v35 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = &v28;
  uint64_t v30 = 0x2000000000;
  uint64_t v31 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  int v27 = 0;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 0x40000000;
  void v23[2] = __ktrace_file_latest_timestamp_block_invoke;
  void v23[3] = &unk_1E6061EE8;
  v23[4] = &v32;
  void v23[5] = &v24;
  v23[6] = &v28;
  uint64_t v10 = ktrace_file_iterate(a1, 0, (uint64_t)v23, a4, a5, a6, a7, a8);
  int v11 = v10;
  if (v10 || (int v11 = *((_DWORD *)v25 + 6)) != 0)
  {
    *__error() = v11;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_latest_timestamp_cold_3();
    }
    *__error() = v12;
    if (!v10) {
LABEL_8:
    }
      uint64_t v10 = *((unsigned int *)v25 + 6);
  }
  else
  {
    uint64_t v13 = v29[3];
    if (v13)
    {
      uint64_t v10 = 0;
      *a2 = v13;
      goto LABEL_11;
    }
    if (!v33[3])
    {
      uint64_t v10 = 45;
      goto LABEL_11;
    }
    uint64_t v15 = ktrace_stream_create(0, *(unsigned char *)(a1 + 298), 1);
    if (!v15)
    {
      uint64_t v10 = *__error();
      goto LABEL_11;
    }
    unint64_t v16 = (void *)v15;
    uint64_t v10 = ktrace_stream_add(v15, v33[3]);
    if (!v10)
    {
      if (ktrace_chunk_tag(v33[3]) == 7936)
      {
        uint64_t v17 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
        uint64_t v18 = dispatch_queue_create("com.apple.ktrace.latest_timestamp", v17);
        uint64_t v19 = dispatch_group_create();
        v22[0] = MEMORY[0x1E4F143A8];
        v22[1] = 0x40000000;
        _DWORD v22[2] = __ktrace_file_latest_timestamp_block_invoke_5;
        v22[3] = &unk_1E6061F38;
        v22[4] = &v28;
        v22[5] = a1;
        uint64_t v10 = ktrace_stream_iterate_group((uint64_t)v16, 0x400000uLL, v18, v19, (uint64_t)v22);
        dispatch_group_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(v18);
      }
      else
      {
        end_io_iterator_t iterator = ktrace_stream_create_end_iterator(v16);
        if (end_iterator)
        {
          memset(v21, 0, sizeof(v21));
          ktrace_iter_get_event((uint64_t)end_iterator, (uint64_t)v21);
          uint64_t v10 = 0;
          v29[3] = *(void *)&v21[0];
        }
        else
        {
          uint64_t v10 = *__error();
        }
      }
      ktrace_stream_destroy(v16);
      *a2 = v29[3];
      if (!v10) {
        goto LABEL_8;
      }
    }
  }
LABEL_11:
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  return v10;
}

uint64_t __ktrace_file_latest_timestamp_block_invoke(void *a1, uint64_t *a2)
{
  if ((ktrace_chunk_tag((uint64_t)a2) == 7680
     || ktrace_chunk_tag((uint64_t)a2) == 7936
     || ktrace_chunk_tag((uint64_t)a2) == 20982)
    && ktrace_stream_estimate_events(a2))
  {
    *(void *)(*(void *)(a1[4] + 8) + 24) = a2;
  }
  if (ktrace_chunk_tag((uint64_t)a2) == 32775
    && !ktrace_chunk_version_major((uint64_t)a2)
    && (unint64_t)ktrace_chunk_size((uint64_t)a2) >= 8)
  {
    uint64_t v5 = 0;
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = ktrace_chunk_copy_data(a2, 0, &v5, 8uLL);
    if (!*(_DWORD *)(*(void *)(a1[5] + 8) + 24)) {
      *(void *)(*(void *)(a1[6] + 8) + 24) = v5;
    }
  }
  return 1;
}

BOOL __ktrace_file_latest_timestamp_block_invoke_5(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(unsigned __int8 *)(v4 + 298);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = __ktrace_file_latest_timestamp_block_invoke_2;
  v7[3] = &unk_1E6061F10;
  int v7[4] = *(void *)(a1 + 32);
  v7[5] = v4;
  return trace_enumerate(a2, a3, v5, (uint64_t)v7);
}

uint64_t __ktrace_file_latest_timestamp_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = tracepoint_timestamp(a2, *(unsigned __int8 *)(*(void *)(a1 + 40) + 298));
  return 0;
}

uint64_t ktrace_file_earliest_continuous_time(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v10 = kttimesync_init((uint64_t)v13, a1, 0);
  if (!v10)
  {
    uint64_t v12 = 0;
    uint64_t v10 = ktrace_file_earliest_timestamp(a1, &v12, v4, v5, v6, v7, v8, v9);
    if (!v10) {
      *a2 = kttimesync_cont_from_timestamp((uint64_t)v13, v12);
    }
  }
  return v10;
}

uint64_t ktrace_file_latest_continuous_time(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v10 = kttimesync_init((uint64_t)v13, a1, 0);
  if (!v10)
  {
    uint64_t v12 = 0;
    uint64_t v10 = ktrace_file_latest_timestamp(a1, &v12, v4, v5, v6, v7, v8, v9);
    if (!v10) {
      *a2 = kttimesync_cont_from_timestamp((uint64_t)v13, v12);
    }
  }
  return v10;
}

uint64_t ktrace_file_latest_walltime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  unint64_t v16 = 0;
  uint64_t result = ktrace_file_latest_timestamp(a1, &v16, a3, a4, a5, a6, a7, a8);
  if (!result) {
    return ktrace_file_machtime_to_walltime(a1, (void *)a2, v16, v11, v12, v13, v14, v15);
  }
  return result;
}

uint64_t ktrace_file_supports_continuous_time(uint64_t a1)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  int v1 = kttimesync_init((uint64_t)v3, a1, 0);
  uint64_t result = 0;
  if (!v1) {
    return kttimesync_can_convert_continuous((uint64_t)v3);
  }
  return result;
}

uint64_t ktrace_file_uuid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  int v15 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = __ktrace_file_uuid_block_invoke;
  v11[3] = &unk_1E6061F60;
  v11[5] = &v16;
  void v11[6] = a2;
  v11[4] = &v12;
  int v8 = ktrace_file_header_iterate(a1, 0, (uint64_t)v11, a4, a5, a6, a7, a8);
  if (*((unsigned char *)v17 + 24))
  {
    if (v8) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = *((_DWORD *)v13 + 6) != 0;
    }
  }
  else
  {
    uint64_t v9 = 22;
  }
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v9;
}

uint64_t __ktrace_file_uuid_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) != 35841) {
    return 1;
  }
  uint64_t v4 = 1;
  if (!ktrace_chunk_version_major((uint64_t)a2))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ktrace_chunk_copy_data(a2, 0, *(void **)(a1 + 48), 0x10uLL);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    return 0;
  }
  return v4;
}

uint64_t ktrace_file_ktrace_event_count(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v15 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = __ktrace_file_ktrace_event_count_block_invoke;
  v11[3] = &unk_1E6061F88;
  v11[4] = &v12;
  int v8 = ktrace_file_iterate(a1, 0, (uint64_t)v11, a4, a5, a6, a7, a8);
  if (v8)
  {
    *__error() = v8;
    uint64_t v9 = -1;
  }
  else
  {
    uint64_t v9 = v13[3];
  }
  _Block_object_dispose(&v12, 8);
  return v9;
}

uint64_t __ktrace_file_ktrace_event_count_block_invoke(uint64_t a1, uint64_t *a2)
{
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 7680 || v4 == 20982 || v4 == 7936) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += ktrace_stream_estimate_events(a2);
  }
  return 1;
}

uint64_t ktrace_file_write_header_system_default(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  v18[0] = 0x155AA0300;
  v18[1] = 40;
  v18[2] = ktrace_current_timebase();
  v17.tv_sec = 0;
  *(void *)&v17.__darwin_suseconds_t tv_usec = 0;
  uint64_t v16 = 0;
  v18[3] = mach_absolute_time();
  if (!gettimeofday(&v17, &v16))
  {
    void v18[4] = v17.tv_sec;
    __darwin_suseconds_t tv_usec = v17.tv_usec;
    uint64_t v20 = v16;
    int v21 = 1;
    ktrace_file_write_header_internal(a1, (uint64_t)v18);
    uint64_t v2 = v3;
    if (v3) {
      return v2;
    }
    *(_DWORD *)(a1 + 20) = 4;
    uint64_t current = ktrace_machine_create_current();
    if (!current) {
      return 0;
    }
    uint64_t v5 = current;
    CFErrorRef error = 0;
    CFDataRef v6 = CFPropertyListCreateData(0, *(CFPropertyListRef *)(current + 216), kCFPropertyListBinaryFormat_v1_0, 0, &error);
    if (!v6)
    {
      CFErrorRef v11 = error;
      int v12 = *__error();
      ktrace_log_init();
      BOOL v13 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v13) {
          ktrace_file_write_header_system_default_cold_3();
        }
      }
      else if (v13)
      {
        ktrace_file_write_header_system_default_cold_2();
      }
      *__error() = v12;
      uint64_t v2 = 22;
      goto LABEL_24;
    }
    CFDataRef v7 = v6;
    size_t Length = CFDataGetLength(v6);
    if (Length)
    {
      CFIndex v9 = Length;
      uint64_t v10 = (UInt8 *)malloc_type_malloc(Length, 0xA2EF9FA4uLL);
      if (v10)
      {
        v23.location = 0;
        v23.length = v9;
        CFDataGetBytes(v7, v23, v10);
        if (ktrace_file_header_append_chunk(a1, 35840, 1, 6, v10, v9))
        {
          uint64_t v2 = 0;
LABEL_23:
          CFRelease(v7);
          free(v10);
LABEL_24:
          ktrace_machine_destroy(v5);
          return v2;
        }
        int v14 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_write_header_system_default_cold_4();
        }
        *__error() = v14;
      }
      uint64_t v2 = *__error();
      goto LABEL_23;
    }
    uint64_t v10 = 0;
    uint64_t v2 = 22;
    goto LABEL_23;
  }
  return *__error();
}

double ktrace_file_write_header_internal(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 40);
  *(void *)&long long v3 = *(void *)(a2 + 44);
  *((void *)&v3 + 1) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 180) = v3;
  *(unsigned char *)(a1 + 298) = *(unsigned char *)(a2 + 52) & 1;
  if (*(_DWORD *)(a1 + 16) == 4)
  {
    uint64_t appended = ktrace_file_append_chunk(-1, 36863, 0, 0, (UInt8 *)a2, 56);
    if (!appended) {
      ktrace_postprocess_file_internal_cold_1();
    }
    uint64_t v5 = appended;
    (*(void (**)(void))(*(void *)(a1 + 272) + 16))();
    ktrace_chunk_destroy(v5);
    goto LABEL_10;
  }
  if ((unint64_t)ktrace_file_write(a1, (const void *)a2, 0x38uLL, -1) > 0x37)
  {
LABEL_10:
    *(unsigned char *)(a1 + 297) = 1;
    *(unsigned char *)(a1 + 299) = 1;
    *(void *)(a1 + 288) = 56;
    *(void *)&double result = 16;
    *(_OWORD *)(a1 + 112) = xmmword_1B3A73120;
    *(void *)(a1 + 128) = 56;
    return result;
  }
  int v6 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_file_write_header_internal_cold_4();
  }
  *__error() = v6;
  __error();
  return result;
}

void *ktrace_file_create_iterator(uint64_t a1)
{
  uint64_t v2 = ktrace_stream_create(0, *(unsigned char *)(a1 + 298), 0);
  if (!v2) {
    return 0;
  }
  int v8 = (void *)v2;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  void v12[2] = __ktrace_file_create_iterator_block_invoke;
  uint64_t v12[3] = &__block_descriptor_tmp_12;
  v12[4] = v2;
  int v9 = ktrace_file_iterate(a1, 0, (uint64_t)v12, v3, v4, v5, v6, v7);
  io_iterator_t iterator = 0;
  if (!v9) {
    io_iterator_t iterator = ktrace_stream_create_iterator(v8);
  }
  ktrace_stream_destroy(v8);
  return iterator;
}

uint64_t __ktrace_file_create_iterator_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

CFDictionaryRef ktrace_file_relationship_type(const __CFDictionary *result)
{
  if (result)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(result, @"type");
    return (const __CFDictionary *)(Value && CFEqual(Value, @"bridge"));
  }
  return result;
}

uint64_t ktrace_file_iterate_subfiles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  void v12[2] = __ktrace_file_iterate_subfiles_block_invoke;
  uint64_t v12[3] = &unk_1E6061FF8;
  v12[6] = &v17;
  v12[7] = a1;
  v12[4] = a2;
  void v12[5] = &v13;
  unsigned int v8 = ktrace_file_iterate(a1, 0, (uint64_t)v12, a4, a5, a6, a7, a8);
  *((_DWORD *)v14 + 6) = v8;
  unsigned int v9 = *((_DWORD *)v18 + 6);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  *((_DWORD *)v18 + 6) = v10;
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v10;
}

uint64_t __ktrace_file_iterate_subfiles_block_invoke(void *a1, uint64_t *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 32778)
  {
    uint64_t v34 = 0;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x2000000000;
    int v37 = -1;
    uint64_t v30 = 0;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2000000000;
    uint64_t v33 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = &v23;
    uint64_t v25 = 0x5000000000;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v29 = 0;
    uint64_t v19 = 0;
    int v20 = &v19;
    uint64_t v21 = 0x2000000000;
    char v22 = 0;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = __ktrace_file_iterate_subfiles_block_invoke_2;
    v18[3] = &unk_1E6061FD0;
    void v18[4] = a1[6];
    void v18[5] = &v34;
    v18[6] = &v19;
    v18[7] = &v23;
    unsigned char v18[8] = &v30;
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = ktrace_chunk_iterate_subchunks(a2, 0, (uint64_t)v18);
    uint64_t v4 = *(void *)(a1[6] + 8);
    int v5 = *(_DWORD *)(v4 + 24);
    if (!v5) {
      int v5 = *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
    }
    *(_DWORD *)(v4 + 24) = v5;
    if (*(_DWORD *)(*(void *)(a1[6] + 8) + 24)) {
      goto LABEL_5;
    }
    if (*((unsigned char *)v20 + 24))
    {
      unsigned int v7 = *((_DWORD *)v35 + 6);
      if (v7 != -1)
      {
        if (*((_WORD *)v24 + 14) == 1)
        {
          CFDictionaryRef v8 = *(const __CFDictionary **)(a1[7] + 208);
          if (!v8)
          {
            *(void *)(a1[7] + 208) = CFDictionaryCreateMutable(0, 1, &long_key_callbacks, MEMORY[0x1E4F1D540]);
            CFDictionaryRef v8 = *(const __CFDictionary **)(a1[7] + 208);
            if (!v8) {
              ktrace_postprocess_file_internal_cold_1();
            }
            unsigned int v7 = *((_DWORD *)v35 + 6);
          }
          CFStringRef Value = CFDictionaryGetValue(v8, (const void *)v7);
          if (!Value)
          {
            ktrace_file_alloc();
            CFStringRef Value = (void *)v10;
            *(_DWORD *)(v10 + 196) = -1;
            *(_DWORD *)(v10 + 16) = 3;
            *(void *)(v10 + 200) = a1[7];
            CFErrorRef v11 = v35;
            *(_DWORD *)(v10 + 216) = *((_DWORD *)v35 + 6);
            int v12 = v24;
            *(unsigned char *)(v10 + 298) = *((unsigned char *)v24 + 76) & 1;
            *(void *)(v10 + 160) = v12[6];
            *(void *)&long long v13 = *(uint64_t *)((char *)v12 + 68);
            *((void *)&v13 + 1) = v12[5];
            *(_OWORD *)(v10 + 180) = v13;
            *(unsigned char *)(v10 + 297) = 1;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1[7] + 208), (const void *)*((unsigned int *)v11 + 6), (const void *)v10);
            CFRelease(Value);
          }
          uint64_t v14 = v31[3];
          if (!v14 || Value[28]) {
            goto LABEL_19;
          }
          CFPropertyListRef v15 = ktrace_chunk_copy_plist(v14);
          if (v15)
          {
            Value[28] = v15;
LABEL_19:
            (*(void (**)(void))(a1[4] + 16))();
LABEL_5:
            uint64_t v6 = 1;
LABEL_28:
            _Block_object_dispose(&v19, 8);
            _Block_object_dispose(&v23, 8);
            _Block_object_dispose(&v30, 8);
            _Block_object_dispose(&v34, 8);
            return v6;
          }
          uint64_t v6 = 0;
LABEL_27:
          *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = 79;
          goto LABEL_28;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (!v31[3]) {
        goto LABEL_5;
      }
      if (*((_DWORD *)v35 + 6) != -1)
      {
LABEL_22:
        int v16 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          __ktrace_file_iterate_subfiles_block_invoke_cold_2();
        }
LABEL_26:
        uint64_t v6 = 0;
        *__error() = v16;
        goto LABEL_27;
      }
    }
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_file_iterate_subfiles_block_invoke_cold_1();
    }
    goto LABEL_26;
  }
  return 1;
}

BOOL __ktrace_file_iterate_subfiles_block_invoke_2(void *a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 32777)
  {
    if (*(void *)(*(void *)(a1[8] + 8) + 24) || ktrace_chunk_version_major(a2))
    {
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 79;
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_iterate_subfiles_block_invoke_2_cold_3();
      }
      goto LABEL_17;
    }
    *(void *)(*(void *)(a1[8] + 8) + 24) = a2;
    return 1;
  }
  if (v4 == 32781)
  {
    if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24)
      || (unint64_t)ktrace_chunk_size(a2) < 0x38
      || ktrace_chunk_version_major(a2))
    {
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 79;
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_iterate_subfiles_block_invoke_2_cold_2();
      }
      goto LABEL_17;
    }
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    CFDictionaryRef v8 = (void *)(*(void *)(a1[7] + 8) + 24);
    unsigned int v9 = (uint64_t *)a2;
    size_t v10 = 56;
    goto LABEL_22;
  }
  if (v4 != 32780) {
    return 1;
  }
  if ((unint64_t)ktrace_chunk_size(a2) < 4 || ktrace_chunk_version_major(a2))
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 79;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_file_iterate_subfiles_block_invoke_2_cold_1();
    }
LABEL_17:
    uint64_t v6 = __error();
    BOOL result = 0;
    *uint64_t v6 = v5;
    return result;
  }
  CFDictionaryRef v8 = (void *)(*(void *)(a1[5] + 8) + 24);
  unsigned int v9 = (uint64_t *)a2;
  size_t v10 = 4;
LABEL_22:
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = ktrace_chunk_copy_data(v9, 0, v8, v10);
  return *(_DWORD *)(*(void *)(a1[4] + 8) + 24) == 0;
}

uint64_t ktrace_file_create_subfile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  int v9 = a7;
  int v11 = a5;
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x2000000000;
  uint64_t v40 = 0;
  int v41 = 1;
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 0x40000000;
  v42[2] = __find_unused_subfile_id_block_invoke;
  v42[3] = &__block_descriptor_tmp_36;
  v42[4] = &v41;
  int v16 = ktrace_file_iterate_subfiles(a1, (uint64_t)v42, a3, a4, a5, a6, a7, (uint64_t)a8);
  if (v16) {
    goto LABEL_16;
  }
  uint64_t appended = ktrace_file_append_start(a1, 32778, 0, 0);
  if (!appended) {
    goto LABEL_13;
  }
  uint64_t v18 = (uint64_t)appended;
  if (!ktrace_file_append_subchunk(a1, (uint64_t)appended, 32780, 0, 0, (UInt8 *)&v41, 4)) {
    goto LABEL_13;
  }
  v33[0] = 0x155AA0300;
  v33[1] = 40;
  v33[2] = a2;
  v33[3] = a3;
  v33[4] = a4;
  int v34 = v11;
  uint64_t v35 = a6;
  int v36 = v9;
  if (!ktrace_file_append_subchunk(a1, v18, 32781, 0, 0, (UInt8 *)v33, 56))
  {
LABEL_13:
    if (*__error())
    {
      int v16 = *__error();
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (!a8) {
    goto LABEL_9;
  }
  CFDataRef Data = CFPropertyListCreateData(0, a8, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
LABEL_15:
    int v16 = 5;
    goto LABEL_16;
  }
  CFDataRef v20 = Data;
  BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
  CFIndex Length = CFDataGetLength(v20);
  if (!ktrace_file_append_subchunk(a1, v18, 32777, 0, 0, BytePtr, Length))
  {
    __error();
    CFRelease(v20);
    goto LABEL_13;
  }
  CFRelease(v20);
LABEL_9:
  int v16 = ktrace_file_append_finish(a1, v18);
  if (v16)
  {
LABEL_16:
    uint64_t v29 = 0;
    *__error() = v16;
    goto LABEL_17;
  }
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 0x40000000;
  int v31[2] = __ktrace_file_create_subfile_block_invoke;
  v31[3] = &unk_1E6062020;
  int v32 = v41;
  void v31[4] = &v37;
  ktrace_file_iterate_subfiles(a1, (uint64_t)v31, v23, v24, v25, v26, v27, v28);
  uint64_t v29 = v38[3];
  if (!v29) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(unsigned char *)(v29 + 299) = 1;
LABEL_17:
  _Block_object_dispose(&v37, 8);
  return v29;
}

uint64_t __ktrace_file_create_subfile_block_invoke(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 216) == *(_DWORD *)(result + 40)) {
    *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  }
  return result;
}

uint64_t ktrace_file_append_subfile(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = 0;
  uint64_t v45 = &v44;
  uint64_t v46 = 0x2000000000;
  int v47 = 0;
  int v48 = 1;
  uint64_t v33 = MEMORY[0x1E4F143A8];
  uint64_t v34 = 0x40000000;
  uint64_t v35 = __find_unused_subfile_id_block_invoke;
  *(void *)&long long v36 = &__block_descriptor_tmp_36;
  *((void *)&v36 + 1) = &v48;
  int v47 = ktrace_file_iterate_subfiles(a1, (uint64_t)&v33, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *((unsigned int *)v45 + 6);
  if (!v11)
  {
    uint64_t v40 = 0;
    int v41 = &v40;
    uint64_t v42 = 0x2000000000;
    uint64_t appended = 0;
    uint64_t appended = ktrace_file_append_start(a1, 32778, 0, 0);
    uint64_t v12 = v41[3];
    if (v12)
    {
      if (ktrace_file_append_subchunk(a1, v12, 32780, 0, 0, (UInt8 *)&v48, 4))
      {
        uint64_t v33 = 0x155AA0300;
        uint64_t v34 = 40;
        uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 188);
        long long v36 = *(_OWORD *)(a2 + 160);
        uint64_t v37 = *(void *)(a2 + 176);
        int v13 = *(unsigned __int8 *)(a2 + 298);
        int v38 = *(_DWORD *)(a2 + 184);
        int v39 = v13;
        if (ktrace_file_append_subchunk(a1, v41[3], 32781, 0, 0, (UInt8 *)&v33, 56))
        {
          if (a3)
          {
            CFDataRef Data = CFPropertyListCreateData(0, a3, kCFPropertyListBinaryFormat_v1_0, 0, 0);
            if (!Data) {
              goto LABEL_19;
            }
            CFDataRef v20 = Data;
            uint64_t v21 = v41[3];
            BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
            CFIndex Length = CFDataGetLength(v20);
            if (!ktrace_file_append_subchunk(a1, v21, 32777, 0, 0, BytePtr, Length))
            {
              *((_DWORD *)v45 + 6) = *__error();
              CFRelease(v20);
              unsigned int v31 = *((_DWORD *)v45 + 6);
              if (v31) {
                uint64_t v11 = v31;
              }
              else {
                uint64_t v11 = 5;
              }
              goto LABEL_20;
            }
            CFRelease(v20);
          }
          v32[0] = MEMORY[0x1E4F143A8];
          v32[1] = 0x40000000;
          v32[2] = __ktrace_file_append_subfile_block_invoke;
          v32[3] = &unk_1E6062048;
          v32[4] = &v44;
          void v32[5] = &v40;
          v32[6] = a1;
          uint64_t v11 = ktrace_file_header_iterate(a2, 0, (uint64_t)v32, v14, v15, v16, v17, v18);
          if (v11) {
            goto LABEL_20;
          }
          uint64_t v11 = *((unsigned int *)v45 + 6);
          if (v11) {
            goto LABEL_20;
          }
          uint64_t v11 = ktrace_file_append_finish(a1, v41[3]);
          *((_DWORD *)v45 + 6) = v11;
          if (v11) {
            goto LABEL_20;
          }
          uint64_t v24 = ktrace_file_append_start(a1, 32779, 0, 0);
          v41[3] = (uint64_t)v24;
          if (v24 && ktrace_file_append_subchunk(a1, (uint64_t)v24, 32780, 0, 0, (UInt8 *)&v48, 4))
          {
            uint64_t v11 = ktrace_file_iterate(a2, 0, (uint64_t)v32, v25, v26, v27, v28, v29);
            if (!v11)
            {
              uint64_t v11 = *((unsigned int *)v45 + 6);
              if (!v11)
              {
                uint64_t v11 = ktrace_file_append_finish(a1, v41[3]);
                *((_DWORD *)v45 + 6) = v11;
              }
            }
            goto LABEL_20;
          }
        }
      }
    }
    if (*__error())
    {
      uint64_t v11 = *__error();
LABEL_20:
      _Block_object_dispose(&v40, 8);
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v11 = 5;
    goto LABEL_20;
  }
LABEL_21:
  _Block_object_dispose(&v44, 8);
  return v11;
}

uint64_t __ktrace_file_append_subfile_block_invoke(void *a1, void *a2)
{
  unint64_t v4 = ktrace_chunk_size_t(a2, a2);
  int v5 = ktrace_chunk_map_data(a2, 0, v4);
  if (v5)
  {
    uint64_t v6 = (UInt8 *)v5;
    uint64_t v7 = a1[6];
    uint64_t v8 = *(void *)(*(void *)(a1[5] + 8) + 24);
    int v9 = ktrace_chunk_tag((uint64_t)a2);
    __int16 v10 = ktrace_chunk_version_major((uint64_t)a2);
    __int16 v11 = ktrace_chunk_version_minor((uint64_t)a2);
    CFIndex v13 = ktrace_chunk_size_t(a2, v12);
    if (ktrace_file_append_subchunk(v7, v8, v9, v10, v11, v6, v13))
    {
      uint64_t v15 = ktrace_chunk_size_t(a2, v14);
      ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v15);
      return 1;
    }
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = *__error();
    uint64_t v19 = ktrace_chunk_size_t(a2, v18);
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v19);
    uint64_t v20 = *(void *)(a1[4] + 8);
    if (*(_DWORD *)(v20 + 24)) {
      return 0;
    }
    uint64_t result = 0;
    *(_DWORD *)(v20 + 24) = 5;
  }
  else
  {
    if (*(_DWORD *)(*(void *)(a1[4] + 8) + 24)) {
      return 0;
    }
    if (*__error()) {
      int v17 = *__error();
    }
    else {
      int v17 = 5;
    }
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v17;
  }
  return result;
}

double ktrace_file_alloc()
{
  ktrace_log_init();
  if (ktrace_file_alloc_once != -1) {
    dispatch_once(&ktrace_file_alloc_once, &__block_literal_global_1);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    double result = 0.0;
    *(_OWORD *)(Instance + 272) = 0u;
    *(_OWORD *)(Instance + 288) = 0u;
    *(_OWORD *)(Instance + 240) = 0u;
    *(_OWORD *)(Instance + 256) = 0u;
    *(_OWORD *)(Instance + 208) = 0u;
    *(_OWORD *)(Instance + 224) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_DWORD *)(Instance + 196) = -1;
  }
  return result;
}

uint64_t __ktrace_file_alloc_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ktrace_file_typeid = result;
  return result;
}

void ktrace_file_dealloc(uint64_t a1)
{
  ktrace_chunk_array_destroy(a1 + 80);
  ktrace_chunk_array_destroy(a1 + 24);
  int v2 = *(_DWORD *)(a1 + 196);
  if (v2 == -1)
  {
    if (*(void *)(a1 + 240))
    {
      uint64_t v3 = *(void *)(a1 + 264);
      if (v3) {
        (*(void (**)(void))(v3 + 16))();
      }
    }
  }
  else
  {
    close(v2);
  }
  unint64_t v4 = *(const void **)(a1 + 208);
  if (v4) {
    CFRelease(v4);
  }
  int v5 = *(const void **)(a1 + 224);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 272);
  if (v6)
  {
    CFRelease(v6);
  }
}

void ktrace_chunk_array_destroy(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(void **)a1;
    if (v2)
    {
      if (*(void *)(a1 + 16))
      {
        unint64_t v3 = 0;
        do
        {
          unint64_t v4 = *(void **)(*(void *)a1 + 8 * v3);
          if (v4[8])
          {
            ktrace_chunk_array_destroy(v4 + 6);
            unint64_t v4 = *(void **)(*(void *)a1 + 8 * v3);
          }
          free(v4);
          ++v3;
        }
        while (v3 < *(void *)(a1 + 16));
        int v2 = *(void **)a1;
      }
      free(v2);
    }
    *(void *)a1 = 0;
  }
}

uint64_t __ktrace_file_write_header_template_block_invoke(uint64_t a1, void *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 35841) {
    return 1;
  }
  uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
  int v5 = ktrace_chunk_map_data(a2, 0, v4);
  if (v5)
  {
    uint64_t v6 = (UInt8 *)v5;
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = ktrace_chunk_tag((uint64_t)a2);
    __int16 v9 = ktrace_chunk_version_major((uint64_t)a2);
    __int16 v10 = ktrace_chunk_version_minor((uint64_t)a2);
    uint64_t appended = ktrace_file_header_append_chunk(v7, v8, v9, v10, v6, v4);
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v4);
    if (appended) {
      return 1;
    }
  }
  CFIndex v13 = __error();
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v13;
  return result;
}

uint64_t parse_v1_file(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    parse_v1_file_cold_13();
  }
  *(unsigned char *)(a1 + 296) = 0;
  if (ktrace_file_read(a1, &v21, 0x14uLL, 0) != 20)
  {
    int v7 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      parse_v1_file_cold_12();
    }
    *__error() = v7;
    return *__error();
  }
  int v2 = v22;
  *(void *)(a1 + 168) = v22;
  if (!v2)
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      parse_v1_file_cold_11();
    }
    *(void *)(a1 + 168) = *(unsigned int *)(a1 + 172);
  }
  uint64_t v3 = SHIDWORD(v21);
  *(_DWORD *)(a1 + 176) = v23;
  if (!v3)
  {
    *(unsigned char *)(a1 + 298) = 1;
    uint64_t v6 = 24;
    goto LABEL_17;
  }
  uint64_t v4 = synthesize_thread_map_chunk(a1, 0x14uLL, v3);
  if (v4)
  {
    int v5 = v4;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      parse_v1_file_cold_10();
    }
    uint64_t v6 = v5[1] + v5[2];
LABEL_17:
    int v24 = 0;
    if ((unint64_t)ktrace_file_read(a1, &v24, 4uLL, v6) > 3)
    {
      if (v24 == 1437204737)
      {
        *(_DWORD *)long long buf = 0;
        if ((unint64_t)ktrace_file_read(a1, buf, 4uLL, v6 + 4) > 3)
        {
          if (*(_DWORD *)buf < 0x3E9u)
          {
            uint64_t v12 = (16 * *(unsigned int *)buf) | 8;
            ktrace_log_init();
            CFIndex v13 = ktrace_file_log;
            if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
              parse_v1_file_cold_8((uint64_t)buf, v12, v13);
            }
            uint64_t v14 = ktrace_chunk_create(a1, 7168, 1, 0, v12, v6);
            if (v14)
            {
              uint64_t v15 = v14;
              int appended = ktrace_chunk_array_append_internal(a1 + 80, v14);
              if (!appended)
              {
                *(void *)(a1 + 128) = *(void *)(a1 + 120);
                *(void *)(a1 + 88) = v15;
                v6 += v15[1];
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
                  parse_v1_file_cold_6();
                }
LABEL_50:
                uint64_t v18 = synthesize_events_chunk(a1, (-(int)v6 & 0xFFFLL) + v6);
                uint64_t result = 0;
                if (v18) {
                  return result;
                }
                return *__error();
              }
              int v17 = appended;
              free(v15);
              *__error() = v17;
              int v8 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                parse_v1_file_cold_7();
              }
            }
            else
            {
              int v8 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                parse_v1_file_cold_5();
              }
            }
          }
          else
          {
            *__error() = 79;
            int v8 = *__error();
            ktrace_log_init();
            if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
              parse_v1_file_cold_4();
            }
          }
        }
        else
        {
          int v8 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
            parse_v1_file_cold_3();
          }
        }
      }
      else
      {
        *__error() = 79;
        int v8 = *__error();
        ktrace_log_init();
        __int16 v11 = ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134218496;
          uint64_t v26 = v6;
          __int16 v27 = 1024;
          int v28 = v24;
          __int16 v29 = 1024;
          int v30 = v8;
          _os_log_error_impl(&dword_1B39A5000, v11, OS_LOG_TYPE_ERROR, "value at CPU map magic number (offset %lld) was %#x (%{errno}d)", buf, 0x18u);
        }
      }
    }
    else
    {
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        parse_v1_file_cold_2();
      }
    }
    *__error() = v8;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      parse_v1_file_cold_1();
    }
    goto LABEL_50;
  }
  if (*__error()) {
    return *__error();
  }
  uint64_t v9 = 28 * v3;
  if (((28 * (_WORD)v3 + 4088) & 0xFFC) == 0)
  {
    uint64_t v6 = v9 + 20;
LABEL_45:
    *(unsigned char *)(a1 + 298) = 0;
    goto LABEL_17;
  }
  if ((((_WORD)v9 + 4092) & 0xFFC) == 0)
  {
    uint64_t v6 = v9 + 24;
    goto LABEL_45;
  }
  uint64_t v6 = (32 * v3) | 0x18;
  if (v6 <= 0) {
    unint64_t v10 = -(-v6 & 0xFFF);
  }
  else {
    unint64_t v10 = (32 * v3) & 0xFE7 | 0x18;
  }
  if (v10 <= 0x1F)
  {
    *(unsigned char *)(a1 + 298) = 1;
    goto LABEL_17;
  }
  *__error() = 79;
  int v20 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    parse_v1_file_cold_9();
  }
  *__error() = v20;
  return 79;
}

uint64_t parse_v3_header(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(v17, 0, 56);
  if ((unint64_t)ktrace_file_read(a1, v17, 0x38uLL, 0) <= 0x37)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      parse_v3_header_cold_1();
    }
    *__error() = v4;
    return *__error();
  }
  if (a2) {
    unsigned int v6 = 14;
  }
  else {
    unsigned int v6 = 1;
  }
  if (v6 < WORD2(v17[0])) {
    return 79;
  }
  if (((WORD2(v17[0]) > 0xAu) & a2) != 0) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = 16;
  }
  long long v8 = *(_OWORD *)((char *)&v17[1] + 8);
  *(void *)&long long v9 = *(void *)((char *)&v17[2] + 12);
  *((void *)&v9 + 1) = *(void *)&v17[1];
  *(_OWORD *)(a1 + 180) = v9;
  *(_OWORD *)(a1 + 160) = v8;
  *(_DWORD *)(a1 + 176) = DWORD2(v17[2]);
  ktrace_log_init();
  unint64_t v10 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    parse_v3_header_cold_3(a1, a1 + 180, v10);
  }
  if (BYTE4(v17[3])) {
    *(unsigned char *)(a1 + 298) = 1;
  }
  *(unsigned char *)(a1 + 297) = 1;
  *(void *)(a1 + 288) = *((void *)&v17[0] + 1) + 16;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    parse_v3_header_cold_2();
  }
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = 56;
  uint64_t v12 = *(void *)(a1 + 280);
  uint64_t v11 = *(void *)(a1 + 288);
  *(void *)(a1 + 128) = v11;
  *(void *)(a1 + 56) = 16;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v12;
  if (v11 > v12)
  {
    int v13 = *__error();
    ktrace_log_init();
    uint64_t v14 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 280);
      uint64_t v16 = *(void *)(a1 + 288);
      *(_DWORD *)long long buf = 134218496;
      uint64_t v19 = v15;
      __int16 v20 = 2048;
      uint64_t v21 = v16;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_error_impl(&dword_1B39A5000, v14, OS_LOG_TYPE_ERROR, "file is smaller (%lld) than indicated in the file header chunk (%lld) (%{errno}d)", buf, 0x1Cu);
    }
    *__error() = v13;
    return 79;
  }
  uint64_t result = 0;
  if (v11 == v12) {
    *(unsigned char *)(a1 + 299) = 1;
  }
  return result;
}

uint64_t __parse_artrace_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20482)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    value[0] = 0;
    if (!v8) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!a2) {
      ktrace_postprocess_file_internal_cold_1();
    }
    size_t v9 = ktrace_chunk_size((uint64_t)a2);
    if (v9)
    {
      size_t v10 = v9;
      uint64_t v11 = (UInt8 *)malloc_type_malloc(v9, 0x9E5EAC3BuLL);
      if (v11)
      {
        uint64_t v12 = v11;
        int v13 = ktrace_chunk_copy_data(a2, 0, v11, v10);
        if (!v13)
        {
          CFDictionaryRef dict = (const __CFDictionary *)create_dict(v12, v10);
          if (dict)
          {
            CFDictionaryRef v15 = dict;
            if (CFDictionaryGetValueIfPresent(dict, @"Kernel64bit", (const void **)value))
            {
              CFTypeID v16 = CFGetTypeID(value[0]);
              if (v16 == CFNumberGetTypeID())
              {
                int valuePtr = 0;
                if (CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt32Type, &valuePtr))
                {
                  int v13 = 0;
                  BOOL v17 = valuePtr == 0;
LABEL_32:
                  char v20 = !v17;
                  *(unsigned char *)(v8 + 298) = v20;
                  goto LABEL_41;
                }
                int v19 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                  __parse_artrace_file_block_invoke_cold_9();
                }
              }
              else
              {
                if (v16 == CFBooleanGetTypeID())
                {
                  int v13 = 0;
                  BOOL v17 = CFBooleanGetValue((CFBooleanRef)value[0]) == 0;
                  goto LABEL_32;
                }
                int v19 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                  __parse_artrace_file_block_invoke_cold_10();
                }
              }
            }
            else
            {
              int v19 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                __parse_artrace_file_block_invoke_cold_8();
              }
            }
            *__error() = v19;
            int v13 = 79;
LABEL_41:
            CFRelease(v15);
            goto LABEL_42;
          }
          int v13 = *__error();
        }
LABEL_42:
        free(v12);
        goto LABEL_43;
      }
      int v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        __parse_artrace_file_block_invoke_cold_7();
      }
    }
    else
    {
      int v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        __parse_artrace_file_block_invoke_cold_6();
      }
    }
    *__error() = v18;
    int v13 = 79;
LABEL_43:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v13;
    return !*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  if (v4 != 20481) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)value = 0u;
  memset(v24, 0, sizeof(v24));
  if (!v5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((unint64_t)ktrace_chunk_size((uint64_t)a2) > 0x2B)
  {
    int v7 = ktrace_chunk_copy_data(a2, 0, value, 0x2CuLL);
    if (!v7) {
      *(void *)(v5 + 188) = *(void *)&v24[5];
    }
  }
  else
  {
    int v6 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      __parse_artrace_file_block_invoke_cold_3();
    }
    *__error() = v6;
    int v7 = 79;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
  return !*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void *synthesize_thread_map_chunk(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  size_t v6 = (32 * a3) | 4;
  int v7 = malloc_type_malloc(v6, 0xE5B64436uLL);
  if (!v7)
  {
    int v17 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_thread_map_chunk_cold_2();
    }
    *__error() = v17;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (*__error()) {
      goto LABEL_23;
    }
    goto LABEL_9;
  }
  uint64_t v8 = v7;
  size_t v9 = 28 * a3 + 4;
  unint64_t v10 = ktrace_file_read(a1, v7, v9, a2);
  if (v10 < v9)
  {
    unint64_t v11 = v10;
    int v12 = *__error();
    int v13 = *__error();
    ktrace_log_init();
    uint64_t v14 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      int v33 = 134218496;
      unint64_t v34 = v11;
      __int16 v35 = 2048;
      size_t v36 = v9;
      __int16 v37 = 1024;
      int v38 = v13;
      _os_log_error_impl(&dword_1B39A5000, v14, OS_LOG_TYPE_ERROR, "only read %zu bytes of expected %zu bytes for 32-bit V1 thread map (%{errno}d)", (uint8_t *)&v33, 0x1Cu);
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *__error() = v13;
    goto LABEL_22;
  }
  if (thread_map_entries_valid(v8, a3, 0))
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      synthesize_thread_map_chunk_cold_3();
    }
    uint64_t v21 = 0;
LABEL_21:
    int v12 = 0;
    uint64_t v15 = v21 + a2;
    uint64_t v16 = v9 - v21;
    goto LABEL_22;
  }
  BOOL v22 = thread_map_entries_valid(v8 + 1, a3, 0);
  ktrace_log_init();
  BOOL v23 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG);
  if (v22)
  {
    if (v23) {
      synthesize_thread_map_chunk_cold_4();
    }
    uint64_t v21 = 4;
    goto LABEL_21;
  }
  if (v23) {
    synthesize_thread_map_chunk_cold_8();
  }
  size_t v25 = v6 - v9;
  unint64_t v26 = ktrace_file_read(a1, (char *)v8 + v9, v25, v9 + a2);
  if (v26 >= v25)
  {
    BOOL v30 = thread_map_entries_valid(v8 + 1, a3, 1);
    ktrace_log_init();
    BOOL v31 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG);
    if (v30)
    {
      uint64_t v16 = 32 * a3;
      if (v31) {
        synthesize_thread_map_chunk_cold_5();
      }
      int v12 = 0;
      *(unsigned char *)(a1 + 298) = 1;
      uint64_t v15 = a2 + 4;
    }
    else
    {
      if (v31) {
        synthesize_thread_map_chunk_cold_7();
      }
      int v32 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        synthesize_thread_map_chunk_cold_6();
      }
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      *__error() = v32;
      int v12 = 22;
    }
  }
  else
  {
    unint64_t v27 = v26;
    int v12 = *__error();
    int v28 = *__error();
    ktrace_log_init();
    __int16 v29 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      int v33 = 134218496;
      unint64_t v34 = v27;
      __int16 v35 = 2048;
      size_t v36 = v25;
      __int16 v37 = 1024;
      int v38 = v28;
      _os_log_error_impl(&dword_1B39A5000, v29, OS_LOG_TYPE_ERROR, "only read %zu bytes of expected %zu bytes in 64-bit V1 thread map (%{errno}d)", (uint8_t *)&v33, 0x1Cu);
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *__error() = v28;
  }
LABEL_22:
  free(v8);
  if (v12)
  {
LABEL_23:
    int v18 = 0;
    *__error() = 0;
    return v18;
  }
LABEL_9:
  int v18 = ktrace_chunk_create(a1, 7424, 1, 0, v16, v15);
  int v19 = ktrace_chunk_array_append((void *)(a1 + 24), v18);
  if (v19)
  {
    *__error() = v19;
    int v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_thread_map_chunk_cold_1();
    }
    *__error() = v20;
    free(v18);
    return 0;
  }
  return v18;
}

void *synthesize_events_chunk(uint64_t a1, unint64_t a2)
{
  if ((unint64_t)ktrace_file_read(a1, (void *)(a1 + 160), 8uLL, a2) <= 7)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_events_chunk_cold_1();
    }
LABEL_21:
    int v7 = 0;
    *__error() = v4;
    return v7;
  }
  if (!*(unsigned char *)(a1 + 298))
  {
    uint64_t v11 = 0;
    if ((unint64_t)ktrace_file_read(a1, &v11, 8uLL, a2 + 56) <= 7)
    {
      int v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        synthesize_events_chunk_cold_6();
      }
      goto LABEL_21;
    }
    if (!v11)
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        synthesize_events_chunk_cold_5();
      }
      *(unsigned char *)(a1 + 298) = 1;
    }
  }
  ktrace_log_init();
  uint64_t v5 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    synthesize_events_chunk_cold_4(a1, a2, v5);
  }
  size_t v6 = ktrace_chunk_create(a1, 7680, 1, 0, *(void *)(a1 + 280) - (a2 - 8), a2 - 8);
  if (!v6)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_events_chunk_cold_2();
    }
    goto LABEL_21;
  }
  int v7 = v6;
  int appended = ktrace_chunk_array_append_internal(a1 + 24, v6);
  if (appended)
  {
    int v9 = appended;
    free(v7);
    *__error() = v9;
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_events_chunk_cold_3();
    }
    goto LABEL_21;
  }
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  *(void *)(a1 + 32) = v7;
  return v7;
}

BOOL thread_map_entries_valid(_DWORD *a1, int a2, int a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 >= 100) {
    int v3 = 100;
  }
  else {
    int v3 = a2;
  }
  if (a3) {
    uint64_t v4 = 3;
  }
  else {
    uint64_t v4 = 2;
  }
  if (!a3)
  {
    if (*a1) {
      goto LABEL_10;
    }
    return 0;
  }
  if (!*(void *)a1) {
    return 0;
  }
LABEL_10:
  int v5 = 0;
  if (v3)
  {
    size_t v6 = &a1[v4];
    uint64_t v7 = v4 * 4 + 20;
    do
    {
      uint64_t v8 = 0;
      --v3;
      do
      {
        if (!*((unsigned char *)v6 + v8)) {
          break;
        }
        if (*((char *)v6 + v8) < 32) {
          ++v5;
        }
        ++v8;
      }
      while (v8 != 20);
      size_t v6 = (_DWORD *)((char *)v6 + v7);
    }
    while (v3);
  }
  return v5 == 0;
}

BOOL __ktrace_file_iterate_subfile_block_invoke(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = 1;
  if (ktrace_chunk_tag((uint64_t)a2) == *(_DWORD *)(a1 + 72))
  {
    v12[0] = 0;
    v12[1] = v12;
    void v12[2] = 0x2000000000;
    char v13 = 1;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    void v8[2] = __ktrace_file_iterate_subfile_block_invoke_2;
    v8[3] = &unk_1E60620E0;
    int v11 = *(_DWORD *)(a1 + 76);
    long long v9 = *(_OWORD *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 64);
    v8[4] = *(void *)(a1 + 32);
    v8[5] = v12;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = ktrace_chunk_iterate_subchunks(a2, 0, (uint64_t)v8);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    int v6 = *(_DWORD *)(v5 + 24);
    if (!v6) {
      int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
    *(_DWORD *)(v5 + 24) = v6;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
      BOOL v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    _Block_object_dispose(v12, 8);
  }
  return v4;
}

BOOL __ktrace_file_iterate_subfile_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  int v5 = *(unsigned __int8 *)(v4 + 24);
  *(unsigned char *)(v4 + 24) = 0;
  int v6 = ktrace_chunk_tag((uint64_t)a2);
  BOOL result = 1;
  if (v6 != 32777 && v6 != 32781)
  {
    if (v6 != 32780)
    {
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
        return *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) != 0;
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 79;
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_iterate_subfile_block_invoke_2_cold_1();
      }
      goto LABEL_12;
    }
    if (!v5
      || (unint64_t)ktrace_chunk_size((uint64_t)a2) < 4
      || ktrace_chunk_version_major((uint64_t)a2))
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 79;
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_iterate_subfile_block_invoke_2_cold_2();
      }
LABEL_12:
      long long v9 = __error();
      BOOL result = 0;
      *long long v9 = v8;
      return result;
    }
    int v11 = 0;
    int v10 = ktrace_chunk_copy_data(a2, 0, &v11, 4uLL);
    BOOL result = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10;
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      if (v11 == *(_DWORD *)(a1 + 72))
      {
        BOOL result = 1;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t finish_events_chunk(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a3)
  {
    int v10 = a4;
    uint64_t v6 = ktrace_chunk_overwrite(a2, 8, &v10, 4uLL);
    if (v6)
    {
      uint64_t appended = v6;
      *__error() = v6;
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        finish_events_chunk_cold_2();
      }
LABEL_8:
      *__error() = v8;
      return appended;
    }
  }
  uint64_t appended = ktrace_file_append_finish(a1, a2);
  if (appended)
  {
    *__error() = appended;
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      finish_events_chunk_cold_1();
    }
    goto LABEL_8;
  }
  return appended;
}

uint64_t append_transformed_events_internal(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, UInt8 *a5, int a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v29 = 0;
  BOOL v30 = &v29;
  uint64_t v31 = 0x2000000000;
  int v32 = 0;
  uint64_t v10 = 32;
  if (a6) {
    uint64_t v10 = 64;
  }
  if (!a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v25 = 0;
  unint64_t v26 = &v25;
  uint64_t v27 = 0x2000000000;
  uint64_t v28 = 0;
  uint64_t v21 = 0;
  BOOL v22 = &v21;
  uint64_t v23 = 0x2000000000;
  uint64_t v24 = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  v18[2] = __append_transformed_events_internal_block_invoke;
  v18[3] = &unk_1E6062130;
  char v19 = a6;
  void v18[4] = a9;
  void v18[5] = &v25;
  BOOL v20 = a8 != 0;
  unsigned char v18[8] = 0x400000;
  void v18[9] = a8;
  v18[10] = a5;
  v18[11] = a1;
  v18[12] = a2;
  v18[13] = v10;
  v18[6] = &v29;
  v18[7] = &v21;
  trace_enumerate(a3, a4, a6, (uint64_t)v18);
  uint64_t v15 = *((unsigned int *)v30 + 6);
  if (!v15)
  {
    CFIndex v16 = v26[3];
    if (v16)
    {
      uint64_t v15 = lazy_chunk_write(a1, a2, a8 != 0, a5, v16);
      *((_DWORD *)v30 + 6) = v15;
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  *a7 = v22[3];
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  return v15;
}

uint64_t __append_transformed_events_internal_block_invoke(uint64_t a1, char *__src)
{
  unint64_t v4 = *(void *)__src;
  if (*(unsigned char *)(a1 + 112))
  {
    unint64_t v5 = *((unsigned int *)__src + 13);
    uint64_t v6 = __src + 48;
    uint64_t v7 = *((void *)__src + 1);
    uint64_t v8 = *((void *)__src + 2);
    uint64_t v9 = *((void *)__src + 3);
    uint64_t v10 = *((void *)__src + 4);
    uint64_t v11 = *((void *)__src + 5);
  }
  else
  {
    unint64_t v5 = HIBYTE(v4);
    v4 &= 0xFFFFFFFFFFFFFFuLL;
    uint64_t v6 = __src + 28;
    uint64_t v7 = *((unsigned int *)__src + 2);
    uint64_t v8 = *((unsigned int *)__src + 3);
    uint64_t v9 = *((unsigned int *)__src + 4);
    uint64_t v10 = *((unsigned int *)__src + 5);
    uint64_t v11 = *((unsigned int *)__src + 6);
  }
  uint64_t v12 = *(unsigned int *)v6;
  uint64_t v13 = *(void *)(a1 + 32);
  if (!v13
    || (uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(v13 + 16))(v13, v4, v12, v7, v8, v9, v10, v11, v5), result))
  {
    CFIndex v15 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    unint64_t v16 = *(void *)(a1 + 64) - v15;
    if (*(unsigned char *)(a1 + 113))
    {
      int v17 = *(unsigned int **)(a1 + 72);
      uint64_t v18 = *(void *)(a1 + 80);
      char v19 = &v17[12 * *v17];
      *((void *)v17 + 2) = v4;
      *((void *)v19 + 3) = v7;
      *((void *)v19 + 4) = v8;
      *((void *)v19 + 5) = v9;
      *((void *)v19 + 6) = v10;
      *((void *)v19 + 7) = v11;
      *((void *)v19 + 8) = v12 | (v5 << 32);
      BOOL v20 = ktrace_compressor_commit((int *)v17, (void *)(v18 + *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)), v16);
      if (!v20)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = lazy_chunk_write(*(void *)(a1 + 88), *(uint64_t **)(a1 + 96), *(unsigned __int8 *)(a1 + 113), *(UInt8 **)(a1 + 80), *(void *)(*(void *)(*(void *)(a1 + 40)+ 8)+ 24));
        uint64_t result = *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        if (result) {
          return result;
        }
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        BOOL v20 = ktrace_compressor_commit(*(int **)(a1 + 72), *(void **)(a1 + 80), *(void *)(a1 + 64));
        if (!v20) {
          ktrace_postprocess_file_internal_cold_1();
        }
      }
    }
    else
    {
      size_t v21 = *(void *)(a1 + 104);
      if (v21 > v16)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = lazy_chunk_write(*(void *)(a1 + 88), *(uint64_t **)(a1 + 96), 0, *(UInt8 **)(a1 + 80), v15);
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        CFIndex v15 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        size_t v21 = *(void *)(a1 + 104);
      }
      memcpy((void *)(*(void *)(a1 + 80) + v15), __src, v21);
      BOOL v20 = *(char **)(a1 + 104);
    }
    uint64_t result = 0;
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v20;
  }
  return result;
}

uint64_t lazy_chunk_write(uint64_t a1, uint64_t *a2, int a3, UInt8 *bytes, CFIndex length)
{
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v9 = *a2;
  if (!v9)
  {
    uint64_t v10 = setup_events_chunk(a1, a3);
    if (!v10) {
      return *__error();
    }
    uint64_t v9 = (uint64_t)v10;
    *a2 = (uint64_t)v10;
  }
  uint64_t result = ktrace_file_append_data(a1, v9, bytes, length);
  if (result) {
    *a2 = 0;
  }
  return result;
}

uint64_t __find_unused_subfile_id_block_invoke(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 216);
  int v3 = *(unsigned int **)(result + 32);
  if (v2 >= *v3) {
    *int v3 = v2 + 1;
  }
  return result;
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_13(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

void ktrace_catalog_internal::IterateProcesses(uint64_t a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  for (uint64_t i = *a2; i != *a3; *a2 = i)
  {
    if (!(*(unsigned int (**)(uint64_t, char *))(a4 + 16))(a4, (char *)i + *i)) {
      break;
    }
    uint64_t i = *a2 + 1;
  }
}

void ktrace_catalog_internal::IterateThreads(uint64_t a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  for (uint64_t i = *a2; i != *a3; *a2 = i)
  {
    if (!(*(unsigned int (**)(uint64_t, char *))(a4 + 16))(a4, (char *)i + *i)) {
      break;
    }
    uint64_t i = *a2 + 1;
  }
}

void *ktrace_catalog_internal::IterateLostEvents(void *result, uint64_t a2)
{
  unsigned int v2 = (unsigned int *)(*result + *(unsigned __int16 *)(*result - *(int *)*result + 10));
  int v3 = (unsigned int *)((char *)v2 + *v2);
  unsigned int v6 = *v3;
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v8 = 4 * v5 - 4;
    uint64_t v9 = v4;
    do
    {
      unsigned int v10 = *v9++;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, (char *)v4 + v10);
      if (result) {
        BOOL v11 = v8 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      v8 -= 4;
      uint64_t v4 = v9;
    }
    while (!v11);
  }
  return result;
}

unsigned int **ktrace_catalog_internal::IterateProcesses(unsigned int **result, uint64_t a2)
{
  int v3 = *result;
  uint64_t v4 = (int)**result;
  uint64_t v5 = *(unsigned __int16 *)((char *)*result - v4 + 6);
  if (*(_WORD *)((char *)*result - v4 + 6))
  {
    uint64_t v6 = *(unsigned int *)((char *)v3 + v5);
    uint64_t v7 = (char *)v3 + v5 + v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = **result;
  }
  uint64_t v8 = (uint64_t)&v3[*(unsigned int *)((char *)v3 + v5 + v6)] + v5 + v6;
  if (v7 != (char *)v8)
  {
    uint64_t v9 = v7 + 4;
    unsigned int v10 = (unsigned int *)(v8 + 4);
    BOOL v11 = (unsigned int *)(v7 + 4);
    do
    {
      unsigned int v12 = *v11++;
      uint64_t result = (unsigned int **)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v9[v12]);
      if (result) {
        BOOL v13 = v11 == v10;
      }
      else {
        BOOL v13 = 1;
      }
      uint64_t v9 = (char *)v11;
    }
    while (!v13);
  }
  return result;
}

unsigned int **ktrace_catalog_internal::IterateThreads(unsigned int **result, uint64_t a2)
{
  int v3 = *result;
  uint64_t v4 = (int)**result;
  uint64_t v5 = *(unsigned __int16 *)((char *)*result - v4 + 8);
  if (*(_WORD *)((char *)*result - v4 + 8))
  {
    uint64_t v6 = *(unsigned int *)((char *)v3 + v5);
    uint64_t v7 = (char *)v3 + v5 + v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = **result;
  }
  uint64_t v8 = (uint64_t)&v3[*(unsigned int *)((char *)v3 + v5 + v6)] + v5 + v6;
  if (v7 != (char *)v8)
  {
    uint64_t v9 = v7 + 4;
    unsigned int v10 = (unsigned int *)(v8 + 4);
    BOOL v11 = (unsigned int *)(v7 + 4);
    do
    {
      unsigned int v12 = *v11++;
      uint64_t result = (unsigned int **)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v9[v12]);
      if (result) {
        BOOL v13 = v11 == v10;
      }
      else {
        BOOL v13 = 1;
      }
      uint64_t v9 = (char *)v11;
    }
    while (!v13);
  }
  return result;
}

uint64_t ktrace_catalog_internal::GetProcessFromTid(ktrace_catalog_internal *this, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v16 = 0;
  int v17 = &v16;
  uint64_t v18 = 0x2000000000;
  uint64_t v19 = 0;
  size_t v21 = &v20;
  uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 8, &v20, (uint64_t)&std::piecewise_construct, &v21)[3];
  uint64_t v3 = v17[3];
  if (!v3)
  {
    uint64_t v4 = (unsigned int *)*((void *)this + 6);
    uint64_t v5 = (unsigned int *)(*(void *)this + *(unsigned __int16 *)(*(void *)this - **(int **)this + 6));
    uint64_t v6 = (uint64_t)&v5[*(unsigned int *)((char *)v5 + *v5) + 1] + *v5;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 0x40000000;
    BOOL v11 = ___ZN23ktrace_catalog_internal17GetProcessFromTidEy_block_invoke;
    unsigned int v12 = &unk_1E6062178;
    uint64_t v14 = this;
    unint64_t v15 = v20;
    BOOL v13 = &v16;
    if (v4 == (unsigned int *)v6)
    {
      uint64_t v3 = 0;
    }
    else
    {
      do
      {
        char v7 = v11(v10, (int *)((char *)v4 + *v4));
        if (++v4 == (unsigned int *)v6) {
          char v8 = 0;
        }
        else {
          char v8 = v7;
        }
      }
      while ((v8 & 1) != 0);
      uint64_t v3 = v17[3];
    }
  }
  _Block_object_dispose(&v16, 8);
  return v3;
}

void sub_1B39CA490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23ktrace_catalog_internal17GetProcessFromTidEy_block_invoke(void *a1, int *a2)
{
  uint64_t v2 = *(unsigned __int16 *)((char *)a2 - *a2 + 10);
  uint64_t v3 = *(unsigned int *)((char *)a2 + v2);
  uint64_t v4 = *(unsigned int *)((char *)a2 + v2 + v3);
  if (!v4) {
    return 1;
  }
  uint64_t v7 = 4 * v4;
  uint64_t v8 = a1[5] + 8;
  for (uint64_t i = v2 + v3; ; i += 4)
  {
    uint64_t v10 = *(unsigned int *)((char *)a2 + i + 4);
    BOOL v11 = (char *)a2 + i + v10;
    unsigned int v12 = (char *)a2 + i + v10 - *((int *)v11 + 1);
    if (*((unsigned __int16 *)v12 + 2) < 5u)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = *((unsigned __int16 *)v12 + 4);
      if (v13) {
        unint64_t v13 = *(void *)((char *)a2 + i + v10 + v13 + 4);
      }
    }
    v17[0] = v13;
    v17[1] = (unint64_t)a2;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,KernelTraceCatalog::Process const*>>(v8, v17, v17);
    uint64_t v14 = v10 - *((int *)v11 + 1);
    if (*(unsigned __int16 *)((char *)a2 + i + v14 + 4) < 5u)
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = *(unsigned __int16 *)((char *)a2 + i + v14 + 8);
      if (v15) {
        uint64_t v15 = *(void *)((char *)a2 + i + v10 + v15 + 4);
      }
    }
    if (v15 == a1[6]) {
      break;
    }
    v7 -= 4;
    if (!v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1[4] + 8) + 24) = a2;
  return result;
}

unsigned int *ktrace_catalog_internal::GetThreadFromTid(ktrace_catalog_internal *this, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)(*(void *)this + *(unsigned __int16 *)(*(void *)this - **(int **)this + 8));
  uint64_t v3 = (unsigned int *)((char *)v2 + *v2);
  uint64_t __key = a2;
  uint64_t result = (unsigned int *)bsearch(&__key, v3 + 1, *v3, 4uLL, (int (__cdecl *)(const void *, const void *))flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::KeyCompare<unsigned long long>);
  if (result) {
    return (unsigned int *)((char *)result + *result);
  }
  return result;
}

char *ktrace_catalog_internal::GetProcessFromUniqueID(ktrace_catalog_internal *this, unint64_t *a2)
{
  uint64_t v3 = (unsigned int *)(*(void *)this + *(unsigned __int16 *)(*(void *)this - **(int **)this + 6));
  uint64_t v4 = (unsigned int *)((char *)v3 + *v3);
  uint64_t __key = a2;
  uint64_t v5 = (unsigned int *)bsearch(&__key, v4 + 1, *v4, 4uLL, (int (__cdecl *)(const void *, const void *))flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Process>>::KeyCompare<unsigned long long>);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *v5;
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = *(unsigned __int16 *)((char *)v5 + v6 - *(int *)((char *)v5 + v6) + 10);
  uint64_t v9 = (unsigned int *)((char *)v5 + v6 + v8);
  uint64_t v10 = *v9;
  uint64_t v11 = *(unsigned int *)((char *)v9 + v10);
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 4 * v11;
    uint64_t v14 = (char *)this + 8;
    uint64_t v15 = (char *)v5 + v8 + v6 + v10;
    do
    {
      uint64_t v16 = *(unsigned int *)&v15[v12 + 4];
      int v17 = &v15[v12 + v16 - *(int *)&v15[v12 + 4 + v16]];
      if (*((unsigned __int16 *)v17 + 2) >= 5u && (uint64_t v18 = *((unsigned __int16 *)v17 + 4)) != 0) {
        unint64_t v19 = *(void *)&v15[v12 + 4 + v16 + v18];
      }
      else {
        unint64_t v19 = 0;
      }
      unint64_t v21 = v19;
      uint64_t __key = &v21;
      std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v14, &v21, (uint64_t)&std::piecewise_construct, &__key)[3] = v7;
      v12 += 4;
    }
    while (v13 != v12);
  }
  return v7;
}

uint64_t ktrace_catalog_open(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = 0;
  unint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  unint64_t v17[2] = __ktrace_catalog_open_block_invoke;
  v17[3] = &unk_1E60621A0;
  _OWORD v17[4] = &v18;
  int v9 = ktrace_file_iterate(a1, 0, (uint64_t)v17, a4, a5, a6, a7, a8);
  if (v9)
  {
    *__error() = v9;
    goto LABEL_10;
  }
  uint64_t v10 = v19[3];
  if (!v10)
  {
    uint64_t v14 = __error();
    int v15 = 45;
LABEL_9:
    *uint64_t v14 = v15;
    goto LABEL_10;
  }
  size_t v11 = ktrace_chunk_size_t(v10, v8);
  uint64_t v12 = malloc_type_malloc(v11, 0xFE3087F9uLL);
  if (!v12)
  {
    uint64_t v14 = __error();
    int v15 = 12;
    goto LABEL_9;
  }
  int v13 = ktrace_chunk_copy_data((uint64_t *)v19[3], 0, v12, v11);
  if (!v13) {
    operator new();
  }
  free(v12);
  *__error() = v13;
LABEL_10:
  _Block_object_dispose(&v18, 8);
  return 0;
}

void sub_1B39CA970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_catalog_open_block_invoke(uint64_t a1, uint64_t a2)
{
  if (ktrace_chunk_tag(a2) != 32788 || ktrace_chunk_version_major(a2) > 1) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  return result;
}

void ktrace_catalog_create(uint64_t a1@<X0>, uint64_t **a2@<X1>, unint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 16) = xmmword_1B3A73160;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 1;
  *(_WORD *)(a3 + 80) = 256;
  *(void *)(a3 + 88) = 0;
  __p = 0;
  long long v52 = 0;
  long long v53 = 0;
  int v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v6 = *(void *)(a1 + 296);
  uint64_t i = 0;
  long long v56 = &i;
  uint64_t v57 = 0x4002000000;
  long long v58 = __Block_byref_object_copy__24;
  v61[0] = 0;
  v61[1] = 0;
  long long v59 = __Block_byref_object_dispose__25;
  uint64_t v60 = v61;
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 0x40000000;
  v54[2] = ___ZL30ktrace_catalog_read_thread_mapP6kthmapRN11flatbuffers17FlatBufferBuilderERNSt3__16vectorINS1_6OffsetIN18KernelTraceCatalog7ProcessEEENS4_9allocatorIS9_EEEERNS5_INS6_INS7_6ThreadEEENSA_ISF_EEEE_block_invoke;
  v54[3] = &unk_1E6062290;
  v54[6] = a3;
  v54[7] = &v48;
  v54[4] = &i;
  v54[5] = v6;
  kthmap_iterate_threads(v6, (uint64_t)v54);
  uint64_t v44 = a1;
  uint64_t v7 = v56[5];
  uint64_t v8 = v56 + 6;
  if (v7 != (void **)(v56 + 6))
  {
    do
    {
      int v9 = *((_DWORD *)v7 + 8);
      uint64_t v10 = (uint64_t)v7[5];
      size_t v11 = (char *)kthmap_name_for_pid(v6, v9);
      int ProcessDirect = KernelTraceCatalog::CreateProcessDirect((flatbuffers::FlatBufferBuilder *)a3, v10, v9, v11, v7 + 6);
      int v13 = ProcessDirect;
      uint64_t v14 = v52;
      if (v52 >= v53)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = (v52 - (unsigned char *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v53 - (unsigned char *)__p;
        if ((v53 - (unsigned char *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)&v53, v20);
          uint64_t v16 = (char *)__p;
          uint64_t v14 = v52;
        }
        else
        {
          uint64_t v21 = 0;
        }
        BOOL v22 = &v21[4 * v17];
        *(_DWORD *)BOOL v22 = v13;
        int v15 = v22 + 4;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        __p = v22;
        long long v52 = v15;
        long long v53 = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)long long v52 = ProcessDirect;
        int v15 = v14 + 4;
      }
      long long v52 = v15;
      uint64_t v24 = (void **)v7[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = (void **)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (void **)v7[2];
          BOOL v26 = *v25 == v7;
          uint64_t v7 = v25;
        }
        while (!v26);
      }
      uint64_t v7 = v25;
    }
    while (v25 != (void **)v8);
  }
  _Block_object_dispose(&i, 8);
  std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy((uint64_t)&v60, v61[0]);
  uint64_t v27 = *a2;
  uint64_t v28 = a2[1];
  for (uint64_t i = &v45; v27 != v28; ++v27)
  {
    uint64_t v29 = *v27;
    flatbuffers::FlatBufferBuilder::NotNested(a3);
    *(unsigned char *)(a3 + 70) = 1;
    uint64_t v30 = *(void *)(a3 + 40);
    uint64_t v31 = *(void *)(a3 + 48);
    uint64_t v32 = *(void *)(a3 + 32);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a3, 4, v29, 0);
    LODWORD(v54[0]) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, (int)v32 - (int)v31 + (int)v30);
    std::back_insert_iterator<std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>::operator=[abi:ne180100]((uint64_t *)&i, v54);
  }
  uint64_t v33 = *(void *)(v44 + 496);
  if (v52 == __p) {
    unint64_t v34 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Process>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Process>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Process>> &)::t;
  }
  else {
    unint64_t v34 = __p;
  }
  unsigned int v35 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Process>((flatbuffers::FlatBufferBuilder *)a3, (uint64_t)v34, (v52 - (unsigned char *)__p) >> 2);
  if (v49 == v48) {
    size_t v36 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Thread>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>> &)::t;
  }
  else {
    size_t v36 = v48;
  }
  unsigned int v37 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>((flatbuffers::FlatBufferBuilder *)a3, (uint64_t)v36, (v49 - (unsigned char *)v48) >> 2);
  if (v46 == v45) {
    int v38 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::LostEvent>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>> const&)::t;
  }
  else {
    int v38 = v45;
  }
  unsigned int v39 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>((flatbuffers::FlatBufferBuilder *)a3, (uint64_t)v38, (v46 - (unsigned char *)v45) >> 2);
  flatbuffers::FlatBufferBuilder::NotNested(a3);
  *(unsigned char *)(a3 + 70) = 1;
  int v40 = *(_DWORD *)(a3 + 32);
  int v41 = *(_DWORD *)(a3 + 48);
  int v42 = *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a3, 4, v33, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 10, v39);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 8, v37);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 6, v35);
  unsigned int v43 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v40 - v41 + v42);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v43, "KTCA", 0);
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
  if (__p)
  {
    long long v52 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B39CAE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Block_object_dispose(&a28, 8);
  std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(a10, a34);
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(v34);
  _Unwind_Resume(a1);
}

uint64_t ktrace_catalog_postprocess_file(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x4002000000;
  v15[3] = __Block_byref_object_copy__0;
  _OWORD v15[4] = __Block_byref_object_dispose__0;
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  char v23 = 0;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  v19[2] = ___ZL36ktrace_catalog_file_contains_catalogP11ktrace_file_block_invoke;
  v19[3] = &unk_1E60622B8;
  v19[4] = &v20;
  ktrace_file_iterate(a2, 0, (uint64_t)v19, a4, a5, a6, a7, a8);
  int v11 = *((unsigned __int8 *)v21 + 24);
  _Block_object_dispose(&v20, 8);
  if (!v11)
  {
    ktrace_set_execnames_enabled(a1, 1);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    void v14[2] = __ktrace_catalog_postprocess_file_block_invoke;
    v14[3] = &unk_1E60621C8;
    v14[4] = v15;
    ktrace_events_single(a1, 117571592, v14);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    v13[2] = __ktrace_catalog_postprocess_file_block_invoke_2;
    _OWORD v13[3] = &unk_1E60621F0;
    void v13[4] = v15;
    v13[5] = a1;
    v13[6] = a2;
    ktrace_postprocessing_set_completed_handler(a3, v13);
  }
  _Block_object_dispose(v15, 8);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1B39CB080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __ktrace_catalog_postprocess_file_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = (char *)v3[6];
  unint64_t v5 = v3[7];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = (char *)v3[5];
    uint64_t v8 = (v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v5 - (void)v7;
    unint64_t v10 = (uint64_t)(v5 - (void)v7) >> 2;
    if (v10 <= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v3 + 7), v11);
      uint64_t v7 = (char *)v3[5];
      uint64_t v4 = (char *)v3[6];
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)int v13 = *a2;
    uint64_t v6 = v13 + 8;
    while (v4 != v7)
    {
      uint64_t v15 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v13 - 1) = v15;
      v13 -= 8;
    }
    v3[5] = v13;
    void v3[6] = v6;
    v3[7] = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v4 = *a2;
    uint64_t v6 = v4 + 8;
  }
  void v3[6] = v6;
}

void __ktrace_catalog_postprocess_file_block_invoke_2(void *a1)
{
  ktrace_catalog_create(a1[5], (uint64_t **)(*(void *)(a1[4] + 8) + 40), (unint64_t)v3);
  BufferPointer = (UInt8 *)flatbuffers::FlatBufferBuilder::GetBufferPointer((flatbuffers::FlatBufferBuilder *)v3);
  if (BufferPointer) {
    ktrace_file_append_chunk(a1[6], 32788, 1, 0, BufferPointer, (v3[8] - v3[12] + v3[10]));
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)v3);
}

void sub_1B39CB244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t flatbuffers::FlatBufferBuilder::GetBufferPointer(flatbuffers::FlatBufferBuilder *this)
{
  if (!*((unsigned char *)this + 71)) {
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  }
  uint64_t result = *((void *)this + 6);
  if (!result) {
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  }
  return result;
}

uint64_t ktrace_process_unique_id(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (uint64_t v2 = v1[2]) != 0) {
    return *(void *)(*a1 + v2);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_process_id(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 7u && (uint64_t v2 = v1[3]) != 0) {
    return *(unsigned int *)(*a1 + v2);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_process_last_name(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 9u && (uint64_t v2 = v1[4]) != 0) {
    return *a1 + v2 + *(unsigned int *)(*a1 + v2) + 4;
  }
  else {
    return 0;
  }
}

uint64_t ktrace_process_main_thread(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void ktrace_catalog_iterate_threads(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int ***)(a1 + 8);
  v6[0] = 0;
  v6[1] = v6;
  int v6[2] = 0x3802000000;
  v6[3] = __Block_byref_object_copy__8;
  v6[4] = __Block_byref_object_dispose__9;
  v5[0] = 0;
  v5[1] = v5;
  void v5[2] = 0x3802000000;
  v5[3] = __Block_byref_object_copy__10;
  v5[4] = __Block_byref_object_dispose__11;
  v4[0] = 0;
  v4[1] = v4;
  int v4[2] = 0x3802000000;
  v4[3] = __Block_byref_object_copy__10;
  v4[4] = __Block_byref_object_dispose__11;
  v4[6] = v7;
  v5[6] = v7;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  mach_timebase_info v3[2] = __ktrace_catalog_iterate_threads_block_invoke;
  _OWORD v3[3] = &unk_1E6062218;
  v3[7] = v5;
  v3[8] = v2;
  v3[5] = v6;
  void v3[6] = v4;
  v3[4] = a2;
  ktrace_catalog_internal::IterateThreads(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v6, 8);
}

void sub_1B39CB480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __ktrace_catalog_iterate_threads_block_invoke(void *a1, int *a2)
{
  uint64_t v4 = (ktrace_catalog_internal *)a1[8];
  unint64_t v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
    unint64_t v7 = *(void *)((char *)a2 + v6);
  }
  else {
    unint64_t v7 = 0;
  }
  ProcessFromTid = (int *)ktrace_catalog_internal::GetProcessFromTid(v4, v7);
  unint64_t v9 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v10 = *v9;
  if (v10 >= 9 && (uint64_t v11 = v9[4]) != 0 && *((unsigned char *)a2 + v11))
  {
    uint64_t v12 = a1 + 5;
    *(void *)(*(void *)(a1[5] + 8) + 40) = ProcessFromTid;
    int v13 = a1 + 6;
    *(void *)(*(void *)(a1[6] + 8) + 40) = a2;
    uint64_t v14 = (uint64_t)a2;
  }
  else
  {
    uint64_t v15 = *(unsigned __int16 *)((char *)ProcessFromTid - *ProcessFromTid + 10);
    uint64_t v16 = *(unsigned int *)((char *)ProcessFromTid + v15);
    uint64_t v17 = (unsigned int *)((char *)ProcessFromTid + v15 + v16);
    uint64_t v18 = *v17;
    if (v18)
    {
      unint64_t v19 = 0;
      uint64_t v20 = 4 * v18;
      uint64_t v21 = (char *)ProcessFromTid + v15 + v16;
      while (1)
      {
        uint64_t v22 = *(unsigned int *)&v21[v19 + 4];
        char v23 = (char *)&v17[v19 / 4] + v22 - *(int *)((char *)&v17[v19 / 4 + 1] + v22);
        if (*((unsigned __int16 *)v23 + 2) >= 9u)
        {
          uint64_t v24 = *((unsigned __int16 *)v23 + 6);
          if (v24)
          {
            if (*((unsigned char *)&v17[v19 / 4 + 1] + v22 + v24)) {
              break;
            }
          }
        }
        v19 += 4;
        if (v20 == v19) {
          goto LABEL_15;
        }
      }
      uint64_t v14 = (uint64_t)v17 + v22 + v19 + 4;
    }
    else
    {
LABEL_15:
      uint64_t v14 = 0;
    }
    uint64_t v12 = a1 + 5;
    *(void *)(*(void *)(a1[5] + 8) + 40) = ProcessFromTid;
    int v13 = a1 + 6;
    *(void *)(*(void *)(a1[6] + 8) + 40) = a2;
    if (v10 < 9) {
      goto LABEL_20;
    }
    LODWORD(v11) = v9[4];
    if (!v9[4]) {
      goto LABEL_20;
    }
  }
  if (*((unsigned char *)a2 + v11))
  {
    *(void *)(*(void *)(*v12 + 8) + 48) = *(void *)(*v13 + 8) + 40;
    goto LABEL_21;
  }
LABEL_20:
  *(void *)(*(void *)(a1[5] + 8) + 48) = *(void *)(a1[7] + 8) + 40;
  *(void *)(*(void *)(a1[7] + 8) + 40) = v14;
LABEL_21:
  uint64_t v25 = *(uint64_t (**)(void))(a1[4] + 16);

  return v25();
}

void ktrace_catalog_iterate_processes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int ***)(a1 + 8);
  v6[0] = 0;
  v6[1] = v6;
  int v6[2] = 0x3802000000;
  v6[3] = __Block_byref_object_copy__8;
  v6[4] = __Block_byref_object_dispose__9;
  v4[0] = 0;
  v4[1] = v4;
  int v4[2] = 0x3802000000;
  v4[3] = __Block_byref_object_copy__10;
  v7[1] = v5;
  v4[4] = __Block_byref_object_dispose__11;
  v5[1] = v7;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  mach_timebase_info v3[2] = __ktrace_catalog_iterate_processes_block_invoke;
  _OWORD v3[3] = &unk_1E6062240;
  v3[5] = v6;
  void v3[6] = v4;
  v3[4] = a2;
  ktrace_catalog_internal::IterateProcesses(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v6, 8);
}

void sub_1B39CB7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 72), 8);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_catalog_iterate_processes_block_invoke(void *a1, int *a2)
{
  uint64_t v2 = *(unsigned __int16 *)((char *)a2 - *a2 + 10);
  uint64_t v3 = *(unsigned int *)((char *)a2 + v2);
  uint64_t v4 = *(unsigned int *)((char *)a2 + v2 + v3);
  if (v4)
  {
    uint64_t v5 = 4 * v4;
    uint64_t v6 = v2 + v3;
    while (1)
    {
      uint64_t v7 = *(unsigned int *)((char *)a2 + v6 + 4);
      uint64_t v8 = (char *)a2 + v6 + v7 - *(int *)((char *)a2 + v6 + v7 + 4);
      if (*((unsigned __int16 *)v8 + 2) >= 9u)
      {
        uint64_t v9 = *((unsigned __int16 *)v8 + 6);
        if (v9)
        {
          if (*((unsigned char *)a2 + v6 + v7 + v9 + 4)) {
            break;
          }
        }
      }
      v6 += 4;
      v5 -= 4;
      if (!v5) {
        goto LABEL_7;
      }
    }
    *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
    *(void *)(*(void *)(a1[6] + 8) + 40) = (char *)a2 + v7 + v6 + 4;
  }
  else
  {
LABEL_7:
    *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
    *(void *)(*(void *)(a1[5] + 8) + 48) = 0;
  }
  return (*(uint64_t (**)(void, uint64_t))(a1[4] + 16))(a1[4], *(void *)(a1[5] + 8) + 40);
}

void *ktrace_process_iterate_threads(void *result, uint64_t a2)
{
  v11[1] = result;
  uint64_t v2 = (unsigned int *)(*result + *(unsigned __int16 *)(*result - *(int *)*result + 10));
  uint64_t v3 = (unsigned int *)((char *)v2 + *v2);
  unsigned int v6 = *v3;
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v8 = 4 * v5;
    uint64_t v9 = v4;
    do
    {
      unsigned int v10 = *v9++;
      v11[0] = (char *)v4 + v10;
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, void *))(a2 + 16))(a2, v11);
      uint64_t v4 = v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void ktrace_catalog_iterate_lostevents(uint64_t a1, uint64_t a2)
{
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3002000000;
  v15[3] = __Block_byref_object_copy__15;
  _OWORD v15[4] = __Block_byref_object_dispose__16;
  uint64_t v2 = *(void **)(a1 + 8);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  uint64_t v11 = __ktrace_catalog_iterate_lostevents_block_invoke;
  uint64_t v12 = &unk_1E6062268;
  uint64_t v13 = a2;
  uint64_t v14 = v15;
  uint64_t v3 = (unsigned int *)(*v2 + *(unsigned __int16 *)(*v2 - *(int *)*v2 + 10));
  uint64_t v4 = *v3;
  unsigned int v6 = (unsigned int *)((char *)v3 + v4 + 4);
  uint64_t v5 = *(unsigned int *)((char *)v3 + v4);
  if (v5)
  {
    uint64_t v7 = 4 * v5 - 4;
    do
    {
      char v8 = v11((uint64_t)v10, (uint64_t)v6 + *v6);
      ++v6;
      if (v7) {
        char v9 = v8;
      }
      else {
        char v9 = 0;
      }
      v7 -= 4;
    }
    while ((v9 & 1) != 0);
  }
  _Block_object_dispose(v15, 8);
}

void sub_1B39CBA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

uint64_t __ktrace_catalog_iterate_lostevents_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = a2;
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 8) + 40);
}

uint64_t ktrace_lostevent_get_timestamp(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (uint64_t v2 = v1[2]) != 0) {
    return *(void *)(*a1 + v2);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_catalog_get_timestamp(uint64_t a1)
{
  uint64_t v1 = **(int ***)(a1 + 8);
  uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  if (*v2 >= 5u && (uint64_t v3 = v2[2]) != 0) {
    return *(void *)((char *)v1 + v3);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_thread_id(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (uint64_t v2 = v1[2]) != 0) {
    return *(void *)(*a1 + v2);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_thread_last_name(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 7u && (uint64_t v2 = v1[3]) != 0) {
    return *a1 + v2 + *(unsigned int *)(*a1 + v2) + 4;
  }
  else {
    return 0;
  }
}

BOOL ktrace_thread_is_main(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  return *v1 >= 9u && (uint64_t v2 = v1[4]) != 0 && *(unsigned char *)(*a1 + v2) != 0;
}

uint64_t ktrace_thread_process(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void ktrace_catalog_close(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v2 + 8);
    MEMORY[0x1B3EBEC50](v2, 0x10F0C4042F376B1);
  }
  free(*(void **)a1);

  free((void *)a1);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  if (*((unsigned char *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
}

void *flatbuffers::vector_downward::clear_buffer(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[5];
  if (v2)
  {
    uint64_t v3 = *this;
    if (*v1)
    {
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else
    {
      uint64_t v4 = &unk_1F0C3C908;
      this = (void *)MEMORY[0x1B3EBEC30](v2, 0x1000C8077774924);
    }
  }
  v1[5] = 0;
  return this;
}

void flatbuffers::DefaultAllocator::deallocate(flatbuffers::DefaultAllocator *this, unsigned __int8 *a2)
{
  if (a2) {
    JUMPOUT(0x1B3EBEC30);
  }
}

void flatbuffers::DefaultAllocator::~DefaultAllocator(flatbuffers::DefaultAllocator *this)
{
}

void flatbuffers::DefaultAllocator::allocate(flatbuffers::DefaultAllocator *this)
{
}

char *flatbuffers::Allocator::reallocate_downward(flatbuffers::Allocator *this, unsigned __int8 *a2, unint64_t a3, unint64_t a4, size_t a5, size_t a6)
{
  if (a4 <= a3) {
    flatbuffers::Allocator::reallocate_downward();
  }
  uint64_t v12 = (char *)(*(uint64_t (**)(flatbuffers::Allocator *, unint64_t))(*(void *)this + 16))(this, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(flatbuffers::Allocator *, unsigned __int8 *, unint64_t))(*(void *)this + 24))(this, a2, a3);
  return v12;
}

void *__Block_byref_object_copy__24(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void ___ZL30ktrace_catalog_read_thread_mapP6kthmapRN11flatbuffers17FlatBufferBuilderERNSt3__16vectorINS1_6OffsetIN18KernelTraceCatalog7ProcessEEENS4_9allocatorIS9_EEEERNS5_INS6_INS7_6ThreadEEENSA_ISF_EEEE_block_invoke(void *a1, unsigned int a2, uint64_t a3, const void *a4)
{
  char v8 = (const char *)kthmap_thread_name_for_tid(a1[5], a4);
  BOOL is_main_thread = kthmap_tid_is_main_thread(a1[5], a4);
  unint64_t v10 = a1[6];
  if (v8)
  {
    size_t v11 = strlen(v8);
    LODWORD(v8) = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)v10, v8, v11);
  }
  flatbuffers::FlatBufferBuilder::NotNested(v10);
  *(unsigned char *)(v10 + 70) = 1;
  int v12 = *(_DWORD *)(v10 + 32) - *(_DWORD *)(v10 + 48) + *(_DWORD *)(v10 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 4, (uint64_t)a4, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v10, 6, v8);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 8, is_main_thread, 0);
  int v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v12);
  int v14 = v13;
  uint64_t v15 = a1[7];
  uint64_t v16 = *(_DWORD **)(v15 + 8);
  unint64_t v17 = *(void *)(v15 + 16);
  if ((unint64_t)v16 >= v17)
  {
    unint64_t v19 = *(_DWORD **)v15;
    uint64_t v20 = ((uint64_t)v16 - *(void *)v15) >> 2;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62) {
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v17 - (void)v19;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(v15 + 16, v23);
      unint64_t v19 = *(_DWORD **)v15;
      uint64_t v16 = *(_DWORD **)(v15 + 8);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = &v24[4 * v20];
    BOOL v26 = &v24[4 * v23];
    *(_DWORD *)uint64_t v25 = v14;
    uint64_t v18 = v25 + 4;
    while (v16 != v19)
    {
      int v27 = *--v16;
      *((_DWORD *)v25 - 1) = v27;
      v25 -= 4;
    }
    *(void *)uint64_t v15 = v25;
    *(void *)(v15 + 8) = v18;
    *(void *)(v15 + 16) = v26;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v16 = v13;
    uint64_t v18 = v16 + 1;
  }
  *(void *)(v15 + 8) = v18;
  uint64_t v28 = (uint64_t **)(*(void *)(a1[4] + 8) + 40);
  v44[0] = a2;
  v44[1] = a3;
  uint64_t v45 = v44;
  uint64_t v29 = std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__emplace_unique_key_args<std::pair<int,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::pair<int,unsigned long long>&&>,std::tuple<>>(v28, (int *)v44, (uint64_t)&std::piecewise_construct, &v45);
  uint64_t v30 = v29;
  uint64_t v31 = (char *)v29[7];
  uint64_t v32 = (uint64_t)(v29 + 8);
  unint64_t v33 = v29[8];
  if ((unint64_t)v31 >= v33)
  {
    unsigned int v35 = (char *)v29[6];
    uint64_t v36 = (v31 - v35) >> 2;
    if ((unint64_t)(v36 + 1) >> 62) {
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = v33 - (void)v35;
    unint64_t v38 = (uint64_t)(v33 - (void)v35) >> 1;
    if (v38 <= v36 + 1) {
      unint64_t v38 = v36 + 1;
    }
    if (v37 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v38;
    }
    if (v39)
    {
      int v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(v32, v39);
      unsigned int v35 = (char *)v30[6];
      uint64_t v31 = (char *)v30[7];
    }
    else
    {
      int v40 = 0;
    }
    int v41 = &v40[4 * v36];
    int v42 = &v40[4 * v39];
    *(_DWORD *)int v41 = v14;
    unint64_t v34 = v41 + 4;
    while (v31 != v35)
    {
      int v43 = *((_DWORD *)v31 - 1);
      v31 -= 4;
      *((_DWORD *)v41 - 1) = v43;
      v41 -= 4;
    }
    v30[6] = v41;
    v30[7] = v34;
    v30[8] = v42;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v31 = v14;
    unint64_t v34 = v31 + 4;
  }
  v30[7] = v34;
}

uint64_t KernelTraceCatalog::CreateProcessDirect(flatbuffers::FlatBufferBuilder *this, uint64_t a2, int a3, char *__s, void **a5)
{
  unsigned int v6 = __s;
  if (__s)
  {
    size_t v10 = strlen(__s);
    LODWORD(v6) = flatbuffers::FlatBufferBuilder::CreateString(this, v6, v10);
  }
  if (a5)
  {
    uint64_t v11 = (unsigned char *)a5[1] - (unsigned char *)*a5;
    if (v11) {
      int v12 = *a5;
    }
    else {
      int v12 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Thread>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>> &)::t;
    }
    LODWORD(a5) = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>(this, (uint64_t)v12, v11 >> 2);
  }
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((unsigned char *)this + 70) = 1;
  int v13 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((unint64_t)this, 4, a2, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 10, a5);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 8, v6);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((unint64_t)this, 6, a3, 0);

  return flatbuffers::FlatBufferBuilder::EndTable(this, v13);
}

void std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  flatbuffers::FlatBufferBuilder::PreAlign(this, a3 + 1, 4uLL);
  unsigned int v6 = (unsigned char *)(*((void *)this + 6) - flatbuffers::vector_downward::ensure_space(this, 1uLL));
  *((void *)this + 6) = v6;
  *unsigned int v6 = 0;
  if (a3)
  {
    uint64_t v7 = (void *)(*((void *)this + 6) - flatbuffers::vector_downward::ensure_space(this, a3));
    *((void *)this + 6) = v7;
    memcpy(v7, a2, a3);
  }
  flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a3);
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

uint64_t flatbuffers::FlatBufferBuilder::NotNested(uint64_t this)
{
  if (*(unsigned char *)(this + 70)) {
    flatbuffers::FlatBufferBuilder::NotNested();
  }
  if (*(_DWORD *)(this + 64)) {
    flatbuffers::FlatBufferBuilder::NotNested();
  }
  return this;
}

unint64_t flatbuffers::vector_downward::fill(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t result = flatbuffers::vector_downward::ensure_space(this, a2);
  *((void *)this + 6) -= result;
  if (a2)
  {
    uint64_t v5 = 0;
    do
      *(unsigned char *)(*((void *)this + 6) + v5++) = 0;
    while (a2 != v5);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = (_DWORD *)(*(void *)(a1 + 48)
                - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 4uLL));
  *(void *)(a1 + 48) = v4;
  *uint64_t v4 = a2;
  return (*(_DWORD *)(a1 + 32) - v4 + *(_DWORD *)(a1 + 40));
}

unint64_t flatbuffers::FlatBufferBuilder::PreAlign(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((void *)this + 9) < a3) {
    *((void *)this + 9) = a3;
  }
  return flatbuffers::vector_downward::fill(this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

unint64_t flatbuffers::vector_downward::ensure_space(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 6);
  unint64_t v3 = *((void *)this + 7);
  if (v2 < v3 || (unint64_t v5 = *((void *)this + 5), v3 < v5)) {
    flatbuffers::vector_downward::ensure_space();
  }
  if (v2 - v3 < a2)
  {
    flatbuffers::vector_downward::reallocate(this, a2);
    unint64_t v5 = *((void *)this + 5);
    unint64_t v2 = *((void *)this + 6);
  }
  if ((*((_DWORD *)this + 8) - v2 + v5) >= 0x7FFFFFFF) {
    flatbuffers::vector_downward::ensure_space();
  }
  return a2;
}

char *flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v5 = *((void *)this + 4);
  uint64_t v4 = (unsigned __int8 *)*((void *)this + 5);
  unsigned int v6 = &v4[v5 - *((void *)this + 6)];
  uint64_t v7 = *((void *)this + 7) - (void)v4;
  if (v5) {
    unint64_t v8 = v5 >> 1;
  }
  else {
    unint64_t v8 = *((void *)this + 2);
  }
  if (v8 > a2) {
    a2 = v8;
  }
  unint64_t v9 = (*((void *)this + 3) + v5 + a2 - 1) & -*((void *)this + 3);
  *((void *)this + 4) = v9;
  uint64_t v10 = *(void *)this;
  if (v4)
  {
    if (v10)
    {
      unint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
    }
    else
    {
      int v13 = &unk_1F0C3C908;
      unint64_t result = flatbuffers::Allocator::reallocate_downward((flatbuffers::Allocator *)&v13, v4, v5, v9, v6, v7);
    }
  }
  else
  {
    if (!v10)
    {
      int v13 = &unk_1F0C3C908;
      operator new[]();
    }
    unint64_t result = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v9);
  }
  uint64_t v12 = (uint64_t)&result[*((void *)this + 4) - v6];
  *((void *)this + 5) = result;
  *((void *)this + 6) = v12;
  *((void *)this + 7) = &result[v7];
  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::Align(flatbuffers::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((void *)this + 9) < a2) {
    *((void *)this + 9) = a2;
  }
  return flatbuffers::vector_downward::fill(this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = result;
  if (a3 != a4 || *(unsigned char *)(result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(result, a3);
    unint64_t result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(void **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(void *)(v5 + 56) += 8;
    ++*(_DWORD *)(v5 + 64);
    unsigned int v7 = *(unsigned __int16 *)(v5 + 68);
    if (v7 <= a2) {
      LOWORD(v7) = a2;
    }
    *(_WORD *)(v5 + 68) = v7;
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(uint64_t a1, uint64_t a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = (void *)(*(void *)(a1 + 48)
                - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 8uLL));
  *(void *)(a1 + 48) = v4;
  *uint64_t v4 = a2;
  return (*(_DWORD *)(a1 + 32) - v4 + *(_DWORD *)(a1 + 40));
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(flatbuffers::FlatBufferBuilder *result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    unint64_t v4 = (unint64_t)result;
    int v5 = flatbuffers::FlatBufferBuilder::ReferTo(result, a3);
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v4, a2, v5, 0);
  }
  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(unint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v5 = result;
  if (a3 != a4 || *(unsigned char *)(result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(result, a3);
    unint64_t result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(void **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(void *)(v5 + 56) += 8;
    ++*(_DWORD *)(v5 + 64);
    unsigned int v7 = *(unsigned __int16 *)(v5 + 68);
    if (v7 <= a2) {
      LOWORD(v7) = a2;
    }
    *(_WORD *)(v5 + 68) = v7;
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::ReferTo(flatbuffers::FlatBufferBuilder *this, unsigned int a2)
{
  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  if (!a2
    || (unsigned int v4 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10), v5 = v4 >= a2, v6 = v4 - a2, !v5))
  {
    flatbuffers::FlatBufferBuilder::ReferTo();
  }
  return v6 + 4;
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(unint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v5 = result;
  if (a3 != a4 || *(unsigned char *)(result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(result, a3);
    unint64_t result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(void **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(void *)(v5 + 56) += 8;
    ++*(_DWORD *)(v5 + 64);
    unsigned int v7 = *(unsigned __int16 *)(v5 + 68);
    if (v7 <= a2) {
      LOWORD(v7) = a2;
    }
    *(_WORD *)(v5 + 68) = v7;
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(uint64_t a1, char a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  unsigned int v4 = (unsigned char *)(*(void *)(a1 + 48)
               - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 1uLL));
  *(void *)(a1 + 48) = v4;
  *unsigned int v4 = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, int a2)
{
  if (!*((unsigned char *)this + 70)) {
    flatbuffers::FlatBufferBuilder::EndTable();
  }
  uint64_t v4 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 0);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u) {
    unint64_t v5 = 4;
  }
  else {
    unint64_t v5 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  }
  *((_WORD *)this + 34) = v5;
  unsigned int v6 = (void *)(*((void *)this + 6) - flatbuffers::vector_downward::ensure_space(this, v5));
  *((void *)this + 6) = v6;
  bzero(v6, v5);
  unsigned __int16 v7 = v4 - a2;
  if ((v4 - a2) >= 0x10000) {
    flatbuffers::FlatBufferBuilder::EndTable();
  }
  unint64_t v8 = (unsigned __int16 *)*((void *)this + 6);
  if (!v8) {
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  }
  v8[1] = v7;
  *unint64_t v8 = *((_WORD *)this + 34);
  unint64_t v9 = *((void *)this + 7);
  if (!v9) {
    flatbuffers::FlatBufferBuilder::EndTable();
  }
  uint64_t v10 = *((unsigned int *)this + 16);
  unint64_t v11 = v9 - 8 * v10;
  if (v10)
  {
    uint64_t v12 = (int *)(v9 - 8 * v10);
    do
    {
      uint64_t v13 = *((unsigned __int16 *)v12 + 2);
      if (*(unsigned __int16 *)((char *)v8 + v13)) {
        flatbuffers::FlatBufferBuilder::EndTable();
      }
      int v14 = *v12;
      v12 += 2;
      *(unsigned __int16 *)((char *)v8 + v13) = v4 - v14;
    }
    while ((unint64_t)v12 < v9);
  }
  *((void *)this + 7) = v11;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  uint64_t v16 = *((void *)this + 4);
  unint64_t v15 = *((void *)this + 5);
  int v17 = v16 - v8 + v15;
  if (*((unsigned char *)this + 81))
  {
    if (!v15) {
      flatbuffers::FlatBufferBuilder::EndTable();
    }
    if (v15 < v11)
    {
      size_t v18 = *v8;
      uint64_t v19 = v15 + v16;
      uint64_t v20 = (unsigned int *)*((void *)this + 5);
      while (1)
      {
        uint64_t v21 = *v20;
        if (v18 == *(unsigned __int16 *)(v19 - v21) && !memcmp((const void *)(v19 - v21), v8, v18)) {
          break;
        }
        if ((unint64_t)++v20 >= v11)
        {
          int v17 = v16 - v8 + v15;
          goto LABEL_21;
        }
      }
      unint64_t v8 = (unsigned __int16 *)((char *)v8 + (v16 - v8 + v15 - v4));
      *((void *)this + 6) = v8;
      int v17 = v21;
    }
  }
LABEL_21:
  if (v17 == v16 + v15 - v8)
  {
    flatbuffers::vector_downward::ensure_space(this, 4uLL);
    uint64_t v22 = (_DWORD *)*((void *)this + 7);
    *uint64_t v22 = v17;
    *((void *)this + 7) = v22 + 1;
    uint64_t v16 = *((void *)this + 4);
    unint64_t v15 = *((void *)this + 5);
  }
  *(_DWORD *)(v15 + v16 - v4) = v17 - v4;
  *((unsigned char *)this + 70) = 0;
  return v4;
}

void std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6061AB0, MEMORY[0x1E4FBA1C8]);
}

void sub_1B39CCC0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

_OWORD *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__emplace_unique_key_args<std::pair<int,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::pair<int,unsigned long long>&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _OWORD **a4)
{
  unsigned int v6 = (void **)std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__find_equal<std::pair<int,unsigned long long>>((uint64_t)a1, &v10, a2);
  unsigned __int16 v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unsigned __int16 v7 = operator new(0x48uLL);
    void v7[2] = **a4;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__find_equal<std::pair<int,unsigned long long>>(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    unint64_t v7 = *((void *)a3 + 1);
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (void *)v4;
        int v9 = *(_DWORD *)(v4 + 32);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = *v8;
        unint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        unint64_t v10 = v8[5];
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      unint64_t result = v8 + 1;
      uint64_t v4 = v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  unint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  unint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            int v9 = (uint64_t **)a2[2];
          }
          else
          {
            int v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *int v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *unint64_t v2 = (uint64_t)v3;
LABEL_27:
        mach_timebase_info v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, unint64_t a3)
{
  int v6 = (unsigned int *)(a2 + 4 * a3);
  unint64_t v10 = a1;
  unint64_t v7 = 126 - 2 * __clz(a3);
  if (a3) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>(a2, v6, (uint64_t)&v10, v8, 1);
  return flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(a1, a2, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  flatbuffers::FlatBufferBuilder::StartVector(a1, a3, 4uLL);
  if (a3)
  {
    uint64_t v6 = a2 - 4;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = v7 - 1;
      int v9 = flatbuffers::FlatBufferBuilder::ReferTo(a1, *(_DWORD *)(v6 + 4 * v7));
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v9);
      uint64_t v7 = v8;
    }
    while (v8);
  }

  return flatbuffers::FlatBufferBuilder::EndVector(a1, a3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (unsigned int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v23 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
          unint64_t result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v23 - *(a2 - 1)), (int *)(v23 - *v11));
          if (result)
          {
            unsigned int v24 = *v11;
            *uint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v24;
          }
          break;
        case 3uLL:
          unint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          unint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          unint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned int v18 = *v11;
      *uint64_t v11 = *v17;
      *int v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    uint64_t v19 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - *(v11 - 1)), (int *)(v19 - *v11)))
    {
      unint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>(v11, a2, a3);
      uint64_t v11 = (unsigned int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v20 = (unsigned int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>((int *)v11, (int *)a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, v20, a3);
    uint64_t v11 = v20 + 1;
    unint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_17:
      unint64_t result = std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>(v10, v20, a3, -v13, a5 & 1);
      uint64_t v11 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, a2, a3);
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    char v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t v11 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
        unint64_t result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v11 - v9), (int *)(v11 - v10));
        if (result)
        {
          uint64_t v12 = *v8;
          uint64_t v13 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v13 + 4) = *(_DWORD *)((char *)v4 + v13);
            if (!v13) {
              break;
            }
            uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
            unint64_t result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - v12), (int *)(v14 - *(unsigned int *)((char *)v4 + v13 - 4)));
            v13 -= 4;
            if ((result & 1) == 0)
            {
              unint64_t v15 = (_DWORD *)((char *)v4 + v13 + 4);
              goto LABEL_10;
            }
          }
          unint64_t v15 = v4;
LABEL_10:
          *unint64_t v15 = v12;
        }
        char v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    for (uint64_t i = result + 1; v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t v9 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      unint64_t result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v9 - v7), (int *)(v9 - v8));
      if (result)
      {
        uint64_t v10 = *v4;
        uint64_t v11 = v4;
        do
        {
          uint64_t v12 = v11;
          unsigned int v13 = *--v11;
          *uint64_t v12 = v13;
          uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
          unint64_t result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - v10), (int *)(v14 - *(v12 - 2)));
        }
        while ((result & 1) != 0);
        *uint64_t v11 = v10;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)a4 + 40) + *(void *)(*(void *)a4 + 32);
  BOOL v9 = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *a2), (int *)(v8 - *a1));
  uint64_t v10 = *(void *)(*(void *)a4 + 40) + *(void *)(*(void *)a4 + 32);
  uint64_t result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - *a3), (int *)(v10 - *a2));
  if (!v9)
  {
    if (!result) {
      return result;
    }
    unsigned int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    uint64_t v14 = *(void *)(*(void *)a4 + 40) + *(void *)(*(void *)a4 + 32);
    if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *a2), (int *)(v14 - *a1))) {
      return 1;
    }
    unsigned int v15 = *a1;
    *a1 = *a2;
    *a2 = v15;
    return 2;
  }
  uint64_t v12 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v12;
    uint64_t v16 = *(void *)(*(void *)a4 + 40) + *(void *)(*(void *)a4 + 32);
    if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v16 - *a3), (int *)(v16 - v12))) {
      return 1;
    }
    unsigned int v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    return 2;
  }
  *a1 = *a3;
  *a3 = v12;
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
  if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v7 - v6), (int *)(v7 - *(a2 - 1))))
  {
    uint64_t v8 = a1;
    do
    {
      unsigned int v9 = v8[1];
      ++v8;
      uint64_t v10 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - v6), (int *)(v10 - v9)));
  }
  else
  {
    uint64_t v11 = a1 + 1;
    do
    {
      uint64_t v8 = v11;
      if (v11 >= v4) {
        break;
      }
      uint64_t v12 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      ++v11;
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - v6), (int *)(v12 - *v8)));
  }
  if (v8 < v4)
  {
    do
    {
      unsigned int v13 = *--v4;
      uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    }
    while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - v6), (int *)(v14 - v13)));
  }
  while (v8 < v4)
  {
    unsigned int v15 = *v8;
    *uint64_t v8 = *v4;
    *uint64_t v4 = v15;
    do
    {
      unsigned int v16 = v8[1];
      ++v8;
      uint64_t v17 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - v6), (int *)(v17 - v16)));
    do
    {
      unsigned int v18 = *--v4;
      uint64_t v19 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    }
    while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - v6), (int *)(v19 - v18)));
  }
  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    uint64_t v8 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
  while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - a1[++v6]), (int *)(v8 - v7)));
  uint64_t v10 = &a1[v6];
  uint64_t v11 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v10 >= a2) {
        break;
      }
      unsigned int v14 = *--a2;
      uint64_t v15 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - v14), (int *)(v15 - v7)));
  }
  else
  {
    do
    {
      unsigned int v12 = *--a2;
      uint64_t v13 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - v12), (int *)(v13 - v7)));
  }
  if (v10 < a2)
  {
    unsigned int v16 = &a1[v6];
    uint64_t v17 = a2;
    do
    {
      int v18 = *v16;
      *unsigned int v16 = *v17;
      *uint64_t v17 = v18;
      do
      {
        unsigned int v19 = v16[1];
        ++v16;
        uint64_t v20 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      }
      while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v20 - v19), (int *)(v20 - v7)));
      do
      {
        unsigned int v21 = *--v17;
        uint64_t v22 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      }
      while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v22 - v21), (int *)(v22 - v7)));
    }
    while (v16 < v17);
    uint64_t v11 = v16 - 1;
  }
  if (v11 != a1) {
    *a1 = *v11;
  }
  *uint64_t v11 = v7;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *(a2 - 1)), (int *)(v8 - *a1)))
      {
        unsigned int v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v11), (int *)(v14 - *v10)))
    {
      uint64_t v15 = *v11;
      uint64_t v16 = v12;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v16 + 12) = *(unsigned int *)((char *)a1 + v16 + 8);
        if (v16 == -8) {
          break;
        }
        uint64_t v17 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
        BOOL v18 = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - v15), (int *)(v17 - *(unsigned int *)((char *)a1 + v16 + 4)));
        v16 -= 4;
        if (!v18)
        {
          unsigned int v19 = (unsigned int *)((char *)a1 + v16 + 12);
          goto LABEL_12;
        }
      }
      unsigned int v19 = a1;
LABEL_12:
      *unsigned int v19 = v15;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

BOOL KernelTraceCatalog::Thread::KeyCompareLessThan(int *a1, int *a2)
{
  unint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 < 5u)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = v2[2];
    if (v3) {
      unint64_t v3 = *(void *)((char *)a1 + v3);
    }
  }
  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 < 5u)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = v4[2];
    if (v5) {
      unint64_t v5 = *(void *)((char *)a2 + v5);
    }
  }
  return v3 < v5;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a2, a3, a5);
  uint64_t v10 = *(void *)(*(void *)a5 + 40) + *(void *)(*(void *)a5 + 32);
  BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - *a4), (int *)(v10 - *a3));
  if (result)
  {
    unsigned int v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    uint64_t v13 = *(void *)(*(void *)a5 + 40) + *(void *)(*(void *)a5 + 32);
    BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - *a3), (int *)(v13 - *a2));
    if (result)
    {
      unsigned int v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      uint64_t v15 = *(void *)(*(void *)a5 + 40) + *(void *)(*(void *)a5 + 32);
      BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *a2), (int *)(v15 - *a1));
      if (result)
      {
        unsigned int v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a2, a3, a4, a6);
  uint64_t v12 = *(void *)(*(void *)a6 + 40) + *(void *)(*(void *)a6 + 32);
  BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - *a5), (int *)(v12 - *a4));
  if (result)
  {
    unsigned int v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *(void *)(*(void *)a6 + 40) + *(void *)(*(void *)a6 + 32);
    BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *a4), (int *)(v15 - *a3));
    if (result)
    {
      unsigned int v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      uint64_t v17 = *(void *)(*(void *)a6 + 40) + *(void *)(*(void *)a6 + 32);
      BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - *a3), (int *)(v17 - *a2));
      if (result)
      {
        unsigned int v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        uint64_t v19 = *(void *)(*(void *)a6 + 40) + *(void *)(*(void *)a6 + 32);
        BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - *a2), (int *)(v19 - *a1));
        if (result)
        {
          unsigned int v20 = *a1;
          *a1 = *a2;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>((BOOL)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      unsigned int v14 = a2;
      do
      {
        uint64_t v15 = *(void *)(*(void *)a4 + 40) + *(void *)(*(void *)a4 + 32);
        if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *v14), (int *)(v15 - *a1)))
        {
          unsigned int v16 = *v14;
          *unsigned int v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>((BOOL)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v17 = (unint64_t)v8 >> 2;
      unsigned int v18 = a2 - 1;
      do
      {
        unsigned int v19 = *a1;
        unsigned int v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a4, v17);
        if (v18 == v20)
        {
          *unsigned int v20 = v19;
        }
        else
        {
          *unsigned int v20 = *v18;
          *unsigned int v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>((BOOL)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(BOOL result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    BOOL v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 1;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (unsigned int *)(result + 4 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3)
      {
        uint64_t v14 = *(void *)(*(void *)a2 + 40) + *(void *)(*(void *)a2 + 32);
        if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v12), (int *)(v14 - v12[1])))
        {
          ++v12;
          uint64_t v11 = v13;
        }
      }
      uint64_t v15 = *(void *)(*(void *)a2 + 40) + *(void *)(*(void *)a2 + 32);
      BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *v12), (int *)(v15 - *v5));
      if (!result)
      {
        uint64_t v21 = *v5;
        do
        {
          unsigned int v16 = v5;
          unint64_t v5 = v12;
          *unsigned int v16 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          uint64_t v12 = (unsigned int *)(v6 + 4 * v17);
          uint64_t v18 = 2 * v11 + 2;
          if (v18 < a3)
          {
            uint64_t v19 = *(void *)(*(void *)a2 + 40) + *(void *)(*(void *)a2 + 32);
            if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - *v12), (int *)(v19 - v12[1])))
            {
              ++v12;
              uint64_t v17 = v18;
            }
          }
          uint64_t v20 = *(void *)(*(void *)a2 + 40) + *(void *)(*(void *)a2 + 32);
          BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v20 - *v12), (int *)(v20 - v21));
          uint64_t v11 = v17;
        }
        while (!result);
        *unint64_t v5 = v21;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *(void *)(*(void *)a2 + 40) + *(void *)(*(void *)a2 + 32);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - *v9), (int *)(v12 - v9[1])))
      {
        ++v9;
        uint64_t v10 = v11;
      }
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 4);
    uint64_t v10 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - *v8), (int *)(v10 - *(unsigned int *)(a2 - 4)));
    if (result)
    {
      uint64_t v11 = *v9;
      do
      {
        uint64_t v12 = v9;
        uint64_t v9 = v8;
        *uint64_t v12 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_DWORD *)(v6 + 4 * v7);
        uint64_t v13 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
        BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - *v8), (int *)(v13 - v11));
      }
      while (result);
      *uint64_t v9 = v11;
    }
  }
  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::StartVector(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((unsigned char *)this + 70) = 1;
  uint64_t v6 = a3 * a2;
  flatbuffers::FlatBufferBuilder::PreAlign(this, v6, 4uLL);

  return flatbuffers::FlatBufferBuilder::PreAlign(this, v6, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::EndVector(flatbuffers::FlatBufferBuilder *this, int a2)
{
  if (!*((unsigned char *)this + 70)) {
    flatbuffers::FlatBufferBuilder::EndVector();
  }
  *((unsigned char *)this + 70) = 0;

  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a2);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Process>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = (unsigned int *)(a2 + 4 * a3);
  uint64_t v10 = a1;
  unint64_t v7 = 126 - 2 * __clz(a3);
  if (a3) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>(a2, v6, (uint64_t)&v10, v8, 1);
  return flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(a1, a2, a3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unsigned int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v23 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
          BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v23 - *(a2 - 1)), (int *)(v23 - *v11));
          if (result)
          {
            unsigned int v24 = *v11;
            *uint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v24;
          }
          break;
        case 3uLL:
          BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          BOOL result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned int v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    uint64_t v19 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - *(v11 - 1)), (int *)(v19 - *v11)))
    {
      BOOL result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>(v11, a2, a3);
      uint64_t v11 = (unsigned int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v20 = (unsigned int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>((int *)v11, (int *)a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>(v11, v20, a3);
    uint64_t v11 = v20 + 1;
    BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_17:
      BOOL result = std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>(v10, v20, a3, -v13, a5 & 1);
      uint64_t v11 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *(a2 - 1)), (int *)(v8 - *a1)))
      {
        unsigned int v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
    if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v11), (int *)(v14 - *v10)))
    {
      uint64_t v15 = *v11;
      uint64_t v16 = v12;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v16 + 12) = *(unsigned int *)((char *)a1 + v16 + 8);
        if (v16 == -8) {
          break;
        }
        uint64_t v17 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
        BOOL v18 = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - v15), (int *)(v17 - *(unsigned int *)((char *)a1 + v16 + 4)));
        v16 -= 4;
        if (!v18)
        {
          uint64_t v19 = (unsigned int *)((char *)a1 + v16 + 12);
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      *uint64_t v19 = v15;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, unsigned int a2, const char *a3, int a4)
{
  BOOL v8 = a3 != 0;
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((void *)this + 7) = *((void *)this + 5);
  uint64_t v9 = 4;
  if (a4) {
    uint64_t v9 = 8;
  }
  flatbuffers::FlatBufferBuilder::PreAlign(this, v9 + 4 * v8, *((void *)this + 9));
  if (a3)
  {
    if (strlen(a3) != 4) {
      flatbuffers::FlatBufferBuilder::Finish();
    }
    uint64_t v10 = (_DWORD *)(*((void *)this + 6) - flatbuffers::vector_downward::ensure_space(this, 4uLL));
    *((void *)this + 6) = v10;
    *uint64_t v10 = *(_DWORD *)a3;
  }
  int v11 = flatbuffers::FlatBufferBuilder::ReferTo(this, a2);
  uint64_t result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, v11);
  if (a4) {
    uint64_t result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
  }
  *((unsigned char *)this + 71) = 1;
  return result;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy(*((void *)this + 11), *(void **)(v2 + 8));
    MEMORY[0x1B3EBEC50](v2, 0x1060C40C2B13FB5);
  }

  flatbuffers::vector_downward::~vector_downward(this);
}

void std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy(a1, *a2);
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

BOOL ___ZL36ktrace_catalog_file_contains_catalogP11ktrace_file_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = ktrace_chunk_tag(a2);
  if (v3 == 32788) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v3 != 32788;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B39CEDCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,KernelTraceCatalog::Process const*>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  uint64_t v12 = a3[1];
  i[2] = *a3;
  i[3] = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B39CF234(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::KeyCompare<unsigned long long>(unint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = (int *)((char *)a2 + *a2);
  unint64_t v3 = *a1;
  int8x8_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u)
  {
    unsigned int v6 = 0;
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = v4[2];
    if (v5)
    {
      unint64_t v5 = *(void *)((char *)v2 + v5);
      if (v5 <= v3) {
        unsigned int v6 = 0;
      }
      else {
        unsigned int v6 = -1;
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
  }
  if (v5 >= v3) {
    return v6;
  }
  else {
    return v6 + 1;
  }
}

uint64_t flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Process>>::KeyCompare<unsigned long long>(unint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = (int *)((char *)a2 + *a2);
  unint64_t v3 = *a1;
  int8x8_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u)
  {
    unsigned int v6 = 0;
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = v4[2];
    if (v5)
    {
      unint64_t v5 = *(void *)((char *)v2 + v5);
      if (v5 <= v3) {
        unsigned int v6 = 0;
      }
      else {
        unsigned int v6 = -1;
      }
    }
    else
    {
      unsigned int v6 = 0;
    }
  }
  if (v5 >= v3) {
    return v6;
  }
  else {
    return v6 + 1;
  }
}

uint64_t *std::back_insert_iterator<std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = *(_DWORD **)(*a1 + 8);
  unsigned int v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint8x8_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)v6, v12);
      uint8x8_t v8 = *(_DWORD **)v4;
      unint64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      float v13 = 0;
    }
    float v14 = &v13[4 * v9];
    BOOL v15 = &v13[4 * v12];
    *(_DWORD *)float v14 = *a2;
    unint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v5 = *a2;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t ktrace_set_file(uint64_t a1, const char *a2)
{
  uint64_t v3 = ktrace_file_open(a2, 0);
  if (!v3) {
    return *__error();
  }
  ktrace_set_ktrace_file(a1, v3, 1, v4, v5, v6, v7, v8);
  return 0;
}

uint64_t ktrace_set_ktrace_file(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(void *)(a1 + 608)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)a1 == 1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a3 && *(void *)(a2 + 200)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  void v14[2] = __ktrace_set_ktrace_file_block_invoke;
  v14[3] = &__block_descriptor_tmp_4;
  v14[4] = a1;
  ktrace_file_header_iterate(a2, 0, (uint64_t)v14, a4, a5, a6, a7, a8);
  *(void *)(a1 + 608) = a2;
  if (*(_DWORD *)a1 == 3) {
    int v11 = 4;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)a1 = v11;
  if (*(_DWORD *)(a1 + 256)) {
    kteventnames_add_chunks(a1 + 360, a2);
  }
  if (a3) {
    __int16 v12 = 4;
  }
  else {
    __int16 v12 = 0;
  }
  *(_WORD *)(a1 + 224) = *(_WORD *)(a1 + 224) & 0xFFFB | v12;
  return 0;
}

BOOL __ktrace_set_ktrace_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  *(void *)(*(void *)(a1 + 32) + 352) = ktrace_cpus_create(a2);
  return *(void *)(*(void *)(a1 + 32) + 352) == 0;
}

uint64_t ktrace_get_ktrace_file(uint64_t a1)
{
  return *(void *)(a1 + 608);
}

void _session_chunk_callbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 120);
  unsigned int v6 = ktrace_chunk_tag(a2);
  if ((int)v4 >= 1)
  {
    unsigned int v7 = v6;
    uint64_t v8 = 0;
    uint64_t v9 = (unsigned int *)(v5 + 12);
    do
    {
      if (v7 < *(v9 - 1)) {
        break;
      }
      if (v7 < *v9)
      {
        unint64_t v10 = *(NSObject **)(a1 + 232);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___session_chunk_callbacks_block_invoke;
        block[3] = &__block_descriptor_tmp_3_1;
        int v12 = v8;
        block[4] = v5;
        void block[5] = a2;
        dispatch_async(v10, block);
      }
      ++v8;
      v9 += 8;
    }
    while (v4 != v8);
  }
}

uint64_t ___session_chunk_callbacks_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 32 * *(int *)(a1 + 48) + 24) + 16))();
}

void *_session_read_stackshot_chunk(uint64_t a1, void *a2)
{
  uint64_t result = (void *)ktrace_chunk_tag((uint64_t)a2);
  switch(result)
  {
    case 0x51FE:
      goto LABEL_7;
    case 0x8002:
      uint64_t result = (void *)ktrace_chunk_version_major((uint64_t)a2);
      if (result > 1) {
        return result;
      }
LABEL_7:
      uint64_t result = (void *)ktrace_stackshot_chunk_timestamp(a2);
      if (result == (void *)-1) {
        return result;
      }
      uint64_t v5 = result;
      uint64_t result = *(void **)(a1 + 320);
      if (result)
      {
        unsigned int v6 = (uint64_t *)(a1 + 320);
        do
        {
          uint64_t result = (void *)ktrace_stackshot_chunk_timestamp(result);
          if (v5 <= result) {
            break;
          }
          uint64_t v7 = *v6;
          uint64_t v8 = *(void **)(v7 + 104);
          unsigned int v6 = (uint64_t *)(v7 + 104);
          uint64_t result = v8;
        }
        while (v8);
        if (v6 != (uint64_t *)(a1 + 320)) {
          goto LABEL_16;
        }
      }
      else
      {
        unsigned int v6 = (uint64_t *)(a1 + 320);
      }
      *(void *)(a1 + 328) = v5;
LABEL_16:
      a2[13] = *v6;
      *unsigned int v6 = (uint64_t)a2;
      return result;
    case 0x9000:
      uint64_t result = (void *)ktrace_chunk_version_major((uint64_t)a2);
      if (!result) {
        goto LABEL_7;
      }
      break;
  }
  return result;
}

uint64_t ktrace_chunks_range(uint64_t a1, int a2, int a3, const void *a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v7 = ktrace_callback_list_add(a1, a1 + 112);
  if (!v7) {
    return 12;
  }
  uint64_t v8 = v7;
  *uint64_t v7 = 3;
  void v7[2] = a2;
  v7[3] = a3;
  int v7[4] = 3;
  uint64_t v9 = _Block_copy(a4);
  uint64_t result = 0;
  *((void *)v8 + 3) = v9;
  return result;
}

uint64_t ktrace_chunks(uint64_t a1, int a2, const void *a3)
{
  return ktrace_chunks_range(a1, a2, a2 + 1, a3);
}

uint64_t _session_start_file(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v67 = 0;
  uint64_t v68 = &v67;
  uint64_t v69 = 0x2000000000;
  char v70 = 0;
  v65[0] = 0;
  v65[1] = v65;
  v65[2] = 0x2000000000;
  char v66 = 0;
  uint64_t v61 = 0;
  os_log_type_t v62 = &v61;
  uint64_t v63 = 0x2000000000;
  char v64 = 0;
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2000000000;
  char v60 = 0;
  uint64_t v55 = 0;
  long long v56 = &v55;
  uint64_t v57 = 0x2000000000;
  int v58 = 0;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v9 = *(void *)(a1 + 608);
  if (!v9) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v51 = 0;
  long long v52 = &v51;
  uint64_t v53 = 0x2000000000;
  char v54 = 0;
  uint64_t v47 = 0;
  int v48 = &v47;
  uint64_t v49 = 0x2000000000;
  char v50 = 0;
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 0x40000000;
  v46[2] = ___session_start_file_block_invoke;
  v46[3] = &unk_1E6062320;
  v46[4] = &v51;
  v46[5] = &v47;
  v46[6] = &v61;
  v46[7] = v65;
  v46[8] = v59;
  v46[9] = &v67;
  v46[10] = &v55;
  v46[11] = a1;
  if (ktrace_file_iterate(v9, 0, (uint64_t)v46, a4, a5, a6, a7, a8) || *((_DWORD *)v56 + 6))
  {
    uint64_t started = 1;
    goto LABEL_6;
  }
  kttimesync_init(a1 + 432, *(void *)(a1 + 608), *((unsigned __int8 *)v52 + 24));
  if (!*(_DWORD *)(a1 + 452))
  {
    int v20 = *(_DWORD *)(a1 + 428);
    ktrace_log_init();
    unint64_t v21 = ktrace_log;
    BOOL v22 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
    if (v20)
    {
      if (v22) {
        _session_start_file_cold_5((int *)(a1 + 424), (int *)(a1 + 428), v21);
      }
      *(void *)(a1 + 448) = *(void *)(a1 + 424);
    }
    else
    {
      if (v22) {
        _session_start_file_cold_4(v21);
      }
      if (mach_timebase_info((mach_timebase_info_t)(a1 + 448))) {
        ktrace_postprocess_file_internal_cold_1();
      }
    }
  }
  uint64_t started = _session_machine_init(a1, v13, v14, v15, v16, v17, v18, v19);
  if (!started)
  {
    uint64_t started = _session_cpus_init(a1, v23, v24, v25, v26, v27, v28, v29);
    if (!started)
    {
      int v36 = ktrace_file_earliest_timestamp(*(void *)(a1 + 608), (void *)(a1 + 504), v30, v31, v32, v33, v34, v35);
      uint64_t v37 = *(void *)(a1 + 504);
      *(void *)(a1 + 520) = kttimesync_timestamp_from_ns(a1 + 432, *(void *)(a1 + 512)) + v37;
      if (*((unsigned char *)v62 + 24))
      {
        ktrace_start_file_ariadne_prepass(a1);
      }
      else
      {
        if (!v36 && !v37 || !*((unsigned char *)v68 + 24) && !*((unsigned char *)v48 + 24))
        {
          char v45 = 1;
LABEL_26:
          uint64_t started = ktrace_start_file_internal(a1, v45, a2);
          goto LABEL_6;
        }
        ktrace_start_file_prepass(a1, v38, v39, v40, v41, v42, v43, v44);
      }
      char v45 = 0;
      goto LABEL_26;
    }
  }
LABEL_6:
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  _Block_object_dispose(v59, 8);
  _Block_object_dispose(&v61, 8);
  _Block_object_dispose(v65, 8);
  _Block_object_dispose(&v67, 8);
  return started;
}

uint64_t ___session_start_file_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void **)ktrace_config_create(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = ktrace_config_kdebug_using_mach_continuous_time((uint64_t)v4);
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = ktrace_config_get_context_kind((uint64_t)v5) == 2;
    ktrace_config_destroy(v5);
  }
  int v6 = ktrace_chunk_tag((uint64_t)a2);
  if (v6 <= 7935)
  {
    if (v6 == 7424)
    {
      uint64_t v7 = a1[7];
      goto LABEL_19;
    }
    if (v6 != 7680) {
      return 1;
    }
LABEL_12:
    if (!*(unsigned char *)(*(void *)(a1[7] + 8) + 24) && !*(unsigned char *)(*(void *)(a1[8] + 8) + 24)) {
      *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 1;
    }
    uint64_t v7 = a1[8];
    goto LABEL_19;
  }
  switch(v6)
  {
    case 7936:
      *(_WORD *)(a1[11] + 224) |= 0x40u;
      goto LABEL_12;
    case 32782:
      uint64_t v8 = a1[11];
      if (*(_DWORD *)(v8 + 288)) {
        *(_DWORD *)(*(void *)(a1[10] + 8) + 24) = ktrace_chunk_copy_data(a2, 0, (void *)(v8 + 528), 0x18uLL);
      }
      break;
    case 20982:
      uint64_t v7 = a1[6];
LABEL_19:
      *(unsigned char *)(*(void *)(v7 + 8) + 24) = 1;
      break;
  }
  return 1;
}

void ktrace_start_file_ariadne_prepass(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 128);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __ktrace_start_file_ariadne_prepass_block_invoke;
  block[3] = &__block_descriptor_tmp_7_1;
  block[4] = a1;
  dispatch_async(v1, block);
}

void ktrace_start_file_prepass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 284))
  {
    _session_ensure_uuidmap((void *)a1, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v9 = *(NSObject **)(a1 + 232);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __ktrace_start_file_prepass_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    block[4] = a1;
    dispatch_async(v9, block);
  }
  unint64_t v10 = *(NSObject **)(a1 + 128);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = __ktrace_start_file_prepass_block_invoke_2;
  _OWORD v13[3] = &__block_descriptor_tmp_9_0;
  void v13[4] = a1;
  dispatch_async(v10, v13);
  int v11 = *(NSObject **)(a1 + 128);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  void v12[2] = __ktrace_start_file_prepass_block_invoke_3;
  void v12[3] = &__block_descriptor_tmp_16;
  v12[4] = a1;
  dispatch_async(v11, v12);
}

uint64_t ktrace_start_file_internal(uint64_t a1, char a2, int a3)
{
  char is_64_bit = ktrace_file_is_64_bit(*(void *)(a1 + 608));
  int v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    BOOL v8 = a3 == 0;
  }
  else
  {
    a2 = 0;
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v9 = *(NSObject **)(a1 + 128);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __ktrace_start_file_internal_block_invoke;
    block[3] = &__block_descriptor_tmp_29;
    block[4] = a1;
    dispatch_async(v9, block);
    int v7 = *(_DWORD *)(a1 + 24);
  }
  if (v7 >= 1)
  {
    uint64_t v10 = ktrace_stream_create(0, is_64_bit, (*(unsigned __int16 *)(a1 + 224) >> 6) & 1);
    *(void *)(a1 + 616) = v10;
    if (!v10) {
      return *__error();
    }
  }
  int v11 = *(NSObject **)(a1 + 128);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = __ktrace_start_file_internal_block_invoke_9;
  _OWORD v13[3] = &__block_descriptor_tmp_35;
  void v13[4] = a1;
  char v14 = a2;
  char v15 = is_64_bit;
  dispatch_async(v11, v13);
  return 0;
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 608);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = __ktrace_start_file_ariadne_prepass_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_6;
  v11[4] = v8;
  return ktrace_file_iterate(v9, 0, (uint64_t)v11, a4, a5, a6, a7, a8);
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 232);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = __ktrace_start_file_ariadne_prepass_block_invoke_3;
  v5[3] = &__block_descriptor_tmp_5_1;
  v5[4] = v2;
  v5[5] = a2;
  dispatch_async(v3, v5);
  return 1;
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke_3(uint64_t a1)
{
  return kthmap_read_chunk(*(unsigned char **)(*(void *)(a1 + 32) + 296), *(void **)(a1 + 40));
}

void __ktrace_start_file_prepass_block_invoke(uint64_t a1)
{
}

void __ktrace_start_file_prepass_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(void *)(v8 + 296) && (*(_DWORD *)(v8 + 260) || *(_DWORD *)(v8 + 280)))
  {
    uint64_t v10 = ktrace_catalog_open(*(void *)(v8 + 608), a2, a3, a4, a5, a6, a7, a8);
    if (v10)
    {
      uint64_t v11 = v10;
      kthmap_read_catalog(*(void *)(*(void *)(a1 + 32) + 296), v10);
      ktrace_catalog_close(v11);
    }
  }
}

void __ktrace_start_file_prepass_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 296) && (*(_DWORD *)(v9 + 260) || *(_DWORD *)(v9 + 280)))
  {
    uint64_t v10 = *(void *)(v9 + 608);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    v16[2] = __ktrace_start_file_prepass_block_invoke_4;
    v16[3] = &__block_descriptor_tmp_13_0;
    v16[4] = v9;
    ktrace_file_iterate(v10, 0, (uint64_t)v16, a4, a5, a6, a7, a8);
    uint64_t v9 = *(void *)(a1 + 32);
  }
  uint64_t v11 = *(void *)(v9 + 608);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  v15[2] = __ktrace_start_file_prepass_block_invoke_7;
  v15[3] = &__block_descriptor_tmp_14_0;
  _OWORD v15[4] = v9;
  ktrace_file_iterate(v11, 0, (uint64_t)v15, a4, a5, a6, a7, a8);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(NSObject **)(v12 + 232);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __ktrace_start_file_prepass_block_invoke_8;
  block[3] = &__block_descriptor_tmp_15;
  block[4] = v12;
  dispatch_async(v13, block);
}

uint64_t __ktrace_start_file_prepass_block_invoke_4(uint64_t a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 20990) {
    goto LABEL_7;
  }
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major(a2) <= 1)
    {
LABEL_7:
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = *(NSObject **)(v5 + 232);
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 0x40000000;
      void v8[2] = __ktrace_start_file_prepass_block_invoke_5;
      v8[3] = &__block_descriptor_tmp_12_0;
      v8[4] = a2;
      v8[5] = v5;
      dispatch_async(v6, v8);
    }
  }
  else if (v4 == 36864 && !ktrace_chunk_version_major(a2))
  {
    goto LABEL_7;
  }
  return 1;
}

uint64_t __ktrace_start_file_prepass_block_invoke_5(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  mach_timebase_info v3[2] = __ktrace_start_file_prepass_block_invoke_6;
  _OWORD v3[3] = &__block_descriptor_tmp_11_0;
  uint64_t v1 = *(void **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return ktrace_stackshot_chunk_unwrap(v1, (uint64_t)v3);
}

void __ktrace_start_file_prepass_block_invoke_6(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t __ktrace_start_file_prepass_block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 296);
  if (!v3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 128));
  char is_64_bit = ktrace_chunk_is_64_bit(a2);
  if (!*(void *)(v2 + 624)) {
    *(void *)(v2 + 624) = ktrace_stream_create(0, is_64_bit, (*(unsigned __int16 *)(v2 + 224) >> 6) & 1);
  }
  int v6 = *(NSObject **)(v2 + 232);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __ktrace_prepass_chunk_block_invoke;
  block[3] = &__block_descriptor_tmp_17_0;
  block[4] = v3;
  void block[5] = a2;
  void block[6] = v2;
  dispatch_async(v6, block);
  if (!ktrace_stream_add(*(void *)(v2 + 624), a2))
  {
    uint64_t v7 = *(void *)(v2 + 624);
    uint64_t v8 = *(NSObject **)(v2 + 232);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 0x40000000;
    void v10[2] = __ktrace_prepass_chunk_block_invoke_2;
    v10[3] = &__block_descriptor_tmp_21_0;
    char v11 = is_64_bit;
    v10[4] = v2;
    v10[5] = v3;
    ktrace_stream_iterate_group(v7, 0x800000uLL, v8, 0, (uint64_t)v10);
  }
  return 1;
}

uint64_t __ktrace_start_file_prepass_block_invoke_8(uint64_t a1)
{
  return ktrace_prepass_uuid_map_finish(*(void *)(a1 + 32));
}

void __ktrace_prepass_chunk_block_invoke(uint64_t a1)
{
  kthmap_read_chunk(*(unsigned char **)(a1 + 32), *(void **)(a1 + 40));
  ktrace_uuid_map_learn_tailspin_process_info_with_chunk(*(void *)(*(void *)(a1 + 48) + 304), *(void *)(a1 + 40));
  ktrace_uuid_map_learn_tailspin_symbols_with_chunk(*(void *)(*(void *)(a1 + 48) + 304), *(void *)(a1 + 40));
  ktrace_uuid_map_learn_aot_translations_with_chunk(*(void *)(*(void *)(a1 + 48) + 304), *(void *)(a1 + 40));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 48);

  ktrace_uuid_map_chunk_prepass(v2, v3);
}

BOOL __ktrace_prepass_chunk_block_invoke_2(BOOL result, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(result + 32) + 157));
  if ((v3 & 1) == 0)
  {
    int v4 = *(unsigned __int8 *)(result + 48);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    void v5[2] = __ktrace_prepass_chunk_block_invoke_3;
    v5[3] = &__block_descriptor_tmp_19;
    char v7 = v4;
    long long v6 = *(_OWORD *)(result + 32);
    return trace_enumerate(a2, a3, v4, (uint64_t)v5);
  }
  return result;
}

uint64_t __ktrace_prepass_chunk_block_invoke_3(uint64_t a1, uint64_t a2)
{
  ktrace_uuid_map_event_prepass(*(void *)(*(void *)(a1 + 32) + 304), *(void *)(a1 + 32), (uint64_t *)a2, *(unsigned __int8 *)(a1 + 48));
  ktrace_thread_map_update_prepass(*(void *)(a1 + 40), a2, *(unsigned __int8 *)(a1 + 48));
  uint64_t v4 = 48;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
  }
  else
  {
    uint64_t v4 = 28;
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    LODWORD(v7) = *(_DWORD *)(a2 + 16);
  }
  kttimesync_update_kdebug_prepass(*(void *)(a1 + 32) + 432, *(_DWORD *)(a2 + v4), v5, v6, v7);
  return 0;
}

uint64_t __ktrace_start_file_internal_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 608);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = __ktrace_start_file_internal_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_28;
  v11[4] = v8;
  return ktrace_file_iterate(v9, 0, (uint64_t)v11, a4, a5, a6, a7, a8);
}

BOOL __ktrace_start_file_internal_block_invoke_2(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 156));
  if (v2) {
    return (v2 & 1) == 0;
  }
  int v5 = ktrace_chunk_tag(a2);
  if (v5 > 32772)
  {
    if (v5 <= 32799)
    {
      if (v5 == 32773)
      {
        if (!ktrace_chunk_version_major(a2))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          uint64_t v7 = *(NSObject **)(v11 + 232);
          v17[0] = MEMORY[0x1E4F143A8];
          v17[1] = 0x40000000;
          unint64_t v17[2] = __ktrace_start_file_internal_block_invoke_6;
          v17[3] = &__block_descriptor_tmp_25_0;
          _OWORD v17[4] = v11;
          void v17[5] = a2;
          uint64_t v8 = v17;
          goto LABEL_23;
        }
      }
      else if (v5 == 32784 && !ktrace_chunk_version_major(a2))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(NSObject **)(v6 + 232);
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 0x40000000;
        v16[2] = __ktrace_start_file_internal_block_invoke_7;
        v16[3] = &__block_descriptor_tmp_26_0;
        v16[4] = v6;
        void v16[5] = a2;
        uint64_t v8 = v16;
LABEL_23:
        dispatch_async(v7, v8);
        return (v2 & 1) == 0;
      }
      return (v2 & 1) == 0;
    }
    if (v5 == 32800)
    {
      if (!ktrace_chunk_version_major(a2))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v7 = *(NSObject **)(v13 + 232);
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 0x40000000;
        v15[2] = __ktrace_start_file_internal_block_invoke_8;
        v15[3] = &__block_descriptor_tmp_27_0;
        _OWORD v15[4] = v13;
        void v15[5] = a2;
        uint64_t v8 = v15;
        goto LABEL_23;
      }
      return (v2 & 1) == 0;
    }
    if (v5 != 36869) {
      return (v2 & 1) == 0;
    }
LABEL_15:
    if (!ktrace_chunk_version_major(a2))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v7 = *(NSObject **)(v10 + 232);
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      v20[2] = __ktrace_start_file_internal_block_invoke_3;
      v20[3] = &__block_descriptor_tmp_22;
      v20[4] = v10;
      v20[5] = a2;
      uint64_t v8 = v20;
      goto LABEL_23;
    }
    return (v2 & 1) == 0;
  }
  if (v5 == 20530)
  {
    if (!ktrace_chunk_version_major(a2))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v7 = *(NSObject **)(v12 + 232);
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 0x40000000;
      v19[2] = __ktrace_start_file_internal_block_invoke_4;
      v19[3] = &__block_descriptor_tmp_23_0;
      v19[4] = v12;
      void v19[5] = a2;
      uint64_t v8 = v19;
      goto LABEL_23;
    }
    return (v2 & 1) == 0;
  }
  if (v5 == 32769) {
    goto LABEL_15;
  }
  if (v5 == 32772 && ktrace_chunk_version_major(a2) <= 1)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v7 = *(NSObject **)(v9 + 232);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = __ktrace_start_file_internal_block_invoke_5;
    v18[3] = &__block_descriptor_tmp_24;
    void v18[4] = v9;
    void v18[5] = a2;
    uint64_t v8 = v18;
    goto LABEL_23;
  }
  return (v2 & 1) == 0;
}

uint64_t __ktrace_start_file_internal_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 304);

  return ktrace_uuid_map_learn_sharedcache_with_chunk(v10, v9);
}

void __ktrace_start_file_internal_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 304);

  ktrace_uuid_map_learn_ariadne_process_dict_with_chunk(v10, v9);
}

void __ktrace_start_file_internal_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 304);

  ktrace_uuid_map_learn_inodes_with_chunk(v10, v9);
}

void __ktrace_start_file_internal_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 304);

  ktrace_uuid_map_learn_kernelmap_with_chunk(v10, v9);
}

void __ktrace_start_file_internal_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 304);

  ktrace_uuid_map_learn_process_info_with_chunk(v10, v9);
}

uint64_t __ktrace_start_file_internal_block_invoke_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 304);

  return ktrace_uuid_map_learn_aot_translations_with_chunk(v10, v9);
}

void __ktrace_start_file_internal_block_invoke_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v9 + 608);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  v16[2] = __ktrace_start_file_internal_block_invoke_10;
  v16[3] = &__block_descriptor_tmp_32_0;
  v16[4] = v9;
  __int16 v17 = *(_WORD *)(a1 + 40);
  ktrace_file_iterate(v10, 0, (uint64_t)v16, a4, a5, a6, a7, a8);
  uint64_t v11 = *(void *)(a1 + 32);
  if (*(int *)(v11 + 96) >= 1)
  {
    uint64_t v12 = *(NSObject **)(v11 + 232);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __ktrace_start_file_internal_block_invoke_13;
    block[3] = &__block_descriptor_tmp_33_0;
    block[4] = v11;
    dispatch_async(v12, block);
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v13 = *(NSObject **)(v11 + 128);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  void v14[2] = __ktrace_start_file_internal_block_invoke_14;
  v14[3] = &__block_descriptor_tmp_34_0;
  v14[4] = v11;
  dispatch_async(v13, v14);
}

BOOL __ktrace_start_file_internal_block_invoke_10(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 156));
  if ((v2 & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(NSObject **)(v5 + 232);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __ktrace_start_file_internal_block_invoke_11;
      block[3] = &__block_descriptor_tmp_30;
      block[4] = v5;
      void block[5] = a2;
      dispatch_async(v6, block);
    }
    _session_read_stackshot_chunk(*(void *)(a1 + 32), a2);
    _session_chunk_callbacks(*(void *)(a1 + 32), (uint64_t)a2);
    uint64_t v7 = *(void *)(a1 + 32);
    if (*(int *)(v7 + 24) >= 1 && !ktrace_stream_add(*(void *)(v7 + 616), (uint64_t)a2))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(v8 + 616);
      uint64_t v10 = *(NSObject **)(v8 + 232);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      void v12[2] = __ktrace_start_file_internal_block_invoke_12;
      void v12[3] = &__block_descriptor_tmp_31;
      v12[4] = v8;
      char v13 = *(unsigned char *)(a1 + 41);
      ktrace_stream_iterate_group(v9, 0x800000uLL, v10, 0, (uint64_t)v12);
    }
  }
  return (v2 & 1) == 0;
}

uint64_t __ktrace_start_file_internal_block_invoke_11(uint64_t a1)
{
  return kthmap_read_chunk(*(unsigned char **)(*(void *)(a1 + 32) + 296), *(void **)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_12(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 157));
  if ((v3 & 1) == 0) {
    _session_process_events(*(void *)(a1 + 32), a2, a3, *(unsigned __int8 *)(a1 + 40));
  }
}

void __ktrace_start_file_internal_block_invoke_13(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 320)) {
    _session_handle_stackshot(v1, 0xFFFFFFFFFFFFFFFFLL);
  }
}

uint64_t __ktrace_start_file_internal_block_invoke_14(uint64_t a1)
{
  return _session_end_internal(*(void *)(a1 + 32), 0, 2);
}

void trace_end(int a1)
{
  if (trace_end_get_global_once != -1) {
    dispatch_once(&trace_end_get_global_once, &__block_literal_global_2);
  }
  uint64_t v2 = trace_end_s;

  ktrace_end(v2, a1);
}

void __trace_end_block_invoke()
{
  trace_end_s = global_session;
  global_session = 0;
}

void *trace_set_dropped_events_handler(void *aBlock)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_set_dropped_events_handler(v2, aBlock);
}

void *trace_set_thread_exit_handler(void *aBlock)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_set_thread_exit_handler(v2, aBlock);
}

uint64_t trace_set_walltime_enabled(int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_set_walltimes_enabled(v2, a1);
}

uint64_t trace_set_raw_file(const char *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_set_file(v2, a1);
}

uint64_t trace_set_use_existing()
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v0 = global_session;

  return ktrace_set_use_existing(v0);
}

uint64_t trace_filter(const char *a1, const void *a2)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v4 = global_session;

  return ktrace_events_filter(v4, a1, a2);
}

uint64_t trace_exclude_process(const char *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_exclude_process(v2, a1);
}

uint64_t trace_exclude_pid(int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_exclude_pid(v2, a1);
}

uint64_t trace_filter_pid(int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_filter_pid(v2, a1);
}

uint64_t trace_set_command_map_enabled(int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_set_execnames_enabled(v2, a1);
}

uint64_t trace_codename_add_default_files()
{
  return 0;
}

uint64_t trace_add_code_file(char *a1)
{
  return ktrace_session_add_codes_file(global_session, a1);
}

void *trace_set_completion_handler(void *aBlock)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_set_completion_handler(v2, aBlock);
}

uint64_t trace_all(const void *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_events_all(v2, a1);
}

uint64_t trace_single(int a1, const void *a2)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v4 = global_session;

  return ktrace_events_single(v4, a1, a2);
}

uint64_t trace_single_paired(int a1, const void *a2)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v4 = global_session;

  return ktrace_events_single_paired(v4, a1, a2);
}

uint64_t trace_range(int a1, int a2, const void *a3)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v6 = global_session;

  return ktrace_events_range(v6, a1, a2, a3);
}

uint64_t trace_range_paired(int a1, unsigned int a2, const void *a3)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v6 = global_session;

  return ktrace_events_range_paired(v6, a1, a2, a3);
}

uint64_t trace_start(NSObject *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t result = ktrace_start(global_session, a1);
  if (result == 1)
  {
    fwrite("libktrace: cannot trace in a live mode unless root\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    exit(1);
  }
  return result;
}

uint64_t trace_get_command_for_thread(const void *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_get_execname_for_thread(v2, a1);
}

uint64_t trace_get_pid_for_thread(const void *a1)
{
  return ktrace_get_pid_for_thread(global_session, a1);
}

uint64_t trace_set_buffer_size(uint64_t a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_set_buffer_size(v2, a1);
}

uint64_t trace_set_mode(unsigned int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v2 = global_session;

  return ktrace_set_mode(v2, a1);
}

void trace_set_signal_handler()
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v0 = global_session;

  ktrace_set_signal_handler(v0);
}

uint64_t trace_parse_arg(int a1, uint64_t a2, int a3)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v6 = global_session;

  return ktrace_parse_arg(v6, a1, a2, a3);
}

uint64_t trace_parse_args(int a1, char **a2)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_4);
  }
  uint64_t v4 = global_session;

  return ktrace_parse_args(v4, a1, a2);
}

const void *trace_codename_for_debugid(int a1)
{
  return ktrace_name_for_eventid(global_session, (void *)(a1 & 0xFFFFFFFC));
}

const void *trace_codename_to_debugid(const void *a1)
{
  return ktrace_eventid_for_name(global_session, a1);
}

uint64_t trace_enable()
{
  return 1;
}

uint64_t trace_disable()
{
  return 1;
}

uint64_t trace_setup()
{
  return 1;
}

uint64_t trace_reset()
{
  return 1;
}

uint64_t trace_collect_and_process()
{
  return 1;
}

void *__initialize_global_session_block_invoke()
{
  uint64_t result = ktrace_session_create();
  global_session = (uint64_t)result;
  return result;
}

void _session_drain_finish(uint64_t a1)
{
  uint64_t v1 = *(void (***)(void))(a1 + 56);
  uint64_t v2 = v1;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v2, 0);
  if (v2 == v1)
  {
    _session_teardown();
    if (v1)
    {
      if (*(_DWORD *)(a1 + 4))
      {
        v1[2](v1);
        _Block_release(v1);
      }
      else
      {
        uint64_t v4 = *(NSObject **)(a1 + 232);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___session_drain_finish_block_invoke;
        block[3] = &unk_1E6062708;
        block[4] = v1;
        dispatch_async(v4, block);
      }
    }
  }
}

void ___session_drain_finish_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(const void **)(a1 + 32);

  _Block_release(v2);
}

uint64_t apply_kernel_typefilter_and_pid_filter(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*(_DWORD *)(a1 + 560)
    || *(_DWORD *)(a1 + 576) == 2
    || (uint64_t v3 = a1,
        uint64_t v4 = 0,
        CFSetApplyFunction(*(CFSetRef *)(a1 + 552), (CFSetApplierFunction)pid_set_applier, &v3),
        uint64_t result = v4,
        !v4))
  {
    if (*(unsigned char *)(a1 + 16)) {
      return 0;
    }
    uint64_t result = trace_set_filter(*(void **)(a1 + 8));
    if (!result) {
      return 0;
    }
  }
  return result;
}

void populate_threadmap(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_DWORD *)a1 | 2) != 2) {
    _session_start_live_cold_4();
  }
  if (*(void *)(a1 + 232) && *(_DWORD *)(a1 + 260))
  {
    size_t v6 = 0;
    uint64_t v7 = 0;
    if (a2) {
      kdebug_alloc_current_thread_map((uint64_t)&v7, &v6);
    }
    else {
      kdebug_alloc_thread_map(&v7, &v6);
    }
    if (v7)
    {
      uint64_t v3 = *(NSObject **)(a1 + 232);
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      int v4[2] = __populate_threadmap_block_invoke;
      v4[3] = &__block_descriptor_57_e5_v8__0l;
      v4[4] = a1;
      void v4[5] = v7;
      v4[6] = v6;
      char v5 = 1;
      dispatch_async(v3, v4);
    }
  }
}

uint64_t ktrace_configure(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)a1 == 1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)a1 == 3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_WORD *)(a1 + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  unint64_t v9 = atomic_load((unint64_t *)&live_session);
  if (v9 && (*(_WORD *)(v9 + 224) & 1) != 0) {
    return 22;
  }
  unint64_t v10 = v9;
  atomic_compare_exchange_strong(&live_session, &v10, a1);
  if (v10 != v9) {
    return 22;
  }
  _session_machine_init(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_WORD *)(a1 + 224) |= 2u;
  *(_DWORD *)(a1 + 4) = 4;
  uint64_t v11 = trace_initialize(*(void *)(a1 + 336));
  if (v11
    || (ktrace_compute_filter(a1),
        _session_cpus_init(a1, v12, v13, v14, v15, v16, v17, v18),
        uint64_t v11 = apply_kernel_typefilter_and_pid_filter(a1),
        v11)
    || (uint64_t v11 = trace_set_enable(1), v11))
  {
    _session_end_internal(a1, 1, 1);
  }
  return v11;
}

uint64_t ktrace_reset_existing()
{
  unint64_t v0 = atomic_load((unint64_t *)&live_session);
  if (v0)
  {
    if ((*(_WORD *)(v0 + 224) & 2) == 0) {
      ktrace_reset_existing_cold_1();
    }
    unint64_t v1 = v0;
    atomic_compare_exchange_strong(&live_session, &v1, 0);
    if (v1 != v0) {
      return 22;
    }
  }

  return trace_remove_internal();
}

uint64_t ktrace_disable_configured(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 2) == 0) {
    return 22;
  }
  uint64_t v2 = a1;
  atomic_compare_exchange_strong(&live_session, (unint64_t *)&v2, 0);
  if (v2 != a1) {
    return 48;
  }

  return trace_set_enable(0);
}

uint64_t pid_set_applier(uint64_t result, _DWORD *a2)
{
  if (!a2[2])
  {
    uint64_t result = trace_set_pid_filter(*(_DWORD *)(*(void *)a2 + 560) == 2, result);
    a2[2] = result;
  }
  return result;
}

void __populate_threadmap_block_invoke(uint64_t a1)
{
  kthmap_read_kdebug_map(*(void *)(*(void *)(a1 + 32) + 296), *(void *)(a1 + 40), *(void *)(a1 + 48), 0, *(unsigned __int8 *)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 40);

  free(v2);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

uint64_t __drain_callbacks_block_invoke(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 157));
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v3 = *(void *)(a1 + 40);
    unint64_t v5 = *(void *)(v4 + 720);
    if (v5)
    {
      unint64_t v6 = *(void *)(v4 + 160);
      BOOL v7 = v5 > v6;
      unint64_t v8 = v5 - v6;
      if (!v7) {
        ktrace_postprocess_file_internal_cold_1();
      }
      if (v3 >= v8 << 6) {
        unint64_t v3 = v8 << 6;
      }
    }
    uint64_t v9 = *(void *)(a1 + 48);
    int is_64_bit = current_system_is_64_bit();
    _session_process_events(v4, v9, v3, is_64_bit);
  }
  trace_free(*(void **)(a1 + 48));
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(result + 720);
  if (v12 && *(void *)(result + 160) == v12)
  {
    return _session_end_internal(result, 1, 6);
  }
  return result;
}

uint64_t __drain_trailing_duration_block_invoke(void *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1[4] + 157));
  if ((v2 & 1) == 0)
  {
    unint64_t v3 = a1[6];
    if (v3 >= 0x40)
    {
      uint64_t v5 = a1[4];
      uint64_t v4 = a1[5];
      unint64_t v6 = v3 >> 6;
      do
      {
        ktrace_time_ringbuffer_handle_tracepoint(*(uint64_t **)(v5 + 640), v4);
        v4 += 64;
        --v6;
      }
      while (v6);
    }
  }
  BOOL v7 = (void *)a1[5];

  return trace_free(v7);
}

uint64_t ktrace_exclude_process(uint64_t a1, const char *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = validate_filter(a1, 1);
  if (!result)
  {
    uint64_t v5 = strdup(a2);
    if (v5)
    {
      *(_DWORD *)(a1 + 576) = 1;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 568), v5);
      return 0;
    }
    else
    {
      return 12;
    }
  }
  return result;
}

uint64_t validate_filter(uint64_t a1, int a2)
{
  if (*(_WORD *)(a1 + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  if (*(_DWORD *)(a1 + 560) == v2 || *(_DWORD *)(a1 + 576) == v2) {
    return 22;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 260);
  if (v3) {
    return 0;
  }
  *(_DWORD *)(a1 + 260) = 2;
  return v3;
}

uint64_t ktrace_filter_process(uint64_t a1, const char *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = validate_filter(a1, 0);
  if (!result)
  {
    uint64_t v5 = strdup(a2);
    if (v5)
    {
      *(_DWORD *)(a1 + 576) = 2;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 568), v5);
      return 0;
    }
    else
    {
      return 12;
    }
  }
  return result;
}

uint64_t ktrace_exclude_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v4 = validate_filter(a1, 1);
  if (!v4)
  {
    *(_DWORD *)(a1 + 560) = 1;
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 552), (const void *)a2);
  }
  return v4;
}

uint64_t ktrace_filter_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v4 = validate_filter(a1, 0);
  if (!v4)
  {
    *(_DWORD *)(a1 + 560) = 2;
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 552), (const void *)a2);
  }
  return v4;
}

uint64_t ktrace_ignore_process_filter_for_event(uint64_t a1, void *value)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(unsigned char *)(a1 + 580) = 1;
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 584), (const void *)value);
  return 0;
}

uint64_t ktrace_current_timebase()
{
  if (ktrace_current_timebase_once != -1) {
    dispatch_once(&ktrace_current_timebase_once, &__block_literal_global_4);
  }
  return ktrace_current_timebase_mtb;
}

uint64_t __ktrace_current_timebase_block_invoke()
{
  uint64_t result = mach_timebase_info((mach_timebase_info_t)&ktrace_current_timebase_mtb);
  if (result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return result;
}

uint64_t kdebug_wait(unsigned int a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v5 = 23;
  *(void *)uint64_t v4 = 0x1800000001;
  size_t v3 = a1;
  if ((sysctl(v4, 3u, 0, &v3, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kdebug_wait_cold_1();
  }
  *__error() = v2;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22;
  }
}

uint64_t kdebug_read_events(void *a1, size_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = 10;
  *(void *)int v5 = 0x1800000001;
  if (sysctl(v5, 3u, a1, a2, 0, 0) < 0)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      kdebug_read_events_cold_1();
    }
    *__error() = v4;
    if (*__error()) {
      return *__error();
    }
    else {
      return 22;
    }
  }
  else
  {
    uint64_t result = 0;
    *a2 <<= 6;
  }
  return result;
}

uint64_t kdebug_wait_and_read_events(void *a1, size_t *a2, unsigned int a3)
{
  uint64_t result = kdebug_wait(a3);
  if (!result)
  {
    return kdebug_read_events(a1, a2);
  }
  return result;
}

uint64_t kdebug_get_flags()
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  int v3 = 0;
  if (kdebug_get_bufinfo(&v1)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t kdebug_alloc_current_thread_map(uint64_t a1, size_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *a2 = 36000;
  int v3 = malloc_type_malloc(0x8CA0uLL, 0x76FF0578uLL);
  if (!v3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v4 = v3;
  int v9 = 21;
  *(void *)unint64_t v8 = 0x1800000001;
  if ((sysctl(v8, 3u, v3, a2, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  int v6 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kdebug_alloc_current_thread_map_cold_3();
  }
  *__error() = v6;
  unsigned int v7 = *__error();
  free(v4);
  if (v7) {
    return v7;
  }
  else {
    return 22;
  }
}

char *kdebug_alloc_filter_description(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x200uLL, 0x2B4827B2uLL);
  if (!v2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v3 = v2;
  int v4 = 0;
  uint64_t v5 = 0;
  char v6 = 1;
  size_t v7 = 512;
  do
  {
LABEL_3:
    int v8 = 0;
    unsigned int v9 = v4 << 8;
    do
    {
      if (((*(unsigned __int8 *)(a1 + ((unint64_t)(v8 & 0xF8 | v9) >> 3)) >> (v8 & 7)) & 1) == 0)
      {
        for (int i = 0; i != 256; ++i)
        {
          if ((*(unsigned __int8 *)(a1 + ((unint64_t)(i & 0xF8 | v9) >> 3)) >> (i & 7)))
          {
            if (v5 + 10 > v7)
            {
              v7 *= 2;
              uint64_t v13 = malloc_type_realloc(v3, v7, 0xBE78DFFAuLL);
              if (!v13) {
                ktrace_postprocess_file_internal_cold_1();
              }
              int v3 = v13;
            }
            if (v5)
            {
              uint64_t v14 = v5 + 1;
              *((unsigned char *)v3 + v5) = 44;
            }
            else
            {
              uint64_t v14 = 0;
            }
            uint64_t v5 = v14 + snprintf((char *)v3 + v14, 0xAuLL, "S0x%02x%02x", v4, i);
          }
        }
        char v6 = 0;
        if (++v4 == 256) {
          goto LABEL_29;
        }
        goto LABEL_3;
      }
      ++v8;
    }
    while (v8 != 256);
    if (v5 + 8 > v7)
    {
      v7 *= 2;
      uint64_t v10 = malloc_type_realloc(v3, v7, 0x81D5B2E1uLL);
      if (!v10) {
        ktrace_postprocess_file_internal_cold_1();
      }
      int v3 = v10;
    }
    if (v5)
    {
      uint64_t v11 = v5 + 1;
      *((unsigned char *)v3 + v5) = 44;
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v5 = v11 + snprintf((char *)v3 + v11, 8uLL, "C0x%02x", v4++);
  }
  while (v4 != 256);
  if ((v6 & 1) == 0)
  {
LABEL_29:
    *((unsigned char *)v3 + v5) = 0;
    return (char *)v3;
  }
  free(v3);

  return strdup("ALL");
}

uint64_t ktrace_end_on_event_match(uint64_t a1, long long *a2, long long *a3)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 760) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 728) = v3;
  *(_OWORD *)(a1 + 744) = v4;
  long long v6 = *a3;
  long long v5 = a3[1];
  *(void *)(a1 + 800) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 768) = v6;
  *(_OWORD *)(a1 + 784) = v5;
  *(unsigned char *)(a1 + 828) |= 2u;
  return 0;
}

uint64_t ktrace_end_on_dropped_events(uint64_t a1)
{
  *(unsigned char *)(a1 + 828) |= 4u;
  return 0;
}

uint64_t ktrace_end_on_event_count(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 720) = a2;
  return 0;
}

void ktrace_iterate_threads(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  kthmap_iterate_threads(v2, a2);
}

uint64_t ktrace_set_execnames_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  if (!a2)
  {
    if (*(_DWORD *)(result + 560) || *(_DWORD *)(result + 576)) {
      a2 = 2;
    }
    else {
      a2 = 0;
    }
  }
  *(_DWORD *)(result + 260) = a2;
  return result;
}

uint64_t ktrace_get_execnames_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 260);
}

uint64_t ktrace_get_execname_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_process_name_for_tid(v2, a2);
}

uint64_t ktrace_get_execname_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_name_for_pid(v2, a2);
}

uint64_t ktrace_get_pid_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_pid_for_tid(v2, a2);
}

uint64_t ktrace_get_task_uniqueid_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_uniqueid_for_tid(v2, a2);
}

const void *ktrace_get_name_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_thread_name_for_tid(v2, a2);
}

uint64_t ktrace_get_name_for_cpu(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = *(void *)(a1 + 352);
  if (result)
  {
    return ktrace_cpus_get_cpu_name(result, a2);
  }
  return result;
}

uint64_t ktrace_get_cpu_is_coproc(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = *(void *)(a1 + 352);
  if (result)
  {
    return ktrace_cpus_get_cpu_is_coproc(result, a2);
  }
  return result;
}

uint64_t ktrace_session_add_codes_file(uint64_t a1, char *a2)
{
  return kteventnames_add_path((CFMutableDictionaryRef *)(a1 + 360), a2);
}

uint64_t ktrace_session_set_default_event_names_enabled(uint64_t a1, int a2)
{
  return kteventnames_use_default(a1 + 360, a2);
}

uint64_t ktrace_session_get_default_event_names_enabled(uint64_t a1)
{
  return kteventnames_using_default(a1 + 360);
}

BOOL ktrace_session_getting_event_names_from_system(uint64_t a1)
{
  return kteventnames_from_system(a1 + 360);
}

uint64_t ktrace_session_set_event_names_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(_DWORD *)(result + 256) = a2;
  if (!a2)
  {
    uint64_t v2 = result + 360;
    return kteventnames_use_default(v2, 0);
  }
  return result;
}

uint64_t ktrace_session_get_event_names_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 256);
}

const void *ktrace_name_for_eventid(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 256)) {
    return kteventnames_name_from_id(a1 + 360, a2);
  }
  else {
    return 0;
  }
}

const void *ktrace_eventid_for_name(uint64_t a1, const void *a2)
{
  if (*(_DWORD *)(a1 + 256)) {
    return kteventnames_id_from_name(a1 + 360, a2);
  }
  else {
    return 0;
  }
}

uint64_t ktrace_set_uuid_map_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_thread_cputime_enabled_cold_4();
  }
  if (a2 == 2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(_DWORD *)(result + 284) = a2;
  return result;
}

uint64_t ktrace_get_uuid_map_enabled(uint64_t a1)
{
  return *(unsigned int *)(a1 + 284);
}

uint64_t ktrace_get_jetsam_coalitions_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 276);
}

uint64_t ktrace_dump_address_space(uint64_t a1, unint64_t a2, FILE *a3)
{
  return ktrace_uuid_map_dump_address_space(*(ktrace_uuid_map **)(a1 + 304), a2, a3);
}

uint64_t ktrace_dump_address_space_pid(uint64_t a1, int a2, FILE *a3)
{
  return ktrace_uuid_map_dump_address_space_pid(*(ktrace_uuid_map **)(a1 + 304), a2, a3);
}

uint64_t ktrace_get_thread_group_flags(uint64_t a1, const void *a2, uint64_t *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v3 = *(void *)(a1 + 296);

  return kthmap_flags_for_thread_group(v3, a2, a3);
}

uint64_t ktrace_set_dsc_unslid_base_addresses(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = a1[38];

  return ktrace_uuid_map_set_dsc_unslid_base_addresses(v10, a2);
}

uint64_t ktrace_enable_symbolication(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(a1, a2, a3, a4, a5, a6, a7, a8);
  ktrace_uuid_map_learn_live_kernelmap(a1[38]);
  uint64_t symbolicator = ktrace_get_symbolicator((uint64_t)a1, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v19 = a1[38];
  uint64_t v20 = a1[76];

  return ktrace_symbolicator_enable_symbolication(symbolicator, a2, a3, v19, v20);
}

uint64_t ktrace_get_symbolicator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(void *)(a1 + 312);
  if (!result) {
    ktrace_symbolicator_create();
  }
  if ((*(_WORD *)(a1 + 224) & 0x10) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 608);
    if (v10)
    {
      ktrace_symbolicator_read_file(result, v10, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(a1 + 224) |= 0x10u;
      return *(void *)(a1 + 312);
    }
  }
  return result;
}

double ktrace_get_uuid_offset_for@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  long long v5 = *(ktrace_uuid_map **)(a1 + 304);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  switch(v7)
  {
    case 2:
      unint64_t v12 = *(void *)(a2 + 8);
      break;
    case 1:
      uint64_t v13 = *(const void **)(a2 + 8);
      uint64_t v14 = kthmap_uniqueid_for_tid(*(void *)(a1 + 296), v13);
      if (v14 == -1)
      {
        int v17 = kthmap_pid_for_tid(*(void *)(a1 + 296), v13);
        if ((v17 & 0x80000000) == 0)
        {
          int v8 = v17;
          long long v5 = *(ktrace_uuid_map **)(a1 + 304);
          goto LABEL_7;
        }
LABEL_18:
        double result = 0.0;
        a3[3] = 0u;
        a3[4] = 0u;
        a3[1] = 0u;
        a3[2] = 0u;
        *a3 = 0u;
        return result;
      }
      unint64_t v12 = v14;
      long long v5 = *(ktrace_uuid_map **)(a1 + 304);
      break;
    case 0:
      int v8 = *(_DWORD *)(a2 + 8);
LABEL_7:
      unint64_t v9 = *(void *)a2;
      int v10 = *(unsigned char *)(a2 + 24) & 1;
      return ktrace_uuid_map_get_offset_for_pid_address(v5, v8, v9, v10, a3);
    default:
      goto LABEL_18;
  }
  unint64_t v15 = *(void *)a2;
  int v16 = *(unsigned char *)(a2 + 24) & 1;

  return ktrace_uuid_map_get_offset_for_address(v5, v12, v15, v16, a3);
}

double ktrace_get_uuid_offset_for_task_address@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  memset(v7, 0, sizeof(v7));
  v5[0] = a3;
  v5[1] = a2;
  int v5[2] = 2;
  char v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

double ktrace_get_uuid_offset_for_pid_address@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  memset(v7, 0, sizeof(v7));
  v5[0] = a3;
  v5[1] = a2;
  int v5[2] = 0;
  char v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

double ktrace_get_uuid_offset_for_thread_address@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  memset(v7, 0, sizeof(v7));
  v5[0] = a3;
  v5[1] = a2;
  int v5[2] = 1;
  char v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

uint64_t ktrace_create_cssymbolicator_for_pid(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v1 = *(void *)(a1 + 304);

  return ktrace_uuid_map_create_cssymbolicator_for_pid(v1);
}

uint64_t ktrace_create_cssymbolicator_for_task(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v1 = *(void *)(a1 + 304);

  return ktrace_uuid_map_create_cssymbolicator_for_task(v1);
}

uint64_t ktrace_create_cssymbolicator_for_thread(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (ktrace_get_task_uniqueid_for_thread(a1, a4) != -1) {
    return ktrace_uuid_map_create_cssymbolicator_for_task(*(void *)(a1 + 304));
  }
  if ((ktrace_get_pid_for_thread(a1, a4) & 0x80000000) != 0) {
    return 0;
  }
  return ktrace_uuid_map_create_cssymbolicator_for_pid(*(void *)(a1 + 304));
}

UInt8 *ktrace_describe_uuid_offset(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v9 = *(void *)(a1 + 304);
    uint64_t symbolicator = ktrace_get_symbolicator(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    long long v11 = a2[3];
    long long v18 = a2[2];
    long long v19 = v11;
    long long v20 = a2[4];
    long long v12 = a2[1];
    long long v16 = *a2;
    long long v17 = v12;
    return ktrace_symbolicator_get_description(v9, symbolicator, &v16);
  }
  else
  {
    long long v14 = a2[3];
    long long v18 = a2[2];
    long long v19 = v14;
    long long v20 = a2[4];
    long long v15 = a2[1];
    long long v16 = *a2;
    long long v17 = v15;
    return ktrace_uuid_offset_get_description(0, &v16);
  }
}

BOOL ktrace_symbolicate_uuid_offset(uint64_t a1, _OWORD *a2, unsigned char *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t symbolicator = ktrace_get_symbolicator(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  long long v14 = a2[3];
  unint64_t v17[2] = a2[2];
  v17[3] = v14;
  _OWORD v17[4] = a2[4];
  long long v15 = a2[1];
  v17[0] = *a2;
  v17[1] = v15;
  return ktrace_symbolicator_symbolicate(symbolicator, (uint64_t)v17, a3, a4, a5, a6);
}

BOOL ktrace_plausible_kernel_address(uint64_t a1, unint64_t a2)
{
  return ktrace_uuid_map_plausible_kernel_address(*(void *)(a1 + 304), a2);
}

uint64_t ktrace_set_jetsam_coalitions_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  *(_DWORD *)(result + 276) = a2;
  return result;
}

uint64_t ktrace_get_jetsam_coalition_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_jetsam_coalition_for_tid(v2, a2);
}

uint64_t ktrace_get_jetsam_coalition_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_jetsam_coalition_for_pid(v2, a2);
}

uint64_t ktrace_set_thread_groups_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  *(_DWORD *)(result + 280) = a2;
  return result;
}

uint64_t ktrace_get_thread_groups_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 280);
}

uint64_t ktrace_get_thread_group_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_thread_group_for_tid(v2, a2);
}

char *ktrace_get_thread_group_name(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 296);

  return kthmap_name_for_thread_group(v2, a2);
}

uint64_t ktrace::RingBufferImpl::handleTracepoint(uint64_t result, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(void *)a2 >= *(void *)(result + 72))
  {
    uint64_t v3 = result;
    ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation((int *)result, a2);
    double result = (uint64_t)ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards((int *)v3, a2);
    unsigned int v4 = *(_DWORD *)(v3 + 56);
    uint64_t v5 = *(void *)(v3 + 48) + 48 * v4;
    uint64_t v6 = *(void *)a2;
    *(void *)uint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(_DWORD *)(a2 + 52) << 56);
    int v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 12) = *(void *)(a2 + 40);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(v3 + 56) = v4 + 1;
    *(void *)(v3 + 80) = v6;
    if (v7 == 117571592) {
      *(unsigned char *)(*(void *)(v3 + 32) + 16) = 1;
    }
    if (v4 + 1 == *(_DWORD *)(v3 + 40))
    {
      uint64_t v8 = *(void *)(v3 + 24);
      if (v8 != *(void *)(v3 + 32))
      {
        uint64_t v9 = 0;
        int v10 = (FILE **)MEMORY[0x1E4F143C8];
        while (*(void *)(v3 + 80) - *(void *)(v8 + 8) >= *(void *)v3)
        {
          *(void *)(v3 + 24) = *(void *)v8;
          if (v9)
          {
            double result = ktrace::MemoryPool<ktrace::RingBufferHeader>::freeToMemoryPool(*(void *)(v3 + 112), (void *)v8);
            uint64_t v8 = v9;
          }
          else
          {
            *(unsigned char *)(v8 + 16) = 0;
            if (!*(unsigned char *)(v3 + 16))
            {
              fwrite("WARNING: The ring buffer size now covers the full requested ring buffer time.\n", 0x4EuLL, 1uLL, *v10);
              int v11 = *__error();
              ktrace_log_init();
              long long v12 = ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 67109120;
                int v18 = v11;
                _os_log_error_impl(&dword_1B39A5000, v12, OS_LOG_TYPE_ERROR, "WARNING: The ring buffer size now covers the full requested ring buffer time. (%{errno}d)", buf, 8u);
              }
              double result = (uint64_t)__error();
              *(_DWORD *)double result = v11;
              *(unsigned char *)(v3 + 16) = 1;
            }
          }
          uint64_t v9 = v8;
          uint64_t v8 = *(void *)(v3 + 24);
          if (v8 == *(void *)(v3 + 32)) {
            goto LABEL_25;
          }
        }
        if (v9) {
          goto LABEL_25;
        }
      }
      double result = (uint64_t)ktrace::MemoryPool<ktrace::RingBufferHeader>::allocateFromMemoryPool(*(void *)(v3 + 112));
      if (result)
      {
        uint64_t v9 = result;
        uint64_t v13 = (unsigned char *)(result + 16);
      }
      else
      {
        uint64_t v9 = *(void *)(v3 + 24);
        if (v9 == *(void *)(v3 + 32)) {
          ktrace::RingBufferImpl::handleTracepoint();
        }
        uint64_t v13 = (unsigned char *)(v3 + 16);
        int v14 = *(unsigned __int8 *)(v3 + 16);
        *(void *)(v3 + 24) = *(void *)v9;
        *(unsigned char *)(v9 + 16) = 0;
        if (!v14) {
          goto LABEL_25;
        }
        fwrite("WARNING: The maximum ring buffer size has been reached. The trace will not be able to cover the full requested ring buffer time.\n", 0x81uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        int v15 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace::RingBufferImpl::handleTracepoint();
        }
        double result = (uint64_t)__error();
        *(_DWORD *)double result = v15;
      }
      *uint64_t v13 = 0;
LABEL_25:
      long long v16 = *(uint64_t **)(v3 + 32);
      *long long v16 = v9;
      v16[1] = *(void *)(v3 + 80);
      *(void *)uint64_t v9 = 0;
      *(void *)(v3 + 32) = v9;
      *(void *)(v3 + 48) = v9 + 24;
      *(_DWORD *)(v3 + 56) = 0;
    }
  }
  return result;
}

int *ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation(int *result, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 7))
  {
    uint64_t v3 = result;
    int v4 = result[23];
    if (!v4)
    {
      fwrite("ERROR: Timestamp size exceeded. Trace file will probably be corrupted and unreadable. You can fix this by rebooting.\n", 0x75uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation();
      }
      double result = __error();
      *double result = v5;
      *((unsigned char *)v3 + 96) = 1;
      int v4 = v3[23];
    }
    v3[23] = v4 + 1;
  }
  unint64_t v6 = *(void *)(a2 + 40);
  if (HIDWORD(v6))
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "WARNING: Thread id size exceeded for debugid: 0x%08x cpuid: %-2u tid: 0x%llx\n", *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52), v6);
    int v7 = *__error();
    ktrace_log_init();
    uint64_t v8 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(a2 + 48);
      int v10 = *(_DWORD *)(a2 + 52);
      uint64_t v11 = *(void *)(a2 + 40);
      *(_DWORD *)long long buf = 67109888;
      int v13 = v9;
      __int16 v14 = 1024;
      int v15 = v10;
      __int16 v16 = 2048;
      uint64_t v17 = v11;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_error_impl(&dword_1B39A5000, v8, OS_LOG_TYPE_ERROR, "WARNING: Thread id size exceeded for debugid: 0x%08x cpuid: %-2u tid: 0x%llx (%{errno}d)", buf, 0x1Eu);
    }
    double result = __error();
    *double result = v7;
  }
  return result;
}

int *ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards(int *result, uint64_t a2)
{
  if (*((void *)result + 10) > *(void *)a2)
  {
    uint64_t v2 = result;
    int v3 = result[22];
    if (!v3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "ERROR: Timestamps out of order for class 0x%x. Trace file will probably be corrupted and unreadable. Please file a bug against Purple Ariadne with this trace.\n", *(unsigned __int8 *)(a2 + 51));
      uint64_t v5 = *__error();
      ktrace_log_init();
      unint64_t v6 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards(a2 + 48, v5, v6);
      }
      double result = __error();
      *double result = v5;
      *((unsigned char *)v2 + 96) = 1;
      int v3 = v2[22];
    }
    v2[22] = v3 + 1;
  }
  return result;
}

uint64_t ktrace::MemoryPool<ktrace::RingBufferHeader>::freeToMemoryPool(uint64_t a1, void *a2)
{
  int v4 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  *a2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 8);
  ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(a1);

  return pthread_mutex_unlock(v4);
}

void *ktrace::MemoryPool<ktrace::RingBufferHeader>::allocateFromMemoryPool(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  int v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 16) = *v3;
    --*(_DWORD *)(a1 + 8);
    ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(a1);
  }
  pthread_mutex_unlock(v2);
  return v3;
}

int *ktrace::RingBufferImpl::handleCompletion(ktrace::RingBufferImpl *this, ktrace_file *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v4 = (uint64_t *)*((void *)this + 3);
  uint64_t appended = ktrace_file_append_start((uint64_t)a2, 20982, 0, 0);
  if (appended)
  {
    uint64_t v6 = (uint64_t)appended;
    if (v4 != *((uint64_t **)this + 4))
    {
      int v7 = (FILE **)MEMORY[0x1E4F143C8];
      do
      {
        if (*((unsigned char *)v4 + 16))
        {
          int v8 = *((_DWORD *)this + 25);
          if (!v8)
          {
            fwrite("ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-events for additional help.\n", 0x89uLL, 1uLL, *v7);
            int v9 = *__error();
            ktrace_log_init();
            int v10 = ktrace_log;
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67109120;
              LODWORD(v23) = v9;
              _os_log_error_impl(&dword_1B39A5000, v10, OS_LOG_TYPE_ERROR, "ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-events for additional help. (%{errno}d)", buf, 8u);
            }
            *__error() = v9;
            int v8 = *((_DWORD *)this + 25);
          }
          *((_DWORD *)this + 25) = v8 + 1;
          *((unsigned char *)this + 96) = 1;
        }
        unint64_t v11 = 48 * *((int *)this + 10);
        if (ktrace_file_append_data((uint64_t)a2, v6, (UInt8 *)v4 + 24, v11))
        {
          unint64_t v12 = v11 / 0x30;
          fprintf(*v7, "ERROR: Failed to write %ld kdebug events into chunk in output file\n", v11 / 0x30);
          int v13 = *__error();
          ktrace_log_init();
          __int16 v14 = ktrace_log;
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134218240;
            unint64_t v23 = v12;
            __int16 v24 = 1024;
            int v25 = v13;
            _os_log_error_impl(&dword_1B39A5000, v14, OS_LOG_TYPE_ERROR, "ERROR: Failed to write %ld kdebug events into chunk in output file (%{errno}d)", buf, 0x12u);
          }
          *__error() = v13;
        }
        int v4 = (uint64_t *)*v4;
      }
      while (v4 != *((uint64_t **)this + 4));
    }
    if (*((unsigned char *)v4 + 16))
    {
      int v15 = *((_DWORD *)this + 25);
      if (!v15)
      {
        fwrite("ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-events for additional help.\n", 0x89uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        int v16 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace::RingBufferImpl::handleCompletion();
        }
        *__error() = v16;
        int v15 = *((_DWORD *)this + 25);
        int v4 = (uint64_t *)*((void *)this + 4);
      }
      *((_DWORD *)this + 25) = v15 + 1;
      *((unsigned char *)this + 96) = 1;
    }
    uint64_t v17 = *((unsigned int *)this + 14);
    if (ktrace_file_append_data((uint64_t)a2, v6, (UInt8 *)v4 + 24, 48 * v17))
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "ERROR: Failed to write %ld kdebug events into chunk in output file\n", v17);
      int v18 = *__error();
      ktrace_log_init();
      int v19 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace::RingBufferImpl::handleCompletion(v17, v18, v19);
      }
      *__error() = v18;
    }
    return (int *)ktrace_file_append_finish((uint64_t)a2, v6);
  }
  else
  {
    fwrite("ERROR: Failed to create kdebug events chunk in output file\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    int v21 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace::RingBufferImpl::handleCompletion();
    }
    double result = __error();
    *double result = v21;
  }
  return result;
}

void ktrace::RingBufferImpl::RingBufferImpl(ktrace::RingBufferImpl *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  *((unsigned char *)this + 16) = 1;
  *((_DWORD *)this + 10) = 50000;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((unsigned char *)this + 96) = 0;
  unint64_t v9 = 0;
  size_t v10 = 8;
  if (!sysctlbyname("hw.memsize", &v9, &v10, 0, 0))
  {
    unint64_t v4 = v9 >> 20;
    unsigned int v5 = *((_DWORD *)this + 3);
    if (!v5)
    {
      unsigned int v5 = (int)v4 >> 3;
      *((_DWORD *)this + 3) = (int)v4 >> 3;
    }
    unsigned int v6 = 3 * (int)v4 / 4;
    if (v6 < v5) {
      unsigned int v5 = v6;
    }
    if (v5 >= 0xFF8) {
      unsigned int v5 = 4088;
    }
    if (v5 <= 2) {
      unsigned int v5 = 2;
    }
    *((_DWORD *)this + 2) = v5;
    mach_timebase_info(&info);
    *(void *)this = (unint64_t)info.denom * a2 / info.numer;
    ktrace::MemoryPool<ktrace::RingBufferHeader>::create();
  }
  __error();
  perror("ERROR: Couldn't get total memory size");
  int v7 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    ktrace::RingBufferImpl::RingBufferImpl();
  }
  *__error() = v7;
  exit(1);
}

void sub_1B39D3D3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void ktrace::MemoryPool<ktrace::RingBufferHeader>::create()
{
}

void sub_1B39D3F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void ktrace_time_ringbuffer_create()
{
}

void sub_1B39D3F9C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EBEC50](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t ktrace_time_ringbuffer_null()
{
  return 0;
}

uint64_t *ktrace_time_ringbuffer_destroy(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    *double result = 0;
    if (v1) {
      std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100]((uint64_t)result, v1);
    }
    JUMPOUT(0x1B3EBEC50);
  }
  return result;
}

uint64_t ktrace_time_ringbuffer_tracing_started(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    double result = mach_absolute_time();
    *(void *)(*(void *)v1 + 72) = result;
  }
  return result;
}

uint64_t *ktrace_time_ringbuffer_handle_tracepoint(uint64_t *result, uint64_t a2)
{
  if (result)
  {
    if (a2) {
      return (uint64_t *)ktrace::RingBufferImpl::handleTracepoint(*result, a2);
    }
  }
  return result;
}

int *ktrace_time_ringbuffer_tracing_stopped(int *result, ktrace_file *a2)
{
  if (result) {
    return ktrace::RingBufferImpl::handleCompletion(*(ktrace::RingBufferImpl **)result, a2);
  }
  return result;
}

void ktrace_time_ringbuffer::ktrace_time_ringbuffer(ktrace_time_ringbuffer *this)
{
  *(void *)this = 0;
  operator new();
}

void sub_1B39D40EC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EBEC50](v2, 0x1020C40FC637495);
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100]((uint64_t)v1, v4);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)(a2 + 112);
    uint64_t v3 = *(void *)(a2 + 112);
    *uint64_t v2 = 0;
    if (v3) {
      std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)v2, v3);
    }
    JUMPOUT(0x1B3EBEC50);
  }
}

void ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 44))
  {
    if ((int v1 = *(_DWORD *)(a1 + 8), v1 < *(_DWORD *)(a1 + 32)) && *(void *)(a1 + 24) || *(_DWORD *)(a1 + 36) < v1)
    {
      uint64_t v2 = *(NSObject **)(a1 + 120);
      if (v2)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZN6ktrace10MemoryPoolINS_16RingBufferHeaderEE21checkPinnedThresholdsEv_block_invoke;
        block[3] = &__block_descriptor_tmp_7;
        block[4] = a1;
        dispatch_async(v2, block);
      }
    }
  }
}

uint64_t ___ZN6ktrace10MemoryPoolINS_16RingBufferHeaderEE21checkPinnedThresholdsEv_block_invoke(uint64_t a1)
{
  return ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory(*(int **)(a1 + 32));
}

uint64_t ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory(int *a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 12);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 12));
  int v3 = a1[2];
  int v5 = a1[8];
  int v4 = a1[9];
  if (v3 >= v5)
  {
    if (v4 >= v3) {
      goto LABEL_25;
    }
    BOOL v6 = __OFADD__(v4, v5);
    int v10 = v4 + v5;
    if (v10 < 0 != v6) {
      ++v10;
    }
    int v8 = v3 - (v10 >> 1);
    unint64_t v9 = a1 + 4;
  }
  else
  {
    BOOL v6 = __OFADD__(v4, v5);
    int v7 = v4 + v5;
    if (v7 < 0 != v6) {
      ++v7;
    }
    int v8 = (v7 >> 1) - v3;
    unint64_t v9 = a1 + 6;
  }
  uint64_t v11 = (void *)*v9;
  if (*v9)
  {
    if (v8 < 1) {
      ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory();
    }
    int v12 = 1;
    int v13 = (void *)*v9;
    if (v8 != 1)
    {
      while (1)
      {
        __int16 v14 = (void *)*v13;
        if (!*v13) {
          break;
        }
        ++v12;
        int v13 = (void *)*v13;
        if (v8 == v12)
        {
          int v13 = v14;
          int v12 = v8;
          break;
        }
      }
    }
    int v15 = (void *)*v13;
    if (v3 >= v5)
    {
      *((void *)a1 + 2) = v15;
      a1[2] = v3 - v12;
    }
    else
    {
      *((void *)a1 + 3) = v15;
    }
    *int v13 = 0;
    a1[11] = 1;
    pthread_mutex_unlock(v2);
    int v16 = v11;
    do
    {
      if (v3 >= v5) {
        madvise(v16, *a1, 5);
      }
      int v16 = (void *)*v16;
    }
    while (v16);
    pthread_mutex_lock(v2);
    a1[11] = 0;
    if (v3 >= v5)
    {
      *int v13 = *((void *)a1 + 3);
      *((void *)a1 + 3) = v11;
    }
    else
    {
      *int v13 = *((void *)a1 + 2);
      *((void *)a1 + 2) = v11;
      a1[2] += v12;
    }
  }
LABEL_25:

  return pthread_mutex_unlock(v2);
}

void std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(NSObject **)(a2 + 120);
    if (v3)
    {
      dispatch_sync(v3, &__block_literal_global_5);
      *(void *)(a2 + 120) = 0;
    }
    JUMPOUT(0x1B3EBEC50);
  }
}

void *ktrace_session_create_with_flags(char a1)
{
  uint64_t v2 = malloc_type_malloc(0x340uLL, 0x10F00409744CDD0uLL);
  bzero(v2, 0x340uLL);
  int v3 = kthmap_create();
  v2[37] = v3;
  if (v3)
  {
    kteventnames_init((uint64_t)(v2 + 45));
    int v4 = malloc_type_calloc(0x400uLL, 8uLL, 0x2004093837F09uLL);
    v2[30] = v4;
    if (v4)
    {
      memset(&callBacks, 0, sizeof(callBacks));
      v2[69] = CFSetCreateMutable(0, 0, &callBacks);
      v2[73] = CFSetCreateMutable(0, 0, &callBacks);
      CFSetCallBacks v9 = *(CFSetCallBacks *)byte_1F0C3CE90;
      v2[71] = CFSetCreateMutable(0, 0, &v9);
      *((_WORD *)v2 + 112) &= 0xFFFCu;
      v2[38] = 0;
      v2[63] = -1;
      v2[102] = dispatch_group_create();
      *((_DWORD *)v2 + 206) = 0;
      *((_DWORD *)v2 + 36) = 25;
      *((_DWORD *)v2 + 38) = 5000;
      int v12 = 0;
      size_t v11 = 4;
      if (sysctlbyname("hw.logicalcpu_max", &v12, &v11, 0, 0) == -1) {
        ktrace_postprocess_file_internal_cold_1();
      }
      if (!v12) {
        ktrace_postprocess_file_internal_cold_1();
      }
      v2[42] = (uint64_t)v12 << 6;
      *uint64_t v2 = 0;
      *((_DWORD *)v2 + 164) = 0;
      *(void *)((char *)v2 + 276) = 0;
      *((_DWORD *)v2 + 66) = 1;
      *((_DWORD *)v2 + 7ktrace_session_set_default_event_names_enabled(global_session, 1) = a1 & 1;
      *((_DWORD *)v2 + 64) = a1 & 1;
      *((unsigned char *)v2 + 392) = v2[49] & 0xFD | (2 * (a1 & 1));
      *((_WORD *)v2 + 112) = v2[28] & 0xFDFF | ((a1 & 1) << 9);
      *((_DWORD *)v2 + 65) = a1 & 1;
      *((_DWORD *)v2 + 72) = a1 & 1;
      return v2;
    }
  }
  else
  {
    int v4 = (void *)v2[30];
  }
  free(v4);
  v2[30] = 0;
  free((void *)v2[37]);
  v2[37] = 0;
  int v5 = (const void *)v2[69];
  if (v5) {
    CFRelease(v5);
  }
  BOOL v6 = (const void *)v2[73];
  if (v6) {
    CFRelease(v6);
  }
  int v7 = (const void *)v2[71];
  if (v7) {
    CFRelease(v7);
  }
  free(v2);
  return 0;
}

void *ktrace_session_create()
{
  return ktrace_session_create_with_flags(1);
}

uint64_t ___session_end_internal_block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 600) didEndTracingWithFile:*(void *)(*(void *)(a1 + 32) + 648)];
}

void _session_teardown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)(a1 + 4) != 4) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 128));
  }
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 159));
  if ((v9 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 159));
    switch(*(_DWORD *)a1)
    {
      case 0:
        trace_remove_internal();
        break;
      case 1:
      case 3:
        break;
      case 2:
        trace_set_enable(1);
        break;
      default:
        _session_teardown_cold_2();
    }
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 158));
    if ((v10 & 1) == 0)
    {
      int v11 = *(_DWORD *)(a1 + 4);
      if ((v11 - 1) <= 1)
      {
        int v12 = *(ktrace_file **)(a1 + 648);
        if (!v12) {
          ktrace_postprocess_file_internal_cold_1();
        }
        if (v11 == 2) {
          ktrace_time_ringbuffer_tracing_stopped(*(int **)(a1 + 640), v12);
        }
        uint64_t v13 = *(void *)(a1 + 672);
        if (v13) {
          (*(void (**)(uint64_t, void))(v13 + 16))(v13, *(void *)(a1 + 648));
        }
        if ((*(unsigned char *)(a1 + 828) & 1) == 0)
        {
          int v12 = *(ktrace_file **)(a1 + 648);
          if (v12->var1 != 4)
          {
            kteventnames_append(a1 + 360, (uint64_t)v12);
            uint64_t v27 = 0;
            if ((*(_WORD *)(a1 + 224) & 0x100) != 0) {
              int v14 = 1;
            }
            else {
              int v14 = 3;
            }
            if (*(_DWORD *)(a1 + 656) >= 2u) {
              int v15 = v14 | 4;
            }
            else {
              int v15 = v14;
            }
            ktrace_postprocess_file_internal(a1, *(void *)(a1 + 648), 0, v15, (uint64_t)&v27);
            if (*(void *)(a1 + 592)) {
              ktrace_client_get_subfile();
            }
            if (v27) {
              goto LABEL_31;
            }
            int v22 = ktrace_file_latest_timestamp(*(void *)(a1 + 648), &v27, v16, v17, v18, v19, v20, v21);
            if (v22)
            {
              *__error() = v22;
              int v23 = *__error();
              ktrace_log_init();
              __int16 v24 = ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                _session_teardown_cold_4(v23, v24);
              }
              *__error() = v23;
            }
            if (v27) {
LABEL_31:
            }
              ktrace_file_append_chunk(*(void *)(a1 + 648), 32775, 0, 1, (UInt8 *)&v27, 8);
          }
        }
        if (*(void *)(a1 + 592)) {
          ktrace_client_destroy();
        }
        uint64_t v25 = *(void *)(a1 + 648);
        if (v25)
        {
          uint64_t v26 = ktrace_catalog_open(v25, (uint64_t)v12, a3, a4, a5, a6, a7, a8);
          [*(id *)(a1 + 600) willFinishWithCatalog:v26 file:*(void *)(a1 + 648)];
          if (v26) {
            ktrace_catalog_close(v26);
          }
        }
        else
        {
          [*(id *)(a1 + 600) willFinishWithCatalog:0 file:0];
        }
        ktrace_file_close(*(void **)(a1 + 648));
        *(void *)(a1 + 648) = 0;
      }
    }
  }
}

void ___session_end_internal_block_invoke_13(uint64_t a1)
{
}

void *ktrace_set_cleanup_handler(uint64_t a1, void *aBlock)
{
  if (*(void *)(a1 + 688)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  double result = _Block_copy(aBlock);
  *(void *)(a1 + 688) = result;
  return result;
}

void ktrace_session_free(uint64_t a1)
{
  if ((*(_DWORD *)a1 | 2) == 2) {
    _session_end_live(a1);
  }
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  int v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  int v4 = *(void **)(a1 + 608);
  if (v4 && (*(_WORD *)(a1 + 224) & 4) != 0) {
    ktrace_file_close(v4);
  }
  if (*(void *)(a1 + 592) && (*(_WORD *)(a1 + 224) & 8) != 0) {
    ktrace_client_destroy();
  }
  ktrace_callback_list_reset((int *)(a1 + 24));
  ktrace_callback_list_reset((int *)(a1 + 40));
  ktrace_callback_list_reset((int *)(a1 + 112));
  ktrace_callback_list_reset((int *)(a1 + 96));
  kthmap_destroy(*(CFTypeRef **)(a1 + 296));
  ktrace_machine_destroy(*(void *)(a1 + 344));
  vnode_path_map_destroy(*(CFDictionaryRef **)(a1 + 400));
  thread_cputime_map_destroy(*(const void ***)(a1 + 408));
  clear_events(*(void *)(a1 + 240), (void *)(a1 + 248));
  free(*(void **)(a1 + 240));
  int v5 = *(const void **)(a1 + 552);
  if (v5) {
    CFRelease(v5);
  }
  BOOL v6 = *(const void **)(a1 + 584);
  if (v6) {
    CFRelease(v6);
  }
  int v7 = *(const void **)(a1 + 568);
  if (v7) {
    CFRelease(v7);
  }
  kteventnames_destroy(a1 + 360);
  if (*(void *)(a1 + 176))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 176));
  }
  if (*(void *)(a1 + 184))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
  }
  if (*(void *)(a1 + 200))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 200));
  }
  if (*(void *)(a1 + 192))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 192));
  }
  if (*(void *)(a1 + 208))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 208));
  }
  if (*(void *)(a1 + 216))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 216));
  }
  int v8 = *(const void **)(a1 + 664);
  if (v8) {
    _Block_release(v8);
  }
  unsigned __int8 v9 = *(const void **)(a1 + 672);
  if (v9) {
    _Block_release(v9);
  }
  unsigned __int8 v10 = *(const void **)(a1 + 88);
  if (v10) {
    _Block_release(v10);
  }
  int v11 = *(const void **)(a1 + 72);
  if (v11) {
    _Block_release(v11);
  }
  if (*(void *)(a1 + 416)) {
    MEMORY[0x1B3EBF290]();
  }
  int v12 = *(const void **)(a1 + 624);
  if (v12) {
    ktrace_stream_destroy(v12);
  }
  uint64_t v13 = *(const void **)(a1 + 616);
  if (v13) {
    ktrace_stream_destroy(v13);
  }
  int v14 = *(const void **)(a1 + 304);
  if (v14) {
    CFRelease(v14);
  }
  if (!*(_DWORD *)a1)
  {
    int v15 = *(void **)(a1 + 320);
    if (v15)
    {
      if (v15[13]) {
        ktrace_postprocess_file_internal_cold_1();
      }
      ktrace_chunk_destroy(v15);
    }
  }
  uint64_t v16 = *(KtraceSymbolicator **)(a1 + 312);
  if (v16) {
    ktrace_symbolicator_destroy(v16);
  }
  uint64_t v17 = *(uint64_t **)(a1 + 640);
  if (v17) {
    ktrace_time_ringbuffer_destroy(v17);
  }
  uint64_t v18 = *(void **)(a1 + 352);
  if (v18) {
    ktrace_cpus_destroy(v18);
  }
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 696));
  free(*(void **)(a1 + 704));
  dispatch_release(*(dispatch_object_t *)(a1 + 816));
  uint64_t v19 = *(void *)(a1 + 688);
  if (v19)
  {
    (*(void (**)(void))(v19 + 16))();
    _Block_release(*(const void **)(a1 + 688));
  }
  uint64_t v20 = *(const void **)(a1 + 680);
  if (v20) {
    _Block_release(v20);
  }

  free((void *)a1);
}

void ktrace_session_destroy(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  _session_end_internal(a1, 1, 3);
  uint64_t v2 = *(NSObject **)(a1 + 128);
  if (v2)
  {
    dispatch_release(v2);
    int v3 = *(NSObject **)(a1 + 136);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
  else
  {
    ktrace_session_free(a1);
  }
}

uint64_t ktrace_start(unint64_t a1, NSObject *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v3 = (unsigned __int8 *)(a1 + 156);
  unsigned __int8 v4 = atomic_load(v3);
  if (v4) {
    ktrace_start_cold_12(v3);
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_start_cold_11();
  }
  int v6 = *(_DWORD *)(a1 + 4);
  if ((v6 - 1) <= 1)
  {
    if (*(_DWORD *)a1) {
      goto LABEL_8;
    }
    [*(id *)(a1 + 600) configureWithSession:a1];
    int v6 = *(_DWORD *)(a1 + 4);
  }
  if (!v6 && *(int *)(a1 + 112) >= 1 && *(_DWORD *)a1 != 1) {
    return 22;
  }
LABEL_8:
  ktrace_compute_filter(a1);
  if (*(_DWORD *)a1 == 4)
  {
    uint64_t v13 = *(void *)(a1 + 608);
    if (!v13) {
      ktrace_postprocess_file_internal_cold_1();
    }
    *(void *)__str = 0;
    uint64_t v39 = __str;
    uint64_t v40 = 0x2020000000;
    char v41 = 0;
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __ktrace_start_block_invoke;
    v37[3] = &unk_1E6062818;
    v37[4] = __str;
    uint64_t v12 = ktrace_file_iterate(v13, 0, (uint64_t)v37, v7, v8, v9, v10, v11);
    if (!v12) {
      uint64_t v12 = v39[24] == 0;
    }
    _Block_object_dispose(__str, 8);
  }
  else if (*(_DWORD *)a1 == 3)
  {
    print_filter(*(void *)(a1 + 8));
    return 0;
  }
  else
  {
    snprintf(__str, 0x80uLL, "com.apple.libktrace.collection.%p", (const void *)a1);
    if (*(_DWORD *)(a1 + 148))
    {
      *(void *)(a1 + 136) = dispatch_workloop_create_inactive(__str);
      dispatch_workloop_set_scheduler_priority();
      dispatch_activate(*(dispatch_object_t *)(a1 + 136));
    }
    int v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    int v15 = dispatch_queue_attr_make_with_qos_class(v14, (dispatch_qos_class_t)*(_DWORD *)(a1 + 144), -1);
    uint64_t v16 = dispatch_queue_create_with_target_V2(__str, v15, *(dispatch_queue_t *)(a1 + 136));
    *(void *)(a1 + 128) = v16;
    if (!v16) {
      ktrace_postprocess_file_internal_cold_1();
    }
    dispatch_set_context(v16, (void *)a1);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 128), (dispatch_function_t)collection_queue_finalizer);
    if (!*(void *)(a1 + 128)) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int v17 = *(_DWORD *)(a1 + 284);
    kteventnames_freeze((uint64_t *)(a1 + 360));
    int v18 = *(_DWORD *)(a1 + 4);
    if ((v18 - 1) >= 2)
    {
      if (v18) {
        ktrace_start_cold_4();
      }
      uint64_t v19 = *(void *)(a1 + 32);
      if (*(_DWORD *)a1 == 1)
      {
        if (!v19 && !*(void *)(a1 + 120)) {
          ktrace_postprocess_file_internal_cold_1();
        }
      }
      else if (!v19)
      {
        ktrace_postprocess_file_internal_cold_1();
      }
      snprintf(__str, 0x80uLL, "com.apple.libktrace.processing.%p", (const void *)a1);
      uint64_t v20 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      uint64_t v21 = dispatch_queue_create_with_target_V2(__str, v20, a2);
      *(void *)(a1 + 232) = v21;
      dispatch_set_context(v21, (void *)a1);
      dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 232), (dispatch_function_t)processing_queue_finalizer);
      ktrace_callback_list_sort((int *)(a1 + 24));
      if (*(_DWORD *)a1 == 1) {
        ktrace_callback_list_sort((int *)(a1 + 112));
      }
    }
    else
    {
      if (!*(void *)(a1 + 648)) {
        ktrace_postprocess_file_internal_cold_1();
      }
      if ((*(_DWORD *)a1 | 2) != 2) {
        _session_start_live_cold_4();
      }
    }
    *(_WORD *)(a1 + 224) |= 1u;
    int v22 = *(NSObject **)(a1 + 176);
    if (v22) {
      dispatch_activate(v22);
    }
    int v23 = *(NSObject **)(a1 + 184);
    if (v23) {
      dispatch_activate(v23);
    }
    __int16 v24 = *(NSObject **)(a1 + 200);
    if (v24) {
      dispatch_activate(v24);
    }
    uint64_t v25 = *(NSObject **)(a1 + 192);
    if (v25) {
      dispatch_activate(v25);
    }
    uint64_t v26 = *(NSObject **)(a1 + 208);
    if (v26) {
      dispatch_activate(v26);
    }
    uint64_t v27 = *(NSObject **)(a1 + 216);
    if (v27) {
      dispatch_activate(v27);
    }
    uint64_t v12 = 0;
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 2:
        uint64_t started = _session_start_live(a1);
        goto LABEL_51;
      case 1:
        ktrace_log_init();
        uint64_t v29 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__str = 0;
          _os_log_impl(&dword_1B39A5000, v29, OS_LOG_TYPE_INFO, "starting to trace from file", (uint8_t *)__str, 2u);
        }
        uint64_t started = _session_start_file(a1, v17 != 0, v30, v31, v32, v33, v34, v35);
LABEL_51:
        uint64_t v12 = started;
        if (started) {
          *(_WORD *)(a1 + 224) &= ~1u;
        }
        break;
      case 4:
        return v12;
      default:
        ktrace_start_cold_6();
    }
  }
  return v12;
}

void sub_1B39D501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void print_filter(uint64_t a1)
{
  printf("Filter: ");
  if (a1)
  {
    uint64_t v2 = kdebug_alloc_filter_description(a1);
    if (!v2) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int v3 = v2;
    puts(v2);
    free(v3);
  }
  else
  {
    puts("ALL");
  }
}

BOOL __ktrace_start_block_invoke(uint64_t a1, void *a2)
{
  int v3 = (void **)ktrace_config_create(a2);
  unsigned __int8 v4 = v3;
  if (v3)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    uint64_t typefilter = ktrace_config_kdebug_get_typefilter((uint64_t)v3);
    print_filter(typefilter);
    ktrace_config_destroy(v4);
  }
  return v4 == 0;
}

void ktrace_abort(uint64_t a1)
{
}

void collection_queue_finalizer(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v1 = *(NSObject **)(a1 + 232);
  if (v1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __collection_queue_finalizer_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_async(v1, block);
  }
  else
  {
    ktrace_session_free(a1);
  }
}

void __collection_queue_finalizer_block_invoke(uint64_t a1)
{
}

void processing_queue_finalizer(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  ktrace_session_free(a1);
}

uint64_t ktrace_convert_timestamp_to_nanoseconds(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*(_DWORD *)(a1 + 452)) {
    return 45;
  }
  unint64_t v4 = kttimesync_ns_from_timestamp(a1 + 432, a2);
  uint64_t result = 0;
  *a3 = v4;
  return result;
}

uint64_t ktrace_convert_timestamp_to_walltime(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(unsigned char *)(a1 + 480) & 2) == 0) {
    return 45;
  }
  unint64_t v5 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  uint64_t result = 0;
  *a3 = v5;
  a3[1] = v6;
  return result;
}

uint64_t ktrace_convert_absolute_to_walltime(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  char v5 = *(unsigned char *)(a1 + 480);
  if ((v5 & 8) != 0)
  {
    a2 = kttimesync_cont_from_abs(a1 + 432, a2);
    char v5 = *(unsigned char *)(a1 + 480);
  }
  if ((v5 & 2) == 0) {
    return 45;
  }
  unint64_t v7 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  uint64_t result = 0;
  *a3 = v7;
  a3[1] = v8;
  return result;
}

uint64_t ktrace_get_continuous_from_absolute(uint64_t a1, uint64_t a2)
{
  return kttimesync_cont_from_abs(a1 + 432, a2);
}

uint64_t ktrace_convert_continuous_to_walltime(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  char v5 = *(unsigned char *)(a1 + 480);
  if ((v5 & 8) == 0)
  {
    a2 = kttimesync_abs_from_cont(a1 + 432, a2);
    char v5 = *(unsigned char *)(a1 + 480);
  }
  if ((v5 & 2) == 0) {
    return 45;
  }
  unint64_t v7 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  uint64_t result = 0;
  *a3 = v7;
  a3[1] = v8;
  return result;
}

unint64_t ktrace_get_absolute_from_continuous(uint64_t a1, unint64_t a2)
{
  return kttimesync_abs_from_cont(a1 + 432, a2);
}

unint64_t ktrace_get_current_timestamp(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 224);
  uint64_t v3 = a1 + 432;
  unint64_t v4 = *(void *)(a1 + 496);
  if ((v2 & 0x80) != 0) {
    return kttimesync_cont_from_timestamp(v3, v4);
  }
  else {
    return kttimesync_abs_from_timestamp(v3, v4);
  }
}

uint64_t ktrace_set_walltimes_enabled(uint64_t result, int a2)
{
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  *(_DWORD *)(result + 264) = a2;
  return result;
}

uint64_t ktrace_get_walltimes_enabled(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

void _session_convert_walltime(uint64_t a1, unint64_t a2)
{
  kttimesync_wall_from_timestamp(a1 + 432, a2);

  timespec_to_timeval();
}

uint64_t ktrace_get_continuous_from_timestamp(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0) {
    return a2;
  }
  else {
    return kttimesync_cont_from_timestamp(a1 + 432, a2);
  }
}

unint64_t ktrace_get_absolute_from_timestamp(uint64_t a1, unint64_t a2)
{
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0) {
    return kttimesync_abs_from_timestamp(a1 + 432, a2);
  }
  else {
    return a2;
  }
}

unint64_t ktrace_get_ns_from_timestamp(uint64_t a1, uint64_t a2)
{
  return kttimesync_ns_from_timestamp(a1 + 432, a2);
}

unint64_t ktrace_get_earliest_timestamp(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 224);
  uint64_t v3 = a1 + 432;
  unint64_t v4 = *(void *)(a1 + 504);
  if ((v2 & 0x80) != 0) {
    return kttimesync_cont_from_timestamp(v3, v4);
  }
  else {
    return kttimesync_abs_from_timestamp(v3, v4);
  }
}

uint64_t ktrace_set_continuous_timestamps(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  __int16 v2 = *(_WORD *)(result + 224);
  if ((v2 & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  if (a2) {
    __int16 v3 = 128;
  }
  else {
    __int16 v3 = 0;
  }
  *(_WORD *)(result + 224) = v2 & 0xFF7F | v3;
  return result;
}

uint64_t ktrace_set_callbacks_after_elapsed(uint64_t result, uint64_t a2)
{
  *(void *)(result + 512) = a2;
  return result;
}

uint64_t tracepoint_timestamp(uint64_t a1, int a2)
{
  if (a2) {
    return *(void *)a1;
  }
  else {
    return *(void *)a1 & 0xFFFFFFFFFFFFFFLL;
  }
}

uint64_t ktrace_file_append_ioreg(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  ktrace_merge_ioreg_service(Mutable, "IOMobileFramebuffer");
  ktrace_merge_ioreg_service(Mutable, "AGXAccelerator");
  if (!Mutable) {
    return 1;
  }
  CFDataRef Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(Mutable);
  if (Data)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
    CFIndex Length = CFDataGetLength(Data);
    uint64_t appended = ktrace_file_append_chunk(a1, 32776, 0, 0, BytePtr, Length);
    CFRelease(Data);
    return appended != 0;
  }
  else
  {
    int v8 = *__error();
    ktrace_log_init();
    uint64_t v9 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_ioreg_cold_1(v8, v9);
    }
    *__error() = v8;
    return 22;
  }
}

void ktrace_merge_ioreg_service(__CFDictionary *a1, char *name)
{
  io_iterator_t existing = 0;
  CFDictionaryRef v4 = IOServiceMatching(name);
  if (IOServiceGetMatchingServices(0, v4, &existing))
  {
    char v5 = 0;
LABEL_8:
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    while (1)
    {
      io_registry_entry_t v7 = IOIteratorNext(existing);
      if (!v7)
      {
        char v5 = Mutable;
        goto LABEL_8;
      }
      value = 0;
      if (IORegistryEntryCreateCFProperties(v7, (CFMutableDictionaryRef *)&value, 0, 0)) {
        break;
      }
      CFArrayAppendValue(Mutable, value);
      CFRelease(value);
    }
    char v5 = 0;
  }
  if (existing) {
    IOObjectRelease(existing);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5)
  {
    CFStringRef v8 = CFStringCreateWithCString(0, name, 0x8000100u);
    if (!v8) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFStringRef v9 = v8;
    CFAutorelease(v8);
    CFDictionarySetValue(a1, v9, v5);
    CFRelease(v5);
  }
}

os_log_t __ktrace_log_init_block_invoke()
{
  ktrace_log = (uint64_t)os_log_create("com.apple.libktrace", "ktrace");
  os_log_t result = os_log_create("com.apple.libktrace", "ktrace_file");
  ktrace_file_log = (uint64_t)result;
  return result;
}

uint64_t ktrace_machine_create_current()
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  timespec v46 = (timespec)xmmword_1B3A731C0;
  unint64_t v0 = malloc_type_calloc(1uLL, 0xE0uLL, 0x107004026BB74DFuLL);
  uint64_t v1 = (uint64_t)v0;
  if (v0)
  {
    memset(uu, 0, sizeof(uu));
    v0[2] = -1;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      int v4 = 12;
LABEL_46:
      ktrace_machine_destroy(v1);
      uint64_t v1 = 0;
      *__error() = v4;
      return v1;
    }
    __int16 v3 = Mutable;
    *(void *)long long buf = 0x400000001;
    LODWORD(v47) = 0;
    io_iterator_t iterator = 0;
    uint64_t v53 = 4;
    int v4 = sysctl_string(Mutable, @"kern_version", (int *)buf, 2u, (void *)(v1 + 40));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_string(v3, @"boot_args", "kern.bootargs", (char **)(v1 + 48), 0);
    if (v4) {
      goto LABEL_41;
    }
    *(void *)long long buf = 0x1800000006;
    int v4 = sysctl_uint64(v3, @"hw_memsize", (int *)buf, 2u, (void *)(v1 + 8));
    if (v4) {
      goto LABEL_41;
    }
    *(void *)long long buf = 0x700000006;
    int v4 = sysctl_uint(v3, @"hw_pagesize", (int *)buf, 2u, (void *)(v1 + 168));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_uint(v3, @"vm_pagesize", "vm.pagesize", (void *)(v1 + 172));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_int(v3, @"cpu_type", "hw.cputype", (void *)(v1 + 192));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_int(v3, @"cpu_subtype", "hw.cpusubtype", (void *)(v1 + 196));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_int(v3, @"cpu_family", "hw.cpufamily", (void *)(v1 + 200));
    if (v4) {
      goto LABEL_41;
    }
    *(void *)long long buf = 0x200000006;
    int v4 = sysctl_string(v3, @"hw_model", (int *)buf, 2u, (void *)(v1 + 88));
    if (v4) {
      goto LABEL_41;
    }
    *(void *)long long buf = 0x1B00000006;
    int v4 = sysctl_string(v3, @"hw_product", (int *)buf, 2u, (void *)(v1 + 96));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_int(v3, @"active_cpus", "hw.activecpu", &v47);
    if (v4) {
      goto LABEL_41;
    }
    if ((v47 & 0x80000000) != 0) {
      goto LABEL_40;
    }
    *(_DWORD *)(v1 + 176) = v47;
    int v4 = sysctlbyname_int(v3, @"max_cpus", "hw.logicalcpu_max", &v47);
    if (v4) {
      goto LABEL_41;
    }
    if ((v47 & 0x80000000) != 0)
    {
LABEL_40:
      int v4 = 22;
    }
    else
    {
      *(_DWORD *)(v1 + 180) = v47;
      int v4 = sysctlbyname_string(v3, @"boot_uuid", "kern.bootsessionuuid", (char **)(v1 + 120), 0);
      if (!v4)
      {
        int v4 = sysctlbyname_uint64(v3, @"min_kern_vaddr", "vm.vm_min_kernel_address", (void *)(v1 + 16));
        if (!v4)
        {
          int v4 = sysctlbyname_uint64(v3, @"max_kern_vaddr", "vm.vm_max_kernel_address", (void *)(v1 + 24));
          if (!v4)
          {
            BOOL v5 = sysctlbyname("hw.cputhreadtype", &iterator, (size_t *)&v53, 0, 0) || (int)iterator <= 0;
            BOOL v6 = !v5;
            int v4 = dict_set_BOOL(v3, @"hyperthreading", v6);
            if (!v4)
            {
              *(unsigned char *)(v1 + 207) = v6;
              *(void *)v1 |= 2uLL;
              int v4 = sysctlbyname_uint32(v3, @"physical_cpus", "hw.physicalcpu_max", (void *)(v1 + 188));
              if (!v4)
              {
                int v4 = sysctlbyname_uint32(v3, @"vm_pages", "vm.pages", (void *)(v1 + 184));
                if (!v4)
                {
                  uint64_t v53 = 4;
                  BOOL v7 = sysctlbyname("kern.thread_groups_supported", &iterator, (size_t *)&v53, 0, 0)
                    || (int)iterator <= 0;
                  BOOL v8 = !v7;
                  int v4 = dict_set_BOOL(v3, @"thread_groups", v8);
                  if (!v4)
                  {
                    *(unsigned char *)(v1 + 208) = v8;
                    *(void *)v1 |= 4uLL;
                    CFDictionaryRef v9 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
                    if (dict_string(v9, (void *)*MEMORY[0x1E4F1CD30], v3, @"os_version", (char **)(v1 + 64)))
                    {
                      int v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                        ktrace_machine_create_current_cold_10();
                      }
                    }
                    else if (dict_string(v9, (void *)*MEMORY[0x1E4F1CD18], v3, @"os_name", (char **)(v1 + 56)))
                    {
                      int v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                        ktrace_machine_create_current_cold_9();
                      }
                    }
                    else
                    {
                      if (!dict_string(v9, (void *)*MEMORY[0x1E4F1CD10], v3, @"os_build", (char **)(v1 + 80)))
                      {
                        dict_string(v9, (void *)*MEMORY[0x1E4F1CD28], v3, @"os_version_extra", (char **)(v1 + 72));
                        if (!v9) {
                          goto LABEL_57;
                        }
                        goto LABEL_56;
                      }
                      int v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                        ktrace_machine_create_current_cold_8();
                      }
                    }
                    *__error() = v10;
                    if (!v9)
                    {
LABEL_57:
                      io_iterator_t iterator = 0;
                      uint64_t v13 = malloc_type_calloc(*(unsigned int *)(v1 + 180), 8uLL, 0x100004000313F17uLL);
                      if (!v13) {
                        goto LABEL_109;
                      }
                      int v14 = malloc_type_calloc(*(unsigned int *)(v1 + 180), 4uLL, 0x100004052888210uLL);
                      *(void *)(v1 + 136) = v14;
                      if (!v14) {
                        goto LABEL_109;
                      }
                      int v15 = malloc_type_calloc(*(unsigned int *)(v1 + 180), 4uLL, 0x100004052888210uLL);
                      *(void *)(v1 + 152) = v15;
                      if (!v15) {
                        goto LABEL_109;
                      }
                      CFDictionaryRef v16 = IOServiceNameMatching("cpus");
                      uint64_t MatchingService = IOServiceGetMatchingService(0, v16);
                      if (!MatchingService
                        || MEMORY[0x1B3EBE930](MatchingService, "IODeviceTree", &iterator))
                      {
                        int v18 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                          ktrace_machine_create_current_cold_6();
                        }
                        *__error() = v18;
                        int v4 = 22;
                        goto LABEL_112;
                      }
                      io_registry_entry_t v19 = IOIteratorNext(iterator);
                      if (v19)
                      {
                        unsigned int v20 = 0;
                        unsigned int v21 = 0;
                        CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                        while (1)
                        {
                          uint64_t v53 = 0;
                          if (!IORegistryEntryCreateCFProperties(v19, (CFMutableDictionaryRef *)&v53, v22, 0)) {
                            break;
                          }
LABEL_93:
                          io_registry_entry_t v19 = IOIteratorNext(iterator);
                          if (!v19) {
                            goto LABEL_98;
                          }
                        }
                        if (!v53)
                        {
                          *__error() = 0;
                          int v24 = *__error();
                          ktrace_log_init();
                          uint64_t v25 = ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)long long buf = 67109120;
                            *(_DWORD *)&uint8_t buf[4] = v24;
                            _os_log_error_impl(&dword_1B39A5000, v25, OS_LOG_TYPE_ERROR, "CPU properties are NULL on IOKit success (%{errno}d)", buf, 8u);
                          }
                          *__error() = v24;
                          goto LABEL_93;
                        }
                        unsigned int v52 = 0;
                        if (dict_uint32((const __CFDictionary *)v53, @"logical-cpu-id", &v52))
                        {
                          ktrace_log_init();
                          int v23 = ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
                            ktrace_machine_create_current_cold_7(&v50, v51, v23);
                          }
                          goto LABEL_92;
                        }
                        if (v52 >= *(_DWORD *)(v1 + 180)) {
                          goto LABEL_92;
                        }
                        unsigned int v49 = 0;
                        int v26 = dict_uint32((const __CFDictionary *)v53, @"logical-cluster-id", &v49);
                        if (v26)
                        {
                          *__error() = v26;
                          int v44 = *__error();
                          ktrace_log_init();
                          char v45 = ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)long long buf = 67109376;
                            *(_DWORD *)&uint8_t buf[4] = v52;
                            __int16 v56 = 1024;
                            int v57 = v44;
                            _os_log_error_impl(&dword_1B39A5000, v45, OS_LOG_TYPE_ERROR, "failed to get logical-cluster-id property for CPU %u (%{errno}d)", buf, 0xEu);
                          }
                          *__error() = v44;
                          int v4 = *__error();
                          goto LABEL_112;
                        }
                        *(_DWORD *)(*(void *)(v1 + 136) + 4 * v52) = v49;
                        if (v20 <= v49) {
                          unsigned int v20 = v49;
                        }
                        unsigned int v48 = 0;
                        if (dict_uint32((const __CFDictionary *)v53, @"die-id", &v48))
                        {
                          unsigned int v27 = 0;
                          unsigned int v48 = 0;
                        }
                        else
                        {
                          unsigned int v27 = v48;
                        }
                        *(_DWORD *)(*(void *)(v1 + 152) + 4 * v52) = v27;
                        if (v21 <= v48) {
                          unsigned int v21 = v48;
                        }
                        *(void *)long long buf = 0;
                        CFIndex v47 = 0;
                        int v28 = dict_data((const __CFDictionary *)v53, @"cluster-type", (UInt8 **)buf, &v47);
                        uint64_t v29 = v52;
                        v13[v52] = 0;
                        if (v28) {
                          goto LABEL_92;
                        }
                        uint64_t v30 = *(void **)buf;
                        if (v47)
                        {
                          int v31 = **(unsigned char **)buf;
                          if (v31 == 80)
                          {
                            uint64_t v32 = 2;
                            goto LABEL_90;
                          }
                          if (v31 == 69)
                          {
                            uint64_t v32 = 1;
LABEL_90:
                            v13[v29] = v32;
                          }
                        }
                        free(v30);
LABEL_92:
                        CFRelease((CFTypeRef)v53);
                        goto LABEL_93;
                      }
                      unsigned int v21 = 0;
                      unsigned int v20 = 0;
LABEL_98:
                      *(_DWORD *)(v1 + 160) = v20 + 1;
                      int v4 = dict_set_uint32(v3, @"max_clusters", v20 + 1);
                      if (!v4)
                      {
                        uint64_t v33 = (char *)malloc_type_calloc(*(unsigned int *)(v1 + 160), 8uLL, 0x100004000313F17uLL);
                        *(void *)(v1 + 144) = v33;
                        if (v33)
                        {
                          uint64_t v34 = *(unsigned int *)(v1 + 180);
                          if (v34)
                          {
                            uint64_t v35 = *(unsigned int **)(v1 + 136);
                            int v36 = v13;
                            do
                            {
                              unsigned int v38 = *v35++;
                              uint64_t v37 = v38;
                              if (!*(void *)&v33[8 * v38]) {
                                *(void *)&v33[8 * v37] = *v36;
                              }
                              ++v36;
                              --v34;
                            }
                            while (v34);
                          }
                          int v4 = dict_set_uint64_arr(v3, @"cluster_flags", v33, *(unsigned int *)(v1 + 160));
                          if (!v4)
                          {
                            int v4 = dict_set_uint32_arr(v3, @"cluster_by_cpu", *(char **)(v1 + 136), *(unsigned int *)(v1 + 180));
                            if (!v4)
                            {
                              *(_DWORD *)(v1 + 164) = v21 + 1;
                              int v4 = dict_set_uint32(v3, @"max_dies", v21 + 1);
                              if (!v4) {
                                int v4 = dict_set_uint32_arr(v3, @"die_by_cpu", *(char **)(v1 + 152), *(unsigned int *)(v1 + 180));
                              }
                            }
                          }
                          goto LABEL_112;
                        }
LABEL_109:
                        int v39 = *__error();
                        if (v39) {
                          int v4 = v39;
                        }
                        else {
                          int v4 = 12;
                        }
                      }
LABEL_112:
                      if (iterator) {
                        IOObjectRelease(iterator);
                      }
                      free(v13);
                      if (v4)
                      {
                        *__error() = v4;
                        int v11 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                          ktrace_machine_create_current_cold_5();
                        }
                      }
                      else
                      {
                        int has_internal_content = os_variant_has_internal_content();
                        int v41 = dict_set_BOOL(v3, @"apple_internal", has_internal_content);
                        int v42 = dict_set_BOOL(v3, @"internal_content", has_internal_content);
                        if (!(v42 | v41))
                        {
                          *(unsigned char *)(v1 + 205) = has_internal_content;
                          *(unsigned char *)(v1 + 206) = has_internal_content;
                          *(void *)v1 |= 1uLL;
                          if (!gethostuuid(uu, &v46))
                          {
                            if (uuid_is_null(uu))
                            {
                              int v11 = *__error();
                              ktrace_log_init();
                              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                                ktrace_machine_create_current_cold_3();
                              }
                              int v4 = 22;
                              goto LABEL_43;
                            }
                            uuid_unparse(uu, (char *)buf);
                            int v4 = dict_set_string(v3, @"device_uuid", (char *)buf);
                            if (v4) {
                              goto LABEL_44;
                            }
                            *(void *)(v1 + 128) = strdup((const char *)buf);
                          }
                          ktrace_machine_fill_name(v1, v3);
                          ktrace_machine_fill_volume_size(v1, v3);
                          *(unsigned char *)(v1 + 204) = current_system_is_64_bit();
                          *(void *)(v1 + 216) = v3;
                          return v1;
                        }
                        int v43 = v42 | v41;
                        int v11 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                          ktrace_machine_create_current_cold_4();
                        }
                        int v4 = v43;
                      }
LABEL_43:
                      *__error() = v11;
LABEL_44:
                      if (*(void *)(v1 + 216)) {
                        ktrace_postprocess_file_internal_cold_1();
                      }
                      CFRelease(v3);
                      goto LABEL_46;
                    }
LABEL_56:
                    CFRelease(v9);
                    goto LABEL_57;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    *__error() = v4;
    int v11 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_create_current_cold_2();
    }
    goto LABEL_43;
  }
  return v1;
}

void ktrace_machine_fill_name(uint64_t a1, __CFDictionary *a2)
{
  int v4 = SecTaskCreateFromSelf(0);
  CFErrorRef error = 0;
  CFTypeRef v5 = SecTaskCopyValueForEntitlement(v4, @"com.apple.developer.device-information.user-assigned-device-name", &error);
  CFRelease(v4);
  if (v5)
  {
    CFTypeID v6 = CFGetTypeID(v5);
    if (v6 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue((CFBooleanRef)v5);
      CFRelease(v5);
      if (Value)
      {
        CFStringRef v8 = (const __CFString *)MGCopyAnswer();
        if (v8)
        {
          CFStringRef v9 = v8;
          dict_set_cfstring(a2, @"name", v8, (char **)(a1 + 104));
          CFRelease(v9);
        }
        return;
      }
    }
    else
    {
      CFRelease(v5);
    }
    ktrace_log_init();
    uint64_t v12 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      ktrace_machine_fill_name_cold_2(v12);
    }
  }
  else
  {
    uint64_t v10 = *__error();
    ktrace_log_init();
    int v11 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_fill_name_cold_1(&error, v10, v11);
    }
    *__error() = v10;
  }
}

_DWORD *ktrace_machine_fill_volume_size(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(&v7, 0, 512);
  if (statfs("/", &v7))
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_fill_volume_size_cold_3();
    }
LABEL_10:
    os_log_t result = __error();
    *os_log_t result = v4;
    return result;
  }
  if (!is_mul_ok(v7.f_bsize, v7.f_blocks))
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_fill_volume_size_cold_1();
    }
    goto LABEL_10;
  }
  uint64_t v5 = v7.f_bsize * v7.f_blocks;
  os_log_t result = (_DWORD *)dict_set_uint64(a2, @"root_vol_size", v5);
  if (result)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_fill_volume_size_cold_2();
    }
    goto LABEL_10;
  }
  *(void *)(a1 + 32) = v5;
  return result;
}

void ktrace_machine_destroy(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 40));
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 56));
    free(*(void **)(a1 + 64));
    free(*(void **)(a1 + 72));
    free(*(void **)(a1 + 80));
    free(*(void **)(a1 + 88));
    free(*(void **)(a1 + 96));
    free(*(void **)(a1 + 104));
    free(*(void **)(a1 + 112));
    free(*(void **)(a1 + 120));
    free(*(void **)(a1 + 128));
    free(*(void **)(a1 + 144));
    free(*(void **)(a1 + 136));
    free(*(void **)(a1 + 152));
    __int16 v2 = *(const void **)(a1 + 216);
    if (v2) {
      CFRelease(v2);
    }
    free((void *)a1);
  }
}

uint64_t ktrace_machine_create(uint64_t *a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v2 = ktrace_chunk_tag((uint64_t)a1);
  if (v2 != 20995)
  {
    int v18 = v2;
    uint64_t v4 = 0;
    unint64_t v6 = 0;
    uint64_t v13 = 0;
    io_registry_entry_t v19 = a1;
LABEL_9:
    if (v18 != 35840) {
      goto LABEL_36;
    }
    if (ktrace_chunk_version_major((uint64_t)v19) > 1)
    {
      uint64_t v17 = 0;
      CFDictionaryRef dict = 0;
      int v15 = 45;
      if (v13) {
        goto LABEL_37;
      }
LABEL_38:
      if (!v6)
      {
        if (!v15) {
          return v17;
        }
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    unsigned int v20 = ktrace_chunk_version_minor((uint64_t)v19);
    uint64_t v21 = ktrace_chunk_size((uint64_t)v19);
    CFAllocatorRef v22 = (UInt8 *)ktrace_chunk_map_data(v19, 0, v21);
    if (!v22)
    {
LABEL_36:
      uint64_t v17 = 0;
      CFDictionaryRef dict = 0;
      int v15 = 0;
      if (!v13) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    unint64_t v23 = (unint64_t)v22;
    CFDictionaryRef dict = (const __CFDictionary *)create_dict(v22, v21);
    if (!dict)
    {
      int v15 = 0;
      uint64_t v17 = 0;
      goto LABEL_80;
    }
    int v24 = malloc_type_calloc(1uLL, 0xE0uLL, 0x107004026BB74DFuLL);
    uint64_t v17 = (uint64_t)v24;
    if (!v24)
    {
      int v15 = 12;
      goto LABEL_80;
    }
    unsigned int v32 = v20;
    v24[2] = -1;
    *((unsigned char *)v24 + 204) = ktrace_file_is_64_bit(*v19);
    *(void *)(v17 + 216) = dict;
    if (!dict_string(dict, @"kern_version", 0, 0, (char **)(v17 + 40))
      && !dict_string(dict, @"boot_args", 0, 0, (char **)(v17 + 48))
      && !dict_uint64(dict, @"hw_memsize", (void *)(v17 + 8))
      && !dict_uint32(dict, @"hw_pagesize", (void *)(v17 + 168))
      && !dict_uint32(dict, @"vm_pagesize", (void *)(v17 + 172))
      && !dict_string(dict, @"os_name", 0, 0, (char **)(v17 + 56))
      && !dict_string(dict, @"os_version", 0, 0, (char **)(v17 + 64))
      && !dict_string(dict, @"os_build", 0, 0, (char **)(v17 + 80))
      && !dict_string(dict, @"hw_model", 0, 0, (char **)(v17 + 88))
      && !dict_int(dict, @"cpu_type", (void *)(v17 + 192))
      && !dict_int(dict, @"cpu_subtype", (void *)(v17 + 196))
      && !dict_int(dict, @"cpu_family", (void *)(v17 + 200))
      && !dict_uint32(dict, @"active_cpus", (void *)(v17 + 176))
      && !dict_uint32(dict, @"max_cpus", (void *)(v17 + 180)))
    {
      dict_BOOL(dict, @"apple_internal", (BOOL *)(v17 + 205));
    }
    if (!v20)
    {
LABEL_79:
      int v15 = 0;
LABEL_80:
      ktrace_chunk_unmap_data((uint64_t)v19, v23, v21);
      if (v13) {
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    CFDictionaryRef v25 = *(const __CFDictionary **)(v17 + 216);
    dict_string(v25, @"name", 0, 0, (char **)(v17 + 104));
    dict_string(v25, @"hostname", 0, 0, (char **)(v17 + 112));
    uint64_t v31 = v21;
    if (dict_string(v25, @"device_uuid", 0, 0, (char **)(v17 + 128)))
    {
      int v26 = "device UUID";
    }
    else if (dict_string(v25, @"boot_uuid", 0, 0, (char **)(v17 + 120)))
    {
      int v26 = "boot UUID";
    }
    else if (dict_uint32(v25, @"vm_pages", (void *)(v17 + 184)))
    {
      int v26 = "VM pages";
    }
    else if (dict_uint64(v25, @"min_kern_vaddr", (void *)(v17 + 16)))
    {
      int v26 = "minimum kernel address";
    }
    else if (dict_uint64(v25, @"root_vol_size", (void *)(v17 + 32)))
    {
      int v26 = "root volume size";
    }
    else if (dict_uint32(v25, @"physical_cpus", (void *)(v17 + 188)))
    {
      int v26 = "physical CPUs";
    }
    else if (dict_BOOL(v25, @"internal_content", (BOOL *)(v17 + 206)))
    {
      int v26 = "internal content";
    }
    else
    {
      *(void *)v17 |= 1uLL;
      if (dict_BOOL(v25, @"hyperthreading", (BOOL *)(v17 + 207)))
      {
        int v26 = "hyperthreading";
      }
      else
      {
        *(void *)v17 |= 2uLL;
        if (!dict_BOOL(v25, @"thread_groups", (BOOL *)(v17 + 208)))
        {
          *(void *)v17 |= 4uLL;
LABEL_73:
          uint64_t v21 = v31;
          if (v32 >= 2)
          {
            ktrace_machine_v1_2(v17);
            if (v32 != 2)
            {
              ktrace_machine_v1_3(v17);
              if (v32 >= 4)
              {
                ktrace_machine_v1_4(v17);
                if (v32 != 4)
                {
                  dict_string(*(const __CFDictionary **)(v17 + 216), @"os_version_extra", 0, 0, (char **)(v17 + 72));
                  if (v32 >= 6) {
                    dict_string(*(const __CFDictionary **)(v17 + 216), @"hw_product", 0, 0, (char **)(v17 + 96));
                  }
                }
              }
            }
          }
          goto LABEL_79;
        }
        int v26 = "thread groups";
      }
    }
    uint64_t v30 = (uint64_t)v26;
    uint64_t v28 = *__error();
    ktrace_log_init();
    uint64_t v29 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_create_cold_3(v30, v28, v29);
    }
    *__error() = v28;
    goto LABEL_73;
  }
  uint64_t v4 = ktrace_chunk_size_t(a1, v3);
  uint64_t v5 = ktrace_chunk_map_data(a1, 0, v4);
  if (!v5)
  {
    int v15 = *__error();
    if (v15)
    {
LABEL_47:
      uint64_t v17 = 0;
      *__error() = v15;
      return v17;
    }
    return 0;
  }
  unint64_t v6 = (unint64_t)v5;
  statfs v7 = ktrace_file_open_memory((uint64_t)v5, v4, 0, 0);
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v34 = 0;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x2000000000;
    uint64_t v37 = 0;
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 0x40000000;
    v33[2] = __ktrace_machine_create_block_invoke;
    v33[3] = &unk_1E6062860;
    v33[4] = &v34;
    int v14 = ktrace_file_header_iterate((uint64_t)v7, 0, (uint64_t)v33, v8, v9, v10, v11, v12);
    if (v14)
    {
      int v15 = v14;
      _Block_object_dispose(&v34, 8);
      CFDictionaryRef dict = 0;
      uint64_t v17 = 0;
LABEL_37:
      ktrace_file_close(v13);
      goto LABEL_38;
    }
    io_registry_entry_t v19 = (uint64_t *)v35[3];
    int v18 = ktrace_chunk_tag((uint64_t)v19);
    _Block_object_dispose(&v34, 8);
    goto LABEL_9;
  }
  uint64_t v17 = 0;
  CFDictionaryRef dict = 0;
  int v15 = *__error();
LABEL_42:
  ktrace_chunk_unmap_data((uint64_t)a1, v6, v4);
  if (v15)
  {
LABEL_43:
    if (v17) {
      ktrace_machine_destroy(v17);
    }
    if (dict) {
      CFRelease(dict);
    }
    goto LABEL_47;
  }
  return v17;
}

BOOL __ktrace_machine_create_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 35840) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
  return v4 != 35840;
}

_DWORD *ktrace_machine_v1_2(uint64_t a1)
{
  os_log_t result = (_DWORD *)dict_uint64(*(const __CFDictionary **)(a1 + 216), @"max_kern_vaddr", (void *)(a1 + 24));
  if (result)
  {
    int v2 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_v1_2_cold_1();
    }
    os_log_t result = __error();
    *os_log_t result = v2;
  }
  return result;
}

_DWORD *ktrace_machine_v1_3(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 216);
  uint64_t v3 = (int *)(a1 + 160);
  int v4 = dict_uint32(v2, @"max_clusters", (void *)(a1 + 160));
  if (v4)
  {
    *__error() = v4;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_v1_3_cold_2();
    }
    goto LABEL_12;
  }
  int v15 = 0;
  int v6 = dict_uint32_arr(v2, @"cluster_by_cpu", (void *)(a1 + 136), &v15);
  if (v6)
  {
    *__error() = v6;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_v1_3_cold_1();
    }
    goto LABEL_12;
  }
  if (v15 == *(_DWORD *)(a1 + 180))
  {
    int v14 = 0;
    os_log_t result = (_DWORD *)dict_uint64_arr(v2, @"cluster_flags", (void *)(a1 + 144), &v14);
    if (v14 == *(_DWORD *)(a1 + 160)) {
      return result;
    }
    *__error() = 22;
    int v5 = *__error();
    ktrace_log_init();
    uint64_t v8 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      int v9 = *v3;
      *(_DWORD *)long long buf = 67109632;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v14;
      __int16 v20 = 1024;
      int v21 = v5;
      uint64_t v10 = "mismatched number of clusters, %u in machine and %u inarray (%{errno}d)";
      uint64_t v11 = v8;
LABEL_15:
      _os_log_error_impl(&dword_1B39A5000, v11, OS_LOG_TYPE_ERROR, v10, buf, 0x14u);
    }
  }
  else
  {
    *__error() = 22;
    int v5 = *__error();
    ktrace_log_init();
    uint64_t v12 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(_DWORD *)(a1 + 180);
      *(_DWORD *)long long buf = 67109632;
      int v17 = v13;
      __int16 v18 = 1024;
      int v19 = v15;
      __int16 v20 = 1024;
      int v21 = v5;
      uint64_t v10 = "mismatched number of CPUs for clusters, %u in machine and %u in array (%{errno}d)";
      uint64_t v11 = v12;
      goto LABEL_15;
    }
  }
LABEL_12:
  os_log_t result = __error();
  *os_log_t result = v5;
  return result;
}

_DWORD *ktrace_machine_v1_4(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 216);
  int v3 = dict_uint32(v2, @"max_dies", (void *)(a1 + 164));
  if (v3)
  {
    *__error() = v3;
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_v1_4_cold_2();
    }
  }
  else
  {
    int v8 = 0;
    os_log_t result = (_DWORD *)dict_uint32_arr(v2, @"die_by_cpu", (void *)(a1 + 152), &v8);
    if (result)
    {
      *__error() = (int)result;
      int v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_machine_v1_4_cold_1();
      }
    }
    else
    {
      if (v8 == *(_DWORD *)(a1 + 180)) {
        return result;
      }
      *__error() = 22;
      int v4 = *__error();
      ktrace_log_init();
      int v6 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        int v7 = *(_DWORD *)(a1 + 180);
        *(_DWORD *)long long buf = 67109632;
        int v10 = v7;
        __int16 v11 = 1024;
        int v12 = v8;
        __int16 v13 = 1024;
        int v14 = v4;
        _os_log_error_impl(&dword_1B39A5000, v6, OS_LOG_TYPE_ERROR, "mismatched number of CPUs for dies, %u in machine and %u in array (%{errno}d)", buf, 0x14u);
      }
    }
  }
  os_log_t result = __error();
  *os_log_t result = v4;
  return result;
}

uint64_t ktrace_machine_kernel_version(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 40);
}

uint64_t ktrace_machine_boot_args(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 48);
}

uint64_t ktrace_machine_memory_size(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 8);
}

uint64_t ktrace_machine_hw_page_size(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 168);
}

uint64_t ktrace_machine_vm_page_size(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 172);
}

uint64_t ktrace_machine_os_name(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 56);
}

uint64_t ktrace_machine_os_version(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 64);
}

uint64_t ktrace_machine_os_version_extra(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 72);
}

uint64_t ktrace_machine_os_build(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 80);
}

uint64_t ktrace_machine_model(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 88);
}

uint64_t ktrace_machine_product(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 96);
}

uint64_t ktrace_machine_cpu_type(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 192);
}

uint64_t ktrace_machine_cpu_subtype(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 196);
}

uint64_t ktrace_machine_cpu_family(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 200);
}

uint64_t ktrace_machine_active_cpus(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 176);
}

uint64_t ktrace_machine_max_cpus(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 180);
}

uint64_t ktrace_machine_max_clusters(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 160);
}

uint64_t ktrace_machine_cpu_cluster(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v3 = *(void *)(a1 + 136);
  if (!v3) {
    return 45;
  }
  if (*(_DWORD *)(a1 + 180) <= a2) {
    return 34;
  }
  uint64_t result = 0;
  *a3 = *(_DWORD *)(v3 + 4 * a2);
  return result;
}

uint64_t ktrace_machine_cluster_flags(uint64_t a1, unsigned int a2, void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v3 = *(void *)(a1 + 144);
  if (!v3) {
    return 45;
  }
  if (*(_DWORD *)(a1 + 160) <= a2) {
    return 34;
  }
  uint64_t result = 0;
  *a3 = *(void *)(v3 + 8 * a2);
  return result;
}

uint64_t ktrace_machine_max_dies(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t ktrace_machine_cpu_die(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (!v3) {
    return 45;
  }
  if (*(_DWORD *)(a1 + 180) <= a2) {
    return 34;
  }
  uint64_t result = 0;
  *a3 = *(_DWORD *)(v3 + 4 * a2);
  return result;
}

uint64_t ktrace_machine_name(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 104);
}

uint64_t ktrace_machine_hostname(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 112);
}

uint64_t ktrace_machine_device_uuid(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 128);
}

uint64_t ktrace_machine_boot_uuid(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 120);
}

unint64_t ktrace_machine_vm_size(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 184) * (unint64_t)*(unsigned int *)(a1 + 172);
}

uint64_t ktrace_machine_physical_cpus(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 188);
}

uint64_t ktrace_machine_root_volume_size(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 32);
}

uint64_t ktrace_machine_vm_pages(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 184);
}

uint64_t ktrace_machine_apple_internal(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 205);
}

uint64_t ktrace_machine_has_internal_content(unsigned char *a1, unsigned char *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*a1 & 1) == 0) {
    return 45;
  }
  uint64_t result = 0;
  *a2 = a1[206];
  return result;
}

uint64_t ktrace_machine_has_hyperthreading(unsigned char *a1, unsigned char *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*a1 & 2) == 0) {
    return 45;
  }
  uint64_t result = 0;
  *a2 = a1[207];
  return result;
}

uint64_t ktrace_machine_has_thread_groups(unsigned char *a1, unsigned char *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*a1 & 4) == 0) {
    return 45;
  }
  uint64_t result = 0;
  *a2 = a1[208];
  return result;
}

uint64_t ktrace_machine_min_kernel_vaddr(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == -1) {
    return 45;
  }
  uint64_t result = 0;
  *a2 = v2;
  return result;
}

uint64_t ktrace_machine_max_kernel_vaddr(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 45;
  }
  uint64_t result = 0;
  *a2 = v2;
  return result;
}

uint64_t ktrace_machine_print_description(uint64_t a1, FILE *a2)
{
  int v4 = (const char *)ktrace_machine_kernel_version(a1);
  fprintf(a2, "kernel version: %s\n", v4);
  int v5 = (const char *)ktrace_machine_boot_args(a1);
  fprintf(a2, "boot-args: %s\n", v5);
  int v6 = (const char *)ktrace_machine_os_name(a1);
  int v7 = (const char *)ktrace_machine_os_version(a1);
  int v8 = (const char *)ktrace_machine_os_build(a1);
  fprintf(a2, "OS: %s %s (%s)", v6, v7, v8);
  int v9 = (const char *)ktrace_machine_os_version_extra(a1);
  if (v9) {
    fprintf(a2, " [%s]", v9);
  }
  fputc(10, a2);
  int v10 = (const char *)ktrace_machine_model(a1);
  fprintf(a2, "HW model: %s\n", v10);
  __int16 v11 = (const char *)ktrace_machine_product(a1);
  fprintf(a2, "HW product: %s\n", v11);
  uint64_t v12 = ktrace_machine_memory_size(a1);
  fprintf(a2, "memory size: %'llu\n", v12);
  unint64_t v13 = ktrace_machine_vm_size(a1);
  if (v13)
  {
    fprintf(a2, "VM size: %'llu", v13);
    uint64_t v14 = ktrace_machine_vm_pages(a1);
    if (v14) {
      fprintf(a2, " (%'llu pages)", v14);
    }
    fputc(10, a2);
  }
  int v15 = ktrace_machine_hw_page_size(a1);
  fprintf(a2, "HW page size: %u\n", v15);
  int v16 = ktrace_machine_vm_page_size(a1);
  fprintf(a2, "VM page size: %u\n", v16);
  int active = ktrace_machine_active_cpus(a1);
  fprintf(a2, "active CPUS: %u\n", active);
  int v18 = ktrace_machine_max_cpus(a1);
  fprintf(a2, "max CPUS: %u\n", v18);
  int v19 = ktrace_machine_physical_cpus(a1);
  if (v19) {
    fprintf(a2, "physical CPUS: %u\n", v19);
  }
  int v20 = ktrace_machine_cpu_type(a1);
  fprintf(a2, "CPU type: %#x\n", v20);
  int v21 = ktrace_machine_cpu_subtype(a1);
  fprintf(a2, "CPU subtype: %#x\n", v21);
  int v22 = ktrace_machine_cpu_family(a1);
  fprintf(a2, "CPU family: %#x\n", v22);
  unsigned int v23 = *(_DWORD *)(a1 + 164);
  if (v23 >= 2) {
    fprintf(a2, "max dies: %u\n", *(_DWORD *)(a1 + 164));
  }
  unsigned int v24 = ktrace_machine_max_clusters(a1);
  if (v24)
  {
    unsigned int v25 = v24;
    fprintf(a2, "max clusters: %u\n", v24);
    if (v18)
    {
      for (unint64_t i = 0; i != v18; ++i)
      {
        fprintf(a2, "\tCPU %u: cluster ", i);
        LODWORD(v45) = 0;
        if (ktrace_machine_cpu_cluster(a1, i, &v45)) {
          fwrite("???", 3uLL, 1uLL, a2);
        }
        else {
          fprintf(a2, "%u", v45);
        }
        if (v23 < 2)
        {
          fputc(10, a2);
        }
        else
        {
          fwrite(", die ", 6uLL, 1uLL, a2);
          uint64_t v27 = *(void *)(a1 + 152);
          if (v27 && i < *(unsigned int *)(a1 + 180)) {
            fprintf(a2, "%u\n", *(_DWORD *)(v27 + 4 * i));
          }
          else {
            fwrite("???\n", 4uLL, 1uLL, a2);
          }
        }
      }
    }
    unsigned int v28 = 0;
    if (v25 <= 1) {
      int v29 = 1;
    }
    else {
      int v29 = v25;
    }
    do
    {
      fprintf(a2, "\tcluster %u:", v28);
      uint64_t v45 = 0;
      int v30 = ktrace_machine_cluster_flags(a1, v28, &v45);
      if (v30)
      {
        uint64_t v31 = strerror(v30);
        fprintf(a2, " ??? (%s)", v31);
      }
      else
      {
        char v32 = v45;
        if (v45) {
          fwrite(" EFFICIENT", 0xAuLL, 1uLL, a2);
        }
        if ((v32 & 2) != 0) {
          fwrite(" PERFORMANT", 0xBuLL, 1uLL, a2);
        }
      }
      fputc(10, a2);
      ++v28;
    }
    while (v29 != v28);
  }
  char v44 = 0;
  if (ktrace_machine_has_internal_content((unsigned char *)a1, &v44))
  {
    ktrace_machine_apple_internal(a1);
    fprintf(a2, "Apple Internal: %s\n");
  }
  else
  {
    fprintf(a2, "Apple Internal content: %s\n");
  }
  uint64_t v33 = (const char *)ktrace_machine_name(a1);
  if (v33) {
    fprintf(a2, "name: %s\n", v33);
  }
  uint64_t v34 = (const char *)ktrace_machine_hostname(a1);
  if (v34) {
    fprintf(a2, "hostname: %s\n", v34);
  }
  uint64_t v35 = (const char *)ktrace_machine_device_uuid(a1);
  if (v35) {
    fprintf(a2, "device UUID: %s\n", v35);
  }
  uint64_t v36 = (const char *)ktrace_machine_boot_uuid(a1);
  if (v36) {
    fprintf(a2, "boot UUID: %s\n", v36);
  }
  uint64_t v45 = -1;
  if (!ktrace_machine_min_kernel_vaddr(a1, &v45)) {
    fprintf(a2, "min kern vaddr: %#llx\n", v45);
  }
  uint64_t v43 = -1;
  if (!ktrace_machine_max_kernel_vaddr(a1, &v43)) {
    fprintf(a2, "max kern vaddr: %#llx\n", v43);
  }
  uint64_t v37 = ktrace_machine_root_volume_size(a1);
  if (v37) {
    fprintf(a2, "root volume size: %'llu\n", v37);
  }
  char v42 = 0;
  if (!ktrace_machine_has_hyperthreading((unsigned char *)a1, &v42))
  {
    if (v42) {
      unsigned int v38 = "YES";
    }
    else {
      unsigned int v38 = "NO";
    }
    fprintf(a2, "hyperthreading: %s\n", v38);
  }
  char v41 = 0;
  if (!ktrace_machine_has_thread_groups((unsigned char *)a1, &v41))
  {
    if (v41) {
      int v39 = "YES";
    }
    else {
      int v39 = "NO";
    }
    fprintf(a2, "thread groups: %s\n", v39);
  }
  return 0;
}

FILE *ktrace_machine_copy_description(uint64_t a1)
{
  size_t v4 = 0;
  __bufp = 0;
  uint64_t result = open_memstream(&__bufp, &v4);
  if (result)
  {
    uint64_t v3 = result;
    ktrace_machine_print_description(a1, result);
    fclose(v3);
    return (FILE *)__bufp;
  }
  return result;
}

uint64_t ktrace_start_writing_fd(unint64_t a1, int a2, int a3, const void *a4, const void *a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 <= 0) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_DWORD *)a1 | 2) != 2) {
    ktrace_start_writing_fd_cold_2();
  }
  fd = ktrace_file_create_fd(0, a2);
  *(void *)(a1 + 648) = fd;
  if (fd)
  {
    if (a4) {
      *(void *)(a1 + 664) = _Block_copy(a4);
    }
    if (a5) {
      *(void *)(a1 + 672) = _Block_copy(a5);
    }
    *(_DWORD *)(a1 + 656) = a3;
    if (*(_DWORD *)(a1 + 4) != 2) {
      *(_DWORD *)(a1 + 4) = 1;
    }
    return ktrace_start(a1, 0);
  }
  else
  {
    int v11 = *__error();
    ktrace_log_init();
    uint64_t v12 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_start_writing_fd_cold_3(v11, v12);
    }
    *__error() = v11;
    return *__error();
  }
}

uint64_t ktrace_start_writing_ktrace_file(unint64_t a1, uint64_t a2, int a3, void *aBlock, void *a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_DWORD *)a1 | 2) != 2) {
    ktrace_start_writing_fd_cold_2();
  }
  *(void *)(a1 + 648) = a2;
  if (aBlock) {
    *(void *)(a1 + 664) = _Block_copy(aBlock);
  }
  if (a5) {
    *(void *)(a1 + 672) = _Block_copy(a5);
  }
  *(_DWORD *)(a1 + 656) = a3;
  if (*(_DWORD *)(a1 + 4) != 2) {
    *(_DWORD *)(a1 + 4) = 1;
  }
  if (*(_DWORD *)(a2 + 16) == 4) {
    ktrace_file_write_header_system_default(a2);
  }

  return ktrace_start(a1, 0);
}

uint64_t ktrace_start_writing_path(_DWORD *a1, char *a2, unsigned int a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*a1 | 2) != 2) {
    ktrace_start_writing_fd_cold_2();
  }
  int v4 = open(a2, 1538, a3);
  if (v4 == -1) {
    return *__error();
  }

  return ktrace_start_writing_fd((unint64_t)a1, v4, 0, 0, 0);
}

uint64_t ktrace_start_writing_file(_DWORD *a1, char *a2, int a3, const void *a4, const void *a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*a1 | 2) != 2) {
    ktrace_start_writing_fd_cold_2();
  }
  int v9 = open(a2, 1538, 438);
  if (v9 == -1)
  {
    int v11 = *__error();
    ktrace_log_init();
    uint64_t v12 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_start_writing_file_cold_4(v11, v12);
    }
    *__error() = v11;
    if (*__error()) {
      return *__error();
    }
    else {
      return 22;
    }
  }
  else
  {
    return ktrace_start_writing_fd((unint64_t)a1, v9, a3, a4, a5);
  }
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return _os_assert_log();
}

uint64_t ktrace_stackshot(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_postprocessing_set_completed_handler_cold_1();
  }
  uint64_t v3 = ktrace_callback_list_add(a1, a1 + 96);
  if (!v3) {
    return 12;
  }
  int v4 = v3;
  v3[4] = 4;
  int v5 = _Block_copy(a2);
  uint64_t result = 0;
  *((void *)v4 + 3) = v5;
  *int v4 = 2;
  return result;
}

uint64_t ktrace_kperf(uint64_t a1, void *a2)
{
  return ktrace_kpdecode(a1, 0, a2);
}

uint64_t ktrace_kpdecode(uint64_t a1, char a2, void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v6 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v6) {
    return 12;
  }
  int v7 = v6;
  if ((a2 & 2) != 0)
  {
    v6[1] = 0xFFFFFFFF00000000;
    *(unsigned char *)(a1 + 16) = 1;
    int v8 = 2;
  }
  else
  {
    int v8 = 0;
    v6[1] = 0x2600000025000000;
  }
  *(_DWORD *)int v6 = v8;
  *((_DWORD *)v6 + 4) = 2;
  if (a2)
  {
    int v10 = a3;
  }
  else
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __ktrace_kpdecode_block_invoke;
    void v12[3] = &unk_1E6062888;
    v12[4] = a3;
    int v10 = v12;
  }
  int v11 = _Block_copy(v10);
  uint64_t result = 0;
  v7[3] = v11;
  return result;
}

uint64_t __ktrace_kpdecode_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  return kpdecode_record_free();
}

void *_session_ensure_uuidmap(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result[38])
  {
    int v8 = result;
    if (_session_machine_init((uint64_t)result, a2, a3, a4, a5, a6, a7, a8))
    {
      int v9 = *__error();
      ktrace_log_init();
      int v10 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        _session_ensure_uuidmap_cold_1(v9, v10);
      }
      *__error() = v9;
    }
    uint64_t result = ktrace_uuid_map_create(v8[43], v8[76]);
    v8[38] = result;
  }
  return result;
}

uint64_t _session_machine_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(void *)(a1 + 344)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 608);
  if (v10)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = ___session_machine_init_block_invoke;
    v19[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
    v19[4] = a1;
    uint64_t result = ktrace_file_header_iterate(v10, 0, (uint64_t)v19, a4, a5, a6, a7, a8);
    if (!result)
    {
      if (!*(void *)(a1 + 344))
      {
        uint64_t v16 = *(void *)(a1 + 608);
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 3221225472;
        v18[2] = ___session_machine_init_block_invoke_2;
        v18[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
        void v18[4] = a1;
        return ktrace_file_iterate(v16, 0, (uint64_t)v18, v11, v12, v13, v14, v15);
      }
      return 0;
    }
  }
  else
  {
    uint64_t current = ktrace_machine_create_current();
    *(void *)(a1 + 344) = current;
    if (current) {
      return 0;
    }
    else {
      return 22;
    }
  }
  return result;
}

_TtC6ktrace12ProviderList *_session_ensure_providers(_TtC6ktrace12ProviderList *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result[25].super.isa)
  {
    int v8 = result;
    _session_machine_init((uint64_t)result, a2, a3, a4, a5, a6, a7, a8);
    uint64_t result = [[_TtC6ktrace12ProviderList alloc] initWithMachine:*(void *)v8[14].providers];
    v8[25].super.isa = (Class)result;
  }
  return result;
}

void _session_handle_stackshot(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v3 = *(void **)(a1 + 320);
  if (v3)
  {
    unint64_t v5 = *(void *)(a1 + 328);
    while (v5 <= a2)
    {
      uint64_t v6 = *(void *)(a1 + 496);
      *(void *)(a1 + 496) = v5;
      if ((*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280)) && *(void *)(a1 + 296))
      {
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 3221225472;
        void v14[2] = ___session_handle_stackshot_block_invoke;
        v14[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
        v14[4] = a1;
        ktrace_stackshot_chunk_unwrap(v3, (uint64_t)v14);
      }
      if (*(_DWORD *)(a1 + 284))
      {
        int v7 = *(void **)(a1 + 320);
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        v13[2] = ___session_handle_stackshot_block_invoke_2;
        _OWORD v13[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
        void v13[4] = a1;
        ktrace_stackshot_chunk_unwrap(v7, (uint64_t)v13);
      }
      if (*(_DWORD *)(a1 + 96))
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        do
        {
          uint64_t v10 = *(void *)(a1 + 104) + v8;
          if (*(_DWORD *)(v10 + 16) != 4) {
            ktrace_postprocess_file_internal_cold_1();
          }
          ktrace_stackshot_chunk_unwrap(*(void **)(a1 + 320), *(void *)(v10 + 24));
          *(void *)(a1 + 496) = v6;
          ++v9;
          v8 += 32;
        }
        while (v9 < *(unsigned int *)(a1 + 96));
      }
      uint64_t v11 = *(void **)(a1 + 320);
      uint64_t v12 = (void *)v11[13];
      if (!*(_DWORD *)a1) {
        ktrace_chunk_destroy(v11);
      }
      *(void *)(a1 + 320) = v12;
      if (!v12)
      {
        *(void *)(a1 + 328) = -1;
        return;
      }
      unint64_t v5 = ktrace_stackshot_chunk_timestamp(v12);
      uint64_t v3 = *(void **)(a1 + 320);
      *(void *)(a1 + 328) = v5;
      if (!v3) {
        return;
      }
    }
  }
}

void ___session_handle_stackshot_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void ___session_handle_stackshot_block_invoke_2(uint64_t a1, kcdata_item *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _session_ensure_uuidmap(*(void **)(a1 + 32), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 304);
  v12.item = a2;
  v12.end = a3;

  ktrace_uuid_map_update_with_stackshot(v11, v12);
}

unsigned char *ktrace_compute_filter(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = *(unsigned char **)(a1 + 8);
  if (!v2)
  {
    uint64_t v2 = malloc_type_malloc(0x2000uLL, 0xD9507EA2uLL);
    *(void *)(a1 + 8) = v2;
  }
  bzero(v2, 0x2000uLL);
  if (*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280) || *(void *)(a1 + 88))
  {
    v2[224] |= 3u;
    if (*(_DWORD *)(a1 + 280)) {
      v2[52] |= 0x40u;
    }
  }
  if (*(_DWORD *)(a1 + 276)) {
    v2[52] |= 0x80u;
  }
  if (*(_DWORD *)(a1 + 268)) {
    v2[96] |= 2u;
  }
  if (*(_DWORD *)(a1 + 272)) {
    v2[40] |= 1u;
  }
  if (*(_DWORD *)(a1 + 284)) {
    v2[992] |= 0x20u;
  }
  if (*(_DWORD *)(a1 + 288)) {
    v2[48] |= 1u;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 32);
    do
    {
      uint64_t v6 = (int *)(v5 + 32 * v4);
      int v8 = *v6;
      int v7 = v6 + 2;
      if (v8 == 1)
      {
        for (uint64_t i = 0; i != 0x2000; i += 8)
          *(void *)&v2[i] |= *(void *)(*(void *)v7 + i);
      }
      else
      {
        unsigned int v10 = v7[1] - 1;
        unsigned int v11 = HIWORD(*v7);
        if (v11 <= HIWORD(v10))
        {
          int v12 = HIWORD(v10) + 1;
          do
          {
            v2[(unint64_t)v11 >> 3] |= 1 << (v11 & 7);
            ++v11;
          }
          while (v12 != v11);
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
  return v2;
}

uint64_t ktrace_set_use_existing(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  int v4 = 0;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_DWORD *)a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  if (kdebug_get_bufinfo(v3)) {
    return *__error();
  }
  if (!LODWORD(v3[0])) {
    return 55;
  }
  uint64_t result = 0;
  *(_DWORD *)a1 = 2;
  return result;
}

char *ktrace_set_reason(uint64_t a1, char *__s1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_WORD *)(a1 + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  uint64_t result = strdup(__s1);
  *(void *)(a1 + 696) = result;
  return result;
}

uint64_t ktrace_set_trigger_kind(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_WORD *)(result + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  *(_DWORD *)(result + 712) = a2;
  return result;
}

void ktrace_set_command_argv(uint64_t a1, const char **a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2 + 1;
    do
    {
      v5 += strlen(v4) + 1;
      int v7 = *v6++;
      int v4 = v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v5 = 0;
  }
  int v8 = (char *)malloc_type_malloc(v5 + 1, 0x403BB2EDuLL);
  unint64_t v9 = *a2;
  if (*a2)
  {
    uint64_t v10 = 0;
    unsigned int v11 = a2 + 1;
    while (1)
    {
      int v12 = v10 ? " " : "";
      unsigned int v13 = snprintf(&v8[v10], v5 - v10, "%s%s", v12, v9);
      if ((v13 & 0x80000000) != 0) {
        break;
      }
      v10 += v13;
      uint64_t v14 = *v11++;
      unint64_t v9 = v14;
      if (!v14) {
        goto LABEL_15;
      }
    }
    free(v8);
  }
  else
  {
LABEL_15:
    *(void *)(a1 + 704) = v8;
  }
}

uint64_t ktrace_set_buffer_size(uint64_t result, uint64_t a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_WORD *)(result + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  *(void *)(result + 336) = a2;
  return result;
}

uint64_t ktrace_get_buffer_size(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 336);
}

uint64_t ktrace_set_collection_interval(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_WORD *)(result + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t ktrace_get_collection_interval(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 152);
}

uint64_t ktrace_set_collection_qos(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_WORD *)(result + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  *(_DWORD *)(result + 144) = a2;
  return result;
}

uint64_t ktrace_set_collection_priority(uint64_t result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(_WORD *)(result + 224)) {
    ktrace_callback_list_add_cold_4();
  }
  *(_DWORD *)(result + 148) = a2;
  return result;
}

uint64_t ktrace_get_collection_qos(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 144);
}

uint64_t ktrace_get_collection_priority(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 148);
}

uint64_t ktrace_set_no_postprocessing(uint64_t result)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(unsigned char *)(result + 828) |= 1u;
  return result;
}

void *ktrace_set_writing_filter(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v4 = *(const void **)(a1 + 680);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 680) = result;
  return result;
}

uint64_t ktrace_add_stackshot_flags(uint64_t result, uint64_t a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(void *)(result + 168) |= a2;
  return result;
}

uint64_t ktrace_is_kernel_64_bit(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1 == 1)
  {
    uint64_t v1 = *(void *)(a1 + 608);
    return ktrace_file_is_64_bit(v1);
  }
  else
  {
    long long v35 = xmmword_1B3A731D8;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    memset(v4, 0, sizeof(v4));
    size_t v3 = 648;
    if (sysctl((int *)&v35, 4u, v4, &v3, 0, 0) == -1) {
      return 0;
    }
    else {
      return (v5 >> 2) & 1;
    }
  }
}

BOOL ___session_machine_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = ktrace_machine_create(a2);
  if (v3) {
    *(void *)(*(void *)(a1 + 32) + 344) = v3;
  }
  return v3 == 0;
}

BOOL ___session_machine_init_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = ktrace_machine_create(a2);
  if (v3) {
    *(void *)(*(void *)(a1 + 32) + 344) = v3;
  }
  return v3 == 0;
}

uint64_t ktrace_get_machine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v9 = _session_machine_init(a1, a2, a3, a4, a5, a6, a7, a8);
  *__error() = v9;
  return *(void *)(a1 + 344);
}

uint64_t _session_cpus_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(void *)(a1 + 352)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 608);
  if (v10)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = ___session_cpus_init_block_invoke;
    void v12[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
    v12[4] = a1;
    return ktrace_file_header_iterate(v10, 0, (uint64_t)v12, a4, a5, a6, a7, a8);
  }
  else
  {
    uint64_t current = ktrace_cpus_create_current();
    *(void *)(a1 + 352) = current;
    if (current) {
      return 0;
    }
    else {
      return 22;
    }
  }
}

BOOL ___session_cpus_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  *(void *)(*(void *)(a1 + 32) + 352) = ktrace_cpus_create(a2);
  return *(void *)(*(void *)(a1 + 32) + 352) == 0;
}

uint64_t ktrace_get_cpus(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)(a1 + 352);
}

void *ktrace_set_thread_exit_handler(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  int v4 = *(const void **)(a1 + 88);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 88) = result;
  return result;
}

void *ktrace_set_completion_handler(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  int v4 = *(const void **)(a1 + 56);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 56) = result;
  return result;
}

void *ktrace_set_dropped_events_handler(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  int v4 = *(const void **)(a1 + 64);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 64) = result;
  return result;
}

void *ktrace_set_post_processing_handler(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  int v4 = *(const void **)(a1 + 72);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0;
  }
  *(void *)(a1 + 72) = result;
  return result;
}

double ktrace_set_supplemental_timebase(uint64_t a1, double *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  double result = *a2;
  *(double *)(a1 + 424) = *a2;
  return result;
}

uint64_t ktrace_parse_arg(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v5 = 1;
  if (a4 <= 81)
  {
    if (a4 != 67)
    {
      if (a4 != 69)
      {
        if (a4 == 70)
        {
          if ((*(_WORD *)(a1 + 224) & 3) != 0) {
            ktrace_set_remotetime_conversion_enabled_cold_2();
          }
          uint64_t v5 = 0;
          if (*(_DWORD *)a1 == 1) {
            int v6 = 4;
          }
          else {
            int v6 = 3;
          }
          *(_DWORD *)a1 = v6;
        }
        return v5;
      }
      if (ktrace_set_use_existing(a1))
      {
        int v9 = (FILE *)*MEMORY[0x1E4F143C8];
        uint64_t v10 = "Unable to use existing trace buffer.\n";
        uint64_t v5 = 1;
        size_t v11 = 37;
        goto LABEL_35;
      }
      return 0;
    }
    long long v12 = (_DWORD *)MEMORY[0x1E4F149F8];
    ktrace_session_add_codes_file(a1, *(char **)(a3 + 8 * (int)*MEMORY[0x1E4F149F8]));
    uint64_t v5 = 0;
    ++*v12;
    return v5;
  }
  if (a4 != 120)
  {
    if (a4 != 112)
    {
      if (a4 == 82)
      {
        uint64_t v7 = (int)*MEMORY[0x1E4F149F8];
        long long v8 = *(const char **)(a3 + 8 * v7);
        *MEMORY[0x1E4F149F8] = v7 + 1;
        if (!v8)
        {
          uint64_t v5 = 1;
          fwrite("No trace file specified.\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          return v5;
        }
        if (ktrace_set_file(a1, v8))
        {
          int v9 = (FILE *)*MEMORY[0x1E4F143C8];
          uint64_t v10 = "Unable to use trace file.\n";
          uint64_t v5 = 1;
          size_t v11 = 26;
LABEL_35:
          fwrite(v10, v11, 1uLL, v9);
          return v5;
        }
        return 0;
      }
      return v5;
    }
    uint64_t v17 = (int)*MEMORY[0x1E4F149F8];
    if ((int)v17 < a2)
    {
      long long v18 = *(const char **)(a3 + 8 * v17);
      *MEMORY[0x1E4F149F8] = v17 + 1;
      if ((*v18 - 48) > 9)
      {
        return ktrace_filter_process(a1, v18);
      }
      else
      {
        int v19 = atoi(v18);
        return ktrace_filter_pid(a1, v19);
      }
    }
    int v9 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v10 = "-p requires an argument\n";
LABEL_34:
    uint64_t v5 = 1;
    size_t v11 = 24;
    goto LABEL_35;
  }
  uint64_t v13 = (int)*MEMORY[0x1E4F149F8];
  if ((int)v13 >= a2)
  {
    int v9 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v10 = "-x requires an argument\n";
    goto LABEL_34;
  }
  long long v14 = *(const char **)(a3 + 8 * v13);
  *MEMORY[0x1E4F149F8] = v13 + 1;
  if ((*v14 - 48) > 9)
  {
    return ktrace_exclude_process(a1, v14);
  }
  else
  {
    int v15 = atoi(v14);
    return ktrace_exclude_pid(a1, v15);
  }
}

uint64_t ktrace_set_mode(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  if (a2 >= 5) {
    _session_teardown_cold_2();
  }
  if (a2 == 3)
  {
    if (*(_DWORD *)a1 == 1) {
      a2 = 4;
    }
    else {
      a2 = 3;
    }
  }
  *(_DWORD *)a1 = a2;
  return 0;
}

uint64_t ktrace_parse_args(uint64_t a1, int a2, char **a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *MEMORY[0x1E4F149F0] = 0;
  int v6 = (char *)MEMORY[0x1E4F14A00];
  while (getopt(a2, a3, "") != -1)
  {
    if (ktrace_parse_arg(a1, a2, (uint64_t)a3, *v6)) {
      return 1;
    }
  }
  return 0;
}

uint64_t ktrace_set_interactive(uint64_t result)
{
  *(_DWORD *)(result + 152) = 500;
  return result;
}

void ktrace_set_signal_handler(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(_DWORD *)(a1 + 152) = 500;
  if (ktrace_set_signal_handler_signal_queue_once != -1) {
    dispatch_once(&ktrace_set_signal_handler_signal_queue_once, &__block_literal_global_7);
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __ktrace_set_signal_handler_block_invoke_2;
  void v12[3] = &__block_descriptor_40_e5_v8__0l;
  v12[4] = a1;
  uint64_t v2 = dispatch_source_create(MEMORY[0x1E4F14480], 2uLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 176) = v2;
  v10[0] = 0;
  v10[1] = v10;
  void v10[2] = 0x2020000000;
  int v11 = 0;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = __ktrace_set_signal_handler_block_invoke_3;
  handler[3] = &unk_1E6062750;
  handler[4] = v10;
  handler[5] = a1;
  dispatch_source_set_event_handler(v2, handler);
  signal(2, (void (__cdecl *)(int))1);
  uint64_t v3 = dispatch_source_create(MEMORY[0x1E4F14480], 1uLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 184) = v3;
  dispatch_source_set_event_handler(v3, v12);
  signal(1, (void (__cdecl *)(int))1);
  int v4 = dispatch_source_create(MEMORY[0x1E4F14480], 0xDuLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 200) = v4;
  dispatch_source_set_event_handler(v4, v12);
  signal(13, (void (__cdecl *)(int))1);
  uint64_t v5 = dispatch_source_create(MEMORY[0x1E4F14480], 0xFuLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 192) = v5;
  dispatch_source_set_event_handler(v5, v12);
  signal(15, (void (__cdecl *)(int))1);
  int v6 = dispatch_source_create(MEMORY[0x1E4F14480], 3uLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 208) = v6;
  dispatch_source_set_event_handler(v6, v12);
  signal(3, (void (__cdecl *)(int))1);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  int v8[2] = __ktrace_set_signal_handler_block_invoke_4;
  v8[3] = &__block_descriptor_40_e5_v8__0l;
  v8[4] = a1;
  uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14480], 0x1DuLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 216) = v7;
  dispatch_source_set_event_handler(v7, v8);
  signal(29, (void (__cdecl *)(int))1);
  _Block_object_dispose(v10, 8);
}

void sub_1B39D98F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

dispatch_queue_t __ktrace_set_signal_handler_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, -1);
  dispatch_queue_t result = dispatch_queue_create("com.apple.libktrace.signals", v0);
  ktrace_set_signal_handler_signal_queue = (uint64_t)result;
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return result;
}

void __ktrace_set_signal_handler_block_invoke_2(uint64_t a1)
{
}

void __ktrace_set_signal_handler_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 40);
  if (*v2 == 1)
  {
    BOOL v3 = 1;
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    int v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    BOOL v3 = v5 != 0;
  }
  ktrace_end((uint64_t)v2, v3);
}

uint64_t __ktrace_set_signal_handler_block_invoke_4(uint64_t a1)
{
  return printf("%llu events seen\n", *(void *)(*(void *)(a1 + 32) + 160));
}

uint64_t ktrace_get_coprocessor_tracing_enabled(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 224) >> 9) & 1;
}

uint64_t ktrace_set_coprocessor_tracing_enabled(uint64_t result, int a2)
{
  if (a2) {
    __int16 v2 = 512;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(result + 224) = *(_WORD *)(result + 224) & 0xFDFF | v2;
  return result;
}

void ktrace_set_trailing_duration(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) != 2) {
    ktrace_time_ringbuffer_create();
  }
  ktrace_postprocess_file_internal_cold_1();
}

uint64_t ktrace_get_mode(unsigned int *a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *a1;
}

uint64_t ktrace_add_client(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*(void *)(a1 + 592)) {
    return 22;
  }
  uint64_t result = 0;
  *(void *)(a1 + 592) = a2;
  if (a3) {
    __int16 v5 = 8;
  }
  else {
    __int16 v5 = 0;
  }
  *(_WORD *)(a1 + 224) = *(_WORD *)(a1 + 224) & 0xFFF7 | v5;
  return result;
}

uint64_t ktrace_get_end_reason(uint64_t a1)
{
  return *(unsigned int *)(a1 + 808);
}

uint64_t _session_providers(uint64_t a1)
{
  return *(void *)(a1 + 600);
}

uint64_t ktrace_stream_create(int a1, char a2, int a3)
{
  if (ktrace_stream_create_once != -1) {
    dispatch_once(&ktrace_stream_create_once, &__block_literal_global_8);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v7 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    bzero((void *)(Instance + 32), 0x398uLL);
    *(void *)(v7 + 952) = 0;
    *(_DWORD *)(v7 + 24) = a1;
    *(unsigned char *)(v7 + 972) = a2;
    if (a3) {
      intptr_t v8 = 2;
    }
    else {
      intptr_t v8 = 32;
    }
    *(void *)(v7 + 960) = dispatch_semaphore_create(v8);
    *(_DWORD *)(v7 + 968) = a3;
  }
  return v7;
}

uint64_t __ktrace_stream_create_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ktrace_stream_typeid = result;
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return result;
}

uint64_t ktrace_stream_add(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v4 = *(unsigned __int8 *)(a1 + 972);
  if (v4 != ktrace_chunk_is_64_bit(a2)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v5 = ktrace_chunk_tag(a2);
  switch(v5)
  {
    case 7680:
      unint64_t v6 = 8;
      break;
    case 20982:
      unint64_t v6 = 0;
      break;
    case 7936:
      unint64_t v6 = 12;
      break;
    default:
      return 22;
  }
  if (ktrace_chunk_size(a2) <= v6) {
    return 55;
  }
  uint64_t v7 = malloc_type_malloc(0x20uLL, 0x10200404161829EuLL);
  if (!v7) {
    return 12;
  }
  v7[1] = 0;
  void v7[2] = 0;
  uint64_t v8 = *(void *)(a1 + 40);
  v7[3] = v8;
  *uint64_t v7 = a2;
  if (v8) {
    *(void *)(v8 + 16) = v7;
  }
  if (!*(void *)(a1 + 32)) {
    *(void *)(a1 + 32) = v7;
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 40) = v7;
  return v9;
}

uint64_t ktrace_stream_iterate_group(uint64_t a1, size_t a2, NSObject *a3, NSObject *a4, uint64_t a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v8 = a1 + 32;
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  if (v7)
  {
    uint64_t v31 = a1 + 48;
    while (1)
    {
      long long v12 = (void *)*v7;
      if (!*v7) {
        return 0;
      }
      int v13 = ktrace_chunk_tag(*v7);
      unint64_t v14 = ktrace_chunk_size((uint64_t)v12);
      unint64_t v15 = *(void *)(*(void *)v8 + 8);
      if (v15 > v14) {
        ktrace_postprocess_file_internal_cold_1();
      }
      unint64_t v16 = v14;
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 960), 0xFFFFFFFFFFFFFFFFLL);
      if (v13 == 20982) {
        break;
      }
      if (v13 == 7936)
      {
        if (v16 < 0xD) {
          goto LABEL_47;
        }
        if (!*(void *)(*(void *)v8 + 8)) {
          *(void *)(*(void *)v8 + 8) = 12;
        }
        unint64_t v25 = 0x200000;
        if ((*(_DWORD *)(a1 + 968) & 1) == 0) {
          unint64_t v25 = 0x400000;
        }
        if (v25 >= a2) {
          size_t v20 = a2;
        }
        else {
          size_t v20 = v25;
        }
        if (*(unsigned char *)(a1 + 972)) {
          long long v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))stream_decompress_64;
        }
        else {
          long long v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))stream_decompress_32;
        }
        uint64_t v19 = a1;
        long long v21 = a3;
        long long v22 = a4;
        uint64_t v23 = a5;
        uint64_t v24 = v31;
LABEL_31:
        uint64_t v26 = convert_events(v19, v20, v21, v22, v23, v18, v24);
        if (v26)
        {
          uint64_t v29 = v26;
          goto LABEL_49;
        }
        goto LABEL_32;
      }
      if (v13 != 7680) {
        ktrace_stream_iterate_group_cold_4();
      }
      if (v16 < 8)
      {
LABEL_47:
        uint64_t v29 = 79;
LABEL_49:
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 960));
        return v29;
      }
      unint64_t v17 = 72;
      if (!*(unsigned char *)(a1 + 972)) {
        unint64_t v17 = 40;
      }
      if (v16 < v17)
      {
        ktrace_chunk_queue_dequeue(v8);
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 960));
LABEL_32:
        uint64_t v7 = *(uint64_t **)v8;
        goto LABEL_33;
      }
      if (!v15) {
        unint64_t v15 = 8;
      }
      if (v16 - v15 >= a2) {
        unint64_t v27 = a2;
      }
      else {
        unint64_t v27 = v16 - v15;
      }
      long long v28 = ktrace_chunk_map_data(v12, v15, v27);
      if (!v28)
      {
        uint64_t v29 = *__error();
        goto LABEL_49;
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __ktrace_stream_iterate_group_block_invoke;
      block[3] = &unk_1E6062910;
      block[4] = a5;
      void block[5] = v28;
      void block[6] = v27;
      void block[7] = v12;
      block[8] = a1;
      if (a4) {
        dispatch_group_async(a4, a3, block);
      }
      else {
        dispatch_async(a3, block);
      }
      uint64_t v7 = *(uint64_t **)v8;
      *(void *)(*(void *)v8 + 8) = v27 + v15;
      if (v27 + v15 == v16)
      {
        ktrace_chunk_queue_dequeue(v8);
        goto LABEL_32;
      }
LABEL_33:
      if (!v7) {
        return 0;
      }
    }
    if (*(unsigned char *)(a1 + 972)) {
      long long v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))convert_artrace_events_64;
    }
    else {
      long long v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))convert_artrace_events_32;
    }
    uint64_t v19 = a1;
    size_t v20 = a2;
    long long v21 = a3;
    long long v22 = a4;
    uint64_t v23 = a5;
    uint64_t v24 = 0;
    goto LABEL_31;
  }
  return 0;
}

void ktrace_chunk_queue_dequeue(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  __int16 v2 = *(void **)a1;
  if (v2)
  {
    uint64_t v3 = v2[2];
    *(void *)a1 = v3;
    if (v2 == *(void **)(a1 + 8)) {
      *(void *)(a1 + 8) = 0;
    }
    if (v3) {
      *(void *)(v3 + 24) = 0;
    }
    free(v2);
    ktrace_compressor_reset((_DWORD *)(a1 + 16));
  }
}

intptr_t __ktrace_stream_iterate_group_block_invoke(void *a1)
{
  (*(void (**)(void))(a1[4] + 16))();
  ktrace_chunk_unmap_data(a1[7], a1[5], a1[6]);
  __int16 v2 = *(NSObject **)(a1[8] + 960);

  return dispatch_semaphore_signal(v2);
}

uint64_t convert_events(uint64_t a1, size_t a2, NSObject *a3, NSObject *a4, uint64_t a5, uint64_t (*a6)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t), uint64_t a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a6) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v12 = a1;
  uint64_t v14 = a1 + 32;
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    unint64_t v15 = *(void **)v13;
  }
  else {
    unint64_t v15 = 0;
  }
  unint64_t v16 = *(void *)(v13 + 8);
  unint64_t v17 = ktrace_chunk_size((uint64_t)v15);
  if (v16 >= v17) {
    return 0;
  }
  unint64_t v18 = v17;
  uint64_t v37 = (char *)malloc_type_malloc(a2, 0xBA32FD9BuLL);
  if (!v37) {
    return 12;
  }
  if (!a2)
  {
    uint64_t v24 = 0;
LABEL_35:
    free(v37);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v12 + 960));
    return v24;
  }
  uint64_t v35 = v12;
  uint64_t v36 = a6;
  uint64_t v33 = a5;
  long long v34 = a4;
  queue = a3;
  uint64_t v19 = 0;
  while (1)
  {
    if (v18 - v16 >= 0x400000) {
      uint64_t v20 = 0x400000;
    }
    else {
      uint64_t v20 = v18 - v16;
    }
    size_t v40 = 0;
    uint64_t v41 = 0;
    unint64_t v21 = v18 - v16;
    if (v18 == v16)
    {
LABEL_25:
      ktrace_chunk_queue_dequeue(v14);
LABEL_26:
      uint64_t v24 = 0;
      goto LABEL_32;
    }
    long long v22 = ktrace_chunk_map_data(v15, v16, v20);
    if (!v22)
    {
      uint64_t v24 = *__error();
      goto LABEL_32;
    }
    unint64_t v23 = (unint64_t)v22;
    size_t v40 = a2;
    uint64_t v41 = v20;
    uint64_t v24 = v36(v22, &v41, &v37[v19], &v40, a7);
    ktrace_chunk_unmap_data((uint64_t)v15, v23, v20);
    if (v24) {
      goto LABEL_32;
    }
    size_t v25 = v40;
    if (!v40) {
      break;
    }
    v19 += v40;
    uint64_t v26 = v41;
    v16 += v41;
    *(void *)(*(void *)v14 + 8) = v16;
    if (v21 == v26) {
      goto LABEL_25;
    }
    a2 -= v25;
    if (!a2) {
      goto LABEL_26;
    }
  }
  if (v21 > 0x400000)
  {
    ktrace_log_init();
    long long v30 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      convert_events_cold_5(v20, v30);
    }
    goto LABEL_26;
  }
  *__error() = 79;
  int v27 = *__error();
  ktrace_log_init();
  long long v28 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
  {
    int v31 = ktrace_chunk_tag((uint64_t)v15);
    *(_DWORD *)long long buf = 67109888;
    int v43 = v31;
    __int16 v44 = 2048;
    unint64_t v45 = v16;
    __int16 v46 = 2048;
    unint64_t v47 = v18 - v16;
    __int16 v48 = 1024;
    int v49 = v27;
    _os_log_error_impl(&dword_1B39A5000, v28, OS_LOG_TYPE_ERROR, "truncated events chunk (tag = 0x%x, offset = %llu, left = %zu) (%{errno}d)", buf, 0x22u);
  }
  *__error() = v27;
  uint64_t v24 = 79;
LABEL_32:
  uint64_t v12 = v35;
  if (!v19) {
    goto LABEL_35;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __convert_events_block_invoke;
  block[3] = &unk_1E6062938;
  block[4] = v33;
  void block[5] = v37;
  void block[6] = v19;
  void block[7] = v35;
  if (v34) {
    dispatch_group_async(v34, queue, block);
  }
  else {
    dispatch_async(queue, block);
  }
  return v24;
}

uint64_t stream_decompress_64(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, int *a5)
{
  *a4 = decompress_64(a5, a1, a2, a3, *a4);
  return 0;
}

uint64_t stream_decompress_32(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, int *a5)
{
  *a4 = decompress_32(a5, a1, a2, a3, *a4);
  return 0;
}

uint64_t convert_artrace_events_64(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*a2 >= 0x30uLL)
  {
    unint64_t v5 = 0;
    unint64_t v4 = 0;
    unint64_t v6 = *a2 / 0x30uLL;
    unint64_t v7 = *a4;
    uint64_t v8 = (_OWORD *)(a1 + 16);
    while (1)
    {
      unint64_t v9 = v4 + 64;
      if (v4 + 64 > v7) {
        break;
      }
      unint64_t v10 = *((void *)v8 - 2);
      uint64_t v11 = a3 + v4;
      *(void *)uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v12 = *((unsigned int *)v8 - 1);
      *(_DWORD *)(v11 + 48) = *((_DWORD *)v8 - 2);
      *(_DWORD *)(v11 + 52) = HIBYTE(v10);
      *(_OWORD *)(v11 + 8) = *v8;
      *(_OWORD *)(v11 + 24) = v8[1];
      *(void *)(v11 + 40) = v12;
      ++v5;
      v8 += 3;
      unint64_t v4 = v9;
      if (v6 == v5)
      {
        unint64_t v4 = v6 << 6;
        unint64_t v5 = v6;
        break;
      }
    }
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
  }
  *a2 = 48 * v5;
  *a4 = v4;
  return 0;
}

uint64_t convert_artrace_events_32(int32x4_t *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*a2 >= 0x30uLL)
  {
    unint64_t v5 = 0;
    uint64_t v4 = 0;
    unint64_t v6 = *a2 / 0x30uLL;
    unint64_t v7 = *a4;
    uint64_t v8 = a1 + 1;
    while (1)
    {
      uint64_t v9 = v4 + 32;
      if (v4 + 32 > v7) {
        break;
      }
      uint64_t v10 = a3 + v4;
      *(void *)uint64_t v10 = v8[-1].i64[0];
      *(int32x4_t *)(v10 + 8) = vuzp1q_s32(*v8, v8[1]);
      *(int32x2_t *)(v10 + 24) = vrev64_s32((int32x2_t)v8[-1].u64[1]);
      ++v5;
      v8 += 3;
      uint64_t v4 = v9;
      if (v6 == v5)
      {
        uint64_t v4 = 32 * v6;
        unint64_t v5 = v6;
        break;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
  }
  *a2 = 48 * v5;
  *a4 = v4;
  return 0;
}

uint64_t ktrace_stream_out_compressed(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 >= 5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return 22;
}

unint64_t ktrace_stream_estimate_events(uint64_t *a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v2 = ktrace_chunk_tag((uint64_t)a1);
  unint64_t v3 = ktrace_chunk_size((uint64_t)a1);
  int is_64_bit = ktrace_chunk_is_64_bit((uint64_t)a1);
  if (v2 == 20982) {
    return v3 / 0x30;
  }
  if (v2 == 7936)
  {
    unsigned int v7 = 0;
    if (ktrace_chunk_copy_data(a1, 8, &v7, 4uLL)) {
      return 0;
    }
    else {
      return v7;
    }
  }
  else
  {
    unint64_t v5 = (v3 - 8) >> 6;
    if (!is_64_bit) {
      unint64_t v5 = (v3 - 8) >> 5;
    }
    if (v2 == 7680) {
      return v5;
    }
    else {
      return 0;
    }
  }
}

void ktrace_iter_destroy(void **a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = (const void *)v2[1];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)v2[6];
    if (v4) {
      CFRelease(v4);
    }
    free(v2);
    *a1 = 0;
  }
}

void *ktrace_stream_create_iterator(void *a1)
{
  if (!a1[4]) {
    return 0;
  }
  CFRetain(a1);
  int v2 = malloc_type_malloc(0x40uLL, 0x10700401C01FCAEuLL);
  unsigned int v7 = v2;
  if (!v2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v3 = v2;
  *int v2 = a1[4];
  v2[1] = a1;
  *((_OWORD *)v2 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  int inited = ktrace_iter_init_chunk((uint64_t)v2);
  if (inited)
  {
    int v5 = inited;
    ktrace_iter_destroy(&v7);
    *__error() = v5;
    return v7;
  }
  return v3;
}

uint64_t ktrace_iter_init_chunk(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 56)) {
    return 0;
  }
  unint64_t v3 = **(uint64_t ***)a1;
  int v4 = ktrace_chunk_tag((uint64_t)v3);
  if (v4 == 20982)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)v3) >= 0x30)
    {
      uint64_t v12 = (void *)ktrace_chunk_size_t(v3, v11);
      CFDataRef v13 = ktrace_chunk_copy_cfdata((uint64_t)v3, 0, v12);
      *(void *)(a1 + 48) = v13;
      if (v13)
      {
        *(void *)(a1 + 24) = CFDataGetBytePtr(v13);
        CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 48));
        *(void *)(a1 + 16) = 0;
        uint64_t v10 = 48;
        *(void *)(a1 + 32) = Length;
LABEL_16:
        *(void *)(a1 + 40) = v10;
LABEL_17:
        int v15 = ktrace_chunk_tag((uint64_t)v3);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 56) = v15;
        return result;
      }
      return 12;
    }
    return 107;
  }
  if (v4 != 7936)
  {
    if (v4 != 7680) {
      ktrace_stream_iterate_group_cold_4();
    }
    unint64_t v5 = ktrace_chunk_size((uint64_t)v3);
    unint64_t v7 = 72;
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 972)) {
      unint64_t v7 = 40;
    }
    if (v5 >= v7)
    {
      uint64_t v8 = (void *)ktrace_chunk_size_t(v3, v6);
      CFDataRef v9 = ktrace_chunk_copy_cfdata((uint64_t)v3, 0, v8);
      *(void *)(a1 + 48) = v9;
      if (v9)
      {
        *(void *)(a1 + 24) = CFDataGetBytePtr(v9);
        *(void *)(a1 + 32) = CFDataGetLength(*(CFDataRef *)(a1 + 48));
        *(void *)(a1 + 16) = 8;
        uint64_t v10 = 64;
        if (!*(unsigned char *)(*(void *)(a1 + 8) + 972)) {
          uint64_t v10 = 32;
        }
        goto LABEL_16;
      }
      return 12;
    }
    return 107;
  }
  unint64_t v16 = ktrace_stream_estimate_events(v3);
  if (!v16) {
    return 107;
  }
  unint64_t v17 = v16;
  if ((unint64_t)ktrace_chunk_size((uint64_t)v3) < 0xD) {
    return 107;
  }
  unint64_t v19 = ktrace_chunk_size_t(v3, v18);
  uint64_t v20 = ktrace_chunk_map_data(v3, 0, v19);
  if (!v20) {
    return *__error();
  }
  unint64_t v21 = (unint64_t)v20;
  BOOL v22 = *(unsigned char *)(*(void *)(a1 + 8) + 972) == 0;
  uint64_t v23 = 64;
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 972)) {
    uint64_t v23 = 32;
  }
  *(void *)(a1 + 40) = v23;
  char v24 = 5;
  if (!v22) {
    char v24 = 6;
  }
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(0, v17 << v24);
  if (!Mutable)
  {
    uint64_t v37 = ktrace_chunk_size_t(v3, v26);
    ktrace_chunk_unmap_data((uint64_t)v3, v21, v37);
    return 12;
  }
  int v27 = Mutable;
  CFDataSetLength(Mutable, *(void *)(a1 + 40) * v17);
  bzero(v39, 0x388uLL);
  ktrace_compressor_reset(v39);
  uint64_t v38 = ktrace_chunk_size_t(v3, v28) - 12;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 972)) {
    uint64_t v29 = decompress_64;
  }
  else {
    uint64_t v29 = decompress_32;
  }
  MutableBytePtr = CFDataGetMutableBytePtr(v27);
  CFIndex v31 = CFDataGetLength(v27);
  *(void *)(a1 + 32) = v29(v39, v21 + 12, (unint64_t *)&v38, (uint64_t)MutableBytePtr, v31);
  uint64_t v33 = ktrace_chunk_size_t(v3, v32);
  ktrace_chunk_unmap_data((uint64_t)v3, v21, v33);
  if (*(void *)(a1 + 32))
  {
    uint64_t v34 = *(void *)(a1 + 32);
    if (v34 != CFDataGetLength(v27))
    {
      ktrace_log_init();
      uint64_t v35 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_iter_init_chunk_cold_2(v27, (uint64_t *)(a1 + 32), v35);
      }
      *(void *)(a1 + 32) = CFDataGetLength(v27);
    }
    BytePtr = CFDataGetBytePtr(v27);
    *(void *)(a1 + 48) = v27;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = BytePtr;
    goto LABEL_17;
  }
  CFRelease(v27);
  return 9;
}

void *ktrace_stream_create_end_iterator(void *a1)
{
  if (!a1[4]) {
    return 0;
  }
  CFRetain(a1);
  int v2 = malloc_type_malloc(0x40uLL, 0x10700401C01FCAEuLL);
  uint64_t v11 = v2;
  if (!v2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v3 = v2;
  *int v2 = a1[5];
  v2[1] = a1;
  *((_OWORD *)v2 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
  int v4 = v2 + 2;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  int inited = ktrace_iter_init_chunk((uint64_t)v2);
  if (inited)
  {
    int v6 = inited;
    ktrace_iter_destroy(&v11);
    unint64_t v3 = 0;
    *__error() = v6;
  }
  else
  {
    uint64_t v7 = v3[2];
    unint64_t v8 = v3[5];
    unint64_t v9 = (v3[4] - v7) / v8;
    if ((v9 & 0x8000000000000000) != 0) {
      ktrace_postprocess_file_internal_cold_1();
    }
    *int v4 = v7 + (v9 - 1) * v8;
  }
  return v3;
}

__n128 ktrace_iter_copy(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRetain(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRetain(v3);
  }
  int v4 = malloc_type_malloc(0x40uLL, 0x10700401C01FCAEuLL);
  if (!v4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  __n128 result = *(__n128 *)a1;
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v7 = *(_OWORD *)(a1 + 48);
  _OWORD v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v7;
  *int v4 = result;
  v4[1] = v6;
  return result;
}

uint64_t ktrace_iter_prev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t inited = ktrace_iter_init_chunk(*a1);
  if (inited) {
    goto LABEL_2;
  }
  int v5 = *(_DWORD *)(v2 + 56);
  if (v5 != 7680 && v5 != 20982 && v5 != 7936) {
    ktrace_stream_iterate_group_cold_4();
  }
  if (!*(void *)(v2 + 48)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v8 = *(void *)(v2 + 16);
  unint64_t v9 = *(void *)(v2 + 40);
  BOOL v10 = v8 >= v9;
  unint64_t v11 = v8 - v9;
  if (v10)
  {
    uint64_t inited = 0;
    *(void *)(v2 + 16) = v11;
    return inited;
  }
  ktrace_iter_fini_chunk(v2);
  uint64_t v12 = *(void *)v2;
  if (!*(void *)(*(void *)v2 + 24))
  {
LABEL_17:
    uint64_t inited = 0;
LABEL_2:
    ktrace_iter_destroy((void **)a1);
    return inited;
  }
  while (1)
  {
    *(void *)uint64_t v2 = *(void *)(v12 + 24);
    uint64_t v13 = ktrace_iter_init_chunk(v2);
    if (v13 != 107) {
      break;
    }
    uint64_t v12 = *(void *)v2;
    if (!*(void *)v2) {
      goto LABEL_17;
    }
  }
  uint64_t inited = v13;
  if (v13 || !*(void *)v2) {
    goto LABEL_2;
  }
  return inited;
}

void ktrace_iter_fini_chunk(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (!v2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFRelease(v2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
}

uint64_t ktrace_iter_next(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t inited = ktrace_iter_init_chunk(*a1);
  if (inited) {
    goto LABEL_2;
  }
  int v5 = *(_DWORD *)(v2 + 56);
  if (v5 != 7680 && v5 != 20982 && v5 != 7936) {
    ktrace_stream_iterate_group_cold_4();
  }
  if (!*(void *)(v2 + 48)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = v8 + *(void *)(v2 + 16);
  if ((unint64_t)(v9 + v8) <= *(void *)(v2 + 32))
  {
    uint64_t inited = 0;
    *(void *)(v2 + 16) = v9;
    return inited;
  }
  ktrace_iter_fini_chunk(v2);
  uint64_t v10 = *(void *)v2;
  if (!*(void *)(*(void *)v2 + 16))
  {
LABEL_17:
    uint64_t inited = 0;
LABEL_2:
    ktrace_iter_destroy((void **)a1);
    return inited;
  }
  while (1)
  {
    *(void *)uint64_t v2 = *(void *)(v10 + 16);
    uint64_t v11 = ktrace_iter_init_chunk(v2);
    if (v11 != 107) {
      break;
    }
    uint64_t v10 = *(void *)v2;
    if (!*(void *)v2) {
      goto LABEL_17;
    }
  }
  uint64_t inited = v11;
  if (v11 || !*(void *)v2) {
    goto LABEL_2;
  }
  return inited;
}

uint64_t ktrace_iter_next_until(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t result = ktrace_iter_init_chunk(*a1);
  if (!result)
  {
    if (!*(void *)(v4 + 48)) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int v6 = *(unsigned __int8 *)(*(void *)(v4 + 8) + 972);
    *(void *)(v4 + 16) += *(void *)(v4 + 40);
    do
    {
      int v7 = *(_DWORD *)(v4 + 56);
      if (v7 == 7680 || v7 == 7936)
      {
        uint64_t v9 = *(void *)(v4 + 16);
        unint64_t v11 = *(void *)(v4 + 32);
        uint64_t v10 = *(void *)(v4 + 40);
        while (v10 + v9 <= v11)
        {
          uint64_t v12 = *(void *)(v4 + 24) + v9;
          if (v6) {
            uint64_t v13 = 48;
          }
          else {
            uint64_t v13 = 28;
          }
          if ((*(unsigned int (**)(uint64_t, void))(a2 + 16))(a2, *(unsigned int *)(v12 + v13))) {
            return 0;
          }
          unint64_t v11 = *(void *)(v4 + 32);
          uint64_t v10 = *(void *)(v4 + 40);
          uint64_t v9 = *(void *)(v4 + 16) + v10;
          *(void *)(v4 + 16) = v9;
        }
      }
      else
      {
        if (v7 != 20982) {
          ktrace_stream_iterate_group_cold_4();
        }
        uint64_t v14 = *(void *)(v4 + 16);
        unint64_t v16 = *(void *)(v4 + 32);
        uint64_t v15 = *(void *)(v4 + 40);
        while (v15 + v14 <= v16)
        {
          if ((*(unsigned int (**)(uint64_t, void))(a2 + 16))(a2, *(unsigned int *)(*(void *)(v4 + 24) + v14 + 8)))
          {
            return 0;
          }
          unint64_t v16 = *(void *)(v4 + 32);
          uint64_t v15 = *(void *)(v4 + 40);
          uint64_t v14 = *(void *)(v4 + 16) + v15;
          *(void *)(v4 + 16) = v14;
        }
      }
      uint64_t result = ktrace_iter_next(a1);
    }
    while (*a1);
  }
  return result;
}

__n128 ktrace_iter_get_event(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 != 7680)
  {
    if (v2 == 20982)
    {
      int v6 = (__n128 *)(*(void *)(a1 + 24) + *(void *)(a1 + 16));
      unint64_t v7 = v6->n128_u64[0];
      *(void *)a2 = v6->n128_u64[0] & 0xFFFFFFFFFFFFFFLL;
      uint64_t v8 = v6->n128_u32[3];
      *(_DWORD *)(a2 + 48) = v6->n128_u32[2];
      *(_DWORD *)(a2 + 52) = HIBYTE(v7);
      *(__n128 *)(a2 + 8) = v6[1];
      __n128 result = v6[2];
      *(__n128 *)(a2 + 24) = result;
      *(void *)(a2 + 40) = v8;
      return result;
    }
    if (v2 != 7936) {
      ktrace_stream_iterate_group_cold_4();
    }
  }
  if (!*(void *)(a1 + 48)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v3 = (uint64_t *)(*(void *)(a1 + 24) + *(void *)(a1 + 16));
  uint64_t v4 = *v3;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 972))
  {
    *(void *)a2 = v4;
    *(_DWORD *)(a2 + 48) = *((_DWORD *)v3 + 12);
    *(void *)(a2 + 8) = v3[1];
    *(void *)(a2 + 16) = v3[2];
    *(void *)(a2 + 24) = v3[3];
    *(void *)(a2 + 32) = v3[4];
    *(void *)(a2 + 40) = v3[5];
    int v5 = *((_DWORD *)v3 + 13);
  }
  else
  {
    *(void *)a2 = v4 & 0xFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 48) = *((_DWORD *)v3 + 7);
    *(void *)(a2 + 8) = *((unsigned int *)v3 + 2);
    *(void *)(a2 + 16) = *((unsigned int *)v3 + 3);
    *(void *)(a2 + 24) = *((unsigned int *)v3 + 4);
    *(void *)(a2 + 32) = *((unsigned int *)v3 + 5);
    *(void *)(a2 + 40) = *((unsigned int *)v3 + 6);
    int v5 = *((unsigned __int8 *)v3 + 7);
  }
  *(_DWORD *)(a2 + 52) = v5;
  return result;
}

BOOL ktrace_iter_equal(unint64_t a1, unint64_t a2)
{
  if (!(a1 | a2)) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2) {
    return *(void *)a1 == *(void *)a2 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return result;
}

void ktrace_stream_dealloc(uint64_t a1)
{
  if (a1)
  {
    unint64_t v3 = (void *)(a1 + 32);
    int v2 = *(void **)(a1 + 32);
    if (v2)
    {
      do
      {
        if (!*v2) {
          break;
        }
        ktrace_chunk_queue_dequeue((uint64_t)v3);
        int v2 = (void *)*v3;
      }
      while (*v3);
    }
    uint64_t v4 = *(NSObject **)(a1 + 960);
    dispatch_release(v4);
  }
}

intptr_t __convert_events_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  free(*(void **)(a1 + 40));
  int v2 = *(NSObject **)(*(void *)(a1 + 56) + 960);

  return dispatch_semaphore_signal(v2);
}

void *kthmap_create()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0x68uLL, 0x1020040FEC3D670uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    *((unsigned char *)v0 + 96) |= 3u;
    CFDictionaryValueCallBacks valueCallBacks = *(CFDictionaryValueCallBacks *)byte_1F0C3CEC0;
    CFDictionaryValueCallBacks v23 = *(CFDictionaryValueCallBacks *)byte_1F0C3CEE8;
    CFDictionaryValueCallBacks v22 = *(CFDictionaryValueCallBacks *)byte_1F0C3CF10;
    CFMutableDictionaryRef v2 = CFDictionaryCreateMutable(0, 0, &int_key_callbacks, &valueCallBacks);
    v1[2] = v2;
    if (!v2) {
      goto LABEL_12;
    }
    valueCallBacks.release = 0;
    CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &valueCallBacks);
    v1[3] = v3;
    if (!v3) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &valueCallBacks);
    v1[4] = v4;
    if (!v4) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &str_value_callbacks);
    v1[5] = Mutable;
    if (!Mutable) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &long_value_callbacks);
    v1[6] = v6;
    if (!v6) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &int_value_callbacks);
    v1[7] = v7;
    if (!v7) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &v22);
    v1[8] = v8;
    if (!v8
      || (v22.release = 0, CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &v22), (v1[9] = v9) == 0)
      || (CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &v23), (v1[10] = v10) == 0)
      || (CFMutableSetRef v11 = CFSetCreateMutable(0, 0, &long_value_set_callbacks), (v1[11] = v11) == 0))
    {
LABEL_12:
      uint64_t v12 = (const void *)v1[9];
      if (v12) {
        CFRelease(v12);
      }
      uint64_t v13 = (const void *)v1[8];
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v14 = (const void *)v1[7];
      if (v14) {
        CFRelease(v14);
      }
      uint64_t v15 = (const void *)v1[6];
      if (v15) {
        CFRelease(v15);
      }
      unint64_t v16 = (const void *)v1[5];
      if (v16) {
        CFRelease(v16);
      }
      unint64_t v17 = (const void *)v1[4];
      if (v17) {
        CFRelease(v17);
      }
      uint64_t v18 = (const void *)v1[2];
      if (v18) {
        CFRelease(v18);
      }
      unint64_t v19 = (const void *)v1[3];
      if (v19) {
        CFRelease(v19);
      }
      uint64_t v20 = (const void *)v1[10];
      if (v20) {
        CFRelease(v20);
      }
      free(v1);
      return 0;
    }
  }
  return v1;
}

void task_release(int a1, void *a2)
{
  if (a2)
  {
    CFMutableDictionaryRef v3 = (void *)a2[3];
    if (v3) {
      free(v3);
    }
    free(a2);
  }
}

BOOL task_equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

void jetsam_coalition_release(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL jetsam_coalition_equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

void thread_group_release(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL thread_group_equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

void kthmap_destroy(CFTypeRef *a1)
{
  if (a1)
  {
    CFRelease(a1[2]);
    CFRelease(a1[3]);
    CFRelease(a1[4]);
    CFRelease(a1[5]);
    CFRelease(a1[6]);
    CFRelease(a1[7]);
    CFRelease(a1[8]);
    CFRelease(a1[9]);
    CFRelease(a1[10]);
    CFRelease(a1[11]);
    free(a1);
  }
}

uint64_t kthmap_read_chunk(unsigned char *a1, void *a2)
{
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if ((v4 - 20530) < 2 || v4 == 7424)
  {
    int v6 = v4;
    uint64_t v7 = ktrace_chunk_size((uint64_t)a2);
    int is_64_bit = ktrace_chunk_is_64_bit((uint64_t)a2);
    unsigned int v9 = ktrace_chunk_version_major((uint64_t)a2);
    CFMutableDictionaryRef v10 = (UInt8 *)ktrace_chunk_map_data(a2, 0, v7);
    if (!v10) {
      return *__error();
    }
    unint64_t v11 = (unint64_t)v10;
    if (v6 == 20531)
    {
      if ((a1[96] & 2) == 0)
      {
LABEL_19:
        uint64_t kdebug_map = 0;
LABEL_22:
        ktrace_chunk_unmap_data((uint64_t)a2, v11, v7);
        return kdebug_map;
      }
      CFDataRef dictionary = create_dictionary(v10, v7);
      if (dictionary)
      {
        CFDictionaryRef v14 = dictionary;
        uint64_t v15 = (void (__cdecl *)(const void *, const void *, void *))ariadne_thread_dict_apply;
LABEL_18:
        CFDictionaryApplyFunction(v14, v15, a1);
        CFRelease(v14);
        goto LABEL_19;
      }
    }
    else
    {
      if (v6 != 20530)
      {
        if (v6 == 7424) {
          uint64_t kdebug_map = kthmap_read_kdebug_map((uint64_t)a1, (uint64_t)v10, v7, v9 > 1, is_64_bit);
        }
        else {
          uint64_t kdebug_map = 22;
        }
        goto LABEL_22;
      }
      if ((a1[96] & 2) == 0) {
        goto LABEL_19;
      }
      CFDataRef v16 = create_dictionary(v10, v7);
      if (v16)
      {
        CFDictionaryRef v14 = v16;
        uint64_t v15 = (void (__cdecl *)(const void *, const void *, void *))_ariadne_process_dict_apply;
        goto LABEL_18;
      }
    }
    uint64_t kdebug_map = 79;
    goto LABEL_22;
  }
  return 22;
}

uint64_t kthmap_read_kdebug_map(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(unsigned char *)(a1 + 96) & 2) == 0) {
    return 0;
  }
  if (!a4)
  {
    if (a5) {
      uint64_t v24 = 32;
    }
    else {
      uint64_t v24 = 28;
    }
    if (!a3) {
      return 0;
    }
    unint64_t v25 = 0;
    while (1)
    {
      if (a5)
      {
        uint64_t v26 = *(const void **)(a2 + v25);
        if (v26)
        {
          int v27 = *(_DWORD *)(a2 + v25 + 8);
          uint64_t v28 = (char *)(a2 + v25 + 12);
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v26 = (const void *)*(unsigned int *)(a2 + v25);
        if (v26)
        {
          int v27 = *(_DWORD *)(a2 + v25 + 4);
          uint64_t v28 = (char *)(a2 + v25 + 8);
LABEL_30:
          uint64_t result = insert_legacy_entry_internal(a1, v26, v27, v28);
          if (result) {
            return result;
          }
        }
      }
      v25 += v24;
      if (v25 >= a3) {
        return 0;
      }
    }
  }
  if (a3 >= 33)
  {
    size_t v9 = a2 + a3;
    size_t v10 = a2 + 32;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (*(_DWORD *)(a2 + 16))
    {
      int v11 = 0;
      do
      {
        uint64_t v12 = (const char *)(v10 + *(unsigned int *)(a2 + 20));
        if ((unint64_t)v12 >= v9) {
          return 1;
        }
        uint64_t v13 = malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
        if (!v13) {
          return 1;
        }
        CFDictionaryRef v14 = v13;
        *((void *)v13 + 3) = strdup(v12);
        uint64_t v15 = (const void *)*(int *)(v10 + 8);
        void v14[2] = v15;
        v14[4] = *(_DWORD *)(v10 + 12);
        CFDataRef v16 = *(const void **)v10;
        *(void *)CFDictionaryRef v14 = *(void *)v10;
        unint64_t v17 = strdup(v12);
        *((void *)v14 + 3) = v17;
        size_t v10 = (size_t)&v12[strlen(v17) + 1];
        if (v10 >= v9)
        {
          free(v14);
          return 1;
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v15, v14);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), v16, v14);
      }
      while (++v11 < *(_DWORD *)(a2 + 16));
    }
    if (*(_DWORD *)(a2 + 24))
    {
      unsigned int v18 = 0;
      while (1)
      {
        unint64_t v19 = (const char *)(v10 + *(unsigned int *)(a2 + 28));
        if ((unint64_t)v19 >= v9) {
          break;
        }
        uint64_t v20 = *(const void **)v10;
        int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)*(int *)(v10 + 8));
        if (Value)
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v20, Value);
          CFDictionaryValueCallBacks v22 = strdup(v19);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v20, v22);
          v19 += strlen(v22) + 1;
          if ((unint64_t)v19 >= v9) {
            break;
          }
        }
        uint64_t result = 0;
        ++v18;
        size_t v10 = (size_t)v19;
        if (v18 >= *(_DWORD *)(a2 + 24)) {
          return result;
        }
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t kthmap_prepass_stackshot(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = ktrace_chunk_tag((uint64_t)a2);
    switch(result)
    {
      case 0x51FE:
        goto LABEL_8;
      case 0x8002:
        uint64_t result = ktrace_chunk_version_major((uint64_t)a2);
        if (result > 1) {
          return result;
        }
        goto LABEL_8;
      case 0x9000:
        uint64_t result = ktrace_chunk_version_major((uint64_t)a2);
        if (!result)
        {
LABEL_8:
          v4[0] = MEMORY[0x1E4F143A8];
          v4[1] = 0x40000000;
          _OWORD v4[2] = __kthmap_prepass_stackshot_block_invoke;
          v4[3] = &__block_descriptor_tmp_11;
          v4[4] = v3;
          return ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v4);
        }
        break;
    }
  }
  return result;
}

void __kthmap_prepass_stackshot_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void kthmap_update_stackshot(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if ((*(unsigned char *)(a1 + 96) & 2) != 0) {
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 32));
  }
  uint64_t v6 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    uint64_t v7 = 0;
    int v37 = 0;
    uint64_t v8 = -1;
    size_t v9 = (os_log_t *)&ktrace_log;
    uint64_t v10 = -1;
    while (1)
    {
      uint64_t v11 = *(unsigned int *)(a2 + 4);
      if (v6 + v11 > a3) {
        return;
      }
      int v12 = *(_DWORD *)a2;
      unsigned int v13 = *(_DWORD *)a2 & 0xFFFFFFF0;
      if (v13 == 32) {
        int v14 = 17;
      }
      else {
        int v14 = *(_DWORD *)a2;
      }
      if (v14 > 2309)
      {
        if (v14 > 2334)
        {
          if (v14 == 2335)
          {
            set_thread_thread_group(a1, (const void *)v10, *(void **)(a2 + 16));
          }
          else if (v14 == 2337 && v7)
          {
            int v7[4] = *(void *)(a2 + 16);
          }
        }
        else if (v14 == 2310)
        {
          if ((*(unsigned char *)(a2 + 81) & 0x20) != 0 && v7) {
            CFSetAddValue(*(CFMutableSetRef *)(a1 + 88), *(const void **)(a2 + 16));
          }
        }
        else if (v14 == 2313)
        {
          BOOL v16 = v11 >= (*(_DWORD *)(a2 + 8) & 0xFu);
          int v17 = v11 - (*(_DWORD *)(a2 + 8) & 0xF);
          if (!v16) {
            int v17 = 0;
          }
          if (*(unsigned char *)(a2 + 16 + (v17 - 1)))
          {
            ktrace_log_init();
            if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG)) {
              kthmap_update_stackshot_cold_2(&v40, v41);
            }
          }
          else if (v10 != -1 && (*(unsigned char *)(a1 + 96) & 2) != 0)
          {
            rename_thread(a1, (const void *)v10);
          }
        }
        goto LABEL_93;
      }
      if (v14 <= 19) {
        break;
      }
      if (v14 == 20)
      {
        int v24 = v37;
        if (v37 == 2) {
          uint64_t v10 = -1;
        }
        --v37;
        if (v24 == 1)
        {
          uint64_t v8 = -1;
          uint64_t v7 = 0;
        }
        goto LABEL_93;
      }
      if (v14 == 2309 && v8 != -1)
      {
        BOOL v16 = v11 >= (*(_DWORD *)(a2 + 8) & 0xFu);
        unsigned int v18 = v11 - (*(_DWORD *)(a2 + 8) & 0xF);
        if (!v16) {
          unsigned int v18 = 0;
        }
        if (v18 <= 0x77)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG)) {
            kthmap_update_stackshot_cold_2(&v44, v45);
          }
          goto LABEL_93;
        }
        if (*(void *)(a2 + 16) != v8)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG)) {
            kthmap_update_stackshot_cold_2(&v42, v43);
          }
          goto LABEL_93;
        }
        int Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)*(int *)(a2 + 100));
        uint64_t v7 = Value;
        if ((*(unsigned char *)(a1 + 96) & 2) != 0)
        {
          if (!Value)
          {
            long long v30 = task_alloc(*(void *)(a2 + 16), *(_DWORD *)(a2 + 100), (const char *)(a2 + 104), 0x20uLL);
            if (!v30) {
              ktrace_postprocess_file_internal_cold_1();
            }
            uint64_t v7 = v30;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)*(int *)(a2 + 100), v30);
          }
          uint64_t v36 = v10;
          uint64_t v31 = *v7;
          if (*v7 == -1)
          {
            *uint64_t v7 = v8;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), (const void *)v8, v7);
            uint64_t v31 = *v7;
          }
          uint64_t v32 = (char *)v7[3];
          if (v31 == v8)
          {
            *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 + 100);
            if (!v32) {
              goto LABEL_91;
            }
            size_t v33 = strlen(v32);
            if (v33 < strnlen((const char *)(a2 + 104), 0x20uLL))
            {
              free(v32);
              v7[3] = 0;
              goto LABEL_91;
            }
          }
          else
          {
            if (v32)
            {
              free((void *)v7[3]);
              v7[3] = 0;
            }
            *(uint64_t *)((char *)v7 + 12) = -1;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 + 100);
LABEL_91:
            v7[3] = (uint64_t)strndup((const char *)(a2 + 104), 0x20uLL);
          }
LABEL_92:
          uint64_t v10 = v36;
        }
      }
LABEL_93:
      a2 = v6 + *(unsigned int *)(a2 + 4);
      uint64_t v6 = a2 + 16;
      if (a2 + 16 > a3) {
        return;
      }
    }
    if (v14 != 17)
    {
      if (v14 == 19)
      {
        if (v12 != 19 || v11 < 4 || v13 == 32)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG)) {
            kthmap_update_stackshot_cold_2(&v38, v39);
          }
        }
        else
        {
          int v15 = *(_DWORD *)(a2 + 16);
          ++v37;
          if (v15 == 2308)
          {
            uint64_t v10 = *(void *)(a2 + 8);
            if (v7 && (*(unsigned char *)(a1 + 96) & 2) != 0) {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), *(const void **)(a2 + 8), v7);
            }
          }
          else if (v15 == 2307)
          {
            uint64_t v8 = *(void *)(a2 + 8);
          }
        }
      }
      goto LABEL_93;
    }
    uint64_t v19 = *(void *)(a2 + 8);
    if (HIDWORD(v19) != 2334)
    {
      if (HIDWORD(v19) == 2336 && v19)
      {
        uint64_t v20 = v8;
        unint64_t v21 = v9;
        unint64_t v22 = 0;
        CFDictionaryValueCallBacks v23 = (uint64_t *)(a2 + 40);
        do
        {
          new_jetsam_coalition(a1, (const void *)*(v23 - 3), *(v23 - 2), *(v23 - 1), *v23);
          ++v22;
          v23 += 4;
        }
        while (v22 < *(unsigned int *)(a2 + 8));
        size_t v9 = v21;
        uint64_t v8 = v20;
      }
      goto LABEL_93;
    }
    if (v12 == 17 || !v19 || (v11 - (*(_DWORD *)a2 & 0xF)) / v19 < 0x20)
    {
      if (v19)
      {
        unint64_t v34 = 0;
        uint64_t v35 = (const void **)(a2 + 24);
        do
        {
          new_thread_group(a1, *(v35 - 1), v35);
          ++v34;
          v35 += 3;
        }
        while (v34 < *(unsigned int *)(a2 + 8));
      }
      size_t v9 = (os_log_t *)&ktrace_log;
      goto LABEL_93;
    }
    uint64_t v36 = v10;
    unint64_t v25 = 0;
    uint64_t v26 = a2 + 24;
    do
    {
      new_thread_group(a1, *(const void **)(v26 - 8), (unsigned char *)v26);
      uint64_t v27 = *(void *)(v26 + 16);
      uint64_t v28 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), *(const void **)(v26 - 8));
      if (v28) {
        v28[3] = v27 | 0x8000000000000000;
      }
      v26 += 32;
      ++v25;
    }
    while (v25 < *(unsigned int *)(a2 + 8));
    size_t v9 = (os_log_t *)&ktrace_log;
    goto LABEL_92;
  }
}

void kthmap_update(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v6 = *(const void **)(a2 + 40);
  }
  else {
    uint64_t v6 = (const void *)*(unsigned int *)(a2 + 24);
  }
  uint64_t v7 = 28;
  if (a3) {
    uint64_t v7 = 48;
  }
  int v8 = *(_DWORD *)(a2 + v7);
  signed int v9 = v8 & 0xFFFFFFFC;
  if ((*(unsigned char *)(a1 + 96) & 2) != 0)
  {
    if (v9 > 27721739)
    {
      if (v9 > 117440519)
      {
        if (v9 > 117506055)
        {
          if (v9 == 117506056)
          {
            if (a3) {
              size_t v33 = 32;
            }
            else {
              size_t v33 = 16;
            }
            rename_task_copy(a1, v6, (const char *)(a2 + 8), v33);
          }
          else if (v9 == 117506064)
          {
            if (a3) {
              uint64_t v30 = 32;
            }
            else {
              uint64_t v30 = 16;
            }
            if (v8) {
              rename_thread(a1, v6);
            }
            else {
              extend_thread_name(a1, v6, (const char *)(a2 + 8), v30);
            }
          }
        }
        else if (v9 == 117440520)
        {
          CFSetAddValue(*(CFMutableSetRef *)(a1 + 88), v6);
        }
        else if (v9 == 117506052)
        {
          uint64_t v41 = v6;
          value = (void *)-1;
          CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), v6, (const void **)&value);
          int v10 = (int)value;
          if (value != 0xFFFFFFFFLL)
          {
            value = 0;
            CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)v10, (const void **)&value);
            uint64_t v11 = value;
            if (value)
            {
              if (!*(unsigned char *)(a2 + 8)) {
                goto LABEL_116;
              }
              int v12 = (void *)*((void *)value + 3);
              if (v12) {
                free(v12);
              }
              if (a3) {
                size_t v13 = 32;
              }
              else {
                size_t v13 = 16;
              }
              v11[3] = strndup((const char *)(a2 + 8), v13);
            }
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), &v41);
          }
        }
        goto LABEL_116;
      }
      if (v9 != 27721740)
      {
        if (v9 != 27721744)
        {
          if (v9 == 117440516)
          {
            if (a3)
            {
              int v14 = *(const void **)(a2 + 8);
              int v15 = *(_DWORD *)(a2 + 16);
              BOOL v16 = *(char **)(a2 + 32);
            }
            else
            {
              int v14 = (const void *)*(unsigned int *)(a2 + 8);
              int v15 = *(_DWORD *)(a2 + 12);
              BOOL v16 = (char *)*(unsigned int *)(a2 + 20);
            }
            new_thread((CFDictionaryRef *)a1, v14, v15, v6);
            if ((unint64_t)(v16 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v34 = (void **)ktrace_thread_map_task_for_thread(a1, v14);
              if (v34)
              {
                uint64_t v35 = v34;
                if (*v34 == (void *)-1) {
                  set_task_unique_id(a1, v34, v16);
                }
                if (v35[4] == (void *)-1) {
                  v35[4] = (void *)get_jetsam_coalition_for_tid(a1, v6);
                }
                if (v16 != *v35)
                {
                  ktrace_log_init();
                  uint64_t v36 = ktrace_log;
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
                    kthmap_update_cold_2(v36);
                  }
                }
              }
              else
              {
                int v37 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                  kthmap_update_cold_1();
                }
                *__error() = v37;
              }
            }
          }
          goto LABEL_116;
        }
        goto LABEL_59;
      }
      goto LABEL_56;
    }
    if (v9 <= 27656211)
    {
      if (v9 == 27656192)
      {
LABEL_50:
        if (a3) {
          uint64_t v19 = *(const void **)(a2 + 8);
        }
        else {
          uint64_t v19 = (const void *)*(unsigned int *)(a2 + 8);
        }
        new_thread_group(a1, v19, "");
        goto LABEL_116;
      }
      if (v9 == 27656200)
      {
LABEL_52:
        if (a3)
        {
          unint64_t v21 = *(void **)(a2 + 16);
          uint64_t v20 = *(const void **)(a2 + 24);
        }
        else
        {
          unint64_t v21 = (void *)*(unsigned int *)(a2 + 12);
          uint64_t v20 = (const void *)*(unsigned int *)(a2 + 16);
        }
        set_thread_thread_group(a1, v20, v21);
        goto LABEL_116;
      }
      if (v9 != 27656204) {
        goto LABEL_116;
      }
LABEL_54:
      if (a3) {
        unint64_t v22 = *(const void **)(a2 + 8);
      }
      else {
        unint64_t v22 = (const void *)*(unsigned int *)(a2 + 8);
      }
      if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v22)) {
        __strlcpy_chk();
      }
      goto LABEL_116;
    }
    if (v9 == 27656212)
    {
LABEL_62:
      if (a3)
      {
        uint64_t v26 = *(const void **)(a2 + 8);
        uint64_t v27 = *(void *)(a2 + 16);
      }
      else
      {
        uint64_t v26 = (const void *)*(unsigned int *)(a2 + 8);
        uint64_t v27 = *(unsigned int *)(a2 + 12);
      }
      thread_group_set_flags(a1, v26, v27);
      goto LABEL_116;
    }
  }
  else
  {
    if (v9 <= 27721727)
    {
      if (v9 <= 27656203)
      {
        if (v9 != 27656192)
        {
          if (v9 != 27656200) {
            goto LABEL_116;
          }
          goto LABEL_52;
        }
        goto LABEL_50;
      }
      if (v9 != 27656204)
      {
        if (v9 != 27656212) {
          goto LABEL_116;
        }
        goto LABEL_62;
      }
      goto LABEL_54;
    }
    if (v9 > 27721739)
    {
      if (v9 != 27721740)
      {
        if (v9 != 27721744) {
          goto LABEL_116;
        }
LABEL_59:
        if (a3)
        {
          CFDictionaryValueCallBacks v23 = (CFDictionaryRef *)(a1 + 80);
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8))) {
            goto LABEL_116;
          }
          int v24 = *(const void **)(a2 + 8);
          uint64_t v25 = *(void *)(a2 + 24);
        }
        else
        {
          CFDictionaryValueCallBacks v23 = (CFDictionaryRef *)(a1 + 80);
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8))) {
            goto LABEL_116;
          }
          int v24 = (const void *)*(unsigned int *)(a2 + 8);
          uint64_t v25 = *(unsigned int *)(a2 + 16);
        }
        uint64_t v32 = CFDictionaryGetValue(*v23, v24);
        if (v32) {
          v32[2] = v25;
        }
        goto LABEL_116;
      }
LABEL_56:
      if (a3)
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8))) {
          goto LABEL_116;
        }
        int v17 = *(void **)(a2 + 16);
      }
      else
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8))) {
          goto LABEL_116;
        }
        int v17 = (void *)*(unsigned int *)(a2 + 12);
      }
      uint64_t v31 = a1;
      uint64_t v18 = -1;
      goto LABEL_87;
    }
  }
  if (v9 != 27721728)
  {
    if (v9 != 27721736) {
      goto LABEL_116;
    }
    if (a3)
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8))) {
        goto LABEL_116;
      }
      uint64_t v18 = *(void *)(a2 + 8);
      int v17 = *(void **)(a2 + 16);
    }
    else
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8))) {
        goto LABEL_116;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      int v17 = (void *)*(unsigned int *)(a2 + 12);
    }
    uint64_t v31 = a1;
LABEL_87:
    set_task_jetsam_coalition(v31, v17, v18);
    goto LABEL_116;
  }
  if (a3)
  {
    if (*(void *)(a2 + 16) != 1) {
      goto LABEL_116;
    }
    uint64_t v28 = *(const void **)(a2 + 8);
    uint64_t v29 = *(void *)(a2 + 24);
  }
  else
  {
    if (*(_DWORD *)(a2 + 12) != 1) {
      goto LABEL_116;
    }
    uint64_t v29 = *(unsigned int *)(a2 + 16);
    uint64_t v28 = (const void *)*(unsigned int *)(a2 + 8);
  }
  new_jetsam_coalition(a1, v28, 0, v29, 0);
LABEL_116:
  if ((*(unsigned char *)(a1 + 96) & 1) == 0) {
    return;
  }
  if (v9 == 27656196)
  {
    if (a3) {
      int v39 = *(const void **)(a2 + 8);
    }
    else {
      int v39 = (const void *)*(unsigned int *)(a2 + 8);
    }
    delete_thread_group(a1, v39);
  }
  else
  {
    if (v9 == 27721732)
    {
      if (a3)
      {
        if (*(void *)(a2 + 16) != 1) {
          return;
        }
        char v40 = *(const void **)(a2 + 8);
      }
      else
      {
        if (*(_DWORD *)(a2 + 12) != 1) {
          return;
        }
        char v40 = (const void *)*(unsigned int *)(a2 + 8);
      }
      delete_jetsam_coalition(a1, v40);
      return;
    }
    if (v9 == 117440524 && (*(unsigned char *)(a1 + 96) & 2) != 0)
    {
      if (a3) {
        char v38 = *(const void **)(a2 + 8);
      }
      else {
        char v38 = (const void *)*(unsigned int *)(a2 + 8);
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), v38);
    }
  }
}

void new_thread(CFDictionaryRef *a1, const void *a2, int a3, const void *a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v8 = (const void *)a3;
  int Value = CFDictionaryGetValue(a1[2], (const void *)a3);
  if (!Value)
  {
    int v10 = (char *)malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
    if (!v10) {
      return;
    }
    int Value = v10;
    *(void *)int v10 = -1;
    *((_DWORD *)v10 + 2) = a3;
    *(void *)(v10 + 12) = -1;
    *((void *)v10 + 3) = 0;
    *((void *)v10 + 4) = -1;
    CFDictionarySetValue(a1[2], v8, v10);
  }
  CFDictionarySetValue(a1[4], a2, Value);
  if (a4 != (const void *)-1)
  {
    CFDictionarySetValue(a1[7], a4, v8);
    uint64_t v11 = a1[6];
    CFDictionarySetValue(v11, a2, a4);
  }
}

void *ktrace_thread_map_task_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  return value;
}

void set_task_unique_id(uint64_t a1, void *a2, void *key)
{
  value = 0;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (*a2 != -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *a2 = key;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), key, (const void **)&value)) {
    a2[4] = *((void *)value + 4);
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), key, a2);
}

uint64_t get_jetsam_coalition_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *((void *)value + 4);
  }
  else {
    return -1;
  }
}

char *rename_task_copy(uint64_t a1, const void *a2, const char *a3, size_t a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  uint64_t result = (char *)CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  uint64_t v7 = value;
  if (value)
  {
    int v8 = (void *)*((void *)value + 3);
    if (v8) {
      free(v8);
    }
    uint64_t result = strndup(a3, a4);
    v7[3] = result;
  }
  return result;
}

void rename_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v4 = malloc_type_malloc(0x40uLL, 0xD27CCDA5uLL);
  __strlcpy_chk();
  int v5 = *(__CFDictionary **)(a1 + 40);

  CFDictionarySetValue(v5, a2, v4);
}

const char *extend_thread_name(uint64_t a1, const void *a2, const char *a3, uint64_t a4)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = (const char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = (const char *)strlen(result);
    uint64_t v8 = (unint64_t)&result[a4 - 64] >= 0xFFFFFFFFFFFFFFBFLL ? a4 : 63 - (void)result;
    if (v8)
    {
      signed int v9 = (char *)&result[(void)v7];
      return (const char *)strlcpy(v9, a3, v8 + 1);
    }
  }
  return result;
}

void new_jetsam_coalition(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), a2))
  {
    int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), a2);
    if (Value)
    {
      *int Value = a2;
      Value[1] = a3;
      Value[2] = a4;
      Value[3] = a5;
    }
  }
  else
  {
    uint64_t v11 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
    if (!v11) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int v12 = v11;
    *uint64_t v11 = a2;
    v11[1] = a3;
    void v11[2] = a4;
    v11[3] = a5;
    size_t v13 = *(__CFDictionary **)(a1 + 80);
    CFDictionarySetValue(v13, a2, v12);
  }
}

void set_task_jetsam_coalition(uint64_t a1, void *key, uint64_t a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (key != (void *)-1)
  {
    value = 0;
    CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), key, (const void **)&value);
    if (value)
    {
      *((void *)value + 4) = a3;
    }
    else
    {
      uint64_t v6 = malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
      if (v6)
      {
        v6[3] = 0;
        *uint64_t v6 = key;
        v6[1] = -1;
        *((_DWORD *)v6 + 4) = -1;
      }
      v6[4] = a3;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), key, v6);
    }
  }
}

void *new_thread_group(uint64_t a1, const void *a2, unsigned char *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
  {
    uint64_t v7 = Value;
    *int Value = a2;
    if (*a3) {
      __strlcpy_chk();
    }
  }
  else
  {
    uint64_t v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
    if (!v8) {
      ktrace_postprocess_file_internal_cold_1();
    }
    uint64_t v7 = v8;
    *uint64_t v8 = a2;
    __strlcpy_chk();
    v7[3] = 0;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), a2, v7);
  }
  return v7;
}

void set_thread_thread_group(uint64_t a1, const void *a2, void *key)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
  if (Value || (int Value = new_thread_group(a1, key, "")) != 0)
  {
    uint64_t v7 = *(__CFDictionary **)(a1 + 72);
    CFDictionarySetValue(v7, a2, Value);
  }
}

void *thread_group_set_flags(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (result) {
    result[3] = a3 | 0x8000000000000000;
  }
  return result;
}

void delete_jetsam_coalition(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableDictionaryRef v2 = *(__CFDictionary **)(a1 + 80);

  CFDictionaryRemoveValue(v2, a2);
}

void delete_thread_group(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableDictionaryRef v2 = *(__CFDictionary **)(a1 + 64);

  CFDictionaryRemoveValue(v2, a2);
}

uint64_t ktrace_thread_map_pid_for_parent_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = (void *)-1;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), a2, (const void **)&value);
  return value;
}

void *ktrace_thread_map_task_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  return value;
}

uint64_t kthmap_name_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  if (value) {
    return *((void *)value + 3);
  }
  else {
    return 0;
  }
}

uint64_t kthmap_jetsam_coalition_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *((void *)value + 4);
  }
  else {
    return -1;
  }
}

uint64_t kthmap_jetsam_coalition_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  if (value) {
    return *((void *)value + 4);
  }
  else {
    return -1;
  }
}

const void *kthmap_thread_name_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);

  return CFDictionaryGetValue(v2, a2);
}

uint64_t kthmap_thread_group_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
  if (Value) {
    return *(void *)Value;
  }
  else {
    return -1;
  }
}

char *kthmap_name_for_thread_group(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value) {
    return Value + 8;
  }
  else {
    return 0;
  }
}

uint64_t kthmap_flags_for_thread_group(uint64_t a1, const void *a2, uint64_t *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (!Value) {
    return 2;
  }
  uint64_t v5 = Value[3];
  if ((v5 & 0x8000000000000000) == 0) {
    return 91;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = v5 & 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t kthmap_pid_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *((unsigned int *)value + 2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t kthmap_uniqueid_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *(void *)value;
  }
  else {
    return -1;
  }
}

uint64_t kthmap_pid_name_for_tid(uint64_t a1, const void *a2, void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value)
  {
    uint64_t v4 = *((void *)value + 3);
    uint64_t result = *((unsigned int *)value + 2);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = 0xFFFFFFFFLL;
  }
  *a3 = v4;
  return result;
}

uint64_t kthmap_process_name_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *((void *)value + 3);
  }
  else {
    return 0;
  }
}

void ktrace_thread_map_update_prepass(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v5 = *(const void **)(a2 + 40);
  }
  else {
    uint64_t v5 = (const void *)*(unsigned int *)(a2 + 24);
  }
  uint64_t v6 = 28;
  if (a3) {
    uint64_t v6 = 48;
  }
  signed int v7 = *(_DWORD *)(a2 + v6) & 0xFFFFFFFC;
  if ((*(unsigned char *)(a1 + 96) & 2) == 0)
  {
    if (v7 <= 27721727)
    {
      if (v7 > 27656207)
      {
        if (v7 != 27656208)
        {
          if (v7 != 27656212) {
            return;
          }
LABEL_49:
          if (a3)
          {
            int v14 = *(const void **)(a2 + 8);
            uint64_t v15 = *(void *)(a2 + 24);
            thread_group_set_flags(a1, v14, v15);
            return;
          }
          int v20 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_84;
          }
LABEL_85:
          *__error() = v20;
          return;
        }
        goto LABEL_45;
      }
      goto LABEL_29;
    }
    if (v7 <= 27721735)
    {
      if (v7 != 27721728)
      {
        if (v7 != 27721732) {
          return;
        }
        goto LABEL_60;
      }
LABEL_53:
      if (a3)
      {
        if (*(void *)(a2 + 16) != 1) {
          return;
        }
        BOOL v16 = *(const void **)(a2 + 8);
      }
      else
      {
        if (*(_DWORD *)(a2 + 12) != 1) {
          return;
        }
        BOOL v16 = (const void *)*(unsigned int *)(a2 + 8);
      }
      delete_jetsam_coalition(a1, v16);
      return;
    }
    if (v7 != 27721736)
    {
      if (v7 != 27721740) {
        return;
      }
LABEL_37:
      if (a3)
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8))) {
          return;
        }
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v11 = *(void **)(a2 + 16);
      }
      else
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8))) {
          return;
        }
        uint64_t v12 = *(unsigned int *)(a2 + 8);
        uint64_t v11 = (void *)*(unsigned int *)(a2 + 12);
      }
      uint64_t v21 = a1;
LABEL_71:
      set_task_jetsam_coalition(v21, v11, v12);
      return;
    }
    goto LABEL_42;
  }
  if (v7 > 27721731)
  {
    if (v7 > 27721739)
    {
      if (v7 != 27721740)
      {
        if (v7 == 117506060)
        {
          if (a3) {
            size_t v23 = 32;
          }
          else {
            size_t v23 = 16;
          }
          rename_task_copy(a1, v5, (const char *)(a2 + 8), v23);
        }
        else if (v7 == 117440528)
        {
          int v8 = *(_DWORD *)(a2 + 8);
          new_thread((CFDictionaryRef *)a1, v5, v8, (const void *)0xFFFFFFFFFFFFFFFFLL);
        }
        return;
      }
      goto LABEL_37;
    }
    if (v7 == 27721732)
    {
LABEL_60:
      if (a3)
      {
        if (*(void *)(a2 + 16) != 1) {
          return;
        }
        uint64_t v18 = *(const void **)(a2 + 8);
        uint64_t v19 = *(void *)(a2 + 24);
      }
      else
      {
        if (*(_DWORD *)(a2 + 12) != 1) {
          return;
        }
        uint64_t v19 = *(unsigned int *)(a2 + 16);
        uint64_t v18 = (const void *)*(unsigned int *)(a2 + 8);
      }
      int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), v18);
      if (Value)
      {
        *int Value = v18;
        Value[1] = 0;
        Value[2] = v19;
        Value[3] = 0;
      }
      return;
    }
    if (v7 != 27721736) {
      return;
    }
LABEL_42:
    if (a3)
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8))) {
        return;
      }
      uint64_t v11 = *(void **)(a2 + 16);
    }
    else
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8))) {
        return;
      }
      uint64_t v11 = (void *)*(unsigned int *)(a2 + 12);
    }
    uint64_t v21 = a1;
    uint64_t v12 = -1;
    goto LABEL_71;
  }
  if (v7 > 27656207)
  {
    if (v7 == 27656208)
    {
LABEL_45:
      if (a3)
      {
        size_t v13 = *(const void **)(a2 + 8);
        new_thread_group(a1, v13, (unsigned char *)(a2 + 16));
        return;
      }
      int v20 = *__error();
      ktrace_log_init();
      if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
LABEL_84:
      ktrace_thread_map_update_prepass_cold_1();
      goto LABEL_85;
    }
    if (v7 == 27656212) {
      goto LABEL_49;
    }
    if (v7 != 27721728) {
      return;
    }
    goto LABEL_53;
  }
LABEL_29:
  if (v7 == 27656192)
  {
    if (!a3)
    {
      int v20 = *__error();
      ktrace_log_init();
      if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }
    int v17 = *(const void **)(a2 + 8);
    delete_thread_group(a1, v17);
  }
  else
  {
    if (v7 != 27656200) {
      return;
    }
    if (!a3)
    {
      int v20 = *__error();
      ktrace_log_init();
      if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }
    signed int v9 = *(const void **)(a2 + 24);
    int v10 = *(void **)(a2 + 8);
    set_thread_thread_group(a1, v9, v10);
  }
}

unint64_t ktrace_thread_map_estimate_threads(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (ktrace_chunk_tag(a1) != 7424) {
    return 0;
  }
  unint64_t v2 = ktrace_chunk_size(a1);
  if (ktrace_chunk_is_64_bit(a1)) {
    return v2 >> 5;
  }
  else {
    return v2 / 0x1C;
  }
}

BOOL kthmap_tid_is_main_thread(uint64_t a1, const void *a2)
{
  return CFSetGetValue(*(CFSetRef *)(a1 + 88), a2) != 0;
}

void *task_alloc(uint64_t a1, int a2, const char *a3, size_t a4)
{
  int v8 = malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
  signed int v9 = v8;
  if (v8)
  {
    if (a3)
    {
      int v10 = strndup(a3, a4);
      v9[3] = v10;
      if (!v10)
      {
        free(v9);
        return 0;
      }
    }
    else
    {
      v8[3] = 0;
    }
    *signed int v9 = a1;
    *((_DWORD *)v9 + 2) = a2;
    *(void *)((char *)v9 + 12) = -1;
    v9[4] = -1;
  }
  return v9;
}

void kthmap_iterate_threads(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 32);
  context[0] = MEMORY[0x1E4F143A8];
  context[1] = 0x40000000;
  context[2] = __kthmap_iterate_threads_block_invoke;
  context[3] = &unk_1E6062980;
  context[4] = a2;
  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
}

uint64_t __kthmap_iterate_threads_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t kthmap_read_catalog(uint64_t a1, uint64_t a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = __kthmap_read_catalog_block_invoke;
  v4[3] = &__block_descriptor_tmp_7_2;
  v4[4] = a1;
  ktrace_catalog_iterate_processes(a2, (uint64_t)v4);
  *(unsigned char *)(a1 + 96) &= ~2u;
  return a1;
}

uint64_t __kthmap_read_catalog_block_invoke(uint64_t a1, void *a2)
{
  name = (const char *)ktrace_process_last_name(a2);
  if (name)
  {
    uint64_t v5 = name;
    size_t v6 = strlen(name);
    int v7 = ktrace_process_id(a2);
    int v8 = (const void *)ktrace_process_unique_id(a2);
    int Value = (const void **)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 16), (const void *)v7);
    if (!Value)
    {
      int v10 = (const void **)task_alloc((uint64_t)v8, v7, v5, v6);
      if (!v10) {
        ktrace_postprocess_file_internal_cold_1();
      }
      int Value = v10;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 16), (const void *)v7, v10);
    }
    uint64_t v11 = *Value;
    if (*Value == (const void *)-1)
    {
      *int Value = v8;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 24), v8, Value);
      uint64_t v11 = *Value;
    }
    uint64_t v12 = (char *)Value[3];
    if (v11 == v8)
    {
      *((_DWORD *)Value + 2) = v7;
      if (v12)
      {
        if (strlen(v12) >= v6)
        {
LABEL_15:
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 0x40000000;
          void v14[2] = __kthmap_read_catalog_block_invoke_2;
          v14[3] = &__block_descriptor_tmp_5_2;
          v14[4] = *(void *)(a1 + 32);
          void v14[5] = Value;
          ktrace_process_iterate_threads(a2, (uint64_t)v14);
          return 1;
        }
        free(v12);
        Value[3] = 0;
      }
    }
    else
    {
      if (v12)
      {
        free((void *)Value[3]);
        Value[3] = 0;
      }
      *(const void **)((char *)Value + 12) = (const void *)-1;
      *((_DWORD *)Value + 2) = v7;
    }
    Value[3] = strdup(v5);
    goto LABEL_15;
  }
  return 1;
}

uint64_t __kthmap_read_catalog_block_invoke_2(uint64_t a1, void *a2)
{
  name = (const char *)ktrace_thread_last_name(a2);
  if (name)
  {
    strlen(name);
    uint64_t v5 = *(void *)(a1 + 32);
    size_t v6 = (const void *)ktrace_thread_id(a2);
    rename_thread(v5, v6);
  }
  int v7 = *(__CFDictionary **)(*(void *)(a1 + 32) + 32);
  int v8 = (const void *)ktrace_thread_id(a2);
  CFDictionarySetValue(v7, v8, *(const void **)(a1 + 40));
  return 1;
}

CFDataRef create_dictionary(UInt8 *bytes, CFIndex length)
{
  CFDataRef v2 = CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (v2)
  {
    CFDataRef v3 = v2;
    CFDataRef v4 = (const __CFData *)CFPropertyListCreateWithData(0, v2, 0, 0, 0);
    if (v4)
    {
      CFDataRef v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFDictionaryGetTypeID())
      {
        CFRelease(v3);
        return v5;
      }
      int v10 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        create_dictionary_cold_3();
      }
      *__error() = v10;
      CFRelease(v3);
      CFDataRef v9 = v5;
    }
    else
    {
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        create_dictionary_cold_2();
      }
      *__error() = v8;
      CFDataRef v9 = v3;
    }
    CFRelease(v9);
    return 0;
  }
  int v7 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    create_dictionary_cold_1();
  }
  CFDataRef v5 = 0;
  *__error() = v7;
  return v5;
}

void ariadne_thread_dict_apply(const __CFString *a1, const __CFDictionary *a2, CFDictionaryRef *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFStringRef theString = 0;
  value = 0;
  int valuePtr = 0;
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  int v7 = (char *)CStringPtr;
  if (!CStringPtr)
  {
    CFIndex v8 = CFStringGetLength(a1) + 1;
    CFDataRef v9 = (char *)malloc_type_malloc(v8, 0xAD710C5BuLL);
    if (!v9) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int v7 = v9;
    if (!CFStringGetCString(a1, v9, v8, 0x8000100u)) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  __endptr[0] = 0;
  unint64_t v10 = strtoull(v7, __endptr, 0);
  if (v7 == __endptr[0])
  {
    int v12 = *__error();
    uint64_t v11 = -1;
    if (CStringPtr)
    {
LABEL_6:
      if (v12) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v11 = v10;
    int v12 = 0;
    if (CStringPtr) {
      goto LABEL_6;
    }
  }
  free(v7);
  if (v12)
  {
LABEL_7:
    int v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ariadne_thread_dict_apply_cold_4();
    }
LABEL_9:
    *__error() = v13;
    return;
  }
LABEL_13:
  if (v11 == -1) {
    _os_assumes_log();
  }
  if (!CFDictionaryGetValueIfPresent(a2, @"PID", (const void **)&value))
  {
    int v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ariadne_thread_dict_apply_cold_3();
    }
    goto LABEL_9;
  }
  if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
  {
    new_thread(a3, (const void *)v11, valuePtr, (const void *)0xFFFFFFFFFFFFFFFFLL);
    if (CFDictionaryGetValueIfPresent(a2, @"Name", (const void **)&theString))
    {
      char v21 = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      *(_OWORD *)__endptr = 0u;
      long long v18 = 0u;
      if (CFStringGetCString(theString, (char *)__endptr, 65, 0x8000100u))
      {
        strlen((const char *)__endptr);
        rename_thread((uint64_t)a3, (const void *)v11);
      }
    }
  }
}

void _ariadne_process_dict_apply(const __CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  CFStringRef theString = 0;
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  int v7 = (char *)CStringPtr;
  if (!CStringPtr)
  {
    CFIndex v8 = CFStringGetLength(a1) + 1;
    CFDataRef v9 = (char *)malloc_type_malloc(v8, 0x899DF4E3uLL);
    if (!v9) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int v7 = v9;
    if (!CFStringGetCString(a1, v9, v8, 0x8000100u)) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  __endptr = 0;
  uint64_t v10 = strtol(v7, &__endptr, 0);
  if (v7 == __endptr)
  {
    int v12 = *__error();
    int v11 = -1;
    if (CStringPtr) {
      goto LABEL_12;
    }
  }
  else
  {
    if ((int)v10 == v10) {
      int v11 = v10;
    }
    else {
      int v11 = -1;
    }
    if ((int)v10 == v10) {
      int v12 = 0;
    }
    else {
      int v12 = 34;
    }
    if (CStringPtr)
    {
LABEL_12:
      if (v12) {
        return;
      }
      goto LABEL_16;
    }
  }
  free(v7);
  if (v12) {
    return;
  }
LABEL_16:
  if (v11 == -1) {
    _os_assumes_log();
  }
  if (CFDictionaryGetValueIfPresent(a2, @"Name", (const void **)&theString))
  {
    CFIndex v13 = CFStringGetLength(theString) + 1;
    int v14 = (char *)malloc_type_malloc(v13, 0xDF3A1DAEuLL);
    if (!v14) {
      return;
    }
    uint64_t v15 = v14;
    if (CFStringGetCString(theString, v14, v13, 0x8000100u))
    {
      if (!a3) {
        ktrace_postprocess_file_internal_cold_1();
      }
      int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), (const void *)v11);
      if (Value) {
        goto LABEL_25;
      }
      int v17 = malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
      if (v17)
      {
        int Value = v17;
        *int v17 = -1;
        *((_DWORD *)v17 + 2) = v11;
        *(void *)((char *)v17 + 12) = -1;
        v17[3] = 0;
        _OWORD v17[4] = -1;
LABEL_25:
        if (v11) {
          uint64_t v18 = -1;
        }
        else {
          uint64_t v18 = 0;
        }
        *int Value = v18;
        Value[3] = v15;
        Value[4] = 0;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), (const void *)v11, Value);
        return;
      }
    }
    free(v15);
    return;
  }
  int v19 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    _ariadne_process_dict_apply_cold_3();
  }
  *__error() = v19;
}

uint64_t insert_legacy_entry_internal(uint64_t a1, const void *a2, BOOL a3, char *__s1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a3) {
    a3 = strcmp(__s1, "kernel_task") != 0;
  }
  BOOL v7 = a3;
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)a3);
  if (Value)
  {
    CFDataRef v9 = Value;
    if (!*((void *)Value + 3)) {
      *((void *)Value + 3) = strndup(__s1, 0x14uLL);
    }
    goto LABEL_9;
  }
  uint64_t v10 = task_alloc(-1, v7, __s1, 0x14uLL);
  if (v10)
  {
    CFDataRef v9 = v10;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)v7, v10);
LABEL_9:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v9);
    return 0;
  }
  return 12;
}

void OUTLINED_FUNCTION_2_1(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

unsigned char *OUTLINED_FUNCTION_3_0(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = 0;
  *a2 = 0;
  return result;
}

void ktrace_address_space_create(int a1)
{
  ktrace_log_init();
  if (ktrace_register_types(void)::once != -1) {
    dispatch_once(&ktrace_register_types(void)::once, &__block_literal_global_142);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_DWORD *)(Instance + 32) = a1;
    *(void *)(Instance + 24) = 0;
    operator new();
  }
  ktrace_postprocess_file_internal_cold_1();
}

void *ktrace_uuid_map_create(uint64_t a1, uint64_t a2)
{
  ktrace_log_init();
  if (ktrace_register_types(void)::once != -1) {
    dispatch_once(&ktrace_register_types(void)::once, &__block_literal_global_142);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = (void *)Instance;
  if (Instance)
  {
    unint64_t v11 = 4294901759;
    unint64_t v12 = 0xFFFFFF8000000000;
    uint64_t v13 = -4097;
    if (a2)
    {
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = __ktrace_uuid_map_create_block_invoke;
      v19[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
      v19[4] = Instance;
      ktrace_file_iterate(a2, 0, (uint64_t)v19, v5, v6, v7, v8, v9);
      if (!*(unsigned char *)(a2 + 298))
      {
        uint64_t v13 = 4294901759;
        unint64_t v12 = 0x80000000;
      }
    }
    v10[34] = 0;
    if (a1)
    {
      v10[34] = *(_DWORD *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 204) << 24) | ((unint64_t)*(unsigned int *)(a1 + 196) << 32);
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = &v21;
      uint64_t v23 = 0x2020000000;
      char v24 = 0;
      if (!a2)
      {
        _Block_object_dispose(&v21, 8);
        goto LABEL_25;
      }
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke;
      v20[3] = &unk_1E6061C78;
      v20[4] = &v21;
      v20[5] = v10 + 34;
      ktrace_file_iterate(a2, 0, (uint64_t)v20, v5, v6, v7, v8, v9);
      int v16 = *((unsigned __int8 *)v22 + 24);
      _Block_object_dispose(&v21, 8);
      if (!v16)
      {
LABEL_25:
        v10[32] = v12;
        unint64_t v11 = v13;
        goto LABEL_26;
      }
    }
    if (CSArchitectureIsArm64())
    {
      unint64_t v12 = 0xFFFFFFE000000000;
      unint64_t v11 = 0xFFFFFFF27FFFFFFFLL;
      if (!a1) {
        goto LABEL_23;
      }
LABEL_14:
      unint64_t v14 = *(void *)(a1 + 16);
      if (v14 == -1) {
        unint64_t v14 = v12;
      }
      v10[32] = v14;
      unint64_t v15 = *(void *)(a1 + 24);
      if (v15)
      {
LABEL_27:
        v10[33] = v15;
        void v10[2] = 0;
        operator new();
      }
LABEL_26:
      unint64_t v15 = v11;
      goto LABEL_27;
    }
    if (CSArchitectureIsArm())
    {
      unint64_t v12 = 0x80000000;
      if (a1) {
        goto LABEL_14;
      }
      goto LABEL_23;
    }
    if (CSArchitectureIsX86_64())
    {
      unint64_t v12 = 0xFFFFFF8000000000;
      unint64_t v11 = -4097;
      if (a1) {
        goto LABEL_14;
      }
LABEL_23:
      uint64_t v13 = v11;
      goto LABEL_25;
    }
    uint64_t v18 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_create_cold_1(a1 == 0, a1, v18);
    }
    CFRelease(v10);
    return 0;
  }
  return v10;
}

void sub_1B39DE544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_uuid_map_create_block_invoke(uint64_t a1, uint64_t a2)
{
  if (ktrace_chunk_tag(a2) >= 0x9000 && ktrace_chunk_tag(a2) >> 13 <= 4) {
    *(unsigned char *)(*(void *)(a1 + 32) + 288) = 1;
  }
  if (ktrace_chunk_tag(a2) >= 0x5000 && ktrace_chunk_tag(a2) >> 13 <= 2) {
    *(unsigned char *)(*(void *)(a1 + 32) + 289) = 1;
  }
  return 1;
}

BOOL ktrace_uuid_map_plausible_kernel_address(BOOL result, unint64_t a2)
{
  if (result) {
    return *(void *)(result + 256) <= a2 && *(void *)(result + 264) >= a2;
  }
  return result;
}

void ktrace_address_space_append(uint64_t a1, uint64_t a2)
{
  if (*(_OWORD *)a2 == 0)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      ktrace_address_space_append();
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 16) == 3)
    {
      if ((*(unsigned char *)(a1 + 36) & 2) != 0)
      {
        uint64_t v6 = *(uint64_t **)(a1 + 16);
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        while (v8 != v7)
        {
          if (*(_DWORD *)(v8 + 16) == 3)
          {
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
              ktrace_address_space_append();
            }
            return;
          }
          v8 += 96;
        }
      }
      *(unsigned char *)(a1 + 36) |= 2u;
    }
    CFDataRef v3 = *(uint64_t **)(a1 + 16);
    unint64_t v4 = v3[1];
    if (v4 >= v3[2])
    {
      uint64_t v5 = std::vector<SymbolOwner>::__push_back_slow_path<SymbolOwner const&>(v3, (_OWORD *)a2);
    }
    else
    {
      std::vector<SymbolOwner>::__construct_one_at_end[abi:ne180100]<SymbolOwner const&>((uint64_t)v3, (_OWORD *)a2);
      uint64_t v5 = v4 + 96;
    }
    v3[1] = v5;
    *(unsigned char *)(a1 + 36) &= ~1u;
  }
}

void ktrace_address_space_sort(uint64_t a1, __n128 a2)
{
  if ((*(unsigned char *)(a1 + 36) & 1) == 0)
  {
    CFDataRef v3 = *(long long ***)(a1 + 16);
    unint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    unint64_t v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*v3) >> 5));
    uint64_t v8 = ktrace_compare_symbol_owners;
    if (v5 == v4) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>(v4, v5, (uint64_t (**)(long long *, long long *))&v8, v7, 1, a2);
    *(unsigned char *)(a1 + 36) |= 1u;
  }
}

BOOL ktrace_compare_symbol_owners(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 48) < *(void *)(a2 + 48);
}

uint64_t ktrace_address_space_symbol_owner_for_address(uint64_t a1, unint64_t a2, __n128 a3)
{
  ktrace_address_space_sort(a1, a3);
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  while (1)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5);
    if (!v8) {
      return 0;
    }
    if (v8 == 1) {
      break;
    }
    if (*(void *)(v7 + 96 * ((v6 - v7) / 192) + 48) <= a2) {
      v7 += 96 * ((v6 - v7) / 192);
    }
    else {
      uint64_t v6 = v7 + 96 * ((v6 - v7) / 192);
    }
  }
  unint64_t v9 = *(void *)(v7 + 48);
  BOOL v10 = a2 >= v9;
  unint64_t v11 = a2 - v9;
  if (!v10) {
    return 0;
  }
  if (*(void *)(v7 + 56))
  {
    if (v11 < optional_uint64::value((optional_uint64 *)(v7 + 56))) {
      return v7;
    }
    return 0;
  }
  if (HIDWORD(v11) && *(_DWORD *)(v7 + 16) != 4) {
    return 0;
  }
  return v7;
}

uint64_t optional_uint64::value(optional_uint64 *this)
{
  if (!*(void *)this) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(void *)this - 1;
}

void ktrace_address_space_from_stackshot(kcdata_iter a1)
{
}

void sub_1B39DF3A4(_Unwind_Exception *a1)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)(v1 - 192));
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_update_with_stackshot(uint64_t a1, kcdata_iter a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  kcdata_item_t v2 = a2.item + 1;
  if (&a2.item[1] <= a2.end)
  {
    if (a1)
    {
      kcdata_item_t item = a2.item;
      if ((void *)((unint64_t)v2 + a2.item->size) <= a2.end)
      {
        kcdata_item_t v20 = 0;
        int v4 = 0;
        do
        {
          uint64_t size = item->size;
          if ((void *)((unint64_t)v2 + size) > a2.end) {
            break;
          }
          uint32_t type = item->type;
          unsigned int v7 = item->type & 0xFFFFFFF0;
          int v8 = v7 == 32 ? 17 : item->type;
          if (v8 == 19)
          {
            BOOL v9 = __CFADD__(v4++, 1);
            char v10 = v9;
          }
          else
          {
            v4 -= v8 == 20;
            if (v4)
            {
              char v10 = 0;
            }
            else
            {
              if (v8 != 51) {
                goto LABEL_21;
              }
              unsigned int v11 = item->flags & 0xF;
              BOOL v9 = size >= v11;
              unsigned int v12 = size - v11;
              if (!v9) {
                unsigned int v12 = 0;
              }
              if (v12 >= 8)
              {
                int v4 = 0;
                *(void *)(a1 + 16) = *(void *)&item[1].type;
              }
              else
              {
LABEL_21:
                int v4 = 0;
              }
              char v10 = 1;
            }
          }
          if (type == 19 && size >= 4 && v7 != 32 && item[1].type == 2307)
          {
            if (item->flags != -1)
            {
              v35.kcdata_item_t item = item;
              v35.end = a2.end;
              ktrace_address_space_from_stackshot(v35);
            }
          }
          else if (v10)
          {
            LODWORD(size) = item->size;
            if (item->type == 2312)
            {
              uint64_t flags = item->flags;
              if (size != 32 || (flags & 0x8F) != 0)
              {
                unsigned int v14 = flags & 0xF;
                BOOL v9 = size >= v14;
                unsigned int v15 = size - v14;
                if (!v9) {
                  unsigned int v15 = 0;
                }
                BOOL v16 = v15 > 0x1F;
                kcdata_item_t v17 = v20;
                if (v16) {
                  kcdata_item_t v17 = item + 1;
                }
                kcdata_item_t v20 = v17;
              }
              else
              {
                LODWORD(size) = 32;
              }
            }
          }
          else
          {
            LODWORD(size) = item->size;
          }
          kcdata_item_t item = (kcdata_item_t)((char *)v2 + size);
          kcdata_item_t v2 = item + 1;
        }
        while (&item[1] <= a2.end);
        if (v20 && !uuid_is_null((const unsigned __int8 *)&v20->flags))
        {
          long long v26 = 0u;
          *(_OWORD *)cf = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          LODWORD(v23) = 3;
          *((void *)&v23 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *(void *)&v20->type + 1;
          *(void *)&long long v25 = v20[1].flags;
          long long v22 = *(_OWORD *)&v20->flags;
          for (uint64_t i = *(void **)(*(void *)(a1 + 24) + 16); i; uint64_t i = (void *)*i)
          {
            uint64_t v19 = i[3];
            if (*(_DWORD *)(v19 + 32) && (*(unsigned char *)(v19 + 36) & 2) == 0)
            {
              long long v30 = v24;
              long long v31 = v25;
              long long v32 = v26;
              *(_OWORD *)size_t v33 = *(_OWORD *)cf;
              *(_OWORD *)long long buf = v22;
              long long v29 = v23;
              if (cf[0]) {
                CFRetain(cf[0]);
              }
              ktrace_address_space_append(v19, (uint64_t)buf);
              SymbolOwner::~SymbolOwner((SymbolOwner *)buf);
            }
          }
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v22);
        }
      }
    }
  }
}

void sub_1B39DF9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  SymbolOwner::~SymbolOwner((SymbolOwner *)va);
  _Unwind_Resume(a1);
}

void *address_space_for_taskid(ktrace_uuid_map *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 == -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(*((void **)a1 + 3), &v3);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

void *address_space_for_pid(ktrace_uuid_map *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (a2 == -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(*((void **)a1 + 4), &v3);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

void set_address_space_for_taskid(uint64_t a1, unint64_t a2, CFTypeRef cf)
{
  unint64_t v8 = a2;
  if (a2 == -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (cf)
  {
    unsigned int v7 = cf;
    CFRetain(cf);
    uint64_t v4 = *(void *)(a1 + 24);
    BOOL v9 = &v8;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9);
    uint64_t v6 = (const void *)v5[3];
    if (v6) {
      CFRelease(v6);
    }
    void v5[3] = v7;
    unsigned int v7 = 0;
    CF::TypeRef::~TypeRef(&v7);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>(*(void **)(a1 + 24), &v8);
  }
}

void sub_1B39DFB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void set_address_space_for_pid(uint64_t a1, unint64_t a2, CFTypeRef cf)
{
  unint64_t v8 = a2;
  if (a2 == -1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (cf)
  {
    unsigned int v7 = cf;
    CFRetain(cf);
    uint64_t v4 = *(void *)(a1 + 32);
    BOOL v9 = &v8;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9);
    uint64_t v6 = (const void *)v5[3];
    if (v6) {
      CFRelease(v6);
    }
    void v5[3] = v7;
    unsigned int v7 = 0;
    CF::TypeRef::~TypeRef(&v7);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>(*(void **)(a1 + 32), &v8);
  }
}

void sub_1B39DFBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ktrace_address_space_from_dscsym(void *a1)
{
  v1[0] = 0;
  v1[1] = v1;
  v1[2] = 0x5812000000;
  v1[3] = __Block_byref_object_copy__2;
  v1[4] = __Block_byref_object_dispose__2;
  long long v2 = 0u;
  long long v3 = 0u;
  uint64_t v4 = 0;
  int v5 = 1065353216;
  ktrace_address_space_create(-1);
}

void sub_1B39DFD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_dispose__2(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 48);
}

uint64_t ___Z32ktrace_address_space_from_dscsymPvm_block_invoke(uint64_t a1, long long *a2, char *cStr, const char *a4, unint64_t a5, uint64_t a6)
{
  unint64_t v24 = a5;
  if (cStr) {
    CFStringRef v11 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  }
  else {
    CFStringRef v11 = 0;
  }
  long long v12 = *a2;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v22 = 0u;
  *(_OWORD *)cf = 0u;
  LODWORD(v19) = 2;
  *(void *)&long long v21 = a5;
  *((void *)&v21 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a6 + 1;
  long long v18 = v12;
  strlcpy((char *)&v19 + 8, a4, 0x11uLL);
  CFStringRef v17 = v11;
  if (cf[0])
  {
    CFRelease(cf[0]);
    CFStringRef v11 = v17;
  }
  CFStringRef v17 = 0;
  cf[0] = v11;
  CF::TypeRef::~TypeRef((const void **)&v17);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), &v24))
  {
    uint64_t v13 = *(void *)(a1 + 40);
    v15[2] = v20;
    v15[3] = v21;
    _OWORD v15[4] = v22;
    *(_OWORD *)BOOL v16 = *(_OWORD *)cf;
    v15[0] = v18;
    v15[1] = v19;
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    ktrace_address_space_append(v13, (uint64_t)v15);
    SymbolOwner::~SymbolOwner((SymbolOwner *)v15);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*(void *)(*(void *)(a1 + 32) + 8) + 48, &v24, &v24);
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v18);
  return 0;
}

void sub_1B39DFECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26)
{
}

void ktrace_uuid_map_learn_sharedcache_with_buffer(ktrace_uuid_map *a1, CFUUIDBytes a2, void *a3)
{
  CFUUIDBytes v3 = a2;
  ktrace_address_space_from_dscsym(a3);
}

void sub_1B39DFFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t ktrace_address_space_deep_iterate_symbol_owners(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFUUIDBytes v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    uint64_t v7 = result;
    do
    {
      switch(*(_DWORD *)(v4 + 16))
      {
        case 1:
        case 2:
        case 5:
          uint64_t v16 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, &v16);
          break;
        case 3:
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          get_sc_and_slide(v7, v4, &v20, &v21);
          uint64_t v19 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, &v19);
          if (v21)
          {
            uint64_t v8 = v20;
            if (v20)
            {
              BOOL v9 = *(uint64_t **)(v21 + 16);
              uint64_t v10 = *v9;
              uint64_t v11 = v9[1];
              while (v10 != v11)
              {
                uint64_t v18 = v8;
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v10, &v18);
                v10 += 96;
              }
            }
          }
          break;
        case 4:
          uint64_t v12 = *(void *)(v7 + 248);
          if (v12)
          {
            uint64_t v13 = *(uint64_t **)(v12 + 16);
            uint64_t v14 = *v13;
            uint64_t v15 = v13[1];
            while (v14 != v15)
            {
              uint64_t v17 = 0;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v14, &v17);
              v14 += 96;
            }
          }
          break;
        default:
          ktrace_address_space_deep_iterate_symbol_owners();
      }
      v4 += 96;
    }
    while (v4 != v5);
  }
  return result;
}

void ___Z45ktrace_uuid_map_learn_sharedcache_with_bufferP15ktrace_uuid_map11CFUUIDBytesPvm_block_invoke(uint64_t a1, uint64_t a2)
{
}

void ktrace_uuid_map_associate_path_with_uuid(ktrace_uuid_map *a1, CFUUIDBytes a2, CFUUIDBytes *a3)
{
  CFUUIDBytes v14 = a2;
  if (a3)
  {
    uint64_t v4 = *((void *)a1 + 27);
    uint64_t v15 = &v14;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v4, &v14, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
    uint64_t v6 = (const void *)v5[4];
    if (!v6)
    {
      uint64_t v15 = a3;
      CFRetain(a3);
      uint64_t v10 = (const void *)v5[4];
      if (v10) {
        CFRelease(v10);
      }
      void v5[4] = v15;
      goto LABEL_13;
    }
    CFTypeID v7 = CFGetTypeID(v6);
    CFTypeID TypeID = CFSetGetTypeID();
    BOOL v9 = (__CFSet *)v5[4];
    if (v7 == TypeID)
    {
      CFSetAddValue(v9, a3);
      return;
    }
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 != CFStringGetTypeID()) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!CFEqual(a3, (CFTypeRef)v5[4]))
    {
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
      CFSetAddValue(Mutable, (const void *)v5[4]);
      CFSetAddValue(Mutable, a3);
      uint64_t v15 = (CFUUIDBytes *)Mutable;
      uint64_t v13 = (const void *)v5[4];
      if (v13)
      {
        CFRelease(v13);
        CFMutableDictionaryRef Mutable = (__CFSet *)v15;
      }
      void v5[4] = Mutable;
LABEL_13:
      uint64_t v15 = 0;
      CF::TypeRef::~TypeRef((const void **)&v15);
    }
  }
}

void sub_1B39E02B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  CF::TypeRef::~TypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ktrace_uuid_map_learn_sharedcache_with_chunk(uint64_t result, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    CFUUIDBytes v3 = (ktrace_uuid_map *)result;
    if (ktrace_chunk_tag((uint64_t)a2) == 32769
      || (uint64_t result = ktrace_chunk_tag((uint64_t)a2), result == 36869))
    {
      uint64_t result = ktrace_chunk_version_major((uint64_t)a2);
      if (!result)
      {
        uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
        uint64_t result = (uint64_t)ktrace_chunk_map_data(a2, 0, v4);
        if (result)
        {
          uint64_t v5 = (void *)result;
          uint64_t v7 = 0;
          uint64_t v8 = &v7;
          uint64_t v9 = 0x2020000000;
          char v10 = 0;
          *(void *)&v11.byte0 = 0;
          *(void *)&v11.byte8 = 0;
          dscsym_iterate_buffer();
          int v6 = *((unsigned __int8 *)v8 + 24);
          _Block_object_dispose(&v7, 8);
          if (v6) {
            ktrace_uuid_map_learn_sharedcache_with_buffer(v3, v11, v5);
          }
          return ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, v4);
        }
      }
    }
  }
  return result;
}

void sub_1B39E044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk(uint64_t a1, uint64_t a2)
{
  if (!a1 || ktrace_chunk_tag(a2) != 36871 || ktrace_chunk_version_major(a2)) {
    return;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFAutorelease(v3);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"Pid");
    CFNumberRef v6 = Value;
    if (Value)
    {
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 != CFNumberGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
        }
        CFNumberRef v6 = 0;
      }
    }
    uint64_t v8 = CFDictionaryGetValue(v4, @"LoadInfos");
    if (v8)
    {
      CFTypeID v9 = CFGetTypeID(v8);
      if (v9 == CFDictionaryGetTypeID())
      {
        if (v6)
        {
          uint64_t valuePtr = 0;
          if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr)) {
            ktrace_postprocess_file_internal_cold_1();
          }
          if ((valuePtr & 0x80000000) == 0) {
            ktrace_address_space_create(valuePtr);
          }
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_4();
          }
          return;
        }
      }
      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
        }
      }
    }
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_2();
    }
  }
  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_1();
  }
}

const void *cfdict_get_dictionary(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, a2);
  CFDictionaryRef v3 = Value;
  if (Value)
  {
    CFTypeID v4 = CFGetTypeID(Value);
    if (v4 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
      }
      return 0;
    }
  }
  return v3;
}

void __ktrace_uuid_map_learn_tailspin_process_info_with_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFNumber *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(uu, 0, 16);
  uint64_t v5 = utf8(a2);
  if (!uuid_parse(v5, uu))
  {
    if (*(_DWORD *)(a1 + 40))
    {
      uint64_t valuePtr = 0;
      if (a3)
      {
        if (!CFNumberGetValue(a3, kCFNumberLongLongType, &valuePtr)) {
          ktrace_postprocess_file_internal_cold_1();
        }
        uint64_t v6 = valuePtr;
      }
      else
      {
        uint64_t v6 = 0;
      }
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      *(void *)&long long v16 = v6;
      long long v13 = *(_OWORD *)uu;
      long long v14 = 0u;
      LODWORD(v14) = 2;
      DWORD2(v14) = 1163157343;
      *(_DWORD *)((char *)&v14 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = 5527621;
      BYTE8(v18) = 1;
      uint64_t v8 = *(void *)(a1 + 32);
      v11[0] = *(_OWORD *)uu;
      v11[1] = v14;
      v11[4] = 0u;
      void v11[5] = v18;
      void v11[2] = 0u;
      v11[3] = v16;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      ktrace_address_space_append(v8, (uint64_t)v11);
      CFTypeID v9 = (SymbolOwner *)v11;
    }
    else
    {
      uint64_t valuePtr = 0;
      if (a3)
      {
        if (!CFNumberGetValue(a3, kCFNumberLongLongType, &valuePtr)) {
          ktrace_postprocess_file_internal_cold_1();
        }
        uint64_t v7 = valuePtr;
      }
      else
      {
        uint64_t v7 = 0;
      }
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v13 = *(_OWORD *)uu;
      long long v14 = 0u;
      LODWORD(v14) = 5;
      *(void *)&long long v16 = v7;
      BYTE8(v18) = 1;
      uint64_t v10 = *(void *)(a1 + 32);
      void v12[2] = 0u;
      void v12[3] = v16;
      v12[4] = 0u;
      void v12[5] = v18;
      v12[0] = *(_OWORD *)uu;
      v12[1] = v14;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      ktrace_address_space_append(v10, (uint64_t)v12);
      CFTypeID v9 = (SymbolOwner *)v12;
    }
    SymbolOwner::~SymbolOwner(v9);
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v13);
  }
}

void sub_1B39E0914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  SymbolOwner::~SymbolOwner((SymbolOwner *)va);
  SymbolOwner::~SymbolOwner((SymbolOwner *)(v13 - 176));
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2020000000;
  uint64_t v43 = 0;
  if (!a1 || ktrace_chunk_tag(a2) != 36870 || ktrace_chunk_version_major(a2)) {
    goto LABEL_4;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
  CFDictionaryRef v5 = v4;
  if (v4)
  {
    CFAutorelease(v4);
    CFNumberRef Value = (__CFString *)CFDictionaryGetValue(v5, @"Path");
    uint64_t v7 = Value;
    if (Value)
    {
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 == CFStringGetTypeID())
      {
        if (!CFStringGetLength(v7)) {
          uint64_t v7 = 0;
        }
      }
      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        }
        uint64_t v7 = 0;
      }
    }
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(v5, @"Size");
    CFNumberRef v10 = v9;
    if (v9)
    {
      CFTypeID v11 = CFGetTypeID(v9);
      if (v11 != CFNumberGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
        }
        CFNumberRef v10 = 0;
      }
    }
    CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(v5, @"UUID_String");
    CFStringRef v13 = v12;
    if (v12)
    {
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 != CFStringGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        }
        CFStringRef v13 = 0;
      }
    }
    CFBooleanRef v15 = (const __CFBoolean *)CFDictionaryGetValue(v5, @"TEXT_EXEC");
    CFBooleanRef v16 = v15;
    if (v15)
    {
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 != CFBooleanGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_5();
        }
        CFBooleanRef v16 = 0;
      }
    }
    memset(&uu, 0, sizeof(uu));
    long long v18 = utf8(v13);
    if (!uuid_parse(v18, &uu.byte0) && v10 && v13 && v16)
    {
      *(void *)&long long valuePtr = 0;
      if (!CFNumberGetValue(v10, kCFNumberLongLongType, &valuePtr))
      {
        _os_assert_log();
        uint64_t v37 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v37);
      }
      v41[3] = valuePtr;
      int v19 = CFBooleanGetValue(v16);
      if (!v41[3])
      {
        if (!*(unsigned char *)(a1 + 290))
        {
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_3();
          }
          *(unsigned char *)(a1 + 290) = 1;
        }
        CFDictionaryRef dictionary = (const __CFDictionary *)cfdict_get_dictionary(v5, @"Symbols");
        if (dictionary)
        {
          context[0] = MEMORY[0x1E4F143A8];
          context[1] = 3221225472;
          context[2] = __ktrace_uuid_map_learn_tailspin_symbols_with_chunk_block_invoke;
          context[3] = &unk_1E6062A50;
          context[4] = &v40;
          CFDictionaryApplyFunction(dictionary, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
        }
      }
      if (v7) {
        ktrace_uuid_map_associate_path_with_uuid((ktrace_uuid_map *)a1, uu, (CFUUIDBytes *)v7);
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"UUID_String", v13);
      if (!v19)
      {
        CFNumberRef v22 = cfnumber(v41[3]);
        CFDictionarySetValue(Mutable, @"TextSize", v22);
      }
      if (v7)
      {
        long long v23 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(v23, @"unknown", Mutable);
        CFRelease(Mutable);
        unint64_t v24 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(v24, @"Path", v7);
        CFDictionarySetValue(v24, @"Images", v23);
        CFRelease(v23);
        long long v25 = *(__CFDictionary **)(a1 + 232);
        if (!v25)
        {
          long long v25 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)(a1 + 232) = v25;
        }
        CFDictionarySetValue(v25, v7, v24);
        CFRelease(v24);
      }
      else
      {
        uint64_t v26 = *(void *)(a1 + 240);
        if (!v26) {
          operator new();
        }
        *(void *)&v44.byte0 = Mutable;
        *(void *)&long long valuePtr = &uu;
        uint64_t v27 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v26, &uu, (uint64_t)&std::piecewise_construct, (_OWORD **)&valuePtr);
        uint64_t v28 = (const void *)v27[4];
        if (v28) {
          CFRelease(v28);
        }
        v27[4] = *(void *)&v44.byte0;
        *(void *)&v44.byte0 = 0;
        CF::TypeRef::~TypeRef((const void **)&v44);
      }
      long long v29 = *(void **)(*(void *)(a1 + 32) + 16);
      if (v29)
      {
        if (v19) {
          long long v30 = "__TEXT_EXEC";
        }
        else {
          long long v30 = "__TEXT";
        }
        do
        {
          long long v31 = *(long long ***)(v29[3] + 16);
          long long v32 = *v31;
          size_t v33 = v31[1];
          while (v32 != v33)
          {
            long long v34 = *v32;
            CFUUIDBytes v44 = uu;
            long long valuePtr = v34;
            if ((void)v34 == *(void *)&uu.byte0 && *((void *)&v34 + 1) == *(void *)&uu.byte8)
            {
              int v36 = *((_DWORD *)v32 + 4);
              if (v36 == 5)
              {
                *((void *)v32 + 3) = 0;
                *((void *)v32 + 4) = 0;
                *((void *)v32 + 5) = 0;
                *((_DWORD *)v32 + 4) = 2;
                strlcpy((char *)v32 + 24, v30, 0x11uLL);
                int v36 = *((_DWORD *)v32 + 4);
              }
              if (v36 == 2 && !*((void *)v32 + 7))
              {
                *((void *)v32 + 7) = v41[3] + 1;
                if (!v7) {
                  goto LABEL_68;
                }
              }
              else if (!v7)
              {
                goto LABEL_68;
              }
              if (!*((void *)v32 + 10)) {
                SymbolOwner::set_path((SymbolOwner *)v32, v7);
              }
            }
LABEL_68:
            v32 += 6;
          }
          long long v29 = (void *)*v29;
        }
        while (v29);
      }
    }
    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_4();
    }
  }
  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_1();
  }
LABEL_4:
  _Block_object_dispose(&v40, 8);
}

void sub_1B39E0F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  CF::TypeRef::~TypeRef((const void **)(v10 - 96));
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *cfdict_get_string(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, a2);
  CFDictionaryRef v3 = Value;
  if (Value)
  {
    CFTypeID v4 = CFGetTypeID(Value);
    if (v4 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
      return 0;
    }
  }
  return v3;
}

void __ktrace_uuid_map_learn_tailspin_symbols_with_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v12 = 0;
  CFDictionaryRef v5 = utf8(a2);
  int v6 = sscanf(v5, "%lld", &v12);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"Length");
  if (Value)
  {
    CFNumberRef v8 = Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFNumberGetTypeID())
    {
      if (v6 == 1)
      {
        uint64_t v10 = v12;
        uint64_t valuePtr = 0;
        if (!CFNumberGetValue(v8, kCFNumberLongLongType, &valuePtr)) {
          ktrace_postprocess_file_internal_cold_1();
        }
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
        if ((unint64_t)(valuePtr + v10) > *(void *)(v11 + 24)) {
          *(void *)(v11 + 24) = valuePtr + v10;
        }
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
      }
    }
  }
}

CFNumberRef cfnumber(uint64_t a1)
{
  uint64_t valuePtr = a1;
  CFNumberRef v1 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  if (!v1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFNumberRef v2 = v1;
  CFAutorelease(v1);
  return v2;
}

void SymbolOwner::set_path(SymbolOwner *this, CFTypeRef cf)
{
  CFTypeID v4 = (const void *)*((void *)this + 10);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 10) = cf;
  if (cf)
  {
    CFRetain(cf);
  }
}

void ktrace_uuid_map_learn_ariadne_process_dict_with_chunk(uint64_t a1, uint64_t a2)
{
  if (a1 && ktrace_chunk_tag(a2) == 20530 && !ktrace_chunk_version_major(a2))
  {
    CFDictionaryRef v4 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      context[0] = MEMORY[0x1E4F143A8];
      context[1] = 3221225472;
      context[2] = __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke;
      context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
      context[4] = a1;
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
      CFRelease(v5);
    }
    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_cold_1();
    }
  }
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)CFNumberRef v8 = 0;
  CFDictionaryRef v4 = utf8(a2);
  int v5 = sscanf(v4, "%ld", v8);
  CFNumberRef Value = CFDictionaryGetValue(a3, @"Library");
  if (Value)
  {
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFArrayGetTypeID())
    {
      if (v5 == 1 && !(*(void *)v8 >> 31)) {
        ktrace_address_space_create(v8[0]);
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
      }
    }
  }
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
    __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_1();
  }
}

void sub_1B39E18D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a29);
  SymbolOwner::~SymbolOwner((SymbolOwner *)(v29 - 208));
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_learn_inodes_with_chunk(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 224))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
        ktrace_uuid_map_learn_inodes_with_chunk_cold_4();
      }
      return;
    }
    int v5 = (void *)ktrace_chunk_size_t(a2, a2);
    CFDataRef v6 = ktrace_chunk_copy_cfdata(a2, 0, v5);
    if (v6)
    {
      CFDataRef v7 = v6;
      CFErrorRef error = 0;
      CFDictionaryRef v8 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v6, 0, 0, &error);
      CFRelease(v7);
      if (v8)
      {
        if (ktrace_chunk_version_major(a2))
        {
          *(void *)(a1 + 224) = v8;
          if (!*(void *)(a1 + 232))
          {
            *(void *)(a1 + 232) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 224);
          }
          v11[0] = MEMORY[0x1E4F143A8];
          v11[1] = 3221225472;
          void v11[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke;
          v11[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
          v11[4] = a1;
          CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v11);
          return;
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!Mutable) {
          ktrace_postprocess_file_internal_cold_1();
        }
        *(void *)(a1 + 224) = Mutable;
        *(void *)long long buf = MEMORY[0x1E4F143A8];
        uint64_t v14 = 3221225472;
        CFBooleanRef v15 = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke;
        CFBooleanRef v16 = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
        CFMutableDictionaryRef v17 = Mutable;
        uint64_t v18 = a1;
        CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, buf);
        CFErrorRef v9 = v8;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_inodes_with_chunk_cold_2(&error);
        }
        CFErrorRef v9 = error;
      }
      CFRelease(v9);
      return;
    }
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_learn_inodes_with_chunk_cold_1();
    }
  }
  else
  {
    CFDictionaryRef v3 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B39A5000, v3, OS_LOG_TYPE_INFO, "skipping ktrace_uuid_map_learn_inodes_with_chunk(), uuid map was NULL.", buf, 2u);
    }
  }
}

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  context[0] = MEMORY[0x1E4F143A8];
  context[1] = 3221225472;
  context[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_2;
  context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
  context[4] = *(void *)(a1 + 32);
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
}

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_2(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"Path");
  if (Value)
  {
    CFDataRef v6 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFStringGetTypeID())
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 232), v6, theDict);
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Images");
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        CFTypeID v10 = CFGetTypeID(v8);
        if (v10 == CFDictionaryGetTypeID())
        {
          v11[0] = MEMORY[0x1E4F143A8];
          v11[1] = 3221225472;
          void v11[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_3;
          v11[3] = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
          v11[4] = *(void *)(a1 + 32);
          void v11[5] = v6;
          CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v11);
        }
        else
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
          }
        }
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
    }
  }
}

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_3(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"UUID_String");
  if (Value)
  {
    CFStringRef v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFStringGetTypeID())
    {
      *(void *)&v8.byte0 = 0;
      *(void *)&v8.byte8 = 0;
      CFTypeID v7 = utf8(v5);
      if (!uuid_parse(v7, &v8.byte0)) {
        ktrace_uuid_map_associate_path_with_uuid(*(ktrace_uuid_map **)(a1 + 32), v8, *(CFUUIDBytes **)(a1 + 40));
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
    }
  }
}

uint64_t ktrace_uuid_map_read_process_info_dict(ktrace_uuid_map *a1, CFDictionaryRef theDict, char a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    int v3 = 0;
    goto LABEL_7;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PID");
  if (Value)
  {
    CFNumberRef v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFNumberGetTypeID())
    {
      *(void *)&long long valuePtr = 0;
      if (!CFNumberGetValue(v5, kCFNumberLongLongType, &valuePtr)) {
        ktrace_postprocess_file_internal_cold_1();
      }
      int v3 = valuePtr;
LABEL_7:
      ktrace_address_space_create(v3);
    }
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    }
  }
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
    ktrace_uuid_map_read_process_info_dict();
  }
  return 0;
}

void sub_1B39E2568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void ktrace_uuid_map_learn_kernelmap_with_chunk(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
    if (ktrace_chunk_tag((uint64_t)a2) == 32773 && !ktrace_chunk_version_major((uint64_t)a2))
    {
      if (*(void *)(a1 + 248)) {
        return;
      }
      CFTypeID v6 = ktrace_chunk_map_data(a2, 0, v4);
      if (v6)
      {
        CFDataRef v7 = CFDataCreateWithBytesNoCopy(0, v6, v4, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
        CFDictionaryRef v5 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v7, 0, 0, 0);
        CFRelease(v7);
        if (v5)
        {
          process_info_CFDictionaryRef dict = ktrace_uuid_map_read_process_info_dict(v8, v5, 1);
          *(void *)(a1 + 248) = process_info_dict;
          if (process_info_dict)
          {
LABEL_8:
            CFRelease(v5);
LABEL_9:
            if (v6) {
              ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v4);
            }
            return;
          }
        }
      }
      else
      {
        CFDictionaryRef v5 = 0;
      }
    }
    else
    {
      CFDictionaryRef v5 = 0;
      CFTypeID v6 = 0;
    }
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      ktrace_uuid_map_learn_kernelmap_with_chunk_cold_1();
    }
    *(void *)(a1 + 248) = 0;
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
}

uint64_t ktrace_uuid_map_learn_live_kernelmap(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(void *)(result + 248))
    {
      uint64_t result = (uint64_t)ktrace_get_live_kernel_map();
      if (result)
      {
        uint64_t result = ktrace_uuid_map_read_process_info_dict((ktrace_uuid_map *)result, (CFDictionaryRef)result, 1);
        *(void *)(v1 + 248) = result;
      }
    }
  }
  return result;
}

__CFDictionary *ktrace_get_live_kernel_map()
{
  CSSymbolicatorCreateWithMachKernel();
  if (CSIsNull()) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v0 = Mutable;
  CFMutableArrayRef v2 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!v2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableArrayRef v3 = v2;
  CSSymbolicatorForeachSymbolOwnerAtTime();
  CFDictionarySetValue(v0, @"Binaries", v3);
  CFRelease(v3);
  CFAutorelease(v0);
  CSRelease();
  return v0;
}

void ktrace_uuid_map_learn_process_info_with_chunk(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
    if (ktrace_chunk_tag((uint64_t)a2) == 32784 && !ktrace_chunk_version_major((uint64_t)a2))
    {
      CFDataRef v7 = ktrace_chunk_map_data(a2, 0, v4);
      if (v7)
      {
        CFDataRef v8 = CFDataCreateWithBytesNoCopy(0, v7, v4, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
        CFDictionaryRef v6 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v8, 0, 0, 0);
        CFRelease(v8);
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v6, @"Processes");
        CFArrayRef v10 = Value;
        if (Value)
        {
          CFTypeID v11 = CFGetTypeID(Value);
          if (v11 != CFArrayGetTypeID())
          {
            ktrace_log_init();
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
              __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
            }
            CFArrayRef v10 = 0;
          }
        }
        if (CFArrayGetCount(v10) < 1)
        {
LABEL_9:
          ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v7, v4);
LABEL_10:
          if (v6) {
            CFRelease(v6);
          }
          return;
        }
        CFIndex v12 = 0;
        while (1)
        {
          CFTypeID ValueAtIndex = (CFTypeID)CFArrayGetValueAtIndex(v10, v12);
          CFDictionaryRef v14 = (const __CFDictionary *)ValueAtIndex;
          if (ValueAtIndex)
          {
            CFTypeID v15 = CFGetTypeID((CFTypeRef)ValueAtIndex);
            CFTypeID ValueAtIndex = CFDictionaryGetTypeID();
            if (v15 != ValueAtIndex)
            {
              ktrace_log_init();
              CFTypeID ValueAtIndex = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
              if (ValueAtIndex) {
                __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v18, v19);
              }
              CFDictionaryRef v14 = 0;
            }
          }
          process_info_CFDictionaryRef dict = (int *)ktrace_uuid_map_read_process_info_dict((ktrace_uuid_map *)ValueAtIndex, v14, 0);
          CFDictionaryRef v5 = process_info_dict;
          if (!process_info_dict) {
            break;
          }
          unint64_t v17 = process_info_dict[8];
          if (!v17) {
            break;
          }
          set_address_space_for_pid(a1, v17, process_info_dict);
          CFRelease(v5);
          if (CFArrayGetCount(v10) <= ++v12) {
            goto LABEL_8;
          }
        }
      }
      else
      {
        CFDictionaryRef v5 = 0;
        CFDictionaryRef v6 = 0;
      }
    }
    else
    {
      CFDictionaryRef v5 = 0;
      CFDictionaryRef v6 = 0;
      CFDataRef v7 = 0;
    }
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_process_info_with_chunk_cold_1();
      if (!v5)
      {
LABEL_8:
        if (!v7) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    else if (!v5)
    {
      goto LABEL_8;
    }
    CFRelease(v5);
    goto LABEL_8;
  }
}

uint64_t ktrace_uuid_map_learn_sharedcache(ktrace_uuid_map *a1, CFUUIDBytes a2)
{
  if (!dscsym_mmap_dscsym_for_uuid()) {
    ktrace_uuid_map_learn_sharedcache_with_buffer(a1, a2, 0);
  }
  return 0;
}

void *ktrace_uuid_map_get_shared_cache(ktrace_uuid_map *a1, CFUUIDBytes a2)
{
  CFUUIDBytes v4 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(*((void **)a1 + 5), &v4);
  if (result) {
    return (void *)result[4];
  }
  ktrace_uuid_map_learn_sharedcache(a1, v4);
  uint64_t result = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(*((void **)a1 + 5), &v4);
  if (result) {
    return (void *)result[4];
  }
  return result;
}

uint64_t ktrace_stackshot_chunk_unwrap(void *a1, uint64_t a2)
{
  if (!a1) {
    return 22;
  }
  unint64_t v4 = ktrace_chunk_size((uint64_t)a1);
  if (ktrace_chunk_size((uint64_t)a1) != v4) {
    return 22;
  }
  int v5 = ktrace_chunk_tag((uint64_t)a1);
  if (v5 != 20990)
  {
    if (v5 == 32770)
    {
      if (ktrace_chunk_version_major((uint64_t)a1) > 1) {
        return 22;
      }
    }
    else if (v5 != 36864 || ktrace_chunk_version_major((uint64_t)a1))
    {
      return 22;
    }
  }
  CFDictionaryRef v6 = ktrace_chunk_map_data(a1, 0, v4);
  if (v6)
  {
    CFDataRef v7 = v6;
    if (ktrace_chunk_tag((uint64_t)a1) == 20990 || ktrace_chunk_version_major((uint64_t)a1))
    {
      unint64_t v8 = (unint64_t)&v7[v4];
      uint64_t v9 = v7;
    }
    else
    {
      if (v4 < 0x10 || *(void *)v7 > v4 - 16) {
        goto LABEL_20;
      }
      uint64_t v9 = v7 + 16;
      unint64_t v8 = (unint64_t)&v7[*(void *)v7 + 16];
    }
    if ((unint64_t)(v9 + 16) <= v8 && (unint64_t)&v9[*((unsigned int *)v9 + 1) + 16] <= v8)
    {
      (*(void (**)(uint64_t))(a2 + 16))(a2);
      uint64_t v10 = 0;
LABEL_21:
      ktrace_chunk_unmap_data((uint64_t)a1, (unint64_t)v7, v4);
      return v10;
    }
LABEL_20:
    uint64_t v10 = 22;
    goto LABEL_21;
  }
  return 22;
}

uint64_t ktrace_stackshot_chunk_timestamp(void *a1)
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = -1;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  void v3[2] = __ktrace_stackshot_chunk_timestamp_block_invoke;
  _OWORD v3[3] = &unk_1E6062AB8;
  v3[4] = &v4;
  ktrace_stackshot_chunk_unwrap(a1, (uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B39E2D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_stackshot_chunk_timestamp_block_invoke(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    do
    {
      unint64_t v7 = v3 + *(unsigned int *)(a2 + 4);
      if (v7 > a3 || *(_DWORD *)a2 == -242132755) {
        break;
      }
      if (*(_DWORD *)a2 == 51) {
        goto LABEL_3;
      }
      unint64_t v3 = v7 + 16;
      a2 = v7;
    }
    while (v7 + 16 <= a3);
  }
  a2 = 0;
  a3 = 0;
LABEL_3:
  if (a2 + 16 <= a3)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 4);
    if (a2 + 16 + v4 <= a3)
    {
      int v5 = *(_DWORD *)a2;
      if ((*(_DWORD *)a2 & 0xFFFFFFF0) == 0x20) {
        int v5 = 17;
      }
      if (v5 <= 2309)
      {
        if (v5 == 17 || v5 == 19)
        {
LABEL_26:
          if (v4 < 8) {
            return result;
          }
          goto LABEL_27;
        }
LABEL_24:
        BOOL v8 = v4 >= (*(_DWORD *)(a2 + 8) & 0xFu);
        LODWORD(v4) = v4 - (*(_DWORD *)(a2 + 8) & 0xF);
        if (!v8) {
          LODWORD(v4) = 0;
        }
        goto LABEL_26;
      }
      if (v5 == 2312)
      {
        if (v4 != 32) {
          goto LABEL_24;
        }
      }
      else if (v5 != 2310 || v4 != 112)
      {
        goto LABEL_24;
      }
      if ((*(unsigned char *)(a2 + 8) & 0x8F) == 0)
      {
LABEL_27:
        *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 16);
        return result;
      }
      goto LABEL_24;
    }
  }
  return result;
}

void ktrace_address_space_get_offset_for_address(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)uuid_t dst = 0u;
  uint64_t v7 = ktrace_address_space_symbol_owner_for_address(a2, a3, (__n128)0);
  if (v7)
  {
    uint64_t v8 = v7;
    if (!*(void *)(v7 + 56)) {
      BYTE4(v28[0]) = 1;
    }
    *(_OWORD *)src = *(_OWORD *)v7;
    uuid_copy(dst, src);
    LODWORD(v28[0]) = *(_DWORD *)(v8 + 16);
    *((void *)&v28[1] + ktrace_session_set_default_event_names_enabled(global_session, 1) = *(void *)(v8 + 80);
    *(_OWORD *)((char *)v28 + 8) = *(_OWORD *)(v8 + 64);
    switch(LODWORD(v28[0]))
    {
      case 1:
        unint64_t v12 = a3 - *(void *)(v8 + 48);
        *((void *)&v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v12;
        if (BYTE4(v28[0]))
        {
          uint64_t v14 = *(void *)(v8 + 24);
          CFStringRef v13 = (optional_uint64 *)(v8 + 24);
          if (v14) {
            BYTE4(v28[0]) = v12 >= optional_uint64::value(v13);
          }
        }
        goto LABEL_6;
      case 2:
      case 5:
        *((void *)&v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a3 - *(void *)(v8 + 48);
        char v9 = *(unsigned char *)(v8 + 40);
        long long v26 = *(_OWORD *)(v8 + 24);
        LOBYTE(v27) = v9;
        goto LABEL_6;
      case 3:
        char v18 = 0;
        uint64_t v19 = 0;
        get_sc_and_slide(a1, v8, &v19, &v18);
        if (!v19) {
          goto LABEL_14;
        }
        *((void *)&v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a3 - optional_uint64::value((optional_uint64 *)&v19);
        CFTypeID v15 = v18;
        if (v18)
        {
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          *(_OWORD *)src = 0u;
          uint64_t v16 = optional_uint64::value((optional_uint64 *)&v19);
          ktrace_address_space_get_offset_for_address(a1, v15, a3 - v16);
          if (v23)
          {
            long long v27 = v22;
            v28[0] = v23;
            v28[1] = v24;
            *(_OWORD *)uuid_t dst = *(_OWORD *)src;
            long long v26 = v21;
          }
        }
        goto LABEL_6;
      case 4:
        uint64_t v17 = *(void *)(a1 + 248);
        if (v17)
        {
          ktrace_address_space_get_offset_for_address(a1, v17, a3);
        }
        else
        {
          *((void *)&v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a3;
LABEL_6:
          long long v10 = v28[0];
          a4[2] = v27;
          a4[3] = v10;
          a4[4] = v28[1];
          long long v11 = v26;
          *a4 = *(_OWORD *)dst;
          a4[1] = v11;
        }
        break;
      default:
        ktrace_address_space_deep_iterate_symbol_owners();
    }
  }
  else
  {
LABEL_14:
    a4[3] = 0u;
    a4[4] = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    *a4 = 0u;
  }
}

optional_uint64 *get_sc_and_slide(uint64_t a1, uint64_t a2, uint64_t *a3, optional_uint64 **a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t result = (optional_uint64 *)ktrace_uuid_map_get_shared_cache((ktrace_uuid_map *)a1, *(CFUUIDBytes *)a2);
  long long v10 = result;
  if (!result)
  {
LABEL_5:
    if (v8) {
      goto LABEL_17;
    }
    goto LABEL_6;
  }
  if (v8) {
    goto LABEL_17;
  }
  uint64_t result = (optional_uint64 *)((char *)result + 56);
  if (*((void *)v10 + 7))
  {
    uint64_t v11 = *(void *)(a2 + 48);
    uint64_t result = (optional_uint64 *)optional_uint64::value(result);
    uint64_t v8 = v11 - (void)result + 1;
    goto LABEL_5;
  }
LABEL_6:
  unint64_t v12 = *(void *)(a2 + 48);
  v19[0] = xmmword_1B3A73220;
  v19[1] = xmmword_1B3A73230;
  v19[2] = xmmword_1B3A73240;
  CFStringRef v13 = *(unint64_t **)(a1 + 280);
  if (!v13) {
    CFStringRef v13 = (unint64_t *)v19;
  }
  unint64_t v14 = *v13;
  if (*v13)
  {
    CFTypeID v15 = v13 + 1;
    unint64_t v16 = -1;
    do
    {
      unint64_t v17 = v12 - v14;
      if (v12 - v14 >= v16) {
        unint64_t v17 = v16;
      }
      if (v12 >= v14) {
        unint64_t v16 = v17;
      }
      unint64_t v18 = *v15++;
      unint64_t v14 = v18;
    }
    while (v18);
    uint64_t v8 = v16 + 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_17:
  *a3 = v8;
  *a4 = v10;
  return result;
}

uint64_t ktrace_uuid_map_dump_address_space(ktrace_uuid_map *a1, unint64_t a2, FILE *a3)
{
  if (!a1) {
    return 22;
  }
  int v5 = address_space_for_taskid(a1, a2);

  return ktrace_address_space_dump((uint64_t)a1, (uint64_t)v5, a3);
}

uint64_t ktrace_address_space_dump(uint64_t a1, uint64_t a2, FILE *a3)
{
  if (!a2) {
    return 22;
  }
  if (a3) {
    int v5 = a3;
  }
  else {
    int v5 = (FILE *)*MEMORY[0x1E4F143D8];
  }
  fprintf(v5, "Address space:  pid=%d task_unique_id=%llx\n", *(_DWORD *)(a2 + 32), *(void *)(a2 + 24) - 1);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___ZL25ktrace_address_space_dumpP15ktrace_uuid_mapP20ktrace_address_spaceP7__sFILE_block_invoke;
  v7[3] = &__block_descriptor_48_e244_v24__0__SymbolOwner____CCCCCCCCCCCCCCCC__SymbolOwnerTypeProperty_i_____17c__optional_uint64_Q_____optional_uint64_Q__optional_uint64_Q__optional_uint64_Q___3Q__Q_optional_uint64_Q__fsid__2i___fsobj_id_II_____CFString_b1b1_8_optional_uint64_Q_16l;
  int v7[4] = v5;
  v7[5] = a1;
  ktrace_address_space_deep_iterate_symbol_owners(a1, a2, (uint64_t)v7);
  return 0;
}

uint64_t ktrace_uuid_map_dump_address_space_pid(ktrace_uuid_map *a1, int a2, FILE *a3)
{
  if (!a1) {
    return 22;
  }
  int v5 = address_space_for_pid(a1, a2);

  return ktrace_address_space_dump((uint64_t)a1, (uint64_t)v5, a3);
}

double ktrace_uuid_map_get_offset_for_address@<D0>(ktrace_uuid_map *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  if (a1
    && (!a2 && a4 && (uint64_t v8 = (void *)*((void *)a1 + 31)) != 0 || (uint64_t v8 = address_space_for_taskid(a1, a2)) != 0))
  {
    ktrace_address_space_get_offset_for_address((uint64_t)a1, (uint64_t)v8, a3, a5);
  }
  else
  {
    double result = 0.0;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return result;
}

double ktrace_uuid_map_get_offset_for_pid_address@<D0>(ktrace_uuid_map *a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  if (a1 && (!a2 && a4 && (uint64_t v8 = (void *)*((void *)a1 + 31)) != 0 || (uint64_t v8 = address_space_for_pid(a1, a2)) != 0))
  {
    ktrace_address_space_get_offset_for_address((uint64_t)a1, (uint64_t)v8, a3, a5);
  }
  else
  {
    double result = 0.0;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return result;
}

uint64_t ktrace_uuid_map_update_internal(uint64_t result, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  if (a4)
  {
    unint64_t v11 = a3[5];
    unint64_t v12 = a3 + 6;
    long long v13 = *(_OWORD *)(a3 + 1);
    long long v14 = *(_OWORD *)(a3 + 3);
  }
  else
  {
    unint64_t v11 = *((unsigned int *)a3 + 6);
    unint64_t v12 = (_DWORD *)a3 + 7;
    uint64_t v15 = a3[1];
    uint64_t v16 = a3[2];
    *(void *)&long long v17 = v15;
    *((void *)&v17 + ktrace_session_set_default_event_names_enabled(global_session, 1) = HIDWORD(v15);
    long long v13 = v17;
    *(void *)&long long v17 = v16;
    *((void *)&v17 + ktrace_session_set_default_event_names_enabled(global_session, 1) = HIDWORD(v16);
    long long v14 = v17;
  }
  signed int v18 = *v12 & 0xFFFFFFFC;
  uint64_t v19 = *a3;
  int v37 = 0;
  long long v39 = 0u;
  uint64_t v30 = v19;
  long long v31 = v13;
  long long v32 = v14;
  unint64_t v33 = v11;
  signed int v34 = v18;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v38 = 0;
  *(void *)&long long v39 = 0;
  DWORD2(v39) = 0;
  if (!*(unsigned char *)(result + 208)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  double result = (uint64_t)dyldtp_decode_window_update(a4, v11, (DyldDecodeWindow *)(result + 48), (uint64_t)&v30);
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  if (result)
  {
    long long v20 = *(_OWORD *)(result + 48);
    long long v22 = *(_OWORD *)result;
    long long v21 = *(_OWORD *)(result + 16);
    long long v75 = *(_OWORD *)(result + 32);
    long long v76 = v20;
    long long v73 = v22;
    long long v74 = v21;
    HIDWORD(v24) = v22;
    LODWORD(v24) = v22 - 520421376;
    unsigned int v23 = v24 >> 2;
    if (v23 > 0xC) {
      goto LABEL_11;
    }
    if (((1 << v23) & 5) != 0)
    {
      if (a5)
      {
LABEL_22:
        uint64_t v62 = MEMORY[0x1E4F143A8];
        uint64_t v63 = 3221225472;
        char v64 = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2;
        uint64_t v65 = &__block_descriptor_120_e5_v8__0l;
        uint64_t v66 = v10;
        uint64_t v67 = a2;
        unint64_t v68 = v11;
        long long v69 = v73;
        long long v70 = v74;
        long long v71 = v75;
        long long v72 = v76;
        return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, v19);
      }
      goto LABEL_31;
    }
    int v25 = 520421416;
    if (((1 << v23) & 0xA0) != 0)
    {
      int v27 = 520421396;
      int v25 = 520421376;
    }
    else
    {
      int v26 = 1 << v23;
      int v27 = 520421416;
      if ((v26 & 0x1400) == 0) {
LABEL_11:
      }
        abort();
    }
    if (a5) {
      signed int v18 = v27;
    }
    else {
      signed int v18 = v25;
    }
  }
  if (v18 > 520421395)
  {
    if (v18 != 520421396)
    {
      if (v18 == 520421416)
      {
        if (result)
        {
          double result = uuid_is_null((const unsigned __int8 *)((unint64_t)&v73 | 0xC));
          if (!result)
          {
            uint64_t v40 = MEMORY[0x1E4F143A8];
            uint64_t v41 = 3221225472;
            long long v47 = v73;
            long long v48 = v74;
            long long v49 = v75;
            uint64_t v42 = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_76;
            uint64_t v43 = &__block_descriptor_120_e5_v8__0l;
            uint64_t v44 = v10;
            uint64_t v45 = a2;
            unint64_t v46 = v11;
            long long v50 = v76;
            return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, v19);
          }
        }
      }
      return result;
    }
    if (!result) {
      return result;
    }
LABEL_31:
    uint64_t v51 = MEMORY[0x1E4F143A8];
    uint64_t v52 = 3221225472;
    long long v58 = v73;
    long long v59 = v74;
    long long v60 = v75;
    uint64_t v53 = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_75;
    char v54 = &__block_descriptor_120_e5_v8__0l;
    uint64_t v55 = v10;
    uint64_t v56 = a2;
    unint64_t v57 = v11;
    long long v61 = v76;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, v19);
  }
  if (v18 == 117440520)
  {
    if (a4) {
      uint64_t v28 = a3[1];
    }
    else {
      uint64_t v28 = *((unsigned int *)a3 + 2);
    }
    if (v28 == (int)v28) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, v19);
    }
  }
  else if (v18 == 520421376 && result)
  {
    goto LABEL_22;
  }
  return result;
}

long long *dyldtp_decode_window_update(int a1, unint64_t a2, DyldDecodeWindow *this, uint64_t a4)
{
  unint64_t v29 = a2;
  unsigned int v5 = *(_DWORD *)(a4 + 48);
  if (v5 >> 2 == 29392898)
  {
    DyldDecodeWindow::reset(this);
    return 0;
  }
  if (HIBYTE(v5) != 31) {
    return 0;
  }
  if (a2 == -1)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dyldtp_decode_window_update();
    }
    return 0;
  }
  uint64_t v8 = (void *)((char *)this + 104);
  if (*((void *)this + 13) == a2)
  {
    char v9 = (char *)this + 40;
  }
  else
  {
    unint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(this, &v29);
    if (v12)
    {
      char v9 = (char *)(v12 + 3);
    }
    else
    {
      char v9 = (char *)this + 40;
      if (*((_DWORD *)this + 12) && !dyldtp_complete((uint64_t)this + 40))
      {
        if (*v8 == -1) {
          ktrace_postprocess_file_internal_cold_1();
        }
        uint64_t v30 = (void *)((char *)this + 104);
        long long v13 = std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, (unint64_t *)this + 13, (uint64_t)&std::piecewise_construct, &v30);
        long long v14 = *(_OWORD *)v9;
        long long v15 = *(_OWORD *)((char *)this + 56);
        long long v16 = *(_OWORD *)((char *)this + 72);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)((char *)this + 88);
        *(_OWORD *)(v13 + 56) = v16;
        *(_OWORD *)(v13 + 40) = v15;
        *(_OWORD *)(v13 + 24) = v14;
      }
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)char v9 = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *uint64_t v8 = v29;
    }
  }
  long long v17 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((void *)this + 14, &v29);
  if (!v17) {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)this + 112, &v29, &v29);
  }
  unsigned int v18 = *(_DWORD *)(a4 + 48) & 0xFFFFFFFC;
  if (dyldtp_complete((uint64_t)v9))
  {
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *(_OWORD *)char v9 = 0u;
    *((_OWORD *)v9 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
  }
  switch((v18 - 520421376) >> 2)
  {
    case 0u:
    case 5u:
    case 0xAu:
      if (!a1) {
        goto LABEL_59;
      }
      unint64_t v19 = *(void *)(a4 + 8);
      if (!HIDWORD(v19) && !*(_DWORD *)(a4 + 20))
      {
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          dyldtp_decode_window_update();
        }
        v9[56] |= 2u;
        unint64_t v19 = *(void *)(a4 + 8);
      }
      *(void *)(v9 + 12) = v19;
      *(void *)(v9 + 20) = *(void *)(a4 + 16);
      *((void *)v9 + 4) = *(void *)(a4 + 24);
      *((void *)v9 + 5) = *(void *)(a4 + 32);
      goto LABEL_36;
    case 1u:
    case 6u:
    case 0xBu:
      if (!a1 || !v17 && !*((_DWORD *)v9 + 2) || (v9[56] & 2) != 0) {
        goto LABEL_59;
      }
      unsigned int v20 = v18 - 4;
      *((void *)v9 + 6) = *(void *)(a4 + 8);
      break;
    case 2u:
    case 7u:
    case 0xCu:
      *(int32x4_t *)(v9 + 12) = vuzp1q_s32(*(int32x4_t *)(a4 + 8), *(int32x4_t *)(a4 + 24));
LABEL_36:
      unsigned int v20 = v18;
      break;
    case 3u:
    case 8u:
    case 0xDu:
      if (!v17 && !*((_DWORD *)v9 + 2)) {
        v9[56] |= 1u;
      }
      unsigned int v20 = v18 - 4;
      *((void *)v9 + 4) = *(void *)(a4 + 8);
      *((int32x2_t *)v9 + 5) = vmovn_s64(*(int64x2_t *)(a4 + 16));
      *((_DWORD *)v9 + 12) = *(void *)(a4 + 32);
      break;
    case 4u:
    case 9u:
    case 0xEu:
      if ((v9[56] & 1) != 0 || !v17 && !*((_DWORD *)v9 + 2)) {
        goto LABEL_59;
      }
      unsigned int v20 = v18 - 8;
      *((_DWORD *)v9 + 13) = *(void *)(a4 + 8);
      break;
    default:
      if (!*((_DWORD *)v9 + 2)) {
        return 0;
      }
      goto LABEL_59;
  }
  if (v9[56])
  {
LABEL_59:
    uint64_t v10 = 0;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *(_OWORD *)char v9 = 0u;
    *((_OWORD *)v9 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
    return v10;
  }
  if (*(_DWORD *)v9)
  {
    if (v20 != *(_DWORD *)v9) {
      goto LABEL_59;
    }
    if (v20 != *((_DWORD *)v9 + 1)) {
      goto LABEL_59;
    }
    int v21 = *((_DWORD *)v9 + 2);
    if (v18 != v20 + 4 * v21) {
      goto LABEL_59;
    }
  }
  else
  {
    *(_DWORD *)char v9 = v20;
    *((_DWORD *)v9 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v18;
    int v21 = *((_DWORD *)v9 + 2);
  }
  *((_DWORD *)v9 + 2) = v21 + 1;
  if (!dyldtp_complete((uint64_t)v9)) {
    return 0;
  }
  uint64_t v10 = (long long *)((char *)this + 40);
  if (v9 != (char *)this + 40)
  {
    if (*((_DWORD *)this + 12) && !dyldtp_complete((uint64_t)this + 40))
    {
      uint64_t v30 = (void *)((char *)this + 104);
      long long v22 = std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, (unint64_t *)this + 13, (uint64_t)&std::piecewise_construct, &v30);
      long long v23 = *v10;
      long long v24 = *(_OWORD *)((char *)this + 56);
      long long v25 = *(_OWORD *)((char *)this + 72);
      *(_OWORD *)(v22 + 72) = *(_OWORD *)((char *)this + 88);
      *(_OWORD *)(v22 + 56) = v25;
      *(_OWORD *)(v22 + 40) = v24;
      *(_OWORD *)(v22 + 24) = v23;
    }
    long long v26 = *(_OWORD *)v9;
    long long v27 = *((_OWORD *)v9 + 1);
    long long v28 = *((_OWORD *)v9 + 3);
    *(_OWORD *)((char *)this + 72) = *((_OWORD *)v9 + 2);
    *(_OWORD *)((char *)this + 88) = v28;
    *uint64_t v10 = v26;
    *(_OWORD *)((char *)this + 56) = v27;
    *((void *)this + 13) = v29;
    std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__erase_unique<unsigned long long>(this, &v29);
  }
  return v10;
}

void *___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v3 = *(int *)(a1 + 64);
  uint64_t v4 = address_space_for_pid(*(ktrace_uuid_map **)(a1 + 32), v3);
  if (v4)
  {
    uint64_t v6 = v4[3];
    unsigned int v5 = (optional_uint64 *)(v4 + 3);
    if (v6)
    {
      unint64_t v7 = optional_uint64::value(v5);
      set_address_space_for_taskid(v1, v7, 0);
    }
  }
  set_address_space_for_pid(v1, v3, 0);
  double result = ktrace_uuid_map_ensure_address_space_for_tid(*(ktrace_uuid_map **)(a1 + 32), *(ktrace_session **)(a1 + 40), *(const void **)(a1 + 48));
  if (result && *(unsigned char *)(a1 + 68))
  {
    uint64_t v9 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 69)) {
      uint64_t v10 = *(void *)(v9 + 16);
    }
    else {
      uint64_t v10 = *(unsigned int *)(v9 + 12);
    }
    result[5] = v10;
    uint64_t v11 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 69)) {
      uint64_t v12 = *(void *)(v11 + 24);
    }
    else {
      uint64_t v12 = *(unsigned int *)(v11 + 16);
    }
    result[6] = v12;
  }
  return result;
}

void *ktrace_uuid_map_ensure_address_space_for_tid(ktrace_uuid_map *a1, ktrace_session *a2, const void *a3)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t task_uniqueid_for_thread = ktrace_get_task_uniqueid_for_thread((uint64_t)a2, a3);
  if (task_uniqueid_for_thread == -1 || (unint64_t v7 = address_space_for_taskid(a1, task_uniqueid_for_thread)) == 0)
  {
    unsigned int pid_for_thread = ktrace_get_pid_for_thread((uint64_t)a2, a3);
    if ((pid_for_thread & 0x80000000) != 0)
    {
      return 0;
    }
    else
    {
      int v9 = pid_for_thread;
      unint64_t v7 = address_space_for_pid(a1, pid_for_thread);
      if (!v7) {
        ktrace_address_space_create(v9);
      }
    }
  }
  return v7;
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef v2 = ktrace_uuid_map_ensure_address_space_for_tid(*(ktrace_uuid_map **)(a1 + 32), *(ktrace_session **)(a1 + 40), *(const void **)(a1 + 48));
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    if (uuid_is_null((const unsigned __int8 *)(a1 + 68)))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_3();
      }
      return;
    }
    unint64_t v4 = *(void *)(a1 + 88);
    long long v39 = 0u;
    long long v40 = v4;
    long long v37 = *(_OWORD *)(a1 + 68);
    long long v38 = 0u;
    *(_DWORD *)((char *)&v38 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = 5527621;
    LODWORD(v38) = 2;
    DWORD2(v38) = 1163157343;
    long long v41 = *(_OWORD *)(a1 + 96);
    long long v42 = 0u;
    uint64_t v5 = ktrace_address_space_symbol_owner_for_address(v3, v4, (__n128)0);
    uint64_t v6 = (uint64_t *)v5;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 16) == 3)
      {
        unint64_t v7 = (optional_uint64 *)(v5 + 56);
        if (v6[7])
        {
          uint64_t v8 = v6[6];
          if ((uint64_t)v40 - v8 <= (unint64_t)optional_uint64::value(v7))
          {
LABEL_36:
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v37);
            return;
          }
        }
        else
        {
          buf[0] = 0;
          *(void *)&long long v43 = 0;
          get_sc_and_slide(*(void *)(a1 + 32), (uint64_t)v6, buf, (optional_uint64 **)&v43);
          uint64_t v10 = v43;
          if ((void)v43 && buf[0])
          {
            uint64_t v11 = **(void **)(v43 + 16);
            uint64_t v12 = *(void *)(*(void *)(v43 + 16) + 8);
            uint64_t v13 = v12 - v11;
            if (v12 != v11)
            {
              ktrace_address_space_sort(v43, v9);
              uint64_t v14 = *(void *)(**(void **)(v10 + 16) + 48);
              uint64_t v15 = optional_uint64::value((optional_uint64 *)buf);
              uint64_t v16 = *(void *)(**(void **)(v10 + 16) + 32 * (v13 >> 5) - 48);
              uint64_t v17 = optional_uint64::value((optional_uint64 *)buf);
              if ((unint64_t)v40 >= v15 + v14 && (unint64_t)v40 <= v17 + v16) {
                goto LABEL_36;
              }
            }
          }
          else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          {
            unsigned int v18 = uuid_string(v37, *((uint64_t *)&v37 + 1));
            unint64_t v19 = uuid_string(*v6, v6[1]);
            ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_2((uint64_t)v18, (uint64_t)v19, (uint64_t)v45);
          }
        }
      }
      long long v20 = *(_OWORD *)v6;
      long long v43 = v37;
      *(_OWORD *)long long buf = v20;
      if ((void)v20 != (void)v37 || *((void *)&v20 + 1) != *((void *)&v37 + 1))
      {
        uint64_t v35 = SymbolOwner::min_range((SymbolOwner *)v6);
        uint64_t v36 = v22;
        v34[0] = SymbolOwner::min_range((SymbolOwner *)&v37);
        v34[1] = v23;
        if (!Range::intersects((unint64_t *)&v35, v34))
        {
LABEL_27:
          *(void *)&long long v43 = SymbolOwner::min_range((SymbolOwner *)v6);
          *((void *)&v43 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v27;
          uint64_t v35 = SymbolOwner::min_range((SymbolOwner *)&v37);
          uint64_t v36 = v28;
          if (Range::intersects((unint64_t *)&v43, (unint64_t *)&v35))
          {
            uint64_t v29 = *(void *)(a1 + 40);
            if (v29 && (uint64_t v30 = *(void *)(v29 + 304)) != 0) {
              char v31 = *(unsigned char *)(v30 + 288);
            }
            else {
              char v31 = 0;
            }
            ktrace_address_space_merge_owner(v3, (SymbolOwner *)v6, (uint64_t)&v37, v31);
            goto LABEL_36;
          }
LABEL_31:
          v32[2] = v39;
          v32[3] = v40;
          v32[4] = v41;
          *(_OWORD *)cf = v42;
          v32[0] = v37;
          v32[1] = v38;
          if ((void)v42) {
            CFRetain((CFTypeRef)v42);
          }
          ktrace_address_space_append(v3, (uint64_t)v32);
          SymbolOwner::~SymbolOwner((SymbolOwner *)v32);
          goto LABEL_36;
        }
        long long v24 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        {
          long long v25 = uuid_string(*v6, v6[1]);
          ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_1((uint64_t)v25, (uint64_t)v6, (uint8_t *)buf, v24);
        }
        ktrace_address_space_delete(v3, *v6, v6[1], v6[6]);
        uint64_t v6 = (uint64_t *)ktrace_address_space_symbol_owner_for_address(v3, v40, v26);
      }
    }
    if (!v6) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
}

void sub_1B39E4168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  SymbolOwner::~SymbolOwner((SymbolOwner *)va);
  _Unwind_Resume(a1);
}

uint64_t SymbolOwner::min_range(SymbolOwner *this)
{
  uint64_t v1 = (SymbolOwner *)((char *)this + 56);
  if (!*((void *)this + 7))
  {
    if (*((_DWORD *)this + 4) != 1) {
      return *((void *)this + 6);
    }
    uint64_t v3 = (SymbolOwner *)((char *)this + 40);
    if (*((void *)this + 5) && *((void *)this + 4))
    {
      uint64_t v2 = *((void *)this + 6);
      optional_uint64::value((SymbolOwner *)((char *)this + 32));
      optional_uint64::value(v3);
      return v2;
    }
    uint64_t v1 = (SymbolOwner *)((char *)this + 24);
    if (!*((void *)this + 3)) {
      return *((void *)this + 6);
    }
  }
  uint64_t v2 = *((void *)this + 6);
  optional_uint64::value(v1);
  return v2;
}

BOOL Range::intersects(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = *a1;
  if (*a1 <= *a2 && v2 - v3 < a1[1]) {
    return 1;
  }
  unint64_t v4 = a2[1];
  unint64_t v5 = v2 + v4 - 1;
  BOOL v7 = v5 >= v3;
  unint64_t v6 = v5 - v3;
  if (v7 && v6 < a1[1]) {
    return 1;
  }
  BOOL v7 = v3 < v2 || v3 - v2 >= v4;
  if (!v7) {
    return 1;
  }
  unint64_t v8 = v3 + a1[1] - 1;
  BOOL v7 = v8 >= v2;
  unint64_t v9 = v8 - v2;
  return v7 && v9 < v4;
}

void ktrace_address_space_delete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void **)(a1 + 16);
  BOOL v7 = (_OWORD *)*v5;
  unint64_t v6 = (_OWORD *)v5[1];
  if ((_OWORD *)*v5 != v6)
  {
    uint64_t v8 = 0;
    while (1)
    {
      long long v13 = v7[v8];
      BOOL v9 = (void)v13 == a2 && *((void *)&v13 + 1) == a3;
      if (v9 && *(void *)&v7[v8 + 3] == a4) {
        break;
      }
      v8 += 6;
      if (&v7[v8] == v6) {
        return;
      }
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SymbolOwner *,SymbolOwner *,SymbolOwner *,0>(&v7[v8 + 6], v6, (uint64_t)&v7[v8]);
    uint64_t v11 = v10;
    uint64_t v12 = v5[1];
    if (v12 != v10)
    {
      do
        SymbolOwner::~SymbolOwner((SymbolOwner *)(v12 - 96));
      while (v12 != v11);
    }
    v5[1] = v11;
  }
}

void ktrace_address_space_merge_owner(uint64_t a1, SymbolOwner *this, uint64_t a3, char a4)
{
  if (*(void *)this != *(void *)a3 || *((void *)this + 1) != *(void *)(a3 + 8))
  {
    if (a4 && !*(_DWORD *)(a1 + 32))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_address_space_merge_owner();
      }
    }
    else if (*((unsigned char *)this + 88))
    {
      SymbolOwner::operator=((uint64_t)this, (_OWORD *)a3);
    }
    return;
  }
  if (*((unsigned char *)this + 88)) {
    char v8 = *(unsigned char *)(a3 + 88) & 1;
  }
  else {
    char v8 = 0;
  }
  *((unsigned char *)this + 88) = *((unsigned char *)this + 88) & 0xFE | v8;
  if (!*((void *)this + 10))
  {
    BOOL v9 = *(const void **)(a3 + 80);
    if (v9) {
      SymbolOwner::set_path(this, v9);
    }
  }
  if (!*((void *)this + 8))
  {
    uint64_t v10 = *(void *)(a3 + 64);
    if (v10) {
      *((void *)this + 8) = v10;
    }
  }
  if (!*((void *)this + 9))
  {
    uint64_t v11 = *(void *)(a3 + 72);
    if (v11) {
      *((void *)this + 9) = v11;
    }
  }
  uint64_t v12 = *((void *)this + 7);
  if (!v12)
  {
    uint64_t v12 = *(void *)(a3 + 56);
    if (v12)
    {
      if (*((_DWORD *)this + 4) == *(_DWORD *)(a3 + 16)) {
        *((void *)this + 7) = v12;
      }
      else {
        uint64_t v12 = 0;
      }
    }
  }
  int v13 = *(_DWORD *)(a3 + 16);
  if (v13 != 1)
  {
    if (v13 == 2 || v13 == 5)
    {
      int v14 = *((_DWORD *)this + 4);
      if (v14 == 1)
      {
        unint64_t v15 = *((void *)this + 6);
        unint64_t v16 = *(void *)(a3 + 48);
        if (v16 == v15 && (v13 == 5 || !strcmp((const char *)(a3 + 24), "__TEXT")) && !*((void *)this + 3)) {
          *((void *)this + 3) = *(void *)(a3 + 56);
        }
        BOOL v17 = v16 >= v15;
        unint64_t v18 = v16 - v15;
        if (v18 != 0 && v17 && !*(_DWORD *)(a1 + 32) && (v13 == 5 || !strcmp((const char *)(a3 + 24), "__TEXT_EXEC")))
        {
          if (!*((void *)this + 4)) {
            *((void *)this + 4) = v18 + 1;
          }
          if (!*((void *)this + 5)) {
            *((void *)this + 5) = *(void *)(a3 + 56);
          }
        }
        return;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = 0;
      int v14 = *((_DWORD *)this + 4);
    }
    goto LABEL_57;
  }
  int v14 = *((_DWORD *)this + 4);
  if (v14 != 1)
  {
    int v19 = 1;
LABEL_57:
    if ((v14 == 5 || v14 == 2)
      && v19
      && *((void *)this + 6) == *(void *)(a3 + 48)
      && (v14 == 5 || !strcmp((const char *)this + 24, "__TEXT")))
    {
      *((void *)this + 3) = 0;
      *((void *)this + 4) = 0;
      *((void *)this + 5) = 0;
      *((_DWORD *)this + 4) = 1;
      if (!v12) {
        uint64_t v12 = *(void *)(a3 + 24);
      }
      *((void *)this + 3) = v12;
      *((void *)this + 7) = *(void *)(a3 + 56);
    }
    return;
  }
  if (!*((void *)this + 3)) {
    *((void *)this + 3) = *(void *)(a3 + 24);
  }
  if (!*((void *)this + 5)) {
    *((void *)this + 5) = *(void *)(a3 + 40);
  }
  if (!*((void *)this + 4)) {
    *((void *)this + 4) = *(void *)(a3 + 32);
  }
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_75(uint64_t a1)
{
  unint64_t v2 = ktrace_uuid_map_ensure_address_space_for_tid(*(ktrace_uuid_map **)(a1 + 32), *(ktrace_session **)(a1 + 40), *(const void **)(a1 + 48));
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 68);
    uint64_t v4 = *(void *)(a1 + 76);
    uint64_t v5 = *(void *)(a1 + 88);
    ktrace_address_space_delete((uint64_t)v2, v3, v4, v5);
  }
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_76(uint64_t a1)
{
  unint64_t v2 = ktrace_uuid_map_ensure_address_space_for_tid(*(ktrace_uuid_map **)(a1 + 32), *(ktrace_session **)(a1 + 40), *(const void **)(a1 + 48));
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    if (uuid_is_null((const unsigned __int8 *)(a1 + 68)))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_76_cold_1();
      }
    }
    else if ((*(unsigned char *)(v3 + 36) & 2) == 0)
    {
      uint64_t v4 = *(void *)(a1 + 88);
      long long v7 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v5 = *(_OWORD *)(a1 + 68);
      long long v6 = 0u;
      LODWORD(v6) = 3;
      *(void *)&long long v8 = v4;
      ktrace_address_space_append(v3, (uint64_t)&v5);
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v5);
    }
  }
}

void sub_1B39E4774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ktrace_uuid_map_update(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  return ktrace_uuid_map_update_internal(a1, a2, a3, a4, 1, (uint64_t)&__block_literal_global_9);
}

uint64_t __ktrace_uuid_map_update_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t ktrace_visit_uuid(unint64_t a1, uint64_t *a2)
{
  _OWORD v3[3] = 0u;
  memset(v3, 0, 32);
  void v3[2] = a1;
  return visit_uuid(v3, *a2, a2[1]);
}

uint64_t visit_uuid(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*a1) {
    ktrace_client_get_file_info();
  }
  memset(dst, 0, sizeof(dst));
  *(void *)src = a2;
  uint64_t v5 = a3;
  uuid_copy(dst, src);
  return OSLogLookupPathWithUUID();
}

void ktrace_visit_inode(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[3] = 0u;
  memset(v3, 0, 32);
  void v3[2] = a1;
  visit_inode_while_locked((uint64_t)v3, a2, a3);
}

void visit_inode_while_locked(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v6 = *(NSObject **)(a1 + 48);
  if (v6) {
    dispatch_assert_queue_V2(v6);
  }
  CFStringRef v7 = cfaasprintf("%llx", a2);
  CFStringRef v8 = cfaasprintf("%llx", a3);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v7);
  if (!Value || !CFDictionaryContainsKey(Value, v8))
  {
    if (!*(void *)a1)
    {
LABEL_13:
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      fsid_t v22 = (fsid_t)a2;
      if (fsgetpath(cStr, 0x400uLL, &v22, a3) < 0)
      {
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
        CFStringRef v13 = CFStringCreateWithCString(0, cStr, 0x8000100u);
        CFStringRef v14 = v13;
        if (!v13) {
          ktrace_postprocess_file_internal_cold_1();
        }
        CFAutorelease(v13);
        CFDictionarySetValue(Mutable, @"Path", v14);
        utf8(v14);
        fsid_t v22 = 0;
        unint64_t v23 = &v22;
        uint64_t v24 = 0x2020000000;
        CFMutableDictionaryRef v25 = 0;
        CFMutableDictionaryRef v25 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        unint64_t v15 = (const void *)v23[3];
        if (!v15)
        {
          _os_assert_log();
          uint64_t v17 = _os_crash();
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v17);
        }
        CFAutorelease(v15);
        uint64_t v18 = 0;
        int v19 = &v18;
        uint64_t v20 = 0x2020000000;
        char v21 = 1;
        *(void *)cStr = MEMORY[0x1E4F143A8];
        uint64_t v27 = 3221225472;
        uint64_t v28 = ___ZL22get_summary_from_machoPKc_block_invoke;
        uint64_t v29 = &unk_1E6062E38;
        uint64_t v30 = &v22;
        char v31 = &v18;
        CSSymbolicatorForeachSymbolicatorWithPath();
        if (*((unsigned char *)v19 + 24)) {
          unint64_t v16 = 0;
        }
        else {
          unint64_t v16 = (const void *)v23[3];
        }
        _Block_object_dispose(&v18, 8);
        _Block_object_dispose(&v22, 8);
        if (v16) {
          CFDictionarySetValue(Mutable, @"Images", v16);
        }
        if (Mutable)
        {
          merge_info_while_locked(a1, a2, a3, Mutable);
          CFRelease(Mutable);
        }
      }
      return;
    }
    CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 24);
    if (!v10)
    {
      CFDictionaryRef v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(a1 + 24) = v10;
    }
    uint64_t v11 = CFDictionaryGetValue(v10, v7);
    if (!v11)
    {
      uint64_t v11 = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), v7, v11);
      CFRelease(v11);
    }
    if (!CFSetContainsValue((CFSetRef)v11, v8))
    {
      if (*(void *)a1) {
        ktrace_client_get_file_info();
      }
      goto LABEL_13;
    }
  }
}

void sub_1B39E4CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __ktrace_get_live_kernel_map_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t image_summary = make_image_summary(a2);
  if (image_summary)
  {
    uint64_t v4 = (const void *)image_summary;
    uint64_t v5 = *(__CFArray **)(a1 + 32);
    CFArrayAppendValue(v5, v4);
  }
}

uint64_t make_image_summary(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes();
  if (!CFUUIDBytes)
  {
    uint64_t v20 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      make_image_summary(v6, v5, v20);
    }
    return 0;
  }
  CFStringRef v8 = (const unsigned __int8 *)CFUUIDBytes;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFDictionaryRef v10 = Mutable;
  memset(out, 0, 37);
  uuid_unparse(v8, out);
  CFStringRef v11 = CFStringCreateWithCString(0, out, 0x8000100u);
  if (!v11) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFStringRef v12 = v11;
  CFAutorelease(v11);
  CFDictionarySetValue(v10, @"UUID_String", v12);
  if (!v3)
  {
LABEL_7:
    CFMutableArrayRef v16 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!v16) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFMutableArrayRef v17 = v16;
    CSSymbolOwnerForeachSegment();
    CFDictionarySetValue(v10, @"Segments", v17);
    CFRelease(v17);
    *(void *)uuid_t out = CSSymbolOwnerGetFlags();
    CFNumberRef v18 = CFNumberCreate(0, kCFNumberLongLongType, out);
    if (!v18) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFNumberRef v19 = v18;
    CFAutorelease(v18);
    CFDictionarySetValue(v10, @"Flags", v19);
    CFAutorelease(v10);
    return (uint64_t)v10;
  }
  Path = (const char *)CSSymbolOwnerGetPath();
  CFStringRef v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Path, 0x8000100u);
  if (v14)
  {
    CFStringRef v15 = v14;
    CFAutorelease(v14);
    CFDictionarySetValue(v10, @"Path", v15);
    goto LABEL_7;
  }
  uint64_t image_summary = make_image_summary(v24, Path, v6, v5, out);
  return ktrace_uuid_map_postprocess_file(image_summary);
}

uint64_t ktrace_uuid_map_postprocess_file(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableDictionaryRef v11 = Mutable;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x16012000000;
  v39[3] = __Block_byref_object_copy__80;
  v39[4] = __Block_byref_object_dispose__81;
  v39[5] = "%6";
  v39[6] = a3;
  memset(&v39[7], 0, 24);
  v39[10] = Mutable;
  v39[11] = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  v39[12] = ktrace_postprocessing_get_processing_queue((uint64_t)a5);
  v39[13] = dispatch_group_create();
  memset(v40, 0, sizeof(v40));
  int v41 = 1065353216;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v45 = 0;
  uint64_t v48 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  v49 &= 0xFCu;
  uint64_t v50 = -1;
  memset(v51, 0, sizeof(v51));
  int v52 = 1065353216;
  int v53 = 1;
  memset(v54, 0, sizeof(v54));
  int v55 = 1065353216;
  memset(v56, 0, sizeof(v56));
  int v57 = 1065353216;
  v38[0] = 0;
  v38[1] = 0;
  char is_64_bit = ktrace_file_is_64_bit(a2);
  uint64_t v34 = 0;
  uint64_t v35 = &v34;
  uint64_t v36 = 0x2020000000;
  uint64_t v37 = 0;
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  CFTypeRef v33[2] = __ktrace_uuid_map_postprocess_file_block_invoke;
  v33[3] = &unk_1E6062818;
  v33[4] = &v34;
  ktrace_file_header_iterate(a2, 0, (uint64_t)v33, v13, v14, v15, v16, v17);
  if (!v35[3])
  {
    v35[3] = 64;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      ktrace_uuid_map_postprocess_file_cold_2();
    }
  }
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  int v31[2] = __ktrace_uuid_map_postprocess_file_block_invoke_83;
  v31[3] = &unk_1E6062B88;
  void v31[4] = v39;
  int v32 = a4;
  ktrace_file_iterate(a2, 0, (uint64_t)v31, v18, v19, v20, v21, v22);
  unint64_t v23 = malloc_type_calloc(v35[3], 0x18uLL, 0x1000040BD32EBF2uLL);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = __ktrace_uuid_map_postprocess_file_block_invoke_3;
  v30[3] = &unk_1E6062BB0;
  v30[4] = v39;
  ktrace_events_single(a1, 117440520, v30);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __ktrace_uuid_map_postprocess_file_block_invoke_4;
  v29[3] = &unk_1E6062BB0;
  v29[4] = v39;
  ktrace_events_single(a1, 117571592, v29);
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  unsigned int v27[2] = __ktrace_uuid_map_postprocess_file_block_invoke_5;
  void v27[3] = &unk_1E6062C00;
  char v28 = is_64_bit;
  v27[4] = v39;
  v27[5] = a2;
  v27[6] = v38;
  ktrace_events_range(a1, 520421376, 520486912, v27);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __ktrace_uuid_map_postprocess_file_block_invoke_7;
  v25[3] = &unk_1E6062C50;
  int v26 = a4;
  v25[4] = v39;
  v25[5] = a3;
  v25[6] = a2;
  v25[7] = v11;
  v25[8] = v23;
  ktrace_postprocessing_set_completed_handler(a5, v25);
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(v39, 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v56);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v54);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v51);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v40);
  return 0;
}

void sub_1B39E549C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a57, 8);
  postprocess_data::~postprocess_data((postprocess_data *)(v57 + 48));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__80(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 112, (uint64_t *)(a2 + 112));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  long long v7 = *(_OWORD *)(a2 + 168);
  long long v8 = *(_OWORD *)(a2 + 184);
  long long v9 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  *(_OWORD *)(a1 + 168) = v7;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 224, (uint64_t *)(a2 + 224));
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 272, (uint64_t *)(a2 + 272));

  return std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 312, (uint64_t *)(a2 + 312));
}

uint64_t __Block_byref_object_dispose__81(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 312);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 272);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 224);

  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 112);
}

void postprocess_data::~postprocess_data(postprocess_data *this)
{
}

BOOL __ktrace_uuid_map_postprocess_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = ktrace_machine_create(a2);
  uint64_t v4 = v3;
  if (v3)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ktrace_machine_max_cpus(v3);
    ktrace_machine_destroy(v4);
  }
  return v4 == 0;
}

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_83(uint64_t a1, void *a2)
{
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20990) {
    goto LABEL_7;
  }
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) <= 1)
    {
LABEL_7:
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      int v6[2] = __ktrace_uuid_map_postprocess_file_block_invoke_2;
      v6[3] = &unk_1E6062B60;
      v6[4] = *(void *)(a1 + 32);
      int v7 = *(_DWORD *)(a1 + 40);
      ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v6);
    }
  }
  else if (v4 == 36864 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    goto LABEL_7;
  }
  return 1;
}

void __ktrace_uuid_map_postprocess_file_block_invoke_2(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    unint64_t v5 = a2;
    char v6 = 0;
    int v51 = 0;
    int v7 = 0;
    __s1 = 0;
    long long v8 = *(void **)(*(void *)(a1 + 32) + 8);
    int v9 = *(_DWORD *)(a1 + 40);
    uint64_t v46 = (uint64_t)(v8 + 34);
    uint64_t v47 = v8;
    uint64_t v10 = (uint64_t)(v8 + 39);
    do
    {
      if (v3 + *(unsigned int *)(v5 + 4) > a3) {
        return;
      }
      int v11 = *(_DWORD *)v5;
      unsigned int v12 = *(_DWORD *)v5 & 0xFFFFFFF0;
      if (v12 == 32) {
        int v13 = 17;
      }
      else {
        int v13 = *(_DWORD *)v5;
      }
      if (v13 == 19) {
        ++v7;
      }
      if (v13 == 20 && !--v7)
      {
        if ((v9 & 1) == 0 || (v51 == 0) | v6 & 1)
        {
          __s1 = 0;
          int v51 = 0;
          char v6 = 0;
        }
        else if (!strcmp(__s1, "watchdogd") || !strcmp(__s1, "notifyd") || !strncmp(__s1, "launchd", 7uLL))
        {
          __s1 = 0;
          int v7 = 0;
          int v51 = 0;
          char v6 = 0;
        }
        else
        {
          if (!v47[6])
          {
            v61[0] = 0;
            v61[1] = v61;
            v61[2] = 0x3052000000;
            v61[3] = __Block_byref_object_copy__190;
            uint64_t v14 = v47[13];
            v61[4] = __Block_byref_object_dispose__191;
            v61[5] = v14;
            v60[0] = 0;
            v60[1] = v60;
            v60[2] = 0x3052000000;
            v60[3] = __Block_byref_object_copy__190;
            uint64_t v16 = v47[11];
            uint64_t v15 = v47[12];
            _OWORD v60[4] = __Block_byref_object_dispose__191;
            v60[5] = v15;
            v59[0] = 0;
            v59[1] = v59;
            v59[2] = 0x2020000000;
            void v59[3] = v16;
            global_queue = dispatch_get_global_queue(25, 0);
            *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
            *((void *)&block + ktrace_session_set_default_event_names_enabled(global_session, 1) = 3221225472;
            int v53 = ___ZL13visit_processP16operating_systemj_block_invoke;
            char v54 = &unk_1E6062E60;
            int v58 = v51;
            int v55 = v61;
            uint64_t v56 = v60;
            uint64_t v57 = v59;
            dispatch_group_async(v14, global_queue, &block);
            _Block_object_dispose(v59, 8);
            _Block_object_dispose(v60, 8);
            _Block_object_dispose(v61, 8);
          }
          __s1 = 0;
          int v7 = 0;
          int v51 = 0;
          char v6 = 0;
          int v11 = *(_DWORD *)v5;
          unsigned int v12 = *(_DWORD *)v5 & 0xFFFFFFF0;
        }
      }
      if (v12 == 32) {
        int v18 = 17;
      }
      else {
        int v18 = v11;
      }
      if (v18 == 2312)
      {
        unsigned int v22 = *(_DWORD *)(v5 + 4);
        uint64_t v23 = *(void *)(v5 + 8);
        if (v22 != 32 || (v23 & 0x8F) != 0)
        {
          unsigned int v24 = v23 & 0xF;
          BOOL v36 = v22 >= v24;
          unsigned int v25 = v22 - v24;
          if (!v36) {
            unsigned int v25 = 0;
          }
          if (v25 >= 0x20 && !uuid_is_null((const unsigned __int8 *)(v5 + 24)))
          {
            blocuint64_t k = *(_OWORD *)(v5 + 24);
            std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v46, &block, &block);
          }
        }
      }
      else if (v18 == 2309)
      {
        unsigned int v19 = *(_DWORD *)(v5 + 4);
        unsigned int v20 = *(_DWORD *)(v5 + 8) & 0xF;
        BOOL v36 = v19 >= v20;
        unsigned int v21 = v19 - v20;
        if (!v36) {
          unsigned int v21 = 0;
        }
        if (v21 >= 0x78)
        {
          int v51 = *(_DWORD *)(v5 + 100);
          __s1 = (char *)(v5 + 104);
        }
      }
      uint64_t v26 = *(unsigned int *)(v5 + 4);
      unint64_t v27 = v3 + v26;
      if (v3 + v26 <= a3)
      {
        int v28 = *(_DWORD *)v5;
        if (*(_DWORD *)v5 == 17 || (v28 & 0xFFFFFFF0) == 0x20)
        {
          unint64_t v32 = *(void *)(v5 + 8);
          if (v32)
          {
            if (v28 != 17)
            {
              unsigned int v37 = *(_DWORD *)v5 & 0xF;
              BOOL v36 = v26 >= v37;
              unsigned int v38 = v26 - v37;
              if (!v36 || v38 < v32 || HIDWORD(v32) != 48) {
                goto LABEL_41;
              }
              if (v38 % v32 || v38 / v32 <= 0x13) {
                goto LABEL_41;
              }
LABEL_127:
              int v49 = v9;
              unsigned int v43 = 0;
              char v6 = 1;
              do
              {
                if (*(_DWORD *)v5 == 17)
                {
                  if (SHIDWORD(v32) <= 2310)
                  {
                    switch(HIDWORD(v32))
                    {
                      case 0x30:
                        unsigned int v44 = 20;
                        break;
                      case 0x31:
                        unsigned int v44 = 24;
                        break;
                      case 0x81A:
LABEL_136:
                        unsigned int v44 = 8;
                        break;
                      default:
LABEL_139:
                        unsigned int v44 = 0;
                        break;
                    }
                  }
                  else
                  {
                    switch(HIDWORD(v32))
                    {
                      case 0x907:
                        unsigned int v44 = 4;
                        break;
                      case 0x908:
                      case 0x909:
                        goto LABEL_139;
                      case 0x90A:
                      case 0x90C:
                        goto LABEL_136;
                      case 0x90B:
                      case 0x90D:
                        unsigned int v44 = 16;
                        break;
                      default:
                        if (HIDWORD(v32) != 2369) {
                          goto LABEL_139;
                        }
                        unsigned int v44 = 48;
                        break;
                    }
                  }
                }
                else
                {
                  unsigned int v44 = (*(_DWORD *)(v5 + 4) - (*(_DWORD *)v5 & 0xFu)) / v32;
                }
                int v45 = (const unsigned __int8 *)(v44 * v43 + v5 + 16 + 4);
                if (uuid_is_null(v45))
                {
                  char v6 = 0;
                }
                else
                {
                  blocuint64_t k = *(_OWORD *)v45;
                  std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v10, &block, &block);
                }
                ++v43;
                unint64_t v32 = *(void *)(v5 + 8);
              }
              while (v43 < v32);
              uint64_t v26 = *(unsigned int *)(v5 + 4);
              unint64_t v27 = v3 + v26;
              int v9 = v49;
              goto LABEL_41;
            }
            if (SHIDWORD(v32) <= 2310)
            {
              switch(HIDWORD(v32))
              {
                case 0x30:
                  unsigned int v33 = 20;
                  break;
                case 0x31:
                  unsigned int v33 = 24;
                  break;
                case 0x81A:
LABEL_87:
                  unsigned int v33 = 8;
                  break;
                default:
                  goto LABEL_41;
              }
            }
            else
            {
              switch(HIDWORD(v32))
              {
                case 0x907:
                  unsigned int v33 = 4;
                  break;
                case 0x908:
                case 0x909:
                  goto LABEL_41;
                case 0x90A:
                case 0x90C:
                  goto LABEL_87;
                case 0x90B:
                case 0x90D:
                  unsigned int v33 = 16;
                  break;
                default:
                  if (HIDWORD(v32) != 2369) {
                    goto LABEL_41;
                  }
                  unsigned int v33 = 48;
                  break;
              }
            }
            if (v26 / v33 >= v32
              && HIDWORD(v32) == 48
              && v26 % v32 < 0x10)
            {
              goto LABEL_127;
            }
          }
          else if (!v26 && v28 == 17 && (v32 & 0xFFFFFFFF00000000) == 0x3000000000)
          {
            char v6 = 1;
          }
        }
      }
LABEL_41:
      if (v27 > a3) {
        goto LABEL_120;
      }
      int v29 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 != 17 && (v29 & 0xFFFFFFF0) != 0x20) {
        goto LABEL_120;
      }
      unint64_t v30 = *(void *)(v5 + 8);
      if (!v30)
      {
        if (!v26 && (v30 & 0xFFFFFFFF00000000) == 0x3100000000 && v29 == 17) {
          char v6 = 1;
        }
        goto LABEL_120;
      }
      if (v29 == 17)
      {
        if (SHIDWORD(v30) <= 2310)
        {
          switch(HIDWORD(v30))
          {
            case 0x30:
              unsigned int v31 = 20;
              break;
            case 0x31:
              unsigned int v31 = 24;
              break;
            case 0x81A:
LABEL_83:
              unsigned int v31 = 8;
              break;
            default:
              goto LABEL_120;
          }
        }
        else
        {
          switch(HIDWORD(v30))
          {
            case 0x907:
              unsigned int v31 = 4;
              break;
            case 0x908:
            case 0x909:
              goto LABEL_120;
            case 0x90A:
            case 0x90C:
              goto LABEL_83;
            case 0x90B:
            case 0x90D:
              unsigned int v31 = 16;
              break;
            default:
              if (HIDWORD(v30) != 2369) {
                goto LABEL_120;
              }
              unsigned int v31 = 48;
              break;
          }
        }
        if (v26 / v31 >= v30
          && HIDWORD(v30) == 49
          && v26 % v30 < 0x10)
        {
          goto LABEL_99;
        }
      }
      else
      {
        unsigned int v34 = *(_DWORD *)v5 & 0xF;
        BOOL v36 = v26 >= v34;
        unsigned int v35 = v26 - v34;
        if (v36 && v35 >= v30 && HIDWORD(v30) == 49)
        {
          BOOL v36 = !(v35 % v30) && v35 / v30 >= 0x18;
          if (v36)
          {
LABEL_99:
            int v48 = v9;
            unsigned int v40 = 0;
            char v6 = 1;
            do
            {
              if (*(_DWORD *)v5 == 17)
              {
                if (SHIDWORD(v30) <= 2310)
                {
                  switch(HIDWORD(v30))
                  {
                    case 0x30:
                      unsigned int v41 = 20;
                      break;
                    case 0x31:
                      unsigned int v41 = 24;
                      break;
                    case 0x81A:
LABEL_108:
                      unsigned int v41 = 8;
                      break;
                    default:
LABEL_111:
                      unsigned int v41 = 0;
                      break;
                  }
                }
                else
                {
                  switch(HIDWORD(v30))
                  {
                    case 0x907:
                      unsigned int v41 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_111;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_108;
                    case 0x90B:
                    case 0x90D:
                      unsigned int v41 = 16;
                      break;
                    default:
                      if (HIDWORD(v30) != 2369) {
                        goto LABEL_111;
                      }
                      unsigned int v41 = 48;
                      break;
                  }
                }
              }
              else
              {
                unsigned int v41 = (*(_DWORD *)(v5 + 4) - (*(_DWORD *)v5 & 0xFu)) / v30;
              }
              uint64_t v42 = (const unsigned __int8 *)(v41 * v40 + v5 + 16 + 8);
              if (uuid_is_null(v42))
              {
                char v6 = 0;
              }
              else
              {
                blocuint64_t k = *(_OWORD *)v42;
                std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v10, &block, &block);
              }
              ++v40;
              unint64_t v30 = *(void *)(v5 + 8);
            }
            while (v40 < v30);
            unint64_t v27 = v3 + *(unsigned int *)(v5 + 4);
            int v9 = v48;
          }
        }
      }
LABEL_120:
      unint64_t v3 = v27 + 16;
      unint64_t v5 = v27;
    }
    while (v27 + 16 <= a3);
  }
}

void __ktrace_uuid_map_postprocess_file_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 | v4) {
    visit_inode_while_locked(*(void *)(*(void *)(a1 + 32) + 8) + 48, v3, v4);
  }
}

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_4(uint64_t a1)
{
  return DyldDecodeWindow::reset((DyldDecodeWindow *)(*(void *)(*(void *)(a1 + 32) + 8) + 112));
}

uint64_t DyldDecodeWindow::reset(DyldDecodeWindow *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  *(void *)&long long v6 = 0;
  long long v5 = 0uLL;
  DWORD2(v6) = 0;
  *(void *)&long long v8 = 0;
  long long v7 = 0uLL;
  BYTE8(v8) = 0;
  uint64_t v9 = -1;
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  int v12 = 1;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign((uint64_t)this, (uint64_t *)v3);
  *(_OWORD *)((char *)this + 56) = v6;
  *(_OWORD *)((char *)this + 72) = v7;
  *(_OWORD *)((char *)this + 88) = v8;
  *((void *)this + 13) = v9;
  *(_OWORD *)((char *)this + 40) = v5;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign((uint64_t)this + 112, (uint64_t *)v10);
  *((_DWORD *)this + 38) = v12;
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v10);
  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v3);
}

void __ktrace_uuid_map_postprocess_file_block_invoke_5(uint64_t a1, uint64_t a2)
{
  HIDWORD(v3) = *(_DWORD *)(a2 + 48);
  LODWORD(v3) = HIDWORD(v3) - 520421376;
  unsigned int v2 = v3 >> 2;
  if (v2 <= 0xC)
  {
    int v6 = 1 << v2;
    if ((v6 & 0xA5) == 0)
    {
      if ((v6 & 0x1400) == 0) {
        return;
      }
      uint64_t v13 = dyldtp_decode_window_update(*(unsigned __int8 *)(a1 + 56), *(void *)(a2 + 40), (DyldDecodeWindow *)(*(void *)(*(void *)(a1 + 32) + 8) + 112), a2);
      if (!v13) {
        return;
      }
      uint64_t v14 = (const unsigned __int8 *)v13 + 12;
      if (!uuid_compare((const unsigned __int8 *)v13 + 12, *(const unsigned __int8 **)(a1 + 48))) {
        return;
      }
      uuid_copy(*(unsigned __int8 **)(a1 + 48), v14);
      if (!uuid_is_null(v14))
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8) + 272;
        long long valuePtr = *(_OWORD *)v14;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v15, &valuePtr, &valuePtr);
      }
    }
    long long v7 = dyldtp_decode_window_update(*(unsigned __int8 *)(a1 + 56), *(void *)(a2 + 40), (DyldDecodeWindow *)(*(void *)(*(void *)(a1 + 32) + 8) + 112), a2);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = (long long *)((char *)v7 + 12);
      if (!uuid_is_null((const unsigned __int8 *)v7 + 12))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8) + 312;
        long long valuePtr = *v9;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v10, &valuePtr, &valuePtr);
      }
      if (*((_DWORD *)v8 + 12))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = *(void **)(v11 + 8);
        if (*((_DWORD *)v8 + 10))
        {
          visit_inode_while_locked((uint64_t)(v12 + 6), *((void *)v8 + 5), *((void *)v8 + 6));
          return;
        }
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        uint64_t v26 = __ktrace_uuid_map_postprocess_file_block_invoke_6;
        unint64_t v27 = &unk_1E6062BD8;
        uint64_t v28 = v11;
        int v29 = v8;
        uint64_t v16 = v12[8];
        if (v16) {
          goto LABEL_21;
        }
        if (v12[6]) {
          ktrace_client_get_mounts();
        }
        int v17 = getfsstat(0, 0, 2);
        if (v17 >= 1)
        {
          int v18 = v17;
          uint64_t v19 = v17;
          int v20 = 2168 * v17;
          unsigned int v21 = (statfs *)malloc_type_malloc(2168 * v17, 0x23D31F33uLL);
          v12[7] = v21;
          void v12[8] = v19;
          if (!v21) {
            ktrace_postprocess_file_internal_cold_1();
          }
          if (getfsstat(v21, v20, 2) != v18) {
            ktrace_postprocess_file_internal_cold_1();
          }
          uint64_t v16 = v12[8];
LABEL_21:
          if (v16 >= 1)
          {
            uint64_t v22 = 0;
            for (uint64_t i = 0; i < v16; ++i)
            {
              uint64_t v24 = v12[7] + v22;
              if ((*(unsigned char *)(v24 + 65) & 0x10) != 0)
              {
                v26((uint64_t)v25, *(void *)(v24 + 48));
                uint64_t v16 = v12[8];
              }
              v22 += 2168;
            }
          }
        }
      }
    }
  }
}

void __ktrace_uuid_map_postprocess_file_block_invoke_6(uint64_t a1, uint64_t a2)
{
}

void __ktrace_uuid_map_postprocess_file_block_invoke_7(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    unint64_t v3 = *(uint64_t **)(*(void *)(v2 + 8) + 288);
    if (v3)
    {
      do
      {
        memset(dst, 0, sizeof(dst));
        *(_OWORD *)uint64_t v26 = *((_OWORD *)v3 + 1);
        uuid_copy(dst, (const unsigned __int8 *)v26);
        if (*(void *)(a1 + 40)) {
          ktrace_client_get_dscsym();
        }
        v26[0] = 0;
        size_t v30 = 0;
        if (!dscsym_mmap_dscsym_for_uuid())
        {
          ktrace_file_append_chunk(*(void *)(a1 + 48), 32769, 0, 0, (UInt8 *)v26[0], v30);
          munmap(v26[0], v30);
        }
        unint64_t v3 = (uint64_t *)*v3;
      }
      while (v3);
      uint64_t v2 = *(void *)(a1 + 32);
    }
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = __ktrace_uuid_map_postprocess_file_block_invoke_8;
    v29[3] = &unk_1E6062C28;
    v29[4] = v2;
    v26[0] = 0;
    if (pthread_create(v26, 0, (void *(__cdecl *)(void *))_block_trampoline, v29))
    {
      int v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_5();
      }
      *__error() = v4;
    }
    else if (!pthread_join(v26[0], 0))
    {
      goto LABEL_17;
    }
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_4();
    }
    *__error() = v5;
  }
LABEL_17:
  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 104), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 104));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 104) = 0;
  if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 88)))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"Processes", *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 88));
    CFDataRef Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    CFRelease(Mutable);
    if (!Data) {
      ktrace_postprocess_file_internal_cold_1();
    }
    uint64_t v8 = *(void *)(a1 + 48);
    BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
    CFIndex Length = CFDataGetLength(Data);
    ktrace_file_append_chunk(v8, 32784, 0, 0, BytePtr, Length);
    CFRelease(Data);
  }
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    CFDataRef v11 = CFPropertyListCreateData(0, *(CFPropertyListRef *)(a1 + 56), kCFPropertyListBinaryFormat_v1_0, 0, 0);
    CFDataRef v12 = v11;
    if (!v11) {
      ktrace_postprocess_file_internal_cold_1();
    }
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = (UInt8 *)CFDataGetBytePtr(v11);
    CFIndex v15 = CFDataGetLength(v12);
    ktrace_file_append_chunk(v13, 32772, 1, 0, v14, v15);
    CFRelease(v12);
    if (*(void *)(a1 + 40)) {
      ktrace_client_get_live_kernel_map();
    }
    live_kernel_map = ktrace_get_live_kernel_map();
    if (live_kernel_map)
    {
      CFDataRef v17 = CFPropertyListCreateData(0, live_kernel_map, kCFPropertyListXMLFormat_v1_0, 0, 0);
      CFDataRef v18 = v17;
      if (!v17) {
        ktrace_postprocess_file_internal_cold_1();
      }
      uint64_t v19 = *(void *)(a1 + 48);
      int v20 = (UInt8 *)CFDataGetBytePtr(v17);
      CFIndex v21 = CFDataGetLength(v18);
      ktrace_file_append_chunk(v19, 32773, 0, 0, v20, v21);
      CFRelease(v18);
    }
  }
  uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v23 = (void *)v22[7];
  if (v23) {
    free(v23);
  }
  uint64_t v24 = (const void *)v22[9];
  if (v24) {
    CFRelease(v24);
  }
  unsigned int v25 = (const void *)v22[11];
  if (v25) {
    CFRelease(v25);
  }
  *(_OWORD *)uint64_t v26 = 0u;
  long long v27 = 0u;
  int v28 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign(*(void *)(*(void *)(a1 + 32) + 8) + 272, (uint64_t *)v26);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v26);
  *(_OWORD *)uint64_t v26 = 0u;
  long long v27 = 0u;
  int v28 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign(*(void *)(*(void *)(a1 + 32) + 8) + 312, (uint64_t *)v26);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v26);
  free(*(void **)(a1 + 64));
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_8(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(*(void *)(result + 32) + 8) + 328);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      double result = visit_uuid((void *)(*(void *)(*(void *)(v2 + 32) + 8) + 48), v1[2], v1[3]);
      uint64_t v1 = (void *)*v1;
    }
    while (v1);
  }
  return result;
}

void symbolication_context::symbolication_context(uint64_t a1)
{
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  ktrace_log_init();
  operator new();
}

void symbolication_context::~symbolication_context(symbolication_context *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v2);
    MEMORY[0x1B3EBEC50](v3, 0x10A0C408EF24B1CLL);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::~__hash_table(v4);
    MEMORY[0x1B3EBEC50](v5, 0x10A0C408EF24B1CLL);
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    uint64_t v7 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v6);
    MEMORY[0x1B3EBEC50](v7, 0x10A0C408EF24B1CLL);
  }
}

void ktrace_symbolicate_file()
{
}

void sub_1B39E6E40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EBEC50](v1, 0x10A0C407A870E32);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_symbolicate_file_block_invoke(uint64_t a1, void *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 32771 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) > 0x18)
    {
      uint64_t v4 = ktrace_chunk_map_data(a2, 0, 0x18uLL);
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 16);
        long long v8 = *(_OWORD *)v5;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v6, &v8, &v8);
        ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, 24);
      }
      else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        __ktrace_symbolicate_file_block_invoke_cold_2();
      }
    }
    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      __ktrace_symbolicate_file_block_invoke_cold_1();
    }
  }
  return 1;
}

uint64_t ktrace_symbolicate_path(uint64_t a1, uint64_t a2, const char *a3)
{
  if (ktrace_file_open(a3, 1)) {
    ktrace_symbolicate_file();
  }
  return 0xFFFFFFFFLL;
}

void ktrace_symbolicator_create()
{
}

KtraceSymbolicator *ktrace_symbolicator_destroy(KtraceSymbolicator *result)
{
  if (result)
  {
    KtraceSymbolicator::~KtraceSymbolicator(result);
    JUMPOUT(0x1B3EBEC50);
  }
  return result;
}

uint64_t KtraceSymbolicator::enable_symbolication(void *a1)
{
  if (!*a1) {
    operator new();
  }
  return 0;
}

void sub_1B39E70EC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EBEC50](v1, 0x10A0C407A870E32);
  _Unwind_Resume(a1);
}

BOOL ktrace_symbolicator_symbolicate(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a3) {
    *a3 = 0;
  }
  uint64_t v12 = a1 + 8;
  v28[0] = *(__n128 *)a2;
  if (!std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>((void *)(a1 + 8), v28))
  {
    uint64_t v13 = *(FILE ***)a1;
    if (*(void *)a1)
    {
      UUIDContext::UUIDContext((uint64_t)v28, a2);
      uuid = find_or_create_uuid((uint64_t)v13, (long long *)v28);
      UUIDContext::~UUIDContext((UUIDContext *)v28);
      if (uuid)
      {
        if (ktrace_make_symbolicator(*(FILE ***)a1, (UUIDContext *)uuid))
        {
          CS::TypeRef::retain(uuid[11], uuid[12], v28);
          __n128 v25 = *(__n128 *)a2;
          uint64_t v26 = &v25;
          CFIndex v15 = (__n128 *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes&&>,std::tuple<>>(v12, &v25, (uint64_t)&std::piecewise_construct, (_OWORD **)&v26);
          CS::TypeRef::operator=(v15 + 2, v28);
          CS::TypeRef::~TypeRef((CS::TypeRef *)v28);
        }
      }
    }
  }
  if (CSIsNull()) {
    return 0;
  }
  uint64_t SymbolOwner = CSSymbolicatorGetSymbolOwner();
  uint64_t v19 = v18;
  if (CSIsNull()) {
    ktrace_postprocess_file_internal_cold_1();
  }
  v28[0].n128_u64[0] = 0;
  long long v20 = *(_OWORD *)(a2 + 48);
  unsigned int v27[2] = *(_OWORD *)(a2 + 32);
  void v27[3] = v20;
  v27[4] = *(_OWORD *)(a2 + 64);
  long long v21 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v21;
  BOOL v16 = translate_offset(SymbolOwner, v19, v27, v28, (uint64_t)a3);
  if (v16)
  {
    if (a4)
    {
      *a4 = SymbolOwner;
      a4[1] = v19;
    }
    if (a5)
    {
      *a5 = CSSymbolicatorGetSymbolWithAddressAtTime();
      a5[1] = v22;
      if (*(_DWORD *)(a2 + 48) != 1 || !CSIsNull())
      {
LABEL_22:
        if (a6)
        {
          *a6 = CSSymbolicatorGetSourceInfoWithAddressAtTime();
          a6[1] = v23;
        }
        return v16;
      }
    }
    else if (*(_DWORD *)(a2 + 48) != 1)
    {
      goto LABEL_22;
    }
    if (a3 && *(unsigned char *)(a2 + 52))
    {
      *a3 = 1;
      CSSymbolOwnerForeachSegment();
    }
    goto LABEL_22;
  }
  return v16;
}

void sub_1B39E73BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void *find_or_create_uuid(uint64_t a1, long long *a2)
{
  long long v8 = *a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(*(void **)(a1 + 24), &v8);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (*(void *)(v5 + 24) >= *(int *)(a1 + 40))
    {
      double result = 0;
      *(unsigned char *)(a1 + 56) = 0;
      return result;
    }
    uint64_t v4 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,UUIDContext>(v5, &v8, &v8, a2);
    if (!v6) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  return v4 + 4;
}

uint64_t ktrace_make_symbolicator(FILE **a1, UUIDContext *a2)
{
  if (!CSIsNull()) {
    return 1;
  }
  if (ktrace_find_executable((symbolication_context *)a1, a2)
    && ktrace_find_arch_with_default((symbolication_context *)a1, (uint64_t)a2, 0))
  {
    *((void *)a2 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = CSSymbolicatorCreateWithURLAndArchitecture();
    *((void *)a2 + 12) = v4;
    if (CSIsNull())
    {
      uint64_t v5 = *a1;
      if (*a1)
      {
        char v6 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v5, "failed to create a symbolicator for %s\n", (const char *)v6);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_make_symbolicator((uint64_t)a1, (unsigned __int8 *)a2);
        }
      }
    }
    else
    {
      uint64_t result = CSSymbolicatorGetSymbolOwnerCountAtTime();
      if (result == 1) {
        return result;
      }
      long long v8 = *a1;
      if (*a1)
      {
        uint64_t v9 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v8, "failed to set up symbolicator for %s: expected 1 symbol owner\n", (const char *)v9);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_make_symbolicator((uint64_t)a1, (unsigned __int8 *)a2);
        }
      }
    }
  }
  uint64_t result = 0;
  *((_WORD *)a2 + 80) |= 1u;
  return result;
}

uint64_t CS::TypeRef::retain@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return CSRetain();
}

void sub_1B39E75F4(_Unwind_Exception *a1)
{
  CS::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

__n128 CS::TypeRef::operator=(__n128 *a1, __n128 *a2)
{
  if ((CSIsNull() & 1) == 0) {
    CSRelease();
  }
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

BOOL translate_offset(uint64_t a1, uint64_t a2, long long *a3, void *a4, uint64_t a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  BOOL v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  BOOL v8 = 0;
  switch(*((_DWORD *)a3 + 12))
  {
    case 0:
    case 3:
    case 4:
      goto LABEL_8;
    case 1:
      *a4 = *((void *)a3 + 5) + CSSymbolOwnerGetBaseAddress();
      BOOL v8 = 1;
      *((unsigned char *)v16 + 24) = 1;
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 5:
      *((_DWORD *)a3 + 12) = 2;
      uint64_t v24 = 0;
      __n128 v25 = &v24;
      uint64_t v26 = 0x2020000000;
      char v27 = 0;
      uint64_t v19 = MEMORY[0x1E4F143A8];
      uint64_t v20 = 3221225472;
      uint64_t v21 = (uint64_t)___ZL18owner_is_text_exec10_CSTypeRef_block_invoke;
      uint64_t v22 = &unk_1E6062FC0;
      uint64_t v23 = &v24;
      CSSymbolOwnerForeachSegment();
      int v9 = *((unsigned __int8 *)v25 + 24);
      _Block_object_dispose(&v24, 8);
      if (v9) {
        uint64_t v10 = "__TEXT_EXEC";
      }
      else {
        uint64_t v10 = "__TEXT";
      }
      strlcpy((char *)a3 + 16, v10, 0x11uLL);
LABEL_7:
      uint64_t v19 = 0;
      uint64_t v20 = (uint64_t)&v19;
      uint64_t v21 = 0x2020000000;
      LOBYTE(v22) = 0;
      uint64_t v28 = MEMORY[0x1E4F143A8];
      uint64_t v29 = 3221225472;
      size_t v30 = ___ZL16translate_offset10_CSTypeRef18ktrace_uuid_offsetPyPb_block_invoke;
      unsigned int v31 = &unk_1E6062F98;
      long long v11 = a3[3];
      long long v36 = a3[2];
      long long v37 = v11;
      long long v38 = a3[4];
      long long v12 = a3[1];
      long long v34 = *a3;
      long long v35 = v12;
      uint64_t v32 = &v19;
      unsigned int v33 = &v15;
      long long v39 = a4;
      uint64_t v40 = a5;
      CSSymbolOwnerForeachSegment();
      _Block_object_dispose(&v19, 8);
      BOOL v8 = *((unsigned char *)v16 + 24) != 0;
LABEL_8:
      _Block_object_dispose(&v15, 8);
      return v8;
    default:
      uint64_t v14 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v14);
  }
}

void sub_1B39E78B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t __ktrace_symbolicator_symbolicate_block_invoke(uint64_t a1)
{
  uint64_t result = CSRegionGetRange();
  if (*(void *)(a1 + 32) - result < v3) {
    **(unsigned char **)(a1 + 40) = 0;
  }
  return result;
}

void free_symbol_callback(const __CFAllocator *a1, void *a2)
{
  unint64_t v3 = (const void *)a2[2];
  if (v3) {
    CFRelease(v3);
  }

  free(a2);
}

void ktrace_symboilcator_learn_ariadne_chunk(KtraceSymbolicator *a1, ktrace_chunk *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (ktrace_chunk_tag((uint64_t)a2) != 20580 || ktrace_chunk_version_major((uint64_t)a2)) {
    return;
  }
  char v18 = 0;
  memset(v17, 0, sizeof(v17));
  if (ktrace_chunk_copy_data((uint64_t *)a2, 0, v17, 0x20uLL))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_symboilcator_learn_ariadne_chunk();
    }
    return;
  }
  memset(uu, 0, sizeof(uu));
  strcpy(in, "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");
  char v4 = v17[0];
  if (LOBYTE(v17[0]))
  {
    unint64_t v5 = 0;
    char v6 = in;
    do
    {
      do
        int v7 = *v6++;
      while (v7 == 45);
      *(v6 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v4;
      if (v5 > 0x1E) {
        break;
      }
      ++v5;
      char v4 = *((unsigned char *)v17 + v5);
    }
    while (v4);
  }
  if (uuid_parse(in, uu))
  {
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_21;
  }
  uint64_t v9 = ktrace_chunk_size_t(a2, v8);
  CFDataRef v10 = ktrace_chunk_copy_cfdata((uint64_t)a2, 0x20uLL, (void *)(v9 - 32));
  if (!v10)
  {
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_21:
    ktrace_symboilcator_learn_ariadne_chunk();
    return;
  }
  CFDictionaryRef v11 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v10, 0, 0, 0);
  CFRelease(v10);
  if (v11)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &symbol_array_callbacks);
    context[0] = MEMORY[0x1E4F143A8];
    context[1] = 3221225472;
    context[2] = ___Z39ktrace_symboilcator_learn_ariadne_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke;
    context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
    context[4] = Mutable;
    CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
    CFRelease(v11);
    v21.length = CFArrayGetCount(Mutable);
    v21.location = 0;
    CFArraySortValues(Mutable, v21, (CFComparatorFunction)cmp_symbol, 0);
    uint64_t v13 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(v13, @"__TEXT*", Mutable);
    CFRelease(Mutable);
    *(_OWORD *)in = *(_OWORD *)uu;
    uint64_t v14 = v13;
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>((uint64_t)a1 + 48, in, in, &v14);
    CF::TypeRef::~TypeRef((const void **)&v14);
    return;
  }
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    goto LABEL_21;
  }
}

void sub_1B39E7C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___Z39ktrace_symboilcator_learn_ariadne_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v11 = 0;
  unint64_t v5 = utf8(a2);
  int v6 = sscanf(v5, "%lld", &v11);
  CFDictionaryRef Value = CFDictionaryGetValue(a3, @"Name");
  if (Value)
  {
    uint64_t v8 = Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFStringGetTypeID())
    {
      if (v6 == 1)
      {
        CFDataRef v10 = malloc_type_malloc(0x18uLL, 0x1060040EE9316AEuLL);
        _OWORD v10[2] = v8;
        CFRetain(v8);
        *CFDataRef v10 = v11;
        v10[1] = 1;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v10);
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
    }
  }
}

uint64_t cmp_symbol(void *a1, void *a2, void *a3)
{
  if (*a1 < *a2) {
    return -1;
  }
  else {
    return *a1 != *a2;
  }
}

void ktrace_symboilcator_learn_tailspin_chunk(KtraceSymbolicator *a1, ktrace_chunk *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (ktrace_chunk_tag((uint64_t)a2) == 36870 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    CFDictionaryRef v4 = (const __CFDictionary *)ktrace_chunk_copy_plist((uint64_t)a2);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      CFAutorelease(v4);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v5, @"UUID_String");
      CFStringRef v7 = Value;
      if (Value)
      {
        CFTypeID v8 = CFGetTypeID(Value);
        if (v8 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
          }
          CFStringRef v7 = 0;
        }
      }
      CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(v5, @"TEXT_EXEC");
      CFBooleanRef v10 = v9;
      if (v9)
      {
        CFTypeID v11 = CFGetTypeID(v9);
        if (v11 != CFBooleanGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_5();
          }
          CFBooleanRef v10 = 0;
        }
      }
      CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v5, @"Symbols");
      CFDictionaryRef v13 = v12;
      if (v12)
      {
        CFTypeID v14 = CFGetTypeID(v12);
        if (v14 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
          }
          CFDictionaryRef v13 = 0;
        }
      }
      memset(uu, 0, 16);
      uint64_t v15 = utf8(v7);
      int v16 = uuid_parse(v15, uu);
      if (v13 && v10 && v7 && !v16)
      {
        CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &symbol_array_callbacks);
        context[0] = MEMORY[0x1E4F143A8];
        context[1] = 3221225472;
        context[2] = ___Z40ktrace_symboilcator_learn_tailspin_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke;
        context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
        context[4] = Mutable;
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
        v25.length = CFArrayGetCount(Mutable);
        v25.location = 0;
        CFArraySortValues(Mutable, v25, (CFComparatorFunction)cmp_symbol, 0);
        char v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (CFBooleanGetValue(v10)) {
          uint64_t v19 = @"__TEXT_EXEC";
        }
        else {
          uint64_t v19 = @"__TEXT";
        }
        CFDictionarySetValue(v18, v19, Mutable);
        CFRelease(Mutable);
        long long v21 = *(_OWORD *)uu;
        uint64_t v20 = v18;
        std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>((uint64_t)a1 + 48, &v21, &v21, &v20);
        CF::TypeRef::~TypeRef((const void **)&v20);
      }
      else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        ktrace_symboilcator_learn_tailspin_chunk();
      }
    }
    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_1();
    }
  }
}

void sub_1B39E8114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CF::TypeRef::~TypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___Z40ktrace_symboilcator_learn_tailspin_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v14 = 0;
  CFDictionaryRef v5 = utf8(a2);
  int v6 = sscanf(v5, "%lld", &v14);
  CFStringRef Value = CFDictionaryGetValue(a3, @"Name");
  CFTypeID v8 = Value;
  if (Value)
  {
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
      CFTypeID v8 = 0;
    }
  }
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a3, @"Length");
  if (v10)
  {
    CFNumberRef v11 = v10;
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 == CFNumberGetTypeID())
    {
      if (v6 == 1 && v8)
      {
        CFDictionaryRef v13 = malloc_type_malloc(0x18uLL, 0x1060040EE9316AEuLL);
        v13[2] = v8;
        CFRetain(v8);
        *CFDictionaryRef v13 = v14;
        uint64_t valuePtr = 0;
        if (!CFNumberGetValue(v11, kCFNumberLongLongType, &valuePtr)) {
          ktrace_postprocess_file_internal_cold_1();
        }
        v13[1] = valuePtr;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v13);
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
      }
    }
  }
}

CFDataRef ktrace_copy_cs_signature_data(uint64_t *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (ktrace_chunk_tag((uint64_t)a1) != 32771 || ktrace_chunk_version_major((uint64_t)a1)) {
    return 0;
  }
  int v3 = ktrace_chunk_copy_data(a1, 0, &v5, 0x18uLL);
  CFDataRef result = 0;
  if (!v3)
  {
    unint64_t v4 = v7 + (unint64_t)v6;
    if (v4 <= ktrace_chunk_size((uint64_t)a1)) {
      return ktrace_chunk_copy_cfdata((uint64_t)a1, v6, (void *)v7);
    }
    return 0;
  }
  return result;
}

uint64_t ktrace_copy_symbolicator_from_chunk(uint64_t *a1, _OWORD *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (ktrace_chunk_tag((uint64_t)a1) != 32771 || ktrace_chunk_version_major((uint64_t)a1)) {
    return 0;
  }
  if ((unint64_t)ktrace_chunk_size((uint64_t)a1) <= 0x18)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_symbolicate_file_block_invoke_cold_1();
    }
    return 0;
  }
  if (ktrace_chunk_copy_data(a1, 0, &v10, 0x18uLL))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_copy_symbolicator_from_chunk_cold_6();
    }
    return 0;
  }
  unint64_t v4 = v12 + (unint64_t)v11;
  if (v4 > ktrace_chunk_size((uint64_t)a1))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_symbolicate_file_block_invoke_cold_1();
    }
    return 0;
  }
  uint64_t v5 = (void *)ktrace_chunk_size((uint64_t)a1);
  CFDataRef v6 = ktrace_chunk_copy_cfdata((uint64_t)a1, 0, v5);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_symbolicate_file_block_invoke_cold_2();
    }
    return 0;
  }
  CFDataRef v7 = v6;
  if (!-[__CFData subdataWithRange:](v6, "subdataWithRange:", v11, v12)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v8 = CSSymbolicatorCreateWithSignature();

  if (CSIsNull() && os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_copy_symbolicator_from_chunk_cold_5();
    if (!a2) {
      return v8;
    }
    goto LABEL_17;
  }
  if (a2) {
LABEL_17:
  }
    *a2 = v10;
  return v8;
}

uint64_t ktrace_symbolicator_read_file(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __ktrace_symbolicator_read_file_block_invoke;
  v9[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
  v9[4] = a1;
  return ktrace_file_iterate(a2, 0, (uint64_t)v9, a4, a5, a6, a7, a8);
}

uint64_t __ktrace_symbolicator_read_file_block_invoke(uint64_t a1, ktrace_chunk *a2)
{
  ktrace_symboilcator_learn_tailspin_chunk(*(KtraceSymbolicator **)(a1 + 32), a2);
  ktrace_symboilcator_learn_ariadne_chunk(*(KtraceSymbolicator **)(a1 + 32), a2);
  uint64_t v4 = ktrace_copy_symbolicator_from_chunk((uint64_t *)a2, &v10);
  uint64_t v6 = v5;
  if ((CSIsNull() & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 32) + 8;
    *(void *)&long long v9 = v4;
    *((void *)&v9 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,CS::TypeRef>(v7, &v10, &v10, &v9);
    CS::TypeRef::~TypeRef((CS::TypeRef *)&v9);
  }
  return 1;
}

void sub_1B39E866C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

UInt8 *ktrace_uuid_offset_get_description_internal(uint64_t a1, unsigned __int8 *uu, char *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)uu + 12)) {
    return 0;
  }
  uuid_unparse(uu, out);
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2020000000;
  uint64_t v24 = 0;
  CFStringRef v6 = (const __CFString *)*((void *)uu + 9);
  if (!v6)
  {
    if (!a1)
    {
      unsigned int v12 = &v21;
      goto LABEL_10;
    }
LABEL_8:
    v20[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
    v20[1] = (void (*)(void, void))3221225472;
    v20[2] = (void (*)(void, void))___Z43ktrace_uuid_offset_get_description_internalP15ktrace_uuid_map18ktrace_uuid_offsetPKc_block_invoke;
    v20[3] = (void (*)(void, void))&unk_1E6062C98;
    v20[4] = (void (*)(void, void))&v21;
    v20[5] = (void (*)(void, void))v26;
    ktrace_uuid_map_iterate_associated_paths(a1, (long long *)uu, v20);
    unsigned int v12 = v22;
LABEL_10:
    long long v10 = (char **)(v12 + 3);
    goto LABEL_11;
  }
  uint64_t v7 = utf8(v6);
  uint64_t v8 = basename_r(v7, v26);
  long long v9 = v22;
  v22[3] = (uint64_t)v8;
  long long v10 = (char **)(v9 + 3);
  if (a1 && !v8) {
    goto LABEL_8;
  }
LABEL_11:
  if (!*v10)
  {
    *long long v10 = out;
    if (a3) {
      goto LABEL_13;
    }
LABEL_17:
    a3 = __str;
    snprintf(__str, 0x14uLL, "0x%llx", *((void *)uu + 5));
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_17;
  }
LABEL_13:
  switch(*((_DWORD *)uu + 12))
  {
    case 1:
    case 5:
      goto LABEL_14;
    case 2:
      uint64_t v17 = (const char *)(uu + 16);
      if (!strcmp(v17, "__TEXT"))
      {
LABEL_14:
        uint64_t v14 = v22;
LABEL_15:
        goto LABEL_20;
      }
      int v18 = strcmp(v17, "__TEXT_EXEC");
      uint64_t v14 = v22;
      if (!v18) {
        goto LABEL_15;
      }
LABEL_20:
      unsigned int v11 = v15;
      _Block_object_dispose(&v21, 8);
      return v11;
    case 3:
      goto LABEL_19;
    case 4:
LABEL_19:
      uint64_t v15 = aasprintf(v13, out, a3);
      goto LABEL_20;
    default:
      uint64_t v19 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v19);
  }
}

void sub_1B39E88CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_iterate_associated_paths(uint64_t a1, long long *a2, void (**a3)(void, void))
{
  if (a1)
  {
    long long v11 = *a2;
    uint64_t v4 = *(void *)(a1 + 216);
    unsigned int v12 = &v11;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v4, &v11, (uint64_t)&std::piecewise_construct, &v12);
    CFStringRef v6 = (const void *)v5[4];
    if (v6)
    {
      CFTypeID v7 = CFGetTypeID(v6);
      CFTypeID TypeID = CFSetGetTypeID();
      CFSetRef v9 = (const __CFSet *)v5[4];
      if (v7 == TypeID)
      {
        CFSetApplyFunction(v9, (CFSetApplierFunction)CFSetApplierTrampoline, a3);
      }
      else
      {
        CFTypeID v10 = CFGetTypeID(v9);
        if (v10 != CFStringGetTypeID()) {
          ktrace_postprocess_file_internal_cold_1();
        }
        a3[2](a3, v5[4]);
      }
    }
  }
}

char *___Z43ktrace_uuid_offset_get_description_internalP15ktrace_uuid_map18ktrace_uuid_offsetPKc_block_invoke(char *result, const __CFString *a2)
{
  if (!*(void *)(*(void *)(*((void *)result + 4) + 8) + 24))
  {
    uint64_t v2 = result;
    int v3 = utf8(a2);
    CFDataRef result = basename_r(v3, *((char **)v2 + 5));
    *(void *)(*(void *)(*((void *)v2 + 4) + 8) + 24) = result;
  }
  return result;
}

UInt8 *ktrace_uuid_offset_get_description(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  long long v2 = a2[3];
  int v5[2] = a2[2];
  void v5[3] = v2;
  void v5[4] = a2[4];
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return ktrace_uuid_offset_get_description_internal(a1, (unsigned __int8 *)v5, 0);
}

UInt8 *ktrace_symbolicator_get_description(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  char v39 = 0;
  v38[0] = 0;
  v38[1] = 0;
  v37[0] = 0;
  v37[1] = 0;
  v36[0] = 0;
  v36[1] = 0;
  long long v6 = *a3;
  long long v7 = a3[1];
  long long v8 = a3[4];
  v45[3] = a3[3];
  v45[4] = v8;
  long long v9 = a3[2];
  v45[1] = v7;
  v45[2] = v9;
  v45[0] = v6;
  ktrace_symbolicator_symbolicate(a2, (uint64_t)v45, &v39, v36, v37, v38);
  if (CSIsNull())
  {
    if (v39) {
      return 0;
    }
    long long value = *a3;
    unsigned int v12 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>((void *)(a2 + 48), &value);
    if (!v12) {
      goto LABEL_34;
    }
    CFDictionaryRef v13 = (const __CFDictionary *)v12[4];
    int v14 = *((_DWORD *)a3 + 12);
    switch(v14)
    {
      case 1:
        int v16 = @"__TEXT";
        break;
      case 5:
        int v16 = @"__TEXT*";
        break;
      case 2:
        CFStringRef v15 = CFStringCreateWithCString(0, (const char *)a3 + 16, 0x8000100u);
        if (!v15) {
          ktrace_postprocess_file_internal_cold_1();
        }
        int v16 = (__CFString *)v15;
        CFAutorelease(v15);
        break;
      default:
        goto LABEL_19;
    }
    CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v13, v16);
    if (v17)
    {
      CFArrayRef v18 = v17;
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 == CFArrayGetTypeID()) {
        goto LABEL_21;
      }
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
      }
    }
LABEL_19:
    CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(v13, @"__TEXT*");
    if (!v20) {
      goto LABEL_34;
    }
    CFArrayRef v18 = v20;
    CFTypeID v21 = CFGetTypeID(v20);
    if (v21 != CFArrayGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
      }
      goto LABEL_34;
    }
LABEL_21:
    unint64_t v22 = *((void *)a3 + 5);
    uint64_t v35 = 0;
    long long value = v22;
    CFIndex Count = CFArrayGetCount(v18);
    v47.location = 0;
    v47.length = Count;
    CFIndex v24 = CFArrayBSearchValues(v18, v47, &value, (CFComparatorFunction)cmp_symbol, 0);
    if (v24 >= Count) {
      CFIndex v25 = Count - 1;
    }
    else {
      CFIndex v25 = v24;
    }
    if ((v25 & 0x8000000000000000) == 0)
    {
      unint64_t v26 = 1;
      while (1)
      {
        CFTypeID ValueAtIndex = CFArrayGetValueAtIndex(v18, v25);
        unint64_t v28 = *((void *)a3 + 5);
        if (v28 >= *(void *)ValueAtIndex && v28 < *((void *)ValueAtIndex + 1) + *(void *)ValueAtIndex) {
          break;
        }
        uint64_t v29 = 0;
        if (v25-- >= 1 && v26++ < 2) {
          continue;
        }
        goto LABEL_35;
      }
      uint64_t v29 = utf8(*((const __CFString **)ValueAtIndex + 2));
      goto LABEL_35;
    }
LABEL_34:
    uint64_t v29 = 0;
LABEL_35:
    long long v32 = a3[3];
    long long v42 = a3[2];
    long long v43 = v32;
    long long v44 = a3[4];
    long long v33 = a3[1];
    *(_OWORD *)uuid_t uu = *a3;
    long long v41 = v33;
    return ktrace_uuid_offset_get_description_internal(a1, uu, v29);
  }
  int v11 = CSIsNull();
  CSSymbolOwnerGetName();
  CSSymbolGetName();
  if (v11) {
  CSSourceInfoGetFilename();
  }
  CSSourceInfoGetLineNumber();
}

CFStringRef cfstring(const char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (!v1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFStringRef v2 = v1;
  CFAutorelease(v1);
  return v2;
}

uint64_t ktrace_uuid_map_create_cssymbolicator_for_task(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 0;
}

void sub_1B39E8EC4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EBEC50](v1, 0x10A0C407A870E32);
  _Unwind_Resume(a1);
}

uint64_t ktrace_address_space_create_cssymbolicator(uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = *(void **)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v51 = 0;
  int v52 = &v51;
  uint64_t v53 = 0x2020000000;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 5);
  int v54 = v3;
  if (HIDWORD(v3))
  {
    _os_assert_log();
    uint64_t v32 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v32);
  }
  uint64_t v6 = *(void *)(a1 + 80);
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 3221225472;
  v50[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke;
  v50[3] = &unk_1E6062FE8;
  v50[4] = &v51;
  ktrace_address_space_deep_iterate_symbol_owners(v6, a2, (uint64_t)v50);
  if (!*(_DWORD *)(a1 + 40)) {
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v52 + 6);
  }
  uint64_t v46 = 0;
  CFRange v47 = &v46;
  uint64_t v48 = 0x2020000000;
  uint64_t v49 = 0;
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x3812000000;
  v45[3] = __Block_byref_object_copy__241;
  v45[4] = __Block_byref_object_dispose__242;
  _OWORD v45[5] = "";
  v45[6] = 0;
  uint64_t v7 = *(void *)(a1 + 80);
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 3221225472;
  void v44[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_244;
  v44[3] = &unk_1E6063010;
  v44[5] = v45;
  v44[6] = a1;
  v44[4] = &v46;
  ktrace_address_space_deep_iterate_symbol_owners(v7, a2, (uint64_t)v44);
  long long v8 = malloc_type_calloc(0x40uLL, *((unsigned int *)v52 + 6), 0x92232DCAuLL);
  uint64_t v40 = 0;
  long long v41 = &v40;
  uint64_t v42 = 0x2020000000;
  long long v43 = v8;
  long long v9 = malloc_type_calloc(0x28uLL, v47[3], 0x7A418764uLL);
  uint64_t v36 = 0;
  long long v37 = &v36;
  uint64_t v38 = 0x2020000000;
  char v39 = v9;
  uint64_t v10 = *(void *)(a1 + 80);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2;
  v35[3] = &unk_1E6063038;
  v35[4] = &v40;
  v35[5] = &v36;
  v35[6] = v45;
  v35[7] = a1;
  v35[8] = a2;
  ktrace_address_space_deep_iterate_symbol_owners(v10, a2, (uint64_t)v35);
  unint64_t v11 = v41[3] - (void)v8;
  if (v11 >> 38)
  {
    _os_assert_log();
    uint64_t v33 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v33);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v37[3] - (uint64_t)v9) >> 3) > v47[3])
  {
    _os_assert_log();
    uint64_t v34 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v34);
  }
  if ((v11 >> 6))
  {
    uint64_t v12 = *(void *)(a1 + 80);
    if (v12 && (*(unsigned char *)(v12 + 288) || *(unsigned char *)(v12 + 289))
      || (uint64_t v13 = *(void *)(a1 + 8)) != 0 && *(unsigned char *)(v13 + 45))
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      LODWORD(v16) = 0;
      unsigned int v17 = 0;
      uint64_t v18 = (v11 >> 6);
      unint64_t v19 = -1;
      while (1)
      {
        CFArrayRef v20 = (char *)&v8[8 * v14];
        if ((v20[60] & 0x10) != 0) {
          break;
        }
        uint64_t v21 = *((unsigned int *)v20 + 14);
        if (v21)
        {
          unint64_t v22 = (unint64_t *)v8[8 * v14 + 6];
          do
          {
            unint64_t v24 = *v22;
            v22 += 5;
            unint64_t v23 = v24;
            if (v24 < v19)
            {
              unsigned int v17 = v14;
              unint64_t v19 = v23;
            }
            if (v23 > v15)
            {
              LODWORD(v16) = v14;
              unint64_t v15 = v23;
            }
            --v21;
          }
          while (v21);
        }
        if (++v14 == v18)
        {
          if (HIDWORD(v15)) {
            BOOL v25 = *(_DWORD *)(a2 + 32) == 0;
          }
          else {
            BOOL v25 = 0;
          }
          if (v25) {
            uint64_t v16 = v16;
          }
          else {
            uint64_t v16 = v17;
          }
          unint64_t v26 = (char *)&v8[8 * v16];
          int v29 = *((_DWORD *)v26 + 15);
          char v27 = (int *)(v26 + 60);
          int v28 = v29;
          if ((v29 & 0x40) == 0) {
            *char v27 = v28 | 0x10;
          }
          break;
        }
      }
    }
  }
  else if (*(void *)a1)
  {
    fwrite("Couldn't find any binary image infos.  Symbolicator will be NULL\n", 0x41uLL, 1uLL, *(FILE **)a1);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      ktrace_address_space_create_cssymbolicator();
    }
  }
  uint64_t v30 = CSSymbolicatorCreateWithBinaryImageListCountPidFlagsAndNotification();
  free(v9);
  free(v8);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(v45, 8);
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v51, 8);
  return v30;
}

void sub_1B39E932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 168), 8);
  _Block_object_dispose((const void *)(v33 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ktrace_uuid_map_create_cssymbolicator_for_pid(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 0;
}

void sub_1B39E946C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EBEC50](v1, 0x10A0C407A870E32);
  _Unwind_Resume(a1);
}

void *ktrace_create_dsym_search_configuration(uint64_t a1)
{
  CFStringRef v2 = malloc_type_calloc(1uLL, 0x30uLL, 0x1060040B0DE3062uLL);
  if (!v2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v3 = v2;
  if (a1)
  {
    if (*(void *)a1) {
      *CFStringRef v2 = CFArrayCreateMutableCopy(0, 0, *(CFArrayRef *)a1);
    }
    *((unsigned char *)v3 + 24) = *(unsigned char *)(a1 + 8);
  }
  return v3;
}

void ktrace_dsym_search_configuration_add_dstroot_path(__CFArray **a1, char *cStr)
{
  CFArrayRef Mutable = *a1;
  if (!*a1)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    *a1 = Mutable;
  }
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (!v5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFStringRef v6 = v5;
  CFAutorelease(v5);

  CFArrayAppendValue(Mutable, v6);
}

void ktrace_dsym_search_configuration_add_recursive_search_path(uint64_t a1, char *cStr)
{
  CFArrayRef Mutable = *(__CFArray **)(a1 + 8);
  if (!Mutable)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 8) = Mutable;
  }
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (!v5) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFStringRef v6 = v5;
  CFAutorelease(v5);

  CFArrayAppendValue(Mutable, v6);
}

uint64_t ktrace_dsym_search_configuration_set_use_debugsymbols_defaults(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

CFTypeRef ktrace_dsym_search_configuration_set_dsymForUUID(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result = CFRetain(cf);
  *(void *)(a1 + 16) = cf;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_assume_system_arch(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_allow_arch_unknown(uint64_t result, char a2)
{
  *(unsigned char *)(result + 26) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_allow_image_type_unknown(uint64_t result, char a2)
{
  *(unsigned char *)(result + 27) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_infer_aout_flag_from_addresses(uint64_t result, char a2)
{
  *(unsigned char *)(result + 45) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_infer_dyld_flag_from_filename(uint64_t result, char a2)
{
  *(unsigned char *)(result + 46) = a2;
  return result;
}

size_t ktrace_dsym_search_configuration_set_kernel_text_segment_name(uint64_t a1, const char *a2)
{
  return strlcpy((char *)(a1 + 28), a2, 0x11uLL);
}

void *ktrace_dsym_search_configuration_create_with_plist(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFDictionaryGetTypeID())
  {
    dsym_search_configuration = ktrace_create_dsym_search_configuration(0);
    context[0] = MEMORY[0x1E4F143A8];
    context[1] = 3221225472;
    context[2] = __ktrace_dsym_search_configuration_create_with_plist_block_invoke;
    context[3] = &__block_descriptor_40_e25_v24__0____CFString__8_v16l;
    context[4] = dsym_search_configuration;
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      ktrace_dsym_search_configuration_create_with_plist_cold_1();
    }
    return 0;
  }
  return dsym_search_configuration;
}

void __ktrace_dsym_search_configuration_create_with_plist_block_invoke(uint64_t a1, const __CFString *a2, const __CFString *cf)
{
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFArrayGetTypeID() && CFEqual(a2, @"dstroots"))
  {
    uint64_t v16 = **(__CFArray ***)(a1 + 32);
    if (!v16)
    {
      **(void **)(a1 + 32) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v16 = **(__CFArray ***)(a1 + 32);
    }
  }
  else
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 != CFArrayGetTypeID() || CFStringCompare(a2, @"recursive_search_dirs", 0))
    {
      CFTypeID v8 = CFGetTypeID(cf);
      if (v8 == CFStringGetTypeID() && CFEqual(a2, @"dsymForUUID"))
      {
        CFRetain(cf);
        *(void *)(*(void *)(a1 + 32) + 16) = cf;
      }
      else
      {
        CFTypeID v9 = CFGetTypeID(cf);
        if (v9 == CFBooleanGetTypeID() && CFEqual(a2, @"debugsymbols_defaults"))
        {
          *(unsigned char *)(*(void *)(a1 + 32) + 24) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
        }
        else
        {
          CFTypeID v10 = CFGetTypeID(cf);
          if (v10 == CFBooleanGetTypeID() && CFEqual(a2, @"assumeSystemArch"))
          {
            *(unsigned char *)(*(void *)(a1 + 32) + 25) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
          }
          else
          {
            CFTypeID v11 = CFGetTypeID(cf);
            if (v11 == CFBooleanGetTypeID() && CFEqual(a2, @"allowArchUnknown"))
            {
              *(unsigned char *)(*(void *)(a1 + 32) + 26) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
            }
            else
            {
              CFTypeID v12 = CFGetTypeID(cf);
              if (v12 == CFBooleanGetTypeID()
                && CFEqual(a2, @"allowImageTypeUnknown"))
              {
                *(unsigned char *)(*(void *)(a1 + 32) + 27) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
              }
              else
              {
                CFTypeID v13 = CFGetTypeID(cf);
                if (v13 == CFBooleanGetTypeID()
                  && CFEqual(a2, @"inferAoutFlagFromAddresses"))
                {
                  *(unsigned char *)(*(void *)(a1 + 32) + 45) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
                }
                else
                {
                  CFTypeID v14 = CFGetTypeID(cf);
                  if (v14 == CFBooleanGetTypeID()
                    && CFEqual(a2, @"inferDyldFlagFromFilename"))
                  {
                    *(unsigned char *)(*(void *)(a1 + 32) + 46) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
                  }
                  else
                  {
                    CFTypeID v15 = CFGetTypeID(cf);
                    if (v15 == CFStringGetTypeID()
                      && CFEqual(a2, @"kernelTextSegmentName"))
                    {
                      uint64_t v18 = (char *)(*(void *)(a1 + 32) + 28);
                      unint64_t v19 = utf8(cf);
                      strlcpy(v18, v19, 0x11uLL);
                    }
                    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                    {
                      __ktrace_dsym_search_configuration_create_with_plist_block_invoke_cold_1(a2);
                    }
                  }
                }
              }
            }
          }
        }
      }
      return;
    }
    uint64_t v16 = *(__CFArray **)(*(void *)(a1 + 32) + 8);
    if (!v16)
    {
      *(void *)(*(void *)(a1 + 32) + 8) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v16 = *(__CFArray **)(*(void *)(a1 + 32) + 8);
    }
  }
  v17.length = CFArrayGetCount((CFArrayRef)cf);
  v17.location = 0;

  CFArrayAppendArray(v16, (CFArrayRef)cf, v17);
}

__CFDictionary *ktrace_dsym_search_configuration_copy_plist(uint64_t a1)
{
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    ktrace_postprocess_file_internal_cold_1();
  }
  unint64_t v3 = Mutable;
  if (*(void *)a1) {
    CFDictionarySetValue(Mutable, @"dstroots", *(const void **)a1);
  }
  uint64_t v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFDictionarySetValue(v3, @"recursive_search_dirs", v4);
  }
  else
  {
    CFMutableArrayRef v5 = CFArrayCreateMutable(0, 0, 0);
    CFDictionarySetValue(v3, @"recursive_search_dirs", v5);
    CFRelease(v5);
  }
  CFTypeID v6 = *(const void **)(a1 + 16);
  if (v6) {
    CFDictionarySetValue(v3, @"dsymForUUID", v6);
  }
  CFTypeID v7 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFTypeID v8 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (*(unsigned char *)(a1 + 24)) {
    CFTypeID v9 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    CFTypeID v9 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v3, @"debugsymbols_defaults", v9);
  if (*(unsigned char *)(a1 + 25)) {
    CFTypeID v10 = v7;
  }
  else {
    CFTypeID v10 = v8;
  }
  CFDictionarySetValue(v3, @"assumeSystemArch", v10);
  if (*(unsigned char *)(a1 + 26)) {
    CFTypeID v11 = v7;
  }
  else {
    CFTypeID v11 = v8;
  }
  CFDictionarySetValue(v3, @"allowArchUnknown", v11);
  if (*(unsigned char *)(a1 + 27)) {
    CFTypeID v12 = v7;
  }
  else {
    CFTypeID v12 = v8;
  }
  CFDictionarySetValue(v3, @"allowImageTypeUnknown", v12);
  if (*(unsigned char *)(a1 + 45)) {
    CFTypeID v13 = v7;
  }
  else {
    CFTypeID v13 = v8;
  }
  CFDictionarySetValue(v3, @"inferAoutFlagFromAddresses", v13);
  if (*(unsigned char *)(a1 + 46)) {
    CFTypeID v14 = v7;
  }
  else {
    CFTypeID v14 = v8;
  }
  CFDictionarySetValue(v3, @"inferDyldFlagFromFilename", v14);
  int v16 = *(unsigned __int8 *)(a1 + 28);
  CFTypeID v15 = (const char *)(a1 + 28);
  if (v16)
  {
    CFStringRef v17 = CFStringCreateWithCString(0, v15, 0x8000100u);
    if (!v17) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFStringRef v18 = v17;
    CFAutorelease(v17);
    CFDictionarySetValue(v3, @"kernelTextSegmentName", v18);
  }
  return v3;
}

void ktrace_free_dsym_search_configuration(const void **a1)
{
  if (a1)
  {
    CFTypeID v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    unint64_t v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

uint64_t ktrace_uuid_map_event_prepass(uint64_t result, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v4 = *(void *)(a2 + 632);
  if (v4)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    int v5[2] = __ktrace_uuid_map_event_prepass_block_invoke;
    void v5[3] = &__block_descriptor_40_e25_v24__0_PrepassOpRef_Q___8l;
    void v5[4] = v4;
    return ktrace_uuid_map_update_internal(result, a2, a3, a4, 0, (uint64_t)v5);
  }
  return result;
}

void __ktrace_uuid_map_event_prepass_block_invoke(uint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v15 = a2;
  CFMutableArrayRef v5 = _Block_copy(aBlock);
  int v16 = v5;
  CFTypeID v6 = (void *)v4[1];
  unint64_t v7 = v4[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = ((uint64_t)v6 - *v4) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v7 - *v4;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    _OWORD v17[4] = v4 + 2;
    if (v12)
    {
      CFTypeID v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>((uint64_t)(v4 + 2), v12);
      uint64_t v3 = v15;
      CFMutableArrayRef v5 = v16;
    }
    else
    {
      CFTypeID v13 = 0;
    }
    CFTypeID v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v12];
    *(void *)CFTypeID v14 = v3;
    *((void *)v14 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v5;
    int v16 = 0;
    _OWORD v17[2] = v14 + 16;
    std::vector<PrepassOp>::__swap_out_circular_buffer(v4, v17);
    CFTypeID v8 = (void *)v4[1];
    std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *CFTypeID v6 = v3;
    v6[1] = v5;
    int v16 = 0;
    CFTypeID v8 = v6 + 2;
    v4[1] = (uint64_t)(v6 + 2);
  }
  v4[1] = (uint64_t)v8;
  PrepassOp::~PrepassOp((PrepassOp *)&v15);
}

void sub_1B39E9EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)va1);
  PrepassOp::~PrepassOp((PrepassOp *)va);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_chunk_prepass(uint64_t a1, void *a2)
{
  CFTypeID v2 = *(uint64_t **)(a1 + 632);
  if (v2)
  {
    int v5 = ktrace_chunk_tag((uint64_t)a2);
    if (v5 != 20990)
    {
      if (v5 == 32770)
      {
        if (ktrace_chunk_version_major((uint64_t)a2) > 1) {
          return;
        }
      }
      else if (v5 != 36864 || ktrace_chunk_version_major((uint64_t)a2))
      {
        return;
      }
    }
    uint64_t v6 = ktrace_stackshot_chunk_timestamp(a2);
    if (v6 != -1)
    {
      uint64_t v7 = v6;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __ktrace_uuid_map_chunk_prepass_block_invoke;
      aBlock[3] = &__block_descriptor_48_e5_v8__0l;
      aBlock[4] = a2;
      aBlock[5] = a1;
      uint64_t v18 = v6;
      CFTypeID v8 = _Block_copy(aBlock);
      uint64_t v19 = (uint64_t)v8;
      unint64_t v9 = v2[2];
      unint64_t v10 = (uint64_t *)v2[1];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = ((uint64_t)v10 - *v2) >> 4;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v9 - *v2;
        uint64_t v14 = v13 >> 3;
        if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        v21[4] = v2 + 2;
        if (v15) {
          int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>((uint64_t)(v2 + 2), v15);
        }
        else {
          int v16 = 0;
        }
        CFStringRef v17 = (uint64_t *)&v16[16 * v12];
        v21[0] = v16;
        v21[1] = v17;
        v21[3] = &v16[16 * v15];
        *CFStringRef v17 = 0;
        v17[1] = 0;
        *CFStringRef v17 = v18;
        v17[1] = v19;
        uint64_t v19 = 0;
        size_t v21[2] = v17 + 2;
        std::vector<PrepassOp>::__swap_out_circular_buffer(v2, v21);
        uint64_t v11 = (void *)v2[1];
        std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)v21);
      }
      else
      {
        *unint64_t v10 = v7;
        v10[1] = (uint64_t)v8;
        uint64_t v19 = 0;
        uint64_t v11 = v10 + 2;
        v2[1] = (uint64_t)(v10 + 2);
      }
      v2[1] = (uint64_t)v11;
      PrepassOp::~PrepassOp((PrepassOp *)&v18);
    }
  }
}

void sub_1B39EA0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)va1);
  PrepassOp::~PrepassOp((PrepassOp *)va);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_uuid_map_chunk_prepass_block_invoke(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __ktrace_uuid_map_chunk_prepass_block_invoke_2;
  _OWORD v3[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
  uint64_t v1 = *(void **)(a1 + 32);
  _OWORD v3[4] = *(void *)(a1 + 40);
  return ktrace_stackshot_chunk_unwrap(v1, (uint64_t)v3);
}

void __ktrace_uuid_map_chunk_prepass_block_invoke_2(uint64_t a1, kcdata_iter a2)
{
}

void ktrace_prepass_uuid_map_init(uint64_t a1)
{
  if (!*(void *)(a1 + 632)) {
    operator new();
  }
  ktrace_postprocess_file_internal_cold_1();
}

uint64_t ktrace_prepass_uuid_map_finish(uint64_t result)
{
  uint64_t v1 = *(unint64_t ***)(result + 632);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = v1[1];
    unint64_t v4 = 126 - 2 * __clz(((char *)v3 - (char *)*v1) >> 4);
    if (v3 == *v1) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v4;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>(*v1, v3, (uint64_t)&v10, v5, 1);
    uint64_t v7 = *v1;
    uint64_t v6 = v1[1];
    if (v6 != *v1)
    {
      do
      {
        uint64_t v8 = v6 - 2;
        (*(void (**)(void))(*(v6 - 1) + 16))();
        uint64_t v6 = v8;
      }
      while (v8 != v7);
    }
    uint64_t v11 = (void **)v1;
    std::vector<PrepassOp>::__destroy_vector::operator()[abi:ne180100](&v11);
    CFTypeRef result = MEMORY[0x1B3EBEC50](v1, 0x20C40960023A9);
    *(void *)(v2 + 632) = 0;
    uint64_t v9 = *(void *)(v2 + 304);
    if (v9)
    {
      if (!*(unsigned char *)(v9 + 208)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      return DyldDecodeWindow::reset((DyldDecodeWindow *)(v9 + 48));
    }
  }
  return result;
}

uint64_t ktrace_uuid_map_set_dsc_unslid_base_addresses(uint64_t result, uint64_t a2)
{
  *(void *)(result + 280) = a2;
  return result;
}

CFStringRef ktrace_symbols_buffer_to_text(const __CFData *a1, int a2)
{
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  long long v27 = xmmword_1B3A73250;
  uint64_t v28 = 0;
  char v29 = 1;
  if (Length >= 0x7FFFFFFF) {
    ktrace_symbols_buffer_to_text_cold_1();
  }
  CFStringRef v4 = 0;
  if (flatbuffers::Verifier::VerifyBufferFromStart<FlatbufferSymbols::SymbolsBuffer>((flatbuffers::Verifier *)&BytePtr, "SYMB", 0))
  {
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "\n");
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      flatbuffers::ToStringVisitor::ToStringVisitor((uint64_t)&v18, &v16, 1, (long long *)__p, 1);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      uint64_t v5 = &v16;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, " ");
      std::string::basic_string[abi:ne180100]<0>(v10, "");
      flatbuffers::ToStringVisitor::ToStringVisitor((uint64_t)&v18, &v12, 1, (long long *)v10, 1);
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      uint64_t v5 = &v12;
    }
    operator delete(*(void **)v5);
LABEL_13:
    uint64_t v6 = CFDataGetBytePtr(a1);
    flatbuffers::IterateObject((int *)&v6[*(unsigned int *)v6], (uint64_t)&FlatbufferSymbols::SymbolsBufferTypeTable(void)::tt, (uint64_t)&v18);
    if ((v20 & 0x80u) == 0) {
      uint64_t v7 = v19;
    }
    else {
      uint64_t v7 = (void **)v19[0];
    }
    if ((v20 & 0x80u) == 0) {
      CFIndex v8 = v20;
    }
    else {
      CFIndex v8 = (CFIndex)v19[1];
    }
    CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    uint64_t v18 = &unk_1F0C3C848;
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if ((char)v20 < 0) {
      operator delete(v19[0]);
    }
  }
  return v4;
}

void sub_1B39EA498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::~ToStringVisitor(void **this)
{
  *this = &unk_1F0C3C848;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0C3C848;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x1B3EBEC50);
}

uint64_t ktrace_dumpbuffer_address_space(uint64_t a1, unint64_t a2, char a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 304);
    if (v3)
    {
      __p = 0;
      unsigned __int8 v20 = 0;
      uint64_t v21 = 0;
      if ((a3 & 2) != 0)
      {
        uint64_t v5 = *(void **)(*(void *)(v3 + 32) + 16);
        if (v5)
        {
          uint64_t v6 = 0;
          do
          {
            uint64_t v7 = v5[3];
            if ((unint64_t)v6 >= v21)
            {
              uint64_t v8 = (v6 - __p) >> 3;
              if ((unint64_t)(v8 + 1) >> 61) {
                std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v9 = (v21 - (uint64_t)__p) >> 2;
              if (v9 <= v8 + 1) {
                unint64_t v9 = v8 + 1;
              }
              if ((unint64_t)(v21 - (void)__p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v10 = v9;
              }
              if (v10) {
                char v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v21, v10);
              }
              else {
                char v11 = 0;
              }
              long long v12 = &v11[8 * v8];
              *(void *)long long v12 = v7;
              uint64_t v6 = v12 + 8;
              char v13 = v20;
              if (v20 != __p)
              {
                do
                {
                  uint64_t v14 = *((void *)v13 - 1);
                  v13 -= 8;
                  *((void *)v12 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v14;
                  v12 -= 8;
                }
                while (v13 != __p);
                char v13 = __p;
              }
              __p = v12;
              uint64_t v21 = (uint64_t)&v11[8 * v10];
              if (v13) {
                operator delete(v13);
              }
            }
            else
            {
              *(void *)uint64_t v6 = v7;
              v6 += 8;
            }
            unsigned __int8 v20 = v6;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
LABEL_34:
        ktrace_dumpbuffer();
      }
      CFStringRef v4 = address_space_for_taskid((ktrace_uuid_map *)v3, a2);
      if (v4)
      {
        unint64_t v15 = v21 >> 2;
        if ((unint64_t)(v21 >> 2) <= 1) {
          unint64_t v15 = 1;
        }
        unint64_t v16 = v15;
        if (v15) {
          char v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v21, v15);
        }
        else {
          char v17 = 0;
        }
        *char v17 = v4;
        uint64_t v21 = (uint64_t)&v17[v16];
        goto LABEL_34;
      }
    }
  }
  return 0;
}

void sub_1B39EA7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ktrace_dumpbuffer()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  symbolication_context::symbolication_context((uint64_t)v0);
}

void sub_1B39EAE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, flatbuffers::FlatBufferBuilder *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)&a33);
  _Block_object_dispose(&a38, 8);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(a10);
  symbolication_context::~symbolication_context((symbolication_context *)(v38 - 216));
  _Unwind_Resume(a1);
}

uint64_t ktrace_dumpbuffer_address_space_pid(uint64_t a1, int a2, char a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 304);
    if (v3)
    {
      __p = 0;
      unsigned __int8 v20 = 0;
      uint64_t v21 = 0;
      if ((a3 & 2) != 0)
      {
        uint64_t v5 = *(void **)(*(void *)(v3 + 32) + 16);
        if (v5)
        {
          uint64_t v6 = 0;
          do
          {
            uint64_t v7 = v5[3];
            if ((unint64_t)v6 >= v21)
            {
              uint64_t v8 = (v6 - __p) >> 3;
              if ((unint64_t)(v8 + 1) >> 61) {
                std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v9 = (v21 - (uint64_t)__p) >> 2;
              if (v9 <= v8 + 1) {
                unint64_t v9 = v8 + 1;
              }
              if ((unint64_t)(v21 - (void)__p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v10 = v9;
              }
              if (v10) {
                char v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v21, v10);
              }
              else {
                char v11 = 0;
              }
              long long v12 = &v11[8 * v8];
              *(void *)long long v12 = v7;
              uint64_t v6 = v12 + 8;
              char v13 = v20;
              if (v20 != __p)
              {
                do
                {
                  uint64_t v14 = *((void *)v13 - 1);
                  v13 -= 8;
                  *((void *)v12 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v14;
                  v12 -= 8;
                }
                while (v13 != __p);
                char v13 = __p;
              }
              __p = v12;
              uint64_t v21 = (uint64_t)&v11[8 * v10];
              if (v13) {
                operator delete(v13);
              }
            }
            else
            {
              *(void *)uint64_t v6 = v7;
              v6 += 8;
            }
            unsigned __int8 v20 = v6;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
LABEL_34:
        ktrace_dumpbuffer();
      }
      CFStringRef v4 = address_space_for_pid((ktrace_uuid_map *)v3, a2);
      if (v4)
      {
        unint64_t v15 = v21 >> 2;
        if ((unint64_t)(v21 >> 2) <= 1) {
          unint64_t v15 = 1;
        }
        unint64_t v16 = v15;
        if (v15) {
          char v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v21, v15);
        }
        else {
          char v17 = 0;
        }
        *char v17 = v4;
        uint64_t v21 = (uint64_t)&v17[v16];
        goto LABEL_34;
      }
    }
  }
  return 0;
}

void sub_1B39EB0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL21ktrace_register_typesv_block_invoke()
{
  ktrace_uuid_map_typeid = _CFRuntimeRegisterClass();
  uint64_t result = _CFRuntimeRegisterClass();
  ktrace_address_space_typeid = result;
  return result;
}

void ktrace_uuid_map_dealloc(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[3];
    if (v2)
    {
      uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table(v2);
      MEMORY[0x1B3EBEC50](v3, 0x10A0C408EF24B1CLL);
    }
    uint64_t v4 = a1[4];
    if (v4)
    {
      uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table(v4);
      MEMORY[0x1B3EBEC50](v5, 0x10A0C408EF24B1CLL);
    }
    uint64_t v6 = a1[5];
    if (v6)
    {
      uint64_t v7 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v6);
      MEMORY[0x1B3EBEC50](v7, 0x10A0C408EF24B1CLL);
    }
    std::__optional_destruct_base<DyldDecodeWindow,false>::reset[abi:ne180100]((uint64_t)(a1 + 6));
    uint64_t v8 = (const void *)a1[31];
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = a1[27];
    if (v9)
    {
      uint64_t v10 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v9);
      MEMORY[0x1B3EBEC50](v10, 0x10A0C408EF24B1CLL);
    }
    char v11 = (const void *)a1[28];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = a1[30];
    if (v12)
    {
      uint64_t v13 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v12);
      MEMORY[0x1B3EBEC50](v13, 0x10A0C408EF24B1CLL);
    }
    uint64_t v14 = (const void *)a1[29];
    if (v14)
    {
      CFRelease(v14);
    }
  }
}

uint64_t std::__optional_destruct_base<DyldDecodeWindow,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 160))
  {
    uint64_t v1 = result;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(result + 112);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v1);
    *(unsigned char *)(v1 + 160) = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (const void **)*v2;
      CF::TypeRef::~TypeRef(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t ktrace_address_space_dealloc(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      uint64_t v2 = *(void ***)(result + 16);
      std::vector<SymbolOwner>::__destroy_vector::operator()[abi:ne180100](&v2);
      return MEMORY[0x1B3EBEC50](v1, 0x20C40960023A9);
    }
  }
  return result;
}

void std::vector<SymbolOwner>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        SymbolOwner::~SymbolOwner((SymbolOwner *)(v4 - 96));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke(uint64_t a1, void *a2)
{
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20990) {
    goto LABEL_7;
  }
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) <= 1)
    {
LABEL_7:
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      int v6[2] = ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke_2;
      v6[3] = &unk_1E6062D20;
      long long v7 = *(_OWORD *)(a1 + 32);
      ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v6);
    }
  }
  else if (v4 == 36864 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    goto LABEL_7;
  }
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke_2(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    while (1)
    {
      uint64_t v6 = *(unsigned int *)(v4 + 4);
      uint64_t v7 = v3 + v6;
      if (v3 + v6 > a3) {
        return result;
      }
      if (*(_DWORD *)v4 == 2319) {
        break;
      }
      uint64_t v3 = v7 + 16;
      uint64_t v4 = v7;
      if (v7 + 16 > a3) {
        return result;
      }
    }
    BOOL v8 = v6 >= (*(_DWORD *)(v4 + 8) & 0xFu);
    unsigned int v9 = v6 - (*(_DWORD *)(v4 + 8) & 0xF);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = 0;
    }
    if (strnstr((const char *)(v4 + 16), "X86_64", v10)) {
      goto LABEL_47;
    }
    int v11 = *(_DWORD *)v4;
    if ((*(_DWORD *)v4 & 0xFFFFFFF0) == 0x20) {
      int v11 = 17;
    }
    if (v11 > 2309)
    {
      if (v11 == 2310)
      {
        unsigned int v13 = *(_DWORD *)(v4 + 4);
        uint64_t v14 = *(void *)(v4 + 8);
        if (v13 == 112)
        {
          if ((v14 & 0x8F) == 0)
          {
            unsigned int v12 = 104;
            goto LABEL_28;
          }
          unsigned int v13 = 112;
        }
LABEL_26:
        unsigned int v15 = v14 & 0xF;
        BOOL v8 = v13 >= v15;
        unsigned int v12 = v13 - v15;
        if (!v8) {
          unsigned int v12 = 0;
        }
LABEL_28:
        if (!strnstr((const char *)(v4 + 16), "ARM64", v12))
        {
          int v16 = *(_DWORD *)v4;
          if ((*(_DWORD *)v4 & 0xFFFFFFF0) == 0x20) {
            int v16 = 17;
          }
          if (v16 > 2309)
          {
            if (v16 == 2310)
            {
              unsigned int v18 = *(_DWORD *)(v4 + 4);
              uint64_t v19 = *(void *)(v4 + 8);
              if (v18 == 112)
              {
                if ((v19 & 0x8F) == 0)
                {
                  unsigned int v17 = 104;
                  goto LABEL_46;
                }
                unsigned int v18 = 112;
              }
LABEL_44:
              unsigned int v20 = v19 & 0xF;
              BOOL v8 = v18 >= v20;
              unsigned int v17 = v18 - v20;
              if (!v8) {
                unsigned int v17 = 0;
              }
LABEL_46:
              uint64_t result = (uint64_t)strnstr((const char *)(v4 + 16), "ARM", v17);
              if (!result) {
                return result;
              }
              goto LABEL_47;
            }
            if (v16 == 2312)
            {
              unsigned int v18 = *(_DWORD *)(v4 + 4);
              uint64_t v19 = *(void *)(v4 + 8);
              if (v18 == 32)
              {
                if ((v19 & 0x8F) == 0)
                {
                  unsigned int v17 = 24;
                  goto LABEL_46;
                }
                unsigned int v18 = 32;
              }
              goto LABEL_44;
            }
          }
          else if (v16 == 17 || v16 == 19)
          {
            unsigned int v17 = *(_DWORD *)(v4 + 4);
            goto LABEL_46;
          }
          unsigned int v18 = *(_DWORD *)(v4 + 4);
          uint64_t v19 = *(void *)(v4 + 8);
          goto LABEL_44;
        }
LABEL_47:
        uint64_t result = CSArchitectureGetArchitectureForName();
        **(void **)(v5 + 40) = result;
        *(unsigned char *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = 1;
        return result;
      }
      if (v11 == 2312)
      {
        unsigned int v13 = *(_DWORD *)(v4 + 4);
        uint64_t v14 = *(void *)(v4 + 8);
        if (v13 == 32)
        {
          if ((v14 & 0x8F) == 0)
          {
            unsigned int v12 = 24;
            goto LABEL_28;
          }
          unsigned int v13 = 32;
        }
        goto LABEL_26;
      }
    }
    else if (v11 == 17 || v11 == 19)
    {
      unsigned int v12 = *(_DWORD *)(v4 + 4);
      goto LABEL_28;
    }
    unsigned int v13 = *(_DWORD *)(v4 + 4);
    uint64_t v14 = *(void *)(v4 + 8);
    goto LABEL_26;
  }
  return result;
}

void SymbolOwner::~SymbolOwner(SymbolOwner *this)
{
  uint64_t v1 = (const void *)*((void *)this + 10);
  if (v1) {
    CFRelease(v1);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v1ktrace_session_set_default_event_names_enabled(global_session, 1) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(const void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      CF::TypeRef::~TypeRef(v2 + 3);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *uint64_t v14 = 0;
  v14[1] = v7;
  void v14[2] = **a4;
  v14[3] = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *uint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_1B39EBC34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void CF::TypeRef::~TypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ___ZL22dscsym_buffer_get_uuidPKvmPA16_h_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v11 = 0;
  uint8x8_t v5 = utf8(a2);
  if (sscanf(v5, "%x:%x", (char *)&v11 + 4, &v11) == 2)
  {
    CFStringRef v6 = cfaasprintf("%llx", HIDWORD(v11) | ((unint64_t)v11 << 32));
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFMutableDictionaryRef v8 = Mutable;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v6, Mutable);
    CFRelease(v8);
    context[0] = MEMORY[0x1E4F143A8];
    context[1] = 3221225472;
    context[2] = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_156;
    context[3] = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
    uint64_t v9 = *(void *)(a1 + 40);
    context[4] = v8;
    void context[5] = v9;
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
  }
  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
  {
    ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_cold_2();
  }
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_156(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableDictionaryRef v7 = Mutable;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, Mutable);
  CFRelease(v7);
  CFStringRef Value = CFDictionaryGetValue(a3, @"path");
  uint64_t v9 = Value;
  if (Value)
  {
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
      uint64_t v9 = 0;
    }
  }
  CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"uuids");
  CFDictionaryRef v12 = v11;
  if (v11)
  {
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
      }
      CFDictionaryRef v12 = 0;
    }
  }
  if (v9)
  {
    CFDictionarySetValue(v7, @"Path", v9);
    if (v12)
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      void v14[2] = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_2;
      v14[3] = &__block_descriptor_48_e37_v24__0____CFString__8____CFString__16l;
      v14[4] = *(void *)(a1 + 40);
      void v14[5] = v9;
      CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v14);
    }
  }
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_2(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  *(void *)&v5.byte0 = 0;
  *(void *)&v5.byte8 = 0;
  unint64_t v4 = utf8(a3);
  if (!uuid_parse(v4, &v5.byte0)) {
    ktrace_uuid_map_associate_path_with_uuid(*(ktrace_uuid_map **)(a1 + 32), v5, *(CFUUIDBytes **)(a1 + 40));
  }
}

uint64_t ___ZL25ktrace_address_space_dumpP15ktrace_uuid_mapP20ktrace_address_spaceP7__sFILE_block_invoke(uint64_t a1, uint64_t a2, optional_uint64 *a3)
{
  CFStringRef v6 = uuid_string(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)a3) {
    v7 += optional_uint64::value(a3);
  }
  if (*(void *)(a2 + 56)) {
    uint64_t v8 = optional_uint64::value((optional_uint64 *)(a2 + 56)) + v7;
  }
  else {
    uint64_t v8 = -1;
  }
  CFStringRef v9 = *(const __CFString **)(a2 + 80);
  if (v9) {
    CFTypeID v10 = utf8(v9);
  }
  else {
    CFTypeID v10 = "<unknown>";
  }
  switch(*(_DWORD *)(a2 + 16))
  {
    case 1:
      CFDictionaryRef v11 = *(FILE **)(a1 + 32);
      uint64_t v18 = v8;
      uint64_t v19 = (uint64_t)v10;
      float v16 = v6;
      uint64_t v17 = v7;
      CFDictionaryRef v12 = "\t <%s> %16llx-%16llx %s\n";
      goto LABEL_16;
    case 2:
      CFDictionaryRef v11 = *(FILE **)(a1 + 32);
      uint64_t v19 = a2 + 24;
      size_t v20 = v10;
      uint64_t v17 = v7;
      uint64_t v18 = v8;
      float v16 = v6;
      CFDictionaryRef v12 = "\t <%s> %16llx-%16llx %s %s\n";
      goto LABEL_16;
    case 3:
      uint64_t v21 = 0;
      get_sc_and_slide(*(void *)(a1 + 40), a2, &v21, &v22);
      CFTypeID v13 = *(FILE **)(a1 + 32);
      if (v21)
      {
        uint64_t v18 = v8;
        uint64_t v19 = optional_uint64::value((optional_uint64 *)&v21);
        float v16 = v6;
        uint64_t v17 = v7;
        CFDictionaryRef v12 = "\t <%s> %16llx-%16llx SHARED_CACHE slide=%llx\n";
      }
      else
      {
        uint64_t v17 = v7;
        uint64_t v18 = v8;
        float v16 = v6;
        CFDictionaryRef v12 = "\t <%s> %16llx-%16llx SHARED_CACHE slide=?\n";
      }
      float v15 = v13;
      return fprintf(v15, v12, v16, v17, v18, v19, v20);
    case 4:
      return fprintf(*(FILE **)(a1 + 32), "\t <%s> %16llx-%16llx KERNEL_CACHE\n");
    case 5:
      CFDictionaryRef v11 = *(FILE **)(a1 + 32);
      uint64_t v18 = v8;
      uint64_t v19 = (uint64_t)v10;
      float v16 = v6;
      uint64_t v17 = v7;
      CFDictionaryRef v12 = "\t <%s> %16llx-%16llx __TEXT* %s\n";
LABEL_16:
      float v15 = v11;
      return fprintf(v15, v12, v16, v17, v18, v19, v20);
    default:
      abort();
  }
}

BOOL dyldtp_complete(uint64_t a1)
{
  if ((*(_DWORD *)a1 - 520421376) <= 0x30)
  {
    if (((1 << *(unsigned char *)a1) & 0x10000100001) != 0)
    {
      int v1 = 2;
      return *(_DWORD *)(a1 + 8) == v1;
    }
    if (((1 << *(unsigned char *)a1) & 0x1000010000100) != 0)
    {
      int v1 = 3;
      return *(_DWORD *)(a1 + 8) == v1;
    }
  }
  if (*(_DWORD *)a1) {
    abort();
  }
  return 0;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    CFTypeID v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      CFDictionaryRef v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          CFDictionaryRef v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  CFDictionaryRef v11 = (char *)operator new(0x58uLL);
  *(void *)CFDictionaryRef v11 = 0;
  *((void *)v11 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v7;
  *((void *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)CFDictionaryRef v11 = *v20;
LABEL_38:
    *size_t v20 = v11;
    goto LABEL_39;
  }
  *(void *)CFDictionaryRef v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B39EC444(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove(a1, a2, (uint64_t)&__p);
  int8x8_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SymbolOwner *,SymbolOwner *,SymbolOwner *,0>(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CFStringRef v6 = *(const void **)(a3 + 80);
      if (v6) {
        CFRelease(v6);
      }
      long long v7 = v4[1];
      *(_OWORD *)a3 = *v4;
      *(_OWORD *)(a3 + 16) = v7;
      long long v8 = v4[2];
      long long v9 = v4[3];
      long long v10 = v4[5];
      *(_OWORD *)(a3 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v4[4];
      *(_OWORD *)(a3 + 80) = v10;
      *(_OWORD *)(a3 + 32) = v8;
      *(_OWORD *)(a3 + 48) = v9;
      _OWORD v4[2] = 0u;
      v4[3] = 0u;
      v4[4] = 0u;
      void v4[5] = 0u;
      *unint64_t v4 = 0u;
      v4[1] = 0u;
      v4 += 6;
      a3 += 96;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t SymbolOwner::operator=(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    CFRelease(v4);
  }
  long long v5 = a2[2];
  long long v6 = a2[3];
  long long v7 = a2[4];
  *(_OWORD *)(a1 + 80) = a2[5];
  long long v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  long long v9 = *(const void **)(a1 + 80);
  if (v9) {
    CFRetain(v9);
  }
  return a1;
}

void ___ZL10visit_uuidP16operating_system11CFUUIDBytes_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
}

void merge_info_while_locked(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (a4)
  {
    long long v8 = *(NSObject **)(a1 + 48);
    if (v8) {
      dispatch_assert_queue_V2(v8);
    }
    CFStringRef v9 = cfaasprintf("%llx", a2);
    CFStringRef v10 = cfaasprintf("%llx", a3);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v9);
    if (Value)
    {
      CFDictionaryRef v12 = Value;
      if (CFDictionaryContainsKey(Value, v10)) {
        return;
      }
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        ktrace_postprocess_file_internal_cold_1();
      }
      CFDictionaryRef v12 = Mutable;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v9, Mutable);
      CFRelease(v12);
    }
    CFDictionarySetValue(v12, v10, a4);
  }
}

uint64_t ___ZL10visit_uuidP16operating_system11CFUUIDBytes_block_invoke_2(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (*v2) {
      ktrace_postprocess_file_internal_cold_1();
    }
    if (!stat(a2, &v8))
    {
      unint64_t v4 = v2[6];
      int8x8_t v3 = v2[7];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      stat v7 = v8;
      block[2] = ___ZL10visit_pathP16operating_systemPKc_block_invoke;
      block[3] = &__block_descriptor_184_e5_v8__0l;
      block[4] = v2;
      if (v3 && v4) {
        dispatch_group_async(v3, v4, block);
      }
      else {
        visit_inode_while_locked((uint64_t)v2, v7.st_dev, v7.st_ino);
      }
    }
  }
  return 1;
}

void ___ZL10visit_pathP16operating_systemPKc_block_invoke(uint64_t a1)
{
}

void ___ZL24visit_inode_while_lockedP16operating_system4fsid8fsobj_id_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
}

uint64_t ___ZL22get_summary_from_machoPKc_block_invoke()
{
  CSSymbolicatorGetArchitecture();
  FamilyName = (const char *)CSArchitectureGetFamilyName();
  CFStringRef v1 = CFStringCreateWithCString(0, FamilyName, 0x8000100u);
  if (!v1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFAutorelease(v1);
  if (CSSymbolicatorGetSymbolOwnerCountAtTime() != 1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

void ___ZL22get_summary_from_machoPKc_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t image_summary = (const void *)make_image_summary(a2);
  if (image_summary)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(const void **)(a1 + 48), image_summary);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void ___ZL18make_image_summary10_CSTypeRefb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CSRegionGetSegmentName(a2, a3, cStr);
  if (*(void *)cStr != 0x455A454741505F5FLL || *(void *)&cStr[3] != 0x4F52455A454741)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      ktrace_postprocess_file_internal_cold_1();
    }
    long long v6 = Mutable;
    CFStringRef v7 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    if (!v7) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFStringRef v8 = v7;
    CFAutorelease(v7);
    CFDictionarySetValue(v6, @"Name", v8);
    uint64_t valuePtr = CSRegionGetRange();
    CFNumberRef v9 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v9) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFNumberRef v10 = v9;
    CFAutorelease(v9);
    CFDictionarySetValue(v6, @"Address", v10);
    CSRegionGetRange();
    uint64_t valuePtr = v11;
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v12) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFNumberRef v13 = v12;
    CFAutorelease(v12);
    CFDictionarySetValue(v6, @"Size", v13);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v6);
    CFRelease(v6);
  }
}

void CSRegionGetSegmentName(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  Name = (const char *)CSRegionGetName();
  if (Name)
  {
    long long v5 = Name;
    if (*Name)
    {
      size_t v6 = strlen(Name) - 8;
      if (v6 <= 0x10 && !strcmp(" SEGMENT", &v5[v6]))
      {
        memcpy(a3, v5, v6);
        a3 += v6;
      }
      else
      {
        CSRegionGetSymbolOwner();
        if (CSIsNull())
        {
          uint64_t Path = 0;
        }
        else
        {
          uint64_t Path = CSSymbolOwnerGetPath();
          if (!Path) {
            uint64_t Path = CSSymbolOwnerGetName();
          }
        }
        CFStringRef v8 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
          CSRegionGetSegmentName(Path, (uint64_t)v5, v8);
        }
      }
    }
  }
  *a3 = 0;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  int8x8_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *int8x8_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_copy__190(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__191(uint64_t a1)
{
}

void ___ZL13visit_processP16operating_systemj_block_invoke(uint64_t a1)
{
  CSSymbolicatorCreateWithPid();
  if ((CSIsNull() & 1) == 0)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      ktrace_postprocess_file_internal_cold_1();
    }
    int8x8_t v3 = Mutable;
    CFMutableArrayRef v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!v4) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFMutableArrayRef v5 = v4;
    void v10[6] = MEMORY[0x1E4F143A8];
    v10[7] = 3221225472;
    v10[8] = ___ZL13visit_processP16operating_systemj_block_invoke_2;
    v10[9] = &__block_descriptor_40_e22_v24__0__CSTypeRef_QQ_8l;
    v10[10] = v4;
    CSSymbolicatorForeachSymbolOwnerAtTime();
    CFDictionarySetValue(v3, @"Binaries", v5);
    uint64_t valuePtr = *(unsigned int *)(a1 + 56);
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v6) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFNumberRef v7 = v6;
    CFAutorelease(v6);
    CFDictionarySetValue(v3, @"PID", v7);
    CFRelease(v5);
    CSRelease();
    unint64_t v8 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFNumberRef v9 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    _OWORD v10[2] = ___ZL13visit_processP16operating_systemj_block_invoke_3;
    void v10[3] = &unk_1E6062750;
    v10[4] = *(void *)(a1 + 48);
    v10[5] = v3;
    dispatch_group_async(v8, v9, v10);
  }
}

void ___ZL13visit_processP16operating_systemj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if ((CSSymbolOwnerIsDyldSharedCache() & 1) == 0)
  {
    uint64_t image_summary = make_image_summary(a2);
    if (image_summary)
    {
      CFMutableArrayRef v5 = (const void *)image_summary;
      CFNumberRef v6 = *(__CFArray **)(a1 + 32);
      CFArrayAppendValue(v6, v5);
    }
  }
}

void ___ZL13visit_processP16operating_systemj_block_invoke_3(uint64_t a1)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(const void **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  CFMutableArrayRef v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  CFNumberRef v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v1ktrace_session_set_default_event_names_enabled(global_session, 1) = a1 + 16;
    *CFNumberRef v7 = 0;
    v7[1] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::clear(void *result)
{
  if (result[3])
  {
    CFStringRef v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t _block_trampoline(void (**a1)(void))
{
  return 0;
}

void ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke(uint64_t a1, unint64_t *a2)
{
  *(void *)(*(void *)(a1 + 32) + 80) = *(void *)(*(void *)(a1 + 40) + 304);
  ktrace_collect_address(*(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)a2, a2[1]);
  ktrace_collect_address(*(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)a2, a2[2]);
  ktrace_collect_address(*(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)a2, a2[3]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = a2[4];

  ktrace_collect_address(v4, v5, (uint64_t)a2, v6);
}

void ktrace_collect_address(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  ktrace_get_uuid_offset_for_thread_address(a2, *(void *)(a3 + 40), a4, &v15);
  void v14[2] = v17;
  v14[3] = v18;
  v14[4] = v19;
  v14[0] = v15;
  v14[1] = v16;
  ktrace_collect_uuid_offset(a1, (uint64_t)v14);
  if (ktrace_plausible_kernel_address(a2, a4))
  {
    if (ktrace_get_pid_for_thread(a2, *(const void **)(a3 + 40)))
    {
      ktrace_get_uuid_offset_for_pid_address(a2, 0, a4, &v9);
      long long v18 = v12;
      long long v19 = v13;
      long long v16 = v10;
      long long v17 = v11;
      long long v15 = v9;
      int v8[2] = v11;
      v8[3] = v12;
      v8[4] = v13;
      v8[0] = v9;
      v8[1] = v10;
      ktrace_collect_uuid_offset(a1, (uint64_t)v8);
    }
  }
}

intptr_t ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_2(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_3(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(FILE ***)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (CSIsNull())
  {
    *(void *)(v2 + 16) = CSAddressSetCreate();
    *(void *)(v2 + 24) = v4;
    if (CSIsNull()) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  if (ktrace_make_symbolicator(v3, (UUIDContext *)v2))
  {
    uint64_t SymbolOwner = CSSymbolicatorGetSymbolOwner();
    CFDataRef v7 = v6;
    if (CSIsNull()) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFSetRef v8 = *(const __CFSet **)(v2 + 32);
    if (v8)
    {
      uint64_t context = MEMORY[0x1E4F143A8];
      uint64_t v27 = 3221225472;
      uint64_t v28 = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke;
      char v29 = &__block_descriptor_56_e8_v16__0Q8l;
      uint64_t v30 = SymbolOwner;
      CFDataRef v31 = v7;
      uint64_t v32 = v2;
      CFSetApplyFunction(v8, (CFSetApplierFunction)CFSetApplierTrampoline, &context);
      CFRelease(*(CFTypeRef *)(v2 + 32));
      *(void *)(v2 + 32) = 0;
    }
    CFDictionaryRef v9 = *(const __CFDictionary **)(v2 + 40);
    if (v9)
    {
      *(void *)&long long v20 = MEMORY[0x1E4F143A8];
      *((void *)&v20 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 3221225472;
      unint64_t v21 = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_2;
      unint64_t v22 = &__block_descriptor_56_e34_v24__0____CFString__8____CFSet__16l;
      uint64_t v23 = SymbolOwner;
      CFDataRef v24 = v7;
      uint64_t v25 = v2;
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, &v20);
      CFRelease(*(CFTypeRef *)(v2 + 40));
      *(void *)(v2 + 40) = 0;
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  if (ktrace_make_symbolicator((FILE **)v11, (UUIDContext *)v10))
  {
    uint64_t v12 = CSSymbolicatorGetSymbolOwner();
    uint64_t v14 = v13;
    if (CSIsNull()) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFDataRef v15 = (const __CFData *)MEMORY[0x1B3EBE760](v12, v14, *(void *)(v10 + 16), *(void *)(v10 + 24));
    if (v15)
    {
      CFDataRef v16 = v15;
      long long v20 = 0uLL;
      LODWORD(v2ktrace_session_set_default_event_names_enabled(global_session, 1) = 24;
      HIDWORD(v2ktrace_session_set_default_event_names_enabled(global_session, 1) = CFDataGetLength(v15);
      uuid_copy((unsigned __int8 *)&v20, (const unsigned __int8 *)v10);
      uint64_t v17 = HIDWORD(v21);
      if (CFDataGetLength(v16) != v17) {
        ktrace_postprocess_file_internal_cold_1();
      }
      long long v19 = *(NSObject **)(v11 + 88);
      long long v18 = *(NSObject **)(v11 + 96);
      uint64_t context = MEMORY[0x1E4F143A8];
      uint64_t v27 = 3221225472;
      uint64_t v28 = ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_200;
      char v29 = &__block_descriptor_80_e5_v8__0l;
      long long v33 = v20;
      uint64_t v34 = v21;
      uint64_t v30 = v11;
      CFDataRef v31 = v16;
      uint64_t v32 = v10;
    }
    else
    {
      long long v19 = *(NSObject **)(v11 + 88);
      long long v18 = *(NSObject **)(v11 + 96);
      uint64_t context = MEMORY[0x1E4F143A8];
      uint64_t v27 = 3221225472;
      uint64_t v28 = ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke;
      char v29 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v30 = v11;
      CFDataRef v31 = (const __CFData *)v10;
    }
    dispatch_group_async(v18, v19, &context);
  }
}

void ktrace_collect_uuid_offset(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a2 + 48);
  if (v2 > 5) {
    ktrace_collect_uuid_offset();
  }
  if (((1 << v2) & 0x19) != 0) {
    return;
  }
  uint64_t v5 = *(void **)(a1 + 16);
  v14[0] = *(_OWORD *)a2;
  if (std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>(v5, v14)|| !uuid_is_null((const unsigned __int8 *)(a1 + 57))&& uuid_compare((const unsigned __int8 *)a2, (const unsigned __int8 *)(a1 + 57)))
  {
    return;
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  _OWORD v13[3] = v6;
  void v13[4] = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v7;
  UUIDContext::UUIDContext((uint64_t)v14, (uint64_t)v13);
  uuid = find_or_create_uuid(a1, v14);
  UUIDContext::~UUIDContext((UUIDContext *)v14);
  if (!uuid || (uuid[20] & 1) != 0) {
    return;
  }
  int v9 = *(_DWORD *)(a2 + 48);
  switch(v9)
  {
    case 5:
      CFStringRef v11 = @"__TEXT*";
      goto LABEL_17;
    case 2:
      CFStringRef v11 = cfstring((const char *)(a2 + 16));
LABEL_17:
      CFDictionaryRef Mutable = (const __CFDictionary *)uuid[5];
      if (!Mutable)
      {
        CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uuid[5] = Mutable;
      }
      CFDictionaryRef Value = (void *)CFDictionaryGetValue(Mutable, v11);
      if (!Value)
      {
        CFDictionaryRef Value = CFSetCreateMutable(0, 0, &long_set_callbacks);
        CFDictionarySetValue((CFMutableDictionaryRef)uuid[5], v11, Value);
        CFRelease(Value);
      }
      goto LABEL_21;
    case 1:
      CFDictionaryRef Value = (void *)uuid[4];
      if (!Value)
      {
        CFDictionaryRef Value = CFSetCreateMutable(0, 0, &long_set_callbacks);
        uuid[4] = Value;
      }
LABEL_21:
      CFSetAddValue((CFMutableSetRef)Value, *(const void **)(a2 + 40));
      break;
  }
}

void sub_1B39ED6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  UUIDContext::~UUIDContext((UUIDContext *)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = a2[1] ^ *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2[1] ^ *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  long long v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  memset(v7, 0, sizeof(v7));
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  int v10 = 1;
  uint64_t v11 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  int v14 = 0;
  uint64_t result = translate_offset(v3, v4, v7, &v6, 0);
  if (result) {
    return CSAddressSetAdd();
  }
  return result;
}

void ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_2(uint64_t a1, CFStringRef theString1, const __CFSet *a3)
{
  uint64_t v6 = CFStringCompare(theString1, @"__TEXT*", 0);
  if (v6)
  {
    uint64_t v6 = (uint64_t)utf8(theString1);
    int v7 = 2;
  }
  else
  {
    int v7 = 5;
  }
  context[0] = MEMORY[0x1E4F143A8];
  context[1] = 3221225472;
  context[2] = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_3;
  context[3] = &__block_descriptor_68_e8_v16__0Q8l;
  int v11 = v7;
  context[4] = v6;
  long long v9 = *(_OWORD *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  CFSetApplyFunction(a3, (CFSetApplierFunction)CFSetApplierTrampoline, context);
}

uint64_t ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  *(void *)&long long v11 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v9 = 0u;
  *((void *)&v11 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a2;
  LODWORD(v12) = *(_DWORD *)(a1 + 64);
  uint64_t v3 = *(const char **)(a1 + 32);
  if (v3) {
    strlcpy((char *)&v10, v3, 0x11uLL);
  }
  uint64_t v7 = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  int v8[2] = v11;
  v8[3] = v12;
  v8[4] = v13;
  v8[0] = v9;
  v8[1] = v10;
  uint64_t result = translate_offset(v4, v5, v8, &v7, 0);
  if (result) {
    return CSAddressSetAdd();
  }
  return result;
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 32);
  int8x8_t v2 = *(FILE ***)(a1 + 32);
  uint64_t v4 = *v2;
  if (*v2)
  {
    uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v5 = (unsigned __int8 **)(a1 + 40);
    uint64_t v7 = describe2((uint64_t)v2, v6);
    fprintf(v4, "failed to create signature for %s\n", (const char *)v7);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_cold_1(v3, v5);
    }
  }
}

UInt8 *describe2(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  CFStringRef v4 = (const __CFString *)*((void *)uu + 17);
  if (!v4)
  {
    if (*(void *)(a1 + 80))
    {
      CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
      CFStringAppendCString(Mutable, out, 0x8000100u);
      v13[0] = 0;
      v13[1] = v13;
      v13[2] = 0x2020000000;
      char v14 = 1;
      uint64_t v9 = *(void *)(a1 + 80);
      v12[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
      v12[1] = (void (*)(void, void))3221225472;
      void v12[2] = (void (*)(void, void))___ZL9describe2P21symbolication_contextP11UUIDContext_block_invoke;
      void v12[3] = (void (*)(void, void))&unk_1E6062C98;
      v12[4] = (void (*)(void, void))v13;
      void v12[5] = (void (*)(void, void))Mutable;
      ktrace_uuid_map_iterate_associated_paths(v9, (long long *)uu, v12);
      CFAutorelease(Mutable);
      uint64_t v7 = utf8(Mutable);
      _Block_object_dispose(v13, 8);
      return (UInt8 *)v7;
    }
    if (*((void *)uu + 18))
    {
      uint64_t v11 = *((void *)uu + 19);
      if (v11) {
        return aasprintf("%s /.vol/%lld/%lld", out, *((void *)uu + 18), v11);
      }
    }
    else if (*((_DWORD *)uu + 38))
    {
      return aasprintf("%s /.vol/?/%lld", out, *((void *)uu + 19));
    }
    return aasprintf("%s", out);
  }
  uint64_t v5 = utf8(v4);
  return aasprintf("%s %s", out, v5);
}

void sub_1B39EDC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_200(uint64_t a1)
{
  int8x8_t v2 = (uint64_t *)(a1 + 32);
  uint64_t appended = ktrace_file_append_start(*(void *)(*(void *)(a1 + 32) + 48), 32771, 0, 0);
  if (!appended
    || (uint64_t v4 = (uint64_t)appended,
        ktrace_file_append_data(*(void *)(*(void *)(a1 + 32) + 48), (uint64_t)appended, (UInt8 *)(a1 + 56), 24))|| (uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 48), BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 40)), Length = CFDataGetLength(*(CFDataRef *)(a1 + 40)), ktrace_file_append_data(v5, v4, BytePtr, Length)))
  {
    uint64_t v8 = *(FILE **)*v2;
    if (v8)
    {
      fwrite("failed to write symbols chunk\n", 0x1EuLL, 1uLL, v8);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_200_cold_1();
      }
    }
  }
  else
  {
    ktrace_file_append_finish(*(void *)(*v2 + 48), v4);
    long long v10 = *(FILE **)*v2;
    if (v10)
    {
      uint64_t v11 = describe2(*v2, *(unsigned __int8 **)(a1 + 48));
      fprintf(v10, "added symbols for %s\n", (const char *)v11);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_200_cold_2(v2, (unsigned __int8 **)(a1 + 48));
      }
    }
  }
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    CFRelease(v9);
  }
}

void ___ZL9describe2P21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v4 + 24))
  {
    *(unsigned char *)(v4 + 24) = 0;
    uint64_t v5 = " ";
  }
  else
  {
    uint64_t v5 = ", ";
  }
  CFStringAppendCString(*(CFMutableStringRef *)(a1 + 40), v5, 0x8000100u);
  uint64_t v6 = *(__CFString **)(a1 + 40);

  CFStringAppend(v6, a2);
}

void *std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = a2[1] ^ *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2[1] ^ *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  *((_OWORD *)i + ktrace_session_set_default_event_names_enabled(global_session, 1) = *a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *i = *v20;
LABEL_42:
    *long long v20 = i;
    goto LABEL_43;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B39EE058(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      UUIDContext::~UUIDContext((UUIDContext *)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void KtraceSymbolicator::~KtraceSymbolicator(KtraceSymbolicator *this)
{
  uint64_t v2 = *(symbolication_context **)this;
  if (v2)
  {
    symbolication_context::~symbolication_context(v2);
    MEMORY[0x1B3EBEC50]();
  }
  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      CS::TypeRef::~TypeRef((CS::TypeRef *)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = a2[1] ^ *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2[1] ^ *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,UUIDContext>(uint64_t a1, void *a2, long long *a3, long long *a4)
{
  unint64_t v8 = a2[1] ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      long long v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  unint64_t v16 = operator new(0xC8uLL);
  long long v17 = a4[8];
  long long v18 = a4[9];
  long long v19 = a4[6];
  v16[9] = a4[7];
  v16[10] = v17;
  _OWORD v16[11] = v18;
  long long v20 = a4[4];
  long long v21 = a4[5];
  long long v22 = a4[2];
  void v16[5] = a4[3];
  void v16[6] = v20;
  long long v23 = *a3;
  v16[7] = v21;
  void v16[8] = v19;
  long long v24 = *a4;
  long long v25 = a4[1];
  v16[1] = v23;
  CFTypeRef v16[2] = v24;
  v35[0] = (uint64_t)v16;
  v35[1] = a1 + 16;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v8;
  *((void *)v16 + 24) = *((void *)a4 + 20);
  v16[3] = v25;
  v16[4] = v22;
  *((void *)a4 + 20) = 0;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  char v36 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v9 || (float)(v27 * (float)v9) < v26)
  {
    BOOL v28 = 1;
    if (v9 >= 3) {
      BOOL v28 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v9);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v29;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v31);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  if (v32)
  {
    *(void *)v35[0] = *v32;
    *uint64_t v32 = v35[0];
  }
  else
  {
    *(void *)v35[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v35[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v35[0])
    {
      unint64_t v33 = *(void *)(*(void *)v35[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v33 >= v9) {
          v33 %= v9;
        }
      }
      else
      {
        v33 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v33) = v35[0];
    }
  }
  long long v12 = (void *)v35[0];
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100](v35, 0);
  return v12;
}

void sub_1B39EE540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      UUIDContext::~UUIDContext((UUIDContext *)(v2 + 32));
    }
    operator delete((void *)v2);
  }
}

uint64_t UUIDContext::UUIDContext(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  unint64_t v4 = *(const void **)(a2 + 72);
  *(void *)(a1 + 136) = v4;
  *(void *)(a1 + 144) = *(void *)(a2 + 56);
  *(void *)(a1 + 152) = *(void *)(a2 + 64);
  if (v4) {
    CFRetain(v4);
  }
  return a1;
}

void UUIDContext::~UUIDContext(UUIDContext *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = (const void *)*((void *)this + 5);
  if (v3) {
    CFRelease(v3);
  }
  if ((CSIsNull() & 1) == 0) {
    CSRelease();
  }
  if ((CSIsNull() & 1) == 0) {
    CSRelease();
  }
  unint64_t v4 = (const void *)*((void *)this + 14);
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (const void *)*((void *)this + 13);
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)*((void *)this + 17);
  if (v6) {
    CFRelease(v6);
  }
  unint64_t v7 = (const void *)*((void *)this + 16);
  if (v7) {
    CFRelease(v7);
  }
}

BOOL ktrace_find_executable(symbolication_context *a1, UUIDContext *uu)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if ((*((_WORD *)uu + 80) & 2) != 0) {
    return 1;
  }
  if ((*((_WORD *)uu + 80) & 0x400) != 0) {
    return 0;
  }
  unint64_t v3 = (void *)*((void *)a1 + 1);
  if (!v3) {
    return 0;
  }
  if (*v3)
  {
    v52[0] = MEMORY[0x1E4F143A8];
    v52[1] = 3221225472;
    v52[2] = ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke;
    v52[3] = &__block_descriptor_48_e21_v16__0____CFString__8l;
    v52[4] = v3;
    v52[5] = uu;
    CFStringRef v5 = (const __CFString *)*((void *)uu + 17);
    if (v5)
    {
      ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke((CFIndex)v52, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a1 + 10);
      if (v6)
      {
        v51[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
        v51[1] = (void (*)(void, void))3221225472;
        v51[2] = (void (*)(void, void))___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_4;
        v51[3] = (void (*)(void, void))&unk_1E6062F70;
        v51[4] = (void (*)(void, void))v52;
        v51[5] = (void (*)(void, void))uu;
        ktrace_uuid_map_iterate_associated_paths(v6, (long long *)uu, v51);
      }
    }
    if ((*((_WORD *)uu + 80) & 2) != 0) {
      return 1;
    }
  }
  CFArrayRef v7 = (const __CFArray *)v3[1];
  if (v7 && CFArrayGetCount(v7))
  {
    unint64_t v8 = (void *)*((void *)a1 + 4);
    if (!v8)
    {
      pthread_mutex_lock(&ktrace_find_executable(symbolication_context *,UUIDContext *)::lock);
      if (!*((void *)a1 + 4)) {
        calculateRecursiveSearchCache();
      }
      pthread_mutex_unlock(&ktrace_find_executable(symbolication_context *,UUIDContext *)::lock);
      unint64_t v8 = (void *)*((void *)a1 + 4);
    }
    *(_OWORD *)__ptr = *(_OWORD *)uu;
    unint64_t v9 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(v8, __ptr);
    if (v9)
    {
      uint8x8_t v10 = (const void *)v9[4];
      *((void *)uu + 13) = v10;
      CFRetain(v10);
      *((_WORD *)uu + 80) |= 2u;
      return 1;
    }
  }
  if (v3[2])
  {
    uint64_t v11 = *((void *)a1 + 1);
    if (v11)
    {
      *(void *)long long v59 = -1;
      posix_spawn_file_actions_t v55 = 0;
      posix_spawn_file_actions_init(&v55);
      memset(out, 0, 37);
      uuid_unparse_upper((const unsigned __int8 *)uu, out);
      long long v12 = utf8(*(const __CFString **)(v11 + 16));
      unint64_t v13 = (char *)aasprintf("%s %s", v12, out);
      int v53 = 0;
      pid_t v54 = -1;
      int v53 = pipe(v59);
      if (v53)
      {
        float v14 = *(FILE **)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = __error();
          unint64_t v16 = strerror(*v15);
          fprintf(v14, "pipe failed: %s\n", v16);
        }
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_find_executable();
        }
      }
      else
      {
        __argv[0] = "sh";
        __argv[1] = "-c";
        __argv[2] = v13;
        __argv[3] = 0;
        posix_spawn_file_actions_addclose(&v55, 1);
        posix_spawn_file_actions_addclose(&v55, v59[0]);
        posix_spawn_file_actions_adddup2(&v55, v59[1], 1);
        long long v17 = _NSGetEnviron();
        int v18 = posix_spawn(&v54, "/bin/sh", &v55, 0, __argv, *v17);
        int v53 = v18;
        if (v18)
        {
          long long v19 = *(FILE **)a1;
          if (*(void *)a1)
          {
            long long v20 = strerror(v18);
            fprintf(v19, "posix_spawn failed: %s\n", v20);
          }
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_find_executable(&v53);
          }
        }
        else
        {
          close(v59[1]);
          v59[1] = -1;
          BOOL v28 = fdopen(v59[0], "r");
          if (v28)
          {
            long long v22 = v28;
            CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
            if (!Mutable) {
              ktrace_postprocess_file_internal_cold_1();
            }
            long long v23 = Mutable;
            size_t v30 = fread(__ptr, 1uLL, 0x200uLL, v22);
            if (v30)
            {
              size_t v31 = v30;
              do
              {
                CFDataAppendBytes(v23, __ptr, v31);
                size_t v31 = fread(__ptr, 1uLL, 0x200uLL, v22);
              }
              while (v31);
            }
            if (feof(v22))
            {
              pid_t v32 = waitpid(v54, &v53, 0);
              if (v32 == v54)
              {
                if (v53)
                {
                  if (*(void *)a1) {
                    fprintf(*(FILE **)a1, "command failed: %s (exit status %d)\n", v13, v53);
                  }
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                    ktrace_find_executable();
                  }
                }
                else
                {
                  CFDictionaryRef v41 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v23, 0, 0, 0);
                  if (v41)
                  {
                    CFDictionaryRef v24 = v41;
                    CFStringRef v42 = cfstring(out);
                    CFDictionaryRef dictionary = (const __CFDictionary *)cfdict_get_dictionary(v24, v42);
                    if (dictionary
                      && (CFStringRef string = (const __CFString *)cfdict_get_string(dictionary, @"DBGSymbolRichExecutable")) != 0)
                    {
                      CFStringRef v45 = string;
                      uint64_t v46 = *(FILE **)a1;
                      if (*(void *)a1)
                      {
                        fileuint64_t Path = string;
                        CFRange v47 = utf8(string);
                        fprintf(v46, "found executable: %s\n\tusing command: %s\n", v47, v13);
                        ktrace_log_init();
                        uint64_t v48 = ktrace_log;
                        BOOL v49 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
                        CFStringRef v45 = filePath;
                        if (v49)
                        {
                          ktrace_find_executable(filePath, (uint64_t)v13, v48);
                          CFStringRef v45 = filePath;
                        }
                      }
                      *((void *)uu + 13) = CFURLCreateWithFileSystemPath(0, v45, kCFURLPOSIXPathStyle, 0);
                      *((_WORD *)uu + 80) |= 2u;
                      char v21 = 1;
                    }
                    else
                    {
                      char v21 = 0;
                    }
LABEL_32:
                    posix_spawn_file_actions_destroy(&v55);
                    if (v59[0] != -1) {
                      close(v59[0]);
                    }
                    if (v59[1] != -1) {
                      close(v59[1]);
                    }
                    if (v22) {
                      fclose(v22);
                    }
                    if (v23) {
                      CFRelease(v23);
                    }
                    if (v24) {
                      CFRelease(v24);
                    }
                    if (v21) {
                      return 1;
                    }
                    goto LABEL_44;
                  }
                  if (*(void *)a1) {
                    fprintf(*(FILE **)a1, "failed to parse output from command: %s\n", v13);
                  }
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                    ktrace_find_executable();
                  }
                }
              }
              else
              {
                long long v37 = *(FILE **)a1;
                if (*(void *)a1)
                {
                  uint64_t v38 = __error();
                  char v39 = strerror(*v38);
                  fprintf(v37, "waitpid failed! %s\n", v39);
                }
                uint64_t v40 = ktrace_log;
                if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
                  ktrace_find_executable(v40);
                }
              }
            }
            else
            {
              unint64_t v33 = *(FILE **)a1;
              if (*(void *)a1)
              {
                int v34 = ferror(v22);
                uint64_t v35 = strerror(v34);
                fprintf(v33, "error reading from pipe! %s\n", v35);
              }
              char v36 = ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
                ktrace_find_executable(v22, v36);
              }
            }
            char v21 = 0;
LABEL_31:
            CFDictionaryRef v24 = 0;
            goto LABEL_32;
          }
          if (*(void *)a1) {
            fwrite("fdopen failed!\n", 0xFuLL, 1uLL, *(FILE **)a1);
          }
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
            ktrace_find_executable();
          }
        }
      }
      char v21 = 0;
      long long v22 = 0;
      long long v23 = 0;
      goto LABEL_31;
    }
  }
LABEL_44:
  *((_WORD *)uu + 80) |= 0x400u;
  float v26 = *(FILE **)a1;
  if (*(void *)a1)
  {
    float v27 = describe2((uint64_t)a1, (unsigned __int8 *)uu);
    fprintf(v26, "could not find executable for %s\n", (const char *)v27);
    ktrace_log_init();
    BOOL result = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    ktrace_find_executable((uint64_t)a1, (unsigned __int8 *)uu);
  }
  return 0;
}

CFIndex ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke(CFIndex result, CFStringRef theString)
{
  if (theString)
  {
    uint64_t v3 = result;
    BOOL result = CFStringGetLength(theString);
    if (result)
    {
      BOOL result = CFArrayGetCount(**(CFArrayRef **)(v3 + 32));
      if (result >= 1)
      {
        for (CFIndex i = 0; i < result; ++i)
        {
          CFTypeID ValueAtIndex = (void *)CFArrayGetValueAtIndex(**(CFArrayRef **)(v3 + 32), i);
          if (ValueAtIndex)
          {
            uint64_t v6 = ValueAtIndex;
            CFTypeID v7 = CFGetTypeID(ValueAtIndex);
            if (v7 != CFStringGetTypeID())
            {
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v12, v13);
              }
            }
            if ([v6 length])
            {
              if ([v6 characterAtIndex:0] == 47)
              {
                CFStringRef v8 = (const __CFString *)[NSString stringWithFormat:@"%@/%@", v6, theString, v11];
              }
              else
              {
                uint64_t v10 = [objc_alloc_init(MEMORY[0x1E4F28CB8]) currentDirectoryPath];
                CFStringRef v8 = (const __CFString *)[NSString stringWithFormat:@"%@/%@/%@", v10, v6, theString];
              }
              CFURLRef v9 = CFURLCreateWithFileSystemPath(0, v8, kCFURLPOSIXPathStyle, 0);
              if (CFURLResourceIsReachable(v9, 0)) {
                CSSymbolicatorForeachSymbolicatorWithURL();
              }
              CFRelease(v9);
            }
          }
          BOOL result = CFArrayGetCount(**(CFArrayRef **)(v3 + 32));
        }
      }
    }
  }
  return result;
}

uint64_t ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_2()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

void *___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = (void *)owner_matches_uuid(a2, a3, *(const unsigned __int8 **)(a1 + 32));
  if (result)
  {
    if ((*(_WORD *)(*(void *)(a1 + 32) + 160) & 2) == 0)
    {
      BOOL result = (void *)CFRetain(*(CFTypeRef *)(a1 + 40));
      *(void *)(*(void *)(a1 + 32) + 104) = *(void *)(a1 + 40);
      *(_WORD *)(*(void *)(a1 + 32) + 160) |= 2u;
    }
  }
  return result;
}

const unsigned __int8 *owner_matches_uuid(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  BOOL result = (const unsigned __int8 *)CSSymbolOwnerGetCFUUIDBytes();
  if (result) {
    return (const unsigned __int8 *)(uuid_compare(result, a3) == 0);
  }
  return result;
}

uint64_t ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_4(uint64_t result)
{
  if ((*(_WORD *)(*(void *)(result + 40) + 160) & 2) == 0) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void calculateRecursiveSearchCache()
{
}

void sub_1B39EF324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  CF::TypeRef::~TypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZL29calculateRecursiveSearchCacheP32ktrace_dsym_search_configuration_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

void ___ZL29calculateRecursiveSearchCacheP32ktrace_dsym_search_configuration_block_invoke_2(uint64_t a1)
{
  uint64_t CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes();
  if (CFUUIDBytes)
  {
    uint64_t v3 = (_OWORD *)CFUUIDBytes;
    CFTypeID v7 = *(const void **)(a1 + 40);
    CFRetain(v7);
    uint64_t v4 = *(void *)(a1 + 32);
    CFStringRef v8 = v3;
    CFStringRef v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v4, v3, (uint64_t)&std::piecewise_construct, &v8);
    uint64_t v6 = (const void *)v5[4];
    if (v6) {
      CFRelease(v6);
    }
    void v5[4] = v7;
    CFTypeID v7 = 0;
    CF::TypeRef::~TypeRef(&v7);
  }
}

void sub_1B39EF440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CF::TypeRef::~TypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ktrace_find_arch_with_default(symbolication_context *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a2 + 160) & 4) != 0) {
    return 1;
  }
  ktrace_find_summary(a1, (UUIDContext *)a2);
  LOWORD(v6) = *(_WORD *)(a2 + 160);
  if ((v6 & 4) != 0) {
    return 1;
  }
  uint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    if (*(unsigned char *)(v7 + 25))
    {
      uint64_t v8 = *((void *)a1 + 10);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 272);
        if (v9)
        {
          *(void *)(a2 + 120) = v9;
LABEL_10:
          *(_WORD *)(a2 + 160) = v6 | 4;
          return 1;
        }
      }
    }
  }
  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if (a3)
  {
    *(void *)(a2 + 120) = a3;
    LOWORD(v6) = *(_WORD *)(a2 + 160);
    goto LABEL_10;
  }
  if ((*(_WORD *)(a2 + 160) & 4) == 0)
  {
    uint64_t v11 = *(FILE **)a1;
    if (*(void *)a1)
    {
      char v12 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v11, "could not figure out arch for %s\n", (const char *)v12);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_find_arch_with_default((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
  }
  uint64_t v13 = *((void *)a1 + 1);
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(v13 + 26);
    unsigned int v6 = *(unsigned __int16 *)(a2 + 160);
    if (v14)
    {
      *(void *)(a2 + 120) = 0;
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v6 = *(unsigned __int16 *)(a2 + 160);
  }
  return (v6 >> 2) & 1;
}

void ktrace_find_summary(symbolication_context *a1, UUIDContext *a2)
{
  uint64_t v2 = *((void *)a1 + 10);
  if (v2 && !*((void *)a2 + 16))
  {
    CFStringRef v5 = *(void **)(v2 + 240);
    if (v5)
    {
      long long v17 = *(_OWORD *)a2;
      unsigned int v6 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(v5, &v17);
      if (v6)
      {
        uint64_t v7 = (const void *)v6[4];
        *((void *)a2 + 16) = v7;
        if (v7)
        {
          CFRetain(v7);
          return;
        }
      }
    }
    fsid v8 = (fsid)*((void *)a2 + 18);
    fsobj_id v9 = (fsobj_id)*((void *)a2 + 19);
    CFDictionaryRef v10 = (const __CFDictionary *)lookup_inode(*(const __CFDictionary **)(*((void *)a1 + 10) + 224), v8, v9);
    ktrace_find_summary_in_fat_summary(a2, v10);
    if (!*((void *)a2 + 16))
    {
      uint64_t v11 = (const void *)*((void *)a2 + 17);
      uint64_t v12 = *((void *)a1 + 10);
      if (!v11 || !*(void *)(v12 + 232)) {
        goto LABEL_17;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 232), v11);
      CFDictionaryRef v14 = Value;
      if (Value)
      {
        CFTypeID v15 = CFGetTypeID(Value);
        if (v15 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
          }
          CFDictionaryRef v14 = 0;
        }
      }
      ktrace_find_summary_in_fat_summary(a2, v14);
      if (!*((void *)a2 + 16))
      {
        uint64_t v12 = *((void *)a1 + 10);
LABEL_17:
        if (*(void *)(v12 + 232))
        {
          v16[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
          v16[1] = (void (*)(void, void))3221225472;
          CFTypeRef v16[2] = (void (*)(void, void))___ZL19ktrace_find_summaryP21symbolication_contextP11UUIDContext_block_invoke;
          v16[3] = (void (*)(void, void))&__block_descriptor_48_e21_v16__0____CFString__8l;
          v16[4] = (void (*)(void, void))a2;
          void v16[5] = (void (*)(void, void))a1;
          ktrace_uuid_map_iterate_associated_paths(v12, (long long *)a2, v16);
        }
      }
    }
  }
}

void ktrace_analyze_executable(FILE **a1, CFURLRef *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (ktrace_find_executable((symbolication_context *)a1, (UUIDContext *)a2))
  {
    CSSymbolicatorForeachSymbolicatorWithURL();
    if (((_WORD)a2[20] & 4) == 0)
    {
      uint64_t v4 = *a1;
      if (*a1)
      {
        CFStringRef v5 = CFURLGetString(a2[13]);
        unsigned int v6 = utf8(v5);
        uint64_t v7 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v4, "failed to analyze executable at %s for %s\n", v6, (const char *)v7);
        ktrace_log_init();
        fsid v8 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v9 = CFURLGetString(a2[13]);
          *(_DWORD *)long long buf = 136315394;
          uint64_t v11 = utf8(v9);
          __int16 v12 = 2080;
          uint64_t v13 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
          _os_log_debug_impl(&dword_1B39A5000, v8, OS_LOG_TYPE_DEBUG, "failed to analyze executable at %s for %s\n", buf, 0x16u);
        }
      }
    }
  }
}

const void *lookup_inode(const __CFDictionary *a1, fsid a2, fsobj_id a3)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v5 = cfaasprintf("%llx", a2);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, v5);
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v7 = Value;
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFDictionaryGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
LABEL_9:
    }
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
    return 0;
  }
  CFStringRef v9 = cfaasprintf("%llx", a3);
  CFDictionaryRef v10 = CFDictionaryGetValue(v7, v9);
  uint64_t v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      return 0;
    }
  }
  return v11;
}

void ktrace_find_summary_in_fat_summary(UUIDContext *a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Images");
    if (Value)
    {
      CFDictionaryRef v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFDictionaryGetTypeID())
      {
        context[0] = MEMORY[0x1E4F143A8];
        context[1] = 3221225472;
        context[2] = ___ZL34ktrace_find_summary_in_fat_summaryP11UUIDContextPK14__CFDictionary_block_invoke;
        context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
        context[4] = a1;
        CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
      }
      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
        }
      }
    }
  }
}

void ___ZL19ktrace_find_summaryP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, const void *a2)
{
  if (!*(void *)(*(void *)(a1 + 32) + 128))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(*(void *)(a1 + 40) + 80) + 232), a2);
    CFDictionaryRef v4 = Value;
    if (Value)
    {
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 != CFDictionaryGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
        }
        CFDictionaryRef v4 = 0;
      }
    }
    ktrace_find_summary_in_fat_summary(*(UUIDContext **)(a1 + 32), v4);
  }
}

uint64_t ___ZL34ktrace_find_summary_in_fat_summaryP11UUIDContextPK14__CFDictionary_block_invoke(uint64_t result, const __CFString *a2, CFDictionaryRef theDict)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(result + 32) + 128))
  {
    uint64_t v5 = result;
    memset(uu, 0, sizeof(uu));
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"UUID_String");
    CFStringRef v7 = Value;
    if (Value)
    {
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 != CFStringGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        }
        CFStringRef v7 = 0;
      }
    }
    CFStringRef v9 = utf8(v7);
    uuid_parse(v9, uu);
    BOOL result = uuid_compare(uu, *(const unsigned __int8 **)(v5 + 32));
    if (!result)
    {
      if ((*(_WORD *)(*(void *)(v5 + 32) + 160) & 4) == 0)
      {
        utf8(a2);
        *(void *)(*(void *)(v5 + 32) + 120) = CSArchitectureGetArchitectureForName();
        *(_WORD *)(*(void *)(v5 + 32) + 160) = *(_WORD *)(*(void *)(v5 + 32) + 160) & 0xFFFB | (4 * (*(void *)(*(void *)(v5 + 32) + 120) != 0));
      }
      BOOL result = (uint64_t)CFRetain(theDict);
      *(void *)(*(void *)(v5 + 32) + 128) = theDict;
    }
  }
  return result;
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (uint64_t)owner_matches_uuid(a2, a3, *(const unsigned __int8 **)(a1 + 32));
  if (result)
  {
    *(void *)(*(void *)(a1 + 32) + 120) = CSSymbolOwnerGetArchitecture();
    *(_WORD *)(*(void *)(a1 + 32) + 160) |= 4u;
    *(_DWORD *)(*(void *)(a1 + 32) + 80) = 0;
    CSSymbolOwnerForeachSegment();
    *(_WORD *)(*(void *)(a1 + 32) + 160) |= 0x20u;
    uint64_t BaseAddress = CSSymbolOwnerGetBaseAddress();
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(v6 + 48) = BaseAddress;
    *(_WORD *)(v6 + 160) = *(_WORD *)(v6 + 160) & 0xFFBF | ((BaseAddress != -1) << 6);
    if (CSSymbolOwnerIsAOut()) {
      __int16 v7 = 256;
    }
    else {
      __int16 v7 = 0;
    }
    *(_WORD *)(*(void *)(a1 + 32) + 160) = *(_WORD *)(*(void *)(a1 + 32) + 160) & 0xFEFF | v7;
    uint64_t result = CSSymbolOwnerIsDyld();
    if (result) {
      __int16 v8 = 512;
    }
    else {
      __int16 v8 = 0;
    }
    *(_WORD *)(*(void *)(a1 + 32) + 160) = *(_WORD *)(*(void *)(a1 + 32) + 160) & 0xFDFF | v8;
    *(_WORD *)(*(void *)(a1 + 32) + 160) |= 0x80u;
  }
  return result;
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke_3(uint64_t a1)
{
  ++*(_DWORD *)(*(void *)(a1 + 32) + 80);
  uint64_t result = CSRegionGetName();
  if (result)
  {
    uint64_t result = strcmp("__TEXT SEGMENT", (const char *)result);
    if (!result)
    {
      *(_WORD *)(*(void *)(a1 + 32) + 160) |= 8u;
      uint64_t result = CSRegionGetRange();
      *(void *)(*(void *)(a1 + 32) + 56) = v3;
    }
  }
  return result;
}

void CS::TypeRef::~TypeRef(CS::TypeRef *this)
{
  if ((CSIsNull() & 1) == 0) {
    CSRelease();
  }
}

uint64_t ___ZL16translate_offset10_CSTypeRef18ktrace_uuid_offsetPyPb_block_invoke(uint64_t a1)
{
  Name = (const char *)CSRegionGetName();
  size_t v3 = (int)strnlen((const char *)(a1 + 64), 0x10uLL);
  uint64_t result = strncmp(Name, (const char *)(a1 + 64), v3);
  if (!result)
  {
    uint64_t result = (uint64_t)&Name[v3];
    if (Name[v3] == 32)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
      if (*(unsigned char *)(v5 + 24)) {
        ktrace_postprocess_file_internal_cold_1();
      }
      if (strcmp((const char *)result, " SEGMENT")) {
        ktrace_postprocess_file_internal_cold_1();
      }
      *(unsigned char *)(v5 + 24) = 1;
      unint64_t v6 = *(void *)(a1 + 88);
      uint64_t result = CSRegionGetRange();
      if (v6 >= v7)
      {
        __int16 v8 = *(unsigned char **)(a1 + 136);
        if (v8)
        {
          if (*(unsigned char *)(a1 + 100)) {
            *__int16 v8 = 1;
          }
        }
      }
      else
      {
        uint64_t result = CSRegionGetRange();
        **(void **)(a1 + 128) = result + *(void *)(a1 + 88);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

void ___ZL18owner_is_text_exec10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CSRegionGetSegmentName(a2, a3, &v5);
  if (v5 == 0x455F545845545F5FLL && v6 == 4408664) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke(uint64_t result)
{
  return result;
}

uint64_t __Block_byref_object_copy__241(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  return result;
}

const __CFDictionary **___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_244(uint64_t a1, SymbolOwner *a2)
{
  uint64_t result = (const __CFDictionary **)find_or_create_uuid(*(symbolication_context **)(a1 + 48), a2);
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5 != 1)
  {
    if (v5 == 5 || v5 == 2) {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  ktrace_find_segment_count(*(symbolication_context **)(a1 + 48), result);
  if ((*(_WORD *)(v7 + 160) & 0x20) != 0)
  {
    uint64_t v9 = *(int *)(v7 + 80);
  }
  else
  {
    ktrace_find_text_size(*(symbolication_context **)(a1 + 48), (UUIDContext *)v7);
    __int16 v8 = *(_WORD *)(v7 + 160);
    if ((v8 & 8) != 0)
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      __int16 v8 = *(_WORD *)(v7 + 160);
    }
    if ((v8 & 0x10) == 0) {
      goto LABEL_17;
    }
    uint64_t v9 = 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v9;
LABEL_17:
  ktrace_find_image_type(*(symbolication_context **)(a1 + 48), (UUIDContext *)v7);
  uint64_t result = (const __CFDictionary **)ktrace_find_arch_with_default(*(symbolication_context **)(a1 + 48), v7, 0);
  if ((*(_WORD *)(v7 + 160) & 4) != 0)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    if ((*(_WORD *)(v7 + 160) & 0x100) != 0 || !*(void *)(v10 + 48)) {
      *(void *)(v10 + 48) = *(void *)(v7 + 120);
    }
  }
  return result;
}

void *find_or_create_uuid(symbolication_context *a1, SymbolOwner *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  UUIDContext::UUIDContext((UUIDContext *)v5, a2);
  uuid = find_or_create_uuid((uint64_t)a1, v5);
  UUIDContext::~UUIDContext((UUIDContext *)v5);
  return uuid;
}

void sub_1B39F0280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ktrace_find_segment_count(symbolication_context *a1, const __CFDictionary **a2)
{
  if (((_WORD)a2[20] & 0x20) == 0)
  {
    ktrace_find_summary(a1, (UUIDContext *)a2);
    CFDictionaryRef v4 = a2[16];
    if (v4)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v4, @"Segments");
      if (Value)
      {
        CFArrayRef v6 = Value;
        CFTypeID v7 = CFGetTypeID(Value);
        if (v7 == CFArrayGetTypeID())
        {
          *((_DWORD *)a2 + 20) = CFArrayGetCount(v6);
          *((_WORD *)a2 + 80) |= 0x20u;
          return;
        }
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
        }
      }
    }
    ktrace_analyze_executable((FILE **)a1, a2);
    if (!*((_DWORD *)a2 + 20))
    {
      __int16 v8 = *(FILE **)a1;
      if (*(void *)a1)
      {
        uint64_t v9 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v8, "could not figure segment count for %s\n", (const char *)v9);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_find_segment_count((uint64_t)a1, (unsigned __int8 *)a2);
        }
      }
    }
  }
}

void ktrace_find_text_size(symbolication_context *a1, UUIDContext *a2)
{
  if ((*((_WORD *)a2 + 80) & 8) != 0) {
    return;
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  int v8[2] = ___ZL21ktrace_find_text_sizeP21symbolication_contextP11UUIDContext_block_invoke;
  v8[3] = &__block_descriptor_40_e24_v32__0r_8__CSRange_QQ_16l;
  v8[4] = a2;
  ktrace_iterate_segments(a1, a2, (uint64_t)v8);
  if ((*((_WORD *)a2 + 80) & 8) != 0) {
    return;
  }
  ktrace_find_summary(a1, a2);
  CFDictionaryRef v4 = (const __CFDictionary *)*((void *)a2 + 16);
  if (!v4 || (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"TextSize")) == 0)
  {
LABEL_10:
    ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
    return;
  }
  CFNumberRef v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFNumberGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    }
    goto LABEL_10;
  }
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *((void *)a2 + 7) = valuePtr;
  *((_WORD *)a2 + 80) |= 8u;
}

uint64_t ktrace_find_image_type(symbolication_context *a1, UUIDContext *a2)
{
  if ((*((_WORD *)a2 + 80) & 0x80) != 0) {
    return 1;
  }
  ktrace_find_summary(a1, a2);
  CFDictionaryRef v4 = (const __CFDictionary *)*((void *)a2 + 16);
  if (v4)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"Flags");
    if (Value)
    {
      CFNumberRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFNumberGetTypeID())
      {
        uint64_t valuePtr = 0;
        if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr)) {
          ktrace_postprocess_file_internal_cold_1();
        }
        unsigned int v8 = (unsigned __int16)valuePtr;
        goto LABEL_17;
      }
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
      }
    }
    unsigned int v8 = 0;
LABEL_17:
    *((_WORD *)a2 + 80) = (16 * v8) & 0x100 | (((v8 >> 6) & 1) << 9) | *((_WORD *)a2 + 80) & 0xFCFF | 0x80;
    return 1;
  }
  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if ((*((_WORD *)a2 + 80) & 0x80) == 0)
  {
    uint64_t v9 = *(FILE **)a1;
    if (*(void *)a1)
    {
      uint64_t v10 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v9, "could not figure out image type for %s\n", (const char *)v10);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_find_image_type((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
  }
  uint64_t v11 = *((void *)a1 + 1);
  if (v11)
  {
    int v12 = *(unsigned __int8 *)(v11 + 27);
    unsigned int v13 = *((unsigned __int16 *)a2 + 80);
    if (v12)
    {
      v13 |= 0x80u;
      *((_WORD *)a2 + 80) = v13;
    }
  }
  else
  {
    unsigned int v13 = *((unsigned __int16 *)a2 + 80);
  }
  return (v13 >> 7) & 1;
}

void ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2(void *a1, long long *a2, uint64_t *a3)
{
  v67[7] = *(void (**)(void, void))MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1[4] + 8);
  uint64_t v4 = *(void *)(a1[5] + 8);
  int v5 = (symbolication_context *)a1[7];
  uint64_t v42 = *a3;
  unsigned int v6 = *((_DWORD *)a2 + 4);
  if (v6 > 5) {
    goto LABEL_10;
  }
  int v7 = 1 << v6;
  if ((v7 & 0x26) == 0)
  {
    if ((v7 & 0x18) != 0) {
      return;
    }
LABEL_10:
    ktrace_address_space_deep_iterate_symbol_owners();
  }
  unsigned int v8 = a2;
  uint64_t v9 = *(void *)(*(void *)(a1[6] + 8) + 48);
  int v10 = *(_DWORD *)(a1[8] + 32);
  uuid = (int64x2_t *)find_or_create_uuid(v5, (SymbolOwner *)a2);
  if (uuid)
  {
    int v12 = uuid;
    if ((uuid[10].i16[0] & 1) == 0)
    {
      if (*((_DWORD *)v8 + 4) == 5)
      {
        uint64_t v13 = *((void *)v5 + 1);
        if (v13 && *(unsigned char *)(v13 + 28))
        {
          *((void *)v8 + 3) = 0;
          *((void *)v8 + 4) = 0;
          *((void *)v8 + 5) = 0;
          *((_DWORD *)v8 + 4) = 2;
          strlcpy((char *)v8 + 24, (const char *)(*((void *)v5 + 1) + 28), 0x11uLL);
        }
        else
        {
          *(void *)&long long v46 = 0;
          *((void *)&v46 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &v46;
          *(void *)&long long v47 = 0x2020000000;
          BYTE8(v47) = 0;
          *(void *)uint64_t v60 = MEMORY[0x1E4F143A8];
          uint64_t v61 = 3221225472;
          uint64_t v62 = (uint64_t)___ZL23fix_tailspin_kext_ownerP11SymbolOwnerP21symbolication_contextP11UUIDContext_block_invoke;
          uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E6063118;
          char v64 = (uint64_t (*)())&v46;
          if (!ktrace_iterate_segments(v5, (UUIDContext *)uuid, (uint64_t)v60))
          {
            long long v19 = (uint64_t *)&v46;
LABEL_73:
            _Block_object_dispose(v19, 8);
            return;
          }
          if (*((_DWORD *)v8 + 4) != 2)
          {
            *((void *)v8 + 3) = 0;
            *((void *)v8 + 4) = 0;
            *((void *)v8 + 5) = 0;
            *((_DWORD *)v8 + 4) = 2;
          }
          if (*(unsigned char *)(*((void *)&v46 + 1) + 24)) {
            uint64_t v14 = "__TEXT_EXEC";
          }
          else {
            uint64_t v14 = "__TEXT";
          }
          strlcpy((char *)v8 + 24, v14, 0x11uLL);
          _Block_object_dispose(&v46, 8);
        }
      }
      uint64_t v56 = 0;
      uint64_t v57 = &v56;
      uint64_t v58 = 0x2020000000;
      uint64_t v59 = 0;
      uint64_t v52 = 0;
      int v53 = &v52;
      uint64_t v54 = 0x2020000000;
      int v55 = 0;
      int arch_with_default = ktrace_find_arch_with_default(v5, (uint64_t)v12, v9);
      if (!v42)
      {
        if (!arch_with_default) {
          goto LABEL_29;
        }
        LOBYTE(arch_with_default) = ktrace_find_image_type(v5, (UUIDContext *)v12);
      }
      if (arch_with_default)
      {
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        int64x2_t v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        if (*((_DWORD *)v8 + 4) == 1)
        {
          ktrace_find_segment_count(v5, (const __CFDictionary **)v12);
          if ((v12[10].i16[0] & 0x20) == 0)
          {
            ktrace_find_text_size(v5, (UUIDContext *)v12);
            __int16 v16 = v12[10].i16[0];
            if ((v16 & 8) != 0)
            {
              SymbolOwner::operator=((uint64_t)&v46, v8);
              if (v47 != 2)
              {
                *((void *)&v47 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
                long long v48 = 0uLL;
                LODWORD(v47) = 2;
              }
              v49.i64[1] = v12[3].i64[1] + 1;
              int v18 = "__TEXT";
            }
            else
            {
              if ((v16 & 0x10) == 0) {
                goto LABEL_35;
              }
              SymbolOwner::operator=((uint64_t)&v46, v8);
              if (v47 != 2)
              {
                *((void *)&v47 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
                long long v48 = 0uLL;
                LODWORD(v47) = 2;
              }
              int64x2_t v17 = vdupq_n_s64(1uLL);
              v17.i64[0] = v49.i64[0];
              int64x2_t v49 = vaddq_s64(v12[4], v17);
              int v18 = "__TEXT_EXEC";
            }
            unsigned int v8 = &v46;
            strlcpy((char *)&v47 + 8, v18, 0x11uLL);
          }
        }
LABEL_35:
        int v20 = *((_DWORD *)v8 + 4);
        if (v20 == 1)
        {
          __int16 v21 = v12[10].i16[0];
          if ((v21 & 0x20) == 0)
          {
            v12[10].i16[0] = v21 | 1;
LABEL_71:
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v46);
            goto LABEL_72;
          }
          v57[3] = *(void *)(v4 + 24);
          *(void *)(v4 + 24) += 40 * v12[5].i32[0];
          *(void *)uint64_t v60 = 0;
          uint64_t v61 = (uint64_t)v60;
          uint64_t v62 = 0x2020000000;
          LODWORD(v63) = 0;
          if ((ktrace_find_base_address(v5, (UUIDContext *)v12) & 1) == 0) {
            goto LABEL_48;
          }
          v44[0] = MEMORY[0x1E4F143A8];
          v44[1] = 3321888768;
          void v44[2] = ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke;
          v44[3] = &unk_1F0C3C9C0;
          int v45 = v10;
          v44[4] = &v56;
          v44[5] = v60;
          v44[8] = v5;
          v44[9] = v8;
          v44[10] = v42;
          v44[6] = &v52;
          void v44[7] = v12;
          if (!ktrace_iterate_segments(v5, (UUIDContext *)v12, (uint64_t)v44))
          {
LABEL_48:
            v12[10].i16[0] |= 1u;
            _Block_object_dispose(v60, 8);
            goto LABEL_71;
          }
          _Block_object_dispose(v60, 8);
          int v20 = *((_DWORD *)v8 + 4);
        }
        if (v20 == 2)
        {
          *(void *)uint64_t v60 = 0;
          uint64_t v61 = (uint64_t)v60;
          uint64_t v62 = 0x3812000000;
          uint64_t v63 = __Block_byref_object_copy__252;
          char v64 = __Block_byref_object_dispose__253;
          uint64_t v65 = "";
          if (!*((void *)v8 + 7))
          {
            long long v22 = (char *)v8 + 24;
            if (strcmp((const char *)v8 + 24, "__TEXT")
              || ((ktrace_find_text_size(v5, (UUIDContext *)v12), (v12[10].i16[0] & 8) != 0)
                ? (uint64_t v26 = v12[3].i64[1] + 1, *(void *)(v61 + 48) = v26)
                : (uint64_t v26 = *(void *)(v61 + 48)),
                  !v26))
            {
              v43[0] = MEMORY[0x1E4F143A8];
              v43[1] = 3221225472;
              v43[2] = ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_255;
              v43[3] = &unk_1E60630D0;
              v43[4] = v60;
              v43[5] = v8;
              ktrace_iterate_segments(v5, (UUIDContext *)v12, (uint64_t)v43);
              if (!*(void *)(v61 + 48))
              {
                long long v23 = *(FILE **)v5;
                if (*(void *)v5)
                {
                  CFDictionaryRef v24 = describe2((uint64_t)v5, (unsigned __int8 *)v12);
                  fprintf(v23, "coulnd't figure out segment length for %s of %s\n", v22, (const char *)v24);
                  ktrace_log_init();
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
                  {
                    long long v25 = describe2((uint64_t)v5, (unsigned __int8 *)v12);
                    ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2_cold_2((uint64_t)v22, (uint64_t)v25, (uint64_t)v67);
                  }
                }
                goto LABEL_48;
              }
            }
          }
          float v27 = *(void **)(v4 + 24);
          BOOL v28 = v57;
          *float v27 = *((void *)v8 + 6);
          *(void *)(v4 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v27 + 5;
          v28[3] = (uint64_t)v27;
          if (v42)
          {
            uint64_t v29 = optional_uint64::value((optional_uint64 *)&v42);
            *(void *)v57[3] += v29;
          }
          uint64_t v30 = *(void *)v57[3];
          uint64_t v31 = optional_uint64::value((optional_uint64 *)(v61 + 48));
          *(void *)(v57[3] + 8) = v31 + v30;
          uint64_t v32 = v57[3];
          char v33 = *((unsigned char *)v8 + 40);
          *(_OWORD *)(v32 + 16) = *(long long *)((char *)v8 + 24);
          *(unsigned char *)(v32 + 32) = v33;
          ++*((_DWORD *)v53 + 6);
          _Block_object_dispose(v60, 8);
        }
        uint64_t v34 = *(void *)(v3 + 24);
        *(void *)(v3 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v34 + 64;
        *(_OWORD *)(v34 + 16) = *v8;
        *(void *)(v34 + 32) = v12[7].i64[1];
        CFStringRef v35 = (const __CFString *)v12[8].i64[1];
        if (v35)
        {
          char v36 = utf8(v35);
        }
        else
        {
          uint64_t v37 = *((void *)v5 + 10);
          v67[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
          v67[1] = (void (*)(void, void))3221225472;
          v67[2] = (void (*)(void, void))___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_257;
          v67[3] = (void (*)(void, void))&__block_descriptor_56_e21_v16__0____CFString__8l;
          v67[4] = (void (*)(void, void))v34;
          v67[5] = (void (*)(void, void))v12;
          v67[6] = (void (*)(void, void))v5;
          ktrace_uuid_map_iterate_associated_paths(v37, (long long *)v12->i8, v67);
          char v36 = *(char **)(v34 + 40);
          if (v36) {
            goto LABEL_60;
          }
          char v36 = "<unknown>";
        }
        *(void *)(v34 + 40) = v36;
LABEL_60:
        *(_DWORD *)(v34 + 60) = 0;
        int v38 = (v12[10].u16[0] >> 4) & 0x10;
        *(_DWORD *)(v34 + 60) = v38;
        if ((v12[10].i16[0] & 0x200) != 0) {
          *(_DWORD *)(v34 + 60) = v38 | 0x40;
        }
        uint64_t v39 = *((void *)v5 + 10);
        if (v39 && (*(unsigned char *)(v39 + 288) || *(unsigned char *)(v39 + 289))
          || (uint64_t v40 = *((void *)v5 + 1)) != 0 && *(unsigned char *)(v40 + 46))
        {
          if (v36)
          {
            CFDictionaryRef v41 = basename_r(v36, v60);
            if (!strcmp("dyld", v41)) {
              *(_DWORD *)(v34 + 60) |= 0x40u;
            }
          }
        }
        *(void *)(v34 + 48) = v57[3];
        *(_DWORD *)(v34 + 56) = *((_DWORD *)v53 + 6);
        goto LABEL_71;
      }
LABEL_29:
      v12[10].i16[0] |= 1u;
LABEL_72:
      _Block_object_dispose(&v52, 8);
      long long v19 = &v56;
      goto LABEL_73;
    }
  }
}

void sub_1B39F0E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void UUIDContext::UUIDContext(UUIDContext *this, SymbolOwner *a2)
{
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
  long long v8 = *(_OWORD *)a2;
  uuid_copy((unsigned __int8 *)this, (const unsigned __int8 *)&v8);
  uint64_t v4 = (const void *)*((void *)a2 + 10);
  *((void *)this + 17) = v4;
  *((void *)this + 18) = *((void *)a2 + 8);
  *((void *)this + 19) = *((void *)a2 + 9);
  if (v4) {
    CFRetain(v4);
  }
  if (*((_DWORD *)a2 + 4) == 1)
  {
    if (*((void *)a2 + 3))
    {
      *((void *)this + 7) = optional_uint64::value((SymbolOwner *)((char *)a2 + 24));
      *((_WORD *)this + 80) |= 8u;
    }
    int v5 = (SymbolOwner *)((char *)a2 + 32);
    if (*((void *)a2 + 4))
    {
      uint64_t v7 = *((void *)a2 + 5);
      unsigned int v6 = (SymbolOwner *)((char *)a2 + 40);
      if (v7)
      {
        *((void *)this + 9) = optional_uint64::value(v6);
        *((void *)this + 8) = optional_uint64::value(v5);
        *((_WORD *)this + 80) |= 0x10u;
      }
    }
  }
}

BOOL ktrace_iterate_segments(symbolication_context *a1, UUIDContext *a2, uint64_t a3)
{
  valuePtr[2] = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  char v36 = &v35;
  uint64_t v37 = 0x2020000000;
  char v38 = 0;
  ktrace_find_summary(a1, a2);
  CFDictionaryRef v5 = (const __CFDictionary *)*((void *)a2 + 16);
  if (!v5 || (Value = (const __CFArray *)CFDictionaryGetValue(v5, @"Segments"), (CFArrayRef v7 = Value) == 0))
  {
LABEL_36:
    *((unsigned char *)v36 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    BOOL executable = ktrace_find_executable(a1, a2);
    BOOL v28 = v36;
    *((unsigned char *)v36 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = executable;
    if (executable)
    {
      *((unsigned char *)v28 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      CSSymbolicatorForeachSymbolicatorWithURL();
      BOOL v26 = *((unsigned char *)v36 + 24) != 0;
    }
    else
    {
      BOOL v26 = 0;
    }
    goto LABEL_43;
  }
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFArrayGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
    }
    goto LABEL_36;
  }
  CFIndex Count = CFArrayGetCount(v7);
  if (Count < 1)
  {
LABEL_33:
    BOOL v26 = 1;
  }
  else
  {
    CFIndex v10 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v10);
      CFDictionaryRef v12 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v13 = CFGetTypeID(ValueAtIndex);
        if (v13 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v40, v41);
          }
          CFDictionaryRef v12 = 0;
        }
      }
      CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(v12, @"Name");
      CFStringRef v15 = v14;
      if (v14)
      {
        CFTypeID v16 = CFGetTypeID(v14);
        if (v16 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v42, v43);
          }
          CFStringRef v15 = 0;
        }
      }
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v12, @"Address");
      CFNumberRef v18 = v17;
      if (v17)
      {
        CFTypeID v19 = CFGetTypeID(v17);
        if (v19 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v44, v45);
          }
          CFNumberRef v18 = 0;
        }
      }
      CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v12, @"Size");
      CFNumberRef v21 = v20;
      if (v20)
      {
        CFTypeID v22 = CFGetTypeID(v20);
        if (v22 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v46, v47);
          }
          CFNumberRef v21 = 0;
        }
      }
      if (!v12 || !v15 || !v18 || !v21) {
        break;
      }
      valuePtr[0] = 0;
      uint64_t v39 = 0;
      if (!CFNumberGetValue(v18, kCFNumberLongLongType, valuePtr))
      {
        _os_assert_log();
        uint64_t v32 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v32);
      }
      if (!CFNumberGetValue(v21, kCFNumberLongLongType, &v39))
      {
        _os_assert_log();
        uint64_t v33 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v33);
      }
      uint64_t v23 = valuePtr[0];
      uint64_t v24 = v39;
      long long v25 = utf8(v15);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 16))(a3, v25, v23, v24);
      if (Count == ++v10) {
        goto LABEL_33;
      }
    }
    uint64_t v29 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      uint64_t v30 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      ktrace_iterate_segments((uint64_t)v30, (uint64_t)valuePtr, v29);
    }
    BOOL v26 = 0;
  }
  *((unsigned char *)v36 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v26;
LABEL_43:
  _Block_object_dispose(&v35, 8);
  return v26;
}

void sub_1B39F13EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL21ktrace_find_text_sizeP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = strcmp("__TEXT", a2);
  if (!result)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(v7 + 56) = a4;
    *(_WORD *)(v7 + 160) |= 8u;
  }
  return result;
}

uint64_t ___ZL23ktrace_iterate_segmentsP21symbolication_contextP11UUIDContextU13block_pointerFvPKc8_CSRangeE_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

const unsigned __int8 *___ZL23ktrace_iterate_segmentsP21symbolication_contextP11UUIDContextU13block_pointerFvPKc8_CSRangeE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = owner_matches_uuid(a2, a3, *(const unsigned __int8 **)(a1 + 48));
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    return (const unsigned __int8 *)CSSymbolOwnerForeachSegment();
  }
  return result;
}

uint64_t ___ZL23ktrace_iterate_segmentsP21symbolication_contextP11UUIDContextU13block_pointerFvPKc8_CSRangeE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CSRegionGetSegmentName(a2, a3, v8);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t Range = CSRegionGetRange();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(v4 + 16))(v4, v8, Range, v6);
}

uint64_t ktrace_find_base_address(symbolication_context *a1, UUIDContext *a2)
{
  if ((*((_WORD *)a2 + 80) & 0x40) != 0) {
    return 1;
  }
  ktrace_find_summary(a1, a2);
  if (*((void *)a2 + 16))
  {
    *((void *)a2 + 6) = -1;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    long long v7[2] = ___ZL24ktrace_find_base_addressP21symbolication_contextP11UUIDContext_block_invoke;
    v7[3] = &__block_descriptor_40_e24_v32__0r_8__CSRange_QQ_16l;
    int v7[4] = a2;
    if (ktrace_iterate_segments(a1, a2, (uint64_t)v7) && *((void *)a2 + 6) != -1)
    {
      *((_WORD *)a2 + 80) |= 0x40u;
      return 1;
    }
  }
  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if ((*((_WORD *)a2 + 80) & 0x40) == 0)
  {
    CFDictionaryRef v5 = *(FILE **)a1;
    if (*(void *)a1)
    {
      uint64_t v6 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v5, "could not figure out base address for %s\n", (const char *)v6);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_find_base_address((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
  }
  return (*((unsigned __int16 *)a2 + 80) >> 6) & 1;
}

void ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke(uint64_t a1, char *__source, unint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 88) || strcmp(__source, "__LINKEDIT"))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    unint64_t v9 = *(void *)(v8 + 48);
    BOOL v10 = a3 >= v9;
    unint64_t v11 = a3 - v9;
    if (v10)
    {
      uint64_t v17 = *(void *)(a1 + 80);
      uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
      int v20 = *(_DWORD *)(v19 + 24);
      CFNumberRef v21 = (uint64_t *)(v18 + 40 * v20);
      *(_DWORD *)(v19 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20 + 1;
      uint64_t v22 = v11 + *(void *)(*(void *)(a1 + 72) + 48);
      *CFNumberRef v21 = v22;
      if (v17)
      {
        uint64_t v22 = *v21 + optional_uint64::value((optional_uint64 *)(a1 + 80));
        *CFNumberRef v21 = v22;
      }
      uint64_t v23 = v18 + 40 * v20;
      *(void *)(v23 + 8) = v22 + a4;
      strlcpy((char *)(v23 + 16), __source, 0x11uLL);
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    }
    else if (strcmp(__source, "__PAGEZERO"))
    {
      CFDictionaryRef v12 = *(FILE ***)(a1 + 64);
      CFTypeID v13 = *v12;
      if (*v12)
      {
        CFStringRef v14 = describe2((uint64_t)v12, (unsigned __int8 *)v8);
        fprintf(v13, "WARNING: ignoring segment %s below base address for %s\n", __source, (const char *)v14);
        ktrace_log_init();
        CFStringRef v15 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        {
          CFTypeID v16 = describe2(*(void *)(a1 + 64), *(unsigned __int8 **)(a1 + 56));
          *(_DWORD *)long long buf = 136315394;
          long long v25 = __source;
          __int16 v26 = 2080;
          float v27 = v16;
          _os_log_debug_impl(&dword_1B39A5000, v15, OS_LOG_TYPE_DEBUG, "WARNING: ignoring segment %s below base address for %s\n", buf, 0x16u);
        }
      }
    }
  }
}

uint64_t __copy_helper_block_e8_80c21_ZTS15optional_uint64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = *(void *)(a2 + 80);
  return result;
}

uint64_t __Block_byref_object_copy__252(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  return result;
}

uint64_t ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_255(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t result = strncmp(__s1, (const char *)(*(void *)(a1 + 40) + 24), 0x10uLL);
  if (!result) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = a4 + 1;
  }
  return result;
}

void ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_257(uint64_t a1, const __CFString *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 32) + 40))
  {
    memset(out, 0, 37);
    uuid_unparse(*(const unsigned __int8 **)(a1 + 40), out);
    uint64_t v4 = **(FILE ***)(a1 + 48);
    if (v4)
    {
      CFDictionaryRef v5 = *(const char **)(*(void *)(a1 + 32) + 40);
      uint64_t v6 = utf8(a2);
      fprintf(v4, "WARNING: %s associated with multiple locations: %s AND %s\n", out, v5, v6);
      ktrace_log_init();
      uint64_t v7 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 40);
        *(_DWORD *)long long buf = 136315650;
        BOOL v10 = out;
        __int16 v11 = 2080;
        uint64_t v12 = v8;
        __int16 v13 = 2080;
        CFStringRef v14 = utf8(a2);
        _os_log_debug_impl(&dword_1B39A5000, v7, OS_LOG_TYPE_DEBUG, "WARNING: %s associated with multiple locations: %s AND %s\n", buf, 0x20u);
      }
    }
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 40) = utf8(a2);
  }
}

uint64_t ___ZL23fix_tailspin_kext_ownerP11SymbolOwnerP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, char *__s1)
{
  uint64_t result = strcmp(__s1, "__TEXT_EXEC");
  if (!result) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t ___ZL24ktrace_find_base_addressP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, char *__s1, unint64_t a3)
{
  uint64_t result = strcmp(__s1, "__PAGEZERO");
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (a3 < *(void *)(v6 + 48)) {
      *(void *)(v6 + 48) = a3;
    }
  }
  return result;
}

void PrepassOp::~PrepassOp(PrepassOp *this)
{
  CFStringRef v1 = (const void *)*((void *)this + 1);
  if (v1) {
    _Block_release(v1);
  }
}

BOOL flatbuffers::Verifier::VerifyBufferFromStart<FlatbufferSymbols::SymbolsBuffer>(flatbuffers::Verifier *this, const char *a2, unint64_t a3)
{
  if (a2 && (*((void *)this + 1) < 8uLL || strncmp((const char *)(*(void *)this + a3 + 4), a2, 4uLL))) {
    return 0;
  }
  unsigned int v5 = flatbuffers::Verifier::VerifyOffset(this, a3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (FlatbufferSymbols::SymbolsBuffer *)(*(void *)this + a3 + v5);

  return FlatbufferSymbols::SymbolsBuffer::Verify(v6, this);
}

uint64_t flatbuffers::Verifier::VerifyOffset(flatbuffers::Verifier *this, unint64_t a2)
{
  if ((a2 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v2 = *((void *)this + 1);
  if (v2 < 5 || v2 - 4 < a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)this + a2);
  if ((int)v4 < 1) {
    return 0;
  }
  if (v2 - 1 >= v4 + a2) {
    return v4;
  }
  return 0;
}

BOOL FlatbufferSymbols::SymbolsBuffer::Verify(FlatbufferSymbols::SymbolsBuffer *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      uint64_t v5 = *(int *)this;
      uint64_t v6 = -v5;
      uint64_t v7 = (unsigned __int16 *)((char *)this - v5);
      if (*v7 >= 5u)
      {
        uint64_t v8 = v7[2];
        if (v8)
        {
          BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v8 + *(unsigned int *)((char *)this + v8), 4uLL, 0);
          if (!result) {
            return result;
          }
          uint64_t v6 = -(uint64_t)*(int *)this;
        }
      }
      unint64_t v9 = (unsigned __int16 *)((char *)this + v6);
      if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0) {
        __int16 v11 = (_DWORD *)((char *)this + v10 + *(unsigned int *)((char *)this + v10));
      }
      else {
        __int16 v11 = 0;
      }
      BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbolicator>(a2, v11);
      if (result)
      {
        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          uint64_t v12 = *(int *)this;
          uint64_t v13 = -v12;
          CFStringRef v14 = (unsigned __int16 *)((char *)this - v12);
          if (*v14 >= 7u)
          {
            uint64_t v15 = v14[3];
            if (v15)
            {
              BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v15 + *(unsigned int *)((char *)this + v15), 4uLL, 0);
              if (!result) {
                return result;
              }
              uint64_t v13 = -(uint64_t)*(int *)this;
            }
          }
          uint64_t v16 = (unsigned __int16 *)((char *)this + v13);
          if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
            uint64_t v18 = (_DWORD *)((char *)this + v17 + *(unsigned int *)((char *)this + v17));
          }
          else {
            uint64_t v18 = 0;
          }
          BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::StringEntry>(a2, v18);
          if (result)
          {
            --*((_DWORD *)a2 + 4);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Table::VerifyOffset(flatbuffers::Table *this, const flatbuffers::Verifier *a2, unsigned int a3)
{
  uint64_t v3 = (unsigned __int16 *)((char *)this - *(int *)this);
  return *v3 <= a3
      || (uint64_t v4 = *(unsigned __int16 *)((char *)v3 + a3)) == 0
      || flatbuffers::Verifier::VerifyOffset(a2, (unint64_t)this + v4 - *(void *)a2) != 0;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbolicator>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::Symbolicator::Verify((FlatbufferSymbols::Symbolicator *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::StringEntry>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::StringEntry::Verify((FlatbufferSymbols::StringEntry *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyTableStart(flatbuffers::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = (unint64_t)&a2[-*(void *)this];
  if ((v3 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v4 = *((void *)this + 1);
  BOOL v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(int *)a2;
  unsigned int v7 = *((_DWORD *)this + 5);
  unsigned int v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  unsigned int v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7)) {
    return 0;
  }
  unint64_t v10 = v3 - v6;
  if (v10)
  {
    uint64_t v11 = 0;
    if (*((unsigned char *)this + 40) || v4 - 2 < v10) {
      return v11;
    }
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  unint64_t v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  BOOL v5 = v4 >= v12;
  unint64_t v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

BOOL flatbuffers::Verifier::VerifyVectorOrString(flatbuffers::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = (unint64_t)&a2[-*(void *)this];
  if ((v4 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 < 5 || v5 - 4 < v4) {
    return 0;
  }
  unint64_t v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7) {
    return 0;
  }
  unint64_t v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    unint64_t v5 = *((void *)this + 1);
  }
  BOOL v9 = v5 > v8;
  unint64_t v10 = v5 - v8;
  return v9 && v10 >= v4;
}

BOOL FlatbufferSymbols::Symbolicator::Verify(FlatbufferSymbols::Symbolicator *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (!result) {
    return result;
  }
  unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v5 >= 5u)
  {
    uint64_t v6 = v5[2];
    if (v6)
    {
      BOOL result = 0;
      unint64_t v7 = *((void *)a2 + 1);
      if (v7 < 2 || v7 - 1 < (unint64_t)this + v6 - *(void *)a2) {
        return result;
      }
    }
  }
  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
  if (!result) {
    return result;
  }
  unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v9 = *v8;
  if (v9 >= 7)
  {
    if (v8[3])
    {
      unint64_t v10 = (FlatbufferSymbols::Symbolicator *)((char *)this + v8[3] + *(unsigned int *)((char *)this + v8[3]));
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v10 = 0;
LABEL_12:
    uint64_t v11 = v8[2];
    if (v11)
    {
      int v12 = *((unsigned __int8 *)this + v11);
      if (v12 == 3)
      {
        if (v10)
        {
          BOOL result = FlatbufferSymbols::DyldSharedCacheMetadata::Verify(v10, a2);
          if (!result) {
            return result;
          }
        }
      }
      else if (v12 == 2)
      {
        if (v10 && !FlatbufferSymbols::MachoMetadata::Verify(v10, a2)) {
          return 0;
        }
      }
      else
      {
        BOOL v13 = v12 != 1 || v10 == 0;
        if (!v13 && !FlatbufferSymbols::ProcessMetadata::Verify(v10, a2)) {
          return 0;
        }
      }
    }
    goto LABEL_26;
  }
  if (v9 >= 5) {
    goto LABEL_11;
  }
LABEL_26:
  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
  if (!result) {
    return result;
  }
  uint64_t v14 = *(int *)this;
  uint64_t v15 = -v14;
  uint64_t v16 = (unsigned __int16 *)((char *)this - v14);
  if (*v16 >= 9u)
  {
    uint64_t v17 = v16[4];
    if (v17)
    {
      BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v17 + *(unsigned int *)((char *)this + v17), 4uLL, 0);
      if (!result) {
        return result;
      }
      uint64_t v15 = -(uint64_t)*(int *)this;
    }
  }
  uint64_t v18 = (unsigned __int16 *)((char *)this + v15);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
    int v20 = (_DWORD *)((char *)this + v19 + *(unsigned int *)((char *)this + v19));
  }
  else {
    int v20 = 0;
  }
  BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolOwner>(a2, v20);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
    if (result)
    {
      uint64_t v21 = *(int *)this;
      uint64_t v22 = -v21;
      uint64_t v23 = (unsigned __int16 *)((char *)this - v21);
      if (*v23 >= 0xBu)
      {
        uint64_t v24 = v23[5];
        if (v24)
        {
          BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v24 + *(unsigned int *)((char *)this + v24), 4uLL, 0);
          if (!result) {
            return result;
          }
          uint64_t v22 = -(uint64_t)*(int *)this;
        }
      }
      long long v25 = (unsigned __int16 *)((char *)this + v22);
      if (*v25 >= 0xBu && (uint64_t v26 = v25[5]) != 0) {
        float v27 = (_DWORD *)((char *)this + v26 + *(unsigned int *)((char *)this + v26));
      }
      else {
        float v27 = 0;
      }
      BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SharedCache>(a2, v27);
      if (result)
      {
        --*((_DWORD *)a2 + 4);
        return 1;
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolOwner>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::SymbolOwner::Verify((FlatbufferSymbols::SymbolOwner *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SharedCache>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::SharedCache::Verify((FlatbufferSymbols::SharedCache *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::ProcessMetadata::Verify(FlatbufferSymbols::ProcessMetadata *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        unsigned int v9 = *v8;
        if (v9 < 7
          || (!v8[3]
           || (BOOL result = 0, v10 = *((void *)a2 + 1), v10 >= 9)
           && v10 - 8 >= (unint64_t)this + v8[3] - *(void *)a2)
          && (v9 < 9
           || (uint64_t v11 = v8[4]) == 0
           || (BOOL result = 0, v12 = *((void *)a2 + 1), v12 >= 9)
           && v12 - 8 >= (unint64_t)this + v11 - *(void *)a2))
        {
          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            BOOL v13 = (unsigned __int16 *)((char *)this - *(int *)this);
            if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0) {
              uint64_t v15 = (const unsigned __int8 *)this + v14 + *(unsigned int *)((char *)this + v14);
            }
            else {
              uint64_t v15 = 0;
            }
            BOOL result = flatbuffers::Verifier::VerifyString(a2, v15);
            if (result)
            {
              --*((_DWORD *)a2 + 4);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyString(flatbuffers::Verifier *a1, const unsigned __int8 *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v6 = 0;
  BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a1, a2, 1uLL, &v6);
  if (result)
  {
    unint64_t v4 = *((void *)a1 + 1);
    return v4 >= 2 && v4 - 1 >= v6 && *(unsigned char *)(*(void *)a1 + v6) == 0;
  }
  return result;
}

BOOL FlatbufferSymbols::MachoMetadata::Verify(FlatbufferSymbols::MachoMetadata *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
          if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
            unint64_t v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
          }
          else {
            unint64_t v10 = 0;
          }
          BOOL result = flatbuffers::Verifier::VerifyString(a2, v10);
          if (result)
          {
            uint64_t v11 = (unsigned __int16 *)((char *)this - *(int *)this);
            unsigned int v12 = *v11;
            if (v12 < 9
              || (!v11[4]
               || (BOOL result = 0, v13 = *((void *)a2 + 1), v13 >= 9)
               && v13 - 8 >= (unint64_t)this + v11[4] - *(void *)a2)
              && (v12 < 0xB
               || (uint64_t v14 = v11[5]) == 0
               || (BOOL result = 0, v15 = *((void *)a2 + 1), v15 >= 9)
               && v15 - 8 >= (unint64_t)this + v14 - *(void *)a2))
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                uint64_t v16 = (unsigned __int16 *)((char *)this - *(int *)this);
                if (*v16 < 0xDu
                  || (uint64_t v17 = v16[6]) == 0
                  || (BOOL result = FlatbufferSymbols::CPUArchitecture::Verify((FlatbufferSymbols::MachoMetadata *)((char *)this+ v17+ *(unsigned int *)((char *)this + v17)), a2)))
                {
                  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    uint64_t v18 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v18 >= 0xFu && (uint64_t v19 = v18[7]) != 0) {
                      int v20 = (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19);
                    }
                    else {
                      int v20 = 0;
                    }
                    BOOL result = flatbuffers::Verifier::VerifyString(a2, v20);
                    if (result)
                    {
                      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                      if (result)
                      {
                        uint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                        if (*v21 >= 0x11u && (uint64_t v22 = v21[8]) != 0) {
                          uint64_t v23 = (const unsigned __int8 *)this + v22 + *(unsigned int *)((char *)this + v22);
                        }
                        else {
                          uint64_t v23 = 0;
                        }
                        BOOL result = flatbuffers::Verifier::VerifyString(a2, v23);
                        if (result)
                        {
                          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x12u);
                          if (result)
                          {
                            uint64_t v24 = (unsigned __int16 *)((char *)this - *(int *)this);
                            if (*v24 >= 0x13u && (uint64_t v25 = v24[9]) != 0) {
                              uint64_t v26 = (const unsigned __int8 *)this + v25 + *(unsigned int *)((char *)this + v25);
                            }
                            else {
                              uint64_t v26 = 0;
                            }
                            BOOL result = flatbuffers::Verifier::VerifyString(a2, v26);
                            if (result)
                            {
                              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x14u);
                              if (result)
                              {
                                float v27 = (unsigned __int16 *)((char *)this - *(int *)this);
                                if (*v27 >= 0x15u && (uint64_t v28 = v27[10]) != 0) {
                                  uint64_t v29 = (const unsigned __int8 *)this + v28 + *(unsigned int *)((char *)this + v28);
                                }
                                else {
                                  uint64_t v29 = 0;
                                }
                                BOOL result = flatbuffers::Verifier::VerifyString(a2, v29);
                                if (result)
                                {
                                  --*((_DWORD *)a2 + 4);
                                  return 1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL FlatbufferSymbols::CPUArchitecture::Verify(FlatbufferSymbols::CPUArchitecture *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    unsigned int v6 = *v5;
    if (v6 < 5
      || (!v5[2]
       || (BOOL result = 0, v7 = *((void *)a2 + 1), v7 >= 5) && v7 - 4 >= (unint64_t)this + v5[2] - *(void *)a2)
      && (v6 < 7
       || (!v5[3]
        || (BOOL result = 0, v8 = *((void *)a2 + 1), v8 >= 5) && v8 - 4 >= (unint64_t)this + v5[3] - *(void *)a2)
       && (v6 < 9
        || (uint64_t v9 = v5[4]) == 0
        || (BOOL result = 0, v10 = *((void *)a2 + 1), v10 >= 5) && v10 - 4 >= (unint64_t)this + v9 - *(void *)a2)))
    {
      --*((_DWORD *)a2 + 4);
      return 1;
    }
  }
  return result;
}

BOOL FlatbufferSymbols::DyldSharedCacheMetadata::Verify(FlatbufferSymbols::DyldSharedCacheMetadata *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
          if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
            unint64_t v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
          }
          else {
            unint64_t v10 = 0;
          }
          BOOL result = flatbuffers::Verifier::VerifyString(a2, v10);
          if (result)
          {
            uint64_t v11 = (unsigned __int16 *)((char *)this - *(int *)this);
            unsigned int v12 = *v11;
            if (v12 < 9
              || (!v11[4]
               || (BOOL result = 0, v13 = *((void *)a2 + 1), v13 >= 9)
               && v13 - 8 >= (unint64_t)this + v11[4] - *(void *)a2)
              && (v12 < 0xB
               || (uint64_t v14 = v11[5]) == 0
               || (BOOL result = 0, v15 = *((void *)a2 + 1), v15 >= 9)
               && v15 - 8 >= (unint64_t)this + v14 - *(void *)a2))
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                uint64_t v16 = (unsigned __int16 *)((char *)this - *(int *)this);
                if (*v16 < 0xDu
                  || (uint64_t v17 = v16[6]) == 0
                  || (BOOL result = FlatbufferSymbols::CPUArchitecture::Verify((FlatbufferSymbols::DyldSharedCacheMetadata *)((char *)this+ v17+ *(unsigned int *)((char *)this + v17)), a2)))
                {
                  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    uint64_t v18 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v18 >= 0xFu && (uint64_t v19 = v18[7]) != 0) {
                      int v20 = (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19);
                    }
                    else {
                      int v20 = 0;
                    }
                    BOOL result = flatbuffers::Verifier::VerifyString(a2, v20);
                    if (result)
                    {
                      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                      if (result)
                      {
                        uint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                        if (*v21 >= 0x11u && (uint64_t v22 = v21[8]) != 0) {
                          uint64_t v23 = (const unsigned __int8 *)this + v22 + *(unsigned int *)((char *)this + v22);
                        }
                        else {
                          uint64_t v23 = 0;
                        }
                        BOOL result = flatbuffers::Verifier::VerifyString(a2, v23);
                        if (result)
                        {
                          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x12u);
                          if (result)
                          {
                            uint64_t v24 = (unsigned __int16 *)((char *)this - *(int *)this);
                            if (*v24 >= 0x13u && (uint64_t v25 = v24[9]) != 0) {
                              uint64_t v26 = (const unsigned __int8 *)this + v25 + *(unsigned int *)((char *)this + v25);
                            }
                            else {
                              uint64_t v26 = 0;
                            }
                            BOOL result = flatbuffers::Verifier::VerifyString(a2, v26);
                            if (result)
                            {
                              float v27 = (unsigned __int16 *)((char *)this - *(int *)this);
                              if (*v27 < 0x15u
                                || (uint64_t v28 = v27[10]) == 0
                                || (BOOL result = 0, v29 = *((void *)a2 + 1), v29 >= 9)
                                && v29 - 8 >= (unint64_t)this + v28 - *(void *)a2)
                              {
                                --*((_DWORD *)a2 + 4);
                                return 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL FlatbufferSymbols::SymbolOwner::Verify(FlatbufferSymbols::SymbolOwner *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (!result) {
    return result;
  }
  unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v5 >= 5u)
  {
    uint64_t v6 = v5[2];
    if (v6)
    {
      BOOL result = 0;
      unint64_t v7 = *((void *)a2 + 1);
      if (v7 < 2 || v7 - 1 < (unint64_t)this + v6 - *(void *)a2) {
        return result;
      }
    }
  }
  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
  if (!result) {
    return result;
  }
  unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v9 = *v8;
  if (v9 >= 7)
  {
    if (v8[3])
    {
      unint64_t v10 = (FlatbufferSymbols::SymbolOwner *)((char *)this + v8[3] + *(unsigned int *)((char *)this + v8[3]));
LABEL_12:
      uint64_t v11 = v8[2];
      if (v11)
      {
        if (v10)
        {
          if (*((unsigned char *)this + v11) == 1)
          {
            BOOL result = FlatbufferSymbols::MachoMetadata::Verify(v10, a2);
            if (!result) {
              return result;
            }
          }
        }
      }
      goto LABEL_16;
    }
LABEL_11:
    unint64_t v10 = 0;
    goto LABEL_12;
  }
  if (v9 >= 5) {
    goto LABEL_11;
  }
LABEL_16:
  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
  if (!result) {
    return result;
  }
  uint64_t v12 = *(int *)this;
  uint64_t v13 = -v12;
  uint64_t v14 = (unsigned __int16 *)((char *)this - v12);
  if (*v14 >= 9u)
  {
    uint64_t v15 = v14[4];
    if (v15)
    {
      BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v15 + *(unsigned int *)((char *)this + v15), 4uLL, 0);
      if (!result) {
        return result;
      }
      uint64_t v13 = -(uint64_t)*(int *)this;
    }
  }
  uint64_t v16 = (unsigned __int16 *)((char *)this + v13);
  if (*v16 >= 9u && (uint64_t v17 = v16[4]) != 0) {
    uint64_t v18 = (_DWORD *)((char *)this + v17 + *(unsigned int *)((char *)this + v17));
  }
  else {
    uint64_t v18 = 0;
  }
  BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Segment>(a2, v18);
  if (result)
  {
    uint64_t v19 = (unsigned __int16 *)((char *)this - *(int *)this);
    unsigned int v20 = *v19;
    if (v20 < 0xB
      || (!v19[5]
       || (BOOL result = 0, v21 = *((void *)a2 + 1), v21 >= 9)
       && v21 - 8 >= (unint64_t)this + v19[5] - *(void *)a2)
      && (v20 < 0xD
       || (!v19[6]
        || (BOOL result = 0, v22 = *((void *)a2 + 1), v22 >= 2)
        && v22 - 1 >= (unint64_t)this + v19[6] - *(void *)a2)
       && (v20 < 0xF
        || (uint64_t v23 = v19[7]) == 0
        || (BOOL result = 0, v24 = *((void *)a2 + 1), v24 >= 2)
        && v24 - 1 >= (unint64_t)this + v23 - *(void *)a2)))
    {
      --*((_DWORD *)a2 + 4);
      return 1;
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Segment>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::Segment::Verify((FlatbufferSymbols::Segment *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::Segment::Verify(FlatbufferSymbols::Segment *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        unsigned int v9 = *v8;
        if (v9 < 7
          || (!v8[3]
           || (BOOL result = 0, v10 = *((void *)a2 + 1), v10 >= 9)
           && v10 - 8 >= (unint64_t)this + v8[3] - *(void *)a2)
          && (v9 < 9
           || (uint64_t v11 = v8[4]) == 0
           || (BOOL result = 0, v12 = *((void *)a2 + 1), v12 >= 9)
           && v12 - 8 >= (unint64_t)this + v11 - *(void *)a2))
        {
          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            uint64_t v13 = *(int *)this;
            uint64_t v14 = -v13;
            uint64_t v15 = (unsigned __int16 *)((char *)this - v13);
            if (*v15 >= 0xBu)
            {
              uint64_t v16 = v15[5];
              if (v16)
              {
                BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v16 + *(unsigned int *)((char *)this + v16), 4uLL, 0);
                if (!result) {
                  return result;
                }
                uint64_t v14 = -(uint64_t)*(int *)this;
              }
            }
            uint64_t v17 = (unsigned __int16 *)((char *)this + v14);
            if (*v17 >= 0xBu && (uint64_t v18 = v17[5]) != 0) {
              uint64_t v19 = (_DWORD *)((char *)this + v18 + *(unsigned int *)((char *)this + v18));
            }
            else {
              uint64_t v19 = 0;
            }
            BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbol>(a2, v19);
            if (result)
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                uint64_t v20 = *(int *)this;
                uint64_t v21 = -v20;
                unint64_t v22 = (unsigned __int16 *)((char *)this - v20);
                if (*v22 >= 0xDu)
                {
                  uint64_t v23 = v22[6];
                  if (v23)
                  {
                    BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v23 + *(unsigned int *)((char *)this + v23), 1uLL, 0);
                    if (!result) {
                      return result;
                    }
                    uint64_t v21 = -(uint64_t)*(int *)this;
                  }
                }
                unint64_t v24 = (unsigned __int16 *)((char *)this + v21);
                unsigned int v25 = *v24;
                if (v25 < 0xF) {
                  goto LABEL_47;
                }
                if (!v24[7]
                  || (BOOL result = 0, v26 = *((void *)a2 + 1), v26 >= 9)
                  && v26 - 8 >= (unint64_t)this + v24[7] - *(void *)a2)
                {
                  if (v25 < 0x11
                    || (!v24[8]
                     || (BOOL result = 0, v27 = *((void *)a2 + 1), v27 >= 2)
                     && v27 - 1 >= (unint64_t)this + v24[8] - *(void *)a2)
                    && (v25 < 0x13
                     || (!v24[9]
                      || (BOOL result = 0, v28 = *((void *)a2 + 1), v28 >= 2)
                      && v28 - 1 >= (unint64_t)this + v24[9] - *(void *)a2)
                     && (v25 < 0x15
                      || (uint64_t v29 = v24[10]) == 0
                      || (BOOL result = 0, v30 = *((void *)a2 + 1), v30 >= 2)
                      && v30 - 1 >= (unint64_t)this + v29 - *(void *)a2)))
                  {
LABEL_47:
                    --*((_DWORD *)a2 + 4);
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbol>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::Symbol::Verify((FlatbufferSymbols::Symbol *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::Symbol::Verify(FlatbufferSymbols::Symbol *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    unsigned int v6 = *v5;
    if (v6 < 5
      || (!v5[2]
       || (BOOL result = 0, v7 = *((void *)a2 + 1), v7 >= 9) && v7 - 8 >= (unint64_t)this + v5[2] - *(void *)a2)
      && (v6 < 7
       || (uint64_t v8 = v5[3]) == 0
       || (BOOL result = 0, v9 = *((void *)a2 + 1), v9 >= 9) && v9 - 8 >= (unint64_t)this + v8 - *(void *)a2))
    {
      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
      if (result)
      {
        unint64_t v10 = (unsigned __int16 *)((char *)this - *(int *)this);
        if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0) {
          unint64_t v12 = (const unsigned __int8 *)this + v11 + *(unsigned int *)((char *)this + v11);
        }
        else {
          unint64_t v12 = 0;
        }
        BOOL result = flatbuffers::Verifier::VerifyString(a2, v12);
        if (result)
        {
          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            uint64_t v13 = (unsigned __int16 *)((char *)this - *(int *)this);
            if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0) {
              uint64_t v15 = (const unsigned __int8 *)this + v14 + *(unsigned int *)((char *)this + v14);
            }
            else {
              uint64_t v15 = 0;
            }
            BOOL result = flatbuffers::Verifier::VerifyString(a2, v15);
            if (result)
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                uint64_t v16 = *(int *)this;
                uint64_t v17 = -v16;
                uint64_t v18 = (unsigned __int16 *)((char *)this - v16);
                if (*v18 >= 0xDu)
                {
                  uint64_t v19 = v18[6];
                  if (v19)
                  {
                    BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19), 4uLL, 0);
                    if (!result) {
                      return result;
                    }
                    uint64_t v17 = -(uint64_t)*(int *)this;
                  }
                }
                uint64_t v20 = (unsigned __int16 *)((char *)this + v17);
                if (*v20 >= 0xDu && (uint64_t v21 = v20[6]) != 0) {
                  unint64_t v22 = (_DWORD *)((char *)this + v21 + *(unsigned int *)((char *)this + v21));
                }
                else {
                  unint64_t v22 = 0;
                }
                BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SourceInfo>(a2, v22);
                if (result)
                {
                  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    uint64_t v23 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v23 < 0xFu
                      || (uint64_t v24 = v23[7]) == 0
                      || (BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v24 + *(unsigned int *)((char *)this + v24), 1uLL, 0)))
                    {
                      --*((_DWORD *)a2 + 4);
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SourceInfo>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::SourceInfo::Verify((FlatbufferSymbols::SourceInfo *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::SourceInfo::Verify(FlatbufferSymbols::SourceInfo *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        uint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        unsigned int v9 = *v8;
        if (v9 < 7) {
          goto LABEL_28;
        }
        if (!v8[3]
          || (BOOL result = 0, v10 = *((void *)a2 + 1), v10 >= 5)
          && v10 - 4 >= (unint64_t)this + v8[3] - *(void *)a2)
        {
          if (v9 < 9) {
            goto LABEL_28;
          }
          if (!v8[4]
            || (BOOL result = 0, v11 = *((void *)a2 + 1), v11 >= 5)
            && v11 - 4 >= (unint64_t)this + v8[4] - *(void *)a2)
          {
            if (v9 < 0xB
              || (!v8[5]
               || (BOOL result = 0, v12 = *((void *)a2 + 1), v12 >= 5)
               && v12 - 4 >= (unint64_t)this + v8[5] - *(void *)a2)
              && (v9 < 0xD
               || (!v8[6]
                || (BOOL result = 0, v13 = *((void *)a2 + 1), v13 >= 9)
                && v13 - 8 >= (unint64_t)this + v8[6] - *(void *)a2)
               && (v9 < 0xF
                || (uint64_t v14 = v8[7]) == 0
                || (BOOL result = 0, v15 = *((void *)a2 + 1), v15 >= 5)
                && v15 - 4 >= (unint64_t)this + v14 - *(void *)a2)))
            {
LABEL_28:
              --*((_DWORD *)a2 + 4);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL FlatbufferSymbols::SharedCache::Verify(FlatbufferSymbols::SharedCache *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    if (*v5 < 5u
      || (uint64_t v6 = v5[2]) == 0
      || (BOOL result = 0, v7 = *((void *)a2 + 1), v7 >= 2) && v7 - 1 >= (unint64_t)this + v6 - *(void *)a2)
    {
      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
      if (result)
      {
        uint64_t v8 = *(int *)this;
        uint64_t v9 = -v8;
        unint64_t v10 = (unsigned __int16 *)((char *)this - v8);
        unsigned int v11 = *v10;
        if (v11 < 7)
        {
          if (v11 < 5)
          {
LABEL_17:
            uint64_t v14 = (unsigned __int16 *)((char *)this + v9);
            if (*v14 < 9u
              || (uint64_t v15 = v14[4]) == 0
              || (BOOL result = 0, v16 = *((void *)a2 + 1), v16 >= 9)
              && v16 - 8 >= (unint64_t)this + v15 - *(void *)a2)
            {
              --*((_DWORD *)a2 + 4);
              return 1;
            }
            return result;
          }
        }
        else if (v10[3])
        {
          unint64_t v12 = (FlatbufferSymbols::SharedCache *)((char *)this + v10[3] + *(unsigned int *)((char *)this + v10[3]));
LABEL_12:
          uint64_t v13 = v10[2];
          if (v13 && v12 && *((unsigned char *)this + v13) == 1)
          {
            BOOL result = FlatbufferSymbols::DyldSharedCacheMetadata::Verify(v12, a2);
            if (!result) {
              return result;
            }
            uint64_t v9 = -(uint64_t)*(int *)this;
          }
          goto LABEL_17;
        }
        unint64_t v12 = 0;
        goto LABEL_12;
      }
    }
  }
  return result;
}

BOOL FlatbufferSymbols::StringEntry::Verify(FlatbufferSymbols::StringEntry *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    if (*v5 < 5u
      || (uint64_t v6 = v5[2]) == 0
      || (BOOL result = 0, v7 = *((void *)a2 + 1), v7 >= 5) && v7 - 4 >= (unint64_t)this + v6 - *(void *)a2)
    {
      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
      if (result)
      {
        uint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
          unint64_t v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
        }
        else {
          unint64_t v10 = 0;
        }
        BOOL result = flatbuffers::Verifier::VerifyString(a2, v10);
        if (result)
        {
          --*((_DWORD *)a2 + 4);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t flatbuffers::ToStringVisitor::ToStringVisitor(uint64_t a1, long long *a2, char a3, long long *a4, char a5)
{
  *(void *)a1 = &unk_1F0C3C848;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(unsigned char *)(a1 + 56) = a3;
  unint64_t v10 = (std::string *)(a1 + 64);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    *(void *)(a1 + 80) = *((void *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = a5;
  return a1;
}

void sub_1B39F3A00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *flatbuffers::ToStringVisitor::StartSequence(flatbuffers::ToStringVisitor *this)
{
  uint64_t v2 = (std::string *)((char *)this + 8);
  std::string::append((std::string *)((char *)this + 8), "{");
  unint64_t v5 = (const std::string::value_type *)*((void *)this + 4);
  unint64_t v4 = (char *)this + 32;
  unint64_t v3 = v5;
  int v6 = v4[23];
  if (v6 >= 0) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = v4[23];
  }
  else {
    std::string::size_type v8 = *((void *)v4 + 1);
  }
  BOOL result = std::string::append(v2, v7, v8);
  ++*((void *)v4 + 7);
  return result;
}

std::string *flatbuffers::ToStringVisitor::EndSequence(std::string *this)
{
  uint64_t v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
  int v3 = this[2].__r_.__value_.__s.__data_[7];
  if (v3 >= 0) {
    uint64_t size = &this[1].__r_.__value_.__s.__data_[8];
  }
  else {
    uint64_t size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
  }
  if (v3 >= 0) {
    std::string::size_type v5 = this[2].__r_.__value_.__s.__data_[7];
  }
  else {
    std::string::size_type v5 = this[1].__r_.__value_.__r.__words[2];
  }
  std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], size, v5);
  --this[3].__r_.__value_.__r.__words[2];
  flatbuffers::ToStringVisitor::append_indent(this);

  return std::string::append(v2, "}");
}

std::string *flatbuffers::ToStringVisitor::Field(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const std::string::value_type *a7, uint64_t a8)
{
  if (a8)
  {
    uint64_t v9 = (uint64_t)this;
    if (a3)
    {
      std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], ",");
      int v10 = *(char *)(v9 + 55);
      if (v10 >= 0) {
        long long v11 = (const std::string::value_type *)(v9 + 32);
      }
      else {
        long long v11 = *(const std::string::value_type **)(v9 + 32);
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(v9 + 55);
      }
      else {
        std::string::size_type v12 = *(void *)(v9 + 40);
      }
      std::string::append((std::string *)(v9 + 8), v11, v12);
    }
    this = flatbuffers::ToStringVisitor::append_indent((std::string *)v9);
    if (a7)
    {
      if (*(unsigned char *)(v9 + 56)) {
        std::string::append((std::string *)(v9 + 8), "\"");
      }
      std::string::append((std::string *)(v9 + 8), a7);
      if (*(unsigned char *)(v9 + 56)) {
        std::string::append((std::string *)(v9 + 8), "\"");
      }
      return std::string::append((std::string *)(v9 + 8), ": ");
    }
  }
  return this;
}

std::string *flatbuffers::ToStringVisitor::Bool(flatbuffers::ToStringVisitor *this, int a2)
{
  if (a2) {
    uint64_t v2 = "true";
  }
  else {
    uint64_t v2 = "false";
  }
  return std::string::append((std::string *)((char *)this + 8), v2);
}

void flatbuffers::ToStringVisitor::Long(flatbuffers::ToStringVisitor *this)
{
  flatbuffers::NumToString<long long>();
  if ((v5 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v3 = v5;
  }
  else {
    std::string::size_type v3 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)v2, v3);
  if ((char)v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B39F3CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::ULong(flatbuffers::ToStringVisitor *this)
{
  flatbuffers::NumToString<unsigned long long>();
  if ((v5 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v3 = v5;
  }
  else {
    std::string::size_type v3 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)v2, v3);
  if ((char)v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B39F3D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Float(flatbuffers::ToStringVisitor *this, float a2)
{
  flatbuffers::FloatToString<float>(6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B39F3DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Double(flatbuffers::ToStringVisitor *this, double a2)
{
  flatbuffers::FloatToString<double>(12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B39F3E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::ToStringVisitor::String(uint64_t a1, unsigned int *a2)
{
  return flatbuffers::EscapeString((uint64_t)(a2 + 1), *a2, (std::string *)(a1 + 8), 1, 0);
}

std::string *flatbuffers::ToStringVisitor::Unknown(flatbuffers::ToStringVisitor *this, const unsigned __int8 *a2)
{
  return std::string::append((std::string *)((char *)this + 8), "(?)");
}

std::string *flatbuffers::ToStringVisitor::StartVector(std::string *this)
{
  uint64_t v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
  std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], "[");
  if (this[4].__r_.__value_.__s.__data_[0])
  {
    int v3 = this[2].__r_.__value_.__s.__data_[7];
    if (v3 >= 0) {
      std::string::size_type size = &this[1].__r_.__value_.__s.__data_[8];
    }
    else {
      std::string::size_type size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
    }
    if (v3 >= 0) {
      std::string::size_type v5 = this[2].__r_.__value_.__s.__data_[7];
    }
    else {
      std::string::size_type v5 = this[1].__r_.__value_.__r.__words[2];
    }
    std::string::append(v2, size, v5);
    ++this[3].__r_.__value_.__r.__words[2];
    return flatbuffers::ToStringVisitor::append_indent(this);
  }
  else
  {
    return std::string::append(v2, " ");
  }
}

std::string *flatbuffers::ToStringVisitor::EndVector(std::string *this)
{
  if (this[4].__r_.__value_.__s.__data_[0])
  {
    uint64_t v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
    int v3 = this[2].__r_.__value_.__s.__data_[7];
    if (v3 >= 0) {
      std::string::size_type size = &this[1].__r_.__value_.__s.__data_[8];
    }
    else {
      std::string::size_type size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
    }
    if (v3 >= 0) {
      std::string::size_type v5 = this[2].__r_.__value_.__s.__data_[7];
    }
    else {
      std::string::size_type v5 = this[1].__r_.__value_.__r.__words[2];
    }
    std::string::append(v2, size, v5);
    --this[3].__r_.__value_.__r.__words[2];
    flatbuffers::ToStringVisitor::append_indent(this);
  }
  else
  {
    std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], " ");
  }

  return std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], "]");
}

std::string *flatbuffers::ToStringVisitor::Element(std::string *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    int v3 = (std::string *)&result->__r_.__value_.__r.__words[1];
    std::string::append((std::string *)&result->__r_.__value_.__r.__words[1], ",");
    if (v2[4].__r_.__value_.__s.__data_[0])
    {
      int v4 = v2[2].__r_.__value_.__s.__data_[7];
      if (v4 >= 0) {
        std::string::size_type size = &v2[1].__r_.__value_.__s.__data_[8];
      }
      else {
        std::string::size_type size = (const std::string::value_type *)v2[1].__r_.__value_.__l.__size_;
      }
      if (v4 >= 0) {
        std::string::size_type v6 = v2[2].__r_.__value_.__s.__data_[7];
      }
      else {
        std::string::size_type v6 = v2[1].__r_.__value_.__r.__words[2];
      }
      std::string::append(v3, size, v6);
      return flatbuffers::ToStringVisitor::append_indent(v2);
    }
    else
    {
      return std::string::append(v3, " ");
    }
  }
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string::size_type v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    std::string::size_type v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    std::string::size_type v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

std::string *flatbuffers::ToStringVisitor::append_indent(std::string *this)
{
  if (this[3].__r_.__value_.__r.__words[2])
  {
    uint64_t v1 = (uint64_t)this;
    unint64_t v2 = 0;
    int v3 = &this[2].__r_.__value_.__s.__data_[16];
    int v4 = (std::string *)&this->__r_.__value_.__r.__words[1];
    do
    {
      int v5 = *(char *)(v1 + 87);
      if (v5 >= 0) {
        std::string::size_type v6 = v3;
      }
      else {
        std::string::size_type v6 = *(const std::string::value_type **)(v1 + 64);
      }
      if (v5 >= 0) {
        std::string::size_type v7 = *(unsigned __int8 *)(v1 + 87);
      }
      else {
        std::string::size_type v7 = *(void *)(v1 + 72);
      }
      this = std::string::append(v4, v6, v7);
      ++v2;
    }
    while (v2 < *(void *)(v1 + 88));
  }
  return this;
}

void flatbuffers::ToStringVisitor::Named<unsigned char>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(unsigned char *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(unsigned char *)(a1 + 56))
    {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
  }
  else
  {
    flatbuffers::NumToString<int>();
    if ((v8 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v6 = v8;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B39F42F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<int>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v4);
}

void sub_1B39F447C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  int v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  unsigned __int8 v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1B39F4740(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EBEC10](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EBEC10](a1 + 128);
  return a1;
}

void flatbuffers::ToStringVisitor::Named<signed char>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(unsigned char *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(unsigned char *)(a1 + 56))
    {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
  }
  else
  {
    flatbuffers::NumToString<int>();
    if ((v8 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v6 = v8;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B39F4978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Named<short>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(unsigned char *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(unsigned char *)(a1 + 56))
    {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
  }
  else
  {
    flatbuffers::NumToString<short>();
    if ((v8 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v6 = v8;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B39F4A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<short>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v4);
}

void sub_1B39F4BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void flatbuffers::ToStringVisitor::Named<unsigned short>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(unsigned char *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(unsigned char *)(a1 + 56))
    {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
  }
  else
  {
    flatbuffers::NumToString<unsigned short>();
    if ((v8 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v6 = v8;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B39F4CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<unsigned short>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v4);
}

void sub_1B39F4E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void flatbuffers::ToStringVisitor::Named<int>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(unsigned char *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(unsigned char *)(a1 + 56))
    {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
  }
  else
  {
    flatbuffers::NumToString<int>();
    if ((v8 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v6 = v8;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B39F4F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Named<unsigned int>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(unsigned char *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(unsigned char *)(a1 + 56))
    {
      std::string::append((std::string *)(a1 + 8), "\"");
    }
  }
  else
  {
    flatbuffers::NumToString<unsigned int>();
    if ((v8 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v6 = v8;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B39F5050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<unsigned int>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v4);
}

void sub_1B39F51DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::NumToString<long long>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v4);
}

void sub_1B39F5360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::NumToString<unsigned long long>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v4);
}

void sub_1B39F54E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::FloatToString<float>@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  uint64_t v4 = v13[0];
  *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1] + *(void *)(v13[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v13[2] + *(void *)(v4 - 24)) = a1;
  std::ostream::operator<<();
  std::stringbuf::str();
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    std::string::size_type v6 = a2;
  }
  else {
    std::string::size_type v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  while (size)
  {
    int v7 = v6->__r_.__value_.__s.__data_[--size];
    if (v7 != 48)
    {
      if (size != -1)
      {
        BOOL v8 = v6->__r_.__value_.__s.__data_[size] == 46;
        uint64_t v9 = 1;
        if (v8) {
          uint64_t v9 = 2;
        }
        std::string::resize(a2, v9 + size, 0);
      }
      break;
    }
  }
  v12[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v15);
}

void sub_1B39F5730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::FloatToString<double>@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  uint64_t v4 = v13[0];
  *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1] + *(void *)(v13[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v13[2] + *(void *)(v4 - 24)) = a1;
  std::ostream::operator<<();
  std::stringbuf::str();
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    std::string::size_type v6 = a2;
  }
  else {
    std::string::size_type v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  while (size)
  {
    int v7 = v6->__r_.__value_.__s.__data_[--size];
    if (v7 != 48)
    {
      if (size != -1)
      {
        BOOL v8 = v6->__r_.__value_.__s.__data_[size] == 46;
        uint64_t v9 = 1;
        if (v8) {
          uint64_t v9 = 2;
        }
        std::string::resize(a2, v9 + size, 0);
      }
      break;
    }
  }
  v12[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v15);
}

void sub_1B39F5994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::EscapeString(uint64_t a1, unint64_t a2, std::string *this, int a4, int a5)
{
  std::string::append(this, "\"");
  if (!a2)
  {
LABEL_78:
    std::string::append(this, "\"");
    return 1;
  }
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = "\\b";
  uint64_t v11 = "\\t";
  uint64_t v12 = "\\r";
  while (2)
  {
    uint64_t v13 = (const std::string::value_type *)(a1 + v8);
    unint64_t v14 = *(char *)(a1 + v8);
    switch(*(unsigned char *)(a1 + v8))
    {
      case 8:
        uint64_t v15 = this;
        unint64_t v16 = v10;
        goto LABEL_15;
      case 9:
        uint64_t v15 = this;
        unint64_t v16 = v11;
        goto LABEL_15;
      case 0xA:
        uint64_t v15 = this;
        unint64_t v16 = "\\n";
        goto LABEL_15;
      case 0xB:
        goto LABEL_8;
      case 0xC:
        uint64_t v15 = this;
        unint64_t v16 = "\\f";
        goto LABEL_15;
      case 0xD:
        uint64_t v15 = this;
        unint64_t v16 = v12;
        goto LABEL_15;
      default:
        if (v14 == 34)
        {
          uint64_t v15 = this;
          unint64_t v16 = "\\\"";
          goto LABEL_15;
        }
        if (v14 == 92)
        {
          uint64_t v15 = this;
          unint64_t v16 = "\\\\"";
LABEL_15:
          std::string::append(v15, v16);
          goto LABEL_16;
        }
LABEL_8:
        if ((v14 - 32) <= 0x5E)
        {
          std::string::push_back(this, *(unsigned char *)(a1 + v8));
LABEL_16:
          uint64_t v8 = ++v9;
          if (v9 >= a2) {
            goto LABEL_78;
          }
          continue;
        }
        uint64_t v17 = v12;
        uint64_t v18 = v11;
        uint64_t v19 = v10;
        unsigned int v20 = 0;
        uint64_t v21 = (flatbuffers *)*(unsigned __int8 *)(a1 + v8);
        unsigned int v22 = 128;
        int v23 = -1;
        while ((v22 & v21) != 0)
        {
          ++v20;
          v22 >>= 1;
          ++v23;
          if (v20 == 6) {
            goto LABEL_23;
          }
        }
        if (((v21 << v20) & 0x80) == 0)
        {
          if (v20)
          {
            if (v20 == 1 || v20 > 4) {
              goto LABEL_23;
            }
            unint64_t v26 = (char *)(v13 + 1);
            LODWORD(v14) = v14 & ~(-1 << (7 - v20));
            do
            {
              char v27 = *v26;
              if ((*v26 & 0xC0) != 0x80) {
                goto LABEL_23;
              }
              ++v26;
              unint64_t v14 = v27 & 0x3Fu | (v14 << 6);
              --v23;
            }
            while (v23);
            uint64_t v28 = a1 + 2 + v8 + v20 - 2;
            if (v14 >> 11 == 27) {
              goto LABEL_23;
            }
            if (v20 == 4)
            {
              if ((v14 - 1114112) < 0xFFF00000) {
                goto LABEL_23;
              }
            }
            else if (v20 == 3)
            {
              if ((v14 - 0x10000) < 0xFFFF0800) {
                goto LABEL_23;
              }
            }
            else if ((v14 - 2048) < 0xFFFFF880)
            {
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v28 = (uint64_t)(v13 + 1);
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_23;
            }
          }
          if (a5)
          {
            std::string::append(this, v13, v28 - (v8 + a1));
            uint64_t v12 = v17;
          }
          else
          {
            uint64_t v12 = v17;
            if (WORD1(v14))
            {
              if (WORD1(v14) > 0x10u) {
                goto LABEL_73;
              }
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)(((v14 - 0x10000) >> 10) + 55296), 4);
              if ((v40 & 0x80u) == 0) {
                p_p = (const std::string::value_type *)&__p;
              }
              else {
                p_p = (const std::string::value_type *)__p;
              }
              if ((v40 & 0x80u) == 0) {
                std::string::size_type v32 = v40;
              }
              else {
                std::string::size_type v32 = v39;
              }
              std::string::append(this, p_p, v32);
              if ((char)v40 < 0) {
                operator delete(__p);
              }
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)(v14 & 0x3FF | 0xDC00), 4);
              uint64_t v33 = (v40 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
              std::string::size_type v34 = (v40 & 0x80u) == 0 ? v40 : v39;
              std::string::append(this, v33, v34);
              uint64_t v12 = v17;
              if (((char)v40 & 0x80000000) == 0) {
                goto LABEL_73;
              }
            }
            else
            {
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)v14, 4);
              if ((v40 & 0x80u) == 0) {
                uint64_t v29 = (const std::string::value_type *)&__p;
              }
              else {
                uint64_t v29 = (const std::string::value_type *)__p;
              }
              if ((v40 & 0x80u) == 0) {
                std::string::size_type v30 = v40;
              }
              else {
                std::string::size_type v30 = v39;
              }
              std::string::append(this, v29, v30);
              if (((char)v40 & 0x80000000) == 0) {
                goto LABEL_73;
              }
            }
            operator delete(__p);
          }
LABEL_73:
          unsigned int v9 = v28 + ~a1;
          uint64_t v10 = v19;
LABEL_32:
          uint64_t v11 = v18;
          goto LABEL_16;
        }
LABEL_23:
        if (a4)
        {
          std::string::append(this, "\\x");
          flatbuffers::IntToStringHex(v21, 2);
          if ((v40 & 0x80u) == 0) {
            uint64_t v24 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v24 = (const std::string::value_type *)__p;
          }
          if ((v40 & 0x80u) == 0) {
            std::string::size_type v25 = v40;
          }
          else {
            std::string::size_type v25 = v39;
          }
          std::string::append(this, v24, v25);
          uint64_t v10 = v19;
          uint64_t v12 = v17;
          if ((char)v40 < 0) {
            operator delete(__p);
          }
          goto LABEL_32;
        }
        return 0;
    }
  }
}

void sub_1B39F5E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::IntToStringHex(flatbuffers *this, int a2)
{
  if ((this & 0x80000000) != 0) {
    flatbuffers::IntToStringHex();
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  *(void *)((char *)&v9[3] + *(void *)(v9[0] - 24)) = a2;
  char v7 = 48;
  char v3 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, &v7);
  uint64_t v4 = *v3;
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v3 + *(void *)(v4 - 24) + 8) |= 0x4000u;
  std::ostream::operator<<();
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v9[0] = v5;
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EBEC10](&v11);
}

void sub_1B39F6090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  char v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v5 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1B39F615C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t flatbuffers::IterateObject(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (**(uint64_t (***)(uint64_t))a3)(a3);
  if (*(void *)(a2 + 8))
  {
    int v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v26 = 0;
    do
    {
      int v9 = *(__int16 *)(*(void *)(a2 + 16) + 2 * v8);
      if (v9 < 0) {
        char v10 = 0;
      }
      else {
        char v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a2 + 24)
      }
                                                           + (((unint64_t)*(unsigned __int16 *)(*(void *)(a2 + 16) + 2 * v8) >> 2) & 0x3FF8)))(v5);
      uint64_t v11 = *(void *)(a2 + 48);
      if (v11) {
        uint64_t v12 = *(void *)(v11 + 8 * v8);
      }
      else {
        uint64_t v12 = 0;
      }
      if (*(_DWORD *)a2)
      {
        uint64_t v13 = (int *)((char *)a1 + *(void *)(*(void *)(a2 + 40) + 8 * v8));
      }
      else
      {
        unint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v14 > ((2 * (_WORD)v8 + 4) & 0xFFFEu)
          && *(unsigned __int16 *)((char *)v14 + (unsigned __int16)(2 * v8 + 4)))
        {
          uint64_t v13 = (int *)((char *)a1 + *(unsigned __int16 *)((char *)v14 + (unsigned __int16)(2 * v8 + 4)));
        }
        else
        {
          uint64_t v13 = 0;
        }
      }
      uint64_t v15 = v9 & 0xF;
      uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, void *, uint64_t, int *))(*(void *)a3 + 16))(a3, v8, v7, v15, ((unsigned __int16)v9 >> 4) & 1, v10, v12, v13);
      if (v13)
      {
        ++v7;
        if ((v9 & 0x10) != 0)
        {
          uint64_t v27 = v7;
          if (*(_DWORD *)a2)
          {
            uint64_t v17 = *(__int16 *)(*(void *)(a2 + 32) + 2 * v26++);
            uint64_t v18 = v13;
          }
          else
          {
            uint64_t v13 = (int *)((char *)v13 + *v13);
            uint64_t v18 = v13 + 1;
            uint64_t v17 = *v13;
          }
          (*(void (**)(uint64_t))(*(void *)a3 + 136))(a3);
          if (v17)
          {
            uint64_t v19 = 0;
            while (2)
            {
              v20.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t, void *, int *))(*(void *)a3 + 152))(a3, v19, v15, v10, v18);
              flatbuffers::IterateValue(v15, v18, v10, v6, v19, a3, v20);
              uint64_t v21 = 1;
              switch((int)v15)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                  goto LABEL_27;
                case 4:
                case 5:
                  uint64_t v21 = 2;
                  goto LABEL_27;
                case 6:
                case 7:
                case 10:
                case 12:
                  goto LABEL_24;
                case 8:
                case 9:
                case 11:
                  uint64_t v21 = 8;
                  goto LABEL_27;
                case 13:
                  int v22 = *(_DWORD *)v10;
                  if (*(_DWORD *)v10) {
                    BOOL v23 = v22 == 2;
                  }
                  else {
                    BOOL v23 = 1;
                  }
                  if (v23)
                  {
LABEL_24:
                    uint64_t v21 = 4;
                  }
                  else
                  {
                    if (v22 != 1) {
                      flatbuffers::IterateObject();
                    }
                    uint64_t v21 = *(void *)(v10[5] + 8 * v10[1]);
                  }
LABEL_27:
                  uint64_t v18 = (int *)((char *)v18 + v21);
                  if (v17 == ++v19) {
                    break;
                  }
                  continue;
                default:
                  flatbuffers::IterateObject();
              }
              break;
            }
          }
          uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 144))(a3);
          uint64_t v7 = v27;
        }
        else
        {
          uint64_t v5 = flatbuffers::IterateValue(v9 & 0xF, v13, v10, v6, 0xFFFFFFFF, a3, v16);
        }
      }
      ++v8;
      int v6 = (unsigned int *)v13;
    }
    while (v8 < *(void *)(a2 + 8));
  }
  uint64_t v24 = *(uint64_t (**)(uint64_t))(*(void *)a3 + 8);

  return v24(a3);
}

uint64_t flatbuffers::IterateValue(uint64_t result, int *a2, void *a3, unsigned int *a4, unsigned int a5, uint64_t a6, __n128 a7)
{
  switch((int)result)
  {
    case 0:
      uint64_t v8 = *(unsigned __int8 *)a2;
      uint64_t v9 = flatbuffers::EnumName<unsigned char>(*(unsigned __int8 *)a2, a3);
      char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 24);
      uint64_t v11 = a6;
      uint64_t v12 = v8;
      return v10(v11, v12, v9);
    case 1:
      unint64_t v13 = *(unsigned char *)a2 != 0;
      unint64_t v14 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)a6 + 32);
      uint64_t v15 = a6;
      return v14(v15, v13);
    case 2:
      uint64_t v16 = *(char *)a2;
      uint64_t v9 = flatbuffers::EnumName<signed char>(*(char *)a2, a3);
      char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 40);
      uint64_t v11 = a6;
      uint64_t v12 = v16;
      return v10(v11, v12, v9);
    case 3:
      uint64_t v17 = *(unsigned __int8 *)a2;
      uint64_t v9 = flatbuffers::EnumName<unsigned char>(*(unsigned __int8 *)a2, a3);
      char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 48);
      uint64_t v11 = a6;
      uint64_t v12 = v17;
      return v10(v11, v12, v9);
    case 4:
      uint64_t v18 = *(__int16 *)a2;
      uint64_t v9 = flatbuffers::EnumName<signed char>(*(__int16 *)a2, a3);
      char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 56);
      uint64_t v11 = a6;
      uint64_t v12 = v18;
      return v10(v11, v12, v9);
    case 5:
      uint64_t v19 = *(unsigned __int16 *)a2;
      uint64_t v9 = flatbuffers::EnumName<unsigned char>(*(unsigned __int16 *)a2, a3);
      char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 64);
      uint64_t v11 = a6;
      uint64_t v12 = v19;
      return v10(v11, v12, v9);
    case 6:
      uint64_t v20 = *a2;
      uint64_t v9 = flatbuffers::EnumName<signed char>(*a2, a3);
      char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 72);
      uint64_t v11 = a6;
      uint64_t v12 = v20;
      return v10(v11, v12, v9);
    case 7:
      uint64_t v21 = *a2;
      uint64_t v9 = flatbuffers::EnumName<unsigned char>(*a2, a3);
      char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 80);
      uint64_t v11 = a6;
      uint64_t v12 = v21;
      return v10(v11, v12, v9);
    case 8:
      unint64_t v13 = *(void *)a2;
      unint64_t v14 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)a6 + 88);
      uint64_t v15 = a6;
      return v14(v15, v13);
    case 9:
      unint64_t v13 = *(void *)a2;
      unint64_t v14 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)a6 + 96);
      uint64_t v15 = a6;
      return v14(v15, v13);
    case 10:
      a7.n128_u32[0] = *a2;
      int v22 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a6 + 104);
      uint64_t v23 = a6;
      return v22(v23, a7);
    case 11:
      a7.n128_u64[0] = *(void *)a2;
      int v22 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a6 + 112);
      uint64_t v23 = a6;
      return v22(v23, a7);
    case 12:
      unint64_t v13 = (unint64_t)a2 + *a2;
      unint64_t v14 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)a6 + 120);
      uint64_t v15 = a6;
      goto LABEL_39;
    case 13:
      switch(*(_DWORD *)a3)
      {
        case 0:
          uint64_t v24 = (int *)((char *)a2 + *a2);
          goto LABEL_49;
        case 1:
          uint64_t v24 = a2;
LABEL_49:
          uint64_t v27 = (uint64_t)a3;
          goto LABEL_50;
        case 2:
          if (!a4) {
            flatbuffers::IterateValue();
          }
          if ((a5 & 0x80000000) == 0)
          {
            if (*a4 <= a5) {
              flatbuffers::IterateValue();
            }
            a4 = (unsigned int *)((char *)a4 + a5 + 4);
          }
          uint64_t v28 = (int *)((char *)a2 + *a2);
          uint64_t v29 = a3[5];
          uint64_t v30 = a3[1];
          if (v29)
          {
            if (!v30) {
              goto LABEL_69;
            }
            uint64_t v31 = 0;
            while (*(void *)(v29 + 8 * v31) != *(unsigned __int8 *)a4)
            {
              if (v30 == ++v31) {
                goto LABEL_69;
              }
            }
            if (v31 < 0) {
              goto LABEL_69;
            }
          }
          else
          {
            uint64_t v31 = *(unsigned __int8 *)a4;
          }
          if (v31 >= (int)v30) {
            goto LABEL_69;
          }
          __int16 v32 = *(_WORD *)(a3[2] + 2 * v31);
          if ((v32 & 0xF) != 0xC)
          {
            if ((v32 & 0xF) == 0xD)
            {
              uint64_t v27 = (*(uint64_t (**)(void))(a3[3] + 8 * (v32 >> 5)))();
              uint64_t v24 = v28;
LABEL_50:
              return flatbuffers::IterateObject(v24, v27, a6);
            }
LABEL_69:
            std::string::size_type v25 = *(uint64_t (**)(uint64_t))(*(void *)a6 + 128);
            uint64_t v26 = a6;
            goto LABEL_45;
          }
          unint64_t v14 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)a6 + 120);
          uint64_t v15 = a6;
          unint64_t v13 = (unint64_t)a2 + *a2;
LABEL_39:
          return v14(v15, v13);
        case 3:
          flatbuffers::IterateValue();
        default:
          return result;
      }
    default:
      std::string::size_type v25 = *(uint64_t (**)(uint64_t))(*(void *)a6 + 128);
      uint64_t v26 = a6;
LABEL_45:
      return v25(v26);
  }
}

uint64_t flatbuffers::EnumName<unsigned char>(unsigned int a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2[6];
    if (v2)
    {
      uint64_t v3 = a2[5];
      uint64_t v4 = a2[1];
      if (v3)
      {
        if (!v4) {
          return 0;
        }
        uint64_t v5 = 0;
        while (*(void *)(v3 + 8 * v5) != a1)
        {
          if (v4 == ++v5) {
            return 0;
          }
        }
        if (v5 < 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v5 = a1;
      }
      if (v5 < v4) {
        return *(void *)(v2 + 8 * v5);
      }
    }
  }
  return 0;
}

uint64_t flatbuffers::EnumName<signed char>(int a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2[6];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = a2[5];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = 0;
      while (*(void *)(v3 + 8 * v5) != a1)
      {
        if (v4 == ++v5) {
          return 0;
        }
      }
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v5 = a1;
LABEL_11:
  uint64_t result = 0;
  if ((v5 & 0x8000000000000000) == 0 && v5 < v4) {
    return *(void *)(v2 + 8 * v5);
  }
  return result;
}

void *FlatbufferSymbols::SymbolicatorTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolicatorTypeTable(void)::tt;
}

void *FlatbufferSymbols::StringEntryTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::StringEntryTypeTable(void)::tt;
}

void *FlatbufferSymbols::AddressSpaceMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::AddressSpaceMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolOwnerTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolOwnerTypeTable(void)::tt;
}

void *FlatbufferSymbols::SharedCacheTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SharedCacheTypeTable(void)::tt;
}

void *FlatbufferSymbols::ProcessMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::ProcessMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::MachoMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::MachoMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::DyldSharedCacheMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::DyldSharedCacheMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::CPUArchitectureTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::CPUArchitectureTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolOwnerMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolOwnerMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::SegmentTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SegmentTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolTypeTable(void)::tt;
}

void *FlatbufferSymbols::SourceInfoTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SourceInfoTypeTable(void)::tt;
}

void *FlatbufferSymbols::SharedCacheMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SharedCacheMetadataTypeTable(void)::tt;
}

uint64_t __Block_byref_object_copy__340(uint64_t a1, uint64_t a2)
{
  return flatbuffers::FlatBufferBuilder::FlatBufferBuilder(a1 + 48, (flatbuffers::FlatBufferBuilder *)(a2 + 48));
}

void __Block_byref_object_dispose__341(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__343(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t ktrace_address_space_iterate_symbol_owners(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    uint64_t v7 = result;
    do
    {
      switch(*(_DWORD *)(v4 + 16))
      {
        case 1:
        case 2:
        case 5:
          uint64_t v13 = 0;
          uint64_t v8 = &v13;
          goto LABEL_7;
        case 3:
          uint64_t v15 = 0;
          uint64_t v8 = &v15;
LABEL_7:
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, v8);
          break;
        case 4:
          uint64_t v9 = *(void *)(v7 + 248);
          if (v9)
          {
            char v10 = *(uint64_t **)(v9 + 16);
            uint64_t v11 = *v10;
            uint64_t v12 = v10[1];
            while (v11 != v12)
            {
              uint64_t v14 = 0;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v11, &v14);
              v11 += 96;
            }
          }
          break;
        default:
          ktrace_address_space_deep_iterate_symbol_owners();
      }
      v4 += 96;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t ___ZL17ktrace_dumpbufferP14ktrace_sessionP15ktrace_uuid_mapRNSt3__16vectorIP20ktrace_address_spaceNS3_9allocatorIS6_EEEEy_block_invoke(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 88) & 2) != 0)
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)a2;
    uint64_t v3 = *(void *)(a2 + 8);
    if (result | v3)
    {
      uint64_t v4 = (flatbuffers::FlatBufferBuilder *)(*(void *)(*(void *)(v2 + 40) + 8) + 48);
      uint64_t v5 = uuid_string(result, v3);
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateString(v4, v5, 0x24uLL);
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 48) = result;
    }
  }
  return result;
}

uint64_t ktrace_address_space_buildbuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, flatbuffers::FlatBufferBuilder *this, uint64_t a7, uint64_t a8)
{
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, "__TEXT", 6uLL);
  uint64_t v37 = 0;
  char v38 = &v37;
  uint64_t v39 = 0x4812000000;
  unsigned __int8 v40 = __Block_byref_object_copy__360;
  CFDictionaryRef v41 = __Block_byref_object_dispose__361;
  char v42 = "";
  char v44 = 0;
  uint64_t v45 = 0;
  std::string __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x3812000000;
  uint64_t v33 = __Block_byref_object_copy__363;
  std::string::size_type v34 = __Block_byref_object_dispose__364;
  uint64_t v35 = "";
  int v36 = 0;
  if (a8) {
    uint64_t v17 = ktrace_address_space_iterate_symbol_owners;
  }
  else {
    uint64_t v17 = ktrace_address_space_deep_iterate_symbol_owners;
  }
  uint64_t v18 = *(void *)(a2 + 80);
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  _OWORD v28[2] = ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke;
  v28[3] = &unk_1E6063710;
  v28[6] = a2;
  v28[7] = this;
  v28[8] = a8;
  v28[9] = a7;
  unsigned char v28[10] = a1;
  int v29 = String;
  v28[4] = &v30;
  void v28[5] = &v37;
  v17(v18, a3, (uint64_t)v28);
  uint64_t v19 = v38[7] - v38[6];
  if (v19) {
    uint64_t v20 = (void *)v38[6];
  }
  else {
    uint64_t v20 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>> const&)::t;
  }
  unsigned int v21 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(this, (uint64_t)v20, v19 >> 2);
  if (*((_DWORD *)v31 + 12)) {
    unsigned int v22 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(this, (uint64_t)(v31 + 6), 1);
  }
  else {
    unsigned int v22 = 0;
  }
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((unsigned char *)this + 70) = 1;
  int v23 = *((_DWORD *)this + 8);
  int v24 = *((_DWORD *)this + 12);
  int v25 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((unint64_t)this, 4, a4, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 6, a5);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 8, v21);
  if (v22) {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 10, v22);
  }
  uint64_t v26 = flatbuffers::FlatBufferBuilder::EndTable(this, v23 - v24 + v25);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v37, 8);
  if (__p)
  {
    char v44 = __p;
    operator delete(__p);
  }
  return v26;
}

void sub_1B39F70D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t callback_deallocate_buffer(uint64_t result, void *a2)
{
  if (result) {
    return MEMORY[0x1B3EBEC30](result - (void)a2, 0x1000C8077774924);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::FlatBufferBuilder(uint64_t a1, flatbuffers::FlatBufferBuilder *a2)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1B3A73160;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0;
  *(void *)(a1 + 72) = 1;
  *(_WORD *)(a1 + 80) = 256;
  *(void *)(a1 + 88) = 0;
  flatbuffers::FlatBufferBuilder::Swap((flatbuffers::FlatBufferBuilder *)a1, a2);
  return a1;
}

void sub_1B39F71C8(_Unwind_Exception *a1)
{
  flatbuffers::vector_downward::~vector_downward(v1);
  _Unwind_Resume(a1);
}

uint64_t *flatbuffers::FlatBufferBuilder::Swap(flatbuffers::FlatBufferBuilder *this, flatbuffers::FlatBufferBuilder *a2)
{
  uint64_t result = flatbuffers::vector_downward::swap((uint64_t *)this, a2);
  int v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LOWORD(v5) = *((_WORD *)this + 34);
  *((_WORD *)this + 34) = *((_WORD *)a2 + 34);
  *((_WORD *)a2 + 34) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 70);
  *((unsigned char *)this + 70) = *((unsigned char *)a2 + 70);
  *((unsigned char *)a2 + 70) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 71);
  *((unsigned char *)this + 7ktrace_session_set_default_event_names_enabled(global_session, 1) = *((unsigned char *)a2 + 71);
  *((unsigned char *)a2 + 7ktrace_session_set_default_event_names_enabled(global_session, 1) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 80);
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  *((unsigned char *)a2 + 80) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 81);
  *((unsigned char *)this + 8ktrace_session_set_default_event_names_enabled(global_session, 1) = *((unsigned char *)a2 + 81);
  *((unsigned char *)a2 + 8ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = *((void *)a2 + 11);
  *((void *)a2 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = v7;
  return result;
}

uint64_t *flatbuffers::vector_downward::swap(uint64_t *this, flatbuffers::vector_downward *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  LOBYTE(v2) = *((unsigned char *)this + 8);
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v2;
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = this[4];
  uint64_t v6 = this[5];
  uint64_t v7 = *((void *)a2 + 5);
  this[4] = *((void *)a2 + 4);
  this[5] = v7;
  *((void *)a2 + 4) = v5;
  *((void *)a2 + 5) = v6;
  uint64_t v8 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  return this;
}

__n128 __Block_byref_object_copy__360(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__361(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__363(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke(uint64_t a1, uint64_t a2, optional_uint64 *a3)
{
  uint64_t v123 = MEMORY[0x1B3EBF6E0]();
  uuid = (UUIDContext *)find_or_create_uuid(*(symbolication_context **)(a1 + 48), (SymbolOwner *)a2);
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)a3) {
    v7 += optional_uint64::value(a3);
  }
  uint64_t v133 = 0;
  v134 = &v133;
  uint64_t v135 = 0x4812000000;
  v136 = __Block_byref_object_copy__366;
  v137 = __Block_byref_object_dispose__367;
  v138 = "";
  v140 = 0;
  uint64_t v141 = 0;
  std::string __p = 0;
  switch(*(_DWORD *)(a2 + 16))
  {
    case 1:
      if (ktrace_find_base_address(*(symbolication_context **)(a1 + 48), uuid))
      {
        v131[0] = MEMORY[0x1E4F143A8];
        v131[1] = 3221225472;
        v131[2] = ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_369;
        v131[3] = &unk_1E60636E8;
        uint64_t v8 = *(symbolication_context **)(a1 + 48);
        uint64_t v9 = *(void *)(a1 + 56);
        v131[6] = uuid;
        v131[7] = a2;
        v131[4] = &v133;
        v131[5] = v9;
        if (ktrace_iterate_segments(v8, uuid, (uint64_t)v131)) {
          goto LABEL_73;
        }
      }
      unint64_t v10 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v10);
      *(unsigned char *)(v10 + 70) = 1;
      int v11 = *(_DWORD *)(v10 + 32);
      int v12 = *(_DWORD *)(v10 + 48);
      int v13 = *(_DWORD *)(v10 + 40);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v10, 4, *(_DWORD *)(a1 + 88));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 6, v7, -1);
      if (*(void *)(a2 + 56))
      {
        uint64_t v14 = optional_uint64::value((optional_uint64 *)(a2 + 56));
      }
      else
      {
        ktrace_find_text_size(*(symbolication_context **)(a1 + 48), uuid);
        if ((*((_WORD *)uuid + 80) & 8) == 0) {
          goto LABEL_48;
        }
        uint64_t v14 = *((void *)uuid + 7);
      }
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 8, v14, 0);
LABEL_48:
      int v61 = v11 - v12 + v13;
      int v24 = v134;
      int v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v61);
      unint64_t v62 = v24[8];
      uint64_t v27 = (char *)v24[7];
      if ((unint64_t)v27 < v62) {
        goto LABEL_49;
      }
      uint64_t v28 = (char *)v24[6];
      uint64_t v64 = (v27 - v28) >> 2;
      if ((unint64_t)(v64 + 1) >> 62) {
        std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v65 = v62 - (void)v28;
      unint64_t v66 = (uint64_t)(v62 - (void)v28) >> 1;
      if (v66 <= v64 + 1) {
        unint64_t v66 = v64 + 1;
      }
      if (v65 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v66;
      }
      if (v67)
      {
        unint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v24 + 8), v67);
        uint64_t v28 = (char *)v24[6];
        uint64_t v27 = (char *)v24[7];
      }
      else
      {
        unint64_t v68 = 0;
      }
      long long v69 = &v68[4 * v64];
      long long v70 = &v68[4 * v67];
      *(_DWORD *)long long v69 = v25;
      uint64_t v63 = v69 + 4;
      while (v27 != v28)
      {
        int v73 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v69 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v73;
        v69 -= 4;
      }
      goto LABEL_70;
    case 2:
      size_t v34 = strlen((const char *)(a2 + 24));
      unsigned int String = flatbuffers::FlatBufferBuilder::CreateString(*(flatbuffers::FlatBufferBuilder **)(a1 + 56), (const char *)(a2 + 24), v34);
      unint64_t v36 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v36);
      *(unsigned char *)(v36 + 70) = 1;
      int v37 = *(_DWORD *)(v36 + 32);
      int v38 = *(_DWORD *)(v36 + 48);
      int v39 = *(_DWORD *)(v36 + 40);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v36, 4, String);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v36, 6, v7, -1);
      if (*(void *)(a2 + 56))
      {
        uint64_t v40 = optional_uint64::value((optional_uint64 *)(a2 + 56));
LABEL_23:
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v36, 8, v40, 0);
        goto LABEL_36;
      }
      if (!strcmp((const char *)(a2 + 24), "__TEXT"))
      {
        ktrace_find_text_size(*(symbolication_context **)(a1 + 48), uuid);
        if ((*((_WORD *)uuid + 80) & 8) != 0)
        {
          uint64_t v40 = *((void *)uuid + 7);
          goto LABEL_23;
        }
      }
LABEL_36:
      int v24 = v134;
      int v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v36, v37 - v38 + v39);
      unint64_t v55 = v24[8];
      uint64_t v27 = (char *)v24[7];
      if ((unint64_t)v27 < v55)
      {
LABEL_49:
        *(_DWORD *)uint64_t v27 = v25;
        uint64_t v63 = v27 + 4;
      }
      else
      {
        uint64_t v28 = (char *)v24[6];
        uint64_t v56 = (v27 - v28) >> 2;
        if ((unint64_t)(v56 + 1) >> 62) {
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v57 = v55 - (void)v28;
        unint64_t v58 = (uint64_t)(v55 - (void)v28) >> 1;
        if (v58 <= v56 + 1) {
          unint64_t v58 = v56 + 1;
        }
        if (v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59)
        {
          uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v24 + 8), v59);
          uint64_t v28 = (char *)v24[6];
          uint64_t v27 = (char *)v24[7];
        }
        else
        {
          uint64_t v60 = 0;
        }
        long long v69 = &v60[4 * v56];
        long long v70 = &v60[4 * v59];
        *(_DWORD *)long long v69 = v25;
        uint64_t v63 = v69 + 4;
        while (v27 != v28)
        {
          int v72 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v69 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v72;
          v69 -= 4;
        }
LABEL_70:
        v24[6] = (uint64_t)v69;
        _DWORD v24[7] = (uint64_t)v63;
        v24[8] = (uint64_t)v70;
        if (v28) {
          operator delete(v28);
        }
      }
      _DWORD v24[7] = (uint64_t)v63;
LABEL_73:
      *(void *)&long long v125 = 0;
      *((void *)&v125 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &v125;
      uint64_t v126 = 0x3812000000;
      v127 = __Block_byref_object_copy__343;
      v128 = __Block_byref_object_dispose__344;
      v129 = "";
      int v130 = 0;
      if (*(_OWORD *)a2 == 0)
      {
        unsigned int v76 = 0;
      }
      else
      {
        long long v74 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        long long v75 = uuid_string(*(void *)a2, *(void *)(a2 + 8));
        unsigned int v76 = flatbuffers::FlatBufferBuilder::CreateString(v74, v75, 0x24uLL);
      }
      CFStringRef v77 = *(const __CFString **)(a2 + 80);
      if (v77)
      {
        uint64_t v78 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        uint64_t v79 = utf8(v77);
        size_t v80 = strlen(v79);
        int v81 = flatbuffers::FlatBufferBuilder::CreateString(v78, v79, v80);
LABEL_78:
        *(_DWORD *)(*((void *)&v125 + 1) + 48) = v81;
        goto LABEL_79;
      }
      fsid v108 = (fsid)*((void *)uuid + 18);
      fsobj_id v109 = (fsobj_id)*((void *)uuid + 19);
      CFDictionaryRef v110 = (const __CFDictionary *)lookup_inode(*(const __CFDictionary **)(*(void *)(*(void *)(a1 + 48) + 80) + 224), v108, v109);
      if (v110)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v110, @"Path");
        CFStringRef v112 = Value;
        if (Value)
        {
          CFTypeID v113 = CFGetTypeID(Value);
          if (v113 == CFStringGetTypeID())
          {
            v114 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
            v115 = utf8(v112);
            size_t v116 = strlen(v115);
            int v81 = flatbuffers::FlatBufferBuilder::CreateString(v114, v115, v116);
            goto LABEL_78;
          }
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
          }
        }
      }
      else
      {
        uint64_t v120 = *(void *)(*(void *)(a1 + 48) + 80);
        v124[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
        v124[1] = (void (*)(void, void))3221225472;
        v124[2] = (void (*)(void, void))___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_2;
        v124[3] = (void (*)(void, void))&unk_1E6062C98;
        v121 = *(void (**)(void, void))(a1 + 56);
        v124[4] = (void (*)(void, void))&v125;
        v124[5] = v121;
        ktrace_uuid_map_iterate_associated_paths(v120, (long long *)a2, v124);
      }
LABEL_79:
      uint64_t v82 = v134[7] - v134[6];
      if (v82) {
        uint64_t v83 = (void *)v134[6];
      }
      else {
        uint64_t v83 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::Segment>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::Segment>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const&)::t;
      }
      unsigned int v84 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(*(flatbuffers::FlatBufferBuilder **)(a1 + 56), (uint64_t)v83, v82 >> 2);
      unint64_t v85 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v85);
      *(unsigned char *)(v85 + 70) = 1;
      int v86 = *(_DWORD *)(v85 + 32);
      int v87 = *(_DWORD *)(v85 + 48);
      int v88 = *(_DWORD *)(v85 + 40);
      if (v76) {
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v85, 4, v76);
      }
      unsigned int v89 = *(_DWORD *)(*((void *)&v125 + 1) + 48);
      if (v89) {
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v85, 6, v89);
      }
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v85, 8, *(void *)(a2 + 64), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v85, 10, *(void *)(a2 + 72), 0);
      unsigned int v90 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v85, v86 - v87 + v88);
      unint64_t v91 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v91);
      *(unsigned char *)(v91 + 70) = 1;
      int v92 = *(_DWORD *)(v91 + 32);
      int v93 = *(_DWORD *)(v91 + 48);
      int v94 = *(_DWORD *)(v91 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v91, 4, 1, 0);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v91, 6, v90);
      int v95 = *(_DWORD *)(a2 + 16);
      if (v95 == 5)
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v91, 10, v7, -1);
        int v95 = *(_DWORD *)(a2 + 16);
      }
      if (v95 == 1) {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v91, 12, 1, 0);
      }
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v91, 8, v84);
      long long v96 = *(void **)(*(void *)(a1 + 40) + 8);
      int v97 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v91, v92 - v93 + v94);
      int v98 = v97;
      unint64_t v99 = v96[8];
      uint64_t v100 = (char *)v96[7];
      if ((unint64_t)v100 >= v99)
      {
        uint64_t v102 = (char *)v96[6];
        uint64_t v103 = (v100 - v102) >> 2;
        if ((unint64_t)(v103 + 1) >> 62) {
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v104 = v99 - (void)v102;
        unint64_t v105 = (uint64_t)(v99 - (void)v102) >> 1;
        if (v105 <= v103 + 1) {
          unint64_t v105 = v103 + 1;
        }
        if (v104 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v106 = v105;
        }
        if (v106)
        {
          uint64_t v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v96 + 8), v106);
          uint64_t v102 = (char *)v96[6];
          uint64_t v100 = (char *)v96[7];
        }
        else
        {
          uint64_t v107 = 0;
        }
        v117 = &v107[4 * v103];
        v118 = &v107[4 * v106];
        *(_DWORD *)v117 = v98;
        uint64_t v101 = v117 + 4;
        if (v100 == v102)
        {
          uint64_t v54 = (void *)v123;
        }
        else
        {
          uint64_t v54 = (void *)v123;
          do
          {
            int v119 = *((_DWORD *)v100 - 1);
            v100 -= 4;
            *((_DWORD *)v117 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v119;
            v117 -= 4;
          }
          while (v100 != v102);
        }
        v96[6] = v117;
        v96[7] = v101;
        v96[8] = v118;
        if (v102) {
          operator delete(v102);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v100 = v97;
        uint64_t v101 = v100 + 4;
        uint64_t v54 = (void *)v123;
      }
      v96[7] = v101;
      _Block_object_dispose(&v125, 8);
LABEL_113:
      _Block_object_dispose(&v133, 8);
      if (__p)
      {
        v140 = __p;
        operator delete(__p);
      }
      return;
    case 3:
      v132 = 0;
      get_sc_and_slide(*(void *)(*(void *)(a1 + 48) + 80), a2, (uint64_t *)a3, &v132);
      if (*(_OWORD *)a2 == 0)
      {
        unsigned int v17 = 0;
      }
      else
      {
        uint64_t v15 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        uint64_t v16 = uuid_string(*(void *)a2, *(void *)(a2 + 8));
        unsigned int v17 = flatbuffers::FlatBufferBuilder::CreateString(v15, v16, 0x24uLL);
      }
      uint64_t v41 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v41);
      *(unsigned char *)(v41 + 70) = 1;
      int v42 = *(_DWORD *)(v41 + 32);
      int v43 = *(_DWORD *)(v41 + 48);
      int v44 = *(_DWORD *)(v41 + 40);
      long long v125 = *(_OWORD *)a2;
      if (v125 != 0) {
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v41, 4, v17);
      }
      unsigned int v45 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v41, v42 - v43 + v44);
      unint64_t v46 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v46);
      *(unsigned char *)(v46 + 70) = 1;
      int v47 = *(_DWORD *)(v46 + 32);
      int v48 = *(_DWORD *)(v46 + 48);
      int v49 = *(_DWORD *)(v46 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v46, 4, 1, 0);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v46, 6, v45);
      if (*(void *)a3)
      {
        uint64_t v50 = optional_uint64::value(a3);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v46, 8, v50, -1);
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v46, v47 - v48 + v49);
      if (*(unsigned char *)(a1 + 64))
      {
        int v51 = (int)v132;
        if (v132)
        {
          if (!std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>(*(void **)(a1 + 72), (void *)a2))
          {
            int v52 = ktrace_address_space_buildbuffer(*(void *)(a1 + 80), *(void *)(a1 + 48), v51, 3, v45, *(flatbuffers::FlatBufferBuilder **)(a1 + 56));
            uint64_t v53 = *(void *)(a1 + 72);
            *(void *)&long long v125 = a2;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v53, (void *)a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v125)+ 8) = v52;
          }
        }
      }
      uint64_t v54 = (void *)v123;
      goto LABEL_113;
    case 5:
      unint64_t v18 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v18);
      *(unsigned char *)(v18 + 70) = 1;
      int v19 = *(_DWORD *)(v18 + 32);
      int v20 = *(_DWORD *)(v18 + 48);
      int v21 = *(_DWORD *)(v18 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v18, 6, v7, -1);
      if (*(void *)(a2 + 56))
      {
        uint64_t v22 = optional_uint64::value((optional_uint64 *)(a2 + 56));
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v18, 8, v22, 0);
      }
      int v23 = v19 - v20 + v21;
      int v24 = v134;
      int v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v18, v23);
      unint64_t v26 = v24[8];
      uint64_t v27 = (char *)v24[7];
      if ((unint64_t)v27 < v26) {
        goto LABEL_49;
      }
      uint64_t v28 = (char *)v24[6];
      uint64_t v29 = (v27 - v28) >> 2;
      if ((unint64_t)(v29 + 1) >> 62) {
        std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v30 = v26 - (void)v28;
      unint64_t v31 = (uint64_t)(v26 - (void)v28) >> 1;
      if (v31 <= v29 + 1) {
        unint64_t v31 = v29 + 1;
      }
      if (v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32)
      {
        uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v24 + 8), v32);
        uint64_t v28 = (char *)v24[6];
        uint64_t v27 = (char *)v24[7];
      }
      else
      {
        uint64_t v33 = 0;
      }
      long long v69 = &v33[4 * v29];
      long long v70 = &v33[4 * v32];
      *(_DWORD *)long long v69 = v25;
      uint64_t v63 = v69 + 4;
      while (v27 != v28)
      {
        int v71 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v69 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v71;
        v69 -= 4;
      }
      goto LABEL_70;
    default:
      uint64_t v122 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v122);
  }
}

void sub_1B39F7E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__366(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__367(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_369(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4)
{
  if (strcmp(__s1, "__LINKEDIT") && strcmp(__s1, "__PAGEZERO"))
  {
    size_t v8 = strlen(__s1);
    unsigned int String = flatbuffers::FlatBufferBuilder::CreateString(*(flatbuffers::FlatBufferBuilder **)(a1 + 40), __s1, v8);
    unint64_t v10 = *(void *)(a1 + 40);
    flatbuffers::FlatBufferBuilder::NotNested(v10);
    *(unsigned char *)(v10 + 70) = 1;
    int v11 = *(_DWORD *)(v10 + 32) - *(_DWORD *)(v10 + 48) + *(_DWORD *)(v10 + 40);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v10, 4, String);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 6, a3 - *(void *)(*(void *)(a1 + 48) + 48) + *(void *)(*(void *)(a1 + 56) + 48), -1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 8, a4, 0);
    int v12 = *(void **)(*(void *)(a1 + 32) + 8);
    int v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v11);
    int v14 = v13;
    uint64_t v15 = (char *)v12[7];
    unint64_t v16 = v12[8];
    if ((unint64_t)v15 >= v16)
    {
      unint64_t v18 = (char *)v12[6];
      uint64_t v19 = (v15 - v18) >> 2;
      if ((unint64_t)(v19 + 1) >> 62) {
        std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = v16 - (void)v18;
      unint64_t v21 = (uint64_t)(v16 - (void)v18) >> 1;
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      if (v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22)
      {
        int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v12 + 8), v22);
        unint64_t v18 = (char *)v12[6];
        uint64_t v15 = (char *)v12[7];
      }
      else
      {
        int v23 = 0;
      }
      int v24 = &v23[4 * v19];
      int v25 = &v23[4 * v22];
      *(_DWORD *)int v24 = v14;
      unsigned int v17 = v24 + 4;
      while (v15 != v18)
      {
        int v26 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v24 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v26;
        v24 -= 4;
      }
      _OWORD v12[6] = v24;
      v12[7] = v17;
      void v12[8] = v25;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v15 = v13;
      unsigned int v17 = v15 + 4;
    }
    v12[7] = v17;
  }
}

uint64_t ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_2(uint64_t result, const __CFString *a2)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 48))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(flatbuffers::FlatBufferBuilder **)(result + 40);
    uint64_t v4 = utf8(a2);
    size_t v5 = strlen(v4);
    __n128 result = flatbuffers::FlatBufferBuilder::CreateString(v3, v4, v5);
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 48) = result;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x28uLL);
  *int v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + ktrace_session_set_default_event_names_enabled(global_session, 1) = **a4;
  *((_DWORD *)v11 + 8) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *int v11 = *v21;
LABEL_42:
    *unint64_t v21 = v11;
    goto LABEL_43;
  }
  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B39F8370(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (const void **)*v2;
      CF::TypeRef::~TypeRef(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  float v15 = operator new(0x28uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *float v15 = 0;
  v15[1] = v7;
  *((_OWORD *)v15 + ktrace_session_set_default_event_names_enabled(global_session, 1) = **a4;
  _OWORD v15[4] = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  int v11 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v11;
}

void sub_1B39F870C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      CF::TypeRef::~TypeRef(v2 + 4);
    }
    operator delete(v2);
  }
}

CFTypeRef std::vector<SymbolOwner>::__construct_one_at_end[abi:ne180100]<SymbolOwner const&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v3 + 56) = 0;
  long long v5 = a2[2];
  long long v4 = a2[3];
  long long v6 = a2[5];
  *(_OWORD *)(v3 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = a2[4];
  *(_OWORD *)(v3 + 80) = v6;
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v4;
  long long v7 = a2[1];
  *(_OWORD *)uint64_t v3 = *a2;
  *(_OWORD *)(v3 + 16) = v7;
  CFTypeRef result = *(CFTypeRef *)(v3 + 80);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(a1 + 8) = v3 + 96;
  return result;
}

void sub_1B39F87D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<SymbolOwner>::__push_back_slow_path<SymbolOwner const&>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v23 = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolOwner>>(v7, v9);
  int v11 = &v10[96 * v4];
  v20[0] = v10;
  v20[1] = v11;
  size_t v21 = v11;
  unint64_t v22 = &v10[96 * v12];
  *((_DWORD *)v11 + 4) = 0;
  *((void *)v11 + 7) = 0;
  long long v14 = a2[2];
  long long v13 = a2[3];
  long long v15 = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  long long v16 = a2[1];
  *(_OWORD *)int v11 = *a2;
  *((_OWORD *)v11 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v16;
  *((_OWORD *)v11 + 3) = v13;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v14;
  float v17 = (const void *)*((void *)v11 + 10);
  if (v17)
  {
    CFRetain(v17);
    int v11 = v21;
  }
  size_t v21 = v11 + 96;
  std::vector<SymbolOwner>::__swap_out_circular_buffer(a1, v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<SymbolOwner>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_1B39F88E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SymbolOwner>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SymbolOwner>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolOwner>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolOwner>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolOwner>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_DWORD *)(v12 - 80) = 0;
      *(void *)(v12 - 40) = 0;
      long long v13 = *(_OWORD *)(a3 + v11 - 64);
      long long v14 = *(_OWORD *)(a3 + v11 - 48);
      long long v15 = *(_OWORD *)(a3 + v11 - 32);
      *(_OWORD *)(v12 - 16) = *(_OWORD *)(a3 + v11 - 16);
      long long v16 = *(_OWORD *)(a3 + v11 - 80);
      *(_OWORD *)(v12 - 96) = *(_OWORD *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 80) = v16;
      *(_OWORD *)(v12 - 48) = v14;
      *(_OWORD *)(v12 - 32) = v15;
      *(_OWORD *)(v12 - std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v13;
      float v17 = *(const void **)(a7 + v11 - 16);
      if (v17) {
        CFRetain(v17);
      }
      v11 -= 96;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B39F8A58(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 96)
    SymbolOwner::~SymbolOwner((SymbolOwner *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SymbolOwner>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    SymbolOwner::~SymbolOwner((SymbolOwner *)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  uint64_t v12 = a2 - 6;
  long long v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    uint64_t v15 = v14;
    uint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 5);
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 6, v13))
          {
            long long v39 = v13[1];
            long long v51 = *v13;
            long long v52 = v39;
            long long v40 = v13[2];
            long long v41 = v13[3];
            long long v42 = v13[5];
            long long v55 = v13[4];
            long long v56 = v42;
            long long v53 = v40;
            long long v54 = v41;
            v13[2] = 0u;
            void v13[3] = 0u;
            void v13[4] = 0u;
            _OWORD v13[5] = 0u;
            *long long v13 = 0u;
            v13[1] = 0u;
            long long v43 = *(a2 - 5);
            *long long v13 = *v12;
            v13[1] = v43;
            long long v44 = *(a2 - 4);
            long long v45 = *(a2 - 3);
            long long v46 = *(a2 - 1);
            void v13[4] = *(a2 - 2);
            _OWORD v13[5] = v46;
            v13[2] = v44;
            void v13[3] = v45;
            long long v47 = v56;
            long long v49 = v53;
            long long v48 = v54;
            *(a2 - 2) = v55;
            *(a2 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v47;
            *(a2 - 4) = v49;
            *(a2 - 3) = v48;
            long long v50 = v52;
            *uint64_t v12 = v51;
            *(a2 - 5) = v50;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v51);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v13, v13 + 6, a2 - 6, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v13, v13 + 6, v13 + 12, a2 - 6, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v13, v13 + 6, v13 + 12, v13 + 18, a2 - 6, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 2303)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v13, a2, (uint64_t (**)(long long *, uint64_t))a3);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v13, a2, a3);
      }
      return;
    }
    if (v15 == 1) {
      break;
    }
    unint64_t v18 = v17 >> 1;
    unint64_t v19 = &v13[6 * (v17 >> 1)];
    if ((unint64_t)v16 > 0x3000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v13, &v13[6 * (v17 >> 1)], a2 - 6, a3);
      uint64_t v20 = 3 * v18;
      size_t v21 = &v13[6 * v18 - 6];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v13 + 6, v21, a2 - 12, a3);
      unint64_t v22 = v13 + 12;
      unint64_t v23 = &v13[2 * v20 + 6];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v22, v23, a2 - 18, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v21, v19, v23, a3);
      long long v24 = a1[1];
      long long v51 = *a1;
      long long v52 = v24;
      long long v25 = a1[2];
      long long v26 = a1[3];
      long long v27 = a1[5];
      long long v55 = a1[4];
      long long v56 = v27;
      long long v53 = v25;
      long long v54 = v26;
      a1[2] = 0u;
      a1[3] = 0u;
      a1[4] = 0u;
      a1[5] = 0u;
      *a1 = 0u;
      a1[1] = 0u;
      long long v28 = v19[1];
      *a1 = *v19;
      a1[1] = v28;
      long long v29 = v19[2];
      long long v30 = v19[3];
      long long v31 = v19[5];
      a1[4] = v19[4];
      a1[5] = v31;
      a1[2] = v29;
      a1[3] = v30;
      long long v32 = v56;
      long long v34 = v53;
      long long v33 = v54;
      v19[4] = v55;
      void v19[5] = v32;
      v19[2] = v34;
      _OWORD v19[3] = v33;
      long long v35 = v52;
      *unint64_t v19 = v51;
      v19[1] = v35;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v51);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(&v13[6 * (v17 >> 1)], v13, a2 - 6, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(a1 - 6, a1) & 1) == 0)
    {
      long long v13 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>(a1, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v36 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>(a1, a2, a3);
    if ((v37 & 1) == 0) {
      goto LABEL_16;
    }
    char v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, v36, a3);
    long long v13 = v36 + 6;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v36 + 6, a2, a3))
    {
      a4 = -v15;
      a2 = v36;
      if (v38) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if ((v38 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>(a1, v36, a3, -v15, a5 & 1);
      long long v13 = v36 + 6;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (v13 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,SymbolOwner*>((char *)v13, (char *)a2, (char *)a2, (unsigned int (**)(uint64_t, long long *))a3, a6);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    long long v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(a2 - 2) < *v11)
          {
            long long v24 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v24;
            long long v25 = *v11;
            *uint64_t v11 = *(a2 - 2);
            *(a2 - 2) = v25;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,PrepassOp *>(v11, a2, a2, a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      unint64_t v19 = *v11;
      unint64_t v18 = v11[1];
      uint64_t v20 = v17[1];
      *uint64_t v11 = *v17;
      v11[1] = v20;
      *unint64_t v17 = v19;
      v17[1] = v18;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(v11 - 2) >= *v11)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    size_t v21 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>(v11, a2);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11, v21);
    uint64_t v11 = v21 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v21 + 2, a2))
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if ((v23 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = v21 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v11, a2);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        unint64_t v9 = v8;
        uint64_t v8 = v5;
        if ((*a3)(v5, (uint64_t)v9))
        {
          long long v10 = v8[3];
          long long v27 = v8[2];
          long long v28 = v10;
          long long v11 = v8[5];
          long long v29 = v8[4];
          long long v30 = v11;
          long long v12 = v8[1];
          long long v25 = *v8;
          long long v26 = v12;
          *uint64_t v8 = 0u;
          v8[1] = 0u;
          void v8[2] = 0u;
          v8[3] = 0u;
          uint64_t v13 = v7;
          v8[4] = 0u;
          void v8[5] = 0u;
          while (1)
          {
            uint64_t v14 = (_OWORD *)((char *)a1 + v13);
            uint64_t v15 = *(const void **)((char *)a1 + v13 + 176);
            if (v15) {
              CFRelease(v15);
            }
            long long v16 = v14[3];
            v14[8] = v14[2];
            v14[9] = v16;
            long long v17 = v14[5];
            long long v14[10] = v14[4];
            v14[11] = v17;
            long long v18 = v14[1];
            void v14[6] = *v14;
            v14[7] = v18;
            *uint64_t v14 = 0u;
            v14[1] = 0u;
            void v14[2] = 0u;
            v14[3] = 0u;
            v14[4] = 0u;
            _OWORD v14[5] = 0u;
            if (!v13) {
              break;
            }
            char v19 = (*a3)(&v25, (uint64_t)a1 + v13 - 96);
            v13 -= 96;
            if ((v19 & 1) == 0)
            {
              uint64_t v20 = (uint64_t)a1 + v13 + 96;
              goto LABEL_12;
            }
          }
          uint64_t v20 = (uint64_t)a1;
LABEL_12:
          size_t v21 = *(const void **)(v20 + 80);
          if (v21) {
            CFRelease(v21);
          }
          long long v22 = v28;
          *(_OWORD *)(v20 + 32) = v27;
          *(_OWORD *)(v20 + 48) = v22;
          long long v23 = v30;
          *(_OWORD *)(v20 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v29;
          *(_OWORD *)(v20 + 80) = v23;
          long long v24 = v26;
          *(_OWORD *)uint64_t v20 = v25;
          *(_OWORD *)(v20 + 16) = v24;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v25);
        }
        uint64_t v5 = v8 + 6;
        v7 += 96;
      }
      while (v8 + 6 != a2);
    }
  }
}

void sub_1B39F8FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(long long *, _OWORD *))
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    uint64_t v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v7 = a1 - 6;
      do
      {
        uint64_t v8 = v4;
        unint64_t v4 = v5;
        if ((*a3)(v5, v8))
        {
          long long v9 = v4[3];
          long long v24 = v4[2];
          long long v25 = v9;
          long long v10 = v4[5];
          long long v26 = v4[4];
          long long v27 = v10;
          long long v11 = v4[1];
          long long v22 = *v4;
          long long v23 = v11;
          *unint64_t v4 = 0u;
          v4[1] = 0u;
          _OWORD v4[2] = 0u;
          v4[3] = 0u;
          long long v12 = v7;
          v4[4] = 0u;
          void v4[5] = 0u;
          do
          {
            uint64_t v13 = (const void *)*((void *)v12 + 34);
            if (v13) {
              CFRelease(v13);
            }
            long long v14 = v12[9];
            v12[14] = v12[8];
            v12[15] = v14;
            long long v15 = v12[11];
            v12[16] = v12[10];
            v12[17] = v15;
            long long v16 = v12[7];
            v12[12] = v12[6];
            v12[13] = v16;
            _OWORD v12[6] = 0u;
            v12[7] = 0u;
            void v12[8] = 0u;
            void v12[9] = 0u;
            v12[10] = 0u;
            v12[11] = 0u;
            char v17 = (*a3)(&v22, v12);
            v12 -= 6;
          }
          while ((v17 & 1) != 0);
          long long v18 = (const void *)*((void *)v12 + 34);
          if (v18) {
            CFRelease(v18);
          }
          long long v19 = v25;
          v12[14] = v24;
          v12[15] = v19;
          long long v20 = v27;
          v12[16] = v26;
          v12[17] = v20;
          long long v21 = v23;
          v12[12] = v22;
          v12[13] = v21;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v22);
        }
        uint64_t v5 = v4 + 6;
        v7 += 6;
      }
      while (v4 + 6 != a2);
    }
  }
}

void sub_1B39F912C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v20 = a2[3];
    long long v63 = a2[2];
    long long v64 = v20;
    long long v21 = a2[5];
    long long v65 = a2[4];
    long long v66 = v21;
    long long v22 = a2[1];
    long long v61 = *a2;
    long long v62 = v22;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    long long v23 = a3[2];
    long long v24 = a3[3];
    long long v25 = a3[5];
    a2[4] = a3[4];
    a2[5] = v25;
    a2[2] = v23;
    a2[3] = v24;
    long long v26 = a3[1];
    *a2 = *a3;
    a2[1] = v26;
    long long v27 = v64;
    a3[2] = v63;
    a3[3] = v27;
    long long v28 = v66;
    a3[4] = v65;
    a3[5] = v28;
    long long v29 = v62;
    *a3 = v61;
    a3[1] = v29;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    long long v30 = a1[3];
    long long v63 = a1[2];
    long long v64 = v30;
    long long v31 = a1[5];
    long long v65 = a1[4];
    long long v66 = v31;
    long long v32 = a1[1];
    long long v61 = *a1;
    long long v62 = v32;
    long long v33 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    long long v34 = a2[2];
    long long v35 = a2[3];
    long long v36 = a2[5];
    a1[4] = a2[4];
    a1[5] = v36;
    a1[2] = v34;
    a1[3] = v35;
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    long long v38 = v64;
    a2[2] = v63;
    a2[3] = v38;
    long long v39 = v66;
    a2[4] = v65;
    a2[5] = v39;
    long long v40 = v62;
    *a2 = v61;
    a2[1] = v40;
    goto LABEL_9;
  }
  if (!result)
  {
    long long v41 = a1[3];
    long long v63 = a1[2];
    long long v64 = v41;
    long long v42 = a1[5];
    long long v65 = a1[4];
    long long v66 = v42;
    long long v43 = a1[1];
    long long v61 = *a1;
    long long v62 = v43;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    long long v44 = a2[2];
    long long v45 = a2[3];
    long long v46 = a2[5];
    a1[4] = a2[4];
    a1[5] = v46;
    a1[2] = v44;
    a1[3] = v45;
    long long v47 = a2[1];
    *a1 = *a2;
    a1[1] = v47;
    long long v48 = v64;
    a2[2] = v63;
    a2[3] = v48;
    long long v49 = v66;
    a2[4] = v65;
    a2[5] = v49;
    long long v50 = v62;
    *a2 = v61;
    a2[1] = v50;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    long long v51 = a2[3];
    long long v63 = a2[2];
    long long v64 = v51;
    long long v52 = a2[5];
    long long v65 = a2[4];
    long long v66 = v52;
    long long v53 = a2[1];
    long long v61 = *a2;
    long long v62 = v53;
    long long v33 = 0uLL;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    long long v54 = a3[2];
    long long v55 = a3[3];
    long long v56 = a3[5];
    a2[4] = a3[4];
    a2[5] = v56;
    a2[2] = v54;
    a2[3] = v55;
    long long v57 = a3[1];
    *a2 = *a3;
    a2[1] = v57;
    long long v58 = v64;
    a3[2] = v63;
    a3[3] = v58;
    long long v59 = v66;
    a3[4] = v65;
    a3[5] = v59;
    long long v60 = v62;
    *a3 = v61;
    a3[1] = v60;
LABEL_9:
    long long v65 = v33;
    long long v66 = v33;
    long long v63 = v33;
    long long v64 = v33;
    long long v61 = v33;
    long long v62 = v33;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    return 2;
  }
  long long v10 = a1[3];
  long long v63 = a1[2];
  long long v64 = v10;
  long long v11 = a1[5];
  long long v65 = a1[4];
  long long v66 = v11;
  long long v12 = a1[1];
  long long v61 = *a1;
  long long v62 = v12;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  long long v13 = a3[2];
  long long v14 = a3[3];
  long long v15 = a3[5];
  a1[4] = a3[4];
  a1[5] = v15;
  a1[2] = v13;
  a1[3] = v14;
  long long v16 = a3[1];
  *a1 = *a3;
  a1[1] = v16;
  long long v17 = v64;
  a3[2] = v63;
  a3[3] = v17;
  long long v18 = v66;
  a3[4] = v65;
  a3[5] = v18;
  long long v19 = v62;
  *a3 = v61;
  a3[1] = v19;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
  return 1;
}

_OWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(long long *, _OWORD *))
{
  unint64_t v4 = a2;
  long long v6 = a1[3];
  long long v38 = a1[2];
  long long v39 = v6;
  long long v7 = a1[5];
  long long v40 = a1[4];
  long long v41 = v7;
  long long v8 = a1[1];
  long long v36 = *a1;
  long long v37 = v8;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  if ((*a3)(&v36, a2 - 6))
  {
    long long v9 = a1;
    do
      v9 += 6;
    while (((*a3)(&v36, v9) & 1) == 0);
  }
  else
  {
    long long v10 = a1 + 6;
    do
    {
      long long v9 = v10;
      if (v10 >= v4) {
        break;
      }
      int v11 = (*a3)(&v36, v10);
      long long v10 = v9 + 6;
    }
    while (!v11);
  }
  if (v9 < v4)
  {
    do
      v4 -= 6;
    while (((*a3)(&v36, v4) & 1) != 0);
  }
  while (v9 < v4)
  {
    long long v12 = v9[1];
    long long v42 = *v9;
    long long v43 = v12;
    long long v13 = v9[2];
    long long v14 = v9[3];
    long long v15 = v9[5];
    long long v46 = v9[4];
    long long v47 = v15;
    long long v44 = v13;
    long long v45 = v14;
    void v9[2] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    void v9[5] = 0u;
    *long long v9 = 0u;
    v9[1] = 0u;
    long long v16 = v4[1];
    *long long v9 = *v4;
    v9[1] = v16;
    long long v17 = v4[2];
    long long v18 = v4[3];
    long long v19 = v4[5];
    v9[4] = v4[4];
    void v9[5] = v19;
    void v9[2] = v17;
    v9[3] = v18;
    long long v20 = v47;
    long long v22 = v44;
    long long v21 = v45;
    v4[4] = v46;
    void v4[5] = v20;
    _OWORD v4[2] = v22;
    v4[3] = v21;
    long long v23 = v43;
    *unint64_t v4 = v42;
    v4[1] = v23;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v42);
    do
      v9 += 6;
    while (!(*a3)(&v36, v9));
    do
      v4 -= 6;
    while (((*a3)(&v36, v4) & 1) != 0);
  }
  long long v24 = v9 - 6;
  if (v9 - 6 == a1)
  {
    long long v30 = (const void *)*((void *)v9 - 2);
    if (v30) {
      CFRelease(v30);
    }
  }
  else
  {
    long long v25 = (const void *)*((void *)a1 + 10);
    if (v25) {
      CFRelease(v25);
    }
    long long v26 = *(v9 - 5);
    *a1 = *v24;
    a1[1] = v26;
    long long v27 = *(v9 - 4);
    long long v28 = *(v9 - 3);
    long long v29 = *(v9 - 1);
    a1[4] = *(v9 - 2);
    a1[5] = v29;
    a1[2] = v27;
    a1[3] = v28;
    *(v9 - 4) = 0u;
    *(v9 - 3) = 0u;
    *(v9 - 2) = 0u;
    *(v9 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
    *long long v24 = 0u;
    *(v9 - 5) = 0u;
  }
  long long v31 = v37;
  *long long v24 = v36;
  *(v9 - 5) = v31;
  long long v32 = v38;
  long long v33 = v39;
  long long v34 = v41;
  *(v9 - 2) = v40;
  *(v9 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v34;
  *(v9 - 4) = v32;
  *(v9 - 3) = v33;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v36);
  return v9;
}

void sub_1B39F9604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_OWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(_OWORD *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[3];
  long long v39 = a1[2];
  long long v40 = v7;
  long long v8 = a1[5];
  long long v41 = a1[4];
  long long v42 = v8;
  long long v9 = a1[1];
  long long v37 = *a1;
  long long v38 = v9;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  do
  {
    char v10 = (*a3)(&a1[v6 + 6], &v37);
    v6 += 6;
  }
  while ((v10 & 1) != 0);
  int v11 = &a1[v6];
  if (v6 == 6)
  {
    do
    {
      if (v11 >= a2) {
        break;
      }
      a2 -= 6;
    }
    while (((*a3)(a2, &v37) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!(*a3)(a2, &v37));
  }
  long long v12 = &a1[v6];
  if (v11 < a2)
  {
    long long v13 = a2;
    do
    {
      long long v14 = v12[3];
      long long v45 = v12[2];
      long long v46 = v14;
      long long v15 = v12[5];
      long long v47 = v12[4];
      long long v48 = v15;
      long long v16 = v12[1];
      long long v43 = *v12;
      long long v44 = v16;
      *long long v12 = 0u;
      v12[1] = 0u;
      void v12[2] = 0u;
      void v12[3] = 0u;
      v12[4] = 0u;
      void v12[5] = 0u;
      long long v17 = v13[1];
      *long long v12 = *v13;
      v12[1] = v17;
      long long v18 = v13[2];
      long long v19 = v13[3];
      long long v20 = v13[5];
      v12[4] = v13[4];
      void v12[5] = v20;
      void v12[2] = v18;
      void v12[3] = v19;
      long long v21 = v44;
      *long long v13 = v43;
      v13[1] = v21;
      long long v22 = v45;
      long long v23 = v46;
      long long v24 = v48;
      void v13[4] = v47;
      _OWORD v13[5] = v24;
      v13[2] = v22;
      void v13[3] = v23;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v43);
      do
        v12 += 6;
      while (((*a3)(v12, &v37) & 1) != 0);
      do
        v13 -= 6;
      while (!(*a3)(v13, &v37));
    }
    while (v12 < v13);
  }
  long long v25 = v12 - 6;
  if (v12 - 6 == a1)
  {
    long long v31 = (const void *)*((void *)v12 - 2);
    if (v31) {
      CFRelease(v31);
    }
  }
  else
  {
    long long v26 = (const void *)*((void *)a1 + 10);
    if (v26) {
      CFRelease(v26);
    }
    long long v27 = *(v12 - 5);
    *a1 = *v25;
    a1[1] = v27;
    long long v28 = *(v12 - 4);
    long long v29 = *(v12 - 3);
    long long v30 = *(v12 - 1);
    a1[4] = *(v12 - 2);
    a1[5] = v30;
    a1[2] = v28;
    a1[3] = v29;
    *(v12 - 4) = 0u;
    *(v12 - 3) = 0u;
    *(v12 - 2) = 0u;
    *(v12 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
    *long long v25 = 0u;
    *(v12 - 5) = 0u;
  }
  long long v32 = v38;
  *long long v25 = v37;
  *(v12 - 5) = v32;
  long long v33 = v39;
  long long v34 = v40;
  long long v35 = v42;
  *(v12 - 2) = v41;
  *(v12 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v35;
  *(v12 - 4) = v33;
  *(v12 - 3) = v34;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v37);
  return v12 - 6;
}

void sub_1B39F984C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  BOOL v6 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      long long v7 = a2 - 6;
      if ((*a3)(a2 - 6, a1))
      {
        long long v8 = a1[3];
        long long v40 = a1[2];
        long long v41 = v8;
        long long v9 = a1[5];
        long long v42 = a1[4];
        long long v43 = v9;
        long long v10 = a1[1];
        long long v38 = *a1;
        long long v39 = v10;
        *a1 = 0u;
        a1[1] = 0u;
        a1[2] = 0u;
        a1[3] = 0u;
        a1[4] = 0u;
        a1[5] = 0u;
        long long v11 = *(a2 - 4);
        long long v12 = *(a2 - 3);
        long long v13 = *(a2 - 1);
        a1[4] = *(a2 - 2);
        a1[5] = v13;
        a1[2] = v11;
        a1[3] = v12;
        long long v14 = *(a2 - 5);
        *a1 = *v7;
        a1[1] = v14;
        long long v15 = v41;
        *(a2 - 4) = v40;
        *(a2 - 3) = v15;
        long long v16 = v43;
        *(a2 - 2) = v42;
        *(a2 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v16;
        long long v17 = v39;
        *long long v7 = v38;
        *(a2 - 5) = v17;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        goto LABEL_24;
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a1 + 6, a2 - 6, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a1 + 6, a1 + 12, a2 - 6, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a1 + 6, a1 + 12, a1 + 18, a2 - 6, a3);
      return v6;
    default:
      long long v18 = a1 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a1 + 6, a1 + 12, a3);
      long long v19 = a1 + 18;
      if (a1 + 18 == a2) {
        return 1;
      }
      uint64_t v20 = 0;
      int v21 = 0;
      break;
  }
  while (!(*a3)(v19, v18))
  {
LABEL_18:
    long long v18 = v19;
    v20 += 96;
    v19 += 6;
    if (v19 == a2) {
      return 1;
    }
  }
  long long v22 = v19[3];
  long long v40 = v19[2];
  long long v41 = v22;
  long long v23 = v19[5];
  long long v42 = v19[4];
  long long v43 = v23;
  long long v24 = v19[1];
  long long v38 = *v19;
  long long v39 = v24;
  *long long v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  _OWORD v19[3] = 0u;
  uint64_t v25 = v20;
  v19[4] = 0u;
  void v19[5] = 0u;
  while (1)
  {
    long long v26 = (long long *)((char *)a1 + v25);
    long long v27 = *(const void **)((char *)a1 + v25 + 368);
    if (v27) {
      CFRelease(v27);
    }
    long long v28 = v26[15];
    v26[20] = v26[14];
    v26[21] = v28;
    long long v29 = v26[17];
    v26[22] = v26[16];
    v26[23] = v29;
    long long v30 = v26[13];
    v26[18] = v26[12];
    v26[19] = v30;
    v26[12] = 0u;
    v26[13] = 0u;
    v26[14] = 0u;
    v26[15] = 0u;
    v26[16] = 0u;
    v26[17] = 0u;
    if (v25 == -192) {
      break;
    }
    char v31 = (*a3)(&v38, (long long *)((char *)a1 + v25 + 96));
    v25 -= 96;
    if ((v31 & 1) == 0)
    {
      uint64_t v32 = (uint64_t)a1 + v25 + 288;
      goto LABEL_14;
    }
  }
  uint64_t v32 = (uint64_t)a1;
LABEL_14:
  long long v33 = *(const void **)(v32 + 80);
  if (v33) {
    CFRelease(v33);
  }
  long long v34 = v41;
  *(_OWORD *)(v32 + 32) = v40;
  *(_OWORD *)(v32 + 48) = v34;
  long long v35 = v43;
  *(_OWORD *)(v32 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v42;
  *(_OWORD *)(v32 + 80) = v35;
  long long v36 = v39;
  *(_OWORD *)uint64_t v32 = v38;
  *(_OWORD *)(v32 + 16) = v36;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  ++v21;
  long long v42 = 0u;
  long long v43 = 0u;
  if (v21 != 8)
  {
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v38);
    goto LABEL_18;
  }
  BOOL v6 = v19 + 6 == a2;
LABEL_24:
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v38);
  return v6;
}

void sub_1B39F9B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    long long v10 = a3[3];
    long long v42 = a3[2];
    long long v43 = v10;
    long long v11 = a3[5];
    long long v44 = a3[4];
    long long v45 = v11;
    long long v12 = a3[1];
    long long v40 = *a3;
    long long v41 = v12;
    *a3 = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[5] = 0u;
    long long v13 = a4[2];
    long long v14 = a4[3];
    long long v15 = a4[5];
    a3[4] = a4[4];
    a3[5] = v15;
    a3[2] = v13;
    a3[3] = v14;
    long long v16 = a4[1];
    *a3 = *a4;
    a3[1] = v16;
    long long v17 = v43;
    a4[2] = v42;
    a4[3] = v17;
    long long v18 = v45;
    a4[4] = v44;
    a4[5] = v18;
    long long v19 = v41;
    *a4 = v40;
    a4[1] = v19;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
    if ((*a5)(a3, a2))
    {
      long long v20 = a2[3];
      long long v42 = a2[2];
      long long v43 = v20;
      long long v21 = a2[5];
      long long v44 = a2[4];
      long long v45 = v21;
      long long v22 = a2[1];
      long long v40 = *a2;
      long long v41 = v22;
      *a2 = 0u;
      a2[1] = 0u;
      a2[2] = 0u;
      a2[3] = 0u;
      a2[4] = 0u;
      a2[5] = 0u;
      long long v23 = a3[2];
      long long v24 = a3[3];
      long long v25 = a3[5];
      a2[4] = a3[4];
      a2[5] = v25;
      a2[2] = v23;
      a2[3] = v24;
      long long v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      long long v27 = v43;
      a3[2] = v42;
      a3[3] = v27;
      long long v28 = v45;
      a3[4] = v44;
      a3[5] = v28;
      long long v29 = v41;
      *a3 = v40;
      a3[1] = v29;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
      if ((*a5)(a2, a1))
      {
        long long v30 = a1[3];
        long long v42 = a1[2];
        long long v43 = v30;
        long long v31 = a1[5];
        long long v44 = a1[4];
        long long v45 = v31;
        long long v32 = a1[1];
        long long v40 = *a1;
        long long v41 = v32;
        *a1 = 0u;
        a1[1] = 0u;
        a1[2] = 0u;
        a1[3] = 0u;
        a1[4] = 0u;
        a1[5] = 0u;
        long long v33 = a2[2];
        long long v34 = a2[3];
        long long v35 = a2[5];
        a1[4] = a2[4];
        a1[5] = v35;
        a1[2] = v33;
        a1[3] = v34;
        long long v36 = a2[1];
        *a1 = *a2;
        a1[1] = v36;
        long long v37 = v43;
        a2[2] = v42;
        a2[3] = v37;
        long long v38 = v45;
        a2[4] = v44;
        a2[5] = v38;
        long long v39 = v41;
        *a2 = v40;
        a2[1] = v39;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
      }
    }
  }
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, a4))
  {
    long long v13 = a4[3];
    long long v55 = a4[2];
    long long v56 = v13;
    long long v14 = a4[5];
    long long v57 = a4[4];
    long long v58 = v14;
    long long v15 = a4[1];
    long long v53 = *a4;
    long long v54 = v15;
    *a4 = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    long long v16 = a5[2];
    long long v17 = a5[3];
    long long v18 = a5[5];
    a4[4] = a5[4];
    a4[5] = v18;
    a4[2] = v16;
    a4[3] = v17;
    long long v19 = a5[1];
    *a4 = *a5;
    a4[1] = v19;
    long long v20 = v56;
    a5[2] = v55;
    a5[3] = v20;
    long long v21 = v58;
    a5[4] = v57;
    a5[5] = v21;
    long long v22 = v54;
    *a5 = v53;
    a5[1] = v22;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
    if ((*a6)(a4, a3))
    {
      long long v23 = a3[3];
      long long v55 = a3[2];
      long long v56 = v23;
      long long v24 = a3[5];
      long long v57 = a3[4];
      long long v58 = v24;
      long long v25 = a3[1];
      long long v53 = *a3;
      long long v54 = v25;
      *a3 = 0u;
      a3[1] = 0u;
      a3[2] = 0u;
      a3[3] = 0u;
      a3[4] = 0u;
      a3[5] = 0u;
      long long v26 = a4[2];
      long long v27 = a4[3];
      long long v28 = a4[5];
      a3[4] = a4[4];
      a3[5] = v28;
      a3[2] = v26;
      a3[3] = v27;
      long long v29 = a4[1];
      *a3 = *a4;
      a3[1] = v29;
      long long v30 = v56;
      a4[2] = v55;
      a4[3] = v30;
      long long v31 = v58;
      a4[4] = v57;
      a4[5] = v31;
      long long v32 = v54;
      *a4 = v53;
      a4[1] = v32;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
      if ((*a6)(a3, a2))
      {
        long long v33 = a2[3];
        long long v55 = a2[2];
        long long v56 = v33;
        long long v34 = a2[5];
        long long v57 = a2[4];
        long long v58 = v34;
        long long v35 = a2[1];
        long long v53 = *a2;
        long long v54 = v35;
        *a2 = 0u;
        a2[1] = 0u;
        a2[2] = 0u;
        a2[3] = 0u;
        a2[4] = 0u;
        a2[5] = 0u;
        long long v36 = a3[2];
        long long v37 = a3[3];
        long long v38 = a3[5];
        a2[4] = a3[4];
        a2[5] = v38;
        a2[2] = v36;
        a2[3] = v37;
        long long v39 = a3[1];
        *a2 = *a3;
        a2[1] = v39;
        long long v40 = v56;
        a3[2] = v55;
        a3[3] = v40;
        long long v41 = v58;
        a3[4] = v57;
        a3[5] = v41;
        long long v42 = v54;
        *a3 = v53;
        a3[1] = v42;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
        if ((*a6)(a2, a1))
        {
          long long v43 = a1[3];
          long long v55 = a1[2];
          long long v56 = v43;
          long long v44 = a1[5];
          long long v57 = a1[4];
          long long v58 = v44;
          long long v45 = a1[1];
          long long v53 = *a1;
          long long v54 = v45;
          *a1 = 0u;
          a1[1] = 0u;
          a1[2] = 0u;
          a1[3] = 0u;
          a1[4] = 0u;
          a1[5] = 0u;
          long long v46 = a2[2];
          long long v47 = a2[3];
          long long v48 = a2[5];
          a1[4] = a2[4];
          a1[5] = v48;
          a1[2] = v46;
          a1[3] = v47;
          long long v49 = a2[1];
          *a1 = *a2;
          a1[1] = v49;
          long long v50 = v56;
          a2[2] = v55;
          a2[3] = v50;
          long long v51 = v58;
          a2[4] = v57;
          a2[5] = v51;
          long long v52 = v54;
          *a2 = v53;
          a2[1] = v52;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,SymbolOwner*>(char *a1, char *a2, char *a3, unsigned int (**a4)(uint64_t, long long *), __n128 a5)
{
  if (a1 != a2)
  {
    uint64_t v9 = a2 - a1;
    uint64_t v10 = (a2 - a1) / 96;
    if (a2 - a1 >= 97)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = &a1[96 * v11];
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>((uint64_t)a1, a4, v10, v13);
        v13 -= 96;
        --v12;
      }
      while (v12);
    }
    long long v14 = a2;
    if (a2 != a3)
    {
      long long v15 = a2;
      do
      {
        if (((unsigned int (*)(char *, char *, __n128))*a4)(v15, a1, a5))
        {
          long long v16 = *((_OWORD *)v15 + 3);
          long long v48 = *((_OWORD *)v15 + 2);
          long long v49 = v16;
          long long v17 = *((_OWORD *)v15 + 5);
          long long v50 = *((_OWORD *)v15 + 4);
          long long v51 = v17;
          long long v18 = *((_OWORD *)v15 + 1);
          long long v46 = *(_OWORD *)v15;
          long long v47 = v18;
          *(_OWORD *)long long v15 = 0u;
          *((_OWORD *)v15 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
          *((_OWORD *)v15 + 2) = 0u;
          *((_OWORD *)v15 + 3) = 0u;
          *((_OWORD *)v15 + 4) = 0u;
          *((_OWORD *)v15 + 5) = 0u;
          long long v19 = *((_OWORD *)a1 + 2);
          long long v20 = *((_OWORD *)a1 + 3);
          long long v21 = *((_OWORD *)a1 + 5);
          *((_OWORD *)v15 + 4) = *((_OWORD *)a1 + 4);
          *((_OWORD *)v15 + 5) = v21;
          *((_OWORD *)v15 + 2) = v19;
          *((_OWORD *)v15 + 3) = v20;
          long long v22 = *((_OWORD *)a1 + 1);
          *(_OWORD *)long long v15 = *(_OWORD *)a1;
          *((_OWORD *)v15 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v22;
          long long v23 = v49;
          *((_OWORD *)a1 + 2) = v48;
          *((_OWORD *)a1 + 3) = v23;
          long long v24 = v51;
          *((_OWORD *)a1 + 4) = v50;
          *((_OWORD *)a1 + 5) = v24;
          long long v25 = v47;
          *(_OWORD *)a1 = v46;
          *((_OWORD *)a1 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v25;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v46);
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>((uint64_t)a1, a4, v10, a1);
        }
        v15 += 96;
      }
      while (v15 != a3);
      long long v14 = a3;
    }
    if (v9 >= 97)
    {
      int64_t v26 = v9 / 0x60uLL;
      long long v27 = a2 - 96;
      do
      {
        long long v28 = *((_OWORD *)a1 + 3);
        long long v48 = *((_OWORD *)a1 + 2);
        long long v49 = v28;
        long long v29 = *((_OWORD *)a1 + 5);
        long long v50 = *((_OWORD *)a1 + 4);
        long long v51 = v29;
        long long v30 = *((_OWORD *)a1 + 1);
        long long v46 = *(_OWORD *)a1;
        long long v47 = v30;
        *(_OWORD *)a1 = 0u;
        *((_OWORD *)a1 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
        *((_OWORD *)a1 + 2) = 0u;
        *((_OWORD *)a1 + 3) = 0u;
        *((_OWORD *)a1 + 4) = 0u;
        *((_OWORD *)a1 + 5) = 0u;
        long long v31 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, (unsigned int (**)(_OWORD *, uint64_t))a4, v26);
        long long v32 = (const void *)*((void *)v31 + 10);
        if (v27 == v31)
        {
          if (v32) {
            CFRelease(v32);
          }
          long long v40 = v47;
          *(_OWORD *)long long v31 = v46;
          *((_OWORD *)v31 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v40;
          long long v41 = v48;
          long long v42 = v49;
          long long v43 = v51;
          *((_OWORD *)v31 + 4) = v50;
          *((_OWORD *)v31 + 5) = v43;
          *((_OWORD *)v31 + 2) = v41;
          *((_OWORD *)v31 + 3) = v42;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
        }
        else
        {
          if (v32) {
            CFRelease(v32);
          }
          long long v33 = *((_OWORD *)v27 + 1);
          *(_OWORD *)long long v31 = *(_OWORD *)v27;
          *((_OWORD *)v31 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v33;
          long long v34 = *((_OWORD *)v27 + 2);
          long long v35 = *((_OWORD *)v27 + 3);
          long long v36 = *((_OWORD *)v27 + 5);
          *((_OWORD *)v31 + 4) = *((_OWORD *)v27 + 4);
          *((_OWORD *)v31 + 5) = v36;
          *((_OWORD *)v31 + 2) = v34;
          *((_OWORD *)v31 + 3) = v35;
          long long v37 = v49;
          *((_OWORD *)v27 + 2) = v48;
          *((_OWORD *)v27 + 3) = v37;
          long long v38 = v51;
          *((_OWORD *)v27 + 4) = v50;
          *((_OWORD *)v27 + 5) = v38;
          long long v39 = v47;
          *(_OWORD *)long long v27 = v46;
          *((_OWORD *)v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v39;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>((uint64_t)a1, (uint64_t)(v31 + 96), (uint64_t (**)(_OWORD *, long long *))a4, 0xAAAAAAAAAAAAAAABLL * ((v31 + 96 - a1) >> 5));
        }
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v46);
        v27 -= 96;
      }
      while (v26-- > 2);
    }
    return v14;
  }
  return a3;
}

void sub_1B39FA204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(uint64_t a1, unsigned int (**a2)(uint64_t, long long *), uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5)))
    {
      uint64_t v10 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5)) | 1;
      unint64_t v11 = (_OWORD *)(a1 + 96 * v10);
      uint64_t v12 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2;
      if (v12 < a3 && (*a2)(a1 + 96 * v10, v11 + 6))
      {
        v11 += 6;
        uint64_t v10 = v12;
      }
      if ((((uint64_t (*)(_OWORD *, _OWORD *))*a2)(v11, v5) & 1) == 0)
      {
        long long v14 = v5[3];
        long long v31 = v5[2];
        long long v32 = v14;
        long long v15 = v5[5];
        long long v33 = v5[4];
        long long v34 = v15;
        long long v16 = v5[1];
        long long v29 = *v5;
        long long v30 = v16;
        *uint64_t v5 = 0u;
        v5[1] = 0u;
        int v5[2] = 0u;
        void v5[3] = 0u;
        void v5[4] = 0u;
        void v5[5] = 0u;
        while (1)
        {
          long long v17 = v11;
          long long v18 = (const void *)*((void *)v5 + 10);
          if (v18) {
            CFRelease(v18);
          }
          long long v19 = v11[1];
          *uint64_t v5 = *v11;
          v5[1] = v19;
          long long v20 = v11[2];
          long long v21 = v11[3];
          long long v22 = v11[5];
          void v5[4] = v11[4];
          void v5[5] = v22;
          int v5[2] = v20;
          void v5[3] = v21;
          void v11[2] = 0u;
          v11[3] = 0u;
          v11[4] = 0u;
          void v11[5] = 0u;
          *unint64_t v11 = 0u;
          v11[1] = 0u;
          if (v7 < v10) {
            break;
          }
          uint64_t v23 = (2 * v10) | 1;
          unint64_t v11 = (_OWORD *)(a1 + 96 * v23);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v23;
          }
          else if ((*a2)(a1 + 96 * v23, v11 + 6))
          {
            v11 += 6;
          }
          else
          {
            uint64_t v10 = v23;
          }
          uint64_t v5 = v17;
          if ((*a2)((uint64_t)v11, &v29))
          {
            long long v24 = (const void *)*((void *)v17 + 10);
            if (v24) {
              CFRelease(v24);
            }
            break;
          }
        }
        long long v25 = v30;
        *long long v17 = v29;
        v17[1] = v25;
        long long v26 = v31;
        long long v27 = v32;
        long long v28 = v34;
        _OWORD v17[4] = v33;
        void v17[5] = v28;
        _OWORD v17[2] = v26;
        v17[3] = v27;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v29);
      }
    }
  }
  return result;
}

void sub_1B39FA3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(_OWORD *a1, unsigned int (**a2)(_OWORD *, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[6 * v6 + 6];
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, (uint64_t)(v9 + 6)))
    {
      v9 += 6;
      uint64_t v6 = v11;
    }
    uint64_t v12 = (const void *)*((void *)a1 + 10);
    if (v12) {
      CFRelease(v12);
    }
    long long v13 = v9[1];
    *a1 = *v9;
    a1[1] = v13;
    long long v14 = v9[2];
    long long v15 = v9[3];
    long long v16 = v9[5];
    a1[4] = v9[4];
    a1[5] = v16;
    a1[2] = v14;
    a1[3] = v15;
    void v9[2] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    void v9[5] = 0u;
    *uint64_t v9 = 0u;
    v9[1] = 0u;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(_OWORD *, long long *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (_OWORD *)(a1 + 96 * (v4 >> 1));
    uint64_t v9 = (_OWORD *)(a2 - 96);
    if ((*a3)(v8, (long long *)(a2 - 96)))
    {
      long long v10 = v9[3];
      long long v25 = v9[2];
      long long v26 = v10;
      long long v11 = v9[5];
      long long v27 = v9[4];
      long long v28 = v11;
      long long v12 = v9[1];
      long long v23 = *v9;
      long long v24 = v12;
      *uint64_t v9 = 0u;
      v9[1] = 0u;
      void v9[2] = 0u;
      v9[3] = 0u;
      v9[4] = 0u;
      void v9[5] = 0u;
      while (1)
      {
        long long v13 = v8;
        long long v14 = (const void *)*((void *)v9 + 10);
        if (v14) {
          CFRelease(v14);
        }
        long long v15 = v8[1];
        *uint64_t v9 = *v8;
        v9[1] = v15;
        long long v16 = v8[2];
        long long v17 = v8[3];
        long long v18 = v8[5];
        v9[4] = v8[4];
        void v9[5] = v18;
        void v9[2] = v16;
        v9[3] = v17;
        void v8[2] = 0u;
        v8[3] = 0u;
        v8[4] = 0u;
        void v8[5] = 0u;
        *uint64_t v8 = 0u;
        v8[1] = 0u;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_OWORD *)(a1 + 96 * v7);
        uint64_t v9 = v13;
        if (((*a3)(v8, &v23) & 1) == 0)
        {
          long long v19 = (const void *)*((void *)v13 + 10);
          if (v19) {
            CFRelease(v19);
          }
          break;
        }
      }
      long long v20 = v26;
      v13[2] = v25;
      void v13[3] = v20;
      long long v21 = v28;
      void v13[4] = v27;
      _OWORD v13[5] = v21;
      long long v22 = v24;
      *long long v13 = v23;
      v13[1] = v22;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v23);
    }
  }
}

void sub_1B39FA624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *long long v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B39FA8F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes&&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  unint64_t v15 = operator new(0x30uLL);
  v25[0] = (uint64_t)v15;
  v25[1] = a1 + 16;
  *unint64_t v15 = 0;
  v15[1] = v7;
  *((_OWORD *)v15 + ktrace_session_set_default_event_names_enabled(global_session, 1) = **a4;
  _OWORD v15[4] = 0;
  _OWORD v15[5] = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t v11 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100](v25, 0);
  return v11;
}

void sub_1B39FAB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      CS::TypeRef::~TypeRef((CS::TypeRef *)(v2 + 32));
    }
    operator delete((void *)v2);
  }
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>(uint64_t a1, void *a2, _OWORD *a3, void *a4)
{
  unint64_t v8 = a2[1] ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  float v16 = operator new(0x28uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *float v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *a3;
  v16[4] = *a4;
  *a4 = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v26[0];
    }
  }
  unint64_t v12 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_1B39FAE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,CS::TypeRef>(uint64_t a1, void *a2, _OWORD *a3, long long *a4)
{
  unint64_t v8 = a2[1] ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  float v16 = operator new(0x30uLL);
  v27[0] = (uint64_t)v16;
  v27[1] = a1 + 16;
  *float v16 = 0;
  v16[1] = v8;
  long long v17 = *a4;
  *((_OWORD *)v16 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *a3;
  *((_OWORD *)v16 + 2) = v17;
  *(void *)a4 = 0;
  *((void *)a4 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9) {
          v25 %= v9;
        }
      }
      else
      {
        v25 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  unint64_t v12 = (void *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100](v27, 0);
  return v12;
}

void sub_1B39FB0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<PrepassOp>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  unint64_t v4 = (void *)a2[1];
  while (v2 != v3)
  {
    *(v4 - 2) = 0;
    *(v4 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
    v4 -= 2;
    uint64_t v5 = *(void *)(v2 - 16);
    uint64_t v6 = *(void *)(v2 - 8);
    v2 -= 16;
    *unint64_t v4 = v5;
    v4[1] = v6;
    *(void *)(v2 + 8) = 0;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *__n128 result = (uint64_t)v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<PrepassOp>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    PrepassOp::~PrepassOp((PrepassOp *)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v5 = 0;
      char v6 = a1;
      do
      {
        uint64_t v7 = v4;
        if (v6[2] < *v6)
        {
          unint64_t v8 = v6[3];
          unint64_t v15 = v6[2];
          unint64_t v16 = v8;
          v6[3] = 0;
          unint64_t v9 = *v6;
          uint8x8_t v10 = (const void *)v4[1];
          uint64_t v11 = v5;
          while (1)
          {
            uint64_t v12 = (char *)a1 + v11;
            *(unint64_t *)((char *)a1 + v11 + 16) = v9;
            if (v10) {
              _Block_release(v10);
            }
            *((void *)v12 + 3) = *((void *)v12 + 1);
            *((void *)v12 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
            if (!v11) {
              break;
            }
            uint8x8_t v10 = 0;
            unint64_t v9 = *(unint64_t *)((char *)a1 + v11 - 16);
            v11 -= 16;
            if (v15 >= v9)
            {
              uint64_t v13 = (unint64_t *)((char *)a1 + v11 + 16);
              goto LABEL_12;
            }
          }
          uint64_t v13 = a1;
LABEL_12:
          unint64_t v14 = v16;
          *uint64_t v13 = v15;
          v13[1] = v14;
          unint64_t v16 = 0;
          PrepassOp::~PrepassOp((PrepassOp *)&v15);
        }
        unint64_t v4 = v7 + 2;
        v5 += 16;
        char v6 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
}

void sub_1B39FB6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 2;
    if (result + 2 != a2)
    {
      unint64_t v4 = result + 3;
      do
      {
        uint64_t v5 = v3;
        if (result[2] < *result)
        {
          unint64_t v6 = result[3];
          unint64_t v11 = result[2];
          unint64_t v12 = v6;
          result[3] = 0;
          unint64_t v7 = *result;
          unint64_t v8 = (const void *)v5[1];
          unint64_t v9 = v4;
          do
          {
            *(v9 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v7;
            if (v8) {
              _Block_release(v8);
            }
            unint64_t v8 = 0;
            *unint64_t v9 = *(v9 - 2);
            *(v9 - 2) = 0;
            unint64_t v7 = *(v9 - 5);
            v9 -= 2;
          }
          while (v11 < v7);
          unint64_t v10 = v12;
          *(v9 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v11;
          *unint64_t v9 = v10;
          unint64_t v12 = 0;
          PrepassOp::~PrepassOp((PrepassOp *)&v11);
        }
        uint64_t v3 = v5 + 2;
        v4 += 2;
        __n128 result = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

void sub_1B39FB794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 < *a1)
  {
    unint64_t v5 = a1[1];
    if (v4 < v3)
    {
      a1[1] = a3[1];
      a3[1] = v5;
      uint64_t v6 = 1;
LABEL_9:
      a2 = a3;
      goto LABEL_10;
    }
    a1[1] = a2[1];
    a2[1] = v5;
    unint64_t v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    if (*a3 < v10)
    {
      unint64_t v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      uint64_t v6 = 2;
      a1 = a2;
      goto LABEL_9;
    }
    return 1;
  }
  if (v4 >= v3) {
    return 0;
  }
  unint64_t v7 = a2[1];
  a2[1] = a3[1];
  a3[1] = v7;
  unint64_t v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  if (*a2 >= *a1) {
    return 1;
  }
  unint64_t v9 = a1[1];
  a1[1] = a2[1];
  a2[1] = v9;
  uint64_t v6 = 2;
LABEL_10:
  unint64_t v12 = *a1;
  *a1 = *a2;
  *a2 = v12;
  return v6;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v16 = *a1;
  unint64_t v3 = v16;
  unint64_t v17 = v4;
  a1[1] = 0;
  if (v3 >= *(a2 - 2))
  {
    unint64_t v7 = a1 + 2;
    do
    {
      unint64_t v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }
    while (v3 >= *v5);
  }
  else
  {
    unint64_t v5 = a1;
    do
    {
      unint64_t v6 = v5[2];
      v5 += 2;
    }
    while (v3 >= v6);
  }
  if (v5 < a2)
  {
    do
    {
      unint64_t v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v8);
  }
  while (v5 < a2)
  {
    unint64_t v9 = v5[1];
    v5[1] = a2[1];
    a2[1] = v9;
    unint64_t v10 = *v5;
    *unint64_t v5 = *a2;
    *a2 = v10;
    unint64_t v3 = v16;
    do
    {
      unint64_t v11 = v5[2];
      v5 += 2;
    }
    while (v16 >= v11);
    do
    {
      unint64_t v12 = *(a2 - 2);
      a2 -= 2;
    }
    while (v16 < v12);
  }
  if (v5 - 2 == a1)
  {
    unint64_t v14 = (const void *)*(v5 - 1);
    *(v5 - 2) = v3;
    if (v14) {
      _Block_release(v14);
    }
  }
  else
  {
    *a1 = *(v5 - 2);
    uint64_t v13 = (const void *)a1[1];
    if (v13)
    {
      _Block_release(v13);
      unint64_t v3 = v16;
    }
    a1[1] = *(v5 - 1);
    *(v5 - 2) = v3;
    *(v5 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  }
  *(v5 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v17;
  unint64_t v17 = 0;
  PrepassOp::~PrepassOp((PrepassOp *)&v16);
  return v5;
}

void sub_1B39FB9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = 0;
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v20 = *a1;
  unint64_t v21 = v6;
  a1[1] = 0;
  do
  {
    unint64_t v7 = a1[v4 + 2];
    v4 += 2;
  }
  while (v7 < v5);
  unint64_t v8 = &a1[v4];
  if (v4 == 2)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      unint64_t v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (v10 >= v5);
  }
  else
  {
    do
    {
      unint64_t v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 >= v5);
  }
  unint64_t v11 = (uint64_t *)&a1[v4];
  if (v8 < a2)
  {
    unint64_t v12 = (uint64_t *)a2;
    do
    {
      uint64_t v13 = v11[1];
      v11[1] = v12[1];
      v12[1] = v13;
      uint64_t v14 = *v11;
      *unint64_t v11 = *v12;
      *unint64_t v12 = v14;
      unint64_t v5 = v20;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }
      while (v15 < v20);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (v16 >= v20);
    }
    while (v11 < v12);
  }
  if (v11 - 2 == (uint64_t *)a1)
  {
    unint64_t v18 = (const void *)*(v11 - 1);
    *(v11 - 2) = v5;
    if (v18) {
      _Block_release(v18);
    }
  }
  else
  {
    *a1 = *(v11 - 2);
    unint64_t v17 = (const void *)a1[1];
    if (v17)
    {
      _Block_release(v17);
      unint64_t v5 = v20;
    }
    a1[1] = *(v11 - 1);
    *(v11 - 2) = v5;
    *(v11 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  }
  *(v11 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v21;
  unint64_t v21 = 0;
  PrepassOp::~PrepassOp((PrepassOp *)&v20);
  return v11 - 2;
}

void sub_1B39FBB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(a2 - 2) < *a1)
      {
        unint64_t v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v5;
        unint64_t v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
      }
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a2 - 2);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return v4;
    default:
      unint64_t v7 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a1 + 4);
      unint64_t v8 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (*v8 >= *v7)
  {
LABEL_14:
    unint64_t v7 = v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2) {
      return 1;
    }
  }
  unint64_t v11 = v8[1];
  unint64_t v20 = *v8;
  unint64_t v21 = v11;
  v8[1] = 0;
  unint64_t v12 = *v7;
  uint64_t v13 = v9;
  while (1)
  {
    uint64_t v14 = (unint64_t *)((char *)a1 + v13);
    unint64_t v15 = v20;
    uint64_t v16 = *(unint64_t *)((char *)a1 + v13 + 40);
    void v14[6] = v12;
    v14[7] = v16;
    _OWORD v14[5] = 0;
    if (v13 == -32) {
      break;
    }
    unint64_t v12 = v14[2];
    v13 -= 16;
    if (v15 >= v12)
    {
      unint64_t v17 = (unint64_t *)((char *)a1 + v13 + 48);
      goto LABEL_12;
    }
  }
  unint64_t v17 = a1;
LABEL_12:
  unint64_t v18 = v21;
  *unint64_t v17 = v15;
  v17[1] = v18;
  unint64_t v21 = 0;
  if (++v10 != 8)
  {
    PrepassOp::~PrepassOp((PrepassOp *)&v20);
    goto LABEL_14;
  }
  BOOL v4 = v8 + 2 == a2;
  PrepassOp::~PrepassOp((PrepassOp *)&v20);
  return v4;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    unint64_t v9 = a3[1];
    a3[1] = a4[1];
    a4[1] = v9;
    unint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (*a3 < *a2)
    {
      unint64_t v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      unint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if (*a2 < *a1)
      {
        unint64_t v13 = a1[1];
        a1[1] = a2[1];
        a2[1] = v13;
        unint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    unint64_t v11 = a4[1];
    a4[1] = a5[1];
    a5[1] = v11;
    unint64_t v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    if (*a4 < *a3)
    {
      unint64_t v13 = a3[1];
      a3[1] = a4[1];
      a4[1] = v13;
      unint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      if (*a3 < *a2)
      {
        unint64_t v15 = a2[1];
        a2[1] = a3[1];
        a3[1] = v15;
        unint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        if (*a2 < *a1)
        {
          unint64_t v17 = a1[1];
          a1[1] = a2[1];
          a2[1] = v17;
          unint64_t v18 = *a1;
          *a1 = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,PrepassOp *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((unint64_t *)v6 != a3)
    {
      unint64_t v14 = (unint64_t *)v6;
      do
      {
        if (*v14 < *a1)
        {
          unint64_t v15 = v14[1];
          v14[1] = a1[1];
          a1[1] = v15;
          unint64_t v16 = *v14;
          *unint64_t v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,PrepassOp *>(a1, v6, a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (unint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t)a4 - a1;
    int64_t v7 = (unint64_t)(a3 - 2) >> 1;
    if (v7 >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v21 = v4;
      uint64_t v22 = v5;
      uint64_t v8 = v6 >> 3;
      uint64_t v9 = (v6 >> 3) + 1;
      unint64_t v10 = (unint64_t *)(a1 + 16 * v9);
      uint64_t v11 = v8 + 2;
      if (v8 + 2 >= a3)
      {
        unint64_t v12 = *v10;
      }
      else
      {
        unint64_t v12 = *v10;
        unint64_t v13 = v10[2];
        if (*v10 <= v13) {
          unint64_t v12 = v10[2];
        }
        if (*v10 < v13)
        {
          v10 += 2;
          uint64_t v9 = v11;
        }
      }
      if (v12 >= *a4)
      {
        unint64_t v14 = a4[1];
        unint64_t v19 = *a4;
        unint64_t v20 = v14;
        a4[1] = 0;
        while (1)
        {
          unint64_t v15 = v10;
          *a4 = v12;
          a4[1] = v10[1];
          v10[1] = 0;
          if (v7 < v9) {
            break;
          }
          uint64_t v16 = (2 * v9) | 1;
          unint64_t v10 = (unint64_t *)(a1 + 16 * v16);
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            unint64_t v12 = *v10;
            uint64_t v9 = v16;
          }
          else
          {
            unint64_t v12 = *v10;
            unint64_t v17 = v10[2];
            if (*v10 <= v17) {
              unint64_t v12 = v10[2];
            }
            if (*v10 >= v17) {
              uint64_t v9 = v16;
            }
            else {
              v10 += 2;
            }
          }
          unint64_t v18 = v19;
          a4 = v15;
          if (v12 < v19) {
            goto LABEL_23;
          }
        }
        unint64_t v18 = v19;
LABEL_23:
        *unint64_t v15 = v18;
        v15[1] = v20;
        unint64_t v20 = 0;
        PrepassOp::~PrepassOp((PrepassOp *)&v19);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,PrepassOp *>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v7 = a1[1];
    unint64_t v13 = *a1;
    unint64_t v14 = v7;
    a1[1] = 0;
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == (unint64_t *)(a2 - 16))
    {
      *uint64_t v8 = v13;
      unint64_t v12 = (const void *)v8[1];
      if (v12) {
        _Block_release(v12);
      }
      v9[1] = v14;
      unint64_t v14 = 0;
    }
    else
    {
      *uint64_t v8 = *(void *)(a2 - 16);
      unint64_t v10 = (const void *)v8[1];
      if (v10) {
        _Block_release(v10);
      }
      v9[1] = *(void *)(a2 - 8);
      unint64_t v11 = v14;
      *(void *)(a2 - 16) = v13;
      *(void *)(a2 - 8) = v11;
      unint64_t v14 = 0;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>((uint64_t)a1, (uint64_t)(v9 + 2), a3, ((char *)(v9 + 2) - (char *)a1) >> 4);
    }
    PrepassOp::~PrepassOp((PrepassOp *)&v13);
  }
}

void sub_1B39FC21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[2 * v5 + 2];
    if (2 * v5 + 2 >= a3)
    {
      unint64_t v9 = *v8;
      uint64_t v5 = (2 * v5) | 1;
    }
    else
    {
      unint64_t v9 = *v8;
      unint64_t v10 = a1[2 * v5 + 4];
      if (*v8 <= v10) {
        unint64_t v9 = a1[2 * v5 + 4];
      }
      if (*v8 >= v10)
      {
        uint64_t v5 = (2 * v5) | 1;
      }
      else
      {
        uint64_t v8 = &a1[2 * v5 + 4];
        uint64_t v5 = 2 * v5 + 2;
      }
    }
    *a1 = v9;
    unint64_t v11 = (const void *)a1[1];
    if (v11) {
      _Block_release(v11);
    }
    a1[1] = v8[1];
    v8[1] = 0;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = (unint64_t *)(a1 + 16 * v6);
    uint64_t v8 = (unint64_t *)(a2 - 16);
    unint64_t v9 = *v7;
    if (*v7 < *(void *)(a2 - 16))
    {
      unint64_t v10 = *(void *)(a2 - 8);
      unint64_t v14 = *(void *)(a2 - 16);
      unint64_t v15 = v10;
      *(void *)(a2 - 8) = 0;
      do
      {
        unint64_t v11 = v7;
        *uint64_t v8 = v9;
        unint64_t v12 = v14;
        v8[1] = v7[1];
        v7[1] = 0;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (unint64_t *)(a1 + 16 * v6);
        unint64_t v9 = *v7;
        uint64_t v8 = v11;
      }
      while (*v7 < v12);
      unint64_t v13 = v15;
      *unint64_t v11 = v12;
      v11[1] = v13;
      unint64_t v15 = 0;
      PrepassOp::~PrepassOp((PrepassOp *)&v14);
    }
  }
}

void std::vector<PrepassOp>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        PrepassOp::~PrepassOp((PrepassOp *)(v4 - 16));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void OUTLINED_FUNCTION_4_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_7_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_9_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_10_0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_12(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(void *)(a3 + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_13_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

uint64_t trace_set_enable(int a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v4 = 0x1800000001;
  int v5 = 3;
  int v6 = a1;
  if ((sysctl(v4, 4u, 0, 0, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_set_enable_cold_1();
  }
  *__error() = v2;
  unsigned int v3 = *__error();
  if (v3 <= 1) {
    return 1;
  }
  else {
    return v3;
  }
}

uint64_t trace_get_bufinfo(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = 5;
  *(void *)int v5 = 0x1800000001;
  size_t v4 = 20;
  if ((sysctl(v5, 3u, a1, &v4, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_get_bufinfo_cold_1();
  }
  *__error() = v2;
  unsigned int v3 = *__error();
  if (v3 <= 1) {
    return 1;
  }
  else {
    return v3;
  }
}

uint64_t trace_readtrace(void *a1, size_t *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v7 = 10;
  *(void *)int v6 = 0x1800000001;
  if (sysctl(v6, 3u, a1, a2, 0, 0) < 0)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      trace_readtrace_cold_1();
    }
    *__error() = v4;
    unsigned int v5 = *__error();
    if (v5 <= 1) {
      return 1;
    }
    else {
      return v5;
    }
  }
  else
  {
    uint64_t result = 0;
    *a2 <<= 6;
  }
  return result;
}

uint64_t trace_set_filter(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = 22;
  *(void *)unsigned int v5 = 0x1800000001;
  size_t v4 = 0x2000;
  if ((sysctl(v5, 3u, a1, &v4, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_set_filter_cold_1();
  }
  *__error() = v2;
  unsigned int v3 = *__error();
  if (v3 <= 1) {
    return 1;
  }
  else {
    return v3;
  }
}

uint64_t trace_parse_filter(const char *a1, void *a2)
{
  if (!strcmp(a1, "ALL"))
  {
    memset(a2, 255, 0x2000uLL);
    return 0;
  }
  bzero(a2, 0x2000uLL);
  size_t v4 = strdup(a1);
  if (!v4) {
    return 12;
  }
  unsigned int v5 = v4;
  __stringp = v4;
  uint64_t v6 = (uint64_t)strsep(&__stringp, ",");
  if (!v6) {
    goto LABEL_37;
  }
  while (1)
  {
    unint64_t v13 = (char *)v6;
    int v7 = *(char *)v6;
    if (v7 != 67)
    {
      if (v7 != 83)
      {
        if (*(unsigned char *)v6)
        {
          *__error() = 22;
          int v11 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            trace_parse_filter_cold_1();
          }
        }
        else
        {
          *__error() = 22;
          int v11 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            trace_parse_filter_cold_8();
          }
        }
        goto LABEL_36;
      }
      unint64_t v8 = strtoul((const char *)(v6 + 1), &v13, 16);
      if ((char *)(v6 + 1) == v13)
      {
        *__error() = 22;
        int v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          trace_parse_filter_cold_5();
        }
        goto LABEL_36;
      }
      if (*v13)
      {
        *__error() = 22;
        int v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          trace_parse_filter_cold_7();
        }
        goto LABEL_36;
      }
      if (v8 >= 0x10000)
      {
        *__error() = 34;
        int v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          trace_parse_filter_cold_6();
        }
        goto LABEL_36;
      }
      *((unsigned char *)a2 + (v8 >> 3)) |= 1 << (v8 & 7);
      goto LABEL_15;
    }
    unint64_t v9 = strtoul((const char *)(v6 + 1), &v13, 0);
    if ((char *)(v6 + 1) == v13) {
      break;
    }
    if (*v13)
    {
      *__error() = 22;
      int v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        trace_parse_filter_cold_4();
      }
      goto LABEL_36;
    }
    if (v9 > 0xFF)
    {
      *__error() = 34;
      int v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        trace_parse_filter_cold_3();
      }
      goto LABEL_36;
    }
    for (int i = 0; i != 256; ++i)
      *((unsigned char *)a2 + ((unint64_t)(i & 0xF8 | (v9 << 8)) >> 3)) |= 1 << (i & 7);
LABEL_15:
    uint64_t v6 = (uint64_t)strsep(&__stringp, ",");
    if (!v6) {
      goto LABEL_37;
    }
  }
  *__error() = 22;
  int v11 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_parse_filter_cold_2();
  }
LABEL_36:
  *__error() = v11;
  uint64_t v6 = 1;
LABEL_37:
  free(v5);
  return v6;
}

uint64_t trace_set_pid_filter(int a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)int v11 = 0x1800000001;
  if (a1) {
    int v2 = 11;
  }
  else {
    int v2 = 14;
  }
  int v12 = v2;
  v8[0] = 0x80000;
  v8[1] = a2;
  uint64_t v9 = 1;
  int v10 = 0;
  size_t v7 = 20;
  int v3 = sysctl(v11, 3u, v8, &v7, 0, 0);
  uint64_t result = 0;
  if (v3 < 0)
  {
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      trace_set_pid_filter_cold_1();
    }
    *__error() = v5;
    unsigned int v6 = *__error();
    if (v6 <= 1) {
      return 1;
    }
    else {
      return v6;
    }
  }
  return result;
}

uint64_t trace_readcpumap(void *a1)
{
  if (trace_readcpumap_onceToken[0] != -1) {
    dispatch_once(trace_readcpumap_onceToken, &__block_literal_global_10);
  }
  uint64_t v2 = trace_readcpumap_cpumap_header;
  if (!trace_readcpumap_cpumap_header) {
    return 0;
  }
  *a1 = trace_readcpumap_cpumap_header + 8;
  return *(unsigned int *)(v2 + 4);
}

void __trace_readcpumap_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  trace_readcpumap_cpumap_header = (uint64_t)malloc_type_malloc(0x1000uLL, 0xB66A7BDCuLL);
  int v2 = 24;
  size_t v0 = 4096;
  *(void *)uint64_t v1 = 0x1800000001;
  if (sysctl(v1, 3u, (void *)trace_readcpumap_cpumap_header, &v0, 0, 0)
    || v0 > 0x1000
    || *(_DWORD *)trace_readcpumap_cpumap_header != 1437204737)
  {
    free((void *)trace_readcpumap_cpumap_header);
    trace_readcpumap_cpumap_header = 0;
  }
}

uint64_t trace_initialize(int a1)
{
  return trace_initialize_bufs(a1 << 14);
}

uint64_t trace_initialize_bufs(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = trace_remove_internal();
  if (!result)
  {
    *(void *)int v5 = 0x1800000001;
    int v6 = 4;
    int v7 = a1;
    if (sysctl(v5, 4u, 0, 0, 0, 0) < 0)
    {
      int v3 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        trace_initialize_bufs_cold_1();
      }
    }
    else
    {
      int v6 = 6;
      if ((sysctl(v5, 3u, 0, 0, 0, 0) & 0x80000000) == 0) {
        return 0;
      }
      int v3 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        trace_initialize_bufs_cold_2();
      }
    }
    *__error() = v3;
    unsigned int v4 = *__error();
    if (v4 <= 1) {
      return 1;
    }
    else {
      return v4;
    }
  }
  return result;
}

uint64_t trace_remove_internal()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v2 = xmmword_1B3A73378;
  uint64_t v3 = 0;
  if ((sysctl((int *)&v2, 3u, 0, 0, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  unsigned int v1 = *__error();
  if (v1 <= 1) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t trace_set_flags(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)int v5 = 0x1800000001;
  int v6 = 1;
  int v7 = a1;
  size_t v4 = 0;
  if ((sysctl(v5, 4u, 0, &v4, 0, 0) & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_set_flags_cold_1();
  }
  *__error() = v2;
  unsigned int v3 = *__error();
  if (v3 <= 1) {
    return 1;
  }
  else {
    return v3;
  }
}

uint64_t trace_set_event_match_disable(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 32);
  *(_OWORD *)&v10[8] = *(_OWORD *)(a1 + 8);
  long long v2 = *(_OWORD *)(a1 + 24);
  long long v3 = *(_OWORD *)(a2 + 8);
  uint64_t v11 = 0;
  long long v12 = v3;
  *(_OWORD *)&v10[24] = v2;
  *(_DWORD *)int v10 = *(_DWORD *)a1;
  LODWORD(v1ktrace_session_set_default_event_names_enabled(global_session, 1) = *(_DWORD *)a2;
  long long v13 = *(_OWORD *)(a2 + 24);
  size_t v7 = 80;
  *(void *)uint64_t v8 = 0x1800000001;
  int v9 = 26;
  uint64_t result = sysctl(v8, 3u, v10, &v7, 0, 0);
  if (result)
  {
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      trace_set_event_match_disable_cold_1();
    }
    *__error() = v5;
    unsigned int v6 = *__error();
    if (v6 <= 1) {
      return 1;
    }
    else {
      return v6;
    }
  }
  return result;
}

uint64_t trace_wait(size_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = 23;
  size_t v2 = a1;
  *(void *)long long v3 = 0x1800000001;
  return sysctl(v3, 3u, 0, &v2, 0, 0);
}

uint64_t trace_free(void *a1)
{
  if (pthread_mutex_lock(&trace_buffer_mutex)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v2 = 0;
  while (trace_buffer_cache[v2])
  {
    if (++v2 == 16) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  trace_buffer_cache[v2] = (uint64_t)a1;
  if (v2 * 8)
  {
    madvise(a1, trace_buffer_size, 7);
  }
  else if (pthread_cond_signal(&trace_buffer_cond))
  {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = pthread_mutex_unlock(&trace_buffer_mutex);
  if (result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return result;
}

uint64_t trace_collect(void *a1, size_t *a2, _DWORD *a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a3) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t result = trace_get_bufinfo(&v14);
  if (result) {
    return result;
  }
  uint64_t result = 55;
  if ((v15 & 0x80000000) == 0) {
    return result;
  }
  int v7 = v14;
  if (!v14) {
    return result;
  }
  *a3 = v15;
  unint64_t v8 = (uint64_t)v7 << 6;
  if (trace_buffer_size)
  {
    if (v8 > trace_buffer_size) {
      return 37;
    }
  }
  else
  {
    trace_buffer_std::string::size_type size = (uint64_t)v7 << 6;
  }
  *a2 = v8;
  if (pthread_mutex_lock(&trace_buffer_mutex)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  uint64_t v9 = 0;
  while (1)
  {
    while (!trace_buffer_cache[v9])
    {
      if (++v9 == 16) {
        goto LABEL_18;
      }
    }
    if (v9 != 16) {
      break;
    }
LABEL_18:
    if (trace_buffer_count == 16)
    {
      int v10 = pthread_cond_wait(&trace_buffer_cond, &trace_buffer_mutex);
      uint64_t v9 = 0;
      if (v10) {
        ktrace_postprocess_file_internal_cold_1();
      }
    }
    else
    {
      trace_buffer_cache[0] = (uint64_t)malloc_type_malloc(trace_buffer_size, 0x6526605DuLL);
      if (trace_buffer_cache[0])
      {
        uint64_t v12 = 0;
        ++trace_buffer_count;
        goto LABEL_28;
      }
      int v11 = pthread_cond_wait(&trace_buffer_cond, &trace_buffer_mutex);
      uint64_t v9 = 0;
      if (v11) {
        ktrace_postprocess_file_internal_cold_1();
      }
    }
  }
  if (v9)
  {
    uint64_t v12 = v9;
    madvise((void *)trace_buffer_cache[v9], trace_buffer_size, 8);
  }
  else
  {
    uint64_t v12 = 0;
  }
LABEL_28:
  long long v13 = (void *)trace_buffer_cache[v12];
  trace_buffer_cache[v12] = 0;
  if (pthread_mutex_unlock(&trace_buffer_mutex)) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!v13) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *a1 = v13;
  return trace_readtrace(v13, a2);
}

BOOL trace_enumerate(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    char v4 = 6;
  }
  else {
    char v4 = 5;
  }
  unint64_t v5 = a2 >> v4;
  if (a2 >> v4)
  {
    unint64_t v8 = 0;
    while (!(*(unsigned int (**)(uint64_t, unint64_t))(a4 + 16))(a4, a1 + (v8 << v4)))
    {
      if (v5 == ++v8)
      {
        unint64_t v8 = v5;
        return v8 == v5;
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  return v8 == v5;
}

uint64_t trace_last_trace_point(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3 = 32;
  if (a3) {
    unint64_t v3 = 64;
  }
  char v4 = 5;
  if (a3) {
    char v4 = 6;
  }
  uint64_t v5 = a1 + (((a2 >> v4) - 1) << v4);
  if (v3 <= a2) {
    return v5;
  }
  else {
    return 0;
  }
}

void trace_readcurthreadmap(void **a1, _DWORD *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!a2) {
    ktrace_postprocess_file_internal_cold_1();
  }
  size_t v7 = 263168;
  char v4 = malloc_type_malloc(0x40400uLL, 0x526E2A4CuLL);
  *a1 = v4;
  if (!v4) {
    ktrace_postprocess_file_internal_cold_1();
  }
  *(void *)unint64_t v8 = 0x1800000001;
  int v9 = 21;
  if (sysctl(v8, 3u, v4, &v7, 0, 0) < 0)
  {
    int v6 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      trace_readcurthreadmap_cold_4();
    }
    *__error() = v6;
    free(*a1);
    LODWORD(v5) = 0;
    *a1 = 0;
  }
  else
  {
    unint64_t v5 = (unint64_t)(int)v7 >> 5;
  }
  *a2 = v5;
}

int *vfs_trace_paths()
{
  uint64_t result = (int *)sysctlbyname("vfs.generic.trace_paths", 0, 0, 0, 0);
  if (result)
  {
    int v1 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      vfs_trace_paths_cold_1();
    }
    uint64_t result = __error();
    *uint64_t result = v1;
  }
  return result;
}

void vnode_path_map_update(CFDictionaryRef *a1, int a2, uint64_t a3, int a4)
{
  if ((a2 & 0xFFFFFFFC) == 0x3010094)
  {
    if (a4)
    {
      uint64_t v12 = *(const void **)(a3 + 8);
      long long v13 = *(const void **)(a3 + 16);
    }
    else
    {
      uint64_t v12 = (const void *)*(unsigned int *)(a3 + 8);
      long long v13 = (const void *)*(unsigned int *)(a3 + 12);
    }
    CFStringRef Value = (const char *)CFDictionaryGetValue(a1[1], v12);
    unint64_t v18 = a1[1];
    if (Value)
    {
      unint64_t v19 = strdup(Value);
      unint64_t v20 = v18;
      uint64_t v21 = v13;
LABEL_25:
      CFDictionarySetValue(v20, v21, v19);
      return;
    }
    CFDictionaryRemoveValue(v18, v13);
  }
  else
  {
    if ((a2 & 0xFFFFFFFC) != 0x3010090) {
      abort();
    }
    if (a4)
    {
      unint64_t v5 = (char *)(a3 + 8);
      uint64_t v6 = *(void *)(a3 + 8);
      size_t v7 = *(const void **)(a3 + 40);
      unint64_t v8 = (char *)(a3 + 16);
      unint64_t v9 = a3 + 32;
      uint64_t v10 = (int *)(a3 + 48);
      size_t v11 = 8;
    }
    else
    {
      unint64_t v5 = (char *)(a3 + 8);
      uint64_t v6 = *(unsigned int *)(a3 + 8);
      size_t v7 = (const void *)*(unsigned int *)(a3 + 24);
      unint64_t v8 = (char *)(a3 + 12);
      unint64_t v9 = a3 + 20;
      uint64_t v10 = (int *)(a3 + 28);
      size_t v11 = 4;
    }
    int v14 = *v10;
    uint64_t v15 = (char *)CFDictionaryGetValue(*a1, v7);
    int v16 = v15;
    if (v14)
    {
      if (v15) {
        free(v15);
      }
      uint64_t v22 = (char *)malloc_type_calloc(1uLL, 0x410uLL, 0x1000040580BD41FuLL);
      if (!v22) {
        ktrace_postprocess_file_internal_cold_1();
      }
      int v16 = v22;
      CFDictionarySetValue(*a1, v7, v22);
      *((void *)v16 + 129) = v6;
      unint64_t v5 = v8;
    }
    else if (!v15)
    {
      return;
    }
    if ((unint64_t)v5 <= v9)
    {
      size_t v23 = strlen(v16);
      unint64_t v24 = v11 - v23 + 1024;
      do
      {
        if (v23 + 1 >= 0x402) {
          ktrace_postprocess_file_internal_cold_1();
        }
        v24 -= v11;
        if (v24 < v11) {
          break;
        }
        memcpy(&v16[v23], v5, v11);
        v23 += v11;
        v5 += 8;
      }
      while ((unint64_t)v5 <= v9);
    }
    if ((v14 & 2) != 0)
    {
      CFDictionaryRemoveValue(*a1, v7);
      unint64_t v20 = a1[1];
      uint64_t v21 = (const void *)*((void *)v16 + 129);
      unint64_t v19 = v16;
      goto LABEL_25;
    }
  }
}

void vnode_path_map_destroy(CFDictionaryRef *a1)
{
  if (a1)
  {
    CFDictionaryRef v2 = *a1;
    if (v2)
    {
      CFIndex Count = CFDictionaryGetCount(v2);
      if (Count)
      {
        uint64_t v4 = Count;
        unint64_t v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
        CFDictionaryGetKeysAndValues(*a1, 0, v5);
        if (v4 >= 1)
        {
          uint64_t v6 = (void **)v5;
          do
          {
            size_t v7 = *v6++;
            free(v7);
            --v4;
          }
          while (v4);
        }
        free(v5);
      }
      CFRelease(*a1);
    }
    CFDictionaryRef v8 = a1[1];
    if (v8) {
      CFRelease(v8);
    }
    free(a1);
  }
}

CFMutableDictionaryRef ktrace_set_vnode_paths_enabled(CFMutableDictionaryRef result, int a2)
{
  if (!result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  CFMutableDictionaryRef v2 = result;
  if ((*((_WORD *)result + 112) & 3) != 0) {
    ktrace_set_thread_cputime_enabled_cold_4();
  }
  if (*((_DWORD *)result + 67)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = a2 == 0;
  }
  if (!v3)
  {
    *((_DWORD *)result + 67) = 1;
    uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *((void *)v2 + 50) = v4;
    *uint64_t v4 = CFDictionaryCreateMutable(0, 0, &int_key_callbacks, 0);
    uint64_t result = CFDictionaryCreateMutable(0, 0, &int_key_callbacks, &str_value_callbacks);
    v4[1] = result;
    if (!*v4 || !result) {
      ktrace_postprocess_file_internal_cold_1();
    }
  }
  return result;
}

uint64_t ktrace_get_vnode_paths_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return *(unsigned int *)(a1 + 268);
}

const void *ktrace_get_path_for_vp(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_postprocess_file_internal_cold_1();
  }
  if (!*(_DWORD *)(a1 + 268)) {
    return 0;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(*(void *)(a1 + 400) + 8);

  return CFDictionaryGetValue(v2, a2);
}

BOOL sub_1B39FDC38(char *a1, char *a2)
{
  return byte_1B3A73536[*a1] == byte_1B3A73536[*a2];
}

uint64_t sub_1B39FDC5C()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B39FDCAC()
{
  return sub_1B3A70E20();
}

uint64_t sub_1B39FDCE4()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B39FDD30@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1B3A00CF4(*a1);
  *a2 = result;
  return result;
}

void sub_1B39FDD5C(unsigned char *a1@<X8>)
{
  *a1 = byte_1B3A73536[*v1];
}

BOOL sub_1B39FDD78(unsigned char *a1, unsigned char *a2)
{
  int v2 = 258;
  switch(*a1)
  {
    case 1:
      int v2 = 259;
      break;
    case 2:
      int v2 = 260;
      break;
    case 3:
      int v2 = 261;
      break;
    case 4:
      int v2 = 262;
      break;
    case 5:
      int v2 = 263;
      break;
    case 6:
      int v2 = 264;
      break;
    case 7:
      int v2 = 265;
      break;
    case 8:
      int v2 = 266;
      break;
    case 9:
      int v2 = 268;
      break;
    case 0xA:
      int v2 = 269;
      break;
    case 0xB:
      int v2 = 270;
      break;
    case 0xC:
      int v2 = 272;
      break;
    case 0xD:
      int v2 = 288;
      break;
    case 0xE:
      int v2 = 293;
      break;
    case 0xF:
      int v2 = 304;
      break;
    case 0x10:
      int v2 = 305;
      break;
    case 0x11:
      int v2 = 306;
      break;
    case 0x12:
      int v2 = 320;
      break;
    case 0x13:
      int v2 = 336;
      break;
    case 0x14:
      int v2 = 352;
      break;
    case 0x15:
      int v2 = 368;
      break;
    case 0x16:
      int v2 = 384;
      break;
    case 0x17:
      int v2 = 400;
      break;
    case 0x18:
      int v2 = 416;
      break;
    case 0x19:
      int v2 = 417;
      break;
    case 0x1A:
      int v2 = 418;
      break;
    case 0x1B:
      int v2 = 419;
      break;
    case 0x1C:
      int v2 = 420;
      break;
    case 0x1D:
      int v2 = 421;
      break;
    case 0x1E:
      int v2 = 422;
      break;
    case 0x1F:
      int v2 = 423;
      break;
    case 0x20:
      int v2 = 424;
      break;
    case 0x21:
      int v2 = 425;
      break;
    case 0x22:
      int v2 = 426;
      break;
    case 0x23:
      int v2 = 427;
      break;
    case 0x24:
      int v2 = 428;
      break;
    case 0x25:
      int v2 = 429;
      break;
    case 0x26:
      int v2 = 430;
      break;
    case 0x27:
      int v2 = 431;
      break;
    case 0x28:
      int v2 = 1537;
      break;
    case 0x29:
      int v2 = 1538;
      break;
    case 0x2A:
      int v2 = 1539;
      break;
    case 0x2B:
      int v2 = 1540;
      break;
    case 0x2C:
      int v2 = 1541;
      break;
    case 0x2D:
      int v2 = 1543;
      break;
    case 0x2E:
      int v2 = 1544;
      break;
    case 0x2F:
      int v2 = 1545;
      break;
    case 0x30:
      int v2 = 1546;
      break;
    case 0x31:
      int v2 = 1547;
      break;
    case 0x32:
      int v2 = 1548;
      break;
    case 0x33:
      int v2 = 1549;
      break;
    case 0x34:
      int v2 = 1550;
      break;
    case 0x35:
      int v2 = 1551;
      break;
    case 0x36:
      int v2 = 1552;
      break;
    case 0x37:
      int v2 = 1553;
      break;
    case 0x38:
      int v2 = 1554;
      break;
    case 0x39:
      int v2 = 1555;
      break;
    case 0x3A:
      int v2 = 1556;
      break;
    case 0x3B:
      int v2 = 1557;
      break;
    case 0x3C:
      int v2 = 1558;
      break;
    case 0x3D:
      int v2 = 1559;
      break;
    case 0x3E:
      int v2 = 1560;
      break;
    case 0x3F:
      int v2 = 1561;
      break;
    case 0x40:
      int v2 = 1562;
      break;
    case 0x41:
      int v2 = 1563;
      break;
    case 0x42:
      int v2 = 1564;
      break;
    case 0x43:
      int v2 = 1565;
      break;
    case 0x44:
      int v2 = 1566;
      break;
    case 0x45:
      int v2 = 1567;
      break;
    case 0x46:
      int v2 = 1568;
      break;
    case 0x47:
      int v2 = 1569;
      break;
    case 0x48:
      int v2 = 769;
      break;
    case 0x49:
      int v2 = 770;
      break;
    case 0x4A:
      int v2 = 771;
      break;
    case 0x4B:
      int v2 = 772;
      break;
    case 0x4C:
      int v2 = 773;
      break;
    case 0x4D:
      int v2 = 774;
      break;
    case 0x4E:
      int v2 = 775;
      break;
    case 0x4F:
      int v2 = 776;
      break;
    case 0x50:
      int v2 = 777;
      break;
    case 0x51:
      int v2 = 778;
      break;
    case 0x52:
      int v2 = 779;
      break;
    case 0x53:
      int v2 = 782;
      break;
    case 0x54:
      int v2 = 783;
      break;
    case 0x55:
      int v2 = 784;
      break;
    case 0x56:
      int v2 = 785;
      break;
    case 0x57:
      int v2 = 786;
      break;
    case 0x58:
      int v2 = 787;
      break;
    case 0x59:
      int v2 = 788;
      break;
    case 0x5A:
      int v2 = 789;
      break;
    case 0x5B:
      int v2 = 975;
      break;
    case 0x5C:
      int v2 = 1025;
      break;
    case 0x5D:
      int v2 = 1026;
      break;
    case 0x5E:
      int v2 = 1027;
      break;
    case 0x5F:
      int v2 = 1036;
      break;
    case 0x60:
      int v2 = 1037;
      break;
    case 0x61:
      int v2 = 1038;
      break;
    case 0x62:
      int v2 = 1039;
      break;
    case 0x63:
      int v2 = 1279;
      break;
    case 0x64:
      int v2 = 1792;
      break;
    case 0x65:
      int v2 = 1793;
      break;
    case 0x66:
      int v2 = 1794;
      break;
    case 0x67:
      int v2 = 9472;
      break;
    case 0x68:
      int v2 = 9473;
      break;
    case 0x69:
      int v2 = 9474;
      break;
    case 0x6A:
      int v2 = 9475;
      break;
    case 0x6B:
      int v2 = 9476;
      break;
    case 0x6C:
      int v2 = 9477;
      break;
    case 0x6D:
      int v2 = 9478;
      break;
    case 0x6E:
      int v2 = 9479;
      break;
    case 0x6F:
      int v2 = 9480;
      break;
    case 0x70:
      int v2 = 9481;
      break;
    case 0x71:
      int v2 = 9482;
      break;
    case 0x72:
      int v2 = 5121;
      break;
    case 0x73:
      int v2 = 5122;
      break;
    case 0x74:
      int v2 = 5136;
      break;
    case 0x75:
      int v2 = 5137;
      break;
    case 0x76:
      int v2 = 5138;
      break;
    case 0x77:
      int v2 = 5139;
      break;
    case 0x78:
      int v2 = 5140;
      break;
    case 0x79:
      int v2 = 5146;
      break;
    case 0x7A:
      int v2 = 5152;
      break;
    case 0x7B:
      int v2 = 8451;
      break;
    case 0x7C:
      int v2 = 8452;
      break;
    case 0x7D:
      int v2 = 8453;
      break;
    case 0x7E:
      int v2 = 8458;
      break;
    case 0x7F:
      int v2 = 8459;
      break;
    case 0x80:
      int v2 = 8460;
      break;
    case 0x81:
      int v2 = 8461;
      break;
    case 0x82:
      int v2 = 8462;
      break;
    case 0x83:
      int v2 = 8463;
      break;
    case 0x84:
      int v2 = 8464;
      break;
    case 0x85:
      int v2 = 8465;
      break;
    case 0x86:
      int v2 = 8466;
      break;
    case 0x87:
      int v2 = 8576;
      break;
    case 0x88:
      int v2 = 8577;
      break;
    case 0x89:
      int v2 = 8578;
      break;
    case 0x8A:
      int v2 = 8579;
      break;
    case 0x8B:
      int v2 = 9744;
      break;
    case 0x8C:
      int v2 = 9745;
      break;
    case 0x8D:
      int v2 = 9746;
      break;
    case 0x8E:
      int v2 = 9747;
      break;
    case 0x8F:
      int v2 = 9751;
      break;
    case 0x90:
      int v2 = 9752;
      break;
    case 0x91:
      int v2 = 9753;
      break;
    case 0x92:
      int v2 = 9754;
      break;
    case 0x93:
      int v2 = 9755;
      break;
    case 0x94:
      int v2 = 9756;
      break;
    case 0x95:
      int v2 = 9757;
      break;
    default:
      break;
  }
  int v3 = 258;
  switch(*a2)
  {
    case 1:
      int v3 = 259;
      break;
    case 2:
      int v3 = 260;
      break;
    case 3:
      int v3 = 261;
      break;
    case 4:
      int v3 = 262;
      break;
    case 5:
      int v3 = 263;
      break;
    case 6:
      int v3 = 264;
      break;
    case 7:
      int v3 = 265;
      break;
    case 8:
      int v3 = 266;
      break;
    case 9:
      int v3 = 268;
      break;
    case 0xA:
      int v3 = 269;
      break;
    case 0xB:
      int v3 = 270;
      break;
    case 0xC:
      int v3 = 272;
      break;
    case 0xD:
      int v3 = 288;
      break;
    case 0xE:
      int v3 = 293;
      break;
    case 0xF:
      int v3 = 304;
      break;
    case 0x10:
      int v3 = 305;
      break;
    case 0x11:
      int v3 = 306;
      break;
    case 0x12:
      int v3 = 320;
      break;
    case 0x13:
      int v3 = 336;
      break;
    case 0x14:
      int v3 = 352;
      break;
    case 0x15:
      int v3 = 368;
      break;
    case 0x16:
      int v3 = 384;
      break;
    case 0x17:
      int v3 = 400;
      break;
    case 0x18:
      int v3 = 416;
      break;
    case 0x19:
      int v3 = 417;
      break;
    case 0x1A:
      int v3 = 418;
      break;
    case 0x1B:
      int v3 = 419;
      break;
    case 0x1C:
      int v3 = 420;
      break;
    case 0x1D:
      int v3 = 421;
      break;
    case 0x1E:
      int v3 = 422;
      break;
    case 0x1F:
      int v3 = 423;
      break;
    case 0x20:
      int v3 = 424;
      break;
    case 0x21:
      int v3 = 425;
      break;
    case 0x22:
      int v3 = 426;
      break;
    case 0x23:
      int v3 = 427;
      break;
    case 0x24:
      int v3 = 428;
      break;
    case 0x25:
      int v3 = 429;
      break;
    case 0x26:
      int v3 = 430;
      break;
    case 0x27:
      int v3 = 431;
      break;
    case 0x28:
      int v3 = 1537;
      break;
    case 0x29:
      int v3 = 1538;
      break;
    case 0x2A:
      int v3 = 1539;
      break;
    case 0x2B:
      int v3 = 1540;
      break;
    case 0x2C:
      int v3 = 1541;
      break;
    case 0x2D:
      int v3 = 1543;
      break;
    case 0x2E:
      int v3 = 1544;
      break;
    case 0x2F:
      int v3 = 1545;
      break;
    case 0x30:
      int v3 = 1546;
      break;
    case 0x31:
      int v3 = 1547;
      break;
    case 0x32:
      int v3 = 1548;
      break;
    case 0x33:
      int v3 = 1549;
      break;
    case 0x34:
      int v3 = 1550;
      break;
    case 0x35:
      int v3 = 1551;
      break;
    case 0x36:
      int v3 = 1552;
      break;
    case 0x37:
      int v3 = 1553;
      break;
    case 0x38:
      int v3 = 1554;
      break;
    case 0x39:
      int v3 = 1555;
      break;
    case 0x3A:
      int v3 = 1556;
      break;
    case 0x3B:
      int v3 = 1557;
      break;
    case 0x3C:
      int v3 = 1558;
      break;
    case 0x3D:
      int v3 = 1559;
      break;
    case 0x3E:
      int v3 = 1560;
      break;
    case 0x3F:
      int v3 = 1561;
      break;
    case 0x40:
      int v3 = 1562;
      break;
    case 0x41:
      int v3 = 1563;
      break;
    case 0x42:
      int v3 = 1564;
      break;
    case 0x43:
      int v3 = 1565;
      break;
    case 0x44:
      int v3 = 1566;
      break;
    case 0x45:
      int v3 = 1567;
      break;
    case 0x46:
      int v3 = 1568;
      break;
    case 0x47:
      int v3 = 1569;
      break;
    case 0x48:
      int v3 = 769;
      break;
    case 0x49:
      int v3 = 770;
      break;
    case 0x4A:
      int v3 = 771;
      break;
    case 0x4B:
      int v3 = 772;
      break;
    case 0x4C:
      int v3 = 773;
      break;
    case 0x4D:
      int v3 = 774;
      break;
    case 0x4E:
      int v3 = 775;
      break;
    case 0x4F:
      int v3 = 776;
      break;
    case 0x50:
      int v3 = 777;
      break;
    case 0x51:
      int v3 = 778;
      break;
    case 0x52:
      int v3 = 779;
      break;
    case 0x53:
      int v3 = 782;
      break;
    case 0x54:
      int v3 = 783;
      break;
    case 0x55:
      int v3 = 784;
      break;
    case 0x56:
      int v3 = 785;
      break;
    case 0x57:
      int v3 = 786;
      break;
    case 0x58:
      int v3 = 787;
      break;
    case 0x59:
      int v3 = 788;
      break;
    case 0x5A:
      int v3 = 789;
      break;
    case 0x5B:
      int v3 = 975;
      break;
    case 0x5C:
      int v3 = 1025;
      break;
    case 0x5D:
      int v3 = 1026;
      break;
    case 0x5E:
      int v3 = 1027;
      break;
    case 0x5F:
      int v3 = 1036;
      break;
    case 0x60:
      int v3 = 1037;
      break;
    case 0x61:
      int v3 = 1038;
      break;
    case 0x62:
      int v3 = 1039;
      break;
    case 0x63:
      int v3 = 1279;
      break;
    case 0x64:
      int v3 = 1792;
      break;
    case 0x65:
      int v3 = 1793;
      break;
    case 0x66:
      int v3 = 1794;
      break;
    case 0x67:
      int v3 = 9472;
      break;
    case 0x68:
      int v3 = 9473;
      break;
    case 0x69:
      int v3 = 9474;
      break;
    case 0x6A:
      int v3 = 9475;
      break;
    case 0x6B:
      int v3 = 9476;
      break;
    case 0x6C:
      int v3 = 9477;
      break;
    case 0x6D:
      int v3 = 9478;
      break;
    case 0x6E:
      int v3 = 9479;
      break;
    case 0x6F:
      int v3 = 9480;
      break;
    case 0x70:
      int v3 = 9481;
      break;
    case 0x71:
      int v3 = 9482;
      break;
    case 0x72:
      int v3 = 5121;
      break;
    case 0x73:
      int v3 = 5122;
      break;
    case 0x74:
      int v3 = 5136;
      break;
    case 0x75:
      int v3 = 5137;
      break;
    case 0x76:
      int v3 = 5138;
      break;
    case 0x77:
      int v3 = 5139;
      break;
    case 0x78:
      int v3 = 5140;
      break;
    case 0x79:
      int v3 = 5146;
      break;
    case 0x7A:
      int v3 = 5152;
      break;
    case 0x7B:
      int v3 = 8451;
      break;
    case 0x7C:
      int v3 = 8452;
      break;
    case 0x7D:
      int v3 = 8453;
      break;
    case 0x7E:
      int v3 = 8458;
      break;
    case 0x7F:
      int v3 = 8459;
      break;
    case 0x80:
      int v3 = 8460;
      break;
    case 0x81:
      int v3 = 8461;
      break;
    case 0x82:
      int v3 = 8462;
      break;
    case 0x83:
      int v3 = 8463;
      break;
    case 0x84:
      int v3 = 8464;
      break;
    case 0x85:
      int v3 = 8465;
      break;
    case 0x86:
      int v3 = 8466;
      break;
    case 0x87:
      int v3 = 8576;
      break;
    case 0x88:
      int v3 = 8577;
      break;
    case 0x89:
      int v3 = 8578;
      break;
    case 0x8A:
      int v3 = 8579;
      break;
    case 0x8B:
      int v3 = 9744;
      break;
    case 0x8C:
      int v3 = 9745;
      break;
    case 0x8D:
      int v3 = 9746;
      break;
    case 0x8E:
      int v3 = 9747;
      break;
    case 0x8F:
      int v3 = 9751;
      break;
    case 0x90:
      int v3 = 9752;
      break;
    case 0x91:
      int v3 = 9753;
      break;
    case 0x92:
      int v3 = 9754;
      break;
    case 0x93:
      int v3 = 9755;
      break;
    case 0x94:
      int v3 = 9756;
      break;
    case 0x95:
      int v3 = 9757;
      break;
    default:
      return v2 == v3;
  }
  return v2 == v3;
}

uint64_t sub_1B39FEBD0()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B39FF338()
{
  return sub_1B3A70E30();
}

uint64_t sub_1B39FFA84()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A001E8@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1B3A0129C(*a1);
  *a2 = result;
  return result;
}

void sub_1B3A00214(__int16 *a1@<X8>)
{
  __int16 v2 = 258;
  switch(*v1)
  {
    case 1:
      *a1 = 259;
      break;
    case 2:
      *a1 = 260;
      break;
    case 3:
      *a1 = 261;
      break;
    case 4:
      *a1 = 262;
      break;
    case 5:
      *a1 = 263;
      break;
    case 6:
      *a1 = 264;
      break;
    case 7:
      *a1 = 265;
      break;
    case 8:
      *a1 = 266;
      break;
    case 9:
      *a1 = 268;
      break;
    case 0xA:
      *a1 = 269;
      break;
    case 0xB:
      *a1 = 270;
      break;
    case 0xC:
      *a1 = 272;
      break;
    case 0xD:
      *a1 = 288;
      break;
    case 0xE:
      *a1 = 293;
      break;
    case 0xF:
      *a1 = 304;
      break;
    case 0x10:
      *a1 = 305;
      break;
    case 0x11:
      *a1 = 306;
      break;
    case 0x12:
      *a1 = 320;
      break;
    case 0x13:
      *a1 = 336;
      break;
    case 0x14:
      *a1 = 352;
      break;
    case 0x15:
      *a1 = 368;
      break;
    case 0x16:
      *a1 = 384;
      break;
    case 0x17:
      *a1 = 400;
      break;
    case 0x18:
      *a1 = 416;
      break;
    case 0x19:
      *a1 = 417;
      break;
    case 0x1A:
      *a1 = 418;
      break;
    case 0x1B:
      *a1 = 419;
      break;
    case 0x1C:
      *a1 = 420;
      break;
    case 0x1D:
      *a1 = 421;
      break;
    case 0x1E:
      *a1 = 422;
      break;
    case 0x1F:
      *a1 = 423;
      break;
    case 0x20:
      *a1 = 424;
      break;
    case 0x21:
      *a1 = 425;
      break;
    case 0x22:
      *a1 = 426;
      break;
    case 0x23:
      *a1 = 427;
      break;
    case 0x24:
      *a1 = 428;
      break;
    case 0x25:
      *a1 = 429;
      break;
    case 0x26:
      *a1 = 430;
      break;
    case 0x27:
      *a1 = 431;
      break;
    case 0x28:
      *a1 = 1537;
      break;
    case 0x29:
      *a1 = 1538;
      break;
    case 0x2A:
      *a1 = 1539;
      break;
    case 0x2B:
      *a1 = 1540;
      break;
    case 0x2C:
      *a1 = 1541;
      break;
    case 0x2D:
      *a1 = 1543;
      break;
    case 0x2E:
      *a1 = 1544;
      break;
    case 0x2F:
      *a1 = 1545;
      break;
    case 0x30:
      *a1 = 1546;
      break;
    case 0x31:
      *a1 = 1547;
      break;
    case 0x32:
      *a1 = 1548;
      break;
    case 0x33:
      *a1 = 1549;
      break;
    case 0x34:
      *a1 = 1550;
      break;
    case 0x35:
      *a1 = 1551;
      break;
    case 0x36:
      *a1 = 1552;
      break;
    case 0x37:
      *a1 = 1553;
      break;
    case 0x38:
      *a1 = 1554;
      break;
    case 0x39:
      *a1 = 1555;
      break;
    case 0x3A:
      *a1 = 1556;
      break;
    case 0x3B:
      *a1 = 1557;
      break;
    case 0x3C:
      *a1 = 1558;
      break;
    case 0x3D:
      *a1 = 1559;
      break;
    case 0x3E:
      *a1 = 1560;
      break;
    case 0x3F:
      *a1 = 1561;
      break;
    case 0x40:
      *a1 = 1562;
      break;
    case 0x41:
      *a1 = 1563;
      break;
    case 0x42:
      *a1 = 1564;
      break;
    case 0x43:
      *a1 = 1565;
      break;
    case 0x44:
      *a1 = 1566;
      break;
    case 0x45:
      *a1 = 1567;
      break;
    case 0x46:
      *a1 = 1568;
      break;
    case 0x47:
      *a1 = 1569;
      break;
    case 0x48:
      *a1 = 769;
      break;
    case 0x49:
      *a1 = 770;
      break;
    case 0x4A:
      *a1 = 771;
      break;
    case 0x4B:
      *a1 = 772;
      break;
    case 0x4C:
      *a1 = 773;
      break;
    case 0x4D:
      *a1 = 774;
      break;
    case 0x4E:
      *a1 = 775;
      break;
    case 0x4F:
      *a1 = 776;
      break;
    case 0x50:
      *a1 = 777;
      break;
    case 0x51:
      *a1 = 778;
      break;
    case 0x52:
      *a1 = 779;
      break;
    case 0x53:
      *a1 = 782;
      break;
    case 0x54:
      *a1 = 783;
      break;
    case 0x55:
      *a1 = 784;
      break;
    case 0x56:
      *a1 = 785;
      break;
    case 0x57:
      *a1 = 786;
      break;
    case 0x58:
      *a1 = 787;
      break;
    case 0x59:
      *a1 = 788;
      break;
    case 0x5A:
      *a1 = 789;
      break;
    case 0x5B:
      *a1 = 975;
      break;
    case 0x5C:
      *a1 = 1025;
      break;
    case 0x5D:
      *a1 = 1026;
      break;
    case 0x5E:
      *a1 = 1027;
      break;
    case 0x5F:
      *a1 = 1036;
      break;
    case 0x60:
      *a1 = 1037;
      break;
    case 0x61:
      *a1 = 1038;
      break;
    case 0x62:
      *a1 = 1039;
      break;
    case 0x63:
      *a1 = 1279;
      break;
    case 0x64:
      *a1 = 1792;
      break;
    case 0x65:
      *a1 = 1793;
      break;
    case 0x66:
      *a1 = 1794;
      break;
    case 0x67:
      *a1 = 9472;
      break;
    case 0x68:
      *a1 = 9473;
      break;
    case 0x69:
      *a1 = 9474;
      break;
    case 0x6A:
      *a1 = 9475;
      break;
    case 0x6B:
      *a1 = 9476;
      break;
    case 0x6C:
      *a1 = 9477;
      break;
    case 0x6D:
      *a1 = 9478;
      break;
    case 0x6E:
      *a1 = 9479;
      break;
    case 0x6F:
      *a1 = 9480;
      break;
    case 0x70:
      *a1 = 9481;
      break;
    case 0x71:
      *a1 = 9482;
      break;
    case 0x72:
      *a1 = 5121;
      break;
    case 0x73:
      *a1 = 5122;
      break;
    case 0x74:
      *a1 = 5136;
      break;
    case 0x75:
      *a1 = 5137;
      break;
    case 0x76:
      *a1 = 5138;
      break;
    case 0x77:
      *a1 = 5139;
      break;
    case 0x78:
      *a1 = 5140;
      break;
    case 0x79:
      *a1 = 5146;
      break;
    case 0x7A:
      *a1 = 5152;
      break;
    case 0x7B:
      *a1 = 8451;
      break;
    case 0x7C:
      *a1 = 8452;
      break;
    case 0x7D:
      *a1 = 8453;
      break;
    case 0x7E:
      *a1 = 8458;
      break;
    case 0x7F:
      *a1 = 8459;
      break;
    case 0x80:
      *a1 = 8460;
      break;
    case 0x81:
      *a1 = 8461;
      break;
    case 0x82:
      *a1 = 8462;
      break;
    case 0x83:
      *a1 = 8463;
      break;
    case 0x84:
      *a1 = 8464;
      break;
    case 0x85:
      *a1 = 8465;
      break;
    case 0x86:
      *a1 = 8466;
      break;
    case 0x87:
      *a1 = 8576;
      break;
    case 0x88:
      *a1 = 8577;
      break;
    case 0x89:
      *a1 = 8578;
      break;
    case 0x8A:
      *a1 = 8579;
      break;
    case 0x8B:
      *a1 = 9744;
      break;
    case 0x8C:
      *a1 = 9745;
      break;
    case 0x8D:
      *a1 = 9746;
      break;
    case 0x8E:
      *a1 = 9747;
      break;
    case 0x8F:
      *a1 = 9751;
      break;
    case 0x90:
      *a1 = 9752;
      break;
    case 0x91:
      *a1 = 9753;
      break;
    case 0x92:
      *a1 = 9754;
      break;
    case 0x93:
      *a1 = 9755;
      break;
    case 0x94:
      *a1 = 9756;
      break;
    case 0x95:
      __int16 v2 = 9757;
      goto LABEL_151;
    default:
LABEL_151:
      *a1 = v2;
      break;
  }
}

uint64_t sub_1B3A00B90(unsigned __int16 a1)
{
  if (sub_1B3A0129C(a1) != 150) {
    return sub_1B3A70300();
  }
  if (sub_1B3A00CF4(HIBYTE(a1)) == 47) {
    uint64_t v2 = 0x6E776F6E6B6E55;
  }
  else {
    uint64_t v2 = sub_1B3A70300();
  }
  sub_1B3A709B0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5890);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = MEMORY[0x1E4FBC450];
  *(_OWORD *)(v4 + 16) = xmmword_1B3A73390;
  uint64_t v6 = MEMORY[0x1E4FBC4B8];
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v6;
  *(_WORD *)(v4 + 32) = a1;
  sub_1B3A702D0();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  sub_1B3A703A0();
  return v2;
}

uint64_t sub_1B3A00CF4(unsigned __int8 a1)
{
  int v1 = a1 - 1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
      uint64_t result = 6;
      break;
    case 7:
      uint64_t result = 7;
      break;
    case 8:
      uint64_t result = 8;
      break;
    case 9:
      uint64_t result = 9;
      break;
    case 10:
      uint64_t result = 10;
      break;
    case 11:
      uint64_t result = 11;
      break;
    case 19:
      uint64_t result = 12;
      break;
    case 29:
      uint64_t result = 13;
      break;
    case 30:
      uint64_t result = 14;
      break;
    case 31:
      uint64_t result = 15;
      break;
    case 32:
      uint64_t result = 16;
      break;
    case 33:
      uint64_t result = 17;
      break;
    case 34:
      uint64_t result = 18;
      break;
    case 35:
      uint64_t result = 33;
      break;
    case 36:
      uint64_t result = 19;
      break;
    case 37:
      uint64_t result = 20;
      break;
    case 38:
      uint64_t result = 34;
      break;
    case 39:
      uint64_t result = 21;
      break;
    case 40:
      uint64_t result = 22;
      break;
    case 41:
      uint64_t result = 23;
      break;
    case 42:
      uint64_t result = 24;
      break;
    case 43:
      uint64_t result = 25;
      break;
    case 44:
      uint64_t result = 26;
      break;
    case 45:
      uint64_t result = 27;
      break;
    case 48:
      uint64_t result = 28;
      break;
    case 49:
      uint64_t result = 35;
      break;
    case 50:
      uint64_t result = 29;
      break;
    case 51:
      uint64_t result = 36;
      break;
    case 52:
      uint64_t result = 30;
      break;
    case 53:
      uint64_t result = 31;
      break;
    case 127:
      uint64_t result = 37;
      break;
    case 128:
      uint64_t result = 38;
      break;
    case 129:
      uint64_t result = 39;
      break;
    case 130:
      uint64_t result = 40;
      break;
    case 131:
      uint64_t result = 41;
      break;
    case 132:
      uint64_t result = 42;
      break;
    case 133:
      uint64_t result = 43;
      break;
    case 134:
      uint64_t result = 44;
      break;
    case 135:
      uint64_t result = 45;
      break;
    case 136:
      uint64_t result = 46;
      break;
    case 254:
      uint64_t result = 32;
      break;
    default:
      uint64_t result = 47;
      break;
  }
  return result;
}

uint64_t sub_1B3A0129C(unsigned __int16 a1)
{
  unsigned int v2 = a1;
  BOOL v3 = a1 > 0x600u;
  if (a1 > 0x600u)
  {
    BOOL v3 = a1 > 0x1400u;
    if (a1 > 0x1400u)
    {
      switch(a1)
      {
        case 0x1401u:
          uint64_t result = 114;
          break;
        case 0x1402u:
          uint64_t result = 115;
          break;
        case 0x1403u:
        case 0x1404u:
        case 0x1405u:
        case 0x1406u:
        case 0x1407u:
        case 0x1408u:
        case 0x1409u:
        case 0x140Au:
        case 0x140Bu:
        case 0x140Cu:
        case 0x140Du:
        case 0x140Eu:
        case 0x140Fu:
        case 0x1415u:
        case 0x1416u:
        case 0x1417u:
        case 0x1418u:
        case 0x1419u:
        case 0x141Bu:
        case 0x141Cu:
        case 0x141Du:
        case 0x141Eu:
        case 0x141Fu:
LABEL_124:
          if (!v3)
          {
            switch(a1)
            {
              case 0x2610u:
                return 139;
              case 0x2611u:
                return 140;
              case 0x2612u:
                return 141;
              case 0x2613u:
                return 142;
              case 0x2614u:
              case 0x2615u:
              case 0x2616u:
                goto LABEL_131;
              case 0x2617u:
                return 143;
              case 0x2618u:
                return 144;
              case 0x2619u:
                return 145;
              case 0x261Au:
                return 146;
              case 0x261Bu:
                return 147;
              case 0x261Cu:
                return 148;
              case 0x261Du:
                return 149;
              default:
                JUMPOUT(0);
            }
          }
          uint64_t result = 128;
          switch(a1)
          {
            case 0x210Cu:
              return result;
            case 0x210Du:
              uint64_t result = 129;
              break;
            case 0x210Eu:
              uint64_t result = 130;
              break;
            case 0x210Fu:
              uint64_t result = 131;
              break;
            case 0x2110u:
              uint64_t result = 132;
              break;
            case 0x2111u:
              uint64_t result = 133;
              break;
            case 0x2112u:
              uint64_t result = 134;
              break;
            default:
              switch(a1)
              {
                case 0x2180u:
                  uint64_t result = 135;
                  break;
                case 0x2181u:
                  uint64_t result = 136;
                  break;
                case 0x2182u:
                  uint64_t result = 137;
                  break;
                case 0x2183u:
                  uint64_t result = 138;
                  break;
                default:
LABEL_131:
                  uint64_t result = 150;
                  break;
              }
              break;
          }
          break;
        case 0x1410u:
          uint64_t result = 116;
          break;
        case 0x1411u:
          uint64_t result = 117;
          break;
        case 0x1412u:
          uint64_t result = 118;
          break;
        case 0x1413u:
          uint64_t result = 119;
          break;
        case 0x1414u:
          uint64_t result = 120;
          break;
        case 0x141Au:
          uint64_t result = 121;
          break;
        case 0x1420u:
          uint64_t result = 122;
          break;
        default:
          switch(a1)
          {
            case 0x2103u:
              uint64_t result = 123;
              break;
            case 0x2104u:
              uint64_t result = 124;
              break;
            case 0x2105u:
              uint64_t result = 125;
              break;
            case 0x210Au:
              uint64_t result = 126;
              break;
            case 0x210Bu:
              uint64_t result = 127;
              break;
            default:
              goto LABEL_124;
          }
          break;
      }
    }
    else
    {
      uint64_t result = 54;
      switch(v2)
      {
        case 0x601u:
          uint64_t result = 40;
          break;
        case 0x602u:
          uint64_t result = 41;
          break;
        case 0x603u:
          uint64_t result = 42;
          break;
        case 0x604u:
          uint64_t result = 43;
          break;
        case 0x605u:
          uint64_t result = 44;
          break;
        case 0x607u:
          uint64_t result = 45;
          break;
        case 0x608u:
          uint64_t result = 46;
          break;
        case 0x609u:
          uint64_t result = 47;
          break;
        case 0x60Au:
          uint64_t result = 48;
          break;
        case 0x60Bu:
          uint64_t result = 49;
          break;
        case 0x60Cu:
          uint64_t result = 50;
          break;
        case 0x60Du:
          uint64_t result = 51;
          break;
        case 0x60Eu:
          uint64_t result = 52;
          break;
        case 0x60Fu:
          uint64_t result = 53;
          break;
        case 0x610u:
          return result;
        case 0x611u:
          uint64_t result = 55;
          break;
        case 0x612u:
          uint64_t result = 56;
          break;
        case 0x613u:
          uint64_t result = 57;
          break;
        case 0x614u:
          uint64_t result = 58;
          break;
        case 0x615u:
          uint64_t result = 59;
          break;
        case 0x616u:
          uint64_t result = 60;
          break;
        case 0x617u:
          uint64_t result = 61;
          break;
        case 0x618u:
          uint64_t result = 62;
          break;
        case 0x619u:
          uint64_t result = 63;
          break;
        case 0x61Au:
          uint64_t result = 64;
          break;
        case 0x61Bu:
          uint64_t result = 65;
          break;
        case 0x61Cu:
          uint64_t result = 66;
          break;
        case 0x61Du:
          uint64_t result = 67;
          break;
        case 0x61Eu:
          uint64_t result = 68;
          break;
        case 0x61Fu:
          uint64_t result = 69;
          break;
        case 0x620u:
          uint64_t result = 70;
          break;
        case 0x621u:
          uint64_t result = 71;
          break;
        case 0x700u:
          uint64_t result = 100;
          break;
        case 0x701u:
          uint64_t result = 101;
          break;
        case 0x702u:
          uint64_t result = 102;
          break;
        default:
          goto LABEL_124;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    switch(v2)
    {
      case 0x102u:
        return result;
      case 0x103u:
        uint64_t result = 1;
        break;
      case 0x104u:
        uint64_t result = 2;
        break;
      case 0x105u:
        uint64_t result = 3;
        break;
      case 0x106u:
        uint64_t result = 4;
        break;
      case 0x107u:
        uint64_t result = 5;
        break;
      case 0x108u:
        uint64_t result = 6;
        break;
      case 0x109u:
        uint64_t result = 7;
        break;
      case 0x10Au:
        uint64_t result = 8;
        break;
      case 0x10Bu:
      case 0x10Fu:
      case 0x111u:
      case 0x112u:
      case 0x113u:
      case 0x114u:
      case 0x115u:
      case 0x116u:
      case 0x117u:
      case 0x118u:
      case 0x119u:
      case 0x11Au:
      case 0x11Bu:
      case 0x11Cu:
      case 0x11Du:
      case 0x11Eu:
      case 0x11Fu:
      case 0x121u:
      case 0x122u:
      case 0x123u:
      case 0x124u:
      case 0x126u:
      case 0x127u:
      case 0x128u:
      case 0x129u:
      case 0x12Au:
      case 0x12Bu:
      case 0x12Cu:
      case 0x12Du:
      case 0x12Eu:
      case 0x12Fu:
      case 0x133u:
      case 0x134u:
      case 0x135u:
      case 0x136u:
      case 0x137u:
      case 0x138u:
      case 0x139u:
      case 0x13Au:
      case 0x13Bu:
      case 0x13Cu:
      case 0x13Du:
      case 0x13Eu:
      case 0x13Fu:
      case 0x141u:
      case 0x142u:
      case 0x143u:
      case 0x144u:
      case 0x145u:
      case 0x146u:
      case 0x147u:
      case 0x148u:
      case 0x149u:
      case 0x14Au:
      case 0x14Bu:
      case 0x14Cu:
      case 0x14Du:
      case 0x14Eu:
      case 0x14Fu:
      case 0x151u:
      case 0x152u:
      case 0x153u:
      case 0x154u:
      case 0x155u:
      case 0x156u:
      case 0x157u:
      case 0x158u:
      case 0x159u:
      case 0x15Au:
      case 0x15Bu:
      case 0x15Cu:
      case 0x15Du:
      case 0x15Eu:
      case 0x15Fu:
      case 0x161u:
      case 0x162u:
      case 0x163u:
      case 0x164u:
      case 0x165u:
      case 0x166u:
      case 0x167u:
      case 0x168u:
      case 0x169u:
      case 0x16Au:
      case 0x16Bu:
      case 0x16Cu:
      case 0x16Du:
      case 0x16Eu:
      case 0x16Fu:
      case 0x171u:
      case 0x172u:
      case 0x173u:
      case 0x174u:
      case 0x175u:
      case 0x176u:
      case 0x177u:
      case 0x178u:
      case 0x179u:
      case 0x17Au:
      case 0x17Bu:
      case 0x17Cu:
      case 0x17Du:
      case 0x17Eu:
      case 0x17Fu:
      case 0x181u:
      case 0x182u:
      case 0x183u:
      case 0x184u:
      case 0x185u:
      case 0x186u:
      case 0x187u:
      case 0x188u:
      case 0x189u:
      case 0x18Au:
      case 0x18Bu:
      case 0x18Cu:
      case 0x18Du:
      case 0x18Eu:
      case 0x18Fu:
      case 0x191u:
      case 0x192u:
      case 0x193u:
      case 0x194u:
      case 0x195u:
      case 0x196u:
      case 0x197u:
      case 0x198u:
      case 0x199u:
      case 0x19Au:
      case 0x19Bu:
      case 0x19Cu:
      case 0x19Du:
      case 0x19Eu:
      case 0x19Fu:
      case 0x1B0u:
      case 0x1B1u:
      case 0x1B2u:
      case 0x1B3u:
      case 0x1B4u:
      case 0x1B5u:
      case 0x1B6u:
      case 0x1B7u:
      case 0x1B8u:
      case 0x1B9u:
      case 0x1BAu:
      case 0x1BBu:
      case 0x1BCu:
      case 0x1BDu:
      case 0x1BEu:
      case 0x1BFu:
      case 0x1C0u:
      case 0x1C1u:
      case 0x1C2u:
      case 0x1C3u:
      case 0x1C4u:
      case 0x1C5u:
      case 0x1C6u:
      case 0x1C7u:
      case 0x1C8u:
      case 0x1C9u:
      case 0x1CAu:
      case 0x1CBu:
      case 0x1CCu:
      case 0x1CDu:
      case 0x1CEu:
      case 0x1CFu:
      case 0x1D0u:
      case 0x1D1u:
      case 0x1D2u:
      case 0x1D3u:
      case 0x1D4u:
      case 0x1D5u:
      case 0x1D6u:
      case 0x1D7u:
      case 0x1D8u:
      case 0x1D9u:
      case 0x1DAu:
      case 0x1DBu:
      case 0x1DCu:
      case 0x1DDu:
      case 0x1DEu:
      case 0x1DFu:
      case 0x1E0u:
      case 0x1E1u:
      case 0x1E2u:
      case 0x1E3u:
      case 0x1E4u:
      case 0x1E5u:
      case 0x1E6u:
      case 0x1E7u:
      case 0x1E8u:
      case 0x1E9u:
      case 0x1EAu:
      case 0x1EBu:
      case 0x1ECu:
      case 0x1EDu:
      case 0x1EEu:
      case 0x1EFu:
      case 0x1F0u:
      case 0x1F1u:
      case 0x1F2u:
      case 0x1F3u:
      case 0x1F4u:
      case 0x1F5u:
      case 0x1F6u:
      case 0x1F7u:
      case 0x1F8u:
      case 0x1F9u:
      case 0x1FAu:
      case 0x1FBu:
      case 0x1FCu:
      case 0x1FDu:
      case 0x1FEu:
      case 0x1FFu:
      case 0x200u:
      case 0x201u:
      case 0x202u:
      case 0x203u:
      case 0x204u:
      case 0x205u:
      case 0x206u:
      case 0x207u:
      case 0x208u:
      case 0x209u:
      case 0x20Au:
      case 0x20Bu:
      case 0x20Cu:
      case 0x20Du:
      case 0x20Eu:
      case 0x20Fu:
      case 0x210u:
      case 0x211u:
      case 0x212u:
      case 0x213u:
      case 0x214u:
      case 0x215u:
      case 0x216u:
      case 0x217u:
      case 0x218u:
      case 0x219u:
      case 0x21Au:
      case 0x21Bu:
      case 0x21Cu:
      case 0x21Du:
      case 0x21Eu:
      case 0x21Fu:
      case 0x220u:
      case 0x221u:
      case 0x222u:
      case 0x223u:
      case 0x224u:
      case 0x225u:
      case 0x226u:
      case 0x227u:
      case 0x228u:
      case 0x229u:
      case 0x22Au:
      case 0x22Bu:
      case 0x22Cu:
      case 0x22Du:
      case 0x22Eu:
      case 0x22Fu:
      case 0x230u:
      case 0x231u:
      case 0x232u:
      case 0x233u:
      case 0x234u:
      case 0x235u:
      case 0x236u:
      case 0x237u:
      case 0x238u:
      case 0x239u:
      case 0x23Au:
      case 0x23Bu:
      case 0x23Cu:
      case 0x23Du:
      case 0x23Eu:
      case 0x23Fu:
      case 0x240u:
      case 0x241u:
      case 0x242u:
      case 0x243u:
      case 0x244u:
      case 0x245u:
      case 0x246u:
      case 0x247u:
      case 0x248u:
      case 0x249u:
      case 0x24Au:
      case 0x24Bu:
      case 0x24Cu:
      case 0x24Du:
      case 0x24Eu:
      case 0x24Fu:
      case 0x250u:
      case 0x251u:
      case 0x252u:
      case 0x253u:
      case 0x254u:
      case 0x255u:
      case 0x256u:
      case 0x257u:
      case 0x258u:
      case 0x259u:
      case 0x25Au:
      case 0x25Bu:
      case 0x25Cu:
      case 0x25Du:
      case 0x25Eu:
      case 0x25Fu:
      case 0x260u:
      case 0x261u:
      case 0x262u:
      case 0x263u:
      case 0x264u:
      case 0x265u:
      case 0x266u:
      case 0x267u:
      case 0x268u:
      case 0x269u:
      case 0x26Au:
      case 0x26Bu:
      case 0x26Cu:
      case 0x26Du:
      case 0x26Eu:
      case 0x26Fu:
      case 0x270u:
      case 0x271u:
      case 0x272u:
      case 0x273u:
      case 0x274u:
      case 0x275u:
      case 0x276u:
      case 0x277u:
      case 0x278u:
      case 0x279u:
      case 0x27Au:
      case 0x27Bu:
      case 0x27Cu:
      case 0x27Du:
      case 0x27Eu:
      case 0x27Fu:
      case 0x280u:
      case 0x281u:
      case 0x282u:
      case 0x283u:
      case 0x284u:
      case 0x285u:
      case 0x286u:
      case 0x287u:
      case 0x288u:
      case 0x289u:
      case 0x28Au:
      case 0x28Bu:
      case 0x28Cu:
      case 0x28Du:
      case 0x28Eu:
      case 0x28Fu:
      case 0x290u:
      case 0x291u:
      case 0x292u:
      case 0x293u:
      case 0x294u:
      case 0x295u:
      case 0x296u:
      case 0x297u:
      case 0x298u:
      case 0x299u:
      case 0x29Au:
      case 0x29Bu:
      case 0x29Cu:
      case 0x29Du:
      case 0x29Eu:
      case 0x29Fu:
      case 0x2A0u:
      case 0x2A1u:
      case 0x2A2u:
      case 0x2A3u:
      case 0x2A4u:
      case 0x2A5u:
      case 0x2A6u:
      case 0x2A7u:
      case 0x2A8u:
      case 0x2A9u:
      case 0x2AAu:
      case 0x2ABu:
      case 0x2ACu:
      case 0x2ADu:
      case 0x2AEu:
      case 0x2AFu:
      case 0x2B0u:
      case 0x2B1u:
      case 0x2B2u:
      case 0x2B3u:
      case 0x2B4u:
      case 0x2B5u:
      case 0x2B6u:
      case 0x2B7u:
      case 0x2B8u:
      case 0x2B9u:
      case 0x2BAu:
      case 0x2BBu:
      case 0x2BCu:
      case 0x2BDu:
      case 0x2BEu:
      case 0x2BFu:
      case 0x2C0u:
      case 0x2C1u:
      case 0x2C2u:
      case 0x2C3u:
      case 0x2C4u:
      case 0x2C5u:
      case 0x2C6u:
      case 0x2C7u:
      case 0x2C8u:
      case 0x2C9u:
      case 0x2CAu:
      case 0x2CBu:
      case 0x2CCu:
      case 0x2CDu:
      case 0x2CEu:
      case 0x2CFu:
      case 0x2D0u:
      case 0x2D1u:
      case 0x2D2u:
      case 0x2D3u:
      case 0x2D4u:
      case 0x2D5u:
      case 0x2D6u:
      case 0x2D7u:
      case 0x2D8u:
      case 0x2D9u:
      case 0x2DAu:
      case 0x2DBu:
      case 0x2DCu:
      case 0x2DDu:
      case 0x2DEu:
      case 0x2DFu:
      case 0x2E0u:
      case 0x2E1u:
      case 0x2E2u:
      case 0x2E3u:
      case 0x2E4u:
      case 0x2E5u:
      case 0x2E6u:
      case 0x2E7u:
      case 0x2E8u:
      case 0x2E9u:
      case 0x2EAu:
      case 0x2EBu:
      case 0x2ECu:
      case 0x2EDu:
      case 0x2EEu:
      case 0x2EFu:
      case 0x2F0u:
      case 0x2F1u:
      case 0x2F2u:
      case 0x2F3u:
      case 0x2F4u:
      case 0x2F5u:
      case 0x2F6u:
      case 0x2F7u:
      case 0x2F8u:
      case 0x2F9u:
      case 0x2FAu:
      case 0x2FBu:
      case 0x2FCu:
      case 0x2FDu:
      case 0x2FEu:
      case 0x2FFu:
      case 0x300u:
      case 0x30Cu:
      case 0x30Du:
        goto LABEL_124;
      case 0x10Cu:
        uint64_t result = 9;
        break;
      case 0x10Du:
        uint64_t result = 10;
        break;
      case 0x10Eu:
        uint64_t result = 11;
        break;
      case 0x110u:
        uint64_t result = 12;
        break;
      case 0x120u:
        uint64_t result = 13;
        break;
      case 0x125u:
        uint64_t result = 14;
        break;
      case 0x130u:
        uint64_t result = 15;
        break;
      case 0x131u:
        uint64_t result = 16;
        break;
      case 0x132u:
        uint64_t result = 17;
        break;
      case 0x140u:
        uint64_t result = 18;
        break;
      case 0x150u:
        uint64_t result = 19;
        break;
      case 0x160u:
        uint64_t result = 20;
        break;
      case 0x170u:
        uint64_t result = 21;
        break;
      case 0x180u:
        uint64_t result = 22;
        break;
      case 0x190u:
        uint64_t result = 23;
        break;
      case 0x1A0u:
        uint64_t result = 24;
        break;
      case 0x1A1u:
        uint64_t result = 25;
        break;
      case 0x1A2u:
        uint64_t result = 26;
        break;
      case 0x1A3u:
        uint64_t result = 27;
        break;
      case 0x1A4u:
        uint64_t result = 28;
        break;
      case 0x1A5u:
        uint64_t result = 29;
        break;
      case 0x1A6u:
        uint64_t result = 30;
        break;
      case 0x1A7u:
        uint64_t result = 31;
        break;
      case 0x1A8u:
        uint64_t result = 32;
        break;
      case 0x1A9u:
        uint64_t result = 33;
        break;
      case 0x1AAu:
        uint64_t result = 34;
        break;
      case 0x1ABu:
        uint64_t result = 35;
        break;
      case 0x1ACu:
        uint64_t result = 36;
        break;
      case 0x1ADu:
        uint64_t result = 37;
        break;
      case 0x1AEu:
        uint64_t result = 38;
        break;
      case 0x1AFu:
        uint64_t result = 39;
        break;
      case 0x301u:
        uint64_t result = 72;
        break;
      case 0x302u:
        uint64_t result = 73;
        break;
      case 0x303u:
        uint64_t result = 74;
        break;
      case 0x304u:
        uint64_t result = 75;
        break;
      case 0x305u:
        uint64_t result = 76;
        break;
      case 0x306u:
        uint64_t result = 77;
        break;
      case 0x307u:
        uint64_t result = 78;
        break;
      case 0x308u:
        uint64_t result = 79;
        break;
      case 0x309u:
        uint64_t result = 80;
        break;
      case 0x30Au:
        uint64_t result = 81;
        break;
      case 0x30Bu:
        uint64_t result = 82;
        break;
      case 0x30Eu:
        uint64_t result = 83;
        break;
      case 0x30Fu:
        uint64_t result = 84;
        break;
      case 0x310u:
        uint64_t result = 85;
        break;
      case 0x311u:
        uint64_t result = 86;
        break;
      case 0x312u:
        uint64_t result = 87;
        break;
      case 0x313u:
        uint64_t result = 88;
        break;
      case 0x314u:
        uint64_t result = 89;
        break;
      case 0x315u:
        uint64_t result = 90;
        break;
      default:
        switch(v2)
        {
          case 0x3CFu:
            uint64_t result = 91;
            break;
          case 0x3D0u:
          case 0x3D1u:
          case 0x3D2u:
          case 0x3D3u:
          case 0x3D4u:
          case 0x3D5u:
          case 0x3D6u:
          case 0x3D7u:
          case 0x3D8u:
          case 0x3D9u:
          case 0x3DAu:
          case 0x3DBu:
          case 0x3DCu:
          case 0x3DDu:
          case 0x3DEu:
          case 0x3DFu:
          case 0x3E0u:
          case 0x3E1u:
          case 0x3E2u:
          case 0x3E3u:
          case 0x3E4u:
          case 0x3E5u:
          case 0x3E6u:
          case 0x3E7u:
          case 0x3E8u:
          case 0x3E9u:
          case 0x3EAu:
          case 0x3EBu:
          case 0x3ECu:
          case 0x3EDu:
          case 0x3EEu:
          case 0x3EFu:
          case 0x3F0u:
          case 0x3F1u:
          case 0x3F2u:
          case 0x3F3u:
          case 0x3F4u:
          case 0x3F5u:
          case 0x3F6u:
          case 0x3F7u:
          case 0x3F8u:
          case 0x3F9u:
          case 0x3FAu:
          case 0x3FBu:
          case 0x3FCu:
          case 0x3FDu:
          case 0x3FEu:
          case 0x3FFu:
          case 0x400u:
          case 0x404u:
          case 0x405u:
          case 0x406u:
          case 0x407u:
          case 0x408u:
          case 0x409u:
          case 0x40Au:
          case 0x40Bu:
            goto LABEL_124;
          case 0x401u:
            uint64_t result = 92;
            break;
          case 0x402u:
            uint64_t result = 93;
            break;
          case 0x403u:
            uint64_t result = 94;
            break;
          case 0x40Cu:
            uint64_t result = 95;
            break;
          case 0x40Du:
            uint64_t result = 96;
            break;
          case 0x40Eu:
            uint64_t result = 97;
            break;
          case 0x40Fu:
            uint64_t result = 98;
            break;
          default:
            BOOL v3 = v2 > 0x4FF;
            if (v2 != 1279) {
              goto LABEL_124;
            }
            uint64_t result = 99;
            break;
        }
        break;
    }
  }
  return result;
}

unint64_t sub_1B3A027AC()
{
  unint64_t result = qword_1E9CD5898;
  if (!qword_1E9CD5898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5898);
  }
  return result;
}

unint64_t sub_1B3A02804()
{
  unint64_t result = qword_1E9CD58A0;
  if (!qword_1E9CD58A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD58A0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KnownKdebugClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD2) {
    goto LABEL_17;
  }
  if (a2 + 46 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 46) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 46;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 46;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 46;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2F;
  int v8 = v6 - 47;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KnownKdebugClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 46 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 46) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD1)
  {
    unsigned int v6 = ((a2 - 210) >> 8) + 1;
    *unint64_t result = a2 + 46;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A029B4);
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 46;
        break;
    }
  }
  return result;
}

uint64_t sub_1B3A029DC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1B3A029E4(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KnownKdebugClass()
{
  return &type metadata for KnownKdebugClass;
}

ValueMetadata *type metadata accessor for KdebugClass()
{
  return &type metadata for KdebugClass;
}

uint64_t getEnumTagSinglePayload for KnownKdebugSubclass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x6B) {
    goto LABEL_17;
  }
  if (a2 + 149 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 149) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 149;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 149;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 149;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x96;
  int v8 = v6 - 150;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KnownKdebugSubclass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 149 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 149) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x6B) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x6A)
  {
    unsigned int v6 = ((a2 - 107) >> 8) + 1;
    *unint64_t result = a2 - 107;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A02B68);
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 - 107;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KnownKdebugSubclass()
{
  return &type metadata for KnownKdebugSubclass;
}

ValueMetadata *type metadata accessor for KdebugSubclass()
{
  return &type metadata for KdebugSubclass;
}

uint64_t sub_1B3A02BB8()
{
  char v1 = *(unsigned char *)(v0 + 2);
  sub_1B3A70E00();
  sub_1B3A70E10();
  if (v1) {
    sub_1B3A70E30();
  }
  else {
    sub_1B3A70E20();
  }
  return sub_1B3A70E50();
}

uint64_t sub_1B3A02C30()
{
  if (*(unsigned char *)(v0 + 2))
  {
    sub_1B3A70E10();
    return sub_1B3A70E30();
  }
  else
  {
    sub_1B3A70E10();
    return sub_1B3A70E20();
  }
}

uint64_t sub_1B3A02C84()
{
  char v1 = *(unsigned char *)(v0 + 2);
  sub_1B3A70E00();
  sub_1B3A70E10();
  if (v1) {
    sub_1B3A70E30();
  }
  else {
    sub_1B3A70E20();
  }
  return sub_1B3A70E50();
}

uint64_t sub_1B3A02CF8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *a2;
  if (*a1 == v2) {
    unsigned int v3 = *((unsigned __int8 *)a2 + 2);
  }
  else {
    unsigned int v3 = 0;
  }
  BOOL v4 = *a1 == v2;
  if (a2[1]) {
    BOOL v4 = 0;
  }
  if (a1[1]) {
    return v3;
  }
  else {
    return v4;
  }
}

uint64_t sub_1B3A02D30(uint64_t a1, uint64_t a2)
{
  v9[0] = 44;
  v9[1] = 0xE100000000000000;
  int v8[2] = v9;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1B3A0420C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1B3A05D00, (uint64_t)v8, a1, a2);
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1B3A05D1C((uint64_t)v5, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v2)
  {
    a2 = sub_1B3A06020(v6);
    swift_bridgeObjectRelease();
  }
  return a2;
}

BOOL sub_1B3A02E04(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v5 == a3 >> 14)
  {
LABEL_10:
    sub_1B3A703C0();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    BOOL v15 = v14 == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      while (1)
      {
        uint64_t v7 = sub_1B3A70780();
        uint64_t v9 = v8;
        unint64_t v10 = sub_1B3A70760();
        uint64_t v11 = sub_1B3A703C0();
        if (!v12)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v15 = 1;
          goto LABEL_13;
        }
        if (v7 != v11 || v12 != v9) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v5 == v10 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      char v6 = sub_1B3A70D20();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        break;
      }
      if (v5 == v10 >> 14) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    BOOL v15 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1B3A02F9C()
{
  return 0x200000000000;
}

uint64_t sub_1B3A02FE0(uint64_t a1, int a2)
{
  unsigned int v3 = v2;
  uint64_t v4 = a1;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v79 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v80 = (unint64_t)(v5 + 63) >> 6;
  char v76 = a2;
  int64_t v8 = 0;
  int8x16_t v75 = vdupq_n_s8(a2 << 31 >> 31);
  uint64_t v74 = swift_bridgeObjectRetain();
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_22:
    int v16 = (unsigned __int16 *)(*(void *)(v4 + 48) + 4 * v12);
    unint64_t v17 = *v16;
    if (v16[1])
    {
      unint64_t v18 = v17 >> 3;
      int v19 = 1 << (v17 & 7);
      uint64_t v21 = *v3;
      unint64_t v20 = v3[1];
      switch(v20 >> 62)
      {
        case 1uLL:
          char v77 = 1 << (v17 & 7);
          uint64_t v28 = v20 & 0x3FFFFFFFFFFFFFFFLL;
          *(_OWORD *)unsigned int v3 = xmmword_1B3A73570;
          uint64_t v29 = v21 >> 32;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_75;
          }
          if (v29 < (int)v21) {
            goto LABEL_94;
          }
          if (sub_1B3A6FD40() && __OFSUB__((int)v21, sub_1B3A6FD70())) {
            goto LABEL_100;
          }
          uint64_t v4 = v74;
          sub_1B3A6FD80();
          swift_allocObject();
          uint64_t v63 = sub_1B3A6FD30();
          swift_release();
          uint64_t v28 = v63;
LABEL_75:
          if (v29 < (int)v21) {
            goto LABEL_89;
          }
          int64_t v64 = v8;
          uint64_t v65 = v4;
          unint64_t v66 = v17 >> 3;
          uint64_t v67 = sub_1B3A6FD40();
          if (!v67) {
            goto LABEL_104;
          }
          uint64_t v68 = v67;
          uint64_t v69 = sub_1B3A6FD70();
          if (__OFSUB__((int)v21, v69)) {
            goto LABEL_91;
          }
          uint64_t v70 = v68 + (int)v21 - v69;
          sub_1B3A6FD60();
          if (v76) {
            char v71 = *(unsigned char *)(v70 + v66) | v77;
          }
          else {
            char v71 = *(unsigned char *)(v70 + v66) & ~v77;
          }
          *(unsigned char *)(v70 + v66) = v71;
          *unsigned int v3 = v21;
          v3[1] = v28 | 0x4000000000000000;
          uint64_t v4 = v65;
          int64_t v8 = v64;
          continue;
        case 2uLL:
          char v78 = 1 << (v17 & 7);
          uint64_t v30 = v20 & 0x3FFFFFFFFFFFFFFFLL;
          *(_OWORD *)unsigned int v3 = xmmword_1B3A73570;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_53;
          }
          unint64_t v73 = v17 >> 3;
          uint64_t v32 = *(void *)(v21 + 16);
          uint64_t v31 = *(void *)(v21 + 24);
          if (sub_1B3A6FD40())
          {
            if (__OFSUB__(v32, sub_1B3A6FD70())) {
              goto LABEL_97;
            }
            if (__OFSUB__(v31, v32)) {
              goto LABEL_95;
            }
          }
          else if (__OFSUB__(v31, v32))
          {
            goto LABEL_95;
          }
          sub_1B3A6FD80();
          swift_allocObject();
          uint64_t v36 = sub_1B3A6FD30();
          swift_release();
          uint64_t v30 = v36;
          unint64_t v18 = v73;
LABEL_53:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v37 = *(void *)(v21 + 16);
            uint64_t v38 = *(void *)(v21 + 24);
            sub_1B3A6FF80();
            uint64_t v39 = swift_allocObject();
            *(void *)(v39 + 16) = v37;
            *(void *)(v39 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v38;
            swift_release();
            uint64_t v21 = v39;
          }
          uint64_t v40 = *(void *)(v21 + 16);
          uint64_t v41 = sub_1B3A6FD40();
          if (!v41) {
            goto LABEL_101;
          }
          uint64_t v42 = v41;
          uint64_t v43 = sub_1B3A6FD70();
          if (__OFSUB__(v40, v43)) {
            goto LABEL_86;
          }
          uint64_t v44 = v42 + v40 - v43;
          sub_1B3A6FD60();
          if (v76) {
            char v45 = *(unsigned char *)(v44 + v18) | v78;
          }
          else {
            char v45 = *(unsigned char *)(v44 + v18) & ~v78;
          }
          *(unsigned char *)(v44 + v18) = v45;
          *unsigned int v3 = v21;
          v3[1] = v30 | 0x8000000000000000;
          break;
        case 3uLL:
          continue;
        default:
          uint64_t v81 = *v3;
          LOWORD(v82) = v20;
          BYTE2(v82) = BYTE2(v20);
          HIBYTE(v82) = BYTE3(v20);
          unsigned __int8 v83 = BYTE4(v20);
          unsigned __int8 v84 = BYTE5(v20);
          unsigned __int8 v85 = BYTE6(v20);
          if (v76) {
            char v22 = *((unsigned char *)&v81 + v18) | v19;
          }
          else {
            char v22 = *((unsigned char *)&v81 + v18) & ~(_BYTE)v19;
          }
          *((unsigned char *)&v81 + v18) = v22;
          goto LABEL_5;
      }
    }
    else
    {
      uint64_t v24 = *v3;
      unint64_t v23 = v3[1];
      switch(v23 >> 62)
      {
        case 1uLL:
          uint64_t v25 = v23 & 0x3FFFFFFFFFFFFFFFLL;
          *(_OWORD *)unsigned int v3 = xmmword_1B3A73570;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v27 = v24 >> 32;
          if (isUniquelyReferenced_nonNull_native) {
            goto LABEL_69;
          }
          if (v27 < (int)v24) {
            goto LABEL_93;
          }
          if (sub_1B3A6FD40() && __OFSUB__((int)v24, sub_1B3A6FD70())) {
            goto LABEL_99;
          }
          sub_1B3A6FD80();
          swift_allocObject();
          uint64_t v57 = sub_1B3A6FD30();
          swift_release();
          uint64_t v25 = v57;
          uint64_t v27 = v24 >> 32;
LABEL_69:
          if (v27 < (int)v24) {
            goto LABEL_88;
          }
          uint64_t v58 = sub_1B3A6FD40();
          if (!v58) {
            goto LABEL_103;
          }
          uint64_t v59 = v58;
          uint64_t v60 = sub_1B3A6FD70();
          if (__OFSUB__((int)v24, v60)) {
            goto LABEL_90;
          }
          uint64_t v61 = v60;
          sub_1B3A6FD60();
          long long v62 = (int8x16_t *)(v59 + (int)v24 + 32 * v17 - v61);
          int8x16_t *v62 = v75;
          v62[1] = v75;
          unint64_t v56 = v25 | 0x4000000000000000;
          goto LABEL_73;
        case 2uLL:
          uint64_t v33 = v23 & 0x3FFFFFFFFFFFFFFFLL;
          *(_OWORD *)unsigned int v3 = xmmword_1B3A73570;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_63;
          }
          uint64_t v34 = *(void *)(v24 + 16);
          uint64_t v35 = *(void *)(v24 + 24);
          if (sub_1B3A6FD40())
          {
            if (__OFSUB__(v34, sub_1B3A6FD70())) {
              goto LABEL_98;
            }
            if (__OFSUB__(v35, v34)) {
              goto LABEL_96;
            }
          }
          else if (__OFSUB__(v35, v34))
          {
            goto LABEL_96;
          }
          sub_1B3A6FD80();
          swift_allocObject();
          uint64_t v46 = sub_1B3A6FD30();
          swift_release();
          uint64_t v33 = v46;
LABEL_63:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v47 = *(void *)(v24 + 16);
            uint64_t v48 = *(void *)(v24 + 24);
            sub_1B3A6FF80();
            uint64_t v49 = swift_allocObject();
            *(void *)(v49 + 16) = v47;
            *(void *)(v49 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v48;
            swift_release();
            uint64_t v24 = v49;
          }
          uint64_t v50 = *(void *)(v24 + 16);
          uint64_t v51 = sub_1B3A6FD40();
          if (!v51) {
            goto LABEL_102;
          }
          uint64_t v52 = v51;
          uint64_t v53 = sub_1B3A6FD70();
          if (__OFSUB__(v50, v53)) {
            goto LABEL_87;
          }
          uint64_t v54 = v53;
          sub_1B3A6FD60();
          long long v55 = (int8x16_t *)(v52 + v50 + 32 * v17 - v54);
          *long long v55 = v75;
          v55[1] = v75;
          unint64_t v56 = v33 | 0x8000000000000000;
LABEL_73:
          *unsigned int v3 = v24;
          v3[1] = v56;
          uint64_t v4 = v74;
          break;
        case 3uLL:
          continue;
        default:
          LOWORD(v8ktrace_session_set_default_event_names_enabled(global_session, 1) = *v3;
          BYTE2(v8ktrace_session_set_default_event_names_enabled(global_session, 1) = BYTE2(v24);
          BYTE3(v8ktrace_session_set_default_event_names_enabled(global_session, 1) = BYTE3(v24);
          BYTE4(v8ktrace_session_set_default_event_names_enabled(global_session, 1) = BYTE4(v24);
          BYTE5(v8ktrace_session_set_default_event_names_enabled(global_session, 1) = BYTE5(v24);
          BYTE6(v8ktrace_session_set_default_event_names_enabled(global_session, 1) = BYTE6(v24);
          HIBYTE(v8ktrace_session_set_default_event_names_enabled(global_session, 1) = HIBYTE(v24);
          LOWORD(v82) = v23;
          BYTE2(v82) = BYTE2(v23);
          HIBYTE(v82) = BYTE3(v23);
          unsigned __int8 v83 = BYTE4(v23);
          unsigned __int8 v84 = BYTE5(v23);
          unsigned __int8 v85 = BYTE6(v23);
          uint64_t v9 = (int8x16_t *)(&v81 + 4 * v17);
          *uint64_t v9 = v75;
          v9[1] = v75;
LABEL_5:
          unint64_t v10 = v82 | ((unint64_t)v83 << 32) | ((unint64_t)v84 << 40) | ((unint64_t)v85 << 48);
          *unsigned int v3 = v81;
          v3[1] = v10;
          continue;
      }
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
  }
  if (v13 >= v80) {
    goto LABEL_82;
  }
  unint64_t v14 = *(void *)(v79 + 8 * v13);
  ++v8;
  if (v14) {
    goto LABEL_21;
  }
  int64_t v8 = v13 + 1;
  if (v13 + 1 >= v80) {
    goto LABEL_82;
  }
  unint64_t v14 = *(void *)(v79 + 8 * v8);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v8 = v13 + 2;
  if (v13 + 2 >= v80) {
    goto LABEL_82;
  }
  unint64_t v14 = *(void *)(v79 + 8 * v8);
  if (v14)
  {
LABEL_21:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v15 = v13 + 3;
  if (v15 < v80)
  {
    unint64_t v14 = *(void *)(v79 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v8 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_92;
        }
        if (v8 >= v80) {
          goto LABEL_82;
        }
        unint64_t v14 = *(void *)(v79 + 8 * v8);
        ++v15;
        if (v14) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v15;
    goto LABEL_21;
  }
LABEL_82:

  return swift_release();
}

BOOL sub_1B3A03864(int a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v5 = a1;
  v45[2] = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x10000) != 0)
  {
    int v9 = 1 << (a1 & 7);
    uint64_t v10 = (unsigned __int16)a1 >> 3;
    switch(a3 >> 62)
    {
      case 1uLL:
        if ((int)a2 > a2 >> 32) {
          goto LABEL_69;
        }
        sub_1B39B396C(a2, a3);
        uint64_t v34 = sub_1B3A6FD40();
        if (!v34) {
          goto LABEL_43;
        }
        uint64_t v35 = sub_1B3A6FD70();
        if (__OFSUB__((int)a2, v35)) {
          goto LABEL_73;
        }
        v34 += (int)a2 - v35;
LABEL_43:
        sub_1B3A6FD60();
        int v36 = *(unsigned __int8 *)(v34 + v10);
        sub_1B39B0D88(a2, a3);
        BOOL v37 = (v36 & v9) == 0;
LABEL_50:
        BOOL result = !v37;
        break;
      case 2uLL:
        uint64_t v38 = *(void *)(a2 + 16);
        swift_retain();
        swift_retain();
        uint64_t v39 = sub_1B3A6FD40();
        if (!v39) {
          goto LABEL_47;
        }
        uint64_t v40 = sub_1B3A6FD70();
        if (__OFSUB__(v38, v40)) {
          goto LABEL_72;
        }
        v39 += v38 - v40;
LABEL_47:
        sub_1B3A6FD60();
        int v41 = *(unsigned __int8 *)(v39 + v10);
        swift_release();
        swift_release();
        BOOL v37 = (v41 & v9) == 0;
        goto LABEL_50;
      case 3uLL:
        memset(v45, 0, 14);
        goto LABEL_49;
      default:
        v45[0] = a2;
        LOWORD(v45[1]) = a3;
        BYTE2(v45[1]) = BYTE2(a3);
        BYTE3(v45[1]) = BYTE3(a3);
        BYTE4(v45[1]) = BYTE4(a3);
        BYTE5(v45[1]) = BYTE5(a3);
LABEL_49:
        BOOL v37 = (*((unsigned char *)v45 + v10) & v9) == 0;
        goto LABEL_50;
    }
  }
  else
  {
    switch(a3 >> 62)
    {
      case 1uLL:
        uint64_t v11 = (a2 >> 32) - (int)a2;
        if (a2 >> 32 < (int)a2) {
          goto LABEL_66;
        }
        sub_1B39B396C(a2, a3);
        uint64_t v12 = sub_1B3A6FD40();
        if (!v12) {
          goto LABEL_12;
        }
        uint64_t v13 = sub_1B3A6FD70();
        if (__OFSUB__((int)a2, v13)) {
          goto LABEL_71;
        }
        v12 += (int)a2 - v13;
LABEL_12:
        uint64_t v14 = sub_1B3A6FD60();
        if (v14 >= v11) {
          uint64_t v15 = (a2 >> 32) - (int)a2;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v12 || (uint64_t v16 = 32 * v5, v17 = v16 | 0x1F, v15 <= v17))
        {
          __break(1u);
          goto LABEL_57;
        }
        if (v17 + 1 == v16)
        {
LABEL_22:
          sub_1B39B0D88(a2, a3);
          return 1;
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v19 = v15 - v16;
          uint64_t v20 = v12 + v16;
          while (1)
          {
            if (v19 == v18) {
              goto LABEL_64;
            }
            if (*(unsigned __int8 *)(v20 + v18) != 255) {
              break;
            }
            if (++v18 == 32) {
              goto LABEL_22;
            }
          }
          sub_1B39B0D88(a2, a3);
          return 0;
        }
      case 2uLL:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        swift_retain();
        swift_retain();
        uint64_t v23 = sub_1B3A6FD40();
        if (!v23) {
          goto LABEL_26;
        }
        uint64_t v24 = sub_1B3A6FD70();
        if (__OFSUB__(v21, v24)) {
          goto LABEL_70;
        }
        v23 += v21 - v24;
LABEL_26:
        BOOL v25 = __OFSUB__(v22, v21);
        uint64_t v26 = v22 - v21;
        if (v25) {
          goto LABEL_67;
        }
        uint64_t v27 = sub_1B3A6FD60();
        if (v27 >= v26) {
          uint64_t v28 = v26;
        }
        else {
          uint64_t v28 = v27;
        }
        uint64_t v29 = 32 * v5;
        uint64_t v30 = v29 | 0x1F;
        if (!v23) {
          uint64_t v28 = 0;
        }
        if (v28 <= v30) {
          goto LABEL_68;
        }
        if (v30 + 1 == v29) {
          goto LABEL_38;
        }
        uint64_t v31 = 0;
        uint64_t v32 = v28 - v29;
        uint64_t v33 = v23 + v29;
        break;
      case 3uLL:
        __break(1u);
        JUMPOUT(0x1B3A03CECLL);
      default:
        v45[0] = a2;
        LOWORD(v45[1]) = a3;
        BYTE2(v45[1]) = BYTE2(a3);
        BYTE3(v45[1]) = BYTE3(a3);
        BYTE4(v45[1]) = BYTE4(a3);
        BYTE5(v45[1]) = BYTE5(a3);
        unint64_t v6 = 32 * a1;
        unint64_t v7 = v6 | 0x1F;
        if (v7 >= BYTE6(a3)) {
          goto LABEL_65;
        }
        if (v7 + 1 == v6) {
          return 1;
        }
        if (LOBYTE(v45[4 * a1]) != 255) {
          return 0;
        }
        uint64_t v42 = &v45[v6 / 8];
        uint64_t v43 = 1;
        do
        {
          int v44 = *((unsigned __int8 *)v42 + v43);
          BOOL result = v44 == 255;
          if (v43 == 31) {
            break;
          }
          ++v43;
        }
        while (v44 == 255);
        return result;
    }
    while (1)
    {
      if (v32 == v31)
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
      }
      if (*(unsigned __int8 *)(v33 + v31) != 255) {
        break;
      }
      if (++v31 == 32)
      {
LABEL_38:
        swift_release();
        swift_release();
        return 1;
      }
    }
LABEL_57:
    swift_release();
    swift_release();
    return 0;
  }
  return result;
}

uint64_t sub_1B3A03D0C(uint64_t a1, unint64_t a2)
{
  return sub_1B3A04194(a1, a2, (void (*)(uint64_t, uint64_t, unint64_t))sub_1B3A03D38, (void (*)(uint64_t, uint64_t, unint64_t))sub_1B3A03D38);
}

#error "1B3A03D38: local variable allocation failed (funcsize=274)"

uint64_t sub_1B3A04194(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, uint64_t, unint64_t), void (*a4)(uint64_t, uint64_t, unint64_t))
{
  sub_1B39B396C(a1, a2);
  return sub_1B3A05510(v4, a1, a2, a3, a4);
}

BOOL sub_1B3A041F8(uint64_t a1, uint64_t a2)
{
  return sub_1B3A06208(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

char *sub_1B3A0420C(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 15;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_1B3A050C0(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  uint64_t v38 = a1;
  uint64_t v39 = v14;
  unint64_t v44 = 4 * v16;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v9 = 15;
  unint64_t v8 = 15;
  unint64_t v17 = 15;
  while (1)
  {
    v46[0] = sub_1B3A70480();
    v46[1] = v18;
    uint64_t v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    uint64_t v6 = v19;
    swift_bridgeObjectRelease();
    if (v6) {
      break;
    }
    unint64_t v9 = sub_1B3A70380();
LABEL_9:
    if (v44 == v9 >> 14) {
      goto LABEL_29;
    }
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = sub_1B3A70380();
    *(void *)(v43 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v17 = v9;
    goto LABEL_9;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v20 = sub_1B3A704A0();
  uint64_t v40 = v21;
  uint64_t v41 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = sub_1B3A051D0(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v27 = *((void *)v10 + 2);
  unint64_t v26 = *((void *)v10 + 3);
  uint64_t v6 = v27 + 1;
  if (v27 >= v26 >> 1) {
    uint64_t v10 = sub_1B3A051D0((char *)(v26 > 1), v27 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v6;
  uint64_t v28 = &v10[32 * v27];
  *((void *)v28 + 4) = v41;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v40;
  *(void *)(v39 + 16) = v10;
  uint64_t v29 = sub_1B3A70380();
  unint64_t v9 = v29;
  *(void *)(v43 + 16) = v29;
  if (*((void *)v10 + 2) != v38)
  {
    unint64_t v8 = v29;
    unint64_t v17 = v29;
    goto LABEL_9;
  }
  unint64_t v17 = v29;
  unint64_t v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= v17 >> 14)
  {
    uint64_t v6 = sub_1B3A704A0();
    unint64_t v8 = v31;
    unint64_t v9 = v32;
    uint64_t v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  uint64_t v10 = sub_1B3A051D0(0, *((void *)v10 + 2) + 1, 1, v10);
LABEL_34:
  unint64_t v35 = *((void *)v10 + 2);
  unint64_t v34 = *((void *)v10 + 3);
  if (v35 >= v34 >> 1) {
    uint64_t v10 = sub_1B3A051D0((char *)(v34 > 1), v35 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v35 + 1;
  int v36 = &v10[32 * v35];
  *((void *)v36 + 4) = v6;
  *((void *)v36 + 5) = v8;
  *((void *)v36 + 6) = v9;
  *((void *)v36 + 7) = v11;
  *(void *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

uint64_t sub_1B3A0462C(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = *v2;
  sub_1B3A70E00();
  sub_1B3A70E10();
  if ((a2 & 0x10000) != 0) {
    sub_1B3A70E30();
  }
  else {
    sub_1B3A70E20();
  }
  uint64_t v6 = sub_1B3A70E50();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_14:
    int v13 = HIWORD(a2) & 1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1B3A04AA8(a2 & 0x1FFFF, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_15;
  }
  uint64_t v9 = ~v7;
  while (1)
  {
    uint64_t v10 = (unsigned __int16 *)(*(void *)(v5 + 48) + 4 * v8);
    if ((v10[1] & 1) == 0) {
      break;
    }
    if ((a2 & 0x10000) != 0 && *v10 == (unsigned __int16)a2) {
      goto LABEL_13;
    }
LABEL_6:
    unint64_t v8 = (v8 + 1) & v9;
    if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      goto LABEL_14;
    }
  }
  if ((a2 & 0x10000) != 0 || *v10 != a2) {
    goto LABEL_6;
  }
LABEL_13:
  uint64_t result = 0;
  uint64_t v12 = *(void *)(*v2 + 48) + 4 * v8;
  LOWORD(a2) = *(_WORD *)v12;
  LOBYTE(v13) = *(unsigned char *)(v12 + 2);
LABEL_15:
  *(_WORD *)a1 = a2;
  *(unsigned char *)(a1 + 2) = v13;
  return result;
}

uint64_t sub_1B3A047A8()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58D0);
  uint64_t result = sub_1B3A70980();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v29 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v9) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_36;
          }
          unint64_t v16 = v29[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_36;
            }
            unint64_t v16 = v29[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_36:
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v28;
                }
                char v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_42;
                  }
                  if (v5 >= v9) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v29[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(v2 + 48) + 4 * v14;
      __int16 v19 = *(_WORD *)v18;
      char v20 = *(unsigned char *)(v18 + 2);
      sub_1B3A70E00();
      sub_1B3A70E10();
      if (v20) {
        sub_1B3A70E30();
      }
      else {
        sub_1B3A70E20();
      }
      uint64_t result = sub_1B3A70E50();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 4 * v11;
      *(_WORD *)uint64_t v12 = v19;
      *(unsigned char *)(v12 + 2) = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v1 = v4;
  return result;
}

uint64_t sub_1B3A04AA8(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_21;
  }
  if (a3)
  {
    sub_1B3A047A8();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1B3A04C4C();
      goto LABEL_21;
    }
    sub_1B3A04DF4();
  }
  uint64_t v8 = *v3;
  sub_1B3A70E00();
  sub_1B3A70E10();
  if ((v5 & 0x10000) != 0) {
    sub_1B3A70E30();
  }
  else {
    sub_1B3A70E20();
  }
  uint64_t result = sub_1B3A70E50();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    do
    {
      unint64_t v11 = (unsigned __int16 *)(*(void *)(v8 + 48) + 4 * a2);
      if (v11[1])
      {
        if ((v5 & 0x10000) != 0 && *v11 == (unsigned __int16)v5) {
          goto LABEL_20;
        }
      }
      else if ((v5 & 0x10000) == 0 && *v11 == v5)
      {
LABEL_20:
        uint64_t result = sub_1B3A70D60();
        __break(1u);
        break;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_21:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v13 = *(void *)(v12 + 48) + 4 * a2;
  *(_WORD *)uint64_t v13 = v5;
  *(unsigned char *)(v13 + 2) = BYTE2(v5) & 1;
  uint64_t v14 = *(void *)(v12 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v16;
  }
  return result;
}

void *sub_1B3A04C4C()
{
  char v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58D0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70970();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *char v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    __int16 v18 = *(_WORD *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 2);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_WORD *)uint64_t v19 = v18;
    *(unsigned char *)(v19 + 2) = v17;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1B3A04DF4()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58D0);
  uint64_t result = sub_1B3A70980();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *char v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v28) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_36;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 4 * v14;
    __int16 v19 = *(_WORD *)v18;
    char v20 = *(unsigned char *)(v18 + 2);
    sub_1B3A70E00();
    sub_1B3A70E10();
    if (v20) {
      sub_1B3A70E30();
    }
    else {
      sub_1B3A70E20();
    }
    uint64_t result = sub_1B3A70E50();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 4 * v11;
    *(_WORD *)uint64_t v12 = v19;
    *(unsigned char *)(v12 + 2) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_36:
    uint64_t result = swift_release();
    char v1 = v0;
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1B3A050C0(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a4;
  uint64_t v5 = sub_1B3A704A0();
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  unint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v9 = sub_1B3A051D0(0, *((void *)v9 + 2) + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  unint64_t v17 = *((void *)v9 + 2);
  unint64_t v16 = *((void *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    unint64_t v9 = sub_1B3A051D0((char *)(v16 > 1), v17 + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  *((void *)v9 + 2) = v17 + 1;
  uint64_t v18 = &v9[32 * v17];
  *((void *)v18 + 4) = v5;
  *((void *)v18 + 5) = v6;
  *((void *)v18 + 6) = v7;
  *((void *)v18 + 7) = v8;
  return v11 ^ 1u;
}

char *sub_1B3A051D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F0);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A052D4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B3A05314(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B3A052F4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B3A0540C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B3A05314(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58D8);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 4 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v10;
}

char *sub_1B3A0540C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1B3A05510(void *a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, uint64_t, unint64_t), void (*a5)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      *(void *)&long long v25 = *a1;
      *((void *)&v25 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1B39B396C(a2, a3);
      sub_1B3A057A8((int *)&v25, a2, a3, a5);
      uint64_t result = sub_1B39B0D88(a2, a3);
      uint64_t v16 = *((void *)&v25 + 1) | 0x4000000000000000;
      *a1 = v25;
      a1[1] = v16;
      return result;
    case 2uLL:
      *(void *)&long long v25 = *a1;
      *((void *)&v25 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1B3A6FF50();
      uint64_t v17 = *((void *)&v25 + 1);
      uint64_t v18 = *(void *)(v25 + 16);
      uint64_t v24 = *(void *)(v25 + 24);
      uint64_t v19 = sub_1B3A6FD40();
      if (!v19)
      {
        __break(1u);
        JUMPOUT(0x1B3A05798);
      }
      uint64_t v20 = v19;
      uint64_t v21 = sub_1B3A6FD70();
      uint64_t v22 = v18 - v21;
      if (__OFSUB__(v18, v21))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      if (__OFSUB__(v24, v18)) {
        goto LABEL_11;
      }
      sub_1B3A6FD60();
      a4(v20 + v22, a2, a3);
      uint64_t result = sub_1B39B0D88(a2, a3);
      *a1 = v25;
      a1[1] = v17 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v25 + 7) = 0;
      *(void *)&long long v25 = 0;
      a4((uint64_t)&v25, a2, a3);
      return sub_1B39B0D88(a2, a3);
    default:
      *(void *)&long long v25 = *a1;
      WORD4(v25) = v5;
      BYTE10(v25) = BYTE2(v5);
      BYTE11(v25) = BYTE3(v5);
      BYTE12(v25) = BYTE4(v5);
      BYTE13(v25) = BYTE5(v5);
      BYTE14(v25) = BYTE6(v5);
      a4((uint64_t)&v25, a2, a3);
      uint64_t v9 = v25;
      uint64_t v10 = DWORD2(v25);
      uint64_t v11 = BYTE12(v25);
      uint64_t v12 = BYTE13(v25);
      uint64_t v13 = BYTE14(v25);
      uint64_t result = sub_1B39B0D88(a2, a3);
      *a1 = v9;
      a1[1] = v10 | (v11 << 32) | (v12 << 40) | (v13 << 48);
      return result;
  }
}

uint64_t sub_1B3A057A8(int *a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, uint64_t, unint64_t))
{
  uint64_t result = sub_1B3A6FF70();
  uint64_t v9 = *a1;
  if (a1[1] < (int)v9)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = sub_1B3A6FD40();
  if (result)
  {
    uint64_t v10 = result;
    uint64_t result = sub_1B3A6FD70();
    BOOL v11 = __OFSUB__(v9, result);
    uint64_t v12 = v9 - result;
    if (!v11)
    {
      sub_1B3A6FD60();
      a4(v10 + v12, a2, a3);
      return sub_1B39B0D88(a2, a3);
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1B3A0585C@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_1B39B396C(a2, a3);
      uint64_t v10 = (char *)sub_1B3A6FD40();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_1B3A6FD70();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_1B3A6FD60();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1B3A05AC0);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_1B39B0D88(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)sub_1B3A6FD40();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_1B3A6FD70();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_1B3A6FD60();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1B3A05AD0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_1B39B396C(a1, a2);
      char v5 = sub_1B3A06150((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      sub_1B39B0D88(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v5 = sub_1B3A06150(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      sub_1B39B0D88(a3, a4);
      return v5 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_8;
    default:
      __s1[0] = a1;
      LOWORD(__s1[1]) = a2;
      BYTE2(__s1[1]) = BYTE2(a2);
      BYTE3(__s1[1]) = BYTE3(a2);
      BYTE4(__s1[1]) = BYTE4(a2);
      BYTE5(__s1[1]) = BYTE5(a2);
LABEL_8:
      sub_1B3A0585C((uint64_t)__s1, a3, a4, &v14);
      sub_1B39B0D88(a3, a4);
      if (!v4) {
        char v5 = v14;
      }
      return v5 & 1;
  }
}

uint64_t sub_1B3A05D00(void *a1)
{
  return sub_1B3A060F8(a1) & 1;
}

unint64_t sub_1B3A05D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (!v3) {
    return v4;
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  sub_1B3A052D4(0, v3, 0);
  uint64_t v4 = v27;
  for (uint64_t i = a1 + 56; ; i += 32)
  {
    unint64_t v7 = *(void *)(i - 24);
    unint64_t v8 = *(void *)(i - 16);
    swift_bridgeObjectRetain();
    BOOL v9 = sub_1B3A02E04(83, 0xE100000000000000, v7, v8);
    if (v9) {
      break;
    }
    if (!sub_1B3A02E04(67, 0xE100000000000000, v7, v8)) {
      goto LABEL_21;
    }
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B3A70770();
    if (v16) {
      unint64_t result = v8;
    }
    if (v8 >> 14 < result >> 14) {
      goto LABEL_25;
    }
    sub_1B3A707A0();
    swift_bridgeObjectRelease();
    unint64_t v17 = sub_1B3A06724();
    unint64_t v13 = sub_1B3A3D8BC(MEMORY[0x1E4FBB7A8], v17);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0 || v13 >= 0x100)
    {
LABEL_21:
      type metadata accessor for KTraceRecordError();
      sub_1B3A066CC();
      swift_allocError();
      *int v23 = a2;
      v23[1] = a3;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
LABEL_22:
      swift_release();
      swift_bridgeObjectRelease();
      return v4;
    }
LABEL_16:
    if (v26) {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = *(void *)(v27 + 16);
    unint64_t v20 = *(void *)(v27 + 24);
    if (v21 >= v20 >> 1) {
      sub_1B3A052D4((char *)(v20 > 1), v21 + 1, 1);
    }
    *(void *)(v27 + 16) = v21 + 1;
    uint64_t v22 = v27 + 4 * v21;
    *(_WORD *)(v22 + 32) = v13;
    *(unsigned char *)(v22 + 34) = v9;
    if (!--v3) {
      return v4;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t result = sub_1B3A70770();
  if (v11) {
    unint64_t result = v8;
  }
  if (v8 >> 14 >= result >> 14)
  {
    sub_1B3A707A0();
    swift_bridgeObjectRelease();
    unint64_t v12 = sub_1B3A06724();
    unint64_t v13 = sub_1B3A3D8BC(MEMORY[0x1E4FBB7A8], v12);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0 || v13 >> 16) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1B3A06020(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1B3A06678();
  uint64_t result = sub_1B3A705D0();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 34);
    do
    {
      int v5 = *((unsigned __int16 *)v4 - 1);
      int v6 = *v4;
      v4 += 4;
      sub_1B3A0462C((uint64_t)v7, v5 | (v6 << 16));
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1B3A0609C()
{
  unint64_t result = qword_1E9CD58B0;
  if (!qword_1E9CD58B0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9CD58A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD58B0);
  }
  return result;
}

uint64_t sub_1B3A060F8(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return sub_1B3A70D20() & 1;
  }
}

uint64_t sub_1B3A06150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_1B3A6FD40();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_1B3A6FD70();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1B3A6FD60();
  sub_1B3A0585C(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

BOOL sub_1B3A06208(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x1B3A06338);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_19;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12 && (v8 < 1 || (sub_1B39B396C(a3, a4), (sub_1B3A05AD0(a1, a2, a3, a4) & 1) != 0))) {
            return 1;
          }
          else {
            return 0;
          }
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_20;
        case 3uLL:
          return !v8;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_18;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1B3A0635C()
{
  unint64_t result = qword_1E9CD58B8;
  if (!qword_1E9CD58B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD58B8);
  }
  return result;
}

uint64_t __swift_memcpy3_2(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Filter(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 1) {
    int v5 = -1;
  }
  else {
    int v5 = v4 ^ 0xFF;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Filter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 2) = -(char)a2;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_1B3A064C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_1B3A064CC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 2) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Filter()
{
  return &type metadata for Filter;
}

ValueMetadata *type metadata accessor for SubclassFilter()
{
  return &type metadata for SubclassFilter;
}

uint64_t *initializeBufferWithCopyOfBuffer for SubclassBitmap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1B39B396C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for SubclassBitmap(uint64_t a1)
{
  return sub_1B39B0D88(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for SubclassBitmap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1B39B396C(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1B39B0D88(v5, v6);
  return a1;
}

uint64_t *assignWithTake for SubclassBitmap(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1B39B0D88(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubclassBitmap(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SubclassBitmap(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubclassBitmap()
{
  return &type metadata for SubclassBitmap;
}

unint64_t sub_1B3A06678()
{
  unint64_t result = qword_1E9CD58C8;
  if (!qword_1E9CD58C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD58C8);
  }
  return result;
}

unint64_t sub_1B3A066CC()
{
  unint64_t result = qword_1E9CD58E0;
  if (!qword_1E9CD58E0)
  {
    type metadata accessor for KTraceRecordError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD58E0);
  }
  return result;
}

unint64_t sub_1B3A06724()
{
  unint64_t result = qword_1E9CD58E8;
  if (!qword_1E9CD58E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD58E8);
  }
  return result;
}

uint64_t sub_1B3A06778()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B3A067B0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B3A067C4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1B3A067DC()
{
  sub_1B3A067C4(v0, (uint64_t)&v4);
  switch(v5)
  {
    case 4:
      uint64_t v3 = 0;
      sub_1B3A709B0();
      sub_1B3A703A0();
      sub_1B3A703A0();
      sub_1B3A703A0();
      break;
    default:
      uint64_t v1 = v4;
      sub_1B3A709B0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v3 = v1;
      break;
  }
  sub_1B3A703A0();
  return v3;
}

uint64_t sub_1B3A06A94()
{
  sub_1B3A067C4(v0, (uint64_t)v2);
  return sub_1B3A067DC();
}

void *sub_1B3A06AE8(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = (uint64_t *)(a3 + 40);
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v10 = *v7;
    v26[0] = *(v7 - 1);
    v26[1] = v10;
    swift_bridgeObjectRetain();
    a1(&v20, v26);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v21;
    if (v21)
    {
      uint64_t v12 = v20;
      char v13 = v22;
      long long v18 = v24;
      long long v19 = v23;
      uint64_t v27 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_1B3A0C4A8(0, v8[2] + 1, 1, v8);
      }
      unint64_t v15 = v8[2];
      unint64_t v14 = v8[3];
      if (v15 >= v14 >> 1) {
        uint64_t v8 = sub_1B3A0C4A8((void *)(v14 > 1), v15 + 1, 1, v8);
      }
      int v8[2] = v15 + 1;
      uint64_t v9 = &v8[8 * v15];
      v9[4] = v12;
      void v9[5] = v11;
      *((unsigned char *)v9 + 48) = v13 & 1;
      *(_OWORD *)(v9 + 7) = v19;
      *(_OWORD *)(v9 + 9) = v18;
      void v9[11] = v27;
    }
    v7 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

double sub_1B3A06C88@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1B3A6FE60();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1B3A6FF40();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[1];
  uint64_t v38 = *a1;
  uint64_t v39 = v11;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F276C0], v4);
  sub_1B39ADD78();
  sub_1B3A6FF30();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v12 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
  char v13 = (void *)sub_1B3A6FEB0();
  id v14 = objc_msgSend(v12, sel_initWithURL_, v13);

  uint64_t v15 = sub_1B3A70290();
  id v16 = objc_msgSend((id)v15, sel_stringByDeletingPathExtension);

  uint64_t v17 = sub_1B3A702C0();
  uint64_t v19 = v18;

  uint64_t v38 = sub_1B3A6FF10();
  uint64_t v39 = v20;
  strcpy((char *)v37, "AppleInternal");
  v37[7] = -4864;
  LOBYTE(v15) = sub_1B3A70810();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v38 = v17;
    uint64_t v39 = v19;
    sub_1B3A703A0();
    uint64_t v17 = v38;
    uint64_t v19 = v39;
  }
  if (!v14) {
    goto LABEL_8;
  }
  id v21 = objc_msgSend(v14, sel_infoDictionary);
  if (!v21)
  {

LABEL_8:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  uint64_t v22 = v21;
  uint64_t v23 = sub_1B3A70220();

  sub_1B3A0D914(v17, v19, v23, (uint64_t)&v38);
  uint64_t v24 = v38;
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  uint64_t v27 = v41;
  uint64_t v28 = v42;
  uint64_t v29 = v43;
  uint64_t v30 = v44;
  uint64_t v34 = v45;

  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  if (v40)
  {
    sub_1B3A0FFC4((uint64_t)&v38);
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
  }
  else
  {
    *(void *)a2 = v24;
    *(void *)(a2 + 8) = v25;
    *(void *)(a2 + 16) = v26;
    *(void *)(a2 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v27;
    *(void *)(a2 + 32) = v28;
    *(void *)(a2 + 40) = v29;
    uint64_t v32 = v34;
    *(void *)(a2 + 48) = v30;
    *(void *)(a2 + 56) = v32;
  }
  return result;
}

uint64_t sub_1B3A0703C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1B3A0C4A8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[8 * v9 + 4];
  if (a1 + 32 < v10 + (v8 << 6) && v10 < a1 + 32 + (v8 << 6)) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    int v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A07194(uint64_t a1)
{
  return sub_1B3A071FC(a1, MEMORY[0x1E4FBD360], qword_1E9CDCCC8, MEMORY[0x1E4FBD358]);
}

uint64_t sub_1B3A071C8(uint64_t a1)
{
  return sub_1B3A071FC(a1, MEMORY[0x1E4FBD330], qword_1E9CDCCE0, MEMORY[0x1E4FBD328]);
}

uint64_t sub_1B3A071FC(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(unint64_t, unint64_t, uint64_t, unint64_t))
{
  uint64_t v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  __swift_project_value_buffer(v6, (uint64_t)a3);
  return a4(0xD000000000000010, 0x80000001B3A79D90, 0x72656469766F7250, 0xE900000000000073);
}

uint64_t sub_1B3A07288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v63 = a4;
  uint64_t v7 = sub_1B3A6FF40();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v58 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v74 = (char *)&v58 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v78 = (char *)&v58 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v58 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v24 = os_variant_has_internal_content() & a3;
  unint64_t v25 = sub_1B3A0E114(v24);
  uint64_t v26 = *(void *)(v25 + 16);
  unint64_t v62 = v25;
  if (v26)
  {
    int v61 = v24;
    uint64_t v59 = v11;
    uint64_t v60 = v14;
    uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    uint64_t v27 = v8 + 16;
    unint64_t v29 = v25 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
    uint64_t v70 = (unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 32);
    char v71 = v28;
    uint64_t v66 = *(void *)(v27 + 56);
    uint64_t v67 = v23;
    int v72 = (void (**)(char *, char *, uint64_t))(v27 + 16);
    unint64_t v73 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 40);
    char v77 = (void (**)(char *, uint64_t))(v27 - 8);
    uint64_t v68 = v27;
    uint64_t v69 = v20;
    while (1)
    {
      v71(v23, v29, v7);
      uint64_t v30 = *v73;
      (*v73)(v23, 0, 1, v7);
      if ((*v70)(v23, 1, v7) == 1) {
        break;
      }
      unint64_t v75 = v29;
      uint64_t v76 = v26;
      uint64_t v31 = *v72;
      int64_t v64 = v30;
      uint64_t v65 = v31;
      v31(v20, v23, v7);
      uint64_t v32 = v74;
      sub_1B3A6FED0();
      sub_1B3A6FEE0();
      uint64_t v33 = *v77;
      uint64_t v34 = v7;
      (*v77)(v32, v7);
      uint64_t v35 = self;
      uint64_t v36 = a1;
      id v37 = objc_msgSend(v35, sel_defaultManager);
      sub_1B3A6FF20();
      uint64_t v38 = (void *)sub_1B3A70290();
      swift_bridgeObjectRelease();
      unsigned int v39 = objc_msgSend(v37, sel_fileExistsAtPath_, v38);

      if (v39)
      {
        v33(v69, v34);
        swift_bridgeObjectRelease();
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5908);
        uint64_t v47 = v63;
        uint64_t v48 = (char *)v63 + *(int *)(v46 + 48);
        *uint64_t v63 = v36;
        v47[1] = a2;
        v65(v48, v78, v34);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5900);
        goto LABEL_11;
      }
      id v40 = objc_msgSend(v35, byte_1E606333B);
      uint64_t v41 = v36;
      uint64_t v42 = (void *)sub_1B3A70290();
      unsigned int v43 = objc_msgSend(v40, byte_1E60635C9, v42);

      if (v43)
      {
        swift_bridgeObjectRelease();
        if (v61)
        {
          uint64_t v49 = v60;
          sub_1B3A6FE90();
          uint64_t v50 = v59;
          sub_1B3A6FEC0();
          uint64_t v51 = sub_1B3A6FEA0();
          uint64_t v53 = v52;
          v33(v50, v34);
          v33(v78, v34);
          v33(v69, v34);
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5908);
          long long v55 = v63;
          unint64_t v56 = (char *)v63 + *(int *)(v54 + 48);
          *uint64_t v63 = v51;
          v55[1] = v53;
          v65(v56, v49, v34);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5900);
          return swift_storeEnumTagMultiPayload();
        }
        v33(v78, v34);
        v33(v69, v34);
        uint64_t v57 = v63;
        *uint64_t v63 = v36;
        v57[1] = a2;
        v57[2] = 0;
        v57[3] = 0;
        *((unsigned char *)v57 + 32) = 0;
        goto LABEL_10;
      }
      uint64_t v7 = v34;
      v33(v78, v34);
      uint64_t v20 = v69;
      v33(v69, v7);
      uint64_t v23 = v67;
      unint64_t v29 = v75 + v66;
      uint64_t v26 = v76 - 1;
      a1 = v41;
      if (v76 == 1)
      {
        v64(v67, 1, 1, v7);
        break;
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v23, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v44 = v63;
  *uint64_t v63 = a1;
  v44[1] = a2;
  void v44[2] = 0;
  v44[3] = 0;
  *((unsigned char *)v44 + 32) = 1;
LABEL_10:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5900);
LABEL_11:
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

void sub_1B3A0787C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v101 = a7;
  LODWORD(v104) = a6;
  uint64_t v105 = a4;
  id v106 = a5;
  uint64_t v100 = a3;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5900);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5908);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1B3A6FF40();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v103 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v96 - v19;
  int v21 = v104 & 1;
  uint64_t v104 = a1;
  unint64_t v107 = a2;
  sub_1B3A07288(a1, a2, v21, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = v11[1];
    uint64_t v24 = v11[2];
    uint64_t v25 = v11[3];
    char v26 = *((unsigned char *)v11 + 32);
    v110[0] = *v11;
    uint64_t v22 = v110[0];
    v110[1] = v23;
    v110[2] = v24;
    v110[3] = v25;
    char v111 = v26;
    sub_1B3A0EA50();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_allocError();
    *(void *)uint64_t v27 = v22;
    *(void *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v24;
    *(void *)(v27 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v25;
    *(unsigned char *)(v27 + 32) = v26;
    swift_unknownObjectRelease();
    return;
  }
  sub_1B39B4CD4((uint64_t)v11, (uint64_t)v14, &qword_1E9CD5908);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, &v14[*(int *)(v12 + 48)], v15);
  uint64_t v28 = v16;
  if (qword_1E9CD6A10 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_1B3A700D0();
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)qword_1E9CDCCC8);
  uint64_t v31 = v103;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v103, v20, v15);
  swift_bridgeObjectRetain_n();
  uint64_t v32 = sub_1B3A700B0();
  os_log_type_t v33 = sub_1B3A70640();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    unint64_t v99 = v20;
    uint64_t v35 = v34;
    int v97 = (void (*)(void, void))swift_slowAlloc();
    v110[0] = (uint64_t)v97;
    *(_DWORD *)uint64_t v35 = 136446466;
    uint64_t v98 = v30;
    unint64_t v36 = v107;
    swift_bridgeObjectRetain();
    uint64_t v108 = sub_1B39B2E48(v104, v36, v110);
    sub_1B3A707C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v37 = sub_1B3A6FF20();
    uint64_t v108 = sub_1B39B2E48(v37, v38, v110);
    sub_1B3A707C0();
    swift_bridgeObjectRelease();
    unsigned int v39 = *(void (**)(char *, uint64_t))(v16 + 8);
    v39(v31, v15);
    os_log_type_t v40 = v33;
    uint64_t v41 = v39;
    _os_log_impl(&dword_1B39A5000, v32, v40, "loading provider %{public}s's bundle at %{public}s", (uint8_t *)v35, 0x16u);
    uint64_t v42 = v97;
    swift_arrayDestroy();
    MEMORY[0x1B3EC0090](v42, -1, -1);
    uint64_t v43 = v35;
    uint64_t v30 = v98;
    uint64_t v20 = v99;
    MEMORY[0x1B3EC0090](v43, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v16 + 8);
    v41(v31, v15);
  }

  uint64_t v44 = v105;
  sub_1B3A6FF20();
  id v45 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
  uint64_t v46 = (void *)sub_1B3A70290();
  swift_bridgeObjectRelease();
  uint64_t v47 = (char *)objc_msgSend(v45, sel_initWithPath_, v46);

  if (v47)
  {
    if ((objc_msgSend(v47, sel_load) & 1) == 0)
    {
      uint64_t v103 = v47;
      uint64_t v100 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      uint64_t v60 = sub_1B3A700B0();
      os_log_type_t v61 = sub_1B3A70640();
      if (os_log_type_enabled(v60, v61))
      {
        int v97 = (void (*)(void, void))v41;
        unint64_t v62 = v107;
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        unint64_t v99 = v20;
        uint64_t v65 = v64;
        v110[0] = v64;
        *(_DWORD *)uint64_t v63 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v108 = sub_1B39B2E48(v104, v62, v110);
        sub_1B3A707C0();
        uint64_t v41 = (void (*)(char *, uint64_t))v97;
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B39A5000, v60, v61, "failed to load %s's bundle", v63, 0xCu);
        swift_arrayDestroy();
        uint64_t v66 = v65;
        uint64_t v20 = v99;
        MEMORY[0x1B3EC0090](v66, -1, -1);
        MEMORY[0x1B3EC0090](v63, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v110[0] = 0;
      v110[1] = 0xE000000000000000;
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      strcpy((char *)v110, "cannot load ");
      BYTE5(v110[1]) = 0;
      HIWORD(v110[1]) = -5120;
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      uint64_t v67 = (void *)sub_1B3A70290();
      swift_bridgeObjectRelease();
      objc_msgSend(v106, sel_warnWithMessage_, v67);
      swift_unknownObjectRelease();

      v41(v20, v100);
      goto LABEL_19;
    }
    if (objc_msgSend(v47, sel_principalClass))
    {
      uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
      fsobj_id v109 = &unk_1F0C42E40;
      if (swift_dynamicCastTypeToObjCProtocolConditional())
      {
        uint64_t v103 = v47;
        id v49 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v50 = objc_msgSend(v49, sel_init);
        swift_bridgeObjectRetain_n();
        id v96 = v50;
        swift_unknownObjectRetain();
        uint64_t v98 = v30;
        uint64_t v51 = sub_1B3A700B0();
        os_log_type_t v52 = sub_1B3A70640();
        if (os_log_type_enabled(v51, v52))
        {
          int v97 = (void (*)(void, void))v41;
          unint64_t v53 = v107;
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          uint64_t v55 = swift_slowAlloc();
          unint64_t v99 = v20;
          uint64_t v56 = v55;
          v110[0] = v55;
          *(_DWORD *)uint64_t v54 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v108 = sub_1B39B2E48(v104, v53, v110);
          uint64_t v44 = v105;
          sub_1B3A707C0();
          uint64_t v41 = (void (*)(char *, uint64_t))v97;
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B39A5000, v51, v52, "calling provider %{public}s's shouldInitialize", v54, 0xCu);
          swift_arrayDestroy();
          uint64_t v57 = v56;
          uint64_t v20 = v99;
          MEMORY[0x1B3EC0090](v57, -1, -1);
          MEMORY[0x1B3EC0090](v54, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v69 = v96;
        swift_unknownObjectRetain();
        char v78 = (void *)sub_1B3A70210();
        v110[0] = 0;
        unsigned int v79 = objc_msgSend(v69, sel_shouldInitializeWithLogger_machine_options_error_, v106, v100, v78, v110);
        swift_unknownObjectRelease();

        if (v79)
        {
          id v80 = (id)v110[0];
          v41(v20, v15);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v68 = v104;
          goto LABEL_20;
        }
        id v81 = (id)v110[0];
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        unsigned int v82 = (void *)sub_1B3A6FE40();

        swift_willThrow();
        id v83 = v82;
        swift_bridgeObjectRetain();
        id v102 = v82;
        id v84 = v82;
        unsigned __int8 v85 = sub_1B3A700B0();
        os_log_type_t v86 = sub_1B3A70630();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = swift_slowAlloc();
          uint64_t v88 = swift_slowAlloc();
          unint64_t v99 = v20;
          uint64_t v89 = v88;
          v110[0] = v88;
          *(_DWORD *)uint64_t v87 = 136446466;
          uint64_t v100 = v15;
          uint64_t v98 = v28;
          unint64_t v90 = v107;
          swift_bridgeObjectRetain();
          uint64_t v108 = sub_1B39B2E48(v104, v90, v110);
          sub_1B3A707C0();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v87 + 12) = 2082;
          id v91 = v102;
          uint64_t v108 = (uint64_t)v102;
          id v92 = v102;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
          int v97 = (void (*)(void, void))v41;
          uint64_t v93 = sub_1B3A70300();
          uint64_t v108 = sub_1B39B2E48(v93, v94, v110);
          sub_1B3A707C0();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1B39A5000, v85, v86, "\tprovider %{public}s should not initialize: %{public}s", (uint8_t *)v87, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EC0090](v89, -1, -1);
          MEMORY[0x1B3EC0090](v87, -1, -1);

          swift_unknownObjectRelease();
          v97(v99, v100);
        }
        else
        {

          swift_unknownObjectRelease();
          id v95 = v102;

          swift_bridgeObjectRelease_n();
          v41(v20, v15);
        }
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
LABEL_19:
        uint64_t v68 = 0;
        id v106 = 0;
        unint64_t v107 = 0;
        uint64_t v69 = 0;
        uint64_t v44 = 0;
LABEL_20:
        uint64_t v70 = v101;
        *uint64_t v101 = v68;
        v70[1] = v107;
        v70[2] = (uint64_t)v69;
        v70[3] = (uint64_t)v106;
        v70[4] = v44;
        return;
      }
      swift_bridgeObjectRelease();
      v110[0] = ObjCClassMetadata;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5978);
      uint64_t v74 = sub_1B3A70300();
      uint64_t v76 = v75;
      sub_1B3A0EA50();
      swift_allocError();
      unint64_t v77 = v107;
      *(void *)uint64_t v71 = v104;
      *(void *)(v71 + 8) = v77;
      *(void *)(v71 + 16) = v74;
      *(void *)(v71 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v76;
      char v73 = 4;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1B3A0EA50();
      swift_allocError();
      unint64_t v72 = v107;
      *(void *)uint64_t v71 = v104;
      *(void *)(v71 + 8) = v72;
      *(void *)(v71 + 16) = 0;
      *(void *)(v71 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      char v73 = 3;
    }
    *(unsigned char *)(v71 + 32) = v73;
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1B3A0EA50();
    swift_allocError();
    unint64_t v58 = v107;
    *(void *)uint64_t v59 = v104;
    *(void *)(v59 + 8) = v58;
    *(void *)(v59 + 16) = 0;
    *(void *)(v59 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(unsigned char *)(v59 + 32) = 2;
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  v41(v20, v15);
}

id ProviderList.__allocating_init(machine:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC6ktrace12ProviderList_providers] = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC6ktrace12ProviderList_machine] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id ProviderList.init(machine:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC6ktrace12ProviderList_providers] = MEMORY[0x1E4FBC860];
  *(void *)&v1[OBJC_IVAR____TtC6ktrace12ProviderList_machine] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

Swift::Bool __swiftcall ProviderList.contains(name:)(Swift::String name)
{
  object = name._object;
  uint64_t countAndFlagsBits = name._countAndFlagsBits;
  int64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 16);
  if (!v6) {
    return 0;
  }
  for (uint64_t i = (void *)(v5 + 40); ; i += 5)
  {
    BOOL v8 = *(i - 1) == countAndFlagsBits && *i == (void)object;
    if (v8 || (sub_1B3A70D20() & 1) != 0) {
      break;
    }
    if (!--v6) {
      return 0;
    }
  }
  return 1;
}

void sub_1B3A08838(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v12 = *(void *)(v5 + OBJC_IVAR____TtC6ktrace12ProviderList_machine);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B3A0787C(a1, a2, v12, a3, a4, a5, v26);
  if (!v6)
  {
    sub_1B39B4CD4((uint64_t)v26, (uint64_t)&v27, &qword_1E9CD59A0);
    if (*((void *)&v27 + 1))
    {
      long long v31 = v27;
      long long v32 = v27;
      uint64_t v14 = v28;
      uint64_t v13 = v29;
      uint64_t v15 = v30;
      uint64_t v33 = v30;
      uint64_t v16 = (void **)(v5 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
      swift_beginAccess();
      uint64_t v17 = *v16;
      sub_1B3A0EB50((uint64_t)&v32);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1B3A0EAF8((uint64_t)&v33);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v16 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v17 = sub_1B3A0C5B8(0, v17[2] + 1, 1, v17);
        *uint64_t v16 = v17;
      }
      unint64_t v19 = v17[2];
      unint64_t v20 = v17[3];
      unint64_t v21 = v19 + 1;
      if (v19 >= v20 >> 1)
      {
        uint64_t v23 = v17;
        unint64_t v24 = v17[2];
        uint64_t v25 = sub_1B3A0C5B8((void *)(v20 > 1), v19 + 1, 1, v23);
        unint64_t v19 = v24;
        uint64_t v17 = v25;
        *uint64_t v16 = v25;
      }
      _OWORD v17[2] = v21;
      uint64_t v22 = &v17[5 * v19];
      *((_OWORD *)v22 + 2) = v31;
      void v22[6] = v14;
      void v22[7] = v13;
      v22[8] = v15;
      swift_endAccess();
      sub_1B3A0EB7C((uint64_t)&v32);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1B3A0EB24((uint64_t)&v33);
    }
  }
}

uint64_t ProviderList.shouldStartTracing(configuration:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v76 = a1;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = sub_1B3A70080();
  uint64_t v4 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  uint64_t v6 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1B3A700A0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v11;
  uint64_t v13 = *(void *)(*v11 + 16);
  if (v13)
  {
    uint64_t v74 = v6;
    v65[1] = v3;
    char v73 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v70 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v71 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v66 = swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t *)(v66 + 64);
    *(void *)&long long v15 = 136446210;
    long long v68 = v15;
    uint64_t v67 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v15 = 136315138;
    long long v72 = v15;
    uint64_t v77 = v7;
    while (1)
    {
      uint64_t v78 = (uint64_t)v14;
      uint64_t v79 = v13;
      uint64_t v17 = *(v14 - 4);
      unint64_t v16 = *(v14 - 3);
      uint64_t v18 = (void *)*(v14 - 2);
      unint64_t v19 = (void *)*(v14 - 1);
      uint64_t v20 = *v14;
      uint64_t v21 = qword_1E9CD6A10;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v21 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_1B3A700D0();
      uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)qword_1E9CDCCC8);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v69 = v23;
      unint64_t v24 = sub_1B3A700B0();
      os_log_type_t v25 = sub_1B3A70640();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v83 = v17;
      if (v26)
      {
        uint64_t v27 = v20;
        uint64_t v28 = swift_slowAlloc();
        uint64_t v29 = v17;
        uint64_t v30 = v10;
        uint64_t v31 = swift_slowAlloc();
        uint64_t v86 = v31;
        *(_DWORD *)uint64_t v28 = v68;
        swift_bridgeObjectRetain();
        *(void *)(v28 + 4) = sub_1B39B2E48(v29, v16, &v86);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B39A5000, v24, v25, "calling provider %{public}s's shouldStartTracing", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy();
        uint64_t v32 = v31;
        uint64_t v10 = v30;
        MEMORY[0x1B3EC0090](v32, -1, -1);
        uint64_t v33 = v28;
        uint64_t v20 = v27;
        uint64_t v7 = v77;
        MEMORY[0x1B3EC0090](v33, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      if (qword_1E9CD6A18 != -1) {
        swift_once();
      }
      uint64_t v34 = __swift_project_value_buffer(v7, (uint64_t)qword_1E9CDCCE0);
      (*v73)(v10, v34, v7);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v35 = v16;
      unint64_t v36 = v74;
      sub_1B3A70070();
      uint64_t v37 = swift_slowAlloc();
      unint64_t v38 = v10;
      unsigned int v39 = v18;
      uint64_t v40 = swift_slowAlloc();
      uint64_t v86 = v40;
      *(_DWORD *)uint64_t v37 = v72;
      swift_bridgeObjectRetain();
      uint64_t v41 = v83;
      *(void *)(v37 + 4) = sub_1B39B2E48(v83, v35, &v86);
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      unint64_t v81 = v35;
      swift_bridgeObjectRelease_n();
      uint64_t v42 = sub_1B3A70090();
      uint64_t v84 = v20;
      uint64_t v43 = v42;
      os_signpost_type_t v44 = sub_1B3A706F0();
      id v80 = v19;
      os_signpost_type_t v45 = v44;
      os_signpost_id_t v46 = sub_1B3A70060();
      _os_signpost_emit_with_name_impl(&dword_1B39A5000, v43, v45, v46, "01: shouldStartTracing", "%s", (uint8_t *)v37, 0xCu);
      id v85 = 0;
      unsigned int v82 = v39;
      if (!objc_msgSend(v39, sel_shouldStartTracingWithConfiguration_error_, v76, &v85)) {
        break;
      }
      id v47 = v85;
      os_signpost_type_t v48 = sub_1B3A706E0();
      os_signpost_id_t v49 = sub_1B3A70060();
      _os_signpost_emit_with_name_impl(&dword_1B39A5000, v43, v48, v49, "01: shouldStartTracing", "%s", (uint8_t *)v37, 0xCu);

      swift_arrayDestroy();
      MEMORY[0x1B3EC0090](v40, -1, -1);
      MEMORY[0x1B3EC0090](v37, -1, -1);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*v70)(v36, v75);
      uint64_t v7 = v77;
      (*v71)(v38, v77);
      uint64_t v14 = (uint64_t *)(v78 + 40);
      uint64_t v13 = v79 - 1;
      uint64_t v10 = v38;
      if (v79 == 1) {
        return swift_bridgeObjectRelease();
      }
    }
    id v50 = v85;
    uint64_t v51 = (void *)sub_1B3A6FE40();

    swift_willThrow();
    swift_bridgeObjectRelease();

    (*v70)(v36, v75);
    (*v71)(v38, v77);
    uint64_t v86 = (uint64_t)v51;
    id v52 = v51;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
    uint64_t v53 = sub_1B3A70300();
    unint64_t v55 = v54;
    unint64_t v56 = v81;
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    uint64_t v57 = v80;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v58 = sub_1B3A700B0();
    os_log_type_t v59 = sub_1B3A70630();
    int v60 = v59;
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v61 = swift_slowAlloc();
      uint64_t v79 = v53;
      uint64_t v62 = v61;
      uint64_t v78 = swift_slowAlloc();
      uint64_t v86 = v78;
      *(_DWORD *)uint64_t v62 = 136446466;
      LODWORD(v77) = v60;
      swift_bridgeObjectRetain();
      id v85 = (id)sub_1B39B2E48(v41, v56, &v86);
      sub_1B3A707C0();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v62 + 12) = 2082;
      swift_bridgeObjectRetain();
      id v85 = (id)sub_1B39B2E48(v79, v55, &v86);
      sub_1B3A707C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B39A5000, v58, (os_log_type_t)v77, "provider %{public}s disallowing tracing: %{public}s", (uint8_t *)v62, 0x16u);
      uint64_t v63 = v78;
      swift_arrayDestroy();
      MEMORY[0x1B3EC0090](v63, -1, -1);
      MEMORY[0x1B3EC0090](v62, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    swift_unknownObjectRetain();
    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    uint64_t v86 = 0xD00000000000001ELL;
    unint64_t v87 = 0x80000001B3A79DD0;
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    uint64_t v64 = (void *)sub_1B3A70290();
    swift_bridgeObjectRelease();
    objc_msgSend(v57, sel_failWithReason_, v64);
    swift_unknownObjectRelease();

    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B3A0949C(uint64_t a1)
{
  uint64_t v51 = a1;
  uint64_t v50 = sub_1B3A70080();
  uint64_t v2 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  unint64_t v58 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1B3A700A0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers;
  swift_beginAccess();
  uint64_t v9 = *(void *)(*(void *)v8 + 16);
  if (v9)
  {
    uint64_t v10 = sel_shouldAmendWithFile_error_;
    os_signpost_type_t v44 = &v64;
    os_signpost_id_t v49 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    os_signpost_type_t v48 = &v63;
    os_signpost_type_t v45 = (void (**)(char *, uint64_t))(v2 + 8);
    os_signpost_id_t v46 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v41 = swift_bridgeObjectRetain();
    uint64_t v11 = (uint64_t *)(v41 + 64);
    *(void *)&long long v12 = 136446210;
    long long v43 = v12;
    uint64_t v42 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v12 = 136315138;
    long long v47 = v12;
    unint64_t v56 = sel_shouldAmendWithFile_error_;
    uint64_t v57 = v4;
    id v52 = v7;
    while (1)
    {
      unint64_t v13 = *(v11 - 3);
      uint64_t v15 = *(v11 - 2);
      uint64_t v14 = *(v11 - 1);
      uint64_t v16 = *v11;
      uint64_t v60 = *(v11 - 4);
      uint64_t v61 = v14;
      v65[0] = v60;
      v65[1] = v13;
      void v65[2] = v15;
      void v65[3] = v14;
      v65[4] = v16;
      self;
      uint64_t v17 = swift_dynamicCastObjCClass();
      if (!v17) {
        break;
      }
      uint64_t v18 = (void *)v17;
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (!objc_msgSend(v18, sel_respondsToSelector_, v10, v41, v42))
      {
        swift_unknownObjectRelease();
        goto LABEL_17;
      }
      uint64_t v53 = v11;
      uint64_t v54 = v9;
      unint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void **))objc_msgSend(v18, sel_methodForSelector_, v10);
      if (qword_1E9CD6A10 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_1B3A700D0();
      __swift_project_value_buffer(v19, (uint64_t)qword_1E9CDCCC8);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v20 = sub_1B3A700B0();
      os_log_type_t v21 = sub_1B3A70640();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = (void *)swift_slowAlloc();
        id v66 = v23;
        *(_DWORD *)uint64_t v22 = v43;
        swift_bridgeObjectRetain();
        uint64_t v63 = sub_1B39B2E48(v60, v13, (uint64_t *)&v66);
        uint64_t v7 = v52;
        sub_1B3A707C0();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B39A5000, v20, v21, "calling provider %{public}s's shouldAmend", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v23, -1, -1);
        MEMORY[0x1B3EC0090](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      id v24 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
      os_log_type_t v25 = (void *)sub_1B3A70290();
      id v26 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 1, 0);

      id v66 = v26;
      if (qword_1E9CD6A18 != -1) {
        swift_once();
      }
      uint64_t v27 = v57;
      uint64_t v28 = __swift_project_value_buffer(v57, (uint64_t)qword_1E9CDCCE0);
      (*v49)(v7, v28, v27);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_1B3A70070();
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v63 = v30;
      *(_DWORD *)uint64_t v29 = v47;
      swift_bridgeObjectRetain();
      uint64_t v62 = sub_1B39B2E48(v60, v13, &v63);
      sub_1B3A707C0();
      uint64_t v31 = v52;
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v32 = sub_1B3A70090();
      os_signpost_type_t v33 = sub_1B3A706F0();
      os_signpost_id_t v34 = sub_1B3A70060();
      _os_signpost_emit_with_name_impl(&dword_1B39A5000, v32, v33, v34, "01: shouldAmend", "%s", v29, 0xCu);
      uint64_t v35 = v59;
      sub_1B3A09D20(v55, v65, (uint64_t)v56, v51, (uint64_t *)&v66);
      uint64_t v59 = v35;
      if (v35)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        (*v45)(v58, v50);
        (*v46)(v31, v57);

        return;
      }
      os_signpost_type_t v36 = sub_1B3A706E0();
      uint64_t v37 = v58;
      os_signpost_id_t v38 = sub_1B3A70060();
      _os_signpost_emit_with_name_impl(&dword_1B39A5000, v32, v36, v38, "01: shouldAmend", "%s", v29, 0xCu);

      swift_arrayDestroy();
      MEMORY[0x1B3EC0090](v30, -1, -1);
      MEMORY[0x1B3EC0090](v29, -1, -1);
      swift_unknownObjectRelease();
      (*v45)(v37, v50);
      (*v46)(v31, v57);

      uint64_t v11 = v53 + 5;
      uint64_t v9 = v54 - 1;
      uint64_t v7 = v31;
      uint64_t v10 = v56;
      if (v54 == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
LABEL_17:
    swift_bridgeObjectRelease();
    sub_1B3A0EA50();
    uint64_t v39 = swift_allocError();
    *(void *)uint64_t v40 = v60;
    *(void *)(v40 + 8) = v13;
    *(void *)(v40 + 16) = 0;
    *(void *)(v40 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(unsigned char *)(v40 + 32) = 5;
    uint64_t v59 = v39;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1B3A09D20(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, void **), uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2[2];
  os_signpost_type_t v44 = (void *)*a5;
  char v9 = a1(v8, a3, a4, &v44);
  uint64_t v10 = v44;
  uint64_t v11 = (void *)*a5;
  *a5 = (uint64_t)v44;
  id v12 = v10;

  uint64_t result = sub_1B39B33AC(a4);
  if ((v9 & 1) == 0)
  {
    uint64_t v14 = *a2;
    unint64_t v15 = a2[1];
    sub_1B3A0EA50();
    uint64_t v16 = (void *)swift_allocError();
    uint64_t v40 = v14;
    *(void *)uint64_t v17 = v14;
    *(void *)(v17 + 8) = v15;
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(unsigned char *)(v17 + 32) = 6;
    uint64_t v18 = (void *)*a5;
    if (*a5)
    {
      swift_bridgeObjectRetain();
      id v19 = v18;

      uint64_t v16 = v19;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v39 = v16;
    ErrorCFStringRef Value = swift_getErrorValue();
    uint64_t v21 = v42;
    uint64_t v22 = *(void *)(v42 - 8);
    MEMORY[0x1F4188790](ErrorValue);
    id v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v22 + 16))(v24);
    uint64_t v38 = sub_1B3A70D80();
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    if (qword_1E9CD6A10 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_1B3A700D0();
    __swift_project_value_buffer(v27, (uint64_t)qword_1E9CDCCC8);
    uint64_t v28 = (void *)a2[3];
    uint64_t v43 = a2[4];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1B3A0EAF8((uint64_t)&v43);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1B3A0EAF8((uint64_t)&v43);
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1B3A700B0();
    os_log_type_t v30 = sub_1B3A70630();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v40;
    if (v31)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      os_signpost_type_t v44 = (void *)v37;
      *(_DWORD *)uint64_t v33 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_1B39B2E48(v32, v15, (uint64_t *)&v44);
      sub_1B3A707C0();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_1B3A0EB24((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3A0EB24((uint64_t)&v43);
      *(_WORD *)(v33 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_1B39B2E48(v38, v26, (uint64_t *)&v44);
      uint64_t v32 = v40;
      sub_1B3A707C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B39A5000, v29, v30, "provider %{public}s cannot amend: %{public}s", (uint8_t *)v33, 0x16u);
      uint64_t v34 = v37;
      swift_arrayDestroy();
      MEMORY[0x1B3EC0090](v34, -1, -1);
      MEMORY[0x1B3EC0090](v33, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3A0EB24((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3A0EB24((uint64_t)&v43);

      swift_bridgeObjectRelease_n();
    }
    os_signpost_type_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    sub_1B3A709B0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_signpost_type_t v44 = (void *)v32;
    unint64_t v45 = v15;
    sub_1B3A703A0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    uint64_t v35 = (void *)sub_1B3A70290();
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_failWithReason_, v35);

    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall ProviderList.configure(session:)(Swift::OpaquePointer session)
{
}

uint64_t ProviderList.willStartTracing(file:)(uint64_t a1)
{
  return sub_1B3A0A39C(a1, (SEL *)&selRef_willStartTracingToFile_, "calling provider %{public}s's willStartTracing", "03: willStartTracing");
}

uint64_t ProviderList.didEndTracing(file:)(uint64_t a1)
{
  return sub_1B3A0A39C(a1, (SEL *)&selRef_didStopTracingToFile_, "calling provider %{public}s's didEndTracing", "06: didEndTracing");
}

uint64_t sub_1B3A0A39C(uint64_t a1, SEL *a2, const char *a3, const char *a4)
{
  os_signpost_type_t v48 = a4;
  uint64_t v40 = a3;
  uint64_t v54 = a2;
  uint64_t v47 = a1;
  uint64_t v46 = sub_1B3A70080();
  uint64_t v5 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  unint64_t v45 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_1B3A700A0();
  uint64_t v7 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  id v52 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v9;
  uint64_t v11 = *(void *)(*v9 + 16);
  if (v11)
  {
    uint64_t v43 = (void (**)(char *, uint64_t))(v5 + 8);
    os_signpost_type_t v44 = (void (**)(void))(v7 + 16);
    uint64_t v42 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v37 = swift_bridgeObjectRetain();
    id v12 = (uint64_t *)(v37 + 64);
    unint64_t v13 = (SEL *)&unk_1E6063000;
    *(void *)&long long v14 = 136446210;
    long long v39 = v14;
    uint64_t v38 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v14 = 136315138;
    long long v41 = v14;
    do
    {
      uint64_t v25 = *(v12 - 4);
      unint64_t v26 = *(v12 - 3);
      uint64_t v28 = (void *)*(v12 - 2);
      uint64_t v27 = *(v12 - 1);
      uint64_t v29 = *v12;
      v55[4] = v25;
      v55[5] = v26;
      v55[6] = (uint64_t)v28;
      v55[7] = v27;
      v55[8] = v29;
      if (objc_msgSend(v28, v13[357], *v54, v37, v38))
      {
        uint64_t v51 = v11;
        uint64_t v30 = qword_1E9CD6A10;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v30 != -1) {
          swift_once();
        }
        uint64_t v31 = sub_1B3A700D0();
        __swift_project_value_buffer(v31, (uint64_t)qword_1E9CDCCC8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v32 = sub_1B3A700B0();
        os_log_type_t v33 = sub_1B3A70640();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = v29;
          uint64_t v35 = swift_slowAlloc();
          uint64_t v36 = swift_slowAlloc();
          v55[0] = v36;
          *(_DWORD *)uint64_t v35 = v39;
          swift_bridgeObjectRetain();
          *(void *)(v35 + 4) = sub_1B39B2E48(v25, v26, v55);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B39A5000, v32, v33, v40, (uint8_t *)v35, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EC0090](v36, -1, -1);
          uint64_t v29 = v34;
          MEMORY[0x1B3EC0090](v35, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1E9CD6A18 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v53, (uint64_t)qword_1E9CDCCE0);
        (*v44)();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v15 = v45;
        sub_1B3A70070();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v50 = v29;
        uint64_t v17 = v16;
        uint64_t v18 = swift_slowAlloc();
        v55[0] = v18;
        *(_DWORD *)uint64_t v17 = v41;
        swift_bridgeObjectRetain();
        *(void *)(v17 + 4) = sub_1B39B2E48(v25, v26, v55);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        id v19 = sub_1B3A70090();
        os_signpost_type_t v20 = sub_1B3A706F0();
        os_signpost_id_t v21 = sub_1B3A70060();
        uint64_t v49 = v27;
        uint64_t v22 = v48;
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v19, v20, v21, v48, "%s", (uint8_t *)v17, 0xCu);
        uint64_t v23 = v47;
        objc_msgSend(v28, *v54, v47);
        sub_1B39B33AC(v23);
        LOBYTE(v23) = sub_1B3A706E0();
        os_signpost_id_t v24 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v19, (os_signpost_type_t)v23, v24, v22, "%s", (uint8_t *)v17, 0xCu);

        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v18, -1, -1);
        MEMORY[0x1B3EC0090](v17, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        (*v43)(v15, v46);
        (*v42)(v52, v53);
        uint64_t v11 = v51;
        unint64_t v13 = (SEL *)&unk_1E6063000;
      }
      v12 += 5;
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ProviderList.configurePostprocessing(session:)(Swift::OpaquePointer session)
{
}

uint64_t sub_1B3A0AA7C(uint64_t a1, SEL *a2, const char *a3, const char *a4)
{
  uint64_t v49 = a4;
  long long v41 = a3;
  unint64_t v56 = a2;
  uint64_t v48 = a1;
  uint64_t v47 = sub_1B3A70080();
  uint64_t v5 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v46 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_1B3A700A0();
  uint64_t v7 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v54 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v9;
  uint64_t v11 = *(void *)(*v9 + 16);
  if (v11)
  {
    os_signpost_type_t v44 = (void (**)(char *, uint64_t))(v5 + 8);
    unint64_t v45 = (void (**)(void))(v7 + 16);
    uint64_t v43 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v38 = swift_bridgeObjectRetain();
    id v12 = (uint64_t *)(v38 + 64);
    unint64_t v13 = (SEL *)&unk_1E6063000;
    *(void *)&long long v14 = 136446210;
    long long v40 = v14;
    uint64_t v39 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v14 = 136315138;
    long long v42 = v14;
    do
    {
      uint64_t v26 = *(v12 - 4);
      unint64_t v27 = *(v12 - 3);
      uint64_t v28 = (void *)*(v12 - 2);
      uint64_t v29 = *(v12 - 1);
      uint64_t v30 = *v12;
      if (objc_msgSend(v28, v13[357], *v56, v38, v39))
      {
        uint64_t v53 = v11;
        uint64_t v31 = qword_1E9CD6A10;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v31 != -1) {
          swift_once();
        }
        uint64_t v32 = sub_1B3A700D0();
        __swift_project_value_buffer(v32, (uint64_t)qword_1E9CDCCC8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        os_log_type_t v33 = sub_1B3A700B0();
        os_log_type_t v34 = sub_1B3A70640();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = v30;
          uint64_t v36 = swift_slowAlloc();
          uint64_t v37 = swift_slowAlloc();
          uint64_t v57 = v37;
          *(_DWORD *)uint64_t v36 = v40;
          swift_bridgeObjectRetain();
          *(void *)(v36 + 4) = sub_1B39B2E48(v26, v27, &v57);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B39A5000, v33, v34, v41, (uint8_t *)v36, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EC0090](v37, -1, -1);
          uint64_t v30 = v35;
          MEMORY[0x1B3EC0090](v36, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1E9CD6A18 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v55, (uint64_t)qword_1E9CDCCE0);
        (*v45)();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v15 = v46;
        sub_1B3A70070();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v52 = v30;
        uint64_t v17 = v16;
        uint64_t v18 = swift_slowAlloc();
        uint64_t v57 = v18;
        *(_DWORD *)uint64_t v17 = v42;
        swift_bridgeObjectRetain();
        *(void *)(v17 + 4) = sub_1B39B2E48(v26, v27, &v57);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        id v19 = sub_1B3A70090();
        os_signpost_type_t v20 = sub_1B3A706F0();
        os_signpost_id_t v21 = sub_1B3A70060();
        uint64_t v51 = v29;
        uint64_t v22 = v28;
        uint64_t v23 = v49;
        unint64_t v50 = v27;
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v19, v20, v21, v49, "%s", (uint8_t *)v17, 0xCu);
        objc_msgSend(v22, *v56, v48);
        os_signpost_type_t v24 = sub_1B3A706E0();
        os_signpost_id_t v25 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v19, v24, v25, v23, "%s", (uint8_t *)v17, 0xCu);

        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v18, -1, -1);
        MEMORY[0x1B3EC0090](v17, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        (*v44)(v15, v47);
        (*v43)(v54, v55);
        uint64_t v11 = v53;
        unint64_t v13 = (SEL *)&unk_1E6063000;
      }
      v12 += 5;
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ProviderList.postprocessingComplete(file:)(Swift::OpaquePointer file)
{
  rawCFStringRef Value = file._rawValue;
  uint64_t v38 = sub_1B3A70080();
  uint64_t v2 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v37 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_1B3A700A0();
  uint64_t v4 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v43 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers;
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)v6 + 16);
  if (v7)
  {
    uint64_t v35 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v36 = (void (**)(void))(v4 + 16);
    os_log_type_t v34 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(v30 + 64);
    char v9 = (SEL *)&unk_1E6063000;
    *(void *)&long long v10 = 136446210;
    long long v32 = v10;
    uint64_t v31 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v10 = 136315138;
    long long v33 = v10;
    do
    {
      uint64_t v19 = *(v8 - 4);
      unint64_t v20 = *(v8 - 3);
      os_signpost_id_t v21 = (void *)*(v8 - 2);
      uint64_t v22 = *(v8 - 1);
      uint64_t v23 = *v8;
      v45[4] = v19;
      _OWORD v45[5] = v20;
      v45[6] = (uint64_t)v21;
      void v45[7] = v22;
      v45[8] = v23;
      if (objc_msgSend(v21, v9[357], sel_postprocessingCompleteWithFile_, v30, v31))
      {
        uint64_t v42 = v7;
        uint64_t v24 = qword_1E9CD6A10;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v24 != -1) {
          swift_once();
        }
        uint64_t v25 = sub_1B3A700D0();
        __swift_project_value_buffer(v25, (uint64_t)qword_1E9CDCCC8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v26 = sub_1B3A700B0();
        os_log_type_t v27 = sub_1B3A70640();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          v45[0] = v29;
          *(_DWORD *)uint64_t v28 = v32;
          swift_bridgeObjectRetain();
          *(void *)(v28 + 4) = sub_1B39B2E48(v19, v20, v45);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B39A5000, v26, v27, "calling provider %{public}s's postprocessingComplete", (uint8_t *)v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EC0090](v29, -1, -1);
          MEMORY[0x1B3EC0090](v28, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1E9CD6A18 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v44, (uint64_t)qword_1E9CDCCE0);
        (*v36)();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v41 = v23;
        uint64_t v11 = v37;
        sub_1B3A70070();
        uint64_t v12 = swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        v45[0] = v13;
        *(_DWORD *)uint64_t v12 = v33;
        swift_bridgeObjectRetain();
        *(void *)(v12 + 4) = sub_1B39B2E48(v19, v20, v45);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        long long v14 = sub_1B3A70090();
        os_signpost_type_t v15 = sub_1B3A706F0();
        os_signpost_id_t v16 = sub_1B3A70060();
        uint64_t v40 = v22;
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v14, v15, v16, "08: postprocessingComplete", "%s", (uint8_t *)v12, 0xCu);
        uint64_t v17 = (uint64_t)rawValue;
        objc_msgSend(v21, sel_postprocessingCompleteWithFile_, rawValue);
        sub_1B39B33AC(v17);
        LOBYTE(v17) = sub_1B3A706E0();
        os_signpost_id_t v18 = sub_1B3A70060();
        _os_signpost_emit_with_name_impl(&dword_1B39A5000, v14, (os_signpost_type_t)v17, v18, "08: postprocessingComplete", "%s", (uint8_t *)v12, 0xCu);

        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v13, -1, -1);
        MEMORY[0x1B3EC0090](v12, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        (*v35)(v11, v38);
        (*v34)(v43, v44);
        uint64_t v7 = v42;
        char v9 = (SEL *)&unk_1E6063000;
      }
      v8 += 5;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
}

uint64_t ProviderList.willFinish(catalog:file:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v40 = sub_1B3A70080();
  uint64_t v3 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v39 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_1B3A700A0();
  uint64_t v5 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v47 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v7;
  uint64_t v9 = *(void *)(*v7 + 16);
  if (v9)
  {
    uint64_t v37 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v38 = (void (**)(char *, uint64_t))(v5 + 16);
    uint64_t v36 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v32 = swift_bridgeObjectRetain();
    long long v10 = (uint64_t *)(v32 + 64);
    *(void *)&long long v11 = 136446210;
    long long v34 = v11;
    uint64_t v33 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v11 = 136315138;
    long long v35 = v11;
    uint64_t v12 = v39;
    do
    {
      unint64_t v45 = v10;
      uint64_t v46 = v9;
      uint64_t v14 = *(v10 - 4);
      unint64_t v13 = *(v10 - 3);
      os_signpost_type_t v15 = (void *)*(v10 - 2);
      uint64_t v16 = *(v10 - 1);
      uint64_t v17 = *v10;
      v49[4] = v14;
      v49[5] = v13;
      v49[6] = (uint64_t)v15;
      v49[7] = v16;
      v49[8] = v17;
      uint64_t v18 = qword_1E9CD6A10;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_1B3A700D0();
      __swift_project_value_buffer(v19, (uint64_t)qword_1E9CDCCC8);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v20 = sub_1B3A700B0();
      os_log_type_t v21 = sub_1B3A70640();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        v49[0] = v23;
        *(_DWORD *)uint64_t v22 = v34;
        swift_bridgeObjectRetain();
        *(void *)(v22 + 4) = sub_1B39B2E48(v14, v13, v49);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B39A5000, v20, v21, "calling provider %{public}s's willFinish", (uint8_t *)v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EC0090](v23, -1, -1);
        MEMORY[0x1B3EC0090](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      if (qword_1E9CD6A18 != -1) {
        swift_once();
      }
      uint64_t v24 = __swift_project_value_buffer(v48, (uint64_t)qword_1E9CDCCE0);
      (*v38)(v47, v24);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_1B3A70070();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v49[0] = v26;
      *(_DWORD *)uint64_t v25 = v35;
      swift_bridgeObjectRetain();
      *(void *)(v25 + 4) = sub_1B39B2E48(v14, v13, v49);
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      os_log_type_t v27 = sub_1B3A70090();
      os_signpost_type_t v28 = sub_1B3A706F0();
      os_signpost_id_t v29 = sub_1B3A70060();
      uint64_t v44 = v17;
      uint64_t v43 = v16;
      _os_signpost_emit_with_name_impl(&dword_1B39A5000, v27, v28, v29, "09: willFinish", "%s", (uint8_t *)v25, 0xCu);
      uint64_t v30 = v42;
      objc_msgSend(v15, sel_willFinishWithCatalog_file_, v41, v42, v32, v33);
      sub_1B39B33AC(v30);
      LOBYTE(v30) = sub_1B3A706E0();
      os_signpost_id_t v31 = sub_1B3A70060();
      _os_signpost_emit_with_name_impl(&dword_1B39A5000, v27, (os_signpost_type_t)v30, v31, "09: willFinish", "%s", (uint8_t *)v25, 0xCu);

      swift_arrayDestroy();
      MEMORY[0x1B3EC0090](v26, -1, -1);
      MEMORY[0x1B3EC0090](v25, -1, -1);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*v37)(v12, v40);
      (*v36)(v47, v48);
      long long v10 = v45 + 5;
      uint64_t v9 = v46 - 1;
    }
    while (v46 != 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id ProviderList.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ProviderList.init()()
{
}

id ProviderList.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ktrace_session_provide(_TtC6ktrace12ProviderList *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = sub_1B3A70220();
  swift_unknownObjectRetain();
  uint64_t v13 = ktrace_session_provide(_:_:_:_:_:)(a1, a2, v9, a4, a5, v10, v11, v12);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t ktrace_session_provide(_:_:_:_:_:)(_TtC6ktrace12ProviderList *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  _session_ensure_providers(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  id v12 = (id)_session_providers((uint64_t)a1);
  uint64_t v13 = sub_1B3A703B0();
  sub_1B3A08838(v13, v14, a3, a4, v8);
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t ktrace_list_providers(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1B3A0ECEC(a1, a3);
}

uint64_t ktrace_list_providers(_:_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1B3A0ECEC(a1, a3);
}

void *sub_1B3A0C11C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A68);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      _OWORD v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      id v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      id v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1B3A0D81C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3A0C240(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A48);
  uint64_t v10 = *(void *)(sub_1B3A6FF40() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_1B3A70AF0();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_1B3A6FF40() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1B3A0DFBC(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_1B3A0C4A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A30);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      _OWORD v10[2] = v8;
      void v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1B3A0DEC8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1B3A0C5B8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A38);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      _OWORD v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1B3A0EBF4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3A0C6DC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

unint64_t sub_1B3A0C82C(uint64_t a1, uint64_t a2)
{
  sub_1B3A70E00();
  sub_1B3A70360();
  uint64_t v4 = sub_1B3A70E50();

  return sub_1B3A0C8A4(a1, a2, v4);
}

unint64_t sub_1B3A0C8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1B3A70D20() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1B3A70D20() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1B3A0C988(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A30);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A0CAF4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1B3A0D808(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_1B3A0CB60(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1B3A0CB60(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1B3A70CE0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_1B3A0D28C(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v118 = result;
  v115 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __uuid_t dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      int64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_118:
      id v106 = v11;
      uint64_t v117 = v8;
      if (v12 >= 2)
      {
        uint64_t v107 = *v115;
        do
        {
          unint64_t v108 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v107) {
            goto LABEL_159;
          }
          fsobj_id v109 = v106;
          uint64_t v110 = *(void *)&v106[16 * v108 + 32];
          uint64_t v111 = *(void *)&v106[16 * v12 + 24];
          sub_1B3A0D380((char *)(v107 + (v110 << 6)), (char *)(v107 + (*(void *)&v106[16 * v12 + 16] << 6)), v107 + (v111 << 6), __dst);
          if (v1) {
            break;
          }
          if (v111 < v110) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            fsobj_id v109 = sub_1B3A0D7F4((uint64_t)v109);
          }
          if (v108 >= *((void *)v109 + 2)) {
            goto LABEL_149;
          }
          uint64_t v112 = &v109[16 * v108 + 32];
          *(void *)uint64_t v112 = v110;
          *((void *)v112 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v111;
          unint64_t v113 = *((void *)v109 + 2);
          if (v12 > v113) {
            goto LABEL_150;
          }
          memmove(&v109[16 * v12 + 16], &v109[16 * v12 + 32], 16 * (v113 - v12));
          id v106 = v109;
          *((void *)v109 + 2) = v113 - 1;
          unint64_t v12 = v113 - 1;
        }
        while (v113 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v117 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v117 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_1B3A70590();
    *(void *)(v7 + 16) = v6;
    uint64_t v117 = v7;
    __uuid_t dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v116 = *a1 + 8;
  uint64_t v114 = *a1 + 56;
  int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v119 = v3;
  uint64_t v120 = *a1;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    BOOL v14 = (uint64_t *)(v10 + (v9 << 6));
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    unint64_t v17 = (void *)(v10 + (v13 << 6));
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = sub_1B3A70D20();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    os_log_type_t v21 = (void *)(v116 + (v20 << 6));
    do
    {
      uint64_t v23 = (void *)(v10 + (v9 << 6));
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ sub_1B3A70D20()))
      {
        goto LABEL_36;
      }
      v21 += 8;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = v20 << 6;
        uint64_t v26 = v13 << 6;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            os_signpost_id_t v29 = (_OWORD *)(v10 + v26);
            uint64_t v30 = v10 + v25;
            uint64_t v31 = *(void *)(v10 + v26);
            uint64_t v32 = *(void *)(v10 + v26 + 8);
            char v33 = *(unsigned char *)(v10 + v26 + 16);
            uint64_t v34 = *(void *)(v10 + v26 + 56);
            long long v35 = *(_OWORD *)(v10 + v26 + 24);
            long long v36 = *(_OWORD *)(v10 + v26 + 40);
            long long v37 = *(_OWORD *)(v10 + v25 - 16);
            long long v39 = *(_OWORD *)(v10 + v25 - 64);
            long long v38 = *(_OWORD *)(v10 + v25 - 48);
            v29[2] = *(_OWORD *)(v10 + v25 - 32);
            v29[3] = v37;
            *os_signpost_id_t v29 = v39;
            v29[1] = v38;
            *(void *)(v30 - std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v31;
            *(void *)(v30 - 56) = v32;
            *(unsigned char *)(v30 - 48) = v33;
            *(_OWORD *)(v30 - 40) = v35;
            *(_OWORD *)(v30 - ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v36;
            *(void *)(v30 - 8) = v34;
          }
          ++v28;
          v25 -= 64;
          v26 += 64;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v118) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v11 = sub_1B3A0D63C(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v56 = *((void *)v11 + 2);
    unint64_t v55 = *((void *)v11 + 3);
    unint64_t v12 = v56 + 1;
    if (v56 >= v55 >> 1) {
      int64_t v11 = sub_1B3A0D63C((char *)(v55 > 1), v56 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v57 = v11 + 32;
    unint64_t v58 = &v11[16 * v56 + 32];
    *(void *)unint64_t v58 = v13;
    *((void *)v58 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v9;
    if (v56)
    {
      uint64_t v10 = v120;
      while (1)
      {
        unint64_t v59 = v12 - 1;
        if (v12 >= 4)
        {
          char v64 = &v57[16 * v12];
          uint64_t v65 = *((void *)v64 - 8);
          uint64_t v66 = *((void *)v64 - 7);
          BOOL v70 = __OFSUB__(v66, v65);
          uint64_t v67 = v66 - v65;
          if (v70) {
            goto LABEL_135;
          }
          uint64_t v69 = *((void *)v64 - 6);
          uint64_t v68 = *((void *)v64 - 5);
          BOOL v70 = __OFSUB__(v68, v69);
          uint64_t v62 = v68 - v69;
          char v63 = v70;
          if (v70) {
            goto LABEL_136;
          }
          unint64_t v71 = v12 - 2;
          long long v72 = &v57[16 * v12 - 32];
          uint64_t v74 = *(void *)v72;
          uint64_t v73 = *((void *)v72 + 1);
          BOOL v70 = __OFSUB__(v73, v74);
          uint64_t v75 = v73 - v74;
          if (v70) {
            goto LABEL_138;
          }
          BOOL v70 = __OFADD__(v62, v75);
          uint64_t v76 = v62 + v75;
          if (v70) {
            goto LABEL_141;
          }
          if (v76 >= v67)
          {
            unint64_t v94 = &v57[16 * v59];
            uint64_t v96 = *(void *)v94;
            uint64_t v95 = *((void *)v94 + 1);
            BOOL v70 = __OFSUB__(v95, v96);
            uint64_t v97 = v95 - v96;
            if (v70) {
              goto LABEL_145;
            }
            BOOL v87 = v62 < v97;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v88 = *((void *)v11 + 4);
            uint64_t v89 = *((void *)v11 + 5);
            BOOL v70 = __OFSUB__(v89, v88);
            uint64_t v81 = v89 - v88;
            char v82 = v70;
            goto LABEL_99;
          }
          uint64_t v61 = *((void *)v11 + 4);
          uint64_t v60 = *((void *)v11 + 5);
          BOOL v70 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          char v63 = v70;
        }
        if (v63) {
          goto LABEL_137;
        }
        unint64_t v71 = v12 - 2;
        uint64_t v77 = &v57[16 * v12 - 32];
        uint64_t v79 = *(void *)v77;
        uint64_t v78 = *((void *)v77 + 1);
        BOOL v80 = __OFSUB__(v78, v79);
        uint64_t v81 = v78 - v79;
        char v82 = v80;
        if (v80) {
          goto LABEL_140;
        }
        uint64_t v83 = &v57[16 * v59];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v70 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v70) {
          goto LABEL_143;
        }
        if (__OFADD__(v81, v86)) {
          goto LABEL_144;
        }
        if (v81 + v86 >= v62)
        {
          BOOL v87 = v62 < v86;
LABEL_105:
          if (v87) {
            unint64_t v59 = v71;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v82) {
          goto LABEL_139;
        }
        unint64_t v90 = &v57[16 * v59];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v70 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v70) {
          goto LABEL_142;
        }
        if (v93 < v81) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v98 = v59 - 1;
        if (v59 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10) {
          goto LABEL_157;
        }
        unint64_t v99 = v11;
        uint64_t v100 = v10;
        uint64_t v101 = &v57[16 * v98];
        uint64_t v102 = *(void *)v101;
        uint64_t v103 = &v57[16 * v59];
        uint64_t v104 = *((void *)v103 + 1);
        sub_1B3A0D380((char *)(v100 + (*(void *)v101 << 6)), (char *)(v100 + (*(void *)v103 << 6)), v100 + (v104 << 6), __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v104 < v102) {
          goto LABEL_132;
        }
        if (v59 > *((void *)v99 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v101 = v102;
        *(void *)&v57[16 * v98 + 8] = v104;
        unint64_t v105 = *((void *)v99 + 2);
        if (v59 >= v105) {
          goto LABEL_134;
        }
        int64_t v11 = v99;
        unint64_t v12 = v105 - 1;
        memmove(&v57[16 * v59], v103 + 16, 16 * (v105 - 1 - v59));
        *((void *)v99 + 2) = v105 - 1;
        BOOL v87 = v105 > 2;
        uint64_t v10 = v120;
        if (!v87) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v120;
LABEL_15:
    uint64_t v3 = v119;
    if (v9 >= v119)
    {
      uint64_t v8 = v117;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v118)) {
    goto LABEL_153;
  }
  if (v13 + v118 >= v3) {
    uint64_t v40 = v3;
  }
  else {
    uint64_t v40 = v13 + v118;
  }
  if (v40 >= v13)
  {
    if (v9 != v40)
    {
      uint64_t v41 = v114 + (v9 << 6);
      do
      {
        uint64_t v42 = (uint64_t *)(v10 + (v9 << 6));
        uint64_t v43 = *v42;
        uint64_t v44 = v42[1];
        uint64_t v45 = v13;
        uint64_t v46 = v41;
        do
        {
          uint64_t v47 = (_OWORD *)(v46 - 120);
          BOOL v48 = v43 == *(void *)(v46 - 120) && v44 == *(void *)(v46 - 112);
          if (v48 || (sub_1B3A70D20() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          long long v50 = *(_OWORD *)(v46 - 88);
          long long v49 = *(_OWORD *)(v46 - 72);
          *(void *)(v46 - std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)v46;
          v46 -= 64;
          uint64_t v43 = *(void *)(v46 + 8);
          uint64_t v44 = *(void *)(v46 + 16);
          char v51 = *(unsigned char *)(v46 + 24);
          long long v52 = *(_OWORD *)(v46 + 32);
          long long v53 = *(_OWORD *)(v46 + 48);
          long long v54 = v47[1];
          v47[4] = *v47;
          v47[5] = v54;
          v47[6] = v50;
          v47[7] = v49;
          *(void *)(v46 - 56) = v43;
          *(void *)(v46 - 48) = v44;
          *(unsigned char *)(v46 - 40) = v51;
          *(_OWORD *)(v46 - 32) = v52;
          *(_OWORD *)(v46 - 16) = v53;
          ++v45;
        }
        while (v9 != v45);
        ++v9;
        v41 += 64;
      }
      while (v9 != v40);
      uint64_t v9 = v40;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_1B3A70AF0();
  __break(1u);
  return result;
}

uint64_t sub_1B3A0D28C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + (a3 << 6) + 56;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + (v4 << 6));
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    while (1)
    {
      uint64_t v13 = (_OWORD *)(v12 - 120);
      BOOL v14 = result == *(void *)(v12 - 120) && v10 == *(void *)(v12 - 112);
      if (v14 || (uint64_t result = sub_1B3A70D20(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 64;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      long long v16 = *(_OWORD *)(v12 - 88);
      long long v15 = *(_OWORD *)(v12 - 72);
      *(void *)(v12 - std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)v12;
      v12 -= 64;
      uint64_t result = *(void *)(v12 + 8);
      uint64_t v10 = *(void *)(v12 + 16);
      char v17 = *(unsigned char *)(v12 + 24);
      long long v18 = *(_OWORD *)(v12 + 32);
      long long v19 = *(_OWORD *)(v12 + 48);
      long long v20 = v13[1];
      void v13[4] = *v13;
      _OWORD v13[5] = v20;
      v13[6] = v16;
      void v13[7] = v15;
      *(void *)(v12 - 56) = result;
      *(void *)(v12 - 48) = v10;
      *(unsigned char *)(v12 - 40) = v17;
      *(_OWORD *)(v12 - 32) = v18;
      *(_OWORD *)(v12 - 16) = v19;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1B3A0D380(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 63;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 63;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 6;
  long long v39 = __src;
  long long v38 = __dst;
  if (v10 >= v12 >> 6)
  {
    if (v11 >= -63)
    {
      if (__dst != a2 || &a2[64 * v13] <= __dst) {
        memmove(__dst, a2, v13 << 6);
      }
      uint64_t v23 = &v4[64 * v13];
      long long v37 = v23;
      long long v39 = v6;
      if (v7 < v6 && v11 >= 64)
      {
        uint64_t v24 = (char *)(a3 - 64);
        uint64_t v25 = v6;
        while (1)
        {
          uint64_t v26 = v24 + 64;
          uint64_t v27 = *((void *)v25 - 8);
          uint64_t v28 = *((void *)v25 - 7);
          v25 -= 64;
          BOOL v29 = *((void *)v23 - 8) == v27 && *((void *)v23 - 7) == v28;
          if (v29 || (sub_1B3A70D20() & 1) == 0)
          {
            long long v37 = v23 - 64;
            if (v26 < v23 || v24 >= v23 || v26 != v23)
            {
              long long v33 = *((_OWORD *)v23 - 4);
              long long v34 = *((_OWORD *)v23 - 3);
              long long v35 = *((_OWORD *)v23 - 1);
              *((_OWORD *)v24 + 2) = *((_OWORD *)v23 - 2);
              *((_OWORD *)v24 + 3) = v35;
              *(_OWORD *)uint64_t v24 = v33;
              *((_OWORD *)v24 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v34;
            }
            uint64_t v25 = v6;
            v23 -= 64;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v26 != v6 || v24 >= v6)
            {
              long long v30 = *(_OWORD *)v25;
              long long v31 = *((_OWORD *)v25 + 1);
              long long v32 = *((_OWORD *)v25 + 3);
              *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
              *((_OWORD *)v24 + 3) = v32;
              *(_OWORD *)uint64_t v24 = v30;
              *((_OWORD *)v24 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v31;
            }
            long long v39 = v25;
            if (v25 <= v7) {
              goto LABEL_50;
            }
          }
          v24 -= 64;
          uint64_t v6 = v25;
          if (v23 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -63)
  {
    if (__dst != __src || &__src[64 * v10] <= __dst) {
      memmove(__dst, __src, v10 << 6);
    }
    BOOL v14 = &v4[64 * v10];
    long long v37 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 64)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_1B3A70D20() & 1) == 0)
        {
          if (v7 != v4)
          {
            long long v20 = *(_OWORD *)v4;
            long long v21 = *((_OWORD *)v4 + 1);
            long long v22 = *((_OWORD *)v4 + 3);
            *((_OWORD *)v7 + 2) = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 3) = v22;
            *(_OWORD *)uint64_t v7 = v20;
            *((_OWORD *)v7 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v21;
          }
          v4 += 64;
          long long v38 = v4;
          long long v16 = v6;
        }
        else
        {
          long long v16 = v6 + 64;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            long long v17 = *(_OWORD *)v6;
            long long v18 = *((_OWORD *)v6 + 1);
            long long v19 = *((_OWORD *)v6 + 3);
            *((_OWORD *)v7 + 2) = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 3) = v19;
            *(_OWORD *)uint64_t v7 = v17;
            *((_OWORD *)v7 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v18;
          }
        }
        v7 += 64;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      long long v39 = v7;
    }
LABEL_50:
    sub_1B3A0D738((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

char *sub_1B3A0D63C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A28);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A0D738(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 63;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -64)
  {
    uint64_t result = (char *)sub_1B3A70B50();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 6;
    if (result != v3 || result >= &v3[64 * v7])
    {
      return (char *)memmove(result, v3, v7 << 6);
    }
  }
  return result;
}

char *sub_1B3A0D7F4(uint64_t a1)
{
  return sub_1B3A0D63C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B3A0D808(uint64_t a1)
{
  return sub_1B3A0C988(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B3A0D81C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A0D914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*(void *)(a3 + 16) || (unint64_t v8 = sub_1B3A0C82C(0x746E656D75636F44, 0xED00006E6F697461), (v9 & 1) == 0))
  {
    long long v48 = 0u;
    long long v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  sub_1B39B2F1C(*(void *)(a3 + 56) + 32 * v8, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((void *)&v49 + 1))
  {
LABEL_16:
    uint64_t result = sub_1B3A10018((uint64_t)&v48);
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A58);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_17:
    char v16 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    goto LABEL_18;
  }
  if (*(void *)(v46 + 16) && (unint64_t v11 = sub_1B3A0C82C(0x736973706F6E7953, 0xE800000000000000), (v12 & 1) != 0))
  {
    sub_1B39B2F1C(*(void *)(v46 + 56) + 32 * v11, (uint64_t)&v48);
    int v13 = swift_dynamicCast();
    if (v13) {
      uint64_t v14 = v46;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13) {
      uint64_t v15 = v47;
    }
    else {
      uint64_t v15 = 0;
    }
    if (!*(void *)(v46 + 16)) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if (!*(void *)(v46 + 16)) {
      goto LABEL_30;
    }
  }
  unint64_t v20 = sub_1B3A0C82C(0x7470697263736544, 0xEB000000006E6F69);
  if (v21)
  {
    sub_1B39B2F1C(*(void *)(v46 + 56) + 32 * v20, (uint64_t)&v48);
    int v22 = swift_dynamicCast();
    if (v22) {
      uint64_t v17 = v46;
    }
    else {
      uint64_t v17 = 0;
    }
    if (v22) {
      uint64_t v18 = v47;
    }
    else {
      uint64_t v18 = 0;
    }
    if (!*(void *)(v46 + 16)) {
      goto LABEL_34;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (!*(void *)(v46 + 16))
  {
LABEL_34:
    char v16 = 0;
    goto LABEL_35;
  }
LABEL_31:
  unint64_t v23 = sub_1B3A0C82C(0x6E6564646948, 0xE600000000000000);
  if ((v24 & 1) == 0) {
    goto LABEL_34;
  }
  sub_1B39B2F1C(*(void *)(v46 + 56) + 32 * v23, (uint64_t)&v48);
  if (!swift_dynamicCast()) {
    goto LABEL_34;
  }
  char v16 = v46;
LABEL_35:
  char v45 = v16;
  if (*(void *)(v46 + 16) && (unint64_t v25 = sub_1B3A0C82C(0x736E6F6974704FLL, 0xE700000000000000), (v26 & 1) != 0))
  {
    sub_1B39B2F1C(*(void *)(v46 + 56) + 32 * v25, (uint64_t)&v48);
  }
  else
  {
    long long v48 = 0u;
    long long v49 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v49 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A60);
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      uint64_t v44 = *(void *)(v46 + 16);
      if (!v44)
      {
        uint64_t result = swift_bridgeObjectRelease();
        long long v19 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_19;
      }
      swift_bridgeObjectRetain();
      uint64_t v27 = v46;
      uint64_t v28 = 0;
      long long v19 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        uint64_t v29 = *(void *)(v27 + 8 * v28 + 32);
        if (*(void *)(v29 + 16))
        {
          unint64_t v30 = sub_1B3A0C82C(0x6E6F6974704FLL, 0xE600000000000000);
          uint64_t v27 = v46;
          if (v31)
          {
            sub_1B39B2F1C(*(void *)(v29 + 56) + 32 * v30, (uint64_t)&v48);
            if (swift_dynamicCast())
            {
              if (*(void *)(v29 + 16)
                && (unint64_t v32 = sub_1B3A0C82C(0x7470697263736544, 0xEB000000006E6F69), (v33 & 1) != 0)
                && (sub_1B39B2F1C(*(void *)(v29 + 56) + 32 * v32, (uint64_t)&v48), (swift_dynamicCast() & 1) != 0))
              {
                if (*(void *)(v29 + 16))
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  unint64_t v34 = sub_1B3A0C82C(0xD000000000000011, 0x80000001B3A7A4E0);
                  if ((v35 & 1) != 0
                    && (sub_1B39B2F1C(*(void *)(v29 + 56) + 32 * v34, (uint64_t)&v48),
                        __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8),
                        (swift_dynamicCast() & 1) != 0))
                  {
                    uint64_t v36 = v47;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v37 = v46;
                  }
                  else
                  {
                    uint64_t v36 = v47;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v37 = MEMORY[0x1E4FBC860];
                  }
                }
                else
                {
                  uint64_t v37 = MEMORY[0x1E4FBC860];
                  uint64_t v36 = v47;
                }
                if (v36)
                {
                  uint64_t v43 = v37;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    long long v19 = sub_1B3A0C11C(0, v19[2] + 1, 1, v19);
                  }
                  unint64_t v39 = v19[2];
                  unint64_t v38 = v19[3];
                  unint64_t v40 = v39 + 1;
                  uint64_t v27 = v46;
                  if (v39 >= v38 >> 1)
                  {
                    uint64_t v42 = sub_1B3A0C11C((void *)(v38 > 1), v39 + 1, 1, v19);
                    unint64_t v40 = v39 + 1;
                    uint64_t v27 = v46;
                    long long v19 = v42;
                  }
                  v19[2] = v40;
                  uint64_t v41 = &v19[5 * v39];
                  v41[4] = v46;
                  v41[5] = v47;
                  v41[6] = v46;
                  v41[7] = v47;
                  v41[8] = v43;
                  goto LABEL_45;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            uint64_t v27 = v46;
          }
        }
LABEL_45:
        if (v44 == ++v28)
        {
          uint64_t result = swift_bridgeObjectRelease_n();
          char v16 = v45;
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    uint64_t result = sub_1B3A10018((uint64_t)&v48);
  }
LABEL_18:
  long long v19 = 0;
LABEL_19:
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = v16;
  *(void *)(a4 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
  *(void *)(a4 + 32) = v15;
  *(void *)(a4 + 40) = v17;
  *(void *)(a4 + 48) = v18;
  *(void *)(a4 + 56) = v19;
  return result;
}

uint64_t sub_1B3A0DEC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A0DFBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_1B3A6FF40() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

unint64_t sub_1B3A0E114(char a1)
{
  uint64_t v2 = sub_1B3A6FF40();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  unint64_t v34 = (char *)&v33 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v33 - v13;
  MEMORY[0x1F4188790](v12);
  char v16 = (char *)&v33 - v15;
  if ((a1 & 1) != 0 && getenv("KTRACE_PROVIDER_PATH"))
  {
    sub_1B3A703B0();
    sub_1B3A6FE90();
    swift_bridgeObjectRelease();
    unint64_t v17 = sub_1B3A0C240(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v19 = *(void *)(v17 + 16);
    unint64_t v18 = *(void *)(v17 + 24);
    if (v19 >= v18 >> 1) {
      unint64_t v17 = sub_1B3A0C240(v18 > 1, v19 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v19 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v17+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v19, v16, v2);
  }
  else
  {
    unint64_t v17 = MEMORY[0x1E4FBC860];
  }
  if (os_variant_has_internal_content())
  {
    sub_1B3A6FE90();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = sub_1B3A0C240(0, *(void *)(v17 + 16) + 1, 1, v17);
    }
    unint64_t v21 = *(void *)(v17 + 16);
    unint64_t v20 = *(void *)(v17 + 24);
    char v33 = v6;
    if (v21 >= v20 >> 1) {
      unint64_t v17 = sub_1B3A0C240(v20 > 1, v21 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v21 + 1;
    int v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    unint64_t v23 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v24 = *(void *)(v3 + 72);
    v22(v17 + v23 + v24 * v21, v14, v2);
    sub_1B3A6FE90();
    unint64_t v26 = *(void *)(v17 + 16);
    unint64_t v25 = *(void *)(v17 + 24);
    if (v26 >= v25 >> 1) {
      unint64_t v17 = sub_1B3A0C240(v25 > 1, v26 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v26 + 1;
    v22(v17 + v23 + v26 * v24, v11, v2);
    uint64_t v27 = v34;
    sub_1B3A6FE90();
    unint64_t v29 = *(void *)(v17 + 16);
    unint64_t v28 = *(void *)(v17 + 24);
    if (v29 >= v28 >> 1) {
      unint64_t v17 = sub_1B3A0C240(v28 > 1, v29 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v29 + 1;
    v22(v17 + v23 + v29 * v24, v27, v2);
    unint64_t v6 = v33;
  }
  sub_1B3A6FE90();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v17 = sub_1B3A0C240(0, *(void *)(v17 + 16) + 1, 1, v17);
  }
  unint64_t v31 = *(void *)(v17 + 16);
  unint64_t v30 = *(void *)(v17 + 24);
  if (v31 >= v30 >> 1) {
    unint64_t v17 = sub_1B3A0C240(v30 > 1, v31 + 1, 1, v17);
  }
  *(void *)(v17 + 16) = v31 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v17+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v31, v6, v2);
  return v17;
}

uint64_t sub_1B3A0E584(char a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1B3A6FF40();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v46 = objc_msgSend(self, sel_defaultManager);
  unint64_t v9 = sub_1B3A0E114(a1);
  unint64_t v10 = v9;
  uint64_t v48 = MEMORY[0x1E4FBC860];
  uint64_t v45 = *(void *)(v9 + 16);
  if (v45)
  {
    unint64_t v11 = 0;
    unint64_t v44 = v9 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v40 = v2;
    uint64_t v41 = v3 + 48;
    unint64_t v34 = (void (**)(char *, uint64_t))(v3 + 8);
    char v35 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v42 = v3 + 56;
    uint64_t v43 = v3 + 16;
    unint64_t v32 = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    unint64_t v38 = v8;
    uint64_t v39 = v3;
    unint64_t v36 = v9;
    uint64_t v37 = v5;
    while (1)
    {
      if (v11 >= *(void *)(v10 + 16)) {
        __break(1u);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, v44 + *(void *)(v3 + 72) * v11, v2);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v15(v8, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1) {
        goto LABEL_22;
      }
      char v33 = v15;
      (*v35)(v5, v8, v2);
      sub_1B3A6FF10();
      char v16 = (void *)sub_1B3A70290();
      swift_bridgeObjectRelease();
      id v47 = 0;
      id v17 = objc_msgSend(v46, sel_contentsOfDirectoryAtPath_error_, v16, &v47, v32);

      id v18 = v47;
      if (v17)
      {
        uint64_t v19 = sub_1B3A70550();
        id v20 = v18;

        uint64_t v21 = *(void *)(v19 + 16);
        if (v21) {
          goto LABEL_11;
        }
      }
      else
      {
        id v22 = v47;
        unint64_t v23 = (void *)sub_1B3A6FE40();

        swift_willThrow();
        uint64_t v19 = MEMORY[0x1E4FBC860];
        uint64_t v21 = *(void *)(MEMORY[0x1E4FBC860] + 16);
        if (v21)
        {
LABEL_11:
          uint64_t v24 = (uint64_t *)(v19 + 40);
          uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
          do
          {
            uint64_t v25 = *(v24 - 1);
            uint64_t v26 = *v24;
            swift_bridgeObjectRetain();
            if (sub_1B3A70450())
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              id v47 = v12;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_1B3A052F4(0, v12[2] + 1, 1);
                uint64_t v12 = v47;
              }
              unint64_t v29 = v12[2];
              unint64_t v28 = v12[3];
              if (v29 >= v28 >> 1)
              {
                sub_1B3A052F4((char *)(v28 > 1), v29 + 1, 1);
                uint64_t v12 = v47;
              }
              void v12[2] = v29 + 1;
              unint64_t v30 = &v12[2 * v29];
              v30[4] = v25;
              void v30[5] = v26;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            v24 += 2;
            --v21;
          }
          while (v21);
          goto LABEL_4;
        }
      }
      uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
LABEL_4:
      ++v11;
      uint64_t v13 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v13);
      uint64_t v5 = v37;
      *(&v32 - 2) = (unint64_t)v37;
      uint64_t v14 = sub_1B3A06AE8((void (*)(uint64_t *__return_ptr, void *))sub_1B3A0FF98, (uint64_t)(&v32 - 4), (uint64_t)v12);
      swift_release();
      sub_1B3A0703C((uint64_t)v14);
      uint64_t v2 = v40;
      (*v34)(v5, v40);
      uint64_t v8 = v38;
      uint64_t v3 = v39;
      unint64_t v10 = v36;
      if (v11 == v45)
      {
        v33(v38, 1, 1, v2);
        goto LABEL_22;
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
LABEL_22:

  swift_bridgeObjectRelease();
  return v48;
}

unint64_t sub_1B3A0EA50()
{
  unint64_t result = qword_1E9CD5910;
  if (!qword_1E9CD5910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5910);
  }
  return result;
}

unint64_t sub_1B3A0EAA4()
{
  unint64_t result = qword_1E9CD5988;
  if (!qword_1E9CD5988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5988);
  }
  return result;
}

uint64_t sub_1B3A0EAF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A0EB24(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A0EB50(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A0EB7C(uint64_t a1)
{
  return a1;
}

void deprecatedWillEndTracingToFile(void *a1, uint64_t a2)
{
  id v3 = a1;
  [v3 willEndTracingToFile:a2];
}

uint64_t sub_1B3A0EBF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1B3A70B50();
  __break(1u);
  return result;
}

uint64_t sub_1B3A0ECEC(uint64_t a1, char a2)
{
  nullsub_1();
  uint64_t v60 = sub_1B3A0E584(a2 & 1);
  swift_bridgeObjectRetain();
  sub_1B3A0CAF4(&v60);
  swift_bridgeObjectRelease();
  uint64_t v3 = v60;
  int64_t v4 = *(void *)(v60 + 16);
  if (!v4)
  {
    swift_release();
    uint64_t v6 = MEMORY[0x1E4FBC860];
LABEL_46:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A18);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_1B3A73390;
    uint64_t v60 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
    sub_1B3A0609C();
    uint64_t v44 = sub_1B3A70250();
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    *(void *)(v43 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v43 + 32) = v44;
    *(void *)(v43 + 40) = v46;
    sub_1B39B16DC();
    sub_1B3A70DD0();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v58 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v4, 0);
  uint64_t v5 = 0;
  uint64_t v6 = v58;
  int64_t v48 = v4;
  uint64_t v51 = v3 + 32;
  while (1)
  {
    uint64_t v7 = (uint64_t *)(v51 + (v5 << 6));
    unint64_t v8 = v7[1];
    uint64_t v9 = v7[6];
    long long v52 = (void *)v7[7];
    if (v7[4])
    {
      uint64_t v60 = *v7;
      unint64_t v61 = v8;
      swift_bridgeObjectRetain();
      sub_1B3A703A0();
      sub_1B3A703A0();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    if (v9)
    {
      sub_1B3A703A0();
      uint64_t v60 = 538976288;
      unint64_t v61 = 0xE400000000000000;
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
    }
    unint64_t v10 = v52;
    if (v52) {
      break;
    }
LABEL_41:
    unint64_t v41 = *(void *)(v6 + 16);
    unint64_t v40 = *(void *)(v6 + 24);
    if (v41 >= v40 >> 1) {
      sub_1B3A052F4((char *)(v40 > 1), v41 + 1, 1);
    }
    ++v5;
    *(void *)(v6 + 16) = v41 + 1;
    uint64_t v42 = v6 + 16 * v41;
    *(void *)(v42 + 32) = 0;
    *(void *)(v42 + 40) = 0xE000000000000000;
    if (v5 == v4)
    {
      swift_release();
      goto LABEL_46;
    }
  }
  sub_1B3A703A0();
  unint64_t v11 = v52[2];
  if (!v11) {
    goto LABEL_39;
  }
  sub_1B3A703A0();
  unint64_t v12 = v52[2];
  if (!v12) {
    goto LABEL_50;
  }
  uint64_t v56 = v52[4];
  unint64_t v13 = v11 - 1;
  uint64_t v49 = v5;
  uint64_t v50 = v6;
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v12 < 2) {
      goto LABEL_51;
    }
    if (v11 > v12) {
      goto LABEL_52;
    }
    uint64_t v15 = v52[7];
    uint64_t v14 = v52[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v53 = v15;
    swift_bridgeObjectRetain();
    uint64_t v55 = v14;
    swift_bridgeObjectRetain();
    char v16 = v52 + 13;
    do
    {
      uint64_t v17 = *(v16 - 4);
      uint64_t v18 = *(v16 - 1);
      uint64_t v19 = *v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = v56;
      uint64_t v21 = sub_1B3A70370();
      BOOL v22 = v21 < sub_1B3A70370();
      uint64_t v23 = v55;
      unint64_t v24 = v13;
      uint64_t v25 = v53;
      if (v22) {
        uint64_t v23 = v19;
      }
      if (v22) {
        uint64_t v25 = v18;
      }
      uint64_t v53 = v25;
      if (v22) {
        uint64_t v20 = v17;
      }
      uint64_t v55 = v23;
      uint64_t v56 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 += 5;
      --v13;
    }
    while (v24 != 1);
    unint64_t v10 = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v49;
    uint64_t v6 = v50;
    int64_t v4 = v48;
  }
  uint64_t v54 = sub_1B3A70370();
  swift_bridgeObjectRelease();
  int64_t v26 = v10[2];
  if (!v26)
  {
LABEL_39:
    uint64_t v28 = MEMORY[0x1E4FBC860];
LABEL_40:
    uint64_t v60 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
    sub_1B3A0609C();
    sub_1B3A70250();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  uint64_t v59 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v26, 0);
  uint64_t v27 = 0;
  uint64_t v28 = v59;
  unint64_t v29 = v10 + 8;
  while (!__OFADD__(v27, 1))
  {
    uint64_t v30 = sub_1B3A70370();
    uint64_t v31 = v54 - v30;
    if (__OFSUB__(v54, v30)) {
      goto LABEL_48;
    }
    uint64_t v57 = v28;
    int64_t v32 = v26;
    uint64_t v33 = v31 + 8;
    if (__OFADD__(v31, 8)) {
      goto LABEL_49;
    }
    uint64_t v60 = 0x2020202020202020;
    unint64_t v61 = 0xE800000000000000;
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    MEMORY[0x1B3EBD790](32, 0xE100000000000000, v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
    sub_1B3A0609C();
    sub_1B3A70250();
    swift_bridgeObjectRelease();
    if (sub_1B3A70370() < 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B3A709B0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
    }
    int64_t v26 = v32;
    uint64_t v34 = v27 + 1;
    swift_bridgeObjectRelease();
    uint64_t v35 = v60;
    unint64_t v36 = v61;
    uint64_t v28 = v57;
    unint64_t v38 = *(void *)(v57 + 16);
    unint64_t v37 = *(void *)(v57 + 24);
    if (v38 >= v37 >> 1)
    {
      sub_1B3A052F4((char *)(v37 > 1), v38 + 1, 1);
      uint64_t v34 = v27 + 1;
      uint64_t v28 = v57;
    }
    *(void *)(v28 + 16) = v38 + 1;
    uint64_t v39 = v28 + 16 * v38;
    *(void *)(v39 + 32) = v35;
    *(void *)(v39 + 40) = v36;
    v29 += 5;
    ++v27;
    if (v34 == v26)
    {
      uint64_t v5 = v49;
      uint64_t v6 = v50;
      int64_t v4 = v48;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1B3A0F3F8()
{
  unint64_t result = qword_1E9CD59A8;
  if (!qword_1E9CD59A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD59A8);
  }
  return result;
}

uint64_t sub_1B3A0F44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 6u)
  {
    if (a5 == 4) {
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B3A0F4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 6u)
  {
    if (a5 == 4) {
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for KTraceProvideError()
{
  return &type metadata for KTraceProvideError;
}

uint64_t destroy for ProviderOption()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ProviderOption(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ProviderOption(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ProviderOption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProviderOption()
{
  return &type metadata for ProviderOption;
}

uint64_t destroy for ProviderDocumentation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ProviderDocumentation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProviderDocumentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProviderDocumentation()
{
  return &type metadata for ProviderDocumentation;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwxx_0(uint64_t a1)
{
  return sub_1B3A0F4AC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1B3A0F44C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1B3A0F44C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1B3A0F4AC(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1B3A0F4AC(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B3A0FB48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1B3A0FB50(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for KTraceProvideErrorKind()
{
  return &type metadata for KTraceProvideErrorKind;
}

uint64_t destroy for Provider()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Provider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Provider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Provider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Trimming(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Trimming(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Provider()
{
  return &type metadata for Provider;
}

uint64_t type metadata accessor for ProviderList()
{
  return self;
}

uint64_t method lookup function for ProviderList(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ProviderList);
}

uint64_t dispatch thunk of ProviderList.__allocating_init(machine:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v10;
  return result;
}

uint64_t sub_1B3A0FE38(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 224)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 216);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1B3A0FE94(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 224) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 224) = 0;
    }
    if (a2) {
      *(void *)(result + 216) = a2;
    }
  }
  return result;
}

void type metadata accessor for ktrace_machine(uint64_t a1)
{
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

double sub_1B3A0FF98@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B3A06C88(a1, a2);
}

uint64_t sub_1B3A0FFC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B3A10018(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void sub_1B3A1008C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void listFiles(in:pathExtension:olderThan:)(void (**a1)(char *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = v4;
  uint64_t v97 = a4;
  uint64_t v98 = a3;
  uint64_t v112 = a2;
  uint64_t v110 = a1;
  uint64_t v6 = sub_1B3A6FDE0();
  uint64_t v103 = *(void (***)(char *, uint64_t))(v6 - 8);
  uint64_t v104 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  unsigned __int8 v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v95 = (char *)&v81 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A78);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v93 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v81 - v14;
  uint64_t v96 = sub_1B3A6FFD0();
  uint64_t v102 = *(void *)(v96 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v96);
  uint64_t v92 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v111 = (char *)&v81 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58F8);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v88 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  unint64_t v99 = (char *)&v81 - v22;
  uint64_t v23 = sub_1B3A6FF40();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v100 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v83 = (char *)&v81 - v28;
  MEMORY[0x1F4188790](v27);
  v115 = (char *)&v81 - v29;
  id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28CB8]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A80);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1B3A73850;
  int64_t v32 = (void *)*MEMORY[0x1E4F1C5F8];
  uint64_t v33 = (void *)*MEMORY[0x1E4F1C6E8];
  *(void *)(v31 + 32) = *MEMORY[0x1E4F1C5F8];
  *(void *)(v31 + 40) = v33;
  uint64_t v34 = (void *)*MEMORY[0x1E4F1C540];
  *(void *)(v31 + 48) = *MEMORY[0x1E4F1C540];
  id v86 = v32;
  id v35 = v33;
  id v94 = v34;
  unint64_t v36 = (void *)sub_1B3A70620();

  swift_bridgeObjectRelease();
  id v105 = v36;
  if (!v36) {
    return;
  }
  fsobj_id v109 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  uint64_t v110 = (void (**)(char *, uint64_t, uint64_t))(v24 + 32);
  uint64_t v107 = (void (**)(char *, uint64_t))(v24 + 8);
  unint64_t v108 = (unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48);
  id v106 = (void (**)(char *, char *, uint64_t))(v102 + 32);
  ++v103;
  uint64_t v89 = (void (**)(char *, uint64_t))(v102 + 8);
  unint64_t v84 = MEMORY[0x1E4FBC860];
  uint64_t v82 = v24;
  BOOL v87 = (void (**)(char *, char *, uint64_t))(v24 + 16);
  uint64_t v101 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v85 = v9;
  unint64_t v37 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v38 = v98;
  uint64_t v102 = v24 + 56;
  uint64_t v39 = (uint64_t)v99;
  uint64_t v90 = v23;
  while (1)
  {
    if (objc_msgSend(v105, sel_nextObject))
    {
      sub_1B3A70900();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v113, 0, sizeof(v113));
    }
    sub_1B3A10DF8((uint64_t)v113, (uint64_t)v114);
    if (!v114[3])
    {
      v115 = v5;
      sub_1B3A11580((uint64_t)v114, &qword_1E9CD5A50);
      unint64_t v41 = *v37;
      (*v37)(v39, 1, 1, v23);
      goto LABEL_30;
    }
    int v40 = swift_dynamicCast();
    unint64_t v41 = *v37;
    (*v37)(v39, v40 ^ 1u, 1, v23);
    if ((*v109)(v39, 1, v23) == 1) {
      break;
    }
    uint64_t v42 = *v110;
    (*v110)(v115, v39, v23);
    if (sub_1B3A6FE70() == v112 && v43 == v38)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v44 = sub_1B3A70D20();
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0) {
        goto LABEL_3;
      }
    }
    uint64_t v91 = v42;
    sub_1B3A11518(v97, (uint64_t)v15);
    uint64_t v45 = *v108;
    uint64_t v46 = v96;
    if ((*v108)(v15, 1, v96) == 1)
    {
      uint64_t v58 = (uint64_t)v15;
LABEL_20:
      sub_1B3A11580(v58, &qword_1E9CD5A78);
      uint64_t v39 = (uint64_t)v99;
      goto LABEL_21;
    }
    id v47 = *v106;
    (*v106)(v111, v15, v46);
    type metadata accessor for URLResourceKey();
    sub_1B3A116B4(&qword_1E9CD5A88, (void (*)(uint64_t))type metadata accessor for URLResourceKey);
    int64_t v48 = v5;
    id v49 = v94;
    v114[0] = sub_1B3A705D0();
    id v50 = v49;
    sub_1B3A112EC(v113, v50);
    uint64_t v51 = *(void **)&v113[0];

    long long v52 = v95;
    sub_1B3A6FE80();
    if (v48)
    {

      swift_bridgeObjectRelease();
      (*v89)(v111, v46);
      (*v107)(v115, v90);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    uint64_t v53 = v93;
    sub_1B3A6FDC0();
    (*v103)(v52, v104);
    if (v45(v53, 1, v46) == 1)
    {
      (*v89)(v111, v46);
      uint64_t v58 = (uint64_t)v53;
      uint64_t v38 = v98;
      unint64_t v37 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v102;
      long long v5 = 0;
      uint64_t v23 = v90;
      goto LABEL_20;
    }
    uint64_t v54 = v92;
    v47(v92, v53, v46);
    sub_1B3A116B4(&qword_1E9CD5A90, MEMORY[0x1E4F27928]);
    uint64_t v55 = v111;
    char v56 = sub_1B3A70260();
    uint64_t v57 = *v89;
    (*v89)(v54, v46);
    v57(v55, v46);
    uint64_t v38 = v98;
    unint64_t v37 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v102;
    long long v5 = 0;
    uint64_t v23 = v90;
    uint64_t v39 = (uint64_t)v99;
    if (v56)
    {
LABEL_21:
      (*v87)(v83, v115, v23);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        unint64_t v59 = v84;
      }
      else {
        unint64_t v59 = sub_1B3A0C240(0, *(void *)(v84 + 16) + 1, 1, v84);
      }
      unint64_t v61 = *(void *)(v59 + 16);
      unint64_t v60 = *(void *)(v59 + 24);
      if (v61 >= v60 >> 1) {
        unint64_t v59 = sub_1B3A0C240(v60 > 1, v61 + 1, 1, v59);
      }
      *(void *)(v59 + 16) = v61 + 1;
      uint64_t v62 = v82;
      unint64_t v63 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      unint64_t v84 = v59;
      v91((char *)(v59 + v63 + *(void *)(v82 + 72) * v61), (uint64_t)v83, v23);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v115, v23);
    }
    else
    {
LABEL_3:
      (*v107)(v115, v23);
    }
  }
  v115 = v5;
LABEL_30:
  sub_1B3A11580(v39, &qword_1E9CD58F8);
  uint64_t v64 = *(void *)(v84 + 16);
  uint64_t v65 = v88;
  if (v64)
  {
    uint64_t v66 = v84 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
    unint64_t v108 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v82 + 72);
    uint64_t v111 = *(char **)(v82 + 16);
    swift_bridgeObjectRetain();
    uint64_t v67 = 0;
    id v106 = (void (**)(char *, char *, uint64_t))((unint64_t)v37 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
    uint64_t v68 = v100;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v111)(v65, v66, v23);
      v41((uint64_t)v65, 0, 1, v23);
      if ((*v109)((uint64_t)v65, 1, v23) == 1) {
        break;
      }
      uint64_t v112 = v64;
      uint64_t v69 = v67;
      uint64_t v70 = v23;
      (*v110)(v68, (uint64_t)v65, v23);
      type metadata accessor for URLResourceKey();
      sub_1B3A116B4(&qword_1E9CD5A88, (void (*)(uint64_t))type metadata accessor for URLResourceKey);
      id v71 = v86;
      v114[0] = sub_1B3A705D0();
      id v72 = v71;
      uint64_t v73 = v85;
      id v74 = v72;
      sub_1B3A112EC(v113, v72);
      uint64_t v75 = *(void **)&v113[0];

      uint64_t v76 = v115;
      sub_1B3A6FE80();
      v115 = v76;
      if (v76)
      {
        swift_bridgeObjectRelease();
        (*v107)(v100, v70);
        swift_bridgeObjectRelease_n();

        return;
      }
      swift_bridgeObjectRelease();
      uint64_t v77 = sub_1B3A6FDD0();
      char v79 = v78;
      (*v103)(v73, v104);
      if (v79) {
        uint64_t v80 = 0;
      }
      else {
        uint64_t v80 = v77;
      }
      uint64_t v67 = v69 + v80;
      if (__OFADD__(v69, v80))
      {
        __break(1u);
        return;
      }
      uint64_t v23 = v70;
      (*v107)(v100, v70);
      v66 += (uint64_t)v108;
      uint64_t v64 = v112 - 1;
      uint64_t v65 = v88;
      if (v112 == 1) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_41:
    v41((uint64_t)v65, 1, 1, v23);
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1B3A10DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for URLResourceKey()
{
  if (!qword_1E9CD5A98)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1E9CD5A98);
    }
  }
}

uint64_t sub_1B3A10EB8(uint64_t a1, uint64_t a2)
{
  return sub_1B3A10FB0(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1B3A10ED0()
{
  sub_1B3A702C0();
  sub_1B3A70360();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A10F24()
{
  sub_1B3A702C0();
  sub_1B3A70E00();
  sub_1B3A70360();
  uint64_t v0 = sub_1B3A70E50();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B3A10F98(uint64_t a1, uint64_t a2)
{
  return sub_1B3A10FB0(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1B3A10FB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1B3A702C0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B3A10FF4(uint64_t a1, id *a2)
{
  uint64_t result = sub_1B3A702A0();
  *a2 = 0;
  return result;
}

uint64_t sub_1B3A1106C(uint64_t a1, id *a2)
{
  char v3 = sub_1B3A702B0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1B3A110EC@<X0>(uint64_t *a1@<X8>)
{
  sub_1B3A702C0();
  uint64_t v2 = sub_1B3A70290();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B3A11130()
{
  uint64_t v0 = sub_1B3A702C0();
  uint64_t v2 = v1;
  if (v0 == sub_1B3A702C0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1B3A70D20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1B3A111BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1B3A70290();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B3A11204@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1B3A702C0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B3A11230(uint64_t a1)
{
  uint64_t v2 = sub_1B3A116B4(&qword_1E9CD5A88, (void (*)(uint64_t))type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_1B3A116B4(&qword_1E9CD5AB8, (void (*)(uint64_t))type metadata accessor for URLResourceKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B3A112EC(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  sub_1B3A702C0();
  sub_1B3A70E00();
  swift_bridgeObjectRetain();
  sub_1B3A70360();
  uint64_t v7 = sub_1B3A70E50();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v24 = a2;
    sub_1B3A11A10((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  uint64_t v10 = sub_1B3A702C0();
  uint64_t v12 = v11;
  if (v10 == sub_1B3A702C0() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = sub_1B3A702C0();
        uint64_t v19 = v18;
        if (v17 == sub_1B3A702C0() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = sub_1B3A70D20();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0;
}

uint64_t sub_1B3A11518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3A11580(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B3A115DC()
{
  return sub_1B3A116B4(&qword_1E9CD5AA0, (void (*)(uint64_t))type metadata accessor for URLResourceKey);
}

uint64_t sub_1B3A11624()
{
  return sub_1B3A116B4(&qword_1E9CD5AA8, (void (*)(uint64_t))type metadata accessor for URLResourceKey);
}

uint64_t sub_1B3A1166C()
{
  return sub_1B3A116B4(&qword_1E9CD5AB0, (void (*)(uint64_t))type metadata accessor for URLResourceKey);
}

uint64_t sub_1B3A116B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B3A116FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5AC0);
  uint64_t v3 = sub_1B3A70980();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    id v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      sub_1B3A702C0();
      sub_1B3A70E00();
      sub_1B3A70360();
      uint64_t v18 = sub_1B3A70E50();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v1ktrace_session_set_default_event_names_enabled(global_session, 1) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1B3A11A10(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_1B3A116FC();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_1B3A11C40();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1B3A11DEC();
  }
  uint64_t v9 = *v3;
  sub_1B3A702C0();
  sub_1B3A70E00();
  sub_1B3A70360();
  uint64_t v10 = sub_1B3A70E50();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = sub_1B3A702C0();
  uint64_t v14 = v13;
  if (v12 == sub_1B3A702C0() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v17 = sub_1B3A70D20();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = sub_1B3A702C0();
      uint64_t v21 = v20;
      if (v19 == sub_1B3A702C0() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = sub_1B3A70D20();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for URLResourceKey();
  uint64_t result = sub_1B3A70D60();
  __break(1u);
  return result;
}

id sub_1B3A11C40()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5AC0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70970();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1B3A11DEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5AC0);
  uint64_t v3 = sub_1B3A70980();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    char v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    sub_1B3A702C0();
    sub_1B3A70E00();
    id v18 = v17;
    sub_1B3A70360();
    uint64_t v19 = sub_1B3A70E50();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v1ktrace_session_set_default_event_names_enabled(global_session, 1) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1B3A120CC()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A12114()
{
  return sub_1B3A70E20();
}

uint64_t sub_1B3A12140()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A12184@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1B3A12EB4(*a1);
  *a2 = result;
  return result;
}

unsigned char *sub_1B3A121B0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1B3A121BC(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unsigned char *sub_1B3A121C4@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

unsigned char *sub_1B3A121D8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

unsigned char *sub_1B3A121EC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B3A12200(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_1B3A12230@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_1B3A1225C@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned char *sub_1B3A12280(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *sub_1B3A12294(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *sub_1B3A122A8(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *sub_1B3A122BC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B3A122D0(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B3A122E4(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1B3A122F8(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B3A1230C()
{
  return *v0 == 0;
}

uint64_t sub_1B3A1231C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

unsigned char *sub_1B3A12334(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL sub_1B3A12348(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B3A1235C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = sub_1B3A12EC8(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1B3A1239C()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A123E0()
{
  return sub_1B3A70E10();
}

uint64_t sub_1B3A12408()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A1244C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  swift_beginAccess();
  uint64_t v4 = sub_1B3A700D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_1B3A124D8())()
{
  return j__swift_endAccess;
}

uint64_t sub_1B3A12534(FILE *a1, FILE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  sub_1B3A125B4(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t sub_1B3A125B4(FILE *a1, FILE *a2, uint64_t a3, uint64_t a4, char a5)
{
  BOOL v25 = a2;
  uint64_t v8 = sub_1B3A6FFD0();
  uint64_t v23 = *(void *)(v8 - 8);
  uint64_t v24 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1B3A700D0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B3A700C0();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v5 + OBJC_IVAR____TtC6ktrace8Reporter_logger, v14, v11);
  if ((a5 & 1) == 0)
  {
    char v17 = v25;
    goto LABEL_9;
  }
  uint64_t v15 = v26;
  int64_t v16 = sub_1B3A3C12C(a1);
  if (!v15)
  {
    a1 = v16;
    if (!v16 || (char v17 = sub_1B3A3C12C(v25)) == 0)
    {
      sub_1B3A12F70();
      swift_allocError();
      swift_willThrow();
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v19 = v23;
    uint64_t v18 = v24;
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;
    sub_1B3A6FFC0();
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v5 + OBJC_IVAR____TtC6ktrace8Reporter_creationDate, v10, v18);
    id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28D48]), sel_init);
    *(void *)(v5 + OBJC_IVAR____TtC6ktrace8Reporter_initialFormatter) = v20;
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C00]), sel_init);
    objc_msgSend(v21, sel_setUnitsStyle_, 1);
    objc_msgSend(v21, sel_setZeroFormattingBehavior_, 14);
    objc_msgSend(v21, sel_setAllowedUnits_, 192);
    *(void *)(v5 + OBJC_IVAR____TtC6ktrace8Reporter_updateFormatter) = v21;
    return v5;
  }
LABEL_7:
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v5 + OBJC_IVAR____TtC6ktrace8Reporter_logger, v11);
  type metadata accessor for Reporter();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t sub_1B3A128C0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_1B3A700D0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5A18);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B3A73390;
  id v10 = sub_1B39B14E4();
  *(void *)(v9 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v11;
  swift_beginAccess();
  sub_1B39B16DC();
  sub_1B3A70DD0();
  swift_endAccess();
  uint64_t v12 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v2 + 176))(v12);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = sub_1B3A700B0();
  os_log_type_t v14 = sub_1B3A70630();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v20 = v5;
    uint64_t v17 = v16;
    v22[0] = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1B39B2E48(a1, a2, v22);
    sub_1B3A707C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B39A5000, v13, v14, "%{public}s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EC0090](v17, -1, -1);
    MEMORY[0x1B3EC0090](v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v20);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1B3A12B8C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t sub_1B3A12C40()
{
  sub_1B3A703A0();
  (*(void (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)v0 + 216))(0x3A676E696E726177, 0xE900000000000020, 1, 0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A12DB0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6ktrace8Reporter_creationDate;
  uint64_t v2 = sub_1B3A6FFD0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = v0 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  uint64_t v4 = sub_1B3A700D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_1B3A12EB4(uint64_t result)
{
  if ((result & 0xF8) != 0) {
    return 8;
  }
  else {
    return result;
  }
}

uint64_t sub_1B3A12EC8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1B3A12F00()
{
  return 0x6620676E69646968;
}

uint64_t type metadata accessor for Reporter()
{
  uint64_t result = qword_1E9CD64F0;
  if (!qword_1E9CD64F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1B3A12F70()
{
  unint64_t result = qword_1E9CD5AD8;
  if (!qword_1E9CD5AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5AD8);
  }
  return result;
}

unint64_t sub_1B3A12FC8()
{
  unint64_t result = qword_1E9CD5AE0;
  if (!qword_1E9CD5AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5AE0);
  }
  return result;
}

unint64_t sub_1B3A13020()
{
  unint64_t result = qword_1E9CD5B08;
  if (!qword_1E9CD5B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5B08);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ANSIColor(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ANSIColor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A131D4);
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ANSIColor()
{
  return &type metadata for ANSIColor;
}

ValueMetadata *type metadata accessor for ANSIAttributes()
{
  return &type metadata for ANSIAttributes;
}

unsigned char *storeEnumTagSinglePayload for ReporterError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B3A132B8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReporterError()
{
  return &type metadata for ReporterError;
}

uint64_t sub_1B3A132F0()
{
  return type metadata accessor for Reporter();
}

uint64_t sub_1B3A132F8()
{
  uint64_t result = sub_1B3A6FFD0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1B3A700D0();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_1B3A133F0(unint64_t a1, uint64_t a2, char a3)
{
  unint64_t result = 0xD00000000000002BLL;
  switch(a3)
  {
    case 6:
      return result;
    default:
      sub_1B3A709B0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1B3A703A0();
      unint64_t result = a1;
      break;
  }
  return result;
}

unint64_t sub_1B3A13608()
{
  return sub_1B3A133F0(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

char *sub_1B3A13614()
{
  return aUnsafe;
}

uint64_t sub_1B3A13620()
{
  return swift_retain();
}

uint64_t sub_1B3A13628(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1B3A13638(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1B3A13648(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  unsigned int v6 = *(void **)(v2 + 128);
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B3A16058(0, v6[2] + 1, 1, v6);
    unsigned int v6 = (void *)result;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B3A16058((void *)(v8 > 1), v9 + 1, 1, v6);
    unsigned int v6 = (void *)result;
  }
  int v6[2] = v9 + 1;
  id v10 = &v6[2 * v9];
  v10[4] = sub_1B3A13758;
  v10[5] = v5;
  *(void *)(v2 + 128) = v6;
  return result;
}

uint64_t sub_1B3A13720()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B3A13758(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_1B3A13788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(v9 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B3A15F44(0, *(void *)(v15 + 16) + 1, 1, (char *)v15);
    uint64_t v15 = result;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B3A15F44((char *)(v17 > 1), v18 + 1, 1, (char *)v15);
    uint64_t v15 = result;
  }
  *(void *)(v15 + 16) = v18 + 1;
  unint64_t v19 = v15 + 80 * v18;
  *(void *)(v19 + 32) = a1;
  *(void *)(v19 + 40) = a2;
  *(void *)(v19 + 48) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = a3;
  *(void *)(v19 + 72) = a4;
  *(unsigned char *)(v19 + 80) = a7 & 1;
  *(void *)(v19 + 88) = a8;
  *(void *)(v19 + 96) = a9;
  *(unsigned char *)(v19 + 104) = 1;
  *(void *)(v9 + 112) = v15;
  return result;
}

uint64_t sub_1B3A138AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(v9 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B3A15F44(0, *(void *)(v15 + 16) + 1, 1, (char *)v15);
    uint64_t v15 = result;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B3A15F44((char *)(v17 > 1), v18 + 1, 1, (char *)v15);
    uint64_t v15 = result;
  }
  *(void *)(v15 + 16) = v18 + 1;
  unint64_t v19 = v15 + 80 * v18;
  *(void *)(v19 + 32) = a1;
  *(void *)(v19 + 40) = a2;
  *(void *)(v19 + 48) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = a3;
  *(void *)(v19 + 72) = a4;
  *(unsigned char *)(v19 + 80) = a7 & 1;
  *(void *)(v19 + 88) = a8;
  *(void *)(v19 + 96) = a9;
  *(unsigned char *)(v19 + 104) = 0;
  *(void *)(v9 + 112) = v15;
  return result;
}

uint64_t sub_1B3A139CC(char a1)
{
  long long v74 = *v1;
  long long v72 = v74;
  sub_1B3A0EB50((uint64_t)&v74);
  sub_1B3A703A0();
  swift_bridgeObjectRetain();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  uint64_t v60 = *((void *)&v72 + 1);
  uint64_t v2 = v72;
  unint64_t v61 = v1;
  int v3 = (void (*)(uint64_t))*((void *)v1 + 2);
  if (v3)
  {
    uint64_t v4 = swift_retain();
    v3(v4);
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A13638((uint64_t)v3);
    swift_bridgeObjectRelease();
    uint64_t v60 = *((void *)&v72 + 1);
    uint64_t v2 = v72;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B3A73390;
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = v60;
  uint64_t v71 = v5;
  uint64_t v6 = *((void *)v1 + 14);
  uint64_t v73 = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v62 = v7;
  if (v7)
  {
    swift_bridgeObjectRetain();
    sub_1B3A0EAF8((uint64_t)&v73);
    unint64_t v8 = (unsigned char *)(v6 + 104);
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((*(v8 - 24) & 1) == 0)
      {
        uint64_t v13 = *((void *)v8 - 8);
        uint64_t v64 = *((void *)v8 - 7);
        uint64_t v65 = *((void *)v8 - 9);
        uint64_t v14 = *((void *)v8 - 4);
        uint64_t v15 = *((void *)v8 - 2);
        uint64_t v16 = *((void *)v8 - 1);
        char v17 = *v8;
        long long v67 = *((_OWORD *)v8 - 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B3A13620();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1B3A163BC(0, v9[2] + 1, 1);
        }
        unint64_t v11 = v9[2];
        unint64_t v10 = v9[3];
        if (v11 >= v10 >> 1) {
          sub_1B3A163BC((char *)(v10 > 1), v11 + 1, 1);
        }
        void v9[2] = v11 + 1;
        uint64_t v12 = &v9[10 * v11];
        v12[4] = v65;
        void v12[5] = v13;
        _OWORD v12[6] = v64;
        *(_OWORD *)(v12 + 7) = v67;
        void v12[9] = v14;
        *((unsigned char *)v12 + 80) = 0;
        v12[11] = v15;
        v12[12] = v16;
        *((unsigned char *)v12 + 104) = v17;
      }
      v8 += 80;
      --v7;
    }
    while (v7);
    sub_1B3A0EB24((uint64_t)&v73);
    int64_t v18 = v9[2];
    if (v18) {
      goto LABEL_13;
    }
LABEL_21:
    swift_release();
    uint64_t v19 = MEMORY[0x1E4FBC860];
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  int64_t v18 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (!v18) {
    goto LABEL_21;
  }
LABEL_13:
  uint64_t v69 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v18, 0);
  uint64_t v19 = v69;
  uint64_t v20 = v9 + 7;
  do
  {
    uint64_t v21 = *v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_1B3A13620();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    if (v21)
    {
      sub_1B3A703A0();
      sub_1B3A703A0();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B3A163DC();
    unint64_t v23 = *(void *)(v69 + 16);
    unint64_t v22 = *(void *)(v69 + 24);
    if (v23 >= v22 >> 1) {
      sub_1B3A052F4((char *)(v22 > 1), v23 + 1, 1);
    }
    *(void *)(v69 + 16) = v23 + 1;
    unint64_t v24 = v69 + 16 * v23;
    *(void *)(v24 + 32) = 11565;
    *(void *)(v24 + 40) = 0xE200000000000000;
    v20 += 10;
    --v18;
  }
  while (v18);
  swift_release();
LABEL_22:
  uint64_t v25 = sub_1B3A3D5BC(v19, 58, 0xE100000000000000);
  swift_bridgeObjectRelease();
  sub_1B3A14368(v25);
  uint64_t v26 = v62;
  if ((a1 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if (v62)
  {
    uint64_t v28 = (unsigned char *)(swift_bridgeObjectRetain() + 104);
    int64_t v29 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if (*(v28 - 24) == 1)
      {
        uint64_t v63 = v26;
        uint64_t v34 = *((void *)v28 - 9);
        uint64_t v33 = *((void *)v28 - 8);
        uint64_t v66 = *((void *)v28 - 7);
        uint64_t v35 = *((void *)v28 - 4);
        uint64_t v36 = *((void *)v28 - 2);
        uint64_t v37 = *((void *)v28 - 1);
        char v38 = *v28;
        long long v68 = *((_OWORD *)v28 - 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B3A13620();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1B3A163BC(0, v29[2] + 1, 1);
        }
        unint64_t v31 = v29[2];
        unint64_t v30 = v29[3];
        if (v31 >= v30 >> 1) {
          sub_1B3A163BC((char *)(v30 > 1), v31 + 1, 1);
        }
        v29[2] = v31 + 1;
        int64_t v32 = &v29[10 * v31];
        v32[4] = v34;
        _OWORD v32[5] = v33;
        v32[6] = v66;
        *(_OWORD *)(v32 + 7) = v68;
        v32[9] = v35;
        *((unsigned char *)v32 + 80) = 1;
        v32[11] = v36;
        v32[12] = v37;
        *((unsigned char *)v32 + 104) = v38;
        uint64_t v26 = v63;
      }
      v28 += 80;
      --v26;
    }
    while (v26);
    sub_1B3A0EB24((uint64_t)&v73);
    uint64_t v27 = MEMORY[0x1E4FBC860];
    int64_t v39 = v29[2];
    if (v39) {
      goto LABEL_34;
    }
  }
  else
  {
    int64_t v29 = (void *)MEMORY[0x1E4FBC860];
    int64_t v39 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v39)
    {
LABEL_34:
      uint64_t v70 = v27;
      sub_1B3A052F4(0, v39, 0);
      uint64_t v40 = v70;
      unint64_t v41 = v29 + 7;
      do
      {
        uint64_t v42 = *v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_1B3A13620();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        if (v42)
        {
          sub_1B3A703A0();
          sub_1B3A703A0();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        sub_1B3A703A0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B3A163DC();
        unint64_t v44 = *(void *)(v70 + 16);
        unint64_t v43 = *(void *)(v70 + 24);
        if (v44 >= v43 >> 1) {
          sub_1B3A052F4((char *)(v43 > 1), v44 + 1, 1);
        }
        *(void *)(v70 + 16) = v44 + 1;
        unint64_t v45 = v70 + 16 * v44;
        *(void *)(v45 + 32) = 11565;
        *(void *)(v45 + 40) = 0xE200000000000000;
        v41 += 10;
        --v39;
      }
      while (v39);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v40 = MEMORY[0x1E4FBC860];
LABEL_43:
  swift_bridgeObjectRetain();
  sub_1B3A703A0();
  swift_bridgeObjectRelease();
  uint64_t v46 = (char *)v71;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v46 = sub_1B3A1617C(0, *(void *)(v71 + 16) + 1, 1, (char *)v71);
  }
  unint64_t v48 = *((void *)v46 + 2);
  unint64_t v47 = *((void *)v46 + 3);
  if (v48 >= v47 >> 1) {
    uint64_t v46 = sub_1B3A1617C((char *)(v47 > 1), v48 + 1, 1, v46);
  }
  *((void *)v46 + 2) = v48 + 1;
  id v49 = &v46[16 * v48];
  *((void *)v49 + 4) = 0x202020200ALL;
  *((void *)v49 + 5) = 0xE500000000000000;
  uint64_t v71 = (uint64_t)v46;
  uint64_t v50 = sub_1B3A3D5BC(v40, 58, 0xE100000000000000);
  swift_bridgeObjectRelease();
  sub_1B3A14368(v50);
LABEL_48:
  uint64_t v51 = *((void *)v61 + 7);
  long long v52 = (char *)v71;
  if (v51)
  {
    uint64_t v53 = *((void *)v61 + 6);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v52 = sub_1B3A1617C(0, *(void *)(v71 + 16) + 1, 1, (char *)v71);
    }
    unint64_t v55 = *((void *)v52 + 2);
    unint64_t v54 = *((void *)v52 + 3);
    if (v55 >= v54 >> 1) {
      long long v52 = sub_1B3A1617C((char *)(v54 > 1), v55 + 1, 1, v52);
    }
    *((void *)v52 + 2) = v55 + 1;
    char v56 = &v52[16 * v55];
    *((void *)v56 + 4) = v53;
    *((void *)v56 + 5) = v51;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
  sub_1B3A0609C();
  uint64_t v57 = sub_1B3A70250();
  swift_bridgeObjectRelease();
  return v57;
}

uint64_t sub_1B3A14368(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_1B3A1617C((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B3A14454(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *v2;
  unint64_t v7 = *((void *)*v2 + 2);
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (unint64_t v9 = *((void *)v6 + 3) >> 1, v9 < v7))
  {
    uint64_t v6 = sub_1B3A1617C(isUniquelyReferenced_nonNull_native, v7, 1, v6);
    unint64_t v9 = *((void *)v6 + 3) >> 1;
  }
  uint64_t v10 = *((void *)v6 + 2);
  unint64_t v11 = (void *)(v9 - v10);
  unint64_t v12 = (unint64_t)sub_1B3A16744(&v33, &v6[16 * v10 + 32], v9 - v10, a1, a2);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v12)
    {
      uint64_t v13 = *((void *)v6 + 2);
      BOOL v14 = __OFADD__(v13, v12);
      uint64_t v15 = (char *)(v13 + v12);
      if (v14)
      {
        __break(1u);
        goto LABEL_28;
      }
      *((void *)v6 + 2) = v15;
    }
    if ((void *)v12 != v11)
    {
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v2 = v6;
      return result;
    }
  }
  uint64_t v17 = v33;
  unint64_t v18 = v34;
  if (v34 == *(void *)(v33 + 16)) {
    goto LABEL_9;
  }
  int64_t v19 = *((void *)v6 + 2);
  uint64_t v20 = sub_1B3A16654((uint64_t (*)())v32, v34, v33);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  swift_bridgeObjectRetain();
  ((void (*)(unsigned char *, void))v20)(v32, 0);
  BOOL v14 = __OFADD__(v18, 1);
  unint64_t v24 = v18 + 1;
  if (v14)
  {
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  while (1)
  {
    unint64_t v25 = *((void *)v6 + 3);
    int64_t v26 = v25 >> 1;
    int64_t v3 = v19 + 1;
    if ((uint64_t)(v25 >> 1) < v19 + 1) {
      break;
    }
    if (v19 < v26) {
      goto LABEL_18;
    }
LABEL_15:
    *((void *)v6 + 2) = v19;
  }
  uint64_t v6 = sub_1B3A1617C((char *)(v25 > 1), v19 + 1, 1, v6);
  int64_t v26 = *((void *)v6 + 3) >> 1;
  if (v19 >= v26) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v27 = &v6[16 * v19];
  *((void *)v27 + 4) = v23;
  *((void *)v27 + 5) = v22;
  if (v24 == *(void *)(v17 + 16))
  {
LABEL_28:
    *((void *)v6 + 2) = v3;
    goto LABEL_9;
  }
  uint64_t v28 = v27 + 56;
  while (1)
  {
    int64_t v29 = sub_1B3A16654((uint64_t (*)())v32, v24, v17);
    uint64_t v23 = *v30;
    uint64_t v22 = v30[1];
    swift_bridgeObjectRetain();
    uint64_t result = ((uint64_t (*)(unsigned char *, void))v29)(v32, 0);
    unint64_t v31 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v26 == v3)
    {
      ++v24;
      int64_t v19 = v26;
      *((void *)v6 + 2) = v26;
      goto LABEL_16;
    }
    *(v28 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v23;
    *uint64_t v28 = v22;
    ++v3;
    ++v24;
    v28 += 2;
    if (v31 == *(void *)(v17 + 16)) {
      goto LABEL_28;
    }
  }
  __break(1u);
  return result;
}

void *sub_1B3A14684(void *result)
{
  uint64_t v2 = result[2];
  int64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = sub_1B3A16280(result, v10, 1, v3);
  int64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B30);
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = v3[2];
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    int v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

unint64_t sub_1B3A14784(uint64_t a1)
{
  uint64_t v3 = v2;
  int64_t v4 = (void *)MEMORY[0x1E4FBC860];
  v212 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v213 = MEMORY[0x1E4FBC860];
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v184 = 0;
    uint64_t v185 = 0;
    LOBYTE(v8) = -1;
    uint64_t v180 = (uint64_t)v4;
    v167 = (char *)v4;
    goto LABEL_81;
  }
  uint64_t v186 = *(void *)(v1 + 112);
  uint64_t v174 = a1 + 32;
  unint64_t result = swift_bridgeObjectRetain();
  uint64_t v184 = 0;
  uint64_t v185 = 0;
  unint64_t v7 = 0;
  int v8 = 255;
  v167 = (char *)v4;
  uint64_t v180 = (uint64_t)v4;
  unint64_t v173 = v5;
  while (1)
  {
    if (v7 >= v5)
    {
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      return result;
    }
    int v187 = v8;
    uint64_t v9 = (uint64_t *)(v174 + 16 * v7);
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    unint64_t v181 = v7 + 1;
    BOOL v12 = *v9 == 11565 && v11 == 0xE200000000000000;
    if (v12 || (sub_1B3A70D20() & 1) != 0)
    {
      uint64_t v115 = swift_bridgeObjectRetain();
      sub_1B3A14454(v115, v181);
      LOBYTE(v8) = v187;
      goto LABEL_81;
    }
    swift_bridgeObjectRetain();
    if ((sub_1B3A70440() & 1) == 0)
    {
      if ((sub_1B3A70440() & 1) == 0)
      {
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (unint64_t)sub_1B3A1617C(0, *(void *)(v180 + 16) + 1, 1, (char *)v180);
          uint64_t v180 = result;
        }
        unint64_t v32 = *(void *)(v180 + 16);
        unint64_t v31 = *(void *)(v180 + 24);
        int v8 = v187;
        if (v32 >= v31 >> 1)
        {
          unint64_t result = (unint64_t)sub_1B3A1617C((char *)(v31 > 1), v32 + 1, 1, (char *)v180);
          uint64_t v180 = result;
          int v8 = v187;
        }
        *(void *)(v180 + 16) = v32 + 1;
        uint64_t v33 = v180 + 16 * v32;
        *(void *)(v33 + 32) = v10;
        *(void *)(v33 + 40) = v11;
        goto LABEL_5;
      }
      swift_bridgeObjectRetain();
      unint64_t v27 = sub_1B3A16D5C(1uLL, v10, v11);
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      unint64_t v192 = v29 >> 14;
      if (v29 >> 14 == v27 >> 14)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = 0;
        uint64_t v183 = 0;
        v191 = (char *)MEMORY[0x1E4FBC860];
        goto LABEL_59;
      }
      uint64_t v175 = v10;
      v177 = v4;
      unint64_t v169 = v7;
      unint64_t v171 = v11;
      v191 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v61 = sub_1B3A70780();
        uint64_t v63 = v62;
        swift_bridgeObjectRetain();
        unint64_t v64 = sub_1B3A70760();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v65 = v3;
        uint64_t v66 = sub_1B3A16AA0(v186, v61, v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v66 + 16))
        {
          uint64_t v67 = *(void *)(v66 + 40);
          uint64_t v68 = *(void *)(v66 + 56);
          uint64_t v205 = *(void *)(v66 + 48);
          uint64_t v207 = *(void *)(v66 + 32);
          uint64_t v69 = *(void *)(v66 + 72);
          uint64_t v202 = *(void *)(v66 + 64);
          char v199 = *(unsigned char *)(v66 + 80);
          uint64_t v71 = *(void *)(v66 + 88);
          uint64_t v70 = *(void *)(v66 + 96);
          char v72 = *(unsigned char *)(v66 + 104);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B3A13620();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B3A13620();
          uint64_t v73 = v191;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v73 = sub_1B3A15F44(0, *((void *)v191 + 2) + 1, 1, v191);
          }
          unint64_t v75 = *((void *)v73 + 2);
          unint64_t v74 = *((void *)v73 + 3);
          uint64_t v76 = v73;
          if (v75 >= v74 >> 1) {
            uint64_t v76 = sub_1B3A15F44((char *)(v74 > 1), v75 + 1, 1, v73);
          }
          *((void *)v76 + 2) = v75 + 1;
          uint64_t v60 = v76;
          uint64_t v77 = &v76[80 * v75];
          *((void *)v77 + 4) = v207;
          *((void *)v77 + 5) = v67;
          *((void *)v77 + 6) = v205;
          *((void *)v77 + 7) = v68;
          *((void *)v77 + 8) = v202;
          *((void *)v77 + 9) = v69;
          v77[80] = v199;
          *((void *)v77 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = v71;
          *((void *)v77 + 12) = v70;
          v77[104] = v72;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B3A163DC();
          uint64_t v3 = v65;
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_1B3A166C4(v184, v185, v187);
          int v187 = 1;
          uint64_t v184 = v61;
          uint64_t v185 = v63;
          uint64_t v60 = v191;
        }
        v191 = v60;
      }
      while (v192 != v64 >> 14);
      swift_bridgeObjectRelease();
      uint64_t v30 = 0;
      uint64_t v183 = 0;
      goto LABEL_53;
    }
    unint64_t v169 = v7;
    v177 = v4;
    uint64_t v13 = v3;
    unint64_t v14 = sub_1B3A15E10(61, 0xE100000000000000, v10, v11);
    char v16 = v15;
    swift_bridgeObjectRetain();
    uint64_t v175 = v10;
    unint64_t v17 = sub_1B3A16D5C(2uLL, v10, v11);
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v24 = v14;
    if (v16)
    {
      uint64_t v25 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0) {
        uint64_t v25 = v175;
      }
      uint64_t v26 = v25 << 16;
      if ((v11 & 0x1000000000000000) == 0 || (v175 & 0x800000000000000) != 0) {
        unint64_t v24 = v26 | 7;
      }
      else {
        unint64_t v24 = v26 | 0xB;
      }
    }
    if (v24 >> 14 < v17 >> 14) {
      goto LABEL_165;
    }
    char v206 = v16;
    unint64_t v194 = v14;
    unint64_t v171 = v11;
    unint64_t v34 = sub_1B3A707A0();
    unint64_t v36 = v35;
    uint64_t v38 = v37;
    unint64_t v40 = v39;
    uint64_t v41 = swift_bridgeObjectRetain();
    uint64_t v42 = sub_1B3A16888(v41, v34, v36, v38, v40);
    uint64_t v189 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(void *)(v42 + 16))
    {
      swift_bridgeObjectRelease();
      if (v161[10])
      {
        swift_bridgeObjectRelease();
        uint64_t v54 = MEMORY[0x1B3EBD660](v17, v19, v21, v23);
        uint64_t v56 = v55;
        swift_bridgeObjectRelease();
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (unint64_t)sub_1B3A1617C(0, *((void *)v167 + 2) + 1, 1, v167);
          v167 = (char *)result;
        }
        uint64_t v3 = v13;
        unint64_t v58 = *((void *)v167 + 2);
        unint64_t v57 = *((void *)v167 + 3);
        int v8 = v187;
        if (v58 >= v57 >> 1)
        {
          unint64_t result = (unint64_t)sub_1B3A1617C((char *)(v57 > 1), v58 + 1, 1, v167);
          v167 = (char *)result;
          int v8 = v187;
        }
        *((void *)v167 + 2) = v58 + 1;
        unint64_t v59 = &v167[16 * v58];
        *((void *)v59 + 4) = v54;
        *((void *)v59 + 5) = v56;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t result = sub_1B3A166C4(v184, v185, v187);
        int v8 = 0;
        uint64_t v184 = v175;
        uint64_t v185 = v171;
        uint64_t v3 = v13;
      }
      int64_t v4 = v177;
      goto LABEL_5;
    }
    uint64_t v43 = *(void *)(v42 + 40);
    uint64_t v44 = *(void *)(v42 + 56);
    uint64_t v198 = *(void *)(v42 + 48);
    uint64_t v202 = *(void *)(v42 + 32);
    uint64_t v46 = *(void *)(v42 + 64);
    uint64_t v45 = *(void *)(v42 + 72);
    char v196 = *(unsigned char *)(v42 + 80);
    uint64_t v48 = *(void *)(v42 + 88);
    uint64_t v47 = *(void *)(v42 + 96);
    char v49 = *(unsigned char *)(v42 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B3A13620();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v205 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B3A13620();
    uint64_t v50 = sub_1B3A15F44(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v52 = *((void *)v50 + 2);
    unint64_t v51 = *((void *)v50 + 3);
    if (v52 >= v51 >> 1) {
      uint64_t v50 = sub_1B3A15F44((char *)(v51 > 1), v52 + 1, 1, v50);
    }
    *((void *)v50 + 2) = v52 + 1;
    uint64_t v53 = &v50[80 * v52];
    *((void *)v53 + 4) = v202;
    *((void *)v53 + 5) = v43;
    *((void *)v53 + 6) = v198;
    *((void *)v53 + 7) = v44;
    *((void *)v53 + 8) = v46;
    *((void *)v53 + 9) = v45;
    v53[80] = v196;
    *((void *)v53 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = v48;
    *((void *)v53 + 12) = v47;
    v53[104] = v49;
    v191 = v50;
    if (v206)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3A163DC();
      uint64_t v30 = 0;
      uint64_t v183 = 0;
      uint64_t v3 = v189;
LABEL_53:
      uint64_t v10 = v175;
      int64_t v4 = v177;
      unint64_t v11 = v171;
      unint64_t v5 = v173;
      unint64_t v7 = v169;
      goto LABEL_59;
    }
    unint64_t v11 = v171;
    uint64_t v10 = v175;
    if (v49)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3A163DC();
      uint64_t v30 = 0;
      uint64_t v183 = 0;
      uint64_t v3 = v189;
      int64_t v4 = v177;
      unint64_t v5 = v173;
      unint64_t v7 = v169;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1B3A16E0C(v194, v175, v171);
      unint64_t v79 = v78;
      swift_bridgeObjectRelease();
      unint64_t result = sub_1B3A70770();
      if (v80) {
        unint64_t result = v79;
      }
      if (v79 >> 14 < result >> 14) {
        goto LABEL_167;
      }
      uint64_t v81 = sub_1B3A707A0();
      uint64_t v83 = v82;
      uint64_t v85 = v84;
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      uint64_t v88 = MEMORY[0x1B3EBD660](v81, v83, v85, v87);
      uint64_t v90 = v89;
      swift_bridgeObjectRelease();
      uint64_t v91 = v88;
      uint64_t v183 = v90;
      if (!sub_1B3A70370()) {
        goto LABEL_155;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3A163DC();
      uint64_t v3 = v189;
      uint64_t v10 = v175;
      int64_t v4 = v177;
      unint64_t v5 = v173;
      unint64_t v7 = v169;
      uint64_t v30 = v91;
    }
LABEL_59:
    uint64_t v92 = *((void *)v191 + 2);
    if (!v92)
    {
      sub_1B3A166C4(v184, v185, v187);
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      int v8 = 3;
      uint64_t v184 = v10;
      uint64_t v185 = v11;
      goto LABEL_6;
    }
    uint64_t v168 = v30;
    uint64_t v93 = &v191[80 * v92];
    uint64_t v94 = *((void *)v93 - 5);
    uint64_t v165 = *((void *)v93 - 4);
    uint64_t v166 = *((void *)v93 - 6);
    uint64_t v95 = *((void *)v93 - 1);
    uint64_t v164 = *((void *)v93 - 2);
    char v163 = *v93;
    uint64_t v96 = *((void *)v93 + 1);
    uint64_t v97 = *((void *)v93 + 2);
    char v98 = v93[24];
    uint64_t v176 = *((void *)v93 - 3);
    swift_bridgeObjectRetain();
    uint64_t v172 = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v182 = v96;
    uint64_t v178 = v97;
    sub_1B3A13620();
    unint64_t result = swift_bridgeObjectRelease();
    char v170 = v98;
    if ((v98 & 1) == 0 && !v183) {
      break;
    }
LABEL_65:
    uint64_t v162 = v94;
    uint64_t v190 = v3;
    unint64_t v99 = *((void *)v191 + 2);
    int64_t v100 = v99 - 1;
    if (v99 <= 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v101 = (void *)MEMORY[0x1E4FBC860];
      goto LABEL_74;
    }
    v211 = (void *)MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1B3A163E4(0, v100, 0);
    uint64_t v101 = v211;
    uint64_t v102 = v191 + 56;
    do
    {
      if (!v100)
      {
        __break(1u);
LABEL_155:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B3A166C4(v184, v185, v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B3A166F0();
        swift_allocError();
        *(void *)uint64_t v158 = v202;
        *(void *)(v158 + 8) = v205;
        *(unsigned char *)(v158 + 16) = 2;
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_157:
        sub_1B3A163DC();
        return swift_bridgeObjectRelease();
      }
      uint64_t v103 = *((void *)v102 - 2);
      uint64_t v197 = *((void *)v102 - 1);
      uint64_t v200 = *((void *)v102 - 3);
      uint64_t v104 = *((void *)v102 + 2);
      uint64_t v195 = *((void *)v102 + 1);
      char v193 = v102[24];
      uint64_t v105 = *((void *)v102 + 4);
      uint64_t v106 = *((void *)v102 + 5);
      char v107 = v102[48];
      uint64_t v208 = *(void *)v102;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v202 = v106;
      uint64_t v205 = v105;
      sub_1B3A13620();
      v211 = v101;
      unint64_t v109 = v101[2];
      unint64_t v108 = v101[3];
      if (v109 >= v108 >> 1)
      {
        sub_1B3A163E4((void *)(v108 > 1), v109 + 1, 1);
        uint64_t v101 = v211;
      }
      v101[2] = v109 + 1;
      uint64_t v110 = &v101[12 * v109];
      uint64_t v110[4] = v200;
      v110[5] = v103;
      v110[6] = v197;
      v110[7] = v208;
      v110[8] = v195;
      v110[9] = v104;
      *((unsigned char *)v110 + 80) = v193;
      v110[11] = v105;
      v110[12] = v106;
      *((unsigned char *)v110 + 104) = v107;
      v102 += 80;
      v110[14] = 0;
      v110[15] = 0;
      --v100;
    }
    while (v100);
    swift_bridgeObjectRelease_n();
LABEL_74:
    sub_1B3A14684(v101);
    int64_t v4 = v212;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B3A13620();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v4 = sub_1B3A16280(0, v212[2] + 1, 1, v212);
    }
    uint64_t v3 = v190;
    unint64_t v112 = v4[2];
    unint64_t v111 = v4[3];
    uint64_t v113 = v168;
    if (v112 >= v111 >> 1)
    {
      int64_t v4 = sub_1B3A16280((void *)(v111 > 1), v112 + 1, 1, v4);
      uint64_t v113 = v168;
    }
    int v4[2] = v112 + 1;
    uint64_t v114 = &v4[12 * v112];
    void v114[4] = v166;
    v114[5] = v162;
    v114[6] = v165;
    v114[7] = v176;
    v114[8] = v164;
    v114[9] = v172;
    *((unsigned char *)v114 + 80) = v163;
    v114[11] = v182;
    v114[12] = v178;
    *((unsigned char *)v114 + 104) = v170;
    v114[14] = v113;
    v114[15] = v183;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = sub_1B3A163DC();
    v212 = v4;
    int v8 = v187;
LABEL_5:
    unint64_t v5 = v173;
LABEL_6:
    unint64_t v7 = v181;
    if (v181 == v5) {
      goto LABEL_81;
    }
  }
  if (v181 != v5)
  {
    if (v181 >= v5) {
      goto LABEL_166;
    }
    uint64_t v168 = *(void *)(v174 + 16 * v181);
    uint64_t v183 = *(void *)(v174 + 16 * v181 + 8);
    swift_bridgeObjectRetain();
    unint64_t v181 = v7 + 2;
    goto LABEL_65;
  }
  sub_1B3A166C4(v184, v185, v187);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B3A163DC();
  LOBYTE(v8) = 2;
  uint64_t v184 = v166;
  uint64_t v185 = v94;
LABEL_81:
  unsigned __int8 v188 = v8;
  uint64_t v116 = v4[2];
  if (v116)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v117 = v4 + 5;
    while (1)
    {
      BOOL v118 = *(v117 - 1) == *(void *)aUnsafe && *v117 == unk_1E9CD5B18;
      if (v118 || (sub_1B3A70D20() & 1) != 0) {
        break;
      }
      v117 += 12;
      if (!--v116)
      {
        int v209 = 0;
        goto LABEL_91;
      }
    }
    int v209 = 1;
LABEL_91:
    swift_bridgeObjectRelease();
  }
  else
  {
    int v209 = 0;
  }
  uint64_t v119 = v3;
  uint64_t v120 = v161[16];
  uint64_t v214 = v120;
  uint64_t v121 = *(void *)(v120 + 16);
  if (v121)
  {
    v179 = v4;
    unint64_t v122 = *(void *)(v180 + 16);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B3A0EAF8((uint64_t)&v214);
    unint64_t v123 = 0;
    uint64_t v124 = v120 + 40;
    while (1)
    {
      long long v125 = *(void (**)(void *))(v124 - 8);
      if (v123 == v122)
      {
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        unint64_t v123 = v122;
      }
      else
      {
        if (v123 >= *(void *)(v180 + 16)) {
          goto LABEL_164;
        }
        unint64_t v128 = v123++;
        v129 = (uint64_t *)(v180 + 32 + 16 * v128);
        uint64_t v126 = *v129;
        uint64_t v127 = v129[1];
        swift_bridgeObjectRetain();
      }
      v210[0] = v126;
      v210[1] = v127;
      swift_retain();
      v125(v210);
      if (v3) {
        break;
      }
      swift_release();
      unint64_t result = swift_bridgeObjectRelease();
      v124 += 16;
      if (!--v121)
      {
        sub_1B3A0EB24((uint64_t)&v214);
        int64_t v4 = v179;
        uint64_t v130 = v179[2];
        if (!v130) {
          goto LABEL_102;
        }
LABEL_104:
        v132 = v4 + 5;
        uint64_t v133 = v130;
        do
        {
          BOOL v134 = *(v132 - 1) == 1886152040 && *v132 == 0xE400000000000000;
          if (v134 || (sub_1B3A70D20() & 1) != 0)
          {
            sub_1B3A166C4(v184, v185, v188);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v135 = (void (*)(uint64_t))v161[12];
            if (v135)
            {
              swift_retain();
              uint64_t v136 = sub_1B3A139CC(v209);
              v135(v136);
              swift_bridgeObjectRelease();
              sub_1B3A13638((uint64_t)v135);
            }
            goto LABEL_119;
          }
          v132 += 12;
          --v133;
        }
        while (v133);
        if (v130 == 1)
        {
          swift_bridgeObjectRetain();
          swift_beginAccess();
          v131 = v167;
          if (v4[4] == *(void *)aUnsafe && v4[5] == unk_1E9CD5B18)
          {
            swift_bridgeObjectRelease();
LABEL_147:
            sub_1B3A166C4(v184, v185, v188);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            v155 = (void (*)(uint64_t))v161[12];
            if (v155)
            {
              swift_retain();
              uint64_t v156 = sub_1B3A139CC(1);
              v155(v156);
              swift_bridgeObjectRelease();
              sub_1B3A13638((uint64_t)v155);
            }
LABEL_119:
            swift_bridgeObjectRelease();
            return 0;
          }
          char v154 = sub_1B3A70D20();
          swift_bridgeObjectRelease();
          if (v154) {
            goto LABEL_147;
          }
        }
        else
        {
          v131 = v167;
        }
        goto LABEL_121;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B3A166C4(v184, v185, v188);
    sub_1B3A0EB24((uint64_t)&v214);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_116:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  unint64_t v123 = 0;
  uint64_t v130 = v4[2];
  if (v130) {
    goto LABEL_104;
  }
LABEL_102:
  v131 = v167;
LABEL_121:
  if (v188 != 0xFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_1B3A166F0();
    swift_allocError();
    *(void *)uint64_t v137 = v184;
    *(void *)(v137 + 8) = v185;
    *(unsigned char *)(v137 + 16) = v188;
    goto LABEL_123;
  }
  uint64_t v138 = v119;
  uint64_t v139 = *((void *)v131 + 2);
  if (!v139) {
    goto LABEL_131;
  }
  unint64_t v203 = v123;
  v140 = v4;
  uint64_t v141 = (void (*)(uint64_t, uint64_t))v161[10];
  swift_bridgeObjectRetain();
  v142 = (uint64_t *)(v131 + 40);
  do
  {
    uint64_t v144 = *(v142 - 1);
    uint64_t v143 = *v142;
    swift_bridgeObjectRetain();
    if (!v141)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_1B3A166F0();
      swift_allocError();
      *(void *)uint64_t v157 = v144;
      *(void *)(v157 + 8) = v143;
      *(unsigned char *)(v157 + 16) = 0;
      goto LABEL_123;
    }
    sub_1B3A13628((uint64_t)v141);
    v141(v144, v143);
    if (v138)
    {
      sub_1B3A13638((uint64_t)v141);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_116;
    }
    uint64_t v138 = 0;
    v142 += 2;
    sub_1B3A13638((uint64_t)v141);
    swift_bridgeObjectRelease();
    --v139;
  }
  while (v139);
  swift_bridgeObjectRelease();
  int64_t v4 = v140;
  unint64_t v123 = v203;
LABEL_131:
  uint64_t v145 = v4[2];
  if (v209)
  {
    if (v145)
    {
      v146 = v4 + 10;
      uint64_t v147 = v4[2];
      while ((*v146 & 1) == 0)
      {
        v146 += 96;
        if (!--v147) {
          goto LABEL_136;
        }
      }
      goto LABEL_137;
    }
LABEL_136:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B3A166F0();
    swift_allocError();
    *(void *)uint64_t v148 = 0;
    *(void *)(v148 + 8) = 0;
    *(unsigned char *)(v148 + 16) = 6;
LABEL_123:
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
LABEL_137:
  if (!v145)
  {
    swift_bridgeObjectRelease();
LABEL_159:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B3A14454(v180, v123);
    swift_bridgeObjectRelease();
    return v213;
  }
  swift_bridgeObjectRetain();
  v149 = v4 + 9;
  unint64_t v204 = v123;
  while (2)
  {
    uint64_t v151 = *(v149 - 4);
    unint64_t result = *(v149 - 2);
    v152 = (void (*)(uint64_t))v149[2];
    if (!(v209 & 1 | ((v149[1] & 1) == 0)))
    {
      uint64_t v159 = *(v149 - 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B3A13620();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3A166F0();
      swift_allocError();
      *(void *)uint64_t v160 = v159;
      *(void *)(v160 + 8) = v151;
      *(unsigned char *)(v160 + 16) = 5;
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_157;
    }
    uint64_t v153 = v149[6];
    if (v149[4])
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B3A13620();
      swift_bridgeObjectRetain();
      sub_1B3A13620();
      uint64_t v150 = swift_bridgeObjectRelease();
      v152(v150);
      if (v138)
      {
        sub_1B3A163DC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_162;
      }
      goto LABEL_140;
    }
    if (!v153) {
      goto LABEL_168;
    }
    uint64_t v201 = v149[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B3A13620();
    swift_bridgeObjectRetain();
    sub_1B3A13620();
    ((void (*)(uint64_t, uint64_t))v152)(v201, v153);
    if (!v138)
    {
      swift_bridgeObjectRelease();
LABEL_140:
      v149 += 12;
      sub_1B3A163DC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3A163DC();
      --v145;
      unint64_t v123 = v204;
      if (!v145)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_159;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  sub_1B3A163DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_162:
  sub_1B3A163DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1B3A15E10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (sub_1B3A70480() != a1 || v9 != a2)
  {
    char v10 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = sub_1B3A70380();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_1B3A15F00()
{
  return &unk_1F0C39A48;
}

uint64_t sub_1B3A15F0C()
{
  return MEMORY[0x1E4FBC860];
}

__n128 sub_1B3A15F18@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, long long a11, long long a12, __n128 a13, uint64_t a14)
{
  __n128 result = a13;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(__n128 *)(a9 + 112) = a13;
  *(void *)(a9 + 128) = a14;
  return result;
}

char *sub_1B3A15F44(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B38);
    char v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    char v10 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B3A16058(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B40);
    char v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    _OWORD v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    char v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B48);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A1617C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    char v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B3A16280(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B28);
    char v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    char v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[12 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 96 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B30);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A163BC(char *a1, int64_t a2, char a3)
{
  __n128 result = sub_1B3A16404(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1B3A163DC()
{
  return swift_release();
}

void *sub_1B3A163E4(void *a1, int64_t a2, char a3)
{
  __n128 result = sub_1B3A16518(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B3A16404(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B38);
    char v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    char v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_1B3A16518(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B28);
    char v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    char v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[12 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 96 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B30);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t (*sub_1B3A16654(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a3 + 16 * a2;
    uint64_t v5 = *(void *)(v4 + 40);
    *(void *)uint64_t v3 = *(void *)(v4 + 32);
    *((void *)v3 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v5;
    swift_bridgeObjectRetain();
    return destroy for NotificationWaiter;
  }
  __break(1u);
  return result;
}

uint64_t destroy for NotificationWaiter()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A166C4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_1B3A166D8(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_1B3A166D8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1B3A166F0()
{
  unint64_t result = qword_1E9CD5B20;
  if (!qword_1E9CD5B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5B20);
  }
  return result;
}

void *sub_1B3A16744(void *result, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v7 = result;
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_22:
    *int64_t v7 = a4;
    v7[1] = a5;
    return (void *)v8;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = *(void *)(a4 + 16);
    if (v9 == a5)
    {
LABEL_5:
      uint64_t v8 = 0;
      goto LABEL_22;
    }
    if (v9 > a5)
    {
      uint64_t v11 = a4 + 16 * a5;
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = *(void *)(v11 + 40);
      unint64_t v14 = a5 + 1;
      *a2 = v12;
      a2[1] = v13;
      if (a3 == 1)
      {
        unint64_t v9 = a5 + 1;
      }
      else if (v14 == v9)
      {
        uint64_t v8 = 1;
      }
      else
      {
        uint64_t v21 = v9 - a5;
        if (v14 >= *(void *)(a4 + 16))
        {
LABEL_17:
          __break(1u);
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = a3 - 2;
          unint64_t v5 = a5 + 2;
          uint64_t v22 = a4 + 16 * a5;
          while (1)
          {
            unint64_t v17 = &a2[v15];
            uint64_t v18 = *(void *)(v22 + v15 * 8 + 56);
            _OWORD v17[2] = *(void *)(v22 + v15 * 8 + 48);
            v17[3] = v18;
            if (!v16) {
              break;
            }
            if (v9 == v5)
            {
              uint64_t v8 = v21;
              goto LABEL_20;
            }
            unint64_t v19 = *(void *)(a4 + 16);
            swift_bridgeObjectRetain();
            --v16;
            v15 += 2;
            if (v5++ >= v19) {
              goto LABEL_17;
            }
          }
        }
        unint64_t v9 = v5;
LABEL_20:
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      a5 = v9;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3A16888(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = 0;
  unint64_t v6 = *(void *)(result + 16);
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = a2 >> 16;
  uint64_t v7 = result + 104;
  uint64_t v27 = result + 104;
  uint64_t v28 = MEMORY[0x1E4FBC860];
  unint64_t v35 = v6;
LABEL_2:
  if (v5 <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v5;
  }
  unint64_t v36 = v8 + 1;
  unint64_t v9 = (unsigned char *)(v7 + 80 * v5);
  while (1)
  {
    if (v6 == v5) {
      return v28;
    }
    uint64_t v10 = v5++;
    if (v36 == v5) {
      break;
    }
    uint64_t v12 = *((void *)v9 - 9);
    unint64_t v11 = *((void *)v9 - 8);
    uint64_t v34 = *((void *)v9 - 7);
    long long v38 = *((_OWORD *)v9 - 3);
    uint64_t v13 = *((void *)v9 - 4);
    char v33 = *(v9 - 24);
    uint64_t v14 = *((void *)v9 - 2);
    uint64_t v15 = *((void *)v9 - 1);
    char v16 = *v9;
    if ((v11 & 0x2000000000000000) != 0) {
      uint64_t v17 = HIBYTE(v11) & 0xF;
    }
    else {
      uint64_t v17 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (v12 == a4 && v11 == a5 && v30 == 0 && v17 == v29)
    {
      uint64_t v12 = a4;
      unint64_t v11 = a5;
LABEL_24:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B3A13620();
      uint64_t v21 = v28;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = (uint64_t)sub_1B3A163BC(0, *(void *)(v28 + 16) + 1, 1);
        uint64_t v21 = v28;
      }
      unint64_t v23 = *(void *)(v21 + 16);
      unint64_t v22 = *(void *)(v21 + 24);
      unint64_t v24 = v23 + 1;
      unint64_t v6 = v35;
      if (v23 >= v22 >> 1)
      {
        unint64_t v26 = v23 + 1;
        unint64_t v37 = *(void *)(v21 + 16);
        unint64_t result = (uint64_t)sub_1B3A163BC((char *)(v22 > 1), v23 + 1, 1);
        unint64_t v24 = v26;
        unint64_t v6 = v35;
        unint64_t v23 = v37;
        uint64_t v21 = v28;
      }
      unint64_t v5 = v10 + 1;
      *(void *)(v21 + 16) = v24;
      uint64_t v28 = v21;
      uint64_t v25 = v21 + 80 * v23;
      *(void *)(v25 + 32) = v12;
      *(void *)(v25 + 40) = v11;
      *(void *)(v25 + 48) = v34;
      *(_OWORD *)(v25 + 56) = v38;
      *(void *)(v25 + 72) = v13;
      *(unsigned char *)(v25 + 80) = v33;
      *(void *)(v25 + 88) = v14;
      *(void *)(v25 + 96) = v15;
      *(unsigned char *)(v25 + 104) = v16;
      uint64_t v7 = v27;
      goto LABEL_2;
    }
    v9 += 80;
    unint64_t result = sub_1B3A70CF0();
    unint64_t v6 = v35;
    if (result) {
      goto LABEL_24;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3A16AA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = a2;
  unint64_t v6 = 0;
  uint64_t v7 = result + 104;
  unint64_t v30 = v3 - 1;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v35 = a3;
  unint64_t v33 = *(void *)(result + 16);
  uint64_t v31 = result + 104;
  do
  {
    uint64_t v32 = v8;
    if (v6 <= v3) {
      unint64_t v9 = v3;
    }
    else {
      unint64_t v9 = v6;
    }
    unint64_t v40 = v9;
    uint64_t v10 = (unsigned char *)(v7 + 80 * v6);
    unint64_t v11 = v6;
    while (1)
    {
      if (v40 == v11)
      {
        __break(1u);
        return result;
      }
      unint64_t v41 = v11;
      uint64_t v12 = *((void *)v10 - 8);
      long long v13 = *((_OWORD *)v10 - 3);
      uint64_t v14 = *((void *)v10 - 4);
      char v36 = *(v10 - 24);
      uint64_t v16 = *((void *)v10 - 2);
      uint64_t v15 = *((void *)v10 - 1);
      char v17 = *v10;
      long long v39 = v13;
      uint64_t v37 = *((void *)v10 - 7);
      uint64_t v38 = *((void *)v10 - 9);
      uint64_t v18 = (void)v13 ? *((void *)v10 - 7) : 0;
      uint64_t v19 = (void)v13 ? *((void *)v10 - 6) : 0xE000000000000000;
      if (v18 == v5 && v19 == a3) {
        break;
      }
      char v21 = sub_1B3A70D20();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B3A13620();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_22;
      }
      unint64_t v11 = v41 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t result = sub_1B3A163DC();
      v10 += 80;
      uint64_t v5 = a2;
      a3 = v35;
      if (v33 == v41 + 1) {
        return v32;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B3A13620();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_22:
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = v32;
    if ((result & 1) == 0)
    {
      unint64_t result = (uint64_t)sub_1B3A163BC(0, *(void *)(v32 + 16) + 1, 1);
      uint64_t v8 = v32;
    }
    char v22 = v17;
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    uint64_t v25 = v14;
    unint64_t v26 = v41;
    unint64_t v28 = *(void *)(v8 + 16);
    unint64_t v27 = *(void *)(v8 + 24);
    if (v28 >= v27 >> 1)
    {
      unint64_t result = (uint64_t)sub_1B3A163BC((char *)(v27 > 1), v28 + 1, 1);
      unint64_t v26 = v41;
      uint64_t v25 = v14;
      uint64_t v24 = v16;
      uint64_t v23 = v15;
      char v22 = v17;
      uint64_t v8 = v32;
    }
    unint64_t v6 = v26 + 1;
    *(void *)(v8 + 16) = v28 + 1;
    uint64_t v29 = v8 + 80 * v28;
    *(void *)(v29 + 32) = v38;
    *(void *)(v29 + 40) = v12;
    *(void *)(v29 + 48) = v37;
    *(_OWORD *)(v29 + 56) = v39;
    *(void *)(v29 + 72) = v25;
    *(unsigned char *)(v29 + 80) = v36;
    *(void *)(v29 + 88) = v24;
    *(void *)(v29 + 96) = v23;
    *(unsigned char *)(v29 + 104) = v22;
    uint64_t v7 = v31;
    uint64_t v5 = a2;
    a3 = v35;
    unint64_t v3 = v33;
  }
  while (v30 != v26);
  return v8;
}

unint64_t sub_1B3A16D5C(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  unint64_t result = sub_1B3A70390();
  if (v6) {
    unint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return sub_1B3A704A0();
}

unint64_t sub_1B3A16E0C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_1B3A704A0();
  }
  __break(1u);
  return result;
}

uint64_t destroy for OptionParser(void *a1)
{
  swift_bridgeObjectRelease();
  if (a1[2]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[10]) {
    swift_release();
  }
  if (a1[12]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for OptionParser(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  char v6 = a2 + 2;
  uint64_t v5 = a2[2];
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v7 = a2[3];
    a1[2] = v5;
    a1[3] = v7;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *v6;
  }
  uint64_t v8 = a2[10];
  uint64_t v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  uint64_t v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  uint64_t v11 = a2[9];
  a1[8] = a2[8];
  a1[9] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v12 = a2[11];
    a1[10] = v8;
    a1[11] = v12;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  }
  uint64_t v13 = a2[12];
  if (v13)
  {
    uint64_t v14 = a2[13];
    a1[12] = v13;
    a1[13] = v14;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  }
  uint64_t v15 = a2[15];
  a1[14] = a2[14];
  a1[15] = v15;
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OptionParser(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      uint64_t v5 = a2[3];
      a1[2] = v4;
      a1[3] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[3];
    a1[2] = v4;
    a1[3] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *((_OWORD *)a1 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *((_OWORD *)a2 + 1);
LABEL_8:
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[10];
  if (a1[10])
  {
    if (v7)
    {
      uint64_t v8 = a2[11];
      a1[10] = v7;
      a1[11] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[11];
    a1[10] = v7;
    a1[11] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
LABEL_15:
  uint64_t v10 = a2[12];
  if (!a1[12])
  {
    if (v10)
    {
      uint64_t v12 = a2[13];
      a1[12] = v10;
      a1[13] = v12;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    goto LABEL_22;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v11 = a2[13];
  a1[12] = v10;
  a1[13] = v11;
  swift_retain();
  swift_release();
LABEL_22:
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for OptionParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
LABEL_8:
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v11;
      *(void *)(a1 + 88) = v12;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v11)
  {
    uint64_t v13 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 88) = v13;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_15:
  uint64_t v14 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v14)
    {
      uint64_t v16 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v14;
      *(void *)(a1 + 104) = v16;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  swift_release();
LABEL_22:
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionParser()
{
  return &type metadata for OptionParser;
}

uint64_t destroy for OptionParser.Handler()
{
  return sub_1B3A163DC();
}

uint64_t _s6ktrace12OptionParserV7HandlerOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1B3A13620();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for OptionParser.Handler(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1B3A13620();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1B3A163DC();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for OptionParser.Handler(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1B3A163DC();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.Handler(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.Handler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B3A17604(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1B3A1760C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for OptionParser.Handler()
{
  return &type metadata for OptionParser.Handler;
}

uint64_t destroy for OptionParser.Option()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return sub_1B3A163DC();
}

uint64_t initializeWithCopy for OptionParser.Option(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B3A13620();
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v7;
  *(unsigned char *)(a1 + 72) = v8;
  return a1;
}

uint64_t assignWithCopy for OptionParser.Option(uint64_t a1, void *a2)
{
  unint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v2[4];
  *(void *)(a1 + 40) = v2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)v2 + 48);
  uint64_t v4 = v2[7];
  uint64_t v5 = v2[8];
  LOBYTE(v2) = *((unsigned char *)v2 + 72);
  sub_1B3A13620();
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v5;
  *(unsigned char *)(a1 + 72) = (_BYTE)v2;
  sub_1B3A163DC();
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for OptionParser.Option(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  char v7 = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = v7;
  sub_1B3A163DC();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.Option(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.Option(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionParser.Option()
{
  return &type metadata for OptionParser.Option;
}

uint64_t sub_1B3A17914(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for OptionParser.ParseError(uint64_t a1)
{
  return sub_1B3A166D8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s6ktrace12OptionParserV10ParseErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1B3A17914(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for OptionParser.ParseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1B3A17914(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1B3A166D8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for OptionParser.ParseError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1B3A166D8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.ParseError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.ParseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B3A17AB4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_1B3A17ACC(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OptionParser.ParseError()
{
  return &type metadata for OptionParser.ParseError;
}

uint64_t sub_1B3A17AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  float v6 = (float)((float)a3 / (float)a5) * 100.0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5890);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = MEMORY[0x1E4FBB470];
  *(_OWORD *)(v7 + 16) = xmmword_1B3A73390;
  uint64_t v9 = MEMORY[0x1E4FBB4D0];
  *(void *)(v7 + 56) = v8;
  *(void *)(v7 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v9;
  *(float *)(v7 + 32) = v6;
  uint64_t result = sub_1B3A702D0();
  if ((unint64_t)(a3 - 0x200000000000000) >> 58 == 63)
  {
    uint64_t v11 = result;
    id v12 = objc_msgSend(self, sel_stringFromByteCount_countStyle_, a3 << 6, 1);
    sub_1B3A702C0();

    sub_1B3A709B0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A703A0();
    sub_1B3A703A0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B3A17C9C(uint64_t a1)
{
  unsigned int v3 = v1;
  int v4 = HIWORD(*(_DWORD *)(a1 + 48));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v1;
  uint64_t v25 = v6;
  *unsigned int v3 = 0x8000000000000000;
  unint64_t v8 = sub_1B3A17E24(v4);
  uint64_t v9 = *(void *)(v6 + 16);
  BOOL v10 = (v7 & 1) == 0;
  uint64_t v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_13;
  }
  char v2 = v7;
  if (*(void *)(v6 + 24) < v11)
  {
    sub_1B3A17F0C(v11, isUniquelyReferenced_nonNull_native);
    unint64_t v12 = sub_1B3A17E24(v4);
    if ((v2 & 1) == (v13 & 1))
    {
      unint64_t v8 = v12;
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_15;
  }
  while (1)
  {
LABEL_6:
    *unsigned int v3 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = (void *)*v3;
    if (v2) {
      goto LABEL_9;
    }
    v15[(v8 >> 6) + 8] |= 1 << v8;
    *(_WORD *)(v15[6] + 2 * v8) = v4;
    *(void *)(v15[7] + 8 * v8) = 1;
    uint64_t v16 = v15[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      break;
    }
    v15[2] = v18;
LABEL_9:
    uint64_t v19 = v15[7];
    uint64_t v20 = *(void *)(v19 + 8 * v8);
    BOOL v17 = __OFADD__(v20, 1);
    uint64_t v21 = v20 + 1;
    if (v17)
    {
LABEL_13:
      __break(1u);
    }
    else
    {
      *(void *)(v19 + 8 * v8) = v21;
      uint64_t v22 = v3[1];
      BOOL v23 = __CFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (!v23)
      {
        v3[1] = v24;
        return result;
      }
    }
    __break(1u);
LABEL_15:
    sub_1B3A181B0();
    uint64_t v6 = v25;
  }
  __break(1u);
LABEL_17:
  uint64_t result = sub_1B3A70D70();
  __break(1u);
  return result;
}

unint64_t sub_1B3A17E00()
{
  return sub_1B3A18344(MEMORY[0x1E4FBC860]);
}

unint64_t sub_1B3A17E24(unsigned __int16 a1)
{
  uint64_t v3 = MEMORY[0x1B3EBE120](*(void *)(v1 + 40), a1, 2);

  return sub_1B3A17E6C(a1, v3);
}

unint64_t sub_1B3A17E6C(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B3A17F0C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9CD5B50);
  uint64_t result = sub_1B3A70B30();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      unsigned __int16 v21 = *(_WORD *)(*(void *)(v5 + 48) + 2 * v17);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      uint64_t result = MEMORY[0x1B3EBE120](*(void *)(v7 + 40), v21, 2);
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_WORD *)(*(void *)(v7 + 48) + 2 * v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

void *sub_1B3A181B0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9CD5B50);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B3A70B20();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    __int16 v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1B3A18344(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E9CD5B50);
    uint64_t v3 = (void *)sub_1B3A70B40();
    for (uint64_t i = (void *)(a1 + 40); ; i += 2)
    {
      unsigned __int16 v5 = *((_WORD *)i - 4);
      uint64_t v6 = *i;
      unint64_t result = sub_1B3A17E24(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_WORD *)(v3[6] + 2 * result) = v5;
      *(void *)(v3[7] + 8 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      int v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

ValueMetadata *type metadata accessor for Prevalence()
{
  return &type metadata for Prevalence;
}

void *initializeBufferWithCopyOfBuffer for KdebugStatistics(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for KdebugStatistics()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for KdebugStatistics(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for KdebugStatistics(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for KdebugStatistics(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KdebugStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KdebugStatistics()
{
  return &type metadata for KdebugStatistics;
}

uint64_t sub_1B3A1859C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A185E4(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  *(void *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  return result;
}

uint64_t sub_1B3A18620()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1B3A18660(uint64_t a1, void *a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = sub_1B3A1971C(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1B3A186DC()
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocClassInstance();
}

void sub_1B3A1872C(NSObject *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int out_token = 0;
  BOOL v10 = (void *)swift_allocObject();
  _OWORD v10[2] = a3;
  void v10[3] = a4;
  v10[4] = a5;
  v10[5] = a2;
  v16[4] = sub_1B3A19FE8;
  void v16[5] = v10;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1107296256;
  CFTypeRef v16[2] = sub_1B3A18904;
  v16[3] = &block_descriptor_28;
  uint64_t v11 = _Block_copy(v16);
  swift_retain();
  swift_bridgeObjectRetain();
  id v12 = a2;
  swift_release();
  uint64_t v13 = sub_1B3A70320();
  uint32_t v14 = notify_register_dispatch((const char *)(v13 + 32), &out_token, a1, v11);
  swift_release();
  _Block_release(v11);
  if (v14)
  {
    type metadata accessor for KTraceRecordError();
    sub_1B3A1A040((unint64_t *)&qword_1E9CD58E0, (void (*)(uint64_t))type metadata accessor for KTraceRecordError);
    swift_allocError();
    *unint64_t v15 = v14;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

uint64_t sub_1B3A18904(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_1B3A18958(NSObject *a1, void *a2, uint64_t a3)
{
  sub_1B3A1872C(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_1B3A18974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = &type metadata for NotificationWaiter;
  a3[4] = &off_1F0C3B188;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B3A18994(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v25 = a2;
  uint64_t v29 = a1;
  uint64_t v6 = sub_1B3A701B0();
  uint64_t v28 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1B3A701D0();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1B3A701F0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v25 - v17;
  sub_1B3A701E0();
  MEMORY[0x1B3EBD530](v16, (double)a4 / 1000000000.0);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v19(v16, v12);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  *(double *)(v20 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (double)a4 / 1000000000.0;
  unint64_t v21 = v25;
  *(void *)(v20 + 32) = v25;
  aBlock[4] = sub_1B3A1A0C8;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B39B583C;
  aBlock[3] = &block_descriptor_34;
  int64_t v22 = _Block_copy(aBlock);
  swift_retain();
  id v23 = v21;
  sub_1B3A701C0();
  uint64_t v30 = MEMORY[0x1E4FBC860];
  sub_1B3A1A040(&qword_1E9CD5B68, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B70);
  sub_1B3A199A8();
  sub_1B3A70920();
  MEMORY[0x1B3EBD9A0](v18, v11, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  v19(v18, v12);
  return swift_release();
}

uint64_t sub_1B3A18D3C(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1B3A18994(a1, a2, a3, *v3);
}

uint64_t sub_1B3A18D68(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v25 = a2;
  uint64_t v6 = sub_1B3A701B0();
  uint64_t v26 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1B3A701D0();
  uint64_t v27 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = *(_DWORD *)(v3 + 16);
  uint64_t v13 = (void (__cdecl *)(int))sub_1B3A70110();
  signal(v12, v13);
  sub_1B3A1A124();
  *(void *)(v4 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_1B3A706A0();
  uint64_t result = swift_unknownObjectRelease();
  if (*(void *)(v4 + 24))
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a3;
    v15[3] = v4;
    uint64_t v16 = v25;
    _OWORD v15[4] = v25;
    aBlock[4] = sub_1B39B5DD0;
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1B39B583C;
    aBlock[3] = &block_descriptor_40;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v18 = v26;
    uint64_t v23 = v9;
    uint64_t v19 = v6;
    uint64_t v20 = v17;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    id v21 = v16;
    sub_1B3A701C0();
    sub_1B3A19058();
    sub_1B3A706B0();
    _Block_release(v20);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v19);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v23);
    uint64_t result = swift_release();
    if (*(void *)(v4 + 24))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1B3A706D0();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B3A19058()
{
  return sub_1B3A70920();
}

uint64_t sub_1B3A19108()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B3A19140(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1B3A18D68(a1, a2, a3);
}

uint64_t sub_1B3A19164@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  int v4 = result;
  if (a3)
  {
    if (a3 == 1)
    {
      a4[3] = (uint64_t)&type metadata for TimeWaiter;
      a4[4] = (uint64_t)&off_1F0C398C8;
      *a4 = result;
    }
    else
    {
      a4[3] = (uint64_t)&type metadata for NotificationWaiter;
      a4[4] = (uint64_t)&off_1F0C3B188;
      *a4 = result;
      a4[1] = a2;
      return swift_bridgeObjectRetain();
    }
  }
  else
  {
    uint64_t v6 = type metadata accessor for SignalWaiter();
    uint64_t result = swift_allocObject();
    *(void *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(_DWORD *)(result + 16) = v4;
    a4[3] = v6;
    a4[4] = (uint64_t)&off_1F0C3A7B0;
    *a4 = result;
  }
  return result;
}

unint64_t sub_1B3A19224()
{
  swift_beginAccess();
  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t sub_1B3A19268(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  *(unsigned char *)(v1 + 28) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*sub_1B3A192B0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A19304(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = a1;
  uint64_t v6 = sub_1B3A701B0();
  uint64_t v17 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1B3A701D0();
  uint64_t v9 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(*(dispatch_group_t *)(v3 + 16));
  int v12 = (void *)swift_allocObject();
  void v12[2] = v3;
  void v12[3] = a3;
  v12[4] = a2;
  aBlock[4] = sub_1B3A198E8;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B39B583C;
  aBlock[3] = &block_descriptor;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v14 = a2;
  sub_1B3A701C0();
  void aBlock[7] = MEMORY[0x1E4FBC860];
  sub_1B3A1A040(&qword_1E9CD5B68, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5B70);
  sub_1B3A199A8();
  sub_1B3A70920();
  sub_1B3A70650();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v16);
  return swift_release();
}

void sub_1B3A195C4(unsigned int a1)
{
  (*(void (**)(void))(*v1 + 104))(a1);
  uint64_t v2 = v1[2];

  dispatch_group_leave(v2);
}

uint64_t sub_1B3A19628()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1B3A19660()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = dispatch_group_create();
  *(_DWORD *)(v0 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(unsigned char *)(v0 + 28) = 1;
  return v0;
}

uint64_t sub_1B3A196A8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

BOOL sub_1B3A196EC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1B3A19700@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1B3A19710(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1B3A1971C(uint64_t a1, void *a2, uint64_t a3)
{
  dispatch_semaphore_t v8 = dispatch_semaphore_create(0);
  *(void *)(v3 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(v3 + 32) = v8;
  *(unsigned char *)(v3 + 48) = 0;
  *(void *)(v3 + 16) = a1;
  type metadata accessor for WakeListener();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v9 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  *(void *)(v3 + 40) = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = (void *)(a1 + 32);
    swift_bridgeObjectRetain();
    id v21 = a2;
    id v20 = a2;
    swift_retain();
    while (1)
    {
      uint64_t v13 = v11[3];
      uint64_t v12 = v11[4];
      __swift_project_boxed_opaque_existential_1(v11, v13);
      id v14 = *(void **)(v3 + 32);
      uint64_t v15 = *(void *)(v3 + 40);
      uint64_t v22 = *(void (**)(id, id, uint64_t, uint64_t, uint64_t))(v12 + 8);
      id v16 = *(id *)(v3 + 24);
      id v17 = v14;
      swift_retain();
      v22(v16, v17, v15, v13, v12);
      if (v4) {
        break;
      }

      swift_release();
      v11 += 5;
      if (!--v10)
      {
        swift_release();

        return v3;
      }
    }
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    id v18 = a2;
  }
  return v3;
}

uint64_t type metadata accessor for SignalWaiter()
{
  return self;
}

uint64_t sub_1B3A198E8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 96))();
  if ((result & 0x100000000) == 0)
  {
    if ((result - 4) <= 2) {
      (*(void (**)(void, void, uint64_t))(*(void *)v1 + 120))(qword_1B3A74010[(int)result - 4], 0, 3);
    }
    return sub_1B3A70710();
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_1B3A199A8()
{
  unint64_t result = qword_1E9CD5B78;
  if (!qword_1E9CD5B78)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9CD5B70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5B78);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for WakeReason(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B3A19BE8(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1B39AAABC);
}

uint64_t destroy for WakeReason(uint64_t a1)
{
  return sub_1B39B6148(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t *assignWithCopy for WakeReason(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B3A19C64(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1B39AAABC, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B39B6148);
}

uint64_t *assignWithTake for WakeReason(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A19CE8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B39B6148);
}

uint64_t getEnumTagSinglePayload for WakeReason(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WakeReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B3A19AFC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1B3A19B14(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t type metadata accessor for WakeListener()
{
  return self;
}

uint64_t type metadata accessor for WaitGroup()
{
  return self;
}

ValueMetadata *type metadata accessor for StartWait()
{
  return &type metadata for StartWait;
}

uint64_t initializeBufferWithCopyOfBuffer for EndWait(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B3A19BE8(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1B3A19BA8);
}

uint64_t sub_1B3A19BA8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for EndWait(uint64_t a1)
{
  return sub_1B3A19BD0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1B3A19BD0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A19BE8(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for EndWait(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1B3A19C64(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1B3A19BA8, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B3A19BD0);
}

uint64_t *sub_1B3A19C64(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for EndWait(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A19CE8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B3A19BD0);
}

uint64_t *sub_1B3A19CE8(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EndWait(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EndWait(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B3A19DC0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EndWait()
{
  return &type metadata for EndWait;
}

uint64_t type metadata accessor for KernelDisableWaiter()
{
  return self;
}

void type metadata accessor for ktrace_end_reason()
{
  if (!qword_1E9CD5BE0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1E9CD5BE0);
    }
  }
}

ValueMetadata *type metadata accessor for TimeWaiter()
{
  return &type metadata for TimeWaiter;
}

void *initializeBufferWithCopyOfBuffer for NotificationWaiter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TraceFileProvenance(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for NotificationWaiter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TraceFileProvenance(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TraceFileProvenance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationWaiter()
{
  return &type metadata for NotificationWaiter;
}

uint64_t sub_1B3A19FA0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B3A19FE8()
{
  (*(void (**)(void, void, uint64_t))(**(void **)(v0 + 16) + 120))(*(void *)(v0 + 24), *(void *)(v0 + 32), 1);
  return sub_1B3A70710();
}

uint64_t sub_1B3A1A040(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B3A1A088()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1B3A1A0C8()
{
  (*(void (**)(void, void, uint64_t))(**(void **)(v0 + 16) + 120))(*(void *)(v0 + 24), 0, 2);
  return sub_1B3A70710();
}

unint64_t sub_1B3A1A124()
{
  unint64_t result = qword_1E9CD5BF0;
  if (!qword_1E9CD5BF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9CD5BF0);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void *sub_1B3A1A1D4()
{
  return &unk_1B3A74060;
}

uint64_t sub_1B3A1A1E0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9 = (int *)type metadata accessor for RecordingOptions.Options(0);
  uint64_t v10 = (uint64_t *)(a1 + v9[32]);
  uint64_t v11 = v10[1];
  uint64_t v74 = *v10;
  char v75 = *(unsigned char *)(a1 + v9[16]);
  uint64_t v12 = *(void *)(a1 + v9[24]);
  swift_bridgeObjectRetain_n();
  uint64_t v73 = v11;
  swift_bridgeObjectRetain();
  uint64_t v13 = (char *)sub_1B3A1E528(v12);
  swift_bridgeObjectRelease();
  v78[0] = v13;
  sub_1B3A1E4BC(v78);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58A8);
  sub_1B3A0609C();
  uint64_t v14 = sub_1B3A70250();
  uint64_t v69 = v15;
  uint64_t v70 = v14;
  swift_release();
  uint64_t v16 = *(void *)(a1 + v9[25]);
  swift_bridgeObjectRetain_n();
  id v17 = (char *)sub_1B3A1E528(v16);
  swift_bridgeObjectRelease();
  v78[0] = v17;
  sub_1B3A1E4BC(v78);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_1B3A70250();
  uint64_t v67 = v19;
  uint64_t v68 = v18;
  swift_release();
  v78[0] = a2;
  swift_bridgeObjectRetain();
  sub_1B3A1E4BC(v78);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_1B3A70250();
  uint64_t v66 = v21;
  swift_release();
  v78[0] = a3;
  swift_bridgeObjectRetain();
  sub_1B3A1E4BC(v78);
  swift_bridgeObjectRelease();
  uint64_t v77 = sub_1B3A70250();
  uint64_t v76 = v22;
  swift_release();
  uint64_t v23 = a1 + v9[9];
  uint64_t v24 = a1 + v9[15];
  char v25 = *(unsigned char *)(v24 + 8);
  double v26 = 0.0;
  if ((v25 & 1) == 0) {
    double v26 = (double)*(unint64_t *)v24 / 1000000.0;
  }
  uint64_t v27 = a1 + v9[10];
  int v28 = *(_DWORD *)v27;
  char v29 = *(unsigned char *)(v27 + 4);
  uint64_t v30 = a1 + v9[11];
  unint64_t v31 = *(void *)v30;
  char v32 = *(unsigned char *)(v30 + 8);
  if ((v32 & 1) == 0)
  {
    if (v31 >> 58)
    {
      __break(1u);
      goto LABEL_18;
    }
    v31 <<= 6;
  }
  uint64_t v33 = a1 + v9[30];
  char v34 = *(unsigned char *)(v33 + 8);
  double v35 = 0.0;
  if ((v34 & 1) == 0) {
    double v35 = (double)*(unint64_t *)v33 / 1000000000.0;
  }
  uint64_t v36 = v9[20];
  uint64_t v37 = (uint64_t *)(a1 + v9[19]);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  uint64_t v40 = a1 + v9[21];
  char v41 = *(unsigned char *)(v40 + 8);
  uint64_t v64 = v20;
  uint64_t v65 = *(void *)v23;
  unint64_t v63 = v31;
  char v61 = *(unsigned char *)(a1 + v9[18]);
  int v62 = v28;
  char v59 = *(unsigned char *)(a1 + v9[28]);
  char v60 = *(unsigned char *)(a1 + v9[27]);
  char v57 = v32;
  char v58 = *(unsigned char *)(a1 + v9[17]);
  uint64_t v55 = v39;
  uint64_t v56 = *(void *)(a1 + v36);
  char v53 = v34;
  char v54 = *(unsigned char *)(a1 + v9[14]);
  if ((v41 & 1) == 0)
  {
    unint64_t v44 = *(void *)v40;
    if ((v44 & 0x8000000000000000) == 0)
    {
      if (!(v44 >> 54))
      {
        if ((v44 & 0x3FF00000000000) == 0)
        {
          char v42 = v29;
          char v43 = *(unsigned char *)(v23 + 8);
          uint64_t v49 = v44 << 20;
          goto LABEL_14;
        }
LABEL_20:
        __break(1u);
        uint64_t result = swift_release();
        __break(1u);
        return result;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  char v42 = v29;
  char v43 = *(unsigned char *)(v23 + 8);
  uint64_t v49 = 0;
LABEL_14:
  char v72 = a4 & 1;
  BOOL v50 = *(void *)(*(void *)(a1 + v9[13]) + 16) != 0;
  BOOL v45 = *(void *)(*(void *)(a1 + v9[12]) + 16) != 0;
  char v46 = *(unsigned char *)(a1 + v9[22]);
  uint64_t v47 = 63;
  if (!v46) {
    uint64_t v47 = 0;
  }
  uint64_t v51 = *(void *)(a1 + v36 + 8);
  uint64_t v52 = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_1B3A1F400(a1);
  LOBYTE(v78[0]) = v43;
  *(void *)a5 = v74;
  *(void *)(a5 + 8) = v73;
  *(void *)(a5 + 16) = v70;
  *(void *)(a5 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v69;
  *(void *)(a5 + 32) = v68;
  *(void *)(a5 + 40) = v67;
  *(void *)(a5 + 48) = v64;
  *(void *)(a5 + 56) = v66;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v77;
  *(void *)(a5 + 72) = v76;
  *(void *)(a5 + 80) = v65;
  *(unsigned char *)(a5 + 88) = v43;
  *(double *)(a5 + 96) = v26;
  *(unsigned char *)(a5 + 104) = v25;
  *(unsigned char *)(a5 + 105) = v75;
  *(unsigned char *)(a5 + 106) = v45;
  *(unsigned char *)(a5 + 107) = v54;
  *(_DWORD *)(a5 + 108) = v62;
  *(unsigned char *)(a5 + 112) = v42;
  *(void *)(a5 + 120) = v63;
  *(unsigned char *)(a5 + 128) = v57;
  *(unsigned char *)(a5 + 129) = v50;
  *(double *)(a5 + 136) = v35;
  *(unsigned char *)(a5 + 144) = v53;
  *(unsigned char *)(a5 + 145) = v59;
  *(unsigned char *)(a5 + 146) = v72;
  *(unsigned char *)(a5 + 147) = v58;
  *(unsigned char *)(a5 + 148) = v60;
  *(unsigned char *)(a5 + 149) = v61;
  *(void *)(a5 + 152) = v55;
  *(void *)(a5 + 160) = v38;
  *(void *)(a5 + 168) = v56;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v51;
  *(void *)(a5 + 184) = v49;
  *(unsigned char *)(a5 + 192) = v41;
  *(void *)(a5 + 200) = v52;
  *(unsigned char *)(a5 + 208) = v46 ^ 1;
  return result;
}

unint64_t sub_1B3A1A6BC(char a1)
{
  unint64_t result = 0x656D614E6E616C70;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6465646461;
      break;
    case 2:
      unint64_t result = 0x64657474696D6FLL;
      break;
    case 3:
      unint64_t result = 0x72656469766F7270;
      break;
    case 4:
      unint64_t result = 0x73726579616CLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
    case 16:
      unint64_t result = 0x73736572706D6F63;
      break;
    case 8:
      unint64_t result = 0x7453796669746F6ELL;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
    case 14:
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    case 11:
      unint64_t result = 0x65644B6E4F646E65;
      break;
    case 12:
      unint64_t result = 0x6E45796669746F6ELL;
      break;
    case 13:
      unint64_t result = 0xD000000000000017;
      break;
    case 17:
      unint64_t result = 0x7355656661736E75;
      break;
    case 18:
      unint64_t result = 0xD000000000000012;
      break;
    case 19:
      unint64_t result = 0xD000000000000013;
      break;
    case 20:
      unint64_t result = 0xD000000000000013;
      break;
    case 21:
      unint64_t result = 0xD000000000000019;
      break;
    case 22:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B3A1A974()
{
  return sub_1B3A1A6BC(*v0);
}

uint64_t sub_1B3A1A97C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A1F674(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3A1A9A4()
{
  return 0;
}

void sub_1B3A1A9B0(unsigned char *a1@<X8>)
{
  *a1 = 23;
}

uint64_t sub_1B3A1A9BC(uint64_t a1)
{
  unint64_t v2 = sub_1B3A1F45C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A1A9F8(uint64_t a1)
{
  unint64_t v2 = sub_1B3A1F45C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A1AA34(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5CC0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3A1F45C();
  sub_1B3A70E70();
  char v12 = 0;
  sub_1B3A70C80();
  if (!v2)
  {
    char v12 = 1;
    sub_1B3A70C10();
    char v12 = 2;
    sub_1B3A70C10();
    char v12 = 3;
    sub_1B3A70C80();
    char v12 = 4;
    sub_1B3A70C80();
    char v12 = 5;
    sub_1B3A70C30();
    char v12 = 6;
    sub_1B3A70C30();
    char v12 = 7;
    sub_1B3A70C90();
    char v12 = 8;
    sub_1B3A70C90();
    char v12 = 9;
    sub_1B3A70C90();
    char v9 = *(unsigned char *)(v3 + 112);
    char v12 = 10;
    v11[12] = v9;
    sub_1B3A70C60();
    char v12 = 11;
    sub_1B3A70C70();
    char v12 = 12;
    sub_1B3A70C90();
    char v12 = 13;
    sub_1B3A70C30();
    char v12 = 14;
    sub_1B3A70C90();
    char v12 = 15;
    sub_1B3A70C90();
    char v12 = 16;
    sub_1B3A70C90();
    char v12 = 17;
    sub_1B3A70C90();
    char v12 = 18;
    sub_1B3A70C90();
    char v12 = 19;
    sub_1B3A70C10();
    char v12 = 20;
    sub_1B3A70C10();
    char v12 = 21;
    sub_1B3A70C70();
    char v12 = 22;
    sub_1B3A70C40();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1B3A1AF04(void *a1)
{
  return sub_1B3A1AA34(a1);
}

uint64_t sub_1B3A1AF1C@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  sub_1B39B4CD4(v1 + 64, (uint64_t)v4, &qword_1E9CD5CC8);
  sub_1B3A1F568((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1B3A1F4D8);
  return sub_1B39B4CD4((uint64_t)v4, a1, &qword_1E9CD5CC8);
}

uint64_t sub_1B3A1AFA8(uint64_t a1)
{
  uint64_t v3 = v1 + 64;
  swift_beginAccess();
  sub_1B39B4CD4(v3, (uint64_t)v5, &qword_1E9CD5CC8);
  sub_1B39B4CD4(a1, v3, &qword_1E9CD5CC8);
  sub_1B3A1F568(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1B3A1F4D8);
  sub_1B3A1F568((uint64_t)v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1B3A1F5E4);
  return sub_1B3A1F568(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1B3A1F5E4);
}

uint64_t (*sub_1B3A1B060())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A1B0B4(unsigned __int8 *a1, char *a2)
{
  return sub_1B3A1B0C0(*a1, *a2);
}

uint64_t sub_1B3A1B0C0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6C616974696E69;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6C616974696E69;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7075746573;
      break;
    case 2:
      uint64_t v5 = 0x54676E6974696177;
      unint64_t v3 = 0xEE0074726174536FLL;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x676E697472617473;
      break;
    case 4:
      uint64_t v5 = 0x6E6964726F636572;
      unint64_t v3 = 0xE900000000000067;
      break;
    case 5:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x6E776F6472616574;
      break;
    case 6:
      uint64_t v5 = 0x636F725074736F70;
      unint64_t v3 = 0xEB00000000737365;
      break;
    case 7:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6C61746F74;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x7075746573) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xEE0074726174536FLL;
      if (v5 != 0x54676E6974696177) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x676E697472617473) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v6 = 0xE900000000000067;
      if (v5 != 0x6E6964726F636572) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x6E776F6472616574) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v2 = 0x636F725074736F70;
      unint64_t v6 = 0xEB00000000737365;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6C61746F74) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = sub_1B3A70D20();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1B3A1B36C()
{
  return sub_1B3A1B4D0();
}

uint64_t sub_1B3A1B378()
{
  return sub_1B3A1B380();
}

uint64_t sub_1B3A1B380()
{
  sub_1B3A70360();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A1B4C8()
{
  return sub_1B3A1B4D0();
}

uint64_t sub_1B3A1B4D0()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A1B628@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B3A1FF9C();
  *a1 = result;
  return result;
}

void sub_1B3A1B658(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6C616974696E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x7075746573;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "waitingToStart");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 3:
      *(void *)a1 = 0x676E697472617473;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
    case 4:
      *(void *)a1 = 0x6E6964726F636572;
      *(void *)(a1 + 8) = 0xE900000000000067;
      break;
    case 5:
      *(void *)a1 = 0x6E776F6472616574;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
    case 6:
      *(void *)a1 = 0x636F725074736F70;
      *(void *)(a1 + 8) = 0xEB00000000737365;
      break;
    case 7:
      *(void *)a1 = 0x6C61746F74;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1B3A1B784()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B3A1B7BC(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 280) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A1B804()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B3A1B83C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 288) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1B3A1B884())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1B3A1B8D8(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 2:
      unint64_t result = 0x756F436B6E756863;
      break;
    case 3:
      unint64_t result = 0x657A6953656C6966;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B3A1B998()
{
  return sub_1B3A1B8D8(*v0);
}

uint64_t sub_1B3A1B9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A20090(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B3A1B9C8(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1B3A1B9D4(uint64_t a1)
{
  unint64_t v2 = sub_1B3A1FFE8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A1BA10(uint64_t a1)
{
  unint64_t v2 = sub_1B3A1FFE8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A1BA4C(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5CD0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3A1FFE8();
  sub_1B3A70E70();
  v8[15] = 0;
  sub_1B3A70CD0();
  if (!v1)
  {
    v8[14] = 1;
    sub_1B3A70CD0();
    v8[13] = 2;
    sub_1B3A70CD0();
    v8[12] = 3;
    sub_1B3A70CD0();
    v8[11] = 4;
    sub_1B3A70CD0();
    v8[10] = 5;
    sub_1B3A70CD0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1B3A1BC4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t sub_1B3A1BC5C(void *a1)
{
  return sub_1B3A1BA4C(a1);
}

uint64_t sub_1B3A1BC74(char a1, unint64_t a2)
{
  LOBYTE(v5) = a1;
  unint64_t v6 = *(uint64_t (**)(void))(*(void *)v2 + 208);
  char v7 = (void *)v6();
  uint64_t v8 = v7[2];
  if (!v8)
  {
LABEL_30:
    return swift_bridgeObjectRelease();
  }
  char v25 = v5;
  double v26 = v6;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v5 = v5;
  while (2)
  {
    unint64_t v11 = 0xE700000000000000;
    uint64_t v12 = 0x6C616974696E69;
    switch(*((unsigned char *)v7 + v9 + 32))
    {
      case 1:
        unint64_t v11 = 0xE500000000000000;
        uint64_t v12 = 0x7075746573;
        break;
      case 2:
        uint64_t v12 = 0x54676E6974696177;
        unint64_t v11 = 0xEE0074726174536FLL;
        break;
      case 3:
        unint64_t v11 = 0xE800000000000000;
        uint64_t v12 = 0x676E697472617473;
        break;
      case 4:
        uint64_t v12 = 0x6E6964726F636572;
        unint64_t v11 = 0xE900000000000067;
        break;
      case 5:
        unint64_t v11 = 0xE800000000000000;
        uint64_t v12 = 0x6E776F6472616574;
        break;
      case 6:
        uint64_t v12 = 0x636F725074736F70;
        unint64_t v11 = 0xEB00000000737365;
        break;
      case 7:
        unint64_t v11 = 0xE500000000000000;
        uint64_t v12 = 0x6C61746F74;
        break;
      default:
        break;
    }
    unint64_t v13 = 0xE700000000000000;
    uint64_t v14 = 0x6C616974696E69;
    switch((char)v5)
    {
      case 1:
        unint64_t v13 = 0xE500000000000000;
        if (v12 == 0x7075746573) {
          goto LABEL_24;
        }
        goto LABEL_25;
      case 2:
        unint64_t v13 = 0xEE0074726174536FLL;
        if (v12 != 0x54676E6974696177) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 3:
        unint64_t v13 = 0xE800000000000000;
        if (v12 != 0x676E697472617473) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 4:
        unint64_t v13 = 0xE900000000000067;
        if (v12 != 0x6E6964726F636572) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 5:
        unint64_t v13 = 0xE800000000000000;
        if (v12 != 0x6E776F6472616574) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 6:
        uint64_t v14 = 0x636F725074736F70;
        unint64_t v13 = 0xEB00000000737365;
        goto LABEL_23;
      case 7:
        unint64_t v13 = 0xE500000000000000;
        if (v12 != 0x6C61746F74) {
          goto LABEL_25;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (v12 != v14) {
          goto LABEL_25;
        }
LABEL_24:
        if (v11 != v13)
        {
LABEL_25:
          char v15 = sub_1B3A70D20();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_34;
          }
          ++v10;
          v9 += 32;
          if (v8 == v10) {
            goto LABEL_30;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_34:
        uint64_t v17 = swift_bridgeObjectRelease();
        uint64_t v18 = ((uint64_t (*)(uint64_t))v26)(v17);
        if (v10 >= *(void *)(v18 + 16))
        {
          __break(1u);
        }
        else
        {
          uint64_t v3 = *(void *)(v18 + v9 + 40);
          uint64_t v4 = *(void *)(v18 + v9 + 48);
          uint64_t v9 = *(void *)(v18 + v9 + 56);
          swift_bridgeObjectRelease();
          uint64_t v19 = *(uint64_t (**)(unsigned char *))(*(void *)v2 + 248);
          unint64_t v13 = a2;
          swift_bridgeObjectRetain();
          unint64_t v2 = (uint64_t (*)(unsigned char *, void))v19(v28);
          unint64_t v5 = (unint64_t)v20;
          char v7 = *v20;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)unint64_t v5 = v7;
          if (isUniquelyReferenced_nonNull_native) {
            goto LABEL_36;
          }
        }
        char v7 = sub_1B3A1F0B4(0, v7[2] + 1, 1, v7);
        *(void *)unint64_t v5 = v7;
LABEL_36:
        unint64_t v23 = v7[2];
        unint64_t v22 = v7[3];
        if (v23 >= v22 >> 1)
        {
          char v7 = sub_1B3A1F0B4((void *)(v22 > 1), v23 + 1, 1, v7);
          *(void *)unint64_t v5 = v7;
        }
        long long v7[2] = v23 + 1;
        uint64_t v24 = &v7[5 * v23];
        *((unsigned char *)v24 + 32) = v25;
        void v24[5] = v3;
        v24[6] = v4;
        _DWORD v24[7] = v9;
        v24[8] = v13;
        return v2(v28, 0);
    }
  }
}

uint64_t sub_1B3A1C104()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D30);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B3A74030;
  *(void *)(v1 + 32) = 0x764567756265644BLL;
  *(void *)(v1 + 40) = 0xEF65747942746E65;
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(v0 + 344) & 1) == 0)
  {
    unint64_t v3 = *(void *)(v0 + 296);
    *(double *)(v1 + 48) = (double)*(unint64_t *)(v0 + 304);
    *(double *)(v1 + 72) = (double)v3;
    unint64_t v4 = *(void *)(v0 + 336);
    *(double *)(v1 + 96) = (double)*(unint64_t *)(v0 + 328);
    *(void *)(v1 + 56) = 0x764567756265644BLL;
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0xEB00000000746E65;
    *(void *)(v1 + 80) = 0x6441736B6E756843;
    *(void *)(v1 + 88) = 0xEB00000000646564;
    *(void *)(v1 + 104) = 0x6564644165747942;
    *(void *)(v1 + 112) = 0xE900000000000064;
    *(double *)(v1 + 120) = (double)v4;
    unint64_t v5 = (void (**)(uint64_t, uint64_t))(*(void *)v0 + 264);
    unint64_t v6 = *v5;
    (*v5)(6, v1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B3A74040;
    *(void *)(result + 32) = 0x764567756265644BLL;
    *(void *)(result + 40) = 0xEF65747942746E65;
    if ((*(unsigned char *)(v0 + 344) & 1) == 0)
    {
      unint64_t v7 = *(void *)(v0 + 296);
      *(double *)(result + 48) = (double)*(unint64_t *)(v0 + 304);
      *(void *)(result + 56) = 0x764567756265644BLL;
      *(void *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0xEB00000000746E65;
      *(double *)(result + 72) = (double)v7;
      v6(4, result);
      swift_bridgeObjectRelease();
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_1B3A74040;
      *(void *)(result + 32) = 0x764567756265644BLL;
      *(void *)(result + 40) = 0xEF65747942746E65;
      if ((*(unsigned char *)(v0 + 344) & 1) == 0)
      {
        unint64_t v8 = *(void *)(v0 + 296);
        *(double *)(result + 48) = (double)*(unint64_t *)(v0 + 304);
        *(void *)(result + 56) = 0x764567756265644BLL;
        *(void *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0xEB00000000746E65;
        *(double *)(result + 72) = (double)v8;
        v6(5, result);
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

__n128 sub_1B3A1C334@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 296;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 48);
  long long v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  __n128 result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1B3A1C38C(uint64_t a1)
{
  swift_beginAccess();
  sub_1B39B4CD4(a1, v1 + 296, &qword_1E9CD5CD8);
  return sub_1B3A1C104();
}

uint64_t (*sub_1B3A1C3EC(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1;
  swift_beginAccess();
  return sub_1B3A1C444;
}

uint64_t sub_1B3A1C444(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1B3A1C104();
  }
  return result;
}

unint64_t sub_1B3A1C478(char a1)
{
  unint64_t result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD00000000000001CLL;
    }
    else {
      return 0xD000000000000015;
    }
  }
  return result;
}

uint64_t sub_1B3A1C4D8()
{
  return sub_1B3A70E10();
}

unint64_t sub_1B3A1C504()
{
  return sub_1B3A1C478(*v0);
}

uint64_t sub_1B3A1C50C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A202FC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B3A1C534(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1B3A1C540(uint64_t a1)
{
  unint64_t v2 = sub_1B3A2003C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A1C57C(uint64_t a1)
{
  unint64_t v2 = sub_1B3A2003C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A1C5B8(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5CE0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3A2003C();
  sub_1B3A70E70();
  v8[15] = 0;
  sub_1B3A70C90();
  if (!v1)
  {
    v8[14] = 1;
    sub_1B3A70CA0();
    v8[13] = 2;
    sub_1B3A70CD0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1B3A1C758(char a1)
{
  return a1 & 1;
}

uint64_t sub_1B3A1C760(void *a1)
{
  return sub_1B3A1C5B8(a1);
}

uint64_t sub_1B3A1C784()
{
  swift_beginAccess();
  return *(void *)(v0 + 352);
}

uint64_t sub_1B3A1C7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  v3[44] = a1;
  v3[45] = a2;
  v3[46] = a3;
  return result;
}

uint64_t (*sub_1B3A1C810())()
{
  return j__swift_endAccess;
}

uint64_t sub_1B3A1C864()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 376);
}

uint64_t sub_1B3A1C898(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 376) = a1;
  return result;
}

uint64_t (*sub_1B3A1C8D8())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1B3A1C92C(char a1)
{
  unint64_t result = 0x79426465646E65;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000021;
      break;
    case 4:
      unint64_t result = 0xD000000000000023;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B3A1C9F8()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A1CA40()
{
  return sub_1B3A70E50();
}

unint64_t sub_1B3A1CA84()
{
  return sub_1B3A1C92C(*v0);
}

uint64_t sub_1B3A1CA8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A20440(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3A1CAB4(uint64_t a1)
{
  unint64_t v2 = sub_1B3A206C8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A1CAF0(uint64_t a1)
{
  unint64_t v2 = sub_1B3A206C8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A1CB2C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  int v6 = a6 & 1;
  switch(a3)
  {
    case 1:
      sub_1B3A20690(a4);
      sub_1B39B6148(a1, a2, 1);
      *(void *)&double v10 = 2;
      return *(void *)&v10;
    case 2:
      sub_1B3A20690(a4);
      sub_1B39B4CD4(a4 + 16, (uint64_t)v17, &qword_1E9CD5CE8);
      sub_1B39B4CD4((uint64_t)v17, (uint64_t)&v18, &qword_1E9CD5CE8);
      if ((v19 & 1) == 0)
      {
        unint64_t v11 = v18;
        sub_1B39B4CD4(a4 + 40, (uint64_t)v16, &qword_1E9CD5CE8);
        sub_1B39B4CD4((uint64_t)v16, (uint64_t)&v20, &qword_1E9CD5CE8);
        if ((v21 & 1) == 0)
        {
          if (v20 >= v11)
          {
            double v10 = (double)(v20 - v11) / 1000000000.0 - *(double *)&a1;
            return *(void *)&v10;
          }
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x1B3A1CD50);
        }
      }
      double v10 = 0.0;
      return *(void *)&v10;
    case 3:
      if (!(a1 | a2))
      {
        sub_1B3A20690(a4);
        *(void *)&double v10 = 4;
        return *(void *)&v10;
      }
      if (a1 ^ 1 | a2)
      {
        sub_1B3A20690(a4);
        *(void *)&double v10 = 5;
        return *(void *)&v10;
      }
      double v10 = *(double *)&a5;
      sub_1B3A20690(a4);
      if (v6) {
        return *(void *)&v10;
      }
      unint64_t v12 = *(void *)(a4 + 8);
      BOOL v13 = v12 >= *(void *)&v10;
      unint64_t v14 = v12 - *(void *)&v10;
      if (!v13) {
        goto LABEL_21;
      }
      if (!(v14 >> 58))
      {
        *(void *)&double v10 = v14 << 6;
        return *(void *)&v10;
      }
      goto LABEL_22;
    default:
      sub_1B3A20690(a4);
      double v10 = 0.0;
      return *(void *)&v10;
  }
}

uint64_t sub_1B3A1CD60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v12 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5CF0);
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3A206C8();
  sub_1B3A70E70();
  if (!(a5 >> 6))
  {
    char v15 = 1;
    sub_1B3A70C30();
    if (!v5)
    {
      char v14 = 2;
      sub_1B3A70C30();
      goto LABEL_8;
    }
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, v8);
  }
  if (a5 >> 6 == 1)
  {
    char v17 = 3;
    sub_1B3A70C70();
    if (!v5)
    {
      char v16 = 4;
      sub_1B3A70C30();
      goto LABEL_8;
    }
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, v8);
  }
LABEL_8:
  char v18 = 0;
  sub_1B3A70C80();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3A1D0F4(void *a1)
{
  return sub_1B3A1CD60(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_1B3A1D118()
{
  swift_beginAccess();
  return *(void *)(v0 + 384);
}

uint64_t sub_1B3A1D154(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 384) = a1;
  *(void *)(v4 + 392) = a2;
  *(void *)(v4 + 400) = a3;
  *(unsigned char *)(v4 + 408) = a4;
  return result;
}

uint64_t (*sub_1B3A1D1B8())()
{
  return j_j__swift_endAccess;
}

void *sub_1B3A1D20C()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 416);
  id v2 = v1;
  return v1;
}

void sub_1B3A1D254(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 416);
  *(void *)(v1 + 416) = a1;
}

uint64_t (*sub_1B3A1D29C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1B3A1D2F0(void *a1)
{
  void (*v10)(void *__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  BOOL v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD v53[13];
  char v54;
  void v55[27];
  void v56[7];
  unsigned char v57[56];
  void v58[33];
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  char v72;
  unsigned char v73[232];

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D00);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 184))(v55, v6);
  sub_1B39B4CD4((uint64_t)v55, (uint64_t)v73, &qword_1E9CD5CC8);
  sub_1B39B4CD4((uint64_t)v55, (uint64_t)v58, &qword_1E9CD5CC8);
  uint64_t v8 = sub_1B3A2071C((uint64_t)v58);
  if (v8 == 1)
  {
    uint64_t v49 = v5;
    BOOL v50 = v4;
  }
  else
  {
    sub_1B39B4CD4((uint64_t)v73, (uint64_t)v53, &qword_1E9CD5CC8);
    uint64_t v69 = v53[10];
    uint64_t v70 = v53[11];
    uint64_t v71 = v53[12];
    char v72 = v54;
    uint64_t v65 = v53[6];
    uint64_t v66 = v53[7];
    uint64_t v67 = v53[8];
    uint64_t v68 = v53[9];
    char v61 = v53[2];
    int v62 = v53[3];
    unint64_t v63 = v53[4];
    uint64_t v64 = v53[5];
    char v59 = v53[0];
    char v60 = v53[1];
    sub_1B3A1AA34(a1);
    if (v2) {
      return sub_1B3A1F568((uint64_t)v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1B3A1F5E4);
    }
    uint64_t v49 = v5;
    BOOL v50 = v4;
    uint64_t v8 = sub_1B3A1F568((uint64_t)v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1B3A1F5E4);
  }
  double v10 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 272);
  uint64_t v51 = v1;
  v10(v56, v8);
  unint64_t v11 = v56[0];
  uint64_t v12 = v56[1];
  uint64_t v13 = v56[2];
  char v14 = v56[3];
  char v15 = v56[4];
  char v16 = v56[5];
  uint64_t result = sub_1B39B4CD4((uint64_t)v56, (uint64_t)v57, &qword_1E9CD5CD8);
  if ((v57[48] & 1) != 0
    || (v58[27] = v11,
        v58[28] = v12,
        v58[29] = v13,
        v58[30] = v14,
        v58[31] = v15,
        v58[32] = v16,
        uint64_t result = sub_1B3A1BA4C(a1),
        !v2))
  {
    char v17 = v51;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 344))(result);
    char v21 = v20 <= 1u && (v18 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL;
    unint64_t v22 = v52;
    if (v21 || (uint64_t result = sub_1B3A1CD60(a1, result, v18, v19, v20), !v2))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)v17 + 296))(result) == 2
        || (uint64_t result = sub_1B3A1C5B8(a1), !v2))
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        sub_1B3A20734();
        unint64_t v23 = sub_1B3A70E70();
        uint64_t v24 = v51;
        (*(void (**)(uint64_t))(*(void *)v51 + 320))(v23);
        *(void *)&v53[0] = 0xD000000000000010;
        *((void *)&v53[0] + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0x80000001B3A7A980;
        char v25 = v50;
        double v26 = sub_1B3A70C90();
        if (v2)
        {
          return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v22, v25);
        }
        else
        {
          uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 208))(v26);
          int v28 = *(void *)(v27 + 16);
          if (v28)
          {
            char v29 = v27 + 56;
            do
            {
              v29 += 32;
              sub_1B3A1DC38();
              swift_bridgeObjectRelease();
              --v28;
            }
            while (v28);
          }
          uint64_t v30 = swift_bridgeObjectRelease();
          unint64_t v31 = v51;
          uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 232))(v30);
          char v32 = *(void *)(v48 + 16);
          if (v32)
          {
            uint64_t v33 = 0;
            uint64_t v47 = v48 + 32;
            BOOL v45 = v32;
            do
            {
              if (v33 >= *(void *)(v48 + 16))
              {
                __break(1u);
                JUMPOUT(0x1B3A1DBF8);
              }
              uint64_t v36 = *(void *)(v47 + 40 * v33++ + 32);
              uint64_t v37 = *(void *)(v36 + 16);
              if (v37)
              {
                char v46 = v33;
                swift_bridgeObjectRetain_n();
                uint64_t v38 = v36 + 48;
                do
                {
                  swift_bridgeObjectRetain();
                  sub_1B3A1E24C();
                  swift_bridgeObjectRelease();
                  v38 += 24;
                  --v37;
                }
                while (v37);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                char v32 = v45;
                uint64_t v33 = v46;
              }
              swift_bridgeObjectRelease();
              char v34 = v49;
              double v35 = v50;
              unint64_t v31 = v51;
            }
            while (v33 != v32);
            uint64_t v39 = swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v39 = swift_bridgeObjectRelease();
            char v34 = v49;
            double v35 = v50;
          }
          uint64_t v40 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 368))(v39);
          if (v40)
          {
            char v41 = v40;
            *(void *)&v53[0] = v40;
            char v42 = v40;
            __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5980);
            sub_1B3A70300();
            *(void *)&v53[0] = 0x726F727265;
            *((void *)&v53[0] + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0xE500000000000000;
            char v43 = v52;
            sub_1B3A70C80();
            swift_bridgeObjectRelease();

            return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v43, v35);
          }
          else
          {
            return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v52, v35);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B3A1DC38()
{
  swift_bridgeObjectRetain();
  sub_1B3A703A0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D00);
  sub_1B3A70CA0();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    sub_1B3A70CA0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    sub_1B3A70CD0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    sub_1B3A70CA0();
    swift_bridgeObjectRelease();
    sub_1B3A709B0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A70CA0();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A1DEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = a5 + 48; ; i += 24)
    {
      swift_bridgeObjectRetain();
      sub_1B3A1E24C();
      if (v5) {
        break;
      }
      swift_bridgeObjectRelease();
      if (!--v6) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A1DFA4()
{
  sub_1B39B4CD4(v0 + 64, (uint64_t)v2, &qword_1E9CD5CC8);
  sub_1B3A1F568((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1B3A1F5E4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B3A1E018()
{
  uint64_t v0 = swift_allocObject();
  sub_1B3A1E050();
  return v0;
}

uint64_t sub_1B3A1E050()
{
  *(double *)(v0 + 16) = sub_1B39AC9F0();
  *(void *)(v0 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1;
  *(void *)(v0 + 32) = v2;
  *(double *)(v0 + 40) = sub_1B39AC9F0();
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v4;
  sub_1B3A1F4B0((uint64_t)v7);
  sub_1B39B4CD4((uint64_t)v7, v0 + 64, &qword_1E9CD5CC8);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 280) = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 288) = v5;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(unsigned char *)(v0 + 344) = 1;
  *(void *)(v0 + 360) = 0;
  *(void *)(v0 + 368) = 0;
  *(void *)(v0 + 352) = 2;
  *(unsigned char *)(v0 + 376) = 0;
  *(_OWORD *)(v0 + 384) = xmmword_1B3A74050;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 0;
  *(void *)(v0 + 416) = 0;
  return v0;
}

uint64_t sub_1B3A1E0FC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 392))();
}

uint64_t String.stringValue.getter(uint64_t a1)
{
  return a1;
}

uint64_t String.intValue.getter()
{
  return 0;
}

Swift::String __swiftcall String.init(intValue:)(Swift::Int intValue)
{
  uint64_t v1 = sub_1B3A70D00();
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t sub_1B3A1E1CC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B3A1E1FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_1B3A1E204@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1B3A70D00();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B3A1E24C()
{
  swift_bridgeObjectRetain();
  sub_1B3A703A0();
  sub_1B3A703A0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D00);
  sub_1B3A70CA0();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v0)
  {
    sub_1B3A709B0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A703A0();
    sub_1B3A70CA0();
    swift_bridgeObjectRelease();
    sub_1B3A709B0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1B3A703A0();
    sub_1B3A703A0();
    sub_1B3A70CA0();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A1E47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A1DEB8(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1B3A1E49C()
{
  return sub_1B3A1DC38();
}

uint64_t sub_1B3A1E4BC(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1B3A1F1EC((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_1B3A1E610(v5);
  *a1 = v2;
  return result;
}

void *sub_1B3A1E528(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD58C0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  int v3[2] = v1;
  _OWORD v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1B3A1F200((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1B3A21B4C();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_1B3A1E610(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1B3A70CE0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_1B3A1ECB8(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_151;
  }
  uint64_t v101 = result;
  char v98 = a1;
  if (v3 <= 1)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    uint64_t v104 = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v10 = MEMORY[0x1E4FBC860];
LABEL_117:
      uint64_t result = v10;
      uint64_t v100 = v7;
      if (v11 >= 2)
      {
        uint64_t v91 = *v98;
        do
        {
          unint64_t v92 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_146;
          }
          if (!v91) {
            goto LABEL_159;
          }
          uint64_t v93 = result;
          uint64_t v94 = *(void *)(result + 32 + 16 * v92);
          uint64_t v95 = *(void *)(result + 32 + 16 * (v11 - 1) + 8);
          uint64_t result = sub_1B3A1ED88((char *)(v91 + 16 * v94), (char *)(v91 + 16 * *(void *)(result + 32 + 16 * (v11 - 1))), v91 + 16 * v95, v104);
          if (v1) {
            break;
          }
          if (v95 < v94) {
            goto LABEL_147;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1B3A0D7F4(v93);
            uint64_t v93 = result;
          }
          if (v92 >= *(void *)(v93 + 16)) {
            goto LABEL_148;
          }
          uint64_t v96 = (void *)(v93 + 32 + 16 * v92);
          *uint64_t v96 = v94;
          v96[1] = v95;
          unint64_t v97 = *(void *)(v93 + 16);
          if (v11 > v97) {
            goto LABEL_149;
          }
          memmove((void *)(v93 + 32 + 16 * (v11 - 1)), (const void *)(v93 + 32 + 16 * v11), 16 * (v97 - v11));
          uint64_t result = v93;
          *(void *)(v93 + 16) = v97 - 1;
          unint64_t v11 = v97 - 1;
        }
        while (v97 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v100 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v100 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = sub_1B3A70590();
    *(void *)(result + 16) = v6;
    uint64_t v100 = result;
    uint64_t v104 = (char *)(result + 32);
  }
  uint64_t v8 = 0;
  uint64_t v9 = *a1;
  uint64_t v99 = v9 + 8;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v102 = v3;
  while (1)
  {
    uint64_t v12 = v8++;
    if (v8 >= v3) {
      goto LABEL_45;
    }
    uint64_t v13 = (uint64_t *)(v9 + 16 * v8);
    uint64_t result = *v13;
    uint64_t v14 = v13[1];
    char v15 = (void *)(v9 + 16 * v12);
    if (result == *v15 && v14 == v15[1])
    {
      uint64_t v18 = v12 + 2;
      if (v12 + 2 >= v3) {
        goto LABEL_44;
      }
      int v17 = 0;
    }
    else
    {
      uint64_t result = sub_1B3A70D20();
      int v17 = result;
      uint64_t v18 = v12 + 2;
      if (v12 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    char v19 = (void *)(v99 + 16 * v18);
    do
    {
      uint64_t result = *(v19 - 1);
      char v21 = (void *)(v9 + 16 * v8);
      if (result == *v21 && *v19 == v21[1])
      {
        if (v17) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t result = sub_1B3A70D20();
        if ((v17 ^ result)) {
          goto LABEL_36;
        }
      }
      v19 += 2;
      uint64_t v20 = v18 + 1;
      uint64_t v8 = v18;
      uint64_t v18 = v20;
    }
    while (v20 < v3);
    uint64_t v18 = v20;
LABEL_36:
    uint64_t v8 = v18;
    if (v17)
    {
LABEL_37:
      if (v18 < v12) {
        goto LABEL_155;
      }
      if (v12 < v18)
      {
        uint64_t v23 = 16 * v18;
        uint64_t v24 = 16 * v12;
        uint64_t v25 = v18;
        uint64_t v26 = v12;
        do
        {
          if (v26 != --v25)
          {
            if (!v9) {
              goto LABEL_158;
            }
            uint64_t v27 = v9 + v23;
            uint64_t v28 = *(void *)(v9 + v24);
            uint64_t v29 = *(void *)(v9 + v24 + 8);
            *(_OWORD *)(v9 + v++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v9 + v23 - 16);
            *(void *)(v27 - 16) = v28;
            *(void *)(v27 - 8) = v29;
          }
          ++v26;
          v23 -= 16;
          v24 += 16;
        }
        while (v26 < v25);
      }
LABEL_44:
      uint64_t v8 = v18;
    }
LABEL_45:
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12)) {
        goto LABEL_150;
      }
      if (v8 - v12 < v101) {
        break;
      }
    }
LABEL_66:
    if (v8 < v12) {
      goto LABEL_145;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1B3A0D63C(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
      uint64_t v10 = result;
    }
    unint64_t v38 = *(void *)(v10 + 16);
    unint64_t v37 = *(void *)(v10 + 24);
    unint64_t v11 = v38 + 1;
    if (v38 >= v37 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B3A0D63C((char *)(v37 > 1), v38 + 1, 1, (char *)v10);
      uint64_t v10 = result;
    }
    *(void *)(v10 + 16) = v11;
    uint64_t v39 = v10 + 32;
    uint64_t v40 = (uint64_t *)(v10 + 32 + 16 * v38);
    *uint64_t v40 = v12;
    v40[1] = v8;
    if (v38)
    {
      uint64_t v103 = v8;
      while (1)
      {
        unint64_t v41 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v46 = v39 + 16 * v11;
          uint64_t v47 = *(void *)(v46 - 64);
          uint64_t v48 = *(void *)(v46 - 56);
          BOOL v52 = __OFSUB__(v48, v47);
          uint64_t v49 = v48 - v47;
          if (v52) {
            goto LABEL_134;
          }
          uint64_t v51 = *(void *)(v46 - 48);
          uint64_t v50 = *(void *)(v46 - 40);
          BOOL v52 = __OFSUB__(v50, v51);
          uint64_t v44 = v50 - v51;
          char v45 = v52;
          if (v52) {
            goto LABEL_135;
          }
          unint64_t v53 = v11 - 2;
          char v54 = (uint64_t *)(v39 + 16 * (v11 - 2));
          uint64_t v56 = *v54;
          uint64_t v55 = v54[1];
          BOOL v52 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          if (v52) {
            goto LABEL_136;
          }
          BOOL v52 = __OFADD__(v44, v57);
          uint64_t v58 = v44 + v57;
          if (v52) {
            goto LABEL_138;
          }
          if (v58 >= v49)
          {
            uint64_t v76 = (uint64_t *)(v39 + 16 * v41);
            uint64_t v78 = *v76;
            uint64_t v77 = v76[1];
            BOOL v52 = __OFSUB__(v77, v78);
            uint64_t v79 = v77 - v78;
            if (v52) {
              goto LABEL_144;
            }
            BOOL v69 = v44 < v79;
            goto LABEL_104;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v70 = *(void *)(v10 + 32);
            uint64_t v71 = *(void *)(v10 + 40);
            BOOL v52 = __OFSUB__(v71, v70);
            uint64_t v63 = v71 - v70;
            char v64 = v52;
            goto LABEL_98;
          }
          uint64_t v43 = *(void *)(v10 + 32);
          uint64_t v42 = *(void *)(v10 + 40);
          BOOL v52 = __OFSUB__(v42, v43);
          uint64_t v44 = v42 - v43;
          char v45 = v52;
        }
        if (v45) {
          goto LABEL_137;
        }
        unint64_t v53 = v11 - 2;
        char v59 = (uint64_t *)(v39 + 16 * (v11 - 2));
        uint64_t v61 = *v59;
        uint64_t v60 = v59[1];
        BOOL v62 = __OFSUB__(v60, v61);
        uint64_t v63 = v60 - v61;
        char v64 = v62;
        if (v62) {
          goto LABEL_139;
        }
        uint64_t v65 = (uint64_t *)(v39 + 16 * v41);
        uint64_t v67 = *v65;
        uint64_t v66 = v65[1];
        BOOL v52 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v52) {
          goto LABEL_141;
        }
        if (__OFADD__(v63, v68)) {
          goto LABEL_143;
        }
        if (v63 + v68 >= v44)
        {
          BOOL v69 = v44 < v68;
LABEL_104:
          if (v69) {
            unint64_t v41 = v53;
          }
          goto LABEL_106;
        }
LABEL_98:
        if (v64) {
          goto LABEL_140;
        }
        char v72 = (uint64_t *)(v39 + 16 * v41);
        uint64_t v74 = *v72;
        uint64_t v73 = v72[1];
        BOOL v52 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v52) {
          goto LABEL_142;
        }
        if (v75 < v63) {
          goto LABEL_15;
        }
LABEL_106:
        unint64_t v80 = v41 - 1;
        if (v41 - 1 >= v11)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v81 = v9;
        if (!v9) {
          goto LABEL_157;
        }
        uint64_t v82 = v10;
        uint64_t v83 = (uint64_t *)(v39 + 16 * v80);
        uint64_t v84 = *v83;
        uint64_t v85 = v39;
        unint64_t v86 = v41;
        uint64_t v87 = (void *)(v39 + 16 * v41);
        uint64_t v88 = v87[1];
        uint64_t v89 = v81;
        uint64_t result = sub_1B3A1ED88((char *)(v81 + 16 * *v83), (char *)(v81 + 16 * *v87), v81 + 16 * v88, v104);
        if (v1) {
          goto LABEL_114;
        }
        if (v88 < v84) {
          goto LABEL_131;
        }
        if (v86 > *(void *)(v82 + 16)) {
          goto LABEL_132;
        }
        *uint64_t v83 = v84;
        *(void *)(v85 + 16 * v80 + 8) = v88;
        unint64_t v90 = *(void *)(v82 + 16);
        if (v86 >= v90) {
          goto LABEL_133;
        }
        uint64_t v10 = v82;
        unint64_t v11 = v90 - 1;
        uint64_t result = (uint64_t)memmove(v87, v87 + 2, 16 * (v90 - 1 - v86));
        uint64_t v39 = v85;
        *(void *)(v82 + 16) = v90 - 1;
        uint64_t v9 = v89;
        uint64_t v8 = v103;
        if (v90 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    uint64_t v3 = v102;
    if (v8 >= v102)
    {
      uint64_t v7 = v100;
      goto LABEL_117;
    }
  }
  if (__OFADD__(v12, v101)) {
    goto LABEL_153;
  }
  if (v12 + v101 >= v3) {
    uint64_t v30 = v3;
  }
  else {
    uint64_t v30 = v12 + v101;
  }
  if (v30 >= v12)
  {
    if (v8 != v30)
    {
      unint64_t v31 = (uint64_t *)(v9 + 16 * v8);
      do
      {
        char v32 = (uint64_t *)(v9 + 16 * v8);
        uint64_t result = *v32;
        uint64_t v33 = v32[1];
        uint64_t v34 = v12;
        double v35 = v31;
        do
        {
          if (result == *(v35 - 2) && v33 == *(v35 - 1)) {
            break;
          }
          uint64_t result = sub_1B3A70D20();
          if ((result & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_156;
          }
          uint64_t result = *v35;
          uint64_t v33 = v35[1];
          *(_OWORD *)double v35 = *((_OWORD *)v35 - 1);
          *(v35 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v33;
          *(v35 - 2) = result;
          v35 -= 2;
          ++v34;
        }
        while (v8 != v34);
        ++v8;
        v31 += 2;
      }
      while (v8 != v30);
      uint64_t v8 = v30;
    }
    goto LABEL_66;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
  return result;
}

uint64_t sub_1B3A1ECB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_1B3A70D20(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1B3A1ED88(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 15;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[16 * v13] <= a4) {
      memmove(a4, __src, 16 * v13);
    }
    uint64_t v14 = &v4[16 * v13];
    if (v7 >= v6 || v11 < 16) {
      goto LABEL_48;
    }
    int v17 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v18 = v17 + 16;
      char v19 = v6 - 16;
      BOOL v20 = *((void *)v14 - 2) == *((void *)v6 - 2) && *((void *)v14 - 1) == *((void *)v6 - 1);
      if (v20 || (sub_1B3A70D20() & 1) == 0)
      {
        char v19 = v14 - 16;
        if (v18 != v14)
        {
          v14 -= 16;
LABEL_45:
          *(_OWORD *)int v17 = *(_OWORD *)v19;
          goto LABEL_46;
        }
        BOOL v21 = v17 >= v14;
        v14 -= 16;
        if (v21) {
          goto LABEL_45;
        }
      }
      else
      {
        if (v18 != v6)
        {
          v6 -= 16;
          goto LABEL_45;
        }
        BOOL v21 = v17 >= v6;
        v6 -= 16;
        if (v21) {
          goto LABEL_45;
        }
      }
LABEL_46:
      if (v6 > v7)
      {
        v17 -= 16;
        if (v14 > v4) {
          continue;
        }
      }
      goto LABEL_48;
    }
  }
  if (a4 != __dst || &__dst[16 * v10] <= a4) {
    memmove(a4, __dst, 16 * v10);
  }
  uint64_t v14 = &v4[16 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (v15 || (sub_1B3A70D20() & 1) == 0) {
        break;
      }
      char v16 = v6;
      BOOL v15 = v7 == v6;
      v6 += 16;
      if (!v15) {
        goto LABEL_20;
      }
LABEL_21:
      v7 += 16;
      if (v4 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_23;
      }
    }
    char v16 = v4;
    BOOL v15 = v7 == v4;
    v4 += 16;
    if (v15) {
      goto LABEL_21;
    }
LABEL_20:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v6 = v7;
LABEL_48:
  if (v6 != v4 || v6 >= &v4[(v14 - v4 + (v14 - v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0]) {
    memmove(v6, v4, 16 * ((v14 - v4) / 16));
  }
  return 1;
}

char *sub_1B3A1EFB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D48);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B3A1F0B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D38);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D40);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3A1F1EC(uint64_t a1)
{
  return sub_1B3A0540C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B3A1F200(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *char v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    void v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  size_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    BOOL v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *size_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1B3A1F400(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RecordingOptions.Options(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B3A1F45C()
{
  unint64_t result = qword_1E9CD76A0;
  if (!qword_1E9CD76A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD76A0);
  }
  return result;
}

double sub_1B3A1F4B0(uint64_t a1)
{
  *(unsigned char *)(a1 + 208) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1B3A1F4D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B3A1F568(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4);
  return a1;
}

uint64_t sub_1B3A1F5E4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B3A1F674(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D614E6E616C70 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465646461 && a2 == 0xE500000000000000 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64657474696D6FLL && a2 == 0xE700000000000000 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x72656469766F7270 && a2 == 0xE900000000000073 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73726579616CLL && a2 == 0xE600000000000000 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001B3A7AA40 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B3A7AA60 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x73736572706D6F63 && a2 == 0xE800000000000000 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7453796669746F6ELL && a2 == 0xEB00000000747261 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B3A7AA80 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B3A7AAA0 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65644B6E4F646E65 && a2 == 0xEF657A6953677562 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6E45796669746F6ELL && a2 == 0xE900000000000064 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001B3A7AAC0 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B3A7AAE0 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B3A7AB00 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x73736572706D6F63 && a2 == 0xEE00676E69727544 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x7355656661736E75 && a2 == 0xEA00000000006465 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B3A7AB20 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001B3A7AB40 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001B3A7AB60 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001B3A7AB80 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B3A7ABA0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else
  {
    char v6 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v6) {
      return 22;
    }
    else {
      return 23;
    }
  }
}

uint64_t sub_1B3A1FF9C()
{
  unint64_t v0 = sub_1B3A70B80();
  swift_bridgeObjectRelease();
  if (v0 >= 8) {
    return 8;
  }
  else {
    return v0;
  }
}

unint64_t sub_1B3A1FFE8()
{
  unint64_t result = qword_1E9CD76A8;
  if (!qword_1E9CD76A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD76A8);
  }
  return result;
}

unint64_t sub_1B3A2003C()
{
  unint64_t result = qword_1E9CD76B0[0];
  if (!qword_1E9CD76B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD76B0);
  }
  return result;
}

uint64_t sub_1B3A20090(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001B3A7ABC0 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B3A7ABE0 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F436B6E756863 && a2 == 0xEA0000000000746ELL || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001B3A7AC00 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B3A7AC20)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1B3A202FC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001B3A7AC40 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001B3A7AC60 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B3A7AC80)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B3A20440(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79426465646E65 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001B3A7A940 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001B3A7A920 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001B3A7A8F0 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x80000001B3A7A8C0 || (sub_1B3A70D20() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B3A7A8A0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_1B3A70D20();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1B3A20690(uint64_t a1)
{
  return a1;
}

unint64_t sub_1B3A206C8()
{
  unint64_t result = qword_1E9CD5CF8;
  if (!qword_1E9CD5CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5CF8);
  }
  return result;
}

uint64_t sub_1B3A2071C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(vktrace_session_set_default_event_names_enabled(global_session, 1) = -1;
  }
  return (v1 + 1);
}

unint64_t sub_1B3A20734()
{
  unint64_t result = qword_1E9CD5D08;
  if (!qword_1E9CD5D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5D08);
  }
  return result;
}

unint64_t sub_1B3A2078C()
{
  unint64_t result = qword_1E9CD5D10;
  if (!qword_1E9CD5D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5D10);
  }
  return result;
}

unint64_t sub_1B3A207E4()
{
  unint64_t result = qword_1E9CD5D18;
  if (!qword_1E9CD5D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5D18);
  }
  return result;
}

unint64_t sub_1B3A2083C()
{
  unint64_t result = qword_1E9CD5D20;
  if (!qword_1E9CD5D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5D20);
  }
  return result;
}

unint64_t sub_1B3A20894()
{
  unint64_t result = qword_1E9CD5D28;
  if (!qword_1E9CD5D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD5D28);
  }
  return result;
}

uint64_t sub_1B3A208E8()
{
  return MEMORY[0x1E4FBB218];
}

uint64_t sub_1B3A208F4()
{
  return MEMORY[0x1E4FBB208];
}

uint64_t type metadata accessor for RecordInfo()
{
  return self;
}

uint64_t destroy for RecordInfo.Usage()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RecordInfo.Usage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  int v8 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = v8;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 145) = *(_DWORD *)(a2 + 145);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v10;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RecordInfo.Usage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  uint64_t v5 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  LODWORD(v5) = *(_DWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v6;
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  uint64_t v7 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v7;
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v8;
  uint64_t v9 = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = v9;
  return a1;
}

__n128 __swift_memcpy209_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for RecordInfo.Usage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecordInfo.Usage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 209)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordInfo.Usage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 208) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 209) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 209) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.Usage()
{
  return &type metadata for RecordInfo.Usage;
}

unsigned char *storeEnumTagSinglePayload for RecordInfo.Phase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A20FA8);
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.Phase()
{
  return &type metadata for RecordInfo.Phase;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RecordInfo.FileSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RecordInfo.FileSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.FileSize()
{
  return &type metadata for RecordInfo.FileSize;
}

uint64_t getEnumTagSinglePayload for RecordInfo.LostEvents(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordInfo.LostEvents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.LostEvents()
{
  return &type metadata for RecordInfo.LostEvents;
}

uint64_t getEnumTagSinglePayload for RecordInfo.EndReason(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 8) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordInfo.EndReason(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 2 * -a2;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1B3A211A4(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 24);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1B3A211C4(uint64_t result)
{
  *(unsigned char *)(result + 24) &= 0x3Fu;
  return result;
}

uint64_t sub_1B3A211D4(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(unsigned char *)(result + 24) & 1 | ((_BYTE)a2 << 6);
    *(void *)(result + 8) &= 1uLL;
    *(unsigned char *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  }
  else
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 2;
    *(unsigned char *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.EndReason()
{
  return &type metadata for RecordInfo.EndReason;
}

ValueMetadata *type metadata accessor for RecordInfo.EndReason.CodingKeys()
{
  return &type metadata for RecordInfo.EndReason.CodingKeys;
}

uint64_t destroy for Throughput()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Throughput(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Throughput(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for Throughput(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Throughput(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Throughput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Throughput()
{
  return &type metadata for Throughput;
}

uint64_t getEnumTagSinglePayload for TimeSpan(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimeSpan(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TimeSpan()
{
  return &type metadata for TimeSpan;
}

unsigned char *storeEnumTagSinglePayload for RecordInfo.LostEvents.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A214D4);
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.LostEvents.CodingKeys()
{
  return &type metadata for RecordInfo.LostEvents.CodingKeys;
}

uint64_t getEnumTagSinglePayload for StandardFile.Mode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s6ktrace10RecordInfoC9EndReasonO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A21668);
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.FileSize.CodingKeys()
{
  return &type metadata for RecordInfo.FileSize.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RecordInfo.Usage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEA) {
    goto LABEL_17;
  }
  if (a2 + 22 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 22) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 22;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v8 = v6 - 23;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RecordInfo.Usage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE9)
  {
    unsigned int v6 = ((a2 - 234) >> 8) + 1;
    *__n128 result = a2 + 22;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B3A217FCLL);
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 22;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.Usage.CodingKeys()
{
  return &type metadata for RecordInfo.Usage.CodingKeys;
}

unint64_t sub_1B3A21838()
{
  unint64_t result = qword_1E9CD7EC0[0];
  if (!qword_1E9CD7EC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD7EC0);
  }
  return result;
}

unint64_t sub_1B3A21890()
{
  unint64_t result = qword_1E9CD80D0[0];
  if (!qword_1E9CD80D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD80D0);
  }
  return result;
}

unint64_t sub_1B3A218E8()
{
  unint64_t result = qword_1E9CD82E0[0];
  if (!qword_1E9CD82E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD82E0);
  }
  return result;
}

unint64_t sub_1B3A21940()
{
  unint64_t result = qword_1E9CD83F0;
  if (!qword_1E9CD83F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD83F0);
  }
  return result;
}

unint64_t sub_1B3A21998()
{
  unint64_t result = qword_1E9CD83F8[0];
  if (!qword_1E9CD83F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD83F8);
  }
  return result;
}

unint64_t sub_1B3A219F0()
{
  unint64_t result = qword_1E9CD8480;
  if (!qword_1E9CD8480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD8480);
  }
  return result;
}

unint64_t sub_1B3A21A48()
{
  unint64_t result = qword_1E9CD8488[0];
  if (!qword_1E9CD8488[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD8488);
  }
  return result;
}

unint64_t sub_1B3A21AA0()
{
  unint64_t result = qword_1E9CD8510;
  if (!qword_1E9CD8510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9CD8510);
  }
  return result;
}

unint64_t sub_1B3A21AF8()
{
  unint64_t result = qword_1E9CD8518[0];
  if (!qword_1E9CD8518[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9CD8518);
  }
  return result;
}

uint64_t sub_1B3A21B4C()
{
  return swift_release();
}

BOOL static PlanSource.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PlanSource.hash(into:)()
{
  return sub_1B3A70E10();
}

uint64_t PlanSource.hashValue.getter()
{
  return sub_1B3A70E50();
}

uint64_t sub_1B3A21BE0(uint64_t a1, double a2)
{
  uint64_t result = sub_1B3A3DF7C();
  double v5 = (double)result * a2;
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_1B3A3E018();
  uint64_t v6 = result * a1;
  if ((unsigned __int128)(result * (__int128)a1) >> 64 != (result * a1) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)v5 + v6;
  if (__OFADD__((uint64_t)v5, v6)) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t sub_1B3A21C80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A34CDC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B3A21CA8(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1B3A21CB4(uint64_t a1)
{
  unint64_t v2 = sub_1B39B5BB4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A21CF0(uint64_t a1)
{
  unint64_t v2 = sub_1B39B5BB4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A21D2C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1B3A34DF0(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_1B3A21D88(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B3A26238(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B39A7FD0);
}

uint64_t sub_1B3A21DA0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x696577746867696CLL;
  }
  else {
    uint64_t v3 = 0x6C616E696769726FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEB00000000746867;
  }
  if (a2) {
    uint64_t v5 = 0x696577746867696CLL;
  }
  else {
    uint64_t v5 = 0x6C616E696769726FLL;
  }
  if (a2) {
    unint64_t v6 = 0xEB00000000746867;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1B3A70D20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B3A21E50(uint64_t a1, uint64_t a2)
{
  return sub_1B3A262E8(a1, a2, (void (*)(uint64_t))sub_1B39A7FD0);
}

uint64_t sub_1B3A21E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A2636C(a1, a2, a3, (void (*)(void))sub_1B39A7FD0);
}

uint64_t sub_1B3A21E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B3A263DC(a1, a2, a3, (void (*)(uint64_t))sub_1B39A7FD0);
}

uint64_t sub_1B3A21E98@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B3A372C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B3A21ED0()
{
  return sub_1B3A70530();
}

uint64_t sub_1B3A21F30(uint64_t result, uint64_t a2)
{
  if (result < 1)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v3 = result;
  int64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = (int8x16_t *)MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v25 = (int8x16_t *)MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1B3A2C464(0, v4, 0);
    uint64_t v6 = 0;
    uint64_t v5 = v25;
    unint64_t v7 = v25[1].u64[0];
    do
    {
      uint64_t v8 = *(char *)(a2 + v6 + 32);
      unint64_t v9 = v25[1].u64[1];
      if (v7 >= v9 >> 1) {
        sub_1B3A2C464((char *)(v9 > 1), v7 + 1, 1);
      }
      ++v6;
      __int32 v10 = dword_1B3A7596C[v8];
      v25[1].i64[0] = v7 + 1;
      v25[2].i32[v7++] = v10;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
  }
  unint64_t v11 = v5[1].u64[0];
  if (v11)
  {
    if (v11 < 8)
    {
      uint64_t v12 = 0;
      __int32 v13 = 0;
LABEL_15:
      unint64_t v20 = v11 - v12;
      uint64_t v21 = &v5[2].i32[v12];
      do
      {
        int v22 = *v21++;
        v13 |= v22;
        --v20;
      }
      while (v20);
      goto LABEL_17;
    }
    uint64_t v12 = v11 & 0x7FFFFFFFFFFFFFF8;
    int64_t v14 = v5 + 3;
    int8x16_t v15 = 0uLL;
    uint64_t v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    int8x16_t v17 = 0uLL;
    do
    {
      int8x16_t v15 = vorrq_s8(v14[-1], v15);
      int8x16_t v17 = vorrq_s8(*v14, v17);
      v14 += 2;
      v16 -= 8;
    }
    while (v16);
    int8x16_t v18 = vorrq_s8(v17, v15);
    int8x8_t v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
    __int32 v13 = v19.i32[0] | v19.i32[1];
    if (v11 != v12) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 > 0xFFFFFFFFLL)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  uint64_t result = kperf_action_samplers_set();
  if ((result & 0x80000000) != 0)
  {
    int v23 = MEMORY[0x1B3EBD410]();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    strcpy(v24, "set samplers");
    v24[13] = 0;
    *((_WORD *)v24 + 7) = -5120;
    *((_DWORD *)v24 + 4) = v23;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B3A22164(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v1, 0);
  uint64_t v2 = v27;
  uint64_t result = sub_1B3A34280(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  int64_t v21 = v1;
  int v22 = v5;
  uint64_t v23 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v24 = v7;
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
    uint64_t v25 = *v12;
    uint64_t v26 = v12[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    sub_1B3A703A0();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v13 = *(void *)(v27 + 16);
    unint64_t v14 = *(void *)(v27 + 24);
    if (v13 >= v14 >> 1) {
      uint64_t result = (uint64_t)sub_1B3A052F4((char *)(v14 > 1), v13 + 1, 1);
    }
    *(void *)(v27 + 16) = v13 + 1;
    uint64_t v15 = v27 + 16 * v13;
    *(void *)(v15 + 32) = v25;
    *(void *)(v15 + 40) = v26;
    int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v16 = *(void *)(v23 + 8 * v11);
    if ((v16 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v22;
    if (*(_DWORD *)(a1 + 36) != v22) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      int64_t v9 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v21;
    }
    else
    {
      unint64_t v18 = v11 + 1;
      unint64_t v19 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v21;
      if (v11 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v11)
          {
            unint64_t v20 = *(void *)(a1 + 80 + 8 * v11++);
            if (v20)
            {
              unint64_t v18 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v24 + 1;
    uint64_t v6 = v9;
    if (v24 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1B3A223CC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v67 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v1, 0);
  uint64_t v2 = v67;
  uint64_t result = sub_1B3A34280(v3);
  if (result < 0) {
    goto LABEL_31;
  }
  unint64_t v6 = result;
  if (result >= 1 << *(unsigned char *)(v3 + 32)) {
    goto LABEL_31;
  }
  uint64_t v7 = v3 + 64;
  uint64_t v34 = v3 + 80;
  int64_t v35 = v1;
  uint64_t v8 = 1;
  int v36 = v5;
  uint64_t v37 = v3 + 64;
  while (1)
  {
    unint64_t v9 = v6 >> 6;
    if ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
      break;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_27;
    }
    uint64_t v38 = v8;
    int64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = *(void *)(v3 + 56) + 200 * v6;
    long long v40 = *(_OWORD *)v13;
    long long v14 = *(_OWORD *)(v13 + 16);
    long long v15 = *(_OWORD *)(v13 + 32);
    long long v16 = *(_OWORD *)(v13 + 64);
    long long v43 = *(_OWORD *)(v13 + 48);
    long long v44 = v16;
    long long v41 = v14;
    long long v42 = v15;
    long long v17 = *(_OWORD *)(v13 + 80);
    long long v18 = *(_OWORD *)(v13 + 96);
    long long v19 = *(_OWORD *)(v13 + 128);
    long long v47 = *(_OWORD *)(v13 + 112);
    long long v48 = v19;
    long long v45 = v17;
    long long v46 = v18;
    long long v20 = *(_OWORD *)(v13 + 144);
    long long v21 = *(_OWORD *)(v13 + 160);
    long long v22 = *(_OWORD *)(v13 + 176);
    uint64_t v52 = *(void *)(v13 + 192);
    long long v50 = v21;
    long long v51 = v22;
    long long v49 = v20;
    uint64_t v39 = v11;
    v53[0] = v11;
    v53[1] = v12;
    long long v54 = v40;
    long long v55 = v41;
    long long v56 = v42;
    long long v57 = v43;
    long long v58 = v44;
    long long v59 = v45;
    long long v60 = v46;
    long long v61 = v47;
    long long v62 = v19;
    long long v63 = v20;
    long long v64 = v21;
    long long v65 = v22;
    uint64_t v66 = v52;
    swift_bridgeObjectRetain_n();
    sub_1B3A38924((uint64_t)&v40);
    uint64_t result = sub_1B3A3B47C((uint64_t)v53);
    uint64_t v67 = v2;
    uint64_t v23 = v3;
    unint64_t v25 = *(void *)(v2 + 16);
    unint64_t v24 = *(void *)(v2 + 24);
    if (v25 >= v24 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B3A052F4((char *)(v24 > 1), v25 + 1, 1);
      uint64_t v2 = v67;
    }
    *(void *)(v2 + 16) = v25 + 1;
    uint64_t v26 = v2 + 16 * v25;
    *(void *)(v26 + 32) = v39;
    *(void *)(v26 + 40) = v12;
    char v27 = *(unsigned char *)(v23 + 32);
    if ((uint64_t)v6 >= 1 << v27) {
      goto LABEL_28;
    }
    uint64_t v7 = v37;
    uint64_t v28 = *(void *)(v37 + 8 * v9);
    if ((v28 & (1 << v6)) == 0) {
      goto LABEL_29;
    }
    uint64_t v3 = v23;
    int v5 = v36;
    if (*(_DWORD *)(v23 + 36) != v36) {
      goto LABEL_30;
    }
    unint64_t v29 = v28 & (-2 << (v6 & 0x3F));
    if (v29)
    {
      unint64_t v6 = __clz(__rbit64(v29)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v30 = v35;
    }
    else
    {
      unint64_t v31 = v9 + 1;
      unint64_t v32 = (unint64_t)((1 << v27) + 63) >> 6;
      int64_t v30 = v35;
      if (v9 + 1 >= v32) {
        goto LABEL_20;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v31);
      if (!v33)
      {
        while (v32 - 2 != v9)
        {
          unint64_t v33 = *(void *)(v34 + 8 * v9++);
          if (v33)
          {
            unint64_t v31 = v9 + 1;
            goto LABEL_19;
          }
        }
LABEL_20:
        unint64_t v6 = 1 << v27;
        goto LABEL_21;
      }
LABEL_19:
      unint64_t v6 = __clz(__rbit64(v33)) + (v31 << 6);
    }
LABEL_21:
    if (v38 == v30) {
      return v2;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v8 = v38 + 1;
      if ((uint64_t)v6 < 1 << v27) {
        continue;
      }
    }
    goto LABEL_31;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1B3A226A0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v67 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v1, 0);
  uint64_t v2 = v67;
  uint64_t result = sub_1B3A34280(v3);
  if (result < 0) {
    goto LABEL_31;
  }
  unint64_t v6 = result;
  if (result >= 1 << *(unsigned char *)(v3 + 32)) {
    goto LABEL_31;
  }
  uint64_t v7 = v3 + 64;
  uint64_t v34 = v3 + 80;
  int64_t v35 = v1;
  uint64_t v8 = 1;
  int v36 = v5;
  uint64_t v37 = v3 + 64;
  while (1)
  {
    unint64_t v9 = v6 >> 6;
    if ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
      break;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_27;
    }
    uint64_t v38 = v8;
    int64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = *(void *)(v3 + 56) + 200 * v6;
    long long v40 = *(_OWORD *)v13;
    long long v14 = *(_OWORD *)(v13 + 16);
    long long v15 = *(_OWORD *)(v13 + 32);
    long long v16 = *(_OWORD *)(v13 + 64);
    long long v43 = *(_OWORD *)(v13 + 48);
    long long v44 = v16;
    long long v41 = v14;
    long long v42 = v15;
    long long v17 = *(_OWORD *)(v13 + 80);
    long long v18 = *(_OWORD *)(v13 + 96);
    long long v19 = *(_OWORD *)(v13 + 128);
    long long v47 = *(_OWORD *)(v13 + 112);
    long long v48 = v19;
    long long v45 = v17;
    long long v46 = v18;
    long long v20 = *(_OWORD *)(v13 + 144);
    long long v21 = *(_OWORD *)(v13 + 160);
    long long v22 = *(_OWORD *)(v13 + 176);
    uint64_t v52 = *(void *)(v13 + 192);
    long long v50 = v21;
    long long v51 = v22;
    long long v49 = v20;
    uint64_t v39 = v11;
    v53[0] = v11;
    v53[1] = v12;
    long long v54 = v40;
    long long v55 = v41;
    long long v56 = v42;
    long long v57 = v43;
    long long v58 = v44;
    long long v59 = v45;
    long long v60 = v46;
    long long v61 = v47;
    long long v62 = v19;
    long long v63 = v20;
    long long v64 = v21;
    long long v65 = v22;
    uint64_t v66 = v52;
    swift_bridgeObjectRetain();
    sub_1B3A38924((uint64_t)&v40);
    swift_bridgeObjectRetain();
    sub_1B3A38924((uint64_t)&v40);
    sub_1B3A3B47C((uint64_t)v53);
    swift_bridgeObjectRetain();
    uint64_t result = sub_1B3A3B47C((uint64_t)v53);
    uint64_t v67 = v2;
    uint64_t v23 = v3;
    unint64_t v25 = *(void *)(v2 + 16);
    unint64_t v24 = *(void *)(v2 + 24);
    if (v25 >= v24 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B3A052F4((char *)(v24 > 1), v25 + 1, 1);
      uint64_t v2 = v67;
    }
    *(void *)(v2 + 16) = v25 + 1;
    uint64_t v26 = v2 + 16 * v25;
    *(void *)(v26 + 32) = v39;
    *(void *)(v26 + 40) = v12;
    char v27 = *(unsigned char *)(v23 + 32);
    if ((uint64_t)v6 >= 1 << v27) {
      goto LABEL_28;
    }
    uint64_t v7 = v37;
    uint64_t v28 = *(void *)(v37 + 8 * v9);
    if ((v28 & (1 << v6)) == 0) {
      goto LABEL_29;
    }
    uint64_t v3 = v23;
    int v5 = v36;
    if (*(_DWORD *)(v23 + 36) != v36) {
      goto LABEL_30;
    }
    unint64_t v29 = v28 & (-2 << (v6 & 0x3F));
    if (v29)
    {
      unint64_t v6 = __clz(__rbit64(v29)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v30 = v35;
    }
    else
    {
      unint64_t v31 = v9 + 1;
      unint64_t v32 = (unint64_t)((1 << v27) + 63) >> 6;
      int64_t v30 = v35;
      if (v9 + 1 >= v32) {
        goto LABEL_20;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v31);
      if (!v33)
      {
        while (v32 - 2 != v9)
        {
          unint64_t v33 = *(void *)(v34 + 8 * v9++);
          if (v33)
          {
            unint64_t v31 = v9 + 1;
            goto LABEL_19;
          }
        }
LABEL_20:
        unint64_t v6 = 1 << v27;
        goto LABEL_21;
      }
LABEL_19:
      unint64_t v6 = __clz(__rbit64(v33)) + (v31 << 6);
    }
LABEL_21:
    if (v38 == v30) {
      return v2;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v8 = v38 + 1;
      if ((uint64_t)v6 < 1 << v27) {
        continue;
      }
    }
    goto LABEL_31;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1B3A22990(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v69 = MEMORY[0x1E4FBC860];
  sub_1B3A052F4(0, v1, 0);
  uint64_t v2 = v69;
  uint64_t result = sub_1B3A34280(v3);
  if (result < 0) {
    goto LABEL_31;
  }
  unint64_t v6 = result;
  if (result >= 1 << *(unsigned char *)(v3 + 32)) {
    goto LABEL_31;
  }
  uint64_t v7 = v3 + 64;
  uint64_t v35 = v3 + 80;
  int64_t v36 = v1;
  uint64_t v8 = 1;
  int v37 = v5;
  uint64_t v38 = v3 + 64;
  uint64_t v39 = v3;
  while (1)
  {
    unint64_t v9 = v6 >> 6;
    if ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
      break;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_27;
    }
    uint64_t v40 = v8;
    uint64_t v10 = *(void *)(v3 + 56);
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v12 = v2;
    uint64_t v14 = *v11;
    uint64_t v13 = v11[1];
    long long v15 = (long long *)(v10 + 200 * v6);
    long long v42 = *v15;
    long long v16 = v15[1];
    long long v17 = v15[2];
    long long v18 = v15[4];
    long long v45 = v15[3];
    long long v46 = v18;
    long long v43 = v16;
    long long v44 = v17;
    long long v19 = v15[5];
    long long v20 = v15[6];
    long long v21 = v15[8];
    long long v49 = v15[7];
    long long v50 = v21;
    long long v47 = v19;
    long long v48 = v20;
    long long v22 = v15[9];
    long long v23 = v15[10];
    long long v24 = v15[11];
    uint64_t v54 = *((void *)v15 + 24);
    long long v52 = v23;
    long long v53 = v24;
    long long v51 = v22;
    v55[0] = v14;
    v55[1] = v13;
    long long v56 = v42;
    long long v57 = v43;
    long long v58 = v44;
    long long v59 = v45;
    long long v60 = v46;
    long long v61 = v47;
    long long v62 = v48;
    long long v63 = v49;
    long long v64 = v21;
    long long v65 = v22;
    long long v66 = v23;
    long long v67 = v24;
    uint64_t v68 = v54;
    swift_bridgeObjectRetain();
    sub_1B3A38924((uint64_t)&v42);
    swift_bridgeObjectRetain();
    sub_1B3A38924((uint64_t)&v42);
    sub_1B3A3B47C((uint64_t)v55);
    uint64_t v41 = v13;
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    swift_bridgeObjectRetain();
    sub_1B3A703A0();
    uint64_t v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B3A3B47C((uint64_t)v55);
    uint64_t v69 = v12;
    unint64_t v25 = *(void *)(v12 + 16);
    unint64_t v26 = *(void *)(v2 + 24);
    if (v25 >= v26 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B3A052F4((char *)(v26 > 1), v25 + 1, 1);
      uint64_t v2 = v69;
    }
    *(void *)(v2 + 16) = v25 + 1;
    uint64_t v27 = v2 + 16 * v25;
    *(void *)(v27 + 32) = v14;
    *(void *)(v27 + 40) = v41;
    uint64_t v3 = v39;
    char v28 = *(unsigned char *)(v39 + 32);
    if ((uint64_t)v6 >= 1 << v28) {
      goto LABEL_28;
    }
    uint64_t v7 = v38;
    uint64_t v29 = *(void *)(v38 + 8 * v9);
    if ((v29 & (1 << v6)) == 0) {
      goto LABEL_29;
    }
    int v5 = v37;
    if (*(_DWORD *)(v39 + 36) != v37) {
      goto LABEL_30;
    }
    unint64_t v30 = v29 & (-2 << (v6 & 0x3F));
    if (v30)
    {
      unint64_t v6 = __clz(__rbit64(v30)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v31 = v36;
    }
    else
    {
      unint64_t v32 = v9 + 1;
      unint64_t v33 = (unint64_t)((1 << v28) + 63) >> 6;
      int64_t v31 = v36;
      if (v9 + 1 >= v33) {
        goto LABEL_20;
      }
      unint64_t v34 = *(void *)(v38 + 8 * v32);
      if (!v34)
      {
        while (v33 - 2 != v9)
        {
          unint64_t v34 = *(void *)(v35 + 8 * v9++);
          if (v34)
          {
            unint64_t v32 = v9 + 1;
            goto LABEL_19;
          }
        }
LABEL_20:
        unint64_t v6 = 1 << v28;
        goto LABEL_21;
      }
LABEL_19:
      unint64_t v6 = __clz(__rbit64(v34)) + (v32 << 6);
    }
LABEL_21:
    if (v40 == v31) {
      return v2;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v8 = v40 + 1;
      if ((uint64_t)v6 < 1 << v28) {
        continue;
      }
    }
    goto LABEL_31;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1B3A22CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7372656C706D6173 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B3A70D20();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1B3A22D58(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1B3A22D64(uint64_t a1)
{
  unint64_t v2 = sub_1B39AD4C0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A22DA0(uint64_t a1)
{
  unint64_t v2 = sub_1B39AD4C0();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B3A22DDC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1B3A34F98(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

BOOL sub_1B3A22E08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1B3A22E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A35148(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3A22E48(uint64_t a1)
{
  unint64_t v2 = sub_1B39ACD0C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A22E84(uint64_t a1)
{
  unint64_t v2 = sub_1B39ACD0C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A22EC0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B3A23BE0(a1, &qword_1E9CD60C8, (void (*)(void))sub_1B39ACD0C, a2);
}

unint64_t sub_1B3A22EFC(uint64_t a1)
{
  BOOL v1 = __OFADD__(a1, 1);
  unint64_t result = a1 + 1;
  if (v1)
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!HIDWORD(result))
  {
    if ((kperf_kdebug_action_set() & 0x80000000) != 0)
    {
      int v8 = MEMORY[0x1B3EBD410]();
      type metadata accessor for KTraceRecordError();
      sub_1B3A066CC();
      swift_allocError();
      *(void *)uint64_t v9 = 0xD000000000000019;
      *(void *)(v9 + 8) = 0x80000001B3A7AED0;
      *(_DWORD *)(v9 + 16) = v8;
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
    uint64_t v3 = kperf_kdebug_filter_create();
    sub_1B3A70320();
    int v4 = kperf_kdebug_filter_add_desc();
    uint64_t v5 = swift_release();
    if (v4 < 0)
    {
      int v6 = MEMORY[0x1B3EBD410](v5);
      type metadata accessor for KTraceRecordError();
      sub_1B3A066CC();
      swift_allocError();
      *(void *)uint64_t v7 = 0xD00000000000001BLL;
      *(void *)(v7 + 8) = 0x80000001B3A7AEF0;
    }
    else
    {
      if ((kperf_kdebug_filter_set() & 0x80000000) == 0) {
        return MEMORY[0x1B3EBF390](v3);
      }
      int v6 = MEMORY[0x1B3EBD410]();
      type metadata accessor for KTraceRecordError();
      sub_1B3A066CC();
      swift_allocError();
      *(void *)uint64_t v7 = 0xD000000000000019;
      *(void *)(v7 + 8) = 0x80000001B3A7AF10;
    }
    *(_DWORD *)(v7 + 16) = v6;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return MEMORY[0x1B3EBF390](v3);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1B3A230CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A35250(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3A230F4(uint64_t a1)
{
  unint64_t v2 = sub_1B39ACF2C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A23130(uint64_t a1)
{
  unint64_t v2 = sub_1B39ACF2C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A2316C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B3A35380(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B3A2319C(char a1, unint64_t a2)
{
  if ((a1 & 1) == 0) {
    sub_1B3A70D20();
  }
  swift_bridgeObjectRelease();
  uint64_t result = kperf_timer_lightweight_pet_set();
  if ((result & 0x80000000) != 0)
  {
    int v4 = MEMORY[0x1B3EBD410]();
    type metadata accessor for KTraceRecordError();
    sub_1B3A066CC();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD000000000000018;
    *(void *)(v5 + 8) = 0x80000001B3A7AF30;
    goto LABEL_9;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (HIDWORD(a2))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t result = kperf_timer_pet_set();
  if ((result & 0x80000000) == 0) {
    return result;
  }
  int v4 = MEMORY[0x1B3EBD410]();
  type metadata accessor for KTraceRecordError();
  sub_1B3A066CC();
  swift_allocError();
  strcpy((char *)v5, "set PET timer");
  *(_WORD *)(v5 + 14) = -4864;
LABEL_9:
  *(_DWORD *)(v5 + 16) = v4;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_1B3A2331C()
{
  if (*v0) {
    return 0x646E4972656D6974;
  }
  else {
    return 1701080941;
  }
}

uint64_t sub_1B3A23354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B3A355D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3A2337C(uint64_t a1)
{
  unint64_t v2 = sub_1B3A35528();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B3A233B8(uint64_t a1)
{
  unint64_t v2 = sub_1B3A35528();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B3A233F4(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9CD5D88);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3A35528();
  sub_1B3A70E70();
  char v13 = v4;
  char v12 = 0;
  sub_1B3A3557C();
  sub_1B3A70CC0();
  if (!v2)
  {
    char v11 = 1;
    sub_1B3A70CB0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1B3A23570@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B3A356C0(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
  }
  return result;
}